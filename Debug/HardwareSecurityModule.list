
HardwareSecurityModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012344  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bc0  08012590  08012590  00013590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013150  08013150  00015180  2**0
                  CONTENTS
  4 .ARM          00000008  08013150  08013150  00014150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013158  08013158  00015180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013158  08013158  00014158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801315c  0801315c  0001415c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000180  20000000  08013160  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011234  20000180  080132e0  00015180  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  200113b4  080132e0  000153b4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00015180  2**0
                  CONTENTS, READONLY
 12 .debug_info   000276af  00000000  00000000  000151b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055ee  00000000  00000000  0003c865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ec0  00000000  00000000  00041e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000177f  00000000  00000000  00043d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039507  00000000  00000000  00045497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e7b3  00000000  00000000  0007e99e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014c1f2  00000000  00000000  000ad151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f9343  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b5c  00000000  00000000  001f9388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00201ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000180 	.word	0x20000180
 8000268:	00000000 	.word	0x00000000
 800026c:	08012578 	.word	0x08012578

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000184 	.word	0x20000184
 8000288:	08012578 	.word	0x08012578

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295
 800029c:	f04f 30ff 	movne.w	r0, #4294967295
 80002a0:	f000 b97e 	b.w	80005a0 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002c2:	460c      	mov	r4, r1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d14d      	bne.n	8000364 <__udivmoddi4+0xa8>
 80002c8:	428a      	cmp	r2, r1
 80002ca:	460f      	mov	r7, r1
 80002cc:	4684      	mov	ip, r0
 80002ce:	4696      	mov	lr, r2
 80002d0:	fab2 f382 	clz	r3, r2
 80002d4:	d960      	bls.n	8000398 <__udivmoddi4+0xdc>
 80002d6:	b14b      	cbz	r3, 80002ec <__udivmoddi4+0x30>
 80002d8:	fa02 fe03 	lsl.w	lr, r2, r3
 80002dc:	f1c3 0220 	rsb	r2, r3, #32
 80002e0:	409f      	lsls	r7, r3
 80002e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002f0:	fa1f f48e 	uxth.w	r4, lr
 80002f4:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002f8:	fbb7 f1f6 	udiv	r1, r7, r6
 80002fc:	fb06 7711 	mls	r7, r6, r1, r7
 8000300:	fb01 f004 	mul.w	r0, r1, r4
 8000304:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000308:	4290      	cmp	r0, r2
 800030a:	d908      	bls.n	800031e <__udivmoddi4+0x62>
 800030c:	eb1e 0202 	adds.w	r2, lr, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x60>
 8000316:	4290      	cmp	r0, r2
 8000318:	f200 812d 	bhi.w	8000576 <__udivmoddi4+0x2ba>
 800031c:	4639      	mov	r1, r7
 800031e:	1a12      	subs	r2, r2, r0
 8000320:	fa1f fc8c 	uxth.w	ip, ip
 8000324:	fbb2 f0f6 	udiv	r0, r2, r6
 8000328:	fb06 2210 	mls	r2, r6, r0, r2
 800032c:	fb00 f404 	mul.w	r4, r0, r4
 8000330:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000334:	4564      	cmp	r4, ip
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x8e>
 8000338:	eb1e 0c0c 	adds.w	ip, lr, ip
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x8c>
 8000342:	4564      	cmp	r4, ip
 8000344:	f200 811a 	bhi.w	800057c <__udivmoddi4+0x2c0>
 8000348:	4610      	mov	r0, r2
 800034a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034e:	ebac 0c04 	sub.w	ip, ip, r4
 8000352:	2100      	movs	r1, #0
 8000354:	b125      	cbz	r5, 8000360 <__udivmoddi4+0xa4>
 8000356:	fa2c f303 	lsr.w	r3, ip, r3
 800035a:	2200      	movs	r2, #0
 800035c:	e9c5 3200 	strd	r3, r2, [r5]
 8000360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d905      	bls.n	8000374 <__udivmoddi4+0xb8>
 8000368:	b10d      	cbz	r5, 800036e <__udivmoddi4+0xb2>
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	2100      	movs	r1, #0
 8000370:	4608      	mov	r0, r1
 8000372:	e7f5      	b.n	8000360 <__udivmoddi4+0xa4>
 8000374:	fab3 f183 	clz	r1, r3
 8000378:	2900      	cmp	r1, #0
 800037a:	d14d      	bne.n	8000418 <__udivmoddi4+0x15c>
 800037c:	42a3      	cmp	r3, r4
 800037e:	f0c0 80f2 	bcc.w	8000566 <__udivmoddi4+0x2aa>
 8000382:	4290      	cmp	r0, r2
 8000384:	f080 80ef 	bcs.w	8000566 <__udivmoddi4+0x2aa>
 8000388:	4606      	mov	r6, r0
 800038a:	4623      	mov	r3, r4
 800038c:	4608      	mov	r0, r1
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e6      	beq.n	8000360 <__udivmoddi4+0xa4>
 8000392:	e9c5 6300 	strd	r6, r3, [r5]
 8000396:	e7e3      	b.n	8000360 <__udivmoddi4+0xa4>
 8000398:	2b00      	cmp	r3, #0
 800039a:	f040 80a2 	bne.w	80004e2 <__udivmoddi4+0x226>
 800039e:	1a8a      	subs	r2, r1, r2
 80003a0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003a4:	fa1f f68e 	uxth.w	r6, lr
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 f4f7 	udiv	r4, r2, r7
 80003ae:	fb07 2014 	mls	r0, r7, r4, r2
 80003b2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb06 f004 	mul.w	r0, r6, r4
 80003be:	4290      	cmp	r0, r2
 80003c0:	d90f      	bls.n	80003e2 <__udivmoddi4+0x126>
 80003c2:	eb1e 0202 	adds.w	r2, lr, r2
 80003c6:	f104 38ff 	add.w	r8, r4, #4294967295
 80003ca:	bf2c      	ite	cs
 80003cc:	f04f 0901 	movcs.w	r9, #1
 80003d0:	f04f 0900 	movcc.w	r9, #0
 80003d4:	4290      	cmp	r0, r2
 80003d6:	d903      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003d8:	f1b9 0f00 	cmp.w	r9, #0
 80003dc:	f000 80c8 	beq.w	8000570 <__udivmoddi4+0x2b4>
 80003e0:	4644      	mov	r4, r8
 80003e2:	1a12      	subs	r2, r2, r0
 80003e4:	fa1f fc8c 	uxth.w	ip, ip
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	fb00 f606 	mul.w	r6, r0, r6
 80003f4:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003f8:	4566      	cmp	r6, ip
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x152>
 80003fc:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x150>
 8000406:	4566      	cmp	r6, ip
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c6>
 800040c:	4610      	mov	r0, r2
 800040e:	ebac 0c06 	sub.w	ip, ip, r6
 8000412:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000416:	e79d      	b.n	8000354 <__udivmoddi4+0x98>
 8000418:	f1c1 0620 	rsb	r6, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	fa20 fc06 	lsr.w	ip, r0, r6
 800042a:	40f4      	lsrs	r4, r6
 800042c:	408a      	lsls	r2, r1
 800042e:	431f      	orrs	r7, r3
 8000430:	ea4e 030c 	orr.w	r3, lr, ip
 8000434:	fa00 fe01 	lsl.w	lr, r0, r1
 8000438:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800043c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000440:	fa1f fc87 	uxth.w	ip, r7
 8000444:	fbb4 f0f8 	udiv	r0, r4, r8
 8000448:	fb08 4410 	mls	r4, r8, r0, r4
 800044c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000450:	fb00 f90c 	mul.w	r9, r0, ip
 8000454:	45a1      	cmp	r9, r4
 8000456:	d90e      	bls.n	8000476 <__udivmoddi4+0x1ba>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f100 3aff 	add.w	sl, r0, #4294967295
 800045e:	bf2c      	ite	cs
 8000460:	f04f 0b01 	movcs.w	fp, #1
 8000464:	f04f 0b00 	movcc.w	fp, #0
 8000468:	45a1      	cmp	r9, r4
 800046a:	d903      	bls.n	8000474 <__udivmoddi4+0x1b8>
 800046c:	f1bb 0f00 	cmp.w	fp, #0
 8000470:	f000 8093 	beq.w	800059a <__udivmoddi4+0x2de>
 8000474:	4650      	mov	r0, sl
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000482:	fb08 4413 	mls	r4, r8, r3, r4
 8000486:	fb03 fc0c 	mul.w	ip, r3, ip
 800048a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048e:	45a4      	cmp	ip, r4
 8000490:	d906      	bls.n	80004a0 <__udivmoddi4+0x1e4>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 38ff 	add.w	r8, r3, #4294967295
 8000498:	d201      	bcs.n	800049e <__udivmoddi4+0x1e2>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d87a      	bhi.n	8000594 <__udivmoddi4+0x2d8>
 800049e:	4643      	mov	r3, r8
 80004a0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a4:	eba4 040c 	sub.w	r4, r4, ip
 80004a8:	fba0 9802 	umull	r9, r8, r0, r2
 80004ac:	4544      	cmp	r4, r8
 80004ae:	46cc      	mov	ip, r9
 80004b0:	4643      	mov	r3, r8
 80004b2:	d302      	bcc.n	80004ba <__udivmoddi4+0x1fe>
 80004b4:	d106      	bne.n	80004c4 <__udivmoddi4+0x208>
 80004b6:	45ce      	cmp	lr, r9
 80004b8:	d204      	bcs.n	80004c4 <__udivmoddi4+0x208>
 80004ba:	3801      	subs	r0, #1
 80004bc:	ebb9 0c02 	subs.w	ip, r9, r2
 80004c0:	eb68 0307 	sbc.w	r3, r8, r7
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x222>
 80004c6:	ebbe 020c 	subs.w	r2, lr, ip
 80004ca:	eb64 0403 	sbc.w	r4, r4, r3
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	40cc      	lsrs	r4, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e73e      	b.n	8000360 <__udivmoddi4+0xa4>
 80004e2:	fa02 fe03 	lsl.w	lr, r2, r3
 80004e6:	f1c3 0120 	rsb	r1, r3, #32
 80004ea:	fa04 f203 	lsl.w	r2, r4, r3
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	40cc      	lsrs	r4, r1
 80004f4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004f8:	fa20 f101 	lsr.w	r1, r0, r1
 80004fc:	fa1f f68e 	uxth.w	r6, lr
 8000500:	fbb4 f0f7 	udiv	r0, r4, r7
 8000504:	430a      	orrs	r2, r1
 8000506:	fb07 4410 	mls	r4, r7, r0, r4
 800050a:	0c11      	lsrs	r1, r2, #16
 800050c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000510:	fb00 f406 	mul.w	r4, r0, r6
 8000514:	428c      	cmp	r4, r1
 8000516:	d90e      	bls.n	8000536 <__udivmoddi4+0x27a>
 8000518:	eb1e 0101 	adds.w	r1, lr, r1
 800051c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000520:	bf2c      	ite	cs
 8000522:	f04f 0901 	movcs.w	r9, #1
 8000526:	f04f 0900 	movcc.w	r9, #0
 800052a:	428c      	cmp	r4, r1
 800052c:	d902      	bls.n	8000534 <__udivmoddi4+0x278>
 800052e:	f1b9 0f00 	cmp.w	r9, #0
 8000532:	d02c      	beq.n	800058e <__udivmoddi4+0x2d2>
 8000534:	4640      	mov	r0, r8
 8000536:	1b09      	subs	r1, r1, r4
 8000538:	b292      	uxth	r2, r2
 800053a:	fbb1 f4f7 	udiv	r4, r1, r7
 800053e:	fb07 1114 	mls	r1, r7, r4, r1
 8000542:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000546:	fb04 f106 	mul.w	r1, r4, r6
 800054a:	4291      	cmp	r1, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x2a2>
 800054e:	eb1e 0202 	adds.w	r2, lr, r2
 8000552:	f104 38ff 	add.w	r8, r4, #4294967295
 8000556:	d201      	bcs.n	800055c <__udivmoddi4+0x2a0>
 8000558:	4291      	cmp	r1, r2
 800055a:	d815      	bhi.n	8000588 <__udivmoddi4+0x2cc>
 800055c:	4644      	mov	r4, r8
 800055e:	1a52      	subs	r2, r2, r1
 8000560:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000564:	e721      	b.n	80003aa <__udivmoddi4+0xee>
 8000566:	1a86      	subs	r6, r0, r2
 8000568:	eb64 0303 	sbc.w	r3, r4, r3
 800056c:	2001      	movs	r0, #1
 800056e:	e70e      	b.n	800038e <__udivmoddi4+0xd2>
 8000570:	3c02      	subs	r4, #2
 8000572:	4472      	add	r2, lr
 8000574:	e735      	b.n	80003e2 <__udivmoddi4+0x126>
 8000576:	3902      	subs	r1, #2
 8000578:	4472      	add	r2, lr
 800057a:	e6d0      	b.n	800031e <__udivmoddi4+0x62>
 800057c:	44f4      	add	ip, lr
 800057e:	3802      	subs	r0, #2
 8000580:	e6e3      	b.n	800034a <__udivmoddi4+0x8e>
 8000582:	44f4      	add	ip, lr
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x152>
 8000588:	3c02      	subs	r4, #2
 800058a:	4472      	add	r2, lr
 800058c:	e7e7      	b.n	800055e <__udivmoddi4+0x2a2>
 800058e:	3802      	subs	r0, #2
 8000590:	4471      	add	r1, lr
 8000592:	e7d0      	b.n	8000536 <__udivmoddi4+0x27a>
 8000594:	3b02      	subs	r3, #2
 8000596:	443c      	add	r4, r7
 8000598:	e782      	b.n	80004a0 <__udivmoddi4+0x1e4>
 800059a:	3802      	subs	r0, #2
 800059c:	443c      	add	r4, r7
 800059e:	e76a      	b.n	8000476 <__udivmoddi4+0x1ba>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <GetCommandName>:

#include <stdio.h>
#include <stdint.h>

static const char* GetCommandName(uint8_t cmd)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
    switch (cmd)
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	3b01      	subs	r3, #1
 80005b2:	2b0e      	cmp	r3, #14
 80005b4:	d830      	bhi.n	8000618 <GetCommandName+0x74>
 80005b6:	a201      	add	r2, pc, #4	@ (adr r2, 80005bc <GetCommandName+0x18>)
 80005b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005bc:	080005f9 	.word	0x080005f9
 80005c0:	080005fd 	.word	0x080005fd
 80005c4:	08000601 	.word	0x08000601
 80005c8:	08000605 	.word	0x08000605
 80005cc:	08000609 	.word	0x08000609
 80005d0:	0800060d 	.word	0x0800060d
 80005d4:	08000611 	.word	0x08000611
 80005d8:	08000619 	.word	0x08000619
 80005dc:	08000619 	.word	0x08000619
 80005e0:	08000619 	.word	0x08000619
 80005e4:	08000619 	.word	0x08000619
 80005e8:	08000619 	.word	0x08000619
 80005ec:	08000619 	.word	0x08000619
 80005f0:	08000619 	.word	0x08000619
 80005f4:	08000615 	.word	0x08000615
    {
        case CMD_ENCRYPT:   	return "Encrypt Operation";
 80005f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000628 <GetCommandName+0x84>)
 80005fa:	e00e      	b.n	800061a <GetCommandName+0x76>
        case CMD_DECRYPT:   	return "Decrypt Operation";
 80005fc:	4b0b      	ldr	r3, [pc, #44]	@ (800062c <GetCommandName+0x88>)
 80005fe:	e00c      	b.n	800061a <GetCommandName+0x76>
        case CMD_HASH:      	return "Hash Operation";
 8000600:	4b0b      	ldr	r3, [pc, #44]	@ (8000630 <GetCommandName+0x8c>)
 8000602:	e00a      	b.n	800061a <GetCommandName+0x76>
        case CMD_RANDOM:   		return "RNG Operation";
 8000604:	4b0b      	ldr	r3, [pc, #44]	@ (8000634 <GetCommandName+0x90>)
 8000606:	e008      	b.n	800061a <GetCommandName+0x76>
        case CMD_KEY_STORE:   	return "Key Storage Operation";
 8000608:	4b0b      	ldr	r3, [pc, #44]	@ (8000638 <GetCommandName+0x94>)
 800060a:	e006      	b.n	800061a <GetCommandName+0x76>
        case CMD_KEY_RETRIEVE:  return "Key Retrieve Operation";
 800060c:	4b0b      	ldr	r3, [pc, #44]	@ (800063c <GetCommandName+0x98>)
 800060e:	e004      	b.n	800061a <GetCommandName+0x76>
        case CMD_KEY_ERASE:   	return "Key Erase Operation";
 8000610:	4b0b      	ldr	r3, [pc, #44]	@ (8000640 <GetCommandName+0x9c>)
 8000612:	e002      	b.n	800061a <GetCommandName+0x76>
        case CMD_PING:   		return "Device Ping Operation";
 8000614:	4b0b      	ldr	r3, [pc, #44]	@ (8000644 <GetCommandName+0xa0>)
 8000616:	e000      	b.n	800061a <GetCommandName+0x76>
        default:            	return "Unknown Command";
 8000618:	4b0b      	ldr	r3, [pc, #44]	@ (8000648 <GetCommandName+0xa4>)
    }
}
 800061a:	4618      	mov	r0, r3
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	08012590 	.word	0x08012590
 800062c:	080125a4 	.word	0x080125a4
 8000630:	080125b8 	.word	0x080125b8
 8000634:	080125c8 	.word	0x080125c8
 8000638:	080125d8 	.word	0x080125d8
 800063c:	080125f0 	.word	0x080125f0
 8000640:	08012608 	.word	0x08012608
 8000644:	0801261c 	.word	0x0801261c
 8000648:	08012634 	.word	0x08012634

0800064c <GetOptionName>:

static const char* GetOptionName(uint8_t option)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
    switch (option)
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	3b01      	subs	r3, #1
 800065a:	2b3a      	cmp	r3, #58	@ 0x3a
 800065c:	f200 80a4 	bhi.w	80007a8 <GetOptionName+0x15c>
 8000660:	a201      	add	r2, pc, #4	@ (adr r2, 8000668 <GetOptionName+0x1c>)
 8000662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000666:	bf00      	nop
 8000668:	08000755 	.word	0x08000755
 800066c:	08000759 	.word	0x08000759
 8000670:	080007a9 	.word	0x080007a9
 8000674:	080007a9 	.word	0x080007a9
 8000678:	080007a9 	.word	0x080007a9
 800067c:	080007a9 	.word	0x080007a9
 8000680:	080007a9 	.word	0x080007a9
 8000684:	080007a9 	.word	0x080007a9
 8000688:	080007a9 	.word	0x080007a9
 800068c:	080007a9 	.word	0x080007a9
 8000690:	080007a9 	.word	0x080007a9
 8000694:	080007a9 	.word	0x080007a9
 8000698:	080007a9 	.word	0x080007a9
 800069c:	080007a9 	.word	0x080007a9
 80006a0:	080007a9 	.word	0x080007a9
 80006a4:	080007a9 	.word	0x080007a9
 80006a8:	0800075d 	.word	0x0800075d
 80006ac:	08000761 	.word	0x08000761
 80006b0:	080007a9 	.word	0x080007a9
 80006b4:	080007a9 	.word	0x080007a9
 80006b8:	080007a9 	.word	0x080007a9
 80006bc:	080007a9 	.word	0x080007a9
 80006c0:	080007a9 	.word	0x080007a9
 80006c4:	080007a9 	.word	0x080007a9
 80006c8:	080007a9 	.word	0x080007a9
 80006cc:	080007a9 	.word	0x080007a9
 80006d0:	080007a9 	.word	0x080007a9
 80006d4:	080007a9 	.word	0x080007a9
 80006d8:	080007a9 	.word	0x080007a9
 80006dc:	080007a9 	.word	0x080007a9
 80006e0:	080007a9 	.word	0x080007a9
 80006e4:	080007a9 	.word	0x080007a9
 80006e8:	08000765 	.word	0x08000765
 80006ec:	08000769 	.word	0x08000769
 80006f0:	0800076d 	.word	0x0800076d
 80006f4:	08000771 	.word	0x08000771
 80006f8:	08000775 	.word	0x08000775
 80006fc:	08000779 	.word	0x08000779
 8000700:	080007a9 	.word	0x080007a9
 8000704:	080007a9 	.word	0x080007a9
 8000708:	080007a9 	.word	0x080007a9
 800070c:	080007a9 	.word	0x080007a9
 8000710:	080007a9 	.word	0x080007a9
 8000714:	080007a9 	.word	0x080007a9
 8000718:	080007a9 	.word	0x080007a9
 800071c:	080007a9 	.word	0x080007a9
 8000720:	080007a9 	.word	0x080007a9
 8000724:	080007a9 	.word	0x080007a9
 8000728:	0800077d 	.word	0x0800077d
 800072c:	08000781 	.word	0x08000781
 8000730:	08000785 	.word	0x08000785
 8000734:	08000789 	.word	0x08000789
 8000738:	0800078d 	.word	0x0800078d
 800073c:	08000791 	.word	0x08000791
 8000740:	08000795 	.word	0x08000795
 8000744:	08000799 	.word	0x08000799
 8000748:	0800079d 	.word	0x0800079d
 800074c:	080007a1 	.word	0x080007a1
 8000750:	080007a5 	.word	0x080007a5
    {
    	case OPTION_ENCRYP_KEY128:	return "128-bit Encryption";
 8000754:	4b18      	ldr	r3, [pc, #96]	@ (80007b8 <GetOptionName+0x16c>)
 8000756:	e028      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_ENCRYP_KEY256:	return "256-bit Encryption";
 8000758:	4b18      	ldr	r3, [pc, #96]	@ (80007bc <GetOptionName+0x170>)
 800075a:	e026      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_DECRYP_KEY128:	return "128-bit Decryption";
 800075c:	4b18      	ldr	r3, [pc, #96]	@ (80007c0 <GetOptionName+0x174>)
 800075e:	e024      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_DECRYP_KEY256:	return "256-bit Decryption";
 8000760:	4b18      	ldr	r3, [pc, #96]	@ (80007c4 <GetOptionName+0x178>)
 8000762:	e022      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_HASH_SHA224:	return "SHA224 Hashing Algorithm";
 8000764:	4b18      	ldr	r3, [pc, #96]	@ (80007c8 <GetOptionName+0x17c>)
 8000766:	e020      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_HASH_SHA256:	return "SHA256 Hashing Algorithm";
 8000768:	4b18      	ldr	r3, [pc, #96]	@ (80007cc <GetOptionName+0x180>)
 800076a:	e01e      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_HASH_SHA384:	return "SHA384 Hashing Algorithm";
 800076c:	4b18      	ldr	r3, [pc, #96]	@ (80007d0 <GetOptionName+0x184>)
 800076e:	e01c      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_HASH_SHA512:	return "SHA512 Hashing Algorithm";
 8000770:	4b18      	ldr	r3, [pc, #96]	@ (80007d4 <GetOptionName+0x188>)
 8000772:	e01a      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_HMAC_SHA224:	return "SHA224 HMAC Algorithm";
 8000774:	4b18      	ldr	r3, [pc, #96]	@ (80007d8 <GetOptionName+0x18c>)
 8000776:	e018      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_HMAC_SHA256:	return "SHA256 HMAC Algorithm";
 8000778:	4b18      	ldr	r3, [pc, #96]	@ (80007dc <GetOptionName+0x190>)
 800077a:	e016      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_RNG_0004:		return "4-byte Random Number Generation";
 800077c:	4b18      	ldr	r3, [pc, #96]	@ (80007e0 <GetOptionName+0x194>)
 800077e:	e014      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_RNG_0008:		return "8-byte Random Number Generation";
 8000780:	4b18      	ldr	r3, [pc, #96]	@ (80007e4 <GetOptionName+0x198>)
 8000782:	e012      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_RNG_0016:		return "16-byte Random Number Generation";
 8000784:	4b18      	ldr	r3, [pc, #96]	@ (80007e8 <GetOptionName+0x19c>)
 8000786:	e010      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_RNG_0032:		return "32-byte Random Number Generation";
 8000788:	4b18      	ldr	r3, [pc, #96]	@ (80007ec <GetOptionName+0x1a0>)
 800078a:	e00e      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_RNG_0064:		return "64-byte Random Number Generation";
 800078c:	4b18      	ldr	r3, [pc, #96]	@ (80007f0 <GetOptionName+0x1a4>)
 800078e:	e00c      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_RNG_0128:		return "128-byte Random Number Generation";
 8000790:	4b18      	ldr	r3, [pc, #96]	@ (80007f4 <GetOptionName+0x1a8>)
 8000792:	e00a      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_RNG_0256:		return "256-byte Random Number Generation";
 8000794:	4b18      	ldr	r3, [pc, #96]	@ (80007f8 <GetOptionName+0x1ac>)
 8000796:	e008      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_RNG_0512:		return "512-byte Random Number Generation";
 8000798:	4b18      	ldr	r3, [pc, #96]	@ (80007fc <GetOptionName+0x1b0>)
 800079a:	e006      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_RNG_1024:		return "1024-byte Random Number Generation";
 800079c:	4b18      	ldr	r3, [pc, #96]	@ (8000800 <GetOptionName+0x1b4>)
 800079e:	e004      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_RNG_2048:		return "2048-byte Random Number Generation";
 80007a0:	4b18      	ldr	r3, [pc, #96]	@ (8000804 <GetOptionName+0x1b8>)
 80007a2:	e002      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_RNG_4096:		return "4096-byte Random Number Generation";
 80007a4:	4b18      	ldr	r3, [pc, #96]	@ (8000808 <GetOptionName+0x1bc>)
 80007a6:	e000      	b.n	80007aa <GetOptionName+0x15e>
		default:					return "Unknown Command"; 	break;
 80007a8:	4b18      	ldr	r3, [pc, #96]	@ (800080c <GetOptionName+0x1c0>)
    }
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	08012644 	.word	0x08012644
 80007bc:	08012658 	.word	0x08012658
 80007c0:	0801266c 	.word	0x0801266c
 80007c4:	08012680 	.word	0x08012680
 80007c8:	08012694 	.word	0x08012694
 80007cc:	080126b0 	.word	0x080126b0
 80007d0:	080126cc 	.word	0x080126cc
 80007d4:	080126e8 	.word	0x080126e8
 80007d8:	08012704 	.word	0x08012704
 80007dc:	0801271c 	.word	0x0801271c
 80007e0:	08012734 	.word	0x08012734
 80007e4:	08012754 	.word	0x08012754
 80007e8:	08012774 	.word	0x08012774
 80007ec:	08012798 	.word	0x08012798
 80007f0:	080127bc 	.word	0x080127bc
 80007f4:	080127e0 	.word	0x080127e0
 80007f8:	08012804 	.word	0x08012804
 80007fc:	08012828 	.word	0x08012828
 8000800:	0801284c 	.word	0x0801284c
 8000804:	08012870 	.word	0x08012870
 8000808:	08012894 	.word	0x08012894
 800080c:	08012634 	.word	0x08012634

08000810 <LogParsedPacket>:

static void LogParsedPacket(const ParsedPacket_t* packet)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b094      	sub	sp, #80	@ 0x50
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
    if (!packet)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d103      	bne.n	8000826 <LogParsedPacket+0x16>
    {
        log_error("ParsedPacket is NULL");
 800081e:	4841      	ldr	r0, [pc, #260]	@ (8000924 <LogParsedPacket+0x114>)
 8000820:	f000 fdf2 	bl	8001408 <log_error>
        return;
 8000824:	e07b      	b.n	800091e <LogParsedPacket+0x10e>
    }

    log_debug("PARSED PACKET:");
 8000826:	4840      	ldr	r0, [pc, #256]	@ (8000928 <LogParsedPacket+0x118>)
 8000828:	f000 fda0 	bl	800136c <log_debug>
    log_debug("TXID       : %08X", packet->transactionID);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4619      	mov	r1, r3
 8000832:	483e      	ldr	r0, [pc, #248]	@ (800092c <LogParsedPacket+0x11c>)
 8000834:	f000 fd9a 	bl	800136c <log_debug>
    log_debug("CMD        : %02X", GetCommandName(packet->cmd));
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	791b      	ldrb	r3, [r3, #4]
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff feb1 	bl	80005a4 <GetCommandName>
 8000842:	4603      	mov	r3, r0
 8000844:	4619      	mov	r1, r3
 8000846:	483a      	ldr	r0, [pc, #232]	@ (8000930 <LogParsedPacket+0x120>)
 8000848:	f000 fd90 	bl	800136c <log_debug>
    log_debug("OPTION     : %02X", GetOptionName(packet->option));
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	795b      	ldrb	r3, [r3, #5]
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff fefb 	bl	800064c <GetOptionName>
 8000856:	4603      	mov	r3, r0
 8000858:	4619      	mov	r1, r3
 800085a:	4836      	ldr	r0, [pc, #216]	@ (8000934 <LogParsedPacket+0x124>)
 800085c:	f000 fd86 	bl	800136c <log_debug>
    log_debug("INPUT SIZE : %04X", packet->inputSize);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	88db      	ldrh	r3, [r3, #6]
 8000864:	4619      	mov	r1, r3
 8000866:	4834      	ldr	r0, [pc, #208]	@ (8000938 <LogParsedPacket+0x128>)
 8000868:	f000 fd80 	bl	800136c <log_debug>

    const uint8_t* data = packet->inputData;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3308      	adds	r3, #8
 8000870:	643b      	str	r3, [r7, #64]	@ 0x40
    uint16_t size = packet->inputSize;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	88db      	ldrh	r3, [r3, #6]
 8000876:	87fb      	strh	r3, [r7, #62]	@ 0x3e

    for (uint16_t i = 0; i < size; i += bytesPerLine)
 8000878:	2300      	movs	r3, #0
 800087a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800087e:	e049      	b.n	8000914 <LogParsedPacket+0x104>
    {
        char line[bytesPerLine * 3 + 1] = {0};
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	f107 0310 	add.w	r3, r7, #16
 8000888:	222d      	movs	r2, #45	@ 0x2d
 800088a:	2100      	movs	r1, #0
 800088c:	4618      	mov	r0, r3
 800088e:	f010 fe95 	bl	80115bc <memset>
        char* ptr = line;
 8000892:	f107 030c 	add.w	r3, r7, #12
 8000896:	64bb      	str	r3, [r7, #72]	@ 0x48

        for (uint16_t j = 0; j < bytesPerLine && (i + j) < size; ++j)
 8000898:	2300      	movs	r3, #0
 800089a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800089e:	e017      	b.n	80008d0 <LogParsedPacket+0xc0>
        {
            ptr += sprintf(ptr, "%02X ", data[i + j]);
 80008a0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80008a4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80008a8:	4413      	add	r3, r2
 80008aa:	461a      	mov	r2, r3
 80008ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80008ae:	4413      	add	r3, r2
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	461a      	mov	r2, r3
 80008b4:	4921      	ldr	r1, [pc, #132]	@ (800093c <LogParsedPacket+0x12c>)
 80008b6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80008b8:	f010 fde4 	bl	8011484 <siprintf>
 80008bc:	4603      	mov	r3, r0
 80008be:	461a      	mov	r2, r3
 80008c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80008c2:	4413      	add	r3, r2
 80008c4:	64bb      	str	r3, [r7, #72]	@ 0x48
        for (uint16_t j = 0; j < bytesPerLine && (i + j) < size; ++j)
 80008c6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80008ca:	3301      	adds	r3, #1
 80008cc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80008d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80008d4:	2b0f      	cmp	r3, #15
 80008d6:	d807      	bhi.n	80008e8 <LogParsedPacket+0xd8>
 80008d8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80008dc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80008e0:	441a      	add	r2, r3
 80008e2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80008e4:	429a      	cmp	r2, r3
 80008e6:	dbdb      	blt.n	80008a0 <LogParsedPacket+0x90>
        }

        if (i == 0)
 80008e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d106      	bne.n	80008fe <LogParsedPacket+0xee>
        {
        	log_debug("INPUT DATA : %s", line);
 80008f0:	f107 030c 	add.w	r3, r7, #12
 80008f4:	4619      	mov	r1, r3
 80008f6:	4812      	ldr	r0, [pc, #72]	@ (8000940 <LogParsedPacket+0x130>)
 80008f8:	f000 fd38 	bl	800136c <log_debug>
 80008fc:	e005      	b.n	800090a <LogParsedPacket+0xfa>
        }
        else
        {
        	log_debug("             %s", line);
 80008fe:	f107 030c 	add.w	r3, r7, #12
 8000902:	4619      	mov	r1, r3
 8000904:	480f      	ldr	r0, [pc, #60]	@ (8000944 <LogParsedPacket+0x134>)
 8000906:	f000 fd31 	bl	800136c <log_debug>
    for (uint16_t i = 0; i < size; i += bytesPerLine)
 800090a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800090e:	3310      	adds	r3, #16
 8000910:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8000914:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8000918:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800091a:	429a      	cmp	r2, r3
 800091c:	d3b0      	bcc.n	8000880 <LogParsedPacket+0x70>
        }
    }
}
 800091e:	3750      	adds	r7, #80	@ 0x50
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	080128b8 	.word	0x080128b8
 8000928:	080128d0 	.word	0x080128d0
 800092c:	080128e0 	.word	0x080128e0
 8000930:	080128f4 	.word	0x080128f4
 8000934:	08012908 	.word	0x08012908
 8000938:	0801291c 	.word	0x0801291c
 800093c:	08012930 	.word	0x08012930
 8000940:	08012938 	.word	0x08012938
 8000944:	08012948 	.word	0x08012948

08000948 <LogResponsePacket>:

static void LogResponsePacket(const ResponsePacket_t* packet)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b094      	sub	sp, #80	@ 0x50
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
    if (!packet)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d103      	bne.n	800095e <LogResponsePacket+0x16>
    {
        log_error("ResponsePacket is NULL");
 8000956:	483b      	ldr	r0, [pc, #236]	@ (8000a44 <LogResponsePacket+0xfc>)
 8000958:	f000 fd56 	bl	8001408 <log_error>
        return;
 800095c:	e06f      	b.n	8000a3e <LogResponsePacket+0xf6>
    }

    log_debug("RESPONSE PACKET");
 800095e:	483a      	ldr	r0, [pc, #232]	@ (8000a48 <LogResponsePacket+0x100>)
 8000960:	f000 fd04 	bl	800136c <log_debug>
    log_debug("TXID        : %08X", packet->transactionID);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4619      	mov	r1, r3
 800096a:	4838      	ldr	r0, [pc, #224]	@ (8000a4c <LogResponsePacket+0x104>)
 800096c:	f000 fcfe 	bl	800136c <log_debug>
    log_debug("OUTPUT SIZE : %04X", packet->outputSize);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	889b      	ldrh	r3, [r3, #4]
 8000974:	4619      	mov	r1, r3
 8000976:	4836      	ldr	r0, [pc, #216]	@ (8000a50 <LogResponsePacket+0x108>)
 8000978:	f000 fcf8 	bl	800136c <log_debug>
    log_debug("EOD FLAG    : %08X", packet->out_eod_flag);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000982:	689b      	ldr	r3, [r3, #8]
 8000984:	4619      	mov	r1, r3
 8000986:	4833      	ldr	r0, [pc, #204]	@ (8000a54 <LogResponsePacket+0x10c>)
 8000988:	f000 fcf0 	bl	800136c <log_debug>

    const uint8_t* data = packet->outputData;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	3306      	adds	r3, #6
 8000990:	643b      	str	r3, [r7, #64]	@ 0x40
    uint16_t size = packet->outputSize;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	889b      	ldrh	r3, [r3, #4]
 8000996:	87fb      	strh	r3, [r7, #62]	@ 0x3e

    for (uint16_t i = 0; i < size; i += bytesPerLine)
 8000998:	2300      	movs	r3, #0
 800099a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800099e:	e049      	b.n	8000a34 <LogResponsePacket+0xec>
    {
        char line[bytesPerLine * 3 + 1] = {0};
 80009a0:	2300      	movs	r3, #0
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	f107 0310 	add.w	r3, r7, #16
 80009a8:	222d      	movs	r2, #45	@ 0x2d
 80009aa:	2100      	movs	r1, #0
 80009ac:	4618      	mov	r0, r3
 80009ae:	f010 fe05 	bl	80115bc <memset>
        char* ptr = line;
 80009b2:	f107 030c 	add.w	r3, r7, #12
 80009b6:	64bb      	str	r3, [r7, #72]	@ 0x48

        for (uint16_t j = 0; j < bytesPerLine && (i + j) < size; ++j)
 80009b8:	2300      	movs	r3, #0
 80009ba:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80009be:	e017      	b.n	80009f0 <LogResponsePacket+0xa8>
        {
            ptr += sprintf(ptr, "%02X ", data[i + j]);
 80009c0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80009c4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80009c8:	4413      	add	r3, r2
 80009ca:	461a      	mov	r2, r3
 80009cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80009ce:	4413      	add	r3, r2
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	461a      	mov	r2, r3
 80009d4:	4920      	ldr	r1, [pc, #128]	@ (8000a58 <LogResponsePacket+0x110>)
 80009d6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80009d8:	f010 fd54 	bl	8011484 <siprintf>
 80009dc:	4603      	mov	r3, r0
 80009de:	461a      	mov	r2, r3
 80009e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80009e2:	4413      	add	r3, r2
 80009e4:	64bb      	str	r3, [r7, #72]	@ 0x48
        for (uint16_t j = 0; j < bytesPerLine && (i + j) < size; ++j)
 80009e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80009ea:	3301      	adds	r3, #1
 80009ec:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80009f0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80009f4:	2b0f      	cmp	r3, #15
 80009f6:	d807      	bhi.n	8000a08 <LogResponsePacket+0xc0>
 80009f8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80009fc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000a00:	441a      	add	r2, r3
 8000a02:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000a04:	429a      	cmp	r2, r3
 8000a06:	dbdb      	blt.n	80009c0 <LogResponsePacket+0x78>
        }

        if (i == 0)
 8000a08:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d106      	bne.n	8000a1e <LogResponsePacket+0xd6>
            log_debug("OUTPUT DATA : %s", line);
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	4619      	mov	r1, r3
 8000a16:	4811      	ldr	r0, [pc, #68]	@ (8000a5c <LogResponsePacket+0x114>)
 8000a18:	f000 fca8 	bl	800136c <log_debug>
 8000a1c:	e005      	b.n	8000a2a <LogResponsePacket+0xe2>
        else
            log_debug("              %s", line);
 8000a1e:	f107 030c 	add.w	r3, r7, #12
 8000a22:	4619      	mov	r1, r3
 8000a24:	480e      	ldr	r0, [pc, #56]	@ (8000a60 <LogResponsePacket+0x118>)
 8000a26:	f000 fca1 	bl	800136c <log_debug>
    for (uint16_t i = 0; i < size; i += bytesPerLine)
 8000a2a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000a2e:	3310      	adds	r3, #16
 8000a30:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8000a34:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8000a38:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	d3b0      	bcc.n	80009a0 <LogResponsePacket+0x58>
    }
}
 8000a3e:	3750      	adds	r7, #80	@ 0x50
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	08012958 	.word	0x08012958
 8000a48:	08012970 	.word	0x08012970
 8000a4c:	08012980 	.word	0x08012980
 8000a50:	08012994 	.word	0x08012994
 8000a54:	080129a8 	.word	0x080129a8
 8000a58:	08012930 	.word	0x08012930
 8000a5c:	080129bc 	.word	0x080129bc
 8000a60:	080129d0 	.word	0x080129d0

08000a64 <LogTransmitBuffer>:

static void LogTransmitBuffer(const uint8_t* usb_tx_buffer, uint32_t usb_tx_index)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b092      	sub	sp, #72	@ 0x48
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
    if (!usb_tx_buffer || usb_tx_index == 0)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d002      	beq.n	8000a7a <LogTransmitBuffer+0x16>
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d103      	bne.n	8000a82 <LogTransmitBuffer+0x1e>
    {
        log_debug("USB TX buffer is empty or NULL.");
 8000a7a:	4826      	ldr	r0, [pc, #152]	@ (8000b14 <LogTransmitBuffer+0xb0>)
 8000a7c:	f000 fc76 	bl	800136c <log_debug>
        return;
 8000a80:	e045      	b.n	8000b0e <LogTransmitBuffer+0xaa>
    }


    for (uint32_t i = 0; i < usb_tx_index; i += bytesPerLine)
 8000a82:	2300      	movs	r3, #0
 8000a84:	647b      	str	r3, [r7, #68]	@ 0x44
 8000a86:	e03e      	b.n	8000b06 <LogTransmitBuffer+0xa2>
    {
        char line[bytesPerLine * 3 + 1] = {0};
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	f107 030c 	add.w	r3, r7, #12
 8000a90:	222d      	movs	r2, #45	@ 0x2d
 8000a92:	2100      	movs	r1, #0
 8000a94:	4618      	mov	r0, r3
 8000a96:	f010 fd91 	bl	80115bc <memset>
        char* ptr = line;
 8000a9a:	f107 0308 	add.w	r3, r7, #8
 8000a9e:	643b      	str	r3, [r7, #64]	@ 0x40

        for (uint32_t j = 0; j < bytesPerLine && (i + j) < usb_tx_index; ++j)
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000aa4:	e012      	b.n	8000acc <LogTransmitBuffer+0x68>
        {
            ptr += sprintf(ptr, "%02X ", usb_tx_buffer[i + j]);
 8000aa6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000aa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000aaa:	4413      	add	r3, r2
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	4413      	add	r3, r2
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	4918      	ldr	r1, [pc, #96]	@ (8000b18 <LogTransmitBuffer+0xb4>)
 8000ab6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000ab8:	f010 fce4 	bl	8011484 <siprintf>
 8000abc:	4603      	mov	r3, r0
 8000abe:	461a      	mov	r2, r3
 8000ac0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ac2:	4413      	add	r3, r2
 8000ac4:	643b      	str	r3, [r7, #64]	@ 0x40
        for (uint32_t j = 0; j < bytesPerLine && (i + j) < usb_tx_index; ++j)
 8000ac6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ac8:	3301      	adds	r3, #1
 8000aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000acc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ace:	2b0f      	cmp	r3, #15
 8000ad0:	d805      	bhi.n	8000ade <LogTransmitBuffer+0x7a>
 8000ad2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000ad4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ad6:	4413      	add	r3, r2
 8000ad8:	683a      	ldr	r2, [r7, #0]
 8000ada:	429a      	cmp	r2, r3
 8000adc:	d8e3      	bhi.n	8000aa6 <LogTransmitBuffer+0x42>
        }

        if (i == 0)
 8000ade:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d107      	bne.n	8000af4 <LogTransmitBuffer+0x90>
            log_debug("USB Tx [%lu bytes]: %s", usb_tx_index, line);
 8000ae4:	f107 0308 	add.w	r3, r7, #8
 8000ae8:	461a      	mov	r2, r3
 8000aea:	6839      	ldr	r1, [r7, #0]
 8000aec:	480b      	ldr	r0, [pc, #44]	@ (8000b1c <LogTransmitBuffer+0xb8>)
 8000aee:	f000 fc3d 	bl	800136c <log_debug>
 8000af2:	e005      	b.n	8000b00 <LogTransmitBuffer+0x9c>
        else
            log_debug("                 %s", line);  // 17-character indent to align with line 1
 8000af4:	f107 0308 	add.w	r3, r7, #8
 8000af8:	4619      	mov	r1, r3
 8000afa:	4809      	ldr	r0, [pc, #36]	@ (8000b20 <LogTransmitBuffer+0xbc>)
 8000afc:	f000 fc36 	bl	800136c <log_debug>
    for (uint32_t i = 0; i < usb_tx_index; i += bytesPerLine)
 8000b00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b02:	3310      	adds	r3, #16
 8000b04:	647b      	str	r3, [r7, #68]	@ 0x44
 8000b06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	d3bc      	bcc.n	8000a88 <LogTransmitBuffer+0x24>
    }
}
 8000b0e:	3748      	adds	r7, #72	@ 0x48
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	080129e4 	.word	0x080129e4
 8000b18:	08012930 	.word	0x08012930
 8000b1c:	08012a04 	.word	0x08012a04
 8000b20:	08012a1c 	.word	0x08012a1c

08000b24 <HSMManager_Init>:

void HSMManager_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0

  log_init(LOG_LEVEL_DEBUG);
 8000b28:	2000      	movs	r0, #0
 8000b2a:	f000 fbc3 	bl	80012b4 <log_init>
  log_info("HSM Initialized.");
 8000b2e:	4834      	ldr	r0, [pc, #208]	@ (8000c00 <HSMManager_Init+0xdc>)
 8000b30:	f000 fc36 	bl	80013a0 <log_info>
  HAL_Delay(1000);
 8000b34:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b38:	f002 f980 	bl	8002e3c <HAL_Delay>
  log_info("Turning LED ON.");
 8000b3c:	4831      	ldr	r0, [pc, #196]	@ (8000c04 <HSMManager_Init+0xe0>)
 8000b3e:	f000 fc2f 	bl	80013a0 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000b42:	2000      	movs	r0, #0
 8000b44:	f001 ff18 	bl	8002978 <BSP_LED_Toggle>
 8000b48:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b4c:	f002 f976 	bl	8002e3c <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000b50:	2002      	movs	r0, #2
 8000b52:	f001 ff11 	bl	8002978 <BSP_LED_Toggle>
 8000b56:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b5a:	f002 f96f 	bl	8002e3c <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000b5e:	2001      	movs	r0, #1
 8000b60:	f001 ff0a 	bl	8002978 <BSP_LED_Toggle>
 8000b64:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b68:	f002 f968 	bl	8002e3c <HAL_Delay>
  log_info("Turning LED OFF.");
 8000b6c:	4826      	ldr	r0, [pc, #152]	@ (8000c08 <HSMManager_Init+0xe4>)
 8000b6e:	f000 fc17 	bl	80013a0 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000b72:	2000      	movs	r0, #0
 8000b74:	f001 ff00 	bl	8002978 <BSP_LED_Toggle>
 8000b78:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b7c:	f002 f95e 	bl	8002e3c <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000b80:	2002      	movs	r0, #2
 8000b82:	f001 fef9 	bl	8002978 <BSP_LED_Toggle>
 8000b86:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b8a:	f002 f957 	bl	8002e3c <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000b8e:	2001      	movs	r0, #1
 8000b90:	f001 fef2 	bl	8002978 <BSP_LED_Toggle>
 8000b94:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b98:	f002 f950 	bl	8002e3c <HAL_Delay>
  log_info("Turning LED ON.");
 8000b9c:	4819      	ldr	r0, [pc, #100]	@ (8000c04 <HSMManager_Init+0xe0>)
 8000b9e:	f000 fbff 	bl	80013a0 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f001 fee8 	bl	8002978 <BSP_LED_Toggle>
 8000ba8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bac:	f002 f946 	bl	8002e3c <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000bb0:	2002      	movs	r0, #2
 8000bb2:	f001 fee1 	bl	8002978 <BSP_LED_Toggle>
 8000bb6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bba:	f002 f93f 	bl	8002e3c <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	f001 feda 	bl	8002978 <BSP_LED_Toggle>
 8000bc4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bc8:	f002 f938 	bl	8002e3c <HAL_Delay>
  log_info("Turning LED OFF.");
 8000bcc:	480e      	ldr	r0, [pc, #56]	@ (8000c08 <HSMManager_Init+0xe4>)
 8000bce:	f000 fbe7 	bl	80013a0 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	f001 fed0 	bl	8002978 <BSP_LED_Toggle>
 8000bd8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bdc:	f002 f92e 	bl	8002e3c <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000be0:	2002      	movs	r0, #2
 8000be2:	f001 fec9 	bl	8002978 <BSP_LED_Toggle>
 8000be6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bea:	f002 f927 	bl	8002e3c <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000bee:	2001      	movs	r0, #1
 8000bf0:	f001 fec2 	bl	8002978 <BSP_LED_Toggle>
 8000bf4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bf8:	f002 f920 	bl	8002e3c <HAL_Delay>
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	08012a30 	.word	0x08012a30
 8000c04:	08012a44 	.word	0x08012a44
 8000c08:	08012a54 	.word	0x08012a54

08000c0c <HSMManager_ProcessCommand>:


OperationStatus_t HSMManager_ProcessCommand(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	f5ad 3d90 	sub.w	sp, sp, #73728	@ 0x12000
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
	 if (usb_rx_complete)
 8000c16:	4b43      	ldr	r3, [pc, #268]	@ (8000d24 <HSMManager_ProcessCommand+0x118>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d079      	beq.n	8000d14 <HSMManager_ProcessCommand+0x108>
	 {
		 ParsedPacket_t request;
		 ResponsePacket_t response;
		 uint8_t usb_tx_buffer[MAX_USB_DATA_SIZE];
		 uint16_t usb_tx_index;
		 ParseStatus_t status = PacketParser_Parse(usb_rx_buffer, usb_rx_index, &request);
 8000c20:	4b41      	ldr	r3, [pc, #260]	@ (8000d28 <HSMManager_ProcessCommand+0x11c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	b299      	uxth	r1, r3
 8000c26:	f107 0318 	add.w	r3, r7, #24
 8000c2a:	3b18      	subs	r3, #24
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	483f      	ldr	r0, [pc, #252]	@ (8000d2c <HSMManager_ProcessCommand+0x120>)
 8000c30:	f000 fa66 	bl	8001100 <PacketParser_Parse>
 8000c34:	4603      	mov	r3, r0
 8000c36:	f507 3290 	add.w	r2, r7, #73728	@ 0x12000
 8000c3a:	f102 0217 	add.w	r2, r2, #23
 8000c3e:	7013      	strb	r3, [r2, #0]

		 if (status == PARSE_SUCCESS)
 8000c40:	f507 3390 	add.w	r3, r7, #73728	@ 0x12000
 8000c44:	f103 0317 	add.w	r3, r3, #23
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d159      	bne.n	8000d02 <HSMManager_ProcessCommand+0xf6>
		 {
			 log_debug("Packet Parsed Successfully:");
 8000c4e:	4838      	ldr	r0, [pc, #224]	@ (8000d30 <HSMManager_ProcessCommand+0x124>)
 8000c50:	f000 fb8c 	bl	800136c <log_debug>
			 LogParsedPacket(&request);
 8000c54:	f107 0318 	add.w	r3, r7, #24
 8000c58:	3b18      	subs	r3, #24
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff fdd8 	bl	8000810 <LogParsedPacket>
			 OperationDispatcher_Dispatch(&request, &response);
 8000c60:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000c64:	f102 0218 	add.w	r2, r2, #24
 8000c68:	3a10      	subs	r2, #16
 8000c6a:	f107 0318 	add.w	r3, r7, #24
 8000c6e:	3b18      	subs	r3, #24
 8000c70:	4611      	mov	r1, r2
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 f860 	bl	8000d38 <OperationDispatcher_Dispatch>
			 LogResponsePacket(&response);
 8000c78:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000c7c:	f103 0318 	add.w	r3, r3, #24
 8000c80:	3b10      	subs	r3, #16
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fe60 	bl	8000948 <LogResponsePacket>
			 usb_tx_index = response.outputSize + 10;
 8000c88:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000c8c:	f103 0318 	add.w	r3, r3, #24
 8000c90:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8000c94:	330a      	adds	r3, #10
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	f507 3290 	add.w	r2, r7, #73728	@ 0x12000
 8000c9c:	f102 0214 	add.w	r2, r2, #20
 8000ca0:	8013      	strh	r3, [r2, #0]
			 PacketBuilder_Build(&response, usb_tx_buffer, &usb_tx_index);
 8000ca2:	f507 3290 	add.w	r2, r7, #73728	@ 0x12000
 8000ca6:	f102 0214 	add.w	r2, r2, #20
 8000caa:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 8000cae:	f101 0118 	add.w	r1, r1, #24
 8000cb2:	3904      	subs	r1, #4
 8000cb4:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000cb8:	f103 0318 	add.w	r3, r3, #24
 8000cbc:	3b10      	subs	r3, #16
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 f96e 	bl	8000fa0 <PacketBuilder_Build>
			 LogTransmitBuffer(usb_tx_buffer, usb_tx_index);
 8000cc4:	f507 3390 	add.w	r3, r7, #73728	@ 0x12000
 8000cc8:	f103 0314 	add.w	r3, r3, #20
 8000ccc:	881b      	ldrh	r3, [r3, #0]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8000cd4:	f103 0318 	add.w	r3, r3, #24
 8000cd8:	3b04      	subs	r3, #4
 8000cda:	4611      	mov	r1, r2
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fec1 	bl	8000a64 <LogTransmitBuffer>
			 USB_Transmit(usb_tx_buffer, usb_tx_index);
 8000ce2:	f507 3390 	add.w	r3, r7, #73728	@ 0x12000
 8000ce6:	f103 0314 	add.w	r3, r3, #20
 8000cea:	881b      	ldrh	r3, [r3, #0]
 8000cec:	461a      	mov	r2, r3
 8000cee:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8000cf2:	f103 0318 	add.w	r3, r3, #24
 8000cf6:	3b04      	subs	r3, #4
 8000cf8:	4611      	mov	r1, r2
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f00e fb20 	bl	800f340 <USB_Transmit>
 8000d00:	e008      	b.n	8000d14 <HSMManager_ProcessCommand+0x108>
		 }
		 else
		 {
			 log_error("Parsing failed with status code: %d", status);
 8000d02:	f507 3390 	add.w	r3, r7, #73728	@ 0x12000
 8000d06:	f103 0317 	add.w	r3, r3, #23
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4809      	ldr	r0, [pc, #36]	@ (8000d34 <HSMManager_ProcessCommand+0x128>)
 8000d10:	f000 fb7a 	bl	8001408 <log_error>
		 }
	 }
	 return 0;
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	f507 3790 	add.w	r7, r7, #73728	@ 0x12000
 8000d1c:	3718      	adds	r7, #24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20010f40 	.word	0x20010f40
 8000d28:	20010f3c 	.word	0x20010f3c
 8000d2c:	20000f3c 	.word	0x20000f3c
 8000d30:	08012a68 	.word	0x08012a68
 8000d34:	08012a84 	.word	0x08012a84

08000d38 <OperationDispatcher_Dispatch>:
#include "constants.h"
#include "types.h"
#include "Logger.h"

OperationStatus_t OperationDispatcher_Dispatch(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
    log_info("Dispatching Command.");
 8000d42:	4832      	ldr	r0, [pc, #200]	@ (8000e0c <OperationDispatcher_Dispatch+0xd4>)
 8000d44:	f000 fb2c 	bl	80013a0 <log_info>

    switch (request->cmd)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	791b      	ldrb	r3, [r3, #4]
 8000d4c:	3b01      	subs	r3, #1
 8000d4e:	2b0e      	cmp	r3, #14
 8000d50:	d851      	bhi.n	8000df6 <OperationDispatcher_Dispatch+0xbe>
 8000d52:	a201      	add	r2, pc, #4	@ (adr r2, 8000d58 <OperationDispatcher_Dispatch+0x20>)
 8000d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d58:	08000d95 	.word	0x08000d95
 8000d5c:	08000da5 	.word	0x08000da5
 8000d60:	08000db5 	.word	0x08000db5
 8000d64:	08000dc5 	.word	0x08000dc5
 8000d68:	08000dd7 	.word	0x08000dd7
 8000d6c:	08000dd7 	.word	0x08000dd7
 8000d70:	08000dd7 	.word	0x08000dd7
 8000d74:	08000df7 	.word	0x08000df7
 8000d78:	08000df7 	.word	0x08000df7
 8000d7c:	08000df7 	.word	0x08000df7
 8000d80:	08000df7 	.word	0x08000df7
 8000d84:	08000df7 	.word	0x08000df7
 8000d88:	08000df7 	.word	0x08000df7
 8000d8c:	08000df7 	.word	0x08000df7
 8000d90:	08000de7 	.word	0x08000de7
    {
        case CMD_ENCRYPT:
        	log_info("Calling Encryption Operation.");
 8000d94:	481e      	ldr	r0, [pc, #120]	@ (8000e10 <OperationDispatcher_Dispatch+0xd8>)
 8000d96:	f000 fb03 	bl	80013a0 <log_info>
        	log_warn("Encryption Operation not supported");
 8000d9a:	481e      	ldr	r0, [pc, #120]	@ (8000e14 <OperationDispatcher_Dispatch+0xdc>)
 8000d9c:	f000 fb1a 	bl	80013d4 <log_warn>
            return OPERATION_UNKNOWN_ERROR;
 8000da0:	230b      	movs	r3, #11
 8000da2:	e02f      	b.n	8000e04 <OperationDispatcher_Dispatch+0xcc>

        case CMD_DECRYPT:
        	log_info("Calling Decryption Operation.");
 8000da4:	481c      	ldr	r0, [pc, #112]	@ (8000e18 <OperationDispatcher_Dispatch+0xe0>)
 8000da6:	f000 fafb 	bl	80013a0 <log_info>
        	log_warn("Decryption Operation not supported");
 8000daa:	481c      	ldr	r0, [pc, #112]	@ (8000e1c <OperationDispatcher_Dispatch+0xe4>)
 8000dac:	f000 fb12 	bl	80013d4 <log_warn>
            return OPERATION_UNKNOWN_ERROR;
 8000db0:	230b      	movs	r3, #11
 8000db2:	e027      	b.n	8000e04 <OperationDispatcher_Dispatch+0xcc>

        case CMD_HASH:
        	log_info("Calling Hashing Operation.");
 8000db4:	481a      	ldr	r0, [pc, #104]	@ (8000e20 <OperationDispatcher_Dispatch+0xe8>)
 8000db6:	f000 faf3 	bl	80013a0 <log_info>
        	log_warn("Hashing Operation not supported");
 8000dba:	481a      	ldr	r0, [pc, #104]	@ (8000e24 <OperationDispatcher_Dispatch+0xec>)
 8000dbc:	f000 fb0a 	bl	80013d4 <log_warn>
            return OPERATION_UNKNOWN_ERROR;
 8000dc0:	230b      	movs	r3, #11
 8000dc2:	e01f      	b.n	8000e04 <OperationDispatcher_Dispatch+0xcc>

        case CMD_RANDOM:
        	log_info("Calling RNG Operation.");
 8000dc4:	4818      	ldr	r0, [pc, #96]	@ (8000e28 <OperationDispatcher_Dispatch+0xf0>)
 8000dc6:	f000 faeb 	bl	80013a0 <log_info>
            return RandomHandler_Handle(request, response);
 8000dca:	6839      	ldr	r1, [r7, #0]
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f000 f889 	bl	8000ee4 <RandomHandler_Handle>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	e016      	b.n	8000e04 <OperationDispatcher_Dispatch+0xcc>

        case CMD_KEY_STORE:
        case CMD_KEY_RETRIEVE:
        case CMD_KEY_ERASE:
        	log_info("Calling Key Management.");
 8000dd6:	4815      	ldr	r0, [pc, #84]	@ (8000e2c <OperationDispatcher_Dispatch+0xf4>)
 8000dd8:	f000 fae2 	bl	80013a0 <log_info>
        	log_warn("Key Management Operation not supported");
 8000ddc:	4814      	ldr	r0, [pc, #80]	@ (8000e30 <OperationDispatcher_Dispatch+0xf8>)
 8000dde:	f000 faf9 	bl	80013d4 <log_warn>
            return OPERATION_UNKNOWN_ERROR;
 8000de2:	230b      	movs	r3, #11
 8000de4:	e00e      	b.n	8000e04 <OperationDispatcher_Dispatch+0xcc>

        case CMD_PING:
        	log_info("Calling Ping Operation.");
 8000de6:	4813      	ldr	r0, [pc, #76]	@ (8000e34 <OperationDispatcher_Dispatch+0xfc>)
 8000de8:	f000 fada 	bl	80013a0 <log_info>
        	log_warn("Ping Operation not supported");
 8000dec:	4812      	ldr	r0, [pc, #72]	@ (8000e38 <OperationDispatcher_Dispatch+0x100>)
 8000dee:	f000 faf1 	bl	80013d4 <log_warn>
            return OPERATION_UNKNOWN_ERROR;
 8000df2:	230b      	movs	r3, #11
 8000df4:	e006      	b.n	8000e04 <OperationDispatcher_Dispatch+0xcc>

        default:
            log_error("Invalid Command code received");
 8000df6:	4811      	ldr	r0, [pc, #68]	@ (8000e3c <OperationDispatcher_Dispatch+0x104>)
 8000df8:	f000 fb06 	bl	8001408 <log_error>
            log_error("Returning Failure Status code");
 8000dfc:	4810      	ldr	r0, [pc, #64]	@ (8000e40 <OperationDispatcher_Dispatch+0x108>)
 8000dfe:	f000 fb03 	bl	8001408 <log_error>
            return OPERATION_INVALID_CMD;
 8000e02:	2301      	movs	r3, #1
    }
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	08012aa8 	.word	0x08012aa8
 8000e10:	08012ac0 	.word	0x08012ac0
 8000e14:	08012ae0 	.word	0x08012ae0
 8000e18:	08012b04 	.word	0x08012b04
 8000e1c:	08012b24 	.word	0x08012b24
 8000e20:	08012b48 	.word	0x08012b48
 8000e24:	08012b64 	.word	0x08012b64
 8000e28:	08012b84 	.word	0x08012b84
 8000e2c:	08012b9c 	.word	0x08012b9c
 8000e30:	08012bb4 	.word	0x08012bb4
 8000e34:	08012bdc 	.word	0x08012bdc
 8000e38:	08012bf4 	.word	0x08012bf4
 8000e3c:	08012c14 	.word	0x08012c14
 8000e40:	08012c34 	.word	0x08012c34

08000e44 <CalculateByteSize>:
#define MAX_RANDOM_BYTES 4096
// Externally link RNG Instance
extern RNG_HandleTypeDef hrng;

uint16_t CalculateByteSize(uint8_t option_member)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
	uint16_t byteSize;
	switch(option_member)
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	3b31      	subs	r3, #49	@ 0x31
 8000e52:	2b0a      	cmp	r3, #10
 8000e54:	d83e      	bhi.n	8000ed4 <CalculateByteSize+0x90>
 8000e56:	a201      	add	r2, pc, #4	@ (adr r2, 8000e5c <CalculateByteSize+0x18>)
 8000e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e5c:	08000e89 	.word	0x08000e89
 8000e60:	08000e8f 	.word	0x08000e8f
 8000e64:	08000e95 	.word	0x08000e95
 8000e68:	08000e9b 	.word	0x08000e9b
 8000e6c:	08000ea1 	.word	0x08000ea1
 8000e70:	08000ea7 	.word	0x08000ea7
 8000e74:	08000ead 	.word	0x08000ead
 8000e78:	08000eb5 	.word	0x08000eb5
 8000e7c:	08000ebd 	.word	0x08000ebd
 8000e80:	08000ec5 	.word	0x08000ec5
 8000e84:	08000ecd 	.word	0x08000ecd
	{
		case OPTION_RNG_0004: byteSize = 4; break;
 8000e88:	2304      	movs	r3, #4
 8000e8a:	81fb      	strh	r3, [r7, #14]
 8000e8c:	e023      	b.n	8000ed6 <CalculateByteSize+0x92>
		case OPTION_RNG_0008: byteSize = 8; break;
 8000e8e:	2308      	movs	r3, #8
 8000e90:	81fb      	strh	r3, [r7, #14]
 8000e92:	e020      	b.n	8000ed6 <CalculateByteSize+0x92>
		case OPTION_RNG_0016: byteSize = 16; break;
 8000e94:	2310      	movs	r3, #16
 8000e96:	81fb      	strh	r3, [r7, #14]
 8000e98:	e01d      	b.n	8000ed6 <CalculateByteSize+0x92>
		case OPTION_RNG_0032: byteSize = 32; break;
 8000e9a:	2320      	movs	r3, #32
 8000e9c:	81fb      	strh	r3, [r7, #14]
 8000e9e:	e01a      	b.n	8000ed6 <CalculateByteSize+0x92>
		case OPTION_RNG_0064: byteSize = 64; break;
 8000ea0:	2340      	movs	r3, #64	@ 0x40
 8000ea2:	81fb      	strh	r3, [r7, #14]
 8000ea4:	e017      	b.n	8000ed6 <CalculateByteSize+0x92>
		case OPTION_RNG_0128: byteSize = 128; break;
 8000ea6:	2380      	movs	r3, #128	@ 0x80
 8000ea8:	81fb      	strh	r3, [r7, #14]
 8000eaa:	e014      	b.n	8000ed6 <CalculateByteSize+0x92>
		case OPTION_RNG_0256: byteSize = 256; break;
 8000eac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000eb0:	81fb      	strh	r3, [r7, #14]
 8000eb2:	e010      	b.n	8000ed6 <CalculateByteSize+0x92>
		case OPTION_RNG_0512: byteSize = 512; break;
 8000eb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000eb8:	81fb      	strh	r3, [r7, #14]
 8000eba:	e00c      	b.n	8000ed6 <CalculateByteSize+0x92>
		case OPTION_RNG_1024: byteSize = 1024; break;
 8000ebc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ec0:	81fb      	strh	r3, [r7, #14]
 8000ec2:	e008      	b.n	8000ed6 <CalculateByteSize+0x92>
		case OPTION_RNG_2048: byteSize = 2048; break;
 8000ec4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000ec8:	81fb      	strh	r3, [r7, #14]
 8000eca:	e004      	b.n	8000ed6 <CalculateByteSize+0x92>
		case OPTION_RNG_4096: byteSize = 4096; break;
 8000ecc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ed0:	81fb      	strh	r3, [r7, #14]
 8000ed2:	e000      	b.n	8000ed6 <CalculateByteSize+0x92>
		default: break;
 8000ed4:	bf00      	nop
	}
	return byteSize;
 8000ed6:	89fb      	ldrh	r3, [r7, #14]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <RandomHandler_Handle>:

OperationStatus_t RandomHandler_Handle(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
    log_info("Handling Random Number Generation operation.");
 8000eee:	4826      	ldr	r0, [pc, #152]	@ (8000f88 <RandomHandler_Handle+0xa4>)
 8000ef0:	f000 fa56 	bl	80013a0 <log_info>
    // Retrieve requested OPTION half-word from Request Packet
    uint8_t option_val = (request->option);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	795b      	ldrb	r3, [r3, #5]
 8000ef8:	75bb      	strb	r3, [r7, #22]
    // Set the requested Random Number size
    uint16_t numBytes = CalculateByteSize(option_val);
 8000efa:	7dbb      	ldrb	r3, [r7, #22]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ffa1 	bl	8000e44 <CalculateByteSize>
 8000f02:	4603      	mov	r3, r0
 8000f04:	82bb      	strh	r3, [r7, #20]
    log_info("Generating %d bytes of Random Number", numBytes);
 8000f06:	8abb      	ldrh	r3, [r7, #20]
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4820      	ldr	r0, [pc, #128]	@ (8000f8c <RandomHandler_Handle+0xa8>)
 8000f0c:	f000 fa48 	bl	80013a0 <log_info>
    // Check if the requested size is within the limits
    if (numBytes == 0 || numBytes > MAX_RANDOM_BYTES)
 8000f10:	8abb      	ldrh	r3, [r7, #20]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d003      	beq.n	8000f1e <RandomHandler_Handle+0x3a>
 8000f16:	8abb      	ldrh	r3, [r7, #20]
 8000f18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000f1c:	d904      	bls.n	8000f28 <RandomHandler_Handle+0x44>
    {
        log_error("Requested random byte count is invalid.");
 8000f1e:	481c      	ldr	r0, [pc, #112]	@ (8000f90 <RandomHandler_Handle+0xac>)
 8000f20:	f000 fa72 	bl	8001408 <log_error>
        return OPERATION_INVALID_OPTION;
 8000f24:	2302      	movs	r3, #2
 8000f26:	e02a      	b.n	8000f7e <RandomHandler_Handle+0x9a>
    // Declare a status handler for RNG calls
    HAL_StatusTypeDef hal_status;
    // Declare a 32-bit variable to store generated word
    uint32_t randomValue;
    // Iterate through loop till required number of random words are filled
    for (uint8_t i = 0; i < numBytes/4; ++i)
 8000f28:	2300      	movs	r3, #0
 8000f2a:	75fb      	strb	r3, [r7, #23]
 8000f2c:	e019      	b.n	8000f62 <RandomHandler_Handle+0x7e>
    {
    	// Call HAL API to generate 32-bit random word
    	hal_status = HAL_RNG_GenerateRandomNumber(&hrng, &randomValue);
 8000f2e:	f107 030c 	add.w	r3, r7, #12
 8000f32:	4619      	mov	r1, r3
 8000f34:	4817      	ldr	r0, [pc, #92]	@ (8000f94 <RandomHandler_Handle+0xb0>)
 8000f36:	f00a fa1f 	bl	800b378 <HAL_RNG_GenerateRandomNumber>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	74fb      	strb	r3, [r7, #19]
    	// Check if API call returned successfully
	    if (hal_status != HAL_OK)
 8000f3e:	7cfb      	ldrb	r3, [r7, #19]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d004      	beq.n	8000f4e <RandomHandler_Handle+0x6a>
	    {
	    	log_error("Failed to generate random number from RNG peripheral.");
 8000f44:	4814      	ldr	r0, [pc, #80]	@ (8000f98 <RandomHandler_Handle+0xb4>)
 8000f46:	f000 fa5f 	bl	8001408 <log_error>
		    return OPERATION_RANDOM_GEN_FAIL;
 8000f4a:	2306      	movs	r3, #6
 8000f4c:	e017      	b.n	8000f7e <RandomHandler_Handle+0x9a>
	    }
	    // Append generated random word to response packet
        response->outputData[i] = (uint8_t)(randomValue & 0xFF);
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	7dfb      	ldrb	r3, [r7, #23]
 8000f52:	b2d1      	uxtb	r1, r2
 8000f54:	683a      	ldr	r2, [r7, #0]
 8000f56:	4413      	add	r3, r2
 8000f58:	460a      	mov	r2, r1
 8000f5a:	719a      	strb	r2, [r3, #6]
    for (uint8_t i = 0; i < numBytes/4; ++i)
 8000f5c:	7dfb      	ldrb	r3, [r7, #23]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	75fb      	strb	r3, [r7, #23]
 8000f62:	7dfb      	ldrb	r3, [r7, #23]
 8000f64:	b29a      	uxth	r2, r3
 8000f66:	8abb      	ldrh	r3, [r7, #20]
 8000f68:	089b      	lsrs	r3, r3, #2
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d3de      	bcc.n	8000f2e <RandomHandler_Handle+0x4a>
    }
    // Set the Output Size to number of randomly generated bytes
    response->outputSize = numBytes;
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	8aba      	ldrh	r2, [r7, #20]
 8000f74:	809a      	strh	r2, [r3, #4]
    log_info("RNG Operation complete.");
 8000f76:	4809      	ldr	r0, [pc, #36]	@ (8000f9c <RandomHandler_Handle+0xb8>)
 8000f78:	f000 fa12 	bl	80013a0 <log_info>
    return OPERATION_SUCCESS;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	08012c54 	.word	0x08012c54
 8000f8c:	08012c84 	.word	0x08012c84
 8000f90:	08012cac 	.word	0x08012cac
 8000f94:	20000240 	.word	0x20000240
 8000f98:	08012cd4 	.word	0x08012cd4
 8000f9c:	08012d0c 	.word	0x08012d0c

08000fa0 <PacketBuilder_Build>:
#include "Logger.h"
#include <string.h>


BuildStatus_t PacketBuilder_Build(const ResponsePacket_t* responsePacket, uint8_t* outBuffer, uint16_t* outLength)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
	log_debug("Checking if Response Packet is NULL");
 8000fac:	484e      	ldr	r0, [pc, #312]	@ (80010e8 <PacketBuilder_Build+0x148>)
 8000fae:	f000 f9dd 	bl	800136c <log_debug>
	// Check if Response, Output and Output Size are NULL
    if (!responsePacket || !outBuffer || !outLength)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d005      	beq.n	8000fc4 <PacketBuilder_Build+0x24>
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d002      	beq.n	8000fc4 <PacketBuilder_Build+0x24>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d101      	bne.n	8000fc8 <PacketBuilder_Build+0x28>
    {
    	return BUILD_NULL_POINTER;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e08b      	b.n	80010e0 <PacketBuilder_Build+0x140>
    }
    log_debug("Checking if Output Size is under limits");
 8000fc8:	4848      	ldr	r0, [pc, #288]	@ (80010ec <PacketBuilder_Build+0x14c>)
 8000fca:	f000 f9cf 	bl	800136c <log_debug>
    // Check if Output Size is under the specified limits
    if (responsePacket->outputSize > MAX_OUTPUT_DATA_SIZE)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	889b      	ldrh	r3, [r3, #4]
 8000fd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000fd6:	d901      	bls.n	8000fdc <PacketBuilder_Build+0x3c>
    {
    	return BUILD_OUTPUT_TOO_LARGE;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	e081      	b.n	80010e0 <PacketBuilder_Build+0x140>
    }
    // Set Index to start of Data Stream
    uint16_t index = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	82fb      	strh	r3, [r7, #22]
    log_debug("Adding Transaction ID to Out Buffer");
 8000fe0:	4843      	ldr	r0, [pc, #268]	@ (80010f0 <PacketBuilder_Build+0x150>)
 8000fe2:	f000 f9c3 	bl	800136c <log_debug>
    // Fill Data Stream with the corresponding Transaction ID
    outBuffer[index++] = (responsePacket->transactionID >> 24) & 0xFF;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	0e1a      	lsrs	r2, r3, #24
 8000fec:	8afb      	ldrh	r3, [r7, #22]
 8000fee:	1c59      	adds	r1, r3, #1
 8000ff0:	82f9      	strh	r1, [r7, #22]
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	440b      	add	r3, r1
 8000ff8:	b2d2      	uxtb	r2, r2
 8000ffa:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (responsePacket->transactionID >> 16) & 0xFF;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	0c1a      	lsrs	r2, r3, #16
 8001002:	8afb      	ldrh	r3, [r7, #22]
 8001004:	1c59      	adds	r1, r3, #1
 8001006:	82f9      	strh	r1, [r7, #22]
 8001008:	4619      	mov	r1, r3
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	440b      	add	r3, r1
 800100e:	b2d2      	uxtb	r2, r2
 8001010:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (responsePacket->transactionID >> 8)  & 0xFF;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	0a1a      	lsrs	r2, r3, #8
 8001018:	8afb      	ldrh	r3, [r7, #22]
 800101a:	1c59      	adds	r1, r3, #1
 800101c:	82f9      	strh	r1, [r7, #22]
 800101e:	4619      	mov	r1, r3
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	440b      	add	r3, r1
 8001024:	b2d2      	uxtb	r2, r2
 8001026:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (responsePacket->transactionID)       & 0xFF;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	8afb      	ldrh	r3, [r7, #22]
 800102e:	1c59      	adds	r1, r3, #1
 8001030:	82f9      	strh	r1, [r7, #22]
 8001032:	4619      	mov	r1, r3
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	440b      	add	r3, r1
 8001038:	b2d2      	uxtb	r2, r2
 800103a:	701a      	strb	r2, [r3, #0]
    log_debug("Adding Output Data Size to Out Buffer");
 800103c:	482d      	ldr	r0, [pc, #180]	@ (80010f4 <PacketBuilder_Build+0x154>)
 800103e:	f000 f995 	bl	800136c <log_debug>
    // Fill Data Stream with the Output Data Size
    outBuffer[index++] = (responsePacket->outputSize >> 8) & 0xFF;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	889b      	ldrh	r3, [r3, #4]
 8001046:	0a1b      	lsrs	r3, r3, #8
 8001048:	b29a      	uxth	r2, r3
 800104a:	8afb      	ldrh	r3, [r7, #22]
 800104c:	1c59      	adds	r1, r3, #1
 800104e:	82f9      	strh	r1, [r7, #22]
 8001050:	4619      	mov	r1, r3
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	440b      	add	r3, r1
 8001056:	b2d2      	uxtb	r2, r2
 8001058:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (responsePacket->outputSize)      & 0xFF;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	889a      	ldrh	r2, [r3, #4]
 800105e:	8afb      	ldrh	r3, [r7, #22]
 8001060:	1c59      	adds	r1, r3, #1
 8001062:	82f9      	strh	r1, [r7, #22]
 8001064:	4619      	mov	r1, r3
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	440b      	add	r3, r1
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	701a      	strb	r2, [r3, #0]
    // Copy Output Data contents to Data Stream
    log_debug("Copying Output Data to Out Buffer");
 800106e:	4822      	ldr	r0, [pc, #136]	@ (80010f8 <PacketBuilder_Build+0x158>)
 8001070:	f000 f97c 	bl	800136c <log_debug>
    memcpy(&outBuffer[index], responsePacket->outputData, responsePacket->outputSize);
 8001074:	8afb      	ldrh	r3, [r7, #22]
 8001076:	68ba      	ldr	r2, [r7, #8]
 8001078:	18d0      	adds	r0, r2, r3
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	1d99      	adds	r1, r3, #6
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	889b      	ldrh	r3, [r3, #4]
 8001082:	461a      	mov	r2, r3
 8001084:	f010 fb15 	bl	80116b2 <memcpy>
    // Set Index to point to EOD Flag
    index += responsePacket->outputSize;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	889a      	ldrh	r2, [r3, #4]
 800108c:	8afb      	ldrh	r3, [r7, #22]
 800108e:	4413      	add	r3, r2
 8001090:	82fb      	strh	r3, [r7, #22]
    log_debug("Adding Outward EOD Flag to Out Buffer");
 8001092:	481a      	ldr	r0, [pc, #104]	@ (80010fc <PacketBuilder_Build+0x15c>)
 8001094:	f000 f96a 	bl	800136c <log_debug>
    // Add EOD Flag to Data Stream
    outBuffer[index++] = (OUT_EOD_FLAG >> 24) & 0xFF;
 8001098:	8afb      	ldrh	r3, [r7, #22]
 800109a:	1c5a      	adds	r2, r3, #1
 800109c:	82fa      	strh	r2, [r7, #22]
 800109e:	461a      	mov	r2, r3
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	4413      	add	r3, r2
 80010a4:	22ca      	movs	r2, #202	@ 0xca
 80010a6:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (OUT_EOD_FLAG >> 16) & 0xFF;
 80010a8:	8afb      	ldrh	r3, [r7, #22]
 80010aa:	1c5a      	adds	r2, r3, #1
 80010ac:	82fa      	strh	r2, [r7, #22]
 80010ae:	461a      	mov	r2, r3
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	4413      	add	r3, r2
 80010b4:	22fe      	movs	r2, #254	@ 0xfe
 80010b6:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (OUT_EOD_FLAG >> 8)  & 0xFF;
 80010b8:	8afb      	ldrh	r3, [r7, #22]
 80010ba:	1c5a      	adds	r2, r3, #1
 80010bc:	82fa      	strh	r2, [r7, #22]
 80010be:	461a      	mov	r2, r3
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	4413      	add	r3, r2
 80010c4:	22ba      	movs	r2, #186	@ 0xba
 80010c6:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (OUT_EOD_FLAG)       & 0xFF;
 80010c8:	8afb      	ldrh	r3, [r7, #22]
 80010ca:	1c5a      	adds	r2, r3, #1
 80010cc:	82fa      	strh	r2, [r7, #22]
 80010ce:	461a      	mov	r2, r3
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	4413      	add	r3, r2
 80010d4:	22be      	movs	r2, #190	@ 0xbe
 80010d6:	701a      	strb	r2, [r3, #0]
    // Set Index to point to End of Data Stream
    *outLength = index;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	8afa      	ldrh	r2, [r7, #22]
 80010dc:	801a      	strh	r2, [r3, #0]
    // Return to indicate successful Packet Build
    return BUILD_SUCCESS;
 80010de:	2300      	movs	r3, #0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3718      	adds	r7, #24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	08012d24 	.word	0x08012d24
 80010ec:	08012d48 	.word	0x08012d48
 80010f0:	08012d70 	.word	0x08012d70
 80010f4:	08012d94 	.word	0x08012d94
 80010f8:	08012dbc 	.word	0x08012dbc
 80010fc:	08012de0 	.word	0x08012de0

08001100 <PacketParser_Parse>:
#include "constants.h"
#include "Logger.h"
#include <string.h>

ParseStatus_t PacketParser_Parse(const uint8_t* rawData, uint16_t rawLength, ParsedPacket_t* parsedPacket)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	460b      	mov	r3, r1
 800110a:	607a      	str	r2, [r7, #4]
 800110c:	817b      	strh	r3, [r7, #10]
	log_debug("Checking if Data Stream or Packet Structure is NULL.");
 800110e:	485d      	ldr	r0, [pc, #372]	@ (8001284 <PacketParser_Parse+0x184>)
 8001110:	f000 f92c 	bl	800136c <log_debug>
	// Check if Data Stream or Packet structure is NULL
	if (!rawData || !parsedPacket)
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d002      	beq.n	8001120 <PacketParser_Parse+0x20>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d104      	bne.n	800112a <PacketParser_Parse+0x2a>
    {
		log_error("Data Stream or Packet Structure is NULL");
 8001120:	4859      	ldr	r0, [pc, #356]	@ (8001288 <PacketParser_Parse+0x188>)
 8001122:	f000 f971 	bl	8001408 <log_error>
    	return PARSE_NULL_POINTER;
 8001126:	2303      	movs	r3, #3
 8001128:	e0a7      	b.n	800127a <PacketParser_Parse+0x17a>
    }
	log_debug("Checking if Data Stream contains less than 12 bytes.");
 800112a:	4858      	ldr	r0, [pc, #352]	@ (800128c <PacketParser_Parse+0x18c>)
 800112c:	f000 f91e 	bl	800136c <log_debug>
    // Check if Data Stream contains Data of valid length
    if (rawLength < 12)
 8001130:	897b      	ldrh	r3, [r7, #10]
 8001132:	2b0b      	cmp	r3, #11
 8001134:	d804      	bhi.n	8001140 <PacketParser_Parse+0x40>
    {
    	log_error("Data stream contain less than 12 bytes");
 8001136:	4856      	ldr	r0, [pc, #344]	@ (8001290 <PacketParser_Parse+0x190>)
 8001138:	f000 f966 	bl	8001408 <log_error>
    	return PARSE_INVALID_LENGTH;
 800113c:	2301      	movs	r3, #1
 800113e:	e09c      	b.n	800127a <PacketParser_Parse+0x17a>
    }
    // Set Index to start of Data Stream
    uint16_t index = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	82fb      	strh	r3, [r7, #22]
    log_debug("Filling up Transaction ID.");
 8001144:	4853      	ldr	r0, [pc, #332]	@ (8001294 <PacketParser_Parse+0x194>)
 8001146:	f000 f911 	bl	800136c <log_debug>
    // Retrieve Transaction ID from Data Stream
    parsedPacket->transactionID = (rawData[index]     << 24) |
 800114a:	8afb      	ldrh	r3, [r7, #22]
 800114c:	68fa      	ldr	r2, [r7, #12]
 800114e:	4413      	add	r3, r2
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	061a      	lsls	r2, r3, #24
                                  (rawData[index + 1] << 16) |
 8001154:	8afb      	ldrh	r3, [r7, #22]
 8001156:	3301      	adds	r3, #1
 8001158:	68f9      	ldr	r1, [r7, #12]
 800115a:	440b      	add	r3, r1
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	041b      	lsls	r3, r3, #16
    parsedPacket->transactionID = (rawData[index]     << 24) |
 8001160:	431a      	orrs	r2, r3
                                  (rawData[index + 2] << 8)  |
 8001162:	8afb      	ldrh	r3, [r7, #22]
 8001164:	3302      	adds	r3, #2
 8001166:	68f9      	ldr	r1, [r7, #12]
 8001168:	440b      	add	r3, r1
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	021b      	lsls	r3, r3, #8
                                  (rawData[index + 1] << 16) |
 800116e:	4313      	orrs	r3, r2
                                  (rawData[index + 3]);
 8001170:	8afa      	ldrh	r2, [r7, #22]
 8001172:	3203      	adds	r2, #3
 8001174:	68f9      	ldr	r1, [r7, #12]
 8001176:	440a      	add	r2, r1
 8001178:	7812      	ldrb	r2, [r2, #0]
                                  (rawData[index + 2] << 8)  |
 800117a:	4313      	orrs	r3, r2
 800117c:	461a      	mov	r2, r3
    parsedPacket->transactionID = (rawData[index]     << 24) |
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	601a      	str	r2, [r3, #0]
    // Set Index to point CMD byte
    index += 4;
 8001182:	8afb      	ldrh	r3, [r7, #22]
 8001184:	3304      	adds	r3, #4
 8001186:	82fb      	strh	r3, [r7, #22]
    log_debug("Filling up CMD, OPTION and INPUT_SIZE fields.");
 8001188:	4843      	ldr	r0, [pc, #268]	@ (8001298 <PacketParser_Parse+0x198>)
 800118a:	f000 f8ef 	bl	800136c <log_debug>
    // Retrieve CMD byte from Data Stream
    parsedPacket->cmd = rawData[index++];
 800118e:	8afb      	ldrh	r3, [r7, #22]
 8001190:	1c5a      	adds	r2, r3, #1
 8001192:	82fa      	strh	r2, [r7, #22]
 8001194:	461a      	mov	r2, r3
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	4413      	add	r3, r2
 800119a:	781a      	ldrb	r2, [r3, #0]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	711a      	strb	r2, [r3, #4]
    // Retrieve OPTION byte from Data Stream
    parsedPacket->option = rawData[index++];
 80011a0:	8afb      	ldrh	r3, [r7, #22]
 80011a2:	1c5a      	adds	r2, r3, #1
 80011a4:	82fa      	strh	r2, [r7, #22]
 80011a6:	461a      	mov	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4413      	add	r3, r2
 80011ac:	781a      	ldrb	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	715a      	strb	r2, [r3, #5]
    // Retrieve INPUT_SIZE half-word from Data Stream
    parsedPacket->inputSize = (rawData[index] << 8) | rawData[index + 1];
 80011b2:	8afb      	ldrh	r3, [r7, #22]
 80011b4:	68fa      	ldr	r2, [r7, #12]
 80011b6:	4413      	add	r3, r2
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	021b      	lsls	r3, r3, #8
 80011bc:	b21a      	sxth	r2, r3
 80011be:	8afb      	ldrh	r3, [r7, #22]
 80011c0:	3301      	adds	r3, #1
 80011c2:	68f9      	ldr	r1, [r7, #12]
 80011c4:	440b      	add	r3, r1
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	b21b      	sxth	r3, r3
 80011ca:	4313      	orrs	r3, r2
 80011cc:	b21b      	sxth	r3, r3
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	80da      	strh	r2, [r3, #6]
    // Set Index to point INPUT_DATA
    index += 2;
 80011d4:	8afb      	ldrh	r3, [r7, #22]
 80011d6:	3302      	adds	r3, #2
 80011d8:	82fb      	strh	r3, [r7, #22]
    log_debug("Checking if INPUT_SIZE is within the limits.");
 80011da:	4830      	ldr	r0, [pc, #192]	@ (800129c <PacketParser_Parse+0x19c>)
 80011dc:	f000 f8c6 	bl	800136c <log_debug>
    // Check if INPUT_SIZE is under the prescribed limit
    if (parsedPacket->inputSize > MAX_INPUT_DATA_SIZE || ((index - 1) + parsedPacket->inputSize + 4) > rawLength)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	88db      	ldrh	r3, [r3, #6]
 80011e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80011e8:	d808      	bhi.n	80011fc <PacketParser_Parse+0xfc>
 80011ea:	8afb      	ldrh	r3, [r7, #22]
 80011ec:	3b01      	subs	r3, #1
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	88d2      	ldrh	r2, [r2, #6]
 80011f2:	4413      	add	r3, r2
 80011f4:	1cda      	adds	r2, r3, #3
 80011f6:	897b      	ldrh	r3, [r7, #10]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	db04      	blt.n	8001206 <PacketParser_Parse+0x106>
    {
    	log_error("Input Data Size is too big.");
 80011fc:	4828      	ldr	r0, [pc, #160]	@ (80012a0 <PacketParser_Parse+0x1a0>)
 80011fe:	f000 f903 	bl	8001408 <log_error>
        return PARSE_INPUT_TOO_LARGE;
 8001202:	2304      	movs	r3, #4
 8001204:	e039      	b.n	800127a <PacketParser_Parse+0x17a>
    }
    log_debug("Copying INPUT DATA to Packet Structure.");
 8001206:	4827      	ldr	r0, [pc, #156]	@ (80012a4 <PacketParser_Parse+0x1a4>)
 8001208:	f000 f8b0 	bl	800136c <log_debug>
    // Copy INPUT_DATA array from Data Stream to Packet structure
    memcpy(parsedPacket->inputData, &rawData[index], parsedPacket->inputSize);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f103 0008 	add.w	r0, r3, #8
 8001212:	8afb      	ldrh	r3, [r7, #22]
 8001214:	68fa      	ldr	r2, [r7, #12]
 8001216:	18d1      	adds	r1, r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	88db      	ldrh	r3, [r3, #6]
 800121c:	461a      	mov	r2, r3
 800121e:	f010 fa48 	bl	80116b2 <memcpy>
    // Set Index to point EOD Flag
    index += parsedPacket->inputSize;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	88da      	ldrh	r2, [r3, #6]
 8001226:	8afb      	ldrh	r3, [r7, #22]
 8001228:	4413      	add	r3, r2
 800122a:	82fb      	strh	r3, [r7, #22]
    log_debug("Checking the Received EOD word.");
 800122c:	481e      	ldr	r0, [pc, #120]	@ (80012a8 <PacketParser_Parse+0x1a8>)
 800122e:	f000 f89d 	bl	800136c <log_debug>
    // Retrieve EOD Flag from Data Stream
    uint32_t received_IN_EOD = (rawData[index]     << 24) |
 8001232:	8afb      	ldrh	r3, [r7, #22]
 8001234:	68fa      	ldr	r2, [r7, #12]
 8001236:	4413      	add	r3, r2
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	061a      	lsls	r2, r3, #24
                           	   (rawData[index + 1] << 16) |
 800123c:	8afb      	ldrh	r3, [r7, #22]
 800123e:	3301      	adds	r3, #1
 8001240:	68f9      	ldr	r1, [r7, #12]
 8001242:	440b      	add	r3, r1
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	041b      	lsls	r3, r3, #16
    uint32_t received_IN_EOD = (rawData[index]     << 24) |
 8001248:	431a      	orrs	r2, r3
							   (rawData[index + 2] << 8)  |
 800124a:	8afb      	ldrh	r3, [r7, #22]
 800124c:	3302      	adds	r3, #2
 800124e:	68f9      	ldr	r1, [r7, #12]
 8001250:	440b      	add	r3, r1
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	021b      	lsls	r3, r3, #8
                           	   (rawData[index + 1] << 16) |
 8001256:	4313      	orrs	r3, r2
							   (rawData[index + 3]);
 8001258:	8afa      	ldrh	r2, [r7, #22]
 800125a:	3203      	adds	r2, #3
 800125c:	68f9      	ldr	r1, [r7, #12]
 800125e:	440a      	add	r2, r1
 8001260:	7812      	ldrb	r2, [r2, #0]
							   (rawData[index + 2] << 8)  |
 8001262:	4313      	orrs	r3, r2
    uint32_t received_IN_EOD = (rawData[index]     << 24) |
 8001264:	613b      	str	r3, [r7, #16]
    // Check if EOD Flag is valid
    if (received_IN_EOD != IN_EOD_FLAG)
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	4a10      	ldr	r2, [pc, #64]	@ (80012ac <PacketParser_Parse+0x1ac>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d004      	beq.n	8001278 <PacketParser_Parse+0x178>
    {
    	log_error("Received EOD Flag is Invalid");
 800126e:	4810      	ldr	r0, [pc, #64]	@ (80012b0 <PacketParser_Parse+0x1b0>)
 8001270:	f000 f8ca 	bl	8001408 <log_error>
        return PARSE_EOD_MISMATCH;
 8001274:	2302      	movs	r3, #2
 8001276:	e000      	b.n	800127a <PacketParser_Parse+0x17a>
    }
    // Return to Indicate successful parsing
    return PARSE_SUCCESS;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3718      	adds	r7, #24
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	08012e08 	.word	0x08012e08
 8001288:	08012e40 	.word	0x08012e40
 800128c:	08012e68 	.word	0x08012e68
 8001290:	08012ea0 	.word	0x08012ea0
 8001294:	08012ec8 	.word	0x08012ec8
 8001298:	08012ee4 	.word	0x08012ee4
 800129c:	08012f14 	.word	0x08012f14
 80012a0:	08012f44 	.word	0x08012f44
 80012a4:	08012f60 	.word	0x08012f60
 80012a8:	08012f88 	.word	0x08012f88
 80012ac:	deadbeef 	.word	0xdeadbeef
 80012b0:	08012fa8 	.word	0x08012fa8

080012b4 <log_init>:
#define LOG_BUFFER_SIZE 256

static LogLevel current_level = LOG_LEVEL_INFO;

void log_init(LogLevel level)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
    current_level = level;
 80012be:	4a04      	ldr	r2, [pc, #16]	@ (80012d0 <log_init+0x1c>)
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	7013      	strb	r3, [r2, #0]
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	20000000 	.word	0x20000000

080012d4 <log_generic>:

static void log_generic(LogLevel level, const char *prefix, const char *color, const char *fmt, va_list args)
{
 80012d4:	b590      	push	{r4, r7, lr}
 80012d6:	b0c7      	sub	sp, #284	@ 0x11c
 80012d8:	af02      	add	r7, sp, #8
 80012da:	4604      	mov	r4, r0
 80012dc:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 80012e0:	f5a0 7084 	sub.w	r0, r0, #264	@ 0x108
 80012e4:	6001      	str	r1, [r0, #0]
 80012e6:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80012ea:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 80012ee:	600a      	str	r2, [r1, #0]
 80012f0:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80012f4:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80012fe:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8001302:	4622      	mov	r2, r4
 8001304:	701a      	strb	r2, [r3, #0]
    if (level < current_level)
 8001306:	4b16      	ldr	r3, [pc, #88]	@ (8001360 <log_generic+0x8c>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800130e:	f2a2 1201 	subw	r2, r2, #257	@ 0x101
 8001312:	7812      	ldrb	r2, [r2, #0]
 8001314:	429a      	cmp	r2, r3
 8001316:	d31e      	bcc.n	8001356 <log_generic+0x82>
        return;

    char buffer[LOG_BUFFER_SIZE];
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 8001318:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800131c:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 8001320:	f107 0010 	add.w	r0, r7, #16
 8001324:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001328:	6812      	ldr	r2, [r2, #0]
 800132a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800132e:	f010 f937 	bl	80115a0 <vsniprintf>

    // Print directly using printf(), assumes it's redirected to VCOM via BSP
    printf("%s[%s] %s%s\r\n", color, prefix, buffer, COLOR_RESET);
 8001332:	f107 0310 	add.w	r3, r7, #16
 8001336:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800133a:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800133e:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001342:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8001346:	4807      	ldr	r0, [pc, #28]	@ (8001364 <log_generic+0x90>)
 8001348:	9000      	str	r0, [sp, #0]
 800134a:	6812      	ldr	r2, [r2, #0]
 800134c:	6809      	ldr	r1, [r1, #0]
 800134e:	4806      	ldr	r0, [pc, #24]	@ (8001368 <log_generic+0x94>)
 8001350:	f010 f852 	bl	80113f8 <iprintf>
 8001354:	e000      	b.n	8001358 <log_generic+0x84>
        return;
 8001356:	bf00      	nop
}
 8001358:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 800135c:	46bd      	mov	sp, r7
 800135e:	bd90      	pop	{r4, r7, pc}
 8001360:	20000000 	.word	0x20000000
 8001364:	08012fd8 	.word	0x08012fd8
 8001368:	08012fc8 	.word	0x08012fc8

0800136c <log_debug>:

void log_debug(const char *fmt, ...)
{
 800136c:	b40f      	push	{r0, r1, r2, r3}
 800136e:	b580      	push	{r7, lr}
 8001370:	b084      	sub	sp, #16
 8001372:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_DEBUG, "DEBUG", COLOR_DEBUG, fmt, args);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	4a05      	ldr	r2, [pc, #20]	@ (8001398 <log_debug+0x2c>)
 8001382:	4906      	ldr	r1, [pc, #24]	@ (800139c <log_debug+0x30>)
 8001384:	2000      	movs	r0, #0
 8001386:	f7ff ffa5 	bl	80012d4 <log_generic>
    va_end(args);
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001394:	b004      	add	sp, #16
 8001396:	4770      	bx	lr
 8001398:	08012fe0 	.word	0x08012fe0
 800139c:	08012fe8 	.word	0x08012fe8

080013a0 <log_info>:

void log_info(const char *fmt, ...)
{
 80013a0:	b40f      	push	{r0, r1, r2, r3}
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b084      	sub	sp, #16
 80013a6:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_INFO, "INFO", COLOR_INFO, fmt, args);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	4a05      	ldr	r2, [pc, #20]	@ (80013cc <log_info+0x2c>)
 80013b6:	4906      	ldr	r1, [pc, #24]	@ (80013d0 <log_info+0x30>)
 80013b8:	2001      	movs	r0, #1
 80013ba:	f7ff ff8b 	bl	80012d4 <log_generic>
    va_end(args);
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013c8:	b004      	add	sp, #16
 80013ca:	4770      	bx	lr
 80013cc:	08012ff0 	.word	0x08012ff0
 80013d0:	08012ff8 	.word	0x08012ff8

080013d4 <log_warn>:

void log_warn(const char *fmt, ...)
{
 80013d4:	b40f      	push	{r0, r1, r2, r3}
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b084      	sub	sp, #16
 80013da:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_WARN, "WARN", COLOR_WARN, fmt, args);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	4a05      	ldr	r2, [pc, #20]	@ (8001400 <log_warn+0x2c>)
 80013ea:	4906      	ldr	r1, [pc, #24]	@ (8001404 <log_warn+0x30>)
 80013ec:	2002      	movs	r0, #2
 80013ee:	f7ff ff71 	bl	80012d4 <log_generic>
    va_end(args);
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013fc:	b004      	add	sp, #16
 80013fe:	4770      	bx	lr
 8001400:	08013000 	.word	0x08013000
 8001404:	08013008 	.word	0x08013008

08001408 <log_error>:

void log_error(const char *fmt, ...)
{
 8001408:	b40f      	push	{r0, r1, r2, r3}
 800140a:	b580      	push	{r7, lr}
 800140c:	b084      	sub	sp, #16
 800140e:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_ERROR, "ERROR", COLOR_ERROR, fmt, args);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	4a05      	ldr	r2, [pc, #20]	@ (8001434 <log_error+0x2c>)
 800141e:	4906      	ldr	r1, [pc, #24]	@ (8001438 <log_error+0x30>)
 8001420:	2003      	movs	r0, #3
 8001422:	f7ff ff57 	bl	80012d4 <log_generic>
    va_end(args);
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001430:	b004      	add	sp, #16
 8001432:	4770      	bx	lr
 8001434:	08013010 	.word	0x08013010
 8001438:	08013018 	.word	0x08013018

0800143c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001440:	f001 fc3e 	bl	8002cc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001444:	f000 f84a 	bl	80014dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001448:	f000 fb4c 	bl	8001ae4 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 800144c:	f000 fae8 	bl	8001a20 <MX_USB_PCD_Init>
  MX_USART2_UART_Init();
 8001450:	f000 fa02 	bl	8001858 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001454:	f000 f8d2 	bl	80015fc <MX_I2C1_Init>
  MX_SPI1_Init();
 8001458:	f000 f9a8 	bl	80017ac <MX_SPI1_Init>
  MX_USART6_UART_Init();
 800145c:	f000 fa94 	bl	8001988 <MX_USART6_UART_Init>
  MX_RTC_Init();
 8001460:	f000 f922 	bl	80016a8 <MX_RTC_Init>
  MX_RNG_Init();
 8001464:	f000 f90a 	bl	800167c <MX_RNG_Init>
  MX_HASH_Init();
 8001468:	f000 f8ae 	bl	80015c8 <MX_HASH_Init>
  MX_USART3_UART_Init();
 800146c:	f000 fa40 	bl	80018f0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  while(hUsbDeviceFS.pClassData == NULL);
 8001470:	bf00      	nop
 8001472:	4b18      	ldr	r3, [pc, #96]	@ (80014d4 <main+0x98>)
 8001474:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8001478:	2b00      	cmp	r3, #0
 800147a:	d0fa      	beq.n	8001472 <main+0x36>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 800147c:	2000      	movs	r0, #0
 800147e:	f001 fa05 	bl	800288c <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8001482:	2001      	movs	r0, #1
 8001484:	f001 fa02 	bl	800288c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8001488:	2002      	movs	r0, #2
 800148a:	f001 f9ff 	bl	800288c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800148e:	2101      	movs	r1, #1
 8001490:	2000      	movs	r0, #0
 8001492:	f001 fa9b 	bl	80029cc <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8001496:	4b10      	ldr	r3, [pc, #64]	@ (80014d8 <main+0x9c>)
 8001498:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800149c:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800149e:	4b0e      	ldr	r3, [pc, #56]	@ (80014d8 <main+0x9c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80014a4:	4b0c      	ldr	r3, [pc, #48]	@ (80014d8 <main+0x9c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80014aa:	4b0b      	ldr	r3, [pc, #44]	@ (80014d8 <main+0x9c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80014b0:	4b09      	ldr	r3, [pc, #36]	@ (80014d8 <main+0x9c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80014b6:	4908      	ldr	r1, [pc, #32]	@ (80014d8 <main+0x9c>)
 80014b8:	2000      	movs	r0, #0
 80014ba:	f001 fb21 	bl	8002b00 <BSP_COM_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <main+0x8c>
  {
    Error_Handler();
 80014c4:	f000 fc0a 	bl	8001cdc <Error_Handler>
  }

  /* Infinite loop */

  HSMManager_Init();
 80014c8:	f7ff fb2c 	bl	8000b24 <HSMManager_Init>

  HSMManager_ProcessCommand();
 80014cc:	f7ff fb9e 	bl	8000c0c <HSMManager_ProcessCommand>

  /* USER CODE BEGIN WHILE */
  while (1)
 80014d0:	bf00      	nop
 80014d2:	e7fd      	b.n	80014d0 <main+0x94>
 80014d4:	200007b4 	.word	0x200007b4
 80014d8:	2000019c 	.word	0x2000019c

080014dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b09c      	sub	sp, #112	@ 0x70
 80014e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014e2:	f107 0320 	add.w	r3, r7, #32
 80014e6:	2250      	movs	r2, #80	@ 0x50
 80014e8:	2100      	movs	r1, #0
 80014ea:	4618      	mov	r0, r3
 80014ec:	f010 f866 	bl	80115bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f0:	f107 0308 	add.w	r3, r7, #8
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
 8001500:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001502:	4b2f      	ldr	r3, [pc, #188]	@ (80015c0 <SystemClock_Config+0xe4>)
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	4a2e      	ldr	r2, [pc, #184]	@ (80015c0 <SystemClock_Config+0xe4>)
 8001508:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800150c:	6113      	str	r3, [r2, #16]
 800150e:	4b2c      	ldr	r3, [pc, #176]	@ (80015c0 <SystemClock_Config+0xe4>)
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800151a:	bf00      	nop
 800151c:	4b28      	ldr	r3, [pc, #160]	@ (80015c0 <SystemClock_Config+0xe4>)
 800151e:	695b      	ldr	r3, [r3, #20]
 8001520:	f003 0308 	and.w	r3, r3, #8
 8001524:	2b08      	cmp	r3, #8
 8001526:	d1f9      	bne.n	800151c <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8001528:	2329      	movs	r3, #41	@ 0x29
 800152a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800152c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001530:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001532:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001536:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001538:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800153c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800153e:	2302      	movs	r3, #2
 8001540:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8001542:	2303      	movs	r3, #3
 8001544:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001546:	2304      	movs	r3, #4
 8001548:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 800154a:	23fa      	movs	r3, #250	@ 0xfa
 800154c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800154e:	2302      	movs	r3, #2
 8001550:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001552:	2302      	movs	r3, #2
 8001554:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001556:	2302      	movs	r3, #2
 8001558:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 800155a:	2304      	movs	r3, #4
 800155c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800155e:	2300      	movs	r3, #0
 8001560:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001566:	f107 0320 	add.w	r3, r7, #32
 800156a:	4618      	mov	r0, r3
 800156c:	f003 fe94 	bl	8005298 <HAL_RCC_OscConfig>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001576:	f000 fbb1 	bl	8001cdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800157a:	231f      	movs	r3, #31
 800157c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800157e:	2303      	movs	r3, #3
 8001580:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001582:	2300      	movs	r3, #0
 8001584:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800158a:	2300      	movs	r3, #0
 800158c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800158e:	2300      	movs	r3, #0
 8001590:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001592:	f107 0308 	add.w	r3, r7, #8
 8001596:	2105      	movs	r1, #5
 8001598:	4618      	mov	r0, r3
 800159a:	f004 fab5 	bl	8005b08 <HAL_RCC_ClockConfig>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80015a4:	f000 fb9a 	bl	8001cdc <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 80015a8:	4b06      	ldr	r3, [pc, #24]	@ (80015c4 <SystemClock_Config+0xe8>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80015b0:	4a04      	ldr	r2, [pc, #16]	@ (80015c4 <SystemClock_Config+0xe8>)
 80015b2:	f043 0320 	orr.w	r3, r3, #32
 80015b6:	6013      	str	r3, [r2, #0]
}
 80015b8:	bf00      	nop
 80015ba:	3770      	adds	r7, #112	@ 0x70
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	44020800 	.word	0x44020800
 80015c4:	40022000 	.word	0x40022000

080015c8 <MX_HASH_Init>:
  * @brief HASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_HASH_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE END HASH_Init 0 */

  /* USER CODE BEGIN HASH_Init 1 */

  /* USER CODE END HASH_Init 1 */
  hhash.Instance = HASH;
 80015cc:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <MX_HASH_Init+0x2c>)
 80015ce:	4a0a      	ldr	r2, [pc, #40]	@ (80015f8 <MX_HASH_Init+0x30>)
 80015d0:	601a      	str	r2, [r3, #0]
  hhash.Init.DataType = HASH_NO_SWAP;
 80015d2:	4b08      	ldr	r3, [pc, #32]	@ (80015f4 <MX_HASH_Init+0x2c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	605a      	str	r2, [r3, #4]
  hhash.Init.Algorithm = HASH_ALGOSELECTION_SHA1;
 80015d8:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <MX_HASH_Init+0x2c>)
 80015da:	2200      	movs	r2, #0
 80015dc:	611a      	str	r2, [r3, #16]
  if (HAL_HASH_Init(&hhash) != HAL_OK)
 80015de:	4805      	ldr	r0, [pc, #20]	@ (80015f4 <MX_HASH_Init+0x2c>)
 80015e0:	f001 ffec 	bl	80035bc <HAL_HASH_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_HASH_Init+0x26>
  {
    Error_Handler();
 80015ea:	f000 fb77 	bl	8001cdc <Error_Handler>
  }
  /* USER CODE BEGIN HASH_Init 2 */

  /* USER CODE END HASH_Init 2 */

}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	200001ac 	.word	0x200001ac
 80015f8:	420c0400 	.word	0x420c0400

080015fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001600:	4b1b      	ldr	r3, [pc, #108]	@ (8001670 <MX_I2C1_Init+0x74>)
 8001602:	4a1c      	ldr	r2, [pc, #112]	@ (8001674 <MX_I2C1_Init+0x78>)
 8001604:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C043E5;
 8001606:	4b1a      	ldr	r3, [pc, #104]	@ (8001670 <MX_I2C1_Init+0x74>)
 8001608:	4a1b      	ldr	r2, [pc, #108]	@ (8001678 <MX_I2C1_Init+0x7c>)
 800160a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800160c:	4b18      	ldr	r3, [pc, #96]	@ (8001670 <MX_I2C1_Init+0x74>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001612:	4b17      	ldr	r3, [pc, #92]	@ (8001670 <MX_I2C1_Init+0x74>)
 8001614:	2201      	movs	r2, #1
 8001616:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001618:	4b15      	ldr	r3, [pc, #84]	@ (8001670 <MX_I2C1_Init+0x74>)
 800161a:	2200      	movs	r2, #0
 800161c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800161e:	4b14      	ldr	r3, [pc, #80]	@ (8001670 <MX_I2C1_Init+0x74>)
 8001620:	2200      	movs	r2, #0
 8001622:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001624:	4b12      	ldr	r3, [pc, #72]	@ (8001670 <MX_I2C1_Init+0x74>)
 8001626:	2200      	movs	r2, #0
 8001628:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800162a:	4b11      	ldr	r3, [pc, #68]	@ (8001670 <MX_I2C1_Init+0x74>)
 800162c:	2200      	movs	r2, #0
 800162e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001630:	4b0f      	ldr	r3, [pc, #60]	@ (8001670 <MX_I2C1_Init+0x74>)
 8001632:	2200      	movs	r2, #0
 8001634:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001636:	480e      	ldr	r0, [pc, #56]	@ (8001670 <MX_I2C1_Init+0x74>)
 8001638:	f001 fff8 	bl	800362c <HAL_I2C_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001642:	f000 fb4b 	bl	8001cdc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001646:	2100      	movs	r1, #0
 8001648:	4809      	ldr	r0, [pc, #36]	@ (8001670 <MX_I2C1_Init+0x74>)
 800164a:	f002 f88a 	bl	8003762 <HAL_I2CEx_ConfigAnalogFilter>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001654:	f000 fb42 	bl	8001cdc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001658:	2100      	movs	r1, #0
 800165a:	4805      	ldr	r0, [pc, #20]	@ (8001670 <MX_I2C1_Init+0x74>)
 800165c:	f002 f8cc 	bl	80037f8 <HAL_I2CEx_ConfigDigitalFilter>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001666:	f000 fb39 	bl	8001cdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	200001ec 	.word	0x200001ec
 8001674:	40005400 	.word	0x40005400
 8001678:	10c043e5 	.word	0x10c043e5

0800167c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001680:	4b07      	ldr	r3, [pc, #28]	@ (80016a0 <MX_RNG_Init+0x24>)
 8001682:	4a08      	ldr	r2, [pc, #32]	@ (80016a4 <MX_RNG_Init+0x28>)
 8001684:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8001686:	4b06      	ldr	r3, [pc, #24]	@ (80016a0 <MX_RNG_Init+0x24>)
 8001688:	2200      	movs	r2, #0
 800168a:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800168c:	4804      	ldr	r0, [pc, #16]	@ (80016a0 <MX_RNG_Init+0x24>)
 800168e:	f009 fdd5 	bl	800b23c <HAL_RNG_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8001698:	f000 fb20 	bl	8001cdc <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000240 	.word	0x20000240
 80016a4:	420c0800 	.word	0x420c0800

080016a8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08e      	sub	sp, #56	@ 0x38
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 80016ae:	f107 031c 	add.w	r3, r7, #28
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	60da      	str	r2, [r3, #12]
 80016bc:	611a      	str	r2, [r3, #16]
 80016be:	615a      	str	r2, [r3, #20]
 80016c0:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 80016c2:	f107 0308 	add.w	r3, r7, #8
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	60da      	str	r2, [r3, #12]
 80016d0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80016d2:	2300      	movs	r3, #0
 80016d4:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80016d6:	4b33      	ldr	r3, [pc, #204]	@ (80017a4 <MX_RTC_Init+0xfc>)
 80016d8:	4a33      	ldr	r2, [pc, #204]	@ (80017a8 <MX_RTC_Init+0x100>)
 80016da:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80016dc:	4b31      	ldr	r3, [pc, #196]	@ (80017a4 <MX_RTC_Init+0xfc>)
 80016de:	2200      	movs	r2, #0
 80016e0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80016e2:	4b30      	ldr	r3, [pc, #192]	@ (80017a4 <MX_RTC_Init+0xfc>)
 80016e4:	227f      	movs	r2, #127	@ 0x7f
 80016e6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80016e8:	4b2e      	ldr	r3, [pc, #184]	@ (80017a4 <MX_RTC_Init+0xfc>)
 80016ea:	22ff      	movs	r2, #255	@ 0xff
 80016ec:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80016ee:	4b2d      	ldr	r3, [pc, #180]	@ (80017a4 <MX_RTC_Init+0xfc>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80016f4:	4b2b      	ldr	r3, [pc, #172]	@ (80017a4 <MX_RTC_Init+0xfc>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80016fa:	4b2a      	ldr	r3, [pc, #168]	@ (80017a4 <MX_RTC_Init+0xfc>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001700:	4b28      	ldr	r3, [pc, #160]	@ (80017a4 <MX_RTC_Init+0xfc>)
 8001702:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001706:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001708:	4b26      	ldr	r3, [pc, #152]	@ (80017a4 <MX_RTC_Init+0xfc>)
 800170a:	2200      	movs	r2, #0
 800170c:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 800170e:	4b25      	ldr	r3, [pc, #148]	@ (80017a4 <MX_RTC_Init+0xfc>)
 8001710:	2200      	movs	r2, #0
 8001712:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001714:	4823      	ldr	r0, [pc, #140]	@ (80017a4 <MX_RTC_Init+0xfc>)
 8001716:	f009 ff35 	bl	800b584 <HAL_RTC_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001720:	f000 fadc 	bl	8001cdc <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8001724:	2300      	movs	r3, #0
 8001726:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8001728:	2300      	movs	r3, #0
 800172a:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 800172c:	2300      	movs	r3, #0
 800172e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8001730:	2300      	movs	r3, #0
 8001732:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8001734:	f107 031c 	add.w	r3, r7, #28
 8001738:	4619      	mov	r1, r3
 800173a:	481a      	ldr	r0, [pc, #104]	@ (80017a4 <MX_RTC_Init+0xfc>)
 800173c:	f00a f988 	bl	800ba50 <HAL_RTCEx_PrivilegeModeSet>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001746:	f000 fac9 	bl	8001cdc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800174a:	2300      	movs	r3, #0
 800174c:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 800174e:	2300      	movs	r3, #0
 8001750:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 8001752:	2300      	movs	r3, #0
 8001754:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800175a:	2300      	movs	r3, #0
 800175c:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800175e:	f107 0308 	add.w	r3, r7, #8
 8001762:	2201      	movs	r2, #1
 8001764:	4619      	mov	r1, r3
 8001766:	480f      	ldr	r0, [pc, #60]	@ (80017a4 <MX_RTC_Init+0xfc>)
 8001768:	f009 ff8e 	bl	800b688 <HAL_RTC_SetTime>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8001772:	f000 fab3 	bl	8001cdc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001776:	2301      	movs	r3, #1
 8001778:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 800177a:	2301      	movs	r3, #1
 800177c:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 800177e:	2301      	movs	r3, #1
 8001780:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 8001782:	2300      	movs	r3, #0
 8001784:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001786:	1d3b      	adds	r3, r7, #4
 8001788:	2201      	movs	r2, #1
 800178a:	4619      	mov	r1, r3
 800178c:	4805      	ldr	r0, [pc, #20]	@ (80017a4 <MX_RTC_Init+0xfc>)
 800178e:	f00a f80d 	bl	800b7ac <HAL_RTC_SetDate>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 8001798:	f000 faa0 	bl	8001cdc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800179c:	bf00      	nop
 800179e:	3738      	adds	r7, #56	@ 0x38
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000254 	.word	0x20000254
 80017a8:	44007800 	.word	0x44007800

080017ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017b0:	4b27      	ldr	r3, [pc, #156]	@ (8001850 <MX_SPI1_Init+0xa4>)
 80017b2:	4a28      	ldr	r2, [pc, #160]	@ (8001854 <MX_SPI1_Init+0xa8>)
 80017b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017b6:	4b26      	ldr	r3, [pc, #152]	@ (8001850 <MX_SPI1_Init+0xa4>)
 80017b8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80017bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017be:	4b24      	ldr	r3, [pc, #144]	@ (8001850 <MX_SPI1_Init+0xa4>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017c4:	4b22      	ldr	r3, [pc, #136]	@ (8001850 <MX_SPI1_Init+0xa4>)
 80017c6:	2207      	movs	r2, #7
 80017c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017ca:	4b21      	ldr	r3, [pc, #132]	@ (8001850 <MX_SPI1_Init+0xa4>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001850 <MX_SPI1_Init+0xa4>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001850 <MX_SPI1_Init+0xa4>)
 80017d8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80017dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80017de:	4b1c      	ldr	r3, [pc, #112]	@ (8001850 <MX_SPI1_Init+0xa4>)
 80017e0:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 80017e4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001850 <MX_SPI1_Init+0xa4>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017ec:	4b18      	ldr	r3, [pc, #96]	@ (8001850 <MX_SPI1_Init+0xa4>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017f2:	4b17      	ldr	r3, [pc, #92]	@ (8001850 <MX_SPI1_Init+0xa4>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 80017f8:	4b15      	ldr	r3, [pc, #84]	@ (8001850 <MX_SPI1_Init+0xa4>)
 80017fa:	2207      	movs	r2, #7
 80017fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017fe:	4b14      	ldr	r3, [pc, #80]	@ (8001850 <MX_SPI1_Init+0xa4>)
 8001800:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001804:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001806:	4b12      	ldr	r3, [pc, #72]	@ (8001850 <MX_SPI1_Init+0xa4>)
 8001808:	2200      	movs	r2, #0
 800180a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800180c:	4b10      	ldr	r3, [pc, #64]	@ (8001850 <MX_SPI1_Init+0xa4>)
 800180e:	2200      	movs	r2, #0
 8001810:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001812:	4b0f      	ldr	r3, [pc, #60]	@ (8001850 <MX_SPI1_Init+0xa4>)
 8001814:	2200      	movs	r2, #0
 8001816:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001818:	4b0d      	ldr	r3, [pc, #52]	@ (8001850 <MX_SPI1_Init+0xa4>)
 800181a:	2200      	movs	r2, #0
 800181c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800181e:	4b0c      	ldr	r3, [pc, #48]	@ (8001850 <MX_SPI1_Init+0xa4>)
 8001820:	2200      	movs	r2, #0
 8001822:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001824:	4b0a      	ldr	r3, [pc, #40]	@ (8001850 <MX_SPI1_Init+0xa4>)
 8001826:	2200      	movs	r2, #0
 8001828:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800182a:	4b09      	ldr	r3, [pc, #36]	@ (8001850 <MX_SPI1_Init+0xa4>)
 800182c:	2200      	movs	r2, #0
 800182e:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001830:	4b07      	ldr	r3, [pc, #28]	@ (8001850 <MX_SPI1_Init+0xa4>)
 8001832:	2200      	movs	r2, #0
 8001834:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001836:	4b06      	ldr	r3, [pc, #24]	@ (8001850 <MX_SPI1_Init+0xa4>)
 8001838:	2200      	movs	r2, #0
 800183a:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800183c:	4804      	ldr	r0, [pc, #16]	@ (8001850 <MX_SPI1_Init+0xa4>)
 800183e:	f00a f935 	bl	800baac <HAL_SPI_Init>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001848:	f000 fa48 	bl	8001cdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800184c:	bf00      	nop
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20000284 	.word	0x20000284
 8001854:	40013000 	.word	0x40013000

08001858 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800185c:	4b22      	ldr	r3, [pc, #136]	@ (80018e8 <MX_USART2_UART_Init+0x90>)
 800185e:	4a23      	ldr	r2, [pc, #140]	@ (80018ec <MX_USART2_UART_Init+0x94>)
 8001860:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001862:	4b21      	ldr	r3, [pc, #132]	@ (80018e8 <MX_USART2_UART_Init+0x90>)
 8001864:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001868:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800186a:	4b1f      	ldr	r3, [pc, #124]	@ (80018e8 <MX_USART2_UART_Init+0x90>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001870:	4b1d      	ldr	r3, [pc, #116]	@ (80018e8 <MX_USART2_UART_Init+0x90>)
 8001872:	2200      	movs	r2, #0
 8001874:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001876:	4b1c      	ldr	r3, [pc, #112]	@ (80018e8 <MX_USART2_UART_Init+0x90>)
 8001878:	2200      	movs	r2, #0
 800187a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800187c:	4b1a      	ldr	r3, [pc, #104]	@ (80018e8 <MX_USART2_UART_Init+0x90>)
 800187e:	220c      	movs	r2, #12
 8001880:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001882:	4b19      	ldr	r3, [pc, #100]	@ (80018e8 <MX_USART2_UART_Init+0x90>)
 8001884:	2200      	movs	r2, #0
 8001886:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001888:	4b17      	ldr	r3, [pc, #92]	@ (80018e8 <MX_USART2_UART_Init+0x90>)
 800188a:	2200      	movs	r2, #0
 800188c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800188e:	4b16      	ldr	r3, [pc, #88]	@ (80018e8 <MX_USART2_UART_Init+0x90>)
 8001890:	2200      	movs	r2, #0
 8001892:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001894:	4b14      	ldr	r3, [pc, #80]	@ (80018e8 <MX_USART2_UART_Init+0x90>)
 8001896:	2200      	movs	r2, #0
 8001898:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800189a:	4b13      	ldr	r3, [pc, #76]	@ (80018e8 <MX_USART2_UART_Init+0x90>)
 800189c:	2200      	movs	r2, #0
 800189e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018a0:	4811      	ldr	r0, [pc, #68]	@ (80018e8 <MX_USART2_UART_Init+0x90>)
 80018a2:	f00a fa8e 	bl	800bdc2 <HAL_UART_Init>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80018ac:	f000 fa16 	bl	8001cdc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018b0:	2100      	movs	r1, #0
 80018b2:	480d      	ldr	r0, [pc, #52]	@ (80018e8 <MX_USART2_UART_Init+0x90>)
 80018b4:	f00a ffba 	bl	800c82c <HAL_UARTEx_SetTxFifoThreshold>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80018be:	f000 fa0d 	bl	8001cdc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018c2:	2100      	movs	r1, #0
 80018c4:	4808      	ldr	r0, [pc, #32]	@ (80018e8 <MX_USART2_UART_Init+0x90>)
 80018c6:	f00a ffef 	bl	800c8a8 <HAL_UARTEx_SetRxFifoThreshold>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80018d0:	f000 fa04 	bl	8001cdc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80018d4:	4804      	ldr	r0, [pc, #16]	@ (80018e8 <MX_USART2_UART_Init+0x90>)
 80018d6:	f00a ff70 	bl	800c7ba <HAL_UARTEx_DisableFifoMode>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80018e0:	f000 f9fc 	bl	8001cdc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018e4:	bf00      	nop
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20000314 	.word	0x20000314
 80018ec:	40004400 	.word	0x40004400

080018f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018f4:	4b22      	ldr	r3, [pc, #136]	@ (8001980 <MX_USART3_UART_Init+0x90>)
 80018f6:	4a23      	ldr	r2, [pc, #140]	@ (8001984 <MX_USART3_UART_Init+0x94>)
 80018f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80018fa:	4b21      	ldr	r3, [pc, #132]	@ (8001980 <MX_USART3_UART_Init+0x90>)
 80018fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001900:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001902:	4b1f      	ldr	r3, [pc, #124]	@ (8001980 <MX_USART3_UART_Init+0x90>)
 8001904:	2200      	movs	r2, #0
 8001906:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001908:	4b1d      	ldr	r3, [pc, #116]	@ (8001980 <MX_USART3_UART_Init+0x90>)
 800190a:	2200      	movs	r2, #0
 800190c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800190e:	4b1c      	ldr	r3, [pc, #112]	@ (8001980 <MX_USART3_UART_Init+0x90>)
 8001910:	2200      	movs	r2, #0
 8001912:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001914:	4b1a      	ldr	r3, [pc, #104]	@ (8001980 <MX_USART3_UART_Init+0x90>)
 8001916:	220c      	movs	r2, #12
 8001918:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800191a:	4b19      	ldr	r3, [pc, #100]	@ (8001980 <MX_USART3_UART_Init+0x90>)
 800191c:	2200      	movs	r2, #0
 800191e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001920:	4b17      	ldr	r3, [pc, #92]	@ (8001980 <MX_USART3_UART_Init+0x90>)
 8001922:	2200      	movs	r2, #0
 8001924:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001926:	4b16      	ldr	r3, [pc, #88]	@ (8001980 <MX_USART3_UART_Init+0x90>)
 8001928:	2200      	movs	r2, #0
 800192a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800192c:	4b14      	ldr	r3, [pc, #80]	@ (8001980 <MX_USART3_UART_Init+0x90>)
 800192e:	2200      	movs	r2, #0
 8001930:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001932:	4b13      	ldr	r3, [pc, #76]	@ (8001980 <MX_USART3_UART_Init+0x90>)
 8001934:	2200      	movs	r2, #0
 8001936:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001938:	4811      	ldr	r0, [pc, #68]	@ (8001980 <MX_USART3_UART_Init+0x90>)
 800193a:	f00a fa42 	bl	800bdc2 <HAL_UART_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001944:	f000 f9ca 	bl	8001cdc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001948:	2100      	movs	r1, #0
 800194a:	480d      	ldr	r0, [pc, #52]	@ (8001980 <MX_USART3_UART_Init+0x90>)
 800194c:	f00a ff6e 	bl	800c82c <HAL_UARTEx_SetTxFifoThreshold>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001956:	f000 f9c1 	bl	8001cdc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800195a:	2100      	movs	r1, #0
 800195c:	4808      	ldr	r0, [pc, #32]	@ (8001980 <MX_USART3_UART_Init+0x90>)
 800195e:	f00a ffa3 	bl	800c8a8 <HAL_UARTEx_SetRxFifoThreshold>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001968:	f000 f9b8 	bl	8001cdc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800196c:	4804      	ldr	r0, [pc, #16]	@ (8001980 <MX_USART3_UART_Init+0x90>)
 800196e:	f00a ff24 	bl	800c7ba <HAL_UARTEx_DisableFifoMode>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001978:	f000 f9b0 	bl	8001cdc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}
 8001980:	200003a8 	.word	0x200003a8
 8001984:	40004800 	.word	0x40004800

08001988 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800198c:	4b22      	ldr	r3, [pc, #136]	@ (8001a18 <MX_USART6_UART_Init+0x90>)
 800198e:	4a23      	ldr	r2, [pc, #140]	@ (8001a1c <MX_USART6_UART_Init+0x94>)
 8001990:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001992:	4b21      	ldr	r3, [pc, #132]	@ (8001a18 <MX_USART6_UART_Init+0x90>)
 8001994:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001998:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800199a:	4b1f      	ldr	r3, [pc, #124]	@ (8001a18 <MX_USART6_UART_Init+0x90>)
 800199c:	2200      	movs	r2, #0
 800199e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80019a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001a18 <MX_USART6_UART_Init+0x90>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80019a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a18 <MX_USART6_UART_Init+0x90>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80019ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001a18 <MX_USART6_UART_Init+0x90>)
 80019ae:	220c      	movs	r2, #12
 80019b0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019b2:	4b19      	ldr	r3, [pc, #100]	@ (8001a18 <MX_USART6_UART_Init+0x90>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80019b8:	4b17      	ldr	r3, [pc, #92]	@ (8001a18 <MX_USART6_UART_Init+0x90>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019be:	4b16      	ldr	r3, [pc, #88]	@ (8001a18 <MX_USART6_UART_Init+0x90>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019c4:	4b14      	ldr	r3, [pc, #80]	@ (8001a18 <MX_USART6_UART_Init+0x90>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019ca:	4b13      	ldr	r3, [pc, #76]	@ (8001a18 <MX_USART6_UART_Init+0x90>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80019d0:	4811      	ldr	r0, [pc, #68]	@ (8001a18 <MX_USART6_UART_Init+0x90>)
 80019d2:	f00a f9f6 	bl	800bdc2 <HAL_UART_Init>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80019dc:	f000 f97e 	bl	8001cdc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019e0:	2100      	movs	r1, #0
 80019e2:	480d      	ldr	r0, [pc, #52]	@ (8001a18 <MX_USART6_UART_Init+0x90>)
 80019e4:	f00a ff22 	bl	800c82c <HAL_UARTEx_SetTxFifoThreshold>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80019ee:	f000 f975 	bl	8001cdc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019f2:	2100      	movs	r1, #0
 80019f4:	4808      	ldr	r0, [pc, #32]	@ (8001a18 <MX_USART6_UART_Init+0x90>)
 80019f6:	f00a ff57 	bl	800c8a8 <HAL_UARTEx_SetRxFifoThreshold>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8001a00:	f000 f96c 	bl	8001cdc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8001a04:	4804      	ldr	r0, [pc, #16]	@ (8001a18 <MX_USART6_UART_Init+0x90>)
 8001a06:	f00a fed8 	bl	800c7ba <HAL_UARTEx_DisableFifoMode>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8001a10:	f000 f964 	bl	8001cdc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	2000043c 	.word	0x2000043c
 8001a1c:	40006400 	.word	0x40006400

08001a20 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USB_Init 0 */
  hpcd_USB_DRD_FS.pData = &hUsbDeviceFS;
 8001a24:	4b29      	ldr	r3, [pc, #164]	@ (8001acc <MX_USB_PCD_Init+0xac>)
 8001a26:	4a2a      	ldr	r2, [pc, #168]	@ (8001ad0 <MX_USB_PCD_Init+0xb0>)
 8001a28:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8001a2c:	4b27      	ldr	r3, [pc, #156]	@ (8001acc <MX_USB_PCD_Init+0xac>)
 8001a2e:	4a29      	ldr	r2, [pc, #164]	@ (8001ad4 <MX_USB_PCD_Init+0xb4>)
 8001a30:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8001a32:	4b26      	ldr	r3, [pc, #152]	@ (8001acc <MX_USB_PCD_Init+0xac>)
 8001a34:	2208      	movs	r2, #8
 8001a36:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8001a38:	4b24      	ldr	r3, [pc, #144]	@ (8001acc <MX_USB_PCD_Init+0xac>)
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001a3e:	4b23      	ldr	r3, [pc, #140]	@ (8001acc <MX_USB_PCD_Init+0xac>)
 8001a40:	2202      	movs	r2, #2
 8001a42:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8001a44:	4b21      	ldr	r3, [pc, #132]	@ (8001acc <MX_USB_PCD_Init+0xac>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8001a4a:	4b20      	ldr	r3, [pc, #128]	@ (8001acc <MX_USB_PCD_Init+0xac>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8001a50:	4b1e      	ldr	r3, [pc, #120]	@ (8001acc <MX_USB_PCD_Init+0xac>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8001a56:	4b1d      	ldr	r3, [pc, #116]	@ (8001acc <MX_USB_PCD_Init+0xac>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8001a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001acc <MX_USB_PCD_Init+0xac>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8001a62:	4b1a      	ldr	r3, [pc, #104]	@ (8001acc <MX_USB_PCD_Init+0xac>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8001a68:	4b18      	ldr	r3, [pc, #96]	@ (8001acc <MX_USB_PCD_Init+0xac>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8001a6e:	4817      	ldr	r0, [pc, #92]	@ (8001acc <MX_USB_PCD_Init+0xac>)
 8001a70:	f001 ff71 	bl	8003956 <HAL_PCD_Init>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_USB_PCD_Init+0x5e>
  {
    Error_Handler();
 8001a7a:	f000 f92f 	bl	8001cdc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */
  if(USBD_Init(&hUsbDeviceFS, &Class_Desc, 0) != USBD_OK)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	4915      	ldr	r1, [pc, #84]	@ (8001ad8 <MX_USB_PCD_Init+0xb8>)
 8001a82:	4813      	ldr	r0, [pc, #76]	@ (8001ad0 <MX_USB_PCD_Init+0xb0>)
 8001a84:	f00e f8b8 	bl	800fbf8 <USBD_Init>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_USB_PCD_Init+0x72>
        Error_Handler();
 8001a8e:	f000 f925 	bl	8001cdc <Error_Handler>

  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8001a92:	4912      	ldr	r1, [pc, #72]	@ (8001adc <MX_USB_PCD_Init+0xbc>)
 8001a94:	480e      	ldr	r0, [pc, #56]	@ (8001ad0 <MX_USB_PCD_Init+0xb0>)
 8001a96:	f00e f8df 	bl	800fc58 <USBD_RegisterClass>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_USB_PCD_Init+0x84>
        Error_Handler();
 8001aa0:	f000 f91c 	bl	8001cdc <Error_Handler>

  if(USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_CDC_Template_fops) != USBD_OK)
 8001aa4:	490e      	ldr	r1, [pc, #56]	@ (8001ae0 <MX_USB_PCD_Init+0xc0>)
 8001aa6:	480a      	ldr	r0, [pc, #40]	@ (8001ad0 <MX_USB_PCD_Init+0xb0>)
 8001aa8:	f00d fb5e 	bl	800f168 <USBD_CDC_RegisterInterface>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_USB_PCD_Init+0x96>
        Error_Handler();
 8001ab2:	f000 f913 	bl	8001cdc <Error_Handler>

  if(USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8001ab6:	4806      	ldr	r0, [pc, #24]	@ (8001ad0 <MX_USB_PCD_Init+0xb0>)
 8001ab8:	f00e f904 	bl	800fcc4 <USBD_Start>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_USB_PCD_Init+0xa6>
        Error_Handler();
 8001ac2:	f000 f90b 	bl	8001cdc <Error_Handler>
  /* USER CODE END USB_Init 2 */

}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200004d0 	.word	0x200004d0
 8001ad0:	200007b4 	.word	0x200007b4
 8001ad4:	40016000 	.word	0x40016000
 8001ad8:	200000d4 	.word	0x200000d4
 8001adc:	20000038 	.word	0x20000038
 8001ae0:	200000b8 	.word	0x200000b8

08001ae4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08c      	sub	sp, #48	@ 0x30
 8001ae8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aea:	f107 031c 	add.w	r3, r7, #28
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	60da      	str	r2, [r3, #12]
 8001af8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001afa:	4b72      	ldr	r3, [pc, #456]	@ (8001cc4 <MX_GPIO_Init+0x1e0>)
 8001afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b00:	4a70      	ldr	r2, [pc, #448]	@ (8001cc4 <MX_GPIO_Init+0x1e0>)
 8001b02:	f043 0310 	orr.w	r3, r3, #16
 8001b06:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b0a:	4b6e      	ldr	r3, [pc, #440]	@ (8001cc4 <MX_GPIO_Init+0x1e0>)
 8001b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b10:	f003 0310 	and.w	r3, r3, #16
 8001b14:	61bb      	str	r3, [r7, #24]
 8001b16:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b18:	4b6a      	ldr	r3, [pc, #424]	@ (8001cc4 <MX_GPIO_Init+0x1e0>)
 8001b1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b1e:	4a69      	ldr	r2, [pc, #420]	@ (8001cc4 <MX_GPIO_Init+0x1e0>)
 8001b20:	f043 0304 	orr.w	r3, r3, #4
 8001b24:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b28:	4b66      	ldr	r3, [pc, #408]	@ (8001cc4 <MX_GPIO_Init+0x1e0>)
 8001b2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b2e:	f003 0304 	and.w	r3, r3, #4
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b36:	4b63      	ldr	r3, [pc, #396]	@ (8001cc4 <MX_GPIO_Init+0x1e0>)
 8001b38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b3c:	4a61      	ldr	r2, [pc, #388]	@ (8001cc4 <MX_GPIO_Init+0x1e0>)
 8001b3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b42:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b46:	4b5f      	ldr	r3, [pc, #380]	@ (8001cc4 <MX_GPIO_Init+0x1e0>)
 8001b48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b50:	613b      	str	r3, [r7, #16]
 8001b52:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b54:	4b5b      	ldr	r3, [pc, #364]	@ (8001cc4 <MX_GPIO_Init+0x1e0>)
 8001b56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b5a:	4a5a      	ldr	r2, [pc, #360]	@ (8001cc4 <MX_GPIO_Init+0x1e0>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b64:	4b57      	ldr	r3, [pc, #348]	@ (8001cc4 <MX_GPIO_Init+0x1e0>)
 8001b66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b72:	4b54      	ldr	r3, [pc, #336]	@ (8001cc4 <MX_GPIO_Init+0x1e0>)
 8001b74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b78:	4a52      	ldr	r2, [pc, #328]	@ (8001cc4 <MX_GPIO_Init+0x1e0>)
 8001b7a:	f043 0302 	orr.w	r3, r3, #2
 8001b7e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b82:	4b50      	ldr	r3, [pc, #320]	@ (8001cc4 <MX_GPIO_Init+0x1e0>)
 8001b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	60bb      	str	r3, [r7, #8]
 8001b8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b90:	4b4c      	ldr	r3, [pc, #304]	@ (8001cc4 <MX_GPIO_Init+0x1e0>)
 8001b92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b96:	4a4b      	ldr	r2, [pc, #300]	@ (8001cc4 <MX_GPIO_Init+0x1e0>)
 8001b98:	f043 0308 	orr.w	r3, r3, #8
 8001b9c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ba0:	4b48      	ldr	r3, [pc, #288]	@ (8001cc4 <MX_GPIO_Init+0x1e0>)
 8001ba2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	607b      	str	r3, [r7, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bae:	4b45      	ldr	r3, [pc, #276]	@ (8001cc4 <MX_GPIO_Init+0x1e0>)
 8001bb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bb4:	4a43      	ldr	r2, [pc, #268]	@ (8001cc4 <MX_GPIO_Init+0x1e0>)
 8001bb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001bbe:	4b41      	ldr	r3, [pc, #260]	@ (8001cc4 <MX_GPIO_Init+0x1e0>)
 8001bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bc8:	603b      	str	r3, [r7, #0]
 8001bca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001bcc:	2332      	movs	r3, #50	@ 0x32
 8001bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bdc:	230b      	movs	r3, #11
 8001bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001be0:	f107 031c 	add.w	r3, r7, #28
 8001be4:	4619      	mov	r1, r3
 8001be6:	4838      	ldr	r0, [pc, #224]	@ (8001cc8 <MX_GPIO_Init+0x1e4>)
 8001be8:	f001 fb64 	bl	80032b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001bec:	2384      	movs	r3, #132	@ 0x84
 8001bee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bfc:	230b      	movs	r3, #11
 8001bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c00:	f107 031c 	add.w	r3, r7, #28
 8001c04:	4619      	mov	r1, r3
 8001c06:	4831      	ldr	r0, [pc, #196]	@ (8001ccc <MX_GPIO_Init+0x1e8>)
 8001c08:	f001 fb54 	bl	80032b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8001c0c:	2310      	movs	r3, #16
 8001c0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c10:	2303      	movs	r3, #3
 8001c12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001c18:	f107 031c 	add.w	r3, r7, #28
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	482b      	ldr	r0, [pc, #172]	@ (8001ccc <MX_GPIO_Init+0x1e8>)
 8001c20:	f001 fb48 	bl	80032b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_CC1_Pin UCPD_CC2_Pin */
  GPIO_InitStruct.Pin = UCPD_CC1_Pin|UCPD_CC2_Pin;
 8001c24:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c32:	f107 031c 	add.w	r3, r7, #28
 8001c36:	4619      	mov	r1, r3
 8001c38:	4825      	ldr	r0, [pc, #148]	@ (8001cd0 <MX_GPIO_Init+0x1ec>)
 8001c3a:	f001 fb3b 	bl	80032b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001c3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c44:	2302      	movs	r3, #2
 8001c46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c50:	230b      	movs	r3, #11
 8001c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001c54:	f107 031c 	add.w	r3, r7, #28
 8001c58:	4619      	mov	r1, r3
 8001c5a:	481d      	ldr	r0, [pc, #116]	@ (8001cd0 <MX_GPIO_Init+0x1ec>)
 8001c5c:	f001 fb2a 	bl	80032b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8001c60:	2380      	movs	r3, #128	@ 0x80
 8001c62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c64:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd4 <MX_GPIO_Init+0x1f0>)
 8001c66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8001c6c:	f107 031c 	add.w	r3, r7, #28
 8001c70:	4619      	mov	r1, r3
 8001c72:	4819      	ldr	r0, [pc, #100]	@ (8001cd8 <MX_GPIO_Init+0x1f4>)
 8001c74:	f001 fb1e 	bl	80032b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXT_EN_Pin RMI_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TXT_EN_Pin|RMI_TXD0_Pin;
 8001c78:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001c7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c86:	2302      	movs	r3, #2
 8001c88:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c8a:	230b      	movs	r3, #11
 8001c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c8e:	f107 031c 	add.w	r3, r7, #28
 8001c92:	4619      	mov	r1, r3
 8001c94:	4810      	ldr	r0, [pc, #64]	@ (8001cd8 <MX_GPIO_Init+0x1f4>)
 8001c96:	f001 fb0d 	bl	80032b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_TX_Pin ARD_D0_RX_Pin */
  GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 8001c9a:	23c0      	movs	r3, #192	@ 0xc0
 8001c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001caa:	2308      	movs	r3, #8
 8001cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cae:	f107 031c 	add.w	r3, r7, #28
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4806      	ldr	r0, [pc, #24]	@ (8001cd0 <MX_GPIO_Init+0x1ec>)
 8001cb6:	f001 fafd 	bl	80032b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cba:	bf00      	nop
 8001cbc:	3730      	adds	r7, #48	@ 0x30
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	44020c00 	.word	0x44020c00
 8001cc8:	42020800 	.word	0x42020800
 8001ccc:	42020000 	.word	0x42020000
 8001cd0:	42020400 	.word	0x42020400
 8001cd4:	10110000 	.word	0x10110000
 8001cd8:	42021800 	.word	0x42021800

08001cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ce0:	b672      	cpsid	i
}
 8001ce2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ce4:	bf00      	nop
 8001ce6:	e7fd      	b.n	8001ce4 <Error_Handler+0x8>

08001ce8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
	...

08001cf8 <HAL_HASH_MspInit>:
* This function configures the hardware resources used in this example
* @param hhash: HASH handle pointer
* @retval None
*/
void HAL_HASH_MspInit(HASH_HandleTypeDef* hhash)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HASH_MspInit 0 */

  /* USER CODE END HASH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HASH_CLK_ENABLE();
 8001d00:	4b0a      	ldr	r3, [pc, #40]	@ (8001d2c <HAL_HASH_MspInit+0x34>)
 8001d02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d06:	4a09      	ldr	r2, [pc, #36]	@ (8001d2c <HAL_HASH_MspInit+0x34>)
 8001d08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d0c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d10:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <HAL_HASH_MspInit+0x34>)
 8001d12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HASH_MspInit 1 */

  /* USER CODE END HASH_MspInit 1 */

}
 8001d1e:	bf00      	nop
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	44020c00 	.word	0x44020c00

08001d30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b0cc      	sub	sp, #304	@ 0x130
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001d3a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001d3e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d40:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	605a      	str	r2, [r3, #4]
 8001d4a:	609a      	str	r2, [r3, #8]
 8001d4c:	60da      	str	r2, [r3, #12]
 8001d4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d50:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001d54:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001d5e:	461a      	mov	r2, r3
 8001d60:	2100      	movs	r1, #0
 8001d62:	f00f fc2b 	bl	80115bc <memset>
  if(hi2c->Instance==I2C1)
 8001d66:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001d6a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a33      	ldr	r2, [pc, #204]	@ (8001e40 <HAL_I2C_MspInit+0x110>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d15e      	bne.n	8001e36 <HAL_I2C_MspInit+0x106>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d78:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001d7c:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001d80:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d84:	f04f 0300 	mov.w	r3, #0
 8001d88:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001d8c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001d90:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001d94:	2200      	movs	r2, #0
 8001d96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d9a:	f107 0310 	add.w	r3, r7, #16
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f004 f9f4 	bl	800618c <HAL_RCCEx_PeriphCLKConfig>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 8001daa:	f7ff ff97 	bl	8001cdc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dae:	4b25      	ldr	r3, [pc, #148]	@ (8001e44 <HAL_I2C_MspInit+0x114>)
 8001db0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001db4:	4a23      	ldr	r2, [pc, #140]	@ (8001e44 <HAL_I2C_MspInit+0x114>)
 8001db6:	f043 0302 	orr.w	r3, r3, #2
 8001dba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001dbe:	4b21      	ldr	r3, [pc, #132]	@ (8001e44 <HAL_I2C_MspInit+0x114>)
 8001dc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001dc4:	f003 0202 	and.w	r2, r3, #2
 8001dc8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001dcc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001dd6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001dda:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ddc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001de0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001de4:	2312      	movs	r3, #18
 8001de6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df0:	2300      	movs	r3, #0
 8001df2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001df6:	2304      	movs	r3, #4
 8001df8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dfc:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001e00:	4619      	mov	r1, r3
 8001e02:	4811      	ldr	r0, [pc, #68]	@ (8001e48 <HAL_I2C_MspInit+0x118>)
 8001e04:	f001 fa56 	bl	80032b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e08:	4b0e      	ldr	r3, [pc, #56]	@ (8001e44 <HAL_I2C_MspInit+0x114>)
 8001e0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001e0e:	4a0d      	ldr	r2, [pc, #52]	@ (8001e44 <HAL_I2C_MspInit+0x114>)
 8001e10:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e14:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001e18:	4b0a      	ldr	r3, [pc, #40]	@ (8001e44 <HAL_I2C_MspInit+0x114>)
 8001e1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001e1e:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001e22:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001e26:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001e30:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001e34:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001e36:	bf00      	nop
 8001e38:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40005400 	.word	0x40005400
 8001e44:	44020c00 	.word	0x44020c00
 8001e48:	42020400 	.word	0x42020400

08001e4c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b0c6      	sub	sp, #280	@ 0x118
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001e56:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001e5a:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e5c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001e60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001e64:	4618      	mov	r0, r3
 8001e66:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	f00f fba5 	bl	80115bc <memset>
  if(hrng->Instance==RNG)
 8001e72:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001e76:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a1d      	ldr	r2, [pc, #116]	@ (8001ef4 <HAL_RNG_MspInit+0xa8>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d131      	bne.n	8001ee8 <HAL_RNG_MspInit+0x9c>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001e84:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001e88:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8001e8c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001e90:	f04f 0300 	mov.w	r3, #0
 8001e94:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8001e98:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001e9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ea6:	f107 0310 	add.w	r3, r7, #16
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f004 f96e 	bl	800618c <HAL_RCCEx_PeriphCLKConfig>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <HAL_RNG_MspInit+0x6e>
    {
      Error_Handler();
 8001eb6:	f7ff ff11 	bl	8001cdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001eba:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef8 <HAL_RNG_MspInit+0xac>)
 8001ebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ef8 <HAL_RNG_MspInit+0xac>)
 8001ec2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ec6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001eca:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef8 <HAL_RNG_MspInit+0xac>)
 8001ecc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ed0:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 8001ed4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ed8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ee2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001ee6:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8001ee8:	bf00      	nop
 8001eea:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	420c0800 	.word	0x420c0800
 8001ef8:	44020c00 	.word	0x44020c00

08001efc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b0c6      	sub	sp, #280	@ 0x118
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f06:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f0a:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f0c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001f14:	4618      	mov	r0, r3
 8001f16:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	f00f fb4d 	bl	80115bc <memset>
  if(hrtc->Instance==RTC)
 8001f22:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f26:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a21      	ldr	r2, [pc, #132]	@ (8001fb4 <HAL_RTC_MspInit+0xb8>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d13a      	bne.n	8001faa <HAL_RTC_MspInit+0xae>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001f34:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f38:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8001f3c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f40:	f04f 0300 	mov.w	r3, #0
 8001f44:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001f48:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001f50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f54:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f58:	f107 0310 	add.w	r3, r7, #16
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f004 f915 	bl	800618c <HAL_RCCEx_PeriphCLKConfig>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <HAL_RTC_MspInit+0x70>
    {
      Error_Handler();
 8001f68:	f7ff feb8 	bl	8001cdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f6c:	4b12      	ldr	r3, [pc, #72]	@ (8001fb8 <HAL_RTC_MspInit+0xbc>)
 8001f6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f72:	4a11      	ldr	r2, [pc, #68]	@ (8001fb8 <HAL_RTC_MspInit+0xbc>)
 8001f74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f78:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001f7c:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb8 <HAL_RTC_MspInit+0xbc>)
 8001f7e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001f82:	4a0d      	ldr	r2, [pc, #52]	@ (8001fb8 <HAL_RTC_MspInit+0xbc>)
 8001f84:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f88:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb8 <HAL_RTC_MspInit+0xbc>)
 8001f8e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001f92:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001f96:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f9a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001fa4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001fa8:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001faa:	bf00      	nop
 8001fac:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	44007800 	.word	0x44007800
 8001fb8:	44020c00 	.word	0x44020c00

08001fbc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b0ce      	sub	sp, #312	@ 0x138
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001fc6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001fca:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fcc:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
 8001fda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fdc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001fe0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001fea:	461a      	mov	r2, r3
 8001fec:	2100      	movs	r1, #0
 8001fee:	f00f fae5 	bl	80115bc <memset>
  if(hspi->Instance==SPI1)
 8001ff2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001ff6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a49      	ldr	r2, [pc, #292]	@ (8002124 <HAL_SPI_MspInit+0x168>)
 8002000:	4293      	cmp	r3, r2
 8002002:	f040 808a 	bne.w	800211a <HAL_SPI_MspInit+0x15e>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002006:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800200a:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 800200e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002012:	f04f 0300 	mov.w	r3, #0
 8002016:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 800201a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800201e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002022:	2200      	movs	r2, #0
 8002024:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002028:	f107 0318 	add.w	r3, r7, #24
 800202c:	4618      	mov	r0, r3
 800202e:	f004 f8ad 	bl	800618c <HAL_RCCEx_PeriphCLKConfig>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <HAL_SPI_MspInit+0x80>
    {
      Error_Handler();
 8002038:	f7ff fe50 	bl	8001cdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800203c:	4b3a      	ldr	r3, [pc, #232]	@ (8002128 <HAL_SPI_MspInit+0x16c>)
 800203e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002042:	4a39      	ldr	r2, [pc, #228]	@ (8002128 <HAL_SPI_MspInit+0x16c>)
 8002044:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002048:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800204c:	4b36      	ldr	r3, [pc, #216]	@ (8002128 <HAL_SPI_MspInit+0x16c>)
 800204e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002052:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002056:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800205a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002064:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002068:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800206a:	4b2f      	ldr	r3, [pc, #188]	@ (8002128 <HAL_SPI_MspInit+0x16c>)
 800206c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002070:	4a2d      	ldr	r2, [pc, #180]	@ (8002128 <HAL_SPI_MspInit+0x16c>)
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800207a:	4b2b      	ldr	r3, [pc, #172]	@ (8002128 <HAL_SPI_MspInit+0x16c>)
 800207c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002080:	f003 0201 	and.w	r2, r3, #1
 8002084:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002088:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002092:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002096:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002098:	4b23      	ldr	r3, [pc, #140]	@ (8002128 <HAL_SPI_MspInit+0x16c>)
 800209a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800209e:	4a22      	ldr	r2, [pc, #136]	@ (8002128 <HAL_SPI_MspInit+0x16c>)
 80020a0:	f043 0308 	orr.w	r3, r3, #8
 80020a4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80020a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002128 <HAL_SPI_MspInit+0x16c>)
 80020aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020ae:	f003 0208 	and.w	r2, r3, #8
 80020b2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80020b6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80020c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80020c4:	681b      	ldr	r3, [r3, #0]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80020c6:	2360      	movs	r3, #96	@ 0x60
 80020c8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020cc:	2302      	movs	r3, #2
 80020ce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d8:	2300      	movs	r3, #0
 80020da:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020de:	2305      	movs	r3, #5
 80020e0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e4:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 80020e8:	4619      	mov	r1, r3
 80020ea:	4810      	ldr	r0, [pc, #64]	@ (800212c <HAL_SPI_MspInit+0x170>)
 80020ec:	f001 f8e2 	bl	80032b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80020f0:	2380      	movs	r3, #128	@ 0x80
 80020f2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f6:	2302      	movs	r3, #2
 80020f8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002102:	2300      	movs	r3, #0
 8002104:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002108:	2305      	movs	r3, #5
 800210a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800210e:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8002112:	4619      	mov	r1, r3
 8002114:	4806      	ldr	r0, [pc, #24]	@ (8002130 <HAL_SPI_MspInit+0x174>)
 8002116:	f001 f8cd 	bl	80032b4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800211a:	bf00      	nop
 800211c:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40013000 	.word	0x40013000
 8002128:	44020c00 	.word	0x44020c00
 800212c:	42020000 	.word	0x42020000
 8002130:	42020c00 	.word	0x42020c00

08002134 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b0d2      	sub	sp, #328	@ 0x148
 8002138:	af00      	add	r7, sp, #0
 800213a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800213e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002142:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002144:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	60da      	str	r2, [r3, #12]
 8002152:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002154:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002158:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800215c:	4618      	mov	r0, r3
 800215e:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8002162:	461a      	mov	r2, r3
 8002164:	2100      	movs	r1, #0
 8002166:	f00f fa29 	bl	80115bc <memset>
  if(huart->Instance==USART2)
 800216a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800216e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4ac7      	ldr	r2, [pc, #796]	@ (8002494 <HAL_UART_MspInit+0x360>)
 8002178:	4293      	cmp	r3, r2
 800217a:	f040 808a 	bne.w	8002292 <HAL_UART_MspInit+0x15e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800217e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002182:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8002186:	f04f 0202 	mov.w	r2, #2
 800218a:	f04f 0300 	mov.w	r3, #0
 800218e:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002192:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002196:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800219a:	2200      	movs	r2, #0
 800219c:	661a      	str	r2, [r3, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800219e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021a2:	4618      	mov	r0, r3
 80021a4:	f003 fff2 	bl	800618c <HAL_RCCEx_PeriphCLKConfig>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 80021ae:	f7ff fd95 	bl	8001cdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021b2:	4bb9      	ldr	r3, [pc, #740]	@ (8002498 <HAL_UART_MspInit+0x364>)
 80021b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80021b8:	4ab7      	ldr	r2, [pc, #732]	@ (8002498 <HAL_UART_MspInit+0x364>)
 80021ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021be:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80021c2:	4bb5      	ldr	r3, [pc, #724]	@ (8002498 <HAL_UART_MspInit+0x364>)
 80021c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80021c8:	f403 3200 	and.w	r2, r3, #131072	@ 0x20000
 80021cc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80021d0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80021da:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80021de:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e0:	4bad      	ldr	r3, [pc, #692]	@ (8002498 <HAL_UART_MspInit+0x364>)
 80021e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021e6:	4aac      	ldr	r2, [pc, #688]	@ (8002498 <HAL_UART_MspInit+0x364>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80021f0:	4ba9      	ldr	r3, [pc, #676]	@ (8002498 <HAL_UART_MspInit+0x364>)
 80021f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021f6:	f003 0201 	and.w	r2, r3, #1
 80021fa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80021fe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002208:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800220c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800220e:	4ba2      	ldr	r3, [pc, #648]	@ (8002498 <HAL_UART_MspInit+0x364>)
 8002210:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002214:	4aa0      	ldr	r2, [pc, #640]	@ (8002498 <HAL_UART_MspInit+0x364>)
 8002216:	f043 0308 	orr.w	r3, r3, #8
 800221a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800221e:	4b9e      	ldr	r3, [pc, #632]	@ (8002498 <HAL_UART_MspInit+0x364>)
 8002220:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002224:	f003 0208 	and.w	r2, r3, #8
 8002228:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800222c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002236:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800223a:	681b      	ldr	r3, [r3, #0]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800223c:	2308      	movs	r3, #8
 800223e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002242:	2302      	movs	r3, #2
 8002244:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	2300      	movs	r3, #0
 800224a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224e:	2300      	movs	r3, #0
 8002250:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002254:	2307      	movs	r3, #7
 8002256:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225a:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 800225e:	4619      	mov	r1, r3
 8002260:	488e      	ldr	r0, [pc, #568]	@ (800249c <HAL_UART_MspInit+0x368>)
 8002262:	f001 f827 	bl	80032b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002266:	2320      	movs	r3, #32
 8002268:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226c:	2302      	movs	r3, #2
 800226e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002272:	2300      	movs	r3, #0
 8002274:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002278:	2300      	movs	r3, #0
 800227a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800227e:	2307      	movs	r3, #7
 8002280:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002284:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8002288:	4619      	mov	r1, r3
 800228a:	4885      	ldr	r0, [pc, #532]	@ (80024a0 <HAL_UART_MspInit+0x36c>)
 800228c:	f001 f812 	bl	80032b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002290:	e0fb      	b.n	800248a <HAL_UART_MspInit+0x356>
  else if(huart->Instance==USART3)
 8002292:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002296:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a81      	ldr	r2, [pc, #516]	@ (80024a4 <HAL_UART_MspInit+0x370>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	f040 808c 	bne.w	80023be <HAL_UART_MspInit+0x28a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80022a6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80022aa:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80022ae:	f04f 0204 	mov.w	r2, #4
 80022b2:	f04f 0300 	mov.w	r3, #0
 80022b6:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80022ba:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80022be:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80022c2:	2200      	movs	r2, #0
 80022c4:	665a      	str	r2, [r3, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80022ca:	4618      	mov	r0, r3
 80022cc:	f003 ff5e 	bl	800618c <HAL_RCCEx_PeriphCLKConfig>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <HAL_UART_MspInit+0x1a6>
      Error_Handler();
 80022d6:	f7ff fd01 	bl	8001cdc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80022da:	4b6f      	ldr	r3, [pc, #444]	@ (8002498 <HAL_UART_MspInit+0x364>)
 80022dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022e0:	4a6d      	ldr	r2, [pc, #436]	@ (8002498 <HAL_UART_MspInit+0x364>)
 80022e2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022e6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80022ea:	4b6b      	ldr	r3, [pc, #428]	@ (8002498 <HAL_UART_MspInit+0x364>)
 80022ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022f0:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 80022f4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80022f8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002302:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002306:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002308:	4b63      	ldr	r3, [pc, #396]	@ (8002498 <HAL_UART_MspInit+0x364>)
 800230a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800230e:	4a62      	ldr	r2, [pc, #392]	@ (8002498 <HAL_UART_MspInit+0x364>)
 8002310:	f043 0302 	orr.w	r3, r3, #2
 8002314:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002318:	4b5f      	ldr	r3, [pc, #380]	@ (8002498 <HAL_UART_MspInit+0x364>)
 800231a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800231e:	f003 0202 	and.w	r2, r3, #2
 8002322:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002326:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002330:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002334:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002336:	4b58      	ldr	r3, [pc, #352]	@ (8002498 <HAL_UART_MspInit+0x364>)
 8002338:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800233c:	4a56      	ldr	r2, [pc, #344]	@ (8002498 <HAL_UART_MspInit+0x364>)
 800233e:	f043 0308 	orr.w	r3, r3, #8
 8002342:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002346:	4b54      	ldr	r3, [pc, #336]	@ (8002498 <HAL_UART_MspInit+0x364>)
 8002348:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800234c:	f003 0208 	and.w	r2, r3, #8
 8002350:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002354:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800235e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002362:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002364:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002368:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236c:	2302      	movs	r3, #2
 800236e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002372:	2300      	movs	r3, #0
 8002374:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002378:	2300      	movs	r3, #0
 800237a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800237e:	2307      	movs	r3, #7
 8002380:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002384:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8002388:	4619      	mov	r1, r3
 800238a:	4847      	ldr	r0, [pc, #284]	@ (80024a8 <HAL_UART_MspInit+0x374>)
 800238c:	f000 ff92 	bl	80032b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002390:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002394:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002398:	2302      	movs	r3, #2
 800239a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a4:	2300      	movs	r3, #0
 80023a6:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023aa:	2307      	movs	r3, #7
 80023ac:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023b0:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80023b4:	4619      	mov	r1, r3
 80023b6:	483a      	ldr	r0, [pc, #232]	@ (80024a0 <HAL_UART_MspInit+0x36c>)
 80023b8:	f000 ff7c 	bl	80032b4 <HAL_GPIO_Init>
}
 80023bc:	e065      	b.n	800248a <HAL_UART_MspInit+0x356>
  else if(huart->Instance==USART6)
 80023be:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80023c2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a38      	ldr	r2, [pc, #224]	@ (80024ac <HAL_UART_MspInit+0x378>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d15c      	bne.n	800248a <HAL_UART_MspInit+0x356>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80023d0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80023d4:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80023d8:	f04f 0220 	mov.w	r2, #32
 80023dc:	f04f 0300 	mov.w	r3, #0
 80023e0:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 80023e4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80023e8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80023ec:	2200      	movs	r2, #0
 80023ee:	671a      	str	r2, [r3, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023f0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023f4:	4618      	mov	r0, r3
 80023f6:	f003 fec9 	bl	800618c <HAL_RCCEx_PeriphCLKConfig>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <HAL_UART_MspInit+0x2d0>
      Error_Handler();
 8002400:	f7ff fc6c 	bl	8001cdc <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002404:	4b24      	ldr	r3, [pc, #144]	@ (8002498 <HAL_UART_MspInit+0x364>)
 8002406:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800240a:	4a23      	ldr	r2, [pc, #140]	@ (8002498 <HAL_UART_MspInit+0x364>)
 800240c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002410:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002414:	4b20      	ldr	r3, [pc, #128]	@ (8002498 <HAL_UART_MspInit+0x364>)
 8002416:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800241a:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 800241e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002422:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800242c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002430:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002432:	4b19      	ldr	r3, [pc, #100]	@ (8002498 <HAL_UART_MspInit+0x364>)
 8002434:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002438:	4a17      	ldr	r2, [pc, #92]	@ (8002498 <HAL_UART_MspInit+0x364>)
 800243a:	f043 0304 	orr.w	r3, r3, #4
 800243e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002442:	4b15      	ldr	r3, [pc, #84]	@ (8002498 <HAL_UART_MspInit+0x364>)
 8002444:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002448:	f003 0204 	and.w	r2, r3, #4
 800244c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002450:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800245a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800245e:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002460:	23c0      	movs	r3, #192	@ 0xc0
 8002462:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002466:	2302      	movs	r3, #2
 8002468:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246c:	2300      	movs	r3, #0
 800246e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002472:	2300      	movs	r3, #0
 8002474:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8002478:	2307      	movs	r3, #7
 800247a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800247e:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8002482:	4619      	mov	r1, r3
 8002484:	480a      	ldr	r0, [pc, #40]	@ (80024b0 <HAL_UART_MspInit+0x37c>)
 8002486:	f000 ff15 	bl	80032b4 <HAL_GPIO_Init>
}
 800248a:	bf00      	nop
 800248c:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40004400 	.word	0x40004400
 8002498:	44020c00 	.word	0x44020c00
 800249c:	42020000 	.word	0x42020000
 80024a0:	42020c00 	.word	0x42020c00
 80024a4:	40004800 	.word	0x40004800
 80024a8:	42020400 	.word	0x42020400
 80024ac:	40006400 	.word	0x40006400
 80024b0:	42020800 	.word	0x42020800

080024b4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b0c6      	sub	sp, #280	@ 0x118
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80024be:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80024c2:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024c4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80024c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80024cc:	4618      	mov	r0, r3
 80024ce:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80024d2:	461a      	mov	r2, r3
 80024d4:	2100      	movs	r1, #0
 80024d6:	f00f f871 	bl	80115bc <memset>
  if(hpcd->Instance==USB_DRD_FS)
 80024da:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80024de:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a22      	ldr	r2, [pc, #136]	@ (8002570 <HAL_PCD_MspInit+0xbc>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d13b      	bne.n	8002564 <HAL_PCD_MspInit+0xb0>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80024ec:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80024f0:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 80024f4:	f04f 0200 	mov.w	r2, #0
 80024f8:	f04f 0310 	mov.w	r3, #16
 80024fc:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002500:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002504:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002508:	2230      	movs	r2, #48	@ 0x30
 800250a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800250e:	f107 0310 	add.w	r3, r7, #16
 8002512:	4618      	mov	r0, r3
 8002514:	f003 fe3a 	bl	800618c <HAL_RCCEx_PeriphCLKConfig>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <HAL_PCD_MspInit+0x6e>
    {
      Error_Handler();
 800251e:	f7ff fbdd 	bl	8001cdc <Error_Handler>
    }

    /* Enable VDDUSB */
    HAL_PWREx_EnableVddUSB();
 8002522:	f002 fea9 	bl	8005278 <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002526:	4b13      	ldr	r3, [pc, #76]	@ (8002574 <HAL_PCD_MspInit+0xc0>)
 8002528:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800252c:	4a11      	ldr	r2, [pc, #68]	@ (8002574 <HAL_PCD_MspInit+0xc0>)
 800252e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002532:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002536:	4b0f      	ldr	r3, [pc, #60]	@ (8002574 <HAL_PCD_MspInit+0xc0>)
 8002538:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800253c:	f003 7280 	and.w	r2, r3, #16777216	@ 0x1000000
 8002540:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002544:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800254e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002552:	681b      	ldr	r3, [r3, #0]
    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 8002554:	2200      	movs	r2, #0
 8002556:	2100      	movs	r1, #0
 8002558:	204a      	movs	r0, #74	@ 0x4a
 800255a:	f000 fd4b 	bl	8002ff4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_DRD_FS_IRQn);
 800255e:	204a      	movs	r0, #74	@ 0x4a
 8002560:	f000 fd62 	bl	8003028 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 8002564:	bf00      	nop
 8002566:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40016000 	.word	0x40016000
 8002574:	44020c00 	.word	0x44020c00

08002578 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800257c:	bf00      	nop
 800257e:	e7fd      	b.n	800257c <NMI_Handler+0x4>

08002580 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002584:	bf00      	nop
 8002586:	e7fd      	b.n	8002584 <HardFault_Handler+0x4>

08002588 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800258c:	bf00      	nop
 800258e:	e7fd      	b.n	800258c <MemManage_Handler+0x4>

08002590 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002594:	bf00      	nop
 8002596:	e7fd      	b.n	8002594 <BusFault_Handler+0x4>

08002598 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800259c:	bf00      	nop
 800259e:	e7fd      	b.n	800259c <UsageFault_Handler+0x4>

080025a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025a4:	bf00      	nop
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025ae:	b480      	push	{r7}
 80025b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025b2:	bf00      	nop
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025c0:	bf00      	nop
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr

080025ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025ce:	f000 fc15 	bl	8002dfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80025da:	2000      	movs	r0, #0
 80025dc:	f000 fa6e 	bl	8002abc <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80025e0:	bf00      	nop
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <USB_DRD_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt.
  */
void USB_DRD_FS_IRQHandler(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DRD_FS_IRQn 0 */

  /* USER CODE END USB_DRD_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 80025e8:	4802      	ldr	r0, [pc, #8]	@ (80025f4 <USB_DRD_FS_IRQHandler+0x10>)
 80025ea:	f001 fad7 	bl	8003b9c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_DRD_FS_IRQn 1 */

  /* USER CODE END USB_DRD_FS_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	200004d0 	.word	0x200004d0

080025f8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002604:	2300      	movs	r3, #0
 8002606:	617b      	str	r3, [r7, #20]
 8002608:	e00a      	b.n	8002620 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800260a:	f3af 8000 	nop.w
 800260e:	4601      	mov	r1, r0
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	1c5a      	adds	r2, r3, #1
 8002614:	60ba      	str	r2, [r7, #8]
 8002616:	b2ca      	uxtb	r2, r1
 8002618:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	3301      	adds	r3, #1
 800261e:	617b      	str	r3, [r7, #20]
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	429a      	cmp	r2, r3
 8002626:	dbf0      	blt.n	800260a <_read+0x12>
  }

  return len;
 8002628:	687b      	ldr	r3, [r7, #4]
}
 800262a:	4618      	mov	r0, r3
 800262c:	3718      	adds	r7, #24
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b086      	sub	sp, #24
 8002636:	af00      	add	r7, sp, #0
 8002638:	60f8      	str	r0, [r7, #12]
 800263a:	60b9      	str	r1, [r7, #8]
 800263c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800263e:	2300      	movs	r3, #0
 8002640:	617b      	str	r3, [r7, #20]
 8002642:	e009      	b.n	8002658 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	1c5a      	adds	r2, r3, #1
 8002648:	60ba      	str	r2, [r7, #8]
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f000 fabb 	bl	8002bc8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	3301      	adds	r3, #1
 8002656:	617b      	str	r3, [r7, #20]
 8002658:	697a      	ldr	r2, [r7, #20]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	429a      	cmp	r2, r3
 800265e:	dbf1      	blt.n	8002644 <_write+0x12>
  }
  return len;
 8002660:	687b      	ldr	r3, [r7, #4]
}
 8002662:	4618      	mov	r0, r3
 8002664:	3718      	adds	r7, #24
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <_close>:

int _close(int file)
{
 800266a:	b480      	push	{r7}
 800266c:	b083      	sub	sp, #12
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002672:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002676:	4618      	mov	r0, r3
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002682:	b480      	push	{r7}
 8002684:	b083      	sub	sp, #12
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
 800268a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002692:	605a      	str	r2, [r3, #4]
  return 0;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <_isatty>:

int _isatty(int file)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026aa:	2301      	movs	r3, #1
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
	...

080026d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026dc:	4a14      	ldr	r2, [pc, #80]	@ (8002730 <_sbrk+0x5c>)
 80026de:	4b15      	ldr	r3, [pc, #84]	@ (8002734 <_sbrk+0x60>)
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026e8:	4b13      	ldr	r3, [pc, #76]	@ (8002738 <_sbrk+0x64>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d102      	bne.n	80026f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026f0:	4b11      	ldr	r3, [pc, #68]	@ (8002738 <_sbrk+0x64>)
 80026f2:	4a12      	ldr	r2, [pc, #72]	@ (800273c <_sbrk+0x68>)
 80026f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026f6:	4b10      	ldr	r3, [pc, #64]	@ (8002738 <_sbrk+0x64>)
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4413      	add	r3, r2
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	429a      	cmp	r2, r3
 8002702:	d207      	bcs.n	8002714 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002704:	f00e ffa8 	bl	8011658 <__errno>
 8002708:	4603      	mov	r3, r0
 800270a:	220c      	movs	r2, #12
 800270c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800270e:	f04f 33ff 	mov.w	r3, #4294967295
 8002712:	e009      	b.n	8002728 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002714:	4b08      	ldr	r3, [pc, #32]	@ (8002738 <_sbrk+0x64>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800271a:	4b07      	ldr	r3, [pc, #28]	@ (8002738 <_sbrk+0x64>)
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4413      	add	r3, r2
 8002722:	4a05      	ldr	r2, [pc, #20]	@ (8002738 <_sbrk+0x64>)
 8002724:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002726:	68fb      	ldr	r3, [r7, #12]
}
 8002728:	4618      	mov	r0, r3
 800272a:	3718      	adds	r7, #24
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	200a0000 	.word	0x200a0000
 8002734:	00000500 	.word	0x00000500
 8002738:	20000a90 	.word	0x20000a90
 800273c:	200113b8 	.word	0x200113b8

08002740 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002746:	4b35      	ldr	r3, [pc, #212]	@ (800281c <SystemInit+0xdc>)
 8002748:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800274c:	4a33      	ldr	r2, [pc, #204]	@ (800281c <SystemInit+0xdc>)
 800274e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002752:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8002756:	4b32      	ldr	r3, [pc, #200]	@ (8002820 <SystemInit+0xe0>)
 8002758:	2201      	movs	r2, #1
 800275a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800275c:	4b30      	ldr	r3, [pc, #192]	@ (8002820 <SystemInit+0xe0>)
 800275e:	2200      	movs	r2, #0
 8002760:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002762:	4b2f      	ldr	r3, [pc, #188]	@ (8002820 <SystemInit+0xe0>)
 8002764:	2200      	movs	r2, #0
 8002766:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8002768:	4b2d      	ldr	r3, [pc, #180]	@ (8002820 <SystemInit+0xe0>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	492c      	ldr	r1, [pc, #176]	@ (8002820 <SystemInit+0xe0>)
 800276e:	4b2d      	ldr	r3, [pc, #180]	@ (8002824 <SystemInit+0xe4>)
 8002770:	4013      	ands	r3, r2
 8002772:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8002774:	4b2a      	ldr	r3, [pc, #168]	@ (8002820 <SystemInit+0xe0>)
 8002776:	2200      	movs	r2, #0
 8002778:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 800277a:	4b29      	ldr	r3, [pc, #164]	@ (8002820 <SystemInit+0xe0>)
 800277c:	2200      	movs	r2, #0
 800277e:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8002780:	4b27      	ldr	r3, [pc, #156]	@ (8002820 <SystemInit+0xe0>)
 8002782:	2200      	movs	r2, #0
 8002784:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8002786:	4b26      	ldr	r3, [pc, #152]	@ (8002820 <SystemInit+0xe0>)
 8002788:	4a27      	ldr	r2, [pc, #156]	@ (8002828 <SystemInit+0xe8>)
 800278a:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 800278c:	4b24      	ldr	r3, [pc, #144]	@ (8002820 <SystemInit+0xe0>)
 800278e:	2200      	movs	r2, #0
 8002790:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8002792:	4b23      	ldr	r3, [pc, #140]	@ (8002820 <SystemInit+0xe0>)
 8002794:	4a24      	ldr	r2, [pc, #144]	@ (8002828 <SystemInit+0xe8>)
 8002796:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8002798:	4b21      	ldr	r3, [pc, #132]	@ (8002820 <SystemInit+0xe0>)
 800279a:	2200      	movs	r2, #0
 800279c:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 800279e:	4b20      	ldr	r3, [pc, #128]	@ (8002820 <SystemInit+0xe0>)
 80027a0:	4a21      	ldr	r2, [pc, #132]	@ (8002828 <SystemInit+0xe8>)
 80027a2:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 80027a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002820 <SystemInit+0xe0>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80027aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002820 <SystemInit+0xe0>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a1c      	ldr	r2, [pc, #112]	@ (8002820 <SystemInit+0xe0>)
 80027b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027b4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80027b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002820 <SystemInit+0xe0>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80027bc:	4b17      	ldr	r3, [pc, #92]	@ (800281c <SystemInit+0xdc>)
 80027be:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80027c2:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80027c4:	4b19      	ldr	r3, [pc, #100]	@ (800282c <SystemInit+0xec>)
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 80027cc:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 80027d4:	d003      	beq.n	80027de <SystemInit+0x9e>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80027dc:	d117      	bne.n	800280e <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80027de:	4b13      	ldr	r3, [pc, #76]	@ (800282c <SystemInit+0xec>)
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d005      	beq.n	80027f6 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80027ea:	4b10      	ldr	r3, [pc, #64]	@ (800282c <SystemInit+0xec>)
 80027ec:	4a10      	ldr	r2, [pc, #64]	@ (8002830 <SystemInit+0xf0>)
 80027ee:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80027f0:	4b0e      	ldr	r3, [pc, #56]	@ (800282c <SystemInit+0xec>)
 80027f2:	4a10      	ldr	r2, [pc, #64]	@ (8002834 <SystemInit+0xf4>)
 80027f4:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80027f6:	4b0d      	ldr	r3, [pc, #52]	@ (800282c <SystemInit+0xec>)
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	4a0c      	ldr	r2, [pc, #48]	@ (800282c <SystemInit+0xec>)
 80027fc:	f043 0302 	orr.w	r3, r3, #2
 8002800:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8002802:	4b0a      	ldr	r3, [pc, #40]	@ (800282c <SystemInit+0xec>)
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	4a09      	ldr	r2, [pc, #36]	@ (800282c <SystemInit+0xec>)
 8002808:	f043 0301 	orr.w	r3, r3, #1
 800280c:	61d3      	str	r3, [r2, #28]
  }
}
 800280e:	bf00      	nop
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	e000ed00 	.word	0xe000ed00
 8002820:	44020c00 	.word	0x44020c00
 8002824:	eae2eae3 	.word	0xeae2eae3
 8002828:	01010280 	.word	0x01010280
 800282c:	40022000 	.word	0x40022000
 8002830:	08192a3b 	.word	0x08192a3b
 8002834:	4c5d6e7f 	.word	0x4c5d6e7f

08002838 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002838:	480d      	ldr	r0, [pc, #52]	@ (8002870 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800283a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800283c:	f7ff ff80 	bl	8002740 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002840:	480c      	ldr	r0, [pc, #48]	@ (8002874 <LoopForever+0x6>)
  ldr r1, =_edata
 8002842:	490d      	ldr	r1, [pc, #52]	@ (8002878 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002844:	4a0d      	ldr	r2, [pc, #52]	@ (800287c <LoopForever+0xe>)
  movs r3, #0
 8002846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002848:	e002      	b.n	8002850 <LoopCopyDataInit>

0800284a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800284a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800284c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800284e:	3304      	adds	r3, #4

08002850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002854:	d3f9      	bcc.n	800284a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002856:	4a0a      	ldr	r2, [pc, #40]	@ (8002880 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002858:	4c0a      	ldr	r4, [pc, #40]	@ (8002884 <LoopForever+0x16>)
  movs r3, #0
 800285a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800285c:	e001      	b.n	8002862 <LoopFillZerobss>

0800285e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800285e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002860:	3204      	adds	r2, #4

08002862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002864:	d3fb      	bcc.n	800285e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002866:	f00e fefd 	bl	8011664 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800286a:	f7fe fde7 	bl	800143c <main>

0800286e <LoopForever>:

LoopForever:
    b LoopForever
 800286e:	e7fe      	b.n	800286e <LoopForever>
  ldr   r0, =_estack
 8002870:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002874:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002878:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 800287c:	08013160 	.word	0x08013160
  ldr r2, =_sbss
 8002880:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8002884:	200113b4 	.word	0x200113b4

08002888 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002888:	e7fe      	b.n	8002888 <ADC1_IRQHandler>
	...

0800288c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b08c      	sub	sp, #48	@ 0x30
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002896:	2300      	movs	r3, #0
 8002898:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if ((Led != LED2)
 800289a:	79fb      	ldrb	r3, [r7, #7]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d009      	beq.n	80028b4 <BSP_LED_Init+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 80028a0:	79fb      	ldrb	r3, [r7, #7]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d006      	beq.n	80028b4 <BSP_LED_Init+0x28>
 80028a6:	79fb      	ldrb	r3, [r7, #7]
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d003      	beq.n	80028b4 <BSP_LED_Init+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80028ac:	f06f 0301 	mvn.w	r3, #1
 80028b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028b2:	e055      	b.n	8002960 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 80028b4:	79fb      	ldrb	r3, [r7, #7]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d10f      	bne.n	80028da <BSP_LED_Init+0x4e>
    {
      LED2_GPIO_CLK_ENABLE();
 80028ba:	4b2c      	ldr	r3, [pc, #176]	@ (800296c <BSP_LED_Init+0xe0>)
 80028bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028c0:	4a2a      	ldr	r2, [pc, #168]	@ (800296c <BSP_LED_Init+0xe0>)
 80028c2:	f043 0320 	orr.w	r3, r3, #32
 80028c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80028ca:	4b28      	ldr	r3, [pc, #160]	@ (800296c <BSP_LED_Init+0xe0>)
 80028cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028d0:	f003 0320 	and.w	r3, r3, #32
 80028d4:	617b      	str	r3, [r7, #20]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	e021      	b.n	800291e <BSP_LED_Init+0x92>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 80028da:	79fb      	ldrb	r3, [r7, #7]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10f      	bne.n	8002900 <BSP_LED_Init+0x74>
    {
      LED1_GPIO_CLK_ENABLE();
 80028e0:	4b22      	ldr	r3, [pc, #136]	@ (800296c <BSP_LED_Init+0xe0>)
 80028e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028e6:	4a21      	ldr	r2, [pc, #132]	@ (800296c <BSP_LED_Init+0xe0>)
 80028e8:	f043 0302 	orr.w	r3, r3, #2
 80028ec:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80028f0:	4b1e      	ldr	r3, [pc, #120]	@ (800296c <BSP_LED_Init+0xe0>)
 80028f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	613b      	str	r3, [r7, #16]
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	e00e      	b.n	800291e <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8002900:	4b1a      	ldr	r3, [pc, #104]	@ (800296c <BSP_LED_Init+0xe0>)
 8002902:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002906:	4a19      	ldr	r2, [pc, #100]	@ (800296c <BSP_LED_Init+0xe0>)
 8002908:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800290c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002910:	4b16      	ldr	r3, [pc, #88]	@ (800296c <BSP_LED_Init+0xe0>)
 8002912:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800291e:	79fb      	ldrb	r3, [r7, #7]
 8002920:	4a13      	ldr	r2, [pc, #76]	@ (8002970 <BSP_LED_Init+0xe4>)
 8002922:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002926:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002928:	2301      	movs	r3, #1
 800292a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 800292c:	2300      	movs	r3, #0
 800292e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002930:	2303      	movs	r3, #3
 8002932:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8002934:	79fb      	ldrb	r3, [r7, #7]
 8002936:	4a0f      	ldr	r2, [pc, #60]	@ (8002974 <BSP_LED_Init+0xe8>)
 8002938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800293c:	f107 0218 	add.w	r2, r7, #24
 8002940:	4611      	mov	r1, r2
 8002942:	4618      	mov	r0, r3
 8002944:	f000 fcb6 	bl	80032b4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002948:	79fb      	ldrb	r3, [r7, #7]
 800294a:	4a0a      	ldr	r2, [pc, #40]	@ (8002974 <BSP_LED_Init+0xe8>)
 800294c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002950:	79fb      	ldrb	r3, [r7, #7]
 8002952:	4a07      	ldr	r2, [pc, #28]	@ (8002970 <BSP_LED_Init+0xe4>)
 8002954:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002958:	2200      	movs	r2, #0
 800295a:	4619      	mov	r1, r3
 800295c:	f000 fdfc 	bl	8003558 <HAL_GPIO_WritePin>
  }

  return ret;
 8002960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002962:	4618      	mov	r0, r3
 8002964:	3730      	adds	r7, #48	@ 0x30
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	44020c00 	.word	0x44020c00
 8002970:	080130e8 	.word	0x080130e8
 8002974:	2000000c 	.word	0x2000000c

08002978 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002982:	2300      	movs	r3, #0
 8002984:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 8002986:	79fb      	ldrb	r3, [r7, #7]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d009      	beq.n	80029a0 <BSP_LED_Toggle+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 800298c:	79fb      	ldrb	r3, [r7, #7]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d006      	beq.n	80029a0 <BSP_LED_Toggle+0x28>
 8002992:	79fb      	ldrb	r3, [r7, #7]
 8002994:	2b02      	cmp	r3, #2
 8002996:	d003      	beq.n	80029a0 <BSP_LED_Toggle+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002998:	f06f 0301 	mvn.w	r3, #1
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	e00b      	b.n	80029b8 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80029a0:	79fb      	ldrb	r3, [r7, #7]
 80029a2:	4a08      	ldr	r2, [pc, #32]	@ (80029c4 <BSP_LED_Toggle+0x4c>)
 80029a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80029a8:	79fb      	ldrb	r3, [r7, #7]
 80029aa:	4907      	ldr	r1, [pc, #28]	@ (80029c8 <BSP_LED_Toggle+0x50>)
 80029ac:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80029b0:	4619      	mov	r1, r3
 80029b2:	4610      	mov	r0, r2
 80029b4:	f000 fde8 	bl	8003588 <HAL_GPIO_TogglePin>
  }

  return ret;
 80029b8:	68fb      	ldr	r3, [r7, #12]
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	2000000c 	.word	0x2000000c
 80029c8:	080130e8 	.word	0x080130e8

080029cc <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b088      	sub	sp, #32
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	460a      	mov	r2, r1
 80029d6:	71fb      	strb	r3, [r7, #7]
 80029d8:	4613      	mov	r3, r2
 80029da:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80029dc:	4b30      	ldr	r3, [pc, #192]	@ (8002aa0 <BSP_PB_Init+0xd4>)
 80029de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029e2:	4a2f      	ldr	r2, [pc, #188]	@ (8002aa0 <BSP_PB_Init+0xd4>)
 80029e4:	f043 0304 	orr.w	r3, r3, #4
 80029e8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80029ec:	4b2c      	ldr	r3, [pc, #176]	@ (8002aa0 <BSP_PB_Init+0xd4>)
 80029ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029f2:	f003 0304 	and.w	r3, r3, #4
 80029f6:	60bb      	str	r3, [r7, #8]
 80029f8:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80029fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029fe:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002a00:	2302      	movs	r3, #2
 8002a02:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a04:	2302      	movs	r3, #2
 8002a06:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8002a08:	79bb      	ldrb	r3, [r7, #6]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10c      	bne.n	8002a28 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8002a12:	79fb      	ldrb	r3, [r7, #7]
 8002a14:	4a23      	ldr	r2, [pc, #140]	@ (8002aa4 <BSP_PB_Init+0xd8>)
 8002a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a1a:	f107 020c 	add.w	r2, r7, #12
 8002a1e:	4611      	mov	r1, r2
 8002a20:	4618      	mov	r0, r3
 8002a22:	f000 fc47 	bl	80032b4 <HAL_GPIO_Init>
 8002a26:	e036      	b.n	8002a96 <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002a28:	4b1f      	ldr	r3, [pc, #124]	@ (8002aa8 <BSP_PB_Init+0xdc>)
 8002a2a:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002a2c:	79fb      	ldrb	r3, [r7, #7]
 8002a2e:	4a1d      	ldr	r2, [pc, #116]	@ (8002aa4 <BSP_PB_Init+0xd8>)
 8002a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a34:	f107 020c 	add.w	r2, r7, #12
 8002a38:	4611      	mov	r1, r2
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 fc3a 	bl	80032b4 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8002a40:	79fa      	ldrb	r2, [r7, #7]
 8002a42:	4613      	mov	r3, r2
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	4413      	add	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4a18      	ldr	r2, [pc, #96]	@ (8002aac <BSP_PB_Init+0xe0>)
 8002a4c:	441a      	add	r2, r3
 8002a4e:	79fb      	ldrb	r3, [r7, #7]
 8002a50:	4917      	ldr	r1, [pc, #92]	@ (8002ab0 <BSP_PB_Init+0xe4>)
 8002a52:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002a56:	4619      	mov	r1, r3
 8002a58:	4610      	mov	r0, r2
 8002a5a:	f000 fbcf 	bl	80031fc <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8002a5e:	79fa      	ldrb	r2, [r7, #7]
 8002a60:	4613      	mov	r3, r2
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	4413      	add	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4a10      	ldr	r2, [pc, #64]	@ (8002aac <BSP_PB_Init+0xe0>)
 8002a6a:	1898      	adds	r0, r3, r2
 8002a6c:	79fb      	ldrb	r3, [r7, #7]
 8002a6e:	4a11      	ldr	r2, [pc, #68]	@ (8002ab4 <BSP_PB_Init+0xe8>)
 8002a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a74:	461a      	mov	r2, r3
 8002a76:	2100      	movs	r1, #0
 8002a78:	f000 fb94 	bl	80031a4 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8002a7c:	2018      	movs	r0, #24
 8002a7e:	79fb      	ldrb	r3, [r7, #7]
 8002a80:	4a0d      	ldr	r2, [pc, #52]	@ (8002ab8 <BSP_PB_Init+0xec>)
 8002a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a86:	2200      	movs	r2, #0
 8002a88:	4619      	mov	r1, r3
 8002a8a:	f000 fab3 	bl	8002ff4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002a8e:	2318      	movs	r3, #24
 8002a90:	4618      	mov	r0, r3
 8002a92:	f000 fac9 	bl	8003028 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3720      	adds	r7, #32
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	44020c00 	.word	0x44020c00
 8002aa4:	20000018 	.word	0x20000018
 8002aa8:	10110000 	.word	0x10110000
 8002aac:	20000a94 	.word	0x20000a94
 8002ab0:	080130f0 	.word	0x080130f0
 8002ab4:	2000001c 	.word	0x2000001c
 8002ab8:	20000020 	.word	0x20000020

08002abc <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8002ac6:	79fa      	ldrb	r2, [r7, #7]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	4413      	add	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4a04      	ldr	r2, [pc, #16]	@ (8002ae4 <BSP_PB_IRQHandler+0x28>)
 8002ad2:	4413      	add	r3, r2
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f000 fba5 	bl	8003224 <HAL_EXTI_IRQHandler>
}
 8002ada:	bf00      	nop
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	20000a94 	.word	0x20000a94

08002ae8 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	4603      	mov	r3, r0
 8002af0:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8002af2:	bf00      	nop
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
	...

08002b00 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	4603      	mov	r3, r0
 8002b08:	6039      	str	r1, [r7, #0]
 8002b0a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60fb      	str	r3, [r7, #12]

  if (COM >= COM_NBR)
 8002b10:	79fb      	ldrb	r3, [r7, #7]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002b16:	f06f 0301 	mvn.w	r3, #1
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	e018      	b.n	8002b50 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8002b1e:	79fb      	ldrb	r3, [r7, #7]
 8002b20:	2294      	movs	r2, #148	@ 0x94
 8002b22:	fb02 f303 	mul.w	r3, r2, r3
 8002b26:	4a0d      	ldr	r2, [pc, #52]	@ (8002b5c <BSP_COM_Init+0x5c>)
 8002b28:	4413      	add	r3, r2
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 f870 	bl	8002c10 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8002b30:	79fb      	ldrb	r3, [r7, #7]
 8002b32:	2294      	movs	r2, #148	@ 0x94
 8002b34:	fb02 f303 	mul.w	r3, r2, r3
 8002b38:	4a08      	ldr	r2, [pc, #32]	@ (8002b5c <BSP_COM_Init+0x5c>)
 8002b3a:	4413      	add	r3, r2
 8002b3c:	6839      	ldr	r1, [r7, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f000 f80e 	bl	8002b60 <MX_USART_Init>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d002      	beq.n	8002b50 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002b4a:	f06f 0303 	mvn.w	r3, #3
 8002b4e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002b50:	68fb      	ldr	r3, [r7, #12]
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	20000aa0 	.word	0x20000aa0

08002b60 <MX_USART_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8002b6a:	4b16      	ldr	r3, [pc, #88]	@ (8002bc4 <MX_USART_Init+0x64>)
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	220c      	movs	r2, #12
 8002b7e:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	895b      	ldrh	r3, [r3, #10]
 8002b84:	461a      	mov	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	891b      	ldrh	r3, [r3, #8]
 8002b96:	461a      	mov	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	899b      	ldrh	r3, [r3, #12]
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002bac:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f009 f904 	bl	800bdc2 <HAL_UART_Init>
 8002bba:	4603      	mov	r3, r0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	20000008 	.word	0x20000008

08002bc8 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8002bd0:	4b09      	ldr	r3, [pc, #36]	@ (8002bf8 <__io_putchar+0x30>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	2394      	movs	r3, #148	@ 0x94
 8002bd8:	fb02 f303 	mul.w	r3, r2, r3
 8002bdc:	4a07      	ldr	r2, [pc, #28]	@ (8002bfc <__io_putchar+0x34>)
 8002bde:	1898      	adds	r0, r3, r2
 8002be0:	1d39      	adds	r1, r7, #4
 8002be2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002be6:	2201      	movs	r2, #1
 8002be8:	f009 f93b 	bl	800be62 <HAL_UART_Transmit>
  return ch;
 8002bec:	687b      	ldr	r3, [r7, #4]
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	20000b34 	.word	0x20000b34
 8002bfc:	20000aa0 	.word	0x20000aa0

08002c00 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002c04:	2000      	movs	r0, #0
 8002c06:	f7ff ff6f 	bl	8002ae8 <BSP_PB_Callback>
}
 8002c0a:	bf00      	nop
 8002c0c:	bd80      	pop	{r7, pc}
	...

08002c10 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08a      	sub	sp, #40	@ 0x28
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8002c18:	4b27      	ldr	r3, [pc, #156]	@ (8002cb8 <COM1_MspInit+0xa8>)
 8002c1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c1e:	4a26      	ldr	r2, [pc, #152]	@ (8002cb8 <COM1_MspInit+0xa8>)
 8002c20:	f043 0308 	orr.w	r3, r3, #8
 8002c24:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002c28:	4b23      	ldr	r3, [pc, #140]	@ (8002cb8 <COM1_MspInit+0xa8>)
 8002c2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c2e:	f003 0308 	and.w	r3, r3, #8
 8002c32:	613b      	str	r3, [r7, #16]
 8002c34:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8002c36:	4b20      	ldr	r3, [pc, #128]	@ (8002cb8 <COM1_MspInit+0xa8>)
 8002c38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c3c:	4a1e      	ldr	r2, [pc, #120]	@ (8002cb8 <COM1_MspInit+0xa8>)
 8002c3e:	f043 0308 	orr.w	r3, r3, #8
 8002c42:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002c46:	4b1c      	ldr	r3, [pc, #112]	@ (8002cb8 <COM1_MspInit+0xa8>)
 8002c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c4c:	f003 0308 	and.w	r3, r3, #8
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8002c54:	4b18      	ldr	r3, [pc, #96]	@ (8002cb8 <COM1_MspInit+0xa8>)
 8002c56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002c5a:	4a17      	ldr	r2, [pc, #92]	@ (8002cb8 <COM1_MspInit+0xa8>)
 8002c5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c60:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002c64:	4b14      	ldr	r3, [pc, #80]	@ (8002cb8 <COM1_MspInit+0xa8>)
 8002c66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002c6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c6e:	60bb      	str	r3, [r7, #8]
 8002c70:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8002c72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c76:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002c78:	2302      	movs	r3, #2
 8002c7a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002c80:	2301      	movs	r3, #1
 8002c82:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8002c84:	2307      	movs	r3, #7
 8002c86:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8002c88:	f107 0314 	add.w	r3, r7, #20
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	480b      	ldr	r0, [pc, #44]	@ (8002cbc <COM1_MspInit+0xac>)
 8002c90:	f000 fb10 	bl	80032b4 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8002c94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c98:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8002c9e:	2307      	movs	r3, #7
 8002ca0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8002ca2:	f107 0314 	add.w	r3, r7, #20
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4804      	ldr	r0, [pc, #16]	@ (8002cbc <COM1_MspInit+0xac>)
 8002caa:	f000 fb03 	bl	80032b4 <HAL_GPIO_Init>
}
 8002cae:	bf00      	nop
 8002cb0:	3728      	adds	r7, #40	@ 0x28
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	44020c00 	.word	0x44020c00
 8002cbc:	42020c00 	.word	0x42020c00

08002cc0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cc4:	2003      	movs	r0, #3
 8002cc6:	f000 f98a 	bl	8002fde <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002cca:	f003 f8d5 	bl	8005e78 <HAL_RCC_GetSysClockFreq>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8002d04 <HAL_Init+0x44>)
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	f003 030f 	and.w	r3, r3, #15
 8002cd8:	490b      	ldr	r1, [pc, #44]	@ (8002d08 <HAL_Init+0x48>)
 8002cda:	5ccb      	ldrb	r3, [r1, r3]
 8002cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce0:	4a0a      	ldr	r2, [pc, #40]	@ (8002d0c <HAL_Init+0x4c>)
 8002ce2:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002ce4:	2004      	movs	r0, #4
 8002ce6:	f000 f9cf 	bl	8003088 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cea:	200f      	movs	r0, #15
 8002cec:	f000 f810 	bl	8002d10 <HAL_InitTick>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e002      	b.n	8002d00 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002cfa:	f7fe fff5 	bl	8001ce8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	44020c00 	.word	0x44020c00
 8002d08:	080130d0 	.word	0x080130d0
 8002d0c:	20000004 	.word	0x20000004

08002d10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002d1c:	4b33      	ldr	r3, [pc, #204]	@ (8002dec <HAL_InitTick+0xdc>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e05c      	b.n	8002de2 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002d28:	4b31      	ldr	r3, [pc, #196]	@ (8002df0 <HAL_InitTick+0xe0>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	2b04      	cmp	r3, #4
 8002d32:	d10c      	bne.n	8002d4e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002d34:	4b2f      	ldr	r3, [pc, #188]	@ (8002df4 <HAL_InitTick+0xe4>)
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	4b2c      	ldr	r3, [pc, #176]	@ (8002dec <HAL_InitTick+0xdc>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d42:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	e037      	b.n	8002dbe <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8002d4e:	f000 f9f3 	bl	8003138 <HAL_SYSTICK_GetCLKSourceConfig>
 8002d52:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d023      	beq.n	8002da2 <HAL_InitTick+0x92>
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d82d      	bhi.n	8002dbc <HAL_InitTick+0xac>
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <HAL_InitTick+0x5e>
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d00d      	beq.n	8002d88 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002d6c:	e026      	b.n	8002dbc <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8002d6e:	4b21      	ldr	r3, [pc, #132]	@ (8002df4 <HAL_InitTick+0xe4>)
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	4b1e      	ldr	r3, [pc, #120]	@ (8002dec <HAL_InitTick+0xdc>)
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	4619      	mov	r1, r3
 8002d78:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002d7c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d84:	60fb      	str	r3, [r7, #12]
        break;
 8002d86:	e01a      	b.n	8002dbe <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002d88:	4b18      	ldr	r3, [pc, #96]	@ (8002dec <HAL_InitTick+0xdc>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d92:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d96:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d9e:	60fb      	str	r3, [r7, #12]
        break;
 8002da0:	e00d      	b.n	8002dbe <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002da2:	4b12      	ldr	r3, [pc, #72]	@ (8002dec <HAL_InitTick+0xdc>)
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	461a      	mov	r2, r3
 8002da8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002dac:	fbb3 f3f2 	udiv	r3, r3, r2
 8002db0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db8:	60fb      	str	r3, [r7, #12]
        break;
 8002dba:	e000      	b.n	8002dbe <HAL_InitTick+0xae>
        break;
 8002dbc:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 f940 	bl	8003044 <HAL_SYSTICK_Config>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e009      	b.n	8002de2 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dce:	2200      	movs	r2, #0
 8002dd0:	6879      	ldr	r1, [r7, #4]
 8002dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8002dd6:	f000 f90d 	bl	8002ff4 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002dda:	4a07      	ldr	r2, [pc, #28]	@ (8002df8 <HAL_InitTick+0xe8>)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	20000028 	.word	0x20000028
 8002df0:	e000e010 	.word	0xe000e010
 8002df4:	20000004 	.word	0x20000004
 8002df8:	20000024 	.word	0x20000024

08002dfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e00:	4b06      	ldr	r3, [pc, #24]	@ (8002e1c <HAL_IncTick+0x20>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	461a      	mov	r2, r3
 8002e06:	4b06      	ldr	r3, [pc, #24]	@ (8002e20 <HAL_IncTick+0x24>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	4a04      	ldr	r2, [pc, #16]	@ (8002e20 <HAL_IncTick+0x24>)
 8002e0e:	6013      	str	r3, [r2, #0]
}
 8002e10:	bf00      	nop
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	20000028 	.word	0x20000028
 8002e20:	20000b38 	.word	0x20000b38

08002e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  return uwTick;
 8002e28:	4b03      	ldr	r3, [pc, #12]	@ (8002e38 <HAL_GetTick+0x14>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	20000b38 	.word	0x20000b38

08002e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e44:	f7ff ffee 	bl	8002e24 <HAL_GetTick>
 8002e48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e54:	d005      	beq.n	8002e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e56:	4b0a      	ldr	r3, [pc, #40]	@ (8002e80 <HAL_Delay+0x44>)
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	4413      	add	r3, r2
 8002e60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e62:	bf00      	nop
 8002e64:	f7ff ffde 	bl	8002e24 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d8f7      	bhi.n	8002e64 <HAL_Delay+0x28>
  {
  }
}
 8002e74:	bf00      	nop
 8002e76:	bf00      	nop
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	20000028 	.word	0x20000028

08002e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f003 0307 	and.w	r3, r3, #7
 8002e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e94:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002eac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002eb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eb6:	4a04      	ldr	r2, [pc, #16]	@ (8002ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	60d3      	str	r3, [r2, #12]
}
 8002ebc:	bf00      	nop
 8002ebe:	3714      	adds	r7, #20
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	e000ed00 	.word	0xe000ed00

08002ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ed0:	4b04      	ldr	r3, [pc, #16]	@ (8002ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	0a1b      	lsrs	r3, r3, #8
 8002ed6:	f003 0307 	and.w	r3, r3, #7
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr
 8002ee4:	e000ed00 	.word	0xe000ed00

08002ee8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	4603      	mov	r3, r0
 8002ef0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002ef2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	db0b      	blt.n	8002f12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002efa:	88fb      	ldrh	r3, [r7, #6]
 8002efc:	f003 021f 	and.w	r2, r3, #31
 8002f00:	4907      	ldr	r1, [pc, #28]	@ (8002f20 <__NVIC_EnableIRQ+0x38>)
 8002f02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f06:	095b      	lsrs	r3, r3, #5
 8002f08:	2001      	movs	r0, #1
 8002f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	e000e100 	.word	0xe000e100

08002f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	6039      	str	r1, [r7, #0]
 8002f2e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	db0a      	blt.n	8002f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	b2da      	uxtb	r2, r3
 8002f3c:	490c      	ldr	r1, [pc, #48]	@ (8002f70 <__NVIC_SetPriority+0x4c>)
 8002f3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f42:	0112      	lsls	r2, r2, #4
 8002f44:	b2d2      	uxtb	r2, r2
 8002f46:	440b      	add	r3, r1
 8002f48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f4c:	e00a      	b.n	8002f64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	b2da      	uxtb	r2, r3
 8002f52:	4908      	ldr	r1, [pc, #32]	@ (8002f74 <__NVIC_SetPriority+0x50>)
 8002f54:	88fb      	ldrh	r3, [r7, #6]
 8002f56:	f003 030f 	and.w	r3, r3, #15
 8002f5a:	3b04      	subs	r3, #4
 8002f5c:	0112      	lsls	r2, r2, #4
 8002f5e:	b2d2      	uxtb	r2, r2
 8002f60:	440b      	add	r3, r1
 8002f62:	761a      	strb	r2, [r3, #24]
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	e000e100 	.word	0xe000e100
 8002f74:	e000ed00 	.word	0xe000ed00

08002f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b089      	sub	sp, #36	@ 0x24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f003 0307 	and.w	r3, r3, #7
 8002f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	f1c3 0307 	rsb	r3, r3, #7
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	bf28      	it	cs
 8002f96:	2304      	movcs	r3, #4
 8002f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	3304      	adds	r3, #4
 8002f9e:	2b06      	cmp	r3, #6
 8002fa0:	d902      	bls.n	8002fa8 <NVIC_EncodePriority+0x30>
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	3b03      	subs	r3, #3
 8002fa6:	e000      	b.n	8002faa <NVIC_EncodePriority+0x32>
 8002fa8:	2300      	movs	r3, #0
 8002faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fac:	f04f 32ff 	mov.w	r2, #4294967295
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43da      	mvns	r2, r3
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	401a      	ands	r2, r3
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fca:	43d9      	mvns	r1, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd0:	4313      	orrs	r3, r2
         );
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3724      	adds	r7, #36	@ 0x24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b082      	sub	sp, #8
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7ff ff4c 	bl	8002e84 <__NVIC_SetPriorityGrouping>
}
 8002fec:	bf00      	nop
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
 8003000:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003002:	f7ff ff63 	bl	8002ecc <__NVIC_GetPriorityGrouping>
 8003006:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	68b9      	ldr	r1, [r7, #8]
 800300c:	6978      	ldr	r0, [r7, #20]
 800300e:	f7ff ffb3 	bl	8002f78 <NVIC_EncodePriority>
 8003012:	4602      	mov	r2, r0
 8003014:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003018:	4611      	mov	r1, r2
 800301a:	4618      	mov	r0, r3
 800301c:	f7ff ff82 	bl	8002f24 <__NVIC_SetPriority>
}
 8003020:	bf00      	nop
 8003022:	3718      	adds	r7, #24
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	4603      	mov	r3, r0
 8003030:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003032:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff ff56 	bl	8002ee8 <__NVIC_EnableIRQ>
}
 800303c:	bf00      	nop
 800303e:	3708      	adds	r7, #8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3b01      	subs	r3, #1
 8003050:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003054:	d301      	bcc.n	800305a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8003056:	2301      	movs	r3, #1
 8003058:	e00d      	b.n	8003076 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800305a:	4a0a      	ldr	r2, [pc, #40]	@ (8003084 <HAL_SYSTICK_Config+0x40>)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	3b01      	subs	r3, #1
 8003060:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8003062:	4b08      	ldr	r3, [pc, #32]	@ (8003084 <HAL_SYSTICK_Config+0x40>)
 8003064:	2200      	movs	r2, #0
 8003066:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8003068:	4b06      	ldr	r3, [pc, #24]	@ (8003084 <HAL_SYSTICK_Config+0x40>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a05      	ldr	r2, [pc, #20]	@ (8003084 <HAL_SYSTICK_Config+0x40>)
 800306e:	f043 0303 	orr.w	r3, r3, #3
 8003072:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	e000e010 	.word	0xe000e010

08003088 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b04      	cmp	r3, #4
 8003094:	d844      	bhi.n	8003120 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8003096:	a201      	add	r2, pc, #4	@ (adr r2, 800309c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8003098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800309c:	080030bf 	.word	0x080030bf
 80030a0:	080030dd 	.word	0x080030dd
 80030a4:	080030ff 	.word	0x080030ff
 80030a8:	08003121 	.word	0x08003121
 80030ac:	080030b1 	.word	0x080030b1
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80030b0:	4b1f      	ldr	r3, [pc, #124]	@ (8003130 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a1e      	ldr	r2, [pc, #120]	@ (8003130 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80030b6:	f043 0304 	orr.w	r3, r3, #4
 80030ba:	6013      	str	r3, [r2, #0]
      break;
 80030bc:	e031      	b.n	8003122 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80030be:	4b1c      	ldr	r3, [pc, #112]	@ (8003130 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a1b      	ldr	r2, [pc, #108]	@ (8003130 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80030c4:	f023 0304 	bic.w	r3, r3, #4
 80030c8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 80030ca:	4b1a      	ldr	r3, [pc, #104]	@ (8003134 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80030cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80030d0:	4a18      	ldr	r2, [pc, #96]	@ (8003134 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80030d2:	f023 030c 	bic.w	r3, r3, #12
 80030d6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80030da:	e022      	b.n	8003122 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80030dc:	4b14      	ldr	r3, [pc, #80]	@ (8003130 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a13      	ldr	r2, [pc, #76]	@ (8003130 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80030e2:	f023 0304 	bic.w	r3, r3, #4
 80030e6:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 80030e8:	4b12      	ldr	r3, [pc, #72]	@ (8003134 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80030ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80030ee:	f023 030c 	bic.w	r3, r3, #12
 80030f2:	4a10      	ldr	r2, [pc, #64]	@ (8003134 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80030f4:	f043 0304 	orr.w	r3, r3, #4
 80030f8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80030fc:	e011      	b.n	8003122 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80030fe:	4b0c      	ldr	r3, [pc, #48]	@ (8003130 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a0b      	ldr	r2, [pc, #44]	@ (8003130 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003104:	f023 0304 	bic.w	r3, r3, #4
 8003108:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 800310a:	4b0a      	ldr	r3, [pc, #40]	@ (8003134 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800310c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003110:	f023 030c 	bic.w	r3, r3, #12
 8003114:	4a07      	ldr	r2, [pc, #28]	@ (8003134 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003116:	f043 0308 	orr.w	r3, r3, #8
 800311a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800311e:	e000      	b.n	8003122 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8003120:	bf00      	nop
  }
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	e000e010 	.word	0xe000e010
 8003134:	44020c00 	.word	0x44020c00

08003138 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800313e:	4b17      	ldr	r3, [pc, #92]	@ (800319c <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0304 	and.w	r3, r3, #4
 8003146:	2b00      	cmp	r3, #0
 8003148:	d002      	beq.n	8003150 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800314a:	2304      	movs	r3, #4
 800314c:	607b      	str	r3, [r7, #4]
 800314e:	e01e      	b.n	800318e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8003150:	4b13      	ldr	r3, [pc, #76]	@ (80031a0 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8003152:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003156:	f003 030c 	and.w	r3, r3, #12
 800315a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	2b08      	cmp	r3, #8
 8003160:	d00f      	beq.n	8003182 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	2b08      	cmp	r3, #8
 8003166:	d80f      	bhi.n	8003188 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	2b04      	cmp	r3, #4
 8003172:	d003      	beq.n	800317c <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8003174:	e008      	b.n	8003188 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8003176:	2300      	movs	r3, #0
 8003178:	607b      	str	r3, [r7, #4]
        break;
 800317a:	e008      	b.n	800318e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800317c:	2301      	movs	r3, #1
 800317e:	607b      	str	r3, [r7, #4]
        break;
 8003180:	e005      	b.n	800318e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8003182:	2302      	movs	r3, #2
 8003184:	607b      	str	r3, [r7, #4]
        break;
 8003186:	e002      	b.n	800318e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8003188:	2300      	movs	r3, #0
 800318a:	607b      	str	r3, [r7, #4]
        break;
 800318c:	bf00      	nop
    }
  }
  return systick_source;
 800318e:	687b      	ldr	r3, [r7, #4]
}
 8003190:	4618      	mov	r0, r3
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr
 800319c:	e000e010 	.word	0xe000e010
 80031a0:	44020c00 	.word	0x44020c00

080031a4 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 80031a4:	b480      	push	{r7}
 80031a6:	b087      	sub	sp, #28
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	460b      	mov	r3, r1
 80031ae:	607a      	str	r2, [r7, #4]
 80031b0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80031b2:	2300      	movs	r3, #0
 80031b4:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80031b6:	7afb      	ldrb	r3, [r7, #11]
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d011      	beq.n	80031e0 <HAL_EXTI_RegisterCallback+0x3c>
 80031bc:	2b02      	cmp	r3, #2
 80031be:	dc13      	bgt.n	80031e8 <HAL_EXTI_RegisterCallback+0x44>
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d002      	beq.n	80031ca <HAL_EXTI_RegisterCallback+0x26>
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d007      	beq.n	80031d8 <HAL_EXTI_RegisterCallback+0x34>
 80031c8:	e00e      	b.n	80031e8 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	609a      	str	r2, [r3, #8]
      break;
 80031d6:	e00a      	b.n	80031ee <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	605a      	str	r2, [r3, #4]
      break;
 80031de:	e006      	b.n	80031ee <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	609a      	str	r2, [r3, #8]
      break;
 80031e6:	e002      	b.n	80031ee <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	75fb      	strb	r3, [r7, #23]
      break;
 80031ec:	bf00      	nop
  }

  return status;
 80031ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	371c      	adds	r7, #28
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e003      	b.n	8003218 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003216:	2300      	movs	r3, #0
  }
}
 8003218:	4618      	mov	r0, r3
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	0c1b      	lsrs	r3, r3, #16
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 031f 	and.w	r3, r3, #31
 8003240:	2201      	movs	r2, #1
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	015a      	lsls	r2, r3, #5
 800324c:	4b17      	ldr	r3, [pc, #92]	@ (80032ac <HAL_EXTI_IRQHandler+0x88>)
 800324e:	4413      	add	r3, r2
 8003250:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	4013      	ands	r3, r2
 800325a:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d009      	beq.n	8003276 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d002      	beq.n	8003276 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	015a      	lsls	r2, r3, #5
 800327a:	4b0d      	ldr	r3, [pc, #52]	@ (80032b0 <HAL_EXTI_IRQHandler+0x8c>)
 800327c:	4413      	add	r3, r2
 800327e:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	4013      	ands	r3, r2
 8003288:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d009      	beq.n	80032a4 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d002      	beq.n	80032a4 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	4798      	blx	r3
    }
  }
}
 80032a4:	bf00      	nop
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	4402200c 	.word	0x4402200c
 80032b0:	44022010 	.word	0x44022010

080032b4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b087      	sub	sp, #28
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80032be:	2300      	movs	r3, #0
 80032c0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80032c2:	e136      	b.n	8003532 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	2101      	movs	r1, #1
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	fa01 f303 	lsl.w	r3, r1, r3
 80032d0:	4013      	ands	r3, r2
 80032d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f000 8128 	beq.w	800352c <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d003      	beq.n	80032ec <HAL_GPIO_Init+0x38>
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2b12      	cmp	r3, #18
 80032ea:	d125      	bne.n	8003338 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	08da      	lsrs	r2, r3, #3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3208      	adds	r2, #8
 80032f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032f8:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	220f      	movs	r2, #15
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	43db      	mvns	r3, r3
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	4013      	ands	r3, r2
 800330e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	f003 020f 	and.w	r2, r3, #15
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	4313      	orrs	r3, r2
 8003328:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	08da      	lsrs	r2, r3, #3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	3208      	adds	r2, #8
 8003332:	6979      	ldr	r1, [r7, #20]
 8003334:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	2203      	movs	r2, #3
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	43db      	mvns	r3, r3
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	4013      	ands	r3, r2
 800334e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f003 0203 	and.w	r2, r3, #3
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	4313      	orrs	r3, r2
 8003364:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d00b      	beq.n	800338c <HAL_GPIO_Init+0xd8>
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b02      	cmp	r3, #2
 800337a:	d007      	beq.n	800338c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003380:	2b11      	cmp	r3, #17
 8003382:	d003      	beq.n	800338c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	2b12      	cmp	r3, #18
 800338a:	d130      	bne.n	80033ee <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	2203      	movs	r2, #3
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	43db      	mvns	r3, r3
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	4013      	ands	r3, r2
 80033a2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	68da      	ldr	r2, [r3, #12]
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033c2:	2201      	movs	r2, #1
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	43db      	mvns	r3, r3
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	4013      	ands	r3, r2
 80033d0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	091b      	lsrs	r3, r3, #4
 80033d8:	f003 0201 	and.w	r2, r3, #1
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2b03      	cmp	r3, #3
 80033f4:	d017      	beq.n	8003426 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	2203      	movs	r2, #3
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	43db      	mvns	r3, r3
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	4013      	ands	r3, r2
 800340c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	4313      	orrs	r3, r2
 800341e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d07c      	beq.n	800352c <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003432:	4a47      	ldr	r2, [pc, #284]	@ (8003550 <HAL_GPIO_Init+0x29c>)
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	089b      	lsrs	r3, r3, #2
 8003438:	3318      	adds	r3, #24
 800343a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800343e:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	f003 0303 	and.w	r3, r3, #3
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	220f      	movs	r2, #15
 800344a:	fa02 f303 	lsl.w	r3, r2, r3
 800344e:	43db      	mvns	r3, r3
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	4013      	ands	r3, r2
 8003454:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	0a9a      	lsrs	r2, r3, #10
 800345a:	4b3e      	ldr	r3, [pc, #248]	@ (8003554 <HAL_GPIO_Init+0x2a0>)
 800345c:	4013      	ands	r3, r2
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	f002 0203 	and.w	r2, r2, #3
 8003464:	00d2      	lsls	r2, r2, #3
 8003466:	4093      	lsls	r3, r2
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	4313      	orrs	r3, r2
 800346c:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800346e:	4938      	ldr	r1, [pc, #224]	@ (8003550 <HAL_GPIO_Init+0x29c>)
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	089b      	lsrs	r3, r3, #2
 8003474:	3318      	adds	r3, #24
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800347c:	4b34      	ldr	r3, [pc, #208]	@ (8003550 <HAL_GPIO_Init+0x29c>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	43db      	mvns	r3, r3
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	4013      	ands	r3, r2
 800348a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d003      	beq.n	80034a0 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	4313      	orrs	r3, r2
 800349e:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80034a0:	4a2b      	ldr	r2, [pc, #172]	@ (8003550 <HAL_GPIO_Init+0x29c>)
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80034a6:	4b2a      	ldr	r3, [pc, #168]	@ (8003550 <HAL_GPIO_Init+0x29c>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	43db      	mvns	r3, r3
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	4013      	ands	r3, r2
 80034b4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80034ca:	4a21      	ldr	r2, [pc, #132]	@ (8003550 <HAL_GPIO_Init+0x29c>)
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80034d0:	4b1f      	ldr	r3, [pc, #124]	@ (8003550 <HAL_GPIO_Init+0x29c>)
 80034d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034d6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	43db      	mvns	r3, r3
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	4013      	ands	r3, r2
 80034e0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80034f6:	4a16      	ldr	r2, [pc, #88]	@ (8003550 <HAL_GPIO_Init+0x29c>)
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80034fe:	4b14      	ldr	r3, [pc, #80]	@ (8003550 <HAL_GPIO_Init+0x29c>)
 8003500:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003504:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	43db      	mvns	r3, r3
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	4013      	ands	r3, r2
 800350e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d003      	beq.n	8003524 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	4313      	orrs	r3, r2
 8003522:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8003524:	4a0a      	ldr	r2, [pc, #40]	@ (8003550 <HAL_GPIO_Init+0x29c>)
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	3301      	adds	r3, #1
 8003530:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	fa22 f303 	lsr.w	r3, r2, r3
 800353c:	2b00      	cmp	r3, #0
 800353e:	f47f aec1 	bne.w	80032c4 <HAL_GPIO_Init+0x10>
  }
}
 8003542:	bf00      	nop
 8003544:	bf00      	nop
 8003546:	371c      	adds	r7, #28
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	44022000 	.word	0x44022000
 8003554:	002f7f7f 	.word	0x002f7f7f

08003558 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	460b      	mov	r3, r1
 8003562:	807b      	strh	r3, [r7, #2]
 8003564:	4613      	mov	r3, r2
 8003566:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003568:	787b      	ldrb	r3, [r7, #1]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800356e:	887a      	ldrh	r2, [r7, #2]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003574:	e002      	b.n	800357c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003576:	887a      	ldrh	r2, [r7, #2]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	460b      	mov	r3, r1
 8003592:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800359a:	887a      	ldrh	r2, [r7, #2]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4013      	ands	r3, r2
 80035a0:	041a      	lsls	r2, r3, #16
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	43d9      	mvns	r1, r3
 80035a6:	887b      	ldrh	r3, [r7, #2]
 80035a8:	400b      	ands	r3, r1
 80035aa:	431a      	orrs	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	619a      	str	r2, [r3, #24]
}
 80035b0:	bf00      	nop
 80035b2:	3714      	adds	r7, #20
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_HASH_Init>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_Init(HASH_HandleTypeDef *hhash)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t cr_value;

  /* Check the hash handle allocation */
  if (hhash == NULL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_HASH_Init+0x12>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e02a      	b.n	8003624 <HAL_HASH_Init+0x68>

    /* Init the low level hardware */
    hhash->MspInitCallback(hhash);
  }
#else
  if (hhash->State == HAL_HASH_STATE_RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d106      	bne.n	80035e8 <HAL_HASH_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhash->Lock = HAL_UNLOCKED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Init the low level hardware */
    HAL_HASH_MspInit(hhash);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7fe fb88 	bl	8001cf8 <HAL_HASH_MspInit>
  }
#endif /* (USE_HAL_HASH_REGISTER_CALLBACKS) */

  /* Set the key size, data type and Algorithm */
  cr_value = (uint32_t)(hhash->Init.DataType | hhash->Init.Algorithm);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	60fb      	str	r3, [r7, #12]
  /* Set the key size, data type, algorithm and mode */
  MODIFY_REG(hhash->Instance->CR, HASH_CR_DATATYPE | HASH_CR_ALGO | HASH_CR_INIT, cr_value);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f423 13f0 	bic.w	r3, r3, #1966080	@ 0x1e0000
 80035fe:	f023 0334 	bic.w	r3, r3, #52	@ 0x34
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	6812      	ldr	r2, [r2, #0]
 8003606:	68f9      	ldr	r1, [r7, #12]
 8003608:	430b      	orrs	r3, r1
 800360a:	6013      	str	r3, [r2, #0]

  /* Change HASH phase to Ready */
  hhash->Phase = HAL_HASH_PHASE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  /* Change HASH state to Ready */
  hhash->State = HAL_HASH_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Reset error code field */
  hhash->ErrorCode = HAL_HASH_ERROR_NONE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_HASH_SUSPEND_RESUME == 1U)
  /* Reset suspension request flag */
  hhash->SuspendRequest = HAL_HASH_SUSPEND_NONE;
#endif /* (USE_HAL_HASH_SUSPEND_RESUME) */
  /* Return function status */
  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e08d      	b.n	800375a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d106      	bne.n	8003658 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7fe fb6c 	bl	8001d30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2224      	movs	r2, #36	@ 0x24
 800365c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0201 	bic.w	r2, r2, #1
 800366e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800367c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800368c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d107      	bne.n	80036a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689a      	ldr	r2, [r3, #8]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036a2:	609a      	str	r2, [r3, #8]
 80036a4:	e006      	b.n	80036b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	689a      	ldr	r2, [r3, #8]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80036b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d108      	bne.n	80036ce <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036ca:	605a      	str	r2, [r3, #4]
 80036cc:	e007      	b.n	80036de <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685a      	ldr	r2, [r3, #4]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	6812      	ldr	r2, [r2, #0]
 80036e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80036ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68da      	ldr	r2, [r3, #12]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003700:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	691a      	ldr	r2, [r3, #16]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	430a      	orrs	r2, r1
 800371a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	69d9      	ldr	r1, [r3, #28]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a1a      	ldr	r2, [r3, #32]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f042 0201 	orr.w	r2, r2, #1
 800373a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2220      	movs	r2, #32
 8003746:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003762:	b480      	push	{r7}
 8003764:	b083      	sub	sp, #12
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
 800376a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b20      	cmp	r3, #32
 8003776:	d138      	bne.n	80037ea <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800377e:	2b01      	cmp	r3, #1
 8003780:	d101      	bne.n	8003786 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003782:	2302      	movs	r3, #2
 8003784:	e032      	b.n	80037ec <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2224      	movs	r2, #36	@ 0x24
 8003792:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0201 	bic.w	r2, r2, #1
 80037a4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80037b4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6819      	ldr	r1, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f042 0201 	orr.w	r2, r2, #1
 80037d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80037e6:	2300      	movs	r3, #0
 80037e8:	e000      	b.n	80037ec <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80037ea:	2302      	movs	r3, #2
  }
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b20      	cmp	r3, #32
 800380c:	d139      	bne.n	8003882 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003814:	2b01      	cmp	r3, #1
 8003816:	d101      	bne.n	800381c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003818:	2302      	movs	r3, #2
 800381a:	e033      	b.n	8003884 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2224      	movs	r2, #36	@ 0x24
 8003828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0201 	bic.w	r2, r2, #1
 800383a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800384a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	021b      	lsls	r3, r3, #8
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	4313      	orrs	r3, r2
 8003854:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f042 0201 	orr.w	r2, r2, #1
 800386c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2220      	movs	r2, #32
 8003872:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800387e:	2300      	movs	r3, #0
 8003880:	e000      	b.n	8003884 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003882:	2302      	movs	r3, #2
  }
}
 8003884:	4618      	mov	r0, r3
 8003886:	3714      	adds	r7, #20
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	460b      	mov	r3, r1
 800389a:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 800389c:	230a      	movs	r3, #10
 800389e:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 80038a0:	e002      	b.n	80038a8 <PCD_GET_EP_RX_CNT+0x18>
  {
    count--;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	3b01      	subs	r3, #1
 80038a6:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1f9      	bne.n	80038a2 <PCD_GET_EP_RX_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 80038ae:	887b      	ldrh	r3, [r7, #2]
 80038b0:	00db      	lsls	r3, r3, #3
 80038b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80038b6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	0c1b      	lsrs	r3, r3, #16
 80038be:	b29b      	uxth	r3, r3
 80038c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038c4:	b29b      	uxth	r3, r3
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3714      	adds	r7, #20
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr

080038d2 <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b085      	sub	sp, #20
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
 80038da:	460b      	mov	r3, r1
 80038dc:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 80038de:	230a      	movs	r3, #10
 80038e0:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 80038e2:	e002      	b.n	80038ea <PCD_GET_EP_DBUF0_CNT+0x18>
  {
    count--;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	3b01      	subs	r3, #1
 80038e8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1f9      	bne.n	80038e4 <PCD_GET_EP_DBUF0_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 80038f0:	887b      	ldrh	r3, [r7, #2]
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80038f8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	0c1b      	lsrs	r3, r3, #16
 8003900:	b29b      	uxth	r3, r3
 8003902:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003906:	b29b      	uxth	r3, r3
}
 8003908:	4618      	mov	r0, r3
 800390a:	3714      	adds	r7, #20
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	460b      	mov	r3, r1
 800391e:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8003920:	230a      	movs	r3, #10
 8003922:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8003924:	e002      	b.n	800392c <PCD_GET_EP_DBUF1_CNT+0x18>
  {
    count--;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	3b01      	subs	r3, #1
 800392a:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1f9      	bne.n	8003926 <PCD_GET_EP_DBUF1_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 8003932:	887b      	ldrh	r3, [r7, #2]
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800393a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	0c1b      	lsrs	r3, r3, #16
 8003942:	b29b      	uxth	r3, r3
 8003944:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003948:	b29b      	uxth	r3, r3
}
 800394a:	4618      	mov	r0, r3
 800394c:	3714      	adds	r7, #20
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b086      	sub	sp, #24
 800395a:	af02      	add	r7, sp, #8
 800395c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d101      	bne.n	8003968 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e0f3      	b.n	8003b50 <HAL_PCD_Init+0x1fa>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	d106      	bne.n	8003982 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f7fe fd99 	bl	80024b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2203      	movs	r2, #3
 8003986:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f009 f85f 	bl	800ca52 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6818      	ldr	r0, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	7c1a      	ldrb	r2, [r3, #16]
 800399c:	f88d 2000 	strb.w	r2, [sp]
 80039a0:	3304      	adds	r3, #4
 80039a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039a4:	f009 f823 	bl	800c9ee <USB_CoreInit>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d005      	beq.n	80039ba <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2202      	movs	r2, #2
 80039b2:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e0ca      	b.n	8003b50 <HAL_PCD_Init+0x1fa>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2100      	movs	r1, #0
 80039c0:	4618      	mov	r0, r3
 80039c2:	f009 f85b 	bl	800ca7c <USB_SetCurrentMode>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d005      	beq.n	80039d8 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2202      	movs	r2, #2
 80039d0:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e0bb      	b.n	8003b50 <HAL_PCD_Init+0x1fa>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039d8:	2300      	movs	r3, #0
 80039da:	73fb      	strb	r3, [r7, #15]
 80039dc:	e03f      	b.n	8003a5e <HAL_PCD_Init+0x108>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80039de:	7bfa      	ldrb	r2, [r7, #15]
 80039e0:	6879      	ldr	r1, [r7, #4]
 80039e2:	4613      	mov	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4413      	add	r3, r2
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	440b      	add	r3, r1
 80039ec:	3315      	adds	r3, #21
 80039ee:	2201      	movs	r2, #1
 80039f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80039f2:	7bfa      	ldrb	r2, [r7, #15]
 80039f4:	6879      	ldr	r1, [r7, #4]
 80039f6:	4613      	mov	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	00db      	lsls	r3, r3, #3
 80039fe:	440b      	add	r3, r1
 8003a00:	3314      	adds	r3, #20
 8003a02:	7bfa      	ldrb	r2, [r7, #15]
 8003a04:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a06:	7bfa      	ldrb	r2, [r7, #15]
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	00db      	lsls	r3, r3, #3
 8003a12:	440b      	add	r3, r1
 8003a14:	3317      	adds	r3, #23
 8003a16:	2200      	movs	r2, #0
 8003a18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a1a:	7bfa      	ldrb	r2, [r7, #15]
 8003a1c:	6879      	ldr	r1, [r7, #4]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4413      	add	r3, r2
 8003a24:	00db      	lsls	r3, r3, #3
 8003a26:	440b      	add	r3, r1
 8003a28:	3324      	adds	r3, #36	@ 0x24
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a2e:	7bfa      	ldrb	r2, [r7, #15]
 8003a30:	6879      	ldr	r1, [r7, #4]
 8003a32:	4613      	mov	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4413      	add	r3, r2
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	440b      	add	r3, r1
 8003a3c:	3328      	adds	r3, #40	@ 0x28
 8003a3e:	2200      	movs	r2, #0
 8003a40:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a42:	7bfb      	ldrb	r3, [r7, #15]
 8003a44:	6879      	ldr	r1, [r7, #4]
 8003a46:	1c5a      	adds	r2, r3, #1
 8003a48:	4613      	mov	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4413      	add	r3, r2
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	440b      	add	r3, r1
 8003a52:	3304      	adds	r3, #4
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a58:	7bfb      	ldrb	r3, [r7, #15]
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	73fb      	strb	r3, [r7, #15]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	791b      	ldrb	r3, [r3, #4]
 8003a62:	7bfa      	ldrb	r2, [r7, #15]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d3ba      	bcc.n	80039de <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a68:	2300      	movs	r3, #0
 8003a6a:	73fb      	strb	r3, [r7, #15]
 8003a6c:	e044      	b.n	8003af8 <HAL_PCD_Init+0x1a2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a6e:	7bfa      	ldrb	r2, [r7, #15]
 8003a70:	6879      	ldr	r1, [r7, #4]
 8003a72:	4613      	mov	r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4413      	add	r3, r2
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	440b      	add	r3, r1
 8003a7c:	f203 1355 	addw	r3, r3, #341	@ 0x155
 8003a80:	2200      	movs	r2, #0
 8003a82:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a84:	7bfa      	ldrb	r2, [r7, #15]
 8003a86:	6879      	ldr	r1, [r7, #4]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4413      	add	r3, r2
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	440b      	add	r3, r1
 8003a92:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8003a96:	7bfa      	ldrb	r2, [r7, #15]
 8003a98:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a9a:	7bfa      	ldrb	r2, [r7, #15]
 8003a9c:	6879      	ldr	r1, [r7, #4]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	4413      	add	r3, r2
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	440b      	add	r3, r1
 8003aa8:	f203 1357 	addw	r3, r3, #343	@ 0x157
 8003aac:	2200      	movs	r2, #0
 8003aae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ab0:	7bfa      	ldrb	r2, [r7, #15]
 8003ab2:	6879      	ldr	r1, [r7, #4]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	440b      	add	r3, r1
 8003abe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003ac6:	7bfa      	ldrb	r2, [r7, #15]
 8003ac8:	6879      	ldr	r1, [r7, #4]
 8003aca:	4613      	mov	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4413      	add	r3, r2
 8003ad0:	00db      	lsls	r3, r3, #3
 8003ad2:	440b      	add	r3, r1
 8003ad4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003ad8:	2200      	movs	r2, #0
 8003ada:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003adc:	7bfa      	ldrb	r2, [r7, #15]
 8003ade:	6879      	ldr	r1, [r7, #4]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4413      	add	r3, r2
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	440b      	add	r3, r1
 8003aea:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003af2:	7bfb      	ldrb	r3, [r7, #15]
 8003af4:	3301      	adds	r3, #1
 8003af6:	73fb      	strb	r3, [r7, #15]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	791b      	ldrb	r3, [r3, #4]
 8003afc:	7bfa      	ldrb	r2, [r7, #15]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d3b5      	bcc.n	8003a6e <HAL_PCD_Init+0x118>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6818      	ldr	r0, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	7c1a      	ldrb	r2, [r3, #16]
 8003b0a:	f88d 2000 	strb.w	r2, [sp]
 8003b0e:	3304      	adds	r3, #4
 8003b10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b12:	f008 ffd6 	bl	800cac2 <USB_DevInit>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d005      	beq.n	8003b28 <HAL_PCD_Init+0x1d2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2202      	movs	r2, #2
 8003b20:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e013      	b.n	8003b50 <HAL_PCD_Init+0x1fa>
  }

  hpcd->USB_Address = 0U;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	7b1b      	ldrb	r3, [r3, #12]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d102      	bne.n	8003b44 <HAL_PCD_Init+0x1ee>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f001 fb6b 	bl	800521a <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f00a fe2f 	bl	800e7ac <USB_DevDisconnect>

  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d101      	bne.n	8003b6e <HAL_PCD_Start+0x16>
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	e012      	b.n	8003b94 <HAL_PCD_Start+0x3c>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f008 ff55 	bl	800ca2a <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f00a fe00 	bl	800e78a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3708      	adds	r7, #8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f00a fe10 	bl	800e7ce <USB_ReadInterrupts>
 8003bae:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 faf2 	bl	80041a4 <PCD_EP_ISR_Handler>

    return;
 8003bc0:	e0de      	b.n	8003d80 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d010      	beq.n	8003bee <HAL_PCD_IRQHandler+0x52>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	f64f 33ff 	movw	r3, #64511	@ 0xfbff
 8003bda:	400b      	ands	r3, r1
 8003bdc:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f00b fe5f 	bl	800f8a2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003be4:	2100      	movs	r1, #0
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f8e1 	bl	8003dae <HAL_PCD_SetAddress>

    return;
 8003bec:	e0c8      	b.n	8003d80 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d009      	beq.n	8003c0c <HAL_PCD_IRQHandler+0x70>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	f64b 73ff 	movw	r3, #49151	@ 0xbfff
 8003c06:	400b      	ands	r3, r1
 8003c08:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8003c0a:	e0b9      	b.n	8003d80 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d009      	beq.n	8003c2a <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	f64d 73ff 	movw	r3, #57343	@ 0xdfff
 8003c24:	400b      	ands	r3, r1
 8003c26:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8003c28:	e0aa      	b.n	8003d80 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d029      	beq.n	8003c88 <HAL_PCD_IRQHandler+0xec>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 0204 	bic.w	r2, r2, #4
 8003c42:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0208 	bic.w	r2, r2, #8
 8003c52:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d107      	bne.n	8003c6e <HAL_PCD_IRQHandler+0xd2>
    {
      hpcd->LPM_State = LPM_L0;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003c66:	2100      	movs	r1, #0
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f001 faf8 	bl	800525e <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f893 	bl	8003d9a <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8003c82:	400b      	ands	r3, r1
 8003c84:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8003c86:	e07b      	b.n	8003d80 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d01c      	beq.n	8003ccc <HAL_PCD_IRQHandler+0x130>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f042 0208 	orr.w	r2, r2, #8
 8003ca0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	f24f 73ff 	movw	r3, #63487	@ 0xf7ff
 8003cb0:	400b      	ands	r3, r1
 8003cb2:	6453      	str	r3, [r2, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f042 0204 	orr.w	r2, r2, #4
 8003cc2:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 f85e 	bl	8003d86 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003cca:	e059      	b.n	8003d80 <HAL_PCD_IRQHandler+0x1e4>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d033      	beq.n	8003d3e <HAL_PCD_IRQHandler+0x1a2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 8003ce4:	400b      	ands	r3, r1
 8003ce6:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d121      	bne.n	8003d36 <HAL_PCD_IRQHandler+0x19a>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f042 0204 	orr.w	r2, r2, #4
 8003d00:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f042 0208 	orr.w	r2, r2, #8
 8003d10:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d20:	089b      	lsrs	r3, r3, #2
 8003d22:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f001 fa95 	bl	800525e <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003d34:	e024      	b.n	8003d80 <HAL_PCD_IRQHandler+0x1e4>
      HAL_PCD_SuspendCallback(hpcd);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f825 	bl	8003d86 <HAL_PCD_SuspendCallback>
    return;
 8003d3c:	e020      	b.n	8003d80 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00c      	beq.n	8003d62 <HAL_PCD_IRQHandler+0x1c6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	f64f 53ff 	movw	r3, #65023	@ 0xfdff
 8003d56:	400b      	ands	r3, r1
 8003d58:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f00b fd93 	bl	800f886 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003d60:	e00e      	b.n	8003d80 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d009      	beq.n	8003d80 <HAL_PCD_IRQHandler+0x1e4>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8003d7a:	400b      	ands	r3, r1
 8003d7c:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8003d7e:	bf00      	nop
  }
}
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8003d8e:	bf00      	nop
 8003d90:	370c      	adds	r7, #12
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr

08003d9a <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b083      	sub	sp, #12
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8003da2:	bf00      	nop
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b082      	sub	sp, #8
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
 8003db6:	460b      	mov	r3, r1
 8003db8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d101      	bne.n	8003dc8 <HAL_PCD_SetAddress+0x1a>
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	e012      	b.n	8003dee <HAL_PCD_SetAddress+0x40>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  hpcd->USB_Address = address;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	78fa      	ldrb	r2, [r7, #3]
 8003dd4:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	78fa      	ldrb	r2, [r7, #3]
 8003ddc:	4611      	mov	r1, r2
 8003dde:	4618      	mov	r0, r3
 8003de0:	f00a fcc0 	bl	800e764 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b084      	sub	sp, #16
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
 8003dfe:	4608      	mov	r0, r1
 8003e00:	4611      	mov	r1, r2
 8003e02:	461a      	mov	r2, r3
 8003e04:	4603      	mov	r3, r0
 8003e06:	70fb      	strb	r3, [r7, #3]
 8003e08:	460b      	mov	r3, r1
 8003e0a:	803b      	strh	r3, [r7, #0]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003e10:	2300      	movs	r3, #0
 8003e12:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	da0f      	bge.n	8003e3c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e1c:	78fb      	ldrb	r3, [r7, #3]
 8003e1e:	f003 0207 	and.w	r2, r3, #7
 8003e22:	4613      	mov	r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	4413      	add	r3, r2
 8003e28:	00db      	lsls	r3, r3, #3
 8003e2a:	3310      	adds	r3, #16
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	4413      	add	r3, r2
 8003e30:	3304      	adds	r3, #4
 8003e32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2201      	movs	r2, #1
 8003e38:	705a      	strb	r2, [r3, #1]
 8003e3a:	e00f      	b.n	8003e5c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e3c:	78fb      	ldrb	r3, [r7, #3]
 8003e3e:	f003 0207 	and.w	r2, r3, #7
 8003e42:	4613      	mov	r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	4413      	add	r3, r2
 8003e48:	00db      	lsls	r3, r3, #3
 8003e4a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	4413      	add	r3, r2
 8003e52:	3304      	adds	r3, #4
 8003e54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003e5c:	78fb      	ldrb	r3, [r7, #3]
 8003e5e:	f003 0307 	and.w	r3, r3, #7
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003e68:	883b      	ldrh	r3, [r7, #0]
 8003e6a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	78ba      	ldrb	r2, [r7, #2]
 8003e76:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003e78:	78bb      	ldrb	r3, [r7, #2]
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d102      	bne.n	8003e84 <HAL_PCD_EP_Open+0x8e>
  {
    ep->data_pid_start = 0U;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d101      	bne.n	8003e92 <HAL_PCD_EP_Open+0x9c>
 8003e8e:	2302      	movs	r3, #2
 8003e90:	e00e      	b.n	8003eb0 <HAL_PCD_EP_Open+0xba>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68f9      	ldr	r1, [r7, #12]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f008 fe31 	bl	800cb08 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return ret;
 8003eae:	7afb      	ldrb	r3, [r7, #11]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ec4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	da0f      	bge.n	8003eec <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ecc:	78fb      	ldrb	r3, [r7, #3]
 8003ece:	f003 0207 	and.w	r2, r3, #7
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4413      	add	r3, r2
 8003ed8:	00db      	lsls	r3, r3, #3
 8003eda:	3310      	adds	r3, #16
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	4413      	add	r3, r2
 8003ee0:	3304      	adds	r3, #4
 8003ee2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	705a      	strb	r2, [r3, #1]
 8003eea:	e00f      	b.n	8003f0c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003eec:	78fb      	ldrb	r3, [r7, #3]
 8003eee:	f003 0207 	and.w	r2, r3, #7
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	4413      	add	r3, r2
 8003ef8:	00db      	lsls	r3, r3, #3
 8003efa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	4413      	add	r3, r2
 8003f02:	3304      	adds	r3, #4
 8003f04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f0c:	78fb      	ldrb	r3, [r7, #3]
 8003f0e:	f003 0307 	and.w	r3, r3, #7
 8003f12:	b2da      	uxtb	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d101      	bne.n	8003f26 <HAL_PCD_EP_Close+0x6e>
 8003f22:	2302      	movs	r3, #2
 8003f24:	e00e      	b.n	8003f44 <HAL_PCD_EP_Close+0x8c>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68f9      	ldr	r1, [r7, #12]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f009 f947 	bl	800d1c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	607a      	str	r2, [r7, #4]
 8003f56:	603b      	str	r3, [r7, #0]
 8003f58:	460b      	mov	r3, r1
 8003f5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f5c:	7afb      	ldrb	r3, [r7, #11]
 8003f5e:	f003 0207 	and.w	r2, r3, #7
 8003f62:	4613      	mov	r3, r2
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	4413      	add	r3, r2
 8003f68:	00db      	lsls	r3, r3, #3
 8003f6a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	4413      	add	r3, r2
 8003f72:	3304      	adds	r3, #4
 8003f74:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	2200      	movs	r2, #0
 8003f86:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f8e:	7afb      	ldrb	r3, [r7, #11]
 8003f90:	f003 0307 	and.w	r3, r3, #7
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	6979      	ldr	r1, [r7, #20]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f009 fa9b 	bl	800d4dc <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3718      	adds	r7, #24
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	460b      	mov	r3, r1
 8003fba:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003fbc:	78fb      	ldrb	r3, [r7, #3]
 8003fbe:	f003 0207 	and.w	r2, r3, #7
 8003fc2:	6879      	ldr	r1, [r7, #4]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	440b      	add	r3, r1
 8003fce:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8003fd2:	681b      	ldr	r3, [r3, #0]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	607a      	str	r2, [r7, #4]
 8003fea:	603b      	str	r3, [r7, #0]
 8003fec:	460b      	mov	r3, r1
 8003fee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ff0:	7afb      	ldrb	r3, [r7, #11]
 8003ff2:	f003 0207 	and.w	r2, r3, #7
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4413      	add	r3, r2
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	3310      	adds	r3, #16
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	4413      	add	r3, r2
 8004004:	3304      	adds	r3, #4
 8004006:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	619a      	str	r2, [r3, #24]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	621a      	str	r2, [r3, #32]
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	2200      	movs	r2, #0
 8004026:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	2201      	movs	r2, #1
 800402c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800402e:	7afb      	ldrb	r3, [r7, #11]
 8004030:	f003 0307 	and.w	r3, r3, #7
 8004034:	b2da      	uxtb	r2, r3
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	6979      	ldr	r1, [r7, #20]
 8004040:	4618      	mov	r0, r3
 8004042:	f009 fa4b 	bl	800d4dc <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3718      	adds	r7, #24
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	460b      	mov	r3, r1
 800405a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800405c:	78fb      	ldrb	r3, [r7, #3]
 800405e:	f003 0307 	and.w	r3, r3, #7
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	7912      	ldrb	r2, [r2, #4]
 8004066:	4293      	cmp	r3, r2
 8004068:	d901      	bls.n	800406e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e040      	b.n	80040f0 <HAL_PCD_EP_SetStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800406e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004072:	2b00      	cmp	r3, #0
 8004074:	da0f      	bge.n	8004096 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004076:	78fb      	ldrb	r3, [r7, #3]
 8004078:	f003 0207 	and.w	r2, r3, #7
 800407c:	4613      	mov	r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	4413      	add	r3, r2
 8004082:	00db      	lsls	r3, r3, #3
 8004084:	3310      	adds	r3, #16
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	4413      	add	r3, r2
 800408a:	3304      	adds	r3, #4
 800408c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2201      	movs	r2, #1
 8004092:	705a      	strb	r2, [r3, #1]
 8004094:	e00d      	b.n	80040b2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004096:	78fa      	ldrb	r2, [r7, #3]
 8004098:	4613      	mov	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	4413      	add	r3, r2
 80040a8:	3304      	adds	r3, #4
 80040aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2201      	movs	r2, #1
 80040b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040b8:	78fb      	ldrb	r3, [r7, #3]
 80040ba:	f003 0307 	and.w	r3, r3, #7
 80040be:	b2da      	uxtb	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d101      	bne.n	80040d2 <HAL_PCD_EP_SetStall+0x82>
 80040ce:	2302      	movs	r3, #2
 80040d0:	e00e      	b.n	80040f0 <HAL_PCD_EP_SetStall+0xa0>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68f9      	ldr	r1, [r7, #12]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f00a fa65 	bl	800e5b0 <USB_EPSetStall>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	460b      	mov	r3, r1
 8004102:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004104:	78fb      	ldrb	r3, [r7, #3]
 8004106:	f003 030f 	and.w	r3, r3, #15
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	7912      	ldrb	r2, [r2, #4]
 800410e:	4293      	cmp	r3, r2
 8004110:	d901      	bls.n	8004116 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e042      	b.n	800419c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004116:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800411a:	2b00      	cmp	r3, #0
 800411c:	da0f      	bge.n	800413e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800411e:	78fb      	ldrb	r3, [r7, #3]
 8004120:	f003 0207 	and.w	r2, r3, #7
 8004124:	4613      	mov	r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	4413      	add	r3, r2
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	3310      	adds	r3, #16
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	4413      	add	r3, r2
 8004132:	3304      	adds	r3, #4
 8004134:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2201      	movs	r2, #1
 800413a:	705a      	strb	r2, [r3, #1]
 800413c:	e00f      	b.n	800415e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800413e:	78fb      	ldrb	r3, [r7, #3]
 8004140:	f003 0207 	and.w	r2, r3, #7
 8004144:	4613      	mov	r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4413      	add	r3, r2
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	4413      	add	r3, r2
 8004154:	3304      	adds	r3, #4
 8004156:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004164:	78fb      	ldrb	r3, [r7, #3]
 8004166:	f003 0307 	and.w	r3, r3, #7
 800416a:	b2da      	uxtb	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8004176:	2b01      	cmp	r3, #1
 8004178:	d101      	bne.n	800417e <HAL_PCD_EP_ClrStall+0x86>
 800417a:	2302      	movs	r3, #2
 800417c:	e00e      	b.n	800419c <HAL_PCD_EP_ClrStall+0xa4>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68f9      	ldr	r1, [r7, #12]
 800418c:	4618      	mov	r0, r3
 800418e:	f00a fa55 	bl	800e63c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b08e      	sub	sp, #56	@ 0x38
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80041ac:	e326      	b.n	80047fc <PCD_EP_ISR_Handler+0x658>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041b4:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 80041b6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	f003 030f 	and.w	r3, r3, #15
 80041be:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    if (epindex == 0U)
 80041c2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f040 8124 	bne.w	8004414 <PCD_EP_ISR_Handler+0x270>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80041cc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80041ce:	f003 0310 	and.w	r3, r3, #16
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d13e      	bne.n	8004254 <PCD_EP_ISR_Handler+0xb0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	4b89      	ldr	r3, [pc, #548]	@ (8004404 <PCD_EP_ISR_Handler+0x260>)
 80041de:	4013      	ands	r3, r2
 80041e0:	60bb      	str	r3, [r7, #8]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80041ec:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	3314      	adds	r3, #20
 80041f2:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80041f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	00db      	lsls	r3, r3, #3
 80041fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80041fe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	0c1b      	lsrs	r3, r3, #16
 8004206:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800420a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800420c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800420e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004210:	695a      	ldr	r2, [r3, #20]
 8004212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004214:	69db      	ldr	r3, [r3, #28]
 8004216:	441a      	add	r2, r3
 8004218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800421a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800421c:	2100      	movs	r1, #0
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f00b fb17 	bl	800f852 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	7c5b      	ldrb	r3, [r3, #17]
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	f000 82e6 	beq.w	80047fc <PCD_EP_ISR_Handler+0x658>
 8004230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	2b00      	cmp	r3, #0
 8004236:	f040 82e1 	bne.w	80047fc <PCD_EP_ISR_Handler+0x658>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	7c5b      	ldrb	r3, [r3, #17]
 800423e:	b2db      	uxtb	r3, r3
 8004240:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004244:	b2da      	uxtb	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	745a      	strb	r2, [r3, #17]
 8004252:	e2d3      	b.n	80047fc <PCD_EP_ISR_Handler+0x658>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800425a:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	867b      	strh	r3, [r7, #50]	@ 0x32

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004264:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004266:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800426a:	2b00      	cmp	r3, #0
 800426c:	d027      	beq.n	80042be <PCD_EP_ISR_Handler+0x11a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	4619      	mov	r1, r3
 8004278:	4610      	mov	r0, r2
 800427a:	f7ff fb09 	bl	8003890 <PCD_GET_EP_RX_CNT>
 800427e:	4603      	mov	r3, r0
 8004280:	461a      	mov	r2, r3
 8004282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004284:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6818      	ldr	r0, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 8004290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004292:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004296:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004298:	b29b      	uxth	r3, r3
 800429a:	f00a fb07 	bl	800e8ac <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	4b58      	ldr	r3, [pc, #352]	@ (8004408 <PCD_EP_ISR_Handler+0x264>)
 80042a6:	4013      	ands	r3, r2
 80042a8:	60fb      	str	r3, [r7, #12]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80042b4:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f00b fa9e 	bl	800f7f8 <HAL_PCD_SetupStageCallback>
 80042bc:	e29e      	b.n	80047fc <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 80042be:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f280 829a 	bge.w	80047fc <PCD_EP_ISR_Handler+0x658>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	4b4e      	ldr	r3, [pc, #312]	@ (8004408 <PCD_EP_ISR_Handler+0x264>)
 80042d0:	4013      	ands	r3, r2
 80042d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042da:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80042de:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	4619      	mov	r1, r3
 80042ea:	4610      	mov	r0, r2
 80042ec:	f7ff fad0 	bl	8003890 <PCD_GET_EP_RX_CNT>
 80042f0:	4603      	mov	r3, r0
 80042f2:	461a      	mov	r2, r3
 80042f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042f6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80042f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042fa:	69db      	ldr	r3, [r3, #28]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d019      	beq.n	8004334 <PCD_EP_ISR_Handler+0x190>
 8004300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d015      	beq.n	8004334 <PCD_EP_ISR_Handler+0x190>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6818      	ldr	r0, [r3, #0]
 800430c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800430e:	6959      	ldr	r1, [r3, #20]
 8004310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004312:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004316:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004318:	b29b      	uxth	r3, r3
 800431a:	f00a fac7 	bl	800e8ac <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800431e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004320:	695a      	ldr	r2, [r3, #20]
 8004322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	441a      	add	r2, r3
 8004328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800432a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800432c:	2100      	movs	r1, #0
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f00b fa74 	bl	800f81c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	867b      	strh	r3, [r7, #50]	@ 0x32

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800433c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800433e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004342:	2b00      	cmp	r3, #0
 8004344:	f040 825a 	bne.w	80047fc <PCD_EP_ISR_Handler+0x658>
 8004348:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800434a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800434e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004352:	f000 8253 	beq.w	80047fc <PCD_EP_ISR_Handler+0x658>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004356:	4b2d      	ldr	r3, [pc, #180]	@ (800440c <PCD_EP_ISR_Handler+0x268>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	4a2c      	ldr	r2, [pc, #176]	@ (800440c <PCD_EP_ISR_Handler+0x268>)
 800435c:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8004360:	6053      	str	r3, [r2, #4]
 8004362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d106      	bne.n	8004378 <PCD_EP_ISR_Handler+0x1d4>
 800436a:	4b28      	ldr	r3, [pc, #160]	@ (800440c <PCD_EP_ISR_Handler+0x268>)
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	4a27      	ldr	r2, [pc, #156]	@ (800440c <PCD_EP_ISR_Handler+0x268>)
 8004370:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004374:	6053      	str	r3, [r2, #4]
 8004376:	e02e      	b.n	80043d6 <PCD_EP_ISR_Handler+0x232>
 8004378:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	2b3e      	cmp	r3, #62	@ 0x3e
 800437e:	d814      	bhi.n	80043aa <PCD_EP_ISR_Handler+0x206>
 8004380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	085b      	lsrs	r3, r3, #1
 8004386:	617b      	str	r3, [r7, #20]
 8004388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	2b00      	cmp	r3, #0
 8004392:	d002      	beq.n	800439a <PCD_EP_ISR_Handler+0x1f6>
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	3301      	adds	r3, #1
 8004398:	617b      	str	r3, [r7, #20]
 800439a:	4b1c      	ldr	r3, [pc, #112]	@ (800440c <PCD_EP_ISR_Handler+0x268>)
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	069b      	lsls	r3, r3, #26
 80043a2:	491a      	ldr	r1, [pc, #104]	@ (800440c <PCD_EP_ISR_Handler+0x268>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	604b      	str	r3, [r1, #4]
 80043a8:	e015      	b.n	80043d6 <PCD_EP_ISR_Handler+0x232>
 80043aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	095b      	lsrs	r3, r3, #5
 80043b0:	617b      	str	r3, [r7, #20]
 80043b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	f003 031f 	and.w	r3, r3, #31
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d102      	bne.n	80043c4 <PCD_EP_ISR_Handler+0x220>
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	3b01      	subs	r3, #1
 80043c2:	617b      	str	r3, [r7, #20]
 80043c4:	4b11      	ldr	r3, [pc, #68]	@ (800440c <PCD_EP_ISR_Handler+0x268>)
 80043c6:	685a      	ldr	r2, [r3, #4]
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	069b      	lsls	r3, r3, #26
 80043cc:	4313      	orrs	r3, r2
 80043ce:	4a0f      	ldr	r2, [pc, #60]	@ (800440c <PCD_EP_ISR_Handler+0x268>)
 80043d0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80043d4:	6053      	str	r3, [r2, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004410 <PCD_EP_ISR_Handler+0x26c>)
 80043de:	4013      	ands	r3, r2
 80043e0:	613b      	str	r3, [r7, #16]
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80043e8:	613b      	str	r3, [r7, #16]
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80043f0:	613b      	str	r3, [r7, #16]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004400:	6013      	str	r3, [r2, #0]
 8004402:	e1fb      	b.n	80047fc <PCD_EP_ISR_Handler+0x658>
 8004404:	07ff8f0f 	.word	0x07ff8f0f
 8004408:	07ff0f8f 	.word	0x07ff0f8f
 800440c:	40016400 	.word	0x40016400
 8004410:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	461a      	mov	r2, r3
 800441a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4413      	add	r3, r2
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	867b      	strh	r3, [r7, #50]	@ 0x32

      if ((wEPVal & USB_EP_VTRX) != 0U)
 8004426:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800442a:	2b00      	cmp	r3, #0
 800442c:	f280 80bd 	bge.w	80045aa <PCD_EP_ISR_Handler+0x406>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	461a      	mov	r2, r3
 8004436:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	4413      	add	r3, r2
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	4b9e      	ldr	r3, [pc, #632]	@ (80046bc <PCD_EP_ISR_Handler+0x518>)
 8004442:	4013      	ands	r3, r2
 8004444:	61fb      	str	r3, [r7, #28]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	461a      	mov	r2, r3
 800444c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4413      	add	r3, r2
 8004454:	69fa      	ldr	r2, [r7, #28]
 8004456:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800445a:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800445c:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8004460:	4613      	mov	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	4413      	add	r3, r2
 8004466:	00db      	lsls	r3, r3, #3
 8004468:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	4413      	add	r3, r2
 8004470:	3304      	adds	r3, #4
 8004472:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004476:	7b1b      	ldrb	r3, [r3, #12]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d116      	bne.n	80044aa <PCD_EP_ISR_Handler+0x306>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	4619      	mov	r1, r3
 8004486:	4610      	mov	r0, r2
 8004488:	f7ff fa02 	bl	8003890 <PCD_GET_EP_RX_CNT>
 800448c:	4603      	mov	r3, r0
 800448e:	84bb      	strh	r3, [r7, #36]	@ 0x24

          if (count != 0U)
 8004490:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004492:	2b00      	cmp	r3, #0
 8004494:	d067      	beq.n	8004566 <PCD_EP_ISR_Handler+0x3c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6818      	ldr	r0, [r3, #0]
 800449a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800449c:	6959      	ldr	r1, [r3, #20]
 800449e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044a0:	88da      	ldrh	r2, [r3, #6]
 80044a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80044a4:	f00a fa02 	bl	800e8ac <USB_ReadPMA>
 80044a8:	e05d      	b.n	8004566 <PCD_EP_ISR_Handler+0x3c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80044aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044ac:	78db      	ldrb	r3, [r3, #3]
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d108      	bne.n	80044c4 <PCD_EP_ISR_Handler+0x320>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80044b2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80044b4:	461a      	mov	r2, r3
 80044b6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 f9ad 	bl	8004818 <HAL_PCD_EP_DB_Receive>
 80044be:	4603      	mov	r3, r0
 80044c0:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80044c2:	e050      	b.n	8004566 <PCD_EP_ISR_Handler+0x3c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	461a      	mov	r2, r3
 80044ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	4b7a      	ldr	r3, [pc, #488]	@ (80046c0 <PCD_EP_ISR_Handler+0x51c>)
 80044d6:	4013      	ands	r3, r2
 80044d8:	61bb      	str	r3, [r7, #24]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	461a      	mov	r2, r3
 80044e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	441a      	add	r2, r3
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044ee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80044f2:	6013      	str	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	461a      	mov	r2, r3
 80044fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4413      	add	r3, r2
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d016      	beq.n	800453a <PCD_EP_ISR_Handler+0x396>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	4619      	mov	r1, r3
 8004516:	4610      	mov	r0, r2
 8004518:	f7ff f9db 	bl	80038d2 <PCD_GET_EP_DBUF0_CNT>
 800451c:	4603      	mov	r3, r0
 800451e:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8004520:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004522:	2b00      	cmp	r3, #0
 8004524:	d01f      	beq.n	8004566 <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6818      	ldr	r0, [r3, #0]
 800452a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800452c:	6959      	ldr	r1, [r3, #20]
 800452e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004530:	891a      	ldrh	r2, [r3, #8]
 8004532:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004534:	f00a f9ba 	bl	800e8ac <USB_ReadPMA>
 8004538:	e015      	b.n	8004566 <PCD_EP_ISR_Handler+0x3c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	4619      	mov	r1, r3
 8004544:	4610      	mov	r0, r2
 8004546:	f7ff f9e5 	bl	8003914 <PCD_GET_EP_DBUF1_CNT>
 800454a:	4603      	mov	r3, r0
 800454c:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 800454e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004550:	2b00      	cmp	r3, #0
 8004552:	d008      	beq.n	8004566 <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6818      	ldr	r0, [r3, #0]
 8004558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800455a:	6959      	ldr	r1, [r3, #20]
 800455c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800455e:	895a      	ldrh	r2, [r3, #10]
 8004560:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004562:	f00a f9a3 	bl	800e8ac <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004568:	69da      	ldr	r2, [r3, #28]
 800456a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800456c:	441a      	add	r2, r3
 800456e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004570:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004574:	695a      	ldr	r2, [r3, #20]
 8004576:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004578:	441a      	add	r2, r3
 800457a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800457c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800457e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d004      	beq.n	8004590 <PCD_EP_ISR_Handler+0x3ec>
 8004586:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	429a      	cmp	r2, r3
 800458e:	d206      	bcs.n	800459e <PCD_EP_ISR_Handler+0x3fa>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	4619      	mov	r1, r3
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f00b f940 	bl	800f81c <HAL_PCD_DataOutStageCallback>
 800459c:	e005      	b.n	80045aa <PCD_EP_ISR_Handler+0x406>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80045a4:	4618      	mov	r0, r3
 80045a6:	f008 ff99 	bl	800d4dc <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 80045aa:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80045ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f000 8123 	beq.w	80047fc <PCD_EP_ISR_Handler+0x658>
      {
        ep = &hpcd->IN_ep[epindex];
 80045b6:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80045ba:	4613      	mov	r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4413      	add	r3, r2
 80045c0:	00db      	lsls	r3, r3, #3
 80045c2:	3310      	adds	r3, #16
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	4413      	add	r3, r2
 80045c8:	3304      	adds	r3, #4
 80045ca:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	461a      	mov	r2, r3
 80045d2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4413      	add	r3, r2
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	4b39      	ldr	r3, [pc, #228]	@ (80046c4 <PCD_EP_ISR_Handler+0x520>)
 80045de:	4013      	ands	r3, r2
 80045e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	461a      	mov	r2, r3
 80045e8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	4413      	add	r3, r2
 80045f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80045f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80045f6:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 80045f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045fa:	78db      	ldrb	r3, [r3, #3]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	f040 80b8 	bne.w	8004772 <PCD_EP_ISR_Handler+0x5ce>
        {
          ep->xfer_len = 0U;
 8004602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004604:	2200      	movs	r2, #0
 8004606:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800460a:	7b1b      	ldrb	r3, [r3, #12]
 800460c:	2b00      	cmp	r3, #0
 800460e:	f000 80a9 	beq.w	8004764 <PCD_EP_ISR_Handler+0x5c0>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004612:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004618:	2b00      	cmp	r3, #0
 800461a:	d055      	beq.n	80046c8 <PCD_EP_ISR_Handler+0x524>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800461c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800461e:	785b      	ldrb	r3, [r3, #1]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d124      	bne.n	800466e <PCD_EP_ISR_Handler+0x4ca>
 8004624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	00db      	lsls	r3, r3, #3
 800462a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800462e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	00db      	lsls	r3, r3, #3
 800463a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800463e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004642:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	00db      	lsls	r3, r3, #3
 800464e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004652:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	00db      	lsls	r3, r3, #3
 800465e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004662:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004666:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	e07a      	b.n	8004764 <PCD_EP_ISR_Handler+0x5c0>
 800466e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004670:	785b      	ldrb	r3, [r3, #1]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d176      	bne.n	8004764 <PCD_EP_ISR_Handler+0x5c0>
 8004676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004680:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004690:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004694:	b292      	uxth	r2, r2
 8004696:	601a      	str	r2, [r3, #0]
 8004698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	00db      	lsls	r3, r3, #3
 800469e:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80046a2:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80046a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	00db      	lsls	r3, r3, #3
 80046ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80046b0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80046b4:	6812      	ldr	r2, [r2, #0]
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	e054      	b.n	8004764 <PCD_EP_ISR_Handler+0x5c0>
 80046ba:	bf00      	nop
 80046bc:	07ff0f8f 	.word	0x07ff0f8f
 80046c0:	07ff8f8f 	.word	0x07ff8f8f
 80046c4:	07ff8f0f 	.word	0x07ff8f0f
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80046c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046ca:	785b      	ldrb	r3, [r3, #1]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d124      	bne.n	800471a <PCD_EP_ISR_Handler+0x576>
 80046d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	00db      	lsls	r3, r3, #3
 80046d6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80046da:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80046de:	685a      	ldr	r2, [r3, #4]
 80046e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	00db      	lsls	r3, r3, #3
 80046e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80046ea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80046ee:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80046f2:	605a      	str	r2, [r3, #4]
 80046f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	00db      	lsls	r3, r3, #3
 80046fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80046fe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	00db      	lsls	r3, r3, #3
 800470a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800470e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004712:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004716:	605a      	str	r2, [r3, #4]
 8004718:	e024      	b.n	8004764 <PCD_EP_ISR_Handler+0x5c0>
 800471a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800471c:	785b      	ldrb	r3, [r3, #1]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d120      	bne.n	8004764 <PCD_EP_ISR_Handler+0x5c0>
 8004722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	00db      	lsls	r3, r3, #3
 8004728:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800472c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	00db      	lsls	r3, r3, #3
 8004738:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800473c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004740:	b292      	uxth	r2, r2
 8004742:	605a      	str	r2, [r3, #4]
 8004744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	00db      	lsls	r3, r3, #3
 800474a:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 800474e:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8004752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	00db      	lsls	r3, r3, #3
 8004758:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800475c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004760:	6852      	ldr	r2, [r2, #4]
 8004762:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	4619      	mov	r1, r3
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f00b f871 	bl	800f852 <HAL_PCD_DataInStageCallback>
 8004770:	e044      	b.n	80047fc <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004772:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004774:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004778:	2b00      	cmp	r3, #0
 800477a:	d139      	bne.n	80047f0 <PCD_EP_ISR_Handler+0x64c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800477c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	00db      	lsls	r3, r3, #3
 8004782:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004786:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	0c1b      	lsrs	r3, r3, #16
 800478e:	b29b      	uxth	r3, r3
 8004790:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004794:	84fb      	strh	r3, [r7, #38]	@ 0x26

            if (ep->xfer_len > TxPctSize)
 8004796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004798:	699a      	ldr	r2, [r3, #24]
 800479a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800479c:	429a      	cmp	r2, r3
 800479e:	d906      	bls.n	80047ae <PCD_EP_ISR_Handler+0x60a>
            {
              ep->xfer_len -= TxPctSize;
 80047a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047a2:	699a      	ldr	r2, [r3, #24]
 80047a4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80047a6:	1ad2      	subs	r2, r2, r3
 80047a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047aa:	619a      	str	r2, [r3, #24]
 80047ac:	e002      	b.n	80047b4 <PCD_EP_ISR_Handler+0x610>
            }
            else
            {
              ep->xfer_len = 0U;
 80047ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047b0:	2200      	movs	r2, #0
 80047b2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80047b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d106      	bne.n	80047ca <PCD_EP_ISR_Handler+0x626>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80047bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	4619      	mov	r1, r3
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f00b f845 	bl	800f852 <HAL_PCD_DataInStageCallback>
 80047c8:	e018      	b.n	80047fc <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80047ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047cc:	695a      	ldr	r2, [r3, #20]
 80047ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80047d0:	441a      	add	r2, r3
 80047d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047d4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80047d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047d8:	69da      	ldr	r2, [r3, #28]
 80047da:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80047dc:	441a      	add	r2, r3
 80047de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047e0:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80047e8:	4618      	mov	r0, r3
 80047ea:	f008 fe77 	bl	800d4dc <USB_EPStartXfer>
 80047ee:	e005      	b.n	80047fc <PCD_EP_ISR_Handler+0x658>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80047f0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80047f2:	461a      	mov	r2, r3
 80047f4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 f8e8 	bl	80049cc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004802:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004806:	2b00      	cmp	r3, #0
 8004808:	f47f acd1 	bne.w	80041ae <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3738      	adds	r7, #56	@ 0x38
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop

08004818 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b08a      	sub	sp, #40	@ 0x28
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	4613      	mov	r3, r2
 8004824:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004826:	88fb      	ldrh	r3, [r7, #6]
 8004828:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d062      	beq.n	80048f6 <HAL_PCD_EP_DB_Receive+0xde>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	4619      	mov	r1, r3
 800483a:	4610      	mov	r0, r2
 800483c:	f7ff f849 	bl	80038d2 <PCD_GET_EP_DBUF0_CNT>
 8004840:	4603      	mov	r3, r0
 8004842:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	699a      	ldr	r2, [r3, #24]
 8004848:	8bfb      	ldrh	r3, [r7, #30]
 800484a:	429a      	cmp	r2, r3
 800484c:	d306      	bcc.n	800485c <HAL_PCD_EP_DB_Receive+0x44>
    {
      ep->xfer_len -= count;
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	699a      	ldr	r2, [r3, #24]
 8004852:	8bfb      	ldrh	r3, [r7, #30]
 8004854:	1ad2      	subs	r2, r2, r3
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	619a      	str	r2, [r3, #24]
 800485a:	e002      	b.n	8004862 <HAL_PCD_EP_DB_Receive+0x4a>
    }
    else
    {
      ep->xfer_len = 0U;
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	2200      	movs	r2, #0
 8004860:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d11b      	bne.n	80048a2 <HAL_PCD_EP_DB_Receive+0x8a>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	461a      	mov	r2, r3
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4413      	add	r3, r2
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	4b52      	ldr	r3, [pc, #328]	@ (80049c4 <HAL_PCD_EP_DB_Receive+0x1ac>)
 800487c:	4013      	ands	r3, r2
 800487e:	61bb      	str	r3, [r7, #24]
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004886:	61bb      	str	r3, [r7, #24]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	461a      	mov	r2, r3
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	441a      	add	r2, r3
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800489c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048a0:	6013      	str	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80048a2:	88fb      	ldrh	r3, [r7, #6]
 80048a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d017      	beq.n	80048dc <HAL_PCD_EP_DB_Receive+0xc4>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	461a      	mov	r2, r3
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4413      	add	r3, r2
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	4b42      	ldr	r3, [pc, #264]	@ (80049c8 <HAL_PCD_EP_DB_Receive+0x1b0>)
 80048be:	4013      	ands	r3, r2
 80048c0:	617b      	str	r3, [r7, #20]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	461a      	mov	r2, r3
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	441a      	add	r2, r3
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048d6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80048da:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 80048dc:	8bfb      	ldrh	r3, [r7, #30]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d06b      	beq.n	80049ba <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6818      	ldr	r0, [r3, #0]
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	6959      	ldr	r1, [r3, #20]
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	891a      	ldrh	r2, [r3, #8]
 80048ee:	8bfb      	ldrh	r3, [r7, #30]
 80048f0:	f009 ffdc 	bl	800e8ac <USB_ReadPMA>
 80048f4:	e061      	b.n	80049ba <HAL_PCD_EP_DB_Receive+0x1a2>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	4619      	mov	r1, r3
 8004900:	4610      	mov	r0, r2
 8004902:	f7ff f807 	bl	8003914 <PCD_GET_EP_DBUF1_CNT>
 8004906:	4603      	mov	r3, r0
 8004908:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	699a      	ldr	r2, [r3, #24]
 800490e:	8bfb      	ldrh	r3, [r7, #30]
 8004910:	429a      	cmp	r2, r3
 8004912:	d306      	bcc.n	8004922 <HAL_PCD_EP_DB_Receive+0x10a>
    {
      ep->xfer_len -= count;
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	699a      	ldr	r2, [r3, #24]
 8004918:	8bfb      	ldrh	r3, [r7, #30]
 800491a:	1ad2      	subs	r2, r2, r3
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	619a      	str	r2, [r3, #24]
 8004920:	e002      	b.n	8004928 <HAL_PCD_EP_DB_Receive+0x110>
    }
    else
    {
      ep->xfer_len = 0U;
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	2200      	movs	r2, #0
 8004926:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d11b      	bne.n	8004968 <HAL_PCD_EP_DB_Receive+0x150>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	461a      	mov	r2, r3
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4413      	add	r3, r2
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	4b20      	ldr	r3, [pc, #128]	@ (80049c4 <HAL_PCD_EP_DB_Receive+0x1ac>)
 8004942:	4013      	ands	r3, r2
 8004944:	627b      	str	r3, [r7, #36]	@ 0x24
 8004946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004948:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800494c:	627b      	str	r3, [r7, #36]	@ 0x24
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	461a      	mov	r2, r3
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	441a      	add	r2, r3
 800495c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004962:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004966:	6013      	str	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004968:	88fb      	ldrh	r3, [r7, #6]
 800496a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800496e:	2b00      	cmp	r3, #0
 8004970:	d117      	bne.n	80049a2 <HAL_PCD_EP_DB_Receive+0x18a>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	461a      	mov	r2, r3
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	4413      	add	r3, r2
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	4b11      	ldr	r3, [pc, #68]	@ (80049c8 <HAL_PCD_EP_DB_Receive+0x1b0>)
 8004984:	4013      	ands	r3, r2
 8004986:	623b      	str	r3, [r7, #32]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	461a      	mov	r2, r3
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	441a      	add	r2, r3
 8004996:	6a3b      	ldr	r3, [r7, #32]
 8004998:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800499c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80049a0:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 80049a2:	8bfb      	ldrh	r3, [r7, #30]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d008      	beq.n	80049ba <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6818      	ldr	r0, [r3, #0]
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	6959      	ldr	r1, [r3, #20]
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	895a      	ldrh	r2, [r3, #10]
 80049b4:	8bfb      	ldrh	r3, [r7, #30]
 80049b6:	f009 ff79 	bl	800e8ac <USB_ReadPMA>
    }
  }

  return count;
 80049ba:	8bfb      	ldrh	r3, [r7, #30]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3728      	adds	r7, #40	@ 0x28
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	07ffbf8f 	.word	0x07ffbf8f
 80049c8:	07ff8f8f 	.word	0x07ff8f8f

080049cc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b08e      	sub	sp, #56	@ 0x38
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	4613      	mov	r3, r2
 80049d8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80049da:	88fb      	ldrh	r3, [r7, #6]
 80049dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f000 81d5 	beq.w	8004d90 <HAL_PCD_EP_DB_Transmit+0x3c4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	4619      	mov	r1, r3
 80049f0:	4610      	mov	r0, r2
 80049f2:	f7fe ff6e 	bl	80038d2 <PCD_GET_EP_DBUF0_CNT>
 80049f6:	4603      	mov	r3, r0
 80049f8:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len > TxPctSize)
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	699a      	ldr	r2, [r3, #24]
 80049fe:	8bfb      	ldrh	r3, [r7, #30]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d906      	bls.n	8004a12 <HAL_PCD_EP_DB_Transmit+0x46>
    {
      ep->xfer_len -= TxPctSize;
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	699a      	ldr	r2, [r3, #24]
 8004a08:	8bfb      	ldrh	r3, [r7, #30]
 8004a0a:	1ad2      	subs	r2, r2, r3
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	619a      	str	r2, [r3, #24]
 8004a10:	e002      	b.n	8004a18 <HAL_PCD_EP_DB_Transmit+0x4c>
    }
    else
    {
      ep->xfer_len = 0U;
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	2200      	movs	r2, #0
 8004a16:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f040 80c1 	bne.w	8004ba4 <HAL_PCD_EP_DB_Transmit+0x1d8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	785b      	ldrb	r3, [r3, #1]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d124      	bne.n	8004a74 <HAL_PCD_EP_DB_Transmit+0xa8>
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	00db      	lsls	r3, r3, #3
 8004a30:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004a34:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	00db      	lsls	r3, r3, #3
 8004a40:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004a44:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004a48:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8004a4c:	601a      	str	r2, [r3, #0]
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	00db      	lsls	r3, r3, #3
 8004a54:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004a58:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	00db      	lsls	r3, r3, #3
 8004a64:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004a68:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004a6c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004a70:	601a      	str	r2, [r3, #0]
 8004a72:	e024      	b.n	8004abe <HAL_PCD_EP_DB_Transmit+0xf2>
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	785b      	ldrb	r3, [r3, #1]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d120      	bne.n	8004abe <HAL_PCD_EP_DB_Transmit+0xf2>
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	00db      	lsls	r3, r3, #3
 8004a82:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004a86:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	00db      	lsls	r3, r3, #3
 8004a92:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004a96:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004a9a:	b292      	uxth	r2, r2
 8004a9c:	601a      	str	r2, [r3, #0]
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	00db      	lsls	r3, r3, #3
 8004aa4:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8004aa8:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	00db      	lsls	r3, r3, #3
 8004ab2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004ab6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004aba:	6812      	ldr	r2, [r2, #0]
 8004abc:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	785b      	ldrb	r3, [r3, #1]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d124      	bne.n	8004b10 <HAL_PCD_EP_DB_Transmit+0x144>
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004ad0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	00db      	lsls	r3, r3, #3
 8004adc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004ae0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004ae4:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8004ae8:	605a      	str	r2, [r3, #4]
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	00db      	lsls	r3, r3, #3
 8004af0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004af4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	00db      	lsls	r3, r3, #3
 8004b00:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004b04:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004b08:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004b0c:	605a      	str	r2, [r3, #4]
 8004b0e:	e024      	b.n	8004b5a <HAL_PCD_EP_DB_Transmit+0x18e>
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	785b      	ldrb	r3, [r3, #1]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d120      	bne.n	8004b5a <HAL_PCD_EP_DB_Transmit+0x18e>
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	00db      	lsls	r3, r3, #3
 8004b1e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004b22:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004b26:	685a      	ldr	r2, [r3, #4]
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	00db      	lsls	r3, r3, #3
 8004b2e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004b32:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004b36:	b292      	uxth	r2, r2
 8004b38:	605a      	str	r2, [r3, #4]
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	00db      	lsls	r3, r3, #3
 8004b40:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8004b44:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	00db      	lsls	r3, r3, #3
 8004b4e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004b52:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004b56:	6852      	ldr	r2, [r2, #4]
 8004b58:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	4619      	mov	r1, r3
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f00a fe76 	bl	800f852 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004b66:	88fb      	ldrh	r3, [r7, #6]
 8004b68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 82e5 	beq.w	800513c <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	461a      	mov	r2, r3
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4413      	add	r3, r2
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	4b8e      	ldr	r3, [pc, #568]	@ (8004dbc <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8004b84:	4013      	ands	r3, r2
 8004b86:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	441a      	add	r2, r3
 8004b96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b98:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ba0:	6013      	str	r3, [r2, #0]
 8004ba2:	e2cb      	b.n	800513c <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004ba4:	88fb      	ldrh	r3, [r7, #6]
 8004ba6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d017      	beq.n	8004bde <HAL_PCD_EP_DB_Transmit+0x212>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	4413      	add	r3, r2
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	4b7f      	ldr	r3, [pc, #508]	@ (8004dbc <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	461a      	mov	r2, r3
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	441a      	add	r2, r3
 8004bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004bd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bdc:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	f040 82a9 	bne.w	800513c <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	695a      	ldr	r2, [r3, #20]
 8004bee:	8bfb      	ldrh	r3, [r7, #30]
 8004bf0:	441a      	add	r2, r3
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	69da      	ldr	r2, [r3, #28]
 8004bfa:	8bfb      	ldrh	r3, [r7, #30]
 8004bfc:	441a      	add	r2, r3
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	6a1a      	ldr	r2, [r3, #32]
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d309      	bcc.n	8004c22 <HAL_PCD_EP_DB_Transmit+0x256>
        {
          len = ep->maxpacket;
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	6a1a      	ldr	r2, [r3, #32]
 8004c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c1a:	1ad2      	subs	r2, r2, r3
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	621a      	str	r2, [r3, #32]
 8004c20:	e014      	b.n	8004c4c <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else if (ep->xfer_len_db == 0U)
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d106      	bne.n	8004c38 <HAL_PCD_EP_DB_Transmit+0x26c>
        {
          len = TxPctSize;
 8004c2a:	8bfb      	ldrh	r3, [r7, #30]
 8004c2c:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004c36:	e009      	b.n	8004c4c <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	785b      	ldrb	r3, [r3, #1]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d16a      	bne.n	8004d2a <HAL_PCD_EP_DB_Transmit+0x35e>
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	00db      	lsls	r3, r3, #3
 8004c5a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004c5e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	00db      	lsls	r3, r3, #3
 8004c6a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004c6e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004c72:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8004c76:	601a      	str	r2, [r3, #0]
 8004c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d112      	bne.n	8004ca4 <HAL_PCD_EP_DB_Transmit+0x2d8>
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	00db      	lsls	r3, r3, #3
 8004c84:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004c88:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	00db      	lsls	r3, r3, #3
 8004c94:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004c98:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004c9c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004ca0:	601a      	str	r2, [r3, #0]
 8004ca2:	e06a      	b.n	8004d7a <HAL_PCD_EP_DB_Transmit+0x3ae>
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca6:	2b3e      	cmp	r3, #62	@ 0x3e
 8004ca8:	d81e      	bhi.n	8004ce8 <HAL_PCD_EP_DB_Transmit+0x31c>
 8004caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cac:	085b      	lsrs	r3, r3, #1
 8004cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d002      	beq.n	8004cc0 <HAL_PCD_EP_DB_Transmit+0x2f4>
 8004cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	00db      	lsls	r3, r3, #3
 8004cc6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004cca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004cce:	6819      	ldr	r1, [r3, #0]
 8004cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cd2:	069a      	lsls	r2, r3, #26
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	00db      	lsls	r3, r3, #3
 8004cda:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004cde:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	601a      	str	r2, [r3, #0]
 8004ce6:	e048      	b.n	8004d7a <HAL_PCD_EP_DB_Transmit+0x3ae>
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cea:	095b      	lsrs	r3, r3, #5
 8004cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf0:	f003 031f 	and.w	r3, r3, #31
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d102      	bne.n	8004cfe <HAL_PCD_EP_DB_Transmit+0x332>
 8004cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	00db      	lsls	r3, r3, #3
 8004d04:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004d08:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d10:	069b      	lsls	r3, r3, #26
 8004d12:	431a      	orrs	r2, r3
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	00db      	lsls	r3, r3, #3
 8004d1a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004d1e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004d22:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004d26:	601a      	str	r2, [r3, #0]
 8004d28:	e027      	b.n	8004d7a <HAL_PCD_EP_DB_Transmit+0x3ae>
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	785b      	ldrb	r3, [r3, #1]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d123      	bne.n	8004d7a <HAL_PCD_EP_DB_Transmit+0x3ae>
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	00db      	lsls	r3, r3, #3
 8004d38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004d3c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	00db      	lsls	r3, r3, #3
 8004d48:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004d4c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004d50:	b292      	uxth	r2, r2
 8004d52:	601a      	str	r2, [r3, #0]
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	00db      	lsls	r3, r3, #3
 8004d5a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004d5e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004d62:	6819      	ldr	r1, [r3, #0]
 8004d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d66:	041a      	lsls	r2, r3, #16
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	00db      	lsls	r3, r3, #3
 8004d6e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004d72:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004d76:	430a      	orrs	r2, r1
 8004d78:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6818      	ldr	r0, [r3, #0]
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	6959      	ldr	r1, [r3, #20]
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	891a      	ldrh	r2, [r3, #8]
 8004d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	f009 fd2e 	bl	800e7ea <USB_WritePMA>
 8004d8e:	e1d5      	b.n	800513c <HAL_PCD_EP_DB_Transmit+0x770>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	4619      	mov	r1, r3
 8004d9a:	4610      	mov	r0, r2
 8004d9c:	f7fe fdba 	bl	8003914 <PCD_GET_EP_DBUF1_CNT>
 8004da0:	4603      	mov	r3, r0
 8004da2:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= TxPctSize)
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	699a      	ldr	r2, [r3, #24]
 8004da8:	8bfb      	ldrh	r3, [r7, #30]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d308      	bcc.n	8004dc0 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxPctSize;
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	699a      	ldr	r2, [r3, #24]
 8004db2:	8bfb      	ldrh	r3, [r7, #30]
 8004db4:	1ad2      	subs	r2, r2, r3
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	619a      	str	r2, [r3, #24]
 8004dba:	e004      	b.n	8004dc6 <HAL_PCD_EP_DB_Transmit+0x3fa>
 8004dbc:	07ff8f8f 	.word	0x07ff8f8f
    }
    else
    {
      ep->xfer_len = 0U;
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	f040 80c1 	bne.w	8004f52 <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	785b      	ldrb	r3, [r3, #1]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d124      	bne.n	8004e22 <HAL_PCD_EP_DB_Transmit+0x456>
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	00db      	lsls	r3, r3, #3
 8004dde:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004de2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004df2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004df6:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8004dfa:	601a      	str	r2, [r3, #0]
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	00db      	lsls	r3, r3, #3
 8004e02:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004e06:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	00db      	lsls	r3, r3, #3
 8004e12:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004e16:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004e1a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004e1e:	601a      	str	r2, [r3, #0]
 8004e20:	e024      	b.n	8004e6c <HAL_PCD_EP_DB_Transmit+0x4a0>
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	785b      	ldrb	r3, [r3, #1]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d120      	bne.n	8004e6c <HAL_PCD_EP_DB_Transmit+0x4a0>
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	00db      	lsls	r3, r3, #3
 8004e30:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004e34:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	00db      	lsls	r3, r3, #3
 8004e40:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004e44:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004e48:	b292      	uxth	r2, r2
 8004e4a:	601a      	str	r2, [r3, #0]
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	00db      	lsls	r3, r3, #3
 8004e52:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8004e56:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	00db      	lsls	r3, r3, #3
 8004e60:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004e64:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004e68:	6812      	ldr	r2, [r2, #0]
 8004e6a:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	785b      	ldrb	r3, [r3, #1]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d124      	bne.n	8004ebe <HAL_PCD_EP_DB_Transmit+0x4f2>
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	00db      	lsls	r3, r3, #3
 8004e7a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004e7e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004e82:	685a      	ldr	r2, [r3, #4]
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	00db      	lsls	r3, r3, #3
 8004e8a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004e8e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004e92:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8004e96:	605a      	str	r2, [r3, #4]
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	00db      	lsls	r3, r3, #3
 8004e9e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004ea2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004ea6:	685a      	ldr	r2, [r3, #4]
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	00db      	lsls	r3, r3, #3
 8004eae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004eb2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004eb6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004eba:	605a      	str	r2, [r3, #4]
 8004ebc:	e024      	b.n	8004f08 <HAL_PCD_EP_DB_Transmit+0x53c>
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	785b      	ldrb	r3, [r3, #1]
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d120      	bne.n	8004f08 <HAL_PCD_EP_DB_Transmit+0x53c>
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	00db      	lsls	r3, r3, #3
 8004ecc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004ed0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	00db      	lsls	r3, r3, #3
 8004edc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004ee0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004ee4:	b292      	uxth	r2, r2
 8004ee6:	605a      	str	r2, [r3, #4]
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	00db      	lsls	r3, r3, #3
 8004eee:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8004ef2:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	00db      	lsls	r3, r3, #3
 8004efc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004f00:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004f04:	6852      	ldr	r2, [r2, #4]
 8004f06:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	f00a fc9f 	bl	800f852 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004f14:	88fb      	ldrh	r3, [r7, #6]
 8004f16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f040 810e 	bne.w	800513c <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	461a      	mov	r2, r3
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4413      	add	r3, r2
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	4b95      	ldr	r3, [pc, #596]	@ (8005188 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 8004f32:	4013      	ands	r3, r2
 8004f34:	623b      	str	r3, [r7, #32]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	441a      	add	r2, r3
 8004f44:	6a3b      	ldr	r3, [r7, #32]
 8004f46:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f4e:	6013      	str	r3, [r2, #0]
 8004f50:	e0f4      	b.n	800513c <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004f52:	88fb      	ldrh	r3, [r7, #6]
 8004f54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d117      	bne.n	8004f8c <HAL_PCD_EP_DB_Transmit+0x5c0>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	461a      	mov	r2, r3
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	4413      	add	r3, r2
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	4b86      	ldr	r3, [pc, #536]	@ (8005188 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 8004f6e:	4013      	ands	r3, r2
 8004f70:	617b      	str	r3, [r7, #20]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	461a      	mov	r2, r3
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	441a      	add	r2, r3
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f8a:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	f040 80d2 	bne.w	800513c <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	695a      	ldr	r2, [r3, #20]
 8004f9c:	8bfb      	ldrh	r3, [r7, #30]
 8004f9e:	441a      	add	r2, r3
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	69da      	ldr	r2, [r3, #28]
 8004fa8:	8bfb      	ldrh	r3, [r7, #30]
 8004faa:	441a      	add	r2, r3
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	6a1a      	ldr	r2, [r3, #32]
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d309      	bcc.n	8004fd0 <HAL_PCD_EP_DB_Transmit+0x604>
        {
          len = ep->maxpacket;
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	6a1a      	ldr	r2, [r3, #32]
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc8:	1ad2      	subs	r2, r2, r3
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	621a      	str	r2, [r3, #32]
 8004fce:	e014      	b.n	8004ffa <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else if (ep->xfer_len_db == 0U)
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	6a1b      	ldr	r3, [r3, #32]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d106      	bne.n	8004fe6 <HAL_PCD_EP_DB_Transmit+0x61a>
        {
          len = TxPctSize;
 8004fd8:	8bfb      	ldrh	r3, [r7, #30]
 8004fda:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004fe4:	e009      	b.n	8004ffa <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else
        {
          len = ep->xfer_len_db;
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	785b      	ldrb	r3, [r3, #1]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d16a      	bne.n	80050d8 <HAL_PCD_EP_DB_Transmit+0x70c>
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800500c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005010:	685a      	ldr	r2, [r3, #4]
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	00db      	lsls	r3, r3, #3
 8005018:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800501c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005020:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8005024:	605a      	str	r2, [r3, #4]
 8005026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005028:	2b00      	cmp	r3, #0
 800502a:	d112      	bne.n	8005052 <HAL_PCD_EP_DB_Transmit+0x686>
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	00db      	lsls	r3, r3, #3
 8005032:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005036:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	00db      	lsls	r3, r3, #3
 8005042:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005046:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800504a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800504e:	605a      	str	r2, [r3, #4]
 8005050:	e06a      	b.n	8005128 <HAL_PCD_EP_DB_Transmit+0x75c>
 8005052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005054:	2b3e      	cmp	r3, #62	@ 0x3e
 8005056:	d81e      	bhi.n	8005096 <HAL_PCD_EP_DB_Transmit+0x6ca>
 8005058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505a:	085b      	lsrs	r3, r3, #1
 800505c:	61bb      	str	r3, [r7, #24]
 800505e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	2b00      	cmp	r3, #0
 8005066:	d002      	beq.n	800506e <HAL_PCD_EP_DB_Transmit+0x6a2>
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	3301      	adds	r3, #1
 800506c:	61bb      	str	r3, [r7, #24]
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005078:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800507c:	6859      	ldr	r1, [r3, #4]
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	069a      	lsls	r2, r3, #26
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800508c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005090:	430a      	orrs	r2, r1
 8005092:	605a      	str	r2, [r3, #4]
 8005094:	e048      	b.n	8005128 <HAL_PCD_EP_DB_Transmit+0x75c>
 8005096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005098:	095b      	lsrs	r3, r3, #5
 800509a:	61bb      	str	r3, [r7, #24]
 800509c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509e:	f003 031f 	and.w	r3, r3, #31
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d102      	bne.n	80050ac <HAL_PCD_EP_DB_Transmit+0x6e0>
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	3b01      	subs	r3, #1
 80050aa:	61bb      	str	r3, [r7, #24]
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	00db      	lsls	r3, r3, #3
 80050b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80050b6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	069b      	lsls	r3, r3, #26
 80050c0:	431a      	orrs	r2, r3
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	00db      	lsls	r3, r3, #3
 80050c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80050cc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80050d0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80050d4:	605a      	str	r2, [r3, #4]
 80050d6:	e027      	b.n	8005128 <HAL_PCD_EP_DB_Transmit+0x75c>
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	785b      	ldrb	r3, [r3, #1]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d123      	bne.n	8005128 <HAL_PCD_EP_DB_Transmit+0x75c>
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	00db      	lsls	r3, r3, #3
 80050e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80050ea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80050ee:	685a      	ldr	r2, [r3, #4]
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	00db      	lsls	r3, r3, #3
 80050f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80050fa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80050fe:	b292      	uxth	r2, r2
 8005100:	605a      	str	r2, [r3, #4]
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	00db      	lsls	r3, r3, #3
 8005108:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800510c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005110:	6859      	ldr	r1, [r3, #4]
 8005112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005114:	041a      	lsls	r2, r3, #16
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	00db      	lsls	r3, r3, #3
 800511c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005120:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005124:	430a      	orrs	r2, r1
 8005126:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6818      	ldr	r0, [r3, #0]
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	6959      	ldr	r1, [r3, #20]
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	895a      	ldrh	r2, [r3, #10]
 8005134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005136:	b29b      	uxth	r3, r3
 8005138:	f009 fb57 	bl	800e7ea <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	461a      	mov	r2, r3
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	4b0f      	ldr	r3, [pc, #60]	@ (800518c <HAL_PCD_EP_DB_Transmit+0x7c0>)
 800514e:	4013      	ands	r3, r2
 8005150:	633b      	str	r3, [r7, #48]	@ 0x30
 8005152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005154:	f083 0310 	eor.w	r3, r3, #16
 8005158:	633b      	str	r3, [r7, #48]	@ 0x30
 800515a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800515c:	f083 0320 	eor.w	r3, r3, #32
 8005160:	633b      	str	r3, [r7, #48]	@ 0x30
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	461a      	mov	r2, r3
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	441a      	add	r2, r3
 8005170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005172:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005176:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800517a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3738      	adds	r7, #56	@ 0x38
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	07ff8f8f 	.word	0x07ff8f8f
 800518c:	07ff8fbf 	.word	0x07ff8fbf

08005190 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005190:	b480      	push	{r7}
 8005192:	b087      	sub	sp, #28
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	607b      	str	r3, [r7, #4]
 800519a:	460b      	mov	r3, r1
 800519c:	817b      	strh	r3, [r7, #10]
 800519e:	4613      	mov	r3, r2
 80051a0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80051a2:	897b      	ldrh	r3, [r7, #10]
 80051a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00c      	beq.n	80051c8 <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051ae:	897b      	ldrh	r3, [r7, #10]
 80051b0:	f003 0207 	and.w	r2, r3, #7
 80051b4:	4613      	mov	r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	4413      	add	r3, r2
 80051ba:	00db      	lsls	r3, r3, #3
 80051bc:	3310      	adds	r3, #16
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	4413      	add	r3, r2
 80051c2:	3304      	adds	r3, #4
 80051c4:	617b      	str	r3, [r7, #20]
 80051c6:	e00a      	b.n	80051de <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80051c8:	897a      	ldrh	r2, [r7, #10]
 80051ca:	4613      	mov	r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4413      	add	r3, r2
 80051d0:	00db      	lsls	r3, r3, #3
 80051d2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	4413      	add	r3, r2
 80051da:	3304      	adds	r3, #4
 80051dc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80051de:	893b      	ldrh	r3, [r7, #8]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d107      	bne.n	80051f4 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	2200      	movs	r2, #0
 80051e8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	80da      	strh	r2, [r3, #6]
 80051f2:	e00b      	b.n	800520c <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	2201      	movs	r2, #1
 80051f8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	0c1b      	lsrs	r3, r3, #16
 8005206:	b29a      	uxth	r2, r3
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	371c      	adds	r7, #28
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr

0800521a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800521a:	b480      	push	{r7}
 800521c:	b085      	sub	sp, #20
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  hpcd->LPM_State = LPM_L0;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800523c:	f043 0201 	orr.w	r2, r3, #1
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005248:	f043 0202 	orr.w	r2, r3, #2
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3714      	adds	r7, #20
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr

0800525e <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800525e:	b480      	push	{r7}
 8005260:	b083      	sub	sp, #12
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
 8005266:	460b      	mov	r3, r1
 8005268:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800526a:	bf00      	nop
 800526c:	370c      	adds	r7, #12
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
	...

08005278 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005278:	b480      	push	{r7}
 800527a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33SV);
 800527c:	4b05      	ldr	r3, [pc, #20]	@ (8005294 <HAL_PWREx_EnableVddUSB+0x1c>)
 800527e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005280:	4a04      	ldr	r2, [pc, #16]	@ (8005294 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005282:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005286:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8005288:	bf00      	nop
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	44020800 	.word	0x44020800

08005298 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b088      	sub	sp, #32
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d102      	bne.n	80052ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	f000 bc28 	b.w	8005afc <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052ac:	4b94      	ldr	r3, [pc, #592]	@ (8005500 <HAL_RCC_OscConfig+0x268>)
 80052ae:	69db      	ldr	r3, [r3, #28]
 80052b0:	f003 0318 	and.w	r3, r3, #24
 80052b4:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80052b6:	4b92      	ldr	r3, [pc, #584]	@ (8005500 <HAL_RCC_OscConfig+0x268>)
 80052b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ba:	f003 0303 	and.w	r3, r3, #3
 80052be:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0310 	and.w	r3, r3, #16
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d05b      	beq.n	8005384 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	2b08      	cmp	r3, #8
 80052d0:	d005      	beq.n	80052de <HAL_RCC_OscConfig+0x46>
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	2b18      	cmp	r3, #24
 80052d6:	d114      	bne.n	8005302 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d111      	bne.n	8005302 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	69db      	ldr	r3, [r3, #28]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d102      	bne.n	80052ec <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	f000 bc08 	b.w	8005afc <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80052ec:	4b84      	ldr	r3, [pc, #528]	@ (8005500 <HAL_RCC_OscConfig+0x268>)
 80052ee:	699b      	ldr	r3, [r3, #24]
 80052f0:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a1b      	ldr	r3, [r3, #32]
 80052f8:	041b      	lsls	r3, r3, #16
 80052fa:	4981      	ldr	r1, [pc, #516]	@ (8005500 <HAL_RCC_OscConfig+0x268>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8005300:	e040      	b.n	8005384 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	69db      	ldr	r3, [r3, #28]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d023      	beq.n	8005352 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800530a:	4b7d      	ldr	r3, [pc, #500]	@ (8005500 <HAL_RCC_OscConfig+0x268>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a7c      	ldr	r2, [pc, #496]	@ (8005500 <HAL_RCC_OscConfig+0x268>)
 8005310:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005314:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005316:	f7fd fd85 	bl	8002e24 <HAL_GetTick>
 800531a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800531c:	e008      	b.n	8005330 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800531e:	f7fd fd81 	bl	8002e24 <HAL_GetTick>
 8005322:	4602      	mov	r2, r0
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	2b02      	cmp	r3, #2
 800532a:	d901      	bls.n	8005330 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	e3e5      	b.n	8005afc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005330:	4b73      	ldr	r3, [pc, #460]	@ (8005500 <HAL_RCC_OscConfig+0x268>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005338:	2b00      	cmp	r3, #0
 800533a:	d0f0      	beq.n	800531e <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800533c:	4b70      	ldr	r3, [pc, #448]	@ (8005500 <HAL_RCC_OscConfig+0x268>)
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a1b      	ldr	r3, [r3, #32]
 8005348:	041b      	lsls	r3, r3, #16
 800534a:	496d      	ldr	r1, [pc, #436]	@ (8005500 <HAL_RCC_OscConfig+0x268>)
 800534c:	4313      	orrs	r3, r2
 800534e:	618b      	str	r3, [r1, #24]
 8005350:	e018      	b.n	8005384 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005352:	4b6b      	ldr	r3, [pc, #428]	@ (8005500 <HAL_RCC_OscConfig+0x268>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a6a      	ldr	r2, [pc, #424]	@ (8005500 <HAL_RCC_OscConfig+0x268>)
 8005358:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800535c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800535e:	f7fd fd61 	bl	8002e24 <HAL_GetTick>
 8005362:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8005364:	e008      	b.n	8005378 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8005366:	f7fd fd5d 	bl	8002e24 <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	2b02      	cmp	r3, #2
 8005372:	d901      	bls.n	8005378 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e3c1      	b.n	8005afc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8005378:	4b61      	ldr	r3, [pc, #388]	@ (8005500 <HAL_RCC_OscConfig+0x268>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1f0      	bne.n	8005366 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	2b00      	cmp	r3, #0
 800538e:	f000 80a0 	beq.w	80054d2 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	2b10      	cmp	r3, #16
 8005396:	d005      	beq.n	80053a4 <HAL_RCC_OscConfig+0x10c>
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	2b18      	cmp	r3, #24
 800539c:	d109      	bne.n	80053b2 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	2b03      	cmp	r3, #3
 80053a2:	d106      	bne.n	80053b2 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f040 8092 	bne.w	80054d2 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e3a4      	b.n	8005afc <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053ba:	d106      	bne.n	80053ca <HAL_RCC_OscConfig+0x132>
 80053bc:	4b50      	ldr	r3, [pc, #320]	@ (8005500 <HAL_RCC_OscConfig+0x268>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a4f      	ldr	r2, [pc, #316]	@ (8005500 <HAL_RCC_OscConfig+0x268>)
 80053c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053c6:	6013      	str	r3, [r2, #0]
 80053c8:	e058      	b.n	800547c <HAL_RCC_OscConfig+0x1e4>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d112      	bne.n	80053f8 <HAL_RCC_OscConfig+0x160>
 80053d2:	4b4b      	ldr	r3, [pc, #300]	@ (8005500 <HAL_RCC_OscConfig+0x268>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a4a      	ldr	r2, [pc, #296]	@ (8005500 <HAL_RCC_OscConfig+0x268>)
 80053d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053dc:	6013      	str	r3, [r2, #0]
 80053de:	4b48      	ldr	r3, [pc, #288]	@ (8005500 <HAL_RCC_OscConfig+0x268>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a47      	ldr	r2, [pc, #284]	@ (8005500 <HAL_RCC_OscConfig+0x268>)
 80053e4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80053e8:	6013      	str	r3, [r2, #0]
 80053ea:	4b45      	ldr	r3, [pc, #276]	@ (8005500 <HAL_RCC_OscConfig+0x268>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a44      	ldr	r2, [pc, #272]	@ (8005500 <HAL_RCC_OscConfig+0x268>)
 80053f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053f4:	6013      	str	r3, [r2, #0]
 80053f6:	e041      	b.n	800547c <HAL_RCC_OscConfig+0x1e4>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005400:	d112      	bne.n	8005428 <HAL_RCC_OscConfig+0x190>
 8005402:	4b3f      	ldr	r3, [pc, #252]	@ (8005500 <HAL_RCC_OscConfig+0x268>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a3e      	ldr	r2, [pc, #248]	@ (8005500 <HAL_RCC_OscConfig+0x268>)
 8005408:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800540c:	6013      	str	r3, [r2, #0]
 800540e:	4b3c      	ldr	r3, [pc, #240]	@ (8005500 <HAL_RCC_OscConfig+0x268>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a3b      	ldr	r2, [pc, #236]	@ (8005500 <HAL_RCC_OscConfig+0x268>)
 8005414:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005418:	6013      	str	r3, [r2, #0]
 800541a:	4b39      	ldr	r3, [pc, #228]	@ (8005500 <HAL_RCC_OscConfig+0x268>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a38      	ldr	r2, [pc, #224]	@ (8005500 <HAL_RCC_OscConfig+0x268>)
 8005420:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005424:	6013      	str	r3, [r2, #0]
 8005426:	e029      	b.n	800547c <HAL_RCC_OscConfig+0x1e4>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8005430:	d112      	bne.n	8005458 <HAL_RCC_OscConfig+0x1c0>
 8005432:	4b33      	ldr	r3, [pc, #204]	@ (8005500 <HAL_RCC_OscConfig+0x268>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a32      	ldr	r2, [pc, #200]	@ (8005500 <HAL_RCC_OscConfig+0x268>)
 8005438:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800543c:	6013      	str	r3, [r2, #0]
 800543e:	4b30      	ldr	r3, [pc, #192]	@ (8005500 <HAL_RCC_OscConfig+0x268>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a2f      	ldr	r2, [pc, #188]	@ (8005500 <HAL_RCC_OscConfig+0x268>)
 8005444:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005448:	6013      	str	r3, [r2, #0]
 800544a:	4b2d      	ldr	r3, [pc, #180]	@ (8005500 <HAL_RCC_OscConfig+0x268>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a2c      	ldr	r2, [pc, #176]	@ (8005500 <HAL_RCC_OscConfig+0x268>)
 8005450:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005454:	6013      	str	r3, [r2, #0]
 8005456:	e011      	b.n	800547c <HAL_RCC_OscConfig+0x1e4>
 8005458:	4b29      	ldr	r3, [pc, #164]	@ (8005500 <HAL_RCC_OscConfig+0x268>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a28      	ldr	r2, [pc, #160]	@ (8005500 <HAL_RCC_OscConfig+0x268>)
 800545e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005462:	6013      	str	r3, [r2, #0]
 8005464:	4b26      	ldr	r3, [pc, #152]	@ (8005500 <HAL_RCC_OscConfig+0x268>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a25      	ldr	r2, [pc, #148]	@ (8005500 <HAL_RCC_OscConfig+0x268>)
 800546a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800546e:	6013      	str	r3, [r2, #0]
 8005470:	4b23      	ldr	r3, [pc, #140]	@ (8005500 <HAL_RCC_OscConfig+0x268>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a22      	ldr	r2, [pc, #136]	@ (8005500 <HAL_RCC_OscConfig+0x268>)
 8005476:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800547a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d013      	beq.n	80054ac <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005484:	f7fd fcce 	bl	8002e24 <HAL_GetTick>
 8005488:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800548a:	e008      	b.n	800549e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800548c:	f7fd fcca 	bl	8002e24 <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	2b64      	cmp	r3, #100	@ 0x64
 8005498:	d901      	bls.n	800549e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e32e      	b.n	8005afc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800549e:	4b18      	ldr	r3, [pc, #96]	@ (8005500 <HAL_RCC_OscConfig+0x268>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d0f0      	beq.n	800548c <HAL_RCC_OscConfig+0x1f4>
 80054aa:	e012      	b.n	80054d2 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ac:	f7fd fcba 	bl	8002e24 <HAL_GetTick>
 80054b0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054b2:	e008      	b.n	80054c6 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80054b4:	f7fd fcb6 	bl	8002e24 <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	2b64      	cmp	r3, #100	@ 0x64
 80054c0:	d901      	bls.n	80054c6 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e31a      	b.n	8005afc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054c6:	4b0e      	ldr	r3, [pc, #56]	@ (8005500 <HAL_RCC_OscConfig+0x268>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1f0      	bne.n	80054b4 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0302 	and.w	r3, r3, #2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f000 809a 	beq.w	8005614 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d005      	beq.n	80054f2 <HAL_RCC_OscConfig+0x25a>
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	2b18      	cmp	r3, #24
 80054ea:	d149      	bne.n	8005580 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d146      	bne.n	8005580 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d104      	bne.n	8005504 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e2fe      	b.n	8005afc <HAL_RCC_OscConfig+0x864>
 80054fe:	bf00      	nop
 8005500:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d11c      	bne.n	8005544 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800550a:	4b9a      	ldr	r3, [pc, #616]	@ (8005774 <HAL_RCC_OscConfig+0x4dc>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0218 	and.w	r2, r3, #24
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	429a      	cmp	r2, r3
 8005518:	d014      	beq.n	8005544 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800551a:	4b96      	ldr	r3, [pc, #600]	@ (8005774 <HAL_RCC_OscConfig+0x4dc>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f023 0218 	bic.w	r2, r3, #24
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	4993      	ldr	r1, [pc, #588]	@ (8005774 <HAL_RCC_OscConfig+0x4dc>)
 8005528:	4313      	orrs	r3, r2
 800552a:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 800552c:	f000 fdd0 	bl	80060d0 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005530:	4b91      	ldr	r3, [pc, #580]	@ (8005778 <HAL_RCC_OscConfig+0x4e0>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4618      	mov	r0, r3
 8005536:	f7fd fbeb 	bl	8002d10 <HAL_InitTick>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d001      	beq.n	8005544 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e2db      	b.n	8005afc <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005544:	f7fd fc6e 	bl	8002e24 <HAL_GetTick>
 8005548:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800554a:	e008      	b.n	800555e <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800554c:	f7fd fc6a 	bl	8002e24 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	2b02      	cmp	r3, #2
 8005558:	d901      	bls.n	800555e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e2ce      	b.n	8005afc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800555e:	4b85      	ldr	r3, [pc, #532]	@ (8005774 <HAL_RCC_OscConfig+0x4dc>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	2b00      	cmp	r3, #0
 8005568:	d0f0      	beq.n	800554c <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800556a:	4b82      	ldr	r3, [pc, #520]	@ (8005774 <HAL_RCC_OscConfig+0x4dc>)
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	041b      	lsls	r3, r3, #16
 8005578:	497e      	ldr	r1, [pc, #504]	@ (8005774 <HAL_RCC_OscConfig+0x4dc>)
 800557a:	4313      	orrs	r3, r2
 800557c:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800557e:	e049      	b.n	8005614 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d02c      	beq.n	80055e2 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8005588:	4b7a      	ldr	r3, [pc, #488]	@ (8005774 <HAL_RCC_OscConfig+0x4dc>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f023 0218 	bic.w	r2, r3, #24
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	4977      	ldr	r1, [pc, #476]	@ (8005774 <HAL_RCC_OscConfig+0x4dc>)
 8005596:	4313      	orrs	r3, r2
 8005598:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800559a:	4b76      	ldr	r3, [pc, #472]	@ (8005774 <HAL_RCC_OscConfig+0x4dc>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a75      	ldr	r2, [pc, #468]	@ (8005774 <HAL_RCC_OscConfig+0x4dc>)
 80055a0:	f043 0301 	orr.w	r3, r3, #1
 80055a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a6:	f7fd fc3d 	bl	8002e24 <HAL_GetTick>
 80055aa:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055ac:	e008      	b.n	80055c0 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80055ae:	f7fd fc39 	bl	8002e24 <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d901      	bls.n	80055c0 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e29d      	b.n	8005afc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055c0:	4b6c      	ldr	r3, [pc, #432]	@ (8005774 <HAL_RCC_OscConfig+0x4dc>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0302 	and.w	r3, r3, #2
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d0f0      	beq.n	80055ae <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80055cc:	4b69      	ldr	r3, [pc, #420]	@ (8005774 <HAL_RCC_OscConfig+0x4dc>)
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	695b      	ldr	r3, [r3, #20]
 80055d8:	041b      	lsls	r3, r3, #16
 80055da:	4966      	ldr	r1, [pc, #408]	@ (8005774 <HAL_RCC_OscConfig+0x4dc>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	610b      	str	r3, [r1, #16]
 80055e0:	e018      	b.n	8005614 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055e2:	4b64      	ldr	r3, [pc, #400]	@ (8005774 <HAL_RCC_OscConfig+0x4dc>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a63      	ldr	r2, [pc, #396]	@ (8005774 <HAL_RCC_OscConfig+0x4dc>)
 80055e8:	f023 0301 	bic.w	r3, r3, #1
 80055ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ee:	f7fd fc19 	bl	8002e24 <HAL_GetTick>
 80055f2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055f4:	e008      	b.n	8005608 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80055f6:	f7fd fc15 	bl	8002e24 <HAL_GetTick>
 80055fa:	4602      	mov	r2, r0
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	2b02      	cmp	r3, #2
 8005602:	d901      	bls.n	8005608 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e279      	b.n	8005afc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005608:	4b5a      	ldr	r3, [pc, #360]	@ (8005774 <HAL_RCC_OscConfig+0x4dc>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0302 	and.w	r3, r3, #2
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1f0      	bne.n	80055f6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0308 	and.w	r3, r3, #8
 800561c:	2b00      	cmp	r3, #0
 800561e:	d03c      	beq.n	800569a <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d01c      	beq.n	8005662 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005628:	4b52      	ldr	r3, [pc, #328]	@ (8005774 <HAL_RCC_OscConfig+0x4dc>)
 800562a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800562e:	4a51      	ldr	r2, [pc, #324]	@ (8005774 <HAL_RCC_OscConfig+0x4dc>)
 8005630:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005634:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005638:	f7fd fbf4 	bl	8002e24 <HAL_GetTick>
 800563c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800563e:	e008      	b.n	8005652 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8005640:	f7fd fbf0 	bl	8002e24 <HAL_GetTick>
 8005644:	4602      	mov	r2, r0
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	2b02      	cmp	r3, #2
 800564c:	d901      	bls.n	8005652 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e254      	b.n	8005afc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005652:	4b48      	ldr	r3, [pc, #288]	@ (8005774 <HAL_RCC_OscConfig+0x4dc>)
 8005654:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005658:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d0ef      	beq.n	8005640 <HAL_RCC_OscConfig+0x3a8>
 8005660:	e01b      	b.n	800569a <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005662:	4b44      	ldr	r3, [pc, #272]	@ (8005774 <HAL_RCC_OscConfig+0x4dc>)
 8005664:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005668:	4a42      	ldr	r2, [pc, #264]	@ (8005774 <HAL_RCC_OscConfig+0x4dc>)
 800566a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800566e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005672:	f7fd fbd7 	bl	8002e24 <HAL_GetTick>
 8005676:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005678:	e008      	b.n	800568c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800567a:	f7fd fbd3 	bl	8002e24 <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	2b02      	cmp	r3, #2
 8005686:	d901      	bls.n	800568c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	e237      	b.n	8005afc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800568c:	4b39      	ldr	r3, [pc, #228]	@ (8005774 <HAL_RCC_OscConfig+0x4dc>)
 800568e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005692:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1ef      	bne.n	800567a <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0304 	and.w	r3, r3, #4
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	f000 80d2 	beq.w	800584c <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80056a8:	4b34      	ldr	r3, [pc, #208]	@ (800577c <HAL_RCC_OscConfig+0x4e4>)
 80056aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ac:	f003 0301 	and.w	r3, r3, #1
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d118      	bne.n	80056e6 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80056b4:	4b31      	ldr	r3, [pc, #196]	@ (800577c <HAL_RCC_OscConfig+0x4e4>)
 80056b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b8:	4a30      	ldr	r2, [pc, #192]	@ (800577c <HAL_RCC_OscConfig+0x4e4>)
 80056ba:	f043 0301 	orr.w	r3, r3, #1
 80056be:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056c0:	f7fd fbb0 	bl	8002e24 <HAL_GetTick>
 80056c4:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80056c6:	e008      	b.n	80056da <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056c8:	f7fd fbac 	bl	8002e24 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d901      	bls.n	80056da <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e210      	b.n	8005afc <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80056da:	4b28      	ldr	r3, [pc, #160]	@ (800577c <HAL_RCC_OscConfig+0x4e4>)
 80056dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d0f0      	beq.n	80056c8 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d108      	bne.n	8005700 <HAL_RCC_OscConfig+0x468>
 80056ee:	4b21      	ldr	r3, [pc, #132]	@ (8005774 <HAL_RCC_OscConfig+0x4dc>)
 80056f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056f4:	4a1f      	ldr	r2, [pc, #124]	@ (8005774 <HAL_RCC_OscConfig+0x4dc>)
 80056f6:	f043 0301 	orr.w	r3, r3, #1
 80056fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80056fe:	e074      	b.n	80057ea <HAL_RCC_OscConfig+0x552>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d118      	bne.n	800573a <HAL_RCC_OscConfig+0x4a2>
 8005708:	4b1a      	ldr	r3, [pc, #104]	@ (8005774 <HAL_RCC_OscConfig+0x4dc>)
 800570a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800570e:	4a19      	ldr	r2, [pc, #100]	@ (8005774 <HAL_RCC_OscConfig+0x4dc>)
 8005710:	f023 0301 	bic.w	r3, r3, #1
 8005714:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005718:	4b16      	ldr	r3, [pc, #88]	@ (8005774 <HAL_RCC_OscConfig+0x4dc>)
 800571a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800571e:	4a15      	ldr	r2, [pc, #84]	@ (8005774 <HAL_RCC_OscConfig+0x4dc>)
 8005720:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005724:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005728:	4b12      	ldr	r3, [pc, #72]	@ (8005774 <HAL_RCC_OscConfig+0x4dc>)
 800572a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800572e:	4a11      	ldr	r2, [pc, #68]	@ (8005774 <HAL_RCC_OscConfig+0x4dc>)
 8005730:	f023 0304 	bic.w	r3, r3, #4
 8005734:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005738:	e057      	b.n	80057ea <HAL_RCC_OscConfig+0x552>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	2b05      	cmp	r3, #5
 8005740:	d11e      	bne.n	8005780 <HAL_RCC_OscConfig+0x4e8>
 8005742:	4b0c      	ldr	r3, [pc, #48]	@ (8005774 <HAL_RCC_OscConfig+0x4dc>)
 8005744:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005748:	4a0a      	ldr	r2, [pc, #40]	@ (8005774 <HAL_RCC_OscConfig+0x4dc>)
 800574a:	f043 0304 	orr.w	r3, r3, #4
 800574e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005752:	4b08      	ldr	r3, [pc, #32]	@ (8005774 <HAL_RCC_OscConfig+0x4dc>)
 8005754:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005758:	4a06      	ldr	r2, [pc, #24]	@ (8005774 <HAL_RCC_OscConfig+0x4dc>)
 800575a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800575e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005762:	4b04      	ldr	r3, [pc, #16]	@ (8005774 <HAL_RCC_OscConfig+0x4dc>)
 8005764:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005768:	4a02      	ldr	r2, [pc, #8]	@ (8005774 <HAL_RCC_OscConfig+0x4dc>)
 800576a:	f043 0301 	orr.w	r3, r3, #1
 800576e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005772:	e03a      	b.n	80057ea <HAL_RCC_OscConfig+0x552>
 8005774:	44020c00 	.word	0x44020c00
 8005778:	20000024 	.word	0x20000024
 800577c:	44020800 	.word	0x44020800
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	2b85      	cmp	r3, #133	@ 0x85
 8005786:	d118      	bne.n	80057ba <HAL_RCC_OscConfig+0x522>
 8005788:	4ba2      	ldr	r3, [pc, #648]	@ (8005a14 <HAL_RCC_OscConfig+0x77c>)
 800578a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800578e:	4aa1      	ldr	r2, [pc, #644]	@ (8005a14 <HAL_RCC_OscConfig+0x77c>)
 8005790:	f043 0304 	orr.w	r3, r3, #4
 8005794:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005798:	4b9e      	ldr	r3, [pc, #632]	@ (8005a14 <HAL_RCC_OscConfig+0x77c>)
 800579a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800579e:	4a9d      	ldr	r2, [pc, #628]	@ (8005a14 <HAL_RCC_OscConfig+0x77c>)
 80057a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057a4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80057a8:	4b9a      	ldr	r3, [pc, #616]	@ (8005a14 <HAL_RCC_OscConfig+0x77c>)
 80057aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057ae:	4a99      	ldr	r2, [pc, #612]	@ (8005a14 <HAL_RCC_OscConfig+0x77c>)
 80057b0:	f043 0301 	orr.w	r3, r3, #1
 80057b4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80057b8:	e017      	b.n	80057ea <HAL_RCC_OscConfig+0x552>
 80057ba:	4b96      	ldr	r3, [pc, #600]	@ (8005a14 <HAL_RCC_OscConfig+0x77c>)
 80057bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057c0:	4a94      	ldr	r2, [pc, #592]	@ (8005a14 <HAL_RCC_OscConfig+0x77c>)
 80057c2:	f023 0301 	bic.w	r3, r3, #1
 80057c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80057ca:	4b92      	ldr	r3, [pc, #584]	@ (8005a14 <HAL_RCC_OscConfig+0x77c>)
 80057cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057d0:	4a90      	ldr	r2, [pc, #576]	@ (8005a14 <HAL_RCC_OscConfig+0x77c>)
 80057d2:	f023 0304 	bic.w	r3, r3, #4
 80057d6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80057da:	4b8e      	ldr	r3, [pc, #568]	@ (8005a14 <HAL_RCC_OscConfig+0x77c>)
 80057dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057e0:	4a8c      	ldr	r2, [pc, #560]	@ (8005a14 <HAL_RCC_OscConfig+0x77c>)
 80057e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057e6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d016      	beq.n	8005820 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057f2:	f7fd fb17 	bl	8002e24 <HAL_GetTick>
 80057f6:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057f8:	e00a      	b.n	8005810 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057fa:	f7fd fb13 	bl	8002e24 <HAL_GetTick>
 80057fe:	4602      	mov	r2, r0
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005808:	4293      	cmp	r3, r2
 800580a:	d901      	bls.n	8005810 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e175      	b.n	8005afc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005810:	4b80      	ldr	r3, [pc, #512]	@ (8005a14 <HAL_RCC_OscConfig+0x77c>)
 8005812:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005816:	f003 0302 	and.w	r3, r3, #2
 800581a:	2b00      	cmp	r3, #0
 800581c:	d0ed      	beq.n	80057fa <HAL_RCC_OscConfig+0x562>
 800581e:	e015      	b.n	800584c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005820:	f7fd fb00 	bl	8002e24 <HAL_GetTick>
 8005824:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005826:	e00a      	b.n	800583e <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005828:	f7fd fafc 	bl	8002e24 <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005836:	4293      	cmp	r3, r2
 8005838:	d901      	bls.n	800583e <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e15e      	b.n	8005afc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800583e:	4b75      	ldr	r3, [pc, #468]	@ (8005a14 <HAL_RCC_OscConfig+0x77c>)
 8005840:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005844:	f003 0302 	and.w	r3, r3, #2
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1ed      	bne.n	8005828 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 0320 	and.w	r3, r3, #32
 8005854:	2b00      	cmp	r3, #0
 8005856:	d036      	beq.n	80058c6 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800585c:	2b00      	cmp	r3, #0
 800585e:	d019      	beq.n	8005894 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005860:	4b6c      	ldr	r3, [pc, #432]	@ (8005a14 <HAL_RCC_OscConfig+0x77c>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a6b      	ldr	r2, [pc, #428]	@ (8005a14 <HAL_RCC_OscConfig+0x77c>)
 8005866:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800586a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800586c:	f7fd fada 	bl	8002e24 <HAL_GetTick>
 8005870:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005872:	e008      	b.n	8005886 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8005874:	f7fd fad6 	bl	8002e24 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	2b02      	cmp	r3, #2
 8005880:	d901      	bls.n	8005886 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e13a      	b.n	8005afc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005886:	4b63      	ldr	r3, [pc, #396]	@ (8005a14 <HAL_RCC_OscConfig+0x77c>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d0f0      	beq.n	8005874 <HAL_RCC_OscConfig+0x5dc>
 8005892:	e018      	b.n	80058c6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005894:	4b5f      	ldr	r3, [pc, #380]	@ (8005a14 <HAL_RCC_OscConfig+0x77c>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a5e      	ldr	r2, [pc, #376]	@ (8005a14 <HAL_RCC_OscConfig+0x77c>)
 800589a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800589e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058a0:	f7fd fac0 	bl	8002e24 <HAL_GetTick>
 80058a4:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80058a6:	e008      	b.n	80058ba <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80058a8:	f7fd fabc 	bl	8002e24 <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d901      	bls.n	80058ba <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e120      	b.n	8005afc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80058ba:	4b56      	ldr	r3, [pc, #344]	@ (8005a14 <HAL_RCC_OscConfig+0x77c>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1f0      	bne.n	80058a8 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f000 8115 	beq.w	8005afa <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	2b18      	cmp	r3, #24
 80058d4:	f000 80af 	beq.w	8005a36 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058dc:	2b02      	cmp	r3, #2
 80058de:	f040 8086 	bne.w	80059ee <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80058e2:	4b4c      	ldr	r3, [pc, #304]	@ (8005a14 <HAL_RCC_OscConfig+0x77c>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a4b      	ldr	r2, [pc, #300]	@ (8005a14 <HAL_RCC_OscConfig+0x77c>)
 80058e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ee:	f7fd fa99 	bl	8002e24 <HAL_GetTick>
 80058f2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80058f4:	e008      	b.n	8005908 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80058f6:	f7fd fa95 	bl	8002e24 <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	2b02      	cmp	r3, #2
 8005902:	d901      	bls.n	8005908 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e0f9      	b.n	8005afc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005908:	4b42      	ldr	r3, [pc, #264]	@ (8005a14 <HAL_RCC_OscConfig+0x77c>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005910:	2b00      	cmp	r3, #0
 8005912:	d1f0      	bne.n	80058f6 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8005914:	4b3f      	ldr	r3, [pc, #252]	@ (8005a14 <HAL_RCC_OscConfig+0x77c>)
 8005916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005918:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800591c:	f023 0303 	bic.w	r3, r3, #3
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005928:	0212      	lsls	r2, r2, #8
 800592a:	430a      	orrs	r2, r1
 800592c:	4939      	ldr	r1, [pc, #228]	@ (8005a14 <HAL_RCC_OscConfig+0x77c>)
 800592e:	4313      	orrs	r3, r2
 8005930:	628b      	str	r3, [r1, #40]	@ 0x28
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005936:	3b01      	subs	r3, #1
 8005938:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005940:	3b01      	subs	r3, #1
 8005942:	025b      	lsls	r3, r3, #9
 8005944:	b29b      	uxth	r3, r3
 8005946:	431a      	orrs	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800594c:	3b01      	subs	r3, #1
 800594e:	041b      	lsls	r3, r3, #16
 8005950:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005954:	431a      	orrs	r2, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800595a:	3b01      	subs	r3, #1
 800595c:	061b      	lsls	r3, r3, #24
 800595e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005962:	492c      	ldr	r1, [pc, #176]	@ (8005a14 <HAL_RCC_OscConfig+0x77c>)
 8005964:	4313      	orrs	r3, r2
 8005966:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8005968:	4b2a      	ldr	r3, [pc, #168]	@ (8005a14 <HAL_RCC_OscConfig+0x77c>)
 800596a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800596c:	4a29      	ldr	r2, [pc, #164]	@ (8005a14 <HAL_RCC_OscConfig+0x77c>)
 800596e:	f023 0310 	bic.w	r3, r3, #16
 8005972:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005978:	4a26      	ldr	r2, [pc, #152]	@ (8005a14 <HAL_RCC_OscConfig+0x77c>)
 800597a:	00db      	lsls	r3, r3, #3
 800597c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800597e:	4b25      	ldr	r3, [pc, #148]	@ (8005a14 <HAL_RCC_OscConfig+0x77c>)
 8005980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005982:	4a24      	ldr	r2, [pc, #144]	@ (8005a14 <HAL_RCC_OscConfig+0x77c>)
 8005984:	f043 0310 	orr.w	r3, r3, #16
 8005988:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800598a:	4b22      	ldr	r3, [pc, #136]	@ (8005a14 <HAL_RCC_OscConfig+0x77c>)
 800598c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800598e:	f023 020c 	bic.w	r2, r3, #12
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005996:	491f      	ldr	r1, [pc, #124]	@ (8005a14 <HAL_RCC_OscConfig+0x77c>)
 8005998:	4313      	orrs	r3, r2
 800599a:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 800599c:	4b1d      	ldr	r3, [pc, #116]	@ (8005a14 <HAL_RCC_OscConfig+0x77c>)
 800599e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059a0:	f023 0220 	bic.w	r2, r3, #32
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059a8:	491a      	ldr	r1, [pc, #104]	@ (8005a14 <HAL_RCC_OscConfig+0x77c>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80059ae:	4b19      	ldr	r3, [pc, #100]	@ (8005a14 <HAL_RCC_OscConfig+0x77c>)
 80059b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b2:	4a18      	ldr	r2, [pc, #96]	@ (8005a14 <HAL_RCC_OscConfig+0x77c>)
 80059b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059b8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80059ba:	4b16      	ldr	r3, [pc, #88]	@ (8005a14 <HAL_RCC_OscConfig+0x77c>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a15      	ldr	r2, [pc, #84]	@ (8005a14 <HAL_RCC_OscConfig+0x77c>)
 80059c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80059c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c6:	f7fd fa2d 	bl	8002e24 <HAL_GetTick>
 80059ca:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80059cc:	e008      	b.n	80059e0 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80059ce:	f7fd fa29 	bl	8002e24 <HAL_GetTick>
 80059d2:	4602      	mov	r2, r0
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d901      	bls.n	80059e0 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80059dc:	2303      	movs	r3, #3
 80059de:	e08d      	b.n	8005afc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80059e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005a14 <HAL_RCC_OscConfig+0x77c>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d0f0      	beq.n	80059ce <HAL_RCC_OscConfig+0x736>
 80059ec:	e085      	b.n	8005afa <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80059ee:	4b09      	ldr	r3, [pc, #36]	@ (8005a14 <HAL_RCC_OscConfig+0x77c>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a08      	ldr	r2, [pc, #32]	@ (8005a14 <HAL_RCC_OscConfig+0x77c>)
 80059f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059fa:	f7fd fa13 	bl	8002e24 <HAL_GetTick>
 80059fe:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005a00:	e00a      	b.n	8005a18 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8005a02:	f7fd fa0f 	bl	8002e24 <HAL_GetTick>
 8005a06:	4602      	mov	r2, r0
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	d903      	bls.n	8005a18 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e073      	b.n	8005afc <HAL_RCC_OscConfig+0x864>
 8005a14:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005a18:	4b3a      	ldr	r3, [pc, #232]	@ (8005b04 <HAL_RCC_OscConfig+0x86c>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1ee      	bne.n	8005a02 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005a24:	4b37      	ldr	r3, [pc, #220]	@ (8005b04 <HAL_RCC_OscConfig+0x86c>)
 8005a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a28:	4a36      	ldr	r2, [pc, #216]	@ (8005b04 <HAL_RCC_OscConfig+0x86c>)
 8005a2a:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8005a2e:	f023 0303 	bic.w	r3, r3, #3
 8005a32:	6293      	str	r3, [r2, #40]	@ 0x28
 8005a34:	e061      	b.n	8005afa <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005a36:	4b33      	ldr	r3, [pc, #204]	@ (8005b04 <HAL_RCC_OscConfig+0x86c>)
 8005a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a3a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005a3c:	4b31      	ldr	r3, [pc, #196]	@ (8005b04 <HAL_RCC_OscConfig+0x86c>)
 8005a3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a40:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d031      	beq.n	8005aae <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	f003 0203 	and.w	r2, r3, #3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d12a      	bne.n	8005aae <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	0a1b      	lsrs	r3, r3, #8
 8005a5c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d122      	bne.n	8005aae <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a72:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d11a      	bne.n	8005aae <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	0a5b      	lsrs	r3, r3, #9
 8005a7c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a84:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d111      	bne.n	8005aae <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	0c1b      	lsrs	r3, r3, #16
 8005a8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a96:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d108      	bne.n	8005aae <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	0e1b      	lsrs	r3, r3, #24
 8005aa0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d001      	beq.n	8005ab2 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e024      	b.n	8005afc <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005ab2:	4b14      	ldr	r3, [pc, #80]	@ (8005b04 <HAL_RCC_OscConfig+0x86c>)
 8005ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ab6:	08db      	lsrs	r3, r3, #3
 8005ab8:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d01a      	beq.n	8005afa <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8005ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8005b04 <HAL_RCC_OscConfig+0x86c>)
 8005ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ac8:	4a0e      	ldr	r2, [pc, #56]	@ (8005b04 <HAL_RCC_OscConfig+0x86c>)
 8005aca:	f023 0310 	bic.w	r3, r3, #16
 8005ace:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ad0:	f7fd f9a8 	bl	8002e24 <HAL_GetTick>
 8005ad4:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8005ad6:	bf00      	nop
 8005ad8:	f7fd f9a4 	bl	8002e24 <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d0f9      	beq.n	8005ad8 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ae8:	4a06      	ldr	r2, [pc, #24]	@ (8005b04 <HAL_RCC_OscConfig+0x86c>)
 8005aea:	00db      	lsls	r3, r3, #3
 8005aec:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8005aee:	4b05      	ldr	r3, [pc, #20]	@ (8005b04 <HAL_RCC_OscConfig+0x86c>)
 8005af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005af2:	4a04      	ldr	r2, [pc, #16]	@ (8005b04 <HAL_RCC_OscConfig+0x86c>)
 8005af4:	f043 0310 	orr.w	r3, r3, #16
 8005af8:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3720      	adds	r7, #32
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	44020c00 	.word	0x44020c00

08005b08 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e19e      	b.n	8005e5a <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b1c:	4b83      	ldr	r3, [pc, #524]	@ (8005d2c <HAL_RCC_ClockConfig+0x224>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 030f 	and.w	r3, r3, #15
 8005b24:	683a      	ldr	r2, [r7, #0]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d910      	bls.n	8005b4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b2a:	4b80      	ldr	r3, [pc, #512]	@ (8005d2c <HAL_RCC_ClockConfig+0x224>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f023 020f 	bic.w	r2, r3, #15
 8005b32:	497e      	ldr	r1, [pc, #504]	@ (8005d2c <HAL_RCC_ClockConfig+0x224>)
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b3a:	4b7c      	ldr	r3, [pc, #496]	@ (8005d2c <HAL_RCC_ClockConfig+0x224>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 030f 	and.w	r3, r3, #15
 8005b42:	683a      	ldr	r2, [r7, #0]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d001      	beq.n	8005b4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e186      	b.n	8005e5a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0310 	and.w	r3, r3, #16
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d012      	beq.n	8005b7e <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	695a      	ldr	r2, [r3, #20]
 8005b5c:	4b74      	ldr	r3, [pc, #464]	@ (8005d30 <HAL_RCC_ClockConfig+0x228>)
 8005b5e:	6a1b      	ldr	r3, [r3, #32]
 8005b60:	0a1b      	lsrs	r3, r3, #8
 8005b62:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d909      	bls.n	8005b7e <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8005b6a:	4b71      	ldr	r3, [pc, #452]	@ (8005d30 <HAL_RCC_ClockConfig+0x228>)
 8005b6c:	6a1b      	ldr	r3, [r3, #32]
 8005b6e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	695b      	ldr	r3, [r3, #20]
 8005b76:	021b      	lsls	r3, r3, #8
 8005b78:	496d      	ldr	r1, [pc, #436]	@ (8005d30 <HAL_RCC_ClockConfig+0x228>)
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 0308 	and.w	r3, r3, #8
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d012      	beq.n	8005bb0 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	691a      	ldr	r2, [r3, #16]
 8005b8e:	4b68      	ldr	r3, [pc, #416]	@ (8005d30 <HAL_RCC_ClockConfig+0x228>)
 8005b90:	6a1b      	ldr	r3, [r3, #32]
 8005b92:	091b      	lsrs	r3, r3, #4
 8005b94:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d909      	bls.n	8005bb0 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8005b9c:	4b64      	ldr	r3, [pc, #400]	@ (8005d30 <HAL_RCC_ClockConfig+0x228>)
 8005b9e:	6a1b      	ldr	r3, [r3, #32]
 8005ba0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	011b      	lsls	r3, r3, #4
 8005baa:	4961      	ldr	r1, [pc, #388]	@ (8005d30 <HAL_RCC_ClockConfig+0x228>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0304 	and.w	r3, r3, #4
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d010      	beq.n	8005bde <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	68da      	ldr	r2, [r3, #12]
 8005bc0:	4b5b      	ldr	r3, [pc, #364]	@ (8005d30 <HAL_RCC_ClockConfig+0x228>)
 8005bc2:	6a1b      	ldr	r3, [r3, #32]
 8005bc4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d908      	bls.n	8005bde <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8005bcc:	4b58      	ldr	r3, [pc, #352]	@ (8005d30 <HAL_RCC_ClockConfig+0x228>)
 8005bce:	6a1b      	ldr	r3, [r3, #32]
 8005bd0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	4955      	ldr	r1, [pc, #340]	@ (8005d30 <HAL_RCC_ClockConfig+0x228>)
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0302 	and.w	r3, r3, #2
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d010      	beq.n	8005c0c <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	689a      	ldr	r2, [r3, #8]
 8005bee:	4b50      	ldr	r3, [pc, #320]	@ (8005d30 <HAL_RCC_ClockConfig+0x228>)
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	f003 030f 	and.w	r3, r3, #15
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d908      	bls.n	8005c0c <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8005bfa:	4b4d      	ldr	r3, [pc, #308]	@ (8005d30 <HAL_RCC_ClockConfig+0x228>)
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	f023 020f 	bic.w	r2, r3, #15
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	494a      	ldr	r1, [pc, #296]	@ (8005d30 <HAL_RCC_ClockConfig+0x228>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f000 8093 	beq.w	8005d40 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	2b03      	cmp	r3, #3
 8005c20:	d107      	bne.n	8005c32 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005c22:	4b43      	ldr	r3, [pc, #268]	@ (8005d30 <HAL_RCC_ClockConfig+0x228>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d121      	bne.n	8005c72 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e113      	b.n	8005e5a <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d107      	bne.n	8005c4a <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c3a:	4b3d      	ldr	r3, [pc, #244]	@ (8005d30 <HAL_RCC_ClockConfig+0x228>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d115      	bne.n	8005c72 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e107      	b.n	8005e5a <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d107      	bne.n	8005c62 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005c52:	4b37      	ldr	r3, [pc, #220]	@ (8005d30 <HAL_RCC_ClockConfig+0x228>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d109      	bne.n	8005c72 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e0fb      	b.n	8005e5a <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c62:	4b33      	ldr	r3, [pc, #204]	@ (8005d30 <HAL_RCC_ClockConfig+0x228>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0302 	and.w	r3, r3, #2
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d101      	bne.n	8005c72 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e0f3      	b.n	8005e5a <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8005c72:	4b2f      	ldr	r3, [pc, #188]	@ (8005d30 <HAL_RCC_ClockConfig+0x228>)
 8005c74:	69db      	ldr	r3, [r3, #28]
 8005c76:	f023 0203 	bic.w	r2, r3, #3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	492c      	ldr	r1, [pc, #176]	@ (8005d30 <HAL_RCC_ClockConfig+0x228>)
 8005c80:	4313      	orrs	r3, r2
 8005c82:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c84:	f7fd f8ce 	bl	8002e24 <HAL_GetTick>
 8005c88:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	2b03      	cmp	r3, #3
 8005c90:	d112      	bne.n	8005cb8 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c92:	e00a      	b.n	8005caa <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005c94:	f7fd f8c6 	bl	8002e24 <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d901      	bls.n	8005caa <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e0d7      	b.n	8005e5a <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005caa:	4b21      	ldr	r3, [pc, #132]	@ (8005d30 <HAL_RCC_ClockConfig+0x228>)
 8005cac:	69db      	ldr	r3, [r3, #28]
 8005cae:	f003 0318 	and.w	r3, r3, #24
 8005cb2:	2b18      	cmp	r3, #24
 8005cb4:	d1ee      	bne.n	8005c94 <HAL_RCC_ClockConfig+0x18c>
 8005cb6:	e043      	b.n	8005d40 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d112      	bne.n	8005ce6 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005cc0:	e00a      	b.n	8005cd8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005cc2:	f7fd f8af 	bl	8002e24 <HAL_GetTick>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d901      	bls.n	8005cd8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	e0c0      	b.n	8005e5a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005cd8:	4b15      	ldr	r3, [pc, #84]	@ (8005d30 <HAL_RCC_ClockConfig+0x228>)
 8005cda:	69db      	ldr	r3, [r3, #28]
 8005cdc:	f003 0318 	and.w	r3, r3, #24
 8005ce0:	2b10      	cmp	r3, #16
 8005ce2:	d1ee      	bne.n	8005cc2 <HAL_RCC_ClockConfig+0x1ba>
 8005ce4:	e02c      	b.n	8005d40 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d122      	bne.n	8005d34 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8005cee:	e00a      	b.n	8005d06 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005cf0:	f7fd f898 	bl	8002e24 <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d901      	bls.n	8005d06 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e0a9      	b.n	8005e5a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8005d06:	4b0a      	ldr	r3, [pc, #40]	@ (8005d30 <HAL_RCC_ClockConfig+0x228>)
 8005d08:	69db      	ldr	r3, [r3, #28]
 8005d0a:	f003 0318 	and.w	r3, r3, #24
 8005d0e:	2b08      	cmp	r3, #8
 8005d10:	d1ee      	bne.n	8005cf0 <HAL_RCC_ClockConfig+0x1e8>
 8005d12:	e015      	b.n	8005d40 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005d14:	f7fd f886 	bl	8002e24 <HAL_GetTick>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d906      	bls.n	8005d34 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e097      	b.n	8005e5a <HAL_RCC_ClockConfig+0x352>
 8005d2a:	bf00      	nop
 8005d2c:	40022000 	.word	0x40022000
 8005d30:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d34:	4b4b      	ldr	r3, [pc, #300]	@ (8005e64 <HAL_RCC_ClockConfig+0x35c>)
 8005d36:	69db      	ldr	r3, [r3, #28]
 8005d38:	f003 0318 	and.w	r3, r3, #24
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d1e9      	bne.n	8005d14 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0302 	and.w	r3, r3, #2
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d010      	beq.n	8005d6e <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	689a      	ldr	r2, [r3, #8]
 8005d50:	4b44      	ldr	r3, [pc, #272]	@ (8005e64 <HAL_RCC_ClockConfig+0x35c>)
 8005d52:	6a1b      	ldr	r3, [r3, #32]
 8005d54:	f003 030f 	and.w	r3, r3, #15
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d208      	bcs.n	8005d6e <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8005d5c:	4b41      	ldr	r3, [pc, #260]	@ (8005e64 <HAL_RCC_ClockConfig+0x35c>)
 8005d5e:	6a1b      	ldr	r3, [r3, #32]
 8005d60:	f023 020f 	bic.w	r2, r3, #15
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	493e      	ldr	r1, [pc, #248]	@ (8005e64 <HAL_RCC_ClockConfig+0x35c>)
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d6e:	4b3e      	ldr	r3, [pc, #248]	@ (8005e68 <HAL_RCC_ClockConfig+0x360>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 030f 	and.w	r3, r3, #15
 8005d76:	683a      	ldr	r2, [r7, #0]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d210      	bcs.n	8005d9e <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d7c:	4b3a      	ldr	r3, [pc, #232]	@ (8005e68 <HAL_RCC_ClockConfig+0x360>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f023 020f 	bic.w	r2, r3, #15
 8005d84:	4938      	ldr	r1, [pc, #224]	@ (8005e68 <HAL_RCC_ClockConfig+0x360>)
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d8c:	4b36      	ldr	r3, [pc, #216]	@ (8005e68 <HAL_RCC_ClockConfig+0x360>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 030f 	and.w	r3, r3, #15
 8005d94:	683a      	ldr	r2, [r7, #0]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d001      	beq.n	8005d9e <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e05d      	b.n	8005e5a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0304 	and.w	r3, r3, #4
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d010      	beq.n	8005dcc <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	68da      	ldr	r2, [r3, #12]
 8005dae:	4b2d      	ldr	r3, [pc, #180]	@ (8005e64 <HAL_RCC_ClockConfig+0x35c>)
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d208      	bcs.n	8005dcc <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8005dba:	4b2a      	ldr	r3, [pc, #168]	@ (8005e64 <HAL_RCC_ClockConfig+0x35c>)
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	4927      	ldr	r1, [pc, #156]	@ (8005e64 <HAL_RCC_ClockConfig+0x35c>)
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0308 	and.w	r3, r3, #8
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d012      	beq.n	8005dfe <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	691a      	ldr	r2, [r3, #16]
 8005ddc:	4b21      	ldr	r3, [pc, #132]	@ (8005e64 <HAL_RCC_ClockConfig+0x35c>)
 8005dde:	6a1b      	ldr	r3, [r3, #32]
 8005de0:	091b      	lsrs	r3, r3, #4
 8005de2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d209      	bcs.n	8005dfe <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8005dea:	4b1e      	ldr	r3, [pc, #120]	@ (8005e64 <HAL_RCC_ClockConfig+0x35c>)
 8005dec:	6a1b      	ldr	r3, [r3, #32]
 8005dee:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	011b      	lsls	r3, r3, #4
 8005df8:	491a      	ldr	r1, [pc, #104]	@ (8005e64 <HAL_RCC_ClockConfig+0x35c>)
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0310 	and.w	r3, r3, #16
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d012      	beq.n	8005e30 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	695a      	ldr	r2, [r3, #20]
 8005e0e:	4b15      	ldr	r3, [pc, #84]	@ (8005e64 <HAL_RCC_ClockConfig+0x35c>)
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	0a1b      	lsrs	r3, r3, #8
 8005e14:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d209      	bcs.n	8005e30 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8005e1c:	4b11      	ldr	r3, [pc, #68]	@ (8005e64 <HAL_RCC_ClockConfig+0x35c>)
 8005e1e:	6a1b      	ldr	r3, [r3, #32]
 8005e20:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	695b      	ldr	r3, [r3, #20]
 8005e28:	021b      	lsls	r3, r3, #8
 8005e2a:	490e      	ldr	r1, [pc, #56]	@ (8005e64 <HAL_RCC_ClockConfig+0x35c>)
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005e30:	f000 f822 	bl	8005e78 <HAL_RCC_GetSysClockFreq>
 8005e34:	4602      	mov	r2, r0
 8005e36:	4b0b      	ldr	r3, [pc, #44]	@ (8005e64 <HAL_RCC_ClockConfig+0x35c>)
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	f003 030f 	and.w	r3, r3, #15
 8005e3e:	490b      	ldr	r1, [pc, #44]	@ (8005e6c <HAL_RCC_ClockConfig+0x364>)
 8005e40:	5ccb      	ldrb	r3, [r1, r3]
 8005e42:	fa22 f303 	lsr.w	r3, r2, r3
 8005e46:	4a0a      	ldr	r2, [pc, #40]	@ (8005e70 <HAL_RCC_ClockConfig+0x368>)
 8005e48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8005e74 <HAL_RCC_ClockConfig+0x36c>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7fc ff5e 	bl	8002d10 <HAL_InitTick>
 8005e54:	4603      	mov	r3, r0
 8005e56:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8005e58:	7afb      	ldrb	r3, [r7, #11]
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	44020c00 	.word	0x44020c00
 8005e68:	40022000 	.word	0x40022000
 8005e6c:	080130d0 	.word	0x080130d0
 8005e70:	20000004 	.word	0x20000004
 8005e74:	20000024 	.word	0x20000024

08005e78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b089      	sub	sp, #36	@ 0x24
 8005e7c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8005e7e:	4b8c      	ldr	r3, [pc, #560]	@ (80060b0 <HAL_RCC_GetSysClockFreq+0x238>)
 8005e80:	69db      	ldr	r3, [r3, #28]
 8005e82:	f003 0318 	and.w	r3, r3, #24
 8005e86:	2b08      	cmp	r3, #8
 8005e88:	d102      	bne.n	8005e90 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005e8a:	4b8a      	ldr	r3, [pc, #552]	@ (80060b4 <HAL_RCC_GetSysClockFreq+0x23c>)
 8005e8c:	61fb      	str	r3, [r7, #28]
 8005e8e:	e107      	b.n	80060a0 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005e90:	4b87      	ldr	r3, [pc, #540]	@ (80060b0 <HAL_RCC_GetSysClockFreq+0x238>)
 8005e92:	69db      	ldr	r3, [r3, #28]
 8005e94:	f003 0318 	and.w	r3, r3, #24
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d112      	bne.n	8005ec2 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8005e9c:	4b84      	ldr	r3, [pc, #528]	@ (80060b0 <HAL_RCC_GetSysClockFreq+0x238>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 0320 	and.w	r3, r3, #32
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d009      	beq.n	8005ebc <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005ea8:	4b81      	ldr	r3, [pc, #516]	@ (80060b0 <HAL_RCC_GetSysClockFreq+0x238>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	08db      	lsrs	r3, r3, #3
 8005eae:	f003 0303 	and.w	r3, r3, #3
 8005eb2:	4a81      	ldr	r2, [pc, #516]	@ (80060b8 <HAL_RCC_GetSysClockFreq+0x240>)
 8005eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8005eb8:	61fb      	str	r3, [r7, #28]
 8005eba:	e0f1      	b.n	80060a0 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8005ebc:	4b7e      	ldr	r3, [pc, #504]	@ (80060b8 <HAL_RCC_GetSysClockFreq+0x240>)
 8005ebe:	61fb      	str	r3, [r7, #28]
 8005ec0:	e0ee      	b.n	80060a0 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ec2:	4b7b      	ldr	r3, [pc, #492]	@ (80060b0 <HAL_RCC_GetSysClockFreq+0x238>)
 8005ec4:	69db      	ldr	r3, [r3, #28]
 8005ec6:	f003 0318 	and.w	r3, r3, #24
 8005eca:	2b10      	cmp	r3, #16
 8005ecc:	d102      	bne.n	8005ed4 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005ece:	4b7b      	ldr	r3, [pc, #492]	@ (80060bc <HAL_RCC_GetSysClockFreq+0x244>)
 8005ed0:	61fb      	str	r3, [r7, #28]
 8005ed2:	e0e5      	b.n	80060a0 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ed4:	4b76      	ldr	r3, [pc, #472]	@ (80060b0 <HAL_RCC_GetSysClockFreq+0x238>)
 8005ed6:	69db      	ldr	r3, [r3, #28]
 8005ed8:	f003 0318 	and.w	r3, r3, #24
 8005edc:	2b18      	cmp	r3, #24
 8005ede:	f040 80dd 	bne.w	800609c <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005ee2:	4b73      	ldr	r3, [pc, #460]	@ (80060b0 <HAL_RCC_GetSysClockFreq+0x238>)
 8005ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ee6:	f003 0303 	and.w	r3, r3, #3
 8005eea:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8005eec:	4b70      	ldr	r3, [pc, #448]	@ (80060b0 <HAL_RCC_GetSysClockFreq+0x238>)
 8005eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ef0:	0a1b      	lsrs	r3, r3, #8
 8005ef2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ef6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005ef8:	4b6d      	ldr	r3, [pc, #436]	@ (80060b0 <HAL_RCC_GetSysClockFreq+0x238>)
 8005efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005efc:	091b      	lsrs	r3, r3, #4
 8005efe:	f003 0301 	and.w	r3, r3, #1
 8005f02:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8005f04:	4b6a      	ldr	r3, [pc, #424]	@ (80060b0 <HAL_RCC_GetSysClockFreq+0x238>)
 8005f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8005f08:	08db      	lsrs	r3, r3, #3
 8005f0a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	fb02 f303 	mul.w	r3, r2, r3
 8005f14:	ee07 3a90 	vmov	s15, r3
 8005f18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f1c:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f000 80b7 	beq.w	8006096 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d003      	beq.n	8005f36 <HAL_RCC_GetSysClockFreq+0xbe>
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	2b03      	cmp	r3, #3
 8005f32:	d056      	beq.n	8005fe2 <HAL_RCC_GetSysClockFreq+0x16a>
 8005f34:	e077      	b.n	8006026 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8005f36:	4b5e      	ldr	r3, [pc, #376]	@ (80060b0 <HAL_RCC_GetSysClockFreq+0x238>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0320 	and.w	r3, r3, #32
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d02d      	beq.n	8005f9e <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005f42:	4b5b      	ldr	r3, [pc, #364]	@ (80060b0 <HAL_RCC_GetSysClockFreq+0x238>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	08db      	lsrs	r3, r3, #3
 8005f48:	f003 0303 	and.w	r3, r3, #3
 8005f4c:	4a5a      	ldr	r2, [pc, #360]	@ (80060b8 <HAL_RCC_GetSysClockFreq+0x240>)
 8005f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8005f52:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	ee07 3a90 	vmov	s15, r3
 8005f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	ee07 3a90 	vmov	s15, r3
 8005f64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f6c:	4b50      	ldr	r3, [pc, #320]	@ (80060b0 <HAL_RCC_GetSysClockFreq+0x238>)
 8005f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f74:	ee07 3a90 	vmov	s15, r3
 8005f78:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f7c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f80:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 80060c0 <HAL_RCC_GetSysClockFreq+0x248>
 8005f84:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f88:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f8c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f90:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f98:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8005f9c:	e065      	b.n	800606a <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	ee07 3a90 	vmov	s15, r3
 8005fa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fa8:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80060c4 <HAL_RCC_GetSysClockFreq+0x24c>
 8005fac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fb0:	4b3f      	ldr	r3, [pc, #252]	@ (80060b0 <HAL_RCC_GetSysClockFreq+0x238>)
 8005fb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fb8:	ee07 3a90 	vmov	s15, r3
 8005fbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fc0:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fc4:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80060c0 <HAL_RCC_GetSysClockFreq+0x248>
 8005fc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005fcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fd0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fdc:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8005fe0:	e043      	b.n	800606a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	ee07 3a90 	vmov	s15, r3
 8005fe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fec:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80060c8 <HAL_RCC_GetSysClockFreq+0x250>
 8005ff0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ff4:	4b2e      	ldr	r3, [pc, #184]	@ (80060b0 <HAL_RCC_GetSysClockFreq+0x238>)
 8005ff6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ff8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ffc:	ee07 3a90 	vmov	s15, r3
 8006000:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006004:	ed97 6a02 	vldr	s12, [r7, #8]
 8006008:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80060c0 <HAL_RCC_GetSysClockFreq+0x248>
 800600c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006010:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006014:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006018:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800601c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006020:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8006024:	e021      	b.n	800606a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	ee07 3a90 	vmov	s15, r3
 800602c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006030:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80060cc <HAL_RCC_GetSysClockFreq+0x254>
 8006034:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006038:	4b1d      	ldr	r3, [pc, #116]	@ (80060b0 <HAL_RCC_GetSysClockFreq+0x238>)
 800603a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800603c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006040:	ee07 3a90 	vmov	s15, r3
 8006044:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006048:	ed97 6a02 	vldr	s12, [r7, #8]
 800604c:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80060c0 <HAL_RCC_GetSysClockFreq+0x248>
 8006050:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006054:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006058:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800605c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006060:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006064:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8006068:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800606a:	4b11      	ldr	r3, [pc, #68]	@ (80060b0 <HAL_RCC_GetSysClockFreq+0x238>)
 800606c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800606e:	0a5b      	lsrs	r3, r3, #9
 8006070:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006074:	3301      	adds	r3, #1
 8006076:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	ee07 3a90 	vmov	s15, r3
 800607e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006082:	edd7 6a06 	vldr	s13, [r7, #24]
 8006086:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800608a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800608e:	ee17 3a90 	vmov	r3, s15
 8006092:	61fb      	str	r3, [r7, #28]
 8006094:	e004      	b.n	80060a0 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8006096:	2300      	movs	r3, #0
 8006098:	61fb      	str	r3, [r7, #28]
 800609a:	e001      	b.n	80060a0 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 800609c:	4b06      	ldr	r3, [pc, #24]	@ (80060b8 <HAL_RCC_GetSysClockFreq+0x240>)
 800609e:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80060a0:	69fb      	ldr	r3, [r7, #28]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3724      	adds	r7, #36	@ 0x24
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	44020c00 	.word	0x44020c00
 80060b4:	003d0900 	.word	0x003d0900
 80060b8:	03d09000 	.word	0x03d09000
 80060bc:	007a1200 	.word	0x007a1200
 80060c0:	46000000 	.word	0x46000000
 80060c4:	4c742400 	.word	0x4c742400
 80060c8:	4af42400 	.word	0x4af42400
 80060cc:	4a742400 	.word	0x4a742400

080060d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80060d4:	f7ff fed0 	bl	8005e78 <HAL_RCC_GetSysClockFreq>
 80060d8:	4602      	mov	r2, r0
 80060da:	4b08      	ldr	r3, [pc, #32]	@ (80060fc <HAL_RCC_GetHCLKFreq+0x2c>)
 80060dc:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80060de:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80060e2:	4907      	ldr	r1, [pc, #28]	@ (8006100 <HAL_RCC_GetHCLKFreq+0x30>)
 80060e4:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80060e6:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80060ea:	fa22 f303 	lsr.w	r3, r2, r3
 80060ee:	4a05      	ldr	r2, [pc, #20]	@ (8006104 <HAL_RCC_GetHCLKFreq+0x34>)
 80060f0:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80060f2:	4b04      	ldr	r3, [pc, #16]	@ (8006104 <HAL_RCC_GetHCLKFreq+0x34>)
 80060f4:	681b      	ldr	r3, [r3, #0]
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	44020c00 	.word	0x44020c00
 8006100:	080130d0 	.word	0x080130d0
 8006104:	20000004 	.word	0x20000004

08006108 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 800610c:	f7ff ffe0 	bl	80060d0 <HAL_RCC_GetHCLKFreq>
 8006110:	4602      	mov	r2, r0
 8006112:	4b06      	ldr	r3, [pc, #24]	@ (800612c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	091b      	lsrs	r3, r3, #4
 8006118:	f003 0307 	and.w	r3, r3, #7
 800611c:	4904      	ldr	r1, [pc, #16]	@ (8006130 <HAL_RCC_GetPCLK1Freq+0x28>)
 800611e:	5ccb      	ldrb	r3, [r1, r3]
 8006120:	f003 031f 	and.w	r3, r3, #31
 8006124:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006128:	4618      	mov	r0, r3
 800612a:	bd80      	pop	{r7, pc}
 800612c:	44020c00 	.word	0x44020c00
 8006130:	080130e0 	.word	0x080130e0

08006134 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8006138:	f7ff ffca 	bl	80060d0 <HAL_RCC_GetHCLKFreq>
 800613c:	4602      	mov	r2, r0
 800613e:	4b06      	ldr	r3, [pc, #24]	@ (8006158 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006140:	6a1b      	ldr	r3, [r3, #32]
 8006142:	0a1b      	lsrs	r3, r3, #8
 8006144:	f003 0307 	and.w	r3, r3, #7
 8006148:	4904      	ldr	r1, [pc, #16]	@ (800615c <HAL_RCC_GetPCLK2Freq+0x28>)
 800614a:	5ccb      	ldrb	r3, [r1, r3]
 800614c:	f003 031f 	and.w	r3, r3, #31
 8006150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006154:	4618      	mov	r0, r3
 8006156:	bd80      	pop	{r7, pc}
 8006158:	44020c00 	.word	0x44020c00
 800615c:	080130e0 	.word	0x080130e0

08006160 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8006164:	f7ff ffb4 	bl	80060d0 <HAL_RCC_GetHCLKFreq>
 8006168:	4602      	mov	r2, r0
 800616a:	4b06      	ldr	r3, [pc, #24]	@ (8006184 <HAL_RCC_GetPCLK3Freq+0x24>)
 800616c:	6a1b      	ldr	r3, [r3, #32]
 800616e:	0b1b      	lsrs	r3, r3, #12
 8006170:	f003 0307 	and.w	r3, r3, #7
 8006174:	4904      	ldr	r1, [pc, #16]	@ (8006188 <HAL_RCC_GetPCLK3Freq+0x28>)
 8006176:	5ccb      	ldrb	r3, [r1, r3]
 8006178:	f003 031f 	and.w	r3, r3, #31
 800617c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006180:	4618      	mov	r0, r3
 8006182:	bd80      	pop	{r7, pc}
 8006184:	44020c00 	.word	0x44020c00
 8006188:	080130e0 	.word	0x080130e0

0800618c <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800618c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006190:	b0d8      	sub	sp, #352	@ 0x160
 8006192:	af00      	add	r7, sp, #0
 8006194:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006198:	2300      	movs	r3, #0
 800619a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800619e:	2300      	movs	r3, #0
 80061a0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80061a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ac:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 80061b0:	2500      	movs	r5, #0
 80061b2:	ea54 0305 	orrs.w	r3, r4, r5
 80061b6:	d00b      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80061b8:	4bcd      	ldr	r3, [pc, #820]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80061ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80061be:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80061c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061c8:	4ac9      	ldr	r2, [pc, #804]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80061ca:	430b      	orrs	r3, r1
 80061cc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80061d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d8:	f002 0801 	and.w	r8, r2, #1
 80061dc:	f04f 0900 	mov.w	r9, #0
 80061e0:	ea58 0309 	orrs.w	r3, r8, r9
 80061e4:	d042      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80061e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061ec:	2b05      	cmp	r3, #5
 80061ee:	d823      	bhi.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80061f0:	a201      	add	r2, pc, #4	@ (adr r2, 80061f8 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80061f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f6:	bf00      	nop
 80061f8:	08006241 	.word	0x08006241
 80061fc:	08006211 	.word	0x08006211
 8006200:	08006225 	.word	0x08006225
 8006204:	08006241 	.word	0x08006241
 8006208:	08006241 	.word	0x08006241
 800620c:	08006241 	.word	0x08006241
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006210:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006214:	3308      	adds	r3, #8
 8006216:	4618      	mov	r0, r3
 8006218:	f004 fee0 	bl	800afdc <RCCEx_PLL2_Config>
 800621c:	4603      	mov	r3, r0
 800621e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8006222:	e00e      	b.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006224:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006228:	3330      	adds	r3, #48	@ 0x30
 800622a:	4618      	mov	r0, r3
 800622c:	f004 ff6e 	bl	800b10c <RCCEx_PLL3_Config>
 8006230:	4603      	mov	r3, r0
 8006232:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8006236:	e004      	b.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800623e:	e000      	b.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8006240:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006242:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10c      	bne.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800624a:	4ba9      	ldr	r3, [pc, #676]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800624c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006250:	f023 0107 	bic.w	r1, r3, #7
 8006254:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006258:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800625a:	4aa5      	ldr	r2, [pc, #660]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800625c:	430b      	orrs	r3, r1
 800625e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006262:	e003      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006264:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006268:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800626c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006274:	f002 0a02 	and.w	sl, r2, #2
 8006278:	f04f 0b00 	mov.w	fp, #0
 800627c:	ea5a 030b 	orrs.w	r3, sl, fp
 8006280:	f000 8088 	beq.w	8006394 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8006284:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006288:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800628a:	2b28      	cmp	r3, #40	@ 0x28
 800628c:	d868      	bhi.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800628e:	a201      	add	r2, pc, #4	@ (adr r2, 8006294 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8006290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006294:	08006369 	.word	0x08006369
 8006298:	08006361 	.word	0x08006361
 800629c:	08006361 	.word	0x08006361
 80062a0:	08006361 	.word	0x08006361
 80062a4:	08006361 	.word	0x08006361
 80062a8:	08006361 	.word	0x08006361
 80062ac:	08006361 	.word	0x08006361
 80062b0:	08006361 	.word	0x08006361
 80062b4:	08006339 	.word	0x08006339
 80062b8:	08006361 	.word	0x08006361
 80062bc:	08006361 	.word	0x08006361
 80062c0:	08006361 	.word	0x08006361
 80062c4:	08006361 	.word	0x08006361
 80062c8:	08006361 	.word	0x08006361
 80062cc:	08006361 	.word	0x08006361
 80062d0:	08006361 	.word	0x08006361
 80062d4:	0800634d 	.word	0x0800634d
 80062d8:	08006361 	.word	0x08006361
 80062dc:	08006361 	.word	0x08006361
 80062e0:	08006361 	.word	0x08006361
 80062e4:	08006361 	.word	0x08006361
 80062e8:	08006361 	.word	0x08006361
 80062ec:	08006361 	.word	0x08006361
 80062f0:	08006361 	.word	0x08006361
 80062f4:	08006369 	.word	0x08006369
 80062f8:	08006361 	.word	0x08006361
 80062fc:	08006361 	.word	0x08006361
 8006300:	08006361 	.word	0x08006361
 8006304:	08006361 	.word	0x08006361
 8006308:	08006361 	.word	0x08006361
 800630c:	08006361 	.word	0x08006361
 8006310:	08006361 	.word	0x08006361
 8006314:	08006369 	.word	0x08006369
 8006318:	08006361 	.word	0x08006361
 800631c:	08006361 	.word	0x08006361
 8006320:	08006361 	.word	0x08006361
 8006324:	08006361 	.word	0x08006361
 8006328:	08006361 	.word	0x08006361
 800632c:	08006361 	.word	0x08006361
 8006330:	08006361 	.word	0x08006361
 8006334:	08006369 	.word	0x08006369
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006338:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800633c:	3308      	adds	r3, #8
 800633e:	4618      	mov	r0, r3
 8006340:	f004 fe4c 	bl	800afdc <RCCEx_PLL2_Config>
 8006344:	4603      	mov	r3, r0
 8006346:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800634a:	e00e      	b.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800634c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006350:	3330      	adds	r3, #48	@ 0x30
 8006352:	4618      	mov	r0, r3
 8006354:	f004 feda 	bl	800b10c <RCCEx_PLL3_Config>
 8006358:	4603      	mov	r3, r0
 800635a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800635e:	e004      	b.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006366:	e000      	b.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8006368:	bf00      	nop
    }

    if (ret == HAL_OK)
 800636a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10c      	bne.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8006372:	4b5f      	ldr	r3, [pc, #380]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006374:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006378:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800637c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006380:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006382:	4a5b      	ldr	r2, [pc, #364]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006384:	430b      	orrs	r3, r1
 8006386:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800638a:	e003      	b.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800638c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006390:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006394:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639c:	f002 0304 	and.w	r3, r2, #4
 80063a0:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80063a4:	2300      	movs	r3, #0
 80063a6:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80063aa:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 80063ae:	460b      	mov	r3, r1
 80063b0:	4313      	orrs	r3, r2
 80063b2:	d04e      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80063b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063ba:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80063be:	d02c      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80063c0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80063c4:	d825      	bhi.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80063c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063ca:	d028      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x292>
 80063cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063d0:	d81f      	bhi.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80063d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80063d4:	d025      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80063d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80063d8:	d81b      	bhi.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80063da:	2b80      	cmp	r3, #128	@ 0x80
 80063dc:	d00f      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x272>
 80063de:	2b80      	cmp	r3, #128	@ 0x80
 80063e0:	d817      	bhi.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d01f      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80063e6:	2b40      	cmp	r3, #64	@ 0x40
 80063e8:	d113      	bne.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80063ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063ee:	3308      	adds	r3, #8
 80063f0:	4618      	mov	r0, r3
 80063f2:	f004 fdf3 	bl	800afdc <RCCEx_PLL2_Config>
 80063f6:	4603      	mov	r3, r0
 80063f8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80063fc:	e014      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80063fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006402:	3330      	adds	r3, #48	@ 0x30
 8006404:	4618      	mov	r0, r3
 8006406:	f004 fe81 	bl	800b10c <RCCEx_PLL3_Config>
 800640a:	4603      	mov	r3, r0
 800640c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8006410:	e00a      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006418:	e006      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800641a:	bf00      	nop
 800641c:	e004      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800641e:	bf00      	nop
 8006420:	e002      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006422:	bf00      	nop
 8006424:	e000      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006426:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006428:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800642c:	2b00      	cmp	r3, #0
 800642e:	d10c      	bne.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8006430:	4b2f      	ldr	r3, [pc, #188]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006432:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006436:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800643a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800643e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006440:	4a2b      	ldr	r2, [pc, #172]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006442:	430b      	orrs	r3, r1
 8006444:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006448:	e003      	b.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800644a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800644e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006452:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645a:	f002 0308 	and.w	r3, r2, #8
 800645e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8006462:	2300      	movs	r3, #0
 8006464:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8006468:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 800646c:	460b      	mov	r3, r1
 800646e:	4313      	orrs	r3, r2
 8006470:	d056      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8006472:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006476:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006478:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800647c:	d031      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800647e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006482:	d82a      	bhi.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006484:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006488:	d02d      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800648a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800648e:	d824      	bhi.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006490:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006494:	d029      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8006496:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800649a:	d81e      	bhi.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800649c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064a0:	d011      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80064a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064a6:	d818      	bhi.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d023      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80064ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064b0:	d113      	bne.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80064b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064b6:	3308      	adds	r3, #8
 80064b8:	4618      	mov	r0, r3
 80064ba:	f004 fd8f 	bl	800afdc <RCCEx_PLL2_Config>
 80064be:	4603      	mov	r3, r0
 80064c0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80064c4:	e017      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80064c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064ca:	3330      	adds	r3, #48	@ 0x30
 80064cc:	4618      	mov	r0, r3
 80064ce:	f004 fe1d 	bl	800b10c <RCCEx_PLL3_Config>
 80064d2:	4603      	mov	r3, r0
 80064d4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80064d8:	e00d      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80064e0:	e009      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80064e2:	bf00      	nop
 80064e4:	e007      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80064e6:	bf00      	nop
 80064e8:	e005      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80064ea:	bf00      	nop
 80064ec:	e003      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80064ee:	bf00      	nop
 80064f0:	44020c00 	.word	0x44020c00
        break;
 80064f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064f6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d10c      	bne.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80064fe:	4bbb      	ldr	r3, [pc, #748]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8006500:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006504:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8006508:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800650c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800650e:	4ab7      	ldr	r2, [pc, #732]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8006510:	430b      	orrs	r3, r1
 8006512:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006516:	e003      	b.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006518:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800651c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006520:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006528:	f002 0310 	and.w	r3, r2, #16
 800652c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8006530:	2300      	movs	r3, #0
 8006532:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8006536:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 800653a:	460b      	mov	r3, r1
 800653c:	4313      	orrs	r3, r2
 800653e:	d053      	beq.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8006540:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006544:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006546:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800654a:	d031      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x424>
 800654c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006550:	d82a      	bhi.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006552:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006556:	d02d      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8006558:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800655c:	d824      	bhi.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800655e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006562:	d029      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8006564:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006568:	d81e      	bhi.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800656a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800656e:	d011      	beq.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006570:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006574:	d818      	bhi.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006576:	2b00      	cmp	r3, #0
 8006578:	d020      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x430>
 800657a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800657e:	d113      	bne.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006580:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006584:	3308      	adds	r3, #8
 8006586:	4618      	mov	r0, r3
 8006588:	f004 fd28 	bl	800afdc <RCCEx_PLL2_Config>
 800658c:	4603      	mov	r3, r0
 800658e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8006592:	e014      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006594:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006598:	3330      	adds	r3, #48	@ 0x30
 800659a:	4618      	mov	r0, r3
 800659c:	f004 fdb6 	bl	800b10c <RCCEx_PLL3_Config>
 80065a0:	4603      	mov	r3, r0
 80065a2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80065a6:	e00a      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80065ae:	e006      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80065b0:	bf00      	nop
 80065b2:	e004      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80065b4:	bf00      	nop
 80065b6:	e002      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80065b8:	bf00      	nop
 80065ba:	e000      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80065bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065be:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d10c      	bne.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80065c6:	4b89      	ldr	r3, [pc, #548]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80065c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80065cc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80065d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065d6:	4a85      	ldr	r2, [pc, #532]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80065d8:	430b      	orrs	r3, r1
 80065da:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80065de:	e003      	b.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065e0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80065e4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80065e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f0:	f002 0320 	and.w	r3, r2, #32
 80065f4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80065f8:	2300      	movs	r3, #0
 80065fa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80065fe:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 8006602:	460b      	mov	r3, r1
 8006604:	4313      	orrs	r3, r2
 8006606:	d053      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8006608:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800660c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800660e:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006612:	d031      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8006614:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006618:	d82a      	bhi.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800661a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800661e:	d02d      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8006620:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006624:	d824      	bhi.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8006626:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800662a:	d029      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800662c:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8006630:	d81e      	bhi.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8006632:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006636:	d011      	beq.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006638:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800663c:	d818      	bhi.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800663e:	2b00      	cmp	r3, #0
 8006640:	d020      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8006642:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006646:	d113      	bne.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006648:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800664c:	3308      	adds	r3, #8
 800664e:	4618      	mov	r0, r3
 8006650:	f004 fcc4 	bl	800afdc <RCCEx_PLL2_Config>
 8006654:	4603      	mov	r3, r0
 8006656:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800665a:	e014      	b.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800665c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006660:	3330      	adds	r3, #48	@ 0x30
 8006662:	4618      	mov	r0, r3
 8006664:	f004 fd52 	bl	800b10c <RCCEx_PLL3_Config>
 8006668:	4603      	mov	r3, r0
 800666a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800666e:	e00a      	b.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006676:	e006      	b.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8006678:	bf00      	nop
 800667a:	e004      	b.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800667c:	bf00      	nop
 800667e:	e002      	b.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8006680:	bf00      	nop
 8006682:	e000      	b.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8006684:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006686:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800668a:	2b00      	cmp	r3, #0
 800668c:	d10c      	bne.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800668e:	4b57      	ldr	r3, [pc, #348]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8006690:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006694:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8006698:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800669c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800669e:	4a53      	ldr	r2, [pc, #332]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80066a0:	430b      	orrs	r3, r1
 80066a2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80066a6:	e003      	b.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066a8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80066ac:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80066b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b8:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80066bc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80066c0:	2300      	movs	r3, #0
 80066c2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80066c6:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 80066ca:	460b      	mov	r3, r1
 80066cc:	4313      	orrs	r3, r2
 80066ce:	d053      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 80066d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066d6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80066da:	d031      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80066dc:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80066e0:	d82a      	bhi.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80066e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066e6:	d02d      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80066e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066ec:	d824      	bhi.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80066ee:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80066f2:	d029      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80066f4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80066f8:	d81e      	bhi.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80066fa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80066fe:	d011      	beq.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8006700:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006704:	d818      	bhi.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8006706:	2b00      	cmp	r3, #0
 8006708:	d020      	beq.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800670a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800670e:	d113      	bne.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006710:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006714:	3308      	adds	r3, #8
 8006716:	4618      	mov	r0, r3
 8006718:	f004 fc60 	bl	800afdc <RCCEx_PLL2_Config>
 800671c:	4603      	mov	r3, r0
 800671e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8006722:	e014      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006724:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006728:	3330      	adds	r3, #48	@ 0x30
 800672a:	4618      	mov	r0, r3
 800672c:	f004 fcee 	bl	800b10c <RCCEx_PLL3_Config>
 8006730:	4603      	mov	r3, r0
 8006732:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8006736:	e00a      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800673e:	e006      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8006740:	bf00      	nop
 8006742:	e004      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8006744:	bf00      	nop
 8006746:	e002      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8006748:	bf00      	nop
 800674a:	e000      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800674c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800674e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006752:	2b00      	cmp	r3, #0
 8006754:	d10c      	bne.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8006756:	4b25      	ldr	r3, [pc, #148]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8006758:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800675c:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8006760:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006764:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006766:	4a21      	ldr	r2, [pc, #132]	@ (80067ec <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8006768:	430b      	orrs	r3, r1
 800676a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800676e:	e003      	b.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006770:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006774:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006778:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800677c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006780:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006784:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8006788:	2300      	movs	r3, #0
 800678a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800678e:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 8006792:	460b      	mov	r3, r1
 8006794:	4313      	orrs	r3, r2
 8006796:	d055      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8006798:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800679c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800679e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80067a2:	d033      	beq.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x680>
 80067a4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80067a8:	d82c      	bhi.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80067aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80067ae:	d02f      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x684>
 80067b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80067b4:	d826      	bhi.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80067b6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80067ba:	d02b      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x688>
 80067bc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80067c0:	d820      	bhi.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80067c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80067c6:	d013      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80067c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80067cc:	d81a      	bhi.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d022      	beq.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 80067d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80067d6:	d115      	bne.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80067d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067dc:	3308      	adds	r3, #8
 80067de:	4618      	mov	r0, r3
 80067e0:	f004 fbfc 	bl	800afdc <RCCEx_PLL2_Config>
 80067e4:	4603      	mov	r3, r0
 80067e6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80067ea:	e016      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x68e>
 80067ec:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80067f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067f4:	3330      	adds	r3, #48	@ 0x30
 80067f6:	4618      	mov	r0, r3
 80067f8:	f004 fc88 	bl	800b10c <RCCEx_PLL3_Config>
 80067fc:	4603      	mov	r3, r0
 80067fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8006802:	e00a      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800680a:	e006      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800680c:	bf00      	nop
 800680e:	e004      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8006810:	bf00      	nop
 8006812:	e002      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8006814:	bf00      	nop
 8006816:	e000      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8006818:	bf00      	nop
    }

    if (ret == HAL_OK)
 800681a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10c      	bne.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8006822:	4bbb      	ldr	r3, [pc, #748]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8006824:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006828:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800682c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006830:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006832:	4ab7      	ldr	r2, [pc, #732]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8006834:	430b      	orrs	r3, r1
 8006836:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800683a:	e003      	b.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800683c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006840:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8006844:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8006850:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8006854:	2300      	movs	r3, #0
 8006856:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800685a:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 800685e:	460b      	mov	r3, r1
 8006860:	4313      	orrs	r3, r2
 8006862:	d053      	beq.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8006864:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006868:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800686a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800686e:	d031      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8006870:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006874:	d82a      	bhi.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x740>
 8006876:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800687a:	d02d      	beq.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 800687c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006880:	d824      	bhi.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x740>
 8006882:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006886:	d029      	beq.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x750>
 8006888:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800688c:	d81e      	bhi.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x740>
 800688e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006892:	d011      	beq.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8006894:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006898:	d818      	bhi.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x740>
 800689a:	2b00      	cmp	r3, #0
 800689c:	d020      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x754>
 800689e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80068a2:	d113      	bne.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80068a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068a8:	3308      	adds	r3, #8
 80068aa:	4618      	mov	r0, r3
 80068ac:	f004 fb96 	bl	800afdc <RCCEx_PLL2_Config>
 80068b0:	4603      	mov	r3, r0
 80068b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80068b6:	e014      	b.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80068b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068bc:	3330      	adds	r3, #48	@ 0x30
 80068be:	4618      	mov	r0, r3
 80068c0:	f004 fc24 	bl	800b10c <RCCEx_PLL3_Config>
 80068c4:	4603      	mov	r3, r0
 80068c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80068ca:	e00a      	b.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80068d2:	e006      	b.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80068d4:	bf00      	nop
 80068d6:	e004      	b.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80068d8:	bf00      	nop
 80068da:	e002      	b.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80068dc:	bf00      	nop
 80068de:	e000      	b.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80068e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068e2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d10c      	bne.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 80068ea:	4b89      	ldr	r3, [pc, #548]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80068ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80068f0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80068f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80068fa:	4a85      	ldr	r2, [pc, #532]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80068fc:	430b      	orrs	r3, r1
 80068fe:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006902:	e003      	b.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006904:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006908:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 800690c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006914:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8006918:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800691c:	2300      	movs	r3, #0
 800691e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006922:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006926:	460b      	mov	r3, r1
 8006928:	4313      	orrs	r3, r2
 800692a:	d055      	beq.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 800692c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006930:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006934:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8006938:	d031      	beq.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x812>
 800693a:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800693e:	d82a      	bhi.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8006940:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006944:	d02d      	beq.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x816>
 8006946:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800694a:	d824      	bhi.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800694c:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8006950:	d029      	beq.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8006952:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8006956:	d81e      	bhi.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8006958:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800695c:	d011      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 800695e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006962:	d818      	bhi.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8006964:	2b00      	cmp	r3, #0
 8006966:	d020      	beq.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8006968:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800696c:	d113      	bne.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800696e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006972:	3308      	adds	r3, #8
 8006974:	4618      	mov	r0, r3
 8006976:	f004 fb31 	bl	800afdc <RCCEx_PLL2_Config>
 800697a:	4603      	mov	r3, r0
 800697c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8006980:	e014      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006982:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006986:	3330      	adds	r3, #48	@ 0x30
 8006988:	4618      	mov	r0, r3
 800698a:	f004 fbbf 	bl	800b10c <RCCEx_PLL3_Config>
 800698e:	4603      	mov	r3, r0
 8006990:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8006994:	e00a      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800699c:	e006      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800699e:	bf00      	nop
 80069a0:	e004      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80069a2:	bf00      	nop
 80069a4:	e002      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80069a6:	bf00      	nop
 80069a8:	e000      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80069aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069ac:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10d      	bne.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 80069b4:	4b56      	ldr	r3, [pc, #344]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80069b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80069ba:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 80069be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069c6:	4a52      	ldr	r2, [pc, #328]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80069c8:	430b      	orrs	r3, r1
 80069ca:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80069ce:	e003      	b.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069d0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80069d4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 80069d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e0:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80069e4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80069e8:	2300      	movs	r3, #0
 80069ea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80069ee:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80069f2:	460b      	mov	r3, r1
 80069f4:	4313      	orrs	r3, r2
 80069f6:	d044      	beq.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 80069f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a00:	2b05      	cmp	r3, #5
 8006a02:	d823      	bhi.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8006a04:	a201      	add	r2, pc, #4	@ (adr r2, 8006a0c <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8006a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a0a:	bf00      	nop
 8006a0c:	08006a55 	.word	0x08006a55
 8006a10:	08006a25 	.word	0x08006a25
 8006a14:	08006a39 	.word	0x08006a39
 8006a18:	08006a55 	.word	0x08006a55
 8006a1c:	08006a55 	.word	0x08006a55
 8006a20:	08006a55 	.word	0x08006a55
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006a24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a28:	3308      	adds	r3, #8
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f004 fad6 	bl	800afdc <RCCEx_PLL2_Config>
 8006a30:	4603      	mov	r3, r0
 8006a32:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8006a36:	e00e      	b.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006a38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a3c:	3330      	adds	r3, #48	@ 0x30
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f004 fb64 	bl	800b10c <RCCEx_PLL3_Config>
 8006a44:	4603      	mov	r3, r0
 8006a46:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8006a4a:	e004      	b.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006a52:	e000      	b.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8006a54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a56:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d10d      	bne.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8006a5e:	4b2c      	ldr	r3, [pc, #176]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8006a60:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006a64:	f023 0107 	bic.w	r1, r3, #7
 8006a68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a70:	4a27      	ldr	r2, [pc, #156]	@ (8006b10 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8006a72:	430b      	orrs	r3, r1
 8006a74:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006a78:	e003      	b.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a7a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006a7e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8006a82:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006a8e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006a92:	2300      	movs	r3, #0
 8006a94:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006a98:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	d04f      	beq.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8006aa2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aaa:	2b50      	cmp	r3, #80	@ 0x50
 8006aac:	d029      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8006aae:	2b50      	cmp	r3, #80	@ 0x50
 8006ab0:	d823      	bhi.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8006ab2:	2b40      	cmp	r3, #64	@ 0x40
 8006ab4:	d027      	beq.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8006ab6:	2b40      	cmp	r3, #64	@ 0x40
 8006ab8:	d81f      	bhi.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8006aba:	2b30      	cmp	r3, #48	@ 0x30
 8006abc:	d025      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8006abe:	2b30      	cmp	r3, #48	@ 0x30
 8006ac0:	d81b      	bhi.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8006ac2:	2b20      	cmp	r3, #32
 8006ac4:	d00f      	beq.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006ac6:	2b20      	cmp	r3, #32
 8006ac8:	d817      	bhi.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d022      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8006ace:	2b10      	cmp	r3, #16
 8006ad0:	d113      	bne.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006ad2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ad6:	3308      	adds	r3, #8
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f004 fa7f 	bl	800afdc <RCCEx_PLL2_Config>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8006ae4:	e017      	b.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006ae6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006aea:	3330      	adds	r3, #48	@ 0x30
 8006aec:	4618      	mov	r0, r3
 8006aee:	f004 fb0d 	bl	800b10c <RCCEx_PLL3_Config>
 8006af2:	4603      	mov	r3, r0
 8006af4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8006af8:	e00d      	b.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006b00:	e009      	b.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8006b02:	bf00      	nop
 8006b04:	e007      	b.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8006b06:	bf00      	nop
 8006b08:	e005      	b.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8006b0a:	bf00      	nop
 8006b0c:	e003      	b.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8006b0e:	bf00      	nop
 8006b10:	44020c00 	.word	0x44020c00
        break;
 8006b14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b16:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d10d      	bne.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8006b1e:	4baf      	ldr	r3, [pc, #700]	@ (8006ddc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006b20:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006b24:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8006b28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b30:	4aaa      	ldr	r2, [pc, #680]	@ (8006ddc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006b32:	430b      	orrs	r3, r1
 8006b34:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006b38:	e003      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b3a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006b3e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b42:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006b4e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006b52:	2300      	movs	r3, #0
 8006b54:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006b58:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	d055      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8006b62:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b6a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006b6e:	d031      	beq.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8006b70:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006b74:	d82a      	bhi.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8006b76:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006b7a:	d02d      	beq.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8006b7c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006b80:	d824      	bhi.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8006b82:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006b86:	d029      	beq.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8006b88:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006b8c:	d81e      	bhi.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8006b8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b92:	d011      	beq.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8006b94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b98:	d818      	bhi.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d020      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8006b9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ba2:	d113      	bne.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006ba4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ba8:	3308      	adds	r3, #8
 8006baa:	4618      	mov	r0, r3
 8006bac:	f004 fa16 	bl	800afdc <RCCEx_PLL2_Config>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8006bb6:	e014      	b.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006bb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006bbc:	3330      	adds	r3, #48	@ 0x30
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f004 faa4 	bl	800b10c <RCCEx_PLL3_Config>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8006bca:	e00a      	b.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006bd2:	e006      	b.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8006bd4:	bf00      	nop
 8006bd6:	e004      	b.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8006bd8:	bf00      	nop
 8006bda:	e002      	b.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8006bdc:	bf00      	nop
 8006bde:	e000      	b.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8006be0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006be2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d10d      	bne.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8006bea:	4b7c      	ldr	r3, [pc, #496]	@ (8006ddc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006bf0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006bf4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006bfc:	4a77      	ldr	r2, [pc, #476]	@ (8006ddc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006bfe:	430b      	orrs	r3, r1
 8006c00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006c04:	e003      	b.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c06:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006c0a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006c0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c16:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006c1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006c1e:	2300      	movs	r3, #0
 8006c20:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006c24:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006c28:	460b      	mov	r3, r1
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	d03d      	beq.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8006c2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c36:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006c3a:	d01b      	beq.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8006c3c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006c40:	d814      	bhi.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8006c42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c46:	d017      	beq.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8006c48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c4c:	d80e      	bhi.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d014      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8006c52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c56:	d109      	bne.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006c58:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c5c:	3330      	adds	r3, #48	@ 0x30
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f004 fa54 	bl	800b10c <RCCEx_PLL3_Config>
 8006c64:	4603      	mov	r3, r0
 8006c66:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8006c6a:	e008      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006c72:	e004      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8006c74:	bf00      	nop
 8006c76:	e002      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8006c78:	bf00      	nop
 8006c7a:	e000      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8006c7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c7e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d10d      	bne.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8006c86:	4b55      	ldr	r3, [pc, #340]	@ (8006ddc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006c88:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006c8c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006c90:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c98:	4a50      	ldr	r2, [pc, #320]	@ (8006ddc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006c9a:	430b      	orrs	r3, r1
 8006c9c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006ca0:	e003      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ca2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006ca6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006caa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006cb6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006cba:	2300      	movs	r3, #0
 8006cbc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006cc0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	d03d      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8006cca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006cd2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006cd6:	d01b      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8006cd8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006cdc:	d814      	bhi.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8006cde:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006ce2:	d017      	beq.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8006ce4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006ce8:	d80e      	bhi.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d014      	beq.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8006cee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006cf2:	d109      	bne.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006cf4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cf8:	3330      	adds	r3, #48	@ 0x30
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f004 fa06 	bl	800b10c <RCCEx_PLL3_Config>
 8006d00:	4603      	mov	r3, r0
 8006d02:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8006d06:	e008      	b.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006d0e:	e004      	b.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8006d10:	bf00      	nop
 8006d12:	e002      	b.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8006d14:	bf00      	nop
 8006d16:	e000      	b.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8006d18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d1a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d10d      	bne.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8006d22:	4b2e      	ldr	r3, [pc, #184]	@ (8006ddc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006d24:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006d28:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8006d2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d34:	4a29      	ldr	r2, [pc, #164]	@ (8006ddc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006d36:	430b      	orrs	r3, r1
 8006d38:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006d3c:	e003      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d3e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006d42:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006d46:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006d52:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006d56:	2300      	movs	r3, #0
 8006d58:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006d5c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006d60:	460b      	mov	r3, r1
 8006d62:	4313      	orrs	r3, r2
 8006d64:	d040      	beq.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8006d66:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d6e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006d72:	d01b      	beq.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8006d74:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006d78:	d814      	bhi.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8006d7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d7e:	d017      	beq.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006d80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d84:	d80e      	bhi.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d014      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8006d8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d8e:	d109      	bne.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006d90:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d94:	3330      	adds	r3, #48	@ 0x30
 8006d96:	4618      	mov	r0, r3
 8006d98:	f004 f9b8 	bl	800b10c <RCCEx_PLL3_Config>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8006da2:	e008      	b.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006daa:	e004      	b.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8006dac:	bf00      	nop
 8006dae:	e002      	b.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8006db0:	bf00      	nop
 8006db2:	e000      	b.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8006db4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006db6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d110      	bne.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8006dbe:	4b07      	ldr	r3, [pc, #28]	@ (8006ddc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006dc0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006dc4:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006dc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006dcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006dd0:	4a02      	ldr	r2, [pc, #8]	@ (8006ddc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006dd2:	430b      	orrs	r3, r1
 8006dd4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006dd8:	e006      	b.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8006dda:	bf00      	nop
 8006ddc:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006de0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006de4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006de8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df0:	2100      	movs	r1, #0
 8006df2:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8006df6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006dfa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006dfe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006e02:	460b      	mov	r3, r1
 8006e04:	4313      	orrs	r3, r2
 8006e06:	d03d      	beq.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8006e08:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006e10:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006e14:	d01b      	beq.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8006e16:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006e1a:	d814      	bhi.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8006e1c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006e20:	d017      	beq.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8006e22:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006e26:	d80e      	bhi.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d014      	beq.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8006e2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e30:	d109      	bne.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006e32:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e36:	3330      	adds	r3, #48	@ 0x30
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f004 f967 	bl	800b10c <RCCEx_PLL3_Config>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8006e44:	e008      	b.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006e4c:	e004      	b.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8006e4e:	bf00      	nop
 8006e50:	e002      	b.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8006e52:	bf00      	nop
 8006e54:	e000      	b.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8006e56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e58:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d10d      	bne.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8006e60:	4bbe      	ldr	r3, [pc, #760]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006e62:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006e66:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006e6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006e72:	4aba      	ldr	r2, [pc, #744]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006e74:	430b      	orrs	r3, r1
 8006e76:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006e7a:	e003      	b.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e7c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006e80:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8006e84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006e90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006e94:	2300      	movs	r3, #0
 8006e96:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006e9a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	d035      	beq.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8006ea4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ea8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006eac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006eb0:	d015      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8006eb2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006eb6:	d80e      	bhi.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d012      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8006ebc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ec0:	d109      	bne.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006ec2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ec6:	3330      	adds	r3, #48	@ 0x30
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f004 f91f 	bl	800b10c <RCCEx_PLL3_Config>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8006ed4:	e006      	b.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006edc:	e002      	b.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8006ede:	bf00      	nop
 8006ee0:	e000      	b.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8006ee2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ee4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d10d      	bne.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8006eec:	4b9b      	ldr	r3, [pc, #620]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006eee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006ef2:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8006ef6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006efa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006efe:	4a97      	ldr	r2, [pc, #604]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006f00:	430b      	orrs	r3, r1
 8006f02:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006f06:	e003      	b.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f08:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006f0c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006f10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f18:	2100      	movs	r1, #0
 8006f1a:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8006f1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f22:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006f26:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	d00e      	beq.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8006f30:	4b8a      	ldr	r3, [pc, #552]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006f32:	69db      	ldr	r3, [r3, #28]
 8006f34:	4a89      	ldr	r2, [pc, #548]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006f36:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006f3a:	61d3      	str	r3, [r2, #28]
 8006f3c:	4b87      	ldr	r3, [pc, #540]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006f3e:	69d9      	ldr	r1, [r3, #28]
 8006f40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f44:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8006f48:	4a84      	ldr	r2, [pc, #528]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006f4a:	430b      	orrs	r3, r1
 8006f4c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006f4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f56:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006f5a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006f5e:	2300      	movs	r3, #0
 8006f60:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006f64:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006f68:	460b      	mov	r3, r1
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	d055      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8006f6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f72:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006f76:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006f7a:	d031      	beq.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8006f7c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006f80:	d82a      	bhi.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8006f82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f86:	d02d      	beq.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8006f88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f8c:	d824      	bhi.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8006f8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f92:	d029      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8006f94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f98:	d81e      	bhi.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8006f9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f9e:	d011      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8006fa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fa4:	d818      	bhi.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d020      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8006faa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fae:	d113      	bne.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006fb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006fb4:	3308      	adds	r3, #8
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f004 f810 	bl	800afdc <RCCEx_PLL2_Config>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8006fc2:	e014      	b.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006fc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006fc8:	3330      	adds	r3, #48	@ 0x30
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f004 f89e 	bl	800b10c <RCCEx_PLL3_Config>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8006fd6:	e00a      	b.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006fde:	e006      	b.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8006fe0:	bf00      	nop
 8006fe2:	e004      	b.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8006fe4:	bf00      	nop
 8006fe6:	e002      	b.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8006fe8:	bf00      	nop
 8006fea:	e000      	b.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8006fec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10d      	bne.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8006ff6:	4b59      	ldr	r3, [pc, #356]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006ff8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006ffc:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8007000:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007004:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007008:	4a54      	ldr	r2, [pc, #336]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800700a:	430b      	orrs	r3, r1
 800700c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007010:	e003      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007012:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007016:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800701a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800701e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007022:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007026:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800702a:	2300      	movs	r3, #0
 800702c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007030:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007034:	460b      	mov	r3, r1
 8007036:	4313      	orrs	r3, r2
 8007038:	d055      	beq.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 800703a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800703e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007042:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007046:	d031      	beq.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8007048:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800704c:	d82a      	bhi.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800704e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007052:	d02d      	beq.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8007054:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007058:	d824      	bhi.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800705a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800705e:	d029      	beq.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8007060:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007064:	d81e      	bhi.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8007066:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800706a:	d011      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 800706c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007070:	d818      	bhi.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8007072:	2b00      	cmp	r3, #0
 8007074:	d020      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8007076:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800707a:	d113      	bne.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800707c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007080:	3308      	adds	r3, #8
 8007082:	4618      	mov	r0, r3
 8007084:	f003 ffaa 	bl	800afdc <RCCEx_PLL2_Config>
 8007088:	4603      	mov	r3, r0
 800708a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800708e:	e014      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007090:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007094:	3330      	adds	r3, #48	@ 0x30
 8007096:	4618      	mov	r0, r3
 8007098:	f004 f838 	bl	800b10c <RCCEx_PLL3_Config>
 800709c:	4603      	mov	r3, r0
 800709e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80070a2:	e00a      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80070aa:	e006      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80070ac:	bf00      	nop
 80070ae:	e004      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80070b0:	bf00      	nop
 80070b2:	e002      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80070b4:	bf00      	nop
 80070b6:	e000      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80070b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070ba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d10d      	bne.n	80070de <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80070c2:	4b26      	ldr	r3, [pc, #152]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80070c4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80070c8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80070cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80070d4:	4a21      	ldr	r2, [pc, #132]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80070d6:	430b      	orrs	r3, r1
 80070d8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80070dc:	e003      	b.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070de:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80070e2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 80070e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ee:	2100      	movs	r1, #0
 80070f0:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 80070f4:	f003 0320 	and.w	r3, r3, #32
 80070f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80070fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007100:	460b      	mov	r3, r1
 8007102:	4313      	orrs	r3, r2
 8007104:	d057      	beq.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8007106:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800710a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800710e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007112:	d033      	beq.n	800717c <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8007114:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007118:	d82c      	bhi.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800711a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800711e:	d02f      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8007120:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007124:	d826      	bhi.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8007126:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800712a:	d02b      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 800712c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007130:	d820      	bhi.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8007132:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007136:	d013      	beq.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007138:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800713c:	d81a      	bhi.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800713e:	2b00      	cmp	r3, #0
 8007140:	d022      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8007142:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007146:	d115      	bne.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007148:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800714c:	3308      	adds	r3, #8
 800714e:	4618      	mov	r0, r3
 8007150:	f003 ff44 	bl	800afdc <RCCEx_PLL2_Config>
 8007154:	4603      	mov	r3, r0
 8007156:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800715a:	e016      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0xffe>
 800715c:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007160:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007164:	3330      	adds	r3, #48	@ 0x30
 8007166:	4618      	mov	r0, r3
 8007168:	f003 ffd0 	bl	800b10c <RCCEx_PLL3_Config>
 800716c:	4603      	mov	r3, r0
 800716e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8007172:	e00a      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800717a:	e006      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800717c:	bf00      	nop
 800717e:	e004      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8007180:	bf00      	nop
 8007182:	e002      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8007184:	bf00      	nop
 8007186:	e000      	b.n	800718a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8007188:	bf00      	nop
    }

    if (ret == HAL_OK)
 800718a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800718e:	2b00      	cmp	r3, #0
 8007190:	d10d      	bne.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8007192:	4bbb      	ldr	r3, [pc, #748]	@ (8007480 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007194:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007198:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800719c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80071a4:	4ab6      	ldr	r2, [pc, #728]	@ (8007480 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80071a6:	430b      	orrs	r3, r1
 80071a8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80071ac:	e003      	b.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071ae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80071b2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 80071b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071be:	2100      	movs	r1, #0
 80071c0:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 80071c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80071cc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80071d0:	460b      	mov	r3, r1
 80071d2:	4313      	orrs	r3, r2
 80071d4:	d055      	beq.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 80071d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80071de:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80071e2:	d031      	beq.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80071e4:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80071e8:	d82a      	bhi.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80071ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80071ee:	d02d      	beq.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 80071f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80071f4:	d824      	bhi.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80071f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80071fa:	d029      	beq.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 80071fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007200:	d81e      	bhi.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8007202:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007206:	d011      	beq.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8007208:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800720c:	d818      	bhi.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800720e:	2b00      	cmp	r3, #0
 8007210:	d020      	beq.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8007212:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007216:	d113      	bne.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007218:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800721c:	3308      	adds	r3, #8
 800721e:	4618      	mov	r0, r3
 8007220:	f003 fedc 	bl	800afdc <RCCEx_PLL2_Config>
 8007224:	4603      	mov	r3, r0
 8007226:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800722a:	e014      	b.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800722c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007230:	3330      	adds	r3, #48	@ 0x30
 8007232:	4618      	mov	r0, r3
 8007234:	f003 ff6a 	bl	800b10c <RCCEx_PLL3_Config>
 8007238:	4603      	mov	r3, r0
 800723a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800723e:	e00a      	b.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007246:	e006      	b.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8007248:	bf00      	nop
 800724a:	e004      	b.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800724c:	bf00      	nop
 800724e:	e002      	b.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8007250:	bf00      	nop
 8007252:	e000      	b.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8007254:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007256:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800725a:	2b00      	cmp	r3, #0
 800725c:	d10d      	bne.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 800725e:	4b88      	ldr	r3, [pc, #544]	@ (8007480 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007260:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007264:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8007268:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800726c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007270:	4a83      	ldr	r2, [pc, #524]	@ (8007480 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007272:	430b      	orrs	r3, r1
 8007274:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007278:	e003      	b.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800727a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800727e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8007282:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728a:	2100      	movs	r1, #0
 800728c:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8007290:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007294:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007298:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800729c:	460b      	mov	r3, r1
 800729e:	4313      	orrs	r3, r2
 80072a0:	d055      	beq.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 80072a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80072aa:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80072ae:	d031      	beq.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 80072b0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80072b4:	d82a      	bhi.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80072b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80072ba:	d02d      	beq.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 80072bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80072c0:	d824      	bhi.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80072c2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80072c6:	d029      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x1190>
 80072c8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80072cc:	d81e      	bhi.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80072ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80072d2:	d011      	beq.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 80072d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80072d8:	d818      	bhi.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d020      	beq.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 80072de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80072e2:	d113      	bne.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80072e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072e8:	3308      	adds	r3, #8
 80072ea:	4618      	mov	r0, r3
 80072ec:	f003 fe76 	bl	800afdc <RCCEx_PLL2_Config>
 80072f0:	4603      	mov	r3, r0
 80072f2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80072f6:	e014      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80072f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072fc:	3330      	adds	r3, #48	@ 0x30
 80072fe:	4618      	mov	r0, r3
 8007300:	f003 ff04 	bl	800b10c <RCCEx_PLL3_Config>
 8007304:	4603      	mov	r3, r0
 8007306:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800730a:	e00a      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007312:	e006      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8007314:	bf00      	nop
 8007316:	e004      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8007318:	bf00      	nop
 800731a:	e002      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800731c:	bf00      	nop
 800731e:	e000      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8007320:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007322:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007326:	2b00      	cmp	r3, #0
 8007328:	d10d      	bne.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 800732a:	4b55      	ldr	r3, [pc, #340]	@ (8007480 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800732c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007330:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007334:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007338:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800733c:	4a50      	ldr	r2, [pc, #320]	@ (8007480 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800733e:	430b      	orrs	r3, r1
 8007340:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007344:	e003      	b.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007346:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800734a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 800734e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007356:	2100      	movs	r1, #0
 8007358:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800735c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007360:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007364:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007368:	460b      	mov	r3, r1
 800736a:	4313      	orrs	r3, r2
 800736c:	d055      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 800736e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007372:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007376:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800737a:	d031      	beq.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 800737c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007380:	d82a      	bhi.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8007382:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007386:	d02d      	beq.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8007388:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800738c:	d824      	bhi.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800738e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007392:	d029      	beq.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8007394:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007398:	d81e      	bhi.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800739a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800739e:	d011      	beq.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 80073a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073a4:	d818      	bhi.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d020      	beq.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x1260>
 80073aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073ae:	d113      	bne.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80073b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80073b4:	3308      	adds	r3, #8
 80073b6:	4618      	mov	r0, r3
 80073b8:	f003 fe10 	bl	800afdc <RCCEx_PLL2_Config>
 80073bc:	4603      	mov	r3, r0
 80073be:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80073c2:	e014      	b.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80073c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80073c8:	3330      	adds	r3, #48	@ 0x30
 80073ca:	4618      	mov	r0, r3
 80073cc:	f003 fe9e 	bl	800b10c <RCCEx_PLL3_Config>
 80073d0:	4603      	mov	r3, r0
 80073d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80073d6:	e00a      	b.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80073de:	e006      	b.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80073e0:	bf00      	nop
 80073e2:	e004      	b.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80073e4:	bf00      	nop
 80073e6:	e002      	b.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80073e8:	bf00      	nop
 80073ea:	e000      	b.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80073ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073ee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d10d      	bne.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 80073f6:	4b22      	ldr	r3, [pc, #136]	@ (8007480 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80073f8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80073fc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007400:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007404:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007408:	4a1d      	ldr	r2, [pc, #116]	@ (8007480 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800740a:	430b      	orrs	r3, r1
 800740c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007410:	e003      	b.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007412:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007416:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800741a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800741e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007422:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007426:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800742a:	2300      	movs	r3, #0
 800742c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007430:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007434:	460b      	mov	r3, r1
 8007436:	4313      	orrs	r3, r2
 8007438:	d055      	beq.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800743a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800743e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007442:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007446:	d035      	beq.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8007448:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800744c:	d82e      	bhi.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800744e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007452:	d031      	beq.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8007454:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007458:	d828      	bhi.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800745a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800745e:	d01b      	beq.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8007460:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007464:	d822      	bhi.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8007466:	2b00      	cmp	r3, #0
 8007468:	d003      	beq.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 800746a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800746e:	d009      	beq.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8007470:	e01c      	b.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007472:	4b03      	ldr	r3, [pc, #12]	@ (8007480 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007476:	4a02      	ldr	r2, [pc, #8]	@ (8007480 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007478:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800747c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800747e:	e01c      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8007480:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007484:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007488:	3308      	adds	r3, #8
 800748a:	4618      	mov	r0, r3
 800748c:	f003 fda6 	bl	800afdc <RCCEx_PLL2_Config>
 8007490:	4603      	mov	r3, r0
 8007492:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007496:	e010      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007498:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800749c:	3330      	adds	r3, #48	@ 0x30
 800749e:	4618      	mov	r0, r3
 80074a0:	f003 fe34 	bl	800b10c <RCCEx_PLL3_Config>
 80074a4:	4603      	mov	r3, r0
 80074a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80074aa:	e006      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80074b2:	e002      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80074b4:	bf00      	nop
 80074b6:	e000      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80074b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074ba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d10d      	bne.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80074c2:	4bc3      	ldr	r3, [pc, #780]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80074c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80074c8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80074cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80074d4:	4abe      	ldr	r2, [pc, #760]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80074d6:	430b      	orrs	r3, r1
 80074d8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80074dc:	e003      	b.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074de:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80074e2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80074e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ee:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80074f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80074f6:	2300      	movs	r3, #0
 80074f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80074fc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007500:	460b      	mov	r3, r1
 8007502:	4313      	orrs	r3, r2
 8007504:	d051      	beq.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8007506:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800750a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800750e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007512:	d033      	beq.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8007514:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007518:	d82c      	bhi.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800751a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800751e:	d02d      	beq.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8007520:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8007524:	d826      	bhi.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8007526:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800752a:	d019      	beq.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 800752c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007530:	d820      	bhi.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8007532:	2b00      	cmp	r3, #0
 8007534:	d003      	beq.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8007536:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800753a:	d007      	beq.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 800753c:	e01a      	b.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800753e:	4ba4      	ldr	r3, [pc, #656]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007542:	4aa3      	ldr	r2, [pc, #652]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007544:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007548:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800754a:	e018      	b.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800754c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007550:	3308      	adds	r3, #8
 8007552:	4618      	mov	r0, r3
 8007554:	f003 fd42 	bl	800afdc <RCCEx_PLL2_Config>
 8007558:	4603      	mov	r3, r0
 800755a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800755e:	e00e      	b.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007560:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007564:	3330      	adds	r3, #48	@ 0x30
 8007566:	4618      	mov	r0, r3
 8007568:	f003 fdd0 	bl	800b10c <RCCEx_PLL3_Config>
 800756c:	4603      	mov	r3, r0
 800756e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007572:	e004      	b.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800757a:	e000      	b.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 800757c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800757e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007582:	2b00      	cmp	r3, #0
 8007584:	d10d      	bne.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8007586:	4b92      	ldr	r3, [pc, #584]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007588:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800758c:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8007590:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007594:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007598:	4a8d      	ldr	r2, [pc, #564]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800759a:	430b      	orrs	r3, r1
 800759c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80075a0:	e003      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075a2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80075a6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80075aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80075b6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80075b8:	2300      	movs	r3, #0
 80075ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80075bc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80075c0:	460b      	mov	r3, r1
 80075c2:	4313      	orrs	r3, r2
 80075c4:	d032      	beq.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80075c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80075ce:	2b05      	cmp	r3, #5
 80075d0:	d80f      	bhi.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 80075d2:	2b03      	cmp	r3, #3
 80075d4:	d211      	bcs.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x146e>
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d911      	bls.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x1472>
 80075da:	2b02      	cmp	r3, #2
 80075dc:	d109      	bne.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80075de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075e2:	3308      	adds	r3, #8
 80075e4:	4618      	mov	r0, r3
 80075e6:	f003 fcf9 	bl	800afdc <RCCEx_PLL2_Config>
 80075ea:	4603      	mov	r3, r0
 80075ec:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80075f0:	e006      	b.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80075f8:	e002      	b.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80075fa:	bf00      	nop
 80075fc:	e000      	b.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80075fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007600:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007604:	2b00      	cmp	r3, #0
 8007606:	d10d      	bne.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8007608:	4b71      	ldr	r3, [pc, #452]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800760a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800760e:	f023 0107 	bic.w	r1, r3, #7
 8007612:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007616:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800761a:	4a6d      	ldr	r2, [pc, #436]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800761c:	430b      	orrs	r3, r1
 800761e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007622:	e003      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007624:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007628:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 800762c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007634:	2100      	movs	r1, #0
 8007636:	6739      	str	r1, [r7, #112]	@ 0x70
 8007638:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800763c:	677b      	str	r3, [r7, #116]	@ 0x74
 800763e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007642:	460b      	mov	r3, r1
 8007644:	4313      	orrs	r3, r2
 8007646:	d024      	beq.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8007648:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800764c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007650:	2b00      	cmp	r3, #0
 8007652:	d005      	beq.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8007654:	2b08      	cmp	r3, #8
 8007656:	d005      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800765e:	e002      	b.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8007660:	bf00      	nop
 8007662:	e000      	b.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8007664:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007666:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800766a:	2b00      	cmp	r3, #0
 800766c:	d10d      	bne.n	800768a <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800766e:	4b58      	ldr	r3, [pc, #352]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007670:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007674:	f023 0108 	bic.w	r1, r3, #8
 8007678:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800767c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007680:	4a53      	ldr	r2, [pc, #332]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007682:	430b      	orrs	r3, r1
 8007684:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007688:	e003      	b.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800768a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800768e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007692:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769a:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800769e:	66bb      	str	r3, [r7, #104]	@ 0x68
 80076a0:	2300      	movs	r3, #0
 80076a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80076a4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80076a8:	460b      	mov	r3, r1
 80076aa:	4313      	orrs	r3, r2
 80076ac:	f000 80b9 	beq.w	8007822 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80076b0:	4b48      	ldr	r3, [pc, #288]	@ (80077d4 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80076b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076b4:	4a47      	ldr	r2, [pc, #284]	@ (80077d4 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80076b6:	f043 0301 	orr.w	r3, r3, #1
 80076ba:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80076bc:	f7fb fbb2 	bl	8002e24 <HAL_GetTick>
 80076c0:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80076c4:	e00b      	b.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076c6:	f7fb fbad 	bl	8002e24 <HAL_GetTick>
 80076ca:	4602      	mov	r2, r0
 80076cc:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80076d0:	1ad3      	subs	r3, r2, r3
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	d903      	bls.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 80076d6:	2303      	movs	r3, #3
 80076d8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80076dc:	e005      	b.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80076de:	4b3d      	ldr	r3, [pc, #244]	@ (80077d4 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80076e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076e2:	f003 0301 	and.w	r3, r3, #1
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d0ed      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 80076ea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	f040 8093 	bne.w	800781a <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80076f4:	4b36      	ldr	r3, [pc, #216]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80076f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80076fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076fe:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8007702:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8007706:	2b00      	cmp	r3, #0
 8007708:	d023      	beq.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 800770a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800770e:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8007712:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8007716:	4293      	cmp	r3, r2
 8007718:	d01b      	beq.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800771a:	4b2d      	ldr	r3, [pc, #180]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800771c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007720:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007724:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007728:	4b29      	ldr	r3, [pc, #164]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800772a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800772e:	4a28      	ldr	r2, [pc, #160]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007730:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007734:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007738:	4b25      	ldr	r3, [pc, #148]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800773a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800773e:	4a24      	ldr	r2, [pc, #144]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007740:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007744:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007748:	4a21      	ldr	r2, [pc, #132]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800774a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800774e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007752:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8007756:	f003 0301 	and.w	r3, r3, #1
 800775a:	2b00      	cmp	r3, #0
 800775c:	d019      	beq.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800775e:	f7fb fb61 	bl	8002e24 <HAL_GetTick>
 8007762:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007766:	e00d      	b.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007768:	f7fb fb5c 	bl	8002e24 <HAL_GetTick>
 800776c:	4602      	mov	r2, r0
 800776e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8007772:	1ad2      	subs	r2, r2, r3
 8007774:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007778:	429a      	cmp	r2, r3
 800777a:	d903      	bls.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 800777c:	2303      	movs	r3, #3
 800777e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 8007782:	e006      	b.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007784:	4b12      	ldr	r3, [pc, #72]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007786:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800778a:	f003 0302 	and.w	r3, r3, #2
 800778e:	2b00      	cmp	r3, #0
 8007790:	d0ea      	beq.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8007792:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007796:	2b00      	cmp	r3, #0
 8007798:	d13a      	bne.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800779a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800779e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80077a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077aa:	d115      	bne.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 80077ac:	4b08      	ldr	r3, [pc, #32]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80077ae:	69db      	ldr	r3, [r3, #28]
 80077b0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80077b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80077b8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80077bc:	091b      	lsrs	r3, r3, #4
 80077be:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80077c2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80077c6:	4a02      	ldr	r2, [pc, #8]	@ (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80077c8:	430b      	orrs	r3, r1
 80077ca:	61d3      	str	r3, [r2, #28]
 80077cc:	e00a      	b.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 80077ce:	bf00      	nop
 80077d0:	44020c00 	.word	0x44020c00
 80077d4:	44020800 	.word	0x44020800
 80077d8:	4b9f      	ldr	r3, [pc, #636]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80077da:	69db      	ldr	r3, [r3, #28]
 80077dc:	4a9e      	ldr	r2, [pc, #632]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80077de:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80077e2:	61d3      	str	r3, [r2, #28]
 80077e4:	4b9c      	ldr	r3, [pc, #624]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80077e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80077ea:	4a9b      	ldr	r2, [pc, #620]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80077ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077f0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80077f4:	4b98      	ldr	r3, [pc, #608]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80077f6:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 80077fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80077fe:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8007802:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007806:	4a94      	ldr	r2, [pc, #592]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007808:	430b      	orrs	r3, r1
 800780a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800780e:	e008      	b.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007810:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007814:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 8007818:	e003      	b.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800781a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800781e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007822:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782a:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800782e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007830:	2300      	movs	r3, #0
 8007832:	667b      	str	r3, [r7, #100]	@ 0x64
 8007834:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007838:	460b      	mov	r3, r1
 800783a:	4313      	orrs	r3, r2
 800783c:	d035      	beq.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800783e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007842:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8007846:	2b30      	cmp	r3, #48	@ 0x30
 8007848:	d014      	beq.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 800784a:	2b30      	cmp	r3, #48	@ 0x30
 800784c:	d80e      	bhi.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800784e:	2b20      	cmp	r3, #32
 8007850:	d012      	beq.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8007852:	2b20      	cmp	r3, #32
 8007854:	d80a      	bhi.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8007856:	2b00      	cmp	r3, #0
 8007858:	d010      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 800785a:	2b10      	cmp	r3, #16
 800785c:	d106      	bne.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800785e:	4b7e      	ldr	r3, [pc, #504]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007862:	4a7d      	ldr	r2, [pc, #500]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007864:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007868:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800786a:	e008      	b.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007872:	e004      	b.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8007874:	bf00      	nop
 8007876:	e002      	b.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8007878:	bf00      	nop
 800787a:	e000      	b.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800787c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800787e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007882:	2b00      	cmp	r3, #0
 8007884:	d10d      	bne.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8007886:	4b74      	ldr	r3, [pc, #464]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007888:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800788c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007890:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007894:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8007898:	4a6f      	ldr	r2, [pc, #444]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800789a:	430b      	orrs	r3, r1
 800789c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80078a0:	e003      	b.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078a2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80078a6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80078aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80078ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b2:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80078b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80078b8:	2300      	movs	r3, #0
 80078ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80078bc:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80078c0:	460b      	mov	r3, r1
 80078c2:	4313      	orrs	r3, r2
 80078c4:	d033      	beq.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 80078c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80078ca:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d002      	beq.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 80078d2:	2b40      	cmp	r3, #64	@ 0x40
 80078d4:	d007      	beq.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 80078d6:	e010      	b.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078d8:	4b5f      	ldr	r3, [pc, #380]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80078da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078dc:	4a5e      	ldr	r2, [pc, #376]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80078de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078e2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80078e4:	e00d      	b.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80078e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80078ea:	3308      	adds	r3, #8
 80078ec:	4618      	mov	r0, r3
 80078ee:	f003 fb75 	bl	800afdc <RCCEx_PLL2_Config>
 80078f2:	4603      	mov	r3, r0
 80078f4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80078f8:	e003      	b.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007900:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007902:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007906:	2b00      	cmp	r3, #0
 8007908:	d10d      	bne.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 800790a:	4b53      	ldr	r3, [pc, #332]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800790c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007910:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8007914:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007918:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800791c:	4a4e      	ldr	r2, [pc, #312]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800791e:	430b      	orrs	r3, r1
 8007920:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007924:	e003      	b.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007926:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800792a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800792e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007936:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800793a:	653b      	str	r3, [r7, #80]	@ 0x50
 800793c:	2300      	movs	r3, #0
 800793e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007940:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007944:	460b      	mov	r3, r1
 8007946:	4313      	orrs	r3, r2
 8007948:	d033      	beq.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 800794a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800794e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d002      	beq.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8007956:	2b80      	cmp	r3, #128	@ 0x80
 8007958:	d007      	beq.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x17de>
 800795a:	e010      	b.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800795c:	4b3e      	ldr	r3, [pc, #248]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800795e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007960:	4a3d      	ldr	r2, [pc, #244]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007962:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007966:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8007968:	e00d      	b.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800796a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800796e:	3308      	adds	r3, #8
 8007970:	4618      	mov	r0, r3
 8007972:	f003 fb33 	bl	800afdc <RCCEx_PLL2_Config>
 8007976:	4603      	mov	r3, r0
 8007978:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 800797c:	e003      	b.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007984:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007986:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800798a:	2b00      	cmp	r3, #0
 800798c:	d10d      	bne.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 800798e:	4b32      	ldr	r3, [pc, #200]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007990:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007994:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8007998:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800799c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80079a0:	4a2d      	ldr	r2, [pc, #180]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80079a2:	430b      	orrs	r3, r1
 80079a4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80079a8:	e003      	b.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079aa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80079ae:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80079b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80079b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ba:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80079be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80079c0:	2300      	movs	r3, #0
 80079c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079c4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80079c8:	460b      	mov	r3, r1
 80079ca:	4313      	orrs	r3, r2
 80079cc:	d04a      	beq.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80079ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80079d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80079d6:	2b04      	cmp	r3, #4
 80079d8:	d827      	bhi.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x189e>
 80079da:	a201      	add	r2, pc, #4	@ (adr r2, 80079e0 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 80079dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e0:	080079f5 	.word	0x080079f5
 80079e4:	08007a03 	.word	0x08007a03
 80079e8:	08007a17 	.word	0x08007a17
 80079ec:	08007a33 	.word	0x08007a33
 80079f0:	08007a33 	.word	0x08007a33
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079f4:	4b18      	ldr	r3, [pc, #96]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80079f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079f8:	4a17      	ldr	r2, [pc, #92]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80079fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079fe:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007a00:	e018      	b.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007a02:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a06:	3308      	adds	r3, #8
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f003 fae7 	bl	800afdc <RCCEx_PLL2_Config>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007a14:	e00e      	b.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007a16:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a1a:	3330      	adds	r3, #48	@ 0x30
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f003 fb75 	bl	800b10c <RCCEx_PLL3_Config>
 8007a22:	4603      	mov	r3, r0
 8007a24:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007a28:	e004      	b.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007a30:	e000      	b.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8007a32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a34:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d10f      	bne.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8007a3c:	4b06      	ldr	r3, [pc, #24]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a42:	f023 0107 	bic.w	r1, r3, #7
 8007a46:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a4e:	4a02      	ldr	r2, [pc, #8]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007a50:	430b      	orrs	r3, r1
 8007a52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007a56:	e005      	b.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8007a58:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a5c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007a60:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8007a64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007a70:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a72:	2300      	movs	r3, #0
 8007a74:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a76:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	f000 8081 	beq.w	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8007a82:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a86:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007a8a:	2b20      	cmp	r3, #32
 8007a8c:	d85f      	bhi.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8007a8e:	a201      	add	r2, pc, #4	@ (adr r2, 8007a94 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8007a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a94:	08007b19 	.word	0x08007b19
 8007a98:	08007b4f 	.word	0x08007b4f
 8007a9c:	08007b4f 	.word	0x08007b4f
 8007aa0:	08007b4f 	.word	0x08007b4f
 8007aa4:	08007b4f 	.word	0x08007b4f
 8007aa8:	08007b4f 	.word	0x08007b4f
 8007aac:	08007b4f 	.word	0x08007b4f
 8007ab0:	08007b4f 	.word	0x08007b4f
 8007ab4:	08007b27 	.word	0x08007b27
 8007ab8:	08007b4f 	.word	0x08007b4f
 8007abc:	08007b4f 	.word	0x08007b4f
 8007ac0:	08007b4f 	.word	0x08007b4f
 8007ac4:	08007b4f 	.word	0x08007b4f
 8007ac8:	08007b4f 	.word	0x08007b4f
 8007acc:	08007b4f 	.word	0x08007b4f
 8007ad0:	08007b4f 	.word	0x08007b4f
 8007ad4:	08007b3b 	.word	0x08007b3b
 8007ad8:	08007b4f 	.word	0x08007b4f
 8007adc:	08007b4f 	.word	0x08007b4f
 8007ae0:	08007b4f 	.word	0x08007b4f
 8007ae4:	08007b4f 	.word	0x08007b4f
 8007ae8:	08007b4f 	.word	0x08007b4f
 8007aec:	08007b4f 	.word	0x08007b4f
 8007af0:	08007b4f 	.word	0x08007b4f
 8007af4:	08007b57 	.word	0x08007b57
 8007af8:	08007b4f 	.word	0x08007b4f
 8007afc:	08007b4f 	.word	0x08007b4f
 8007b00:	08007b4f 	.word	0x08007b4f
 8007b04:	08007b4f 	.word	0x08007b4f
 8007b08:	08007b4f 	.word	0x08007b4f
 8007b0c:	08007b4f 	.word	0x08007b4f
 8007b10:	08007b4f 	.word	0x08007b4f
 8007b14:	08007b57 	.word	0x08007b57
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b18:	4bab      	ldr	r3, [pc, #684]	@ (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b1c:	4aaa      	ldr	r2, [pc, #680]	@ (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007b1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b22:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007b24:	e018      	b.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007b26:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b2a:	3308      	adds	r3, #8
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f003 fa55 	bl	800afdc <RCCEx_PLL2_Config>
 8007b32:	4603      	mov	r3, r0
 8007b34:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007b38:	e00e      	b.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007b3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b3e:	3330      	adds	r3, #48	@ 0x30
 8007b40:	4618      	mov	r0, r3
 8007b42:	f003 fae3 	bl	800b10c <RCCEx_PLL3_Config>
 8007b46:	4603      	mov	r3, r0
 8007b48:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007b4c:	e004      	b.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007b54:	e000      	b.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8007b56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b58:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d10d      	bne.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8007b60:	4b99      	ldr	r3, [pc, #612]	@ (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b66:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007b6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b6e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007b72:	4a95      	ldr	r2, [pc, #596]	@ (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007b74:	430b      	orrs	r3, r1
 8007b76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007b7a:	e003      	b.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b7c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007b80:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8007b84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007b90:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007b92:	2300      	movs	r3, #0
 8007b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b96:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	d04e      	beq.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8007ba0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ba4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007ba8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bac:	d02e      	beq.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8007bae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bb2:	d827      	bhi.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8007bb4:	2bc0      	cmp	r3, #192	@ 0xc0
 8007bb6:	d02b      	beq.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8007bb8:	2bc0      	cmp	r3, #192	@ 0xc0
 8007bba:	d823      	bhi.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8007bbc:	2b80      	cmp	r3, #128	@ 0x80
 8007bbe:	d017      	beq.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8007bc0:	2b80      	cmp	r3, #128	@ 0x80
 8007bc2:	d81f      	bhi.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d002      	beq.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8007bc8:	2b40      	cmp	r3, #64	@ 0x40
 8007bca:	d007      	beq.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8007bcc:	e01a      	b.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bce:	4b7e      	ldr	r3, [pc, #504]	@ (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bd2:	4a7d      	ldr	r2, [pc, #500]	@ (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007bd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007bd8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8007bda:	e01a      	b.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007bdc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007be0:	3308      	adds	r3, #8
 8007be2:	4618      	mov	r0, r3
 8007be4:	f003 f9fa 	bl	800afdc <RCCEx_PLL2_Config>
 8007be8:	4603      	mov	r3, r0
 8007bea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8007bee:	e010      	b.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007bf0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007bf4:	3330      	adds	r3, #48	@ 0x30
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f003 fa88 	bl	800b10c <RCCEx_PLL3_Config>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8007c02:	e006      	b.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007c0a:	e002      	b.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8007c0c:	bf00      	nop
 8007c0e:	e000      	b.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8007c10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c12:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d10d      	bne.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8007c1a:	4b6b      	ldr	r3, [pc, #428]	@ (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007c20:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007c24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007c2c:	4a66      	ldr	r2, [pc, #408]	@ (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007c2e:	430b      	orrs	r3, r1
 8007c30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007c34:	e003      	b.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c36:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007c3a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8007c3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c46:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007c4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c50:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007c54:	460b      	mov	r3, r1
 8007c56:	4313      	orrs	r3, r2
 8007c58:	d055      	beq.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8007c5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c5e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8007c62:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007c66:	d031      	beq.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8007c68:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007c6c:	d82a      	bhi.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8007c6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c72:	d02d      	beq.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8007c74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c78:	d824      	bhi.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8007c7a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007c7e:	d029      	beq.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8007c80:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007c84:	d81e      	bhi.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8007c86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c8a:	d011      	beq.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8007c8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c90:	d818      	bhi.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d020      	beq.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8007c96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c9a:	d113      	bne.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007c9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ca0:	3308      	adds	r3, #8
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f003 f99a 	bl	800afdc <RCCEx_PLL2_Config>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8007cae:	e014      	b.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007cb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007cb4:	3330      	adds	r3, #48	@ 0x30
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f003 fa28 	bl	800b10c <RCCEx_PLL3_Config>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8007cc2:	e00a      	b.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007cca:	e006      	b.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8007ccc:	bf00      	nop
 8007cce:	e004      	b.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8007cd0:	bf00      	nop
 8007cd2:	e002      	b.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8007cd4:	bf00      	nop
 8007cd6:	e000      	b.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8007cd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cda:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10d      	bne.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8007ce2:	4b39      	ldr	r3, [pc, #228]	@ (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ce8:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8007cec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007cf0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8007cf4:	4a34      	ldr	r2, [pc, #208]	@ (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007cf6:	430b      	orrs	r3, r1
 8007cf8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007cfc:	e003      	b.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cfe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007d02:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8007d06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d0e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007d12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007d14:	2300      	movs	r3, #0
 8007d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d18:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	d058      	beq.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8007d22:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d2a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007d2e:	d031      	beq.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8007d30:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007d34:	d82a      	bhi.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8007d36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d3a:	d02d      	beq.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8007d3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d40:	d824      	bhi.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8007d42:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007d46:	d029      	beq.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8007d48:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007d4c:	d81e      	bhi.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8007d4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d52:	d011      	beq.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8007d54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d58:	d818      	bhi.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d020      	beq.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8007d5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d62:	d113      	bne.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007d64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d68:	3308      	adds	r3, #8
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f003 f936 	bl	800afdc <RCCEx_PLL2_Config>
 8007d70:	4603      	mov	r3, r0
 8007d72:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8007d76:	e014      	b.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007d78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d7c:	3330      	adds	r3, #48	@ 0x30
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f003 f9c4 	bl	800b10c <RCCEx_PLL3_Config>
 8007d84:	4603      	mov	r3, r0
 8007d86:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8007d8a:	e00a      	b.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007d92:	e006      	b.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8007d94:	bf00      	nop
 8007d96:	e004      	b.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8007d98:	bf00      	nop
 8007d9a:	e002      	b.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8007d9c:	bf00      	nop
 8007d9e:	e000      	b.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8007da0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007da2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d110      	bne.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8007daa:	4b07      	ldr	r3, [pc, #28]	@ (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007db0:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8007db4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007db8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007dbc:	4902      	ldr	r1, [pc, #8]	@ (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8007dc4:	e006      	b.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8007dc6:	bf00      	nop
 8007dc8:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dcc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007dd0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007dd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ddc:	2100      	movs	r1, #0
 8007dde:	6239      	str	r1, [r7, #32]
 8007de0:	f003 0301 	and.w	r3, r3, #1
 8007de4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007de6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007dea:	460b      	mov	r3, r1
 8007dec:	4313      	orrs	r3, r2
 8007dee:	d055      	beq.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8007df0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007df4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007df8:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8007dfc:	d031      	beq.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8007dfe:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8007e02:	d82a      	bhi.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8007e04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e08:	d02d      	beq.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8007e0a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e0e:	d824      	bhi.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8007e10:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8007e14:	d029      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8007e16:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8007e1a:	d81e      	bhi.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8007e1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e20:	d011      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8007e22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e26:	d818      	bhi.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d020      	beq.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8007e2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e30:	d113      	bne.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007e32:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e36:	3308      	adds	r3, #8
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f003 f8cf 	bl	800afdc <RCCEx_PLL2_Config>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007e44:	e014      	b.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007e46:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e4a:	3330      	adds	r3, #48	@ 0x30
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f003 f95d 	bl	800b10c <RCCEx_PLL3_Config>
 8007e52:	4603      	mov	r3, r0
 8007e54:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007e58:	e00a      	b.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007e60:	e006      	b.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8007e62:	bf00      	nop
 8007e64:	e004      	b.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8007e66:	bf00      	nop
 8007e68:	e002      	b.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8007e6a:	bf00      	nop
 8007e6c:	e000      	b.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8007e6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e70:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d10d      	bne.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8007e78:	4b88      	ldr	r3, [pc, #544]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e7e:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8007e82:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007e8a:	4984      	ldr	r1, [pc, #528]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8007e92:	e003      	b.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e94:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007e98:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007e9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea4:	2100      	movs	r1, #0
 8007ea6:	61b9      	str	r1, [r7, #24]
 8007ea8:	f003 0302 	and.w	r3, r3, #2
 8007eac:	61fb      	str	r3, [r7, #28]
 8007eae:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	d03d      	beq.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8007eb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ebc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007ec0:	2b03      	cmp	r3, #3
 8007ec2:	d81c      	bhi.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8007ec4:	a201      	add	r2, pc, #4	@ (adr r2, 8007ecc <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8007ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eca:	bf00      	nop
 8007ecc:	08007f07 	.word	0x08007f07
 8007ed0:	08007edd 	.word	0x08007edd
 8007ed4:	08007eeb 	.word	0x08007eeb
 8007ed8:	08007f07 	.word	0x08007f07
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007edc:	4b6f      	ldr	r3, [pc, #444]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ee0:	4a6e      	ldr	r2, [pc, #440]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007ee2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ee6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007ee8:	e00e      	b.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007eea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007eee:	3308      	adds	r3, #8
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f003 f873 	bl	800afdc <RCCEx_PLL2_Config>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8007efc:	e004      	b.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007f04:	e000      	b.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8007f06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f08:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d10d      	bne.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8007f10:	4b62      	ldr	r3, [pc, #392]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007f12:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007f16:	f023 0203 	bic.w	r2, r3, #3
 8007f1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f1e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007f22:	495e      	ldr	r1, [pc, #376]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007f24:	4313      	orrs	r3, r2
 8007f26:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8007f2a:	e003      	b.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f2c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007f30:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007f34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3c:	2100      	movs	r1, #0
 8007f3e:	6139      	str	r1, [r7, #16]
 8007f40:	f003 0304 	and.w	r3, r3, #4
 8007f44:	617b      	str	r3, [r7, #20]
 8007f46:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	d03a      	beq.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8007f50:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f54:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007f58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f5c:	d00e      	beq.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8007f5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f62:	d815      	bhi.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d017      	beq.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8007f68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f6c:	d110      	bne.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f6e:	4b4b      	ldr	r3, [pc, #300]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f72:	4a4a      	ldr	r2, [pc, #296]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007f74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f78:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8007f7a:	e00e      	b.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007f7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f80:	3308      	adds	r3, #8
 8007f82:	4618      	mov	r0, r3
 8007f84:	f003 f82a 	bl	800afdc <RCCEx_PLL2_Config>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8007f8e:	e004      	b.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007f96:	e000      	b.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8007f98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f9a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d10d      	bne.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8007fa2:	4b3e      	ldr	r3, [pc, #248]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007fa4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007fa8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007fac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007fb0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007fb4:	4939      	ldr	r1, [pc, #228]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8007fbc:	e003      	b.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fbe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007fc2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007fc6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fce:	2100      	movs	r1, #0
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	f003 0310 	and.w	r3, r3, #16
 8007fd6:	60fb      	str	r3, [r7, #12]
 8007fd8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007fdc:	460b      	mov	r3, r1
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	d038      	beq.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8007fe2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007fe6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8007fea:	2b30      	cmp	r3, #48	@ 0x30
 8007fec:	d01b      	beq.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8007fee:	2b30      	cmp	r3, #48	@ 0x30
 8007ff0:	d815      	bhi.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8007ff2:	2b10      	cmp	r3, #16
 8007ff4:	d002      	beq.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8007ff6:	2b20      	cmp	r3, #32
 8007ff8:	d007      	beq.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8007ffa:	e010      	b.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ffc:	4b27      	ldr	r3, [pc, #156]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008000:	4a26      	ldr	r2, [pc, #152]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008002:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008006:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8008008:	e00e      	b.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800800a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800800e:	3330      	adds	r3, #48	@ 0x30
 8008010:	4618      	mov	r0, r3
 8008012:	f003 f87b 	bl	800b10c <RCCEx_PLL3_Config>
 8008016:	4603      	mov	r3, r0
 8008018:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 800801c:	e004      	b.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008024:	e000      	b.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8008026:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008028:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800802c:	2b00      	cmp	r3, #0
 800802e:	d10d      	bne.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8008030:	4b1a      	ldr	r3, [pc, #104]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008032:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008036:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800803a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800803e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8008042:	4916      	ldr	r1, [pc, #88]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008044:	4313      	orrs	r3, r2
 8008046:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800804a:	e003      	b.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800804c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008050:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008054:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805c:	2100      	movs	r1, #0
 800805e:	6039      	str	r1, [r7, #0]
 8008060:	f003 0308 	and.w	r3, r3, #8
 8008064:	607b      	str	r3, [r7, #4]
 8008066:	e9d7 1200 	ldrd	r1, r2, [r7]
 800806a:	460b      	mov	r3, r1
 800806c:	4313      	orrs	r3, r2
 800806e:	d00c      	beq.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8008070:	4b0a      	ldr	r3, [pc, #40]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008072:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008076:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800807a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800807e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8008082:	4906      	ldr	r1, [pc, #24]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008084:	4313      	orrs	r3, r2
 8008086:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 800808a:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 800808e:	4618      	mov	r0, r3
 8008090:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8008094:	46bd      	mov	sp, r7
 8008096:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800809a:	bf00      	nop
 800809c:	44020c00 	.word	0x44020c00

080080a0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b08b      	sub	sp, #44	@ 0x2c
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80080a8:	4bae      	ldr	r3, [pc, #696]	@ (8008364 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80080aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080b0:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80080b2:	4bac      	ldr	r3, [pc, #688]	@ (8008364 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80080b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080b6:	f003 0303 	and.w	r3, r3, #3
 80080ba:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80080bc:	4ba9      	ldr	r3, [pc, #676]	@ (8008364 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80080be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080c0:	0a1b      	lsrs	r3, r3, #8
 80080c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80080c6:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80080c8:	4ba6      	ldr	r3, [pc, #664]	@ (8008364 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80080ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080cc:	091b      	lsrs	r3, r3, #4
 80080ce:	f003 0301 	and.w	r3, r3, #1
 80080d2:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80080d4:	4ba3      	ldr	r3, [pc, #652]	@ (8008364 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80080d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080d8:	08db      	lsrs	r3, r3, #3
 80080da:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80080de:	697a      	ldr	r2, [r7, #20]
 80080e0:	fb02 f303 	mul.w	r3, r2, r3
 80080e4:	ee07 3a90 	vmov	s15, r3
 80080e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080ec:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80080f0:	69bb      	ldr	r3, [r7, #24]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	f000 8126 	beq.w	8008344 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 80080f8:	69fb      	ldr	r3, [r7, #28]
 80080fa:	2b03      	cmp	r3, #3
 80080fc:	d053      	beq.n	80081a6 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	2b03      	cmp	r3, #3
 8008102:	d86f      	bhi.n	80081e4 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8008104:	69fb      	ldr	r3, [r7, #28]
 8008106:	2b01      	cmp	r3, #1
 8008108:	d003      	beq.n	8008112 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	2b02      	cmp	r3, #2
 800810e:	d02b      	beq.n	8008168 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8008110:	e068      	b.n	80081e4 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008112:	4b94      	ldr	r3, [pc, #592]	@ (8008364 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	08db      	lsrs	r3, r3, #3
 8008118:	f003 0303 	and.w	r3, r3, #3
 800811c:	4a92      	ldr	r2, [pc, #584]	@ (8008368 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800811e:	fa22 f303 	lsr.w	r3, r2, r3
 8008122:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	ee07 3a90 	vmov	s15, r3
 800812a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800812e:	69bb      	ldr	r3, [r7, #24]
 8008130:	ee07 3a90 	vmov	s15, r3
 8008134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008138:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800813c:	6a3b      	ldr	r3, [r7, #32]
 800813e:	ee07 3a90 	vmov	s15, r3
 8008142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008146:	ed97 6a04 	vldr	s12, [r7, #16]
 800814a:	eddf 5a88 	vldr	s11, [pc, #544]	@ 800836c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800814e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008156:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800815a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800815e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008162:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008166:	e068      	b.n	800823a <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8008168:	69bb      	ldr	r3, [r7, #24]
 800816a:	ee07 3a90 	vmov	s15, r3
 800816e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008172:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8008370 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8008176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800817a:	6a3b      	ldr	r3, [r7, #32]
 800817c:	ee07 3a90 	vmov	s15, r3
 8008180:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008184:	ed97 6a04 	vldr	s12, [r7, #16]
 8008188:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800836c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800818c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008190:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008194:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008198:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800819c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081a0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80081a4:	e049      	b.n	800823a <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	ee07 3a90 	vmov	s15, r3
 80081ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081b0:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8008374 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 80081b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081b8:	6a3b      	ldr	r3, [r7, #32]
 80081ba:	ee07 3a90 	vmov	s15, r3
 80081be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081c2:	ed97 6a04 	vldr	s12, [r7, #16]
 80081c6:	eddf 5a69 	vldr	s11, [pc, #420]	@ 800836c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80081ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081de:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80081e2:	e02a      	b.n	800823a <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80081e4:	4b5f      	ldr	r3, [pc, #380]	@ (8008364 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	08db      	lsrs	r3, r3, #3
 80081ea:	f003 0303 	and.w	r3, r3, #3
 80081ee:	4a5e      	ldr	r2, [pc, #376]	@ (8008368 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80081f0:	fa22 f303 	lsr.w	r3, r2, r3
 80081f4:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	ee07 3a90 	vmov	s15, r3
 80081fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008200:	69bb      	ldr	r3, [r7, #24]
 8008202:	ee07 3a90 	vmov	s15, r3
 8008206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800820a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800820e:	6a3b      	ldr	r3, [r7, #32]
 8008210:	ee07 3a90 	vmov	s15, r3
 8008214:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008218:	ed97 6a04 	vldr	s12, [r7, #16]
 800821c:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800836c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8008220:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008224:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008228:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800822c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008230:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008234:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008238:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800823a:	4b4a      	ldr	r3, [pc, #296]	@ (8008364 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008242:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008246:	d121      	bne.n	800828c <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8008248:	4b46      	ldr	r3, [pc, #280]	@ (8008364 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800824a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800824c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008250:	2b00      	cmp	r3, #0
 8008252:	d017      	beq.n	8008284 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008254:	4b43      	ldr	r3, [pc, #268]	@ (8008364 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008256:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008258:	0a5b      	lsrs	r3, r3, #9
 800825a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800825e:	ee07 3a90 	vmov	s15, r3
 8008262:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8008266:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800826a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800826e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008272:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008276:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800827a:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	601a      	str	r2, [r3, #0]
 8008282:	e006      	b.n	8008292 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	601a      	str	r2, [r3, #0]
 800828a:	e002      	b.n	8008292 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008292:	4b34      	ldr	r3, [pc, #208]	@ (8008364 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800829a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800829e:	d121      	bne.n	80082e4 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80082a0:	4b30      	ldr	r3, [pc, #192]	@ (8008364 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80082a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d017      	beq.n	80082dc <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80082ac:	4b2d      	ldr	r3, [pc, #180]	@ (8008364 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80082ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082b0:	0c1b      	lsrs	r3, r3, #16
 80082b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082b6:	ee07 3a90 	vmov	s15, r3
 80082ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 80082be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80082c2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80082c6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80082ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082d2:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	605a      	str	r2, [r3, #4]
 80082da:	e006      	b.n	80082ea <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	605a      	str	r2, [r3, #4]
 80082e2:	e002      	b.n	80082ea <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80082ea:	4b1e      	ldr	r3, [pc, #120]	@ (8008364 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80082f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80082f6:	d121      	bne.n	800833c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80082f8:	4b1a      	ldr	r3, [pc, #104]	@ (8008364 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80082fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008300:	2b00      	cmp	r3, #0
 8008302:	d017      	beq.n	8008334 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008304:	4b17      	ldr	r3, [pc, #92]	@ (8008364 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008306:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008308:	0e1b      	lsrs	r3, r3, #24
 800830a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800830e:	ee07 3a90 	vmov	s15, r3
 8008312:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8008316:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800831a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800831e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008322:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008326:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800832a:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008332:	e010      	b.n	8008356 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	609a      	str	r2, [r3, #8]
}
 800833a:	e00c      	b.n	8008356 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2200      	movs	r2, #0
 8008340:	609a      	str	r2, [r3, #8]
}
 8008342:	e008      	b.n	8008356 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2200      	movs	r2, #0
 8008348:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	609a      	str	r2, [r3, #8]
}
 8008356:	bf00      	nop
 8008358:	372c      	adds	r7, #44	@ 0x2c
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop
 8008364:	44020c00 	.word	0x44020c00
 8008368:	03d09000 	.word	0x03d09000
 800836c:	46000000 	.word	0x46000000
 8008370:	4a742400 	.word	0x4a742400
 8008374:	4af42400 	.word	0x4af42400

08008378 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8008378:	b480      	push	{r7}
 800837a:	b08b      	sub	sp, #44	@ 0x2c
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8008380:	4bae      	ldr	r3, [pc, #696]	@ (800863c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008388:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800838a:	4bac      	ldr	r3, [pc, #688]	@ (800863c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800838c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800838e:	f003 0303 	and.w	r3, r3, #3
 8008392:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8008394:	4ba9      	ldr	r3, [pc, #676]	@ (800863c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008398:	0a1b      	lsrs	r3, r3, #8
 800839a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800839e:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80083a0:	4ba6      	ldr	r3, [pc, #664]	@ (800863c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80083a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083a4:	091b      	lsrs	r3, r3, #4
 80083a6:	f003 0301 	and.w	r3, r3, #1
 80083aa:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80083ac:	4ba3      	ldr	r3, [pc, #652]	@ (800863c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80083ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083b0:	08db      	lsrs	r3, r3, #3
 80083b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80083b6:	697a      	ldr	r2, [r7, #20]
 80083b8:	fb02 f303 	mul.w	r3, r2, r3
 80083bc:	ee07 3a90 	vmov	s15, r3
 80083c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083c4:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	f000 8126 	beq.w	800861c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 80083d0:	69fb      	ldr	r3, [r7, #28]
 80083d2:	2b03      	cmp	r3, #3
 80083d4:	d053      	beq.n	800847e <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 80083d6:	69fb      	ldr	r3, [r7, #28]
 80083d8:	2b03      	cmp	r3, #3
 80083da:	d86f      	bhi.n	80084bc <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d003      	beq.n	80083ea <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 80083e2:	69fb      	ldr	r3, [r7, #28]
 80083e4:	2b02      	cmp	r3, #2
 80083e6:	d02b      	beq.n	8008440 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80083e8:	e068      	b.n	80084bc <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80083ea:	4b94      	ldr	r3, [pc, #592]	@ (800863c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	08db      	lsrs	r3, r3, #3
 80083f0:	f003 0303 	and.w	r3, r3, #3
 80083f4:	4a92      	ldr	r2, [pc, #584]	@ (8008640 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80083f6:	fa22 f303 	lsr.w	r3, r2, r3
 80083fa:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	ee07 3a90 	vmov	s15, r3
 8008402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	ee07 3a90 	vmov	s15, r3
 800840c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008410:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008414:	6a3b      	ldr	r3, [r7, #32]
 8008416:	ee07 3a90 	vmov	s15, r3
 800841a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800841e:	ed97 6a04 	vldr	s12, [r7, #16]
 8008422:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8008644 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8008426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800842a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800842e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800843a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800843e:	e068      	b.n	8008512 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8008440:	69bb      	ldr	r3, [r7, #24]
 8008442:	ee07 3a90 	vmov	s15, r3
 8008446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800844a:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8008648 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800844e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008452:	6a3b      	ldr	r3, [r7, #32]
 8008454:	ee07 3a90 	vmov	s15, r3
 8008458:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800845c:	ed97 6a04 	vldr	s12, [r7, #16]
 8008460:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008644 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8008464:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008468:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800846c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008470:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008474:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008478:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800847c:	e049      	b.n	8008512 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800847e:	69bb      	ldr	r3, [r7, #24]
 8008480:	ee07 3a90 	vmov	s15, r3
 8008484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008488:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800864c <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 800848c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008490:	6a3b      	ldr	r3, [r7, #32]
 8008492:	ee07 3a90 	vmov	s15, r3
 8008496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800849a:	ed97 6a04 	vldr	s12, [r7, #16]
 800849e:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8008644 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80084a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084b6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80084ba:	e02a      	b.n	8008512 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80084bc:	4b5f      	ldr	r3, [pc, #380]	@ (800863c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	08db      	lsrs	r3, r3, #3
 80084c2:	f003 0303 	and.w	r3, r3, #3
 80084c6:	4a5e      	ldr	r2, [pc, #376]	@ (8008640 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80084c8:	fa22 f303 	lsr.w	r3, r2, r3
 80084cc:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	ee07 3a90 	vmov	s15, r3
 80084d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084d8:	69bb      	ldr	r3, [r7, #24]
 80084da:	ee07 3a90 	vmov	s15, r3
 80084de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084e6:	6a3b      	ldr	r3, [r7, #32]
 80084e8:	ee07 3a90 	vmov	s15, r3
 80084ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084f0:	ed97 6a04 	vldr	s12, [r7, #16]
 80084f4:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8008644 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80084f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008500:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008504:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008508:	ee67 7a27 	vmul.f32	s15, s14, s15
 800850c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008510:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008512:	4b4a      	ldr	r3, [pc, #296]	@ (800863c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800851a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800851e:	d121      	bne.n	8008564 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8008520:	4b46      	ldr	r3, [pc, #280]	@ (800863c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008524:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008528:	2b00      	cmp	r3, #0
 800852a:	d017      	beq.n	800855c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800852c:	4b43      	ldr	r3, [pc, #268]	@ (800863c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800852e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008530:	0a5b      	lsrs	r3, r3, #9
 8008532:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008536:	ee07 3a90 	vmov	s15, r3
 800853a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 800853e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008542:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8008546:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800854a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800854e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008552:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	601a      	str	r2, [r3, #0]
 800855a:	e006      	b.n	800856a <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	601a      	str	r2, [r3, #0]
 8008562:	e002      	b.n	800856a <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800856a:	4b34      	ldr	r3, [pc, #208]	@ (800863c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008572:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008576:	d121      	bne.n	80085bc <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8008578:	4b30      	ldr	r3, [pc, #192]	@ (800863c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800857a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800857c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008580:	2b00      	cmp	r3, #0
 8008582:	d017      	beq.n	80085b4 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008584:	4b2d      	ldr	r3, [pc, #180]	@ (800863c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008588:	0c1b      	lsrs	r3, r3, #16
 800858a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800858e:	ee07 3a90 	vmov	s15, r3
 8008592:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8008596:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800859a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800859e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80085a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085aa:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	605a      	str	r2, [r3, #4]
 80085b2:	e006      	b.n	80085c2 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	605a      	str	r2, [r3, #4]
 80085ba:	e002      	b.n	80085c2 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80085c2:	4b1e      	ldr	r3, [pc, #120]	@ (800863c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80085ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085ce:	d121      	bne.n	8008614 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80085d0:	4b1a      	ldr	r3, [pc, #104]	@ (800863c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80085d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d017      	beq.n	800860c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80085dc:	4b17      	ldr	r3, [pc, #92]	@ (800863c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80085de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085e0:	0e1b      	lsrs	r3, r3, #24
 80085e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085e6:	ee07 3a90 	vmov	s15, r3
 80085ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80085ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80085f2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80085f6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80085fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008602:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800860a:	e010      	b.n	800862e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	609a      	str	r2, [r3, #8]
}
 8008612:	e00c      	b.n	800862e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2200      	movs	r2, #0
 8008618:	609a      	str	r2, [r3, #8]
}
 800861a:	e008      	b.n	800862e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	609a      	str	r2, [r3, #8]
}
 800862e:	bf00      	nop
 8008630:	372c      	adds	r7, #44	@ 0x2c
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop
 800863c:	44020c00 	.word	0x44020c00
 8008640:	03d09000 	.word	0x03d09000
 8008644:	46000000 	.word	0x46000000
 8008648:	4a742400 	.word	0x4a742400
 800864c:	4af42400 	.word	0x4af42400

08008650 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8008650:	b480      	push	{r7}
 8008652:	b08b      	sub	sp, #44	@ 0x2c
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8008658:	4bae      	ldr	r3, [pc, #696]	@ (8008914 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800865a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800865c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008660:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8008662:	4bac      	ldr	r3, [pc, #688]	@ (8008914 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008666:	f003 0303 	and.w	r3, r3, #3
 800866a:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 800866c:	4ba9      	ldr	r3, [pc, #676]	@ (8008914 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800866e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008670:	0a1b      	lsrs	r3, r3, #8
 8008672:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008676:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8008678:	4ba6      	ldr	r3, [pc, #664]	@ (8008914 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800867a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800867c:	091b      	lsrs	r3, r3, #4
 800867e:	f003 0301 	and.w	r3, r3, #1
 8008682:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8008684:	4ba3      	ldr	r3, [pc, #652]	@ (8008914 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008686:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008688:	08db      	lsrs	r3, r3, #3
 800868a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800868e:	697a      	ldr	r2, [r7, #20]
 8008690:	fb02 f303 	mul.w	r3, r2, r3
 8008694:	ee07 3a90 	vmov	s15, r3
 8008698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800869c:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 80086a0:	69bb      	ldr	r3, [r7, #24]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	f000 8126 	beq.w	80088f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 80086a8:	69fb      	ldr	r3, [r7, #28]
 80086aa:	2b03      	cmp	r3, #3
 80086ac:	d053      	beq.n	8008756 <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 80086ae:	69fb      	ldr	r3, [r7, #28]
 80086b0:	2b03      	cmp	r3, #3
 80086b2:	d86f      	bhi.n	8008794 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 80086b4:	69fb      	ldr	r3, [r7, #28]
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d003      	beq.n	80086c2 <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	2b02      	cmp	r3, #2
 80086be:	d02b      	beq.n	8008718 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80086c0:	e068      	b.n	8008794 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80086c2:	4b94      	ldr	r3, [pc, #592]	@ (8008914 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	08db      	lsrs	r3, r3, #3
 80086c8:	f003 0303 	and.w	r3, r3, #3
 80086cc:	4a92      	ldr	r2, [pc, #584]	@ (8008918 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80086ce:	fa22 f303 	lsr.w	r3, r2, r3
 80086d2:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	ee07 3a90 	vmov	s15, r3
 80086da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	ee07 3a90 	vmov	s15, r3
 80086e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086ec:	6a3b      	ldr	r3, [r7, #32]
 80086ee:	ee07 3a90 	vmov	s15, r3
 80086f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086f6:	ed97 6a04 	vldr	s12, [r7, #16]
 80086fa:	eddf 5a88 	vldr	s11, [pc, #544]	@ 800891c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80086fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008706:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800870a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800870e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008712:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008716:	e068      	b.n	80087ea <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	ee07 3a90 	vmov	s15, r3
 800871e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008722:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8008920 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8008726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800872a:	6a3b      	ldr	r3, [r7, #32]
 800872c:	ee07 3a90 	vmov	s15, r3
 8008730:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008734:	ed97 6a04 	vldr	s12, [r7, #16]
 8008738:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800891c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800873c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008740:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008744:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008748:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800874c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008750:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008754:	e049      	b.n	80087ea <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8008756:	69bb      	ldr	r3, [r7, #24]
 8008758:	ee07 3a90 	vmov	s15, r3
 800875c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008760:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8008924 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 8008764:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008768:	6a3b      	ldr	r3, [r7, #32]
 800876a:	ee07 3a90 	vmov	s15, r3
 800876e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008772:	ed97 6a04 	vldr	s12, [r7, #16]
 8008776:	eddf 5a69 	vldr	s11, [pc, #420]	@ 800891c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800877a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800877e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008782:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800878a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800878e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008792:	e02a      	b.n	80087ea <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008794:	4b5f      	ldr	r3, [pc, #380]	@ (8008914 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	08db      	lsrs	r3, r3, #3
 800879a:	f003 0303 	and.w	r3, r3, #3
 800879e:	4a5e      	ldr	r2, [pc, #376]	@ (8008918 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80087a0:	fa22 f303 	lsr.w	r3, r2, r3
 80087a4:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	ee07 3a90 	vmov	s15, r3
 80087ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087b0:	69bb      	ldr	r3, [r7, #24]
 80087b2:	ee07 3a90 	vmov	s15, r3
 80087b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087be:	6a3b      	ldr	r3, [r7, #32]
 80087c0:	ee07 3a90 	vmov	s15, r3
 80087c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087c8:	ed97 6a04 	vldr	s12, [r7, #16]
 80087cc:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800891c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80087d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087e4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80087e8:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80087ea:	4b4a      	ldr	r3, [pc, #296]	@ (8008914 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80087f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087f6:	d121      	bne.n	800883c <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80087f8:	4b46      	ldr	r3, [pc, #280]	@ (8008914 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80087fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008800:	2b00      	cmp	r3, #0
 8008802:	d017      	beq.n	8008834 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008804:	4b43      	ldr	r3, [pc, #268]	@ (8008914 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008808:	0a5b      	lsrs	r3, r3, #9
 800880a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800880e:	ee07 3a90 	vmov	s15, r3
 8008812:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8008816:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800881a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800881e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008822:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008826:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800882a:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	601a      	str	r2, [r3, #0]
 8008832:	e006      	b.n	8008842 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	601a      	str	r2, [r3, #0]
 800883a:	e002      	b.n	8008842 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008842:	4b34      	ldr	r3, [pc, #208]	@ (8008914 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800884a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800884e:	d121      	bne.n	8008894 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8008850:	4b30      	ldr	r3, [pc, #192]	@ (8008914 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008854:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008858:	2b00      	cmp	r3, #0
 800885a:	d017      	beq.n	800888c <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800885c:	4b2d      	ldr	r3, [pc, #180]	@ (8008914 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800885e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008860:	0c1b      	lsrs	r3, r3, #16
 8008862:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008866:	ee07 3a90 	vmov	s15, r3
 800886a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 800886e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008872:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8008876:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800887a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800887e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008882:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	605a      	str	r2, [r3, #4]
 800888a:	e006      	b.n	800889a <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2200      	movs	r2, #0
 8008890:	605a      	str	r2, [r3, #4]
 8008892:	e002      	b.n	800889a <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2200      	movs	r2, #0
 8008898:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800889a:	4b1e      	ldr	r3, [pc, #120]	@ (8008914 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80088a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088a6:	d121      	bne.n	80088ec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80088a8:	4b1a      	ldr	r3, [pc, #104]	@ (8008914 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80088aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d017      	beq.n	80088e4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80088b4:	4b17      	ldr	r3, [pc, #92]	@ (8008914 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80088b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088b8:	0e1b      	lsrs	r3, r3, #24
 80088ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088be:	ee07 3a90 	vmov	s15, r3
 80088c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 80088c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80088ca:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80088ce:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80088d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088da:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80088e2:	e010      	b.n	8008906 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	609a      	str	r2, [r3, #8]
}
 80088ea:	e00c      	b.n	8008906 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	609a      	str	r2, [r3, #8]
}
 80088f2:	e008      	b.n	8008906 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2200      	movs	r2, #0
 80088f8:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	609a      	str	r2, [r3, #8]
}
 8008906:	bf00      	nop
 8008908:	372c      	adds	r7, #44	@ 0x2c
 800890a:	46bd      	mov	sp, r7
 800890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008910:	4770      	bx	lr
 8008912:	bf00      	nop
 8008914:	44020c00 	.word	0x44020c00
 8008918:	03d09000 	.word	0x03d09000
 800891c:	46000000 	.word	0x46000000
 8008920:	4a742400 	.word	0x4a742400
 8008924:	4af42400 	.word	0x4af42400

08008928 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008928:	b590      	push	{r4, r7, lr}
 800892a:	b08f      	sub	sp, #60	@ 0x3c
 800892c:	af00      	add	r7, sp, #0
 800892e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8008932:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008936:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 800893a:	4321      	orrs	r1, r4
 800893c:	d150      	bne.n	80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800893e:	4b26      	ldr	r3, [pc, #152]	@ (80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008940:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008944:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008948:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800894a:	4b23      	ldr	r3, [pc, #140]	@ (80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800894c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008950:	f003 0302 	and.w	r3, r3, #2
 8008954:	2b02      	cmp	r3, #2
 8008956:	d108      	bne.n	800896a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8008958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800895a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800895e:	d104      	bne.n	800896a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8008960:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008964:	637b      	str	r3, [r7, #52]	@ 0x34
 8008966:	f002 bb2a 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800896a:	4b1b      	ldr	r3, [pc, #108]	@ (80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800896c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008970:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008974:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008978:	d108      	bne.n	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800897a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800897c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008980:	d104      	bne.n	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8008982:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008986:	637b      	str	r3, [r7, #52]	@ 0x34
 8008988:	f002 bb19 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 800898c:	4b12      	ldr	r3, [pc, #72]	@ (80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008994:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008998:	d119      	bne.n	80089ce <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800899a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800899c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80089a0:	d115      	bne.n	80089ce <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80089a2:	4b0d      	ldr	r3, [pc, #52]	@ (80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80089a4:	69db      	ldr	r3, [r3, #28]
 80089a6:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80089aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089ae:	d30a      	bcc.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80089b0:	4b09      	ldr	r3, [pc, #36]	@ (80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80089b2:	69db      	ldr	r3, [r3, #28]
 80089b4:	0a1b      	lsrs	r3, r3, #8
 80089b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80089ba:	4a08      	ldr	r2, [pc, #32]	@ (80089dc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80089bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80089c0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80089c2:	f002 bafc 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 80089c6:	2300      	movs	r3, #0
 80089c8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80089ca:	f002 baf8 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80089ce:	2300      	movs	r3, #0
 80089d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80089d2:	f002 baf4 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80089d6:	bf00      	nop
 80089d8:	44020c00 	.word	0x44020c00
 80089dc:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80089e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80089e4:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 80089e8:	ea50 0104 	orrs.w	r1, r0, r4
 80089ec:	f001 8275 	beq.w	8009eda <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 80089f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80089f4:	2801      	cmp	r0, #1
 80089f6:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 80089fa:	f082 82dd 	bcs.w	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80089fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a02:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8008a06:	ea50 0104 	orrs.w	r1, r0, r4
 8008a0a:	f001 816c 	beq.w	8009ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 8008a0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a12:	2801      	cmp	r0, #1
 8008a14:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8008a18:	f082 82ce 	bcs.w	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008a1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a20:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 8008a24:	ea50 0104 	orrs.w	r1, r0, r4
 8008a28:	f001 8602 	beq.w	800a630 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8008a2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a30:	2801      	cmp	r0, #1
 8008a32:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 8008a36:	f082 82bf 	bcs.w	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008a3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a3e:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 8008a42:	ea50 0104 	orrs.w	r1, r0, r4
 8008a46:	f001 854c 	beq.w	800a4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8008a4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a4e:	2801      	cmp	r0, #1
 8008a50:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 8008a54:	f082 82b0 	bcs.w	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008a58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a5c:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 8008a60:	ea50 0104 	orrs.w	r1, r0, r4
 8008a64:	f001 849e 	beq.w	800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8008a68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a6c:	2801      	cmp	r0, #1
 8008a6e:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 8008a72:	f082 82a1 	bcs.w	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008a76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a7a:	f1a1 0420 	sub.w	r4, r1, #32
 8008a7e:	ea50 0104 	orrs.w	r1, r0, r4
 8008a82:	f001 83e8 	beq.w	800a256 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8008a86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a8a:	2801      	cmp	r0, #1
 8008a8c:	f171 0120 	sbcs.w	r1, r1, #32
 8008a90:	f082 8292 	bcs.w	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008a94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a98:	f1a1 0410 	sub.w	r4, r1, #16
 8008a9c:	ea50 0104 	orrs.w	r1, r0, r4
 8008aa0:	f002 8256 	beq.w	800af50 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8008aa4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008aa8:	2801      	cmp	r0, #1
 8008aaa:	f171 0110 	sbcs.w	r1, r1, #16
 8008aae:	f082 8283 	bcs.w	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008ab2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ab6:	f1a1 0408 	sub.w	r4, r1, #8
 8008aba:	ea50 0104 	orrs.w	r1, r0, r4
 8008abe:	f002 81cc 	beq.w	800ae5a <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8008ac2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ac6:	2801      	cmp	r0, #1
 8008ac8:	f171 0108 	sbcs.w	r1, r1, #8
 8008acc:	f082 8274 	bcs.w	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008ad0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ad4:	1f0c      	subs	r4, r1, #4
 8008ad6:	ea50 0104 	orrs.w	r1, r0, r4
 8008ada:	f001 8648 	beq.w	800a76e <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8008ade:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ae2:	2801      	cmp	r0, #1
 8008ae4:	f171 0104 	sbcs.w	r1, r1, #4
 8008ae8:	f082 8266 	bcs.w	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008aec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008af0:	1e8c      	subs	r4, r1, #2
 8008af2:	ea50 0104 	orrs.w	r1, r0, r4
 8008af6:	f002 8143 	beq.w	800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8008afa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008afe:	2801      	cmp	r0, #1
 8008b00:	f171 0102 	sbcs.w	r1, r1, #2
 8008b04:	f082 8258 	bcs.w	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008b08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b0c:	1e4c      	subs	r4, r1, #1
 8008b0e:	ea50 0104 	orrs.w	r1, r0, r4
 8008b12:	f002 80ce 	beq.w	800acb2 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8008b16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b1a:	2801      	cmp	r0, #1
 8008b1c:	f171 0101 	sbcs.w	r1, r1, #1
 8008b20:	f082 824a 	bcs.w	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008b24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b28:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8008b2c:	4321      	orrs	r1, r4
 8008b2e:	f002 8059 	beq.w	800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 8008b32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b36:	4cd9      	ldr	r4, [pc, #868]	@ (8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8008b38:	42a0      	cmp	r0, r4
 8008b3a:	f171 0100 	sbcs.w	r1, r1, #0
 8008b3e:	f082 823b 	bcs.w	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008b42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b46:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8008b4a:	4321      	orrs	r1, r4
 8008b4c:	f001 87d9 	beq.w	800ab02 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8008b50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b54:	4cd2      	ldr	r4, [pc, #840]	@ (8008ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8008b56:	42a0      	cmp	r0, r4
 8008b58:	f171 0100 	sbcs.w	r1, r1, #0
 8008b5c:	f082 822c 	bcs.w	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008b60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b64:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8008b68:	4321      	orrs	r1, r4
 8008b6a:	f001 8751 	beq.w	800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8008b6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b72:	4ccc      	ldr	r4, [pc, #816]	@ (8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8008b74:	42a0      	cmp	r0, r4
 8008b76:	f171 0100 	sbcs.w	r1, r1, #0
 8008b7a:	f082 821d 	bcs.w	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008b7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b82:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8008b86:	4321      	orrs	r1, r4
 8008b88:	f001 869a 	beq.w	800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8008b8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b90:	4cc5      	ldr	r4, [pc, #788]	@ (8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8008b92:	42a0      	cmp	r0, r4
 8008b94:	f171 0100 	sbcs.w	r1, r1, #0
 8008b98:	f082 820e 	bcs.w	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008b9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ba0:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8008ba4:	4321      	orrs	r1, r4
 8008ba6:	f001 8612 	beq.w	800a7ce <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8008baa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008bae:	4cbf      	ldr	r4, [pc, #764]	@ (8008eac <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8008bb0:	42a0      	cmp	r0, r4
 8008bb2:	f171 0100 	sbcs.w	r1, r1, #0
 8008bb6:	f082 81ff 	bcs.w	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008bba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008bbe:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8008bc2:	4321      	orrs	r1, r4
 8008bc4:	f002 817e 	beq.w	800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8008bc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008bcc:	4cb8      	ldr	r4, [pc, #736]	@ (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008bce:	42a0      	cmp	r0, r4
 8008bd0:	f171 0100 	sbcs.w	r1, r1, #0
 8008bd4:	f082 81f0 	bcs.w	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008bd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008bdc:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 8008be0:	4321      	orrs	r1, r4
 8008be2:	f000 829e 	beq.w	8009122 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8008be6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008bea:	4cb2      	ldr	r4, [pc, #712]	@ (8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008bec:	42a0      	cmp	r0, r4
 8008bee:	f171 0100 	sbcs.w	r1, r1, #0
 8008bf2:	f082 81e1 	bcs.w	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008bf6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008bfa:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8008bfe:	4321      	orrs	r1, r4
 8008c00:	f000 826d 	beq.w	80090de <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8008c04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c08:	4cab      	ldr	r4, [pc, #684]	@ (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008c0a:	42a0      	cmp	r0, r4
 8008c0c:	f171 0100 	sbcs.w	r1, r1, #0
 8008c10:	f082 81d2 	bcs.w	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008c14:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c18:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8008c1c:	4321      	orrs	r1, r4
 8008c1e:	f001 800d 	beq.w	8009c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8008c22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c26:	4ca5      	ldr	r4, [pc, #660]	@ (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008c28:	42a0      	cmp	r0, r4
 8008c2a:	f171 0100 	sbcs.w	r1, r1, #0
 8008c2e:	f082 81c3 	bcs.w	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008c32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c36:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 8008c3a:	4321      	orrs	r1, r4
 8008c3c:	f000 81d0 	beq.w	8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8008c40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c44:	4c9e      	ldr	r4, [pc, #632]	@ (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008c46:	42a0      	cmp	r0, r4
 8008c48:	f171 0100 	sbcs.w	r1, r1, #0
 8008c4c:	f082 81b4 	bcs.w	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008c50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c54:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 8008c58:	4321      	orrs	r1, r4
 8008c5a:	f000 8142 	beq.w	8008ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8008c5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c62:	4c98      	ldr	r4, [pc, #608]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008c64:	42a0      	cmp	r0, r4
 8008c66:	f171 0100 	sbcs.w	r1, r1, #0
 8008c6a:	f082 81a5 	bcs.w	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008c6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c72:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8008c76:	4321      	orrs	r1, r4
 8008c78:	f001 824e 	beq.w	800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8008c7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c80:	4c91      	ldr	r4, [pc, #580]	@ (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8008c82:	42a0      	cmp	r0, r4
 8008c84:	f171 0100 	sbcs.w	r1, r1, #0
 8008c88:	f082 8196 	bcs.w	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008c8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c90:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8008c94:	4321      	orrs	r1, r4
 8008c96:	f001 8197 	beq.w	8009fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8008c9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c9e:	4c8b      	ldr	r4, [pc, #556]	@ (8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8008ca0:	42a0      	cmp	r0, r4
 8008ca2:	f171 0100 	sbcs.w	r1, r1, #0
 8008ca6:	f082 8187 	bcs.w	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008caa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cae:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8008cb2:	4321      	orrs	r1, r4
 8008cb4:	f001 8154 	beq.w	8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8008cb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cbc:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8008cc0:	f171 0100 	sbcs.w	r1, r1, #0
 8008cc4:	f082 8178 	bcs.w	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008cc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ccc:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8008cd0:	4321      	orrs	r1, r4
 8008cd2:	f001 80b7 	beq.w	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8008cd6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cda:	f248 0401 	movw	r4, #32769	@ 0x8001
 8008cde:	42a0      	cmp	r0, r4
 8008ce0:	f171 0100 	sbcs.w	r1, r1, #0
 8008ce4:	f082 8168 	bcs.w	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008ce8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cec:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8008cf0:	4321      	orrs	r1, r4
 8008cf2:	f001 8064 	beq.w	8009dbe <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8008cf6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cfa:	f244 0401 	movw	r4, #16385	@ 0x4001
 8008cfe:	42a0      	cmp	r0, r4
 8008d00:	f171 0100 	sbcs.w	r1, r1, #0
 8008d04:	f082 8158 	bcs.w	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008d08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d0c:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8008d10:	4321      	orrs	r1, r4
 8008d12:	f001 8011 	beq.w	8009d38 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8008d16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d1a:	f242 0401 	movw	r4, #8193	@ 0x2001
 8008d1e:	42a0      	cmp	r0, r4
 8008d20:	f171 0100 	sbcs.w	r1, r1, #0
 8008d24:	f082 8148 	bcs.w	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008d28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d2c:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 8008d30:	4321      	orrs	r1, r4
 8008d32:	f000 871e 	beq.w	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8008d36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d3a:	f241 0401 	movw	r4, #4097	@ 0x1001
 8008d3e:	42a0      	cmp	r0, r4
 8008d40:	f171 0100 	sbcs.w	r1, r1, #0
 8008d44:	f082 8138 	bcs.w	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008d48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d4c:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 8008d50:	4321      	orrs	r1, r4
 8008d52:	f000 86a8 	beq.w	8009aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8008d56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d5a:	f640 0401 	movw	r4, #2049	@ 0x801
 8008d5e:	42a0      	cmp	r0, r4
 8008d60:	f171 0100 	sbcs.w	r1, r1, #0
 8008d64:	f082 8128 	bcs.w	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008d68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d6c:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 8008d70:	4321      	orrs	r1, r4
 8008d72:	f000 8632 	beq.w	80099da <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8008d76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d7a:	f240 4401 	movw	r4, #1025	@ 0x401
 8008d7e:	42a0      	cmp	r0, r4
 8008d80:	f171 0100 	sbcs.w	r1, r1, #0
 8008d84:	f082 8118 	bcs.w	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008d88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d8c:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 8008d90:	4321      	orrs	r1, r4
 8008d92:	f000 85b0 	beq.w	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8008d96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d9a:	f240 2401 	movw	r4, #513	@ 0x201
 8008d9e:	42a0      	cmp	r0, r4
 8008da0:	f171 0100 	sbcs.w	r1, r1, #0
 8008da4:	f082 8108 	bcs.w	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008da8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008dac:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 8008db0:	4321      	orrs	r1, r4
 8008db2:	f000 8535 	beq.w	8009820 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8008db6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008dba:	f240 1401 	movw	r4, #257	@ 0x101
 8008dbe:	42a0      	cmp	r0, r4
 8008dc0:	f171 0100 	sbcs.w	r1, r1, #0
 8008dc4:	f082 80f8 	bcs.w	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008dc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008dcc:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 8008dd0:	4321      	orrs	r1, r4
 8008dd2:	f000 84ba 	beq.w	800974a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8008dd6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008dda:	2881      	cmp	r0, #129	@ 0x81
 8008ddc:	f171 0100 	sbcs.w	r1, r1, #0
 8008de0:	f082 80ea 	bcs.w	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008de4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008de8:	2821      	cmp	r0, #33	@ 0x21
 8008dea:	f171 0100 	sbcs.w	r1, r1, #0
 8008dee:	d26f      	bcs.n	8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008df0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008df4:	4301      	orrs	r1, r0
 8008df6:	f002 80df 	beq.w	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008dfa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008dfe:	1e42      	subs	r2, r0, #1
 8008e00:	f141 33ff 	adc.w	r3, r1, #4294967295
 8008e04:	2a20      	cmp	r2, #32
 8008e06:	f173 0100 	sbcs.w	r1, r3, #0
 8008e0a:	f082 80d5 	bcs.w	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008e0e:	2a1f      	cmp	r2, #31
 8008e10:	f202 80d2 	bhi.w	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008e14:	a101      	add	r1, pc, #4	@ (adr r1, 8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8008e16:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008e1a:	bf00      	nop
 8008e1c:	0800917d 	.word	0x0800917d
 8008e20:	08009249 	.word	0x08009249
 8008e24:	0800afb9 	.word	0x0800afb9
 8008e28:	08009309 	.word	0x08009309
 8008e2c:	0800afb9 	.word	0x0800afb9
 8008e30:	0800afb9 	.word	0x0800afb9
 8008e34:	0800afb9 	.word	0x0800afb9
 8008e38:	080093d9 	.word	0x080093d9
 8008e3c:	0800afb9 	.word	0x0800afb9
 8008e40:	0800afb9 	.word	0x0800afb9
 8008e44:	0800afb9 	.word	0x0800afb9
 8008e48:	0800afb9 	.word	0x0800afb9
 8008e4c:	0800afb9 	.word	0x0800afb9
 8008e50:	0800afb9 	.word	0x0800afb9
 8008e54:	0800afb9 	.word	0x0800afb9
 8008e58:	080094bb 	.word	0x080094bb
 8008e5c:	0800afb9 	.word	0x0800afb9
 8008e60:	0800afb9 	.word	0x0800afb9
 8008e64:	0800afb9 	.word	0x0800afb9
 8008e68:	0800afb9 	.word	0x0800afb9
 8008e6c:	0800afb9 	.word	0x0800afb9
 8008e70:	0800afb9 	.word	0x0800afb9
 8008e74:	0800afb9 	.word	0x0800afb9
 8008e78:	0800afb9 	.word	0x0800afb9
 8008e7c:	0800afb9 	.word	0x0800afb9
 8008e80:	0800afb9 	.word	0x0800afb9
 8008e84:	0800afb9 	.word	0x0800afb9
 8008e88:	0800afb9 	.word	0x0800afb9
 8008e8c:	0800afb9 	.word	0x0800afb9
 8008e90:	0800afb9 	.word	0x0800afb9
 8008e94:	0800afb9 	.word	0x0800afb9
 8008e98:	08009591 	.word	0x08009591
 8008e9c:	80000001 	.word	0x80000001
 8008ea0:	40000001 	.word	0x40000001
 8008ea4:	20000001 	.word	0x20000001
 8008ea8:	10000001 	.word	0x10000001
 8008eac:	08000001 	.word	0x08000001
 8008eb0:	04000001 	.word	0x04000001
 8008eb4:	00800001 	.word	0x00800001
 8008eb8:	00400001 	.word	0x00400001
 8008ebc:	00200001 	.word	0x00200001
 8008ec0:	00100001 	.word	0x00100001
 8008ec4:	00080001 	.word	0x00080001
 8008ec8:	00040001 	.word	0x00040001
 8008ecc:	00020001 	.word	0x00020001
 8008ed0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ed4:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8008ed8:	430b      	orrs	r3, r1
 8008eda:	f000 83c4 	beq.w	8009666 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8008ede:	f002 b86b 	b.w	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8008ee2:	4ba1      	ldr	r3, [pc, #644]	@ (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008ee4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008ee8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008eec:	633b      	str	r3, [r7, #48]	@ 0x30
 8008eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008ef4:	d036      	beq.n	8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8008ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008efc:	d86b      	bhi.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8008efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f00:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008f04:	d02b      	beq.n	8008f5e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8008f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f08:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008f0c:	d863      	bhi.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8008f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f14:	d01b      	beq.n	8008f4e <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8008f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f1c:	d85b      	bhi.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8008f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d004      	beq.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8008f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f2a:	d008      	beq.n	8008f3e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8008f2c:	e053      	b.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f2e:	f107 0320 	add.w	r3, r7, #32
 8008f32:	4618      	mov	r0, r3
 8008f34:	f7ff f8b4 	bl	80080a0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f3a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f3c:	e04e      	b.n	8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f3e:	f107 0314 	add.w	r3, r7, #20
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7ff fa18 	bl	8008378 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f4c:	e046      	b.n	8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f4e:	f107 0308 	add.w	r3, r7, #8
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7ff fb7c 	bl	8008650 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f5c:	e03e      	b.n	8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008f5e:	4b83      	ldr	r3, [pc, #524]	@ (800916c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8008f60:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f62:	e03b      	b.n	8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008f64:	4b80      	ldr	r3, [pc, #512]	@ (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008f66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008f6a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f70:	4b7d      	ldr	r3, [pc, #500]	@ (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f003 0302 	and.w	r3, r3, #2
 8008f78:	2b02      	cmp	r3, #2
 8008f7a:	d10c      	bne.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8008f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d109      	bne.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008f82:	4b79      	ldr	r3, [pc, #484]	@ (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	08db      	lsrs	r3, r3, #3
 8008f88:	f003 0303 	and.w	r3, r3, #3
 8008f8c:	4a78      	ldr	r2, [pc, #480]	@ (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8008f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8008f92:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f94:	e01e      	b.n	8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f96:	4b74      	ldr	r3, [pc, #464]	@ (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fa2:	d106      	bne.n	8008fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008faa:	d102      	bne.n	8008fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008fac:	4b71      	ldr	r3, [pc, #452]	@ (8009174 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8008fae:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fb0:	e010      	b.n	8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008fb2:	4b6d      	ldr	r3, [pc, #436]	@ (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008fbe:	d106      	bne.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8008fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fc2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008fc6:	d102      	bne.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008fc8:	4b6b      	ldr	r3, [pc, #428]	@ (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8008fca:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fcc:	e002      	b.n	8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008fd2:	e003      	b.n	8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8008fd4:	e002      	b.n	8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008fda:	bf00      	nop
          }
        }
        break;
 8008fdc:	f001 bfef 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8008fe0:	4b61      	ldr	r3, [pc, #388]	@ (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008fe2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008fe6:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 8008fea:	633b      	str	r3, [r7, #48]	@ 0x30
 8008fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008ff2:	d036      	beq.n	8009062 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8008ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ff6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008ffa:	d86b      	bhi.n	80090d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8008ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ffe:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8009002:	d02b      	beq.n	800905c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8009004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009006:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800900a:	d863      	bhi.n	80090d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800900c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800900e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009012:	d01b      	beq.n	800904c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009016:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800901a:	d85b      	bhi.n	80090d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800901c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800901e:	2b00      	cmp	r3, #0
 8009020:	d004      	beq.n	800902c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8009022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009024:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009028:	d008      	beq.n	800903c <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 800902a:	e053      	b.n	80090d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800902c:	f107 0320 	add.w	r3, r7, #32
 8009030:	4618      	mov	r0, r3
 8009032:	f7ff f835 	bl	80080a0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009038:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800903a:	e04e      	b.n	80090da <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800903c:	f107 0314 	add.w	r3, r7, #20
 8009040:	4618      	mov	r0, r3
 8009042:	f7ff f999 	bl	8008378 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800904a:	e046      	b.n	80090da <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800904c:	f107 0308 	add.w	r3, r7, #8
 8009050:	4618      	mov	r0, r3
 8009052:	f7ff fafd 	bl	8008650 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800905a:	e03e      	b.n	80090da <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800905c:	4b43      	ldr	r3, [pc, #268]	@ (800916c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800905e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009060:	e03b      	b.n	80090da <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009062:	4b41      	ldr	r3, [pc, #260]	@ (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009064:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009068:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800906c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800906e:	4b3e      	ldr	r3, [pc, #248]	@ (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f003 0302 	and.w	r3, r3, #2
 8009076:	2b02      	cmp	r3, #2
 8009078:	d10c      	bne.n	8009094 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 800907a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800907c:	2b00      	cmp	r3, #0
 800907e:	d109      	bne.n	8009094 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009080:	4b39      	ldr	r3, [pc, #228]	@ (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	08db      	lsrs	r3, r3, #3
 8009086:	f003 0303 	and.w	r3, r3, #3
 800908a:	4a39      	ldr	r2, [pc, #228]	@ (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800908c:	fa22 f303 	lsr.w	r3, r2, r3
 8009090:	637b      	str	r3, [r7, #52]	@ 0x34
 8009092:	e01e      	b.n	80090d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009094:	4b34      	ldr	r3, [pc, #208]	@ (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800909c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090a0:	d106      	bne.n	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80090a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090a8:	d102      	bne.n	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80090aa:	4b32      	ldr	r3, [pc, #200]	@ (8009174 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 80090ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80090ae:	e010      	b.n	80090d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80090b0:	4b2d      	ldr	r3, [pc, #180]	@ (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80090bc:	d106      	bne.n	80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 80090be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80090c4:	d102      	bne.n	80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80090c6:	4b2c      	ldr	r3, [pc, #176]	@ (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80090c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80090ca:	e002      	b.n	80090d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80090cc:	2300      	movs	r3, #0
 80090ce:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80090d0:	e003      	b.n	80090da <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 80090d2:	e002      	b.n	80090da <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 80090d4:	2300      	movs	r3, #0
 80090d6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80090d8:	bf00      	nop
          }
        }
        break;
 80090da:	f001 bf70 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 80090de:	4b22      	ldr	r3, [pc, #136]	@ (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80090e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80090e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090e8:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 80090ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d108      	bne.n	8009102 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80090f0:	f107 0320 	add.w	r3, r7, #32
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7fe ffd3 	bl	80080a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80090fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090fc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80090fe:	f001 bf5e 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8009102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009104:	2b40      	cmp	r3, #64	@ 0x40
 8009106:	d108      	bne.n	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009108:	f107 0314 	add.w	r3, r7, #20
 800910c:	4618      	mov	r0, r3
 800910e:	f7ff f933 	bl	8008378 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009112:	69fb      	ldr	r3, [r7, #28]
 8009114:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009116:	f001 bf52 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800911a:	2300      	movs	r3, #0
 800911c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800911e:	f001 bf4e 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8009122:	4b11      	ldr	r3, [pc, #68]	@ (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009124:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009128:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800912c:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 800912e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009130:	2b00      	cmp	r3, #0
 8009132:	d108      	bne.n	8009146 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009134:	f107 0320 	add.w	r3, r7, #32
 8009138:	4618      	mov	r0, r3
 800913a:	f7fe ffb1 	bl	80080a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800913e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009140:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009142:	f001 bf3c 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8009146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009148:	2b80      	cmp	r3, #128	@ 0x80
 800914a:	d108      	bne.n	800915e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800914c:	f107 0314 	add.w	r3, r7, #20
 8009150:	4618      	mov	r0, r3
 8009152:	f7ff f911 	bl	8008378 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009156:	69fb      	ldr	r3, [r7, #28]
 8009158:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800915a:	f001 bf30 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800915e:	2300      	movs	r3, #0
 8009160:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009162:	f001 bf2c 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009166:	bf00      	nop
 8009168:	44020c00 	.word	0x44020c00
 800916c:	00bb8000 	.word	0x00bb8000
 8009170:	03d09000 	.word	0x03d09000
 8009174:	003d0900 	.word	0x003d0900
 8009178:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800917c:	4b9d      	ldr	r3, [pc, #628]	@ (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800917e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009182:	f003 0307 	and.w	r3, r3, #7
 8009186:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8009188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800918a:	2b00      	cmp	r3, #0
 800918c:	d104      	bne.n	8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800918e:	f7fc ffd1 	bl	8006134 <HAL_RCC_GetPCLK2Freq>
 8009192:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8009194:	f001 bf13 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8009198:	4b96      	ldr	r3, [pc, #600]	@ (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80091a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80091a4:	d10a      	bne.n	80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 80091a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d107      	bne.n	80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091ac:	f107 0314 	add.w	r3, r7, #20
 80091b0:	4618      	mov	r0, r3
 80091b2:	f7ff f8e1 	bl	8008378 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80091b6:	69bb      	ldr	r3, [r7, #24]
 80091b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80091ba:	e043      	b.n	8009244 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 80091bc:	4b8d      	ldr	r3, [pc, #564]	@ (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80091c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091c8:	d10a      	bne.n	80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 80091ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091cc:	2b02      	cmp	r3, #2
 80091ce:	d107      	bne.n	80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091d0:	f107 0308 	add.w	r3, r7, #8
 80091d4:	4618      	mov	r0, r3
 80091d6:	f7ff fa3b 	bl	8008650 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80091de:	e031      	b.n	8009244 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80091e0:	4b84      	ldr	r3, [pc, #528]	@ (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f003 0302 	and.w	r3, r3, #2
 80091e8:	2b02      	cmp	r3, #2
 80091ea:	d10c      	bne.n	8009206 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80091ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ee:	2b03      	cmp	r3, #3
 80091f0:	d109      	bne.n	8009206 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80091f2:	4b80      	ldr	r3, [pc, #512]	@ (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	08db      	lsrs	r3, r3, #3
 80091f8:	f003 0303 	and.w	r3, r3, #3
 80091fc:	4a7e      	ldr	r2, [pc, #504]	@ (80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80091fe:	fa22 f303 	lsr.w	r3, r2, r3
 8009202:	637b      	str	r3, [r7, #52]	@ 0x34
 8009204:	e01e      	b.n	8009244 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8009206:	4b7b      	ldr	r3, [pc, #492]	@ (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800920e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009212:	d105      	bne.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8009214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009216:	2b04      	cmp	r3, #4
 8009218:	d102      	bne.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 800921a:	4b78      	ldr	r3, [pc, #480]	@ (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800921c:	637b      	str	r3, [r7, #52]	@ 0x34
 800921e:	e011      	b.n	8009244 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8009220:	4b74      	ldr	r3, [pc, #464]	@ (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009222:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009226:	f003 0302 	and.w	r3, r3, #2
 800922a:	2b02      	cmp	r3, #2
 800922c:	d106      	bne.n	800923c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800922e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009230:	2b05      	cmp	r3, #5
 8009232:	d103      	bne.n	800923c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8009234:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009238:	637b      	str	r3, [r7, #52]	@ 0x34
 800923a:	e003      	b.n	8009244 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 800923c:	2300      	movs	r3, #0
 800923e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009240:	f001 bebd 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009244:	f001 bebb 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8009248:	4b6a      	ldr	r3, [pc, #424]	@ (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800924a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800924e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009252:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8009254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009256:	2b00      	cmp	r3, #0
 8009258:	d104      	bne.n	8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800925a:	f7fc ff55 	bl	8006108 <HAL_RCC_GetPCLK1Freq>
 800925e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8009260:	f001 bead 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8009264:	4b63      	ldr	r3, [pc, #396]	@ (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800926c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009270:	d10a      	bne.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8009272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009274:	2b08      	cmp	r3, #8
 8009276:	d107      	bne.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009278:	f107 0314 	add.w	r3, r7, #20
 800927c:	4618      	mov	r0, r3
 800927e:	f7ff f87b 	bl	8008378 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009282:	69bb      	ldr	r3, [r7, #24]
 8009284:	637b      	str	r3, [r7, #52]	@ 0x34
 8009286:	e03d      	b.n	8009304 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8009288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800928a:	2b10      	cmp	r3, #16
 800928c:	d108      	bne.n	80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800928e:	f107 0308 	add.w	r3, r7, #8
 8009292:	4618      	mov	r0, r3
 8009294:	f7ff f9dc 	bl	8008650 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800929c:	f001 be8f 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80092a0:	4b54      	ldr	r3, [pc, #336]	@ (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f003 0302 	and.w	r3, r3, #2
 80092a8:	2b02      	cmp	r3, #2
 80092aa:	d10c      	bne.n	80092c6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 80092ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ae:	2b18      	cmp	r3, #24
 80092b0:	d109      	bne.n	80092c6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80092b2:	4b50      	ldr	r3, [pc, #320]	@ (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	08db      	lsrs	r3, r3, #3
 80092b8:	f003 0303 	and.w	r3, r3, #3
 80092bc:	4a4e      	ldr	r2, [pc, #312]	@ (80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80092be:	fa22 f303 	lsr.w	r3, r2, r3
 80092c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80092c4:	e01e      	b.n	8009304 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 80092c6:	4b4b      	ldr	r3, [pc, #300]	@ (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80092ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092d2:	d105      	bne.n	80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80092d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092d6:	2b20      	cmp	r3, #32
 80092d8:	d102      	bne.n	80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 80092da:	4b48      	ldr	r3, [pc, #288]	@ (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80092dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80092de:	e011      	b.n	8009304 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80092e0:	4b44      	ldr	r3, [pc, #272]	@ (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80092e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80092e6:	f003 0302 	and.w	r3, r3, #2
 80092ea:	2b02      	cmp	r3, #2
 80092ec:	d106      	bne.n	80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 80092ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f0:	2b28      	cmp	r3, #40	@ 0x28
 80092f2:	d103      	bne.n	80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 80092f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80092f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80092fa:	e003      	b.n	8009304 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 80092fc:	2300      	movs	r3, #0
 80092fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009300:	f001 be5d 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009304:	f001 be5b 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8009308:	4b3a      	ldr	r3, [pc, #232]	@ (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800930a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800930e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009312:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8009314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009316:	2b00      	cmp	r3, #0
 8009318:	d104      	bne.n	8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800931a:	f7fc fef5 	bl	8006108 <HAL_RCC_GetPCLK1Freq>
 800931e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8009320:	f001 be4d 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8009324:	4b33      	ldr	r3, [pc, #204]	@ (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800932c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009330:	d10a      	bne.n	8009348 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8009332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009334:	2b40      	cmp	r3, #64	@ 0x40
 8009336:	d107      	bne.n	8009348 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009338:	f107 0314 	add.w	r3, r7, #20
 800933c:	4618      	mov	r0, r3
 800933e:	f7ff f81b 	bl	8008378 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009342:	69bb      	ldr	r3, [r7, #24]
 8009344:	637b      	str	r3, [r7, #52]	@ 0x34
 8009346:	e045      	b.n	80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8009348:	4b2a      	ldr	r3, [pc, #168]	@ (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009350:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009354:	d10a      	bne.n	800936c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8009356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009358:	2b80      	cmp	r3, #128	@ 0x80
 800935a:	d107      	bne.n	800936c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800935c:	f107 0308 	add.w	r3, r7, #8
 8009360:	4618      	mov	r0, r3
 8009362:	f7ff f975 	bl	8008650 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	637b      	str	r3, [r7, #52]	@ 0x34
 800936a:	e033      	b.n	80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800936c:	4b21      	ldr	r3, [pc, #132]	@ (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f003 0302 	and.w	r3, r3, #2
 8009374:	2b02      	cmp	r3, #2
 8009376:	d10c      	bne.n	8009392 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8009378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800937a:	2bc0      	cmp	r3, #192	@ 0xc0
 800937c:	d109      	bne.n	8009392 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800937e:	4b1d      	ldr	r3, [pc, #116]	@ (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	08db      	lsrs	r3, r3, #3
 8009384:	f003 0303 	and.w	r3, r3, #3
 8009388:	4a1b      	ldr	r2, [pc, #108]	@ (80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800938a:	fa22 f303 	lsr.w	r3, r2, r3
 800938e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009390:	e020      	b.n	80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8009392:	4b18      	ldr	r3, [pc, #96]	@ (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800939a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800939e:	d106      	bne.n	80093ae <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 80093a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093a6:	d102      	bne.n	80093ae <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 80093a8:	4b14      	ldr	r3, [pc, #80]	@ (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80093aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80093ac:	e012      	b.n	80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80093ae:	4b11      	ldr	r3, [pc, #68]	@ (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80093b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093b4:	f003 0302 	and.w	r3, r3, #2
 80093b8:	2b02      	cmp	r3, #2
 80093ba:	d107      	bne.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 80093bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093be:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80093c2:	d103      	bne.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 80093c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80093c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80093ca:	e003      	b.n	80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 80093cc:	2300      	movs	r3, #0
 80093ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80093d0:	f001 bdf5 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80093d4:	f001 bdf3 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80093d8:	4b06      	ldr	r3, [pc, #24]	@ (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80093da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80093de:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80093e2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80093e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d10a      	bne.n	8009400 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80093ea:	f7fc fe8d 	bl	8006108 <HAL_RCC_GetPCLK1Freq>
 80093ee:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 80093f0:	f001 bde5 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80093f4:	44020c00 	.word	0x44020c00
 80093f8:	03d09000 	.word	0x03d09000
 80093fc:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8009400:	4ba0      	ldr	r3, [pc, #640]	@ (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009408:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800940c:	d10b      	bne.n	8009426 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 800940e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009410:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009414:	d107      	bne.n	8009426 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009416:	f107 0314 	add.w	r3, r7, #20
 800941a:	4618      	mov	r0, r3
 800941c:	f7fe ffac 	bl	8008378 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009420:	69bb      	ldr	r3, [r7, #24]
 8009422:	637b      	str	r3, [r7, #52]	@ 0x34
 8009424:	e047      	b.n	80094b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8009426:	4b97      	ldr	r3, [pc, #604]	@ (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800942e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009432:	d10b      	bne.n	800944c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8009434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009436:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800943a:	d107      	bne.n	800944c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800943c:	f107 0308 	add.w	r3, r7, #8
 8009440:	4618      	mov	r0, r3
 8009442:	f7ff f905 	bl	8008650 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	637b      	str	r3, [r7, #52]	@ 0x34
 800944a:	e034      	b.n	80094b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800944c:	4b8d      	ldr	r3, [pc, #564]	@ (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f003 0302 	and.w	r3, r3, #2
 8009454:	2b02      	cmp	r3, #2
 8009456:	d10d      	bne.n	8009474 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8009458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800945a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800945e:	d109      	bne.n	8009474 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009460:	4b88      	ldr	r3, [pc, #544]	@ (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	08db      	lsrs	r3, r3, #3
 8009466:	f003 0303 	and.w	r3, r3, #3
 800946a:	4a87      	ldr	r2, [pc, #540]	@ (8009688 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800946c:	fa22 f303 	lsr.w	r3, r2, r3
 8009470:	637b      	str	r3, [r7, #52]	@ 0x34
 8009472:	e020      	b.n	80094b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8009474:	4b83      	ldr	r3, [pc, #524]	@ (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800947c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009480:	d106      	bne.n	8009490 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8009482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009484:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009488:	d102      	bne.n	8009490 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 800948a:	4b80      	ldr	r3, [pc, #512]	@ (800968c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800948c:	637b      	str	r3, [r7, #52]	@ 0x34
 800948e:	e012      	b.n	80094b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8009490:	4b7c      	ldr	r3, [pc, #496]	@ (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009492:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009496:	f003 0302 	and.w	r3, r3, #2
 800949a:	2b02      	cmp	r3, #2
 800949c:	d107      	bne.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800949e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80094a4:	d103      	bne.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 80094a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80094aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80094ac:	e003      	b.n	80094b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 80094ae:	2300      	movs	r3, #0
 80094b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80094b2:	f001 bd84 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80094b6:	f001 bd82 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80094ba:	4b72      	ldr	r3, [pc, #456]	@ (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80094bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80094c0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80094c4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80094c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d104      	bne.n	80094d6 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80094cc:	f7fc fe1c 	bl	8006108 <HAL_RCC_GetPCLK1Freq>
 80094d0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 80094d2:	f001 bd74 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 80094d6:	4b6b      	ldr	r3, [pc, #428]	@ (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80094de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80094e2:	d10b      	bne.n	80094fc <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 80094e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094ea:	d107      	bne.n	80094fc <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094ec:	f107 0314 	add.w	r3, r7, #20
 80094f0:	4618      	mov	r0, r3
 80094f2:	f7fe ff41 	bl	8008378 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80094f6:	69bb      	ldr	r3, [r7, #24]
 80094f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80094fa:	e047      	b.n	800958c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 80094fc:	4b61      	ldr	r3, [pc, #388]	@ (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009504:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009508:	d10b      	bne.n	8009522 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800950a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800950c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009510:	d107      	bne.n	8009522 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009512:	f107 0308 	add.w	r3, r7, #8
 8009516:	4618      	mov	r0, r3
 8009518:	f7ff f89a 	bl	8008650 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009520:	e034      	b.n	800958c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8009522:	4b58      	ldr	r3, [pc, #352]	@ (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f003 0302 	and.w	r3, r3, #2
 800952a:	2b02      	cmp	r3, #2
 800952c:	d10d      	bne.n	800954a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800952e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009530:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009534:	d109      	bne.n	800954a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009536:	4b53      	ldr	r3, [pc, #332]	@ (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	08db      	lsrs	r3, r3, #3
 800953c:	f003 0303 	and.w	r3, r3, #3
 8009540:	4a51      	ldr	r2, [pc, #324]	@ (8009688 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8009542:	fa22 f303 	lsr.w	r3, r2, r3
 8009546:	637b      	str	r3, [r7, #52]	@ 0x34
 8009548:	e020      	b.n	800958c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800954a:	4b4e      	ldr	r3, [pc, #312]	@ (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009552:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009556:	d106      	bne.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8009558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800955a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800955e:	d102      	bne.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8009560:	4b4a      	ldr	r3, [pc, #296]	@ (800968c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8009562:	637b      	str	r3, [r7, #52]	@ 0x34
 8009564:	e012      	b.n	800958c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8009566:	4b47      	ldr	r3, [pc, #284]	@ (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009568:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800956c:	f003 0302 	and.w	r3, r3, #2
 8009570:	2b02      	cmp	r3, #2
 8009572:	d107      	bne.n	8009584 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8009574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009576:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800957a:	d103      	bne.n	8009584 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 800957c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009580:	637b      	str	r3, [r7, #52]	@ 0x34
 8009582:	e003      	b.n	800958c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8009584:	2300      	movs	r3, #0
 8009586:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009588:	f001 bd19 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800958c:	f001 bd17 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8009590:	4b3c      	ldr	r3, [pc, #240]	@ (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009592:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009596:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800959a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800959c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d104      	bne.n	80095ac <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80095a2:	f7fc fdb1 	bl	8006108 <HAL_RCC_GetPCLK1Freq>
 80095a6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 80095a8:	f001 bd09 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 80095ac:	4b35      	ldr	r3, [pc, #212]	@ (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80095b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095b8:	d10b      	bne.n	80095d2 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 80095ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80095c0:	d107      	bne.n	80095d2 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095c2:	f107 0314 	add.w	r3, r7, #20
 80095c6:	4618      	mov	r0, r3
 80095c8:	f7fe fed6 	bl	8008378 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80095cc:	69bb      	ldr	r3, [r7, #24]
 80095ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80095d0:	e047      	b.n	8009662 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 80095d2:	4b2c      	ldr	r3, [pc, #176]	@ (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80095da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095de:	d10b      	bne.n	80095f8 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 80095e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095e6:	d107      	bne.n	80095f8 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095e8:	f107 0308 	add.w	r3, r7, #8
 80095ec:	4618      	mov	r0, r3
 80095ee:	f7ff f82f 	bl	8008650 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80095f6:	e034      	b.n	8009662 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 80095f8:	4b22      	ldr	r3, [pc, #136]	@ (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f003 0302 	and.w	r3, r3, #2
 8009600:	2b02      	cmp	r3, #2
 8009602:	d10d      	bne.n	8009620 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8009604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009606:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800960a:	d109      	bne.n	8009620 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800960c:	4b1d      	ldr	r3, [pc, #116]	@ (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	08db      	lsrs	r3, r3, #3
 8009612:	f003 0303 	and.w	r3, r3, #3
 8009616:	4a1c      	ldr	r2, [pc, #112]	@ (8009688 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8009618:	fa22 f303 	lsr.w	r3, r2, r3
 800961c:	637b      	str	r3, [r7, #52]	@ 0x34
 800961e:	e020      	b.n	8009662 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8009620:	4b18      	ldr	r3, [pc, #96]	@ (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009628:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800962c:	d106      	bne.n	800963c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800962e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009630:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009634:	d102      	bne.n	800963c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8009636:	4b15      	ldr	r3, [pc, #84]	@ (800968c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8009638:	637b      	str	r3, [r7, #52]	@ 0x34
 800963a:	e012      	b.n	8009662 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800963c:	4b11      	ldr	r3, [pc, #68]	@ (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800963e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009642:	f003 0302 	and.w	r3, r3, #2
 8009646:	2b02      	cmp	r3, #2
 8009648:	d107      	bne.n	800965a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800964a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800964c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8009650:	d103      	bne.n	800965a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 8009652:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009656:	637b      	str	r3, [r7, #52]	@ 0x34
 8009658:	e003      	b.n	8009662 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 800965a:	2300      	movs	r3, #0
 800965c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800965e:	f001 bcae 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009662:	f001 bcac 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8009666:	4b07      	ldr	r3, [pc, #28]	@ (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009668:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800966c:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 8009670:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8009672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009674:	2b00      	cmp	r3, #0
 8009676:	d10b      	bne.n	8009690 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009678:	f7fc fd46 	bl	8006108 <HAL_RCC_GetPCLK1Freq>
 800967c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 800967e:	f001 bc9e 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009682:	bf00      	nop
 8009684:	44020c00 	.word	0x44020c00
 8009688:	03d09000 	.word	0x03d09000
 800968c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8009690:	4ba0      	ldr	r3, [pc, #640]	@ (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009698:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800969c:	d10b      	bne.n	80096b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 800969e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80096a4:	d107      	bne.n	80096b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096a6:	f107 0314 	add.w	r3, r7, #20
 80096aa:	4618      	mov	r0, r3
 80096ac:	f7fe fe64 	bl	8008378 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80096b0:	69bb      	ldr	r3, [r7, #24]
 80096b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80096b4:	e047      	b.n	8009746 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 80096b6:	4b97      	ldr	r3, [pc, #604]	@ (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80096be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096c2:	d10b      	bne.n	80096dc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 80096c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096c6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80096ca:	d107      	bne.n	80096dc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096cc:	f107 0308 	add.w	r3, r7, #8
 80096d0:	4618      	mov	r0, r3
 80096d2:	f7fe ffbd 	bl	8008650 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80096da:	e034      	b.n	8009746 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 80096dc:	4b8d      	ldr	r3, [pc, #564]	@ (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f003 0302 	and.w	r3, r3, #2
 80096e4:	2b02      	cmp	r3, #2
 80096e6:	d10d      	bne.n	8009704 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 80096e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ea:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80096ee:	d109      	bne.n	8009704 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80096f0:	4b88      	ldr	r3, [pc, #544]	@ (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	08db      	lsrs	r3, r3, #3
 80096f6:	f003 0303 	and.w	r3, r3, #3
 80096fa:	4a87      	ldr	r2, [pc, #540]	@ (8009918 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80096fc:	fa22 f303 	lsr.w	r3, r2, r3
 8009700:	637b      	str	r3, [r7, #52]	@ 0x34
 8009702:	e020      	b.n	8009746 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8009704:	4b83      	ldr	r3, [pc, #524]	@ (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800970c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009710:	d106      	bne.n	8009720 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8009712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009714:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009718:	d102      	bne.n	8009720 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 800971a:	4b80      	ldr	r3, [pc, #512]	@ (800991c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800971c:	637b      	str	r3, [r7, #52]	@ 0x34
 800971e:	e012      	b.n	8009746 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8009720:	4b7c      	ldr	r3, [pc, #496]	@ (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009722:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009726:	f003 0302 	and.w	r3, r3, #2
 800972a:	2b02      	cmp	r3, #2
 800972c:	d107      	bne.n	800973e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 800972e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009730:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8009734:	d103      	bne.n	800973e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 8009736:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800973a:	637b      	str	r3, [r7, #52]	@ 0x34
 800973c:	e003      	b.n	8009746 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 800973e:	2300      	movs	r3, #0
 8009740:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009742:	f001 bc3c 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009746:	f001 bc3a 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 800974a:	4b72      	ldr	r3, [pc, #456]	@ (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800974c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009750:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8009754:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8009756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009758:	2b00      	cmp	r3, #0
 800975a:	d104      	bne.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800975c:	f7fc fcd4 	bl	8006108 <HAL_RCC_GetPCLK1Freq>
 8009760:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 8009762:	f001 bc2c 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8009766:	4b6b      	ldr	r3, [pc, #428]	@ (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800976e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009772:	d10b      	bne.n	800978c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8009774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009776:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800977a:	d107      	bne.n	800978c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800977c:	f107 0314 	add.w	r3, r7, #20
 8009780:	4618      	mov	r0, r3
 8009782:	f7fe fdf9 	bl	8008378 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009786:	69bb      	ldr	r3, [r7, #24]
 8009788:	637b      	str	r3, [r7, #52]	@ 0x34
 800978a:	e047      	b.n	800981c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 800978c:	4b61      	ldr	r3, [pc, #388]	@ (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009794:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009798:	d10b      	bne.n	80097b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 800979a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800979c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80097a0:	d107      	bne.n	80097b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097a2:	f107 0308 	add.w	r3, r7, #8
 80097a6:	4618      	mov	r0, r3
 80097a8:	f7fe ff52 	bl	8008650 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80097b0:	e034      	b.n	800981c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 80097b2:	4b58      	ldr	r3, [pc, #352]	@ (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f003 0302 	and.w	r3, r3, #2
 80097ba:	2b02      	cmp	r3, #2
 80097bc:	d10d      	bne.n	80097da <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 80097be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097c0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80097c4:	d109      	bne.n	80097da <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80097c6:	4b53      	ldr	r3, [pc, #332]	@ (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	08db      	lsrs	r3, r3, #3
 80097cc:	f003 0303 	and.w	r3, r3, #3
 80097d0:	4a51      	ldr	r2, [pc, #324]	@ (8009918 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80097d2:	fa22 f303 	lsr.w	r3, r2, r3
 80097d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80097d8:	e020      	b.n	800981c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 80097da:	4b4e      	ldr	r3, [pc, #312]	@ (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80097e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097e6:	d106      	bne.n	80097f6 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 80097e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80097ee:	d102      	bne.n	80097f6 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 80097f0:	4b4a      	ldr	r3, [pc, #296]	@ (800991c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80097f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80097f4:	e012      	b.n	800981c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 80097f6:	4b47      	ldr	r3, [pc, #284]	@ (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80097f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80097fc:	f003 0302 	and.w	r3, r3, #2
 8009800:	2b02      	cmp	r3, #2
 8009802:	d107      	bne.n	8009814 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8009804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009806:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800980a:	d103      	bne.n	8009814 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 800980c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009810:	637b      	str	r3, [r7, #52]	@ 0x34
 8009812:	e003      	b.n	800981c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 8009814:	2300      	movs	r3, #0
 8009816:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009818:	f001 bbd1 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800981c:	f001 bbcf 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8009820:	4b3c      	ldr	r3, [pc, #240]	@ (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009822:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009826:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800982a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 800982c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800982e:	2b00      	cmp	r3, #0
 8009830:	d104      	bne.n	800983c <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009832:	f7fc fc69 	bl	8006108 <HAL_RCC_GetPCLK1Freq>
 8009836:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8009838:	f001 bbc1 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 800983c:	4b35      	ldr	r3, [pc, #212]	@ (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009844:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009848:	d10b      	bne.n	8009862 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 800984a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800984c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009850:	d107      	bne.n	8009862 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009852:	f107 0314 	add.w	r3, r7, #20
 8009856:	4618      	mov	r0, r3
 8009858:	f7fe fd8e 	bl	8008378 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800985c:	69bb      	ldr	r3, [r7, #24]
 800985e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009860:	e047      	b.n	80098f2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 8009862:	4b2c      	ldr	r3, [pc, #176]	@ (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800986a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800986e:	d10b      	bne.n	8009888 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8009870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009872:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009876:	d107      	bne.n	8009888 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009878:	f107 0308 	add.w	r3, r7, #8
 800987c:	4618      	mov	r0, r3
 800987e:	f7fe fee7 	bl	8008650 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	637b      	str	r3, [r7, #52]	@ 0x34
 8009886:	e034      	b.n	80098f2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8009888:	4b22      	ldr	r3, [pc, #136]	@ (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f003 0302 	and.w	r3, r3, #2
 8009890:	2b02      	cmp	r3, #2
 8009892:	d10d      	bne.n	80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8009894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009896:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800989a:	d109      	bne.n	80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800989c:	4b1d      	ldr	r3, [pc, #116]	@ (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	08db      	lsrs	r3, r3, #3
 80098a2:	f003 0303 	and.w	r3, r3, #3
 80098a6:	4a1c      	ldr	r2, [pc, #112]	@ (8009918 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80098a8:	fa22 f303 	lsr.w	r3, r2, r3
 80098ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80098ae:	e020      	b.n	80098f2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 80098b0:	4b18      	ldr	r3, [pc, #96]	@ (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80098b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098bc:	d106      	bne.n	80098cc <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 80098be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80098c4:	d102      	bne.n	80098cc <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 80098c6:	4b15      	ldr	r3, [pc, #84]	@ (800991c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80098c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80098ca:	e012      	b.n	80098f2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 80098cc:	4b11      	ldr	r3, [pc, #68]	@ (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80098ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80098d2:	f003 0302 	and.w	r3, r3, #2
 80098d6:	2b02      	cmp	r3, #2
 80098d8:	d107      	bne.n	80098ea <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 80098da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098dc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80098e0:	d103      	bne.n	80098ea <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 80098e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80098e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80098e8:	e003      	b.n	80098f2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 80098ea:	2300      	movs	r3, #0
 80098ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80098ee:	f001 bb66 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80098f2:	f001 bb64 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 80098f6:	4b07      	ldr	r3, [pc, #28]	@ (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80098f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80098fc:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 8009900:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 8009902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009904:	2b00      	cmp	r3, #0
 8009906:	d10b      	bne.n	8009920 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009908:	f7fc fbfe 	bl	8006108 <HAL_RCC_GetPCLK1Freq>
 800990c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 800990e:	f001 bb56 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009912:	bf00      	nop
 8009914:	44020c00 	.word	0x44020c00
 8009918:	03d09000 	.word	0x03d09000
 800991c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8009920:	4ba1      	ldr	r3, [pc, #644]	@ (8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009928:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800992c:	d10b      	bne.n	8009946 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800992e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009930:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009934:	d107      	bne.n	8009946 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009936:	f107 0314 	add.w	r3, r7, #20
 800993a:	4618      	mov	r0, r3
 800993c:	f7fe fd1c 	bl	8008378 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009940:	69bb      	ldr	r3, [r7, #24]
 8009942:	637b      	str	r3, [r7, #52]	@ 0x34
 8009944:	e047      	b.n	80099d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8009946:	4b98      	ldr	r3, [pc, #608]	@ (8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800994e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009952:	d10b      	bne.n	800996c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8009954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009956:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800995a:	d107      	bne.n	800996c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800995c:	f107 0308 	add.w	r3, r7, #8
 8009960:	4618      	mov	r0, r3
 8009962:	f7fe fe75 	bl	8008650 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	637b      	str	r3, [r7, #52]	@ 0x34
 800996a:	e034      	b.n	80099d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 800996c:	4b8e      	ldr	r3, [pc, #568]	@ (8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f003 0302 	and.w	r3, r3, #2
 8009974:	2b02      	cmp	r3, #2
 8009976:	d10d      	bne.n	8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8009978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800997a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800997e:	d109      	bne.n	8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009980:	4b89      	ldr	r3, [pc, #548]	@ (8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	08db      	lsrs	r3, r3, #3
 8009986:	f003 0303 	and.w	r3, r3, #3
 800998a:	4a88      	ldr	r2, [pc, #544]	@ (8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800998c:	fa22 f303 	lsr.w	r3, r2, r3
 8009990:	637b      	str	r3, [r7, #52]	@ 0x34
 8009992:	e020      	b.n	80099d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8009994:	4b84      	ldr	r3, [pc, #528]	@ (8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800999c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099a0:	d106      	bne.n	80099b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 80099a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099a8:	d102      	bne.n	80099b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 80099aa:	4b81      	ldr	r3, [pc, #516]	@ (8009bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80099ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80099ae:	e012      	b.n	80099d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 80099b0:	4b7d      	ldr	r3, [pc, #500]	@ (8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80099b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80099b6:	f003 0302 	and.w	r3, r3, #2
 80099ba:	2b02      	cmp	r3, #2
 80099bc:	d107      	bne.n	80099ce <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 80099be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099c0:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 80099c4:	d103      	bne.n	80099ce <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 80099c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80099ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80099cc:	e003      	b.n	80099d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 80099ce:	2300      	movs	r3, #0
 80099d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80099d2:	f001 baf4 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80099d6:	f001 baf2 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 80099da:	4b73      	ldr	r3, [pc, #460]	@ (8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80099dc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80099e0:	f003 0307 	and.w	r3, r3, #7
 80099e4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 80099e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d104      	bne.n	80099f6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80099ec:	f7fc fb8c 	bl	8006108 <HAL_RCC_GetPCLK1Freq>
 80099f0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 80099f2:	f001 bae4 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 80099f6:	4b6c      	ldr	r3, [pc, #432]	@ (8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a02:	d10a      	bne.n	8009a1a <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8009a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a06:	2b01      	cmp	r3, #1
 8009a08:	d107      	bne.n	8009a1a <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a0a:	f107 0314 	add.w	r3, r7, #20
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f7fe fcb2 	bl	8008378 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009a14:	69bb      	ldr	r3, [r7, #24]
 8009a16:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a18:	e043      	b.n	8009aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8009a1a:	4b63      	ldr	r3, [pc, #396]	@ (8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a26:	d10a      	bne.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8009a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a2a:	2b02      	cmp	r3, #2
 8009a2c:	d107      	bne.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a2e:	f107 0308 	add.w	r3, r7, #8
 8009a32:	4618      	mov	r0, r3
 8009a34:	f7fe fe0c 	bl	8008650 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a3c:	e031      	b.n	8009aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8009a3e:	4b5a      	ldr	r3, [pc, #360]	@ (8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f003 0302 	and.w	r3, r3, #2
 8009a46:	2b02      	cmp	r3, #2
 8009a48:	d10c      	bne.n	8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 8009a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a4c:	2b03      	cmp	r3, #3
 8009a4e:	d109      	bne.n	8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009a50:	4b55      	ldr	r3, [pc, #340]	@ (8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	08db      	lsrs	r3, r3, #3
 8009a56:	f003 0303 	and.w	r3, r3, #3
 8009a5a:	4a54      	ldr	r2, [pc, #336]	@ (8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8009a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8009a60:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a62:	e01e      	b.n	8009aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8009a64:	4b50      	ldr	r3, [pc, #320]	@ (8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009a6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a70:	d105      	bne.n	8009a7e <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 8009a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a74:	2b04      	cmp	r3, #4
 8009a76:	d102      	bne.n	8009a7e <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8009a78:	4b4d      	ldr	r3, [pc, #308]	@ (8009bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8009a7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a7c:	e011      	b.n	8009aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8009a7e:	4b4a      	ldr	r3, [pc, #296]	@ (8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009a80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a84:	f003 0302 	and.w	r3, r3, #2
 8009a88:	2b02      	cmp	r3, #2
 8009a8a:	d106      	bne.n	8009a9a <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8009a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a8e:	2b05      	cmp	r3, #5
 8009a90:	d103      	bne.n	8009a9a <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 8009a92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a96:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a98:	e003      	b.n	8009aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a9e:	f001 ba8e 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009aa2:	f001 ba8c 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8009aa6:	4b40      	ldr	r3, [pc, #256]	@ (8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009aa8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009aac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009ab0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8009ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d104      	bne.n	8009ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009ab8:	f7fc fb26 	bl	8006108 <HAL_RCC_GetPCLK1Freq>
 8009abc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8009abe:	f001 ba7e 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8009ac2:	4b39      	ldr	r3, [pc, #228]	@ (8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009aca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ace:	d10a      	bne.n	8009ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8009ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ad2:	2b10      	cmp	r3, #16
 8009ad4:	d107      	bne.n	8009ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ad6:	f107 0314 	add.w	r3, r7, #20
 8009ada:	4618      	mov	r0, r3
 8009adc:	f7fe fc4c 	bl	8008378 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009ae0:	69bb      	ldr	r3, [r7, #24]
 8009ae2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ae4:	e043      	b.n	8009b6e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8009ae6:	4b30      	ldr	r3, [pc, #192]	@ (8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009aee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009af2:	d10a      	bne.n	8009b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8009af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009af6:	2b20      	cmp	r3, #32
 8009af8:	d107      	bne.n	8009b0a <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009afa:	f107 0308 	add.w	r3, r7, #8
 8009afe:	4618      	mov	r0, r3
 8009b00:	f7fe fda6 	bl	8008650 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b08:	e031      	b.n	8009b6e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8009b0a:	4b27      	ldr	r3, [pc, #156]	@ (8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f003 0302 	and.w	r3, r3, #2
 8009b12:	2b02      	cmp	r3, #2
 8009b14:	d10c      	bne.n	8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8009b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b18:	2b30      	cmp	r3, #48	@ 0x30
 8009b1a:	d109      	bne.n	8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009b1c:	4b22      	ldr	r3, [pc, #136]	@ (8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	08db      	lsrs	r3, r3, #3
 8009b22:	f003 0303 	and.w	r3, r3, #3
 8009b26:	4a21      	ldr	r2, [pc, #132]	@ (8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8009b28:	fa22 f303 	lsr.w	r3, r2, r3
 8009b2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b2e:	e01e      	b.n	8009b6e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8009b30:	4b1d      	ldr	r3, [pc, #116]	@ (8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b3c:	d105      	bne.n	8009b4a <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8009b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b40:	2b40      	cmp	r3, #64	@ 0x40
 8009b42:	d102      	bne.n	8009b4a <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8009b44:	4b1a      	ldr	r3, [pc, #104]	@ (8009bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8009b46:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b48:	e011      	b.n	8009b6e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8009b4a:	4b17      	ldr	r3, [pc, #92]	@ (8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009b4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b50:	f003 0302 	and.w	r3, r3, #2
 8009b54:	2b02      	cmp	r3, #2
 8009b56:	d106      	bne.n	8009b66 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8009b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b5a:	2b50      	cmp	r3, #80	@ 0x50
 8009b5c:	d103      	bne.n	8009b66 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 8009b5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b62:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b64:	e003      	b.n	8009b6e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 8009b66:	2300      	movs	r3, #0
 8009b68:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b6a:	f001 ba28 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009b6e:	f001 ba26 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8009b72:	4b0d      	ldr	r3, [pc, #52]	@ (8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009b78:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009b7c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8009b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d104      	bne.n	8009b8e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8009b84:	f7fc faec 	bl	8006160 <HAL_RCC_GetPCLK3Freq>
 8009b88:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8009b8a:	f001 ba18 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8009b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009b94:	d10e      	bne.n	8009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b96:	f107 0314 	add.w	r3, r7, #20
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f7fe fbec 	bl	8008378 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009ba0:	69bb      	ldr	r3, [r7, #24]
 8009ba2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009ba4:	f001 ba0b 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009ba8:	44020c00 	.word	0x44020c00
 8009bac:	03d09000 	.word	0x03d09000
 8009bb0:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8009bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bb6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009bba:	d108      	bne.n	8009bce <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009bbc:	f107 0308 	add.w	r3, r7, #8
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f7fe fd45 	bl	8008650 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009bca:	f001 b9f8 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8009bce:	4ba4      	ldr	r3, [pc, #656]	@ (8009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f003 0302 	and.w	r3, r3, #2
 8009bd6:	2b02      	cmp	r3, #2
 8009bd8:	d10d      	bne.n	8009bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8009bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bdc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009be0:	d109      	bne.n	8009bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009be2:	4b9f      	ldr	r3, [pc, #636]	@ (8009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	08db      	lsrs	r3, r3, #3
 8009be8:	f003 0303 	and.w	r3, r3, #3
 8009bec:	4a9d      	ldr	r2, [pc, #628]	@ (8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8009bee:	fa22 f303 	lsr.w	r3, r2, r3
 8009bf2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bf4:	e020      	b.n	8009c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8009bf6:	4b9a      	ldr	r3, [pc, #616]	@ (8009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009bfe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c02:	d106      	bne.n	8009c12 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8009c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c06:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009c0a:	d102      	bne.n	8009c12 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8009c0c:	4b96      	ldr	r3, [pc, #600]	@ (8009e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8009c0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c10:	e012      	b.n	8009c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8009c12:	4b93      	ldr	r3, [pc, #588]	@ (8009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009c14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c18:	f003 0302 	and.w	r3, r3, #2
 8009c1c:	2b02      	cmp	r3, #2
 8009c1e:	d107      	bne.n	8009c30 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8009c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c22:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009c26:	d103      	bne.n	8009c30 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8009c28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c2e:	e003      	b.n	8009c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8009c30:	2300      	movs	r3, #0
 8009c32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009c34:	f001 b9c3 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009c38:	f001 b9c1 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8009c3c:	4b88      	ldr	r3, [pc, #544]	@ (8009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009c3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009c42:	f003 0307 	and.w	r3, r3, #7
 8009c46:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8009c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d104      	bne.n	8009c58 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8009c4e:	f7fc fa3f 	bl	80060d0 <HAL_RCC_GetHCLKFreq>
 8009c52:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8009c54:	f001 b9b3 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8009c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c5a:	2b01      	cmp	r3, #1
 8009c5c:	d104      	bne.n	8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8009c5e:	f7fc f90b 	bl	8005e78 <HAL_RCC_GetSysClockFreq>
 8009c62:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009c64:	f001 b9ab 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8009c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c6a:	2b02      	cmp	r3, #2
 8009c6c:	d108      	bne.n	8009c80 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c6e:	f107 0314 	add.w	r3, r7, #20
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7fe fb80 	bl	8008378 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009c78:	69fb      	ldr	r3, [r7, #28]
 8009c7a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009c7c:	f001 b99f 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8009c80:	4b77      	ldr	r3, [pc, #476]	@ (8009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c8c:	d105      	bne.n	8009c9a <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8009c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c90:	2b03      	cmp	r3, #3
 8009c92:	d102      	bne.n	8009c9a <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8009c94:	4b75      	ldr	r3, [pc, #468]	@ (8009e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8009c96:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c98:	e023      	b.n	8009ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8009c9a:	4b71      	ldr	r3, [pc, #452]	@ (8009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f003 0302 	and.w	r3, r3, #2
 8009ca2:	2b02      	cmp	r3, #2
 8009ca4:	d10c      	bne.n	8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8009ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ca8:	2b04      	cmp	r3, #4
 8009caa:	d109      	bne.n	8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009cac:	4b6c      	ldr	r3, [pc, #432]	@ (8009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	08db      	lsrs	r3, r3, #3
 8009cb2:	f003 0303 	and.w	r3, r3, #3
 8009cb6:	4a6b      	ldr	r2, [pc, #428]	@ (8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8009cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8009cbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cbe:	e010      	b.n	8009ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8009cc0:	4b67      	ldr	r3, [pc, #412]	@ (8009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009cc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ccc:	d105      	bne.n	8009cda <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8009cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cd0:	2b05      	cmp	r3, #5
 8009cd2:	d102      	bne.n	8009cda <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8009cd4:	4b64      	ldr	r3, [pc, #400]	@ (8009e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8009cd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cd8:	e003      	b.n	8009ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009cde:	f001 b96e 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009ce2:	f001 b96c 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8009ce6:	4b5e      	ldr	r3, [pc, #376]	@ (8009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009ce8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009cec:	f003 0308 	and.w	r3, r3, #8
 8009cf0:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8009cf2:	4b5b      	ldr	r3, [pc, #364]	@ (8009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009cf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009cf8:	f003 0302 	and.w	r3, r3, #2
 8009cfc:	2b02      	cmp	r3, #2
 8009cfe:	d106      	bne.n	8009d0e <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8009d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d103      	bne.n	8009d0e <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8009d06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d0c:	e012      	b.n	8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8009d0e:	4b54      	ldr	r3, [pc, #336]	@ (8009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009d10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009d14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d1c:	d106      	bne.n	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8009d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d20:	2b08      	cmp	r3, #8
 8009d22:	d103      	bne.n	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8009d24:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009d28:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d2a:	e003      	b.n	8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8009d30:	f001 b945 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009d34:	f001 b943 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8009d38:	4b49      	ldr	r3, [pc, #292]	@ (8009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009d3a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009d3e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009d42:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8009d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d104      	bne.n	8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009d4a:	f7fc f9dd 	bl	8006108 <HAL_RCC_GetPCLK1Freq>
 8009d4e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8009d50:	f001 b935 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8009d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d5a:	d108      	bne.n	8009d6e <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d5c:	f107 0308 	add.w	r3, r7, #8
 8009d60:	4618      	mov	r0, r3
 8009d62:	f7fe fc75 	bl	8008650 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009d6a:	f001 b928 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8009d6e:	4b3c      	ldr	r3, [pc, #240]	@ (8009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f003 0302 	and.w	r3, r3, #2
 8009d76:	2b02      	cmp	r3, #2
 8009d78:	d10d      	bne.n	8009d96 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8009d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d80:	d109      	bne.n	8009d96 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009d82:	4b37      	ldr	r3, [pc, #220]	@ (8009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	08db      	lsrs	r3, r3, #3
 8009d88:	f003 0303 	and.w	r3, r3, #3
 8009d8c:	4a35      	ldr	r2, [pc, #212]	@ (8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8009d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8009d92:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d94:	e011      	b.n	8009dba <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8009d96:	4b32      	ldr	r3, [pc, #200]	@ (8009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009d9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009da2:	d106      	bne.n	8009db2 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8009da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009da6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009daa:	d102      	bne.n	8009db2 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8009dac:	4b2e      	ldr	r3, [pc, #184]	@ (8009e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8009dae:	637b      	str	r3, [r7, #52]	@ 0x34
 8009db0:	e003      	b.n	8009dba <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8009db2:	2300      	movs	r3, #0
 8009db4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009db6:	f001 b902 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009dba:	f001 b900 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8009dbe:	4b28      	ldr	r3, [pc, #160]	@ (8009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009dc0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009dc4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8009dc8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8009dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d104      	bne.n	8009dda <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009dd0:	f7fc f99a 	bl	8006108 <HAL_RCC_GetPCLK1Freq>
 8009dd4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8009dd6:	f001 b8f2 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8009dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ddc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009de0:	d108      	bne.n	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009de2:	f107 0308 	add.w	r3, r7, #8
 8009de6:	4618      	mov	r0, r3
 8009de8:	f7fe fc32 	bl	8008650 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009df0:	f001 b8e5 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8009df4:	4b1a      	ldr	r3, [pc, #104]	@ (8009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f003 0302 	and.w	r3, r3, #2
 8009dfc:	2b02      	cmp	r3, #2
 8009dfe:	d10d      	bne.n	8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8009e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e02:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009e06:	d109      	bne.n	8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009e08:	4b15      	ldr	r3, [pc, #84]	@ (8009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	08db      	lsrs	r3, r3, #3
 8009e0e:	f003 0303 	and.w	r3, r3, #3
 8009e12:	4a14      	ldr	r2, [pc, #80]	@ (8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8009e14:	fa22 f303 	lsr.w	r3, r2, r3
 8009e18:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e1a:	e011      	b.n	8009e40 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8009e1c:	4b10      	ldr	r3, [pc, #64]	@ (8009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009e24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e28:	d106      	bne.n	8009e38 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8009e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e2c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009e30:	d102      	bne.n	8009e38 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 8009e32:	4b0d      	ldr	r3, [pc, #52]	@ (8009e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8009e34:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e36:	e003      	b.n	8009e40 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009e3c:	f001 b8bf 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009e40:	f001 b8bd 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8009e44:	4b06      	ldr	r3, [pc, #24]	@ (8009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009e46:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009e4a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009e4e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8009e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d10c      	bne.n	8009e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8009e56:	f7fc f983 	bl	8006160 <HAL_RCC_GetPCLK3Freq>
 8009e5a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8009e5c:	f001 b8af 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009e60:	44020c00 	.word	0x44020c00
 8009e64:	03d09000 	.word	0x03d09000
 8009e68:	003d0900 	.word	0x003d0900
 8009e6c:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8009e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e76:	d108      	bne.n	8009e8a <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e78:	f107 0308 	add.w	r3, r7, #8
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f7fe fbe7 	bl	8008650 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009e86:	f001 b89a 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8009e8a:	4b9f      	ldr	r3, [pc, #636]	@ (800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f003 0302 	and.w	r3, r3, #2
 8009e92:	2b02      	cmp	r3, #2
 8009e94:	d10d      	bne.n	8009eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 8009e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e98:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009e9c:	d109      	bne.n	8009eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009e9e:	4b9a      	ldr	r3, [pc, #616]	@ (800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	08db      	lsrs	r3, r3, #3
 8009ea4:	f003 0303 	and.w	r3, r3, #3
 8009ea8:	4a98      	ldr	r2, [pc, #608]	@ (800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8009eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8009eae:	637b      	str	r3, [r7, #52]	@ 0x34
 8009eb0:	e011      	b.n	8009ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8009eb2:	4b95      	ldr	r3, [pc, #596]	@ (800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009eba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ebe:	d106      	bne.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8009ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ec2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009ec6:	d102      	bne.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8009ec8:	4b91      	ldr	r3, [pc, #580]	@ (800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8009eca:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ecc:	e003      	b.n	8009ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009ed2:	f001 b874 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009ed6:	f001 b872 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8009eda:	4b8b      	ldr	r3, [pc, #556]	@ (800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009edc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009ee0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8009ee4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8009ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d104      	bne.n	8009ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8009eec:	f7fc f938 	bl	8006160 <HAL_RCC_GetPCLK3Freq>
 8009ef0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8009ef2:	f001 b864 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8009ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ef8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009efc:	d108      	bne.n	8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009efe:	f107 0308 	add.w	r3, r7, #8
 8009f02:	4618      	mov	r0, r3
 8009f04:	f7fe fba4 	bl	8008650 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009f0c:	f001 b857 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8009f10:	4b7d      	ldr	r3, [pc, #500]	@ (800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f003 0302 	and.w	r3, r3, #2
 8009f18:	2b02      	cmp	r3, #2
 8009f1a:	d10d      	bne.n	8009f38 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8009f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f1e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009f22:	d109      	bne.n	8009f38 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009f24:	4b78      	ldr	r3, [pc, #480]	@ (800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	08db      	lsrs	r3, r3, #3
 8009f2a:	f003 0303 	and.w	r3, r3, #3
 8009f2e:	4a77      	ldr	r2, [pc, #476]	@ (800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8009f30:	fa22 f303 	lsr.w	r3, r2, r3
 8009f34:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f36:	e011      	b.n	8009f5c <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8009f38:	4b73      	ldr	r3, [pc, #460]	@ (800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009f40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f44:	d106      	bne.n	8009f54 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8009f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f48:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009f4c:	d102      	bne.n	8009f54 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8009f4e:	4b70      	ldr	r3, [pc, #448]	@ (800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8009f50:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f52:	e003      	b.n	8009f5c <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8009f54:	2300      	movs	r3, #0
 8009f56:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009f58:	f001 b831 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009f5c:	f001 b82f 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8009f60:	4b69      	ldr	r3, [pc, #420]	@ (800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009f62:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009f66:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8009f6a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8009f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d104      	bne.n	8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009f72:	f7fc f8c9 	bl	8006108 <HAL_RCC_GetPCLK1Freq>
 8009f76:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8009f78:	f001 b821 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8009f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009f82:	d108      	bne.n	8009f96 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f84:	f107 0308 	add.w	r3, r7, #8
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f7fe fb61 	bl	8008650 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009f92:	f001 b814 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8009f96:	4b5c      	ldr	r3, [pc, #368]	@ (800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f003 0302 	and.w	r3, r3, #2
 8009f9e:	2b02      	cmp	r3, #2
 8009fa0:	d10e      	bne.n	8009fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8009fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fa4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009fa8:	d10a      	bne.n	8009fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009faa:	4b57      	ldr	r3, [pc, #348]	@ (800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	08db      	lsrs	r3, r3, #3
 8009fb0:	f003 0303 	and.w	r3, r3, #3
 8009fb4:	4a55      	ldr	r2, [pc, #340]	@ (800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8009fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8009fba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009fbc:	f000 bfff 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009fc4:	f000 bffb 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009fc8:	4b4f      	ldr	r3, [pc, #316]	@ (800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009fca:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009fce:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009fd2:	633b      	str	r3, [r7, #48]	@ 0x30
 8009fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fd6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8009fda:	d056      	beq.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8009fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fde:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8009fe2:	f200 808b 	bhi.w	800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8009fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fe8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009fec:	d03e      	beq.n	800a06c <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 8009fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ff0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ff4:	f200 8082 	bhi.w	800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8009ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ffa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009ffe:	d027      	beq.n	800a050 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 800a000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a002:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a006:	d879      	bhi.n	800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800a008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a00a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a00e:	d017      	beq.n	800a040 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 800a010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a012:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a016:	d871      	bhi.n	800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800a018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d004      	beq.n	800a028 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 800a01e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a020:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a024:	d004      	beq.n	800a030 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 800a026:	e069      	b.n	800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800a028:	f7fc f89a 	bl	8006160 <HAL_RCC_GetPCLK3Freq>
 800a02c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800a02e:	e068      	b.n	800a102 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a030:	f107 0314 	add.w	r3, r7, #20
 800a034:	4618      	mov	r0, r3
 800a036:	f7fe f99f 	bl	8008378 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a03e:	e060      	b.n	800a102 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a040:	f107 0308 	add.w	r3, r7, #8
 800a044:	4618      	mov	r0, r3
 800a046:	f7fe fb03 	bl	8008650 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a04e:	e058      	b.n	800a102 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a050:	4b2d      	ldr	r3, [pc, #180]	@ (800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a052:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a056:	f003 0302 	and.w	r3, r3, #2
 800a05a:	2b02      	cmp	r3, #2
 800a05c:	d103      	bne.n	800a066 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 800a05e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a062:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a064:	e04d      	b.n	800a102 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800a066:	2300      	movs	r3, #0
 800a068:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a06a:	e04a      	b.n	800a102 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800a06c:	4b26      	ldr	r3, [pc, #152]	@ (800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a06e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a072:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a076:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a07a:	d103      	bne.n	800a084 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 800a07c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a080:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a082:	e03e      	b.n	800a102 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800a084:	2300      	movs	r3, #0
 800a086:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a088:	e03b      	b.n	800a102 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a08a:	4b1f      	ldr	r3, [pc, #124]	@ (800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a08c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a090:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a094:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a096:	4b1c      	ldr	r3, [pc, #112]	@ (800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f003 0302 	and.w	r3, r3, #2
 800a09e:	2b02      	cmp	r3, #2
 800a0a0:	d10c      	bne.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 800a0a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d109      	bne.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a0a8:	4b17      	ldr	r3, [pc, #92]	@ (800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	08db      	lsrs	r3, r3, #3
 800a0ae:	f003 0303 	and.w	r3, r3, #3
 800a0b2:	4a16      	ldr	r2, [pc, #88]	@ (800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800a0b4:	fa22 f303 	lsr.w	r3, r2, r3
 800a0b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0ba:	e01e      	b.n	800a0fa <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a0bc:	4b12      	ldr	r3, [pc, #72]	@ (800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a0c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0c8:	d106      	bne.n	800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 800a0ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0d0:	d102      	bne.n	800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a0d2:	4b0f      	ldr	r3, [pc, #60]	@ (800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800a0d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0d6:	e010      	b.n	800a0fa <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a0d8:	4b0b      	ldr	r3, [pc, #44]	@ (800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a0e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a0e4:	d106      	bne.n	800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 800a0e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a0ec:	d102      	bne.n	800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a0ee:	4b09      	ldr	r3, [pc, #36]	@ (800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 800a0f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0f2:	e002      	b.n	800a0fa <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a0f8:	e003      	b.n	800a102 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 800a0fa:	e002      	b.n	800a102 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a100:	bf00      	nop
          }
        }
        break;
 800a102:	f000 bf5c 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a106:	bf00      	nop
 800a108:	44020c00 	.word	0x44020c00
 800a10c:	03d09000 	.word	0x03d09000
 800a110:	003d0900 	.word	0x003d0900
 800a114:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800a118:	4b9e      	ldr	r3, [pc, #632]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a11a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a11e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a122:	633b      	str	r3, [r7, #48]	@ 0x30
 800a124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a126:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800a12a:	d056      	beq.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 800a12c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a12e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800a132:	f200 808b 	bhi.w	800a24c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800a136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a138:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a13c:	d03e      	beq.n	800a1bc <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 800a13e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a140:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a144:	f200 8082 	bhi.w	800a24c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800a148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a14a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a14e:	d027      	beq.n	800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 800a150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a152:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a156:	d879      	bhi.n	800a24c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800a158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a15a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a15e:	d017      	beq.n	800a190 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 800a160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a162:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a166:	d871      	bhi.n	800a24c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800a168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d004      	beq.n	800a178 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 800a16e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a170:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a174:	d004      	beq.n	800a180 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 800a176:	e069      	b.n	800a24c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 800a178:	f7fb ffc6 	bl	8006108 <HAL_RCC_GetPCLK1Freq>
 800a17c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800a17e:	e068      	b.n	800a252 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a180:	f107 0314 	add.w	r3, r7, #20
 800a184:	4618      	mov	r0, r3
 800a186:	f7fe f8f7 	bl	8008378 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a18e:	e060      	b.n	800a252 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a190:	f107 0308 	add.w	r3, r7, #8
 800a194:	4618      	mov	r0, r3
 800a196:	f7fe fa5b 	bl	8008650 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a19e:	e058      	b.n	800a252 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a1a0:	4b7c      	ldr	r3, [pc, #496]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a1a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a1a6:	f003 0302 	and.w	r3, r3, #2
 800a1aa:	2b02      	cmp	r3, #2
 800a1ac:	d103      	bne.n	800a1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 800a1ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a1b2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a1b4:	e04d      	b.n	800a252 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a1ba:	e04a      	b.n	800a252 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800a1bc:	4b75      	ldr	r3, [pc, #468]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a1be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a1c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a1c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a1ca:	d103      	bne.n	800a1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 800a1cc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a1d0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a1d2:	e03e      	b.n	800a252 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a1d8:	e03b      	b.n	800a252 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a1da:	4b6e      	ldr	r3, [pc, #440]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a1dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a1e0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a1e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a1e6:	4b6b      	ldr	r3, [pc, #428]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f003 0302 	and.w	r3, r3, #2
 800a1ee:	2b02      	cmp	r3, #2
 800a1f0:	d10c      	bne.n	800a20c <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 800a1f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d109      	bne.n	800a20c <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a1f8:	4b66      	ldr	r3, [pc, #408]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	08db      	lsrs	r3, r3, #3
 800a1fe:	f003 0303 	and.w	r3, r3, #3
 800a202:	4a65      	ldr	r2, [pc, #404]	@ (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800a204:	fa22 f303 	lsr.w	r3, r2, r3
 800a208:	637b      	str	r3, [r7, #52]	@ 0x34
 800a20a:	e01e      	b.n	800a24a <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a20c:	4b61      	ldr	r3, [pc, #388]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a214:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a218:	d106      	bne.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 800a21a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a21c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a220:	d102      	bne.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a222:	4b5e      	ldr	r3, [pc, #376]	@ (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800a224:	637b      	str	r3, [r7, #52]	@ 0x34
 800a226:	e010      	b.n	800a24a <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a228:	4b5a      	ldr	r3, [pc, #360]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a230:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a234:	d106      	bne.n	800a244 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 800a236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a238:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a23c:	d102      	bne.n	800a244 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a23e:	4b58      	ldr	r3, [pc, #352]	@ (800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800a240:	637b      	str	r3, [r7, #52]	@ 0x34
 800a242:	e002      	b.n	800a24a <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a244:	2300      	movs	r3, #0
 800a246:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a248:	e003      	b.n	800a252 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 800a24a:	e002      	b.n	800a252 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 800a24c:	2300      	movs	r3, #0
 800a24e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a250:	bf00      	nop
          }
        }
        break;
 800a252:	f000 beb4 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800a256:	4b4f      	ldr	r3, [pc, #316]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a258:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a25c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a260:	633b      	str	r3, [r7, #48]	@ 0x30
 800a262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a264:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a268:	d056      	beq.n	800a318 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 800a26a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a26c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a270:	f200 808b 	bhi.w	800a38a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800a274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a276:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a27a:	d03e      	beq.n	800a2fa <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 800a27c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a27e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a282:	f200 8082 	bhi.w	800a38a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800a286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a288:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a28c:	d027      	beq.n	800a2de <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 800a28e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a290:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a294:	d879      	bhi.n	800a38a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800a296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a298:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a29c:	d017      	beq.n	800a2ce <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 800a29e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a2a4:	d871      	bhi.n	800a38a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800a2a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d004      	beq.n	800a2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 800a2ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a2b2:	d004      	beq.n	800a2be <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 800a2b4:	e069      	b.n	800a38a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800a2b6:	f7fb ff53 	bl	8006160 <HAL_RCC_GetPCLK3Freq>
 800a2ba:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800a2bc:	e068      	b.n	800a390 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2be:	f107 0314 	add.w	r3, r7, #20
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f7fe f858 	bl	8008378 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a2cc:	e060      	b.n	800a390 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2ce:	f107 0308 	add.w	r3, r7, #8
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f7fe f9bc 	bl	8008650 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a2dc:	e058      	b.n	800a390 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a2de:	4b2d      	ldr	r3, [pc, #180]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a2e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a2e4:	f003 0302 	and.w	r3, r3, #2
 800a2e8:	2b02      	cmp	r3, #2
 800a2ea:	d103      	bne.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 800a2ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a2f0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a2f2:	e04d      	b.n	800a390 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a2f8:	e04a      	b.n	800a390 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800a2fa:	4b26      	ldr	r3, [pc, #152]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a2fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a300:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a304:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a308:	d103      	bne.n	800a312 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 800a30a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a30e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a310:	e03e      	b.n	800a390 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800a312:	2300      	movs	r3, #0
 800a314:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a316:	e03b      	b.n	800a390 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a318:	4b1e      	ldr	r3, [pc, #120]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a31a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a31e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a322:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a324:	4b1b      	ldr	r3, [pc, #108]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f003 0302 	and.w	r3, r3, #2
 800a32c:	2b02      	cmp	r3, #2
 800a32e:	d10c      	bne.n	800a34a <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 800a330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a332:	2b00      	cmp	r3, #0
 800a334:	d109      	bne.n	800a34a <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a336:	4b17      	ldr	r3, [pc, #92]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	08db      	lsrs	r3, r3, #3
 800a33c:	f003 0303 	and.w	r3, r3, #3
 800a340:	4a15      	ldr	r2, [pc, #84]	@ (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800a342:	fa22 f303 	lsr.w	r3, r2, r3
 800a346:	637b      	str	r3, [r7, #52]	@ 0x34
 800a348:	e01e      	b.n	800a388 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a34a:	4b12      	ldr	r3, [pc, #72]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a352:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a356:	d106      	bne.n	800a366 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 800a358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a35a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a35e:	d102      	bne.n	800a366 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a360:	4b0e      	ldr	r3, [pc, #56]	@ (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800a362:	637b      	str	r3, [r7, #52]	@ 0x34
 800a364:	e010      	b.n	800a388 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a366:	4b0b      	ldr	r3, [pc, #44]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a36e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a372:	d106      	bne.n	800a382 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 800a374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a376:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a37a:	d102      	bne.n	800a382 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a37c:	4b08      	ldr	r3, [pc, #32]	@ (800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800a37e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a380:	e002      	b.n	800a388 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a382:	2300      	movs	r3, #0
 800a384:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a386:	e003      	b.n	800a390 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 800a388:	e002      	b.n	800a390 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 800a38a:	2300      	movs	r3, #0
 800a38c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a38e:	bf00      	nop
          }
        }
        break;
 800a390:	f000 be15 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a394:	44020c00 	.word	0x44020c00
 800a398:	03d09000 	.word	0x03d09000
 800a39c:	003d0900 	.word	0x003d0900
 800a3a0:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 800a3a4:	4b9e      	ldr	r3, [pc, #632]	@ (800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a3a6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a3aa:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 800a3ae:	633b      	str	r3, [r7, #48]	@ 0x30
 800a3b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3b2:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800a3b6:	d056      	beq.n	800a466 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 800a3b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ba:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800a3be:	f200 808b 	bhi.w	800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800a3c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a3c8:	d03e      	beq.n	800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 800a3ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a3d0:	f200 8082 	bhi.w	800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800a3d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a3da:	d027      	beq.n	800a42c <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 800a3dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3de:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a3e2:	d879      	bhi.n	800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800a3e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a3ea:	d017      	beq.n	800a41c <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 800a3ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a3f2:	d871      	bhi.n	800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800a3f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d004      	beq.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 800a3fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a400:	d004      	beq.n	800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 800a402:	e069      	b.n	800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800a404:	f7fb feac 	bl	8006160 <HAL_RCC_GetPCLK3Freq>
 800a408:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800a40a:	e068      	b.n	800a4de <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a40c:	f107 0314 	add.w	r3, r7, #20
 800a410:	4618      	mov	r0, r3
 800a412:	f7fd ffb1 	bl	8008378 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a41a:	e060      	b.n	800a4de <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a41c:	f107 0308 	add.w	r3, r7, #8
 800a420:	4618      	mov	r0, r3
 800a422:	f7fe f915 	bl	8008650 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a42a:	e058      	b.n	800a4de <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a42c:	4b7c      	ldr	r3, [pc, #496]	@ (800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a42e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a432:	f003 0302 	and.w	r3, r3, #2
 800a436:	2b02      	cmp	r3, #2
 800a438:	d103      	bne.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 800a43a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a43e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a440:	e04d      	b.n	800a4de <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800a442:	2300      	movs	r3, #0
 800a444:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a446:	e04a      	b.n	800a4de <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800a448:	4b75      	ldr	r3, [pc, #468]	@ (800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a44a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a44e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a452:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a456:	d103      	bne.n	800a460 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 800a458:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a45c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a45e:	e03e      	b.n	800a4de <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800a460:	2300      	movs	r3, #0
 800a462:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a464:	e03b      	b.n	800a4de <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a466:	4b6e      	ldr	r3, [pc, #440]	@ (800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a468:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a46c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a470:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a472:	4b6b      	ldr	r3, [pc, #428]	@ (800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f003 0302 	and.w	r3, r3, #2
 800a47a:	2b02      	cmp	r3, #2
 800a47c:	d10c      	bne.n	800a498 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 800a47e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a480:	2b00      	cmp	r3, #0
 800a482:	d109      	bne.n	800a498 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a484:	4b66      	ldr	r3, [pc, #408]	@ (800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	08db      	lsrs	r3, r3, #3
 800a48a:	f003 0303 	and.w	r3, r3, #3
 800a48e:	4a65      	ldr	r2, [pc, #404]	@ (800a624 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800a490:	fa22 f303 	lsr.w	r3, r2, r3
 800a494:	637b      	str	r3, [r7, #52]	@ 0x34
 800a496:	e01e      	b.n	800a4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a498:	4b61      	ldr	r3, [pc, #388]	@ (800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a4a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4a4:	d106      	bne.n	800a4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 800a4a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4ac:	d102      	bne.n	800a4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a4ae:	4b5e      	ldr	r3, [pc, #376]	@ (800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800a4b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4b2:	e010      	b.n	800a4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a4b4:	4b5a      	ldr	r3, [pc, #360]	@ (800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a4c0:	d106      	bne.n	800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 800a4c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a4c8:	d102      	bne.n	800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a4ca:	4b58      	ldr	r3, [pc, #352]	@ (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800a4cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4ce:	e002      	b.n	800a4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a4d4:	e003      	b.n	800a4de <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 800a4d6:	e002      	b.n	800a4de <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a4dc:	bf00      	nop
          }
        }
        break;
 800a4de:	f000 bd6e 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 800a4e2:	4b4f      	ldr	r3, [pc, #316]	@ (800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a4e4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a4e8:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a4ec:	633b      	str	r3, [r7, #48]	@ 0x30
 800a4ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4f0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a4f4:	d056      	beq.n	800a5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 800a4f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4f8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a4fc:	f200 808b 	bhi.w	800a616 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800a500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a502:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a506:	d03e      	beq.n	800a586 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 800a508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a50a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a50e:	f200 8082 	bhi.w	800a616 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800a512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a514:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a518:	d027      	beq.n	800a56a <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 800a51a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a51c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a520:	d879      	bhi.n	800a616 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800a522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a524:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a528:	d017      	beq.n	800a55a <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 800a52a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a52c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a530:	d871      	bhi.n	800a616 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800a532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a534:	2b00      	cmp	r3, #0
 800a536:	d004      	beq.n	800a542 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 800a538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a53a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a53e:	d004      	beq.n	800a54a <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 800a540:	e069      	b.n	800a616 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800a542:	f7fb fe0d 	bl	8006160 <HAL_RCC_GetPCLK3Freq>
 800a546:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800a548:	e068      	b.n	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a54a:	f107 0314 	add.w	r3, r7, #20
 800a54e:	4618      	mov	r0, r3
 800a550:	f7fd ff12 	bl	8008378 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a558:	e060      	b.n	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a55a:	f107 0308 	add.w	r3, r7, #8
 800a55e:	4618      	mov	r0, r3
 800a560:	f7fe f876 	bl	8008650 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a568:	e058      	b.n	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a56a:	4b2d      	ldr	r3, [pc, #180]	@ (800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a56c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a570:	f003 0302 	and.w	r3, r3, #2
 800a574:	2b02      	cmp	r3, #2
 800a576:	d103      	bne.n	800a580 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 800a578:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a57c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a57e:	e04d      	b.n	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800a580:	2300      	movs	r3, #0
 800a582:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a584:	e04a      	b.n	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800a586:	4b26      	ldr	r3, [pc, #152]	@ (800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a588:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a58c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a590:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a594:	d103      	bne.n	800a59e <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 800a596:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a59a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a59c:	e03e      	b.n	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a5a2:	e03b      	b.n	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a5a4:	4b1e      	ldr	r3, [pc, #120]	@ (800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a5a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a5aa:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a5ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a5b0:	4b1b      	ldr	r3, [pc, #108]	@ (800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f003 0302 	and.w	r3, r3, #2
 800a5b8:	2b02      	cmp	r3, #2
 800a5ba:	d10c      	bne.n	800a5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 800a5bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d109      	bne.n	800a5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a5c2:	4b17      	ldr	r3, [pc, #92]	@ (800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	08db      	lsrs	r3, r3, #3
 800a5c8:	f003 0303 	and.w	r3, r3, #3
 800a5cc:	4a15      	ldr	r2, [pc, #84]	@ (800a624 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800a5ce:	fa22 f303 	lsr.w	r3, r2, r3
 800a5d2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5d4:	e01e      	b.n	800a614 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a5d6:	4b12      	ldr	r3, [pc, #72]	@ (800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a5de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a5e2:	d106      	bne.n	800a5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 800a5e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5ea:	d102      	bne.n	800a5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a5ec:	4b0e      	ldr	r3, [pc, #56]	@ (800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800a5ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5f0:	e010      	b.n	800a614 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a5f2:	4b0b      	ldr	r3, [pc, #44]	@ (800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a5fe:	d106      	bne.n	800a60e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 800a600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a602:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a606:	d102      	bne.n	800a60e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a608:	4b08      	ldr	r3, [pc, #32]	@ (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800a60a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a60c:	e002      	b.n	800a614 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a60e:	2300      	movs	r3, #0
 800a610:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a612:	e003      	b.n	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 800a614:	e002      	b.n	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 800a616:	2300      	movs	r3, #0
 800a618:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a61a:	bf00      	nop
          }
        }
        break;
 800a61c:	f000 bccf 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a620:	44020c00 	.word	0x44020c00
 800a624:	03d09000 	.word	0x03d09000
 800a628:	003d0900 	.word	0x003d0900
 800a62c:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 800a630:	4b9e      	ldr	r3, [pc, #632]	@ (800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a632:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a636:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a63a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a63c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a63e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a642:	d056      	beq.n	800a6f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 800a644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a646:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a64a:	f200 808b 	bhi.w	800a764 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800a64e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a650:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a654:	d03e      	beq.n	800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 800a656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a658:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a65c:	f200 8082 	bhi.w	800a764 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800a660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a662:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a666:	d027      	beq.n	800a6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 800a668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a66a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a66e:	d879      	bhi.n	800a764 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800a670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a672:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a676:	d017      	beq.n	800a6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 800a678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a67a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a67e:	d871      	bhi.n	800a764 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800a680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a682:	2b00      	cmp	r3, #0
 800a684:	d004      	beq.n	800a690 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 800a686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a688:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a68c:	d004      	beq.n	800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 800a68e:	e069      	b.n	800a764 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800a690:	f7fb fd66 	bl	8006160 <HAL_RCC_GetPCLK3Freq>
 800a694:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800a696:	e068      	b.n	800a76a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a698:	f107 0314 	add.w	r3, r7, #20
 800a69c:	4618      	mov	r0, r3
 800a69e:	f7fd fe6b 	bl	8008378 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a6a6:	e060      	b.n	800a76a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6a8:	f107 0308 	add.w	r3, r7, #8
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f7fd ffcf 	bl	8008650 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a6b6:	e058      	b.n	800a76a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a6b8:	4b7c      	ldr	r3, [pc, #496]	@ (800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a6ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a6be:	f003 0302 	and.w	r3, r3, #2
 800a6c2:	2b02      	cmp	r3, #2
 800a6c4:	d103      	bne.n	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800a6c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a6ca:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a6cc:	e04d      	b.n	800a76a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a6d2:	e04a      	b.n	800a76a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800a6d4:	4b75      	ldr	r3, [pc, #468]	@ (800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a6d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a6da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a6de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a6e2:	d103      	bne.n	800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 800a6e4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a6e8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a6ea:	e03e      	b.n	800a76a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a6f0:	e03b      	b.n	800a76a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a6f2:	4b6e      	ldr	r3, [pc, #440]	@ (800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a6f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a6f8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a6fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a6fe:	4b6b      	ldr	r3, [pc, #428]	@ (800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f003 0302 	and.w	r3, r3, #2
 800a706:	2b02      	cmp	r3, #2
 800a708:	d10c      	bne.n	800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 800a70a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d109      	bne.n	800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a710:	4b66      	ldr	r3, [pc, #408]	@ (800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	08db      	lsrs	r3, r3, #3
 800a716:	f003 0303 	and.w	r3, r3, #3
 800a71a:	4a65      	ldr	r2, [pc, #404]	@ (800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800a71c:	fa22 f303 	lsr.w	r3, r2, r3
 800a720:	637b      	str	r3, [r7, #52]	@ 0x34
 800a722:	e01e      	b.n	800a762 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a724:	4b61      	ldr	r3, [pc, #388]	@ (800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a72c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a730:	d106      	bne.n	800a740 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 800a732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a734:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a738:	d102      	bne.n	800a740 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a73a:	4b5e      	ldr	r3, [pc, #376]	@ (800a8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800a73c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a73e:	e010      	b.n	800a762 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a740:	4b5a      	ldr	r3, [pc, #360]	@ (800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a748:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a74c:	d106      	bne.n	800a75c <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 800a74e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a750:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a754:	d102      	bne.n	800a75c <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a756:	4b58      	ldr	r3, [pc, #352]	@ (800a8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800a758:	637b      	str	r3, [r7, #52]	@ 0x34
 800a75a:	e002      	b.n	800a762 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a75c:	2300      	movs	r3, #0
 800a75e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a760:	e003      	b.n	800a76a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 800a762:	e002      	b.n	800a76a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 800a764:	2300      	movs	r3, #0
 800a766:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a768:	bf00      	nop
          }
        }
        break;
 800a76a:	f000 bc28 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a76e:	4b4f      	ldr	r3, [pc, #316]	@ (800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a770:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a774:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a778:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800a77a:	4b4c      	ldr	r3, [pc, #304]	@ (800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a782:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a786:	d106      	bne.n	800a796 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 800a788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d103      	bne.n	800a796 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 800a78e:	4b4a      	ldr	r3, [pc, #296]	@ (800a8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800a790:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800a792:	f000 bc14 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800a796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a798:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a79c:	d108      	bne.n	800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a79e:	f107 0320 	add.w	r3, r7, #32
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f7fd fc7c 	bl	80080a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a7a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a7ac:	f000 bc07 	b.w	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800a7b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a7b6:	d107      	bne.n	800a7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7b8:	f107 0314 	add.w	r3, r7, #20
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f7fd fddb 	bl	8008378 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a7c2:	69bb      	ldr	r3, [r7, #24]
 800a7c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a7c6:	e3fa      	b.n	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a7cc:	e3f7      	b.n	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800a7ce:	4b37      	ldr	r3, [pc, #220]	@ (800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a7d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a7d4:	f003 0307 	and.w	r3, r3, #7
 800a7d8:	633b      	str	r3, [r7, #48]	@ 0x30
 800a7da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7dc:	2b04      	cmp	r3, #4
 800a7de:	d861      	bhi.n	800a8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 800a7e0:	a201      	add	r2, pc, #4	@ (adr r2, 800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 800a7e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7e6:	bf00      	nop
 800a7e8:	0800a7fd 	.word	0x0800a7fd
 800a7ec:	0800a80d 	.word	0x0800a80d
 800a7f0:	0800a81d 	.word	0x0800a81d
 800a7f4:	0800a82d 	.word	0x0800a82d
 800a7f8:	0800a833 	.word	0x0800a833
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a7fc:	f107 0320 	add.w	r3, r7, #32
 800a800:	4618      	mov	r0, r3
 800a802:	f7fd fc4d 	bl	80080a0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800a806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a808:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a80a:	e04e      	b.n	800a8aa <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a80c:	f107 0314 	add.w	r3, r7, #20
 800a810:	4618      	mov	r0, r3
 800a812:	f7fd fdb1 	bl	8008378 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a81a:	e046      	b.n	800a8aa <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a81c:	f107 0308 	add.w	r3, r7, #8
 800a820:	4618      	mov	r0, r3
 800a822:	f7fd ff15 	bl	8008650 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a82a:	e03e      	b.n	800a8aa <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800a82c:	4b23      	ldr	r3, [pc, #140]	@ (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 800a82e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a830:	e03b      	b.n	800a8aa <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a832:	4b1e      	ldr	r3, [pc, #120]	@ (800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a834:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a838:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a83c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a83e:	4b1b      	ldr	r3, [pc, #108]	@ (800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f003 0302 	and.w	r3, r3, #2
 800a846:	2b02      	cmp	r3, #2
 800a848:	d10c      	bne.n	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 800a84a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d109      	bne.n	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a850:	4b16      	ldr	r3, [pc, #88]	@ (800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	08db      	lsrs	r3, r3, #3
 800a856:	f003 0303 	and.w	r3, r3, #3
 800a85a:	4a15      	ldr	r2, [pc, #84]	@ (800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800a85c:	fa22 f303 	lsr.w	r3, r2, r3
 800a860:	637b      	str	r3, [r7, #52]	@ 0x34
 800a862:	e01e      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a864:	4b11      	ldr	r3, [pc, #68]	@ (800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a86c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a870:	d106      	bne.n	800a880 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 800a872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a874:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a878:	d102      	bne.n	800a880 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a87a:	4b0e      	ldr	r3, [pc, #56]	@ (800a8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800a87c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a87e:	e010      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a880:	4b0a      	ldr	r3, [pc, #40]	@ (800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a888:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a88c:	d106      	bne.n	800a89c <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 800a88e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a890:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a894:	d102      	bne.n	800a89c <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a896:	4b08      	ldr	r3, [pc, #32]	@ (800a8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800a898:	637b      	str	r3, [r7, #52]	@ 0x34
 800a89a:	e002      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a89c:	2300      	movs	r3, #0
 800a89e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a8a0:	e003      	b.n	800a8aa <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 800a8a2:	e002      	b.n	800a8aa <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a8a8:	bf00      	nop
          }
        }
        break;
 800a8aa:	e388      	b.n	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a8ac:	44020c00 	.word	0x44020c00
 800a8b0:	03d09000 	.word	0x03d09000
 800a8b4:	003d0900 	.word	0x003d0900
 800a8b8:	007a1200 	.word	0x007a1200
 800a8bc:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800a8c0:	4ba9      	ldr	r3, [pc, #676]	@ (800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a8c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a8c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a8ca:	633b      	str	r3, [r7, #48]	@ 0x30
 800a8cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ce:	2b20      	cmp	r3, #32
 800a8d0:	f200 809a 	bhi.w	800aa08 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 800a8d4:	a201      	add	r2, pc, #4	@ (adr r2, 800a8dc <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800a8d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8da:	bf00      	nop
 800a8dc:	0800a961 	.word	0x0800a961
 800a8e0:	0800aa09 	.word	0x0800aa09
 800a8e4:	0800aa09 	.word	0x0800aa09
 800a8e8:	0800aa09 	.word	0x0800aa09
 800a8ec:	0800aa09 	.word	0x0800aa09
 800a8f0:	0800aa09 	.word	0x0800aa09
 800a8f4:	0800aa09 	.word	0x0800aa09
 800a8f8:	0800aa09 	.word	0x0800aa09
 800a8fc:	0800a971 	.word	0x0800a971
 800a900:	0800aa09 	.word	0x0800aa09
 800a904:	0800aa09 	.word	0x0800aa09
 800a908:	0800aa09 	.word	0x0800aa09
 800a90c:	0800aa09 	.word	0x0800aa09
 800a910:	0800aa09 	.word	0x0800aa09
 800a914:	0800aa09 	.word	0x0800aa09
 800a918:	0800aa09 	.word	0x0800aa09
 800a91c:	0800a981 	.word	0x0800a981
 800a920:	0800aa09 	.word	0x0800aa09
 800a924:	0800aa09 	.word	0x0800aa09
 800a928:	0800aa09 	.word	0x0800aa09
 800a92c:	0800aa09 	.word	0x0800aa09
 800a930:	0800aa09 	.word	0x0800aa09
 800a934:	0800aa09 	.word	0x0800aa09
 800a938:	0800aa09 	.word	0x0800aa09
 800a93c:	0800a991 	.word	0x0800a991
 800a940:	0800aa09 	.word	0x0800aa09
 800a944:	0800aa09 	.word	0x0800aa09
 800a948:	0800aa09 	.word	0x0800aa09
 800a94c:	0800aa09 	.word	0x0800aa09
 800a950:	0800aa09 	.word	0x0800aa09
 800a954:	0800aa09 	.word	0x0800aa09
 800a958:	0800aa09 	.word	0x0800aa09
 800a95c:	0800a997 	.word	0x0800a997
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a960:	f107 0320 	add.w	r3, r7, #32
 800a964:	4618      	mov	r0, r3
 800a966:	f7fd fb9b 	bl	80080a0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800a96a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a96c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a96e:	e04e      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a970:	f107 0314 	add.w	r3, r7, #20
 800a974:	4618      	mov	r0, r3
 800a976:	f7fd fcff 	bl	8008378 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a97e:	e046      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a980:	f107 0308 	add.w	r3, r7, #8
 800a984:	4618      	mov	r0, r3
 800a986:	f7fd fe63 	bl	8008650 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a98e:	e03e      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800a990:	4b76      	ldr	r3, [pc, #472]	@ (800ab6c <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800a992:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a994:	e03b      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a996:	4b74      	ldr	r3, [pc, #464]	@ (800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a998:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a99c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a9a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a9a2:	4b71      	ldr	r3, [pc, #452]	@ (800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f003 0302 	and.w	r3, r3, #2
 800a9aa:	2b02      	cmp	r3, #2
 800a9ac:	d10c      	bne.n	800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800a9ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d109      	bne.n	800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a9b4:	4b6c      	ldr	r3, [pc, #432]	@ (800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	08db      	lsrs	r3, r3, #3
 800a9ba:	f003 0303 	and.w	r3, r3, #3
 800a9be:	4a6c      	ldr	r2, [pc, #432]	@ (800ab70 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800a9c0:	fa22 f303 	lsr.w	r3, r2, r3
 800a9c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9c6:	e01e      	b.n	800aa06 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a9c8:	4b67      	ldr	r3, [pc, #412]	@ (800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a9d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9d4:	d106      	bne.n	800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800a9d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9dc:	d102      	bne.n	800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a9de:	4b65      	ldr	r3, [pc, #404]	@ (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800a9e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9e2:	e010      	b.n	800aa06 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a9e4:	4b60      	ldr	r3, [pc, #384]	@ (800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a9ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a9f0:	d106      	bne.n	800aa00 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800a9f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a9f8:	d102      	bne.n	800aa00 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a9fa:	4b5f      	ldr	r3, [pc, #380]	@ (800ab78 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800a9fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9fe:	e002      	b.n	800aa06 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800aa00:	2300      	movs	r3, #0
 800aa02:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800aa04:	e003      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800aa06:	e002      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800aa0c:	bf00      	nop
          }
        }
        break;
 800aa0e:	e2d6      	b.n	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800aa10:	4b55      	ldr	r3, [pc, #340]	@ (800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800aa12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aa16:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800aa1a:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa22:	d031      	beq.n	800aa88 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 800aa24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa2a:	d866      	bhi.n	800aafa <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800aa2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa2e:	2bc0      	cmp	r3, #192	@ 0xc0
 800aa30:	d027      	beq.n	800aa82 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800aa32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa34:	2bc0      	cmp	r3, #192	@ 0xc0
 800aa36:	d860      	bhi.n	800aafa <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800aa38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa3a:	2b80      	cmp	r3, #128	@ 0x80
 800aa3c:	d019      	beq.n	800aa72 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800aa3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa40:	2b80      	cmp	r3, #128	@ 0x80
 800aa42:	d85a      	bhi.n	800aafa <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800aa44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d003      	beq.n	800aa52 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 800aa4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa4c:	2b40      	cmp	r3, #64	@ 0x40
 800aa4e:	d008      	beq.n	800aa62 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 800aa50:	e053      	b.n	800aafa <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aa52:	f107 0320 	add.w	r3, r7, #32
 800aa56:	4618      	mov	r0, r3
 800aa58:	f7fd fb22 	bl	80080a0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800aa5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa5e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800aa60:	e04e      	b.n	800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa62:	f107 0314 	add.w	r3, r7, #20
 800aa66:	4618      	mov	r0, r3
 800aa68:	f7fd fc86 	bl	8008378 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800aa70:	e046      	b.n	800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa72:	f107 0308 	add.w	r3, r7, #8
 800aa76:	4618      	mov	r0, r3
 800aa78:	f7fd fdea 	bl	8008650 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800aa80:	e03e      	b.n	800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800aa82:	4b3a      	ldr	r3, [pc, #232]	@ (800ab6c <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800aa84:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800aa86:	e03b      	b.n	800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aa88:	4b37      	ldr	r3, [pc, #220]	@ (800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800aa8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800aa8e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800aa92:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aa94:	4b34      	ldr	r3, [pc, #208]	@ (800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f003 0302 	and.w	r3, r3, #2
 800aa9c:	2b02      	cmp	r3, #2
 800aa9e:	d10c      	bne.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 800aaa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d109      	bne.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800aaa6:	4b30      	ldr	r3, [pc, #192]	@ (800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	08db      	lsrs	r3, r3, #3
 800aaac:	f003 0303 	and.w	r3, r3, #3
 800aab0:	4a2f      	ldr	r2, [pc, #188]	@ (800ab70 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800aab2:	fa22 f303 	lsr.w	r3, r2, r3
 800aab6:	637b      	str	r3, [r7, #52]	@ 0x34
 800aab8:	e01e      	b.n	800aaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aaba:	4b2b      	ldr	r3, [pc, #172]	@ (800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aac2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aac6:	d106      	bne.n	800aad6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 800aac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aace:	d102      	bne.n	800aad6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800aad0:	4b28      	ldr	r3, [pc, #160]	@ (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800aad2:	637b      	str	r3, [r7, #52]	@ 0x34
 800aad4:	e010      	b.n	800aaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aad6:	4b24      	ldr	r3, [pc, #144]	@ (800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aade:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aae2:	d106      	bne.n	800aaf2 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 800aae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aae6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aaea:	d102      	bne.n	800aaf2 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800aaec:	4b22      	ldr	r3, [pc, #136]	@ (800ab78 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800aaee:	637b      	str	r3, [r7, #52]	@ 0x34
 800aaf0:	e002      	b.n	800aaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800aaf6:	e003      	b.n	800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 800aaf8:	e002      	b.n	800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 800aafa:	2300      	movs	r3, #0
 800aafc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800aafe:	bf00      	nop
          }
        }
        break;
 800ab00:	e25d      	b.n	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800ab02:	4b19      	ldr	r3, [pc, #100]	@ (800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ab04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ab08:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800ab0c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800ab0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d103      	bne.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800ab14:	f7fb fb0e 	bl	8006134 <HAL_RCC_GetPCLK2Freq>
 800ab18:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800ab1a:	e250      	b.n	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800ab1c:	4b12      	ldr	r3, [pc, #72]	@ (800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab28:	d10b      	bne.n	800ab42 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 800ab2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab30:	d107      	bne.n	800ab42 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab32:	f107 0314 	add.w	r3, r7, #20
 800ab36:	4618      	mov	r0, r3
 800ab38:	f7fd fc1e 	bl	8008378 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ab3c:	69bb      	ldr	r3, [r7, #24]
 800ab3e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab40:	e04f      	b.n	800abe2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800ab42:	4b09      	ldr	r3, [pc, #36]	@ (800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ab4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab4e:	d115      	bne.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800ab50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab56:	d111      	bne.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab58:	f107 0308 	add.w	r3, r7, #8
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f7fd fd77 	bl	8008650 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab66:	e03c      	b.n	800abe2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 800ab68:	44020c00 	.word	0x44020c00
 800ab6c:	00bb8000 	.word	0x00bb8000
 800ab70:	03d09000 	.word	0x03d09000
 800ab74:	003d0900 	.word	0x003d0900
 800ab78:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800ab7c:	4b94      	ldr	r3, [pc, #592]	@ (800add0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f003 0302 	and.w	r3, r3, #2
 800ab84:	2b02      	cmp	r3, #2
 800ab86:	d10d      	bne.n	800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 800ab88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab8a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800ab8e:	d109      	bne.n	800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ab90:	4b8f      	ldr	r3, [pc, #572]	@ (800add0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	08db      	lsrs	r3, r3, #3
 800ab96:	f003 0303 	and.w	r3, r3, #3
 800ab9a:	4a8e      	ldr	r2, [pc, #568]	@ (800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800ab9c:	fa22 f303 	lsr.w	r3, r2, r3
 800aba0:	637b      	str	r3, [r7, #52]	@ 0x34
 800aba2:	e01e      	b.n	800abe2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800aba4:	4b8a      	ldr	r3, [pc, #552]	@ (800add0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800abac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800abb0:	d106      	bne.n	800abc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800abb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800abb8:	d102      	bne.n	800abc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 800abba:	4b87      	ldr	r3, [pc, #540]	@ (800add8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800abbc:	637b      	str	r3, [r7, #52]	@ 0x34
 800abbe:	e010      	b.n	800abe2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800abc0:	4b83      	ldr	r3, [pc, #524]	@ (800add0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800abc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800abcc:	d106      	bne.n	800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 800abce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800abd4:	d102      	bne.n	800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800abd6:	4b81      	ldr	r3, [pc, #516]	@ (800addc <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800abd8:	637b      	str	r3, [r7, #52]	@ 0x34
 800abda:	e002      	b.n	800abe2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 800abdc:	2300      	movs	r3, #0
 800abde:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800abe0:	e1ed      	b.n	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800abe2:	e1ec      	b.n	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 800abe4:	4b7a      	ldr	r3, [pc, #488]	@ (800add0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800abe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800abea:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800abee:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 800abf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d103      	bne.n	800abfe <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800abf6:	f7fb fab3 	bl	8006160 <HAL_RCC_GetPCLK3Freq>
 800abfa:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800abfc:	e1df      	b.n	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800abfe:	4b74      	ldr	r3, [pc, #464]	@ (800add0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac0a:	d10b      	bne.n	800ac24 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 800ac0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac12:	d107      	bne.n	800ac24 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac14:	f107 0314 	add.w	r3, r7, #20
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f7fd fbad 	bl	8008378 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ac1e:	69bb      	ldr	r3, [r7, #24]
 800ac20:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac22:	e045      	b.n	800acb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 800ac24:	4b6a      	ldr	r3, [pc, #424]	@ (800add0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ac2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac30:	d10b      	bne.n	800ac4a <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800ac32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ac38:	d107      	bne.n	800ac4a <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac3a:	f107 0308 	add.w	r3, r7, #8
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f7fd fd06 	bl	8008650 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac48:	e032      	b.n	800acb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 800ac4a:	4b61      	ldr	r3, [pc, #388]	@ (800add0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f003 0302 	and.w	r3, r3, #2
 800ac52:	2b02      	cmp	r3, #2
 800ac54:	d10d      	bne.n	800ac72 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 800ac56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac58:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ac5c:	d109      	bne.n	800ac72 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ac5e:	4b5c      	ldr	r3, [pc, #368]	@ (800add0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	08db      	lsrs	r3, r3, #3
 800ac64:	f003 0303 	and.w	r3, r3, #3
 800ac68:	4a5a      	ldr	r2, [pc, #360]	@ (800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800ac6a:	fa22 f303 	lsr.w	r3, r2, r3
 800ac6e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac70:	e01e      	b.n	800acb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800ac72:	4b57      	ldr	r3, [pc, #348]	@ (800add0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ac7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac7e:	d106      	bne.n	800ac8e <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 800ac80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ac86:	d102      	bne.n	800ac8e <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 800ac88:	4b53      	ldr	r3, [pc, #332]	@ (800add8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800ac8a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac8c:	e010      	b.n	800acb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 800ac8e:	4b50      	ldr	r3, [pc, #320]	@ (800add0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac9a:	d106      	bne.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 800ac9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac9e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800aca2:	d102      	bne.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 800aca4:	4b4d      	ldr	r3, [pc, #308]	@ (800addc <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800aca6:	637b      	str	r3, [r7, #52]	@ 0x34
 800aca8:	e002      	b.n	800acb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 800acaa:	2300      	movs	r3, #0
 800acac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800acae:	e186      	b.n	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800acb0:	e185      	b.n	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800acb2:	4b47      	ldr	r3, [pc, #284]	@ (800add0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800acb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800acb8:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800acbc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800acbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d103      	bne.n	800accc <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800acc4:	f7fb fa36 	bl	8006134 <HAL_RCC_GetPCLK2Freq>
 800acc8:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800acca:	e178      	b.n	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 800accc:	4b40      	ldr	r3, [pc, #256]	@ (800add0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800acd4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800acd8:	d10b      	bne.n	800acf2 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 800acda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ace0:	d107      	bne.n	800acf2 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ace2:	f107 0314 	add.w	r3, r7, #20
 800ace6:	4618      	mov	r0, r3
 800ace8:	f7fd fb46 	bl	8008378 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800acec:	69bb      	ldr	r3, [r7, #24]
 800acee:	637b      	str	r3, [r7, #52]	@ 0x34
 800acf0:	e045      	b.n	800ad7e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800acf2:	4b37      	ldr	r3, [pc, #220]	@ (800add0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800acfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800acfe:	d10b      	bne.n	800ad18 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 800ad00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad06:	d107      	bne.n	800ad18 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad08:	f107 0308 	add.w	r3, r7, #8
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f7fd fc9f 	bl	8008650 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad16:	e032      	b.n	800ad7e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 800ad18:	4b2d      	ldr	r3, [pc, #180]	@ (800add0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f003 0302 	and.w	r3, r3, #2
 800ad20:	2b02      	cmp	r3, #2
 800ad22:	d10d      	bne.n	800ad40 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 800ad24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad26:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800ad2a:	d109      	bne.n	800ad40 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ad2c:	4b28      	ldr	r3, [pc, #160]	@ (800add0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	08db      	lsrs	r3, r3, #3
 800ad32:	f003 0303 	and.w	r3, r3, #3
 800ad36:	4a27      	ldr	r2, [pc, #156]	@ (800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800ad38:	fa22 f303 	lsr.w	r3, r2, r3
 800ad3c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad3e:	e01e      	b.n	800ad7e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800ad40:	4b23      	ldr	r3, [pc, #140]	@ (800add0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ad48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad4c:	d106      	bne.n	800ad5c <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 800ad4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad54:	d102      	bne.n	800ad5c <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 800ad56:	4b20      	ldr	r3, [pc, #128]	@ (800add8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800ad58:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad5a:	e010      	b.n	800ad7e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 800ad5c:	4b1c      	ldr	r3, [pc, #112]	@ (800add0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad68:	d106      	bne.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 800ad6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad6c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800ad70:	d102      	bne.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 800ad72:	4b1a      	ldr	r3, [pc, #104]	@ (800addc <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800ad74:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad76:	e002      	b.n	800ad7e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ad7c:	e11f      	b.n	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ad7e:	e11e      	b.n	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800ad80:	4b13      	ldr	r3, [pc, #76]	@ (800add0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ad82:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ad86:	f003 0303 	and.w	r3, r3, #3
 800ad8a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ad8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad8e:	2b03      	cmp	r3, #3
 800ad90:	d85f      	bhi.n	800ae52 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 800ad92:	a201      	add	r2, pc, #4	@ (adr r2, 800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 800ad94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad98:	0800ada9 	.word	0x0800ada9
 800ad9c:	0800adb1 	.word	0x0800adb1
 800ada0:	0800adc1 	.word	0x0800adc1
 800ada4:	0800ade1 	.word	0x0800ade1

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 800ada8:	f7fb f992 	bl	80060d0 <HAL_RCC_GetHCLKFreq>
 800adac:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800adae:	e053      	b.n	800ae58 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800adb0:	f107 0320 	add.w	r3, r7, #32
 800adb4:	4618      	mov	r0, r3
 800adb6:	f7fd f973 	bl	80080a0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800adba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adbc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800adbe:	e04b      	b.n	800ae58 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800adc0:	f107 0314 	add.w	r3, r7, #20
 800adc4:	4618      	mov	r0, r3
 800adc6:	f7fd fad7 	bl	8008378 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800adca:	69fb      	ldr	r3, [r7, #28]
 800adcc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800adce:	e043      	b.n	800ae58 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800add0:	44020c00 	.word	0x44020c00
 800add4:	03d09000 	.word	0x03d09000
 800add8:	003d0900 	.word	0x003d0900
 800addc:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ade0:	4b79      	ldr	r3, [pc, #484]	@ (800afc8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ade2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ade6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800adea:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800adec:	4b76      	ldr	r3, [pc, #472]	@ (800afc8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f003 0302 	and.w	r3, r3, #2
 800adf4:	2b02      	cmp	r3, #2
 800adf6:	d10c      	bne.n	800ae12 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 800adf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d109      	bne.n	800ae12 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800adfe:	4b72      	ldr	r3, [pc, #456]	@ (800afc8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	08db      	lsrs	r3, r3, #3
 800ae04:	f003 0303 	and.w	r3, r3, #3
 800ae08:	4a70      	ldr	r2, [pc, #448]	@ (800afcc <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 800ae0a:	fa22 f303 	lsr.w	r3, r2, r3
 800ae0e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae10:	e01e      	b.n	800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ae12:	4b6d      	ldr	r3, [pc, #436]	@ (800afc8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ae1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae1e:	d106      	bne.n	800ae2e <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 800ae20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae26:	d102      	bne.n	800ae2e <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800ae28:	4b69      	ldr	r3, [pc, #420]	@ (800afd0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 800ae2a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae2c:	e010      	b.n	800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ae2e:	4b66      	ldr	r3, [pc, #408]	@ (800afc8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae3a:	d106      	bne.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 800ae3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ae42:	d102      	bne.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800ae44:	4b63      	ldr	r3, [pc, #396]	@ (800afd4 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800ae46:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae48:	e002      	b.n	800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800ae4e:	e003      	b.n	800ae58 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800ae50:	e002      	b.n	800ae58 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800ae52:	2300      	movs	r3, #0
 800ae54:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ae56:	bf00      	nop
          }
        }
        break;
 800ae58:	e0b1      	b.n	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800ae5a:	4b5b      	ldr	r3, [pc, #364]	@ (800afc8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ae5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ae60:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ae64:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800ae66:	4b58      	ldr	r3, [pc, #352]	@ (800afc8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ae68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ae6c:	f003 0302 	and.w	r3, r3, #2
 800ae70:	2b02      	cmp	r3, #2
 800ae72:	d106      	bne.n	800ae82 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800ae74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d103      	bne.n	800ae82 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 800ae7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ae7e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae80:	e01f      	b.n	800aec2 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800ae82:	4b51      	ldr	r3, [pc, #324]	@ (800afc8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ae84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ae88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ae8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ae90:	d106      	bne.n	800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 800ae92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae94:	2b40      	cmp	r3, #64	@ 0x40
 800ae96:	d103      	bne.n	800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 800ae98:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800ae9c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae9e:	e010      	b.n	800aec2 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 800aea0:	4b49      	ldr	r3, [pc, #292]	@ (800afc8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aea8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aeac:	d106      	bne.n	800aebc <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 800aeae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeb0:	2b80      	cmp	r3, #128	@ 0x80
 800aeb2:	d103      	bne.n	800aebc <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 800aeb4:	f248 0312 	movw	r3, #32786	@ 0x8012
 800aeb8:	637b      	str	r3, [r7, #52]	@ 0x34
 800aeba:	e002      	b.n	800aec2 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800aebc:	2300      	movs	r3, #0
 800aebe:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800aec0:	e07d      	b.n	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800aec2:	e07c      	b.n	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800aec4:	4b40      	ldr	r3, [pc, #256]	@ (800afc8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800aec6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800aeca:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800aece:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800aed0:	4b3d      	ldr	r3, [pc, #244]	@ (800afc8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800aed8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aedc:	d105      	bne.n	800aeea <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 800aede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d102      	bne.n	800aeea <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 800aee4:	4b3c      	ldr	r3, [pc, #240]	@ (800afd8 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800aee6:	637b      	str	r3, [r7, #52]	@ 0x34
 800aee8:	e031      	b.n	800af4e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800aeea:	4b37      	ldr	r3, [pc, #220]	@ (800afc8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aef2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aef6:	d10a      	bne.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 800aef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aefa:	2b10      	cmp	r3, #16
 800aefc:	d107      	bne.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aefe:	f107 0320 	add.w	r3, r7, #32
 800af02:	4618      	mov	r0, r3
 800af04:	f7fd f8cc 	bl	80080a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800af08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af0a:	637b      	str	r3, [r7, #52]	@ 0x34
 800af0c:	e01f      	b.n	800af4e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800af0e:	4b2e      	ldr	r3, [pc, #184]	@ (800afc8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800af10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800af14:	f003 0302 	and.w	r3, r3, #2
 800af18:	2b02      	cmp	r3, #2
 800af1a:	d106      	bne.n	800af2a <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 800af1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af1e:	2b20      	cmp	r3, #32
 800af20:	d103      	bne.n	800af2a <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800af22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af26:	637b      	str	r3, [r7, #52]	@ 0x34
 800af28:	e011      	b.n	800af4e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800af2a:	4b27      	ldr	r3, [pc, #156]	@ (800afc8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800af2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800af30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af38:	d106      	bne.n	800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 800af3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af3c:	2b30      	cmp	r3, #48	@ 0x30
 800af3e:	d103      	bne.n	800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 800af40:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800af44:	637b      	str	r3, [r7, #52]	@ 0x34
 800af46:	e002      	b.n	800af4e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800af48:	2300      	movs	r3, #0
 800af4a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800af4c:	e037      	b.n	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800af4e:	e036      	b.n	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800af50:	4b1d      	ldr	r3, [pc, #116]	@ (800afc8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800af52:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800af56:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800af5a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800af5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af5e:	2b10      	cmp	r3, #16
 800af60:	d107      	bne.n	800af72 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af62:	f107 0320 	add.w	r3, r7, #32
 800af66:	4618      	mov	r0, r3
 800af68:	f7fd f89a 	bl	80080a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800af6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af6e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800af70:	e025      	b.n	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800af72:	4b15      	ldr	r3, [pc, #84]	@ (800afc8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800af7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af7e:	d10a      	bne.n	800af96 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 800af80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af82:	2b20      	cmp	r3, #32
 800af84:	d107      	bne.n	800af96 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af86:	f107 0308 	add.w	r3, r7, #8
 800af8a:	4618      	mov	r0, r3
 800af8c:	f7fd fb60 	bl	8008650 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	637b      	str	r3, [r7, #52]	@ 0x34
 800af94:	e00f      	b.n	800afb6 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800af96:	4b0c      	ldr	r3, [pc, #48]	@ (800afc8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800af9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800afa2:	d105      	bne.n	800afb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 800afa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afa6:	2b30      	cmp	r3, #48	@ 0x30
 800afa8:	d102      	bne.n	800afb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 800afaa:	4b0b      	ldr	r3, [pc, #44]	@ (800afd8 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800afac:	637b      	str	r3, [r7, #52]	@ 0x34
 800afae:	e002      	b.n	800afb6 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800afb0:	2300      	movs	r3, #0
 800afb2:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 800afb4:	e003      	b.n	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800afb6:	e002      	b.n	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 800afb8:	2300      	movs	r3, #0
 800afba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800afbc:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 800afbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	373c      	adds	r7, #60	@ 0x3c
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd90      	pop	{r4, r7, pc}
 800afc8:	44020c00 	.word	0x44020c00
 800afcc:	03d09000 	.word	0x03d09000
 800afd0:	003d0900 	.word	0x003d0900
 800afd4:	007a1200 	.word	0x007a1200
 800afd8:	02dc6c00 	.word	0x02dc6c00

0800afdc <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b084      	sub	sp, #16
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800afe4:	4b48      	ldr	r3, [pc, #288]	@ (800b108 <RCCEx_PLL2_Config+0x12c>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	4a47      	ldr	r2, [pc, #284]	@ (800b108 <RCCEx_PLL2_Config+0x12c>)
 800afea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800afee:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800aff0:	f7f7 ff18 	bl	8002e24 <HAL_GetTick>
 800aff4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aff6:	e008      	b.n	800b00a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800aff8:	f7f7 ff14 	bl	8002e24 <HAL_GetTick>
 800affc:	4602      	mov	r2, r0
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	1ad3      	subs	r3, r2, r3
 800b002:	2b02      	cmp	r3, #2
 800b004:	d901      	bls.n	800b00a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800b006:	2303      	movs	r3, #3
 800b008:	e07a      	b.n	800b100 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b00a:	4b3f      	ldr	r3, [pc, #252]	@ (800b108 <RCCEx_PLL2_Config+0x12c>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b012:	2b00      	cmp	r3, #0
 800b014:	d1f0      	bne.n	800aff8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800b016:	4b3c      	ldr	r3, [pc, #240]	@ (800b108 <RCCEx_PLL2_Config+0x12c>)
 800b018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b01a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b01e:	f023 0303 	bic.w	r3, r3, #3
 800b022:	687a      	ldr	r2, [r7, #4]
 800b024:	6811      	ldr	r1, [r2, #0]
 800b026:	687a      	ldr	r2, [r7, #4]
 800b028:	6852      	ldr	r2, [r2, #4]
 800b02a:	0212      	lsls	r2, r2, #8
 800b02c:	430a      	orrs	r2, r1
 800b02e:	4936      	ldr	r1, [pc, #216]	@ (800b108 <RCCEx_PLL2_Config+0x12c>)
 800b030:	4313      	orrs	r3, r2
 800b032:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	689b      	ldr	r3, [r3, #8]
 800b038:	3b01      	subs	r3, #1
 800b03a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	68db      	ldr	r3, [r3, #12]
 800b042:	3b01      	subs	r3, #1
 800b044:	025b      	lsls	r3, r3, #9
 800b046:	b29b      	uxth	r3, r3
 800b048:	431a      	orrs	r2, r3
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	691b      	ldr	r3, [r3, #16]
 800b04e:	3b01      	subs	r3, #1
 800b050:	041b      	lsls	r3, r3, #16
 800b052:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b056:	431a      	orrs	r2, r3
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	695b      	ldr	r3, [r3, #20]
 800b05c:	3b01      	subs	r3, #1
 800b05e:	061b      	lsls	r3, r3, #24
 800b060:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b064:	4928      	ldr	r1, [pc, #160]	@ (800b108 <RCCEx_PLL2_Config+0x12c>)
 800b066:	4313      	orrs	r3, r2
 800b068:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800b06a:	4b27      	ldr	r3, [pc, #156]	@ (800b108 <RCCEx_PLL2_Config+0x12c>)
 800b06c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b06e:	f023 020c 	bic.w	r2, r3, #12
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	699b      	ldr	r3, [r3, #24]
 800b076:	4924      	ldr	r1, [pc, #144]	@ (800b108 <RCCEx_PLL2_Config+0x12c>)
 800b078:	4313      	orrs	r3, r2
 800b07a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800b07c:	4b22      	ldr	r3, [pc, #136]	@ (800b108 <RCCEx_PLL2_Config+0x12c>)
 800b07e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b080:	f023 0220 	bic.w	r2, r3, #32
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	69db      	ldr	r3, [r3, #28]
 800b088:	491f      	ldr	r1, [pc, #124]	@ (800b108 <RCCEx_PLL2_Config+0x12c>)
 800b08a:	4313      	orrs	r3, r2
 800b08c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800b08e:	4b1e      	ldr	r3, [pc, #120]	@ (800b108 <RCCEx_PLL2_Config+0x12c>)
 800b090:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b096:	491c      	ldr	r1, [pc, #112]	@ (800b108 <RCCEx_PLL2_Config+0x12c>)
 800b098:	4313      	orrs	r3, r2
 800b09a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800b09c:	4b1a      	ldr	r3, [pc, #104]	@ (800b108 <RCCEx_PLL2_Config+0x12c>)
 800b09e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0a0:	4a19      	ldr	r2, [pc, #100]	@ (800b108 <RCCEx_PLL2_Config+0x12c>)
 800b0a2:	f023 0310 	bic.w	r3, r3, #16
 800b0a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800b0a8:	4b17      	ldr	r3, [pc, #92]	@ (800b108 <RCCEx_PLL2_Config+0x12c>)
 800b0aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0ac:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b0b0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800b0b4:	687a      	ldr	r2, [r7, #4]
 800b0b6:	6a12      	ldr	r2, [r2, #32]
 800b0b8:	00d2      	lsls	r2, r2, #3
 800b0ba:	4913      	ldr	r1, [pc, #76]	@ (800b108 <RCCEx_PLL2_Config+0x12c>)
 800b0bc:	4313      	orrs	r3, r2
 800b0be:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800b0c0:	4b11      	ldr	r3, [pc, #68]	@ (800b108 <RCCEx_PLL2_Config+0x12c>)
 800b0c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0c4:	4a10      	ldr	r2, [pc, #64]	@ (800b108 <RCCEx_PLL2_Config+0x12c>)
 800b0c6:	f043 0310 	orr.w	r3, r3, #16
 800b0ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800b0cc:	4b0e      	ldr	r3, [pc, #56]	@ (800b108 <RCCEx_PLL2_Config+0x12c>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	4a0d      	ldr	r2, [pc, #52]	@ (800b108 <RCCEx_PLL2_Config+0x12c>)
 800b0d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b0d6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b0d8:	f7f7 fea4 	bl	8002e24 <HAL_GetTick>
 800b0dc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b0de:	e008      	b.n	800b0f2 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b0e0:	f7f7 fea0 	bl	8002e24 <HAL_GetTick>
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	1ad3      	subs	r3, r2, r3
 800b0ea:	2b02      	cmp	r3, #2
 800b0ec:	d901      	bls.n	800b0f2 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800b0ee:	2303      	movs	r3, #3
 800b0f0:	e006      	b.n	800b100 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b0f2:	4b05      	ldr	r3, [pc, #20]	@ (800b108 <RCCEx_PLL2_Config+0x12c>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d0f0      	beq.n	800b0e0 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800b0fe:	2300      	movs	r3, #0

}
 800b100:	4618      	mov	r0, r3
 800b102:	3710      	adds	r7, #16
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}
 800b108:	44020c00 	.word	0x44020c00

0800b10c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b084      	sub	sp, #16
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800b114:	4b48      	ldr	r3, [pc, #288]	@ (800b238 <RCCEx_PLL3_Config+0x12c>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	4a47      	ldr	r2, [pc, #284]	@ (800b238 <RCCEx_PLL3_Config+0x12c>)
 800b11a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b11e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b120:	f7f7 fe80 	bl	8002e24 <HAL_GetTick>
 800b124:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b126:	e008      	b.n	800b13a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b128:	f7f7 fe7c 	bl	8002e24 <HAL_GetTick>
 800b12c:	4602      	mov	r2, r0
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	1ad3      	subs	r3, r2, r3
 800b132:	2b02      	cmp	r3, #2
 800b134:	d901      	bls.n	800b13a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800b136:	2303      	movs	r3, #3
 800b138:	e07a      	b.n	800b230 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b13a:	4b3f      	ldr	r3, [pc, #252]	@ (800b238 <RCCEx_PLL3_Config+0x12c>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b142:	2b00      	cmp	r3, #0
 800b144:	d1f0      	bne.n	800b128 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800b146:	4b3c      	ldr	r3, [pc, #240]	@ (800b238 <RCCEx_PLL3_Config+0x12c>)
 800b148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b14a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b14e:	f023 0303 	bic.w	r3, r3, #3
 800b152:	687a      	ldr	r2, [r7, #4]
 800b154:	6811      	ldr	r1, [r2, #0]
 800b156:	687a      	ldr	r2, [r7, #4]
 800b158:	6852      	ldr	r2, [r2, #4]
 800b15a:	0212      	lsls	r2, r2, #8
 800b15c:	430a      	orrs	r2, r1
 800b15e:	4936      	ldr	r1, [pc, #216]	@ (800b238 <RCCEx_PLL3_Config+0x12c>)
 800b160:	4313      	orrs	r3, r2
 800b162:	630b      	str	r3, [r1, #48]	@ 0x30
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	689b      	ldr	r3, [r3, #8]
 800b168:	3b01      	subs	r3, #1
 800b16a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	68db      	ldr	r3, [r3, #12]
 800b172:	3b01      	subs	r3, #1
 800b174:	025b      	lsls	r3, r3, #9
 800b176:	b29b      	uxth	r3, r3
 800b178:	431a      	orrs	r2, r3
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	691b      	ldr	r3, [r3, #16]
 800b17e:	3b01      	subs	r3, #1
 800b180:	041b      	lsls	r3, r3, #16
 800b182:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b186:	431a      	orrs	r2, r3
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	695b      	ldr	r3, [r3, #20]
 800b18c:	3b01      	subs	r3, #1
 800b18e:	061b      	lsls	r3, r3, #24
 800b190:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b194:	4928      	ldr	r1, [pc, #160]	@ (800b238 <RCCEx_PLL3_Config+0x12c>)
 800b196:	4313      	orrs	r3, r2
 800b198:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b19a:	4b27      	ldr	r3, [pc, #156]	@ (800b238 <RCCEx_PLL3_Config+0x12c>)
 800b19c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b19e:	f023 020c 	bic.w	r2, r3, #12
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	699b      	ldr	r3, [r3, #24]
 800b1a6:	4924      	ldr	r1, [pc, #144]	@ (800b238 <RCCEx_PLL3_Config+0x12c>)
 800b1a8:	4313      	orrs	r3, r2
 800b1aa:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800b1ac:	4b22      	ldr	r3, [pc, #136]	@ (800b238 <RCCEx_PLL3_Config+0x12c>)
 800b1ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1b0:	f023 0220 	bic.w	r2, r3, #32
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	69db      	ldr	r3, [r3, #28]
 800b1b8:	491f      	ldr	r1, [pc, #124]	@ (800b238 <RCCEx_PLL3_Config+0x12c>)
 800b1ba:	4313      	orrs	r3, r2
 800b1bc:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800b1be:	4b1e      	ldr	r3, [pc, #120]	@ (800b238 <RCCEx_PLL3_Config+0x12c>)
 800b1c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1c6:	491c      	ldr	r1, [pc, #112]	@ (800b238 <RCCEx_PLL3_Config+0x12c>)
 800b1c8:	4313      	orrs	r3, r2
 800b1ca:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800b1cc:	4b1a      	ldr	r3, [pc, #104]	@ (800b238 <RCCEx_PLL3_Config+0x12c>)
 800b1ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1d0:	4a19      	ldr	r2, [pc, #100]	@ (800b238 <RCCEx_PLL3_Config+0x12c>)
 800b1d2:	f023 0310 	bic.w	r3, r3, #16
 800b1d6:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800b1d8:	4b17      	ldr	r3, [pc, #92]	@ (800b238 <RCCEx_PLL3_Config+0x12c>)
 800b1da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b1dc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b1e0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800b1e4:	687a      	ldr	r2, [r7, #4]
 800b1e6:	6a12      	ldr	r2, [r2, #32]
 800b1e8:	00d2      	lsls	r2, r2, #3
 800b1ea:	4913      	ldr	r1, [pc, #76]	@ (800b238 <RCCEx_PLL3_Config+0x12c>)
 800b1ec:	4313      	orrs	r3, r2
 800b1ee:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800b1f0:	4b11      	ldr	r3, [pc, #68]	@ (800b238 <RCCEx_PLL3_Config+0x12c>)
 800b1f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1f4:	4a10      	ldr	r2, [pc, #64]	@ (800b238 <RCCEx_PLL3_Config+0x12c>)
 800b1f6:	f043 0310 	orr.w	r3, r3, #16
 800b1fa:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800b1fc:	4b0e      	ldr	r3, [pc, #56]	@ (800b238 <RCCEx_PLL3_Config+0x12c>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	4a0d      	ldr	r2, [pc, #52]	@ (800b238 <RCCEx_PLL3_Config+0x12c>)
 800b202:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b206:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b208:	f7f7 fe0c 	bl	8002e24 <HAL_GetTick>
 800b20c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b20e:	e008      	b.n	800b222 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b210:	f7f7 fe08 	bl	8002e24 <HAL_GetTick>
 800b214:	4602      	mov	r2, r0
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	1ad3      	subs	r3, r2, r3
 800b21a:	2b02      	cmp	r3, #2
 800b21c:	d901      	bls.n	800b222 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800b21e:	2303      	movs	r3, #3
 800b220:	e006      	b.n	800b230 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b222:	4b05      	ldr	r3, [pc, #20]	@ (800b238 <RCCEx_PLL3_Config+0x12c>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d0f0      	beq.n	800b210 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800b22e:	2300      	movs	r3, #0
}
 800b230:	4618      	mov	r0, r3
 800b232:	3710      	adds	r7, #16
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}
 800b238:	44020c00 	.word	0x44020c00

0800b23c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b084      	sub	sp, #16
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d101      	bne.n	800b24e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800b24a:	2301      	movs	r3, #1
 800b24c:	e08c      	b.n	800b368 <HAL_RNG_Init+0x12c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	7a5b      	ldrb	r3, [r3, #9]
 800b252:	b2db      	uxtb	r3, r3
 800b254:	2b00      	cmp	r3, #0
 800b256:	d105      	bne.n	800b264 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2200      	movs	r2, #0
 800b25c:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f7f6 fdf4 	bl	8001e4c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2202      	movs	r2, #2
 800b268:	725a      	strb	r2, [r3, #9]

  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	681a      	ldr	r2, [r3, #0]
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	f022 0204 	bic.w	r2, r2, #4
 800b278:	601a      	str	r2, [r3, #0]

#if defined(RNG_CR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->CR, RNG_CR_NIST_VALUE | RNG_CR_CONDRST | hrng->Init.ClockErrorDetection);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6859      	ldr	r1, [r3, #4]
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681a      	ldr	r2, [r3, #0]
 800b282:	4b3b      	ldr	r3, [pc, #236]	@ (800b370 <HAL_RNG_Init+0x134>)
 800b284:	430b      	orrs	r3, r1
 800b286:	6013      	str	r3, [r2, #0]
  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
#endif /* RNG_CR_NIST_VALUE */
#if defined(RNG_HTCR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCR_NIST_VALUE);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f646 2291 	movw	r2, #27281	@ 0x6a91
 800b290:	611a      	str	r2, [r3, #16]
#endif /* RNG_HTCR_NIST_VALUE */
#if defined(RNG_NSCR_NIST_VALUE)
  WRITE_REG(hrng->Instance->NSCR, RNG_NSCR_NIST_VALUE);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	4a37      	ldr	r2, [pc, #220]	@ (800b374 <HAL_RNG_Init+0x138>)
 800b298:	60da      	str	r2, [r3, #12]
#endif /* RNG_NSCR_NIST_VALUE */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	681a      	ldr	r2, [r3, #0]
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800b2a8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b2aa:	f7f7 fdbb 	bl	8002e24 <HAL_GetTick>
 800b2ae:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800b2b0:	e016      	b.n	800b2e0 <HAL_RNG_Init+0xa4>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800b2b2:	f7f7 fdb7 	bl	8002e24 <HAL_GetTick>
 800b2b6:	4602      	mov	r2, r0
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	1ad3      	subs	r3, r2, r3
 800b2bc:	2b04      	cmp	r3, #4
 800b2be:	d90f      	bls.n	800b2e0 <HAL_RNG_Init+0xa4>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b2ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2ce:	d107      	bne.n	800b2e0 <HAL_RNG_Init+0xa4>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2201      	movs	r2, #1
 800b2d4:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2202      	movs	r2, #2
 800b2da:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800b2dc:	2301      	movs	r3, #1
 800b2de:	e043      	b.n	800b368 <HAL_RNG_Init+0x12c>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b2ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2ee:	d0e0      	beq.n	800b2b2 <HAL_RNG_Init+0x76>
      }
    }
  }

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	681a      	ldr	r2, [r3, #0]
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f042 0204 	orr.w	r2, r2, #4
 800b2fe:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	685b      	ldr	r3, [r3, #4]
 800b306:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b30a:	2b40      	cmp	r3, #64	@ 0x40
 800b30c:	d104      	bne.n	800b318 <HAL_RNG_Init+0xdc>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2204      	movs	r2, #4
 800b312:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800b314:	2301      	movs	r3, #1
 800b316:	e027      	b.n	800b368 <HAL_RNG_Init+0x12c>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800b318:	f7f7 fd84 	bl	8002e24 <HAL_GetTick>
 800b31c:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800b31e:	e015      	b.n	800b34c <HAL_RNG_Init+0x110>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800b320:	f7f7 fd80 	bl	8002e24 <HAL_GetTick>
 800b324:	4602      	mov	r2, r0
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	1ad3      	subs	r3, r2, r3
 800b32a:	2b04      	cmp	r3, #4
 800b32c:	d90e      	bls.n	800b34c <HAL_RNG_Init+0x110>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	685b      	ldr	r3, [r3, #4]
 800b334:	f003 0301 	and.w	r3, r3, #1
 800b338:	2b01      	cmp	r3, #1
 800b33a:	d007      	beq.n	800b34c <HAL_RNG_Init+0x110>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2204      	movs	r2, #4
 800b340:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2202      	movs	r2, #2
 800b346:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800b348:	2301      	movs	r3, #1
 800b34a:	e00d      	b.n	800b368 <HAL_RNG_Init+0x12c>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	685b      	ldr	r3, [r3, #4]
 800b352:	f003 0301 	and.w	r3, r3, #1
 800b356:	2b01      	cmp	r3, #1
 800b358:	d1e2      	bne.n	800b320 <HAL_RNG_Init+0xe4>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2201      	movs	r2, #1
 800b35e:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2200      	movs	r2, #0
 800b364:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800b366:	2300      	movs	r3, #0
}
 800b368:	4618      	mov	r0, r3
 800b36a:	3710      	adds	r7, #16
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}
 800b370:	40f00e00 	.word	0x40f00e00
 800b374:	0003af66 	.word	0x0003af66

0800b378 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b084      	sub	sp, #16
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b382:	2300      	movs	r3, #0
 800b384:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	7a1b      	ldrb	r3, [r3, #8]
 800b38a:	2b01      	cmp	r3, #1
 800b38c:	d101      	bne.n	800b392 <HAL_RNG_GenerateRandomNumber+0x1a>
 800b38e:	2302      	movs	r3, #2
 800b390:	e068      	b.n	800b464 <HAL_RNG_GenerateRandomNumber+0xec>
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2201      	movs	r2, #1
 800b396:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	7a5b      	ldrb	r3, [r3, #9]
 800b39c:	b2db      	uxtb	r3, r3
 800b39e:	2b01      	cmp	r3, #1
 800b3a0:	d157      	bne.n	800b452 <HAL_RNG_GenerateRandomNumber+0xda>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2202      	movs	r2, #2
 800b3a6:	725a      	strb	r2, [r3, #9]
    /* Check if there is a seed error */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	685b      	ldr	r3, [r3, #4]
 800b3ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3b2:	2b40      	cmp	r3, #64	@ 0x40
 800b3b4:	d10f      	bne.n	800b3d6 <HAL_RNG_GenerateRandomNumber+0x5e>
    {
      /* Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2208      	movs	r2, #8
 800b3ba:	60da      	str	r2, [r3, #12]
      /* Reset from seed error */
      status = RNG_RecoverSeedError(hrng);
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f000 f85f 	bl	800b480 <RNG_RecoverSeedError>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_ERROR)
 800b3c6:	7bfb      	ldrb	r3, [r7, #15]
 800b3c8:	2b01      	cmp	r3, #1
 800b3ca:	d104      	bne.n	800b3d6 <HAL_RNG_GenerateRandomNumber+0x5e>
      {
        /* Update the error code */
        hrng->ErrorCode = HAL_RNG_ERROR_RECOVERSEED;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2220      	movs	r2, #32
 800b3d0:	60da      	str	r2, [r3, #12]
        return status;
 800b3d2:	7bfb      	ldrb	r3, [r7, #15]
 800b3d4:	e046      	b.n	800b464 <HAL_RNG_GenerateRandomNumber+0xec>
      }
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 800b3d6:	f7f7 fd25 	bl	8002e24 <HAL_GetTick>
 800b3da:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800b3dc:	e018      	b.n	800b410 <HAL_RNG_GenerateRandomNumber+0x98>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800b3de:	f7f7 fd21 	bl	8002e24 <HAL_GetTick>
 800b3e2:	4602      	mov	r2, r0
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	1ad3      	subs	r3, r2, r3
 800b3e8:	2b04      	cmp	r3, #4
 800b3ea:	d911      	bls.n	800b410 <HAL_RNG_GenerateRandomNumber+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	685b      	ldr	r3, [r3, #4]
 800b3f2:	f003 0301 	and.w	r3, r3, #1
 800b3f6:	2b01      	cmp	r3, #1
 800b3f8:	d00a      	beq.n	800b410 <HAL_RNG_GenerateRandomNumber+0x98>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2201      	movs	r2, #1
 800b3fe:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2202      	movs	r2, #2
 800b404:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2200      	movs	r2, #0
 800b40a:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 800b40c:	2301      	movs	r3, #1
 800b40e:	e029      	b.n	800b464 <HAL_RNG_GenerateRandomNumber+0xec>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	685b      	ldr	r3, [r3, #4]
 800b416:	f003 0301 	and.w	r3, r3, #1
 800b41a:	2b01      	cmp	r3, #1
 800b41c:	d1df      	bne.n	800b3de <HAL_RNG_GenerateRandomNumber+0x66>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	689a      	ldr	r2, [r3, #8]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	611a      	str	r2, [r3, #16]
    /* In case of seed error, the value available in the RNG_DR register must not
       be used as it may not have enough entropy */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	685b      	ldr	r3, [r3, #4]
 800b42e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b432:	2b40      	cmp	r3, #64	@ 0x40
 800b434:	d105      	bne.n	800b442 <HAL_RNG_GenerateRandomNumber+0xca>
    {
      /* Update the error code and status */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2208      	movs	r2, #8
 800b43a:	60da      	str	r2, [r3, #12]
      status = HAL_ERROR;
 800b43c:	2301      	movs	r3, #1
 800b43e:	73fb      	strb	r3, [r7, #15]
 800b440:	e003      	b.n	800b44a <HAL_RNG_GenerateRandomNumber+0xd2>
    }
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	691a      	ldr	r2, [r3, #16]
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	601a      	str	r2, [r3, #0]
    }
    hrng->State = HAL_RNG_STATE_READY;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2201      	movs	r2, #1
 800b44e:	725a      	strb	r2, [r3, #9]
 800b450:	e004      	b.n	800b45c <HAL_RNG_GenerateRandomNumber+0xe4>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2204      	movs	r2, #4
 800b456:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 800b458:	2301      	movs	r3, #1
 800b45a:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2200      	movs	r2, #0
 800b460:	721a      	strb	r2, [r3, #8]

  return status;
 800b462:	7bfb      	ldrb	r3, [r7, #15]
}
 800b464:	4618      	mov	r0, r3
 800b466:	3710      	adds	r7, #16
 800b468:	46bd      	mov	sp, r7
 800b46a:	bd80      	pop	{r7, pc}

0800b46c <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 800b46c:	b480      	push	{r7}
 800b46e:	b083      	sub	sp, #12
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 800b474:	bf00      	nop
 800b476:	370c      	adds	r7, #12
 800b478:	46bd      	mov	sp, r7
 800b47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47e:	4770      	bx	lr

0800b480 <RNG_RecoverSeedError>:
  * @brief  RNG sequence to recover from a seed error
  * @param  hrng pointer to a RNG_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef RNG_RecoverSeedError(RNG_HandleTypeDef *hrng)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b084      	sub	sp, #16
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b488:	2300      	movs	r3, #0
 800b48a:	60fb      	str	r3, [r7, #12]

  /*Check if seed error current status (SECS)is set */
  if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	685b      	ldr	r3, [r3, #4]
 800b492:	f003 0304 	and.w	r3, r3, #4
 800b496:	2b04      	cmp	r3, #4
 800b498:	d008      	beq.n	800b4ac <RNG_RecoverSeedError+0x2c>
  {
    /* RNG performed the reset automatically (auto-reset) */
    /* Clear bit SEIS */
    CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	685a      	ldr	r2, [r3, #4]
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b4a8:	605a      	str	r2, [r3, #4]
 800b4aa:	e05f      	b.n	800b56c <RNG_RecoverSeedError+0xec>
  }
  else  /* Sequence to fully recover from a seed error*/
  {
    /* Writing bit CONDRST=1*/
    SET_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	681a      	ldr	r2, [r3, #0]
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800b4ba:	601a      	str	r2, [r3, #0]
    /* Writing bit CONDRST=0*/
    CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	681a      	ldr	r2, [r3, #0]
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800b4ca:	601a      	str	r2, [r3, #0]

    /* Wait for conditioning reset process to be completed */
    count = RNG_TIMEOUT_VALUE;
 800b4cc:	2304      	movs	r3, #4
 800b4ce:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	3b01      	subs	r3, #1
 800b4d4:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d110      	bne.n	800b4fe <RNG_RecoverSeedError+0x7e>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2201      	movs	r2, #1
 800b4e0:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	68db      	ldr	r3, [r3, #12]
 800b4e6:	f043 0202 	orr.w	r2, r3, #2
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f7ff ffb9 	bl	800b46c <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	e03d      	b.n	800b57a <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST));
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b508:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b50c:	d0e0      	beq.n	800b4d0 <RNG_RecoverSeedError+0x50>

    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	685b      	ldr	r3, [r3, #4]
 800b514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b518:	2b40      	cmp	r3, #64	@ 0x40
 800b51a:	d107      	bne.n	800b52c <RNG_RecoverSeedError+0xac>
    {
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	685a      	ldr	r2, [r3, #4]
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b52a:	605a      	str	r2, [r3, #4]
    }

    /* Wait for SECS to be cleared */
    count = RNG_TIMEOUT_VALUE;
 800b52c:	2304      	movs	r3, #4
 800b52e:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	3b01      	subs	r3, #1
 800b534:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d110      	bne.n	800b55e <RNG_RecoverSeedError+0xde>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2201      	movs	r2, #1
 800b540:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	68db      	ldr	r3, [r3, #12]
 800b546:	f043 0202 	orr.w	r2, r3, #2
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2200      	movs	r2, #0
 800b552:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f7ff ff89 	bl	800b46c <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 800b55a:	2301      	movs	r3, #1
 800b55c:	e00d      	b.n	800b57a <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->SR, RNG_FLAG_SECS));
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	685b      	ldr	r3, [r3, #4]
 800b564:	f003 0304 	and.w	r3, r3, #4
 800b568:	2b04      	cmp	r3, #4
 800b56a:	d0e1      	beq.n	800b530 <RNG_RecoverSeedError+0xb0>
  }
  /* Update the error code */
  hrng->ErrorCode &= ~ HAL_RNG_ERROR_SEED;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	68db      	ldr	r3, [r3, #12]
 800b570:	f023 0208 	bic.w	r2, r3, #8
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 800b578:	2300      	movs	r3, #0
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	3710      	adds	r7, #16
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}
	...

0800b584 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b084      	sub	sp, #16
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b58c:	2301      	movs	r3, #1
 800b58e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d071      	beq.n	800b67a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b59c:	b2db      	uxtb	r3, r3
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d106      	bne.n	800b5b0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f7f6 fca6 	bl	8001efc <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2202      	movs	r2, #2
 800b5b4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800b5b8:	4b32      	ldr	r3, [pc, #200]	@ (800b684 <HAL_RTC_Init+0x100>)
 800b5ba:	68db      	ldr	r3, [r3, #12]
 800b5bc:	f003 0310 	and.w	r3, r3, #16
 800b5c0:	2b10      	cmp	r3, #16
 800b5c2:	d051      	beq.n	800b668 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b5c4:	4b2f      	ldr	r3, [pc, #188]	@ (800b684 <HAL_RTC_Init+0x100>)
 800b5c6:	22ca      	movs	r2, #202	@ 0xca
 800b5c8:	625a      	str	r2, [r3, #36]	@ 0x24
 800b5ca:	4b2e      	ldr	r3, [pc, #184]	@ (800b684 <HAL_RTC_Init+0x100>)
 800b5cc:	2253      	movs	r2, #83	@ 0x53
 800b5ce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f000 f9a3 	bl	800b91c <RTC_EnterInitMode>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800b5da:	7bfb      	ldrb	r3, [r7, #15]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d13f      	bne.n	800b660 <HAL_RTC_Init+0xdc>
      {
#if defined(RTC_CR_OSEL)
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800b5e0:	4b28      	ldr	r3, [pc, #160]	@ (800b684 <HAL_RTC_Init+0x100>)
 800b5e2:	699b      	ldr	r3, [r3, #24]
 800b5e4:	4a27      	ldr	r2, [pc, #156]	@ (800b684 <HAL_RTC_Init+0x100>)
 800b5e6:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800b5ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b5ee:	6193      	str	r3, [r2, #24]

        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800b5f0:	4b24      	ldr	r3, [pc, #144]	@ (800b684 <HAL_RTC_Init+0x100>)
 800b5f2:	699a      	ldr	r2, [r3, #24]
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6859      	ldr	r1, [r3, #4]
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	691b      	ldr	r3, [r3, #16]
 800b5fc:	4319      	orrs	r1, r3
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	699b      	ldr	r3, [r3, #24]
 800b602:	430b      	orrs	r3, r1
 800b604:	491f      	ldr	r1, [pc, #124]	@ (800b684 <HAL_RTC_Init+0x100>)
 800b606:	4313      	orrs	r3, r2
 800b608:	618b      	str	r3, [r1, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, hrtc->Init.HourFormat);
#endif /* RTC_CR_OSEL */

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	68da      	ldr	r2, [r3, #12]
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	689b      	ldr	r3, [r3, #8]
 800b612:	041b      	lsls	r3, r3, #16
 800b614:	491b      	ldr	r1, [pc, #108]	@ (800b684 <HAL_RTC_Init+0x100>)
 800b616:	4313      	orrs	r3, r2
 800b618:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800b61a:	4b1a      	ldr	r3, [pc, #104]	@ (800b684 <HAL_RTC_Init+0x100>)
 800b61c:	68db      	ldr	r3, [r3, #12]
 800b61e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b62a:	430b      	orrs	r3, r1
 800b62c:	4915      	ldr	r1, [pc, #84]	@ (800b684 <HAL_RTC_Init+0x100>)
 800b62e:	4313      	orrs	r3, r2
 800b630:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f000 f9ae 	bl	800b994 <RTC_ExitInitMode>
 800b638:	4603      	mov	r3, r0
 800b63a:	73fb      	strb	r3, [r7, #15]

#if defined(RTC_CR_OSEL)
        if (status == HAL_OK)
 800b63c:	7bfb      	ldrb	r3, [r7, #15]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d10e      	bne.n	800b660 <HAL_RTC_Init+0xdc>
        {
#if defined(RTC_CR_OUT2EN)
          MODIFY_REG(RTC->CR, \
 800b642:	4b10      	ldr	r3, [pc, #64]	@ (800b684 <HAL_RTC_Init+0x100>)
 800b644:	699b      	ldr	r3, [r3, #24]
 800b646:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6a19      	ldr	r1, [r3, #32]
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	69db      	ldr	r3, [r3, #28]
 800b652:	4319      	orrs	r1, r3
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	695b      	ldr	r3, [r3, #20]
 800b658:	430b      	orrs	r3, r1
 800b65a:	490a      	ldr	r1, [pc, #40]	@ (800b684 <HAL_RTC_Init+0x100>)
 800b65c:	4313      	orrs	r3, r2
 800b65e:	618b      	str	r3, [r1, #24]
        }
#endif /* RTC_CR_OSEL */
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b660:	4b08      	ldr	r3, [pc, #32]	@ (800b684 <HAL_RTC_Init+0x100>)
 800b662:	22ff      	movs	r2, #255	@ 0xff
 800b664:	625a      	str	r2, [r3, #36]	@ 0x24
 800b666:	e001      	b.n	800b66c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800b668:	2300      	movs	r3, #0
 800b66a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800b66c:	7bfb      	ldrb	r3, [r7, #15]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d103      	bne.n	800b67a <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2201      	movs	r2, #1
 800b676:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800b67a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3710      	adds	r7, #16
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}
 800b684:	44007800 	.word	0x44007800

0800b688 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b688:	b590      	push	{r4, r7, lr}
 800b68a:	b087      	sub	sp, #28
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	60f8      	str	r0, [r7, #12]
 800b690:	60b9      	str	r1, [r7, #8]
 800b692:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800b69a:	2b01      	cmp	r3, #1
 800b69c:	d101      	bne.n	800b6a2 <HAL_RTC_SetTime+0x1a>
 800b69e:	2302      	movs	r3, #2
 800b6a0:	e07e      	b.n	800b7a0 <HAL_RTC_SetTime+0x118>
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	2201      	movs	r2, #1
 800b6a6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	2202      	movs	r2, #2
 800b6ae:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b6b2:	4b3d      	ldr	r3, [pc, #244]	@ (800b7a8 <HAL_RTC_SetTime+0x120>)
 800b6b4:	22ca      	movs	r2, #202	@ 0xca
 800b6b6:	625a      	str	r2, [r3, #36]	@ 0x24
 800b6b8:	4b3b      	ldr	r3, [pc, #236]	@ (800b7a8 <HAL_RTC_SetTime+0x120>)
 800b6ba:	2253      	movs	r2, #83	@ 0x53
 800b6bc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b6be:	68f8      	ldr	r0, [r7, #12]
 800b6c0:	f000 f92c 	bl	800b91c <RTC_EnterInitMode>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b6c8:	7cfb      	ldrb	r3, [r7, #19]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d159      	bne.n	800b782 <HAL_RTC_SetTime+0xfa>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800b6ce:	4b36      	ldr	r3, [pc, #216]	@ (800b7a8 <HAL_RTC_SetTime+0x120>)
 800b6d0:	68db      	ldr	r3, [r3, #12]
 800b6d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b6d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b6da:	d04d      	beq.n	800b778 <HAL_RTC_SetTime+0xf0>
    {
      if (Format == RTC_FORMAT_BIN)
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d125      	bne.n	800b72e <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800b6e2:	4b31      	ldr	r3, [pc, #196]	@ (800b7a8 <HAL_RTC_SetTime+0x120>)
 800b6e4:	699b      	ldr	r3, [r3, #24]
 800b6e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d102      	bne.n	800b6f4 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800b6ee:	68bb      	ldr	r3, [r7, #8]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	781b      	ldrb	r3, [r3, #0]
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f000 f989 	bl	800ba10 <RTC_ByteToBcd2>
 800b6fe:	4603      	mov	r3, r0
 800b700:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	785b      	ldrb	r3, [r3, #1]
 800b706:	4618      	mov	r0, r3
 800b708:	f000 f982 	bl	800ba10 <RTC_ByteToBcd2>
 800b70c:	4603      	mov	r3, r0
 800b70e:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b710:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	789b      	ldrb	r3, [r3, #2]
 800b716:	4618      	mov	r0, r3
 800b718:	f000 f97a 	bl	800ba10 <RTC_ByteToBcd2>
 800b71c:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b71e:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	78db      	ldrb	r3, [r3, #3]
 800b726:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b728:	4313      	orrs	r3, r2
 800b72a:	617b      	str	r3, [r7, #20]
 800b72c:	e017      	b.n	800b75e <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800b72e:	4b1e      	ldr	r3, [pc, #120]	@ (800b7a8 <HAL_RTC_SetTime+0x120>)
 800b730:	699b      	ldr	r3, [r3, #24]
 800b732:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b736:	2b00      	cmp	r3, #0
 800b738:	d102      	bne.n	800b740 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	2200      	movs	r2, #0
 800b73e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	781b      	ldrb	r3, [r3, #0]
 800b744:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	785b      	ldrb	r3, [r3, #1]
 800b74a:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b74c:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800b74e:	68ba      	ldr	r2, [r7, #8]
 800b750:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b752:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	78db      	ldrb	r3, [r3, #3]
 800b758:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b75a:	4313      	orrs	r3, r2
 800b75c:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800b75e:	4a12      	ldr	r2, [pc, #72]	@ (800b7a8 <HAL_RTC_SetTime+0x120>)
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800b766:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800b76a:	6013      	str	r3, [r2, #0]

      /* Clear the bits to be configured */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800b76c:	4b0e      	ldr	r3, [pc, #56]	@ (800b7a8 <HAL_RTC_SetTime+0x120>)
 800b76e:	699b      	ldr	r3, [r3, #24]
 800b770:	4a0d      	ldr	r2, [pc, #52]	@ (800b7a8 <HAL_RTC_SetTime+0x120>)
 800b772:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b776:	6193      	str	r3, [r2, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b778:	68f8      	ldr	r0, [r7, #12]
 800b77a:	f000 f90b 	bl	800b994 <RTC_ExitInitMode>
 800b77e:	4603      	mov	r3, r0
 800b780:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b782:	4b09      	ldr	r3, [pc, #36]	@ (800b7a8 <HAL_RTC_SetTime+0x120>)
 800b784:	22ff      	movs	r2, #255	@ 0xff
 800b786:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800b788:	7cfb      	ldrb	r3, [r7, #19]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d103      	bne.n	800b796 <HAL_RTC_SetTime+0x10e>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	2201      	movs	r2, #1
 800b792:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	2200      	movs	r2, #0
 800b79a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800b79e:	7cfb      	ldrb	r3, [r7, #19]
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	371c      	adds	r7, #28
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd90      	pop	{r4, r7, pc}
 800b7a8:	44007800 	.word	0x44007800

0800b7ac <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b7ac:	b590      	push	{r4, r7, lr}
 800b7ae:	b087      	sub	sp, #28
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	60f8      	str	r0, [r7, #12]
 800b7b4:	60b9      	str	r1, [r7, #8]
 800b7b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800b7be:	2b01      	cmp	r3, #1
 800b7c0:	d101      	bne.n	800b7c6 <HAL_RTC_SetDate+0x1a>
 800b7c2:	2302      	movs	r3, #2
 800b7c4:	e071      	b.n	800b8aa <HAL_RTC_SetDate+0xfe>
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	2202      	movs	r2, #2
 800b7d2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d10e      	bne.n	800b7fa <HAL_RTC_SetDate+0x4e>
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	785b      	ldrb	r3, [r3, #1]
 800b7e0:	f003 0310 	and.w	r3, r3, #16
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d008      	beq.n	800b7fa <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	785b      	ldrb	r3, [r3, #1]
 800b7ec:	f023 0310 	bic.w	r3, r3, #16
 800b7f0:	b2db      	uxtb	r3, r3
 800b7f2:	330a      	adds	r3, #10
 800b7f4:	b2da      	uxtb	r2, r3
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d11c      	bne.n	800b83a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	78db      	ldrb	r3, [r3, #3]
 800b804:	4618      	mov	r0, r3
 800b806:	f000 f903 	bl	800ba10 <RTC_ByteToBcd2>
 800b80a:	4603      	mov	r3, r0
 800b80c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	785b      	ldrb	r3, [r3, #1]
 800b812:	4618      	mov	r0, r3
 800b814:	f000 f8fc 	bl	800ba10 <RTC_ByteToBcd2>
 800b818:	4603      	mov	r3, r0
 800b81a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800b81c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	789b      	ldrb	r3, [r3, #2]
 800b822:	4618      	mov	r0, r3
 800b824:	f000 f8f4 	bl	800ba10 <RTC_ByteToBcd2>
 800b828:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b82a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	781b      	ldrb	r3, [r3, #0]
 800b832:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800b834:	4313      	orrs	r3, r2
 800b836:	617b      	str	r3, [r7, #20]
 800b838:	e00e      	b.n	800b858 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	78db      	ldrb	r3, [r3, #3]
 800b83e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	785b      	ldrb	r3, [r3, #1]
 800b844:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800b846:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800b848:	68ba      	ldr	r2, [r7, #8]
 800b84a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800b84c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	781b      	ldrb	r3, [r3, #0]
 800b852:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800b854:	4313      	orrs	r3, r2
 800b856:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b858:	4b16      	ldr	r3, [pc, #88]	@ (800b8b4 <HAL_RTC_SetDate+0x108>)
 800b85a:	22ca      	movs	r2, #202	@ 0xca
 800b85c:	625a      	str	r2, [r3, #36]	@ 0x24
 800b85e:	4b15      	ldr	r3, [pc, #84]	@ (800b8b4 <HAL_RTC_SetDate+0x108>)
 800b860:	2253      	movs	r2, #83	@ 0x53
 800b862:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b864:	68f8      	ldr	r0, [r7, #12]
 800b866:	f000 f859 	bl	800b91c <RTC_EnterInitMode>
 800b86a:	4603      	mov	r3, r0
 800b86c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b86e:	7cfb      	ldrb	r3, [r7, #19]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d10b      	bne.n	800b88c <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800b874:	4a0f      	ldr	r2, [pc, #60]	@ (800b8b4 <HAL_RTC_SetDate+0x108>)
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800b87c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b880:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b882:	68f8      	ldr	r0, [r7, #12]
 800b884:	f000 f886 	bl	800b994 <RTC_ExitInitMode>
 800b888:	4603      	mov	r3, r0
 800b88a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b88c:	4b09      	ldr	r3, [pc, #36]	@ (800b8b4 <HAL_RTC_SetDate+0x108>)
 800b88e:	22ff      	movs	r2, #255	@ 0xff
 800b890:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800b892:	7cfb      	ldrb	r3, [r7, #19]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d103      	bne.n	800b8a0 <HAL_RTC_SetDate+0xf4>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	2201      	movs	r2, #1
 800b89c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800b8a8:	7cfb      	ldrb	r3, [r7, #19]
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	371c      	adds	r7, #28
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd90      	pop	{r4, r7, pc}
 800b8b2:	bf00      	nop
 800b8b4:	44007800 	.word	0x44007800

0800b8b8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b084      	sub	sp, #16
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800b8c0:	4b15      	ldr	r3, [pc, #84]	@ (800b918 <HAL_RTC_WaitForSynchro+0x60>)
 800b8c2:	68db      	ldr	r3, [r3, #12]
 800b8c4:	4a14      	ldr	r2, [pc, #80]	@ (800b918 <HAL_RTC_WaitForSynchro+0x60>)
 800b8c6:	f023 0320 	bic.w	r3, r3, #32
 800b8ca:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800b8cc:	f7f7 faaa 	bl	8002e24 <HAL_GetTick>
 800b8d0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800b8d2:	e013      	b.n	800b8fc <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b8d4:	f7f7 faa6 	bl	8002e24 <HAL_GetTick>
 800b8d8:	4602      	mov	r2, r0
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	1ad3      	subs	r3, r2, r3
 800b8de:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b8e2:	d90b      	bls.n	800b8fc <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800b8e4:	4b0c      	ldr	r3, [pc, #48]	@ (800b918 <HAL_RTC_WaitForSynchro+0x60>)
 800b8e6:	68db      	ldr	r3, [r3, #12]
 800b8e8:	f003 0320 	and.w	r3, r3, #32
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d10c      	bne.n	800b90a <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2203      	movs	r2, #3
 800b8f4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800b8f8:	2303      	movs	r3, #3
 800b8fa:	e008      	b.n	800b90e <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800b8fc:	4b06      	ldr	r3, [pc, #24]	@ (800b918 <HAL_RTC_WaitForSynchro+0x60>)
 800b8fe:	68db      	ldr	r3, [r3, #12]
 800b900:	f003 0320 	and.w	r3, r3, #32
 800b904:	2b00      	cmp	r3, #0
 800b906:	d0e5      	beq.n	800b8d4 <HAL_RTC_WaitForSynchro+0x1c>
 800b908:	e000      	b.n	800b90c <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800b90a:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800b90c:	2300      	movs	r3, #0
}
 800b90e:	4618      	mov	r0, r3
 800b910:	3710      	adds	r7, #16
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}
 800b916:	bf00      	nop
 800b918:	44007800 	.word	0x44007800

0800b91c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b084      	sub	sp, #16
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b924:	2300      	movs	r3, #0
 800b926:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800b928:	4b19      	ldr	r3, [pc, #100]	@ (800b990 <RTC_EnterInitMode+0x74>)
 800b92a:	68db      	ldr	r3, [r3, #12]
 800b92c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b930:	2b00      	cmp	r3, #0
 800b932:	d128      	bne.n	800b986 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800b934:	4b16      	ldr	r3, [pc, #88]	@ (800b990 <RTC_EnterInitMode+0x74>)
 800b936:	68db      	ldr	r3, [r3, #12]
 800b938:	4a15      	ldr	r2, [pc, #84]	@ (800b990 <RTC_EnterInitMode+0x74>)
 800b93a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b93e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800b940:	f7f7 fa70 	bl	8002e24 <HAL_GetTick>
 800b944:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b946:	e013      	b.n	800b970 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800b948:	f7f7 fa6c 	bl	8002e24 <HAL_GetTick>
 800b94c:	4602      	mov	r2, r0
 800b94e:	68bb      	ldr	r3, [r7, #8]
 800b950:	1ad3      	subs	r3, r2, r3
 800b952:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b956:	d90b      	bls.n	800b970 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800b958:	4b0d      	ldr	r3, [pc, #52]	@ (800b990 <RTC_EnterInitMode+0x74>)
 800b95a:	68db      	ldr	r3, [r3, #12]
 800b95c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b960:	2b00      	cmp	r3, #0
 800b962:	d10f      	bne.n	800b984 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800b964:	2303      	movs	r3, #3
 800b966:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2203      	movs	r2, #3
 800b96c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b970:	4b07      	ldr	r3, [pc, #28]	@ (800b990 <RTC_EnterInitMode+0x74>)
 800b972:	68db      	ldr	r3, [r3, #12]
 800b974:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d104      	bne.n	800b986 <RTC_EnterInitMode+0x6a>
 800b97c:	7bfb      	ldrb	r3, [r7, #15]
 800b97e:	2b03      	cmp	r3, #3
 800b980:	d1e2      	bne.n	800b948 <RTC_EnterInitMode+0x2c>
 800b982:	e000      	b.n	800b986 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800b984:	bf00      	nop
        }
      }
    }
  }

  return status;
 800b986:	7bfb      	ldrb	r3, [r7, #15]
}
 800b988:	4618      	mov	r0, r3
 800b98a:	3710      	adds	r7, #16
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}
 800b990:	44007800 	.word	0x44007800

0800b994 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b084      	sub	sp, #16
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b99c:	2300      	movs	r3, #0
 800b99e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800b9a0:	4b1a      	ldr	r3, [pc, #104]	@ (800ba0c <RTC_ExitInitMode+0x78>)
 800b9a2:	68db      	ldr	r3, [r3, #12]
 800b9a4:	4a19      	ldr	r2, [pc, #100]	@ (800ba0c <RTC_ExitInitMode+0x78>)
 800b9a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b9aa:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800b9ac:	4b17      	ldr	r3, [pc, #92]	@ (800ba0c <RTC_ExitInitMode+0x78>)
 800b9ae:	699b      	ldr	r3, [r3, #24]
 800b9b0:	f003 0320 	and.w	r3, r3, #32
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d10c      	bne.n	800b9d2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	f7ff ff7d 	bl	800b8b8 <HAL_RTC_WaitForSynchro>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d01e      	beq.n	800ba02 <RTC_ExitInitMode+0x6e>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2203      	movs	r2, #3
 800b9c8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800b9cc:	2303      	movs	r3, #3
 800b9ce:	73fb      	strb	r3, [r7, #15]
 800b9d0:	e017      	b.n	800ba02 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b9d2:	4b0e      	ldr	r3, [pc, #56]	@ (800ba0c <RTC_ExitInitMode+0x78>)
 800b9d4:	699b      	ldr	r3, [r3, #24]
 800b9d6:	4a0d      	ldr	r2, [pc, #52]	@ (800ba0c <RTC_ExitInitMode+0x78>)
 800b9d8:	f023 0320 	bic.w	r3, r3, #32
 800b9dc:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f7ff ff6a 	bl	800b8b8 <HAL_RTC_WaitForSynchro>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d005      	beq.n	800b9f6 <RTC_ExitInitMode+0x62>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2203      	movs	r2, #3
 800b9ee:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800b9f2:	2303      	movs	r3, #3
 800b9f4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b9f6:	4b05      	ldr	r3, [pc, #20]	@ (800ba0c <RTC_ExitInitMode+0x78>)
 800b9f8:	699b      	ldr	r3, [r3, #24]
 800b9fa:	4a04      	ldr	r2, [pc, #16]	@ (800ba0c <RTC_ExitInitMode+0x78>)
 800b9fc:	f043 0320 	orr.w	r3, r3, #32
 800ba00:	6193      	str	r3, [r2, #24]
  }
  return status;
 800ba02:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3710      	adds	r7, #16
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}
 800ba0c:	44007800 	.word	0x44007800

0800ba10 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800ba10:	b480      	push	{r7}
 800ba12:	b085      	sub	sp, #20
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	4603      	mov	r3, r0
 800ba18:	71fb      	strb	r3, [r7, #7]
  uint32_t bcd_high = 0U;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_value = Value;
 800ba1e:	79fb      	ldrb	r3, [r7, #7]
 800ba20:	72fb      	strb	r3, [r7, #11]

  while (tmp_value >= 10U)
 800ba22:	e005      	b.n	800ba30 <RTC_ByteToBcd2+0x20>
  {
    bcd_high++;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	3301      	adds	r3, #1
 800ba28:	60fb      	str	r3, [r7, #12]
    tmp_value -= 10U;
 800ba2a:	7afb      	ldrb	r3, [r7, #11]
 800ba2c:	3b0a      	subs	r3, #10
 800ba2e:	72fb      	strb	r3, [r7, #11]
  while (tmp_value >= 10U)
 800ba30:	7afb      	ldrb	r3, [r7, #11]
 800ba32:	2b09      	cmp	r3, #9
 800ba34:	d8f6      	bhi.n	800ba24 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcd_high << 4U) | tmp_value);
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	b2db      	uxtb	r3, r3
 800ba3a:	011b      	lsls	r3, r3, #4
 800ba3c:	b2da      	uxtb	r2, r3
 800ba3e:	7afb      	ldrb	r3, [r7, #11]
 800ba40:	4313      	orrs	r3, r2
 800ba42:	b2db      	uxtb	r3, r3
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	3714      	adds	r7, #20
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4e:	4770      	bx	lr

0800ba50 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(const RTC_HandleTypeDef *hrtc,
                                             const RTC_PrivilegeStateTypeDef *privilegeState)
{
 800ba50:	b480      	push	{r7}
 800ba52:	b083      	sub	sp, #12
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
 800ba58:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	681a      	ldr	r2, [r3, #0]
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	4910      	ldr	r1, [pc, #64]	@ (800baa4 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800ba64:	4313      	orrs	r3, r2
 800ba66:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	689a      	ldr	r2, [r3, #8]
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	68db      	ldr	r3, [r3, #12]
 800ba70:	431a      	orrs	r2, r3
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	699b      	ldr	r3, [r3, #24]
 800ba76:	490c      	ldr	r1, [pc, #48]	@ (800baa8 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800ba78:	4313      	orrs	r3, r2
 800ba7a:	624b      	str	r3, [r1, #36]	@ 0x24
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
#if defined(TAMP_SECCFGR_BKPWSEC)
  MODIFY_REG(TAMP->SECCFGR,
 800ba7c:	4b0a      	ldr	r3, [pc, #40]	@ (800baa8 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800ba7e:	6a1b      	ldr	r3, [r3, #32]
 800ba80:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	6919      	ldr	r1, [r3, #16]
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	695b      	ldr	r3, [r3, #20]
 800ba8c:	041b      	lsls	r3, r3, #16
 800ba8e:	430b      	orrs	r3, r1
 800ba90:	4905      	ldr	r1, [pc, #20]	@ (800baa8 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800ba92:	4313      	orrs	r3, r2
 800ba94:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));
#endif /* TAMP_SECCFGR_BKPWSEC */

  return HAL_OK;
 800ba96:	2300      	movs	r3, #0
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	370c      	adds	r7, #12
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa2:	4770      	bx	lr
 800baa4:	44007800 	.word	0x44007800
 800baa8:	44007c00 	.word	0x44007c00

0800baac <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b084      	sub	sp, #16
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d101      	bne.n	800babe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800baba:	2301      	movs	r3, #1
 800babc:	e162      	b.n	800bd84 <HAL_SPI_Init+0x2d8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	4a70      	ldr	r2, [pc, #448]	@ (800bc84 <HAL_SPI_Init+0x1d8>)
 800bac4:	4293      	cmp	r3, r2
 800bac6:	d018      	beq.n	800bafa <HAL_SPI_Init+0x4e>
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	4a6e      	ldr	r2, [pc, #440]	@ (800bc88 <HAL_SPI_Init+0x1dc>)
 800bace:	4293      	cmp	r3, r2
 800bad0:	d013      	beq.n	800bafa <HAL_SPI_Init+0x4e>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	4a6d      	ldr	r2, [pc, #436]	@ (800bc8c <HAL_SPI_Init+0x1e0>)
 800bad8:	4293      	cmp	r3, r2
 800bada:	d00e      	beq.n	800bafa <HAL_SPI_Init+0x4e>
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	4a6b      	ldr	r2, [pc, #428]	@ (800bc90 <HAL_SPI_Init+0x1e4>)
 800bae2:	4293      	cmp	r3, r2
 800bae4:	d009      	beq.n	800bafa <HAL_SPI_Init+0x4e>
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	4a6a      	ldr	r2, [pc, #424]	@ (800bc94 <HAL_SPI_Init+0x1e8>)
 800baec:	4293      	cmp	r3, r2
 800baee:	d004      	beq.n	800bafa <HAL_SPI_Init+0x4e>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	4a68      	ldr	r2, [pc, #416]	@ (800bc98 <HAL_SPI_Init+0x1ec>)
 800baf6:	4293      	cmp	r3, r2
 800baf8:	e000      	b.n	800bafc <HAL_SPI_Init+0x50>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800bafa:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2200      	movs	r2, #0
 800bb00:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	4a5f      	ldr	r2, [pc, #380]	@ (800bc84 <HAL_SPI_Init+0x1d8>)
 800bb08:	4293      	cmp	r3, r2
 800bb0a:	d018      	beq.n	800bb3e <HAL_SPI_Init+0x92>
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	4a5d      	ldr	r2, [pc, #372]	@ (800bc88 <HAL_SPI_Init+0x1dc>)
 800bb12:	4293      	cmp	r3, r2
 800bb14:	d013      	beq.n	800bb3e <HAL_SPI_Init+0x92>
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	4a5c      	ldr	r2, [pc, #368]	@ (800bc8c <HAL_SPI_Init+0x1e0>)
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	d00e      	beq.n	800bb3e <HAL_SPI_Init+0x92>
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	4a5a      	ldr	r2, [pc, #360]	@ (800bc90 <HAL_SPI_Init+0x1e4>)
 800bb26:	4293      	cmp	r3, r2
 800bb28:	d009      	beq.n	800bb3e <HAL_SPI_Init+0x92>
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	4a59      	ldr	r2, [pc, #356]	@ (800bc94 <HAL_SPI_Init+0x1e8>)
 800bb30:	4293      	cmp	r3, r2
 800bb32:	d004      	beq.n	800bb3e <HAL_SPI_Init+0x92>
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	4a57      	ldr	r2, [pc, #348]	@ (800bc98 <HAL_SPI_Init+0x1ec>)
 800bb3a:	4293      	cmp	r3, r2
 800bb3c:	d105      	bne.n	800bb4a <HAL_SPI_Init+0x9e>
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	68db      	ldr	r3, [r3, #12]
 800bb42:	2b0f      	cmp	r3, #15
 800bb44:	d901      	bls.n	800bb4a <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 800bb46:	2301      	movs	r3, #1
 800bb48:	e11c      	b.n	800bd84 <HAL_SPI_Init+0x2d8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f000 f91e 	bl	800bd8c <SPI_GetPacketSize>
 800bb50:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	4a4b      	ldr	r2, [pc, #300]	@ (800bc84 <HAL_SPI_Init+0x1d8>)
 800bb58:	4293      	cmp	r3, r2
 800bb5a:	d018      	beq.n	800bb8e <HAL_SPI_Init+0xe2>
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	4a49      	ldr	r2, [pc, #292]	@ (800bc88 <HAL_SPI_Init+0x1dc>)
 800bb62:	4293      	cmp	r3, r2
 800bb64:	d013      	beq.n	800bb8e <HAL_SPI_Init+0xe2>
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	4a48      	ldr	r2, [pc, #288]	@ (800bc8c <HAL_SPI_Init+0x1e0>)
 800bb6c:	4293      	cmp	r3, r2
 800bb6e:	d00e      	beq.n	800bb8e <HAL_SPI_Init+0xe2>
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	4a46      	ldr	r2, [pc, #280]	@ (800bc90 <HAL_SPI_Init+0x1e4>)
 800bb76:	4293      	cmp	r3, r2
 800bb78:	d009      	beq.n	800bb8e <HAL_SPI_Init+0xe2>
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	4a45      	ldr	r2, [pc, #276]	@ (800bc94 <HAL_SPI_Init+0x1e8>)
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d004      	beq.n	800bb8e <HAL_SPI_Init+0xe2>
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	4a43      	ldr	r2, [pc, #268]	@ (800bc98 <HAL_SPI_Init+0x1ec>)
 800bb8a:	4293      	cmp	r3, r2
 800bb8c:	d102      	bne.n	800bb94 <HAL_SPI_Init+0xe8>
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	2b08      	cmp	r3, #8
 800bb92:	d820      	bhi.n	800bbd6 <HAL_SPI_Init+0x12a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bb98:	4a40      	ldr	r2, [pc, #256]	@ (800bc9c <HAL_SPI_Init+0x1f0>)
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	d018      	beq.n	800bbd0 <HAL_SPI_Init+0x124>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	4a3f      	ldr	r2, [pc, #252]	@ (800bca0 <HAL_SPI_Init+0x1f4>)
 800bba4:	4293      	cmp	r3, r2
 800bba6:	d013      	beq.n	800bbd0 <HAL_SPI_Init+0x124>
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	4a3d      	ldr	r2, [pc, #244]	@ (800bca4 <HAL_SPI_Init+0x1f8>)
 800bbae:	4293      	cmp	r3, r2
 800bbb0:	d00e      	beq.n	800bbd0 <HAL_SPI_Init+0x124>
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	4a3c      	ldr	r2, [pc, #240]	@ (800bca8 <HAL_SPI_Init+0x1fc>)
 800bbb8:	4293      	cmp	r3, r2
 800bbba:	d009      	beq.n	800bbd0 <HAL_SPI_Init+0x124>
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	4a3a      	ldr	r2, [pc, #232]	@ (800bcac <HAL_SPI_Init+0x200>)
 800bbc2:	4293      	cmp	r3, r2
 800bbc4:	d004      	beq.n	800bbd0 <HAL_SPI_Init+0x124>
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	4a39      	ldr	r2, [pc, #228]	@ (800bcb0 <HAL_SPI_Init+0x204>)
 800bbcc:	4293      	cmp	r3, r2
 800bbce:	d104      	bne.n	800bbda <HAL_SPI_Init+0x12e>
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	2b10      	cmp	r3, #16
 800bbd4:	d901      	bls.n	800bbda <HAL_SPI_Init+0x12e>
  {
    return HAL_ERROR;
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	e0d4      	b.n	800bd84 <HAL_SPI_Init+0x2d8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800bbe0:	b2db      	uxtb	r3, r3
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d106      	bne.n	800bbf4 <HAL_SPI_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f7f6 f9e4 	bl	8001fbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2202      	movs	r2, #2
 800bbf8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	681a      	ldr	r2, [r3, #0]
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	f022 0201 	bic.w	r2, r2, #1
 800bc0a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	689b      	ldr	r3, [r3, #8]
 800bc12:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800bc16:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	699b      	ldr	r3, [r3, #24]
 800bc1c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bc20:	d119      	bne.n	800bc56 <HAL_SPI_Init+0x1aa>
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	685b      	ldr	r3, [r3, #4]
 800bc26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bc2a:	d103      	bne.n	800bc34 <HAL_SPI_Init+0x188>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d008      	beq.n	800bc46 <HAL_SPI_Init+0x19a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d10c      	bne.n	800bc56 <HAL_SPI_Init+0x1aa>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bc40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bc44:	d107      	bne.n	800bc56 <HAL_SPI_Init+0x1aa>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	681a      	ldr	r2, [r3, #0]
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800bc54:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	685b      	ldr	r3, [r3, #4]
 800bc5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d028      	beq.n	800bcb4 <HAL_SPI_Init+0x208>
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	68db      	ldr	r3, [r3, #12]
 800bc66:	2b06      	cmp	r3, #6
 800bc68:	d924      	bls.n	800bcb4 <HAL_SPI_Init+0x208>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	430a      	orrs	r2, r1
 800bc7e:	601a      	str	r2, [r3, #0]
 800bc80:	e020      	b.n	800bcc4 <HAL_SPI_Init+0x218>
 800bc82:	bf00      	nop
 800bc84:	40014c00 	.word	0x40014c00
 800bc88:	50014c00 	.word	0x50014c00
 800bc8c:	44002000 	.word	0x44002000
 800bc90:	54002000 	.word	0x54002000
 800bc94:	40015000 	.word	0x40015000
 800bc98:	50015000 	.word	0x50015000
 800bc9c:	40013000 	.word	0x40013000
 800bca0:	50013000 	.word	0x50013000
 800bca4:	40003800 	.word	0x40003800
 800bca8:	50003800 	.word	0x50003800
 800bcac:	40003c00 	.word	0x40003c00
 800bcb0:	50003c00 	.word	0x50003c00
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	681a      	ldr	r2, [r3, #0]
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bcc2:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	69da      	ldr	r2, [r3, #28]
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bccc:	431a      	orrs	r2, r3
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	431a      	orrs	r2, r3
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcd6:	ea42 0103 	orr.w	r1, r2, r3
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	68da      	ldr	r2, [r3, #12]
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	430a      	orrs	r2, r1
 800bce4:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcee:	431a      	orrs	r2, r3
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcf4:	431a      	orrs	r2, r3
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	699b      	ldr	r3, [r3, #24]
 800bcfa:	431a      	orrs	r2, r3
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	691b      	ldr	r3, [r3, #16]
 800bd00:	431a      	orrs	r2, r3
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	695b      	ldr	r3, [r3, #20]
 800bd06:	431a      	orrs	r2, r3
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6a1b      	ldr	r3, [r3, #32]
 800bd0c:	431a      	orrs	r2, r3
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	685b      	ldr	r3, [r3, #4]
 800bd12:	431a      	orrs	r2, r3
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd18:	431a      	orrs	r2, r3
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	689b      	ldr	r3, [r3, #8]
 800bd1e:	431a      	orrs	r2, r3
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bd24:	431a      	orrs	r2, r3
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd2a:	431a      	orrs	r2, r3
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bd30:	ea42 0103 	orr.w	r1, r2, r3
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	430a      	orrs	r2, r1
 800bd3e:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	f022 0201 	bic.w	r2, r2, #1
 800bd4e:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	685b      	ldr	r3, [r3, #4]
 800bd54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d00a      	beq.n	800bd72 <HAL_SPI_Init+0x2c6>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	68db      	ldr	r3, [r3, #12]
 800bd62:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	430a      	orrs	r2, r1
 800bd70:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2200      	movs	r2, #0
 800bd76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2201      	movs	r2, #1
 800bd7e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800bd82:	2300      	movs	r3, #0
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3710      	adds	r7, #16
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}

0800bd8c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b085      	sub	sp, #20
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd98:	095b      	lsrs	r3, r3, #5
 800bd9a:	3301      	adds	r3, #1
 800bd9c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	68db      	ldr	r3, [r3, #12]
 800bda2:	3301      	adds	r3, #1
 800bda4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	3307      	adds	r3, #7
 800bdaa:	08db      	lsrs	r3, r3, #3
 800bdac:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	68fa      	ldr	r2, [r7, #12]
 800bdb2:	fb02 f303 	mul.w	r3, r2, r3
}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	3714      	adds	r7, #20
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc0:	4770      	bx	lr

0800bdc2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bdc2:	b580      	push	{r7, lr}
 800bdc4:	b082      	sub	sp, #8
 800bdc6:	af00      	add	r7, sp, #0
 800bdc8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d101      	bne.n	800bdd4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	e042      	b.n	800be5a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d106      	bne.n	800bdec <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2200      	movs	r2, #0
 800bde2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f7f6 f9a4 	bl	8002134 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2224      	movs	r2, #36	@ 0x24
 800bdf0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	681a      	ldr	r2, [r3, #0]
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f022 0201 	bic.w	r2, r2, #1
 800be02:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d002      	beq.n	800be12 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800be0c:	6878      	ldr	r0, [r7, #4]
 800be0e:	f000 fab5 	bl	800c37c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f000 f8c4 	bl	800bfa0 <UART_SetConfig>
 800be18:	4603      	mov	r3, r0
 800be1a:	2b01      	cmp	r3, #1
 800be1c:	d101      	bne.n	800be22 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800be1e:	2301      	movs	r3, #1
 800be20:	e01b      	b.n	800be5a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	685a      	ldr	r2, [r3, #4]
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800be30:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	689a      	ldr	r2, [r3, #8]
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800be40:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	681a      	ldr	r2, [r3, #0]
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	f042 0201 	orr.w	r2, r2, #1
 800be50:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f000 fb34 	bl	800c4c0 <UART_CheckIdleState>
 800be58:	4603      	mov	r3, r0
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3708      	adds	r7, #8
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}

0800be62 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800be62:	b580      	push	{r7, lr}
 800be64:	b08a      	sub	sp, #40	@ 0x28
 800be66:	af02      	add	r7, sp, #8
 800be68:	60f8      	str	r0, [r7, #12]
 800be6a:	60b9      	str	r1, [r7, #8]
 800be6c:	603b      	str	r3, [r7, #0]
 800be6e:	4613      	mov	r3, r2
 800be70:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be78:	2b20      	cmp	r3, #32
 800be7a:	f040 808b 	bne.w	800bf94 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d002      	beq.n	800be8a <HAL_UART_Transmit+0x28>
 800be84:	88fb      	ldrh	r3, [r7, #6]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d101      	bne.n	800be8e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800be8a:	2301      	movs	r3, #1
 800be8c:	e083      	b.n	800bf96 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	689b      	ldr	r3, [r3, #8]
 800be94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be98:	2b80      	cmp	r3, #128	@ 0x80
 800be9a:	d107      	bne.n	800beac <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	689a      	ldr	r2, [r3, #8]
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800beaa:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	2200      	movs	r2, #0
 800beb0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	2221      	movs	r2, #33	@ 0x21
 800beb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bebc:	f7f6 ffb2 	bl	8002e24 <HAL_GetTick>
 800bec0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	88fa      	ldrh	r2, [r7, #6]
 800bec6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	88fa      	ldrh	r2, [r7, #6]
 800bece:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	689b      	ldr	r3, [r3, #8]
 800bed6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800beda:	d108      	bne.n	800beee <HAL_UART_Transmit+0x8c>
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	691b      	ldr	r3, [r3, #16]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d104      	bne.n	800beee <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800bee4:	2300      	movs	r3, #0
 800bee6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	61bb      	str	r3, [r7, #24]
 800beec:	e003      	b.n	800bef6 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bef2:	2300      	movs	r3, #0
 800bef4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800bef6:	e030      	b.n	800bf5a <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	9300      	str	r3, [sp, #0]
 800befc:	697b      	ldr	r3, [r7, #20]
 800befe:	2200      	movs	r2, #0
 800bf00:	2180      	movs	r1, #128	@ 0x80
 800bf02:	68f8      	ldr	r0, [r7, #12]
 800bf04:	f000 fb86 	bl	800c614 <UART_WaitOnFlagUntilTimeout>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d005      	beq.n	800bf1a <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	2220      	movs	r2, #32
 800bf12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800bf16:	2303      	movs	r3, #3
 800bf18:	e03d      	b.n	800bf96 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800bf1a:	69fb      	ldr	r3, [r7, #28]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d10b      	bne.n	800bf38 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bf20:	69bb      	ldr	r3, [r7, #24]
 800bf22:	881b      	ldrh	r3, [r3, #0]
 800bf24:	461a      	mov	r2, r3
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bf2e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800bf30:	69bb      	ldr	r3, [r7, #24]
 800bf32:	3302      	adds	r3, #2
 800bf34:	61bb      	str	r3, [r7, #24]
 800bf36:	e007      	b.n	800bf48 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bf38:	69fb      	ldr	r3, [r7, #28]
 800bf3a:	781a      	ldrb	r2, [r3, #0]
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800bf42:	69fb      	ldr	r3, [r7, #28]
 800bf44:	3301      	adds	r3, #1
 800bf46:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bf4e:	b29b      	uxth	r3, r3
 800bf50:	3b01      	subs	r3, #1
 800bf52:	b29a      	uxth	r2, r3
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bf60:	b29b      	uxth	r3, r3
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d1c8      	bne.n	800bef8 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	9300      	str	r3, [sp, #0]
 800bf6a:	697b      	ldr	r3, [r7, #20]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	2140      	movs	r1, #64	@ 0x40
 800bf70:	68f8      	ldr	r0, [r7, #12]
 800bf72:	f000 fb4f 	bl	800c614 <UART_WaitOnFlagUntilTimeout>
 800bf76:	4603      	mov	r3, r0
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d005      	beq.n	800bf88 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	2220      	movs	r2, #32
 800bf80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800bf84:	2303      	movs	r3, #3
 800bf86:	e006      	b.n	800bf96 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	2220      	movs	r2, #32
 800bf8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800bf90:	2300      	movs	r3, #0
 800bf92:	e000      	b.n	800bf96 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800bf94:	2302      	movs	r3, #2
  }
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3720      	adds	r7, #32
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}
	...

0800bfa0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bfa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bfa4:	b094      	sub	sp, #80	@ 0x50
 800bfa6:	af00      	add	r7, sp, #0
 800bfa8:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bfaa:	2300      	movs	r3, #0
 800bfac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800bfb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfb2:	681a      	ldr	r2, [r3, #0]
 800bfb4:	4b78      	ldr	r3, [pc, #480]	@ (800c198 <UART_SetConfig+0x1f8>)
 800bfb6:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bfb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfba:	689a      	ldr	r2, [r3, #8]
 800bfbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfbe:	691b      	ldr	r3, [r3, #16]
 800bfc0:	431a      	orrs	r2, r3
 800bfc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfc4:	695b      	ldr	r3, [r3, #20]
 800bfc6:	431a      	orrs	r2, r3
 800bfc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfca:	69db      	ldr	r3, [r3, #28]
 800bfcc:	4313      	orrs	r3, r2
 800bfce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bfd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	4971      	ldr	r1, [pc, #452]	@ (800c19c <UART_SetConfig+0x1fc>)
 800bfd8:	4019      	ands	r1, r3
 800bfda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfdc:	681a      	ldr	r2, [r3, #0]
 800bfde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bfe0:	430b      	orrs	r3, r1
 800bfe2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bfe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	685b      	ldr	r3, [r3, #4]
 800bfea:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800bfee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bff0:	68d9      	ldr	r1, [r3, #12]
 800bff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bff4:	681a      	ldr	r2, [r3, #0]
 800bff6:	ea40 0301 	orr.w	r3, r0, r1
 800bffa:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bffe:	699b      	ldr	r3, [r3, #24]
 800c000:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c004:	681a      	ldr	r2, [r3, #0]
 800c006:	4b64      	ldr	r3, [pc, #400]	@ (800c198 <UART_SetConfig+0x1f8>)
 800c008:	429a      	cmp	r2, r3
 800c00a:	d009      	beq.n	800c020 <UART_SetConfig+0x80>
 800c00c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c00e:	681a      	ldr	r2, [r3, #0]
 800c010:	4b63      	ldr	r3, [pc, #396]	@ (800c1a0 <UART_SetConfig+0x200>)
 800c012:	429a      	cmp	r2, r3
 800c014:	d004      	beq.n	800c020 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c018:	6a1a      	ldr	r2, [r3, #32]
 800c01a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c01c:	4313      	orrs	r3, r2
 800c01e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	689b      	ldr	r3, [r3, #8]
 800c026:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800c02a:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800c02e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c030:	681a      	ldr	r2, [r3, #0]
 800c032:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c034:	430b      	orrs	r3, r1
 800c036:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c03e:	f023 000f 	bic.w	r0, r3, #15
 800c042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c044:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800c046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c048:	681a      	ldr	r2, [r3, #0]
 800c04a:	ea40 0301 	orr.w	r3, r0, r1
 800c04e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c052:	681a      	ldr	r2, [r3, #0]
 800c054:	4b53      	ldr	r3, [pc, #332]	@ (800c1a4 <UART_SetConfig+0x204>)
 800c056:	429a      	cmp	r2, r3
 800c058:	d102      	bne.n	800c060 <UART_SetConfig+0xc0>
 800c05a:	2301      	movs	r3, #1
 800c05c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c05e:	e066      	b.n	800c12e <UART_SetConfig+0x18e>
 800c060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c062:	681a      	ldr	r2, [r3, #0]
 800c064:	4b50      	ldr	r3, [pc, #320]	@ (800c1a8 <UART_SetConfig+0x208>)
 800c066:	429a      	cmp	r2, r3
 800c068:	d102      	bne.n	800c070 <UART_SetConfig+0xd0>
 800c06a:	2302      	movs	r3, #2
 800c06c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c06e:	e05e      	b.n	800c12e <UART_SetConfig+0x18e>
 800c070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c072:	681a      	ldr	r2, [r3, #0]
 800c074:	4b4d      	ldr	r3, [pc, #308]	@ (800c1ac <UART_SetConfig+0x20c>)
 800c076:	429a      	cmp	r2, r3
 800c078:	d102      	bne.n	800c080 <UART_SetConfig+0xe0>
 800c07a:	2304      	movs	r3, #4
 800c07c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c07e:	e056      	b.n	800c12e <UART_SetConfig+0x18e>
 800c080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c082:	681a      	ldr	r2, [r3, #0]
 800c084:	4b4a      	ldr	r3, [pc, #296]	@ (800c1b0 <UART_SetConfig+0x210>)
 800c086:	429a      	cmp	r2, r3
 800c088:	d102      	bne.n	800c090 <UART_SetConfig+0xf0>
 800c08a:	2308      	movs	r3, #8
 800c08c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c08e:	e04e      	b.n	800c12e <UART_SetConfig+0x18e>
 800c090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c092:	681a      	ldr	r2, [r3, #0]
 800c094:	4b47      	ldr	r3, [pc, #284]	@ (800c1b4 <UART_SetConfig+0x214>)
 800c096:	429a      	cmp	r2, r3
 800c098:	d102      	bne.n	800c0a0 <UART_SetConfig+0x100>
 800c09a:	2310      	movs	r3, #16
 800c09c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c09e:	e046      	b.n	800c12e <UART_SetConfig+0x18e>
 800c0a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0a2:	681a      	ldr	r2, [r3, #0]
 800c0a4:	4b44      	ldr	r3, [pc, #272]	@ (800c1b8 <UART_SetConfig+0x218>)
 800c0a6:	429a      	cmp	r2, r3
 800c0a8:	d102      	bne.n	800c0b0 <UART_SetConfig+0x110>
 800c0aa:	2320      	movs	r3, #32
 800c0ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c0ae:	e03e      	b.n	800c12e <UART_SetConfig+0x18e>
 800c0b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0b2:	681a      	ldr	r2, [r3, #0]
 800c0b4:	4b41      	ldr	r3, [pc, #260]	@ (800c1bc <UART_SetConfig+0x21c>)
 800c0b6:	429a      	cmp	r2, r3
 800c0b8:	d102      	bne.n	800c0c0 <UART_SetConfig+0x120>
 800c0ba:	2340      	movs	r3, #64	@ 0x40
 800c0bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c0be:	e036      	b.n	800c12e <UART_SetConfig+0x18e>
 800c0c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0c2:	681a      	ldr	r2, [r3, #0]
 800c0c4:	4b3e      	ldr	r3, [pc, #248]	@ (800c1c0 <UART_SetConfig+0x220>)
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	d102      	bne.n	800c0d0 <UART_SetConfig+0x130>
 800c0ca:	2380      	movs	r3, #128	@ 0x80
 800c0cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c0ce:	e02e      	b.n	800c12e <UART_SetConfig+0x18e>
 800c0d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0d2:	681a      	ldr	r2, [r3, #0]
 800c0d4:	4b3b      	ldr	r3, [pc, #236]	@ (800c1c4 <UART_SetConfig+0x224>)
 800c0d6:	429a      	cmp	r2, r3
 800c0d8:	d103      	bne.n	800c0e2 <UART_SetConfig+0x142>
 800c0da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c0de:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c0e0:	e025      	b.n	800c12e <UART_SetConfig+0x18e>
 800c0e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0e4:	681a      	ldr	r2, [r3, #0]
 800c0e6:	4b38      	ldr	r3, [pc, #224]	@ (800c1c8 <UART_SetConfig+0x228>)
 800c0e8:	429a      	cmp	r2, r3
 800c0ea:	d103      	bne.n	800c0f4 <UART_SetConfig+0x154>
 800c0ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c0f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c0f2:	e01c      	b.n	800c12e <UART_SetConfig+0x18e>
 800c0f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0f6:	681a      	ldr	r2, [r3, #0]
 800c0f8:	4b34      	ldr	r3, [pc, #208]	@ (800c1cc <UART_SetConfig+0x22c>)
 800c0fa:	429a      	cmp	r2, r3
 800c0fc:	d103      	bne.n	800c106 <UART_SetConfig+0x166>
 800c0fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c102:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c104:	e013      	b.n	800c12e <UART_SetConfig+0x18e>
 800c106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c108:	681a      	ldr	r2, [r3, #0]
 800c10a:	4b31      	ldr	r3, [pc, #196]	@ (800c1d0 <UART_SetConfig+0x230>)
 800c10c:	429a      	cmp	r2, r3
 800c10e:	d103      	bne.n	800c118 <UART_SetConfig+0x178>
 800c110:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c114:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c116:	e00a      	b.n	800c12e <UART_SetConfig+0x18e>
 800c118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c11a:	681a      	ldr	r2, [r3, #0]
 800c11c:	4b1e      	ldr	r3, [pc, #120]	@ (800c198 <UART_SetConfig+0x1f8>)
 800c11e:	429a      	cmp	r2, r3
 800c120:	d103      	bne.n	800c12a <UART_SetConfig+0x18a>
 800c122:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c126:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c128:	e001      	b.n	800c12e <UART_SetConfig+0x18e>
 800c12a:	2300      	movs	r3, #0
 800c12c:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c12e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c130:	681a      	ldr	r2, [r3, #0]
 800c132:	4b19      	ldr	r3, [pc, #100]	@ (800c198 <UART_SetConfig+0x1f8>)
 800c134:	429a      	cmp	r2, r3
 800c136:	d005      	beq.n	800c144 <UART_SetConfig+0x1a4>
 800c138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c13a:	681a      	ldr	r2, [r3, #0]
 800c13c:	4b18      	ldr	r3, [pc, #96]	@ (800c1a0 <UART_SetConfig+0x200>)
 800c13e:	429a      	cmp	r2, r3
 800c140:	f040 8094 	bne.w	800c26c <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c144:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c146:	2200      	movs	r2, #0
 800c148:	623b      	str	r3, [r7, #32]
 800c14a:	627a      	str	r2, [r7, #36]	@ 0x24
 800c14c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800c150:	f7fc fbea 	bl	8008928 <HAL_RCCEx_GetPeriphCLKFreq>
 800c154:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800c156:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c158:	2b00      	cmp	r3, #0
 800c15a:	f000 80f7 	beq.w	800c34c <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c15e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c162:	4a1c      	ldr	r2, [pc, #112]	@ (800c1d4 <UART_SetConfig+0x234>)
 800c164:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c168:	461a      	mov	r2, r3
 800c16a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c16c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c170:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c174:	685a      	ldr	r2, [r3, #4]
 800c176:	4613      	mov	r3, r2
 800c178:	005b      	lsls	r3, r3, #1
 800c17a:	4413      	add	r3, r2
 800c17c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c17e:	429a      	cmp	r2, r3
 800c180:	d305      	bcc.n	800c18e <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c184:	685b      	ldr	r3, [r3, #4]
 800c186:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c188:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c18a:	429a      	cmp	r2, r3
 800c18c:	d924      	bls.n	800c1d8 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800c18e:	2301      	movs	r3, #1
 800c190:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800c194:	e069      	b.n	800c26a <UART_SetConfig+0x2ca>
 800c196:	bf00      	nop
 800c198:	44002400 	.word	0x44002400
 800c19c:	cfff69f3 	.word	0xcfff69f3
 800c1a0:	54002400 	.word	0x54002400
 800c1a4:	40013800 	.word	0x40013800
 800c1a8:	40004400 	.word	0x40004400
 800c1ac:	40004800 	.word	0x40004800
 800c1b0:	40004c00 	.word	0x40004c00
 800c1b4:	40005000 	.word	0x40005000
 800c1b8:	40006400 	.word	0x40006400
 800c1bc:	40007800 	.word	0x40007800
 800c1c0:	40007c00 	.word	0x40007c00
 800c1c4:	40008000 	.word	0x40008000
 800c1c8:	40006800 	.word	0x40006800
 800c1cc:	40006c00 	.word	0x40006c00
 800c1d0:	40008400 	.word	0x40008400
 800c1d4:	080130f4 	.word	0x080130f4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c1d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c1da:	2200      	movs	r2, #0
 800c1dc:	61bb      	str	r3, [r7, #24]
 800c1de:	61fa      	str	r2, [r7, #28]
 800c1e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1e4:	4a64      	ldr	r2, [pc, #400]	@ (800c378 <UART_SetConfig+0x3d8>)
 800c1e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c1ea:	b29b      	uxth	r3, r3
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	613b      	str	r3, [r7, #16]
 800c1f0:	617a      	str	r2, [r7, #20]
 800c1f2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c1f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c1fa:	f7f4 f847 	bl	800028c <__aeabi_uldivmod>
 800c1fe:	4602      	mov	r2, r0
 800c200:	460b      	mov	r3, r1
 800c202:	4610      	mov	r0, r2
 800c204:	4619      	mov	r1, r3
 800c206:	f04f 0200 	mov.w	r2, #0
 800c20a:	f04f 0300 	mov.w	r3, #0
 800c20e:	020b      	lsls	r3, r1, #8
 800c210:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c214:	0202      	lsls	r2, r0, #8
 800c216:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c218:	6849      	ldr	r1, [r1, #4]
 800c21a:	0849      	lsrs	r1, r1, #1
 800c21c:	2000      	movs	r0, #0
 800c21e:	460c      	mov	r4, r1
 800c220:	4605      	mov	r5, r0
 800c222:	eb12 0804 	adds.w	r8, r2, r4
 800c226:	eb43 0905 	adc.w	r9, r3, r5
 800c22a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c22c:	685b      	ldr	r3, [r3, #4]
 800c22e:	2200      	movs	r2, #0
 800c230:	60bb      	str	r3, [r7, #8]
 800c232:	60fa      	str	r2, [r7, #12]
 800c234:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c238:	4640      	mov	r0, r8
 800c23a:	4649      	mov	r1, r9
 800c23c:	f7f4 f826 	bl	800028c <__aeabi_uldivmod>
 800c240:	4602      	mov	r2, r0
 800c242:	460b      	mov	r3, r1
 800c244:	4613      	mov	r3, r2
 800c246:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c248:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c24a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c24e:	d308      	bcc.n	800c262 <UART_SetConfig+0x2c2>
 800c250:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c252:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c256:	d204      	bcs.n	800c262 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800c258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c25e:	60da      	str	r2, [r3, #12]
 800c260:	e003      	b.n	800c26a <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800c262:	2301      	movs	r3, #1
 800c264:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800c268:	e070      	b.n	800c34c <UART_SetConfig+0x3ac>
 800c26a:	e06f      	b.n	800c34c <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c26c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c26e:	69db      	ldr	r3, [r3, #28]
 800c270:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c274:	d13c      	bne.n	800c2f0 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c276:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c278:	2200      	movs	r2, #0
 800c27a:	603b      	str	r3, [r7, #0]
 800c27c:	607a      	str	r2, [r7, #4]
 800c27e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c282:	f7fc fb51 	bl	8008928 <HAL_RCCEx_GetPeriphCLKFreq>
 800c286:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c288:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d05e      	beq.n	800c34c <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c28e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c292:	4a39      	ldr	r2, [pc, #228]	@ (800c378 <UART_SetConfig+0x3d8>)
 800c294:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c298:	461a      	mov	r2, r3
 800c29a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c29c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c2a0:	005a      	lsls	r2, r3, #1
 800c2a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2a4:	685b      	ldr	r3, [r3, #4]
 800c2a6:	085b      	lsrs	r3, r3, #1
 800c2a8:	441a      	add	r2, r3
 800c2aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2ac:	685b      	ldr	r3, [r3, #4]
 800c2ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c2b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2b6:	2b0f      	cmp	r3, #15
 800c2b8:	d916      	bls.n	800c2e8 <UART_SetConfig+0x348>
 800c2ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c2c0:	d212      	bcs.n	800c2e8 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c2c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2c4:	b29b      	uxth	r3, r3
 800c2c6:	f023 030f 	bic.w	r3, r3, #15
 800c2ca:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c2cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2ce:	085b      	lsrs	r3, r3, #1
 800c2d0:	b29b      	uxth	r3, r3
 800c2d2:	f003 0307 	and.w	r3, r3, #7
 800c2d6:	b29a      	uxth	r2, r3
 800c2d8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c2da:	4313      	orrs	r3, r2
 800c2dc:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800c2de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800c2e4:	60da      	str	r2, [r3, #12]
 800c2e6:	e031      	b.n	800c34c <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800c2e8:	2301      	movs	r3, #1
 800c2ea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800c2ee:	e02d      	b.n	800c34c <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c2f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	469a      	mov	sl, r3
 800c2f6:	4693      	mov	fp, r2
 800c2f8:	4650      	mov	r0, sl
 800c2fa:	4659      	mov	r1, fp
 800c2fc:	f7fc fb14 	bl	8008928 <HAL_RCCEx_GetPeriphCLKFreq>
 800c300:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800c302:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c304:	2b00      	cmp	r3, #0
 800c306:	d021      	beq.n	800c34c <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c30a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c30c:	4a1a      	ldr	r2, [pc, #104]	@ (800c378 <UART_SetConfig+0x3d8>)
 800c30e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c312:	461a      	mov	r2, r3
 800c314:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c316:	fbb3 f2f2 	udiv	r2, r3, r2
 800c31a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c31c:	685b      	ldr	r3, [r3, #4]
 800c31e:	085b      	lsrs	r3, r3, #1
 800c320:	441a      	add	r2, r3
 800c322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c324:	685b      	ldr	r3, [r3, #4]
 800c326:	fbb2 f3f3 	udiv	r3, r2, r3
 800c32a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c32c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c32e:	2b0f      	cmp	r3, #15
 800c330:	d909      	bls.n	800c346 <UART_SetConfig+0x3a6>
 800c332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c334:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c338:	d205      	bcs.n	800c346 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c33a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c33c:	b29a      	uxth	r2, r3
 800c33e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	60da      	str	r2, [r3, #12]
 800c344:	e002      	b.n	800c34c <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800c346:	2301      	movs	r3, #1
 800c348:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c34c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c34e:	2201      	movs	r2, #1
 800c350:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c356:	2201      	movs	r2, #1
 800c358:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c35c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c35e:	2200      	movs	r2, #0
 800c360:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c364:	2200      	movs	r2, #0
 800c366:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c368:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800c36c:	4618      	mov	r0, r3
 800c36e:	3750      	adds	r7, #80	@ 0x50
 800c370:	46bd      	mov	sp, r7
 800c372:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c376:	bf00      	nop
 800c378:	080130f4 	.word	0x080130f4

0800c37c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c37c:	b480      	push	{r7}
 800c37e:	b083      	sub	sp, #12
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c388:	f003 0308 	and.w	r3, r3, #8
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d00a      	beq.n	800c3a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	685b      	ldr	r3, [r3, #4]
 800c396:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	430a      	orrs	r2, r1
 800c3a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3aa:	f003 0301 	and.w	r3, r3, #1
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d00a      	beq.n	800c3c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	685b      	ldr	r3, [r3, #4]
 800c3b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	430a      	orrs	r2, r1
 800c3c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3cc:	f003 0302 	and.w	r3, r3, #2
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d00a      	beq.n	800c3ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	685b      	ldr	r3, [r3, #4]
 800c3da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	430a      	orrs	r2, r1
 800c3e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3ee:	f003 0304 	and.w	r3, r3, #4
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d00a      	beq.n	800c40c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	685b      	ldr	r3, [r3, #4]
 800c3fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	430a      	orrs	r2, r1
 800c40a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c410:	f003 0310 	and.w	r3, r3, #16
 800c414:	2b00      	cmp	r3, #0
 800c416:	d00a      	beq.n	800c42e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	689b      	ldr	r3, [r3, #8]
 800c41e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	430a      	orrs	r2, r1
 800c42c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c432:	f003 0320 	and.w	r3, r3, #32
 800c436:	2b00      	cmp	r3, #0
 800c438:	d00a      	beq.n	800c450 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	689b      	ldr	r3, [r3, #8]
 800c440:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	430a      	orrs	r2, r1
 800c44e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d01a      	beq.n	800c492 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	685b      	ldr	r3, [r3, #4]
 800c462:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	430a      	orrs	r2, r1
 800c470:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c476:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c47a:	d10a      	bne.n	800c492 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	685b      	ldr	r3, [r3, #4]
 800c482:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	430a      	orrs	r2, r1
 800c490:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d00a      	beq.n	800c4b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	685b      	ldr	r3, [r3, #4]
 800c4a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	430a      	orrs	r2, r1
 800c4b2:	605a      	str	r2, [r3, #4]
  }
}
 800c4b4:	bf00      	nop
 800c4b6:	370c      	adds	r7, #12
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4be:	4770      	bx	lr

0800c4c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b098      	sub	sp, #96	@ 0x60
 800c4c4:	af02      	add	r7, sp, #8
 800c4c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c4d0:	f7f6 fca8 	bl	8002e24 <HAL_GetTick>
 800c4d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	f003 0308 	and.w	r3, r3, #8
 800c4e0:	2b08      	cmp	r3, #8
 800c4e2:	d12f      	bne.n	800c544 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c4e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c4e8:	9300      	str	r3, [sp, #0]
 800c4ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f000 f88e 	bl	800c614 <UART_WaitOnFlagUntilTimeout>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d022      	beq.n	800c544 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c506:	e853 3f00 	ldrex	r3, [r3]
 800c50a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c50c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c50e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c512:	653b      	str	r3, [r7, #80]	@ 0x50
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	461a      	mov	r2, r3
 800c51a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c51c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c51e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c520:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c522:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c524:	e841 2300 	strex	r3, r2, [r1]
 800c528:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c52a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d1e6      	bne.n	800c4fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2220      	movs	r2, #32
 800c534:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2200      	movs	r2, #0
 800c53c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c540:	2303      	movs	r3, #3
 800c542:	e063      	b.n	800c60c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	f003 0304 	and.w	r3, r3, #4
 800c54e:	2b04      	cmp	r3, #4
 800c550:	d149      	bne.n	800c5e6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c552:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c556:	9300      	str	r3, [sp, #0]
 800c558:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c55a:	2200      	movs	r2, #0
 800c55c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c560:	6878      	ldr	r0, [r7, #4]
 800c562:	f000 f857 	bl	800c614 <UART_WaitOnFlagUntilTimeout>
 800c566:	4603      	mov	r3, r0
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d03c      	beq.n	800c5e6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c574:	e853 3f00 	ldrex	r3, [r3]
 800c578:	623b      	str	r3, [r7, #32]
   return(result);
 800c57a:	6a3b      	ldr	r3, [r7, #32]
 800c57c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c580:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	461a      	mov	r2, r3
 800c588:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c58a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c58c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c58e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c590:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c592:	e841 2300 	strex	r3, r2, [r1]
 800c596:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d1e6      	bne.n	800c56c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	3308      	adds	r3, #8
 800c5a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5a6:	693b      	ldr	r3, [r7, #16]
 800c5a8:	e853 3f00 	ldrex	r3, [r3]
 800c5ac:	60fb      	str	r3, [r7, #12]
   return(result);
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	f023 0301 	bic.w	r3, r3, #1
 800c5b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	3308      	adds	r3, #8
 800c5bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c5be:	61fa      	str	r2, [r7, #28]
 800c5c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5c2:	69b9      	ldr	r1, [r7, #24]
 800c5c4:	69fa      	ldr	r2, [r7, #28]
 800c5c6:	e841 2300 	strex	r3, r2, [r1]
 800c5ca:	617b      	str	r3, [r7, #20]
   return(result);
 800c5cc:	697b      	ldr	r3, [r7, #20]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d1e5      	bne.n	800c59e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2220      	movs	r2, #32
 800c5d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2200      	movs	r2, #0
 800c5de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c5e2:	2303      	movs	r3, #3
 800c5e4:	e012      	b.n	800c60c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	2220      	movs	r2, #32
 800c5ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	2220      	movs	r2, #32
 800c5f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2200      	movs	r2, #0
 800c600:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	2200      	movs	r2, #0
 800c606:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c60a:	2300      	movs	r3, #0
}
 800c60c:	4618      	mov	r0, r3
 800c60e:	3758      	adds	r7, #88	@ 0x58
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}

0800c614 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b084      	sub	sp, #16
 800c618:	af00      	add	r7, sp, #0
 800c61a:	60f8      	str	r0, [r7, #12]
 800c61c:	60b9      	str	r1, [r7, #8]
 800c61e:	603b      	str	r3, [r7, #0]
 800c620:	4613      	mov	r3, r2
 800c622:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c624:	e04f      	b.n	800c6c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c626:	69bb      	ldr	r3, [r7, #24]
 800c628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c62c:	d04b      	beq.n	800c6c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c62e:	f7f6 fbf9 	bl	8002e24 <HAL_GetTick>
 800c632:	4602      	mov	r2, r0
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	1ad3      	subs	r3, r2, r3
 800c638:	69ba      	ldr	r2, [r7, #24]
 800c63a:	429a      	cmp	r2, r3
 800c63c:	d302      	bcc.n	800c644 <UART_WaitOnFlagUntilTimeout+0x30>
 800c63e:	69bb      	ldr	r3, [r7, #24]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d101      	bne.n	800c648 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c644:	2303      	movs	r3, #3
 800c646:	e04e      	b.n	800c6e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f003 0304 	and.w	r3, r3, #4
 800c652:	2b00      	cmp	r3, #0
 800c654:	d037      	beq.n	800c6c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	2b80      	cmp	r3, #128	@ 0x80
 800c65a:	d034      	beq.n	800c6c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	2b40      	cmp	r3, #64	@ 0x40
 800c660:	d031      	beq.n	800c6c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	69db      	ldr	r3, [r3, #28]
 800c668:	f003 0308 	and.w	r3, r3, #8
 800c66c:	2b08      	cmp	r3, #8
 800c66e:	d110      	bne.n	800c692 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	2208      	movs	r2, #8
 800c676:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c678:	68f8      	ldr	r0, [r7, #12]
 800c67a:	f000 f838 	bl	800c6ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	2208      	movs	r2, #8
 800c682:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	2200      	movs	r2, #0
 800c68a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c68e:	2301      	movs	r3, #1
 800c690:	e029      	b.n	800c6e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	69db      	ldr	r3, [r3, #28]
 800c698:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c69c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c6a0:	d111      	bne.n	800c6c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c6aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c6ac:	68f8      	ldr	r0, [r7, #12]
 800c6ae:	f000 f81e 	bl	800c6ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	2220      	movs	r2, #32
 800c6b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	2200      	movs	r2, #0
 800c6be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c6c2:	2303      	movs	r3, #3
 800c6c4:	e00f      	b.n	800c6e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	69da      	ldr	r2, [r3, #28]
 800c6cc:	68bb      	ldr	r3, [r7, #8]
 800c6ce:	4013      	ands	r3, r2
 800c6d0:	68ba      	ldr	r2, [r7, #8]
 800c6d2:	429a      	cmp	r2, r3
 800c6d4:	bf0c      	ite	eq
 800c6d6:	2301      	moveq	r3, #1
 800c6d8:	2300      	movne	r3, #0
 800c6da:	b2db      	uxtb	r3, r3
 800c6dc:	461a      	mov	r2, r3
 800c6de:	79fb      	ldrb	r3, [r7, #7]
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d0a0      	beq.n	800c626 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c6e4:	2300      	movs	r3, #0
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	3710      	adds	r7, #16
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}

0800c6ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c6ee:	b480      	push	{r7}
 800c6f0:	b095      	sub	sp, #84	@ 0x54
 800c6f2:	af00      	add	r7, sp, #0
 800c6f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6fe:	e853 3f00 	ldrex	r3, [r3]
 800c702:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c706:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c70a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	461a      	mov	r2, r3
 800c712:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c714:	643b      	str	r3, [r7, #64]	@ 0x40
 800c716:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c718:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c71a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c71c:	e841 2300 	strex	r3, r2, [r1]
 800c720:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c724:	2b00      	cmp	r3, #0
 800c726:	d1e6      	bne.n	800c6f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	3308      	adds	r3, #8
 800c72e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c730:	6a3b      	ldr	r3, [r7, #32]
 800c732:	e853 3f00 	ldrex	r3, [r3]
 800c736:	61fb      	str	r3, [r7, #28]
   return(result);
 800c738:	69fb      	ldr	r3, [r7, #28]
 800c73a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c73e:	f023 0301 	bic.w	r3, r3, #1
 800c742:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	3308      	adds	r3, #8
 800c74a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c74c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c74e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c750:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c752:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c754:	e841 2300 	strex	r3, r2, [r1]
 800c758:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c75a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d1e3      	bne.n	800c728 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c764:	2b01      	cmp	r3, #1
 800c766:	d118      	bne.n	800c79a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	e853 3f00 	ldrex	r3, [r3]
 800c774:	60bb      	str	r3, [r7, #8]
   return(result);
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	f023 0310 	bic.w	r3, r3, #16
 800c77c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	461a      	mov	r2, r3
 800c784:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c786:	61bb      	str	r3, [r7, #24]
 800c788:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c78a:	6979      	ldr	r1, [r7, #20]
 800c78c:	69ba      	ldr	r2, [r7, #24]
 800c78e:	e841 2300 	strex	r3, r2, [r1]
 800c792:	613b      	str	r3, [r7, #16]
   return(result);
 800c794:	693b      	ldr	r3, [r7, #16]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d1e6      	bne.n	800c768 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2220      	movs	r2, #32
 800c79e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c7ae:	bf00      	nop
 800c7b0:	3754      	adds	r7, #84	@ 0x54
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b8:	4770      	bx	lr

0800c7ba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c7ba:	b480      	push	{r7}
 800c7bc:	b085      	sub	sp, #20
 800c7be:	af00      	add	r7, sp, #0
 800c7c0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c7c8:	2b01      	cmp	r3, #1
 800c7ca:	d101      	bne.n	800c7d0 <HAL_UARTEx_DisableFifoMode+0x16>
 800c7cc:	2302      	movs	r3, #2
 800c7ce:	e027      	b.n	800c820 <HAL_UARTEx_DisableFifoMode+0x66>
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2201      	movs	r2, #1
 800c7d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2224      	movs	r2, #36	@ 0x24
 800c7dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	681a      	ldr	r2, [r3, #0]
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	f022 0201 	bic.w	r2, r2, #1
 800c7f6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c7fe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2200      	movs	r2, #0
 800c804:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	68fa      	ldr	r2, [r7, #12]
 800c80c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2220      	movs	r2, #32
 800c812:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2200      	movs	r2, #0
 800c81a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c81e:	2300      	movs	r3, #0
}
 800c820:	4618      	mov	r0, r3
 800c822:	3714      	adds	r7, #20
 800c824:	46bd      	mov	sp, r7
 800c826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82a:	4770      	bx	lr

0800c82c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b084      	sub	sp, #16
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
 800c834:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c83c:	2b01      	cmp	r3, #1
 800c83e:	d101      	bne.n	800c844 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c840:	2302      	movs	r3, #2
 800c842:	e02d      	b.n	800c8a0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2201      	movs	r2, #1
 800c848:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2224      	movs	r2, #36	@ 0x24
 800c850:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	681a      	ldr	r2, [r3, #0]
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	f022 0201 	bic.w	r2, r2, #1
 800c86a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	689b      	ldr	r3, [r3, #8]
 800c872:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	683a      	ldr	r2, [r7, #0]
 800c87c:	430a      	orrs	r2, r1
 800c87e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c880:	6878      	ldr	r0, [r7, #4]
 800c882:	f000 f84f 	bl	800c924 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	68fa      	ldr	r2, [r7, #12]
 800c88c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2220      	movs	r2, #32
 800c892:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2200      	movs	r2, #0
 800c89a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c89e:	2300      	movs	r3, #0
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3710      	adds	r7, #16
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}

0800c8a8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b084      	sub	sp, #16
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
 800c8b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c8b8:	2b01      	cmp	r3, #1
 800c8ba:	d101      	bne.n	800c8c0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c8bc:	2302      	movs	r3, #2
 800c8be:	e02d      	b.n	800c91c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2201      	movs	r2, #1
 800c8c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2224      	movs	r2, #36	@ 0x24
 800c8cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	681a      	ldr	r2, [r3, #0]
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	f022 0201 	bic.w	r2, r2, #1
 800c8e6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	689b      	ldr	r3, [r3, #8]
 800c8ee:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	683a      	ldr	r2, [r7, #0]
 800c8f8:	430a      	orrs	r2, r1
 800c8fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f000 f811 	bl	800c924 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	68fa      	ldr	r2, [r7, #12]
 800c908:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2220      	movs	r2, #32
 800c90e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2200      	movs	r2, #0
 800c916:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c91a:	2300      	movs	r3, #0
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	3710      	adds	r7, #16
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}

0800c924 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c924:	b480      	push	{r7}
 800c926:	b085      	sub	sp, #20
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c930:	2b00      	cmp	r3, #0
 800c932:	d108      	bne.n	800c946 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2201      	movs	r2, #1
 800c938:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2201      	movs	r2, #1
 800c940:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c944:	e031      	b.n	800c9aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c946:	2308      	movs	r3, #8
 800c948:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c94a:	2308      	movs	r3, #8
 800c94c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	689b      	ldr	r3, [r3, #8]
 800c954:	0e5b      	lsrs	r3, r3, #25
 800c956:	b2db      	uxtb	r3, r3
 800c958:	f003 0307 	and.w	r3, r3, #7
 800c95c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	689b      	ldr	r3, [r3, #8]
 800c964:	0f5b      	lsrs	r3, r3, #29
 800c966:	b2db      	uxtb	r3, r3
 800c968:	f003 0307 	and.w	r3, r3, #7
 800c96c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c96e:	7bbb      	ldrb	r3, [r7, #14]
 800c970:	7b3a      	ldrb	r2, [r7, #12]
 800c972:	4911      	ldr	r1, [pc, #68]	@ (800c9b8 <UARTEx_SetNbDataToProcess+0x94>)
 800c974:	5c8a      	ldrb	r2, [r1, r2]
 800c976:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c97a:	7b3a      	ldrb	r2, [r7, #12]
 800c97c:	490f      	ldr	r1, [pc, #60]	@ (800c9bc <UARTEx_SetNbDataToProcess+0x98>)
 800c97e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c980:	fb93 f3f2 	sdiv	r3, r3, r2
 800c984:	b29a      	uxth	r2, r3
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c98c:	7bfb      	ldrb	r3, [r7, #15]
 800c98e:	7b7a      	ldrb	r2, [r7, #13]
 800c990:	4909      	ldr	r1, [pc, #36]	@ (800c9b8 <UARTEx_SetNbDataToProcess+0x94>)
 800c992:	5c8a      	ldrb	r2, [r1, r2]
 800c994:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c998:	7b7a      	ldrb	r2, [r7, #13]
 800c99a:	4908      	ldr	r1, [pc, #32]	@ (800c9bc <UARTEx_SetNbDataToProcess+0x98>)
 800c99c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c99e:	fb93 f3f2 	sdiv	r3, r3, r2
 800c9a2:	b29a      	uxth	r2, r3
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c9aa:	bf00      	nop
 800c9ac:	3714      	adds	r7, #20
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b4:	4770      	bx	lr
 800c9b6:	bf00      	nop
 800c9b8:	0801310c 	.word	0x0801310c
 800c9bc:	08013114 	.word	0x08013114

0800c9c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_DRD_TypeDef *USBx)
{
 800c9c0:	b480      	push	{r7}
 800c9c2:	b083      	sub	sp, #12
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
  /* Disable Host Mode */
  USBx->CNTR &= ~USB_CNTR_HOST;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9cc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Force Reset IP */
  USBx->CNTR |= USB_CNTR_USBRST;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9d8:	f043 0201 	orr.w	r2, r3, #1
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c9e0:	2300      	movs	r3, #0
}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	370c      	adds	r7, #12
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ec:	4770      	bx	lr

0800c9ee <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800c9ee:	b084      	sub	sp, #16
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b084      	sub	sp, #16
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
 800c9f8:	f107 001c 	add.w	r0, r7, #28
 800c9fc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  UNUSED(cfg);

  if (USBx == NULL)
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d101      	bne.n	800ca0a <USB_CoreInit+0x1c>
  {
    return HAL_ERROR;
 800ca06:	2301      	movs	r3, #1
 800ca08:	e008      	b.n	800ca1c <USB_CoreInit+0x2e>
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f7ff ffd8 	bl	800c9c0 <USB_CoreReset>
 800ca10:	4603      	mov	r3, r0
 800ca12:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2200      	movs	r2, #0
 800ca18:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800ca1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	3710      	adds	r7, #16
 800ca20:	46bd      	mov	sp, r7
 800ca22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ca26:	b004      	add	sp, #16
 800ca28:	4770      	bx	lr

0800ca2a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800ca2a:	b480      	push	{r7}
 800ca2c:	b085      	sub	sp, #20
 800ca2e:	af00      	add	r7, sp, #0
 800ca30:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2200      	movs	r2, #0
 800ca36:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800ca38:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800ca3c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	68fa      	ldr	r2, [r7, #12]
 800ca42:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800ca44:	2300      	movs	r3, #0
}
 800ca46:	4618      	mov	r0, r3
 800ca48:	3714      	adds	r7, #20
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca50:	4770      	bx	lr

0800ca52 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800ca52:	b480      	push	{r7}
 800ca54:	b085      	sub	sp, #20
 800ca56:	af00      	add	r7, sp, #0
 800ca58:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800ca5a:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800ca5e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	43db      	mvns	r3, r3
 800ca68:	401a      	ands	r2, r3
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800ca6e:	2300      	movs	r3, #0
}
 800ca70:	4618      	mov	r0, r3
 800ca72:	3714      	adds	r7, #20
 800ca74:	46bd      	mov	sp, r7
 800ca76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7a:	4770      	bx	lr

0800ca7c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800ca7c:	b480      	push	{r7}
 800ca7e:	b083      	sub	sp, #12
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
 800ca84:	460b      	mov	r3, r1
 800ca86:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800ca88:	78fb      	ldrb	r3, [r7, #3]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d106      	bne.n	800ca9c <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca92:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	641a      	str	r2, [r3, #64]	@ 0x40
 800ca9a:	e00b      	b.n	800cab4 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800ca9c:	78fb      	ldrb	r3, [r7, #3]
 800ca9e:	2b01      	cmp	r3, #1
 800caa0:	d106      	bne.n	800cab0 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800caa6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	641a      	str	r2, [r3, #64]	@ 0x40
 800caae:	e001      	b.n	800cab4 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800cab0:	2301      	movs	r3, #1
 800cab2:	e000      	b.n	800cab6 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800cab4:	2300      	movs	r3, #0
}
 800cab6:	4618      	mov	r0, r3
 800cab8:	370c      	adds	r7, #12
 800caba:	46bd      	mov	sp, r7
 800cabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac0:	4770      	bx	lr

0800cac2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800cac2:	b084      	sub	sp, #16
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b084      	sub	sp, #16
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
 800cacc:	f107 001c 	add.w	r0, r7, #28
 800cad0:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2201      	movs	r2, #1
 800cad8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cade:	f023 0201 	bic.w	r2, r3, #1
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800cae6:	2100      	movs	r1, #0
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f7ff ffc7 	bl	800ca7c <USB_SetCurrentMode>
 800caee:	4603      	mov	r3, r0
 800caf0:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2200      	movs	r2, #0
 800caf6:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800caf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3710      	adds	r7, #16
 800cafe:	46bd      	mov	sp, r7
 800cb00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cb04:	b004      	add	sp, #16
 800cb06:	4770      	bx	lr

0800cb08 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800cb08:	b480      	push	{r7}
 800cb0a:	b09f      	sub	sp, #124	@ 0x7c
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
 800cb10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800cb12:	2300      	movs	r3, #0
 800cb14:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800cb18:	687a      	ldr	r2, [r7, #4]
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	781b      	ldrb	r3, [r3, #0]
 800cb1e:	009b      	lsls	r3, r3, #2
 800cb20:	4413      	add	r3, r2
 800cb22:	681a      	ldr	r2, [r3, #0]
 800cb24:	4ba0      	ldr	r3, [pc, #640]	@ (800cda8 <USB_ActivateEndpoint+0x2a0>)
 800cb26:	4013      	ands	r3, r2
 800cb28:	673b      	str	r3, [r7, #112]	@ 0x70

  /* initialize Endpoint */
  switch (ep->type)
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	78db      	ldrb	r3, [r3, #3]
 800cb2e:	2b03      	cmp	r3, #3
 800cb30:	d819      	bhi.n	800cb66 <USB_ActivateEndpoint+0x5e>
 800cb32:	a201      	add	r2, pc, #4	@ (adr r2, 800cb38 <USB_ActivateEndpoint+0x30>)
 800cb34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb38:	0800cb49 	.word	0x0800cb49
 800cb3c:	0800cb5d 	.word	0x0800cb5d
 800cb40:	0800cb6f 	.word	0x0800cb6f
 800cb44:	0800cb53 	.word	0x0800cb53
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800cb48:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cb4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800cb4e:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800cb50:	e00e      	b.n	800cb70 <USB_ActivateEndpoint+0x68>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800cb52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cb54:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800cb58:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800cb5a:	e009      	b.n	800cb70 <USB_ActivateEndpoint+0x68>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800cb5c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cb5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800cb62:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800cb64:	e004      	b.n	800cb70 <USB_ActivateEndpoint+0x68>

    default:
      ret = HAL_ERROR;
 800cb66:	2301      	movs	r3, #1
 800cb68:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      break;
 800cb6c:	e000      	b.n	800cb70 <USB_ActivateEndpoint+0x68>
      break;
 800cb6e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 800cb70:	687a      	ldr	r2, [r7, #4]
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	781b      	ldrb	r3, [r3, #0]
 800cb76:	009b      	lsls	r3, r3, #2
 800cb78:	441a      	add	r2, r3
 800cb7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cb7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cb80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb84:	6013      	str	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800cb86:	687a      	ldr	r2, [r7, #4]
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	781b      	ldrb	r3, [r3, #0]
 800cb8c:	009b      	lsls	r3, r3, #2
 800cb8e:	4413      	add	r3, r2
 800cb90:	681a      	ldr	r2, [r3, #0]
 800cb92:	4b86      	ldr	r3, [pc, #536]	@ (800cdac <USB_ActivateEndpoint+0x2a4>)
 800cb94:	4013      	ands	r3, r2
 800cb96:	683a      	ldr	r2, [r7, #0]
 800cb98:	7812      	ldrb	r2, [r2, #0]
 800cb9a:	4313      	orrs	r3, r2
 800cb9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cb9e:	687a      	ldr	r2, [r7, #4]
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	781b      	ldrb	r3, [r3, #0]
 800cba4:	009b      	lsls	r3, r3, #2
 800cba6:	441a      	add	r2, r3
 800cba8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cbaa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cbae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cbb2:	6013      	str	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	7b1b      	ldrb	r3, [r3, #12]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	f040 8177 	bne.w	800ceac <USB_ActivateEndpoint+0x3a4>
  {
    if (ep->is_in != 0U)
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	785b      	ldrb	r3, [r3, #1]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d079      	beq.n	800ccba <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	781b      	ldrb	r3, [r3, #0]
 800cbca:	00db      	lsls	r3, r3, #3
 800cbcc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cbd0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cbd4:	681a      	ldr	r2, [r3, #0]
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	781b      	ldrb	r3, [r3, #0]
 800cbda:	00db      	lsls	r3, r3, #3
 800cbdc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cbe0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cbe4:	0c12      	lsrs	r2, r2, #16
 800cbe6:	0412      	lsls	r2, r2, #16
 800cbe8:	601a      	str	r2, [r3, #0]
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	781b      	ldrb	r3, [r3, #0]
 800cbee:	00db      	lsls	r3, r3, #3
 800cbf0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cbf4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cbf8:	6819      	ldr	r1, [r3, #0]
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	88db      	ldrh	r3, [r3, #6]
 800cbfe:	089b      	lsrs	r3, r3, #2
 800cc00:	b29b      	uxth	r3, r3
 800cc02:	009a      	lsls	r2, r3, #2
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	781b      	ldrb	r3, [r3, #0]
 800cc08:	00db      	lsls	r3, r3, #3
 800cc0a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc0e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc12:	430a      	orrs	r2, r1
 800cc14:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cc16:	687a      	ldr	r2, [r7, #4]
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	781b      	ldrb	r3, [r3, #0]
 800cc1c:	009b      	lsls	r3, r3, #2
 800cc1e:	4413      	add	r3, r2
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	61bb      	str	r3, [r7, #24]
 800cc24:	69bb      	ldr	r3, [r7, #24]
 800cc26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d013      	beq.n	800cc56 <USB_ActivateEndpoint+0x14e>
 800cc2e:	687a      	ldr	r2, [r7, #4]
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	781b      	ldrb	r3, [r3, #0]
 800cc34:	009b      	lsls	r3, r3, #2
 800cc36:	4413      	add	r3, r2
 800cc38:	681a      	ldr	r2, [r3, #0]
 800cc3a:	4b5c      	ldr	r3, [pc, #368]	@ (800cdac <USB_ActivateEndpoint+0x2a4>)
 800cc3c:	4013      	ands	r3, r2
 800cc3e:	617b      	str	r3, [r7, #20]
 800cc40:	687a      	ldr	r2, [r7, #4]
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	781b      	ldrb	r3, [r3, #0]
 800cc46:	009b      	lsls	r3, r3, #2
 800cc48:	441a      	add	r2, r3
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc50:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cc54:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cc56:	683b      	ldr	r3, [r7, #0]
 800cc58:	78db      	ldrb	r3, [r3, #3]
 800cc5a:	2b01      	cmp	r3, #1
 800cc5c:	d018      	beq.n	800cc90 <USB_ActivateEndpoint+0x188>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cc5e:	687a      	ldr	r2, [r7, #4]
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	781b      	ldrb	r3, [r3, #0]
 800cc64:	009b      	lsls	r3, r3, #2
 800cc66:	4413      	add	r3, r2
 800cc68:	681a      	ldr	r2, [r3, #0]
 800cc6a:	4b51      	ldr	r3, [pc, #324]	@ (800cdb0 <USB_ActivateEndpoint+0x2a8>)
 800cc6c:	4013      	ands	r3, r2
 800cc6e:	60fb      	str	r3, [r7, #12]
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	f083 0320 	eor.w	r3, r3, #32
 800cc76:	60fb      	str	r3, [r7, #12]
 800cc78:	687a      	ldr	r2, [r7, #4]
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	781b      	ldrb	r3, [r3, #0]
 800cc7e:	009b      	lsls	r3, r3, #2
 800cc80:	441a      	add	r2, r3
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc8c:	6013      	str	r3, [r2, #0]
 800cc8e:	e28c      	b.n	800d1aa <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cc90:	687a      	ldr	r2, [r7, #4]
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	781b      	ldrb	r3, [r3, #0]
 800cc96:	009b      	lsls	r3, r3, #2
 800cc98:	4413      	add	r3, r2
 800cc9a:	681a      	ldr	r2, [r3, #0]
 800cc9c:	4b44      	ldr	r3, [pc, #272]	@ (800cdb0 <USB_ActivateEndpoint+0x2a8>)
 800cc9e:	4013      	ands	r3, r2
 800cca0:	613b      	str	r3, [r7, #16]
 800cca2:	687a      	ldr	r2, [r7, #4]
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	781b      	ldrb	r3, [r3, #0]
 800cca8:	009b      	lsls	r3, r3, #2
 800ccaa:	441a      	add	r2, r3
 800ccac:	693b      	ldr	r3, [r7, #16]
 800ccae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ccb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ccb6:	6013      	str	r3, [r2, #0]
 800ccb8:	e277      	b.n	800d1aa <USB_ActivateEndpoint+0x6a2>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	781b      	ldrb	r3, [r3, #0]
 800ccbe:	00db      	lsls	r3, r3, #3
 800ccc0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ccc4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ccc8:	685a      	ldr	r2, [r3, #4]
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	781b      	ldrb	r3, [r3, #0]
 800ccce:	00db      	lsls	r3, r3, #3
 800ccd0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ccd4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ccd8:	0c12      	lsrs	r2, r2, #16
 800ccda:	0412      	lsls	r2, r2, #16
 800ccdc:	605a      	str	r2, [r3, #4]
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	781b      	ldrb	r3, [r3, #0]
 800cce2:	00db      	lsls	r3, r3, #3
 800cce4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cce8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ccec:	6859      	ldr	r1, [r3, #4]
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	88db      	ldrh	r3, [r3, #6]
 800ccf2:	089b      	lsrs	r3, r3, #2
 800ccf4:	b29b      	uxth	r3, r3
 800ccf6:	009a      	lsls	r2, r3, #2
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	781b      	ldrb	r3, [r3, #0]
 800ccfc:	00db      	lsls	r3, r3, #3
 800ccfe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd02:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd06:	430a      	orrs	r2, r1
 800cd08:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	781b      	ldrb	r3, [r3, #0]
 800cd0e:	00db      	lsls	r3, r3, #3
 800cd10:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd14:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd18:	685a      	ldr	r2, [r3, #4]
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	781b      	ldrb	r3, [r3, #0]
 800cd1e:	00db      	lsls	r3, r3, #3
 800cd20:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd24:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd28:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800cd2c:	605a      	str	r2, [r3, #4]
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	691b      	ldr	r3, [r3, #16]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d112      	bne.n	800cd5c <USB_ActivateEndpoint+0x254>
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	781b      	ldrb	r3, [r3, #0]
 800cd3a:	00db      	lsls	r3, r3, #3
 800cd3c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd40:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd44:	685a      	ldr	r2, [r3, #4]
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	781b      	ldrb	r3, [r3, #0]
 800cd4a:	00db      	lsls	r3, r3, #3
 800cd4c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd50:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd54:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cd58:	605a      	str	r2, [r3, #4]
 800cd5a:	e04d      	b.n	800cdf8 <USB_ActivateEndpoint+0x2f0>
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	691b      	ldr	r3, [r3, #16]
 800cd60:	2b3e      	cmp	r3, #62	@ 0x3e
 800cd62:	d827      	bhi.n	800cdb4 <USB_ActivateEndpoint+0x2ac>
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	691b      	ldr	r3, [r3, #16]
 800cd68:	085b      	lsrs	r3, r3, #1
 800cd6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	691b      	ldr	r3, [r3, #16]
 800cd70:	f003 0301 	and.w	r3, r3, #1
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d002      	beq.n	800cd7e <USB_ActivateEndpoint+0x276>
 800cd78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cd7a:	3301      	adds	r3, #1
 800cd7c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	781b      	ldrb	r3, [r3, #0]
 800cd82:	00db      	lsls	r3, r3, #3
 800cd84:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd88:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd8c:	6859      	ldr	r1, [r3, #4]
 800cd8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cd90:	069a      	lsls	r2, r3, #26
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	781b      	ldrb	r3, [r3, #0]
 800cd96:	00db      	lsls	r3, r3, #3
 800cd98:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd9c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cda0:	430a      	orrs	r2, r1
 800cda2:	605a      	str	r2, [r3, #4]
 800cda4:	e028      	b.n	800cdf8 <USB_ActivateEndpoint+0x2f0>
 800cda6:	bf00      	nop
 800cda8:	07ff898f 	.word	0x07ff898f
 800cdac:	07ff8f8f 	.word	0x07ff8f8f
 800cdb0:	07ff8fbf 	.word	0x07ff8fbf
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	691b      	ldr	r3, [r3, #16]
 800cdb8:	095b      	lsrs	r3, r3, #5
 800cdba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	691b      	ldr	r3, [r3, #16]
 800cdc0:	f003 031f 	and.w	r3, r3, #31
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d102      	bne.n	800cdce <USB_ActivateEndpoint+0x2c6>
 800cdc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cdca:	3b01      	subs	r3, #1
 800cdcc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	781b      	ldrb	r3, [r3, #0]
 800cdd2:	00db      	lsls	r3, r3, #3
 800cdd4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cdd8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cddc:	685a      	ldr	r2, [r3, #4]
 800cdde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cde0:	069b      	lsls	r3, r3, #26
 800cde2:	431a      	orrs	r2, r3
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	781b      	ldrb	r3, [r3, #0]
 800cde8:	00db      	lsls	r3, r3, #3
 800cdea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cdee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cdf2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cdf6:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cdf8:	687a      	ldr	r2, [r7, #4]
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	781b      	ldrb	r3, [r3, #0]
 800cdfe:	009b      	lsls	r3, r3, #2
 800ce00:	4413      	add	r3, r2
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ce06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d013      	beq.n	800ce38 <USB_ActivateEndpoint+0x330>
 800ce10:	687a      	ldr	r2, [r7, #4]
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	781b      	ldrb	r3, [r3, #0]
 800ce16:	009b      	lsls	r3, r3, #2
 800ce18:	4413      	add	r3, r2
 800ce1a:	681a      	ldr	r2, [r3, #0]
 800ce1c:	4b9c      	ldr	r3, [pc, #624]	@ (800d090 <USB_ActivateEndpoint+0x588>)
 800ce1e:	4013      	ands	r3, r2
 800ce20:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce22:	687a      	ldr	r2, [r7, #4]
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	781b      	ldrb	r3, [r3, #0]
 800ce28:	009b      	lsls	r3, r3, #2
 800ce2a:	441a      	add	r2, r3
 800ce2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce2e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ce32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce36:	6013      	str	r3, [r2, #0]

      if (ep->num == 0U)
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	781b      	ldrb	r3, [r3, #0]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d11c      	bne.n	800ce7a <USB_ActivateEndpoint+0x372>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ce40:	687a      	ldr	r2, [r7, #4]
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	781b      	ldrb	r3, [r3, #0]
 800ce46:	009b      	lsls	r3, r3, #2
 800ce48:	4413      	add	r3, r2
 800ce4a:	681a      	ldr	r2, [r3, #0]
 800ce4c:	4b91      	ldr	r3, [pc, #580]	@ (800d094 <USB_ActivateEndpoint+0x58c>)
 800ce4e:	4013      	ands	r3, r2
 800ce50:	61fb      	str	r3, [r7, #28]
 800ce52:	69fb      	ldr	r3, [r7, #28]
 800ce54:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ce58:	61fb      	str	r3, [r7, #28]
 800ce5a:	69fb      	ldr	r3, [r7, #28]
 800ce5c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ce60:	61fb      	str	r3, [r7, #28]
 800ce62:	687a      	ldr	r2, [r7, #4]
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	781b      	ldrb	r3, [r3, #0]
 800ce68:	009b      	lsls	r3, r3, #2
 800ce6a:	441a      	add	r2, r3
 800ce6c:	69fb      	ldr	r3, [r7, #28]
 800ce6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ce72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce76:	6013      	str	r3, [r2, #0]
 800ce78:	e197      	b.n	800d1aa <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800ce7a:	687a      	ldr	r2, [r7, #4]
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	781b      	ldrb	r3, [r3, #0]
 800ce80:	009b      	lsls	r3, r3, #2
 800ce82:	4413      	add	r3, r2
 800ce84:	681a      	ldr	r2, [r3, #0]
 800ce86:	4b83      	ldr	r3, [pc, #524]	@ (800d094 <USB_ActivateEndpoint+0x58c>)
 800ce88:	4013      	ands	r3, r2
 800ce8a:	623b      	str	r3, [r7, #32]
 800ce8c:	6a3b      	ldr	r3, [r7, #32]
 800ce8e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ce92:	623b      	str	r3, [r7, #32]
 800ce94:	687a      	ldr	r2, [r7, #4]
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	781b      	ldrb	r3, [r3, #0]
 800ce9a:	009b      	lsls	r3, r3, #2
 800ce9c:	441a      	add	r2, r3
 800ce9e:	6a3b      	ldr	r3, [r7, #32]
 800cea0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cea4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cea8:	6013      	str	r3, [r2, #0]
 800ceaa:	e17e      	b.n	800d1aa <USB_ActivateEndpoint+0x6a2>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	78db      	ldrb	r3, [r3, #3]
 800ceb0:	2b02      	cmp	r3, #2
 800ceb2:	d114      	bne.n	800cede <USB_ActivateEndpoint+0x3d6>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ceb4:	687a      	ldr	r2, [r7, #4]
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	781b      	ldrb	r3, [r3, #0]
 800ceba:	009b      	lsls	r3, r3, #2
 800cebc:	4413      	add	r3, r2
 800cebe:	681a      	ldr	r2, [r3, #0]
 800cec0:	4b73      	ldr	r3, [pc, #460]	@ (800d090 <USB_ActivateEndpoint+0x588>)
 800cec2:	4013      	ands	r3, r2
 800cec4:	663b      	str	r3, [r7, #96]	@ 0x60
 800cec6:	687a      	ldr	r2, [r7, #4]
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	781b      	ldrb	r3, [r3, #0]
 800cecc:	009b      	lsls	r3, r3, #2
 800cece:	441a      	add	r2, r3
 800ced0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ced2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800ced6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ceda:	6013      	str	r3, [r2, #0]
 800cedc:	e013      	b.n	800cf06 <USB_ActivateEndpoint+0x3fe>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800cede:	687a      	ldr	r2, [r7, #4]
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	781b      	ldrb	r3, [r3, #0]
 800cee4:	009b      	lsls	r3, r3, #2
 800cee6:	4413      	add	r3, r2
 800cee8:	681a      	ldr	r2, [r3, #0]
 800ceea:	4b6b      	ldr	r3, [pc, #428]	@ (800d098 <USB_ActivateEndpoint+0x590>)
 800ceec:	4013      	ands	r3, r2
 800ceee:	667b      	str	r3, [r7, #100]	@ 0x64
 800cef0:	687a      	ldr	r2, [r7, #4]
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	781b      	ldrb	r3, [r3, #0]
 800cef6:	009b      	lsls	r3, r3, #2
 800cef8:	441a      	add	r2, r3
 800cefa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cefc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cf00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf04:	6013      	str	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800cf06:	683b      	ldr	r3, [r7, #0]
 800cf08:	781b      	ldrb	r3, [r3, #0]
 800cf0a:	00db      	lsls	r3, r3, #3
 800cf0c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf10:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf14:	681a      	ldr	r2, [r3, #0]
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	781b      	ldrb	r3, [r3, #0]
 800cf1a:	00db      	lsls	r3, r3, #3
 800cf1c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf20:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf24:	0c12      	lsrs	r2, r2, #16
 800cf26:	0412      	lsls	r2, r2, #16
 800cf28:	601a      	str	r2, [r3, #0]
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	781b      	ldrb	r3, [r3, #0]
 800cf2e:	00db      	lsls	r3, r3, #3
 800cf30:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf34:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf38:	6819      	ldr	r1, [r3, #0]
 800cf3a:	683b      	ldr	r3, [r7, #0]
 800cf3c:	891b      	ldrh	r3, [r3, #8]
 800cf3e:	089b      	lsrs	r3, r3, #2
 800cf40:	b29b      	uxth	r3, r3
 800cf42:	009a      	lsls	r2, r3, #2
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	781b      	ldrb	r3, [r3, #0]
 800cf48:	00db      	lsls	r3, r3, #3
 800cf4a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf4e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf52:	430a      	orrs	r2, r1
 800cf54:	601a      	str	r2, [r3, #0]
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	781b      	ldrb	r3, [r3, #0]
 800cf5a:	00db      	lsls	r3, r3, #3
 800cf5c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf60:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf64:	685a      	ldr	r2, [r3, #4]
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	781b      	ldrb	r3, [r3, #0]
 800cf6a:	00db      	lsls	r3, r3, #3
 800cf6c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf70:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf74:	0c12      	lsrs	r2, r2, #16
 800cf76:	0412      	lsls	r2, r2, #16
 800cf78:	605a      	str	r2, [r3, #4]
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	781b      	ldrb	r3, [r3, #0]
 800cf7e:	00db      	lsls	r3, r3, #3
 800cf80:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf84:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf88:	6859      	ldr	r1, [r3, #4]
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	895b      	ldrh	r3, [r3, #10]
 800cf8e:	089b      	lsrs	r3, r3, #2
 800cf90:	b29b      	uxth	r3, r3
 800cf92:	009a      	lsls	r2, r3, #2
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	781b      	ldrb	r3, [r3, #0]
 800cf98:	00db      	lsls	r3, r3, #3
 800cf9a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf9e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cfa2:	430a      	orrs	r2, r1
 800cfa4:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	785b      	ldrb	r3, [r3, #1]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d178      	bne.n	800d0a0 <USB_ActivateEndpoint+0x598>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cfae:	687a      	ldr	r2, [r7, #4]
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	781b      	ldrb	r3, [r3, #0]
 800cfb4:	009b      	lsls	r3, r3, #2
 800cfb6:	4413      	add	r3, r2
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	643b      	str	r3, [r7, #64]	@ 0x40
 800cfbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cfbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d013      	beq.n	800cfee <USB_ActivateEndpoint+0x4e6>
 800cfc6:	687a      	ldr	r2, [r7, #4]
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	781b      	ldrb	r3, [r3, #0]
 800cfcc:	009b      	lsls	r3, r3, #2
 800cfce:	4413      	add	r3, r2
 800cfd0:	681a      	ldr	r2, [r3, #0]
 800cfd2:	4b2f      	ldr	r3, [pc, #188]	@ (800d090 <USB_ActivateEndpoint+0x588>)
 800cfd4:	4013      	ands	r3, r2
 800cfd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cfd8:	687a      	ldr	r2, [r7, #4]
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	781b      	ldrb	r3, [r3, #0]
 800cfde:	009b      	lsls	r3, r3, #2
 800cfe0:	441a      	add	r2, r3
 800cfe2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfe4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cfe8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cfec:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cfee:	687a      	ldr	r2, [r7, #4]
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	781b      	ldrb	r3, [r3, #0]
 800cff4:	009b      	lsls	r3, r3, #2
 800cff6:	4413      	add	r3, r2
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cffe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d002:	2b00      	cmp	r3, #0
 800d004:	d013      	beq.n	800d02e <USB_ActivateEndpoint+0x526>
 800d006:	687a      	ldr	r2, [r7, #4]
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	781b      	ldrb	r3, [r3, #0]
 800d00c:	009b      	lsls	r3, r3, #2
 800d00e:	4413      	add	r3, r2
 800d010:	681a      	ldr	r2, [r3, #0]
 800d012:	4b1f      	ldr	r3, [pc, #124]	@ (800d090 <USB_ActivateEndpoint+0x588>)
 800d014:	4013      	ands	r3, r2
 800d016:	637b      	str	r3, [r7, #52]	@ 0x34
 800d018:	687a      	ldr	r2, [r7, #4]
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	781b      	ldrb	r3, [r3, #0]
 800d01e:	009b      	lsls	r3, r3, #2
 800d020:	441a      	add	r2, r3
 800d022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d024:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d028:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d02c:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d02e:	687a      	ldr	r2, [r7, #4]
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	781b      	ldrb	r3, [r3, #0]
 800d034:	009b      	lsls	r3, r3, #2
 800d036:	4413      	add	r3, r2
 800d038:	681a      	ldr	r2, [r3, #0]
 800d03a:	4b16      	ldr	r3, [pc, #88]	@ (800d094 <USB_ActivateEndpoint+0x58c>)
 800d03c:	4013      	ands	r3, r2
 800d03e:	633b      	str	r3, [r7, #48]	@ 0x30
 800d040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d042:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d046:	633b      	str	r3, [r7, #48]	@ 0x30
 800d048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d04a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d04e:	633b      	str	r3, [r7, #48]	@ 0x30
 800d050:	687a      	ldr	r2, [r7, #4]
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	781b      	ldrb	r3, [r3, #0]
 800d056:	009b      	lsls	r3, r3, #2
 800d058:	441a      	add	r2, r3
 800d05a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d05c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d060:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d064:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d066:	687a      	ldr	r2, [r7, #4]
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	781b      	ldrb	r3, [r3, #0]
 800d06c:	009b      	lsls	r3, r3, #2
 800d06e:	4413      	add	r3, r2
 800d070:	681a      	ldr	r2, [r3, #0]
 800d072:	4b0a      	ldr	r3, [pc, #40]	@ (800d09c <USB_ActivateEndpoint+0x594>)
 800d074:	4013      	ands	r3, r2
 800d076:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d078:	687a      	ldr	r2, [r7, #4]
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	781b      	ldrb	r3, [r3, #0]
 800d07e:	009b      	lsls	r3, r3, #2
 800d080:	441a      	add	r2, r3
 800d082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d084:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d088:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d08c:	6013      	str	r3, [r2, #0]
 800d08e:	e08c      	b.n	800d1aa <USB_ActivateEndpoint+0x6a2>
 800d090:	07ff8f8f 	.word	0x07ff8f8f
 800d094:	07ffbf8f 	.word	0x07ffbf8f
 800d098:	07ff8e8f 	.word	0x07ff8e8f
 800d09c:	07ff8fbf 	.word	0x07ff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d0a0:	687a      	ldr	r2, [r7, #4]
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	781b      	ldrb	r3, [r3, #0]
 800d0a6:	009b      	lsls	r3, r3, #2
 800d0a8:	4413      	add	r3, r2
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d0ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d0b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d013      	beq.n	800d0e0 <USB_ActivateEndpoint+0x5d8>
 800d0b8:	687a      	ldr	r2, [r7, #4]
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	781b      	ldrb	r3, [r3, #0]
 800d0be:	009b      	lsls	r3, r3, #2
 800d0c0:	4413      	add	r3, r2
 800d0c2:	681a      	ldr	r2, [r3, #0]
 800d0c4:	4b3d      	ldr	r3, [pc, #244]	@ (800d1bc <USB_ActivateEndpoint+0x6b4>)
 800d0c6:	4013      	ands	r3, r2
 800d0c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d0ca:	687a      	ldr	r2, [r7, #4]
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	781b      	ldrb	r3, [r3, #0]
 800d0d0:	009b      	lsls	r3, r3, #2
 800d0d2:	441a      	add	r2, r3
 800d0d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d0d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d0da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0de:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d0e0:	687a      	ldr	r2, [r7, #4]
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	781b      	ldrb	r3, [r3, #0]
 800d0e6:	009b      	lsls	r3, r3, #2
 800d0e8:	4413      	add	r3, r2
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	657b      	str	r3, [r7, #84]	@ 0x54
 800d0ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d0f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d013      	beq.n	800d120 <USB_ActivateEndpoint+0x618>
 800d0f8:	687a      	ldr	r2, [r7, #4]
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	781b      	ldrb	r3, [r3, #0]
 800d0fe:	009b      	lsls	r3, r3, #2
 800d100:	4413      	add	r3, r2
 800d102:	681a      	ldr	r2, [r3, #0]
 800d104:	4b2d      	ldr	r3, [pc, #180]	@ (800d1bc <USB_ActivateEndpoint+0x6b4>)
 800d106:	4013      	ands	r3, r2
 800d108:	653b      	str	r3, [r7, #80]	@ 0x50
 800d10a:	687a      	ldr	r2, [r7, #4]
 800d10c:	683b      	ldr	r3, [r7, #0]
 800d10e:	781b      	ldrb	r3, [r3, #0]
 800d110:	009b      	lsls	r3, r3, #2
 800d112:	441a      	add	r2, r3
 800d114:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d116:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d11a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d11e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d120:	683b      	ldr	r3, [r7, #0]
 800d122:	78db      	ldrb	r3, [r3, #3]
 800d124:	2b01      	cmp	r3, #1
 800d126:	d018      	beq.n	800d15a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d128:	687a      	ldr	r2, [r7, #4]
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	781b      	ldrb	r3, [r3, #0]
 800d12e:	009b      	lsls	r3, r3, #2
 800d130:	4413      	add	r3, r2
 800d132:	681a      	ldr	r2, [r3, #0]
 800d134:	4b22      	ldr	r3, [pc, #136]	@ (800d1c0 <USB_ActivateEndpoint+0x6b8>)
 800d136:	4013      	ands	r3, r2
 800d138:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d13a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d13c:	f083 0320 	eor.w	r3, r3, #32
 800d140:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d142:	687a      	ldr	r2, [r7, #4]
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	781b      	ldrb	r3, [r3, #0]
 800d148:	009b      	lsls	r3, r3, #2
 800d14a:	441a      	add	r2, r3
 800d14c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d14e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d152:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d156:	6013      	str	r3, [r2, #0]
 800d158:	e013      	b.n	800d182 <USB_ActivateEndpoint+0x67a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d15a:	687a      	ldr	r2, [r7, #4]
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	781b      	ldrb	r3, [r3, #0]
 800d160:	009b      	lsls	r3, r3, #2
 800d162:	4413      	add	r3, r2
 800d164:	681a      	ldr	r2, [r3, #0]
 800d166:	4b16      	ldr	r3, [pc, #88]	@ (800d1c0 <USB_ActivateEndpoint+0x6b8>)
 800d168:	4013      	ands	r3, r2
 800d16a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d16c:	687a      	ldr	r2, [r7, #4]
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	781b      	ldrb	r3, [r3, #0]
 800d172:	009b      	lsls	r3, r3, #2
 800d174:	441a      	add	r2, r3
 800d176:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d178:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d17c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d180:	6013      	str	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d182:	687a      	ldr	r2, [r7, #4]
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	781b      	ldrb	r3, [r3, #0]
 800d188:	009b      	lsls	r3, r3, #2
 800d18a:	4413      	add	r3, r2
 800d18c:	681a      	ldr	r2, [r3, #0]
 800d18e:	4b0d      	ldr	r3, [pc, #52]	@ (800d1c4 <USB_ActivateEndpoint+0x6bc>)
 800d190:	4013      	ands	r3, r2
 800d192:	647b      	str	r3, [r7, #68]	@ 0x44
 800d194:	687a      	ldr	r2, [r7, #4]
 800d196:	683b      	ldr	r3, [r7, #0]
 800d198:	781b      	ldrb	r3, [r3, #0]
 800d19a:	009b      	lsls	r3, r3, #2
 800d19c:	441a      	add	r2, r3
 800d19e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d1a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d1a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1a8:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800d1aa:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	377c      	adds	r7, #124	@ 0x7c
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b8:	4770      	bx	lr
 800d1ba:	bf00      	nop
 800d1bc:	07ff8f8f 	.word	0x07ff8f8f
 800d1c0:	07ff8fbf 	.word	0x07ff8fbf
 800d1c4:	07ffbf8f 	.word	0x07ffbf8f

0800d1c8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800d1c8:	b480      	push	{r7}
 800d1ca:	b097      	sub	sp, #92	@ 0x5c
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
 800d1d0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800d1d2:	683b      	ldr	r3, [r7, #0]
 800d1d4:	7b1b      	ldrb	r3, [r3, #12]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d16d      	bne.n	800d2b6 <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in != 0U)
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	785b      	ldrb	r3, [r3, #1]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d034      	beq.n	800d24c <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d1e2:	687a      	ldr	r2, [r7, #4]
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	781b      	ldrb	r3, [r3, #0]
 800d1e8:	009b      	lsls	r3, r3, #2
 800d1ea:	4413      	add	r3, r2
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	613b      	str	r3, [r7, #16]
 800d1f0:	693b      	ldr	r3, [r7, #16]
 800d1f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d013      	beq.n	800d222 <USB_DeactivateEndpoint+0x5a>
 800d1fa:	687a      	ldr	r2, [r7, #4]
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	781b      	ldrb	r3, [r3, #0]
 800d200:	009b      	lsls	r3, r3, #2
 800d202:	4413      	add	r3, r2
 800d204:	681a      	ldr	r2, [r3, #0]
 800d206:	4b6d      	ldr	r3, [pc, #436]	@ (800d3bc <USB_DeactivateEndpoint+0x1f4>)
 800d208:	4013      	ands	r3, r2
 800d20a:	60fb      	str	r3, [r7, #12]
 800d20c:	687a      	ldr	r2, [r7, #4]
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	781b      	ldrb	r3, [r3, #0]
 800d212:	009b      	lsls	r3, r3, #2
 800d214:	441a      	add	r2, r3
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d21c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d220:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d222:	687a      	ldr	r2, [r7, #4]
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	781b      	ldrb	r3, [r3, #0]
 800d228:	009b      	lsls	r3, r3, #2
 800d22a:	4413      	add	r3, r2
 800d22c:	681a      	ldr	r2, [r3, #0]
 800d22e:	4b64      	ldr	r3, [pc, #400]	@ (800d3c0 <USB_DeactivateEndpoint+0x1f8>)
 800d230:	4013      	ands	r3, r2
 800d232:	60bb      	str	r3, [r7, #8]
 800d234:	687a      	ldr	r2, [r7, #4]
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	781b      	ldrb	r3, [r3, #0]
 800d23a:	009b      	lsls	r3, r3, #2
 800d23c:	441a      	add	r2, r3
 800d23e:	68bb      	ldr	r3, [r7, #8]
 800d240:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d244:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d248:	6013      	str	r3, [r2, #0]
 800d24a:	e139      	b.n	800d4c0 <USB_DeactivateEndpoint+0x2f8>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d24c:	687a      	ldr	r2, [r7, #4]
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	781b      	ldrb	r3, [r3, #0]
 800d252:	009b      	lsls	r3, r3, #2
 800d254:	4413      	add	r3, r2
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	61fb      	str	r3, [r7, #28]
 800d25a:	69fb      	ldr	r3, [r7, #28]
 800d25c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d260:	2b00      	cmp	r3, #0
 800d262:	d013      	beq.n	800d28c <USB_DeactivateEndpoint+0xc4>
 800d264:	687a      	ldr	r2, [r7, #4]
 800d266:	683b      	ldr	r3, [r7, #0]
 800d268:	781b      	ldrb	r3, [r3, #0]
 800d26a:	009b      	lsls	r3, r3, #2
 800d26c:	4413      	add	r3, r2
 800d26e:	681a      	ldr	r2, [r3, #0]
 800d270:	4b52      	ldr	r3, [pc, #328]	@ (800d3bc <USB_DeactivateEndpoint+0x1f4>)
 800d272:	4013      	ands	r3, r2
 800d274:	61bb      	str	r3, [r7, #24]
 800d276:	687a      	ldr	r2, [r7, #4]
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	781b      	ldrb	r3, [r3, #0]
 800d27c:	009b      	lsls	r3, r3, #2
 800d27e:	441a      	add	r2, r3
 800d280:	69bb      	ldr	r3, [r7, #24]
 800d282:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d286:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d28a:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d28c:	687a      	ldr	r2, [r7, #4]
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	781b      	ldrb	r3, [r3, #0]
 800d292:	009b      	lsls	r3, r3, #2
 800d294:	4413      	add	r3, r2
 800d296:	681a      	ldr	r2, [r3, #0]
 800d298:	4b4a      	ldr	r3, [pc, #296]	@ (800d3c4 <USB_DeactivateEndpoint+0x1fc>)
 800d29a:	4013      	ands	r3, r2
 800d29c:	617b      	str	r3, [r7, #20]
 800d29e:	687a      	ldr	r2, [r7, #4]
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	781b      	ldrb	r3, [r3, #0]
 800d2a4:	009b      	lsls	r3, r3, #2
 800d2a6:	441a      	add	r2, r3
 800d2a8:	697b      	ldr	r3, [r7, #20]
 800d2aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d2ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d2b2:	6013      	str	r3, [r2, #0]
 800d2b4:	e104      	b.n	800d4c0 <USB_DeactivateEndpoint+0x2f8>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	785b      	ldrb	r3, [r3, #1]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	f040 8084 	bne.w	800d3c8 <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d2c0:	687a      	ldr	r2, [r7, #4]
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	781b      	ldrb	r3, [r3, #0]
 800d2c6:	009b      	lsls	r3, r3, #2
 800d2c8:	4413      	add	r3, r2
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d2ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d013      	beq.n	800d300 <USB_DeactivateEndpoint+0x138>
 800d2d8:	687a      	ldr	r2, [r7, #4]
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	781b      	ldrb	r3, [r3, #0]
 800d2de:	009b      	lsls	r3, r3, #2
 800d2e0:	4413      	add	r3, r2
 800d2e2:	681a      	ldr	r2, [r3, #0]
 800d2e4:	4b35      	ldr	r3, [pc, #212]	@ (800d3bc <USB_DeactivateEndpoint+0x1f4>)
 800d2e6:	4013      	ands	r3, r2
 800d2e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2ea:	687a      	ldr	r2, [r7, #4]
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	781b      	ldrb	r3, [r3, #0]
 800d2f0:	009b      	lsls	r3, r3, #2
 800d2f2:	441a      	add	r2, r3
 800d2f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d2fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d2fe:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d300:	687a      	ldr	r2, [r7, #4]
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	781b      	ldrb	r3, [r3, #0]
 800d306:	009b      	lsls	r3, r3, #2
 800d308:	4413      	add	r3, r2
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	633b      	str	r3, [r7, #48]	@ 0x30
 800d30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d310:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d314:	2b00      	cmp	r3, #0
 800d316:	d013      	beq.n	800d340 <USB_DeactivateEndpoint+0x178>
 800d318:	687a      	ldr	r2, [r7, #4]
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	781b      	ldrb	r3, [r3, #0]
 800d31e:	009b      	lsls	r3, r3, #2
 800d320:	4413      	add	r3, r2
 800d322:	681a      	ldr	r2, [r3, #0]
 800d324:	4b25      	ldr	r3, [pc, #148]	@ (800d3bc <USB_DeactivateEndpoint+0x1f4>)
 800d326:	4013      	ands	r3, r2
 800d328:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d32a:	687a      	ldr	r2, [r7, #4]
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	781b      	ldrb	r3, [r3, #0]
 800d330:	009b      	lsls	r3, r3, #2
 800d332:	441a      	add	r2, r3
 800d334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d336:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d33a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d33e:	6013      	str	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800d340:	687a      	ldr	r2, [r7, #4]
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	781b      	ldrb	r3, [r3, #0]
 800d346:	009b      	lsls	r3, r3, #2
 800d348:	4413      	add	r3, r2
 800d34a:	681a      	ldr	r2, [r3, #0]
 800d34c:	4b1b      	ldr	r3, [pc, #108]	@ (800d3bc <USB_DeactivateEndpoint+0x1f4>)
 800d34e:	4013      	ands	r3, r2
 800d350:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d352:	687a      	ldr	r2, [r7, #4]
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	781b      	ldrb	r3, [r3, #0]
 800d358:	009b      	lsls	r3, r3, #2
 800d35a:	441a      	add	r2, r3
 800d35c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d35e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d362:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d366:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d368:	687a      	ldr	r2, [r7, #4]
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	781b      	ldrb	r3, [r3, #0]
 800d36e:	009b      	lsls	r3, r3, #2
 800d370:	4413      	add	r3, r2
 800d372:	681a      	ldr	r2, [r3, #0]
 800d374:	4b13      	ldr	r3, [pc, #76]	@ (800d3c4 <USB_DeactivateEndpoint+0x1fc>)
 800d376:	4013      	ands	r3, r2
 800d378:	627b      	str	r3, [r7, #36]	@ 0x24
 800d37a:	687a      	ldr	r2, [r7, #4]
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	781b      	ldrb	r3, [r3, #0]
 800d380:	009b      	lsls	r3, r3, #2
 800d382:	441a      	add	r2, r3
 800d384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d386:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d38a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d38e:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d390:	687a      	ldr	r2, [r7, #4]
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	781b      	ldrb	r3, [r3, #0]
 800d396:	009b      	lsls	r3, r3, #2
 800d398:	4413      	add	r3, r2
 800d39a:	681a      	ldr	r2, [r3, #0]
 800d39c:	4b08      	ldr	r3, [pc, #32]	@ (800d3c0 <USB_DeactivateEndpoint+0x1f8>)
 800d39e:	4013      	ands	r3, r2
 800d3a0:	623b      	str	r3, [r7, #32]
 800d3a2:	687a      	ldr	r2, [r7, #4]
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	781b      	ldrb	r3, [r3, #0]
 800d3a8:	009b      	lsls	r3, r3, #2
 800d3aa:	441a      	add	r2, r3
 800d3ac:	6a3b      	ldr	r3, [r7, #32]
 800d3ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d3b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d3b6:	6013      	str	r3, [r2, #0]
 800d3b8:	e082      	b.n	800d4c0 <USB_DeactivateEndpoint+0x2f8>
 800d3ba:	bf00      	nop
 800d3bc:	07ff8f8f 	.word	0x07ff8f8f
 800d3c0:	07ff8fbf 	.word	0x07ff8fbf
 800d3c4:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d3c8:	687a      	ldr	r2, [r7, #4]
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	781b      	ldrb	r3, [r3, #0]
 800d3ce:	009b      	lsls	r3, r3, #2
 800d3d0:	4413      	add	r3, r2
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	657b      	str	r3, [r7, #84]	@ 0x54
 800d3d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d3d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d013      	beq.n	800d408 <USB_DeactivateEndpoint+0x240>
 800d3e0:	687a      	ldr	r2, [r7, #4]
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	781b      	ldrb	r3, [r3, #0]
 800d3e6:	009b      	lsls	r3, r3, #2
 800d3e8:	4413      	add	r3, r2
 800d3ea:	681a      	ldr	r2, [r3, #0]
 800d3ec:	4b38      	ldr	r3, [pc, #224]	@ (800d4d0 <USB_DeactivateEndpoint+0x308>)
 800d3ee:	4013      	ands	r3, r2
 800d3f0:	653b      	str	r3, [r7, #80]	@ 0x50
 800d3f2:	687a      	ldr	r2, [r7, #4]
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	781b      	ldrb	r3, [r3, #0]
 800d3f8:	009b      	lsls	r3, r3, #2
 800d3fa:	441a      	add	r2, r3
 800d3fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d402:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d406:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d408:	687a      	ldr	r2, [r7, #4]
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	781b      	ldrb	r3, [r3, #0]
 800d40e:	009b      	lsls	r3, r3, #2
 800d410:	4413      	add	r3, r2
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d416:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d013      	beq.n	800d448 <USB_DeactivateEndpoint+0x280>
 800d420:	687a      	ldr	r2, [r7, #4]
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	781b      	ldrb	r3, [r3, #0]
 800d426:	009b      	lsls	r3, r3, #2
 800d428:	4413      	add	r3, r2
 800d42a:	681a      	ldr	r2, [r3, #0]
 800d42c:	4b28      	ldr	r3, [pc, #160]	@ (800d4d0 <USB_DeactivateEndpoint+0x308>)
 800d42e:	4013      	ands	r3, r2
 800d430:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d432:	687a      	ldr	r2, [r7, #4]
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	781b      	ldrb	r3, [r3, #0]
 800d438:	009b      	lsls	r3, r3, #2
 800d43a:	441a      	add	r2, r3
 800d43c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d43e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d442:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d446:	6013      	str	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800d448:	687a      	ldr	r2, [r7, #4]
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	781b      	ldrb	r3, [r3, #0]
 800d44e:	009b      	lsls	r3, r3, #2
 800d450:	4413      	add	r3, r2
 800d452:	681a      	ldr	r2, [r3, #0]
 800d454:	4b1e      	ldr	r3, [pc, #120]	@ (800d4d0 <USB_DeactivateEndpoint+0x308>)
 800d456:	4013      	ands	r3, r2
 800d458:	647b      	str	r3, [r7, #68]	@ 0x44
 800d45a:	687a      	ldr	r2, [r7, #4]
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	781b      	ldrb	r3, [r3, #0]
 800d460:	009b      	lsls	r3, r3, #2
 800d462:	441a      	add	r2, r3
 800d464:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d466:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d46a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d46e:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d470:	687a      	ldr	r2, [r7, #4]
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	781b      	ldrb	r3, [r3, #0]
 800d476:	009b      	lsls	r3, r3, #2
 800d478:	4413      	add	r3, r2
 800d47a:	681a      	ldr	r2, [r3, #0]
 800d47c:	4b15      	ldr	r3, [pc, #84]	@ (800d4d4 <USB_DeactivateEndpoint+0x30c>)
 800d47e:	4013      	ands	r3, r2
 800d480:	643b      	str	r3, [r7, #64]	@ 0x40
 800d482:	687a      	ldr	r2, [r7, #4]
 800d484:	683b      	ldr	r3, [r7, #0]
 800d486:	781b      	ldrb	r3, [r3, #0]
 800d488:	009b      	lsls	r3, r3, #2
 800d48a:	441a      	add	r2, r3
 800d48c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d48e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d492:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d496:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d498:	687a      	ldr	r2, [r7, #4]
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	781b      	ldrb	r3, [r3, #0]
 800d49e:	009b      	lsls	r3, r3, #2
 800d4a0:	4413      	add	r3, r2
 800d4a2:	681a      	ldr	r2, [r3, #0]
 800d4a4:	4b0c      	ldr	r3, [pc, #48]	@ (800d4d8 <USB_DeactivateEndpoint+0x310>)
 800d4a6:	4013      	ands	r3, r2
 800d4a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d4aa:	687a      	ldr	r2, [r7, #4]
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	781b      	ldrb	r3, [r3, #0]
 800d4b0:	009b      	lsls	r3, r3, #2
 800d4b2:	441a      	add	r2, r3
 800d4b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d4ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d4be:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800d4c0:	2300      	movs	r3, #0
}
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	375c      	adds	r7, #92	@ 0x5c
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4cc:	4770      	bx	lr
 800d4ce:	bf00      	nop
 800d4d0:	07ff8f8f 	.word	0x07ff8f8f
 800d4d4:	07ff8fbf 	.word	0x07ff8fbf
 800d4d8:	07ffbf8f 	.word	0x07ffbf8f

0800d4dc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b096      	sub	sp, #88	@ 0x58
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
 800d4e4:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	785b      	ldrb	r3, [r3, #1]
 800d4ea:	2b01      	cmp	r3, #1
 800d4ec:	f040 84ed 	bne.w	800deca <USB_EPStartXfer+0x9ee>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	699a      	ldr	r2, [r3, #24]
 800d4f4:	683b      	ldr	r3, [r7, #0]
 800d4f6:	691b      	ldr	r3, [r3, #16]
 800d4f8:	429a      	cmp	r2, r3
 800d4fa:	d903      	bls.n	800d504 <USB_EPStartXfer+0x28>
    {
      len = ep->maxpacket;
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	691b      	ldr	r3, [r3, #16]
 800d500:	657b      	str	r3, [r7, #84]	@ 0x54
 800d502:	e002      	b.n	800d50a <USB_EPStartXfer+0x2e>
    }
    else
    {
      len = ep->xfer_len;
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	699b      	ldr	r3, [r3, #24]
 800d508:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800d50a:	683b      	ldr	r3, [r7, #0]
 800d50c:	7b1b      	ldrb	r3, [r3, #12]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d12e      	bne.n	800d570 <USB_EPStartXfer+0x94>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	6959      	ldr	r1, [r3, #20]
 800d516:	683b      	ldr	r3, [r7, #0]
 800d518:	88da      	ldrh	r2, [r3, #6]
 800d51a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d51c:	b29b      	uxth	r3, r3
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	f001 f963 	bl	800e7ea <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	781b      	ldrb	r3, [r3, #0]
 800d528:	00db      	lsls	r3, r3, #3
 800d52a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d52e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d532:	681a      	ldr	r2, [r3, #0]
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	781b      	ldrb	r3, [r3, #0]
 800d538:	00db      	lsls	r3, r3, #3
 800d53a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d53e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d542:	b292      	uxth	r2, r2
 800d544:	601a      	str	r2, [r3, #0]
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	781b      	ldrb	r3, [r3, #0]
 800d54a:	00db      	lsls	r3, r3, #3
 800d54c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d550:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d554:	6819      	ldr	r1, [r3, #0]
 800d556:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d558:	041a      	lsls	r2, r3, #16
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	781b      	ldrb	r3, [r3, #0]
 800d55e:	00db      	lsls	r3, r3, #3
 800d560:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d564:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d568:	430a      	orrs	r2, r1
 800d56a:	601a      	str	r2, [r3, #0]
 800d56c:	f000 bc90 	b.w	800de90 <USB_EPStartXfer+0x9b4>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800d570:	683b      	ldr	r3, [r7, #0]
 800d572:	78db      	ldrb	r3, [r3, #3]
 800d574:	2b02      	cmp	r3, #2
 800d576:	f040 8332 	bne.w	800dbde <USB_EPStartXfer+0x702>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	6a1a      	ldr	r2, [r3, #32]
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	691b      	ldr	r3, [r3, #16]
 800d582:	429a      	cmp	r2, r3
 800d584:	f240 82e4 	bls.w	800db50 <USB_EPStartXfer+0x674>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d588:	687a      	ldr	r2, [r7, #4]
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	781b      	ldrb	r3, [r3, #0]
 800d58e:	009b      	lsls	r3, r3, #2
 800d590:	4413      	add	r3, r2
 800d592:	681a      	ldr	r2, [r3, #0]
 800d594:	4ba4      	ldr	r3, [pc, #656]	@ (800d828 <USB_EPStartXfer+0x34c>)
 800d596:	4013      	ands	r3, r2
 800d598:	613b      	str	r3, [r7, #16]
 800d59a:	687a      	ldr	r2, [r7, #4]
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	781b      	ldrb	r3, [r3, #0]
 800d5a0:	009b      	lsls	r3, r3, #2
 800d5a2:	441a      	add	r2, r3
 800d5a4:	693b      	ldr	r3, [r7, #16]
 800d5a6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800d5aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d5ae:	6013      	str	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800d5b0:	683b      	ldr	r3, [r7, #0]
 800d5b2:	6a1a      	ldr	r2, [r3, #32]
 800d5b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5b6:	1ad2      	subs	r2, r2, r3
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d5bc:	687a      	ldr	r2, [r7, #4]
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	781b      	ldrb	r3, [r3, #0]
 800d5c2:	009b      	lsls	r3, r3, #2
 800d5c4:	4413      	add	r3, r2
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	f000 8161 	beq.w	800d894 <USB_EPStartXfer+0x3b8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	785b      	ldrb	r3, [r3, #1]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d16a      	bne.n	800d6b0 <USB_EPStartXfer+0x1d4>
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	781b      	ldrb	r3, [r3, #0]
 800d5de:	00db      	lsls	r3, r3, #3
 800d5e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d5e4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d5e8:	685a      	ldr	r2, [r3, #4]
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	781b      	ldrb	r3, [r3, #0]
 800d5ee:	00db      	lsls	r3, r3, #3
 800d5f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d5f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d5f8:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d5fc:	605a      	str	r2, [r3, #4]
 800d5fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d600:	2b00      	cmp	r3, #0
 800d602:	d112      	bne.n	800d62a <USB_EPStartXfer+0x14e>
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	781b      	ldrb	r3, [r3, #0]
 800d608:	00db      	lsls	r3, r3, #3
 800d60a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d60e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d612:	685a      	ldr	r2, [r3, #4]
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	781b      	ldrb	r3, [r3, #0]
 800d618:	00db      	lsls	r3, r3, #3
 800d61a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d61e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d622:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d626:	605a      	str	r2, [r3, #4]
 800d628:	e06a      	b.n	800d700 <USB_EPStartXfer+0x224>
 800d62a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d62c:	2b3e      	cmp	r3, #62	@ 0x3e
 800d62e:	d81e      	bhi.n	800d66e <USB_EPStartXfer+0x192>
 800d630:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d632:	085b      	lsrs	r3, r3, #1
 800d634:	653b      	str	r3, [r7, #80]	@ 0x50
 800d636:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d638:	f003 0301 	and.w	r3, r3, #1
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d002      	beq.n	800d646 <USB_EPStartXfer+0x16a>
 800d640:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d642:	3301      	adds	r3, #1
 800d644:	653b      	str	r3, [r7, #80]	@ 0x50
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	781b      	ldrb	r3, [r3, #0]
 800d64a:	00db      	lsls	r3, r3, #3
 800d64c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d650:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d654:	6859      	ldr	r1, [r3, #4]
 800d656:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d658:	069a      	lsls	r2, r3, #26
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	781b      	ldrb	r3, [r3, #0]
 800d65e:	00db      	lsls	r3, r3, #3
 800d660:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d664:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d668:	430a      	orrs	r2, r1
 800d66a:	605a      	str	r2, [r3, #4]
 800d66c:	e048      	b.n	800d700 <USB_EPStartXfer+0x224>
 800d66e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d670:	095b      	lsrs	r3, r3, #5
 800d672:	653b      	str	r3, [r7, #80]	@ 0x50
 800d674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d676:	f003 031f 	and.w	r3, r3, #31
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d102      	bne.n	800d684 <USB_EPStartXfer+0x1a8>
 800d67e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d680:	3b01      	subs	r3, #1
 800d682:	653b      	str	r3, [r7, #80]	@ 0x50
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	781b      	ldrb	r3, [r3, #0]
 800d688:	00db      	lsls	r3, r3, #3
 800d68a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d68e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d692:	685a      	ldr	r2, [r3, #4]
 800d694:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d696:	069b      	lsls	r3, r3, #26
 800d698:	431a      	orrs	r2, r3
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	781b      	ldrb	r3, [r3, #0]
 800d69e:	00db      	lsls	r3, r3, #3
 800d6a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d6a4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d6a8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d6ac:	605a      	str	r2, [r3, #4]
 800d6ae:	e027      	b.n	800d700 <USB_EPStartXfer+0x224>
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	785b      	ldrb	r3, [r3, #1]
 800d6b4:	2b01      	cmp	r3, #1
 800d6b6:	d123      	bne.n	800d700 <USB_EPStartXfer+0x224>
 800d6b8:	683b      	ldr	r3, [r7, #0]
 800d6ba:	781b      	ldrb	r3, [r3, #0]
 800d6bc:	00db      	lsls	r3, r3, #3
 800d6be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d6c2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d6c6:	685a      	ldr	r2, [r3, #4]
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	781b      	ldrb	r3, [r3, #0]
 800d6cc:	00db      	lsls	r3, r3, #3
 800d6ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d6d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d6d6:	b292      	uxth	r2, r2
 800d6d8:	605a      	str	r2, [r3, #4]
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	781b      	ldrb	r3, [r3, #0]
 800d6de:	00db      	lsls	r3, r3, #3
 800d6e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d6e4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d6e8:	6859      	ldr	r1, [r3, #4]
 800d6ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d6ec:	041a      	lsls	r2, r3, #16
 800d6ee:	683b      	ldr	r3, [r7, #0]
 800d6f0:	781b      	ldrb	r3, [r3, #0]
 800d6f2:	00db      	lsls	r3, r3, #3
 800d6f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d6f8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d6fc:	430a      	orrs	r2, r1
 800d6fe:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800d700:	683b      	ldr	r3, [r7, #0]
 800d702:	895b      	ldrh	r3, [r3, #10]
 800d704:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	6959      	ldr	r1, [r3, #20]
 800d70a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d70c:	b29b      	uxth	r3, r3
 800d70e:	8b7a      	ldrh	r2, [r7, #26]
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	f001 f86a 	bl	800e7ea <USB_WritePMA>
            ep->xfer_buff += len;
 800d716:	683b      	ldr	r3, [r7, #0]
 800d718:	695a      	ldr	r2, [r3, #20]
 800d71a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d71c:	441a      	add	r2, r3
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	6a1a      	ldr	r2, [r3, #32]
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	691b      	ldr	r3, [r3, #16]
 800d72a:	429a      	cmp	r2, r3
 800d72c:	d906      	bls.n	800d73c <USB_EPStartXfer+0x260>
            {
              ep->xfer_len_db -= len;
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	6a1a      	ldr	r2, [r3, #32]
 800d732:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d734:	1ad2      	subs	r2, r2, r3
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	621a      	str	r2, [r3, #32]
 800d73a:	e005      	b.n	800d748 <USB_EPStartXfer+0x26c>
            }
            else
            {
              len = ep->xfer_len_db;
 800d73c:	683b      	ldr	r3, [r7, #0]
 800d73e:	6a1b      	ldr	r3, [r3, #32]
 800d740:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	2200      	movs	r2, #0
 800d746:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d748:	683b      	ldr	r3, [r7, #0]
 800d74a:	785b      	ldrb	r3, [r3, #1]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d16d      	bne.n	800d82c <USB_EPStartXfer+0x350>
 800d750:	683b      	ldr	r3, [r7, #0]
 800d752:	781b      	ldrb	r3, [r3, #0]
 800d754:	00db      	lsls	r3, r3, #3
 800d756:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d75a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d75e:	681a      	ldr	r2, [r3, #0]
 800d760:	683b      	ldr	r3, [r7, #0]
 800d762:	781b      	ldrb	r3, [r3, #0]
 800d764:	00db      	lsls	r3, r3, #3
 800d766:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d76a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d76e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d772:	601a      	str	r2, [r3, #0]
 800d774:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d776:	2b00      	cmp	r3, #0
 800d778:	d112      	bne.n	800d7a0 <USB_EPStartXfer+0x2c4>
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	781b      	ldrb	r3, [r3, #0]
 800d77e:	00db      	lsls	r3, r3, #3
 800d780:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d784:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d788:	681a      	ldr	r2, [r3, #0]
 800d78a:	683b      	ldr	r3, [r7, #0]
 800d78c:	781b      	ldrb	r3, [r3, #0]
 800d78e:	00db      	lsls	r3, r3, #3
 800d790:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d794:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d798:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d79c:	601a      	str	r2, [r3, #0]
 800d79e:	e06d      	b.n	800d87c <USB_EPStartXfer+0x3a0>
 800d7a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7a2:	2b3e      	cmp	r3, #62	@ 0x3e
 800d7a4:	d81e      	bhi.n	800d7e4 <USB_EPStartXfer+0x308>
 800d7a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7a8:	085b      	lsrs	r3, r3, #1
 800d7aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d7ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7ae:	f003 0301 	and.w	r3, r3, #1
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d002      	beq.n	800d7bc <USB_EPStartXfer+0x2e0>
 800d7b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d7b8:	3301      	adds	r3, #1
 800d7ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	781b      	ldrb	r3, [r3, #0]
 800d7c0:	00db      	lsls	r3, r3, #3
 800d7c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d7c6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d7ca:	6819      	ldr	r1, [r3, #0]
 800d7cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d7ce:	069a      	lsls	r2, r3, #26
 800d7d0:	683b      	ldr	r3, [r7, #0]
 800d7d2:	781b      	ldrb	r3, [r3, #0]
 800d7d4:	00db      	lsls	r3, r3, #3
 800d7d6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d7da:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d7de:	430a      	orrs	r2, r1
 800d7e0:	601a      	str	r2, [r3, #0]
 800d7e2:	e04b      	b.n	800d87c <USB_EPStartXfer+0x3a0>
 800d7e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7e6:	095b      	lsrs	r3, r3, #5
 800d7e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d7ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7ec:	f003 031f 	and.w	r3, r3, #31
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d102      	bne.n	800d7fa <USB_EPStartXfer+0x31e>
 800d7f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d7f6:	3b01      	subs	r3, #1
 800d7f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	781b      	ldrb	r3, [r3, #0]
 800d7fe:	00db      	lsls	r3, r3, #3
 800d800:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d804:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d808:	681a      	ldr	r2, [r3, #0]
 800d80a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d80c:	069b      	lsls	r3, r3, #26
 800d80e:	431a      	orrs	r2, r3
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	781b      	ldrb	r3, [r3, #0]
 800d814:	00db      	lsls	r3, r3, #3
 800d816:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d81a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d81e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d822:	601a      	str	r2, [r3, #0]
 800d824:	e02a      	b.n	800d87c <USB_EPStartXfer+0x3a0>
 800d826:	bf00      	nop
 800d828:	07ff8f8f 	.word	0x07ff8f8f
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	785b      	ldrb	r3, [r3, #1]
 800d830:	2b01      	cmp	r3, #1
 800d832:	d123      	bne.n	800d87c <USB_EPStartXfer+0x3a0>
 800d834:	683b      	ldr	r3, [r7, #0]
 800d836:	781b      	ldrb	r3, [r3, #0]
 800d838:	00db      	lsls	r3, r3, #3
 800d83a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d83e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d842:	681a      	ldr	r2, [r3, #0]
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	781b      	ldrb	r3, [r3, #0]
 800d848:	00db      	lsls	r3, r3, #3
 800d84a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d84e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d852:	b292      	uxth	r2, r2
 800d854:	601a      	str	r2, [r3, #0]
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	781b      	ldrb	r3, [r3, #0]
 800d85a:	00db      	lsls	r3, r3, #3
 800d85c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d860:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d864:	6819      	ldr	r1, [r3, #0]
 800d866:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d868:	041a      	lsls	r2, r3, #16
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	781b      	ldrb	r3, [r3, #0]
 800d86e:	00db      	lsls	r3, r3, #3
 800d870:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d874:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d878:	430a      	orrs	r2, r1
 800d87a:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	891b      	ldrh	r3, [r3, #8]
 800d880:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	6959      	ldr	r1, [r3, #20]
 800d886:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d888:	b29b      	uxth	r3, r3
 800d88a:	8b7a      	ldrh	r2, [r7, #26]
 800d88c:	6878      	ldr	r0, [r7, #4]
 800d88e:	f000 ffac 	bl	800e7ea <USB_WritePMA>
 800d892:	e2fd      	b.n	800de90 <USB_EPStartXfer+0x9b4>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	785b      	ldrb	r3, [r3, #1]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d16a      	bne.n	800d972 <USB_EPStartXfer+0x496>
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	781b      	ldrb	r3, [r3, #0]
 800d8a0:	00db      	lsls	r3, r3, #3
 800d8a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d8a6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d8aa:	681a      	ldr	r2, [r3, #0]
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	781b      	ldrb	r3, [r3, #0]
 800d8b0:	00db      	lsls	r3, r3, #3
 800d8b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d8b6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d8ba:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d8be:	601a      	str	r2, [r3, #0]
 800d8c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d112      	bne.n	800d8ec <USB_EPStartXfer+0x410>
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	781b      	ldrb	r3, [r3, #0]
 800d8ca:	00db      	lsls	r3, r3, #3
 800d8cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d8d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d8d4:	681a      	ldr	r2, [r3, #0]
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	781b      	ldrb	r3, [r3, #0]
 800d8da:	00db      	lsls	r3, r3, #3
 800d8dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d8e0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d8e4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d8e8:	601a      	str	r2, [r3, #0]
 800d8ea:	e06a      	b.n	800d9c2 <USB_EPStartXfer+0x4e6>
 800d8ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8ee:	2b3e      	cmp	r3, #62	@ 0x3e
 800d8f0:	d81e      	bhi.n	800d930 <USB_EPStartXfer+0x454>
 800d8f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8f4:	085b      	lsrs	r3, r3, #1
 800d8f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d8f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8fa:	f003 0301 	and.w	r3, r3, #1
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d002      	beq.n	800d908 <USB_EPStartXfer+0x42c>
 800d902:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d904:	3301      	adds	r3, #1
 800d906:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	781b      	ldrb	r3, [r3, #0]
 800d90c:	00db      	lsls	r3, r3, #3
 800d90e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d912:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d916:	6819      	ldr	r1, [r3, #0]
 800d918:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d91a:	069a      	lsls	r2, r3, #26
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	781b      	ldrb	r3, [r3, #0]
 800d920:	00db      	lsls	r3, r3, #3
 800d922:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d926:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d92a:	430a      	orrs	r2, r1
 800d92c:	601a      	str	r2, [r3, #0]
 800d92e:	e048      	b.n	800d9c2 <USB_EPStartXfer+0x4e6>
 800d930:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d932:	095b      	lsrs	r3, r3, #5
 800d934:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d936:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d938:	f003 031f 	and.w	r3, r3, #31
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d102      	bne.n	800d946 <USB_EPStartXfer+0x46a>
 800d940:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d942:	3b01      	subs	r3, #1
 800d944:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d946:	683b      	ldr	r3, [r7, #0]
 800d948:	781b      	ldrb	r3, [r3, #0]
 800d94a:	00db      	lsls	r3, r3, #3
 800d94c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d950:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d954:	681a      	ldr	r2, [r3, #0]
 800d956:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d958:	069b      	lsls	r3, r3, #26
 800d95a:	431a      	orrs	r2, r3
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	781b      	ldrb	r3, [r3, #0]
 800d960:	00db      	lsls	r3, r3, #3
 800d962:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d966:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d96a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d96e:	601a      	str	r2, [r3, #0]
 800d970:	e027      	b.n	800d9c2 <USB_EPStartXfer+0x4e6>
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	785b      	ldrb	r3, [r3, #1]
 800d976:	2b01      	cmp	r3, #1
 800d978:	d123      	bne.n	800d9c2 <USB_EPStartXfer+0x4e6>
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	781b      	ldrb	r3, [r3, #0]
 800d97e:	00db      	lsls	r3, r3, #3
 800d980:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d984:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d988:	681a      	ldr	r2, [r3, #0]
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	781b      	ldrb	r3, [r3, #0]
 800d98e:	00db      	lsls	r3, r3, #3
 800d990:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d994:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d998:	b292      	uxth	r2, r2
 800d99a:	601a      	str	r2, [r3, #0]
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	781b      	ldrb	r3, [r3, #0]
 800d9a0:	00db      	lsls	r3, r3, #3
 800d9a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d9a6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d9aa:	6819      	ldr	r1, [r3, #0]
 800d9ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9ae:	041a      	lsls	r2, r3, #16
 800d9b0:	683b      	ldr	r3, [r7, #0]
 800d9b2:	781b      	ldrb	r3, [r3, #0]
 800d9b4:	00db      	lsls	r3, r3, #3
 800d9b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d9ba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d9be:	430a      	orrs	r2, r1
 800d9c0:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	891b      	ldrh	r3, [r3, #8]
 800d9c6:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d9c8:	683b      	ldr	r3, [r7, #0]
 800d9ca:	6959      	ldr	r1, [r3, #20]
 800d9cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9ce:	b29b      	uxth	r3, r3
 800d9d0:	8b7a      	ldrh	r2, [r7, #26]
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	f000 ff09 	bl	800e7ea <USB_WritePMA>
            ep->xfer_buff += len;
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	695a      	ldr	r2, [r3, #20]
 800d9dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9de:	441a      	add	r2, r3
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	6a1a      	ldr	r2, [r3, #32]
 800d9e8:	683b      	ldr	r3, [r7, #0]
 800d9ea:	691b      	ldr	r3, [r3, #16]
 800d9ec:	429a      	cmp	r2, r3
 800d9ee:	d906      	bls.n	800d9fe <USB_EPStartXfer+0x522>
            {
              ep->xfer_len_db -= len;
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	6a1a      	ldr	r2, [r3, #32]
 800d9f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9f6:	1ad2      	subs	r2, r2, r3
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	621a      	str	r2, [r3, #32]
 800d9fc:	e005      	b.n	800da0a <USB_EPStartXfer+0x52e>
            }
            else
            {
              len = ep->xfer_len_db;
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	6a1b      	ldr	r3, [r3, #32]
 800da02:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	2200      	movs	r2, #0
 800da08:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	785b      	ldrb	r3, [r3, #1]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d16a      	bne.n	800dae8 <USB_EPStartXfer+0x60c>
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	781b      	ldrb	r3, [r3, #0]
 800da16:	00db      	lsls	r3, r3, #3
 800da18:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800da1c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800da20:	685a      	ldr	r2, [r3, #4]
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	781b      	ldrb	r3, [r3, #0]
 800da26:	00db      	lsls	r3, r3, #3
 800da28:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800da2c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800da30:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800da34:	605a      	str	r2, [r3, #4]
 800da36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d112      	bne.n	800da62 <USB_EPStartXfer+0x586>
 800da3c:	683b      	ldr	r3, [r7, #0]
 800da3e:	781b      	ldrb	r3, [r3, #0]
 800da40:	00db      	lsls	r3, r3, #3
 800da42:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800da46:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800da4a:	685a      	ldr	r2, [r3, #4]
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	781b      	ldrb	r3, [r3, #0]
 800da50:	00db      	lsls	r3, r3, #3
 800da52:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800da56:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800da5a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800da5e:	605a      	str	r2, [r3, #4]
 800da60:	e06a      	b.n	800db38 <USB_EPStartXfer+0x65c>
 800da62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da64:	2b3e      	cmp	r3, #62	@ 0x3e
 800da66:	d81e      	bhi.n	800daa6 <USB_EPStartXfer+0x5ca>
 800da68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da6a:	085b      	lsrs	r3, r3, #1
 800da6c:	647b      	str	r3, [r7, #68]	@ 0x44
 800da6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da70:	f003 0301 	and.w	r3, r3, #1
 800da74:	2b00      	cmp	r3, #0
 800da76:	d002      	beq.n	800da7e <USB_EPStartXfer+0x5a2>
 800da78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800da7a:	3301      	adds	r3, #1
 800da7c:	647b      	str	r3, [r7, #68]	@ 0x44
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	781b      	ldrb	r3, [r3, #0]
 800da82:	00db      	lsls	r3, r3, #3
 800da84:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800da88:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800da8c:	6859      	ldr	r1, [r3, #4]
 800da8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800da90:	069a      	lsls	r2, r3, #26
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	781b      	ldrb	r3, [r3, #0]
 800da96:	00db      	lsls	r3, r3, #3
 800da98:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800da9c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800daa0:	430a      	orrs	r2, r1
 800daa2:	605a      	str	r2, [r3, #4]
 800daa4:	e048      	b.n	800db38 <USB_EPStartXfer+0x65c>
 800daa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800daa8:	095b      	lsrs	r3, r3, #5
 800daaa:	647b      	str	r3, [r7, #68]	@ 0x44
 800daac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800daae:	f003 031f 	and.w	r3, r3, #31
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d102      	bne.n	800dabc <USB_EPStartXfer+0x5e0>
 800dab6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dab8:	3b01      	subs	r3, #1
 800daba:	647b      	str	r3, [r7, #68]	@ 0x44
 800dabc:	683b      	ldr	r3, [r7, #0]
 800dabe:	781b      	ldrb	r3, [r3, #0]
 800dac0:	00db      	lsls	r3, r3, #3
 800dac2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dac6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800daca:	685a      	ldr	r2, [r3, #4]
 800dacc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dace:	069b      	lsls	r3, r3, #26
 800dad0:	431a      	orrs	r2, r3
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	781b      	ldrb	r3, [r3, #0]
 800dad6:	00db      	lsls	r3, r3, #3
 800dad8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dadc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dae0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800dae4:	605a      	str	r2, [r3, #4]
 800dae6:	e027      	b.n	800db38 <USB_EPStartXfer+0x65c>
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	785b      	ldrb	r3, [r3, #1]
 800daec:	2b01      	cmp	r3, #1
 800daee:	d123      	bne.n	800db38 <USB_EPStartXfer+0x65c>
 800daf0:	683b      	ldr	r3, [r7, #0]
 800daf2:	781b      	ldrb	r3, [r3, #0]
 800daf4:	00db      	lsls	r3, r3, #3
 800daf6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dafa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dafe:	685a      	ldr	r2, [r3, #4]
 800db00:	683b      	ldr	r3, [r7, #0]
 800db02:	781b      	ldrb	r3, [r3, #0]
 800db04:	00db      	lsls	r3, r3, #3
 800db06:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800db0a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800db0e:	b292      	uxth	r2, r2
 800db10:	605a      	str	r2, [r3, #4]
 800db12:	683b      	ldr	r3, [r7, #0]
 800db14:	781b      	ldrb	r3, [r3, #0]
 800db16:	00db      	lsls	r3, r3, #3
 800db18:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800db1c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800db20:	6859      	ldr	r1, [r3, #4]
 800db22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db24:	041a      	lsls	r2, r3, #16
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	781b      	ldrb	r3, [r3, #0]
 800db2a:	00db      	lsls	r3, r3, #3
 800db2c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800db30:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800db34:	430a      	orrs	r2, r1
 800db36:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800db38:	683b      	ldr	r3, [r7, #0]
 800db3a:	895b      	ldrh	r3, [r3, #10]
 800db3c:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	6959      	ldr	r1, [r3, #20]
 800db42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db44:	b29b      	uxth	r3, r3
 800db46:	8b7a      	ldrh	r2, [r7, #26]
 800db48:	6878      	ldr	r0, [r7, #4]
 800db4a:	f000 fe4e 	bl	800e7ea <USB_WritePMA>
 800db4e:	e19f      	b.n	800de90 <USB_EPStartXfer+0x9b4>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	6a1b      	ldr	r3, [r3, #32]
 800db54:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800db56:	687a      	ldr	r2, [r7, #4]
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	781b      	ldrb	r3, [r3, #0]
 800db5c:	009b      	lsls	r3, r3, #2
 800db5e:	4413      	add	r3, r2
 800db60:	681a      	ldr	r2, [r3, #0]
 800db62:	4ba0      	ldr	r3, [pc, #640]	@ (800dde4 <USB_EPStartXfer+0x908>)
 800db64:	4013      	ands	r3, r2
 800db66:	617b      	str	r3, [r7, #20]
 800db68:	687a      	ldr	r2, [r7, #4]
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	781b      	ldrb	r3, [r3, #0]
 800db6e:	009b      	lsls	r3, r3, #2
 800db70:	441a      	add	r2, r3
 800db72:	697b      	ldr	r3, [r7, #20]
 800db74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800db78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db7c:	6013      	str	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	781b      	ldrb	r3, [r3, #0]
 800db82:	00db      	lsls	r3, r3, #3
 800db84:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800db88:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800db8c:	681a      	ldr	r2, [r3, #0]
 800db8e:	683b      	ldr	r3, [r7, #0]
 800db90:	781b      	ldrb	r3, [r3, #0]
 800db92:	00db      	lsls	r3, r3, #3
 800db94:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800db98:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800db9c:	b292      	uxth	r2, r2
 800db9e:	601a      	str	r2, [r3, #0]
 800dba0:	683b      	ldr	r3, [r7, #0]
 800dba2:	781b      	ldrb	r3, [r3, #0]
 800dba4:	00db      	lsls	r3, r3, #3
 800dba6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dbaa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dbae:	6819      	ldr	r1, [r3, #0]
 800dbb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dbb2:	041a      	lsls	r2, r3, #16
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	781b      	ldrb	r3, [r3, #0]
 800dbb8:	00db      	lsls	r3, r3, #3
 800dbba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dbbe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dbc2:	430a      	orrs	r2, r1
 800dbc4:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800dbc6:	683b      	ldr	r3, [r7, #0]
 800dbc8:	891b      	ldrh	r3, [r3, #8]
 800dbca:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	6959      	ldr	r1, [r3, #20]
 800dbd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dbd2:	b29b      	uxth	r3, r3
 800dbd4:	8b7a      	ldrh	r2, [r7, #26]
 800dbd6:	6878      	ldr	r0, [r7, #4]
 800dbd8:	f000 fe07 	bl	800e7ea <USB_WritePMA>
 800dbdc:	e158      	b.n	800de90 <USB_EPStartXfer+0x9b4>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800dbde:	683b      	ldr	r3, [r7, #0]
 800dbe0:	6a1a      	ldr	r2, [r3, #32]
 800dbe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dbe4:	1ad2      	subs	r2, r2, r3
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800dbea:	687a      	ldr	r2, [r7, #4]
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	781b      	ldrb	r3, [r3, #0]
 800dbf0:	009b      	lsls	r3, r3, #2
 800dbf2:	4413      	add	r3, r2
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	f000 80a3 	beq.w	800dd46 <USB_EPStartXfer+0x86a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	785b      	ldrb	r3, [r3, #1]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d16a      	bne.n	800dcde <USB_EPStartXfer+0x802>
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	781b      	ldrb	r3, [r3, #0]
 800dc0c:	00db      	lsls	r3, r3, #3
 800dc0e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dc12:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dc16:	685a      	ldr	r2, [r3, #4]
 800dc18:	683b      	ldr	r3, [r7, #0]
 800dc1a:	781b      	ldrb	r3, [r3, #0]
 800dc1c:	00db      	lsls	r3, r3, #3
 800dc1e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dc22:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dc26:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800dc2a:	605a      	str	r2, [r3, #4]
 800dc2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d112      	bne.n	800dc58 <USB_EPStartXfer+0x77c>
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	781b      	ldrb	r3, [r3, #0]
 800dc36:	00db      	lsls	r3, r3, #3
 800dc38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dc3c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dc40:	685a      	ldr	r2, [r3, #4]
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	781b      	ldrb	r3, [r3, #0]
 800dc46:	00db      	lsls	r3, r3, #3
 800dc48:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dc4c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dc50:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800dc54:	605a      	str	r2, [r3, #4]
 800dc56:	e06a      	b.n	800dd2e <USB_EPStartXfer+0x852>
 800dc58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dc5a:	2b3e      	cmp	r3, #62	@ 0x3e
 800dc5c:	d81e      	bhi.n	800dc9c <USB_EPStartXfer+0x7c0>
 800dc5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dc60:	085b      	lsrs	r3, r3, #1
 800dc62:	643b      	str	r3, [r7, #64]	@ 0x40
 800dc64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dc66:	f003 0301 	and.w	r3, r3, #1
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d002      	beq.n	800dc74 <USB_EPStartXfer+0x798>
 800dc6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc70:	3301      	adds	r3, #1
 800dc72:	643b      	str	r3, [r7, #64]	@ 0x40
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	781b      	ldrb	r3, [r3, #0]
 800dc78:	00db      	lsls	r3, r3, #3
 800dc7a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dc7e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dc82:	6859      	ldr	r1, [r3, #4]
 800dc84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc86:	069a      	lsls	r2, r3, #26
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	781b      	ldrb	r3, [r3, #0]
 800dc8c:	00db      	lsls	r3, r3, #3
 800dc8e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dc92:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dc96:	430a      	orrs	r2, r1
 800dc98:	605a      	str	r2, [r3, #4]
 800dc9a:	e048      	b.n	800dd2e <USB_EPStartXfer+0x852>
 800dc9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dc9e:	095b      	lsrs	r3, r3, #5
 800dca0:	643b      	str	r3, [r7, #64]	@ 0x40
 800dca2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dca4:	f003 031f 	and.w	r3, r3, #31
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d102      	bne.n	800dcb2 <USB_EPStartXfer+0x7d6>
 800dcac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dcae:	3b01      	subs	r3, #1
 800dcb0:	643b      	str	r3, [r7, #64]	@ 0x40
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	781b      	ldrb	r3, [r3, #0]
 800dcb6:	00db      	lsls	r3, r3, #3
 800dcb8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dcbc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dcc0:	685a      	ldr	r2, [r3, #4]
 800dcc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dcc4:	069b      	lsls	r3, r3, #26
 800dcc6:	431a      	orrs	r2, r3
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	781b      	ldrb	r3, [r3, #0]
 800dccc:	00db      	lsls	r3, r3, #3
 800dcce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dcd2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dcd6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800dcda:	605a      	str	r2, [r3, #4]
 800dcdc:	e027      	b.n	800dd2e <USB_EPStartXfer+0x852>
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	785b      	ldrb	r3, [r3, #1]
 800dce2:	2b01      	cmp	r3, #1
 800dce4:	d123      	bne.n	800dd2e <USB_EPStartXfer+0x852>
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	781b      	ldrb	r3, [r3, #0]
 800dcea:	00db      	lsls	r3, r3, #3
 800dcec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dcf0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dcf4:	685a      	ldr	r2, [r3, #4]
 800dcf6:	683b      	ldr	r3, [r7, #0]
 800dcf8:	781b      	ldrb	r3, [r3, #0]
 800dcfa:	00db      	lsls	r3, r3, #3
 800dcfc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dd00:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dd04:	b292      	uxth	r2, r2
 800dd06:	605a      	str	r2, [r3, #4]
 800dd08:	683b      	ldr	r3, [r7, #0]
 800dd0a:	781b      	ldrb	r3, [r3, #0]
 800dd0c:	00db      	lsls	r3, r3, #3
 800dd0e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dd12:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dd16:	6859      	ldr	r1, [r3, #4]
 800dd18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dd1a:	041a      	lsls	r2, r3, #16
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	781b      	ldrb	r3, [r3, #0]
 800dd20:	00db      	lsls	r3, r3, #3
 800dd22:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dd26:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dd2a:	430a      	orrs	r2, r1
 800dd2c:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	895b      	ldrh	r3, [r3, #10]
 800dd32:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	6959      	ldr	r1, [r3, #20]
 800dd38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dd3a:	b29b      	uxth	r3, r3
 800dd3c:	8b7a      	ldrh	r2, [r7, #26]
 800dd3e:	6878      	ldr	r0, [r7, #4]
 800dd40:	f000 fd53 	bl	800e7ea <USB_WritePMA>
 800dd44:	e0a4      	b.n	800de90 <USB_EPStartXfer+0x9b4>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800dd46:	683b      	ldr	r3, [r7, #0]
 800dd48:	785b      	ldrb	r3, [r3, #1]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d16d      	bne.n	800de2a <USB_EPStartXfer+0x94e>
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	781b      	ldrb	r3, [r3, #0]
 800dd52:	00db      	lsls	r3, r3, #3
 800dd54:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dd58:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dd5c:	681a      	ldr	r2, [r3, #0]
 800dd5e:	683b      	ldr	r3, [r7, #0]
 800dd60:	781b      	ldrb	r3, [r3, #0]
 800dd62:	00db      	lsls	r3, r3, #3
 800dd64:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dd68:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dd6c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800dd70:	601a      	str	r2, [r3, #0]
 800dd72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d112      	bne.n	800dd9e <USB_EPStartXfer+0x8c2>
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	781b      	ldrb	r3, [r3, #0]
 800dd7c:	00db      	lsls	r3, r3, #3
 800dd7e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dd82:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dd86:	681a      	ldr	r2, [r3, #0]
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	781b      	ldrb	r3, [r3, #0]
 800dd8c:	00db      	lsls	r3, r3, #3
 800dd8e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dd92:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dd96:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800dd9a:	601a      	str	r2, [r3, #0]
 800dd9c:	e06d      	b.n	800de7a <USB_EPStartXfer+0x99e>
 800dd9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dda0:	2b3e      	cmp	r3, #62	@ 0x3e
 800dda2:	d821      	bhi.n	800dde8 <USB_EPStartXfer+0x90c>
 800dda4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dda6:	085b      	lsrs	r3, r3, #1
 800dda8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ddaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ddac:	f003 0301 	and.w	r3, r3, #1
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d002      	beq.n	800ddba <USB_EPStartXfer+0x8de>
 800ddb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddb6:	3301      	adds	r3, #1
 800ddb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ddba:	683b      	ldr	r3, [r7, #0]
 800ddbc:	781b      	ldrb	r3, [r3, #0]
 800ddbe:	00db      	lsls	r3, r3, #3
 800ddc0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ddc4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ddc8:	6819      	ldr	r1, [r3, #0]
 800ddca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddcc:	069a      	lsls	r2, r3, #26
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	781b      	ldrb	r3, [r3, #0]
 800ddd2:	00db      	lsls	r3, r3, #3
 800ddd4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ddd8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dddc:	430a      	orrs	r2, r1
 800ddde:	601a      	str	r2, [r3, #0]
 800dde0:	e04b      	b.n	800de7a <USB_EPStartXfer+0x99e>
 800dde2:	bf00      	nop
 800dde4:	07ff8e8f 	.word	0x07ff8e8f
 800dde8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ddea:	095b      	lsrs	r3, r3, #5
 800ddec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ddee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ddf0:	f003 031f 	and.w	r3, r3, #31
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d102      	bne.n	800ddfe <USB_EPStartXfer+0x922>
 800ddf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddfa:	3b01      	subs	r3, #1
 800ddfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ddfe:	683b      	ldr	r3, [r7, #0]
 800de00:	781b      	ldrb	r3, [r3, #0]
 800de02:	00db      	lsls	r3, r3, #3
 800de04:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800de08:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800de0c:	681a      	ldr	r2, [r3, #0]
 800de0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de10:	069b      	lsls	r3, r3, #26
 800de12:	431a      	orrs	r2, r3
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	781b      	ldrb	r3, [r3, #0]
 800de18:	00db      	lsls	r3, r3, #3
 800de1a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800de1e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800de22:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800de26:	601a      	str	r2, [r3, #0]
 800de28:	e027      	b.n	800de7a <USB_EPStartXfer+0x99e>
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	785b      	ldrb	r3, [r3, #1]
 800de2e:	2b01      	cmp	r3, #1
 800de30:	d123      	bne.n	800de7a <USB_EPStartXfer+0x99e>
 800de32:	683b      	ldr	r3, [r7, #0]
 800de34:	781b      	ldrb	r3, [r3, #0]
 800de36:	00db      	lsls	r3, r3, #3
 800de38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800de3c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800de40:	681a      	ldr	r2, [r3, #0]
 800de42:	683b      	ldr	r3, [r7, #0]
 800de44:	781b      	ldrb	r3, [r3, #0]
 800de46:	00db      	lsls	r3, r3, #3
 800de48:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800de4c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800de50:	b292      	uxth	r2, r2
 800de52:	601a      	str	r2, [r3, #0]
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	781b      	ldrb	r3, [r3, #0]
 800de58:	00db      	lsls	r3, r3, #3
 800de5a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800de5e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800de62:	6819      	ldr	r1, [r3, #0]
 800de64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800de66:	041a      	lsls	r2, r3, #16
 800de68:	683b      	ldr	r3, [r7, #0]
 800de6a:	781b      	ldrb	r3, [r3, #0]
 800de6c:	00db      	lsls	r3, r3, #3
 800de6e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800de72:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800de76:	430a      	orrs	r2, r1
 800de78:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800de7a:	683b      	ldr	r3, [r7, #0]
 800de7c:	891b      	ldrh	r3, [r3, #8]
 800de7e:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	6959      	ldr	r1, [r3, #20]
 800de84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800de86:	b29b      	uxth	r3, r3
 800de88:	8b7a      	ldrh	r2, [r7, #26]
 800de8a:	6878      	ldr	r0, [r7, #4]
 800de8c:	f000 fcad 	bl	800e7ea <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800de90:	687a      	ldr	r2, [r7, #4]
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	781b      	ldrb	r3, [r3, #0]
 800de96:	009b      	lsls	r3, r3, #2
 800de98:	4413      	add	r3, r2
 800de9a:	681a      	ldr	r2, [r3, #0]
 800de9c:	4b8b      	ldr	r3, [pc, #556]	@ (800e0cc <USB_EPStartXfer+0xbf0>)
 800de9e:	4013      	ands	r3, r2
 800dea0:	60fb      	str	r3, [r7, #12]
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	f083 0310 	eor.w	r3, r3, #16
 800dea8:	60fb      	str	r3, [r7, #12]
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	f083 0320 	eor.w	r3, r3, #32
 800deb0:	60fb      	str	r3, [r7, #12]
 800deb2:	687a      	ldr	r2, [r7, #4]
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	781b      	ldrb	r3, [r3, #0]
 800deb8:	009b      	lsls	r3, r3, #2
 800deba:	441a      	add	r2, r3
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dec2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dec6:	6013      	str	r3, [r2, #0]
 800dec8:	e36b      	b.n	800e5a2 <USB_EPStartXfer+0x10c6>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	7b1b      	ldrb	r3, [r3, #12]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	f040 8081 	bne.w	800dfd6 <USB_EPStartXfer+0xafa>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800ded4:	683b      	ldr	r3, [r7, #0]
 800ded6:	699a      	ldr	r2, [r3, #24]
 800ded8:	683b      	ldr	r3, [r7, #0]
 800deda:	691b      	ldr	r3, [r3, #16]
 800dedc:	429a      	cmp	r2, r3
 800dede:	d909      	bls.n	800def4 <USB_EPStartXfer+0xa18>
      {
        len = ep->maxpacket;
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	691b      	ldr	r3, [r3, #16]
 800dee4:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	699a      	ldr	r2, [r3, #24]
 800deea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800deec:	1ad2      	subs	r2, r2, r3
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	619a      	str	r2, [r3, #24]
 800def2:	e005      	b.n	800df00 <USB_EPStartXfer+0xa24>
      }
      else
      {
        len = ep->xfer_len;
 800def4:	683b      	ldr	r3, [r7, #0]
 800def6:	699b      	ldr	r3, [r3, #24]
 800def8:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 800defa:	683b      	ldr	r3, [r7, #0]
 800defc:	2200      	movs	r2, #0
 800defe:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	781b      	ldrb	r3, [r3, #0]
 800df04:	00db      	lsls	r3, r3, #3
 800df06:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800df0a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800df0e:	685a      	ldr	r2, [r3, #4]
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	781b      	ldrb	r3, [r3, #0]
 800df14:	00db      	lsls	r3, r3, #3
 800df16:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800df1a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800df1e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800df22:	605a      	str	r2, [r3, #4]
 800df24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800df26:	2b00      	cmp	r3, #0
 800df28:	d112      	bne.n	800df50 <USB_EPStartXfer+0xa74>
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	781b      	ldrb	r3, [r3, #0]
 800df2e:	00db      	lsls	r3, r3, #3
 800df30:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800df34:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800df38:	685a      	ldr	r2, [r3, #4]
 800df3a:	683b      	ldr	r3, [r7, #0]
 800df3c:	781b      	ldrb	r3, [r3, #0]
 800df3e:	00db      	lsls	r3, r3, #3
 800df40:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800df44:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800df48:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800df4c:	605a      	str	r2, [r3, #4]
 800df4e:	e30c      	b.n	800e56a <USB_EPStartXfer+0x108e>
 800df50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800df52:	2b3e      	cmp	r3, #62	@ 0x3e
 800df54:	d81e      	bhi.n	800df94 <USB_EPStartXfer+0xab8>
 800df56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800df58:	085b      	lsrs	r3, r3, #1
 800df5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800df5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800df5e:	f003 0301 	and.w	r3, r3, #1
 800df62:	2b00      	cmp	r3, #0
 800df64:	d002      	beq.n	800df6c <USB_EPStartXfer+0xa90>
 800df66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df68:	3301      	adds	r3, #1
 800df6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800df6c:	683b      	ldr	r3, [r7, #0]
 800df6e:	781b      	ldrb	r3, [r3, #0]
 800df70:	00db      	lsls	r3, r3, #3
 800df72:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800df76:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800df7a:	6859      	ldr	r1, [r3, #4]
 800df7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df7e:	069a      	lsls	r2, r3, #26
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	781b      	ldrb	r3, [r3, #0]
 800df84:	00db      	lsls	r3, r3, #3
 800df86:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800df8a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800df8e:	430a      	orrs	r2, r1
 800df90:	605a      	str	r2, [r3, #4]
 800df92:	e2ea      	b.n	800e56a <USB_EPStartXfer+0x108e>
 800df94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800df96:	095b      	lsrs	r3, r3, #5
 800df98:	63bb      	str	r3, [r7, #56]	@ 0x38
 800df9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800df9c:	f003 031f 	and.w	r3, r3, #31
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d102      	bne.n	800dfaa <USB_EPStartXfer+0xace>
 800dfa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfa6:	3b01      	subs	r3, #1
 800dfa8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dfaa:	683b      	ldr	r3, [r7, #0]
 800dfac:	781b      	ldrb	r3, [r3, #0]
 800dfae:	00db      	lsls	r3, r3, #3
 800dfb0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dfb4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dfb8:	685a      	ldr	r2, [r3, #4]
 800dfba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfbc:	069b      	lsls	r3, r3, #26
 800dfbe:	431a      	orrs	r2, r3
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	781b      	ldrb	r3, [r3, #0]
 800dfc4:	00db      	lsls	r3, r3, #3
 800dfc6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dfca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dfce:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800dfd2:	605a      	str	r2, [r3, #4]
 800dfd4:	e2c9      	b.n	800e56a <USB_EPStartXfer+0x108e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800dfd6:	683b      	ldr	r3, [r7, #0]
 800dfd8:	78db      	ldrb	r3, [r3, #3]
 800dfda:	2b02      	cmp	r3, #2
 800dfdc:	f040 8176 	bne.w	800e2cc <USB_EPStartXfer+0xdf0>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	785b      	ldrb	r3, [r3, #1]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d173      	bne.n	800e0d0 <USB_EPStartXfer+0xbf4>
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	781b      	ldrb	r3, [r3, #0]
 800dfec:	00db      	lsls	r3, r3, #3
 800dfee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dff2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dff6:	681a      	ldr	r2, [r3, #0]
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	781b      	ldrb	r3, [r3, #0]
 800dffc:	00db      	lsls	r3, r3, #3
 800dffe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e002:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e006:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800e00a:	601a      	str	r2, [r3, #0]
 800e00c:	683b      	ldr	r3, [r7, #0]
 800e00e:	691b      	ldr	r3, [r3, #16]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d112      	bne.n	800e03a <USB_EPStartXfer+0xb5e>
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	781b      	ldrb	r3, [r3, #0]
 800e018:	00db      	lsls	r3, r3, #3
 800e01a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e01e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e022:	681a      	ldr	r2, [r3, #0]
 800e024:	683b      	ldr	r3, [r7, #0]
 800e026:	781b      	ldrb	r3, [r3, #0]
 800e028:	00db      	lsls	r3, r3, #3
 800e02a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e02e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e032:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e036:	601a      	str	r2, [r3, #0]
 800e038:	e073      	b.n	800e122 <USB_EPStartXfer+0xc46>
 800e03a:	683b      	ldr	r3, [r7, #0]
 800e03c:	691b      	ldr	r3, [r3, #16]
 800e03e:	2b3e      	cmp	r3, #62	@ 0x3e
 800e040:	d820      	bhi.n	800e084 <USB_EPStartXfer+0xba8>
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	691b      	ldr	r3, [r3, #16]
 800e046:	085b      	lsrs	r3, r3, #1
 800e048:	637b      	str	r3, [r7, #52]	@ 0x34
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	691b      	ldr	r3, [r3, #16]
 800e04e:	f003 0301 	and.w	r3, r3, #1
 800e052:	2b00      	cmp	r3, #0
 800e054:	d002      	beq.n	800e05c <USB_EPStartXfer+0xb80>
 800e056:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e058:	3301      	adds	r3, #1
 800e05a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e05c:	683b      	ldr	r3, [r7, #0]
 800e05e:	781b      	ldrb	r3, [r3, #0]
 800e060:	00db      	lsls	r3, r3, #3
 800e062:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e066:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e06a:	6819      	ldr	r1, [r3, #0]
 800e06c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e06e:	069a      	lsls	r2, r3, #26
 800e070:	683b      	ldr	r3, [r7, #0]
 800e072:	781b      	ldrb	r3, [r3, #0]
 800e074:	00db      	lsls	r3, r3, #3
 800e076:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e07a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e07e:	430a      	orrs	r2, r1
 800e080:	601a      	str	r2, [r3, #0]
 800e082:	e04e      	b.n	800e122 <USB_EPStartXfer+0xc46>
 800e084:	683b      	ldr	r3, [r7, #0]
 800e086:	691b      	ldr	r3, [r3, #16]
 800e088:	095b      	lsrs	r3, r3, #5
 800e08a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e08c:	683b      	ldr	r3, [r7, #0]
 800e08e:	691b      	ldr	r3, [r3, #16]
 800e090:	f003 031f 	and.w	r3, r3, #31
 800e094:	2b00      	cmp	r3, #0
 800e096:	d102      	bne.n	800e09e <USB_EPStartXfer+0xbc2>
 800e098:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e09a:	3b01      	subs	r3, #1
 800e09c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e09e:	683b      	ldr	r3, [r7, #0]
 800e0a0:	781b      	ldrb	r3, [r3, #0]
 800e0a2:	00db      	lsls	r3, r3, #3
 800e0a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e0a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e0ac:	681a      	ldr	r2, [r3, #0]
 800e0ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e0b0:	069b      	lsls	r3, r3, #26
 800e0b2:	431a      	orrs	r2, r3
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	781b      	ldrb	r3, [r3, #0]
 800e0b8:	00db      	lsls	r3, r3, #3
 800e0ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e0be:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e0c2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e0c6:	601a      	str	r2, [r3, #0]
 800e0c8:	e02b      	b.n	800e122 <USB_EPStartXfer+0xc46>
 800e0ca:	bf00      	nop
 800e0cc:	07ff8fbf 	.word	0x07ff8fbf
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	785b      	ldrb	r3, [r3, #1]
 800e0d4:	2b01      	cmp	r3, #1
 800e0d6:	d124      	bne.n	800e122 <USB_EPStartXfer+0xc46>
 800e0d8:	683b      	ldr	r3, [r7, #0]
 800e0da:	781b      	ldrb	r3, [r3, #0]
 800e0dc:	00db      	lsls	r3, r3, #3
 800e0de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e0e2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e0e6:	681a      	ldr	r2, [r3, #0]
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	781b      	ldrb	r3, [r3, #0]
 800e0ec:	00db      	lsls	r3, r3, #3
 800e0ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e0f2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e0f6:	b292      	uxth	r2, r2
 800e0f8:	601a      	str	r2, [r3, #0]
 800e0fa:	683b      	ldr	r3, [r7, #0]
 800e0fc:	781b      	ldrb	r3, [r3, #0]
 800e0fe:	00db      	lsls	r3, r3, #3
 800e100:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e104:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e108:	6819      	ldr	r1, [r3, #0]
 800e10a:	683b      	ldr	r3, [r7, #0]
 800e10c:	691b      	ldr	r3, [r3, #16]
 800e10e:	041a      	lsls	r2, r3, #16
 800e110:	683b      	ldr	r3, [r7, #0]
 800e112:	781b      	ldrb	r3, [r3, #0]
 800e114:	00db      	lsls	r3, r3, #3
 800e116:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e11a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e11e:	430a      	orrs	r2, r1
 800e120:	601a      	str	r2, [r3, #0]
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	785b      	ldrb	r3, [r3, #1]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d170      	bne.n	800e20c <USB_EPStartXfer+0xd30>
 800e12a:	683b      	ldr	r3, [r7, #0]
 800e12c:	781b      	ldrb	r3, [r3, #0]
 800e12e:	00db      	lsls	r3, r3, #3
 800e130:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e134:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e138:	685a      	ldr	r2, [r3, #4]
 800e13a:	683b      	ldr	r3, [r7, #0]
 800e13c:	781b      	ldrb	r3, [r3, #0]
 800e13e:	00db      	lsls	r3, r3, #3
 800e140:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e144:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e148:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800e14c:	605a      	str	r2, [r3, #4]
 800e14e:	683b      	ldr	r3, [r7, #0]
 800e150:	691b      	ldr	r3, [r3, #16]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d112      	bne.n	800e17c <USB_EPStartXfer+0xca0>
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	781b      	ldrb	r3, [r3, #0]
 800e15a:	00db      	lsls	r3, r3, #3
 800e15c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e160:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e164:	685a      	ldr	r2, [r3, #4]
 800e166:	683b      	ldr	r3, [r7, #0]
 800e168:	781b      	ldrb	r3, [r3, #0]
 800e16a:	00db      	lsls	r3, r3, #3
 800e16c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e170:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e174:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e178:	605a      	str	r2, [r3, #4]
 800e17a:	e070      	b.n	800e25e <USB_EPStartXfer+0xd82>
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	691b      	ldr	r3, [r3, #16]
 800e180:	2b3e      	cmp	r3, #62	@ 0x3e
 800e182:	d820      	bhi.n	800e1c6 <USB_EPStartXfer+0xcea>
 800e184:	683b      	ldr	r3, [r7, #0]
 800e186:	691b      	ldr	r3, [r3, #16]
 800e188:	085b      	lsrs	r3, r3, #1
 800e18a:	633b      	str	r3, [r7, #48]	@ 0x30
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	691b      	ldr	r3, [r3, #16]
 800e190:	f003 0301 	and.w	r3, r3, #1
 800e194:	2b00      	cmp	r3, #0
 800e196:	d002      	beq.n	800e19e <USB_EPStartXfer+0xcc2>
 800e198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e19a:	3301      	adds	r3, #1
 800e19c:	633b      	str	r3, [r7, #48]	@ 0x30
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	781b      	ldrb	r3, [r3, #0]
 800e1a2:	00db      	lsls	r3, r3, #3
 800e1a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e1a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e1ac:	6859      	ldr	r1, [r3, #4]
 800e1ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1b0:	069a      	lsls	r2, r3, #26
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	781b      	ldrb	r3, [r3, #0]
 800e1b6:	00db      	lsls	r3, r3, #3
 800e1b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e1bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e1c0:	430a      	orrs	r2, r1
 800e1c2:	605a      	str	r2, [r3, #4]
 800e1c4:	e04b      	b.n	800e25e <USB_EPStartXfer+0xd82>
 800e1c6:	683b      	ldr	r3, [r7, #0]
 800e1c8:	691b      	ldr	r3, [r3, #16]
 800e1ca:	095b      	lsrs	r3, r3, #5
 800e1cc:	633b      	str	r3, [r7, #48]	@ 0x30
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	691b      	ldr	r3, [r3, #16]
 800e1d2:	f003 031f 	and.w	r3, r3, #31
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d102      	bne.n	800e1e0 <USB_EPStartXfer+0xd04>
 800e1da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1dc:	3b01      	subs	r3, #1
 800e1de:	633b      	str	r3, [r7, #48]	@ 0x30
 800e1e0:	683b      	ldr	r3, [r7, #0]
 800e1e2:	781b      	ldrb	r3, [r3, #0]
 800e1e4:	00db      	lsls	r3, r3, #3
 800e1e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e1ea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e1ee:	685a      	ldr	r2, [r3, #4]
 800e1f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1f2:	069b      	lsls	r3, r3, #26
 800e1f4:	431a      	orrs	r2, r3
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	781b      	ldrb	r3, [r3, #0]
 800e1fa:	00db      	lsls	r3, r3, #3
 800e1fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e200:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e204:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e208:	605a      	str	r2, [r3, #4]
 800e20a:	e028      	b.n	800e25e <USB_EPStartXfer+0xd82>
 800e20c:	683b      	ldr	r3, [r7, #0]
 800e20e:	785b      	ldrb	r3, [r3, #1]
 800e210:	2b01      	cmp	r3, #1
 800e212:	d124      	bne.n	800e25e <USB_EPStartXfer+0xd82>
 800e214:	683b      	ldr	r3, [r7, #0]
 800e216:	781b      	ldrb	r3, [r3, #0]
 800e218:	00db      	lsls	r3, r3, #3
 800e21a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e21e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e222:	685a      	ldr	r2, [r3, #4]
 800e224:	683b      	ldr	r3, [r7, #0]
 800e226:	781b      	ldrb	r3, [r3, #0]
 800e228:	00db      	lsls	r3, r3, #3
 800e22a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e22e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e232:	b292      	uxth	r2, r2
 800e234:	605a      	str	r2, [r3, #4]
 800e236:	683b      	ldr	r3, [r7, #0]
 800e238:	781b      	ldrb	r3, [r3, #0]
 800e23a:	00db      	lsls	r3, r3, #3
 800e23c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e240:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e244:	6859      	ldr	r1, [r3, #4]
 800e246:	683b      	ldr	r3, [r7, #0]
 800e248:	691b      	ldr	r3, [r3, #16]
 800e24a:	041a      	lsls	r2, r3, #16
 800e24c:	683b      	ldr	r3, [r7, #0]
 800e24e:	781b      	ldrb	r3, [r3, #0]
 800e250:	00db      	lsls	r3, r3, #3
 800e252:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e256:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e25a:	430a      	orrs	r2, r1
 800e25c:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	69db      	ldr	r3, [r3, #28]
 800e262:	2b00      	cmp	r3, #0
 800e264:	f000 8181 	beq.w	800e56a <USB_EPStartXfer+0x108e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 800e268:	687a      	ldr	r2, [r7, #4]
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	781b      	ldrb	r3, [r3, #0]
 800e26e:	009b      	lsls	r3, r3, #2
 800e270:	4413      	add	r3, r2
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	84fb      	strh	r3, [r7, #38]	@ 0x26

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e276:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e278:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d004      	beq.n	800e28a <USB_EPStartXfer+0xdae>
 800e280:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e286:	2b00      	cmp	r3, #0
 800e288:	d10b      	bne.n	800e2a2 <USB_EPStartXfer+0xdc6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e28a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e28c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e290:	2b00      	cmp	r3, #0
 800e292:	f040 816a 	bne.w	800e56a <USB_EPStartXfer+0x108e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e296:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	f040 8164 	bne.w	800e56a <USB_EPStartXfer+0x108e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800e2a2:	687a      	ldr	r2, [r7, #4]
 800e2a4:	683b      	ldr	r3, [r7, #0]
 800e2a6:	781b      	ldrb	r3, [r3, #0]
 800e2a8:	009b      	lsls	r3, r3, #2
 800e2aa:	4413      	add	r3, r2
 800e2ac:	681a      	ldr	r2, [r3, #0]
 800e2ae:	4b98      	ldr	r3, [pc, #608]	@ (800e510 <USB_EPStartXfer+0x1034>)
 800e2b0:	4013      	ands	r3, r2
 800e2b2:	623b      	str	r3, [r7, #32]
 800e2b4:	687a      	ldr	r2, [r7, #4]
 800e2b6:	683b      	ldr	r3, [r7, #0]
 800e2b8:	781b      	ldrb	r3, [r3, #0]
 800e2ba:	009b      	lsls	r3, r3, #2
 800e2bc:	441a      	add	r2, r3
 800e2be:	6a3b      	ldr	r3, [r7, #32]
 800e2c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e2c4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e2c8:	6013      	str	r3, [r2, #0]
 800e2ca:	e14e      	b.n	800e56a <USB_EPStartXfer+0x108e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800e2cc:	683b      	ldr	r3, [r7, #0]
 800e2ce:	78db      	ldrb	r3, [r3, #3]
 800e2d0:	2b01      	cmp	r3, #1
 800e2d2:	f040 8148 	bne.w	800e566 <USB_EPStartXfer+0x108a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	699a      	ldr	r2, [r3, #24]
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	691b      	ldr	r3, [r3, #16]
 800e2de:	429a      	cmp	r2, r3
 800e2e0:	d909      	bls.n	800e2f6 <USB_EPStartXfer+0xe1a>
        {
          len = ep->maxpacket;
 800e2e2:	683b      	ldr	r3, [r7, #0]
 800e2e4:	691b      	ldr	r3, [r3, #16]
 800e2e6:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	699a      	ldr	r2, [r3, #24]
 800e2ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e2ee:	1ad2      	subs	r2, r2, r3
 800e2f0:	683b      	ldr	r3, [r7, #0]
 800e2f2:	619a      	str	r2, [r3, #24]
 800e2f4:	e005      	b.n	800e302 <USB_EPStartXfer+0xe26>
        }
        else
        {
          len = ep->xfer_len;
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	699b      	ldr	r3, [r3, #24]
 800e2fa:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	2200      	movs	r2, #0
 800e300:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800e302:	683b      	ldr	r3, [r7, #0]
 800e304:	785b      	ldrb	r3, [r3, #1]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d16a      	bne.n	800e3e0 <USB_EPStartXfer+0xf04>
 800e30a:	683b      	ldr	r3, [r7, #0]
 800e30c:	781b      	ldrb	r3, [r3, #0]
 800e30e:	00db      	lsls	r3, r3, #3
 800e310:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e314:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e318:	681a      	ldr	r2, [r3, #0]
 800e31a:	683b      	ldr	r3, [r7, #0]
 800e31c:	781b      	ldrb	r3, [r3, #0]
 800e31e:	00db      	lsls	r3, r3, #3
 800e320:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e324:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e328:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800e32c:	601a      	str	r2, [r3, #0]
 800e32e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e330:	2b00      	cmp	r3, #0
 800e332:	d112      	bne.n	800e35a <USB_EPStartXfer+0xe7e>
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	781b      	ldrb	r3, [r3, #0]
 800e338:	00db      	lsls	r3, r3, #3
 800e33a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e33e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e342:	681a      	ldr	r2, [r3, #0]
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	781b      	ldrb	r3, [r3, #0]
 800e348:	00db      	lsls	r3, r3, #3
 800e34a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e34e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e352:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e356:	601a      	str	r2, [r3, #0]
 800e358:	e06a      	b.n	800e430 <USB_EPStartXfer+0xf54>
 800e35a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e35c:	2b3e      	cmp	r3, #62	@ 0x3e
 800e35e:	d81e      	bhi.n	800e39e <USB_EPStartXfer+0xec2>
 800e360:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e362:	085b      	lsrs	r3, r3, #1
 800e364:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e366:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e368:	f003 0301 	and.w	r3, r3, #1
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d002      	beq.n	800e376 <USB_EPStartXfer+0xe9a>
 800e370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e372:	3301      	adds	r3, #1
 800e374:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e376:	683b      	ldr	r3, [r7, #0]
 800e378:	781b      	ldrb	r3, [r3, #0]
 800e37a:	00db      	lsls	r3, r3, #3
 800e37c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e380:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e384:	6819      	ldr	r1, [r3, #0]
 800e386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e388:	069a      	lsls	r2, r3, #26
 800e38a:	683b      	ldr	r3, [r7, #0]
 800e38c:	781b      	ldrb	r3, [r3, #0]
 800e38e:	00db      	lsls	r3, r3, #3
 800e390:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e394:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e398:	430a      	orrs	r2, r1
 800e39a:	601a      	str	r2, [r3, #0]
 800e39c:	e048      	b.n	800e430 <USB_EPStartXfer+0xf54>
 800e39e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e3a0:	095b      	lsrs	r3, r3, #5
 800e3a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e3a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e3a6:	f003 031f 	and.w	r3, r3, #31
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d102      	bne.n	800e3b4 <USB_EPStartXfer+0xed8>
 800e3ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3b0:	3b01      	subs	r3, #1
 800e3b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	781b      	ldrb	r3, [r3, #0]
 800e3b8:	00db      	lsls	r3, r3, #3
 800e3ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e3be:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e3c2:	681a      	ldr	r2, [r3, #0]
 800e3c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3c6:	069b      	lsls	r3, r3, #26
 800e3c8:	431a      	orrs	r2, r3
 800e3ca:	683b      	ldr	r3, [r7, #0]
 800e3cc:	781b      	ldrb	r3, [r3, #0]
 800e3ce:	00db      	lsls	r3, r3, #3
 800e3d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e3d4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e3d8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e3dc:	601a      	str	r2, [r3, #0]
 800e3de:	e027      	b.n	800e430 <USB_EPStartXfer+0xf54>
 800e3e0:	683b      	ldr	r3, [r7, #0]
 800e3e2:	785b      	ldrb	r3, [r3, #1]
 800e3e4:	2b01      	cmp	r3, #1
 800e3e6:	d123      	bne.n	800e430 <USB_EPStartXfer+0xf54>
 800e3e8:	683b      	ldr	r3, [r7, #0]
 800e3ea:	781b      	ldrb	r3, [r3, #0]
 800e3ec:	00db      	lsls	r3, r3, #3
 800e3ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e3f2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e3f6:	681a      	ldr	r2, [r3, #0]
 800e3f8:	683b      	ldr	r3, [r7, #0]
 800e3fa:	781b      	ldrb	r3, [r3, #0]
 800e3fc:	00db      	lsls	r3, r3, #3
 800e3fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e402:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e406:	b292      	uxth	r2, r2
 800e408:	601a      	str	r2, [r3, #0]
 800e40a:	683b      	ldr	r3, [r7, #0]
 800e40c:	781b      	ldrb	r3, [r3, #0]
 800e40e:	00db      	lsls	r3, r3, #3
 800e410:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e414:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e418:	6819      	ldr	r1, [r3, #0]
 800e41a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e41c:	041a      	lsls	r2, r3, #16
 800e41e:	683b      	ldr	r3, [r7, #0]
 800e420:	781b      	ldrb	r3, [r3, #0]
 800e422:	00db      	lsls	r3, r3, #3
 800e424:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e428:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e42c:	430a      	orrs	r2, r1
 800e42e:	601a      	str	r2, [r3, #0]
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	785b      	ldrb	r3, [r3, #1]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d16d      	bne.n	800e514 <USB_EPStartXfer+0x1038>
 800e438:	683b      	ldr	r3, [r7, #0]
 800e43a:	781b      	ldrb	r3, [r3, #0]
 800e43c:	00db      	lsls	r3, r3, #3
 800e43e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e442:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e446:	685a      	ldr	r2, [r3, #4]
 800e448:	683b      	ldr	r3, [r7, #0]
 800e44a:	781b      	ldrb	r3, [r3, #0]
 800e44c:	00db      	lsls	r3, r3, #3
 800e44e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e452:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e456:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800e45a:	605a      	str	r2, [r3, #4]
 800e45c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d112      	bne.n	800e488 <USB_EPStartXfer+0xfac>
 800e462:	683b      	ldr	r3, [r7, #0]
 800e464:	781b      	ldrb	r3, [r3, #0]
 800e466:	00db      	lsls	r3, r3, #3
 800e468:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e46c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e470:	685a      	ldr	r2, [r3, #4]
 800e472:	683b      	ldr	r3, [r7, #0]
 800e474:	781b      	ldrb	r3, [r3, #0]
 800e476:	00db      	lsls	r3, r3, #3
 800e478:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e47c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e480:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e484:	605a      	str	r2, [r3, #4]
 800e486:	e070      	b.n	800e56a <USB_EPStartXfer+0x108e>
 800e488:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e48a:	2b3e      	cmp	r3, #62	@ 0x3e
 800e48c:	d81e      	bhi.n	800e4cc <USB_EPStartXfer+0xff0>
 800e48e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e490:	085b      	lsrs	r3, r3, #1
 800e492:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e494:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e496:	f003 0301 	and.w	r3, r3, #1
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d002      	beq.n	800e4a4 <USB_EPStartXfer+0xfc8>
 800e49e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4a0:	3301      	adds	r3, #1
 800e4a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e4a4:	683b      	ldr	r3, [r7, #0]
 800e4a6:	781b      	ldrb	r3, [r3, #0]
 800e4a8:	00db      	lsls	r3, r3, #3
 800e4aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e4ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e4b2:	6859      	ldr	r1, [r3, #4]
 800e4b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4b6:	069a      	lsls	r2, r3, #26
 800e4b8:	683b      	ldr	r3, [r7, #0]
 800e4ba:	781b      	ldrb	r3, [r3, #0]
 800e4bc:	00db      	lsls	r3, r3, #3
 800e4be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e4c2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e4c6:	430a      	orrs	r2, r1
 800e4c8:	605a      	str	r2, [r3, #4]
 800e4ca:	e04e      	b.n	800e56a <USB_EPStartXfer+0x108e>
 800e4cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e4ce:	095b      	lsrs	r3, r3, #5
 800e4d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e4d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e4d4:	f003 031f 	and.w	r3, r3, #31
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d102      	bne.n	800e4e2 <USB_EPStartXfer+0x1006>
 800e4dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4de:	3b01      	subs	r3, #1
 800e4e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e4e2:	683b      	ldr	r3, [r7, #0]
 800e4e4:	781b      	ldrb	r3, [r3, #0]
 800e4e6:	00db      	lsls	r3, r3, #3
 800e4e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e4ec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e4f0:	685a      	ldr	r2, [r3, #4]
 800e4f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4f4:	069b      	lsls	r3, r3, #26
 800e4f6:	431a      	orrs	r2, r3
 800e4f8:	683b      	ldr	r3, [r7, #0]
 800e4fa:	781b      	ldrb	r3, [r3, #0]
 800e4fc:	00db      	lsls	r3, r3, #3
 800e4fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e502:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e506:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e50a:	605a      	str	r2, [r3, #4]
 800e50c:	e02d      	b.n	800e56a <USB_EPStartXfer+0x108e>
 800e50e:	bf00      	nop
 800e510:	07ff8f8f 	.word	0x07ff8f8f
 800e514:	683b      	ldr	r3, [r7, #0]
 800e516:	785b      	ldrb	r3, [r3, #1]
 800e518:	2b01      	cmp	r3, #1
 800e51a:	d126      	bne.n	800e56a <USB_EPStartXfer+0x108e>
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	781b      	ldrb	r3, [r3, #0]
 800e520:	00db      	lsls	r3, r3, #3
 800e522:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e526:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e52a:	685a      	ldr	r2, [r3, #4]
 800e52c:	683b      	ldr	r3, [r7, #0]
 800e52e:	781b      	ldrb	r3, [r3, #0]
 800e530:	00db      	lsls	r3, r3, #3
 800e532:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e536:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e53a:	b292      	uxth	r2, r2
 800e53c:	605a      	str	r2, [r3, #4]
 800e53e:	683b      	ldr	r3, [r7, #0]
 800e540:	781b      	ldrb	r3, [r3, #0]
 800e542:	00db      	lsls	r3, r3, #3
 800e544:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e548:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e54c:	6859      	ldr	r1, [r3, #4]
 800e54e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e550:	041a      	lsls	r2, r3, #16
 800e552:	683b      	ldr	r3, [r7, #0]
 800e554:	781b      	ldrb	r3, [r3, #0]
 800e556:	00db      	lsls	r3, r3, #3
 800e558:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e55c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e560:	430a      	orrs	r2, r1
 800e562:	605a      	str	r2, [r3, #4]
 800e564:	e001      	b.n	800e56a <USB_EPStartXfer+0x108e>
      }
      else
      {
        return HAL_ERROR;
 800e566:	2301      	movs	r3, #1
 800e568:	e01c      	b.n	800e5a4 <USB_EPStartXfer+0x10c8>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e56a:	687a      	ldr	r2, [r7, #4]
 800e56c:	683b      	ldr	r3, [r7, #0]
 800e56e:	781b      	ldrb	r3, [r3, #0]
 800e570:	009b      	lsls	r3, r3, #2
 800e572:	4413      	add	r3, r2
 800e574:	681a      	ldr	r2, [r3, #0]
 800e576:	4b0d      	ldr	r3, [pc, #52]	@ (800e5ac <USB_EPStartXfer+0x10d0>)
 800e578:	4013      	ands	r3, r2
 800e57a:	61fb      	str	r3, [r7, #28]
 800e57c:	69fb      	ldr	r3, [r7, #28]
 800e57e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e582:	61fb      	str	r3, [r7, #28]
 800e584:	69fb      	ldr	r3, [r7, #28]
 800e586:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e58a:	61fb      	str	r3, [r7, #28]
 800e58c:	687a      	ldr	r2, [r7, #4]
 800e58e:	683b      	ldr	r3, [r7, #0]
 800e590:	781b      	ldrb	r3, [r3, #0]
 800e592:	009b      	lsls	r3, r3, #2
 800e594:	441a      	add	r2, r3
 800e596:	69fb      	ldr	r3, [r7, #28]
 800e598:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e59c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e5a0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e5a2:	2300      	movs	r3, #0
}
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	3758      	adds	r7, #88	@ 0x58
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	bd80      	pop	{r7, pc}
 800e5ac:	07ffbf8f 	.word	0x07ffbf8f

0800e5b0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800e5b0:	b480      	push	{r7}
 800e5b2:	b085      	sub	sp, #20
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
 800e5b8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800e5ba:	683b      	ldr	r3, [r7, #0]
 800e5bc:	785b      	ldrb	r3, [r3, #1]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d018      	beq.n	800e5f4 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800e5c2:	687a      	ldr	r2, [r7, #4]
 800e5c4:	683b      	ldr	r3, [r7, #0]
 800e5c6:	781b      	ldrb	r3, [r3, #0]
 800e5c8:	009b      	lsls	r3, r3, #2
 800e5ca:	4413      	add	r3, r2
 800e5cc:	681a      	ldr	r2, [r3, #0]
 800e5ce:	4b19      	ldr	r3, [pc, #100]	@ (800e634 <USB_EPSetStall+0x84>)
 800e5d0:	4013      	ands	r3, r2
 800e5d2:	60bb      	str	r3, [r7, #8]
 800e5d4:	68bb      	ldr	r3, [r7, #8]
 800e5d6:	f083 0310 	eor.w	r3, r3, #16
 800e5da:	60bb      	str	r3, [r7, #8]
 800e5dc:	687a      	ldr	r2, [r7, #4]
 800e5de:	683b      	ldr	r3, [r7, #0]
 800e5e0:	781b      	ldrb	r3, [r3, #0]
 800e5e2:	009b      	lsls	r3, r3, #2
 800e5e4:	441a      	add	r2, r3
 800e5e6:	68bb      	ldr	r3, [r7, #8]
 800e5e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e5ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e5f0:	6013      	str	r3, [r2, #0]
 800e5f2:	e017      	b.n	800e624 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800e5f4:	687a      	ldr	r2, [r7, #4]
 800e5f6:	683b      	ldr	r3, [r7, #0]
 800e5f8:	781b      	ldrb	r3, [r3, #0]
 800e5fa:	009b      	lsls	r3, r3, #2
 800e5fc:	4413      	add	r3, r2
 800e5fe:	681a      	ldr	r2, [r3, #0]
 800e600:	4b0d      	ldr	r3, [pc, #52]	@ (800e638 <USB_EPSetStall+0x88>)
 800e602:	4013      	ands	r3, r2
 800e604:	60fb      	str	r3, [r7, #12]
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e60c:	60fb      	str	r3, [r7, #12]
 800e60e:	687a      	ldr	r2, [r7, #4]
 800e610:	683b      	ldr	r3, [r7, #0]
 800e612:	781b      	ldrb	r3, [r3, #0]
 800e614:	009b      	lsls	r3, r3, #2
 800e616:	441a      	add	r2, r3
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e61e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e622:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e624:	2300      	movs	r3, #0
}
 800e626:	4618      	mov	r0, r3
 800e628:	3714      	adds	r7, #20
 800e62a:	46bd      	mov	sp, r7
 800e62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e630:	4770      	bx	lr
 800e632:	bf00      	nop
 800e634:	07ff8fbf 	.word	0x07ff8fbf
 800e638:	07ffbf8f 	.word	0x07ffbf8f

0800e63c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800e63c:	b480      	push	{r7}
 800e63e:	b089      	sub	sp, #36	@ 0x24
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
 800e644:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800e646:	683b      	ldr	r3, [r7, #0]
 800e648:	7b1b      	ldrb	r3, [r3, #12]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d17c      	bne.n	800e748 <USB_EPClearStall+0x10c>
  {
    if (ep->is_in != 0U)
 800e64e:	683b      	ldr	r3, [r7, #0]
 800e650:	785b      	ldrb	r3, [r3, #1]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d03c      	beq.n	800e6d0 <USB_EPClearStall+0x94>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e656:	687a      	ldr	r2, [r7, #4]
 800e658:	683b      	ldr	r3, [r7, #0]
 800e65a:	781b      	ldrb	r3, [r3, #0]
 800e65c:	009b      	lsls	r3, r3, #2
 800e65e:	4413      	add	r3, r2
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	613b      	str	r3, [r7, #16]
 800e664:	693b      	ldr	r3, [r7, #16]
 800e666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d013      	beq.n	800e696 <USB_EPClearStall+0x5a>
 800e66e:	687a      	ldr	r2, [r7, #4]
 800e670:	683b      	ldr	r3, [r7, #0]
 800e672:	781b      	ldrb	r3, [r3, #0]
 800e674:	009b      	lsls	r3, r3, #2
 800e676:	4413      	add	r3, r2
 800e678:	681a      	ldr	r2, [r3, #0]
 800e67a:	4b37      	ldr	r3, [pc, #220]	@ (800e758 <USB_EPClearStall+0x11c>)
 800e67c:	4013      	ands	r3, r2
 800e67e:	60fb      	str	r3, [r7, #12]
 800e680:	687a      	ldr	r2, [r7, #4]
 800e682:	683b      	ldr	r3, [r7, #0]
 800e684:	781b      	ldrb	r3, [r3, #0]
 800e686:	009b      	lsls	r3, r3, #2
 800e688:	441a      	add	r2, r3
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e690:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e694:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e696:	683b      	ldr	r3, [r7, #0]
 800e698:	78db      	ldrb	r3, [r3, #3]
 800e69a:	2b01      	cmp	r3, #1
 800e69c:	d054      	beq.n	800e748 <USB_EPClearStall+0x10c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e69e:	687a      	ldr	r2, [r7, #4]
 800e6a0:	683b      	ldr	r3, [r7, #0]
 800e6a2:	781b      	ldrb	r3, [r3, #0]
 800e6a4:	009b      	lsls	r3, r3, #2
 800e6a6:	4413      	add	r3, r2
 800e6a8:	681a      	ldr	r2, [r3, #0]
 800e6aa:	4b2c      	ldr	r3, [pc, #176]	@ (800e75c <USB_EPClearStall+0x120>)
 800e6ac:	4013      	ands	r3, r2
 800e6ae:	60bb      	str	r3, [r7, #8]
 800e6b0:	68bb      	ldr	r3, [r7, #8]
 800e6b2:	f083 0320 	eor.w	r3, r3, #32
 800e6b6:	60bb      	str	r3, [r7, #8]
 800e6b8:	687a      	ldr	r2, [r7, #4]
 800e6ba:	683b      	ldr	r3, [r7, #0]
 800e6bc:	781b      	ldrb	r3, [r3, #0]
 800e6be:	009b      	lsls	r3, r3, #2
 800e6c0:	441a      	add	r2, r3
 800e6c2:	68bb      	ldr	r3, [r7, #8]
 800e6c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e6c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e6cc:	6013      	str	r3, [r2, #0]
 800e6ce:	e03b      	b.n	800e748 <USB_EPClearStall+0x10c>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e6d0:	687a      	ldr	r2, [r7, #4]
 800e6d2:	683b      	ldr	r3, [r7, #0]
 800e6d4:	781b      	ldrb	r3, [r3, #0]
 800e6d6:	009b      	lsls	r3, r3, #2
 800e6d8:	4413      	add	r3, r2
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	61fb      	str	r3, [r7, #28]
 800e6de:	69fb      	ldr	r3, [r7, #28]
 800e6e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d013      	beq.n	800e710 <USB_EPClearStall+0xd4>
 800e6e8:	687a      	ldr	r2, [r7, #4]
 800e6ea:	683b      	ldr	r3, [r7, #0]
 800e6ec:	781b      	ldrb	r3, [r3, #0]
 800e6ee:	009b      	lsls	r3, r3, #2
 800e6f0:	4413      	add	r3, r2
 800e6f2:	681a      	ldr	r2, [r3, #0]
 800e6f4:	4b18      	ldr	r3, [pc, #96]	@ (800e758 <USB_EPClearStall+0x11c>)
 800e6f6:	4013      	ands	r3, r2
 800e6f8:	61bb      	str	r3, [r7, #24]
 800e6fa:	687a      	ldr	r2, [r7, #4]
 800e6fc:	683b      	ldr	r3, [r7, #0]
 800e6fe:	781b      	ldrb	r3, [r3, #0]
 800e700:	009b      	lsls	r3, r3, #2
 800e702:	441a      	add	r2, r3
 800e704:	69bb      	ldr	r3, [r7, #24]
 800e706:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e70a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e70e:	6013      	str	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e710:	687a      	ldr	r2, [r7, #4]
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	781b      	ldrb	r3, [r3, #0]
 800e716:	009b      	lsls	r3, r3, #2
 800e718:	4413      	add	r3, r2
 800e71a:	681a      	ldr	r2, [r3, #0]
 800e71c:	4b10      	ldr	r3, [pc, #64]	@ (800e760 <USB_EPClearStall+0x124>)
 800e71e:	4013      	ands	r3, r2
 800e720:	617b      	str	r3, [r7, #20]
 800e722:	697b      	ldr	r3, [r7, #20]
 800e724:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e728:	617b      	str	r3, [r7, #20]
 800e72a:	697b      	ldr	r3, [r7, #20]
 800e72c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e730:	617b      	str	r3, [r7, #20]
 800e732:	687a      	ldr	r2, [r7, #4]
 800e734:	683b      	ldr	r3, [r7, #0]
 800e736:	781b      	ldrb	r3, [r3, #0]
 800e738:	009b      	lsls	r3, r3, #2
 800e73a:	441a      	add	r2, r3
 800e73c:	697b      	ldr	r3, [r7, #20]
 800e73e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e742:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e746:	6013      	str	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800e748:	2300      	movs	r3, #0
}
 800e74a:	4618      	mov	r0, r3
 800e74c:	3724      	adds	r7, #36	@ 0x24
 800e74e:	46bd      	mov	sp, r7
 800e750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e754:	4770      	bx	lr
 800e756:	bf00      	nop
 800e758:	07ff8f8f 	.word	0x07ff8f8f
 800e75c:	07ff8fbf 	.word	0x07ff8fbf
 800e760:	07ffbf8f 	.word	0x07ffbf8f

0800e764 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 800e764:	b480      	push	{r7}
 800e766:	b083      	sub	sp, #12
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
 800e76c:	460b      	mov	r3, r1
 800e76e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800e770:	78fb      	ldrb	r3, [r7, #3]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d102      	bne.n	800e77c <USB_SetDevAddress+0x18>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	2280      	movs	r2, #128	@ 0x80
 800e77a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800e77c:	2300      	movs	r3, #0
}
 800e77e:	4618      	mov	r0, r3
 800e780:	370c      	adds	r7, #12
 800e782:	46bd      	mov	sp, r7
 800e784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e788:	4770      	bx	lr

0800e78a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 800e78a:	b480      	push	{r7}
 800e78c:	b083      	sub	sp, #12
 800e78e:	af00      	add	r7, sp, #0
 800e790:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e796:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800e79e:	2300      	movs	r3, #0
}
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	370c      	adds	r7, #12
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7aa:	4770      	bx	lr

0800e7ac <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 800e7ac:	b480      	push	{r7}
 800e7ae:	b083      	sub	sp, #12
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e7b8:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800e7c0:	2300      	movs	r3, #0
}
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	370c      	adds	r7, #12
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7cc:	4770      	bx	lr

0800e7ce <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 800e7ce:	b480      	push	{r7}
 800e7d0:	b085      	sub	sp, #20
 800e7d2:	af00      	add	r7, sp, #0
 800e7d4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e7da:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800e7dc:	68fb      	ldr	r3, [r7, #12]
}
 800e7de:	4618      	mov	r0, r3
 800e7e0:	3714      	adds	r7, #20
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e8:	4770      	bx	lr

0800e7ea <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e7ea:	b480      	push	{r7}
 800e7ec:	b08b      	sub	sp, #44	@ 0x2c
 800e7ee:	af00      	add	r7, sp, #0
 800e7f0:	60f8      	str	r0, [r7, #12]
 800e7f2:	60b9      	str	r1, [r7, #8]
 800e7f4:	4611      	mov	r1, r2
 800e7f6:	461a      	mov	r2, r3
 800e7f8:	460b      	mov	r3, r1
 800e7fa:	80fb      	strh	r3, [r7, #6]
 800e7fc:	4613      	mov	r3, r2
 800e7fe:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800e800:	88bb      	ldrh	r3, [r7, #4]
 800e802:	3303      	adds	r3, #3
 800e804:	089b      	lsrs	r3, r3, #2
 800e806:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800e808:	88bb      	ldrh	r3, [r7, #4]
 800e80a:	f003 0303 	and.w	r3, r3, #3
 800e80e:	82fb      	strh	r3, [r7, #22]
  uint8_t *pBuf = pbUsrBuf;
 800e810:	68bb      	ldr	r3, [r7, #8]
 800e812:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 800e814:	8afb      	ldrh	r3, [r7, #22]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d002      	beq.n	800e820 <USB_WritePMA+0x36>
  {
    NbWords--;
 800e81a:	69bb      	ldr	r3, [r7, #24]
 800e81c:	3b01      	subs	r3, #1
 800e81e:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800e820:	88fb      	ldrh	r3, [r7, #6]
 800e822:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e826:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e82a:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 800e82c:	69bb      	ldr	r3, [r7, #24]
 800e82e:	623b      	str	r3, [r7, #32]
 800e830:	e015      	b.n	800e85e <USB_WritePMA+0x74>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 800e832:	693b      	ldr	r3, [r7, #16]
 800e834:	681a      	ldr	r2, [r3, #0]
 800e836:	69fb      	ldr	r3, [r7, #28]
 800e838:	601a      	str	r2, [r3, #0]
    pdwVal++;
 800e83a:	69fb      	ldr	r3, [r7, #28]
 800e83c:	3304      	adds	r3, #4
 800e83e:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 800e840:	693b      	ldr	r3, [r7, #16]
 800e842:	3301      	adds	r3, #1
 800e844:	613b      	str	r3, [r7, #16]
    pBuf++;
 800e846:	693b      	ldr	r3, [r7, #16]
 800e848:	3301      	adds	r3, #1
 800e84a:	613b      	str	r3, [r7, #16]
    pBuf++;
 800e84c:	693b      	ldr	r3, [r7, #16]
 800e84e:	3301      	adds	r3, #1
 800e850:	613b      	str	r3, [r7, #16]
    pBuf++;
 800e852:	693b      	ldr	r3, [r7, #16]
 800e854:	3301      	adds	r3, #1
 800e856:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 800e858:	6a3b      	ldr	r3, [r7, #32]
 800e85a:	3b01      	subs	r3, #1
 800e85c:	623b      	str	r3, [r7, #32]
 800e85e:	6a3b      	ldr	r3, [r7, #32]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d1e6      	bne.n	800e832 <USB_WritePMA+0x48>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 800e864:	8afb      	ldrh	r3, [r7, #22]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d01a      	beq.n	800e8a0 <USB_WritePMA+0xb6>
  {
    WrVal = 0U;
 800e86a:	2300      	movs	r3, #0
 800e86c:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800e86e:	693b      	ldr	r3, [r7, #16]
 800e870:	781b      	ldrb	r3, [r3, #0]
 800e872:	461a      	mov	r2, r3
 800e874:	6a3b      	ldr	r3, [r7, #32]
 800e876:	00db      	lsls	r3, r3, #3
 800e878:	fa02 f303 	lsl.w	r3, r2, r3
 800e87c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e87e:	4313      	orrs	r3, r2
 800e880:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 800e882:	6a3b      	ldr	r3, [r7, #32]
 800e884:	3301      	adds	r3, #1
 800e886:	623b      	str	r3, [r7, #32]
      pBuf++;
 800e888:	693b      	ldr	r3, [r7, #16]
 800e88a:	3301      	adds	r3, #1
 800e88c:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 800e88e:	8afb      	ldrh	r3, [r7, #22]
 800e890:	3b01      	subs	r3, #1
 800e892:	82fb      	strh	r3, [r7, #22]
    } while (remaining_bytes != 0U);
 800e894:	8afb      	ldrh	r3, [r7, #22]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d1e9      	bne.n	800e86e <USB_WritePMA+0x84>

    *pdwVal = WrVal;
 800e89a:	69fb      	ldr	r3, [r7, #28]
 800e89c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e89e:	601a      	str	r2, [r3, #0]
  }
}
 800e8a0:	bf00      	nop
 800e8a2:	372c      	adds	r7, #44	@ 0x2c
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8aa:	4770      	bx	lr

0800e8ac <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e8ac:	b480      	push	{r7}
 800e8ae:	b08b      	sub	sp, #44	@ 0x2c
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	60f8      	str	r0, [r7, #12]
 800e8b4:	60b9      	str	r1, [r7, #8]
 800e8b6:	4611      	mov	r1, r2
 800e8b8:	461a      	mov	r2, r3
 800e8ba:	460b      	mov	r3, r1
 800e8bc:	80fb      	strh	r3, [r7, #6]
 800e8be:	4613      	mov	r3, r2
 800e8c0:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800e8c2:	88bb      	ldrh	r3, [r7, #4]
 800e8c4:	3303      	adds	r3, #3
 800e8c6:	089b      	lsrs	r3, r3, #2
 800e8c8:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800e8ca:	88bb      	ldrh	r3, [r7, #4]
 800e8cc:	f003 0303 	and.w	r3, r3, #3
 800e8d0:	837b      	strh	r3, [r7, #26]
  uint8_t *pBuf = pbUsrBuf;
 800e8d2:	68bb      	ldr	r3, [r7, #8]
 800e8d4:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800e8d6:	88fb      	ldrh	r3, [r7, #6]
 800e8d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e8dc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e8e0:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 800e8e2:	8b7b      	ldrh	r3, [r7, #26]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d002      	beq.n	800e8ee <USB_ReadPMA+0x42>
  {
    NbWords--;
 800e8e8:	69fb      	ldr	r3, [r7, #28]
 800e8ea:	3b01      	subs	r3, #1
 800e8ec:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 800e8ee:	69fb      	ldr	r3, [r7, #28]
 800e8f0:	627b      	str	r3, [r7, #36]	@ 0x24
 800e8f2:	e015      	b.n	800e920 <USB_ReadPMA+0x74>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 800e8f4:	6a3b      	ldr	r3, [r7, #32]
 800e8f6:	681a      	ldr	r2, [r3, #0]
 800e8f8:	697b      	ldr	r3, [r7, #20]
 800e8fa:	601a      	str	r2, [r3, #0]

    pdwVal++;
 800e8fc:	6a3b      	ldr	r3, [r7, #32]
 800e8fe:	3304      	adds	r3, #4
 800e900:	623b      	str	r3, [r7, #32]
    pBuf++;
 800e902:	697b      	ldr	r3, [r7, #20]
 800e904:	3301      	adds	r3, #1
 800e906:	617b      	str	r3, [r7, #20]
    pBuf++;
 800e908:	697b      	ldr	r3, [r7, #20]
 800e90a:	3301      	adds	r3, #1
 800e90c:	617b      	str	r3, [r7, #20]
    pBuf++;
 800e90e:	697b      	ldr	r3, [r7, #20]
 800e910:	3301      	adds	r3, #1
 800e912:	617b      	str	r3, [r7, #20]
    pBuf++;
 800e914:	697b      	ldr	r3, [r7, #20]
 800e916:	3301      	adds	r3, #1
 800e918:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 800e91a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e91c:	3b01      	subs	r3, #1
 800e91e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e922:	2b00      	cmp	r3, #0
 800e924:	d1e6      	bne.n	800e8f4 <USB_ReadPMA+0x48>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 800e926:	8b7b      	ldrh	r3, [r7, #26]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d017      	beq.n	800e95c <USB_ReadPMA+0xb0>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 800e92c:	6a3b      	ldr	r3, [r7, #32]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 800e932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e934:	b2db      	uxtb	r3, r3
 800e936:	00db      	lsls	r3, r3, #3
 800e938:	693a      	ldr	r2, [r7, #16]
 800e93a:	fa22 f303 	lsr.w	r3, r2, r3
 800e93e:	b2da      	uxtb	r2, r3
 800e940:	697b      	ldr	r3, [r7, #20]
 800e942:	701a      	strb	r2, [r3, #0]
      count++;
 800e944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e946:	3301      	adds	r3, #1
 800e948:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 800e94a:	697b      	ldr	r3, [r7, #20]
 800e94c:	3301      	adds	r3, #1
 800e94e:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 800e950:	8b7b      	ldrh	r3, [r7, #26]
 800e952:	3b01      	subs	r3, #1
 800e954:	837b      	strh	r3, [r7, #26]
    } while (remaining_bytes != 0U);
 800e956:	8b7b      	ldrh	r3, [r7, #26]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d1ea      	bne.n	800e932 <USB_ReadPMA+0x86>
  }
}
 800e95c:	bf00      	nop
 800e95e:	372c      	adds	r7, #44	@ 0x2c
 800e960:	46bd      	mov	sp, r7
 800e962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e966:	4770      	bx	lr

0800e968 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b084      	sub	sp, #16
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
 800e970:	460b      	mov	r3, r1
 800e972:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e974:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800e978:	f001 f8fa 	bl	800fb70 <USBD_static_malloc>
 800e97c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d109      	bne.n	800e998 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	32b0      	adds	r2, #176	@ 0xb0
 800e98e:	2100      	movs	r1, #0
 800e990:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800e994:	2302      	movs	r3, #2
 800e996:	e0d4      	b.n	800eb42 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800e998:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800e99c:	2100      	movs	r1, #0
 800e99e:	68f8      	ldr	r0, [r7, #12]
 800e9a0:	f002 fe0c 	bl	80115bc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	32b0      	adds	r2, #176	@ 0xb0
 800e9ae:	68f9      	ldr	r1, [r7, #12]
 800e9b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	32b0      	adds	r2, #176	@ 0xb0
 800e9be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	7c1b      	ldrb	r3, [r3, #16]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d138      	bne.n	800ea42 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e9d0:	4b5e      	ldr	r3, [pc, #376]	@ (800eb4c <USBD_CDC_Init+0x1e4>)
 800e9d2:	7819      	ldrb	r1, [r3, #0]
 800e9d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e9d8:	2202      	movs	r2, #2
 800e9da:	6878      	ldr	r0, [r7, #4]
 800e9dc:	f000 ffcf 	bl	800f97e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e9e0:	4b5a      	ldr	r3, [pc, #360]	@ (800eb4c <USBD_CDC_Init+0x1e4>)
 800e9e2:	781b      	ldrb	r3, [r3, #0]
 800e9e4:	f003 020f 	and.w	r2, r3, #15
 800e9e8:	6879      	ldr	r1, [r7, #4]
 800e9ea:	4613      	mov	r3, r2
 800e9ec:	009b      	lsls	r3, r3, #2
 800e9ee:	4413      	add	r3, r2
 800e9f0:	009b      	lsls	r3, r3, #2
 800e9f2:	440b      	add	r3, r1
 800e9f4:	3324      	adds	r3, #36	@ 0x24
 800e9f6:	2201      	movs	r2, #1
 800e9f8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e9fa:	4b55      	ldr	r3, [pc, #340]	@ (800eb50 <USBD_CDC_Init+0x1e8>)
 800e9fc:	7819      	ldrb	r1, [r3, #0]
 800e9fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ea02:	2202      	movs	r2, #2
 800ea04:	6878      	ldr	r0, [r7, #4]
 800ea06:	f000 ffba 	bl	800f97e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ea0a:	4b51      	ldr	r3, [pc, #324]	@ (800eb50 <USBD_CDC_Init+0x1e8>)
 800ea0c:	781b      	ldrb	r3, [r3, #0]
 800ea0e:	f003 020f 	and.w	r2, r3, #15
 800ea12:	6879      	ldr	r1, [r7, #4]
 800ea14:	4613      	mov	r3, r2
 800ea16:	009b      	lsls	r3, r3, #2
 800ea18:	4413      	add	r3, r2
 800ea1a:	009b      	lsls	r3, r3, #2
 800ea1c:	440b      	add	r3, r1
 800ea1e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ea22:	2201      	movs	r2, #1
 800ea24:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ea26:	4b4b      	ldr	r3, [pc, #300]	@ (800eb54 <USBD_CDC_Init+0x1ec>)
 800ea28:	781b      	ldrb	r3, [r3, #0]
 800ea2a:	f003 020f 	and.w	r2, r3, #15
 800ea2e:	6879      	ldr	r1, [r7, #4]
 800ea30:	4613      	mov	r3, r2
 800ea32:	009b      	lsls	r3, r3, #2
 800ea34:	4413      	add	r3, r2
 800ea36:	009b      	lsls	r3, r3, #2
 800ea38:	440b      	add	r3, r1
 800ea3a:	3326      	adds	r3, #38	@ 0x26
 800ea3c:	2210      	movs	r2, #16
 800ea3e:	801a      	strh	r2, [r3, #0]
 800ea40:	e035      	b.n	800eaae <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ea42:	4b42      	ldr	r3, [pc, #264]	@ (800eb4c <USBD_CDC_Init+0x1e4>)
 800ea44:	7819      	ldrb	r1, [r3, #0]
 800ea46:	2340      	movs	r3, #64	@ 0x40
 800ea48:	2202      	movs	r2, #2
 800ea4a:	6878      	ldr	r0, [r7, #4]
 800ea4c:	f000 ff97 	bl	800f97e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ea50:	4b3e      	ldr	r3, [pc, #248]	@ (800eb4c <USBD_CDC_Init+0x1e4>)
 800ea52:	781b      	ldrb	r3, [r3, #0]
 800ea54:	f003 020f 	and.w	r2, r3, #15
 800ea58:	6879      	ldr	r1, [r7, #4]
 800ea5a:	4613      	mov	r3, r2
 800ea5c:	009b      	lsls	r3, r3, #2
 800ea5e:	4413      	add	r3, r2
 800ea60:	009b      	lsls	r3, r3, #2
 800ea62:	440b      	add	r3, r1
 800ea64:	3324      	adds	r3, #36	@ 0x24
 800ea66:	2201      	movs	r2, #1
 800ea68:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ea6a:	4b39      	ldr	r3, [pc, #228]	@ (800eb50 <USBD_CDC_Init+0x1e8>)
 800ea6c:	7819      	ldrb	r1, [r3, #0]
 800ea6e:	2340      	movs	r3, #64	@ 0x40
 800ea70:	2202      	movs	r2, #2
 800ea72:	6878      	ldr	r0, [r7, #4]
 800ea74:	f000 ff83 	bl	800f97e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ea78:	4b35      	ldr	r3, [pc, #212]	@ (800eb50 <USBD_CDC_Init+0x1e8>)
 800ea7a:	781b      	ldrb	r3, [r3, #0]
 800ea7c:	f003 020f 	and.w	r2, r3, #15
 800ea80:	6879      	ldr	r1, [r7, #4]
 800ea82:	4613      	mov	r3, r2
 800ea84:	009b      	lsls	r3, r3, #2
 800ea86:	4413      	add	r3, r2
 800ea88:	009b      	lsls	r3, r3, #2
 800ea8a:	440b      	add	r3, r1
 800ea8c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ea90:	2201      	movs	r2, #1
 800ea92:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ea94:	4b2f      	ldr	r3, [pc, #188]	@ (800eb54 <USBD_CDC_Init+0x1ec>)
 800ea96:	781b      	ldrb	r3, [r3, #0]
 800ea98:	f003 020f 	and.w	r2, r3, #15
 800ea9c:	6879      	ldr	r1, [r7, #4]
 800ea9e:	4613      	mov	r3, r2
 800eaa0:	009b      	lsls	r3, r3, #2
 800eaa2:	4413      	add	r3, r2
 800eaa4:	009b      	lsls	r3, r3, #2
 800eaa6:	440b      	add	r3, r1
 800eaa8:	3326      	adds	r3, #38	@ 0x26
 800eaaa:	2210      	movs	r2, #16
 800eaac:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800eaae:	4b29      	ldr	r3, [pc, #164]	@ (800eb54 <USBD_CDC_Init+0x1ec>)
 800eab0:	7819      	ldrb	r1, [r3, #0]
 800eab2:	2308      	movs	r3, #8
 800eab4:	2203      	movs	r2, #3
 800eab6:	6878      	ldr	r0, [r7, #4]
 800eab8:	f000 ff61 	bl	800f97e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800eabc:	4b25      	ldr	r3, [pc, #148]	@ (800eb54 <USBD_CDC_Init+0x1ec>)
 800eabe:	781b      	ldrb	r3, [r3, #0]
 800eac0:	f003 020f 	and.w	r2, r3, #15
 800eac4:	6879      	ldr	r1, [r7, #4]
 800eac6:	4613      	mov	r3, r2
 800eac8:	009b      	lsls	r3, r3, #2
 800eaca:	4413      	add	r3, r2
 800eacc:	009b      	lsls	r3, r3, #2
 800eace:	440b      	add	r3, r1
 800ead0:	3324      	adds	r3, #36	@ 0x24
 800ead2:	2201      	movs	r2, #1
 800ead4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	2200      	movs	r2, #0
 800eada:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800eae4:	687a      	ldr	r2, [r7, #4]
 800eae6:	33b0      	adds	r3, #176	@ 0xb0
 800eae8:	009b      	lsls	r3, r3, #2
 800eaea:	4413      	add	r3, r2
 800eaec:	685b      	ldr	r3, [r3, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	2200      	movs	r2, #0
 800eafe:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d101      	bne.n	800eb10 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800eb0c:	2302      	movs	r3, #2
 800eb0e:	e018      	b.n	800eb42 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	7c1b      	ldrb	r3, [r3, #16]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d10a      	bne.n	800eb2e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800eb18:	4b0d      	ldr	r3, [pc, #52]	@ (800eb50 <USBD_CDC_Init+0x1e8>)
 800eb1a:	7819      	ldrb	r1, [r3, #0]
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800eb22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800eb26:	6878      	ldr	r0, [r7, #4]
 800eb28:	f000 fff4 	bl	800fb14 <USBD_LL_PrepareReceive>
 800eb2c:	e008      	b.n	800eb40 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800eb2e:	4b08      	ldr	r3, [pc, #32]	@ (800eb50 <USBD_CDC_Init+0x1e8>)
 800eb30:	7819      	ldrb	r1, [r3, #0]
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800eb38:	2340      	movs	r3, #64	@ 0x40
 800eb3a:	6878      	ldr	r0, [r7, #4]
 800eb3c:	f000 ffea 	bl	800fb14 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800eb40:	2300      	movs	r3, #0
}
 800eb42:	4618      	mov	r0, r3
 800eb44:	3710      	adds	r7, #16
 800eb46:	46bd      	mov	sp, r7
 800eb48:	bd80      	pop	{r7, pc}
 800eb4a:	bf00      	nop
 800eb4c:	200000b3 	.word	0x200000b3
 800eb50:	200000b4 	.word	0x200000b4
 800eb54:	200000b5 	.word	0x200000b5

0800eb58 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b082      	sub	sp, #8
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
 800eb60:	460b      	mov	r3, r1
 800eb62:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800eb64:	4b3a      	ldr	r3, [pc, #232]	@ (800ec50 <USBD_CDC_DeInit+0xf8>)
 800eb66:	781b      	ldrb	r3, [r3, #0]
 800eb68:	4619      	mov	r1, r3
 800eb6a:	6878      	ldr	r0, [r7, #4]
 800eb6c:	f000 ff27 	bl	800f9be <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800eb70:	4b37      	ldr	r3, [pc, #220]	@ (800ec50 <USBD_CDC_DeInit+0xf8>)
 800eb72:	781b      	ldrb	r3, [r3, #0]
 800eb74:	f003 020f 	and.w	r2, r3, #15
 800eb78:	6879      	ldr	r1, [r7, #4]
 800eb7a:	4613      	mov	r3, r2
 800eb7c:	009b      	lsls	r3, r3, #2
 800eb7e:	4413      	add	r3, r2
 800eb80:	009b      	lsls	r3, r3, #2
 800eb82:	440b      	add	r3, r1
 800eb84:	3324      	adds	r3, #36	@ 0x24
 800eb86:	2200      	movs	r2, #0
 800eb88:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800eb8a:	4b32      	ldr	r3, [pc, #200]	@ (800ec54 <USBD_CDC_DeInit+0xfc>)
 800eb8c:	781b      	ldrb	r3, [r3, #0]
 800eb8e:	4619      	mov	r1, r3
 800eb90:	6878      	ldr	r0, [r7, #4]
 800eb92:	f000 ff14 	bl	800f9be <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800eb96:	4b2f      	ldr	r3, [pc, #188]	@ (800ec54 <USBD_CDC_DeInit+0xfc>)
 800eb98:	781b      	ldrb	r3, [r3, #0]
 800eb9a:	f003 020f 	and.w	r2, r3, #15
 800eb9e:	6879      	ldr	r1, [r7, #4]
 800eba0:	4613      	mov	r3, r2
 800eba2:	009b      	lsls	r3, r3, #2
 800eba4:	4413      	add	r3, r2
 800eba6:	009b      	lsls	r3, r3, #2
 800eba8:	440b      	add	r3, r1
 800ebaa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ebae:	2200      	movs	r2, #0
 800ebb0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ebb2:	4b29      	ldr	r3, [pc, #164]	@ (800ec58 <USBD_CDC_DeInit+0x100>)
 800ebb4:	781b      	ldrb	r3, [r3, #0]
 800ebb6:	4619      	mov	r1, r3
 800ebb8:	6878      	ldr	r0, [r7, #4]
 800ebba:	f000 ff00 	bl	800f9be <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ebbe:	4b26      	ldr	r3, [pc, #152]	@ (800ec58 <USBD_CDC_DeInit+0x100>)
 800ebc0:	781b      	ldrb	r3, [r3, #0]
 800ebc2:	f003 020f 	and.w	r2, r3, #15
 800ebc6:	6879      	ldr	r1, [r7, #4]
 800ebc8:	4613      	mov	r3, r2
 800ebca:	009b      	lsls	r3, r3, #2
 800ebcc:	4413      	add	r3, r2
 800ebce:	009b      	lsls	r3, r3, #2
 800ebd0:	440b      	add	r3, r1
 800ebd2:	3324      	adds	r3, #36	@ 0x24
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ebd8:	4b1f      	ldr	r3, [pc, #124]	@ (800ec58 <USBD_CDC_DeInit+0x100>)
 800ebda:	781b      	ldrb	r3, [r3, #0]
 800ebdc:	f003 020f 	and.w	r2, r3, #15
 800ebe0:	6879      	ldr	r1, [r7, #4]
 800ebe2:	4613      	mov	r3, r2
 800ebe4:	009b      	lsls	r3, r3, #2
 800ebe6:	4413      	add	r3, r2
 800ebe8:	009b      	lsls	r3, r3, #2
 800ebea:	440b      	add	r3, r1
 800ebec:	3326      	adds	r3, #38	@ 0x26
 800ebee:	2200      	movs	r2, #0
 800ebf0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	32b0      	adds	r2, #176	@ 0xb0
 800ebfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d01f      	beq.n	800ec44 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ec0a:	687a      	ldr	r2, [r7, #4]
 800ec0c:	33b0      	adds	r3, #176	@ 0xb0
 800ec0e:	009b      	lsls	r3, r3, #2
 800ec10:	4413      	add	r3, r2
 800ec12:	685b      	ldr	r3, [r3, #4]
 800ec14:	685b      	ldr	r3, [r3, #4]
 800ec16:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	32b0      	adds	r2, #176	@ 0xb0
 800ec22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec26:	4618      	mov	r0, r3
 800ec28:	f000 ffb0 	bl	800fb8c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	32b0      	adds	r2, #176	@ 0xb0
 800ec36:	2100      	movs	r1, #0
 800ec38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	2200      	movs	r2, #0
 800ec40:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ec44:	2300      	movs	r3, #0
}
 800ec46:	4618      	mov	r0, r3
 800ec48:	3708      	adds	r7, #8
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bd80      	pop	{r7, pc}
 800ec4e:	bf00      	nop
 800ec50:	200000b3 	.word	0x200000b3
 800ec54:	200000b4 	.word	0x200000b4
 800ec58:	200000b5 	.word	0x200000b5

0800ec5c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b086      	sub	sp, #24
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	6078      	str	r0, [r7, #4]
 800ec64:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	32b0      	adds	r2, #176	@ 0xb0
 800ec70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec74:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ec76:	2300      	movs	r3, #0
 800ec78:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ec7e:	2300      	movs	r3, #0
 800ec80:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ec82:	693b      	ldr	r3, [r7, #16]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d101      	bne.n	800ec8c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ec88:	2303      	movs	r3, #3
 800ec8a:	e0bf      	b.n	800ee0c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ec8c:	683b      	ldr	r3, [r7, #0]
 800ec8e:	781b      	ldrb	r3, [r3, #0]
 800ec90:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d050      	beq.n	800ed3a <USBD_CDC_Setup+0xde>
 800ec98:	2b20      	cmp	r3, #32
 800ec9a:	f040 80af 	bne.w	800edfc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ec9e:	683b      	ldr	r3, [r7, #0]
 800eca0:	88db      	ldrh	r3, [r3, #6]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d03a      	beq.n	800ed1c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800eca6:	683b      	ldr	r3, [r7, #0]
 800eca8:	781b      	ldrb	r3, [r3, #0]
 800ecaa:	b25b      	sxtb	r3, r3
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	da1b      	bge.n	800ece8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ecb6:	687a      	ldr	r2, [r7, #4]
 800ecb8:	33b0      	adds	r3, #176	@ 0xb0
 800ecba:	009b      	lsls	r3, r3, #2
 800ecbc:	4413      	add	r3, r2
 800ecbe:	685b      	ldr	r3, [r3, #4]
 800ecc0:	689b      	ldr	r3, [r3, #8]
 800ecc2:	683a      	ldr	r2, [r7, #0]
 800ecc4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ecc6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ecc8:	683a      	ldr	r2, [r7, #0]
 800ecca:	88d2      	ldrh	r2, [r2, #6]
 800eccc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ecce:	683b      	ldr	r3, [r7, #0]
 800ecd0:	88db      	ldrh	r3, [r3, #6]
 800ecd2:	2b07      	cmp	r3, #7
 800ecd4:	bf28      	it	cs
 800ecd6:	2307      	movcs	r3, #7
 800ecd8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ecda:	693b      	ldr	r3, [r7, #16]
 800ecdc:	89fa      	ldrh	r2, [r7, #14]
 800ecde:	4619      	mov	r1, r3
 800ece0:	6878      	ldr	r0, [r7, #4]
 800ece2:	f002 fa46 	bl	8011172 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ece6:	e090      	b.n	800ee0a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ece8:	683b      	ldr	r3, [r7, #0]
 800ecea:	785a      	ldrb	r2, [r3, #1]
 800ecec:	693b      	ldr	r3, [r7, #16]
 800ecee:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ecf2:	683b      	ldr	r3, [r7, #0]
 800ecf4:	88db      	ldrh	r3, [r3, #6]
 800ecf6:	2b3f      	cmp	r3, #63	@ 0x3f
 800ecf8:	d803      	bhi.n	800ed02 <USBD_CDC_Setup+0xa6>
 800ecfa:	683b      	ldr	r3, [r7, #0]
 800ecfc:	88db      	ldrh	r3, [r3, #6]
 800ecfe:	b2da      	uxtb	r2, r3
 800ed00:	e000      	b.n	800ed04 <USBD_CDC_Setup+0xa8>
 800ed02:	2240      	movs	r2, #64	@ 0x40
 800ed04:	693b      	ldr	r3, [r7, #16]
 800ed06:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ed0a:	6939      	ldr	r1, [r7, #16]
 800ed0c:	693b      	ldr	r3, [r7, #16]
 800ed0e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800ed12:	461a      	mov	r2, r3
 800ed14:	6878      	ldr	r0, [r7, #4]
 800ed16:	f002 fa58 	bl	80111ca <USBD_CtlPrepareRx>
      break;
 800ed1a:	e076      	b.n	800ee0a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ed22:	687a      	ldr	r2, [r7, #4]
 800ed24:	33b0      	adds	r3, #176	@ 0xb0
 800ed26:	009b      	lsls	r3, r3, #2
 800ed28:	4413      	add	r3, r2
 800ed2a:	685b      	ldr	r3, [r3, #4]
 800ed2c:	689b      	ldr	r3, [r3, #8]
 800ed2e:	683a      	ldr	r2, [r7, #0]
 800ed30:	7850      	ldrb	r0, [r2, #1]
 800ed32:	2200      	movs	r2, #0
 800ed34:	6839      	ldr	r1, [r7, #0]
 800ed36:	4798      	blx	r3
      break;
 800ed38:	e067      	b.n	800ee0a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	785b      	ldrb	r3, [r3, #1]
 800ed3e:	2b0b      	cmp	r3, #11
 800ed40:	d851      	bhi.n	800ede6 <USBD_CDC_Setup+0x18a>
 800ed42:	a201      	add	r2, pc, #4	@ (adr r2, 800ed48 <USBD_CDC_Setup+0xec>)
 800ed44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed48:	0800ed79 	.word	0x0800ed79
 800ed4c:	0800edf5 	.word	0x0800edf5
 800ed50:	0800ede7 	.word	0x0800ede7
 800ed54:	0800ede7 	.word	0x0800ede7
 800ed58:	0800ede7 	.word	0x0800ede7
 800ed5c:	0800ede7 	.word	0x0800ede7
 800ed60:	0800ede7 	.word	0x0800ede7
 800ed64:	0800ede7 	.word	0x0800ede7
 800ed68:	0800ede7 	.word	0x0800ede7
 800ed6c:	0800ede7 	.word	0x0800ede7
 800ed70:	0800eda3 	.word	0x0800eda3
 800ed74:	0800edcd 	.word	0x0800edcd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed7e:	b2db      	uxtb	r3, r3
 800ed80:	2b03      	cmp	r3, #3
 800ed82:	d107      	bne.n	800ed94 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ed84:	f107 030a 	add.w	r3, r7, #10
 800ed88:	2202      	movs	r2, #2
 800ed8a:	4619      	mov	r1, r3
 800ed8c:	6878      	ldr	r0, [r7, #4]
 800ed8e:	f002 f9f0 	bl	8011172 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ed92:	e032      	b.n	800edfa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ed94:	6839      	ldr	r1, [r7, #0]
 800ed96:	6878      	ldr	r0, [r7, #4]
 800ed98:	f002 f86d 	bl	8010e76 <USBD_CtlError>
            ret = USBD_FAIL;
 800ed9c:	2303      	movs	r3, #3
 800ed9e:	75fb      	strb	r3, [r7, #23]
          break;
 800eda0:	e02b      	b.n	800edfa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eda8:	b2db      	uxtb	r3, r3
 800edaa:	2b03      	cmp	r3, #3
 800edac:	d107      	bne.n	800edbe <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800edae:	f107 030d 	add.w	r3, r7, #13
 800edb2:	2201      	movs	r2, #1
 800edb4:	4619      	mov	r1, r3
 800edb6:	6878      	ldr	r0, [r7, #4]
 800edb8:	f002 f9db 	bl	8011172 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800edbc:	e01d      	b.n	800edfa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800edbe:	6839      	ldr	r1, [r7, #0]
 800edc0:	6878      	ldr	r0, [r7, #4]
 800edc2:	f002 f858 	bl	8010e76 <USBD_CtlError>
            ret = USBD_FAIL;
 800edc6:	2303      	movs	r3, #3
 800edc8:	75fb      	strb	r3, [r7, #23]
          break;
 800edca:	e016      	b.n	800edfa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800edd2:	b2db      	uxtb	r3, r3
 800edd4:	2b03      	cmp	r3, #3
 800edd6:	d00f      	beq.n	800edf8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800edd8:	6839      	ldr	r1, [r7, #0]
 800edda:	6878      	ldr	r0, [r7, #4]
 800eddc:	f002 f84b 	bl	8010e76 <USBD_CtlError>
            ret = USBD_FAIL;
 800ede0:	2303      	movs	r3, #3
 800ede2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ede4:	e008      	b.n	800edf8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ede6:	6839      	ldr	r1, [r7, #0]
 800ede8:	6878      	ldr	r0, [r7, #4]
 800edea:	f002 f844 	bl	8010e76 <USBD_CtlError>
          ret = USBD_FAIL;
 800edee:	2303      	movs	r3, #3
 800edf0:	75fb      	strb	r3, [r7, #23]
          break;
 800edf2:	e002      	b.n	800edfa <USBD_CDC_Setup+0x19e>
          break;
 800edf4:	bf00      	nop
 800edf6:	e008      	b.n	800ee0a <USBD_CDC_Setup+0x1ae>
          break;
 800edf8:	bf00      	nop
      }
      break;
 800edfa:	e006      	b.n	800ee0a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800edfc:	6839      	ldr	r1, [r7, #0]
 800edfe:	6878      	ldr	r0, [r7, #4]
 800ee00:	f002 f839 	bl	8010e76 <USBD_CtlError>
      ret = USBD_FAIL;
 800ee04:	2303      	movs	r3, #3
 800ee06:	75fb      	strb	r3, [r7, #23]
      break;
 800ee08:	bf00      	nop
  }

  return (uint8_t)ret;
 800ee0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	3718      	adds	r7, #24
 800ee10:	46bd      	mov	sp, r7
 800ee12:	bd80      	pop	{r7, pc}

0800ee14 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ee14:	b580      	push	{r7, lr}
 800ee16:	b084      	sub	sp, #16
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
 800ee1c:	460b      	mov	r3, r1
 800ee1e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ee26:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	32b0      	adds	r2, #176	@ 0xb0
 800ee32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d101      	bne.n	800ee3e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ee3a:	2303      	movs	r3, #3
 800ee3c:	e065      	b.n	800ef0a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	32b0      	adds	r2, #176	@ 0xb0
 800ee48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee4c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ee4e:	78fb      	ldrb	r3, [r7, #3]
 800ee50:	f003 020f 	and.w	r2, r3, #15
 800ee54:	6879      	ldr	r1, [r7, #4]
 800ee56:	4613      	mov	r3, r2
 800ee58:	009b      	lsls	r3, r3, #2
 800ee5a:	4413      	add	r3, r2
 800ee5c:	009b      	lsls	r3, r3, #2
 800ee5e:	440b      	add	r3, r1
 800ee60:	3318      	adds	r3, #24
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d02f      	beq.n	800eec8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ee68:	78fb      	ldrb	r3, [r7, #3]
 800ee6a:	f003 020f 	and.w	r2, r3, #15
 800ee6e:	6879      	ldr	r1, [r7, #4]
 800ee70:	4613      	mov	r3, r2
 800ee72:	009b      	lsls	r3, r3, #2
 800ee74:	4413      	add	r3, r2
 800ee76:	009b      	lsls	r3, r3, #2
 800ee78:	440b      	add	r3, r1
 800ee7a:	3318      	adds	r3, #24
 800ee7c:	681a      	ldr	r2, [r3, #0]
 800ee7e:	78fb      	ldrb	r3, [r7, #3]
 800ee80:	f003 010f 	and.w	r1, r3, #15
 800ee84:	68f8      	ldr	r0, [r7, #12]
 800ee86:	460b      	mov	r3, r1
 800ee88:	009b      	lsls	r3, r3, #2
 800ee8a:	440b      	add	r3, r1
 800ee8c:	00db      	lsls	r3, r3, #3
 800ee8e:	4403      	add	r3, r0
 800ee90:	3324      	adds	r3, #36	@ 0x24
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	fbb2 f1f3 	udiv	r1, r2, r3
 800ee98:	fb01 f303 	mul.w	r3, r1, r3
 800ee9c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d112      	bne.n	800eec8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800eea2:	78fb      	ldrb	r3, [r7, #3]
 800eea4:	f003 020f 	and.w	r2, r3, #15
 800eea8:	6879      	ldr	r1, [r7, #4]
 800eeaa:	4613      	mov	r3, r2
 800eeac:	009b      	lsls	r3, r3, #2
 800eeae:	4413      	add	r3, r2
 800eeb0:	009b      	lsls	r3, r3, #2
 800eeb2:	440b      	add	r3, r1
 800eeb4:	3318      	adds	r3, #24
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800eeba:	78f9      	ldrb	r1, [r7, #3]
 800eebc:	2300      	movs	r3, #0
 800eebe:	2200      	movs	r2, #0
 800eec0:	6878      	ldr	r0, [r7, #4]
 800eec2:	f000 fe0c 	bl	800fade <USBD_LL_Transmit>
 800eec6:	e01f      	b.n	800ef08 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800eec8:	68bb      	ldr	r3, [r7, #8]
 800eeca:	2200      	movs	r2, #0
 800eecc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800eed6:	687a      	ldr	r2, [r7, #4]
 800eed8:	33b0      	adds	r3, #176	@ 0xb0
 800eeda:	009b      	lsls	r3, r3, #2
 800eedc:	4413      	add	r3, r2
 800eede:	685b      	ldr	r3, [r3, #4]
 800eee0:	691b      	ldr	r3, [r3, #16]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d010      	beq.n	800ef08 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800eeec:	687a      	ldr	r2, [r7, #4]
 800eeee:	33b0      	adds	r3, #176	@ 0xb0
 800eef0:	009b      	lsls	r3, r3, #2
 800eef2:	4413      	add	r3, r2
 800eef4:	685b      	ldr	r3, [r3, #4]
 800eef6:	691b      	ldr	r3, [r3, #16]
 800eef8:	68ba      	ldr	r2, [r7, #8]
 800eefa:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800eefe:	68ba      	ldr	r2, [r7, #8]
 800ef00:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800ef04:	78fa      	ldrb	r2, [r7, #3]
 800ef06:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ef08:	2300      	movs	r3, #0
}
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	3710      	adds	r7, #16
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	bd80      	pop	{r7, pc}

0800ef12 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ef12:	b580      	push	{r7, lr}
 800ef14:	b084      	sub	sp, #16
 800ef16:	af00      	add	r7, sp, #0
 800ef18:	6078      	str	r0, [r7, #4]
 800ef1a:	460b      	mov	r3, r1
 800ef1c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	32b0      	adds	r2, #176	@ 0xb0
 800ef28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef2c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	32b0      	adds	r2, #176	@ 0xb0
 800ef38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d101      	bne.n	800ef44 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ef40:	2303      	movs	r3, #3
 800ef42:	e01a      	b.n	800ef7a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ef44:	78fb      	ldrb	r3, [r7, #3]
 800ef46:	4619      	mov	r1, r3
 800ef48:	6878      	ldr	r0, [r7, #4]
 800ef4a:	f000 fdfe 	bl	800fb4a <USBD_LL_GetRxDataSize>
 800ef4e:	4602      	mov	r2, r0
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ef5c:	687a      	ldr	r2, [r7, #4]
 800ef5e:	33b0      	adds	r3, #176	@ 0xb0
 800ef60:	009b      	lsls	r3, r3, #2
 800ef62:	4413      	add	r3, r2
 800ef64:	685b      	ldr	r3, [r3, #4]
 800ef66:	68db      	ldr	r3, [r3, #12]
 800ef68:	68fa      	ldr	r2, [r7, #12]
 800ef6a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800ef6e:	68fa      	ldr	r2, [r7, #12]
 800ef70:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ef74:	4611      	mov	r1, r2
 800ef76:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ef78:	2300      	movs	r3, #0
}
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	3710      	adds	r7, #16
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	bd80      	pop	{r7, pc}

0800ef82 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ef82:	b580      	push	{r7, lr}
 800ef84:	b084      	sub	sp, #16
 800ef86:	af00      	add	r7, sp, #0
 800ef88:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	32b0      	adds	r2, #176	@ 0xb0
 800ef94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef98:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d101      	bne.n	800efa4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800efa0:	2303      	movs	r3, #3
 800efa2:	e024      	b.n	800efee <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800efaa:	687a      	ldr	r2, [r7, #4]
 800efac:	33b0      	adds	r3, #176	@ 0xb0
 800efae:	009b      	lsls	r3, r3, #2
 800efb0:	4413      	add	r3, r2
 800efb2:	685b      	ldr	r3, [r3, #4]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d019      	beq.n	800efec <USBD_CDC_EP0_RxReady+0x6a>
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800efbe:	2bff      	cmp	r3, #255	@ 0xff
 800efc0:	d014      	beq.n	800efec <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800efc8:	687a      	ldr	r2, [r7, #4]
 800efca:	33b0      	adds	r3, #176	@ 0xb0
 800efcc:	009b      	lsls	r3, r3, #2
 800efce:	4413      	add	r3, r2
 800efd0:	685b      	ldr	r3, [r3, #4]
 800efd2:	689b      	ldr	r3, [r3, #8]
 800efd4:	68fa      	ldr	r2, [r7, #12]
 800efd6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800efda:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800efdc:	68fa      	ldr	r2, [r7, #12]
 800efde:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800efe2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	22ff      	movs	r2, #255	@ 0xff
 800efe8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800efec:	2300      	movs	r3, #0
}
 800efee:	4618      	mov	r0, r3
 800eff0:	3710      	adds	r7, #16
 800eff2:	46bd      	mov	sp, r7
 800eff4:	bd80      	pop	{r7, pc}
	...

0800eff8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b086      	sub	sp, #24
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f000:	2182      	movs	r1, #130	@ 0x82
 800f002:	4818      	ldr	r0, [pc, #96]	@ (800f064 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f004:	f001 f901 	bl	801020a <USBD_GetEpDesc>
 800f008:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f00a:	2101      	movs	r1, #1
 800f00c:	4815      	ldr	r0, [pc, #84]	@ (800f064 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f00e:	f001 f8fc 	bl	801020a <USBD_GetEpDesc>
 800f012:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f014:	2181      	movs	r1, #129	@ 0x81
 800f016:	4813      	ldr	r0, [pc, #76]	@ (800f064 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f018:	f001 f8f7 	bl	801020a <USBD_GetEpDesc>
 800f01c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800f01e:	697b      	ldr	r3, [r7, #20]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d002      	beq.n	800f02a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800f024:	697b      	ldr	r3, [r7, #20]
 800f026:	2210      	movs	r2, #16
 800f028:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800f02a:	693b      	ldr	r3, [r7, #16]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d006      	beq.n	800f03e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f030:	693b      	ldr	r3, [r7, #16]
 800f032:	2200      	movs	r2, #0
 800f034:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f038:	711a      	strb	r2, [r3, #4]
 800f03a:	2200      	movs	r2, #0
 800f03c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d006      	beq.n	800f052 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	2200      	movs	r2, #0
 800f048:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f04c:	711a      	strb	r2, [r3, #4]
 800f04e:	2200      	movs	r2, #0
 800f050:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	2243      	movs	r2, #67	@ 0x43
 800f056:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800f058:	4b02      	ldr	r3, [pc, #8]	@ (800f064 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800f05a:	4618      	mov	r0, r3
 800f05c:	3718      	adds	r7, #24
 800f05e:	46bd      	mov	sp, r7
 800f060:	bd80      	pop	{r7, pc}
 800f062:	bf00      	nop
 800f064:	20000070 	.word	0x20000070

0800f068 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b086      	sub	sp, #24
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f070:	2182      	movs	r1, #130	@ 0x82
 800f072:	4818      	ldr	r0, [pc, #96]	@ (800f0d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800f074:	f001 f8c9 	bl	801020a <USBD_GetEpDesc>
 800f078:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f07a:	2101      	movs	r1, #1
 800f07c:	4815      	ldr	r0, [pc, #84]	@ (800f0d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800f07e:	f001 f8c4 	bl	801020a <USBD_GetEpDesc>
 800f082:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f084:	2181      	movs	r1, #129	@ 0x81
 800f086:	4813      	ldr	r0, [pc, #76]	@ (800f0d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800f088:	f001 f8bf 	bl	801020a <USBD_GetEpDesc>
 800f08c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800f08e:	697b      	ldr	r3, [r7, #20]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d002      	beq.n	800f09a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800f094:	697b      	ldr	r3, [r7, #20]
 800f096:	2210      	movs	r2, #16
 800f098:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800f09a:	693b      	ldr	r3, [r7, #16]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d006      	beq.n	800f0ae <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800f0a0:	693b      	ldr	r3, [r7, #16]
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	711a      	strb	r2, [r3, #4]
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	f042 0202 	orr.w	r2, r2, #2
 800f0ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d006      	beq.n	800f0c2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	711a      	strb	r2, [r3, #4]
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	f042 0202 	orr.w	r2, r2, #2
 800f0c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	2243      	movs	r2, #67	@ 0x43
 800f0c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800f0c8:	4b02      	ldr	r3, [pc, #8]	@ (800f0d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	3718      	adds	r7, #24
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	bd80      	pop	{r7, pc}
 800f0d2:	bf00      	nop
 800f0d4:	20000070 	.word	0x20000070

0800f0d8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b086      	sub	sp, #24
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f0e0:	2182      	movs	r1, #130	@ 0x82
 800f0e2:	4818      	ldr	r0, [pc, #96]	@ (800f144 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800f0e4:	f001 f891 	bl	801020a <USBD_GetEpDesc>
 800f0e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f0ea:	2101      	movs	r1, #1
 800f0ec:	4815      	ldr	r0, [pc, #84]	@ (800f144 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800f0ee:	f001 f88c 	bl	801020a <USBD_GetEpDesc>
 800f0f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f0f4:	2181      	movs	r1, #129	@ 0x81
 800f0f6:	4813      	ldr	r0, [pc, #76]	@ (800f144 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800f0f8:	f001 f887 	bl	801020a <USBD_GetEpDesc>
 800f0fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800f0fe:	697b      	ldr	r3, [r7, #20]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d002      	beq.n	800f10a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800f104:	697b      	ldr	r3, [r7, #20]
 800f106:	2210      	movs	r2, #16
 800f108:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800f10a:	693b      	ldr	r3, [r7, #16]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d006      	beq.n	800f11e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f110:	693b      	ldr	r3, [r7, #16]
 800f112:	2200      	movs	r2, #0
 800f114:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f118:	711a      	strb	r2, [r3, #4]
 800f11a:	2200      	movs	r2, #0
 800f11c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d006      	beq.n	800f132 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	2200      	movs	r2, #0
 800f128:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f12c:	711a      	strb	r2, [r3, #4]
 800f12e:	2200      	movs	r2, #0
 800f130:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	2243      	movs	r2, #67	@ 0x43
 800f136:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800f138:	4b02      	ldr	r3, [pc, #8]	@ (800f144 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800f13a:	4618      	mov	r0, r3
 800f13c:	3718      	adds	r7, #24
 800f13e:	46bd      	mov	sp, r7
 800f140:	bd80      	pop	{r7, pc}
 800f142:	bf00      	nop
 800f144:	20000070 	.word	0x20000070

0800f148 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f148:	b480      	push	{r7}
 800f14a:	b083      	sub	sp, #12
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	220a      	movs	r2, #10
 800f154:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800f156:	4b03      	ldr	r3, [pc, #12]	@ (800f164 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f158:	4618      	mov	r0, r3
 800f15a:	370c      	adds	r7, #12
 800f15c:	46bd      	mov	sp, r7
 800f15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f162:	4770      	bx	lr
 800f164:	2000002c 	.word	0x2000002c

0800f168 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800f168:	b480      	push	{r7}
 800f16a:	b083      	sub	sp, #12
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]
 800f170:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800f172:	683b      	ldr	r3, [r7, #0]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d101      	bne.n	800f17c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f178:	2303      	movs	r3, #3
 800f17a:	e009      	b.n	800f190 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f182:	687a      	ldr	r2, [r7, #4]
 800f184:	33b0      	adds	r3, #176	@ 0xb0
 800f186:	009b      	lsls	r3, r3, #2
 800f188:	4413      	add	r3, r2
 800f18a:	683a      	ldr	r2, [r7, #0]
 800f18c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800f18e:	2300      	movs	r3, #0
}
 800f190:	4618      	mov	r0, r3
 800f192:	370c      	adds	r7, #12
 800f194:	46bd      	mov	sp, r7
 800f196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19a:	4770      	bx	lr

0800f19c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800f19c:	b480      	push	{r7}
 800f19e:	b087      	sub	sp, #28
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	60f8      	str	r0, [r7, #12]
 800f1a4:	60b9      	str	r1, [r7, #8]
 800f1a6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	32b0      	adds	r2, #176	@ 0xb0
 800f1b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1b6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800f1b8:	697b      	ldr	r3, [r7, #20]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d101      	bne.n	800f1c2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800f1be:	2303      	movs	r3, #3
 800f1c0:	e008      	b.n	800f1d4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800f1c2:	697b      	ldr	r3, [r7, #20]
 800f1c4:	68ba      	ldr	r2, [r7, #8]
 800f1c6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800f1ca:	697b      	ldr	r3, [r7, #20]
 800f1cc:	687a      	ldr	r2, [r7, #4]
 800f1ce:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800f1d2:	2300      	movs	r3, #0
}
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	371c      	adds	r7, #28
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1de:	4770      	bx	lr

0800f1e0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800f1e0:	b480      	push	{r7}
 800f1e2:	b085      	sub	sp, #20
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]
 800f1e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	32b0      	adds	r2, #176	@ 0xb0
 800f1f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1f8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d101      	bne.n	800f204 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800f200:	2303      	movs	r3, #3
 800f202:	e004      	b.n	800f20e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	683a      	ldr	r2, [r7, #0]
 800f208:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800f20c:	2300      	movs	r3, #0
}
 800f20e:	4618      	mov	r0, r3
 800f210:	3714      	adds	r7, #20
 800f212:	46bd      	mov	sp, r7
 800f214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f218:	4770      	bx	lr
	...

0800f21c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b084      	sub	sp, #16
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	32b0      	adds	r2, #176	@ 0xb0
 800f22e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f232:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800f234:	2301      	movs	r3, #1
 800f236:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800f238:	68bb      	ldr	r3, [r7, #8]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d101      	bne.n	800f242 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800f23e:	2303      	movs	r3, #3
 800f240:	e025      	b.n	800f28e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d11f      	bne.n	800f28c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800f24c:	68bb      	ldr	r3, [r7, #8]
 800f24e:	2201      	movs	r2, #1
 800f250:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800f254:	4b10      	ldr	r3, [pc, #64]	@ (800f298 <USBD_CDC_TransmitPacket+0x7c>)
 800f256:	781b      	ldrb	r3, [r3, #0]
 800f258:	f003 020f 	and.w	r2, r3, #15
 800f25c:	68bb      	ldr	r3, [r7, #8]
 800f25e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800f262:	6878      	ldr	r0, [r7, #4]
 800f264:	4613      	mov	r3, r2
 800f266:	009b      	lsls	r3, r3, #2
 800f268:	4413      	add	r3, r2
 800f26a:	009b      	lsls	r3, r3, #2
 800f26c:	4403      	add	r3, r0
 800f26e:	3318      	adds	r3, #24
 800f270:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800f272:	4b09      	ldr	r3, [pc, #36]	@ (800f298 <USBD_CDC_TransmitPacket+0x7c>)
 800f274:	7819      	ldrb	r1, [r3, #0]
 800f276:	68bb      	ldr	r3, [r7, #8]
 800f278:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800f27c:	68bb      	ldr	r3, [r7, #8]
 800f27e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800f282:	6878      	ldr	r0, [r7, #4]
 800f284:	f000 fc2b 	bl	800fade <USBD_LL_Transmit>

    ret = USBD_OK;
 800f288:	2300      	movs	r3, #0
 800f28a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800f28c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f28e:	4618      	mov	r0, r3
 800f290:	3710      	adds	r7, #16
 800f292:	46bd      	mov	sp, r7
 800f294:	bd80      	pop	{r7, pc}
 800f296:	bf00      	nop
 800f298:	200000b3 	.word	0x200000b3

0800f29c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b084      	sub	sp, #16
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	32b0      	adds	r2, #176	@ 0xb0
 800f2ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2b2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	32b0      	adds	r2, #176	@ 0xb0
 800f2be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d101      	bne.n	800f2ca <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800f2c6:	2303      	movs	r3, #3
 800f2c8:	e018      	b.n	800f2fc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	7c1b      	ldrb	r3, [r3, #16]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d10a      	bne.n	800f2e8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f2d2:	4b0c      	ldr	r3, [pc, #48]	@ (800f304 <USBD_CDC_ReceivePacket+0x68>)
 800f2d4:	7819      	ldrb	r1, [r3, #0]
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f2dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f2e0:	6878      	ldr	r0, [r7, #4]
 800f2e2:	f000 fc17 	bl	800fb14 <USBD_LL_PrepareReceive>
 800f2e6:	e008      	b.n	800f2fa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f2e8:	4b06      	ldr	r3, [pc, #24]	@ (800f304 <USBD_CDC_ReceivePacket+0x68>)
 800f2ea:	7819      	ldrb	r1, [r3, #0]
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f2f2:	2340      	movs	r3, #64	@ 0x40
 800f2f4:	6878      	ldr	r0, [r7, #4]
 800f2f6:	f000 fc0d 	bl	800fb14 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f2fa:	2300      	movs	r3, #0
}
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	3710      	adds	r7, #16
 800f300:	46bd      	mov	sp, r7
 800f302:	bd80      	pop	{r7, pc}
 800f304:	200000b4 	.word	0x200000b4

0800f308 <TEMPLATE_Init>:
  *         Initializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Init(void)
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	af00      	add	r7, sp, #0
      USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f30c:	2200      	movs	r2, #0
 800f30e:	4905      	ldr	r1, [pc, #20]	@ (800f324 <TEMPLATE_Init+0x1c>)
 800f310:	4805      	ldr	r0, [pc, #20]	@ (800f328 <TEMPLATE_Init+0x20>)
 800f312:	f7ff ff43 	bl	800f19c <USBD_CDC_SetTxBuffer>
      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f316:	4905      	ldr	r1, [pc, #20]	@ (800f32c <TEMPLATE_Init+0x24>)
 800f318:	4803      	ldr	r0, [pc, #12]	@ (800f328 <TEMPLATE_Init+0x20>)
 800f31a:	f7ff ff61 	bl	800f1e0 <USBD_CDC_SetRxBuffer>
      return (0);
 800f31e:	2300      	movs	r3, #0
}
 800f320:	4618      	mov	r0, r3
 800f322:	bd80      	pop	{r7, pc}
 800f324:	20000d3c 	.word	0x20000d3c
 800f328:	200007b4 	.word	0x200007b4
 800f32c:	20000b3c 	.word	0x20000b3c

0800f330 <TEMPLATE_DeInit>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_DeInit(void)
{
 800f330:	b480      	push	{r7}
 800f332:	af00      	add	r7, sp, #0
  /*
     Add your deinitialization code here
  */
  return (0);
 800f334:	2300      	movs	r3, #0
}
 800f336:	4618      	mov	r0, r3
 800f338:	46bd      	mov	sp, r7
 800f33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33e:	4770      	bx	lr

0800f340 <USB_Transmit>:

uint8_t USB_Transmit(uint8_t *data, uint32_t len)
{
 800f340:	b580      	push	{r7, lr}
 800f342:	b0a4      	sub	sp, #144	@ 0x90
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]
 800f348:	6039      	str	r1, [r7, #0]
    uint32_t offset = 0;
 800f34a:	2300      	movs	r3, #0
 800f34c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    const uint32_t bytesPerLine = 16;
 800f350:	2310      	movs	r3, #16
 800f352:	67bb      	str	r3, [r7, #120]	@ 0x78

    while (offset < len)
 800f354:	e0a4      	b.n	800f4a0 <USB_Transmit+0x160>
    {
        uint16_t chunk_len = ((len - offset) >= CDC_BLOCK_SIZE) ? CDC_BLOCK_SIZE : (len - offset);
 800f356:	683a      	ldr	r2, [r7, #0]
 800f358:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f35c:	1ad3      	subs	r3, r2, r3
 800f35e:	2b40      	cmp	r3, #64	@ 0x40
 800f360:	bf28      	it	cs
 800f362:	2340      	movcs	r3, #64	@ 0x40
 800f364:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
        tx_complete = 0;
 800f368:	4b53      	ldr	r3, [pc, #332]	@ (800f4b8 <USB_Transmit+0x178>)
 800f36a:	2200      	movs	r2, #0
 800f36c:	701a      	strb	r2, [r3, #0]
        USBD_CDC_SetTxBuffer(&hUsbDeviceFS, &data[offset], chunk_len);
 800f36e:	687a      	ldr	r2, [r7, #4]
 800f370:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f374:	4413      	add	r3, r2
 800f376:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800f37a:	4619      	mov	r1, r3
 800f37c:	484f      	ldr	r0, [pc, #316]	@ (800f4bc <USB_Transmit+0x17c>)
 800f37e:	f7ff ff0d 	bl	800f19c <USBD_CDC_SetTxBuffer>

        // Log in 32-byte lines
        uint32_t printed = 0;
 800f382:	2300      	movs	r3, #0
 800f384:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        while (printed < chunk_len)
 800f388:	e056      	b.n	800f438 <USB_Transmit+0xf8>
        {
            uint32_t lineLen = ((chunk_len - printed) > bytesPerLine) ? bytesPerLine : (chunk_len - printed);
 800f38a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800f38e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f392:	1ad3      	subs	r3, r2, r3
 800f394:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800f396:	4293      	cmp	r3, r2
 800f398:	bf28      	it	cs
 800f39a:	4613      	movcs	r3, r2
 800f39c:	673b      	str	r3, [r7, #112]	@ 0x70
            char log_line[BYTES_PER_LINE * 3 + 1] = {0};
 800f39e:	2300      	movs	r3, #0
 800f3a0:	60bb      	str	r3, [r7, #8]
 800f3a2:	f107 030c 	add.w	r3, r7, #12
 800f3a6:	225d      	movs	r2, #93	@ 0x5d
 800f3a8:	2100      	movs	r1, #0
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	f002 f906 	bl	80115bc <memset>
            char *ptr = log_line;
 800f3b0:	f107 0308 	add.w	r3, r7, #8
 800f3b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

            for (uint32_t i = 0; i < lineLen; i++)
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f3be:	e01c      	b.n	800f3fa <USB_Transmit+0xba>
            {
                ptr += snprintf(ptr, 4, "%02X ", data[offset + printed + i]);
 800f3c0:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800f3c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f3c8:	441a      	add	r2, r3
 800f3ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f3ce:	4413      	add	r3, r2
 800f3d0:	687a      	ldr	r2, [r7, #4]
 800f3d2:	4413      	add	r3, r2
 800f3d4:	781b      	ldrb	r3, [r3, #0]
 800f3d6:	4a3a      	ldr	r2, [pc, #232]	@ (800f4c0 <USB_Transmit+0x180>)
 800f3d8:	2104      	movs	r1, #4
 800f3da:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 800f3de:	f002 f81d 	bl	801141c <sniprintf>
 800f3e2:	4603      	mov	r3, r0
 800f3e4:	461a      	mov	r2, r3
 800f3e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f3ea:	4413      	add	r3, r2
 800f3ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            for (uint32_t i = 0; i < lineLen; i++)
 800f3f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f3f4:	3301      	adds	r3, #1
 800f3f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f3fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f3fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f400:	429a      	cmp	r2, r3
 800f402:	d3dd      	bcc.n	800f3c0 <USB_Transmit+0x80>
            }

            if (printed == 0)
 800f404:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d108      	bne.n	800f41e <USB_Transmit+0xde>
            {
                log_info("USB Tx [%d bytes]: %s", chunk_len, log_line);
 800f40c:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 800f410:	f107 0208 	add.w	r2, r7, #8
 800f414:	4619      	mov	r1, r3
 800f416:	482b      	ldr	r0, [pc, #172]	@ (800f4c4 <USB_Transmit+0x184>)
 800f418:	f7f1 ffc2 	bl	80013a0 <log_info>
 800f41c:	e006      	b.n	800f42c <USB_Transmit+0xec>
            }
            else
            {
                log_info("%19s%s", "", log_line);
 800f41e:	f107 0308 	add.w	r3, r7, #8
 800f422:	461a      	mov	r2, r3
 800f424:	4928      	ldr	r1, [pc, #160]	@ (800f4c8 <USB_Transmit+0x188>)
 800f426:	4829      	ldr	r0, [pc, #164]	@ (800f4cc <USB_Transmit+0x18c>)
 800f428:	f7f1 ffba 	bl	80013a0 <log_info>
            }

            printed += lineLen;
 800f42c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800f430:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f432:	4413      	add	r3, r2
 800f434:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        while (printed < chunk_len)
 800f438:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 800f43c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800f440:	429a      	cmp	r2, r3
 800f442:	d3a2      	bcc.n	800f38a <USB_Transmit+0x4a>
        }

        if (USBD_CDC_TransmitPacket(&hUsbDeviceFS) != USBD_OK)
 800f444:	481d      	ldr	r0, [pc, #116]	@ (800f4bc <USB_Transmit+0x17c>)
 800f446:	f7ff fee9 	bl	800f21c <USBD_CDC_TransmitPacket>
 800f44a:	4603      	mov	r3, r0
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d001      	beq.n	800f454 <USB_Transmit+0x114>
        {
            return USBD_FAIL;
 800f450:	2303      	movs	r3, #3
 800f452:	e02c      	b.n	800f4ae <USB_Transmit+0x16e>
        }

        uint32_t timeout = 10000;
 800f454:	f242 7310 	movw	r3, #10000	@ 0x2710
 800f458:	67fb      	str	r3, [r7, #124]	@ 0x7c
        while (tx_complete == 0 && timeout--);
 800f45a:	bf00      	nop
 800f45c:	4b16      	ldr	r3, [pc, #88]	@ (800f4b8 <USB_Transmit+0x178>)
 800f45e:	781b      	ldrb	r3, [r3, #0]
 800f460:	b2db      	uxtb	r3, r3
 800f462:	2b00      	cmp	r3, #0
 800f464:	d104      	bne.n	800f470 <USB_Transmit+0x130>
 800f466:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f468:	1e5a      	subs	r2, r3, #1
 800f46a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d1f5      	bne.n	800f45c <USB_Transmit+0x11c>
        if (timeout == 0)
 800f470:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f472:	2b00      	cmp	r3, #0
 800f474:	d104      	bne.n	800f480 <USB_Transmit+0x140>
        {
            log_error("USB TX Timeout");
 800f476:	4816      	ldr	r0, [pc, #88]	@ (800f4d0 <USB_Transmit+0x190>)
 800f478:	f7f1 ffc6 	bl	8001408 <log_error>
            return USBD_FAIL;
 800f47c:	2303      	movs	r3, #3
 800f47e:	e016      	b.n	800f4ae <USB_Transmit+0x16e>
        }

        offset += chunk_len;
 800f480:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 800f484:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800f488:	4413      	add	r3, r2
 800f48a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        for (volatile int i = 0; i < 200; i++);
 800f48e:	2300      	movs	r3, #0
 800f490:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f492:	e002      	b.n	800f49a <USB_Transmit+0x15a>
 800f494:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f496:	3301      	adds	r3, #1
 800f498:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f49a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f49c:	2bc7      	cmp	r3, #199	@ 0xc7
 800f49e:	ddf9      	ble.n	800f494 <USB_Transmit+0x154>
    while (offset < len)
 800f4a0:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800f4a4:	683b      	ldr	r3, [r7, #0]
 800f4a6:	429a      	cmp	r2, r3
 800f4a8:	f4ff af55 	bcc.w	800f356 <USB_Transmit+0x16>
    }

    return USBD_OK;
 800f4ac:	2300      	movs	r3, #0
}
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	3790      	adds	r7, #144	@ 0x90
 800f4b2:	46bd      	mov	sp, r7
 800f4b4:	bd80      	pop	{r7, pc}
 800f4b6:	bf00      	nop
 800f4b8:	200000b6 	.word	0x200000b6
 800f4bc:	200007b4 	.word	0x200007b4
 800f4c0:	08013020 	.word	0x08013020
 800f4c4:	08013028 	.word	0x08013028
 800f4c8:	08013040 	.word	0x08013040
 800f4cc:	08013044 	.word	0x08013044
 800f4d0:	0801304c 	.word	0x0801304c

0800f4d4 <TEMPLATE_Control>:
  * @param  Buf: Buffer containing command data (request parameters)
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Control(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 800f4d4:	b480      	push	{r7}
 800f4d6:	b083      	sub	sp, #12
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	4603      	mov	r3, r0
 800f4dc:	6039      	str	r1, [r7, #0]
 800f4de:	71fb      	strb	r3, [r7, #7]
 800f4e0:	4613      	mov	r3, r2
 800f4e2:	80bb      	strh	r3, [r7, #4]
  UNUSED(length);

  switch (cmd)
 800f4e4:	79fb      	ldrb	r3, [r7, #7]
 800f4e6:	2b23      	cmp	r3, #35	@ 0x23
 800f4e8:	f200 8098 	bhi.w	800f61c <TEMPLATE_Control+0x148>
 800f4ec:	a201      	add	r2, pc, #4	@ (adr r2, 800f4f4 <TEMPLATE_Control+0x20>)
 800f4ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4f2:	bf00      	nop
 800f4f4:	0800f61d 	.word	0x0800f61d
 800f4f8:	0800f61d 	.word	0x0800f61d
 800f4fc:	0800f61d 	.word	0x0800f61d
 800f500:	0800f61d 	.word	0x0800f61d
 800f504:	0800f61d 	.word	0x0800f61d
 800f508:	0800f61d 	.word	0x0800f61d
 800f50c:	0800f61d 	.word	0x0800f61d
 800f510:	0800f61d 	.word	0x0800f61d
 800f514:	0800f61d 	.word	0x0800f61d
 800f518:	0800f61d 	.word	0x0800f61d
 800f51c:	0800f61d 	.word	0x0800f61d
 800f520:	0800f61d 	.word	0x0800f61d
 800f524:	0800f61d 	.word	0x0800f61d
 800f528:	0800f61d 	.word	0x0800f61d
 800f52c:	0800f61d 	.word	0x0800f61d
 800f530:	0800f61d 	.word	0x0800f61d
 800f534:	0800f61d 	.word	0x0800f61d
 800f538:	0800f61d 	.word	0x0800f61d
 800f53c:	0800f61d 	.word	0x0800f61d
 800f540:	0800f61d 	.word	0x0800f61d
 800f544:	0800f61d 	.word	0x0800f61d
 800f548:	0800f61d 	.word	0x0800f61d
 800f54c:	0800f61d 	.word	0x0800f61d
 800f550:	0800f61d 	.word	0x0800f61d
 800f554:	0800f61d 	.word	0x0800f61d
 800f558:	0800f61d 	.word	0x0800f61d
 800f55c:	0800f61d 	.word	0x0800f61d
 800f560:	0800f61d 	.word	0x0800f61d
 800f564:	0800f61d 	.word	0x0800f61d
 800f568:	0800f61d 	.word	0x0800f61d
 800f56c:	0800f61d 	.word	0x0800f61d
 800f570:	0800f61d 	.word	0x0800f61d
 800f574:	0800f585 	.word	0x0800f585
 800f578:	0800f5c9 	.word	0x0800f5c9
 800f57c:	0800f61d 	.word	0x0800f61d
 800f580:	0800f61d 	.word	0x0800f61d
    case CDC_CLEAR_COMM_FEATURE:
      /* Add your code here */
      break;

    case CDC_SET_LINE_CODING:
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800f584:	683b      	ldr	r3, [r7, #0]
 800f586:	781b      	ldrb	r3, [r3, #0]
 800f588:	461a      	mov	r2, r3
 800f58a:	683b      	ldr	r3, [r7, #0]
 800f58c:	3301      	adds	r3, #1
 800f58e:	781b      	ldrb	r3, [r3, #0]
 800f590:	021b      	lsls	r3, r3, #8
 800f592:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800f594:	683b      	ldr	r3, [r7, #0]
 800f596:	3302      	adds	r3, #2
 800f598:	781b      	ldrb	r3, [r3, #0]
 800f59a:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800f59c:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800f59e:	683b      	ldr	r3, [r7, #0]
 800f5a0:	3303      	adds	r3, #3
 800f5a2:	781b      	ldrb	r3, [r3, #0]
 800f5a4:	061b      	lsls	r3, r3, #24
 800f5a6:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800f5a8:	461a      	mov	r2, r3
 800f5aa:	4b20      	ldr	r3, [pc, #128]	@ (800f62c <TEMPLATE_Control+0x158>)
 800f5ac:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	791a      	ldrb	r2, [r3, #4]
 800f5b2:	4b1e      	ldr	r3, [pc, #120]	@ (800f62c <TEMPLATE_Control+0x158>)
 800f5b4:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 800f5b6:	683b      	ldr	r3, [r7, #0]
 800f5b8:	795a      	ldrb	r2, [r3, #5]
 800f5ba:	4b1c      	ldr	r3, [pc, #112]	@ (800f62c <TEMPLATE_Control+0x158>)
 800f5bc:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 800f5be:	683b      	ldr	r3, [r7, #0]
 800f5c0:	799a      	ldrb	r2, [r3, #6]
 800f5c2:	4b1a      	ldr	r3, [pc, #104]	@ (800f62c <TEMPLATE_Control+0x158>)
 800f5c4:	719a      	strb	r2, [r3, #6]

      /* Add your code here */
      break;
 800f5c6:	e02a      	b.n	800f61e <TEMPLATE_Control+0x14a>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 800f5c8:	4b18      	ldr	r3, [pc, #96]	@ (800f62c <TEMPLATE_Control+0x158>)
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	b2da      	uxtb	r2, r3
 800f5ce:	683b      	ldr	r3, [r7, #0]
 800f5d0:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 800f5d2:	4b16      	ldr	r3, [pc, #88]	@ (800f62c <TEMPLATE_Control+0x158>)
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	0a1a      	lsrs	r2, r3, #8
 800f5d8:	683b      	ldr	r3, [r7, #0]
 800f5da:	3301      	adds	r3, #1
 800f5dc:	b2d2      	uxtb	r2, r2
 800f5de:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 800f5e0:	4b12      	ldr	r3, [pc, #72]	@ (800f62c <TEMPLATE_Control+0x158>)
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	0c1a      	lsrs	r2, r3, #16
 800f5e6:	683b      	ldr	r3, [r7, #0]
 800f5e8:	3302      	adds	r3, #2
 800f5ea:	b2d2      	uxtb	r2, r2
 800f5ec:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 800f5ee:	4b0f      	ldr	r3, [pc, #60]	@ (800f62c <TEMPLATE_Control+0x158>)
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	0e1a      	lsrs	r2, r3, #24
 800f5f4:	683b      	ldr	r3, [r7, #0]
 800f5f6:	3303      	adds	r3, #3
 800f5f8:	b2d2      	uxtb	r2, r2
 800f5fa:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 800f5fc:	683b      	ldr	r3, [r7, #0]
 800f5fe:	3304      	adds	r3, #4
 800f600:	4a0a      	ldr	r2, [pc, #40]	@ (800f62c <TEMPLATE_Control+0x158>)
 800f602:	7912      	ldrb	r2, [r2, #4]
 800f604:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 800f606:	683b      	ldr	r3, [r7, #0]
 800f608:	3305      	adds	r3, #5
 800f60a:	4a08      	ldr	r2, [pc, #32]	@ (800f62c <TEMPLATE_Control+0x158>)
 800f60c:	7952      	ldrb	r2, [r2, #5]
 800f60e:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 800f610:	683b      	ldr	r3, [r7, #0]
 800f612:	3306      	adds	r3, #6
 800f614:	4a05      	ldr	r2, [pc, #20]	@ (800f62c <TEMPLATE_Control+0x158>)
 800f616:	7992      	ldrb	r2, [r2, #6]
 800f618:	701a      	strb	r2, [r3, #0]

      /* Add your code here */
      break;
 800f61a:	e000      	b.n	800f61e <TEMPLATE_Control+0x14a>
    case CDC_SEND_BREAK:
      /* Add your code here */
      break;

    default:
      break;
 800f61c:	bf00      	nop
  }

  return (0);
 800f61e:	2300      	movs	r3, #0
}
 800f620:	4618      	mov	r0, r3
 800f622:	370c      	adds	r7, #12
 800f624:	46bd      	mov	sp, r7
 800f626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62a:	4770      	bx	lr
 800f62c:	200000cc 	.word	0x200000cc

0800f630 <TEMPLATE_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Receive(uint8_t *Buf, uint32_t *Len)
{
 800f630:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f634:	b08b      	sub	sp, #44	@ 0x2c
 800f636:	af00      	add	r7, sp, #0
 800f638:	6078      	str	r0, [r7, #4]
 800f63a:	6039      	str	r1, [r7, #0]
 800f63c:	466b      	mov	r3, sp
 800f63e:	461e      	mov	r6, r3
    const uint32_t bytesPerLine = 16;
 800f640:	2310      	movs	r3, #16
 800f642:	61bb      	str	r3, [r7, #24]
    char hexLine[bytesPerLine * 3 + 1]; // 2 hex chars + 1 space per byte
 800f644:	69ba      	ldr	r2, [r7, #24]
 800f646:	4613      	mov	r3, r2
 800f648:	005b      	lsls	r3, r3, #1
 800f64a:	4413      	add	r3, r2
 800f64c:	617b      	str	r3, [r7, #20]
 800f64e:	69ba      	ldr	r2, [r7, #24]
 800f650:	4613      	mov	r3, r2
 800f652:	005b      	lsls	r3, r3, #1
 800f654:	4413      	add	r3, r2
 800f656:	3301      	adds	r3, #1
 800f658:	2200      	movs	r2, #0
 800f65a:	4698      	mov	r8, r3
 800f65c:	4691      	mov	r9, r2
 800f65e:	f04f 0200 	mov.w	r2, #0
 800f662:	f04f 0300 	mov.w	r3, #0
 800f666:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800f66a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800f66e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800f672:	69ba      	ldr	r2, [r7, #24]
 800f674:	4613      	mov	r3, r2
 800f676:	005b      	lsls	r3, r3, #1
 800f678:	4413      	add	r3, r2
 800f67a:	3301      	adds	r3, #1
 800f67c:	2200      	movs	r2, #0
 800f67e:	461c      	mov	r4, r3
 800f680:	4615      	mov	r5, r2
 800f682:	f04f 0200 	mov.w	r2, #0
 800f686:	f04f 0300 	mov.w	r3, #0
 800f68a:	00eb      	lsls	r3, r5, #3
 800f68c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800f690:	00e2      	lsls	r2, r4, #3
 800f692:	69ba      	ldr	r2, [r7, #24]
 800f694:	4613      	mov	r3, r2
 800f696:	005b      	lsls	r3, r3, #1
 800f698:	4413      	add	r3, r2
 800f69a:	3301      	adds	r3, #1
 800f69c:	3307      	adds	r3, #7
 800f69e:	08db      	lsrs	r3, r3, #3
 800f6a0:	00db      	lsls	r3, r3, #3
 800f6a2:	ebad 0d03 	sub.w	sp, sp, r3
 800f6a6:	466b      	mov	r3, sp
 800f6a8:	3300      	adds	r3, #0
 800f6aa:	613b      	str	r3, [r7, #16]
    uint32_t totalLen = *Len;
 800f6ac:	683b      	ldr	r3, [r7, #0]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	60fb      	str	r3, [r7, #12]
    uint32_t printed = 0;
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	627b      	str	r3, [r7, #36]	@ 0x24

    if (*Len > CDC_DATA_FS_MAX_PACKET_SIZE) {
 800f6b6:	683b      	ldr	r3, [r7, #0]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	2b40      	cmp	r3, #64	@ 0x40
 800f6bc:	d944      	bls.n	800f748 <TEMPLATE_Receive+0x118>
        *Len = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f6be:	683b      	ldr	r3, [r7, #0]
 800f6c0:	2240      	movs	r2, #64	@ 0x40
 800f6c2:	601a      	str	r2, [r3, #0]
    }

    while (printed < *Len)
 800f6c4:	e040      	b.n	800f748 <TEMPLATE_Receive+0x118>
    {
        uint32_t lineLen = ((*Len - printed) > bytesPerLine) ? bytesPerLine : (*Len - printed);
 800f6c6:	683b      	ldr	r3, [r7, #0]
 800f6c8:	681a      	ldr	r2, [r3, #0]
 800f6ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6cc:	1ad3      	subs	r3, r2, r3
 800f6ce:	69ba      	ldr	r2, [r7, #24]
 800f6d0:	4293      	cmp	r3, r2
 800f6d2:	bf28      	it	cs
 800f6d4:	4613      	movcs	r3, r2
 800f6d6:	60bb      	str	r3, [r7, #8]
    char hexLine[bytesPerLine * 3 + 1]; // 2 hex chars + 1 space per byte
 800f6d8:	69ba      	ldr	r2, [r7, #24]
 800f6da:	4613      	mov	r3, r2
 800f6dc:	005b      	lsls	r3, r3, #1
 800f6de:	4413      	add	r3, r2
        memset(hexLine, 0, sizeof(hexLine));
 800f6e0:	3301      	adds	r3, #1
 800f6e2:	461a      	mov	r2, r3
 800f6e4:	2100      	movs	r1, #0
 800f6e6:	6938      	ldr	r0, [r7, #16]
 800f6e8:	f001 ff68 	bl	80115bc <memset>
        char *ptr = hexLine;
 800f6ec:	693b      	ldr	r3, [r7, #16]
 800f6ee:	623b      	str	r3, [r7, #32]

        for (uint32_t i = 0; i < lineLen; ++i)
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	61fb      	str	r3, [r7, #28]
 800f6f4:	e012      	b.n	800f71c <TEMPLATE_Receive+0xec>
        {
            ptr += snprintf(ptr, 4, "%02X ", Buf[printed + i]);
 800f6f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f6f8:	69fb      	ldr	r3, [r7, #28]
 800f6fa:	4413      	add	r3, r2
 800f6fc:	687a      	ldr	r2, [r7, #4]
 800f6fe:	4413      	add	r3, r2
 800f700:	781b      	ldrb	r3, [r3, #0]
 800f702:	4a2d      	ldr	r2, [pc, #180]	@ (800f7b8 <TEMPLATE_Receive+0x188>)
 800f704:	2104      	movs	r1, #4
 800f706:	6a38      	ldr	r0, [r7, #32]
 800f708:	f001 fe88 	bl	801141c <sniprintf>
 800f70c:	4603      	mov	r3, r0
 800f70e:	461a      	mov	r2, r3
 800f710:	6a3b      	ldr	r3, [r7, #32]
 800f712:	4413      	add	r3, r2
 800f714:	623b      	str	r3, [r7, #32]
        for (uint32_t i = 0; i < lineLen; ++i)
 800f716:	69fb      	ldr	r3, [r7, #28]
 800f718:	3301      	adds	r3, #1
 800f71a:	61fb      	str	r3, [r7, #28]
 800f71c:	69fa      	ldr	r2, [r7, #28]
 800f71e:	68bb      	ldr	r3, [r7, #8]
 800f720:	429a      	cmp	r2, r3
 800f722:	d3e8      	bcc.n	800f6f6 <TEMPLATE_Receive+0xc6>
        }

        if (printed == 0)
 800f724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f726:	2b00      	cmp	r3, #0
 800f728:	d105      	bne.n	800f736 <TEMPLATE_Receive+0x106>
        {
            // First line includes logger message
            log_info("USB Rx [%lu bytes]: %s", totalLen, hexLine);
 800f72a:	693a      	ldr	r2, [r7, #16]
 800f72c:	68f9      	ldr	r1, [r7, #12]
 800f72e:	4823      	ldr	r0, [pc, #140]	@ (800f7bc <TEMPLATE_Receive+0x18c>)
 800f730:	f7f1 fe36 	bl	80013a0 <log_info>
 800f734:	e004      	b.n	800f740 <TEMPLATE_Receive+0x110>
        }
        else
        {
            // Subsequent lines have 26-space indent
            log_info("%19s%s", "", hexLine);
 800f736:	693a      	ldr	r2, [r7, #16]
 800f738:	4921      	ldr	r1, [pc, #132]	@ (800f7c0 <TEMPLATE_Receive+0x190>)
 800f73a:	4822      	ldr	r0, [pc, #136]	@ (800f7c4 <TEMPLATE_Receive+0x194>)
 800f73c:	f7f1 fe30 	bl	80013a0 <log_info>
        }

        printed += lineLen;
 800f740:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f742:	68bb      	ldr	r3, [r7, #8]
 800f744:	4413      	add	r3, r2
 800f746:	627b      	str	r3, [r7, #36]	@ 0x24
    while (printed < *Len)
 800f748:	683b      	ldr	r3, [r7, #0]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f74e:	429a      	cmp	r2, r3
 800f750:	d3b9      	bcc.n	800f6c6 <TEMPLATE_Receive+0x96>
    }

    // Copy to usb_rx_buffer if space permits
    if ((usb_rx_index + *Len) < MAX_USB_DATA_SIZE)
 800f752:	683b      	ldr	r3, [r7, #0]
 800f754:	681a      	ldr	r2, [r3, #0]
 800f756:	4b1c      	ldr	r3, [pc, #112]	@ (800f7c8 <TEMPLATE_Receive+0x198>)
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	4413      	add	r3, r2
 800f75c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f760:	d215      	bcs.n	800f78e <TEMPLATE_Receive+0x15e>
    {
        memcpy(&usb_rx_buffer[usb_rx_index], Buf, *Len);
 800f762:	4b19      	ldr	r3, [pc, #100]	@ (800f7c8 <TEMPLATE_Receive+0x198>)
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	4a19      	ldr	r2, [pc, #100]	@ (800f7cc <TEMPLATE_Receive+0x19c>)
 800f768:	1898      	adds	r0, r3, r2
 800f76a:	683b      	ldr	r3, [r7, #0]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	461a      	mov	r2, r3
 800f770:	6879      	ldr	r1, [r7, #4]
 800f772:	f001 ff9e 	bl	80116b2 <memcpy>
        usb_rx_index += *Len;
 800f776:	683b      	ldr	r3, [r7, #0]
 800f778:	681a      	ldr	r2, [r3, #0]
 800f77a:	4b13      	ldr	r3, [pc, #76]	@ (800f7c8 <TEMPLATE_Receive+0x198>)
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	4413      	add	r3, r2
 800f780:	4a11      	ldr	r2, [pc, #68]	@ (800f7c8 <TEMPLATE_Receive+0x198>)
 800f782:	6013      	str	r3, [r2, #0]
        log_error("USB buffer overflow");
        return USBD_FAIL;
    }

    // If this was the last packet
    if (*Len < CDC_DATA_FS_MAX_PACKET_SIZE)
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	2b3f      	cmp	r3, #63	@ 0x3f
 800f78a:	d80b      	bhi.n	800f7a4 <TEMPLATE_Receive+0x174>
 800f78c:	e007      	b.n	800f79e <TEMPLATE_Receive+0x16e>
        usb_rx_index = 0;
 800f78e:	4b0e      	ldr	r3, [pc, #56]	@ (800f7c8 <TEMPLATE_Receive+0x198>)
 800f790:	2200      	movs	r2, #0
 800f792:	601a      	str	r2, [r3, #0]
        log_error("USB buffer overflow");
 800f794:	480e      	ldr	r0, [pc, #56]	@ (800f7d0 <TEMPLATE_Receive+0x1a0>)
 800f796:	f7f1 fe37 	bl	8001408 <log_error>
        return USBD_FAIL;
 800f79a:	2303      	movs	r3, #3
 800f79c:	e006      	b.n	800f7ac <TEMPLATE_Receive+0x17c>
    {
        usb_rx_complete = true;
 800f79e:	4b0d      	ldr	r3, [pc, #52]	@ (800f7d4 <TEMPLATE_Receive+0x1a4>)
 800f7a0:	2201      	movs	r2, #1
 800f7a2:	701a      	strb	r2, [r3, #0]
    }

    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f7a4:	480c      	ldr	r0, [pc, #48]	@ (800f7d8 <TEMPLATE_Receive+0x1a8>)
 800f7a6:	f7ff fd79 	bl	800f29c <USBD_CDC_ReceivePacket>
    return USBD_OK;
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	46b5      	mov	sp, r6
}
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	372c      	adds	r7, #44	@ 0x2c
 800f7b2:	46bd      	mov	sp, r7
 800f7b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f7b8:	08013020 	.word	0x08013020
 800f7bc:	0801305c 	.word	0x0801305c
 800f7c0:	08013040 	.word	0x08013040
 800f7c4:	08013044 	.word	0x08013044
 800f7c8:	20010f3c 	.word	0x20010f3c
 800f7cc:	20000f3c 	.word	0x20000f3c
 800f7d0:	08013074 	.word	0x08013074
 800f7d4:	20010f40 	.word	0x20010f40
 800f7d8:	200007b4 	.word	0x200007b4

0800f7dc <TEMPLATE_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_TransmitCplt(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f7dc:	b480      	push	{r7}
 800f7de:	b085      	sub	sp, #20
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	60f8      	str	r0, [r7, #12]
 800f7e4:	60b9      	str	r1, [r7, #8]
 800f7e6:	4613      	mov	r3, r2
 800f7e8:	71fb      	strb	r3, [r7, #7]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);

  return 0;
 800f7ea:	2300      	movs	r3, #0

}
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	3714      	adds	r7, #20
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f6:	4770      	bx	lr

0800f7f8 <HAL_PCD_SetupStageCallback>:
extern PCD_HandleTypeDef hpcd_USB_DRD_FS;
/* Private function prototypes -----------------------------------------------*/
static USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status);
/* Private functions ---------------------------------------------------------*/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b082      	sub	sp, #8
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800f80c:	4619      	mov	r1, r3
 800f80e:	4610      	mov	r0, r2
 800f810:	f000 faa5 	bl	800fd5e <USBD_LL_SetupStage>
}
 800f814:	bf00      	nop
 800f816:	3708      	adds	r7, #8
 800f818:	46bd      	mov	sp, r7
 800f81a:	bd80      	pop	{r7, pc}

0800f81c <HAL_PCD_DataOutStageCallback>:

void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b082      	sub	sp, #8
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
 800f824:	460b      	mov	r3, r1
 800f826:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 800f82e:	78fa      	ldrb	r2, [r7, #3]
 800f830:	6879      	ldr	r1, [r7, #4]
 800f832:	4613      	mov	r3, r2
 800f834:	009b      	lsls	r3, r3, #2
 800f836:	4413      	add	r3, r2
 800f838:	00db      	lsls	r3, r3, #3
 800f83a:	440b      	add	r3, r1
 800f83c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800f840:	681a      	ldr	r2, [r3, #0]
 800f842:	78fb      	ldrb	r3, [r7, #3]
 800f844:	4619      	mov	r1, r3
 800f846:	f000 fadf 	bl	800fe08 <USBD_LL_DataOutStage>
}
 800f84a:	bf00      	nop
 800f84c:	3708      	adds	r7, #8
 800f84e:	46bd      	mov	sp, r7
 800f850:	bd80      	pop	{r7, pc}

0800f852 <HAL_PCD_DataInStageCallback>:

void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800f852:	b580      	push	{r7, lr}
 800f854:	b082      	sub	sp, #8
 800f856:	af00      	add	r7, sp, #0
 800f858:	6078      	str	r0, [r7, #4]
 800f85a:	460b      	mov	r3, r1
 800f85c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 800f864:	78fa      	ldrb	r2, [r7, #3]
 800f866:	6879      	ldr	r1, [r7, #4]
 800f868:	4613      	mov	r3, r2
 800f86a:	009b      	lsls	r3, r3, #2
 800f86c:	4413      	add	r3, r2
 800f86e:	00db      	lsls	r3, r3, #3
 800f870:	440b      	add	r3, r1
 800f872:	3328      	adds	r3, #40	@ 0x28
 800f874:	681a      	ldr	r2, [r3, #0]
 800f876:	78fb      	ldrb	r3, [r7, #3]
 800f878:	4619      	mov	r1, r3
 800f87a:	f000 fb78 	bl	800ff6e <USBD_LL_DataInStage>
}
 800f87e:	bf00      	nop
 800f880:	3708      	adds	r7, #8
 800f882:	46bd      	mov	sp, r7
 800f884:	bd80      	pop	{r7, pc}

0800f886 <HAL_PCD_SOFCallback>:

void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800f886:	b580      	push	{r7, lr}
 800f888:	b082      	sub	sp, #8
 800f88a:	af00      	add	r7, sp, #0
 800f88c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800f894:	4618      	mov	r0, r3
 800f896:	f000 fc7e 	bl	8010196 <USBD_LL_SOF>
}
 800f89a:	bf00      	nop
 800f89c:	3708      	adds	r7, #8
 800f89e:	46bd      	mov	sp, r7
 800f8a0:	bd80      	pop	{r7, pc}

0800f8a2 <HAL_PCD_ResetCallback>:

void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800f8a2:	b580      	push	{r7, lr}
 800f8a4:	b084      	sub	sp, #16
 800f8a6:	af00      	add	r7, sp, #0
 800f8a8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f8aa:	2301      	movs	r3, #1
 800f8ac:	73fb      	strb	r3, [r7, #15]
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	79db      	ldrb	r3, [r3, #7]
 800f8b2:	2b02      	cmp	r3, #2
 800f8b4:	d001      	beq.n	800f8ba <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f8b6:	f7f2 fa11 	bl	8001cdc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800f8c0:	7bfa      	ldrb	r2, [r7, #15]
 800f8c2:	4611      	mov	r1, r2
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	f000 fc56 	bl	8010176 <USBD_LL_SetSpeed>
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	f000 fbfe 	bl	80100d2 <USBD_LL_Reset>
}
 800f8d6:	bf00      	nop
 800f8d8:	3710      	adds	r7, #16
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	bd80      	pop	{r7, pc}
	...

0800f8e0 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b082      	sub	sp, #8
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
      pdev->pData  = &hpcd_USB_DRD_FS;
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	4a19      	ldr	r2, [pc, #100]	@ (800f950 <USBD_LL_Init+0x70>)
 800f8ec:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x40);
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f8f6:	2340      	movs	r3, #64	@ 0x40
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	2100      	movs	r1, #0
 800f8fc:	f7f5 fc48 	bl	8005190 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x80);
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f906:	2380      	movs	r3, #128	@ 0x80
 800f908:	2200      	movs	r2, #0
 800f90a:	2180      	movs	r1, #128	@ 0x80
 800f90c:	f7f5 fc40 	bl	8005190 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0xC0);
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f916:	23c0      	movs	r3, #192	@ 0xc0
 800f918:	2200      	movs	r2, #0
 800f91a:	2181      	movs	r1, #129	@ 0x81
 800f91c:	f7f5 fc38 	bl	8005190 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0x100);
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f926:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f92a:	2200      	movs	r2, #0
 800f92c:	2101      	movs	r1, #1
 800f92e:	f7f5 fc2f 	bl	8005190 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x140);
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f938:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800f93c:	2200      	movs	r2, #0
 800f93e:	2182      	movs	r1, #130	@ 0x82
 800f940:	f7f5 fc26 	bl	8005190 <HAL_PCDEx_PMAConfig>
      return USBD_OK;
 800f944:	2300      	movs	r3, #0
}
 800f946:	4618      	mov	r0, r3
 800f948:	3708      	adds	r7, #8
 800f94a:	46bd      	mov	sp, r7
 800f94c:	bd80      	pop	{r7, pc}
 800f94e:	bf00      	nop
 800f950:	200004d0 	.word	0x200004d0

0800f954 <USBD_LL_Start>:
      hal_status = HAL_PCD_DeInit(pdev->pData);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f954:	b580      	push	{r7, lr}
 800f956:	b084      	sub	sp, #16
 800f958:	af00      	add	r7, sp, #0
 800f95a:	6078      	str	r0, [r7, #4]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_Start(pdev->pData);
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f962:	4618      	mov	r0, r3
 800f964:	f7f4 f8f8 	bl	8003b58 <HAL_PCD_Start>
 800f968:	4603      	mov	r3, r0
 800f96a:	73fb      	strb	r3, [r7, #15]
      return  USBD_Get_USB_Status(hal_status);
 800f96c:	7bfb      	ldrb	r3, [r7, #15]
 800f96e:	4618      	mov	r0, r3
 800f970:	f000 f916 	bl	800fba0 <USBD_Get_USB_Status>
 800f974:	4603      	mov	r3, r0
}
 800f976:	4618      	mov	r0, r3
 800f978:	3710      	adds	r7, #16
 800f97a:	46bd      	mov	sp, r7
 800f97c:	bd80      	pop	{r7, pc}

0800f97e <USBD_LL_OpenEP>:
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t ep_type, uint16_t ep_mps)
{
 800f97e:	b580      	push	{r7, lr}
 800f980:	b084      	sub	sp, #16
 800f982:	af00      	add	r7, sp, #0
 800f984:	6078      	str	r0, [r7, #4]
 800f986:	4608      	mov	r0, r1
 800f988:	4611      	mov	r1, r2
 800f98a:	461a      	mov	r2, r3
 800f98c:	4603      	mov	r3, r0
 800f98e:	70fb      	strb	r3, [r7, #3]
 800f990:	460b      	mov	r3, r1
 800f992:	70bb      	strb	r3, [r7, #2]
 800f994:	4613      	mov	r3, r2
 800f996:	803b      	strh	r3, [r7, #0]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f99e:	78bb      	ldrb	r3, [r7, #2]
 800f9a0:	883a      	ldrh	r2, [r7, #0]
 800f9a2:	78f9      	ldrb	r1, [r7, #3]
 800f9a4:	f7f4 fa27 	bl	8003df6 <HAL_PCD_EP_Open>
 800f9a8:	4603      	mov	r3, r0
 800f9aa:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800f9ac:	7bfb      	ldrb	r3, [r7, #15]
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	f000 f8f6 	bl	800fba0 <USBD_Get_USB_Status>
 800f9b4:	4603      	mov	r3, r0
}
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	3710      	adds	r7, #16
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	bd80      	pop	{r7, pc}

0800f9be <USBD_LL_CloseEP>:

USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f9be:	b580      	push	{r7, lr}
 800f9c0:	b084      	sub	sp, #16
 800f9c2:	af00      	add	r7, sp, #0
 800f9c4:	6078      	str	r0, [r7, #4]
 800f9c6:	460b      	mov	r3, r1
 800f9c8:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f9d0:	78fa      	ldrb	r2, [r7, #3]
 800f9d2:	4611      	mov	r1, r2
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	f7f4 fa6f 	bl	8003eb8 <HAL_PCD_EP_Close>
 800f9da:	4603      	mov	r3, r0
 800f9dc:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800f9de:	7bfb      	ldrb	r3, [r7, #15]
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	f000 f8dd 	bl	800fba0 <USBD_Get_USB_Status>
 800f9e6:	4603      	mov	r3, r0
}
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	3710      	adds	r7, #16
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	bd80      	pop	{r7, pc}

0800f9f0 <USBD_LL_StallEP>:
      hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b084      	sub	sp, #16
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
 800f9f8:	460b      	mov	r3, r1
 800f9fa:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fa02:	78fa      	ldrb	r2, [r7, #3]
 800fa04:	4611      	mov	r1, r2
 800fa06:	4618      	mov	r0, r3
 800fa08:	f7f4 fb22 	bl	8004050 <HAL_PCD_EP_SetStall>
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800fa10:	7bfb      	ldrb	r3, [r7, #15]
 800fa12:	4618      	mov	r0, r3
 800fa14:	f000 f8c4 	bl	800fba0 <USBD_Get_USB_Status>
 800fa18:	4603      	mov	r3, r0
}
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	3710      	adds	r7, #16
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	bd80      	pop	{r7, pc}

0800fa22 <USBD_LL_ClearStallEP>:

USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr)
{
 800fa22:	b580      	push	{r7, lr}
 800fa24:	b084      	sub	sp, #16
 800fa26:	af00      	add	r7, sp, #0
 800fa28:	6078      	str	r0, [r7, #4]
 800fa2a:	460b      	mov	r3, r1
 800fa2c:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fa34:	78fa      	ldrb	r2, [r7, #3]
 800fa36:	4611      	mov	r1, r2
 800fa38:	4618      	mov	r0, r3
 800fa3a:	f7f4 fb5d 	bl	80040f8 <HAL_PCD_EP_ClrStall>
 800fa3e:	4603      	mov	r3, r0
 800fa40:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800fa42:	7bfb      	ldrb	r3, [r7, #15]
 800fa44:	4618      	mov	r0, r3
 800fa46:	f000 f8ab 	bl	800fba0 <USBD_Get_USB_Status>
 800fa4a:	4603      	mov	r3, r0
}
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	3710      	adds	r7, #16
 800fa50:	46bd      	mov	sp, r7
 800fa52:	bd80      	pop	{r7, pc}

0800fa54 <USBD_LL_IsStallEP>:

uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fa54:	b480      	push	{r7}
 800fa56:	b085      	sub	sp, #20
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	6078      	str	r0, [r7, #4]
 800fa5c:	460b      	mov	r3, r1
 800fa5e:	70fb      	strb	r3, [r7, #3]
      PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fa66:	60fb      	str	r3, [r7, #12]
      if((ep_addr & 0x80) == 0x80)
 800fa68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	da0b      	bge.n	800fa88 <USBD_LL_IsStallEP+0x34>
      {
             return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fa70:	78fb      	ldrb	r3, [r7, #3]
 800fa72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fa76:	68f9      	ldr	r1, [r7, #12]
 800fa78:	4613      	mov	r3, r2
 800fa7a:	009b      	lsls	r3, r3, #2
 800fa7c:	4413      	add	r3, r2
 800fa7e:	00db      	lsls	r3, r3, #3
 800fa80:	440b      	add	r3, r1
 800fa82:	3316      	adds	r3, #22
 800fa84:	781b      	ldrb	r3, [r3, #0]
 800fa86:	e00b      	b.n	800faa0 <USBD_LL_IsStallEP+0x4c>
      }
      else
      {
             return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fa88:	78fb      	ldrb	r3, [r7, #3]
 800fa8a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fa8e:	68f9      	ldr	r1, [r7, #12]
 800fa90:	4613      	mov	r3, r2
 800fa92:	009b      	lsls	r3, r3, #2
 800fa94:	4413      	add	r3, r2
 800fa96:	00db      	lsls	r3, r3, #3
 800fa98:	440b      	add	r3, r1
 800fa9a:	f503 73ab 	add.w	r3, r3, #342	@ 0x156
 800fa9e:	781b      	ldrb	r3, [r3, #0]
      }
}
 800faa0:	4618      	mov	r0, r3
 800faa2:	3714      	adds	r7, #20
 800faa4:	46bd      	mov	sp, r7
 800faa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faaa:	4770      	bx	lr

0800faac <USBD_LL_SetUSBAddress>:

USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev,
             uint8_t dev_addr)
{
 800faac:	b580      	push	{r7, lr}
 800faae:	b084      	sub	sp, #16
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	6078      	str	r0, [r7, #4]
 800fab4:	460b      	mov	r3, r1
 800fab6:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fabe:	78fa      	ldrb	r2, [r7, #3]
 800fac0:	4611      	mov	r1, r2
 800fac2:	4618      	mov	r0, r3
 800fac4:	f7f4 f973 	bl	8003dae <HAL_PCD_SetAddress>
 800fac8:	4603      	mov	r3, r0
 800faca:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800facc:	7bfb      	ldrb	r3, [r7, #15]
 800face:	4618      	mov	r0, r3
 800fad0:	f000 f866 	bl	800fba0 <USBD_Get_USB_Status>
 800fad4:	4603      	mov	r3, r0
}
 800fad6:	4618      	mov	r0, r3
 800fad8:	3710      	adds	r7, #16
 800fada:	46bd      	mov	sp, r7
 800fadc:	bd80      	pop	{r7, pc}

0800fade <USBD_LL_Transmit>:

USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t *pbuf, uint32_t size)
{
 800fade:	b580      	push	{r7, lr}
 800fae0:	b086      	sub	sp, #24
 800fae2:	af00      	add	r7, sp, #0
 800fae4:	60f8      	str	r0, [r7, #12]
 800fae6:	607a      	str	r2, [r7, #4]
 800fae8:	603b      	str	r3, [r7, #0]
 800faea:	460b      	mov	r3, r1
 800faec:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800faf4:	7af9      	ldrb	r1, [r7, #11]
 800faf6:	683b      	ldr	r3, [r7, #0]
 800faf8:	687a      	ldr	r2, [r7, #4]
 800fafa:	f7f4 fa71 	bl	8003fe0 <HAL_PCD_EP_Transmit>
 800fafe:	4603      	mov	r3, r0
 800fb00:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 800fb02:	7dfb      	ldrb	r3, [r7, #23]
 800fb04:	4618      	mov	r0, r3
 800fb06:	f000 f84b 	bl	800fba0 <USBD_Get_USB_Status>
 800fb0a:	4603      	mov	r3, r0
}
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	3718      	adds	r7, #24
 800fb10:	46bd      	mov	sp, r7
 800fb12:	bd80      	pop	{r7, pc}

0800fb14 <USBD_LL_PrepareReceive>:

USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr, uint8_t *pbuf,
             uint32_t size)
{
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b086      	sub	sp, #24
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	60f8      	str	r0, [r7, #12]
 800fb1c:	607a      	str	r2, [r7, #4]
 800fb1e:	603b      	str	r3, [r7, #0]
 800fb20:	460b      	mov	r3, r1
 800fb22:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800fb2a:	7af9      	ldrb	r1, [r7, #11]
 800fb2c:	683b      	ldr	r3, [r7, #0]
 800fb2e:	687a      	ldr	r2, [r7, #4]
 800fb30:	f7f4 fa0c 	bl	8003f4c <HAL_PCD_EP_Receive>
 800fb34:	4603      	mov	r3, r0
 800fb36:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 800fb38:	7dfb      	ldrb	r3, [r7, #23]
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	f000 f830 	bl	800fba0 <USBD_Get_USB_Status>
 800fb40:	4603      	mov	r3, r0
}
 800fb42:	4618      	mov	r0, r3
 800fb44:	3718      	adds	r7, #24
 800fb46:	46bd      	mov	sp, r7
 800fb48:	bd80      	pop	{r7, pc}

0800fb4a <USBD_LL_GetRxDataSize>:

uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fb4a:	b580      	push	{r7, lr}
 800fb4c:	b082      	sub	sp, #8
 800fb4e:	af00      	add	r7, sp, #0
 800fb50:	6078      	str	r0, [r7, #4]
 800fb52:	460b      	mov	r3, r1
 800fb54:	70fb      	strb	r3, [r7, #3]
      return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fb5c:	78fa      	ldrb	r2, [r7, #3]
 800fb5e:	4611      	mov	r1, r2
 800fb60:	4618      	mov	r0, r3
 800fb62:	f7f4 fa25 	bl	8003fb0 <HAL_PCD_EP_GetRxCount>
 800fb66:	4603      	mov	r3, r0
}
 800fb68:	4618      	mov	r0, r3
 800fb6a:	3708      	adds	r7, #8
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	bd80      	pop	{r7, pc}

0800fb70 <USBD_static_malloc>:

void *USBD_static_malloc(uint32_t size)
{
 800fb70:	b480      	push	{r7}
 800fb72:	b083      	sub	sp, #12
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
      UNUSED(size);
      static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef) / 4) + 1]; /* On 32-bit boundary */
      return mem;
 800fb78:	4b03      	ldr	r3, [pc, #12]	@ (800fb88 <USBD_static_malloc+0x18>)
}
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	370c      	adds	r7, #12
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb84:	4770      	bx	lr
 800fb86:	bf00      	nop
 800fb88:	20010f44 	.word	0x20010f44

0800fb8c <USBD_static_free>:

void USBD_static_free(void *p)
{
 800fb8c:	b480      	push	{r7}
 800fb8e:	b083      	sub	sp, #12
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	6078      	str	r0, [r7, #4]
      UNUSED(p);
}
 800fb94:	bf00      	nop
 800fb96:	370c      	adds	r7, #12
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9e:	4770      	bx	lr

0800fba0 <USBD_Get_USB_Status>:
{
      HAL_Delay(Delay);
}

USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fba0:	b480      	push	{r7}
 800fba2:	b085      	sub	sp, #20
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	4603      	mov	r3, r0
 800fba8:	71fb      	strb	r3, [r7, #7]
      USBD_StatusTypeDef usb_status = USBD_OK;
 800fbaa:	2300      	movs	r3, #0
 800fbac:	73fb      	strb	r3, [r7, #15]
      switch (hal_status)
 800fbae:	79fb      	ldrb	r3, [r7, #7]
 800fbb0:	2b03      	cmp	r3, #3
 800fbb2:	d817      	bhi.n	800fbe4 <USBD_Get_USB_Status+0x44>
 800fbb4:	a201      	add	r2, pc, #4	@ (adr r2, 800fbbc <USBD_Get_USB_Status+0x1c>)
 800fbb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbba:	bf00      	nop
 800fbbc:	0800fbcd 	.word	0x0800fbcd
 800fbc0:	0800fbd3 	.word	0x0800fbd3
 800fbc4:	0800fbd9 	.word	0x0800fbd9
 800fbc8:	0800fbdf 	.word	0x0800fbdf
      {
      case HAL_OK :
             usb_status = USBD_OK;
 800fbcc:	2300      	movs	r3, #0
 800fbce:	73fb      	strb	r3, [r7, #15]
             break;
 800fbd0:	e00b      	b.n	800fbea <USBD_Get_USB_Status+0x4a>
      case HAL_ERROR :
             usb_status = USBD_FAIL;
 800fbd2:	2303      	movs	r3, #3
 800fbd4:	73fb      	strb	r3, [r7, #15]
             break;
 800fbd6:	e008      	b.n	800fbea <USBD_Get_USB_Status+0x4a>
      case HAL_BUSY :
             usb_status = USBD_BUSY;
 800fbd8:	2301      	movs	r3, #1
 800fbda:	73fb      	strb	r3, [r7, #15]
             break;
 800fbdc:	e005      	b.n	800fbea <USBD_Get_USB_Status+0x4a>
      case HAL_TIMEOUT :
             usb_status = USBD_FAIL;
 800fbde:	2303      	movs	r3, #3
 800fbe0:	73fb      	strb	r3, [r7, #15]
             break;
 800fbe2:	e002      	b.n	800fbea <USBD_Get_USB_Status+0x4a>
      default :
             usb_status = USBD_FAIL;
 800fbe4:	2303      	movs	r3, #3
 800fbe6:	73fb      	strb	r3, [r7, #15]
             break;
 800fbe8:	bf00      	nop
      }
      return usb_status;
 800fbea:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbec:	4618      	mov	r0, r3
 800fbee:	3714      	adds	r7, #20
 800fbf0:	46bd      	mov	sp, r7
 800fbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf6:	4770      	bx	lr

0800fbf8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b086      	sub	sp, #24
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	60f8      	str	r0, [r7, #12]
 800fc00:	60b9      	str	r1, [r7, #8]
 800fc02:	4613      	mov	r3, r2
 800fc04:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d101      	bne.n	800fc10 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800fc0c:	2303      	movs	r3, #3
 800fc0e:	e01f      	b.n	800fc50 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	2200      	movs	r2, #0
 800fc14:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	2200      	movs	r2, #0
 800fc1c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	2200      	movs	r2, #0
 800fc24:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800fc28:	68bb      	ldr	r3, [r7, #8]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d003      	beq.n	800fc36 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	68ba      	ldr	r2, [r7, #8]
 800fc32:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	2201      	movs	r2, #1
 800fc3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	79fa      	ldrb	r2, [r7, #7]
 800fc42:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800fc44:	68f8      	ldr	r0, [r7, #12]
 800fc46:	f7ff fe4b 	bl	800f8e0 <USBD_LL_Init>
 800fc4a:	4603      	mov	r3, r0
 800fc4c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800fc4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc50:	4618      	mov	r0, r3
 800fc52:	3718      	adds	r7, #24
 800fc54:	46bd      	mov	sp, r7
 800fc56:	bd80      	pop	{r7, pc}

0800fc58 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	b084      	sub	sp, #16
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	6078      	str	r0, [r7, #4]
 800fc60:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fc62:	2300      	movs	r3, #0
 800fc64:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800fc66:	683b      	ldr	r3, [r7, #0]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d101      	bne.n	800fc70 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800fc6c:	2303      	movs	r3, #3
 800fc6e:	e025      	b.n	800fcbc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	683a      	ldr	r2, [r7, #0]
 800fc74:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	32ae      	adds	r2, #174	@ 0xae
 800fc82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d00f      	beq.n	800fcac <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	32ae      	adds	r2, #174	@ 0xae
 800fc96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc9c:	f107 020e 	add.w	r2, r7, #14
 800fca0:	4610      	mov	r0, r2
 800fca2:	4798      	blx	r3
 800fca4:	4602      	mov	r2, r0
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800fcb2:	1c5a      	adds	r2, r3, #1
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800fcba:	2300      	movs	r3, #0
}
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	3710      	adds	r7, #16
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	bd80      	pop	{r7, pc}

0800fcc4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b082      	sub	sp, #8
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800fccc:	6878      	ldr	r0, [r7, #4]
 800fcce:	f7ff fe41 	bl	800f954 <USBD_LL_Start>
 800fcd2:	4603      	mov	r3, r0
}
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	3708      	adds	r7, #8
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	bd80      	pop	{r7, pc}

0800fcdc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800fcdc:	b480      	push	{r7}
 800fcde:	b083      	sub	sp, #12
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fce4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800fce6:	4618      	mov	r0, r3
 800fce8:	370c      	adds	r7, #12
 800fcea:	46bd      	mov	sp, r7
 800fcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf0:	4770      	bx	lr

0800fcf2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fcf2:	b580      	push	{r7, lr}
 800fcf4:	b084      	sub	sp, #16
 800fcf6:	af00      	add	r7, sp, #0
 800fcf8:	6078      	str	r0, [r7, #4]
 800fcfa:	460b      	mov	r3, r1
 800fcfc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800fcfe:	2300      	movs	r3, #0
 800fd00:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d009      	beq.n	800fd20 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	78fa      	ldrb	r2, [r7, #3]
 800fd16:	4611      	mov	r1, r2
 800fd18:	6878      	ldr	r0, [r7, #4]
 800fd1a:	4798      	blx	r3
 800fd1c:	4603      	mov	r3, r0
 800fd1e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800fd20:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd22:	4618      	mov	r0, r3
 800fd24:	3710      	adds	r7, #16
 800fd26:	46bd      	mov	sp, r7
 800fd28:	bd80      	pop	{r7, pc}

0800fd2a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fd2a:	b580      	push	{r7, lr}
 800fd2c:	b084      	sub	sp, #16
 800fd2e:	af00      	add	r7, sp, #0
 800fd30:	6078      	str	r0, [r7, #4]
 800fd32:	460b      	mov	r3, r1
 800fd34:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800fd36:	2300      	movs	r3, #0
 800fd38:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fd40:	685b      	ldr	r3, [r3, #4]
 800fd42:	78fa      	ldrb	r2, [r7, #3]
 800fd44:	4611      	mov	r1, r2
 800fd46:	6878      	ldr	r0, [r7, #4]
 800fd48:	4798      	blx	r3
 800fd4a:	4603      	mov	r3, r0
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d001      	beq.n	800fd54 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800fd50:	2303      	movs	r3, #3
 800fd52:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800fd54:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd56:	4618      	mov	r0, r3
 800fd58:	3710      	adds	r7, #16
 800fd5a:	46bd      	mov	sp, r7
 800fd5c:	bd80      	pop	{r7, pc}

0800fd5e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800fd5e:	b580      	push	{r7, lr}
 800fd60:	b084      	sub	sp, #16
 800fd62:	af00      	add	r7, sp, #0
 800fd64:	6078      	str	r0, [r7, #4]
 800fd66:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fd6e:	6839      	ldr	r1, [r7, #0]
 800fd70:	4618      	mov	r0, r3
 800fd72:	f001 f846 	bl	8010e02 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	2201      	movs	r2, #1
 800fd7a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800fd84:	461a      	mov	r2, r3
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800fd92:	f003 031f 	and.w	r3, r3, #31
 800fd96:	2b02      	cmp	r3, #2
 800fd98:	d01a      	beq.n	800fdd0 <USBD_LL_SetupStage+0x72>
 800fd9a:	2b02      	cmp	r3, #2
 800fd9c:	d822      	bhi.n	800fde4 <USBD_LL_SetupStage+0x86>
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d002      	beq.n	800fda8 <USBD_LL_SetupStage+0x4a>
 800fda2:	2b01      	cmp	r3, #1
 800fda4:	d00a      	beq.n	800fdbc <USBD_LL_SetupStage+0x5e>
 800fda6:	e01d      	b.n	800fde4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fdae:	4619      	mov	r1, r3
 800fdb0:	6878      	ldr	r0, [r7, #4]
 800fdb2:	f000 fa9d 	bl	80102f0 <USBD_StdDevReq>
 800fdb6:	4603      	mov	r3, r0
 800fdb8:	73fb      	strb	r3, [r7, #15]
      break;
 800fdba:	e020      	b.n	800fdfe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fdc2:	4619      	mov	r1, r3
 800fdc4:	6878      	ldr	r0, [r7, #4]
 800fdc6:	f000 fb05 	bl	80103d4 <USBD_StdItfReq>
 800fdca:	4603      	mov	r3, r0
 800fdcc:	73fb      	strb	r3, [r7, #15]
      break;
 800fdce:	e016      	b.n	800fdfe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fdd6:	4619      	mov	r1, r3
 800fdd8:	6878      	ldr	r0, [r7, #4]
 800fdda:	f000 fb67 	bl	80104ac <USBD_StdEPReq>
 800fdde:	4603      	mov	r3, r0
 800fde0:	73fb      	strb	r3, [r7, #15]
      break;
 800fde2:	e00c      	b.n	800fdfe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800fdea:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800fdee:	b2db      	uxtb	r3, r3
 800fdf0:	4619      	mov	r1, r3
 800fdf2:	6878      	ldr	r0, [r7, #4]
 800fdf4:	f7ff fdfc 	bl	800f9f0 <USBD_LL_StallEP>
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	73fb      	strb	r3, [r7, #15]
      break;
 800fdfc:	bf00      	nop
  }

  return ret;
 800fdfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe00:	4618      	mov	r0, r3
 800fe02:	3710      	adds	r7, #16
 800fe04:	46bd      	mov	sp, r7
 800fe06:	bd80      	pop	{r7, pc}

0800fe08 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b086      	sub	sp, #24
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	60f8      	str	r0, [r7, #12]
 800fe10:	460b      	mov	r3, r1
 800fe12:	607a      	str	r2, [r7, #4]
 800fe14:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800fe16:	2300      	movs	r3, #0
 800fe18:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800fe1a:	7afb      	ldrb	r3, [r7, #11]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d16e      	bne.n	800fefe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800fe26:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800fe2e:	2b03      	cmp	r3, #3
 800fe30:	f040 8098 	bne.w	800ff64 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800fe34:	693b      	ldr	r3, [r7, #16]
 800fe36:	689a      	ldr	r2, [r3, #8]
 800fe38:	693b      	ldr	r3, [r7, #16]
 800fe3a:	68db      	ldr	r3, [r3, #12]
 800fe3c:	429a      	cmp	r2, r3
 800fe3e:	d913      	bls.n	800fe68 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800fe40:	693b      	ldr	r3, [r7, #16]
 800fe42:	689a      	ldr	r2, [r3, #8]
 800fe44:	693b      	ldr	r3, [r7, #16]
 800fe46:	68db      	ldr	r3, [r3, #12]
 800fe48:	1ad2      	subs	r2, r2, r3
 800fe4a:	693b      	ldr	r3, [r7, #16]
 800fe4c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800fe4e:	693b      	ldr	r3, [r7, #16]
 800fe50:	68da      	ldr	r2, [r3, #12]
 800fe52:	693b      	ldr	r3, [r7, #16]
 800fe54:	689b      	ldr	r3, [r3, #8]
 800fe56:	4293      	cmp	r3, r2
 800fe58:	bf28      	it	cs
 800fe5a:	4613      	movcs	r3, r2
 800fe5c:	461a      	mov	r2, r3
 800fe5e:	6879      	ldr	r1, [r7, #4]
 800fe60:	68f8      	ldr	r0, [r7, #12]
 800fe62:	f001 f9cf 	bl	8011204 <USBD_CtlContinueRx>
 800fe66:	e07d      	b.n	800ff64 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800fe6e:	f003 031f 	and.w	r3, r3, #31
 800fe72:	2b02      	cmp	r3, #2
 800fe74:	d014      	beq.n	800fea0 <USBD_LL_DataOutStage+0x98>
 800fe76:	2b02      	cmp	r3, #2
 800fe78:	d81d      	bhi.n	800feb6 <USBD_LL_DataOutStage+0xae>
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d002      	beq.n	800fe84 <USBD_LL_DataOutStage+0x7c>
 800fe7e:	2b01      	cmp	r3, #1
 800fe80:	d003      	beq.n	800fe8a <USBD_LL_DataOutStage+0x82>
 800fe82:	e018      	b.n	800feb6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800fe84:	2300      	movs	r3, #0
 800fe86:	75bb      	strb	r3, [r7, #22]
            break;
 800fe88:	e018      	b.n	800febc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800fe90:	b2db      	uxtb	r3, r3
 800fe92:	4619      	mov	r1, r3
 800fe94:	68f8      	ldr	r0, [r7, #12]
 800fe96:	f000 f99e 	bl	80101d6 <USBD_CoreFindIF>
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	75bb      	strb	r3, [r7, #22]
            break;
 800fe9e:	e00d      	b.n	800febc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800fea6:	b2db      	uxtb	r3, r3
 800fea8:	4619      	mov	r1, r3
 800feaa:	68f8      	ldr	r0, [r7, #12]
 800feac:	f000 f9a0 	bl	80101f0 <USBD_CoreFindEP>
 800feb0:	4603      	mov	r3, r0
 800feb2:	75bb      	strb	r3, [r7, #22]
            break;
 800feb4:	e002      	b.n	800febc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800feb6:	2300      	movs	r3, #0
 800feb8:	75bb      	strb	r3, [r7, #22]
            break;
 800feba:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800febc:	7dbb      	ldrb	r3, [r7, #22]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d119      	bne.n	800fef6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fec8:	b2db      	uxtb	r3, r3
 800feca:	2b03      	cmp	r3, #3
 800fecc:	d113      	bne.n	800fef6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800fece:	7dba      	ldrb	r2, [r7, #22]
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	32ae      	adds	r2, #174	@ 0xae
 800fed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fed8:	691b      	ldr	r3, [r3, #16]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d00b      	beq.n	800fef6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800fede:	7dba      	ldrb	r2, [r7, #22]
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800fee6:	7dba      	ldrb	r2, [r7, #22]
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	32ae      	adds	r2, #174	@ 0xae
 800feec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fef0:	691b      	ldr	r3, [r3, #16]
 800fef2:	68f8      	ldr	r0, [r7, #12]
 800fef4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800fef6:	68f8      	ldr	r0, [r7, #12]
 800fef8:	f001 f995 	bl	8011226 <USBD_CtlSendStatus>
 800fefc:	e032      	b.n	800ff64 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800fefe:	7afb      	ldrb	r3, [r7, #11]
 800ff00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ff04:	b2db      	uxtb	r3, r3
 800ff06:	4619      	mov	r1, r3
 800ff08:	68f8      	ldr	r0, [r7, #12]
 800ff0a:	f000 f971 	bl	80101f0 <USBD_CoreFindEP>
 800ff0e:	4603      	mov	r3, r0
 800ff10:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ff12:	7dbb      	ldrb	r3, [r7, #22]
 800ff14:	2bff      	cmp	r3, #255	@ 0xff
 800ff16:	d025      	beq.n	800ff64 <USBD_LL_DataOutStage+0x15c>
 800ff18:	7dbb      	ldrb	r3, [r7, #22]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d122      	bne.n	800ff64 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ff24:	b2db      	uxtb	r3, r3
 800ff26:	2b03      	cmp	r3, #3
 800ff28:	d117      	bne.n	800ff5a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ff2a:	7dba      	ldrb	r2, [r7, #22]
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	32ae      	adds	r2, #174	@ 0xae
 800ff30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff34:	699b      	ldr	r3, [r3, #24]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d00f      	beq.n	800ff5a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ff3a:	7dba      	ldrb	r2, [r7, #22]
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ff42:	7dba      	ldrb	r2, [r7, #22]
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	32ae      	adds	r2, #174	@ 0xae
 800ff48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff4c:	699b      	ldr	r3, [r3, #24]
 800ff4e:	7afa      	ldrb	r2, [r7, #11]
 800ff50:	4611      	mov	r1, r2
 800ff52:	68f8      	ldr	r0, [r7, #12]
 800ff54:	4798      	blx	r3
 800ff56:	4603      	mov	r3, r0
 800ff58:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ff5a:	7dfb      	ldrb	r3, [r7, #23]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d001      	beq.n	800ff64 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ff60:	7dfb      	ldrb	r3, [r7, #23]
 800ff62:	e000      	b.n	800ff66 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ff64:	2300      	movs	r3, #0
}
 800ff66:	4618      	mov	r0, r3
 800ff68:	3718      	adds	r7, #24
 800ff6a:	46bd      	mov	sp, r7
 800ff6c:	bd80      	pop	{r7, pc}

0800ff6e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ff6e:	b580      	push	{r7, lr}
 800ff70:	b086      	sub	sp, #24
 800ff72:	af00      	add	r7, sp, #0
 800ff74:	60f8      	str	r0, [r7, #12]
 800ff76:	460b      	mov	r3, r1
 800ff78:	607a      	str	r2, [r7, #4]
 800ff7a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ff7c:	7afb      	ldrb	r3, [r7, #11]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d16f      	bne.n	8010062 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	3314      	adds	r3, #20
 800ff86:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ff8e:	2b02      	cmp	r3, #2
 800ff90:	d15a      	bne.n	8010048 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ff92:	693b      	ldr	r3, [r7, #16]
 800ff94:	689a      	ldr	r2, [r3, #8]
 800ff96:	693b      	ldr	r3, [r7, #16]
 800ff98:	68db      	ldr	r3, [r3, #12]
 800ff9a:	429a      	cmp	r2, r3
 800ff9c:	d914      	bls.n	800ffc8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ff9e:	693b      	ldr	r3, [r7, #16]
 800ffa0:	689a      	ldr	r2, [r3, #8]
 800ffa2:	693b      	ldr	r3, [r7, #16]
 800ffa4:	68db      	ldr	r3, [r3, #12]
 800ffa6:	1ad2      	subs	r2, r2, r3
 800ffa8:	693b      	ldr	r3, [r7, #16]
 800ffaa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ffac:	693b      	ldr	r3, [r7, #16]
 800ffae:	689b      	ldr	r3, [r3, #8]
 800ffb0:	461a      	mov	r2, r3
 800ffb2:	6879      	ldr	r1, [r7, #4]
 800ffb4:	68f8      	ldr	r0, [r7, #12]
 800ffb6:	f001 f8f7 	bl	80111a8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ffba:	2300      	movs	r3, #0
 800ffbc:	2200      	movs	r2, #0
 800ffbe:	2100      	movs	r1, #0
 800ffc0:	68f8      	ldr	r0, [r7, #12]
 800ffc2:	f7ff fda7 	bl	800fb14 <USBD_LL_PrepareReceive>
 800ffc6:	e03f      	b.n	8010048 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ffc8:	693b      	ldr	r3, [r7, #16]
 800ffca:	68da      	ldr	r2, [r3, #12]
 800ffcc:	693b      	ldr	r3, [r7, #16]
 800ffce:	689b      	ldr	r3, [r3, #8]
 800ffd0:	429a      	cmp	r2, r3
 800ffd2:	d11c      	bne.n	801000e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ffd4:	693b      	ldr	r3, [r7, #16]
 800ffd6:	685a      	ldr	r2, [r3, #4]
 800ffd8:	693b      	ldr	r3, [r7, #16]
 800ffda:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ffdc:	429a      	cmp	r2, r3
 800ffde:	d316      	bcc.n	801000e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ffe0:	693b      	ldr	r3, [r7, #16]
 800ffe2:	685a      	ldr	r2, [r3, #4]
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ffea:	429a      	cmp	r2, r3
 800ffec:	d20f      	bcs.n	801000e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ffee:	2200      	movs	r2, #0
 800fff0:	2100      	movs	r1, #0
 800fff2:	68f8      	ldr	r0, [r7, #12]
 800fff4:	f001 f8d8 	bl	80111a8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	2200      	movs	r2, #0
 800fffc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010000:	2300      	movs	r3, #0
 8010002:	2200      	movs	r2, #0
 8010004:	2100      	movs	r1, #0
 8010006:	68f8      	ldr	r0, [r7, #12]
 8010008:	f7ff fd84 	bl	800fb14 <USBD_LL_PrepareReceive>
 801000c:	e01c      	b.n	8010048 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010014:	b2db      	uxtb	r3, r3
 8010016:	2b03      	cmp	r3, #3
 8010018:	d10f      	bne.n	801003a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010020:	68db      	ldr	r3, [r3, #12]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d009      	beq.n	801003a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	2200      	movs	r2, #0
 801002a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010034:	68db      	ldr	r3, [r3, #12]
 8010036:	68f8      	ldr	r0, [r7, #12]
 8010038:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801003a:	2180      	movs	r1, #128	@ 0x80
 801003c:	68f8      	ldr	r0, [r7, #12]
 801003e:	f7ff fcd7 	bl	800f9f0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8010042:	68f8      	ldr	r0, [r7, #12]
 8010044:	f001 f902 	bl	801124c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 801004e:	2b00      	cmp	r3, #0
 8010050:	d03a      	beq.n	80100c8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8010052:	68f8      	ldr	r0, [r7, #12]
 8010054:	f7ff fe42 	bl	800fcdc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	2200      	movs	r2, #0
 801005c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8010060:	e032      	b.n	80100c8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8010062:	7afb      	ldrb	r3, [r7, #11]
 8010064:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010068:	b2db      	uxtb	r3, r3
 801006a:	4619      	mov	r1, r3
 801006c:	68f8      	ldr	r0, [r7, #12]
 801006e:	f000 f8bf 	bl	80101f0 <USBD_CoreFindEP>
 8010072:	4603      	mov	r3, r0
 8010074:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010076:	7dfb      	ldrb	r3, [r7, #23]
 8010078:	2bff      	cmp	r3, #255	@ 0xff
 801007a:	d025      	beq.n	80100c8 <USBD_LL_DataInStage+0x15a>
 801007c:	7dfb      	ldrb	r3, [r7, #23]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d122      	bne.n	80100c8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010088:	b2db      	uxtb	r3, r3
 801008a:	2b03      	cmp	r3, #3
 801008c:	d11c      	bne.n	80100c8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801008e:	7dfa      	ldrb	r2, [r7, #23]
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	32ae      	adds	r2, #174	@ 0xae
 8010094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010098:	695b      	ldr	r3, [r3, #20]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d014      	beq.n	80100c8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801009e:	7dfa      	ldrb	r2, [r7, #23]
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80100a6:	7dfa      	ldrb	r2, [r7, #23]
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	32ae      	adds	r2, #174	@ 0xae
 80100ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100b0:	695b      	ldr	r3, [r3, #20]
 80100b2:	7afa      	ldrb	r2, [r7, #11]
 80100b4:	4611      	mov	r1, r2
 80100b6:	68f8      	ldr	r0, [r7, #12]
 80100b8:	4798      	blx	r3
 80100ba:	4603      	mov	r3, r0
 80100bc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80100be:	7dbb      	ldrb	r3, [r7, #22]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d001      	beq.n	80100c8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80100c4:	7dbb      	ldrb	r3, [r7, #22]
 80100c6:	e000      	b.n	80100ca <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80100c8:	2300      	movs	r3, #0
}
 80100ca:	4618      	mov	r0, r3
 80100cc:	3718      	adds	r7, #24
 80100ce:	46bd      	mov	sp, r7
 80100d0:	bd80      	pop	{r7, pc}

080100d2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80100d2:	b580      	push	{r7, lr}
 80100d4:	b084      	sub	sp, #16
 80100d6:	af00      	add	r7, sp, #0
 80100d8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80100da:	2300      	movs	r3, #0
 80100dc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	2201      	movs	r2, #1
 80100e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	2200      	movs	r2, #0
 80100ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	2200      	movs	r2, #0
 80100f2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	2200      	movs	r2, #0
 80100f8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	2200      	movs	r2, #0
 8010100:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801010a:	2b00      	cmp	r3, #0
 801010c:	d014      	beq.n	8010138 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010114:	685b      	ldr	r3, [r3, #4]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d00e      	beq.n	8010138 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010120:	685b      	ldr	r3, [r3, #4]
 8010122:	687a      	ldr	r2, [r7, #4]
 8010124:	6852      	ldr	r2, [r2, #4]
 8010126:	b2d2      	uxtb	r2, r2
 8010128:	4611      	mov	r1, r2
 801012a:	6878      	ldr	r0, [r7, #4]
 801012c:	4798      	blx	r3
 801012e:	4603      	mov	r3, r0
 8010130:	2b00      	cmp	r3, #0
 8010132:	d001      	beq.n	8010138 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8010134:	2303      	movs	r3, #3
 8010136:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010138:	2340      	movs	r3, #64	@ 0x40
 801013a:	2200      	movs	r2, #0
 801013c:	2100      	movs	r1, #0
 801013e:	6878      	ldr	r0, [r7, #4]
 8010140:	f7ff fc1d 	bl	800f97e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	2201      	movs	r2, #1
 8010148:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	2240      	movs	r2, #64	@ 0x40
 8010150:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010154:	2340      	movs	r3, #64	@ 0x40
 8010156:	2200      	movs	r2, #0
 8010158:	2180      	movs	r1, #128	@ 0x80
 801015a:	6878      	ldr	r0, [r7, #4]
 801015c:	f7ff fc0f 	bl	800f97e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	2201      	movs	r2, #1
 8010164:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	2240      	movs	r2, #64	@ 0x40
 801016a:	621a      	str	r2, [r3, #32]

  return ret;
 801016c:	7bfb      	ldrb	r3, [r7, #15]
}
 801016e:	4618      	mov	r0, r3
 8010170:	3710      	adds	r7, #16
 8010172:	46bd      	mov	sp, r7
 8010174:	bd80      	pop	{r7, pc}

08010176 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010176:	b480      	push	{r7}
 8010178:	b083      	sub	sp, #12
 801017a:	af00      	add	r7, sp, #0
 801017c:	6078      	str	r0, [r7, #4]
 801017e:	460b      	mov	r3, r1
 8010180:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	78fa      	ldrb	r2, [r7, #3]
 8010186:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010188:	2300      	movs	r3, #0
}
 801018a:	4618      	mov	r0, r3
 801018c:	370c      	adds	r7, #12
 801018e:	46bd      	mov	sp, r7
 8010190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010194:	4770      	bx	lr

08010196 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010196:	b580      	push	{r7, lr}
 8010198:	b082      	sub	sp, #8
 801019a:	af00      	add	r7, sp, #0
 801019c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80101a4:	b2db      	uxtb	r3, r3
 80101a6:	2b03      	cmp	r3, #3
 80101a8:	d110      	bne.n	80101cc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d00b      	beq.n	80101cc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80101ba:	69db      	ldr	r3, [r3, #28]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d005      	beq.n	80101cc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80101c6:	69db      	ldr	r3, [r3, #28]
 80101c8:	6878      	ldr	r0, [r7, #4]
 80101ca:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80101cc:	2300      	movs	r3, #0
}
 80101ce:	4618      	mov	r0, r3
 80101d0:	3708      	adds	r7, #8
 80101d2:	46bd      	mov	sp, r7
 80101d4:	bd80      	pop	{r7, pc}

080101d6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80101d6:	b480      	push	{r7}
 80101d8:	b083      	sub	sp, #12
 80101da:	af00      	add	r7, sp, #0
 80101dc:	6078      	str	r0, [r7, #4]
 80101de:	460b      	mov	r3, r1
 80101e0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80101e2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80101e4:	4618      	mov	r0, r3
 80101e6:	370c      	adds	r7, #12
 80101e8:	46bd      	mov	sp, r7
 80101ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ee:	4770      	bx	lr

080101f0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80101f0:	b480      	push	{r7}
 80101f2:	b083      	sub	sp, #12
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	6078      	str	r0, [r7, #4]
 80101f8:	460b      	mov	r3, r1
 80101fa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80101fc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80101fe:	4618      	mov	r0, r3
 8010200:	370c      	adds	r7, #12
 8010202:	46bd      	mov	sp, r7
 8010204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010208:	4770      	bx	lr

0801020a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801020a:	b580      	push	{r7, lr}
 801020c:	b086      	sub	sp, #24
 801020e:	af00      	add	r7, sp, #0
 8010210:	6078      	str	r0, [r7, #4]
 8010212:	460b      	mov	r3, r1
 8010214:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801021e:	2300      	movs	r3, #0
 8010220:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	885b      	ldrh	r3, [r3, #2]
 8010226:	b29b      	uxth	r3, r3
 8010228:	68fa      	ldr	r2, [r7, #12]
 801022a:	7812      	ldrb	r2, [r2, #0]
 801022c:	4293      	cmp	r3, r2
 801022e:	d91f      	bls.n	8010270 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	781b      	ldrb	r3, [r3, #0]
 8010234:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8010236:	e013      	b.n	8010260 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8010238:	f107 030a 	add.w	r3, r7, #10
 801023c:	4619      	mov	r1, r3
 801023e:	6978      	ldr	r0, [r7, #20]
 8010240:	f000 f81b 	bl	801027a <USBD_GetNextDesc>
 8010244:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8010246:	697b      	ldr	r3, [r7, #20]
 8010248:	785b      	ldrb	r3, [r3, #1]
 801024a:	2b05      	cmp	r3, #5
 801024c:	d108      	bne.n	8010260 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801024e:	697b      	ldr	r3, [r7, #20]
 8010250:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8010252:	693b      	ldr	r3, [r7, #16]
 8010254:	789b      	ldrb	r3, [r3, #2]
 8010256:	78fa      	ldrb	r2, [r7, #3]
 8010258:	429a      	cmp	r2, r3
 801025a:	d008      	beq.n	801026e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 801025c:	2300      	movs	r3, #0
 801025e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	885b      	ldrh	r3, [r3, #2]
 8010264:	b29a      	uxth	r2, r3
 8010266:	897b      	ldrh	r3, [r7, #10]
 8010268:	429a      	cmp	r2, r3
 801026a:	d8e5      	bhi.n	8010238 <USBD_GetEpDesc+0x2e>
 801026c:	e000      	b.n	8010270 <USBD_GetEpDesc+0x66>
          break;
 801026e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8010270:	693b      	ldr	r3, [r7, #16]
}
 8010272:	4618      	mov	r0, r3
 8010274:	3718      	adds	r7, #24
 8010276:	46bd      	mov	sp, r7
 8010278:	bd80      	pop	{r7, pc}

0801027a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801027a:	b480      	push	{r7}
 801027c:	b085      	sub	sp, #20
 801027e:	af00      	add	r7, sp, #0
 8010280:	6078      	str	r0, [r7, #4]
 8010282:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8010288:	683b      	ldr	r3, [r7, #0]
 801028a:	881b      	ldrh	r3, [r3, #0]
 801028c:	68fa      	ldr	r2, [r7, #12]
 801028e:	7812      	ldrb	r2, [r2, #0]
 8010290:	4413      	add	r3, r2
 8010292:	b29a      	uxth	r2, r3
 8010294:	683b      	ldr	r3, [r7, #0]
 8010296:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	781b      	ldrb	r3, [r3, #0]
 801029c:	461a      	mov	r2, r3
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	4413      	add	r3, r2
 80102a2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80102a4:	68fb      	ldr	r3, [r7, #12]
}
 80102a6:	4618      	mov	r0, r3
 80102a8:	3714      	adds	r7, #20
 80102aa:	46bd      	mov	sp, r7
 80102ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b0:	4770      	bx	lr

080102b2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80102b2:	b480      	push	{r7}
 80102b4:	b087      	sub	sp, #28
 80102b6:	af00      	add	r7, sp, #0
 80102b8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80102be:	697b      	ldr	r3, [r7, #20]
 80102c0:	781b      	ldrb	r3, [r3, #0]
 80102c2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80102c4:	697b      	ldr	r3, [r7, #20]
 80102c6:	3301      	adds	r3, #1
 80102c8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80102ca:	697b      	ldr	r3, [r7, #20]
 80102cc:	781b      	ldrb	r3, [r3, #0]
 80102ce:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80102d0:	8a3b      	ldrh	r3, [r7, #16]
 80102d2:	021b      	lsls	r3, r3, #8
 80102d4:	b21a      	sxth	r2, r3
 80102d6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80102da:	4313      	orrs	r3, r2
 80102dc:	b21b      	sxth	r3, r3
 80102de:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80102e0:	89fb      	ldrh	r3, [r7, #14]
}
 80102e2:	4618      	mov	r0, r3
 80102e4:	371c      	adds	r7, #28
 80102e6:	46bd      	mov	sp, r7
 80102e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ec:	4770      	bx	lr
	...

080102f0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80102f0:	b580      	push	{r7, lr}
 80102f2:	b084      	sub	sp, #16
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	6078      	str	r0, [r7, #4]
 80102f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80102fa:	2300      	movs	r3, #0
 80102fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80102fe:	683b      	ldr	r3, [r7, #0]
 8010300:	781b      	ldrb	r3, [r3, #0]
 8010302:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010306:	2b40      	cmp	r3, #64	@ 0x40
 8010308:	d005      	beq.n	8010316 <USBD_StdDevReq+0x26>
 801030a:	2b40      	cmp	r3, #64	@ 0x40
 801030c:	d857      	bhi.n	80103be <USBD_StdDevReq+0xce>
 801030e:	2b00      	cmp	r3, #0
 8010310:	d00f      	beq.n	8010332 <USBD_StdDevReq+0x42>
 8010312:	2b20      	cmp	r3, #32
 8010314:	d153      	bne.n	80103be <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	32ae      	adds	r2, #174	@ 0xae
 8010320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010324:	689b      	ldr	r3, [r3, #8]
 8010326:	6839      	ldr	r1, [r7, #0]
 8010328:	6878      	ldr	r0, [r7, #4]
 801032a:	4798      	blx	r3
 801032c:	4603      	mov	r3, r0
 801032e:	73fb      	strb	r3, [r7, #15]
      break;
 8010330:	e04a      	b.n	80103c8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010332:	683b      	ldr	r3, [r7, #0]
 8010334:	785b      	ldrb	r3, [r3, #1]
 8010336:	2b09      	cmp	r3, #9
 8010338:	d83b      	bhi.n	80103b2 <USBD_StdDevReq+0xc2>
 801033a:	a201      	add	r2, pc, #4	@ (adr r2, 8010340 <USBD_StdDevReq+0x50>)
 801033c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010340:	08010395 	.word	0x08010395
 8010344:	080103a9 	.word	0x080103a9
 8010348:	080103b3 	.word	0x080103b3
 801034c:	0801039f 	.word	0x0801039f
 8010350:	080103b3 	.word	0x080103b3
 8010354:	08010373 	.word	0x08010373
 8010358:	08010369 	.word	0x08010369
 801035c:	080103b3 	.word	0x080103b3
 8010360:	0801038b 	.word	0x0801038b
 8010364:	0801037d 	.word	0x0801037d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8010368:	6839      	ldr	r1, [r7, #0]
 801036a:	6878      	ldr	r0, [r7, #4]
 801036c:	f000 fa3c 	bl	80107e8 <USBD_GetDescriptor>
          break;
 8010370:	e024      	b.n	80103bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8010372:	6839      	ldr	r1, [r7, #0]
 8010374:	6878      	ldr	r0, [r7, #4]
 8010376:	f000 fba1 	bl	8010abc <USBD_SetAddress>
          break;
 801037a:	e01f      	b.n	80103bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801037c:	6839      	ldr	r1, [r7, #0]
 801037e:	6878      	ldr	r0, [r7, #4]
 8010380:	f000 fbe0 	bl	8010b44 <USBD_SetConfig>
 8010384:	4603      	mov	r3, r0
 8010386:	73fb      	strb	r3, [r7, #15]
          break;
 8010388:	e018      	b.n	80103bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801038a:	6839      	ldr	r1, [r7, #0]
 801038c:	6878      	ldr	r0, [r7, #4]
 801038e:	f000 fc83 	bl	8010c98 <USBD_GetConfig>
          break;
 8010392:	e013      	b.n	80103bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8010394:	6839      	ldr	r1, [r7, #0]
 8010396:	6878      	ldr	r0, [r7, #4]
 8010398:	f000 fcb4 	bl	8010d04 <USBD_GetStatus>
          break;
 801039c:	e00e      	b.n	80103bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801039e:	6839      	ldr	r1, [r7, #0]
 80103a0:	6878      	ldr	r0, [r7, #4]
 80103a2:	f000 fce3 	bl	8010d6c <USBD_SetFeature>
          break;
 80103a6:	e009      	b.n	80103bc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80103a8:	6839      	ldr	r1, [r7, #0]
 80103aa:	6878      	ldr	r0, [r7, #4]
 80103ac:	f000 fd07 	bl	8010dbe <USBD_ClrFeature>
          break;
 80103b0:	e004      	b.n	80103bc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80103b2:	6839      	ldr	r1, [r7, #0]
 80103b4:	6878      	ldr	r0, [r7, #4]
 80103b6:	f000 fd5e 	bl	8010e76 <USBD_CtlError>
          break;
 80103ba:	bf00      	nop
      }
      break;
 80103bc:	e004      	b.n	80103c8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80103be:	6839      	ldr	r1, [r7, #0]
 80103c0:	6878      	ldr	r0, [r7, #4]
 80103c2:	f000 fd58 	bl	8010e76 <USBD_CtlError>
      break;
 80103c6:	bf00      	nop
  }

  return ret;
 80103c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80103ca:	4618      	mov	r0, r3
 80103cc:	3710      	adds	r7, #16
 80103ce:	46bd      	mov	sp, r7
 80103d0:	bd80      	pop	{r7, pc}
 80103d2:	bf00      	nop

080103d4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80103d4:	b580      	push	{r7, lr}
 80103d6:	b084      	sub	sp, #16
 80103d8:	af00      	add	r7, sp, #0
 80103da:	6078      	str	r0, [r7, #4]
 80103dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80103de:	2300      	movs	r3, #0
 80103e0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80103e2:	683b      	ldr	r3, [r7, #0]
 80103e4:	781b      	ldrb	r3, [r3, #0]
 80103e6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80103ea:	2b40      	cmp	r3, #64	@ 0x40
 80103ec:	d005      	beq.n	80103fa <USBD_StdItfReq+0x26>
 80103ee:	2b40      	cmp	r3, #64	@ 0x40
 80103f0:	d852      	bhi.n	8010498 <USBD_StdItfReq+0xc4>
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d001      	beq.n	80103fa <USBD_StdItfReq+0x26>
 80103f6:	2b20      	cmp	r3, #32
 80103f8:	d14e      	bne.n	8010498 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010400:	b2db      	uxtb	r3, r3
 8010402:	3b01      	subs	r3, #1
 8010404:	2b02      	cmp	r3, #2
 8010406:	d840      	bhi.n	801048a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010408:	683b      	ldr	r3, [r7, #0]
 801040a:	889b      	ldrh	r3, [r3, #4]
 801040c:	b2db      	uxtb	r3, r3
 801040e:	2b01      	cmp	r3, #1
 8010410:	d836      	bhi.n	8010480 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8010412:	683b      	ldr	r3, [r7, #0]
 8010414:	889b      	ldrh	r3, [r3, #4]
 8010416:	b2db      	uxtb	r3, r3
 8010418:	4619      	mov	r1, r3
 801041a:	6878      	ldr	r0, [r7, #4]
 801041c:	f7ff fedb 	bl	80101d6 <USBD_CoreFindIF>
 8010420:	4603      	mov	r3, r0
 8010422:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010424:	7bbb      	ldrb	r3, [r7, #14]
 8010426:	2bff      	cmp	r3, #255	@ 0xff
 8010428:	d01d      	beq.n	8010466 <USBD_StdItfReq+0x92>
 801042a:	7bbb      	ldrb	r3, [r7, #14]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d11a      	bne.n	8010466 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8010430:	7bba      	ldrb	r2, [r7, #14]
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	32ae      	adds	r2, #174	@ 0xae
 8010436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801043a:	689b      	ldr	r3, [r3, #8]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d00f      	beq.n	8010460 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8010440:	7bba      	ldrb	r2, [r7, #14]
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010448:	7bba      	ldrb	r2, [r7, #14]
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	32ae      	adds	r2, #174	@ 0xae
 801044e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010452:	689b      	ldr	r3, [r3, #8]
 8010454:	6839      	ldr	r1, [r7, #0]
 8010456:	6878      	ldr	r0, [r7, #4]
 8010458:	4798      	blx	r3
 801045a:	4603      	mov	r3, r0
 801045c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801045e:	e004      	b.n	801046a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8010460:	2303      	movs	r3, #3
 8010462:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010464:	e001      	b.n	801046a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8010466:	2303      	movs	r3, #3
 8010468:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801046a:	683b      	ldr	r3, [r7, #0]
 801046c:	88db      	ldrh	r3, [r3, #6]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d110      	bne.n	8010494 <USBD_StdItfReq+0xc0>
 8010472:	7bfb      	ldrb	r3, [r7, #15]
 8010474:	2b00      	cmp	r3, #0
 8010476:	d10d      	bne.n	8010494 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8010478:	6878      	ldr	r0, [r7, #4]
 801047a:	f000 fed4 	bl	8011226 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801047e:	e009      	b.n	8010494 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8010480:	6839      	ldr	r1, [r7, #0]
 8010482:	6878      	ldr	r0, [r7, #4]
 8010484:	f000 fcf7 	bl	8010e76 <USBD_CtlError>
          break;
 8010488:	e004      	b.n	8010494 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801048a:	6839      	ldr	r1, [r7, #0]
 801048c:	6878      	ldr	r0, [r7, #4]
 801048e:	f000 fcf2 	bl	8010e76 <USBD_CtlError>
          break;
 8010492:	e000      	b.n	8010496 <USBD_StdItfReq+0xc2>
          break;
 8010494:	bf00      	nop
      }
      break;
 8010496:	e004      	b.n	80104a2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8010498:	6839      	ldr	r1, [r7, #0]
 801049a:	6878      	ldr	r0, [r7, #4]
 801049c:	f000 fceb 	bl	8010e76 <USBD_CtlError>
      break;
 80104a0:	bf00      	nop
  }

  return ret;
 80104a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80104a4:	4618      	mov	r0, r3
 80104a6:	3710      	adds	r7, #16
 80104a8:	46bd      	mov	sp, r7
 80104aa:	bd80      	pop	{r7, pc}

080104ac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b084      	sub	sp, #16
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
 80104b4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80104b6:	2300      	movs	r3, #0
 80104b8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80104ba:	683b      	ldr	r3, [r7, #0]
 80104bc:	889b      	ldrh	r3, [r3, #4]
 80104be:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80104c0:	683b      	ldr	r3, [r7, #0]
 80104c2:	781b      	ldrb	r3, [r3, #0]
 80104c4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80104c8:	2b40      	cmp	r3, #64	@ 0x40
 80104ca:	d007      	beq.n	80104dc <USBD_StdEPReq+0x30>
 80104cc:	2b40      	cmp	r3, #64	@ 0x40
 80104ce:	f200 817f 	bhi.w	80107d0 <USBD_StdEPReq+0x324>
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d02a      	beq.n	801052c <USBD_StdEPReq+0x80>
 80104d6:	2b20      	cmp	r3, #32
 80104d8:	f040 817a 	bne.w	80107d0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80104dc:	7bbb      	ldrb	r3, [r7, #14]
 80104de:	4619      	mov	r1, r3
 80104e0:	6878      	ldr	r0, [r7, #4]
 80104e2:	f7ff fe85 	bl	80101f0 <USBD_CoreFindEP>
 80104e6:	4603      	mov	r3, r0
 80104e8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80104ea:	7b7b      	ldrb	r3, [r7, #13]
 80104ec:	2bff      	cmp	r3, #255	@ 0xff
 80104ee:	f000 8174 	beq.w	80107da <USBD_StdEPReq+0x32e>
 80104f2:	7b7b      	ldrb	r3, [r7, #13]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	f040 8170 	bne.w	80107da <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80104fa:	7b7a      	ldrb	r2, [r7, #13]
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8010502:	7b7a      	ldrb	r2, [r7, #13]
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	32ae      	adds	r2, #174	@ 0xae
 8010508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801050c:	689b      	ldr	r3, [r3, #8]
 801050e:	2b00      	cmp	r3, #0
 8010510:	f000 8163 	beq.w	80107da <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8010514:	7b7a      	ldrb	r2, [r7, #13]
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	32ae      	adds	r2, #174	@ 0xae
 801051a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801051e:	689b      	ldr	r3, [r3, #8]
 8010520:	6839      	ldr	r1, [r7, #0]
 8010522:	6878      	ldr	r0, [r7, #4]
 8010524:	4798      	blx	r3
 8010526:	4603      	mov	r3, r0
 8010528:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801052a:	e156      	b.n	80107da <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801052c:	683b      	ldr	r3, [r7, #0]
 801052e:	785b      	ldrb	r3, [r3, #1]
 8010530:	2b03      	cmp	r3, #3
 8010532:	d008      	beq.n	8010546 <USBD_StdEPReq+0x9a>
 8010534:	2b03      	cmp	r3, #3
 8010536:	f300 8145 	bgt.w	80107c4 <USBD_StdEPReq+0x318>
 801053a:	2b00      	cmp	r3, #0
 801053c:	f000 809b 	beq.w	8010676 <USBD_StdEPReq+0x1ca>
 8010540:	2b01      	cmp	r3, #1
 8010542:	d03c      	beq.n	80105be <USBD_StdEPReq+0x112>
 8010544:	e13e      	b.n	80107c4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801054c:	b2db      	uxtb	r3, r3
 801054e:	2b02      	cmp	r3, #2
 8010550:	d002      	beq.n	8010558 <USBD_StdEPReq+0xac>
 8010552:	2b03      	cmp	r3, #3
 8010554:	d016      	beq.n	8010584 <USBD_StdEPReq+0xd8>
 8010556:	e02c      	b.n	80105b2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010558:	7bbb      	ldrb	r3, [r7, #14]
 801055a:	2b00      	cmp	r3, #0
 801055c:	d00d      	beq.n	801057a <USBD_StdEPReq+0xce>
 801055e:	7bbb      	ldrb	r3, [r7, #14]
 8010560:	2b80      	cmp	r3, #128	@ 0x80
 8010562:	d00a      	beq.n	801057a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010564:	7bbb      	ldrb	r3, [r7, #14]
 8010566:	4619      	mov	r1, r3
 8010568:	6878      	ldr	r0, [r7, #4]
 801056a:	f7ff fa41 	bl	800f9f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801056e:	2180      	movs	r1, #128	@ 0x80
 8010570:	6878      	ldr	r0, [r7, #4]
 8010572:	f7ff fa3d 	bl	800f9f0 <USBD_LL_StallEP>
 8010576:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010578:	e020      	b.n	80105bc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801057a:	6839      	ldr	r1, [r7, #0]
 801057c:	6878      	ldr	r0, [r7, #4]
 801057e:	f000 fc7a 	bl	8010e76 <USBD_CtlError>
              break;
 8010582:	e01b      	b.n	80105bc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010584:	683b      	ldr	r3, [r7, #0]
 8010586:	885b      	ldrh	r3, [r3, #2]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d10e      	bne.n	80105aa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801058c:	7bbb      	ldrb	r3, [r7, #14]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d00b      	beq.n	80105aa <USBD_StdEPReq+0xfe>
 8010592:	7bbb      	ldrb	r3, [r7, #14]
 8010594:	2b80      	cmp	r3, #128	@ 0x80
 8010596:	d008      	beq.n	80105aa <USBD_StdEPReq+0xfe>
 8010598:	683b      	ldr	r3, [r7, #0]
 801059a:	88db      	ldrh	r3, [r3, #6]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d104      	bne.n	80105aa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80105a0:	7bbb      	ldrb	r3, [r7, #14]
 80105a2:	4619      	mov	r1, r3
 80105a4:	6878      	ldr	r0, [r7, #4]
 80105a6:	f7ff fa23 	bl	800f9f0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80105aa:	6878      	ldr	r0, [r7, #4]
 80105ac:	f000 fe3b 	bl	8011226 <USBD_CtlSendStatus>

              break;
 80105b0:	e004      	b.n	80105bc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80105b2:	6839      	ldr	r1, [r7, #0]
 80105b4:	6878      	ldr	r0, [r7, #4]
 80105b6:	f000 fc5e 	bl	8010e76 <USBD_CtlError>
              break;
 80105ba:	bf00      	nop
          }
          break;
 80105bc:	e107      	b.n	80107ce <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80105c4:	b2db      	uxtb	r3, r3
 80105c6:	2b02      	cmp	r3, #2
 80105c8:	d002      	beq.n	80105d0 <USBD_StdEPReq+0x124>
 80105ca:	2b03      	cmp	r3, #3
 80105cc:	d016      	beq.n	80105fc <USBD_StdEPReq+0x150>
 80105ce:	e04b      	b.n	8010668 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80105d0:	7bbb      	ldrb	r3, [r7, #14]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d00d      	beq.n	80105f2 <USBD_StdEPReq+0x146>
 80105d6:	7bbb      	ldrb	r3, [r7, #14]
 80105d8:	2b80      	cmp	r3, #128	@ 0x80
 80105da:	d00a      	beq.n	80105f2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80105dc:	7bbb      	ldrb	r3, [r7, #14]
 80105de:	4619      	mov	r1, r3
 80105e0:	6878      	ldr	r0, [r7, #4]
 80105e2:	f7ff fa05 	bl	800f9f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80105e6:	2180      	movs	r1, #128	@ 0x80
 80105e8:	6878      	ldr	r0, [r7, #4]
 80105ea:	f7ff fa01 	bl	800f9f0 <USBD_LL_StallEP>
 80105ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80105f0:	e040      	b.n	8010674 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80105f2:	6839      	ldr	r1, [r7, #0]
 80105f4:	6878      	ldr	r0, [r7, #4]
 80105f6:	f000 fc3e 	bl	8010e76 <USBD_CtlError>
              break;
 80105fa:	e03b      	b.n	8010674 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80105fc:	683b      	ldr	r3, [r7, #0]
 80105fe:	885b      	ldrh	r3, [r3, #2]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d136      	bne.n	8010672 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010604:	7bbb      	ldrb	r3, [r7, #14]
 8010606:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801060a:	2b00      	cmp	r3, #0
 801060c:	d004      	beq.n	8010618 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801060e:	7bbb      	ldrb	r3, [r7, #14]
 8010610:	4619      	mov	r1, r3
 8010612:	6878      	ldr	r0, [r7, #4]
 8010614:	f7ff fa05 	bl	800fa22 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8010618:	6878      	ldr	r0, [r7, #4]
 801061a:	f000 fe04 	bl	8011226 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801061e:	7bbb      	ldrb	r3, [r7, #14]
 8010620:	4619      	mov	r1, r3
 8010622:	6878      	ldr	r0, [r7, #4]
 8010624:	f7ff fde4 	bl	80101f0 <USBD_CoreFindEP>
 8010628:	4603      	mov	r3, r0
 801062a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801062c:	7b7b      	ldrb	r3, [r7, #13]
 801062e:	2bff      	cmp	r3, #255	@ 0xff
 8010630:	d01f      	beq.n	8010672 <USBD_StdEPReq+0x1c6>
 8010632:	7b7b      	ldrb	r3, [r7, #13]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d11c      	bne.n	8010672 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8010638:	7b7a      	ldrb	r2, [r7, #13]
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8010640:	7b7a      	ldrb	r2, [r7, #13]
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	32ae      	adds	r2, #174	@ 0xae
 8010646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801064a:	689b      	ldr	r3, [r3, #8]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d010      	beq.n	8010672 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010650:	7b7a      	ldrb	r2, [r7, #13]
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	32ae      	adds	r2, #174	@ 0xae
 8010656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801065a:	689b      	ldr	r3, [r3, #8]
 801065c:	6839      	ldr	r1, [r7, #0]
 801065e:	6878      	ldr	r0, [r7, #4]
 8010660:	4798      	blx	r3
 8010662:	4603      	mov	r3, r0
 8010664:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8010666:	e004      	b.n	8010672 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8010668:	6839      	ldr	r1, [r7, #0]
 801066a:	6878      	ldr	r0, [r7, #4]
 801066c:	f000 fc03 	bl	8010e76 <USBD_CtlError>
              break;
 8010670:	e000      	b.n	8010674 <USBD_StdEPReq+0x1c8>
              break;
 8010672:	bf00      	nop
          }
          break;
 8010674:	e0ab      	b.n	80107ce <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801067c:	b2db      	uxtb	r3, r3
 801067e:	2b02      	cmp	r3, #2
 8010680:	d002      	beq.n	8010688 <USBD_StdEPReq+0x1dc>
 8010682:	2b03      	cmp	r3, #3
 8010684:	d032      	beq.n	80106ec <USBD_StdEPReq+0x240>
 8010686:	e097      	b.n	80107b8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010688:	7bbb      	ldrb	r3, [r7, #14]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d007      	beq.n	801069e <USBD_StdEPReq+0x1f2>
 801068e:	7bbb      	ldrb	r3, [r7, #14]
 8010690:	2b80      	cmp	r3, #128	@ 0x80
 8010692:	d004      	beq.n	801069e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8010694:	6839      	ldr	r1, [r7, #0]
 8010696:	6878      	ldr	r0, [r7, #4]
 8010698:	f000 fbed 	bl	8010e76 <USBD_CtlError>
                break;
 801069c:	e091      	b.n	80107c2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801069e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	da0b      	bge.n	80106be <USBD_StdEPReq+0x212>
 80106a6:	7bbb      	ldrb	r3, [r7, #14]
 80106a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80106ac:	4613      	mov	r3, r2
 80106ae:	009b      	lsls	r3, r3, #2
 80106b0:	4413      	add	r3, r2
 80106b2:	009b      	lsls	r3, r3, #2
 80106b4:	3310      	adds	r3, #16
 80106b6:	687a      	ldr	r2, [r7, #4]
 80106b8:	4413      	add	r3, r2
 80106ba:	3304      	adds	r3, #4
 80106bc:	e00b      	b.n	80106d6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80106be:	7bbb      	ldrb	r3, [r7, #14]
 80106c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80106c4:	4613      	mov	r3, r2
 80106c6:	009b      	lsls	r3, r3, #2
 80106c8:	4413      	add	r3, r2
 80106ca:	009b      	lsls	r3, r3, #2
 80106cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80106d0:	687a      	ldr	r2, [r7, #4]
 80106d2:	4413      	add	r3, r2
 80106d4:	3304      	adds	r3, #4
 80106d6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80106d8:	68bb      	ldr	r3, [r7, #8]
 80106da:	2200      	movs	r2, #0
 80106dc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80106de:	68bb      	ldr	r3, [r7, #8]
 80106e0:	2202      	movs	r2, #2
 80106e2:	4619      	mov	r1, r3
 80106e4:	6878      	ldr	r0, [r7, #4]
 80106e6:	f000 fd44 	bl	8011172 <USBD_CtlSendData>
              break;
 80106ea:	e06a      	b.n	80107c2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80106ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	da11      	bge.n	8010718 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80106f4:	7bbb      	ldrb	r3, [r7, #14]
 80106f6:	f003 020f 	and.w	r2, r3, #15
 80106fa:	6879      	ldr	r1, [r7, #4]
 80106fc:	4613      	mov	r3, r2
 80106fe:	009b      	lsls	r3, r3, #2
 8010700:	4413      	add	r3, r2
 8010702:	009b      	lsls	r3, r3, #2
 8010704:	440b      	add	r3, r1
 8010706:	3324      	adds	r3, #36	@ 0x24
 8010708:	881b      	ldrh	r3, [r3, #0]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d117      	bne.n	801073e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801070e:	6839      	ldr	r1, [r7, #0]
 8010710:	6878      	ldr	r0, [r7, #4]
 8010712:	f000 fbb0 	bl	8010e76 <USBD_CtlError>
                  break;
 8010716:	e054      	b.n	80107c2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010718:	7bbb      	ldrb	r3, [r7, #14]
 801071a:	f003 020f 	and.w	r2, r3, #15
 801071e:	6879      	ldr	r1, [r7, #4]
 8010720:	4613      	mov	r3, r2
 8010722:	009b      	lsls	r3, r3, #2
 8010724:	4413      	add	r3, r2
 8010726:	009b      	lsls	r3, r3, #2
 8010728:	440b      	add	r3, r1
 801072a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801072e:	881b      	ldrh	r3, [r3, #0]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d104      	bne.n	801073e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8010734:	6839      	ldr	r1, [r7, #0]
 8010736:	6878      	ldr	r0, [r7, #4]
 8010738:	f000 fb9d 	bl	8010e76 <USBD_CtlError>
                  break;
 801073c:	e041      	b.n	80107c2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801073e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010742:	2b00      	cmp	r3, #0
 8010744:	da0b      	bge.n	801075e <USBD_StdEPReq+0x2b2>
 8010746:	7bbb      	ldrb	r3, [r7, #14]
 8010748:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801074c:	4613      	mov	r3, r2
 801074e:	009b      	lsls	r3, r3, #2
 8010750:	4413      	add	r3, r2
 8010752:	009b      	lsls	r3, r3, #2
 8010754:	3310      	adds	r3, #16
 8010756:	687a      	ldr	r2, [r7, #4]
 8010758:	4413      	add	r3, r2
 801075a:	3304      	adds	r3, #4
 801075c:	e00b      	b.n	8010776 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801075e:	7bbb      	ldrb	r3, [r7, #14]
 8010760:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010764:	4613      	mov	r3, r2
 8010766:	009b      	lsls	r3, r3, #2
 8010768:	4413      	add	r3, r2
 801076a:	009b      	lsls	r3, r3, #2
 801076c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010770:	687a      	ldr	r2, [r7, #4]
 8010772:	4413      	add	r3, r2
 8010774:	3304      	adds	r3, #4
 8010776:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010778:	7bbb      	ldrb	r3, [r7, #14]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d002      	beq.n	8010784 <USBD_StdEPReq+0x2d8>
 801077e:	7bbb      	ldrb	r3, [r7, #14]
 8010780:	2b80      	cmp	r3, #128	@ 0x80
 8010782:	d103      	bne.n	801078c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8010784:	68bb      	ldr	r3, [r7, #8]
 8010786:	2200      	movs	r2, #0
 8010788:	601a      	str	r2, [r3, #0]
 801078a:	e00e      	b.n	80107aa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801078c:	7bbb      	ldrb	r3, [r7, #14]
 801078e:	4619      	mov	r1, r3
 8010790:	6878      	ldr	r0, [r7, #4]
 8010792:	f7ff f95f 	bl	800fa54 <USBD_LL_IsStallEP>
 8010796:	4603      	mov	r3, r0
 8010798:	2b00      	cmp	r3, #0
 801079a:	d003      	beq.n	80107a4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 801079c:	68bb      	ldr	r3, [r7, #8]
 801079e:	2201      	movs	r2, #1
 80107a0:	601a      	str	r2, [r3, #0]
 80107a2:	e002      	b.n	80107aa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80107a4:	68bb      	ldr	r3, [r7, #8]
 80107a6:	2200      	movs	r2, #0
 80107a8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80107aa:	68bb      	ldr	r3, [r7, #8]
 80107ac:	2202      	movs	r2, #2
 80107ae:	4619      	mov	r1, r3
 80107b0:	6878      	ldr	r0, [r7, #4]
 80107b2:	f000 fcde 	bl	8011172 <USBD_CtlSendData>
              break;
 80107b6:	e004      	b.n	80107c2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80107b8:	6839      	ldr	r1, [r7, #0]
 80107ba:	6878      	ldr	r0, [r7, #4]
 80107bc:	f000 fb5b 	bl	8010e76 <USBD_CtlError>
              break;
 80107c0:	bf00      	nop
          }
          break;
 80107c2:	e004      	b.n	80107ce <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80107c4:	6839      	ldr	r1, [r7, #0]
 80107c6:	6878      	ldr	r0, [r7, #4]
 80107c8:	f000 fb55 	bl	8010e76 <USBD_CtlError>
          break;
 80107cc:	bf00      	nop
      }
      break;
 80107ce:	e005      	b.n	80107dc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80107d0:	6839      	ldr	r1, [r7, #0]
 80107d2:	6878      	ldr	r0, [r7, #4]
 80107d4:	f000 fb4f 	bl	8010e76 <USBD_CtlError>
      break;
 80107d8:	e000      	b.n	80107dc <USBD_StdEPReq+0x330>
      break;
 80107da:	bf00      	nop
  }

  return ret;
 80107dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80107de:	4618      	mov	r0, r3
 80107e0:	3710      	adds	r7, #16
 80107e2:	46bd      	mov	sp, r7
 80107e4:	bd80      	pop	{r7, pc}
	...

080107e8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b084      	sub	sp, #16
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
 80107f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80107f2:	2300      	movs	r3, #0
 80107f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80107f6:	2300      	movs	r3, #0
 80107f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80107fa:	2300      	movs	r3, #0
 80107fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80107fe:	683b      	ldr	r3, [r7, #0]
 8010800:	885b      	ldrh	r3, [r3, #2]
 8010802:	0a1b      	lsrs	r3, r3, #8
 8010804:	b29b      	uxth	r3, r3
 8010806:	3b01      	subs	r3, #1
 8010808:	2b06      	cmp	r3, #6
 801080a:	f200 8128 	bhi.w	8010a5e <USBD_GetDescriptor+0x276>
 801080e:	a201      	add	r2, pc, #4	@ (adr r2, 8010814 <USBD_GetDescriptor+0x2c>)
 8010810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010814:	08010831 	.word	0x08010831
 8010818:	08010849 	.word	0x08010849
 801081c:	08010889 	.word	0x08010889
 8010820:	08010a5f 	.word	0x08010a5f
 8010824:	08010a5f 	.word	0x08010a5f
 8010828:	080109ff 	.word	0x080109ff
 801082c:	08010a2b 	.word	0x08010a2b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	687a      	ldr	r2, [r7, #4]
 801083a:	7c12      	ldrb	r2, [r2, #16]
 801083c:	f107 0108 	add.w	r1, r7, #8
 8010840:	4610      	mov	r0, r2
 8010842:	4798      	blx	r3
 8010844:	60f8      	str	r0, [r7, #12]
      break;
 8010846:	e112      	b.n	8010a6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	7c1b      	ldrb	r3, [r3, #16]
 801084c:	2b00      	cmp	r3, #0
 801084e:	d10d      	bne.n	801086c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010858:	f107 0208 	add.w	r2, r7, #8
 801085c:	4610      	mov	r0, r2
 801085e:	4798      	blx	r3
 8010860:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	3301      	adds	r3, #1
 8010866:	2202      	movs	r2, #2
 8010868:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801086a:	e100      	b.n	8010a6e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010874:	f107 0208 	add.w	r2, r7, #8
 8010878:	4610      	mov	r0, r2
 801087a:	4798      	blx	r3
 801087c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	3301      	adds	r3, #1
 8010882:	2202      	movs	r2, #2
 8010884:	701a      	strb	r2, [r3, #0]
      break;
 8010886:	e0f2      	b.n	8010a6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010888:	683b      	ldr	r3, [r7, #0]
 801088a:	885b      	ldrh	r3, [r3, #2]
 801088c:	b2db      	uxtb	r3, r3
 801088e:	2b05      	cmp	r3, #5
 8010890:	f200 80ac 	bhi.w	80109ec <USBD_GetDescriptor+0x204>
 8010894:	a201      	add	r2, pc, #4	@ (adr r2, 801089c <USBD_GetDescriptor+0xb4>)
 8010896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801089a:	bf00      	nop
 801089c:	080108b5 	.word	0x080108b5
 80108a0:	080108e9 	.word	0x080108e9
 80108a4:	0801091d 	.word	0x0801091d
 80108a8:	08010951 	.word	0x08010951
 80108ac:	08010985 	.word	0x08010985
 80108b0:	080109b9 	.word	0x080109b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80108ba:	685b      	ldr	r3, [r3, #4]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d00b      	beq.n	80108d8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80108c6:	685b      	ldr	r3, [r3, #4]
 80108c8:	687a      	ldr	r2, [r7, #4]
 80108ca:	7c12      	ldrb	r2, [r2, #16]
 80108cc:	f107 0108 	add.w	r1, r7, #8
 80108d0:	4610      	mov	r0, r2
 80108d2:	4798      	blx	r3
 80108d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80108d6:	e091      	b.n	80109fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80108d8:	6839      	ldr	r1, [r7, #0]
 80108da:	6878      	ldr	r0, [r7, #4]
 80108dc:	f000 facb 	bl	8010e76 <USBD_CtlError>
            err++;
 80108e0:	7afb      	ldrb	r3, [r7, #11]
 80108e2:	3301      	adds	r3, #1
 80108e4:	72fb      	strb	r3, [r7, #11]
          break;
 80108e6:	e089      	b.n	80109fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80108ee:	689b      	ldr	r3, [r3, #8]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d00b      	beq.n	801090c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80108fa:	689b      	ldr	r3, [r3, #8]
 80108fc:	687a      	ldr	r2, [r7, #4]
 80108fe:	7c12      	ldrb	r2, [r2, #16]
 8010900:	f107 0108 	add.w	r1, r7, #8
 8010904:	4610      	mov	r0, r2
 8010906:	4798      	blx	r3
 8010908:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801090a:	e077      	b.n	80109fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801090c:	6839      	ldr	r1, [r7, #0]
 801090e:	6878      	ldr	r0, [r7, #4]
 8010910:	f000 fab1 	bl	8010e76 <USBD_CtlError>
            err++;
 8010914:	7afb      	ldrb	r3, [r7, #11]
 8010916:	3301      	adds	r3, #1
 8010918:	72fb      	strb	r3, [r7, #11]
          break;
 801091a:	e06f      	b.n	80109fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010922:	68db      	ldr	r3, [r3, #12]
 8010924:	2b00      	cmp	r3, #0
 8010926:	d00b      	beq.n	8010940 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801092e:	68db      	ldr	r3, [r3, #12]
 8010930:	687a      	ldr	r2, [r7, #4]
 8010932:	7c12      	ldrb	r2, [r2, #16]
 8010934:	f107 0108 	add.w	r1, r7, #8
 8010938:	4610      	mov	r0, r2
 801093a:	4798      	blx	r3
 801093c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801093e:	e05d      	b.n	80109fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010940:	6839      	ldr	r1, [r7, #0]
 8010942:	6878      	ldr	r0, [r7, #4]
 8010944:	f000 fa97 	bl	8010e76 <USBD_CtlError>
            err++;
 8010948:	7afb      	ldrb	r3, [r7, #11]
 801094a:	3301      	adds	r3, #1
 801094c:	72fb      	strb	r3, [r7, #11]
          break;
 801094e:	e055      	b.n	80109fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010956:	691b      	ldr	r3, [r3, #16]
 8010958:	2b00      	cmp	r3, #0
 801095a:	d00b      	beq.n	8010974 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010962:	691b      	ldr	r3, [r3, #16]
 8010964:	687a      	ldr	r2, [r7, #4]
 8010966:	7c12      	ldrb	r2, [r2, #16]
 8010968:	f107 0108 	add.w	r1, r7, #8
 801096c:	4610      	mov	r0, r2
 801096e:	4798      	blx	r3
 8010970:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010972:	e043      	b.n	80109fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010974:	6839      	ldr	r1, [r7, #0]
 8010976:	6878      	ldr	r0, [r7, #4]
 8010978:	f000 fa7d 	bl	8010e76 <USBD_CtlError>
            err++;
 801097c:	7afb      	ldrb	r3, [r7, #11]
 801097e:	3301      	adds	r3, #1
 8010980:	72fb      	strb	r3, [r7, #11]
          break;
 8010982:	e03b      	b.n	80109fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801098a:	695b      	ldr	r3, [r3, #20]
 801098c:	2b00      	cmp	r3, #0
 801098e:	d00b      	beq.n	80109a8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010996:	695b      	ldr	r3, [r3, #20]
 8010998:	687a      	ldr	r2, [r7, #4]
 801099a:	7c12      	ldrb	r2, [r2, #16]
 801099c:	f107 0108 	add.w	r1, r7, #8
 80109a0:	4610      	mov	r0, r2
 80109a2:	4798      	blx	r3
 80109a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80109a6:	e029      	b.n	80109fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80109a8:	6839      	ldr	r1, [r7, #0]
 80109aa:	6878      	ldr	r0, [r7, #4]
 80109ac:	f000 fa63 	bl	8010e76 <USBD_CtlError>
            err++;
 80109b0:	7afb      	ldrb	r3, [r7, #11]
 80109b2:	3301      	adds	r3, #1
 80109b4:	72fb      	strb	r3, [r7, #11]
          break;
 80109b6:	e021      	b.n	80109fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80109be:	699b      	ldr	r3, [r3, #24]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d00b      	beq.n	80109dc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80109ca:	699b      	ldr	r3, [r3, #24]
 80109cc:	687a      	ldr	r2, [r7, #4]
 80109ce:	7c12      	ldrb	r2, [r2, #16]
 80109d0:	f107 0108 	add.w	r1, r7, #8
 80109d4:	4610      	mov	r0, r2
 80109d6:	4798      	blx	r3
 80109d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80109da:	e00f      	b.n	80109fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80109dc:	6839      	ldr	r1, [r7, #0]
 80109de:	6878      	ldr	r0, [r7, #4]
 80109e0:	f000 fa49 	bl	8010e76 <USBD_CtlError>
            err++;
 80109e4:	7afb      	ldrb	r3, [r7, #11]
 80109e6:	3301      	adds	r3, #1
 80109e8:	72fb      	strb	r3, [r7, #11]
          break;
 80109ea:	e007      	b.n	80109fc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80109ec:	6839      	ldr	r1, [r7, #0]
 80109ee:	6878      	ldr	r0, [r7, #4]
 80109f0:	f000 fa41 	bl	8010e76 <USBD_CtlError>
          err++;
 80109f4:	7afb      	ldrb	r3, [r7, #11]
 80109f6:	3301      	adds	r3, #1
 80109f8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80109fa:	bf00      	nop
      }
      break;
 80109fc:	e037      	b.n	8010a6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	7c1b      	ldrb	r3, [r3, #16]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d109      	bne.n	8010a1a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010a0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a0e:	f107 0208 	add.w	r2, r7, #8
 8010a12:	4610      	mov	r0, r2
 8010a14:	4798      	blx	r3
 8010a16:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010a18:	e029      	b.n	8010a6e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8010a1a:	6839      	ldr	r1, [r7, #0]
 8010a1c:	6878      	ldr	r0, [r7, #4]
 8010a1e:	f000 fa2a 	bl	8010e76 <USBD_CtlError>
        err++;
 8010a22:	7afb      	ldrb	r3, [r7, #11]
 8010a24:	3301      	adds	r3, #1
 8010a26:	72fb      	strb	r3, [r7, #11]
      break;
 8010a28:	e021      	b.n	8010a6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	7c1b      	ldrb	r3, [r3, #16]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d10d      	bne.n	8010a4e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010a3a:	f107 0208 	add.w	r2, r7, #8
 8010a3e:	4610      	mov	r0, r2
 8010a40:	4798      	blx	r3
 8010a42:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	3301      	adds	r3, #1
 8010a48:	2207      	movs	r2, #7
 8010a4a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010a4c:	e00f      	b.n	8010a6e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8010a4e:	6839      	ldr	r1, [r7, #0]
 8010a50:	6878      	ldr	r0, [r7, #4]
 8010a52:	f000 fa10 	bl	8010e76 <USBD_CtlError>
        err++;
 8010a56:	7afb      	ldrb	r3, [r7, #11]
 8010a58:	3301      	adds	r3, #1
 8010a5a:	72fb      	strb	r3, [r7, #11]
      break;
 8010a5c:	e007      	b.n	8010a6e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8010a5e:	6839      	ldr	r1, [r7, #0]
 8010a60:	6878      	ldr	r0, [r7, #4]
 8010a62:	f000 fa08 	bl	8010e76 <USBD_CtlError>
      err++;
 8010a66:	7afb      	ldrb	r3, [r7, #11]
 8010a68:	3301      	adds	r3, #1
 8010a6a:	72fb      	strb	r3, [r7, #11]
      break;
 8010a6c:	bf00      	nop
  }

  if (err != 0U)
 8010a6e:	7afb      	ldrb	r3, [r7, #11]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d11e      	bne.n	8010ab2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8010a74:	683b      	ldr	r3, [r7, #0]
 8010a76:	88db      	ldrh	r3, [r3, #6]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d016      	beq.n	8010aaa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8010a7c:	893b      	ldrh	r3, [r7, #8]
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d00e      	beq.n	8010aa0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8010a82:	683b      	ldr	r3, [r7, #0]
 8010a84:	88da      	ldrh	r2, [r3, #6]
 8010a86:	893b      	ldrh	r3, [r7, #8]
 8010a88:	4293      	cmp	r3, r2
 8010a8a:	bf28      	it	cs
 8010a8c:	4613      	movcs	r3, r2
 8010a8e:	b29b      	uxth	r3, r3
 8010a90:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010a92:	893b      	ldrh	r3, [r7, #8]
 8010a94:	461a      	mov	r2, r3
 8010a96:	68f9      	ldr	r1, [r7, #12]
 8010a98:	6878      	ldr	r0, [r7, #4]
 8010a9a:	f000 fb6a 	bl	8011172 <USBD_CtlSendData>
 8010a9e:	e009      	b.n	8010ab4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8010aa0:	6839      	ldr	r1, [r7, #0]
 8010aa2:	6878      	ldr	r0, [r7, #4]
 8010aa4:	f000 f9e7 	bl	8010e76 <USBD_CtlError>
 8010aa8:	e004      	b.n	8010ab4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8010aaa:	6878      	ldr	r0, [r7, #4]
 8010aac:	f000 fbbb 	bl	8011226 <USBD_CtlSendStatus>
 8010ab0:	e000      	b.n	8010ab4 <USBD_GetDescriptor+0x2cc>
    return;
 8010ab2:	bf00      	nop
  }
}
 8010ab4:	3710      	adds	r7, #16
 8010ab6:	46bd      	mov	sp, r7
 8010ab8:	bd80      	pop	{r7, pc}
 8010aba:	bf00      	nop

08010abc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010abc:	b580      	push	{r7, lr}
 8010abe:	b084      	sub	sp, #16
 8010ac0:	af00      	add	r7, sp, #0
 8010ac2:	6078      	str	r0, [r7, #4]
 8010ac4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010ac6:	683b      	ldr	r3, [r7, #0]
 8010ac8:	889b      	ldrh	r3, [r3, #4]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d131      	bne.n	8010b32 <USBD_SetAddress+0x76>
 8010ace:	683b      	ldr	r3, [r7, #0]
 8010ad0:	88db      	ldrh	r3, [r3, #6]
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d12d      	bne.n	8010b32 <USBD_SetAddress+0x76>
 8010ad6:	683b      	ldr	r3, [r7, #0]
 8010ad8:	885b      	ldrh	r3, [r3, #2]
 8010ada:	2b7f      	cmp	r3, #127	@ 0x7f
 8010adc:	d829      	bhi.n	8010b32 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010ade:	683b      	ldr	r3, [r7, #0]
 8010ae0:	885b      	ldrh	r3, [r3, #2]
 8010ae2:	b2db      	uxtb	r3, r3
 8010ae4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010ae8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010af0:	b2db      	uxtb	r3, r3
 8010af2:	2b03      	cmp	r3, #3
 8010af4:	d104      	bne.n	8010b00 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8010af6:	6839      	ldr	r1, [r7, #0]
 8010af8:	6878      	ldr	r0, [r7, #4]
 8010afa:	f000 f9bc 	bl	8010e76 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010afe:	e01d      	b.n	8010b3c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	7bfa      	ldrb	r2, [r7, #15]
 8010b04:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010b08:	7bfb      	ldrb	r3, [r7, #15]
 8010b0a:	4619      	mov	r1, r3
 8010b0c:	6878      	ldr	r0, [r7, #4]
 8010b0e:	f7fe ffcd 	bl	800faac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010b12:	6878      	ldr	r0, [r7, #4]
 8010b14:	f000 fb87 	bl	8011226 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010b18:	7bfb      	ldrb	r3, [r7, #15]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d004      	beq.n	8010b28 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	2202      	movs	r2, #2
 8010b22:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010b26:	e009      	b.n	8010b3c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	2201      	movs	r2, #1
 8010b2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010b30:	e004      	b.n	8010b3c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010b32:	6839      	ldr	r1, [r7, #0]
 8010b34:	6878      	ldr	r0, [r7, #4]
 8010b36:	f000 f99e 	bl	8010e76 <USBD_CtlError>
  }
}
 8010b3a:	bf00      	nop
 8010b3c:	bf00      	nop
 8010b3e:	3710      	adds	r7, #16
 8010b40:	46bd      	mov	sp, r7
 8010b42:	bd80      	pop	{r7, pc}

08010b44 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010b44:	b580      	push	{r7, lr}
 8010b46:	b084      	sub	sp, #16
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	6078      	str	r0, [r7, #4]
 8010b4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010b4e:	2300      	movs	r3, #0
 8010b50:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010b52:	683b      	ldr	r3, [r7, #0]
 8010b54:	885b      	ldrh	r3, [r3, #2]
 8010b56:	b2da      	uxtb	r2, r3
 8010b58:	4b4e      	ldr	r3, [pc, #312]	@ (8010c94 <USBD_SetConfig+0x150>)
 8010b5a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010b5c:	4b4d      	ldr	r3, [pc, #308]	@ (8010c94 <USBD_SetConfig+0x150>)
 8010b5e:	781b      	ldrb	r3, [r3, #0]
 8010b60:	2b01      	cmp	r3, #1
 8010b62:	d905      	bls.n	8010b70 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010b64:	6839      	ldr	r1, [r7, #0]
 8010b66:	6878      	ldr	r0, [r7, #4]
 8010b68:	f000 f985 	bl	8010e76 <USBD_CtlError>
    return USBD_FAIL;
 8010b6c:	2303      	movs	r3, #3
 8010b6e:	e08c      	b.n	8010c8a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010b76:	b2db      	uxtb	r3, r3
 8010b78:	2b02      	cmp	r3, #2
 8010b7a:	d002      	beq.n	8010b82 <USBD_SetConfig+0x3e>
 8010b7c:	2b03      	cmp	r3, #3
 8010b7e:	d029      	beq.n	8010bd4 <USBD_SetConfig+0x90>
 8010b80:	e075      	b.n	8010c6e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8010b82:	4b44      	ldr	r3, [pc, #272]	@ (8010c94 <USBD_SetConfig+0x150>)
 8010b84:	781b      	ldrb	r3, [r3, #0]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d020      	beq.n	8010bcc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8010b8a:	4b42      	ldr	r3, [pc, #264]	@ (8010c94 <USBD_SetConfig+0x150>)
 8010b8c:	781b      	ldrb	r3, [r3, #0]
 8010b8e:	461a      	mov	r2, r3
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010b94:	4b3f      	ldr	r3, [pc, #252]	@ (8010c94 <USBD_SetConfig+0x150>)
 8010b96:	781b      	ldrb	r3, [r3, #0]
 8010b98:	4619      	mov	r1, r3
 8010b9a:	6878      	ldr	r0, [r7, #4]
 8010b9c:	f7ff f8a9 	bl	800fcf2 <USBD_SetClassConfig>
 8010ba0:	4603      	mov	r3, r0
 8010ba2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8010ba4:	7bfb      	ldrb	r3, [r7, #15]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d008      	beq.n	8010bbc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8010baa:	6839      	ldr	r1, [r7, #0]
 8010bac:	6878      	ldr	r0, [r7, #4]
 8010bae:	f000 f962 	bl	8010e76 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	2202      	movs	r2, #2
 8010bb6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010bba:	e065      	b.n	8010c88 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010bbc:	6878      	ldr	r0, [r7, #4]
 8010bbe:	f000 fb32 	bl	8011226 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	2203      	movs	r2, #3
 8010bc6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010bca:	e05d      	b.n	8010c88 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010bcc:	6878      	ldr	r0, [r7, #4]
 8010bce:	f000 fb2a 	bl	8011226 <USBD_CtlSendStatus>
      break;
 8010bd2:	e059      	b.n	8010c88 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010bd4:	4b2f      	ldr	r3, [pc, #188]	@ (8010c94 <USBD_SetConfig+0x150>)
 8010bd6:	781b      	ldrb	r3, [r3, #0]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d112      	bne.n	8010c02 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	2202      	movs	r2, #2
 8010be0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8010be4:	4b2b      	ldr	r3, [pc, #172]	@ (8010c94 <USBD_SetConfig+0x150>)
 8010be6:	781b      	ldrb	r3, [r3, #0]
 8010be8:	461a      	mov	r2, r3
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010bee:	4b29      	ldr	r3, [pc, #164]	@ (8010c94 <USBD_SetConfig+0x150>)
 8010bf0:	781b      	ldrb	r3, [r3, #0]
 8010bf2:	4619      	mov	r1, r3
 8010bf4:	6878      	ldr	r0, [r7, #4]
 8010bf6:	f7ff f898 	bl	800fd2a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8010bfa:	6878      	ldr	r0, [r7, #4]
 8010bfc:	f000 fb13 	bl	8011226 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010c00:	e042      	b.n	8010c88 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8010c02:	4b24      	ldr	r3, [pc, #144]	@ (8010c94 <USBD_SetConfig+0x150>)
 8010c04:	781b      	ldrb	r3, [r3, #0]
 8010c06:	461a      	mov	r2, r3
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	685b      	ldr	r3, [r3, #4]
 8010c0c:	429a      	cmp	r2, r3
 8010c0e:	d02a      	beq.n	8010c66 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	685b      	ldr	r3, [r3, #4]
 8010c14:	b2db      	uxtb	r3, r3
 8010c16:	4619      	mov	r1, r3
 8010c18:	6878      	ldr	r0, [r7, #4]
 8010c1a:	f7ff f886 	bl	800fd2a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010c1e:	4b1d      	ldr	r3, [pc, #116]	@ (8010c94 <USBD_SetConfig+0x150>)
 8010c20:	781b      	ldrb	r3, [r3, #0]
 8010c22:	461a      	mov	r2, r3
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010c28:	4b1a      	ldr	r3, [pc, #104]	@ (8010c94 <USBD_SetConfig+0x150>)
 8010c2a:	781b      	ldrb	r3, [r3, #0]
 8010c2c:	4619      	mov	r1, r3
 8010c2e:	6878      	ldr	r0, [r7, #4]
 8010c30:	f7ff f85f 	bl	800fcf2 <USBD_SetClassConfig>
 8010c34:	4603      	mov	r3, r0
 8010c36:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010c38:	7bfb      	ldrb	r3, [r7, #15]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d00f      	beq.n	8010c5e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8010c3e:	6839      	ldr	r1, [r7, #0]
 8010c40:	6878      	ldr	r0, [r7, #4]
 8010c42:	f000 f918 	bl	8010e76 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	685b      	ldr	r3, [r3, #4]
 8010c4a:	b2db      	uxtb	r3, r3
 8010c4c:	4619      	mov	r1, r3
 8010c4e:	6878      	ldr	r0, [r7, #4]
 8010c50:	f7ff f86b 	bl	800fd2a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	2202      	movs	r2, #2
 8010c58:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010c5c:	e014      	b.n	8010c88 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010c5e:	6878      	ldr	r0, [r7, #4]
 8010c60:	f000 fae1 	bl	8011226 <USBD_CtlSendStatus>
      break;
 8010c64:	e010      	b.n	8010c88 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010c66:	6878      	ldr	r0, [r7, #4]
 8010c68:	f000 fadd 	bl	8011226 <USBD_CtlSendStatus>
      break;
 8010c6c:	e00c      	b.n	8010c88 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8010c6e:	6839      	ldr	r1, [r7, #0]
 8010c70:	6878      	ldr	r0, [r7, #4]
 8010c72:	f000 f900 	bl	8010e76 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010c76:	4b07      	ldr	r3, [pc, #28]	@ (8010c94 <USBD_SetConfig+0x150>)
 8010c78:	781b      	ldrb	r3, [r3, #0]
 8010c7a:	4619      	mov	r1, r3
 8010c7c:	6878      	ldr	r0, [r7, #4]
 8010c7e:	f7ff f854 	bl	800fd2a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8010c82:	2303      	movs	r3, #3
 8010c84:	73fb      	strb	r3, [r7, #15]
      break;
 8010c86:	bf00      	nop
  }

  return ret;
 8010c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	3710      	adds	r7, #16
 8010c8e:	46bd      	mov	sp, r7
 8010c90:	bd80      	pop	{r7, pc}
 8010c92:	bf00      	nop
 8010c94:	20011164 	.word	0x20011164

08010c98 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b082      	sub	sp, #8
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
 8010ca0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010ca2:	683b      	ldr	r3, [r7, #0]
 8010ca4:	88db      	ldrh	r3, [r3, #6]
 8010ca6:	2b01      	cmp	r3, #1
 8010ca8:	d004      	beq.n	8010cb4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010caa:	6839      	ldr	r1, [r7, #0]
 8010cac:	6878      	ldr	r0, [r7, #4]
 8010cae:	f000 f8e2 	bl	8010e76 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8010cb2:	e023      	b.n	8010cfc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010cba:	b2db      	uxtb	r3, r3
 8010cbc:	2b02      	cmp	r3, #2
 8010cbe:	dc02      	bgt.n	8010cc6 <USBD_GetConfig+0x2e>
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	dc03      	bgt.n	8010ccc <USBD_GetConfig+0x34>
 8010cc4:	e015      	b.n	8010cf2 <USBD_GetConfig+0x5a>
 8010cc6:	2b03      	cmp	r3, #3
 8010cc8:	d00b      	beq.n	8010ce2 <USBD_GetConfig+0x4a>
 8010cca:	e012      	b.n	8010cf2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	2200      	movs	r2, #0
 8010cd0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	3308      	adds	r3, #8
 8010cd6:	2201      	movs	r2, #1
 8010cd8:	4619      	mov	r1, r3
 8010cda:	6878      	ldr	r0, [r7, #4]
 8010cdc:	f000 fa49 	bl	8011172 <USBD_CtlSendData>
        break;
 8010ce0:	e00c      	b.n	8010cfc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	3304      	adds	r3, #4
 8010ce6:	2201      	movs	r2, #1
 8010ce8:	4619      	mov	r1, r3
 8010cea:	6878      	ldr	r0, [r7, #4]
 8010cec:	f000 fa41 	bl	8011172 <USBD_CtlSendData>
        break;
 8010cf0:	e004      	b.n	8010cfc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8010cf2:	6839      	ldr	r1, [r7, #0]
 8010cf4:	6878      	ldr	r0, [r7, #4]
 8010cf6:	f000 f8be 	bl	8010e76 <USBD_CtlError>
        break;
 8010cfa:	bf00      	nop
}
 8010cfc:	bf00      	nop
 8010cfe:	3708      	adds	r7, #8
 8010d00:	46bd      	mov	sp, r7
 8010d02:	bd80      	pop	{r7, pc}

08010d04 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b082      	sub	sp, #8
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	6078      	str	r0, [r7, #4]
 8010d0c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010d14:	b2db      	uxtb	r3, r3
 8010d16:	3b01      	subs	r3, #1
 8010d18:	2b02      	cmp	r3, #2
 8010d1a:	d81e      	bhi.n	8010d5a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010d1c:	683b      	ldr	r3, [r7, #0]
 8010d1e:	88db      	ldrh	r3, [r3, #6]
 8010d20:	2b02      	cmp	r3, #2
 8010d22:	d004      	beq.n	8010d2e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010d24:	6839      	ldr	r1, [r7, #0]
 8010d26:	6878      	ldr	r0, [r7, #4]
 8010d28:	f000 f8a5 	bl	8010e76 <USBD_CtlError>
        break;
 8010d2c:	e01a      	b.n	8010d64 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	2201      	movs	r2, #1
 8010d32:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d005      	beq.n	8010d4a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	68db      	ldr	r3, [r3, #12]
 8010d42:	f043 0202 	orr.w	r2, r3, #2
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	330c      	adds	r3, #12
 8010d4e:	2202      	movs	r2, #2
 8010d50:	4619      	mov	r1, r3
 8010d52:	6878      	ldr	r0, [r7, #4]
 8010d54:	f000 fa0d 	bl	8011172 <USBD_CtlSendData>
      break;
 8010d58:	e004      	b.n	8010d64 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010d5a:	6839      	ldr	r1, [r7, #0]
 8010d5c:	6878      	ldr	r0, [r7, #4]
 8010d5e:	f000 f88a 	bl	8010e76 <USBD_CtlError>
      break;
 8010d62:	bf00      	nop
  }
}
 8010d64:	bf00      	nop
 8010d66:	3708      	adds	r7, #8
 8010d68:	46bd      	mov	sp, r7
 8010d6a:	bd80      	pop	{r7, pc}

08010d6c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b082      	sub	sp, #8
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	6078      	str	r0, [r7, #4]
 8010d74:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010d76:	683b      	ldr	r3, [r7, #0]
 8010d78:	885b      	ldrh	r3, [r3, #2]
 8010d7a:	2b01      	cmp	r3, #1
 8010d7c:	d107      	bne.n	8010d8e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	2201      	movs	r2, #1
 8010d82:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010d86:	6878      	ldr	r0, [r7, #4]
 8010d88:	f000 fa4d 	bl	8011226 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8010d8c:	e013      	b.n	8010db6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8010d8e:	683b      	ldr	r3, [r7, #0]
 8010d90:	885b      	ldrh	r3, [r3, #2]
 8010d92:	2b02      	cmp	r3, #2
 8010d94:	d10b      	bne.n	8010dae <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8010d96:	683b      	ldr	r3, [r7, #0]
 8010d98:	889b      	ldrh	r3, [r3, #4]
 8010d9a:	0a1b      	lsrs	r3, r3, #8
 8010d9c:	b29b      	uxth	r3, r3
 8010d9e:	b2da      	uxtb	r2, r3
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8010da6:	6878      	ldr	r0, [r7, #4]
 8010da8:	f000 fa3d 	bl	8011226 <USBD_CtlSendStatus>
}
 8010dac:	e003      	b.n	8010db6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8010dae:	6839      	ldr	r1, [r7, #0]
 8010db0:	6878      	ldr	r0, [r7, #4]
 8010db2:	f000 f860 	bl	8010e76 <USBD_CtlError>
}
 8010db6:	bf00      	nop
 8010db8:	3708      	adds	r7, #8
 8010dba:	46bd      	mov	sp, r7
 8010dbc:	bd80      	pop	{r7, pc}

08010dbe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010dbe:	b580      	push	{r7, lr}
 8010dc0:	b082      	sub	sp, #8
 8010dc2:	af00      	add	r7, sp, #0
 8010dc4:	6078      	str	r0, [r7, #4]
 8010dc6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010dce:	b2db      	uxtb	r3, r3
 8010dd0:	3b01      	subs	r3, #1
 8010dd2:	2b02      	cmp	r3, #2
 8010dd4:	d80b      	bhi.n	8010dee <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010dd6:	683b      	ldr	r3, [r7, #0]
 8010dd8:	885b      	ldrh	r3, [r3, #2]
 8010dda:	2b01      	cmp	r3, #1
 8010ddc:	d10c      	bne.n	8010df8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	2200      	movs	r2, #0
 8010de2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010de6:	6878      	ldr	r0, [r7, #4]
 8010de8:	f000 fa1d 	bl	8011226 <USBD_CtlSendStatus>
      }
      break;
 8010dec:	e004      	b.n	8010df8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010dee:	6839      	ldr	r1, [r7, #0]
 8010df0:	6878      	ldr	r0, [r7, #4]
 8010df2:	f000 f840 	bl	8010e76 <USBD_CtlError>
      break;
 8010df6:	e000      	b.n	8010dfa <USBD_ClrFeature+0x3c>
      break;
 8010df8:	bf00      	nop
  }
}
 8010dfa:	bf00      	nop
 8010dfc:	3708      	adds	r7, #8
 8010dfe:	46bd      	mov	sp, r7
 8010e00:	bd80      	pop	{r7, pc}

08010e02 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010e02:	b580      	push	{r7, lr}
 8010e04:	b084      	sub	sp, #16
 8010e06:	af00      	add	r7, sp, #0
 8010e08:	6078      	str	r0, [r7, #4]
 8010e0a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010e0c:	683b      	ldr	r3, [r7, #0]
 8010e0e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	781a      	ldrb	r2, [r3, #0]
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	3301      	adds	r3, #1
 8010e1c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	781a      	ldrb	r2, [r3, #0]
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	3301      	adds	r3, #1
 8010e2a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010e2c:	68f8      	ldr	r0, [r7, #12]
 8010e2e:	f7ff fa40 	bl	80102b2 <SWAPBYTE>
 8010e32:	4603      	mov	r3, r0
 8010e34:	461a      	mov	r2, r3
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	3301      	adds	r3, #1
 8010e3e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	3301      	adds	r3, #1
 8010e44:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010e46:	68f8      	ldr	r0, [r7, #12]
 8010e48:	f7ff fa33 	bl	80102b2 <SWAPBYTE>
 8010e4c:	4603      	mov	r3, r0
 8010e4e:	461a      	mov	r2, r3
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	3301      	adds	r3, #1
 8010e58:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	3301      	adds	r3, #1
 8010e5e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010e60:	68f8      	ldr	r0, [r7, #12]
 8010e62:	f7ff fa26 	bl	80102b2 <SWAPBYTE>
 8010e66:	4603      	mov	r3, r0
 8010e68:	461a      	mov	r2, r3
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	80da      	strh	r2, [r3, #6]
}
 8010e6e:	bf00      	nop
 8010e70:	3710      	adds	r7, #16
 8010e72:	46bd      	mov	sp, r7
 8010e74:	bd80      	pop	{r7, pc}

08010e76 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010e76:	b580      	push	{r7, lr}
 8010e78:	b082      	sub	sp, #8
 8010e7a:	af00      	add	r7, sp, #0
 8010e7c:	6078      	str	r0, [r7, #4]
 8010e7e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010e80:	2180      	movs	r1, #128	@ 0x80
 8010e82:	6878      	ldr	r0, [r7, #4]
 8010e84:	f7fe fdb4 	bl	800f9f0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010e88:	2100      	movs	r1, #0
 8010e8a:	6878      	ldr	r0, [r7, #4]
 8010e8c:	f7fe fdb0 	bl	800f9f0 <USBD_LL_StallEP>
}
 8010e90:	bf00      	nop
 8010e92:	3708      	adds	r7, #8
 8010e94:	46bd      	mov	sp, r7
 8010e96:	bd80      	pop	{r7, pc}

08010e98 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010e98:	b580      	push	{r7, lr}
 8010e9a:	b086      	sub	sp, #24
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	60f8      	str	r0, [r7, #12]
 8010ea0:	60b9      	str	r1, [r7, #8]
 8010ea2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d036      	beq.n	8010f1c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010eb2:	6938      	ldr	r0, [r7, #16]
 8010eb4:	f000 f836 	bl	8010f24 <USBD_GetLen>
 8010eb8:	4603      	mov	r3, r0
 8010eba:	3301      	adds	r3, #1
 8010ebc:	b29b      	uxth	r3, r3
 8010ebe:	005b      	lsls	r3, r3, #1
 8010ec0:	b29a      	uxth	r2, r3
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010ec6:	7dfb      	ldrb	r3, [r7, #23]
 8010ec8:	68ba      	ldr	r2, [r7, #8]
 8010eca:	4413      	add	r3, r2
 8010ecc:	687a      	ldr	r2, [r7, #4]
 8010ece:	7812      	ldrb	r2, [r2, #0]
 8010ed0:	701a      	strb	r2, [r3, #0]
  idx++;
 8010ed2:	7dfb      	ldrb	r3, [r7, #23]
 8010ed4:	3301      	adds	r3, #1
 8010ed6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010ed8:	7dfb      	ldrb	r3, [r7, #23]
 8010eda:	68ba      	ldr	r2, [r7, #8]
 8010edc:	4413      	add	r3, r2
 8010ede:	2203      	movs	r2, #3
 8010ee0:	701a      	strb	r2, [r3, #0]
  idx++;
 8010ee2:	7dfb      	ldrb	r3, [r7, #23]
 8010ee4:	3301      	adds	r3, #1
 8010ee6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010ee8:	e013      	b.n	8010f12 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8010eea:	7dfb      	ldrb	r3, [r7, #23]
 8010eec:	68ba      	ldr	r2, [r7, #8]
 8010eee:	4413      	add	r3, r2
 8010ef0:	693a      	ldr	r2, [r7, #16]
 8010ef2:	7812      	ldrb	r2, [r2, #0]
 8010ef4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010ef6:	693b      	ldr	r3, [r7, #16]
 8010ef8:	3301      	adds	r3, #1
 8010efa:	613b      	str	r3, [r7, #16]
    idx++;
 8010efc:	7dfb      	ldrb	r3, [r7, #23]
 8010efe:	3301      	adds	r3, #1
 8010f00:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010f02:	7dfb      	ldrb	r3, [r7, #23]
 8010f04:	68ba      	ldr	r2, [r7, #8]
 8010f06:	4413      	add	r3, r2
 8010f08:	2200      	movs	r2, #0
 8010f0a:	701a      	strb	r2, [r3, #0]
    idx++;
 8010f0c:	7dfb      	ldrb	r3, [r7, #23]
 8010f0e:	3301      	adds	r3, #1
 8010f10:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010f12:	693b      	ldr	r3, [r7, #16]
 8010f14:	781b      	ldrb	r3, [r3, #0]
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d1e7      	bne.n	8010eea <USBD_GetString+0x52>
 8010f1a:	e000      	b.n	8010f1e <USBD_GetString+0x86>
    return;
 8010f1c:	bf00      	nop
  }
}
 8010f1e:	3718      	adds	r7, #24
 8010f20:	46bd      	mov	sp, r7
 8010f22:	bd80      	pop	{r7, pc}

08010f24 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010f24:	b480      	push	{r7}
 8010f26:	b085      	sub	sp, #20
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010f2c:	2300      	movs	r3, #0
 8010f2e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010f34:	e005      	b.n	8010f42 <USBD_GetLen+0x1e>
  {
    len++;
 8010f36:	7bfb      	ldrb	r3, [r7, #15]
 8010f38:	3301      	adds	r3, #1
 8010f3a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010f3c:	68bb      	ldr	r3, [r7, #8]
 8010f3e:	3301      	adds	r3, #1
 8010f40:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010f42:	68bb      	ldr	r3, [r7, #8]
 8010f44:	781b      	ldrb	r3, [r3, #0]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d1f5      	bne.n	8010f36 <USBD_GetLen+0x12>
  }

  return len;
 8010f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	3714      	adds	r7, #20
 8010f50:	46bd      	mov	sp, r7
 8010f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f56:	4770      	bx	lr

08010f58 <USBD_Class_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010f58:	b480      	push	{r7}
 8010f5a:	b083      	sub	sp, #12
 8010f5c:	af00      	add	r7, sp, #0
 8010f5e:	4603      	mov	r3, r0
 8010f60:	6039      	str	r1, [r7, #0]
 8010f62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_DeviceDesc);
 8010f64:	683b      	ldr	r3, [r7, #0]
 8010f66:	2212      	movs	r2, #18
 8010f68:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_DeviceDesc;
 8010f6a:	4b03      	ldr	r3, [pc, #12]	@ (8010f78 <USBD_Class_DeviceDescriptor+0x20>)
}
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	370c      	adds	r7, #12
 8010f70:	46bd      	mov	sp, r7
 8010f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f76:	4770      	bx	lr
 8010f78:	200000f0 	.word	0x200000f0

08010f7c <USBD_Class_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010f7c:	b480      	push	{r7}
 8010f7e:	b083      	sub	sp, #12
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	4603      	mov	r3, r0
 8010f84:	6039      	str	r1, [r7, #0]
 8010f86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_LangIDDesc);
 8010f88:	683b      	ldr	r3, [r7, #0]
 8010f8a:	2204      	movs	r2, #4
 8010f8c:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_LangIDDesc;
 8010f8e:	4b03      	ldr	r3, [pc, #12]	@ (8010f9c <USBD_Class_LangIDStrDescriptor+0x20>)
}
 8010f90:	4618      	mov	r0, r3
 8010f92:	370c      	adds	r7, #12
 8010f94:	46bd      	mov	sp, r7
 8010f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9a:	4770      	bx	lr
 8010f9c:	20000104 	.word	0x20000104

08010fa0 <USBD_Class_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b082      	sub	sp, #8
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	4603      	mov	r3, r0
 8010fa8:	6039      	str	r1, [r7, #0]
 8010faa:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 8010fac:	79fb      	ldrb	r3, [r7, #7]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d105      	bne.n	8010fbe <USBD_Class_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 8010fb2:	683a      	ldr	r2, [r7, #0]
 8010fb4:	4907      	ldr	r1, [pc, #28]	@ (8010fd4 <USBD_Class_ProductStrDescriptor+0x34>)
 8010fb6:	4808      	ldr	r0, [pc, #32]	@ (8010fd8 <USBD_Class_ProductStrDescriptor+0x38>)
 8010fb8:	f7ff ff6e 	bl	8010e98 <USBD_GetString>
 8010fbc:	e004      	b.n	8010fc8 <USBD_Class_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 8010fbe:	683a      	ldr	r2, [r7, #0]
 8010fc0:	4904      	ldr	r1, [pc, #16]	@ (8010fd4 <USBD_Class_ProductStrDescriptor+0x34>)
 8010fc2:	4805      	ldr	r0, [pc, #20]	@ (8010fd8 <USBD_Class_ProductStrDescriptor+0x38>)
 8010fc4:	f7ff ff68 	bl	8010e98 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010fc8:	4b02      	ldr	r3, [pc, #8]	@ (8010fd4 <USBD_Class_ProductStrDescriptor+0x34>)
}
 8010fca:	4618      	mov	r0, r3
 8010fcc:	3708      	adds	r7, #8
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	bd80      	pop	{r7, pc}
 8010fd2:	bf00      	nop
 8010fd4:	20011168 	.word	0x20011168
 8010fd8:	08013088 	.word	0x08013088

08010fdc <USBD_Class_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010fdc:	b580      	push	{r7, lr}
 8010fde:	b082      	sub	sp, #8
 8010fe0:	af00      	add	r7, sp, #0
 8010fe2:	4603      	mov	r3, r0
 8010fe4:	6039      	str	r1, [r7, #0]
 8010fe6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010fe8:	683a      	ldr	r2, [r7, #0]
 8010fea:	4904      	ldr	r1, [pc, #16]	@ (8010ffc <USBD_Class_ManufacturerStrDescriptor+0x20>)
 8010fec:	4804      	ldr	r0, [pc, #16]	@ (8011000 <USBD_Class_ManufacturerStrDescriptor+0x24>)
 8010fee:	f7ff ff53 	bl	8010e98 <USBD_GetString>
  return USBD_StrDesc;
 8010ff2:	4b02      	ldr	r3, [pc, #8]	@ (8010ffc <USBD_Class_ManufacturerStrDescriptor+0x20>)
}
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	3708      	adds	r7, #8
 8010ff8:	46bd      	mov	sp, r7
 8010ffa:	bd80      	pop	{r7, pc}
 8010ffc:	20011168 	.word	0x20011168
 8011000:	080130a0 	.word	0x080130a0

08011004 <USBD_Class_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011004:	b580      	push	{r7, lr}
 8011006:	b082      	sub	sp, #8
 8011008:	af00      	add	r7, sp, #0
 801100a:	4603      	mov	r3, r0
 801100c:	6039      	str	r1, [r7, #0]
 801100e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = USB_SIZ_STRING_SERIAL;
 8011010:	683b      	ldr	r3, [r7, #0]
 8011012:	221a      	movs	r2, #26
 8011014:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 8011016:	f000 f843 	bl	80110a0 <Get_SerialNum>

  return (uint8_t *)USBD_StringSerial;
 801101a:	4b02      	ldr	r3, [pc, #8]	@ (8011024 <USBD_Class_SerialStrDescriptor+0x20>)
}
 801101c:	4618      	mov	r0, r3
 801101e:	3708      	adds	r7, #8
 8011020:	46bd      	mov	sp, r7
 8011022:	bd80      	pop	{r7, pc}
 8011024:	20000108 	.word	0x20000108

08011028 <USBD_Class_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011028:	b580      	push	{r7, lr}
 801102a:	b082      	sub	sp, #8
 801102c:	af00      	add	r7, sp, #0
 801102e:	4603      	mov	r3, r0
 8011030:	6039      	str	r1, [r7, #0]
 8011032:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 8011034:	79fb      	ldrb	r3, [r7, #7]
 8011036:	2b00      	cmp	r3, #0
 8011038:	d105      	bne.n	8011046 <USBD_Class_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 801103a:	683a      	ldr	r2, [r7, #0]
 801103c:	4907      	ldr	r1, [pc, #28]	@ (801105c <USBD_Class_ConfigStrDescriptor+0x34>)
 801103e:	4808      	ldr	r0, [pc, #32]	@ (8011060 <USBD_Class_ConfigStrDescriptor+0x38>)
 8011040:	f7ff ff2a 	bl	8010e98 <USBD_GetString>
 8011044:	e004      	b.n	8011050 <USBD_Class_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 8011046:	683a      	ldr	r2, [r7, #0]
 8011048:	4904      	ldr	r1, [pc, #16]	@ (801105c <USBD_Class_ConfigStrDescriptor+0x34>)
 801104a:	4805      	ldr	r0, [pc, #20]	@ (8011060 <USBD_Class_ConfigStrDescriptor+0x38>)
 801104c:	f7ff ff24 	bl	8010e98 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011050:	4b02      	ldr	r3, [pc, #8]	@ (801105c <USBD_Class_ConfigStrDescriptor+0x34>)
}
 8011052:	4618      	mov	r0, r3
 8011054:	3708      	adds	r7, #8
 8011056:	46bd      	mov	sp, r7
 8011058:	bd80      	pop	{r7, pc}
 801105a:	bf00      	nop
 801105c:	20011168 	.word	0x20011168
 8011060:	080130b4 	.word	0x080130b4

08011064 <USBD_Class_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011064:	b580      	push	{r7, lr}
 8011066:	b082      	sub	sp, #8
 8011068:	af00      	add	r7, sp, #0
 801106a:	4603      	mov	r3, r0
 801106c:	6039      	str	r1, [r7, #0]
 801106e:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 8011070:	79fb      	ldrb	r3, [r7, #7]
 8011072:	2b00      	cmp	r3, #0
 8011074:	d105      	bne.n	8011082 <USBD_Class_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 8011076:	683a      	ldr	r2, [r7, #0]
 8011078:	4907      	ldr	r1, [pc, #28]	@ (8011098 <USBD_Class_InterfaceStrDescriptor+0x34>)
 801107a:	4808      	ldr	r0, [pc, #32]	@ (801109c <USBD_Class_InterfaceStrDescriptor+0x38>)
 801107c:	f7ff ff0c 	bl	8010e98 <USBD_GetString>
 8011080:	e004      	b.n	801108c <USBD_Class_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 8011082:	683a      	ldr	r2, [r7, #0]
 8011084:	4904      	ldr	r1, [pc, #16]	@ (8011098 <USBD_Class_InterfaceStrDescriptor+0x34>)
 8011086:	4805      	ldr	r0, [pc, #20]	@ (801109c <USBD_Class_InterfaceStrDescriptor+0x38>)
 8011088:	f7ff ff06 	bl	8010e98 <USBD_GetString>
  }
  return USBD_StrDesc;
 801108c:	4b02      	ldr	r3, [pc, #8]	@ (8011098 <USBD_Class_InterfaceStrDescriptor+0x34>)
}
 801108e:	4618      	mov	r0, r3
 8011090:	3708      	adds	r7, #8
 8011092:	46bd      	mov	sp, r7
 8011094:	bd80      	pop	{r7, pc}
 8011096:	bf00      	nop
 8011098:	20011168 	.word	0x20011168
 801109c:	080130c0 	.word	0x080130c0

080110a0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80110a0:	b580      	push	{r7, lr}
 80110a2:	b084      	sub	sp, #16
 80110a4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *)DEVICE_ID1;
 80110a6:	4b0f      	ldr	r3, [pc, #60]	@ (80110e4 <Get_SerialNum+0x44>)
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *)DEVICE_ID2;
 80110ac:	4b0e      	ldr	r3, [pc, #56]	@ (80110e8 <Get_SerialNum+0x48>)
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *)DEVICE_ID3;
 80110b2:	4b0e      	ldr	r3, [pc, #56]	@ (80110ec <Get_SerialNum+0x4c>)
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80110b8:	68fa      	ldr	r2, [r7, #12]
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	4413      	add	r3, r2
 80110be:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0U)
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d009      	beq.n	80110da <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8U);
 80110c6:	2208      	movs	r2, #8
 80110c8:	4909      	ldr	r1, [pc, #36]	@ (80110f0 <Get_SerialNum+0x50>)
 80110ca:	68f8      	ldr	r0, [r7, #12]
 80110cc:	f000 f814 	bl	80110f8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4U);
 80110d0:	2204      	movs	r2, #4
 80110d2:	4908      	ldr	r1, [pc, #32]	@ (80110f4 <Get_SerialNum+0x54>)
 80110d4:	68b8      	ldr	r0, [r7, #8]
 80110d6:	f000 f80f 	bl	80110f8 <IntToUnicode>
  }
}
 80110da:	bf00      	nop
 80110dc:	3710      	adds	r7, #16
 80110de:	46bd      	mov	sp, r7
 80110e0:	bd80      	pop	{r7, pc}
 80110e2:	bf00      	nop
 80110e4:	08fff800 	.word	0x08fff800
 80110e8:	08fff804 	.word	0x08fff804
 80110ec:	08fff808 	.word	0x08fff808
 80110f0:	2000010a 	.word	0x2000010a
 80110f4:	2000011a 	.word	0x2000011a

080110f8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len)
{
 80110f8:	b480      	push	{r7}
 80110fa:	b087      	sub	sp, #28
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	60f8      	str	r0, [r7, #12]
 8011100:	60b9      	str	r1, [r7, #8]
 8011102:	4613      	mov	r3, r2
 8011104:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0U;
 8011106:	2300      	movs	r3, #0
 8011108:	75fb      	strb	r3, [r7, #23]

  for (idx = 0U ; idx < len ; idx ++)
 801110a:	2300      	movs	r3, #0
 801110c:	75fb      	strb	r3, [r7, #23]
 801110e:	e025      	b.n	801115c <IntToUnicode+0x64>
  {
    if (((value >> 28)) < 0xAU)
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	0f1b      	lsrs	r3, r3, #28
 8011114:	2b09      	cmp	r3, #9
 8011116:	d80a      	bhi.n	801112e <IntToUnicode+0x36>
    {
      pbuf[ 2U * idx] = (value >> 28) + '0';
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	0f1b      	lsrs	r3, r3, #28
 801111c:	b2da      	uxtb	r2, r3
 801111e:	7dfb      	ldrb	r3, [r7, #23]
 8011120:	005b      	lsls	r3, r3, #1
 8011122:	68b9      	ldr	r1, [r7, #8]
 8011124:	440b      	add	r3, r1
 8011126:	3230      	adds	r2, #48	@ 0x30
 8011128:	b2d2      	uxtb	r2, r2
 801112a:	701a      	strb	r2, [r3, #0]
 801112c:	e009      	b.n	8011142 <IntToUnicode+0x4a>
    }
    else
    {
      pbuf[2U * idx] = (value >> 28) + 'A' - 10U;
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	0f1b      	lsrs	r3, r3, #28
 8011132:	b2da      	uxtb	r2, r3
 8011134:	7dfb      	ldrb	r3, [r7, #23]
 8011136:	005b      	lsls	r3, r3, #1
 8011138:	68b9      	ldr	r1, [r7, #8]
 801113a:	440b      	add	r3, r1
 801113c:	3237      	adds	r2, #55	@ 0x37
 801113e:	b2d2      	uxtb	r2, r2
 8011140:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	011b      	lsls	r3, r3, #4
 8011146:	60fb      	str	r3, [r7, #12]

    pbuf[2U * idx + 1] = 0U;
 8011148:	7dfb      	ldrb	r3, [r7, #23]
 801114a:	005b      	lsls	r3, r3, #1
 801114c:	3301      	adds	r3, #1
 801114e:	68ba      	ldr	r2, [r7, #8]
 8011150:	4413      	add	r3, r2
 8011152:	2200      	movs	r2, #0
 8011154:	701a      	strb	r2, [r3, #0]
  for (idx = 0U ; idx < len ; idx ++)
 8011156:	7dfb      	ldrb	r3, [r7, #23]
 8011158:	3301      	adds	r3, #1
 801115a:	75fb      	strb	r3, [r7, #23]
 801115c:	7dfa      	ldrb	r2, [r7, #23]
 801115e:	79fb      	ldrb	r3, [r7, #7]
 8011160:	429a      	cmp	r2, r3
 8011162:	d3d5      	bcc.n	8011110 <IntToUnicode+0x18>
  }
}
 8011164:	bf00      	nop
 8011166:	bf00      	nop
 8011168:	371c      	adds	r7, #28
 801116a:	46bd      	mov	sp, r7
 801116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011170:	4770      	bx	lr

08011172 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011172:	b580      	push	{r7, lr}
 8011174:	b084      	sub	sp, #16
 8011176:	af00      	add	r7, sp, #0
 8011178:	60f8      	str	r0, [r7, #12]
 801117a:	60b9      	str	r1, [r7, #8]
 801117c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	2202      	movs	r2, #2
 8011182:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	687a      	ldr	r2, [r7, #4]
 801118a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	687a      	ldr	r2, [r7, #4]
 8011190:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	68ba      	ldr	r2, [r7, #8]
 8011196:	2100      	movs	r1, #0
 8011198:	68f8      	ldr	r0, [r7, #12]
 801119a:	f7fe fca0 	bl	800fade <USBD_LL_Transmit>

  return USBD_OK;
 801119e:	2300      	movs	r3, #0
}
 80111a0:	4618      	mov	r0, r3
 80111a2:	3710      	adds	r7, #16
 80111a4:	46bd      	mov	sp, r7
 80111a6:	bd80      	pop	{r7, pc}

080111a8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80111a8:	b580      	push	{r7, lr}
 80111aa:	b084      	sub	sp, #16
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	60f8      	str	r0, [r7, #12]
 80111b0:	60b9      	str	r1, [r7, #8]
 80111b2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	68ba      	ldr	r2, [r7, #8]
 80111b8:	2100      	movs	r1, #0
 80111ba:	68f8      	ldr	r0, [r7, #12]
 80111bc:	f7fe fc8f 	bl	800fade <USBD_LL_Transmit>

  return USBD_OK;
 80111c0:	2300      	movs	r3, #0
}
 80111c2:	4618      	mov	r0, r3
 80111c4:	3710      	adds	r7, #16
 80111c6:	46bd      	mov	sp, r7
 80111c8:	bd80      	pop	{r7, pc}

080111ca <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80111ca:	b580      	push	{r7, lr}
 80111cc:	b084      	sub	sp, #16
 80111ce:	af00      	add	r7, sp, #0
 80111d0:	60f8      	str	r0, [r7, #12]
 80111d2:	60b9      	str	r1, [r7, #8]
 80111d4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	2203      	movs	r2, #3
 80111da:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	687a      	ldr	r2, [r7, #4]
 80111e2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	687a      	ldr	r2, [r7, #4]
 80111ea:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	68ba      	ldr	r2, [r7, #8]
 80111f2:	2100      	movs	r1, #0
 80111f4:	68f8      	ldr	r0, [r7, #12]
 80111f6:	f7fe fc8d 	bl	800fb14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80111fa:	2300      	movs	r3, #0
}
 80111fc:	4618      	mov	r0, r3
 80111fe:	3710      	adds	r7, #16
 8011200:	46bd      	mov	sp, r7
 8011202:	bd80      	pop	{r7, pc}

08011204 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011204:	b580      	push	{r7, lr}
 8011206:	b084      	sub	sp, #16
 8011208:	af00      	add	r7, sp, #0
 801120a:	60f8      	str	r0, [r7, #12]
 801120c:	60b9      	str	r1, [r7, #8]
 801120e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	68ba      	ldr	r2, [r7, #8]
 8011214:	2100      	movs	r1, #0
 8011216:	68f8      	ldr	r0, [r7, #12]
 8011218:	f7fe fc7c 	bl	800fb14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801121c:	2300      	movs	r3, #0
}
 801121e:	4618      	mov	r0, r3
 8011220:	3710      	adds	r7, #16
 8011222:	46bd      	mov	sp, r7
 8011224:	bd80      	pop	{r7, pc}

08011226 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011226:	b580      	push	{r7, lr}
 8011228:	b082      	sub	sp, #8
 801122a:	af00      	add	r7, sp, #0
 801122c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	2204      	movs	r2, #4
 8011232:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011236:	2300      	movs	r3, #0
 8011238:	2200      	movs	r2, #0
 801123a:	2100      	movs	r1, #0
 801123c:	6878      	ldr	r0, [r7, #4]
 801123e:	f7fe fc4e 	bl	800fade <USBD_LL_Transmit>

  return USBD_OK;
 8011242:	2300      	movs	r3, #0
}
 8011244:	4618      	mov	r0, r3
 8011246:	3708      	adds	r7, #8
 8011248:	46bd      	mov	sp, r7
 801124a:	bd80      	pop	{r7, pc}

0801124c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801124c:	b580      	push	{r7, lr}
 801124e:	b082      	sub	sp, #8
 8011250:	af00      	add	r7, sp, #0
 8011252:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	2205      	movs	r2, #5
 8011258:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801125c:	2300      	movs	r3, #0
 801125e:	2200      	movs	r2, #0
 8011260:	2100      	movs	r1, #0
 8011262:	6878      	ldr	r0, [r7, #4]
 8011264:	f7fe fc56 	bl	800fb14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011268:	2300      	movs	r3, #0
}
 801126a:	4618      	mov	r0, r3
 801126c:	3708      	adds	r7, #8
 801126e:	46bd      	mov	sp, r7
 8011270:	bd80      	pop	{r7, pc}
	...

08011274 <std>:
 8011274:	2300      	movs	r3, #0
 8011276:	b510      	push	{r4, lr}
 8011278:	4604      	mov	r4, r0
 801127a:	6083      	str	r3, [r0, #8]
 801127c:	8181      	strh	r1, [r0, #12]
 801127e:	4619      	mov	r1, r3
 8011280:	6643      	str	r3, [r0, #100]	@ 0x64
 8011282:	81c2      	strh	r2, [r0, #14]
 8011284:	2208      	movs	r2, #8
 8011286:	6183      	str	r3, [r0, #24]
 8011288:	e9c0 3300 	strd	r3, r3, [r0]
 801128c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011290:	305c      	adds	r0, #92	@ 0x5c
 8011292:	f000 f993 	bl	80115bc <memset>
 8011296:	4b0d      	ldr	r3, [pc, #52]	@ (80112cc <std+0x58>)
 8011298:	6224      	str	r4, [r4, #32]
 801129a:	6263      	str	r3, [r4, #36]	@ 0x24
 801129c:	4b0c      	ldr	r3, [pc, #48]	@ (80112d0 <std+0x5c>)
 801129e:	62a3      	str	r3, [r4, #40]	@ 0x28
 80112a0:	4b0c      	ldr	r3, [pc, #48]	@ (80112d4 <std+0x60>)
 80112a2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80112a4:	4b0c      	ldr	r3, [pc, #48]	@ (80112d8 <std+0x64>)
 80112a6:	6323      	str	r3, [r4, #48]	@ 0x30
 80112a8:	4b0c      	ldr	r3, [pc, #48]	@ (80112dc <std+0x68>)
 80112aa:	429c      	cmp	r4, r3
 80112ac:	d006      	beq.n	80112bc <std+0x48>
 80112ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80112b2:	4294      	cmp	r4, r2
 80112b4:	d002      	beq.n	80112bc <std+0x48>
 80112b6:	33d0      	adds	r3, #208	@ 0xd0
 80112b8:	429c      	cmp	r4, r3
 80112ba:	d105      	bne.n	80112c8 <std+0x54>
 80112bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80112c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80112c4:	f000 b9f2 	b.w	80116ac <__retarget_lock_init_recursive>
 80112c8:	bd10      	pop	{r4, pc}
 80112ca:	bf00      	nop
 80112cc:	080114c5 	.word	0x080114c5
 80112d0:	080114e7 	.word	0x080114e7
 80112d4:	0801151f 	.word	0x0801151f
 80112d8:	08011543 	.word	0x08011543
 80112dc:	20011268 	.word	0x20011268

080112e0 <stdio_exit_handler>:
 80112e0:	4a02      	ldr	r2, [pc, #8]	@ (80112ec <stdio_exit_handler+0xc>)
 80112e2:	4903      	ldr	r1, [pc, #12]	@ (80112f0 <stdio_exit_handler+0x10>)
 80112e4:	4803      	ldr	r0, [pc, #12]	@ (80112f4 <stdio_exit_handler+0x14>)
 80112e6:	f000 b869 	b.w	80113bc <_fwalk_sglue>
 80112ea:	bf00      	nop
 80112ec:	20000124 	.word	0x20000124
 80112f0:	0801221d 	.word	0x0801221d
 80112f4:	20000134 	.word	0x20000134

080112f8 <cleanup_stdio>:
 80112f8:	6841      	ldr	r1, [r0, #4]
 80112fa:	4b0c      	ldr	r3, [pc, #48]	@ (801132c <cleanup_stdio+0x34>)
 80112fc:	4299      	cmp	r1, r3
 80112fe:	b510      	push	{r4, lr}
 8011300:	4604      	mov	r4, r0
 8011302:	d001      	beq.n	8011308 <cleanup_stdio+0x10>
 8011304:	f000 ff8a 	bl	801221c <_fflush_r>
 8011308:	68a1      	ldr	r1, [r4, #8]
 801130a:	4b09      	ldr	r3, [pc, #36]	@ (8011330 <cleanup_stdio+0x38>)
 801130c:	4299      	cmp	r1, r3
 801130e:	d002      	beq.n	8011316 <cleanup_stdio+0x1e>
 8011310:	4620      	mov	r0, r4
 8011312:	f000 ff83 	bl	801221c <_fflush_r>
 8011316:	68e1      	ldr	r1, [r4, #12]
 8011318:	4b06      	ldr	r3, [pc, #24]	@ (8011334 <cleanup_stdio+0x3c>)
 801131a:	4299      	cmp	r1, r3
 801131c:	d004      	beq.n	8011328 <cleanup_stdio+0x30>
 801131e:	4620      	mov	r0, r4
 8011320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011324:	f000 bf7a 	b.w	801221c <_fflush_r>
 8011328:	bd10      	pop	{r4, pc}
 801132a:	bf00      	nop
 801132c:	20011268 	.word	0x20011268
 8011330:	200112d0 	.word	0x200112d0
 8011334:	20011338 	.word	0x20011338

08011338 <global_stdio_init.part.0>:
 8011338:	b510      	push	{r4, lr}
 801133a:	4b0b      	ldr	r3, [pc, #44]	@ (8011368 <global_stdio_init.part.0+0x30>)
 801133c:	2104      	movs	r1, #4
 801133e:	4c0b      	ldr	r4, [pc, #44]	@ (801136c <global_stdio_init.part.0+0x34>)
 8011340:	4a0b      	ldr	r2, [pc, #44]	@ (8011370 <global_stdio_init.part.0+0x38>)
 8011342:	4620      	mov	r0, r4
 8011344:	601a      	str	r2, [r3, #0]
 8011346:	2200      	movs	r2, #0
 8011348:	f7ff ff94 	bl	8011274 <std>
 801134c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011350:	2201      	movs	r2, #1
 8011352:	2109      	movs	r1, #9
 8011354:	f7ff ff8e 	bl	8011274 <std>
 8011358:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801135c:	2202      	movs	r2, #2
 801135e:	2112      	movs	r1, #18
 8011360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011364:	f7ff bf86 	b.w	8011274 <std>
 8011368:	200113a0 	.word	0x200113a0
 801136c:	20011268 	.word	0x20011268
 8011370:	080112e1 	.word	0x080112e1

08011374 <__sfp_lock_acquire>:
 8011374:	4801      	ldr	r0, [pc, #4]	@ (801137c <__sfp_lock_acquire+0x8>)
 8011376:	f000 b99a 	b.w	80116ae <__retarget_lock_acquire_recursive>
 801137a:	bf00      	nop
 801137c:	200113a9 	.word	0x200113a9

08011380 <__sfp_lock_release>:
 8011380:	4801      	ldr	r0, [pc, #4]	@ (8011388 <__sfp_lock_release+0x8>)
 8011382:	f000 b995 	b.w	80116b0 <__retarget_lock_release_recursive>
 8011386:	bf00      	nop
 8011388:	200113a9 	.word	0x200113a9

0801138c <__sinit>:
 801138c:	b510      	push	{r4, lr}
 801138e:	4604      	mov	r4, r0
 8011390:	f7ff fff0 	bl	8011374 <__sfp_lock_acquire>
 8011394:	6a23      	ldr	r3, [r4, #32]
 8011396:	b11b      	cbz	r3, 80113a0 <__sinit+0x14>
 8011398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801139c:	f7ff bff0 	b.w	8011380 <__sfp_lock_release>
 80113a0:	4b04      	ldr	r3, [pc, #16]	@ (80113b4 <__sinit+0x28>)
 80113a2:	6223      	str	r3, [r4, #32]
 80113a4:	4b04      	ldr	r3, [pc, #16]	@ (80113b8 <__sinit+0x2c>)
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d1f5      	bne.n	8011398 <__sinit+0xc>
 80113ac:	f7ff ffc4 	bl	8011338 <global_stdio_init.part.0>
 80113b0:	e7f2      	b.n	8011398 <__sinit+0xc>
 80113b2:	bf00      	nop
 80113b4:	080112f9 	.word	0x080112f9
 80113b8:	200113a0 	.word	0x200113a0

080113bc <_fwalk_sglue>:
 80113bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80113c0:	4607      	mov	r7, r0
 80113c2:	4688      	mov	r8, r1
 80113c4:	4614      	mov	r4, r2
 80113c6:	2600      	movs	r6, #0
 80113c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80113cc:	f1b9 0901 	subs.w	r9, r9, #1
 80113d0:	d505      	bpl.n	80113de <_fwalk_sglue+0x22>
 80113d2:	6824      	ldr	r4, [r4, #0]
 80113d4:	2c00      	cmp	r4, #0
 80113d6:	d1f7      	bne.n	80113c8 <_fwalk_sglue+0xc>
 80113d8:	4630      	mov	r0, r6
 80113da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80113de:	89ab      	ldrh	r3, [r5, #12]
 80113e0:	2b01      	cmp	r3, #1
 80113e2:	d907      	bls.n	80113f4 <_fwalk_sglue+0x38>
 80113e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80113e8:	3301      	adds	r3, #1
 80113ea:	d003      	beq.n	80113f4 <_fwalk_sglue+0x38>
 80113ec:	4629      	mov	r1, r5
 80113ee:	4638      	mov	r0, r7
 80113f0:	47c0      	blx	r8
 80113f2:	4306      	orrs	r6, r0
 80113f4:	3568      	adds	r5, #104	@ 0x68
 80113f6:	e7e9      	b.n	80113cc <_fwalk_sglue+0x10>

080113f8 <iprintf>:
 80113f8:	b40f      	push	{r0, r1, r2, r3}
 80113fa:	b507      	push	{r0, r1, r2, lr}
 80113fc:	4906      	ldr	r1, [pc, #24]	@ (8011418 <iprintf+0x20>)
 80113fe:	ab04      	add	r3, sp, #16
 8011400:	6808      	ldr	r0, [r1, #0]
 8011402:	f853 2b04 	ldr.w	r2, [r3], #4
 8011406:	6881      	ldr	r1, [r0, #8]
 8011408:	9301      	str	r3, [sp, #4]
 801140a:	f000 fbd9 	bl	8011bc0 <_vfiprintf_r>
 801140e:	b003      	add	sp, #12
 8011410:	f85d eb04 	ldr.w	lr, [sp], #4
 8011414:	b004      	add	sp, #16
 8011416:	4770      	bx	lr
 8011418:	20000130 	.word	0x20000130

0801141c <sniprintf>:
 801141c:	b40c      	push	{r2, r3}
 801141e:	4b18      	ldr	r3, [pc, #96]	@ (8011480 <sniprintf+0x64>)
 8011420:	b530      	push	{r4, r5, lr}
 8011422:	1e0c      	subs	r4, r1, #0
 8011424:	b09d      	sub	sp, #116	@ 0x74
 8011426:	681d      	ldr	r5, [r3, #0]
 8011428:	da08      	bge.n	801143c <sniprintf+0x20>
 801142a:	238b      	movs	r3, #139	@ 0x8b
 801142c:	f04f 30ff 	mov.w	r0, #4294967295
 8011430:	602b      	str	r3, [r5, #0]
 8011432:	b01d      	add	sp, #116	@ 0x74
 8011434:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011438:	b002      	add	sp, #8
 801143a:	4770      	bx	lr
 801143c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8011440:	9002      	str	r0, [sp, #8]
 8011442:	9006      	str	r0, [sp, #24]
 8011444:	a902      	add	r1, sp, #8
 8011446:	f8ad 3014 	strh.w	r3, [sp, #20]
 801144a:	bf14      	ite	ne
 801144c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011450:	4623      	moveq	r3, r4
 8011452:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8011454:	4628      	mov	r0, r5
 8011456:	9304      	str	r3, [sp, #16]
 8011458:	9307      	str	r3, [sp, #28]
 801145a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801145e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011462:	ab21      	add	r3, sp, #132	@ 0x84
 8011464:	9301      	str	r3, [sp, #4]
 8011466:	f000 fa85 	bl	8011974 <_svfiprintf_r>
 801146a:	1c43      	adds	r3, r0, #1
 801146c:	bfbc      	itt	lt
 801146e:	238b      	movlt	r3, #139	@ 0x8b
 8011470:	602b      	strlt	r3, [r5, #0]
 8011472:	2c00      	cmp	r4, #0
 8011474:	d0dd      	beq.n	8011432 <sniprintf+0x16>
 8011476:	9b02      	ldr	r3, [sp, #8]
 8011478:	2200      	movs	r2, #0
 801147a:	701a      	strb	r2, [r3, #0]
 801147c:	e7d9      	b.n	8011432 <sniprintf+0x16>
 801147e:	bf00      	nop
 8011480:	20000130 	.word	0x20000130

08011484 <siprintf>:
 8011484:	b40e      	push	{r1, r2, r3}
 8011486:	b500      	push	{lr}
 8011488:	b09c      	sub	sp, #112	@ 0x70
 801148a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801148e:	ab1d      	add	r3, sp, #116	@ 0x74
 8011490:	9002      	str	r0, [sp, #8]
 8011492:	9006      	str	r0, [sp, #24]
 8011494:	9107      	str	r1, [sp, #28]
 8011496:	9104      	str	r1, [sp, #16]
 8011498:	4808      	ldr	r0, [pc, #32]	@ (80114bc <siprintf+0x38>)
 801149a:	4909      	ldr	r1, [pc, #36]	@ (80114c0 <siprintf+0x3c>)
 801149c:	f853 2b04 	ldr.w	r2, [r3], #4
 80114a0:	9105      	str	r1, [sp, #20]
 80114a2:	a902      	add	r1, sp, #8
 80114a4:	6800      	ldr	r0, [r0, #0]
 80114a6:	9301      	str	r3, [sp, #4]
 80114a8:	f000 fa64 	bl	8011974 <_svfiprintf_r>
 80114ac:	9b02      	ldr	r3, [sp, #8]
 80114ae:	2200      	movs	r2, #0
 80114b0:	701a      	strb	r2, [r3, #0]
 80114b2:	b01c      	add	sp, #112	@ 0x70
 80114b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80114b8:	b003      	add	sp, #12
 80114ba:	4770      	bx	lr
 80114bc:	20000130 	.word	0x20000130
 80114c0:	ffff0208 	.word	0xffff0208

080114c4 <__sread>:
 80114c4:	b510      	push	{r4, lr}
 80114c6:	460c      	mov	r4, r1
 80114c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80114cc:	f000 f8a0 	bl	8011610 <_read_r>
 80114d0:	2800      	cmp	r0, #0
 80114d2:	bfab      	itete	ge
 80114d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80114d6:	89a3      	ldrhlt	r3, [r4, #12]
 80114d8:	181b      	addge	r3, r3, r0
 80114da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80114de:	bfac      	ite	ge
 80114e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80114e2:	81a3      	strhlt	r3, [r4, #12]
 80114e4:	bd10      	pop	{r4, pc}

080114e6 <__swrite>:
 80114e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114ea:	461f      	mov	r7, r3
 80114ec:	898b      	ldrh	r3, [r1, #12]
 80114ee:	4605      	mov	r5, r0
 80114f0:	460c      	mov	r4, r1
 80114f2:	05db      	lsls	r3, r3, #23
 80114f4:	4616      	mov	r6, r2
 80114f6:	d505      	bpl.n	8011504 <__swrite+0x1e>
 80114f8:	2302      	movs	r3, #2
 80114fa:	2200      	movs	r2, #0
 80114fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011500:	f000 f874 	bl	80115ec <_lseek_r>
 8011504:	89a3      	ldrh	r3, [r4, #12]
 8011506:	4632      	mov	r2, r6
 8011508:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801150c:	4628      	mov	r0, r5
 801150e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011512:	81a3      	strh	r3, [r4, #12]
 8011514:	463b      	mov	r3, r7
 8011516:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801151a:	f000 b88b 	b.w	8011634 <_write_r>

0801151e <__sseek>:
 801151e:	b510      	push	{r4, lr}
 8011520:	460c      	mov	r4, r1
 8011522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011526:	f000 f861 	bl	80115ec <_lseek_r>
 801152a:	1c43      	adds	r3, r0, #1
 801152c:	89a3      	ldrh	r3, [r4, #12]
 801152e:	bf15      	itete	ne
 8011530:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011532:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011536:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801153a:	81a3      	strheq	r3, [r4, #12]
 801153c:	bf18      	it	ne
 801153e:	81a3      	strhne	r3, [r4, #12]
 8011540:	bd10      	pop	{r4, pc}

08011542 <__sclose>:
 8011542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011546:	f000 b841 	b.w	80115cc <_close_r>

0801154a <_vsniprintf_r>:
 801154a:	b530      	push	{r4, r5, lr}
 801154c:	4614      	mov	r4, r2
 801154e:	b09b      	sub	sp, #108	@ 0x6c
 8011550:	4605      	mov	r5, r0
 8011552:	461a      	mov	r2, r3
 8011554:	2c00      	cmp	r4, #0
 8011556:	da05      	bge.n	8011564 <_vsniprintf_r+0x1a>
 8011558:	238b      	movs	r3, #139	@ 0x8b
 801155a:	6003      	str	r3, [r0, #0]
 801155c:	f04f 30ff 	mov.w	r0, #4294967295
 8011560:	b01b      	add	sp, #108	@ 0x6c
 8011562:	bd30      	pop	{r4, r5, pc}
 8011564:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8011568:	9100      	str	r1, [sp, #0]
 801156a:	9104      	str	r1, [sp, #16]
 801156c:	4669      	mov	r1, sp
 801156e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011572:	bf14      	ite	ne
 8011574:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011578:	4623      	moveq	r3, r4
 801157a:	9302      	str	r3, [sp, #8]
 801157c:	9305      	str	r3, [sp, #20]
 801157e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011582:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011586:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8011588:	f000 f9f4 	bl	8011974 <_svfiprintf_r>
 801158c:	1c43      	adds	r3, r0, #1
 801158e:	bfbc      	itt	lt
 8011590:	238b      	movlt	r3, #139	@ 0x8b
 8011592:	602b      	strlt	r3, [r5, #0]
 8011594:	2c00      	cmp	r4, #0
 8011596:	d0e3      	beq.n	8011560 <_vsniprintf_r+0x16>
 8011598:	9b00      	ldr	r3, [sp, #0]
 801159a:	2200      	movs	r2, #0
 801159c:	701a      	strb	r2, [r3, #0]
 801159e:	e7df      	b.n	8011560 <_vsniprintf_r+0x16>

080115a0 <vsniprintf>:
 80115a0:	b507      	push	{r0, r1, r2, lr}
 80115a2:	9300      	str	r3, [sp, #0]
 80115a4:	4613      	mov	r3, r2
 80115a6:	460a      	mov	r2, r1
 80115a8:	4601      	mov	r1, r0
 80115aa:	4803      	ldr	r0, [pc, #12]	@ (80115b8 <vsniprintf+0x18>)
 80115ac:	6800      	ldr	r0, [r0, #0]
 80115ae:	f7ff ffcc 	bl	801154a <_vsniprintf_r>
 80115b2:	b003      	add	sp, #12
 80115b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80115b8:	20000130 	.word	0x20000130

080115bc <memset>:
 80115bc:	4402      	add	r2, r0
 80115be:	4603      	mov	r3, r0
 80115c0:	4293      	cmp	r3, r2
 80115c2:	d100      	bne.n	80115c6 <memset+0xa>
 80115c4:	4770      	bx	lr
 80115c6:	f803 1b01 	strb.w	r1, [r3], #1
 80115ca:	e7f9      	b.n	80115c0 <memset+0x4>

080115cc <_close_r>:
 80115cc:	b538      	push	{r3, r4, r5, lr}
 80115ce:	2300      	movs	r3, #0
 80115d0:	4d05      	ldr	r5, [pc, #20]	@ (80115e8 <_close_r+0x1c>)
 80115d2:	4604      	mov	r4, r0
 80115d4:	4608      	mov	r0, r1
 80115d6:	602b      	str	r3, [r5, #0]
 80115d8:	f7f1 f847 	bl	800266a <_close>
 80115dc:	1c43      	adds	r3, r0, #1
 80115de:	d102      	bne.n	80115e6 <_close_r+0x1a>
 80115e0:	682b      	ldr	r3, [r5, #0]
 80115e2:	b103      	cbz	r3, 80115e6 <_close_r+0x1a>
 80115e4:	6023      	str	r3, [r4, #0]
 80115e6:	bd38      	pop	{r3, r4, r5, pc}
 80115e8:	200113a4 	.word	0x200113a4

080115ec <_lseek_r>:
 80115ec:	b538      	push	{r3, r4, r5, lr}
 80115ee:	4604      	mov	r4, r0
 80115f0:	4d06      	ldr	r5, [pc, #24]	@ (801160c <_lseek_r+0x20>)
 80115f2:	4608      	mov	r0, r1
 80115f4:	4611      	mov	r1, r2
 80115f6:	2200      	movs	r2, #0
 80115f8:	602a      	str	r2, [r5, #0]
 80115fa:	461a      	mov	r2, r3
 80115fc:	f7f1 f85c 	bl	80026b8 <_lseek>
 8011600:	1c43      	adds	r3, r0, #1
 8011602:	d102      	bne.n	801160a <_lseek_r+0x1e>
 8011604:	682b      	ldr	r3, [r5, #0]
 8011606:	b103      	cbz	r3, 801160a <_lseek_r+0x1e>
 8011608:	6023      	str	r3, [r4, #0]
 801160a:	bd38      	pop	{r3, r4, r5, pc}
 801160c:	200113a4 	.word	0x200113a4

08011610 <_read_r>:
 8011610:	b538      	push	{r3, r4, r5, lr}
 8011612:	4604      	mov	r4, r0
 8011614:	4d06      	ldr	r5, [pc, #24]	@ (8011630 <_read_r+0x20>)
 8011616:	4608      	mov	r0, r1
 8011618:	4611      	mov	r1, r2
 801161a:	2200      	movs	r2, #0
 801161c:	602a      	str	r2, [r5, #0]
 801161e:	461a      	mov	r2, r3
 8011620:	f7f0 ffea 	bl	80025f8 <_read>
 8011624:	1c43      	adds	r3, r0, #1
 8011626:	d102      	bne.n	801162e <_read_r+0x1e>
 8011628:	682b      	ldr	r3, [r5, #0]
 801162a:	b103      	cbz	r3, 801162e <_read_r+0x1e>
 801162c:	6023      	str	r3, [r4, #0]
 801162e:	bd38      	pop	{r3, r4, r5, pc}
 8011630:	200113a4 	.word	0x200113a4

08011634 <_write_r>:
 8011634:	b538      	push	{r3, r4, r5, lr}
 8011636:	4604      	mov	r4, r0
 8011638:	4d06      	ldr	r5, [pc, #24]	@ (8011654 <_write_r+0x20>)
 801163a:	4608      	mov	r0, r1
 801163c:	4611      	mov	r1, r2
 801163e:	2200      	movs	r2, #0
 8011640:	602a      	str	r2, [r5, #0]
 8011642:	461a      	mov	r2, r3
 8011644:	f7f0 fff5 	bl	8002632 <_write>
 8011648:	1c43      	adds	r3, r0, #1
 801164a:	d102      	bne.n	8011652 <_write_r+0x1e>
 801164c:	682b      	ldr	r3, [r5, #0]
 801164e:	b103      	cbz	r3, 8011652 <_write_r+0x1e>
 8011650:	6023      	str	r3, [r4, #0]
 8011652:	bd38      	pop	{r3, r4, r5, pc}
 8011654:	200113a4 	.word	0x200113a4

08011658 <__errno>:
 8011658:	4b01      	ldr	r3, [pc, #4]	@ (8011660 <__errno+0x8>)
 801165a:	6818      	ldr	r0, [r3, #0]
 801165c:	4770      	bx	lr
 801165e:	bf00      	nop
 8011660:	20000130 	.word	0x20000130

08011664 <__libc_init_array>:
 8011664:	b570      	push	{r4, r5, r6, lr}
 8011666:	4d0d      	ldr	r5, [pc, #52]	@ (801169c <__libc_init_array+0x38>)
 8011668:	2600      	movs	r6, #0
 801166a:	4c0d      	ldr	r4, [pc, #52]	@ (80116a0 <__libc_init_array+0x3c>)
 801166c:	1b64      	subs	r4, r4, r5
 801166e:	10a4      	asrs	r4, r4, #2
 8011670:	42a6      	cmp	r6, r4
 8011672:	d109      	bne.n	8011688 <__libc_init_array+0x24>
 8011674:	4d0b      	ldr	r5, [pc, #44]	@ (80116a4 <__libc_init_array+0x40>)
 8011676:	2600      	movs	r6, #0
 8011678:	4c0b      	ldr	r4, [pc, #44]	@ (80116a8 <__libc_init_array+0x44>)
 801167a:	f000 ff7d 	bl	8012578 <_init>
 801167e:	1b64      	subs	r4, r4, r5
 8011680:	10a4      	asrs	r4, r4, #2
 8011682:	42a6      	cmp	r6, r4
 8011684:	d105      	bne.n	8011692 <__libc_init_array+0x2e>
 8011686:	bd70      	pop	{r4, r5, r6, pc}
 8011688:	f855 3b04 	ldr.w	r3, [r5], #4
 801168c:	3601      	adds	r6, #1
 801168e:	4798      	blx	r3
 8011690:	e7ee      	b.n	8011670 <__libc_init_array+0xc>
 8011692:	f855 3b04 	ldr.w	r3, [r5], #4
 8011696:	3601      	adds	r6, #1
 8011698:	4798      	blx	r3
 801169a:	e7f2      	b.n	8011682 <__libc_init_array+0x1e>
 801169c:	08013158 	.word	0x08013158
 80116a0:	08013158 	.word	0x08013158
 80116a4:	08013158 	.word	0x08013158
 80116a8:	0801315c 	.word	0x0801315c

080116ac <__retarget_lock_init_recursive>:
 80116ac:	4770      	bx	lr

080116ae <__retarget_lock_acquire_recursive>:
 80116ae:	4770      	bx	lr

080116b0 <__retarget_lock_release_recursive>:
 80116b0:	4770      	bx	lr

080116b2 <memcpy>:
 80116b2:	440a      	add	r2, r1
 80116b4:	1e43      	subs	r3, r0, #1
 80116b6:	4291      	cmp	r1, r2
 80116b8:	d100      	bne.n	80116bc <memcpy+0xa>
 80116ba:	4770      	bx	lr
 80116bc:	b510      	push	{r4, lr}
 80116be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80116c2:	4291      	cmp	r1, r2
 80116c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80116c8:	d1f9      	bne.n	80116be <memcpy+0xc>
 80116ca:	bd10      	pop	{r4, pc}

080116cc <_free_r>:
 80116cc:	b538      	push	{r3, r4, r5, lr}
 80116ce:	4605      	mov	r5, r0
 80116d0:	2900      	cmp	r1, #0
 80116d2:	d041      	beq.n	8011758 <_free_r+0x8c>
 80116d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80116d8:	1f0c      	subs	r4, r1, #4
 80116da:	2b00      	cmp	r3, #0
 80116dc:	bfb8      	it	lt
 80116de:	18e4      	addlt	r4, r4, r3
 80116e0:	f000 f8e0 	bl	80118a4 <__malloc_lock>
 80116e4:	4a1d      	ldr	r2, [pc, #116]	@ (801175c <_free_r+0x90>)
 80116e6:	6813      	ldr	r3, [r2, #0]
 80116e8:	b933      	cbnz	r3, 80116f8 <_free_r+0x2c>
 80116ea:	6063      	str	r3, [r4, #4]
 80116ec:	6014      	str	r4, [r2, #0]
 80116ee:	4628      	mov	r0, r5
 80116f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80116f4:	f000 b8dc 	b.w	80118b0 <__malloc_unlock>
 80116f8:	42a3      	cmp	r3, r4
 80116fa:	d908      	bls.n	801170e <_free_r+0x42>
 80116fc:	6820      	ldr	r0, [r4, #0]
 80116fe:	1821      	adds	r1, r4, r0
 8011700:	428b      	cmp	r3, r1
 8011702:	bf01      	itttt	eq
 8011704:	6819      	ldreq	r1, [r3, #0]
 8011706:	685b      	ldreq	r3, [r3, #4]
 8011708:	1809      	addeq	r1, r1, r0
 801170a:	6021      	streq	r1, [r4, #0]
 801170c:	e7ed      	b.n	80116ea <_free_r+0x1e>
 801170e:	461a      	mov	r2, r3
 8011710:	685b      	ldr	r3, [r3, #4]
 8011712:	b10b      	cbz	r3, 8011718 <_free_r+0x4c>
 8011714:	42a3      	cmp	r3, r4
 8011716:	d9fa      	bls.n	801170e <_free_r+0x42>
 8011718:	6811      	ldr	r1, [r2, #0]
 801171a:	1850      	adds	r0, r2, r1
 801171c:	42a0      	cmp	r0, r4
 801171e:	d10b      	bne.n	8011738 <_free_r+0x6c>
 8011720:	6820      	ldr	r0, [r4, #0]
 8011722:	4401      	add	r1, r0
 8011724:	1850      	adds	r0, r2, r1
 8011726:	6011      	str	r1, [r2, #0]
 8011728:	4283      	cmp	r3, r0
 801172a:	d1e0      	bne.n	80116ee <_free_r+0x22>
 801172c:	6818      	ldr	r0, [r3, #0]
 801172e:	685b      	ldr	r3, [r3, #4]
 8011730:	4408      	add	r0, r1
 8011732:	6053      	str	r3, [r2, #4]
 8011734:	6010      	str	r0, [r2, #0]
 8011736:	e7da      	b.n	80116ee <_free_r+0x22>
 8011738:	d902      	bls.n	8011740 <_free_r+0x74>
 801173a:	230c      	movs	r3, #12
 801173c:	602b      	str	r3, [r5, #0]
 801173e:	e7d6      	b.n	80116ee <_free_r+0x22>
 8011740:	6820      	ldr	r0, [r4, #0]
 8011742:	1821      	adds	r1, r4, r0
 8011744:	428b      	cmp	r3, r1
 8011746:	bf02      	ittt	eq
 8011748:	6819      	ldreq	r1, [r3, #0]
 801174a:	685b      	ldreq	r3, [r3, #4]
 801174c:	1809      	addeq	r1, r1, r0
 801174e:	6063      	str	r3, [r4, #4]
 8011750:	bf08      	it	eq
 8011752:	6021      	streq	r1, [r4, #0]
 8011754:	6054      	str	r4, [r2, #4]
 8011756:	e7ca      	b.n	80116ee <_free_r+0x22>
 8011758:	bd38      	pop	{r3, r4, r5, pc}
 801175a:	bf00      	nop
 801175c:	200113b0 	.word	0x200113b0

08011760 <sbrk_aligned>:
 8011760:	b570      	push	{r4, r5, r6, lr}
 8011762:	4e0f      	ldr	r6, [pc, #60]	@ (80117a0 <sbrk_aligned+0x40>)
 8011764:	460c      	mov	r4, r1
 8011766:	4605      	mov	r5, r0
 8011768:	6831      	ldr	r1, [r6, #0]
 801176a:	b911      	cbnz	r1, 8011772 <sbrk_aligned+0x12>
 801176c:	f000 fe2c 	bl	80123c8 <_sbrk_r>
 8011770:	6030      	str	r0, [r6, #0]
 8011772:	4621      	mov	r1, r4
 8011774:	4628      	mov	r0, r5
 8011776:	f000 fe27 	bl	80123c8 <_sbrk_r>
 801177a:	1c43      	adds	r3, r0, #1
 801177c:	d103      	bne.n	8011786 <sbrk_aligned+0x26>
 801177e:	f04f 34ff 	mov.w	r4, #4294967295
 8011782:	4620      	mov	r0, r4
 8011784:	bd70      	pop	{r4, r5, r6, pc}
 8011786:	1cc4      	adds	r4, r0, #3
 8011788:	f024 0403 	bic.w	r4, r4, #3
 801178c:	42a0      	cmp	r0, r4
 801178e:	d0f8      	beq.n	8011782 <sbrk_aligned+0x22>
 8011790:	1a21      	subs	r1, r4, r0
 8011792:	4628      	mov	r0, r5
 8011794:	f000 fe18 	bl	80123c8 <_sbrk_r>
 8011798:	3001      	adds	r0, #1
 801179a:	d1f2      	bne.n	8011782 <sbrk_aligned+0x22>
 801179c:	e7ef      	b.n	801177e <sbrk_aligned+0x1e>
 801179e:	bf00      	nop
 80117a0:	200113ac 	.word	0x200113ac

080117a4 <_malloc_r>:
 80117a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80117a8:	1ccd      	adds	r5, r1, #3
 80117aa:	4606      	mov	r6, r0
 80117ac:	f025 0503 	bic.w	r5, r5, #3
 80117b0:	3508      	adds	r5, #8
 80117b2:	2d0c      	cmp	r5, #12
 80117b4:	bf38      	it	cc
 80117b6:	250c      	movcc	r5, #12
 80117b8:	2d00      	cmp	r5, #0
 80117ba:	db01      	blt.n	80117c0 <_malloc_r+0x1c>
 80117bc:	42a9      	cmp	r1, r5
 80117be:	d904      	bls.n	80117ca <_malloc_r+0x26>
 80117c0:	230c      	movs	r3, #12
 80117c2:	6033      	str	r3, [r6, #0]
 80117c4:	2000      	movs	r0, #0
 80117c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80117ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80118a0 <_malloc_r+0xfc>
 80117ce:	f000 f869 	bl	80118a4 <__malloc_lock>
 80117d2:	f8d8 3000 	ldr.w	r3, [r8]
 80117d6:	461c      	mov	r4, r3
 80117d8:	bb44      	cbnz	r4, 801182c <_malloc_r+0x88>
 80117da:	4629      	mov	r1, r5
 80117dc:	4630      	mov	r0, r6
 80117de:	f7ff ffbf 	bl	8011760 <sbrk_aligned>
 80117e2:	1c43      	adds	r3, r0, #1
 80117e4:	4604      	mov	r4, r0
 80117e6:	d158      	bne.n	801189a <_malloc_r+0xf6>
 80117e8:	f8d8 4000 	ldr.w	r4, [r8]
 80117ec:	4627      	mov	r7, r4
 80117ee:	2f00      	cmp	r7, #0
 80117f0:	d143      	bne.n	801187a <_malloc_r+0xd6>
 80117f2:	2c00      	cmp	r4, #0
 80117f4:	d04b      	beq.n	801188e <_malloc_r+0xea>
 80117f6:	6823      	ldr	r3, [r4, #0]
 80117f8:	4639      	mov	r1, r7
 80117fa:	4630      	mov	r0, r6
 80117fc:	eb04 0903 	add.w	r9, r4, r3
 8011800:	f000 fde2 	bl	80123c8 <_sbrk_r>
 8011804:	4581      	cmp	r9, r0
 8011806:	d142      	bne.n	801188e <_malloc_r+0xea>
 8011808:	6821      	ldr	r1, [r4, #0]
 801180a:	4630      	mov	r0, r6
 801180c:	1a6d      	subs	r5, r5, r1
 801180e:	4629      	mov	r1, r5
 8011810:	f7ff ffa6 	bl	8011760 <sbrk_aligned>
 8011814:	3001      	adds	r0, #1
 8011816:	d03a      	beq.n	801188e <_malloc_r+0xea>
 8011818:	6823      	ldr	r3, [r4, #0]
 801181a:	442b      	add	r3, r5
 801181c:	6023      	str	r3, [r4, #0]
 801181e:	f8d8 3000 	ldr.w	r3, [r8]
 8011822:	685a      	ldr	r2, [r3, #4]
 8011824:	bb62      	cbnz	r2, 8011880 <_malloc_r+0xdc>
 8011826:	f8c8 7000 	str.w	r7, [r8]
 801182a:	e00f      	b.n	801184c <_malloc_r+0xa8>
 801182c:	6822      	ldr	r2, [r4, #0]
 801182e:	1b52      	subs	r2, r2, r5
 8011830:	d420      	bmi.n	8011874 <_malloc_r+0xd0>
 8011832:	2a0b      	cmp	r2, #11
 8011834:	d917      	bls.n	8011866 <_malloc_r+0xc2>
 8011836:	1961      	adds	r1, r4, r5
 8011838:	42a3      	cmp	r3, r4
 801183a:	6025      	str	r5, [r4, #0]
 801183c:	bf18      	it	ne
 801183e:	6059      	strne	r1, [r3, #4]
 8011840:	6863      	ldr	r3, [r4, #4]
 8011842:	bf08      	it	eq
 8011844:	f8c8 1000 	streq.w	r1, [r8]
 8011848:	5162      	str	r2, [r4, r5]
 801184a:	604b      	str	r3, [r1, #4]
 801184c:	4630      	mov	r0, r6
 801184e:	f000 f82f 	bl	80118b0 <__malloc_unlock>
 8011852:	f104 000b 	add.w	r0, r4, #11
 8011856:	1d23      	adds	r3, r4, #4
 8011858:	f020 0007 	bic.w	r0, r0, #7
 801185c:	1ac2      	subs	r2, r0, r3
 801185e:	bf1c      	itt	ne
 8011860:	1a1b      	subne	r3, r3, r0
 8011862:	50a3      	strne	r3, [r4, r2]
 8011864:	e7af      	b.n	80117c6 <_malloc_r+0x22>
 8011866:	6862      	ldr	r2, [r4, #4]
 8011868:	42a3      	cmp	r3, r4
 801186a:	bf0c      	ite	eq
 801186c:	f8c8 2000 	streq.w	r2, [r8]
 8011870:	605a      	strne	r2, [r3, #4]
 8011872:	e7eb      	b.n	801184c <_malloc_r+0xa8>
 8011874:	4623      	mov	r3, r4
 8011876:	6864      	ldr	r4, [r4, #4]
 8011878:	e7ae      	b.n	80117d8 <_malloc_r+0x34>
 801187a:	463c      	mov	r4, r7
 801187c:	687f      	ldr	r7, [r7, #4]
 801187e:	e7b6      	b.n	80117ee <_malloc_r+0x4a>
 8011880:	461a      	mov	r2, r3
 8011882:	685b      	ldr	r3, [r3, #4]
 8011884:	42a3      	cmp	r3, r4
 8011886:	d1fb      	bne.n	8011880 <_malloc_r+0xdc>
 8011888:	2300      	movs	r3, #0
 801188a:	6053      	str	r3, [r2, #4]
 801188c:	e7de      	b.n	801184c <_malloc_r+0xa8>
 801188e:	230c      	movs	r3, #12
 8011890:	4630      	mov	r0, r6
 8011892:	6033      	str	r3, [r6, #0]
 8011894:	f000 f80c 	bl	80118b0 <__malloc_unlock>
 8011898:	e794      	b.n	80117c4 <_malloc_r+0x20>
 801189a:	6005      	str	r5, [r0, #0]
 801189c:	e7d6      	b.n	801184c <_malloc_r+0xa8>
 801189e:	bf00      	nop
 80118a0:	200113b0 	.word	0x200113b0

080118a4 <__malloc_lock>:
 80118a4:	4801      	ldr	r0, [pc, #4]	@ (80118ac <__malloc_lock+0x8>)
 80118a6:	f7ff bf02 	b.w	80116ae <__retarget_lock_acquire_recursive>
 80118aa:	bf00      	nop
 80118ac:	200113a8 	.word	0x200113a8

080118b0 <__malloc_unlock>:
 80118b0:	4801      	ldr	r0, [pc, #4]	@ (80118b8 <__malloc_unlock+0x8>)
 80118b2:	f7ff befd 	b.w	80116b0 <__retarget_lock_release_recursive>
 80118b6:	bf00      	nop
 80118b8:	200113a8 	.word	0x200113a8

080118bc <__ssputs_r>:
 80118bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118c0:	461f      	mov	r7, r3
 80118c2:	688e      	ldr	r6, [r1, #8]
 80118c4:	4682      	mov	sl, r0
 80118c6:	460c      	mov	r4, r1
 80118c8:	42be      	cmp	r6, r7
 80118ca:	4690      	mov	r8, r2
 80118cc:	680b      	ldr	r3, [r1, #0]
 80118ce:	d82d      	bhi.n	801192c <__ssputs_r+0x70>
 80118d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80118d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80118d8:	d026      	beq.n	8011928 <__ssputs_r+0x6c>
 80118da:	6965      	ldr	r5, [r4, #20]
 80118dc:	6909      	ldr	r1, [r1, #16]
 80118de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80118e2:	eba3 0901 	sub.w	r9, r3, r1
 80118e6:	1c7b      	adds	r3, r7, #1
 80118e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80118ec:	444b      	add	r3, r9
 80118ee:	106d      	asrs	r5, r5, #1
 80118f0:	429d      	cmp	r5, r3
 80118f2:	bf38      	it	cc
 80118f4:	461d      	movcc	r5, r3
 80118f6:	0553      	lsls	r3, r2, #21
 80118f8:	d527      	bpl.n	801194a <__ssputs_r+0x8e>
 80118fa:	4629      	mov	r1, r5
 80118fc:	f7ff ff52 	bl	80117a4 <_malloc_r>
 8011900:	4606      	mov	r6, r0
 8011902:	b360      	cbz	r0, 801195e <__ssputs_r+0xa2>
 8011904:	464a      	mov	r2, r9
 8011906:	6921      	ldr	r1, [r4, #16]
 8011908:	f7ff fed3 	bl	80116b2 <memcpy>
 801190c:	89a3      	ldrh	r3, [r4, #12]
 801190e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011912:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011916:	81a3      	strh	r3, [r4, #12]
 8011918:	6126      	str	r6, [r4, #16]
 801191a:	444e      	add	r6, r9
 801191c:	6165      	str	r5, [r4, #20]
 801191e:	eba5 0509 	sub.w	r5, r5, r9
 8011922:	6026      	str	r6, [r4, #0]
 8011924:	463e      	mov	r6, r7
 8011926:	60a5      	str	r5, [r4, #8]
 8011928:	42be      	cmp	r6, r7
 801192a:	d900      	bls.n	801192e <__ssputs_r+0x72>
 801192c:	463e      	mov	r6, r7
 801192e:	4632      	mov	r2, r6
 8011930:	4641      	mov	r1, r8
 8011932:	6820      	ldr	r0, [r4, #0]
 8011934:	f000 fd2e 	bl	8012394 <memmove>
 8011938:	68a3      	ldr	r3, [r4, #8]
 801193a:	2000      	movs	r0, #0
 801193c:	1b9b      	subs	r3, r3, r6
 801193e:	60a3      	str	r3, [r4, #8]
 8011940:	6823      	ldr	r3, [r4, #0]
 8011942:	4433      	add	r3, r6
 8011944:	6023      	str	r3, [r4, #0]
 8011946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801194a:	462a      	mov	r2, r5
 801194c:	f000 fd5a 	bl	8012404 <_realloc_r>
 8011950:	4606      	mov	r6, r0
 8011952:	2800      	cmp	r0, #0
 8011954:	d1e0      	bne.n	8011918 <__ssputs_r+0x5c>
 8011956:	6921      	ldr	r1, [r4, #16]
 8011958:	4650      	mov	r0, sl
 801195a:	f7ff feb7 	bl	80116cc <_free_r>
 801195e:	230c      	movs	r3, #12
 8011960:	f04f 30ff 	mov.w	r0, #4294967295
 8011964:	f8ca 3000 	str.w	r3, [sl]
 8011968:	89a3      	ldrh	r3, [r4, #12]
 801196a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801196e:	81a3      	strh	r3, [r4, #12]
 8011970:	e7e9      	b.n	8011946 <__ssputs_r+0x8a>
	...

08011974 <_svfiprintf_r>:
 8011974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011978:	4698      	mov	r8, r3
 801197a:	898b      	ldrh	r3, [r1, #12]
 801197c:	b09d      	sub	sp, #116	@ 0x74
 801197e:	4607      	mov	r7, r0
 8011980:	061b      	lsls	r3, r3, #24
 8011982:	460d      	mov	r5, r1
 8011984:	4614      	mov	r4, r2
 8011986:	d510      	bpl.n	80119aa <_svfiprintf_r+0x36>
 8011988:	690b      	ldr	r3, [r1, #16]
 801198a:	b973      	cbnz	r3, 80119aa <_svfiprintf_r+0x36>
 801198c:	2140      	movs	r1, #64	@ 0x40
 801198e:	f7ff ff09 	bl	80117a4 <_malloc_r>
 8011992:	6028      	str	r0, [r5, #0]
 8011994:	6128      	str	r0, [r5, #16]
 8011996:	b930      	cbnz	r0, 80119a6 <_svfiprintf_r+0x32>
 8011998:	230c      	movs	r3, #12
 801199a:	603b      	str	r3, [r7, #0]
 801199c:	f04f 30ff 	mov.w	r0, #4294967295
 80119a0:	b01d      	add	sp, #116	@ 0x74
 80119a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119a6:	2340      	movs	r3, #64	@ 0x40
 80119a8:	616b      	str	r3, [r5, #20]
 80119aa:	2300      	movs	r3, #0
 80119ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80119b0:	f04f 0901 	mov.w	r9, #1
 80119b4:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8011b58 <_svfiprintf_r+0x1e4>
 80119b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80119ba:	2320      	movs	r3, #32
 80119bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80119c0:	2330      	movs	r3, #48	@ 0x30
 80119c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80119c6:	4623      	mov	r3, r4
 80119c8:	469a      	mov	sl, r3
 80119ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80119ce:	b10a      	cbz	r2, 80119d4 <_svfiprintf_r+0x60>
 80119d0:	2a25      	cmp	r2, #37	@ 0x25
 80119d2:	d1f9      	bne.n	80119c8 <_svfiprintf_r+0x54>
 80119d4:	ebba 0b04 	subs.w	fp, sl, r4
 80119d8:	d00b      	beq.n	80119f2 <_svfiprintf_r+0x7e>
 80119da:	465b      	mov	r3, fp
 80119dc:	4622      	mov	r2, r4
 80119de:	4629      	mov	r1, r5
 80119e0:	4638      	mov	r0, r7
 80119e2:	f7ff ff6b 	bl	80118bc <__ssputs_r>
 80119e6:	3001      	adds	r0, #1
 80119e8:	f000 80a7 	beq.w	8011b3a <_svfiprintf_r+0x1c6>
 80119ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80119ee:	445a      	add	r2, fp
 80119f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80119f2:	f89a 3000 	ldrb.w	r3, [sl]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	f000 809f 	beq.w	8011b3a <_svfiprintf_r+0x1c6>
 80119fc:	2300      	movs	r3, #0
 80119fe:	f04f 32ff 	mov.w	r2, #4294967295
 8011a02:	f10a 0a01 	add.w	sl, sl, #1
 8011a06:	9304      	str	r3, [sp, #16]
 8011a08:	9307      	str	r3, [sp, #28]
 8011a0a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011a0e:	931a      	str	r3, [sp, #104]	@ 0x68
 8011a10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011a14:	4654      	mov	r4, sl
 8011a16:	2205      	movs	r2, #5
 8011a18:	484f      	ldr	r0, [pc, #316]	@ (8011b58 <_svfiprintf_r+0x1e4>)
 8011a1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a1e:	f000 fce3 	bl	80123e8 <memchr>
 8011a22:	9a04      	ldr	r2, [sp, #16]
 8011a24:	b9d8      	cbnz	r0, 8011a5e <_svfiprintf_r+0xea>
 8011a26:	06d0      	lsls	r0, r2, #27
 8011a28:	bf44      	itt	mi
 8011a2a:	2320      	movmi	r3, #32
 8011a2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011a30:	0711      	lsls	r1, r2, #28
 8011a32:	bf44      	itt	mi
 8011a34:	232b      	movmi	r3, #43	@ 0x2b
 8011a36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011a3a:	f89a 3000 	ldrb.w	r3, [sl]
 8011a3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011a40:	d015      	beq.n	8011a6e <_svfiprintf_r+0xfa>
 8011a42:	9a07      	ldr	r2, [sp, #28]
 8011a44:	4654      	mov	r4, sl
 8011a46:	2000      	movs	r0, #0
 8011a48:	f04f 0c0a 	mov.w	ip, #10
 8011a4c:	4621      	mov	r1, r4
 8011a4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011a52:	3b30      	subs	r3, #48	@ 0x30
 8011a54:	2b09      	cmp	r3, #9
 8011a56:	d94b      	bls.n	8011af0 <_svfiprintf_r+0x17c>
 8011a58:	b1b0      	cbz	r0, 8011a88 <_svfiprintf_r+0x114>
 8011a5a:	9207      	str	r2, [sp, #28]
 8011a5c:	e014      	b.n	8011a88 <_svfiprintf_r+0x114>
 8011a5e:	eba0 0308 	sub.w	r3, r0, r8
 8011a62:	46a2      	mov	sl, r4
 8011a64:	fa09 f303 	lsl.w	r3, r9, r3
 8011a68:	4313      	orrs	r3, r2
 8011a6a:	9304      	str	r3, [sp, #16]
 8011a6c:	e7d2      	b.n	8011a14 <_svfiprintf_r+0xa0>
 8011a6e:	9b03      	ldr	r3, [sp, #12]
 8011a70:	1d19      	adds	r1, r3, #4
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	9103      	str	r1, [sp, #12]
 8011a78:	bfbb      	ittet	lt
 8011a7a:	425b      	neglt	r3, r3
 8011a7c:	f042 0202 	orrlt.w	r2, r2, #2
 8011a80:	9307      	strge	r3, [sp, #28]
 8011a82:	9307      	strlt	r3, [sp, #28]
 8011a84:	bfb8      	it	lt
 8011a86:	9204      	strlt	r2, [sp, #16]
 8011a88:	7823      	ldrb	r3, [r4, #0]
 8011a8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8011a8c:	d10a      	bne.n	8011aa4 <_svfiprintf_r+0x130>
 8011a8e:	7863      	ldrb	r3, [r4, #1]
 8011a90:	2b2a      	cmp	r3, #42	@ 0x2a
 8011a92:	d132      	bne.n	8011afa <_svfiprintf_r+0x186>
 8011a94:	9b03      	ldr	r3, [sp, #12]
 8011a96:	3402      	adds	r4, #2
 8011a98:	1d1a      	adds	r2, r3, #4
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011aa0:	9203      	str	r2, [sp, #12]
 8011aa2:	9305      	str	r3, [sp, #20]
 8011aa4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011b68 <_svfiprintf_r+0x1f4>
 8011aa8:	2203      	movs	r2, #3
 8011aaa:	7821      	ldrb	r1, [r4, #0]
 8011aac:	4650      	mov	r0, sl
 8011aae:	f000 fc9b 	bl	80123e8 <memchr>
 8011ab2:	b138      	cbz	r0, 8011ac4 <_svfiprintf_r+0x150>
 8011ab4:	eba0 000a 	sub.w	r0, r0, sl
 8011ab8:	2240      	movs	r2, #64	@ 0x40
 8011aba:	9b04      	ldr	r3, [sp, #16]
 8011abc:	3401      	adds	r4, #1
 8011abe:	4082      	lsls	r2, r0
 8011ac0:	4313      	orrs	r3, r2
 8011ac2:	9304      	str	r3, [sp, #16]
 8011ac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ac8:	2206      	movs	r2, #6
 8011aca:	4824      	ldr	r0, [pc, #144]	@ (8011b5c <_svfiprintf_r+0x1e8>)
 8011acc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011ad0:	f000 fc8a 	bl	80123e8 <memchr>
 8011ad4:	2800      	cmp	r0, #0
 8011ad6:	d036      	beq.n	8011b46 <_svfiprintf_r+0x1d2>
 8011ad8:	4b21      	ldr	r3, [pc, #132]	@ (8011b60 <_svfiprintf_r+0x1ec>)
 8011ada:	bb1b      	cbnz	r3, 8011b24 <_svfiprintf_r+0x1b0>
 8011adc:	9b03      	ldr	r3, [sp, #12]
 8011ade:	3307      	adds	r3, #7
 8011ae0:	f023 0307 	bic.w	r3, r3, #7
 8011ae4:	3308      	adds	r3, #8
 8011ae6:	9303      	str	r3, [sp, #12]
 8011ae8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011aea:	4433      	add	r3, r6
 8011aec:	9309      	str	r3, [sp, #36]	@ 0x24
 8011aee:	e76a      	b.n	80119c6 <_svfiprintf_r+0x52>
 8011af0:	fb0c 3202 	mla	r2, ip, r2, r3
 8011af4:	460c      	mov	r4, r1
 8011af6:	2001      	movs	r0, #1
 8011af8:	e7a8      	b.n	8011a4c <_svfiprintf_r+0xd8>
 8011afa:	2300      	movs	r3, #0
 8011afc:	3401      	adds	r4, #1
 8011afe:	f04f 0c0a 	mov.w	ip, #10
 8011b02:	4619      	mov	r1, r3
 8011b04:	9305      	str	r3, [sp, #20]
 8011b06:	4620      	mov	r0, r4
 8011b08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011b0c:	3a30      	subs	r2, #48	@ 0x30
 8011b0e:	2a09      	cmp	r2, #9
 8011b10:	d903      	bls.n	8011b1a <_svfiprintf_r+0x1a6>
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d0c6      	beq.n	8011aa4 <_svfiprintf_r+0x130>
 8011b16:	9105      	str	r1, [sp, #20]
 8011b18:	e7c4      	b.n	8011aa4 <_svfiprintf_r+0x130>
 8011b1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8011b1e:	4604      	mov	r4, r0
 8011b20:	2301      	movs	r3, #1
 8011b22:	e7f0      	b.n	8011b06 <_svfiprintf_r+0x192>
 8011b24:	ab03      	add	r3, sp, #12
 8011b26:	462a      	mov	r2, r5
 8011b28:	a904      	add	r1, sp, #16
 8011b2a:	4638      	mov	r0, r7
 8011b2c:	9300      	str	r3, [sp, #0]
 8011b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8011b64 <_svfiprintf_r+0x1f0>)
 8011b30:	f3af 8000 	nop.w
 8011b34:	1c42      	adds	r2, r0, #1
 8011b36:	4606      	mov	r6, r0
 8011b38:	d1d6      	bne.n	8011ae8 <_svfiprintf_r+0x174>
 8011b3a:	89ab      	ldrh	r3, [r5, #12]
 8011b3c:	065b      	lsls	r3, r3, #25
 8011b3e:	f53f af2d 	bmi.w	801199c <_svfiprintf_r+0x28>
 8011b42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011b44:	e72c      	b.n	80119a0 <_svfiprintf_r+0x2c>
 8011b46:	ab03      	add	r3, sp, #12
 8011b48:	462a      	mov	r2, r5
 8011b4a:	a904      	add	r1, sp, #16
 8011b4c:	4638      	mov	r0, r7
 8011b4e:	9300      	str	r3, [sp, #0]
 8011b50:	4b04      	ldr	r3, [pc, #16]	@ (8011b64 <_svfiprintf_r+0x1f0>)
 8011b52:	f000 f9bf 	bl	8011ed4 <_printf_i>
 8011b56:	e7ed      	b.n	8011b34 <_svfiprintf_r+0x1c0>
 8011b58:	0801311c 	.word	0x0801311c
 8011b5c:	08013126 	.word	0x08013126
 8011b60:	00000000 	.word	0x00000000
 8011b64:	080118bd 	.word	0x080118bd
 8011b68:	08013122 	.word	0x08013122

08011b6c <__sfputc_r>:
 8011b6c:	6893      	ldr	r3, [r2, #8]
 8011b6e:	3b01      	subs	r3, #1
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	6093      	str	r3, [r2, #8]
 8011b74:	b410      	push	{r4}
 8011b76:	da08      	bge.n	8011b8a <__sfputc_r+0x1e>
 8011b78:	6994      	ldr	r4, [r2, #24]
 8011b7a:	42a3      	cmp	r3, r4
 8011b7c:	db01      	blt.n	8011b82 <__sfputc_r+0x16>
 8011b7e:	290a      	cmp	r1, #10
 8011b80:	d103      	bne.n	8011b8a <__sfputc_r+0x1e>
 8011b82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b86:	f000 bb71 	b.w	801226c <__swbuf_r>
 8011b8a:	6813      	ldr	r3, [r2, #0]
 8011b8c:	1c58      	adds	r0, r3, #1
 8011b8e:	6010      	str	r0, [r2, #0]
 8011b90:	4608      	mov	r0, r1
 8011b92:	7019      	strb	r1, [r3, #0]
 8011b94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b98:	4770      	bx	lr

08011b9a <__sfputs_r>:
 8011b9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b9c:	4606      	mov	r6, r0
 8011b9e:	460f      	mov	r7, r1
 8011ba0:	4614      	mov	r4, r2
 8011ba2:	18d5      	adds	r5, r2, r3
 8011ba4:	42ac      	cmp	r4, r5
 8011ba6:	d101      	bne.n	8011bac <__sfputs_r+0x12>
 8011ba8:	2000      	movs	r0, #0
 8011baa:	e007      	b.n	8011bbc <__sfputs_r+0x22>
 8011bac:	463a      	mov	r2, r7
 8011bae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011bb2:	4630      	mov	r0, r6
 8011bb4:	f7ff ffda 	bl	8011b6c <__sfputc_r>
 8011bb8:	1c43      	adds	r3, r0, #1
 8011bba:	d1f3      	bne.n	8011ba4 <__sfputs_r+0xa>
 8011bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011bc0 <_vfiprintf_r>:
 8011bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bc4:	460d      	mov	r5, r1
 8011bc6:	b09d      	sub	sp, #116	@ 0x74
 8011bc8:	4614      	mov	r4, r2
 8011bca:	4698      	mov	r8, r3
 8011bcc:	4606      	mov	r6, r0
 8011bce:	b118      	cbz	r0, 8011bd8 <_vfiprintf_r+0x18>
 8011bd0:	6a03      	ldr	r3, [r0, #32]
 8011bd2:	b90b      	cbnz	r3, 8011bd8 <_vfiprintf_r+0x18>
 8011bd4:	f7ff fbda 	bl	801138c <__sinit>
 8011bd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011bda:	07d9      	lsls	r1, r3, #31
 8011bdc:	d405      	bmi.n	8011bea <_vfiprintf_r+0x2a>
 8011bde:	89ab      	ldrh	r3, [r5, #12]
 8011be0:	059a      	lsls	r2, r3, #22
 8011be2:	d402      	bmi.n	8011bea <_vfiprintf_r+0x2a>
 8011be4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011be6:	f7ff fd62 	bl	80116ae <__retarget_lock_acquire_recursive>
 8011bea:	89ab      	ldrh	r3, [r5, #12]
 8011bec:	071b      	lsls	r3, r3, #28
 8011bee:	d501      	bpl.n	8011bf4 <_vfiprintf_r+0x34>
 8011bf0:	692b      	ldr	r3, [r5, #16]
 8011bf2:	b99b      	cbnz	r3, 8011c1c <_vfiprintf_r+0x5c>
 8011bf4:	4629      	mov	r1, r5
 8011bf6:	4630      	mov	r0, r6
 8011bf8:	f000 fb76 	bl	80122e8 <__swsetup_r>
 8011bfc:	b170      	cbz	r0, 8011c1c <_vfiprintf_r+0x5c>
 8011bfe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011c00:	07dc      	lsls	r4, r3, #31
 8011c02:	d504      	bpl.n	8011c0e <_vfiprintf_r+0x4e>
 8011c04:	f04f 30ff 	mov.w	r0, #4294967295
 8011c08:	b01d      	add	sp, #116	@ 0x74
 8011c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c0e:	89ab      	ldrh	r3, [r5, #12]
 8011c10:	0598      	lsls	r0, r3, #22
 8011c12:	d4f7      	bmi.n	8011c04 <_vfiprintf_r+0x44>
 8011c14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011c16:	f7ff fd4b 	bl	80116b0 <__retarget_lock_release_recursive>
 8011c1a:	e7f3      	b.n	8011c04 <_vfiprintf_r+0x44>
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011c22:	f04f 0901 	mov.w	r9, #1
 8011c26:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8011ddc <_vfiprintf_r+0x21c>
 8011c2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c2c:	2320      	movs	r3, #32
 8011c2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011c32:	2330      	movs	r3, #48	@ 0x30
 8011c34:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011c38:	4623      	mov	r3, r4
 8011c3a:	469a      	mov	sl, r3
 8011c3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011c40:	b10a      	cbz	r2, 8011c46 <_vfiprintf_r+0x86>
 8011c42:	2a25      	cmp	r2, #37	@ 0x25
 8011c44:	d1f9      	bne.n	8011c3a <_vfiprintf_r+0x7a>
 8011c46:	ebba 0b04 	subs.w	fp, sl, r4
 8011c4a:	d00b      	beq.n	8011c64 <_vfiprintf_r+0xa4>
 8011c4c:	465b      	mov	r3, fp
 8011c4e:	4622      	mov	r2, r4
 8011c50:	4629      	mov	r1, r5
 8011c52:	4630      	mov	r0, r6
 8011c54:	f7ff ffa1 	bl	8011b9a <__sfputs_r>
 8011c58:	3001      	adds	r0, #1
 8011c5a:	f000 80a7 	beq.w	8011dac <_vfiprintf_r+0x1ec>
 8011c5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011c60:	445a      	add	r2, fp
 8011c62:	9209      	str	r2, [sp, #36]	@ 0x24
 8011c64:	f89a 3000 	ldrb.w	r3, [sl]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	f000 809f 	beq.w	8011dac <_vfiprintf_r+0x1ec>
 8011c6e:	2300      	movs	r3, #0
 8011c70:	f04f 32ff 	mov.w	r2, #4294967295
 8011c74:	f10a 0a01 	add.w	sl, sl, #1
 8011c78:	9304      	str	r3, [sp, #16]
 8011c7a:	9307      	str	r3, [sp, #28]
 8011c7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011c80:	931a      	str	r3, [sp, #104]	@ 0x68
 8011c82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011c86:	4654      	mov	r4, sl
 8011c88:	2205      	movs	r2, #5
 8011c8a:	4854      	ldr	r0, [pc, #336]	@ (8011ddc <_vfiprintf_r+0x21c>)
 8011c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c90:	f000 fbaa 	bl	80123e8 <memchr>
 8011c94:	9a04      	ldr	r2, [sp, #16]
 8011c96:	b9d8      	cbnz	r0, 8011cd0 <_vfiprintf_r+0x110>
 8011c98:	06d1      	lsls	r1, r2, #27
 8011c9a:	bf44      	itt	mi
 8011c9c:	2320      	movmi	r3, #32
 8011c9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011ca2:	0713      	lsls	r3, r2, #28
 8011ca4:	bf44      	itt	mi
 8011ca6:	232b      	movmi	r3, #43	@ 0x2b
 8011ca8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011cac:	f89a 3000 	ldrb.w	r3, [sl]
 8011cb0:	2b2a      	cmp	r3, #42	@ 0x2a
 8011cb2:	d015      	beq.n	8011ce0 <_vfiprintf_r+0x120>
 8011cb4:	9a07      	ldr	r2, [sp, #28]
 8011cb6:	4654      	mov	r4, sl
 8011cb8:	2000      	movs	r0, #0
 8011cba:	f04f 0c0a 	mov.w	ip, #10
 8011cbe:	4621      	mov	r1, r4
 8011cc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011cc4:	3b30      	subs	r3, #48	@ 0x30
 8011cc6:	2b09      	cmp	r3, #9
 8011cc8:	d94b      	bls.n	8011d62 <_vfiprintf_r+0x1a2>
 8011cca:	b1b0      	cbz	r0, 8011cfa <_vfiprintf_r+0x13a>
 8011ccc:	9207      	str	r2, [sp, #28]
 8011cce:	e014      	b.n	8011cfa <_vfiprintf_r+0x13a>
 8011cd0:	eba0 0308 	sub.w	r3, r0, r8
 8011cd4:	46a2      	mov	sl, r4
 8011cd6:	fa09 f303 	lsl.w	r3, r9, r3
 8011cda:	4313      	orrs	r3, r2
 8011cdc:	9304      	str	r3, [sp, #16]
 8011cde:	e7d2      	b.n	8011c86 <_vfiprintf_r+0xc6>
 8011ce0:	9b03      	ldr	r3, [sp, #12]
 8011ce2:	1d19      	adds	r1, r3, #4
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	9103      	str	r1, [sp, #12]
 8011cea:	bfbb      	ittet	lt
 8011cec:	425b      	neglt	r3, r3
 8011cee:	f042 0202 	orrlt.w	r2, r2, #2
 8011cf2:	9307      	strge	r3, [sp, #28]
 8011cf4:	9307      	strlt	r3, [sp, #28]
 8011cf6:	bfb8      	it	lt
 8011cf8:	9204      	strlt	r2, [sp, #16]
 8011cfa:	7823      	ldrb	r3, [r4, #0]
 8011cfc:	2b2e      	cmp	r3, #46	@ 0x2e
 8011cfe:	d10a      	bne.n	8011d16 <_vfiprintf_r+0x156>
 8011d00:	7863      	ldrb	r3, [r4, #1]
 8011d02:	2b2a      	cmp	r3, #42	@ 0x2a
 8011d04:	d132      	bne.n	8011d6c <_vfiprintf_r+0x1ac>
 8011d06:	9b03      	ldr	r3, [sp, #12]
 8011d08:	3402      	adds	r4, #2
 8011d0a:	1d1a      	adds	r2, r3, #4
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011d12:	9203      	str	r2, [sp, #12]
 8011d14:	9305      	str	r3, [sp, #20]
 8011d16:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011dec <_vfiprintf_r+0x22c>
 8011d1a:	2203      	movs	r2, #3
 8011d1c:	7821      	ldrb	r1, [r4, #0]
 8011d1e:	4650      	mov	r0, sl
 8011d20:	f000 fb62 	bl	80123e8 <memchr>
 8011d24:	b138      	cbz	r0, 8011d36 <_vfiprintf_r+0x176>
 8011d26:	eba0 000a 	sub.w	r0, r0, sl
 8011d2a:	2240      	movs	r2, #64	@ 0x40
 8011d2c:	9b04      	ldr	r3, [sp, #16]
 8011d2e:	3401      	adds	r4, #1
 8011d30:	4082      	lsls	r2, r0
 8011d32:	4313      	orrs	r3, r2
 8011d34:	9304      	str	r3, [sp, #16]
 8011d36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d3a:	2206      	movs	r2, #6
 8011d3c:	4828      	ldr	r0, [pc, #160]	@ (8011de0 <_vfiprintf_r+0x220>)
 8011d3e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011d42:	f000 fb51 	bl	80123e8 <memchr>
 8011d46:	2800      	cmp	r0, #0
 8011d48:	d03f      	beq.n	8011dca <_vfiprintf_r+0x20a>
 8011d4a:	4b26      	ldr	r3, [pc, #152]	@ (8011de4 <_vfiprintf_r+0x224>)
 8011d4c:	bb1b      	cbnz	r3, 8011d96 <_vfiprintf_r+0x1d6>
 8011d4e:	9b03      	ldr	r3, [sp, #12]
 8011d50:	3307      	adds	r3, #7
 8011d52:	f023 0307 	bic.w	r3, r3, #7
 8011d56:	3308      	adds	r3, #8
 8011d58:	9303      	str	r3, [sp, #12]
 8011d5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d5c:	443b      	add	r3, r7
 8011d5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011d60:	e76a      	b.n	8011c38 <_vfiprintf_r+0x78>
 8011d62:	fb0c 3202 	mla	r2, ip, r2, r3
 8011d66:	460c      	mov	r4, r1
 8011d68:	2001      	movs	r0, #1
 8011d6a:	e7a8      	b.n	8011cbe <_vfiprintf_r+0xfe>
 8011d6c:	2300      	movs	r3, #0
 8011d6e:	3401      	adds	r4, #1
 8011d70:	f04f 0c0a 	mov.w	ip, #10
 8011d74:	4619      	mov	r1, r3
 8011d76:	9305      	str	r3, [sp, #20]
 8011d78:	4620      	mov	r0, r4
 8011d7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011d7e:	3a30      	subs	r2, #48	@ 0x30
 8011d80:	2a09      	cmp	r2, #9
 8011d82:	d903      	bls.n	8011d8c <_vfiprintf_r+0x1cc>
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d0c6      	beq.n	8011d16 <_vfiprintf_r+0x156>
 8011d88:	9105      	str	r1, [sp, #20]
 8011d8a:	e7c4      	b.n	8011d16 <_vfiprintf_r+0x156>
 8011d8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011d90:	4604      	mov	r4, r0
 8011d92:	2301      	movs	r3, #1
 8011d94:	e7f0      	b.n	8011d78 <_vfiprintf_r+0x1b8>
 8011d96:	ab03      	add	r3, sp, #12
 8011d98:	462a      	mov	r2, r5
 8011d9a:	a904      	add	r1, sp, #16
 8011d9c:	4630      	mov	r0, r6
 8011d9e:	9300      	str	r3, [sp, #0]
 8011da0:	4b11      	ldr	r3, [pc, #68]	@ (8011de8 <_vfiprintf_r+0x228>)
 8011da2:	f3af 8000 	nop.w
 8011da6:	4607      	mov	r7, r0
 8011da8:	1c78      	adds	r0, r7, #1
 8011daa:	d1d6      	bne.n	8011d5a <_vfiprintf_r+0x19a>
 8011dac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011dae:	07d9      	lsls	r1, r3, #31
 8011db0:	d405      	bmi.n	8011dbe <_vfiprintf_r+0x1fe>
 8011db2:	89ab      	ldrh	r3, [r5, #12]
 8011db4:	059a      	lsls	r2, r3, #22
 8011db6:	d402      	bmi.n	8011dbe <_vfiprintf_r+0x1fe>
 8011db8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011dba:	f7ff fc79 	bl	80116b0 <__retarget_lock_release_recursive>
 8011dbe:	89ab      	ldrh	r3, [r5, #12]
 8011dc0:	065b      	lsls	r3, r3, #25
 8011dc2:	f53f af1f 	bmi.w	8011c04 <_vfiprintf_r+0x44>
 8011dc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011dc8:	e71e      	b.n	8011c08 <_vfiprintf_r+0x48>
 8011dca:	ab03      	add	r3, sp, #12
 8011dcc:	462a      	mov	r2, r5
 8011dce:	a904      	add	r1, sp, #16
 8011dd0:	4630      	mov	r0, r6
 8011dd2:	9300      	str	r3, [sp, #0]
 8011dd4:	4b04      	ldr	r3, [pc, #16]	@ (8011de8 <_vfiprintf_r+0x228>)
 8011dd6:	f000 f87d 	bl	8011ed4 <_printf_i>
 8011dda:	e7e4      	b.n	8011da6 <_vfiprintf_r+0x1e6>
 8011ddc:	0801311c 	.word	0x0801311c
 8011de0:	08013126 	.word	0x08013126
 8011de4:	00000000 	.word	0x00000000
 8011de8:	08011b9b 	.word	0x08011b9b
 8011dec:	08013122 	.word	0x08013122

08011df0 <_printf_common>:
 8011df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011df4:	4616      	mov	r6, r2
 8011df6:	4698      	mov	r8, r3
 8011df8:	688a      	ldr	r2, [r1, #8]
 8011dfa:	4607      	mov	r7, r0
 8011dfc:	690b      	ldr	r3, [r1, #16]
 8011dfe:	460c      	mov	r4, r1
 8011e00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011e04:	4293      	cmp	r3, r2
 8011e06:	bfb8      	it	lt
 8011e08:	4613      	movlt	r3, r2
 8011e0a:	6033      	str	r3, [r6, #0]
 8011e0c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011e10:	b10a      	cbz	r2, 8011e16 <_printf_common+0x26>
 8011e12:	3301      	adds	r3, #1
 8011e14:	6033      	str	r3, [r6, #0]
 8011e16:	6823      	ldr	r3, [r4, #0]
 8011e18:	0699      	lsls	r1, r3, #26
 8011e1a:	bf42      	ittt	mi
 8011e1c:	6833      	ldrmi	r3, [r6, #0]
 8011e1e:	3302      	addmi	r3, #2
 8011e20:	6033      	strmi	r3, [r6, #0]
 8011e22:	6825      	ldr	r5, [r4, #0]
 8011e24:	f015 0506 	ands.w	r5, r5, #6
 8011e28:	d106      	bne.n	8011e38 <_printf_common+0x48>
 8011e2a:	f104 0a19 	add.w	sl, r4, #25
 8011e2e:	68e3      	ldr	r3, [r4, #12]
 8011e30:	6832      	ldr	r2, [r6, #0]
 8011e32:	1a9b      	subs	r3, r3, r2
 8011e34:	42ab      	cmp	r3, r5
 8011e36:	dc2b      	bgt.n	8011e90 <_printf_common+0xa0>
 8011e38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011e3c:	6822      	ldr	r2, [r4, #0]
 8011e3e:	3b00      	subs	r3, #0
 8011e40:	bf18      	it	ne
 8011e42:	2301      	movne	r3, #1
 8011e44:	0692      	lsls	r2, r2, #26
 8011e46:	d430      	bmi.n	8011eaa <_printf_common+0xba>
 8011e48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011e4c:	4641      	mov	r1, r8
 8011e4e:	4638      	mov	r0, r7
 8011e50:	47c8      	blx	r9
 8011e52:	3001      	adds	r0, #1
 8011e54:	d023      	beq.n	8011e9e <_printf_common+0xae>
 8011e56:	6823      	ldr	r3, [r4, #0]
 8011e58:	341a      	adds	r4, #26
 8011e5a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8011e5e:	f003 0306 	and.w	r3, r3, #6
 8011e62:	2b04      	cmp	r3, #4
 8011e64:	bf0a      	itet	eq
 8011e66:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8011e6a:	2500      	movne	r5, #0
 8011e6c:	6833      	ldreq	r3, [r6, #0]
 8011e6e:	f04f 0600 	mov.w	r6, #0
 8011e72:	bf08      	it	eq
 8011e74:	1aed      	subeq	r5, r5, r3
 8011e76:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8011e7a:	bf08      	it	eq
 8011e7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011e80:	4293      	cmp	r3, r2
 8011e82:	bfc4      	itt	gt
 8011e84:	1a9b      	subgt	r3, r3, r2
 8011e86:	18ed      	addgt	r5, r5, r3
 8011e88:	42b5      	cmp	r5, r6
 8011e8a:	d11a      	bne.n	8011ec2 <_printf_common+0xd2>
 8011e8c:	2000      	movs	r0, #0
 8011e8e:	e008      	b.n	8011ea2 <_printf_common+0xb2>
 8011e90:	2301      	movs	r3, #1
 8011e92:	4652      	mov	r2, sl
 8011e94:	4641      	mov	r1, r8
 8011e96:	4638      	mov	r0, r7
 8011e98:	47c8      	blx	r9
 8011e9a:	3001      	adds	r0, #1
 8011e9c:	d103      	bne.n	8011ea6 <_printf_common+0xb6>
 8011e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8011ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ea6:	3501      	adds	r5, #1
 8011ea8:	e7c1      	b.n	8011e2e <_printf_common+0x3e>
 8011eaa:	18e1      	adds	r1, r4, r3
 8011eac:	1c5a      	adds	r2, r3, #1
 8011eae:	2030      	movs	r0, #48	@ 0x30
 8011eb0:	3302      	adds	r3, #2
 8011eb2:	4422      	add	r2, r4
 8011eb4:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011eb8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011ebc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011ec0:	e7c2      	b.n	8011e48 <_printf_common+0x58>
 8011ec2:	2301      	movs	r3, #1
 8011ec4:	4622      	mov	r2, r4
 8011ec6:	4641      	mov	r1, r8
 8011ec8:	4638      	mov	r0, r7
 8011eca:	47c8      	blx	r9
 8011ecc:	3001      	adds	r0, #1
 8011ece:	d0e6      	beq.n	8011e9e <_printf_common+0xae>
 8011ed0:	3601      	adds	r6, #1
 8011ed2:	e7d9      	b.n	8011e88 <_printf_common+0x98>

08011ed4 <_printf_i>:
 8011ed4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011ed8:	7e0f      	ldrb	r7, [r1, #24]
 8011eda:	4691      	mov	r9, r2
 8011edc:	4680      	mov	r8, r0
 8011ede:	460c      	mov	r4, r1
 8011ee0:	2f78      	cmp	r7, #120	@ 0x78
 8011ee2:	469a      	mov	sl, r3
 8011ee4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011ee6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011eea:	d807      	bhi.n	8011efc <_printf_i+0x28>
 8011eec:	2f62      	cmp	r7, #98	@ 0x62
 8011eee:	d80a      	bhi.n	8011f06 <_printf_i+0x32>
 8011ef0:	2f00      	cmp	r7, #0
 8011ef2:	f000 80d2 	beq.w	801209a <_printf_i+0x1c6>
 8011ef6:	2f58      	cmp	r7, #88	@ 0x58
 8011ef8:	f000 80b9 	beq.w	801206e <_printf_i+0x19a>
 8011efc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011f00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011f04:	e03a      	b.n	8011f7c <_printf_i+0xa8>
 8011f06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011f0a:	2b15      	cmp	r3, #21
 8011f0c:	d8f6      	bhi.n	8011efc <_printf_i+0x28>
 8011f0e:	a101      	add	r1, pc, #4	@ (adr r1, 8011f14 <_printf_i+0x40>)
 8011f10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011f14:	08011f6d 	.word	0x08011f6d
 8011f18:	08011f81 	.word	0x08011f81
 8011f1c:	08011efd 	.word	0x08011efd
 8011f20:	08011efd 	.word	0x08011efd
 8011f24:	08011efd 	.word	0x08011efd
 8011f28:	08011efd 	.word	0x08011efd
 8011f2c:	08011f81 	.word	0x08011f81
 8011f30:	08011efd 	.word	0x08011efd
 8011f34:	08011efd 	.word	0x08011efd
 8011f38:	08011efd 	.word	0x08011efd
 8011f3c:	08011efd 	.word	0x08011efd
 8011f40:	08012081 	.word	0x08012081
 8011f44:	08011fab 	.word	0x08011fab
 8011f48:	0801203b 	.word	0x0801203b
 8011f4c:	08011efd 	.word	0x08011efd
 8011f50:	08011efd 	.word	0x08011efd
 8011f54:	080120a3 	.word	0x080120a3
 8011f58:	08011efd 	.word	0x08011efd
 8011f5c:	08011fab 	.word	0x08011fab
 8011f60:	08011efd 	.word	0x08011efd
 8011f64:	08011efd 	.word	0x08011efd
 8011f68:	08012043 	.word	0x08012043
 8011f6c:	6833      	ldr	r3, [r6, #0]
 8011f6e:	1d1a      	adds	r2, r3, #4
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	6032      	str	r2, [r6, #0]
 8011f74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011f78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011f7c:	2301      	movs	r3, #1
 8011f7e:	e09d      	b.n	80120bc <_printf_i+0x1e8>
 8011f80:	6833      	ldr	r3, [r6, #0]
 8011f82:	6820      	ldr	r0, [r4, #0]
 8011f84:	1d19      	adds	r1, r3, #4
 8011f86:	6031      	str	r1, [r6, #0]
 8011f88:	0606      	lsls	r6, r0, #24
 8011f8a:	d501      	bpl.n	8011f90 <_printf_i+0xbc>
 8011f8c:	681d      	ldr	r5, [r3, #0]
 8011f8e:	e003      	b.n	8011f98 <_printf_i+0xc4>
 8011f90:	0645      	lsls	r5, r0, #25
 8011f92:	d5fb      	bpl.n	8011f8c <_printf_i+0xb8>
 8011f94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011f98:	2d00      	cmp	r5, #0
 8011f9a:	da03      	bge.n	8011fa4 <_printf_i+0xd0>
 8011f9c:	232d      	movs	r3, #45	@ 0x2d
 8011f9e:	426d      	negs	r5, r5
 8011fa0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011fa4:	4859      	ldr	r0, [pc, #356]	@ (801210c <_printf_i+0x238>)
 8011fa6:	230a      	movs	r3, #10
 8011fa8:	e011      	b.n	8011fce <_printf_i+0xfa>
 8011faa:	6821      	ldr	r1, [r4, #0]
 8011fac:	6833      	ldr	r3, [r6, #0]
 8011fae:	0608      	lsls	r0, r1, #24
 8011fb0:	f853 5b04 	ldr.w	r5, [r3], #4
 8011fb4:	d402      	bmi.n	8011fbc <_printf_i+0xe8>
 8011fb6:	0649      	lsls	r1, r1, #25
 8011fb8:	bf48      	it	mi
 8011fba:	b2ad      	uxthmi	r5, r5
 8011fbc:	2f6f      	cmp	r7, #111	@ 0x6f
 8011fbe:	6033      	str	r3, [r6, #0]
 8011fc0:	4852      	ldr	r0, [pc, #328]	@ (801210c <_printf_i+0x238>)
 8011fc2:	bf14      	ite	ne
 8011fc4:	230a      	movne	r3, #10
 8011fc6:	2308      	moveq	r3, #8
 8011fc8:	2100      	movs	r1, #0
 8011fca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011fce:	6866      	ldr	r6, [r4, #4]
 8011fd0:	2e00      	cmp	r6, #0
 8011fd2:	60a6      	str	r6, [r4, #8]
 8011fd4:	bfa2      	ittt	ge
 8011fd6:	6821      	ldrge	r1, [r4, #0]
 8011fd8:	f021 0104 	bicge.w	r1, r1, #4
 8011fdc:	6021      	strge	r1, [r4, #0]
 8011fde:	b90d      	cbnz	r5, 8011fe4 <_printf_i+0x110>
 8011fe0:	2e00      	cmp	r6, #0
 8011fe2:	d04b      	beq.n	801207c <_printf_i+0x1a8>
 8011fe4:	4616      	mov	r6, r2
 8011fe6:	fbb5 f1f3 	udiv	r1, r5, r3
 8011fea:	fb03 5711 	mls	r7, r3, r1, r5
 8011fee:	5dc7      	ldrb	r7, [r0, r7]
 8011ff0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011ff4:	462f      	mov	r7, r5
 8011ff6:	460d      	mov	r5, r1
 8011ff8:	42bb      	cmp	r3, r7
 8011ffa:	d9f4      	bls.n	8011fe6 <_printf_i+0x112>
 8011ffc:	2b08      	cmp	r3, #8
 8011ffe:	d10b      	bne.n	8012018 <_printf_i+0x144>
 8012000:	6823      	ldr	r3, [r4, #0]
 8012002:	07df      	lsls	r7, r3, #31
 8012004:	d508      	bpl.n	8012018 <_printf_i+0x144>
 8012006:	6923      	ldr	r3, [r4, #16]
 8012008:	6861      	ldr	r1, [r4, #4]
 801200a:	4299      	cmp	r1, r3
 801200c:	bfde      	ittt	le
 801200e:	2330      	movle	r3, #48	@ 0x30
 8012010:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012014:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012018:	1b92      	subs	r2, r2, r6
 801201a:	6122      	str	r2, [r4, #16]
 801201c:	464b      	mov	r3, r9
 801201e:	aa03      	add	r2, sp, #12
 8012020:	4621      	mov	r1, r4
 8012022:	4640      	mov	r0, r8
 8012024:	f8cd a000 	str.w	sl, [sp]
 8012028:	f7ff fee2 	bl	8011df0 <_printf_common>
 801202c:	3001      	adds	r0, #1
 801202e:	d14a      	bne.n	80120c6 <_printf_i+0x1f2>
 8012030:	f04f 30ff 	mov.w	r0, #4294967295
 8012034:	b004      	add	sp, #16
 8012036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801203a:	6823      	ldr	r3, [r4, #0]
 801203c:	f043 0320 	orr.w	r3, r3, #32
 8012040:	6023      	str	r3, [r4, #0]
 8012042:	2778      	movs	r7, #120	@ 0x78
 8012044:	4832      	ldr	r0, [pc, #200]	@ (8012110 <_printf_i+0x23c>)
 8012046:	6823      	ldr	r3, [r4, #0]
 8012048:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801204c:	061f      	lsls	r7, r3, #24
 801204e:	6831      	ldr	r1, [r6, #0]
 8012050:	f851 5b04 	ldr.w	r5, [r1], #4
 8012054:	d402      	bmi.n	801205c <_printf_i+0x188>
 8012056:	065f      	lsls	r7, r3, #25
 8012058:	bf48      	it	mi
 801205a:	b2ad      	uxthmi	r5, r5
 801205c:	6031      	str	r1, [r6, #0]
 801205e:	07d9      	lsls	r1, r3, #31
 8012060:	bf44      	itt	mi
 8012062:	f043 0320 	orrmi.w	r3, r3, #32
 8012066:	6023      	strmi	r3, [r4, #0]
 8012068:	b11d      	cbz	r5, 8012072 <_printf_i+0x19e>
 801206a:	2310      	movs	r3, #16
 801206c:	e7ac      	b.n	8011fc8 <_printf_i+0xf4>
 801206e:	4827      	ldr	r0, [pc, #156]	@ (801210c <_printf_i+0x238>)
 8012070:	e7e9      	b.n	8012046 <_printf_i+0x172>
 8012072:	6823      	ldr	r3, [r4, #0]
 8012074:	f023 0320 	bic.w	r3, r3, #32
 8012078:	6023      	str	r3, [r4, #0]
 801207a:	e7f6      	b.n	801206a <_printf_i+0x196>
 801207c:	4616      	mov	r6, r2
 801207e:	e7bd      	b.n	8011ffc <_printf_i+0x128>
 8012080:	6833      	ldr	r3, [r6, #0]
 8012082:	6825      	ldr	r5, [r4, #0]
 8012084:	1d18      	adds	r0, r3, #4
 8012086:	6961      	ldr	r1, [r4, #20]
 8012088:	6030      	str	r0, [r6, #0]
 801208a:	062e      	lsls	r6, r5, #24
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	d501      	bpl.n	8012094 <_printf_i+0x1c0>
 8012090:	6019      	str	r1, [r3, #0]
 8012092:	e002      	b.n	801209a <_printf_i+0x1c6>
 8012094:	0668      	lsls	r0, r5, #25
 8012096:	d5fb      	bpl.n	8012090 <_printf_i+0x1bc>
 8012098:	8019      	strh	r1, [r3, #0]
 801209a:	2300      	movs	r3, #0
 801209c:	4616      	mov	r6, r2
 801209e:	6123      	str	r3, [r4, #16]
 80120a0:	e7bc      	b.n	801201c <_printf_i+0x148>
 80120a2:	6833      	ldr	r3, [r6, #0]
 80120a4:	2100      	movs	r1, #0
 80120a6:	1d1a      	adds	r2, r3, #4
 80120a8:	6032      	str	r2, [r6, #0]
 80120aa:	681e      	ldr	r6, [r3, #0]
 80120ac:	6862      	ldr	r2, [r4, #4]
 80120ae:	4630      	mov	r0, r6
 80120b0:	f000 f99a 	bl	80123e8 <memchr>
 80120b4:	b108      	cbz	r0, 80120ba <_printf_i+0x1e6>
 80120b6:	1b80      	subs	r0, r0, r6
 80120b8:	6060      	str	r0, [r4, #4]
 80120ba:	6863      	ldr	r3, [r4, #4]
 80120bc:	6123      	str	r3, [r4, #16]
 80120be:	2300      	movs	r3, #0
 80120c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80120c4:	e7aa      	b.n	801201c <_printf_i+0x148>
 80120c6:	6923      	ldr	r3, [r4, #16]
 80120c8:	4632      	mov	r2, r6
 80120ca:	4649      	mov	r1, r9
 80120cc:	4640      	mov	r0, r8
 80120ce:	47d0      	blx	sl
 80120d0:	3001      	adds	r0, #1
 80120d2:	d0ad      	beq.n	8012030 <_printf_i+0x15c>
 80120d4:	6823      	ldr	r3, [r4, #0]
 80120d6:	079b      	lsls	r3, r3, #30
 80120d8:	d413      	bmi.n	8012102 <_printf_i+0x22e>
 80120da:	68e0      	ldr	r0, [r4, #12]
 80120dc:	9b03      	ldr	r3, [sp, #12]
 80120de:	4298      	cmp	r0, r3
 80120e0:	bfb8      	it	lt
 80120e2:	4618      	movlt	r0, r3
 80120e4:	e7a6      	b.n	8012034 <_printf_i+0x160>
 80120e6:	2301      	movs	r3, #1
 80120e8:	4632      	mov	r2, r6
 80120ea:	4649      	mov	r1, r9
 80120ec:	4640      	mov	r0, r8
 80120ee:	47d0      	blx	sl
 80120f0:	3001      	adds	r0, #1
 80120f2:	d09d      	beq.n	8012030 <_printf_i+0x15c>
 80120f4:	3501      	adds	r5, #1
 80120f6:	68e3      	ldr	r3, [r4, #12]
 80120f8:	9903      	ldr	r1, [sp, #12]
 80120fa:	1a5b      	subs	r3, r3, r1
 80120fc:	42ab      	cmp	r3, r5
 80120fe:	dcf2      	bgt.n	80120e6 <_printf_i+0x212>
 8012100:	e7eb      	b.n	80120da <_printf_i+0x206>
 8012102:	2500      	movs	r5, #0
 8012104:	f104 0619 	add.w	r6, r4, #25
 8012108:	e7f5      	b.n	80120f6 <_printf_i+0x222>
 801210a:	bf00      	nop
 801210c:	0801312d 	.word	0x0801312d
 8012110:	0801313e 	.word	0x0801313e

08012114 <__sflush_r>:
 8012114:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801211c:	0716      	lsls	r6, r2, #28
 801211e:	4605      	mov	r5, r0
 8012120:	460c      	mov	r4, r1
 8012122:	d454      	bmi.n	80121ce <__sflush_r+0xba>
 8012124:	684b      	ldr	r3, [r1, #4]
 8012126:	2b00      	cmp	r3, #0
 8012128:	dc02      	bgt.n	8012130 <__sflush_r+0x1c>
 801212a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801212c:	2b00      	cmp	r3, #0
 801212e:	dd48      	ble.n	80121c2 <__sflush_r+0xae>
 8012130:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012132:	2e00      	cmp	r6, #0
 8012134:	d045      	beq.n	80121c2 <__sflush_r+0xae>
 8012136:	2300      	movs	r3, #0
 8012138:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801213c:	682f      	ldr	r7, [r5, #0]
 801213e:	6a21      	ldr	r1, [r4, #32]
 8012140:	602b      	str	r3, [r5, #0]
 8012142:	d030      	beq.n	80121a6 <__sflush_r+0x92>
 8012144:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012146:	89a3      	ldrh	r3, [r4, #12]
 8012148:	0759      	lsls	r1, r3, #29
 801214a:	d505      	bpl.n	8012158 <__sflush_r+0x44>
 801214c:	6863      	ldr	r3, [r4, #4]
 801214e:	1ad2      	subs	r2, r2, r3
 8012150:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012152:	b10b      	cbz	r3, 8012158 <__sflush_r+0x44>
 8012154:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012156:	1ad2      	subs	r2, r2, r3
 8012158:	2300      	movs	r3, #0
 801215a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801215c:	6a21      	ldr	r1, [r4, #32]
 801215e:	4628      	mov	r0, r5
 8012160:	47b0      	blx	r6
 8012162:	1c43      	adds	r3, r0, #1
 8012164:	89a3      	ldrh	r3, [r4, #12]
 8012166:	d106      	bne.n	8012176 <__sflush_r+0x62>
 8012168:	6829      	ldr	r1, [r5, #0]
 801216a:	291d      	cmp	r1, #29
 801216c:	d82b      	bhi.n	80121c6 <__sflush_r+0xb2>
 801216e:	4a2a      	ldr	r2, [pc, #168]	@ (8012218 <__sflush_r+0x104>)
 8012170:	410a      	asrs	r2, r1
 8012172:	07d6      	lsls	r6, r2, #31
 8012174:	d427      	bmi.n	80121c6 <__sflush_r+0xb2>
 8012176:	2200      	movs	r2, #0
 8012178:	04d9      	lsls	r1, r3, #19
 801217a:	6062      	str	r2, [r4, #4]
 801217c:	6922      	ldr	r2, [r4, #16]
 801217e:	6022      	str	r2, [r4, #0]
 8012180:	d504      	bpl.n	801218c <__sflush_r+0x78>
 8012182:	1c42      	adds	r2, r0, #1
 8012184:	d101      	bne.n	801218a <__sflush_r+0x76>
 8012186:	682b      	ldr	r3, [r5, #0]
 8012188:	b903      	cbnz	r3, 801218c <__sflush_r+0x78>
 801218a:	6560      	str	r0, [r4, #84]	@ 0x54
 801218c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801218e:	602f      	str	r7, [r5, #0]
 8012190:	b1b9      	cbz	r1, 80121c2 <__sflush_r+0xae>
 8012192:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012196:	4299      	cmp	r1, r3
 8012198:	d002      	beq.n	80121a0 <__sflush_r+0x8c>
 801219a:	4628      	mov	r0, r5
 801219c:	f7ff fa96 	bl	80116cc <_free_r>
 80121a0:	2300      	movs	r3, #0
 80121a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80121a4:	e00d      	b.n	80121c2 <__sflush_r+0xae>
 80121a6:	2301      	movs	r3, #1
 80121a8:	4628      	mov	r0, r5
 80121aa:	47b0      	blx	r6
 80121ac:	4602      	mov	r2, r0
 80121ae:	1c50      	adds	r0, r2, #1
 80121b0:	d1c9      	bne.n	8012146 <__sflush_r+0x32>
 80121b2:	682b      	ldr	r3, [r5, #0]
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d0c6      	beq.n	8012146 <__sflush_r+0x32>
 80121b8:	2b1d      	cmp	r3, #29
 80121ba:	d001      	beq.n	80121c0 <__sflush_r+0xac>
 80121bc:	2b16      	cmp	r3, #22
 80121be:	d11d      	bne.n	80121fc <__sflush_r+0xe8>
 80121c0:	602f      	str	r7, [r5, #0]
 80121c2:	2000      	movs	r0, #0
 80121c4:	e021      	b.n	801220a <__sflush_r+0xf6>
 80121c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80121ca:	b21b      	sxth	r3, r3
 80121cc:	e01a      	b.n	8012204 <__sflush_r+0xf0>
 80121ce:	690f      	ldr	r7, [r1, #16]
 80121d0:	2f00      	cmp	r7, #0
 80121d2:	d0f6      	beq.n	80121c2 <__sflush_r+0xae>
 80121d4:	0793      	lsls	r3, r2, #30
 80121d6:	680e      	ldr	r6, [r1, #0]
 80121d8:	600f      	str	r7, [r1, #0]
 80121da:	bf0c      	ite	eq
 80121dc:	694b      	ldreq	r3, [r1, #20]
 80121de:	2300      	movne	r3, #0
 80121e0:	eba6 0807 	sub.w	r8, r6, r7
 80121e4:	608b      	str	r3, [r1, #8]
 80121e6:	f1b8 0f00 	cmp.w	r8, #0
 80121ea:	ddea      	ble.n	80121c2 <__sflush_r+0xae>
 80121ec:	4643      	mov	r3, r8
 80121ee:	463a      	mov	r2, r7
 80121f0:	6a21      	ldr	r1, [r4, #32]
 80121f2:	4628      	mov	r0, r5
 80121f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80121f6:	47b0      	blx	r6
 80121f8:	2800      	cmp	r0, #0
 80121fa:	dc08      	bgt.n	801220e <__sflush_r+0xfa>
 80121fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012200:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012204:	f04f 30ff 	mov.w	r0, #4294967295
 8012208:	81a3      	strh	r3, [r4, #12]
 801220a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801220e:	4407      	add	r7, r0
 8012210:	eba8 0800 	sub.w	r8, r8, r0
 8012214:	e7e7      	b.n	80121e6 <__sflush_r+0xd2>
 8012216:	bf00      	nop
 8012218:	dfbffffe 	.word	0xdfbffffe

0801221c <_fflush_r>:
 801221c:	b538      	push	{r3, r4, r5, lr}
 801221e:	690b      	ldr	r3, [r1, #16]
 8012220:	4605      	mov	r5, r0
 8012222:	460c      	mov	r4, r1
 8012224:	b913      	cbnz	r3, 801222c <_fflush_r+0x10>
 8012226:	2500      	movs	r5, #0
 8012228:	4628      	mov	r0, r5
 801222a:	bd38      	pop	{r3, r4, r5, pc}
 801222c:	b118      	cbz	r0, 8012236 <_fflush_r+0x1a>
 801222e:	6a03      	ldr	r3, [r0, #32]
 8012230:	b90b      	cbnz	r3, 8012236 <_fflush_r+0x1a>
 8012232:	f7ff f8ab 	bl	801138c <__sinit>
 8012236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801223a:	2b00      	cmp	r3, #0
 801223c:	d0f3      	beq.n	8012226 <_fflush_r+0xa>
 801223e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012240:	07d0      	lsls	r0, r2, #31
 8012242:	d404      	bmi.n	801224e <_fflush_r+0x32>
 8012244:	0599      	lsls	r1, r3, #22
 8012246:	d402      	bmi.n	801224e <_fflush_r+0x32>
 8012248:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801224a:	f7ff fa30 	bl	80116ae <__retarget_lock_acquire_recursive>
 801224e:	4628      	mov	r0, r5
 8012250:	4621      	mov	r1, r4
 8012252:	f7ff ff5f 	bl	8012114 <__sflush_r>
 8012256:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012258:	4605      	mov	r5, r0
 801225a:	07da      	lsls	r2, r3, #31
 801225c:	d4e4      	bmi.n	8012228 <_fflush_r+0xc>
 801225e:	89a3      	ldrh	r3, [r4, #12]
 8012260:	059b      	lsls	r3, r3, #22
 8012262:	d4e1      	bmi.n	8012228 <_fflush_r+0xc>
 8012264:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012266:	f7ff fa23 	bl	80116b0 <__retarget_lock_release_recursive>
 801226a:	e7dd      	b.n	8012228 <_fflush_r+0xc>

0801226c <__swbuf_r>:
 801226c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801226e:	460e      	mov	r6, r1
 8012270:	4614      	mov	r4, r2
 8012272:	4605      	mov	r5, r0
 8012274:	b118      	cbz	r0, 801227e <__swbuf_r+0x12>
 8012276:	6a03      	ldr	r3, [r0, #32]
 8012278:	b90b      	cbnz	r3, 801227e <__swbuf_r+0x12>
 801227a:	f7ff f887 	bl	801138c <__sinit>
 801227e:	69a3      	ldr	r3, [r4, #24]
 8012280:	60a3      	str	r3, [r4, #8]
 8012282:	89a3      	ldrh	r3, [r4, #12]
 8012284:	071a      	lsls	r2, r3, #28
 8012286:	d501      	bpl.n	801228c <__swbuf_r+0x20>
 8012288:	6923      	ldr	r3, [r4, #16]
 801228a:	b943      	cbnz	r3, 801229e <__swbuf_r+0x32>
 801228c:	4621      	mov	r1, r4
 801228e:	4628      	mov	r0, r5
 8012290:	f000 f82a 	bl	80122e8 <__swsetup_r>
 8012294:	b118      	cbz	r0, 801229e <__swbuf_r+0x32>
 8012296:	f04f 37ff 	mov.w	r7, #4294967295
 801229a:	4638      	mov	r0, r7
 801229c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801229e:	6823      	ldr	r3, [r4, #0]
 80122a0:	b2f6      	uxtb	r6, r6
 80122a2:	6922      	ldr	r2, [r4, #16]
 80122a4:	4637      	mov	r7, r6
 80122a6:	1a98      	subs	r0, r3, r2
 80122a8:	6963      	ldr	r3, [r4, #20]
 80122aa:	4283      	cmp	r3, r0
 80122ac:	dc05      	bgt.n	80122ba <__swbuf_r+0x4e>
 80122ae:	4621      	mov	r1, r4
 80122b0:	4628      	mov	r0, r5
 80122b2:	f7ff ffb3 	bl	801221c <_fflush_r>
 80122b6:	2800      	cmp	r0, #0
 80122b8:	d1ed      	bne.n	8012296 <__swbuf_r+0x2a>
 80122ba:	68a3      	ldr	r3, [r4, #8]
 80122bc:	3b01      	subs	r3, #1
 80122be:	60a3      	str	r3, [r4, #8]
 80122c0:	6823      	ldr	r3, [r4, #0]
 80122c2:	1c5a      	adds	r2, r3, #1
 80122c4:	6022      	str	r2, [r4, #0]
 80122c6:	701e      	strb	r6, [r3, #0]
 80122c8:	1c43      	adds	r3, r0, #1
 80122ca:	6962      	ldr	r2, [r4, #20]
 80122cc:	429a      	cmp	r2, r3
 80122ce:	d004      	beq.n	80122da <__swbuf_r+0x6e>
 80122d0:	89a3      	ldrh	r3, [r4, #12]
 80122d2:	07db      	lsls	r3, r3, #31
 80122d4:	d5e1      	bpl.n	801229a <__swbuf_r+0x2e>
 80122d6:	2e0a      	cmp	r6, #10
 80122d8:	d1df      	bne.n	801229a <__swbuf_r+0x2e>
 80122da:	4621      	mov	r1, r4
 80122dc:	4628      	mov	r0, r5
 80122de:	f7ff ff9d 	bl	801221c <_fflush_r>
 80122e2:	2800      	cmp	r0, #0
 80122e4:	d0d9      	beq.n	801229a <__swbuf_r+0x2e>
 80122e6:	e7d6      	b.n	8012296 <__swbuf_r+0x2a>

080122e8 <__swsetup_r>:
 80122e8:	b538      	push	{r3, r4, r5, lr}
 80122ea:	4b29      	ldr	r3, [pc, #164]	@ (8012390 <__swsetup_r+0xa8>)
 80122ec:	4605      	mov	r5, r0
 80122ee:	460c      	mov	r4, r1
 80122f0:	6818      	ldr	r0, [r3, #0]
 80122f2:	b118      	cbz	r0, 80122fc <__swsetup_r+0x14>
 80122f4:	6a03      	ldr	r3, [r0, #32]
 80122f6:	b90b      	cbnz	r3, 80122fc <__swsetup_r+0x14>
 80122f8:	f7ff f848 	bl	801138c <__sinit>
 80122fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012300:	0719      	lsls	r1, r3, #28
 8012302:	d422      	bmi.n	801234a <__swsetup_r+0x62>
 8012304:	06da      	lsls	r2, r3, #27
 8012306:	d407      	bmi.n	8012318 <__swsetup_r+0x30>
 8012308:	2209      	movs	r2, #9
 801230a:	602a      	str	r2, [r5, #0]
 801230c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012310:	f04f 30ff 	mov.w	r0, #4294967295
 8012314:	81a3      	strh	r3, [r4, #12]
 8012316:	e033      	b.n	8012380 <__swsetup_r+0x98>
 8012318:	0758      	lsls	r0, r3, #29
 801231a:	d512      	bpl.n	8012342 <__swsetup_r+0x5a>
 801231c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801231e:	b141      	cbz	r1, 8012332 <__swsetup_r+0x4a>
 8012320:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012324:	4299      	cmp	r1, r3
 8012326:	d002      	beq.n	801232e <__swsetup_r+0x46>
 8012328:	4628      	mov	r0, r5
 801232a:	f7ff f9cf 	bl	80116cc <_free_r>
 801232e:	2300      	movs	r3, #0
 8012330:	6363      	str	r3, [r4, #52]	@ 0x34
 8012332:	89a3      	ldrh	r3, [r4, #12]
 8012334:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012338:	81a3      	strh	r3, [r4, #12]
 801233a:	2300      	movs	r3, #0
 801233c:	6063      	str	r3, [r4, #4]
 801233e:	6923      	ldr	r3, [r4, #16]
 8012340:	6023      	str	r3, [r4, #0]
 8012342:	89a3      	ldrh	r3, [r4, #12]
 8012344:	f043 0308 	orr.w	r3, r3, #8
 8012348:	81a3      	strh	r3, [r4, #12]
 801234a:	6923      	ldr	r3, [r4, #16]
 801234c:	b94b      	cbnz	r3, 8012362 <__swsetup_r+0x7a>
 801234e:	89a3      	ldrh	r3, [r4, #12]
 8012350:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012354:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012358:	d003      	beq.n	8012362 <__swsetup_r+0x7a>
 801235a:	4621      	mov	r1, r4
 801235c:	4628      	mov	r0, r5
 801235e:	f000 f8a4 	bl	80124aa <__smakebuf_r>
 8012362:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012366:	f013 0201 	ands.w	r2, r3, #1
 801236a:	d00a      	beq.n	8012382 <__swsetup_r+0x9a>
 801236c:	2200      	movs	r2, #0
 801236e:	60a2      	str	r2, [r4, #8]
 8012370:	6962      	ldr	r2, [r4, #20]
 8012372:	4252      	negs	r2, r2
 8012374:	61a2      	str	r2, [r4, #24]
 8012376:	6922      	ldr	r2, [r4, #16]
 8012378:	b942      	cbnz	r2, 801238c <__swsetup_r+0xa4>
 801237a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801237e:	d1c5      	bne.n	801230c <__swsetup_r+0x24>
 8012380:	bd38      	pop	{r3, r4, r5, pc}
 8012382:	0799      	lsls	r1, r3, #30
 8012384:	bf58      	it	pl
 8012386:	6962      	ldrpl	r2, [r4, #20]
 8012388:	60a2      	str	r2, [r4, #8]
 801238a:	e7f4      	b.n	8012376 <__swsetup_r+0x8e>
 801238c:	2000      	movs	r0, #0
 801238e:	e7f7      	b.n	8012380 <__swsetup_r+0x98>
 8012390:	20000130 	.word	0x20000130

08012394 <memmove>:
 8012394:	4288      	cmp	r0, r1
 8012396:	b510      	push	{r4, lr}
 8012398:	eb01 0402 	add.w	r4, r1, r2
 801239c:	d902      	bls.n	80123a4 <memmove+0x10>
 801239e:	4284      	cmp	r4, r0
 80123a0:	4623      	mov	r3, r4
 80123a2:	d807      	bhi.n	80123b4 <memmove+0x20>
 80123a4:	1e43      	subs	r3, r0, #1
 80123a6:	42a1      	cmp	r1, r4
 80123a8:	d008      	beq.n	80123bc <memmove+0x28>
 80123aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80123ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80123b2:	e7f8      	b.n	80123a6 <memmove+0x12>
 80123b4:	4402      	add	r2, r0
 80123b6:	4601      	mov	r1, r0
 80123b8:	428a      	cmp	r2, r1
 80123ba:	d100      	bne.n	80123be <memmove+0x2a>
 80123bc:	bd10      	pop	{r4, pc}
 80123be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80123c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80123c6:	e7f7      	b.n	80123b8 <memmove+0x24>

080123c8 <_sbrk_r>:
 80123c8:	b538      	push	{r3, r4, r5, lr}
 80123ca:	2300      	movs	r3, #0
 80123cc:	4d05      	ldr	r5, [pc, #20]	@ (80123e4 <_sbrk_r+0x1c>)
 80123ce:	4604      	mov	r4, r0
 80123d0:	4608      	mov	r0, r1
 80123d2:	602b      	str	r3, [r5, #0]
 80123d4:	f7f0 f97e 	bl	80026d4 <_sbrk>
 80123d8:	1c43      	adds	r3, r0, #1
 80123da:	d102      	bne.n	80123e2 <_sbrk_r+0x1a>
 80123dc:	682b      	ldr	r3, [r5, #0]
 80123de:	b103      	cbz	r3, 80123e2 <_sbrk_r+0x1a>
 80123e0:	6023      	str	r3, [r4, #0]
 80123e2:	bd38      	pop	{r3, r4, r5, pc}
 80123e4:	200113a4 	.word	0x200113a4

080123e8 <memchr>:
 80123e8:	b2c9      	uxtb	r1, r1
 80123ea:	4603      	mov	r3, r0
 80123ec:	4402      	add	r2, r0
 80123ee:	b510      	push	{r4, lr}
 80123f0:	4293      	cmp	r3, r2
 80123f2:	4618      	mov	r0, r3
 80123f4:	d101      	bne.n	80123fa <memchr+0x12>
 80123f6:	2000      	movs	r0, #0
 80123f8:	e003      	b.n	8012402 <memchr+0x1a>
 80123fa:	7804      	ldrb	r4, [r0, #0]
 80123fc:	3301      	adds	r3, #1
 80123fe:	428c      	cmp	r4, r1
 8012400:	d1f6      	bne.n	80123f0 <memchr+0x8>
 8012402:	bd10      	pop	{r4, pc}

08012404 <_realloc_r>:
 8012404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012408:	4680      	mov	r8, r0
 801240a:	4615      	mov	r5, r2
 801240c:	460c      	mov	r4, r1
 801240e:	b921      	cbnz	r1, 801241a <_realloc_r+0x16>
 8012410:	4611      	mov	r1, r2
 8012412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012416:	f7ff b9c5 	b.w	80117a4 <_malloc_r>
 801241a:	b92a      	cbnz	r2, 8012428 <_realloc_r+0x24>
 801241c:	f7ff f956 	bl	80116cc <_free_r>
 8012420:	2400      	movs	r4, #0
 8012422:	4620      	mov	r0, r4
 8012424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012428:	f000 f89e 	bl	8012568 <_malloc_usable_size_r>
 801242c:	4285      	cmp	r5, r0
 801242e:	4606      	mov	r6, r0
 8012430:	d802      	bhi.n	8012438 <_realloc_r+0x34>
 8012432:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012436:	d8f4      	bhi.n	8012422 <_realloc_r+0x1e>
 8012438:	4629      	mov	r1, r5
 801243a:	4640      	mov	r0, r8
 801243c:	f7ff f9b2 	bl	80117a4 <_malloc_r>
 8012440:	4607      	mov	r7, r0
 8012442:	2800      	cmp	r0, #0
 8012444:	d0ec      	beq.n	8012420 <_realloc_r+0x1c>
 8012446:	42b5      	cmp	r5, r6
 8012448:	462a      	mov	r2, r5
 801244a:	4621      	mov	r1, r4
 801244c:	bf28      	it	cs
 801244e:	4632      	movcs	r2, r6
 8012450:	f7ff f92f 	bl	80116b2 <memcpy>
 8012454:	4621      	mov	r1, r4
 8012456:	4640      	mov	r0, r8
 8012458:	463c      	mov	r4, r7
 801245a:	f7ff f937 	bl	80116cc <_free_r>
 801245e:	e7e0      	b.n	8012422 <_realloc_r+0x1e>

08012460 <__swhatbuf_r>:
 8012460:	b570      	push	{r4, r5, r6, lr}
 8012462:	460c      	mov	r4, r1
 8012464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012468:	b096      	sub	sp, #88	@ 0x58
 801246a:	4615      	mov	r5, r2
 801246c:	2900      	cmp	r1, #0
 801246e:	461e      	mov	r6, r3
 8012470:	da0c      	bge.n	801248c <__swhatbuf_r+0x2c>
 8012472:	89a3      	ldrh	r3, [r4, #12]
 8012474:	2100      	movs	r1, #0
 8012476:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801247a:	bf14      	ite	ne
 801247c:	2340      	movne	r3, #64	@ 0x40
 801247e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012482:	2000      	movs	r0, #0
 8012484:	6031      	str	r1, [r6, #0]
 8012486:	602b      	str	r3, [r5, #0]
 8012488:	b016      	add	sp, #88	@ 0x58
 801248a:	bd70      	pop	{r4, r5, r6, pc}
 801248c:	466a      	mov	r2, sp
 801248e:	f000 f849 	bl	8012524 <_fstat_r>
 8012492:	2800      	cmp	r0, #0
 8012494:	dbed      	blt.n	8012472 <__swhatbuf_r+0x12>
 8012496:	9901      	ldr	r1, [sp, #4]
 8012498:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801249c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80124a0:	4259      	negs	r1, r3
 80124a2:	4159      	adcs	r1, r3
 80124a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80124a8:	e7eb      	b.n	8012482 <__swhatbuf_r+0x22>

080124aa <__smakebuf_r>:
 80124aa:	898b      	ldrh	r3, [r1, #12]
 80124ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80124ae:	079d      	lsls	r5, r3, #30
 80124b0:	4606      	mov	r6, r0
 80124b2:	460c      	mov	r4, r1
 80124b4:	d507      	bpl.n	80124c6 <__smakebuf_r+0x1c>
 80124b6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80124ba:	6023      	str	r3, [r4, #0]
 80124bc:	6123      	str	r3, [r4, #16]
 80124be:	2301      	movs	r3, #1
 80124c0:	6163      	str	r3, [r4, #20]
 80124c2:	b003      	add	sp, #12
 80124c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80124c6:	ab01      	add	r3, sp, #4
 80124c8:	466a      	mov	r2, sp
 80124ca:	f7ff ffc9 	bl	8012460 <__swhatbuf_r>
 80124ce:	9f00      	ldr	r7, [sp, #0]
 80124d0:	4605      	mov	r5, r0
 80124d2:	4630      	mov	r0, r6
 80124d4:	4639      	mov	r1, r7
 80124d6:	f7ff f965 	bl	80117a4 <_malloc_r>
 80124da:	b948      	cbnz	r0, 80124f0 <__smakebuf_r+0x46>
 80124dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80124e0:	059a      	lsls	r2, r3, #22
 80124e2:	d4ee      	bmi.n	80124c2 <__smakebuf_r+0x18>
 80124e4:	f023 0303 	bic.w	r3, r3, #3
 80124e8:	f043 0302 	orr.w	r3, r3, #2
 80124ec:	81a3      	strh	r3, [r4, #12]
 80124ee:	e7e2      	b.n	80124b6 <__smakebuf_r+0xc>
 80124f0:	89a3      	ldrh	r3, [r4, #12]
 80124f2:	6020      	str	r0, [r4, #0]
 80124f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80124f8:	81a3      	strh	r3, [r4, #12]
 80124fa:	9b01      	ldr	r3, [sp, #4]
 80124fc:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012500:	b15b      	cbz	r3, 801251a <__smakebuf_r+0x70>
 8012502:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012506:	4630      	mov	r0, r6
 8012508:	f000 f81e 	bl	8012548 <_isatty_r>
 801250c:	b128      	cbz	r0, 801251a <__smakebuf_r+0x70>
 801250e:	89a3      	ldrh	r3, [r4, #12]
 8012510:	f023 0303 	bic.w	r3, r3, #3
 8012514:	f043 0301 	orr.w	r3, r3, #1
 8012518:	81a3      	strh	r3, [r4, #12]
 801251a:	89a3      	ldrh	r3, [r4, #12]
 801251c:	431d      	orrs	r5, r3
 801251e:	81a5      	strh	r5, [r4, #12]
 8012520:	e7cf      	b.n	80124c2 <__smakebuf_r+0x18>
	...

08012524 <_fstat_r>:
 8012524:	b538      	push	{r3, r4, r5, lr}
 8012526:	2300      	movs	r3, #0
 8012528:	4d06      	ldr	r5, [pc, #24]	@ (8012544 <_fstat_r+0x20>)
 801252a:	4604      	mov	r4, r0
 801252c:	4608      	mov	r0, r1
 801252e:	4611      	mov	r1, r2
 8012530:	602b      	str	r3, [r5, #0]
 8012532:	f7f0 f8a6 	bl	8002682 <_fstat>
 8012536:	1c43      	adds	r3, r0, #1
 8012538:	d102      	bne.n	8012540 <_fstat_r+0x1c>
 801253a:	682b      	ldr	r3, [r5, #0]
 801253c:	b103      	cbz	r3, 8012540 <_fstat_r+0x1c>
 801253e:	6023      	str	r3, [r4, #0]
 8012540:	bd38      	pop	{r3, r4, r5, pc}
 8012542:	bf00      	nop
 8012544:	200113a4 	.word	0x200113a4

08012548 <_isatty_r>:
 8012548:	b538      	push	{r3, r4, r5, lr}
 801254a:	2300      	movs	r3, #0
 801254c:	4d05      	ldr	r5, [pc, #20]	@ (8012564 <_isatty_r+0x1c>)
 801254e:	4604      	mov	r4, r0
 8012550:	4608      	mov	r0, r1
 8012552:	602b      	str	r3, [r5, #0]
 8012554:	f7f0 f8a5 	bl	80026a2 <_isatty>
 8012558:	1c43      	adds	r3, r0, #1
 801255a:	d102      	bne.n	8012562 <_isatty_r+0x1a>
 801255c:	682b      	ldr	r3, [r5, #0]
 801255e:	b103      	cbz	r3, 8012562 <_isatty_r+0x1a>
 8012560:	6023      	str	r3, [r4, #0]
 8012562:	bd38      	pop	{r3, r4, r5, pc}
 8012564:	200113a4 	.word	0x200113a4

08012568 <_malloc_usable_size_r>:
 8012568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801256c:	1f18      	subs	r0, r3, #4
 801256e:	2b00      	cmp	r3, #0
 8012570:	bfbc      	itt	lt
 8012572:	580b      	ldrlt	r3, [r1, r0]
 8012574:	18c0      	addlt	r0, r0, r3
 8012576:	4770      	bx	lr

08012578 <_init>:
 8012578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801257a:	bf00      	nop
 801257c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801257e:	bc08      	pop	{r3}
 8012580:	469e      	mov	lr, r3
 8012582:	4770      	bx	lr

08012584 <_fini>:
 8012584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012586:	bf00      	nop
 8012588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801258a:	bc08      	pop	{r3}
 801258c:	469e      	mov	lr, r3
 801258e:	4770      	bx	lr
