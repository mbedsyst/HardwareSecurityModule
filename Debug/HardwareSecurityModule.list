
HardwareSecurityModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000113b8  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08011604  08011604  00012604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801185c  0801185c  00013180  2**0
                  CONTENTS
  4 .ARM          00000008  0801185c  0801185c  0001285c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011864  08011864  00013180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011864  08011864  00012864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011868  08011868  00012868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000180  20000000  0801186c  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011234  20000180  080119ec  00013180  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  200113b4  080119ec  000133b4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00013180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002644a  00000000  00000000  000131b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e4d  00000000  00000000  00039600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001de8  00000000  00000000  0003e450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016ea  00000000  00000000  00040238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000082d3  00000000  00000000  00041922  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a331  00000000  00000000  00049bf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014b8a8  00000000  00000000  00073f26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001bf7ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000894c  00000000  00000000  001bf814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  001c8160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000180 	.word	0x20000180
 8000268:	00000000 	.word	0x00000000
 800026c:	080115ec 	.word	0x080115ec

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000184 	.word	0x20000184
 8000288:	080115ec 	.word	0x080115ec

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295
 800029c:	f04f 30ff 	movne.w	r0, #4294967295
 80002a0:	f000 b97e 	b.w	80005a0 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002c2:	460c      	mov	r4, r1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d14d      	bne.n	8000364 <__udivmoddi4+0xa8>
 80002c8:	428a      	cmp	r2, r1
 80002ca:	460f      	mov	r7, r1
 80002cc:	4684      	mov	ip, r0
 80002ce:	4696      	mov	lr, r2
 80002d0:	fab2 f382 	clz	r3, r2
 80002d4:	d960      	bls.n	8000398 <__udivmoddi4+0xdc>
 80002d6:	b14b      	cbz	r3, 80002ec <__udivmoddi4+0x30>
 80002d8:	fa02 fe03 	lsl.w	lr, r2, r3
 80002dc:	f1c3 0220 	rsb	r2, r3, #32
 80002e0:	409f      	lsls	r7, r3
 80002e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002f0:	fa1f f48e 	uxth.w	r4, lr
 80002f4:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002f8:	fbb7 f1f6 	udiv	r1, r7, r6
 80002fc:	fb06 7711 	mls	r7, r6, r1, r7
 8000300:	fb01 f004 	mul.w	r0, r1, r4
 8000304:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000308:	4290      	cmp	r0, r2
 800030a:	d908      	bls.n	800031e <__udivmoddi4+0x62>
 800030c:	eb1e 0202 	adds.w	r2, lr, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x60>
 8000316:	4290      	cmp	r0, r2
 8000318:	f200 812d 	bhi.w	8000576 <__udivmoddi4+0x2ba>
 800031c:	4639      	mov	r1, r7
 800031e:	1a12      	subs	r2, r2, r0
 8000320:	fa1f fc8c 	uxth.w	ip, ip
 8000324:	fbb2 f0f6 	udiv	r0, r2, r6
 8000328:	fb06 2210 	mls	r2, r6, r0, r2
 800032c:	fb00 f404 	mul.w	r4, r0, r4
 8000330:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000334:	4564      	cmp	r4, ip
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x8e>
 8000338:	eb1e 0c0c 	adds.w	ip, lr, ip
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x8c>
 8000342:	4564      	cmp	r4, ip
 8000344:	f200 811a 	bhi.w	800057c <__udivmoddi4+0x2c0>
 8000348:	4610      	mov	r0, r2
 800034a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034e:	ebac 0c04 	sub.w	ip, ip, r4
 8000352:	2100      	movs	r1, #0
 8000354:	b125      	cbz	r5, 8000360 <__udivmoddi4+0xa4>
 8000356:	fa2c f303 	lsr.w	r3, ip, r3
 800035a:	2200      	movs	r2, #0
 800035c:	e9c5 3200 	strd	r3, r2, [r5]
 8000360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d905      	bls.n	8000374 <__udivmoddi4+0xb8>
 8000368:	b10d      	cbz	r5, 800036e <__udivmoddi4+0xb2>
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	2100      	movs	r1, #0
 8000370:	4608      	mov	r0, r1
 8000372:	e7f5      	b.n	8000360 <__udivmoddi4+0xa4>
 8000374:	fab3 f183 	clz	r1, r3
 8000378:	2900      	cmp	r1, #0
 800037a:	d14d      	bne.n	8000418 <__udivmoddi4+0x15c>
 800037c:	42a3      	cmp	r3, r4
 800037e:	f0c0 80f2 	bcc.w	8000566 <__udivmoddi4+0x2aa>
 8000382:	4290      	cmp	r0, r2
 8000384:	f080 80ef 	bcs.w	8000566 <__udivmoddi4+0x2aa>
 8000388:	4606      	mov	r6, r0
 800038a:	4623      	mov	r3, r4
 800038c:	4608      	mov	r0, r1
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e6      	beq.n	8000360 <__udivmoddi4+0xa4>
 8000392:	e9c5 6300 	strd	r6, r3, [r5]
 8000396:	e7e3      	b.n	8000360 <__udivmoddi4+0xa4>
 8000398:	2b00      	cmp	r3, #0
 800039a:	f040 80a2 	bne.w	80004e2 <__udivmoddi4+0x226>
 800039e:	1a8a      	subs	r2, r1, r2
 80003a0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003a4:	fa1f f68e 	uxth.w	r6, lr
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 f4f7 	udiv	r4, r2, r7
 80003ae:	fb07 2014 	mls	r0, r7, r4, r2
 80003b2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb06 f004 	mul.w	r0, r6, r4
 80003be:	4290      	cmp	r0, r2
 80003c0:	d90f      	bls.n	80003e2 <__udivmoddi4+0x126>
 80003c2:	eb1e 0202 	adds.w	r2, lr, r2
 80003c6:	f104 38ff 	add.w	r8, r4, #4294967295
 80003ca:	bf2c      	ite	cs
 80003cc:	f04f 0901 	movcs.w	r9, #1
 80003d0:	f04f 0900 	movcc.w	r9, #0
 80003d4:	4290      	cmp	r0, r2
 80003d6:	d903      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003d8:	f1b9 0f00 	cmp.w	r9, #0
 80003dc:	f000 80c8 	beq.w	8000570 <__udivmoddi4+0x2b4>
 80003e0:	4644      	mov	r4, r8
 80003e2:	1a12      	subs	r2, r2, r0
 80003e4:	fa1f fc8c 	uxth.w	ip, ip
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	fb00 f606 	mul.w	r6, r0, r6
 80003f4:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003f8:	4566      	cmp	r6, ip
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x152>
 80003fc:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x150>
 8000406:	4566      	cmp	r6, ip
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c6>
 800040c:	4610      	mov	r0, r2
 800040e:	ebac 0c06 	sub.w	ip, ip, r6
 8000412:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000416:	e79d      	b.n	8000354 <__udivmoddi4+0x98>
 8000418:	f1c1 0620 	rsb	r6, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	fa20 fc06 	lsr.w	ip, r0, r6
 800042a:	40f4      	lsrs	r4, r6
 800042c:	408a      	lsls	r2, r1
 800042e:	431f      	orrs	r7, r3
 8000430:	ea4e 030c 	orr.w	r3, lr, ip
 8000434:	fa00 fe01 	lsl.w	lr, r0, r1
 8000438:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800043c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000440:	fa1f fc87 	uxth.w	ip, r7
 8000444:	fbb4 f0f8 	udiv	r0, r4, r8
 8000448:	fb08 4410 	mls	r4, r8, r0, r4
 800044c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000450:	fb00 f90c 	mul.w	r9, r0, ip
 8000454:	45a1      	cmp	r9, r4
 8000456:	d90e      	bls.n	8000476 <__udivmoddi4+0x1ba>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f100 3aff 	add.w	sl, r0, #4294967295
 800045e:	bf2c      	ite	cs
 8000460:	f04f 0b01 	movcs.w	fp, #1
 8000464:	f04f 0b00 	movcc.w	fp, #0
 8000468:	45a1      	cmp	r9, r4
 800046a:	d903      	bls.n	8000474 <__udivmoddi4+0x1b8>
 800046c:	f1bb 0f00 	cmp.w	fp, #0
 8000470:	f000 8093 	beq.w	800059a <__udivmoddi4+0x2de>
 8000474:	4650      	mov	r0, sl
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000482:	fb08 4413 	mls	r4, r8, r3, r4
 8000486:	fb03 fc0c 	mul.w	ip, r3, ip
 800048a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048e:	45a4      	cmp	ip, r4
 8000490:	d906      	bls.n	80004a0 <__udivmoddi4+0x1e4>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 38ff 	add.w	r8, r3, #4294967295
 8000498:	d201      	bcs.n	800049e <__udivmoddi4+0x1e2>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d87a      	bhi.n	8000594 <__udivmoddi4+0x2d8>
 800049e:	4643      	mov	r3, r8
 80004a0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a4:	eba4 040c 	sub.w	r4, r4, ip
 80004a8:	fba0 9802 	umull	r9, r8, r0, r2
 80004ac:	4544      	cmp	r4, r8
 80004ae:	46cc      	mov	ip, r9
 80004b0:	4643      	mov	r3, r8
 80004b2:	d302      	bcc.n	80004ba <__udivmoddi4+0x1fe>
 80004b4:	d106      	bne.n	80004c4 <__udivmoddi4+0x208>
 80004b6:	45ce      	cmp	lr, r9
 80004b8:	d204      	bcs.n	80004c4 <__udivmoddi4+0x208>
 80004ba:	3801      	subs	r0, #1
 80004bc:	ebb9 0c02 	subs.w	ip, r9, r2
 80004c0:	eb68 0307 	sbc.w	r3, r8, r7
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x222>
 80004c6:	ebbe 020c 	subs.w	r2, lr, ip
 80004ca:	eb64 0403 	sbc.w	r4, r4, r3
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	40cc      	lsrs	r4, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e73e      	b.n	8000360 <__udivmoddi4+0xa4>
 80004e2:	fa02 fe03 	lsl.w	lr, r2, r3
 80004e6:	f1c3 0120 	rsb	r1, r3, #32
 80004ea:	fa04 f203 	lsl.w	r2, r4, r3
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	40cc      	lsrs	r4, r1
 80004f4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004f8:	fa20 f101 	lsr.w	r1, r0, r1
 80004fc:	fa1f f68e 	uxth.w	r6, lr
 8000500:	fbb4 f0f7 	udiv	r0, r4, r7
 8000504:	430a      	orrs	r2, r1
 8000506:	fb07 4410 	mls	r4, r7, r0, r4
 800050a:	0c11      	lsrs	r1, r2, #16
 800050c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000510:	fb00 f406 	mul.w	r4, r0, r6
 8000514:	428c      	cmp	r4, r1
 8000516:	d90e      	bls.n	8000536 <__udivmoddi4+0x27a>
 8000518:	eb1e 0101 	adds.w	r1, lr, r1
 800051c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000520:	bf2c      	ite	cs
 8000522:	f04f 0901 	movcs.w	r9, #1
 8000526:	f04f 0900 	movcc.w	r9, #0
 800052a:	428c      	cmp	r4, r1
 800052c:	d902      	bls.n	8000534 <__udivmoddi4+0x278>
 800052e:	f1b9 0f00 	cmp.w	r9, #0
 8000532:	d02c      	beq.n	800058e <__udivmoddi4+0x2d2>
 8000534:	4640      	mov	r0, r8
 8000536:	1b09      	subs	r1, r1, r4
 8000538:	b292      	uxth	r2, r2
 800053a:	fbb1 f4f7 	udiv	r4, r1, r7
 800053e:	fb07 1114 	mls	r1, r7, r4, r1
 8000542:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000546:	fb04 f106 	mul.w	r1, r4, r6
 800054a:	4291      	cmp	r1, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x2a2>
 800054e:	eb1e 0202 	adds.w	r2, lr, r2
 8000552:	f104 38ff 	add.w	r8, r4, #4294967295
 8000556:	d201      	bcs.n	800055c <__udivmoddi4+0x2a0>
 8000558:	4291      	cmp	r1, r2
 800055a:	d815      	bhi.n	8000588 <__udivmoddi4+0x2cc>
 800055c:	4644      	mov	r4, r8
 800055e:	1a52      	subs	r2, r2, r1
 8000560:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000564:	e721      	b.n	80003aa <__udivmoddi4+0xee>
 8000566:	1a86      	subs	r6, r0, r2
 8000568:	eb64 0303 	sbc.w	r3, r4, r3
 800056c:	2001      	movs	r0, #1
 800056e:	e70e      	b.n	800038e <__udivmoddi4+0xd2>
 8000570:	3c02      	subs	r4, #2
 8000572:	4472      	add	r2, lr
 8000574:	e735      	b.n	80003e2 <__udivmoddi4+0x126>
 8000576:	3902      	subs	r1, #2
 8000578:	4472      	add	r2, lr
 800057a:	e6d0      	b.n	800031e <__udivmoddi4+0x62>
 800057c:	44f4      	add	ip, lr
 800057e:	3802      	subs	r0, #2
 8000580:	e6e3      	b.n	800034a <__udivmoddi4+0x8e>
 8000582:	44f4      	add	ip, lr
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x152>
 8000588:	3c02      	subs	r4, #2
 800058a:	4472      	add	r2, lr
 800058c:	e7e7      	b.n	800055e <__udivmoddi4+0x2a2>
 800058e:	3802      	subs	r0, #2
 8000590:	4471      	add	r1, lr
 8000592:	e7d0      	b.n	8000536 <__udivmoddi4+0x27a>
 8000594:	3b02      	subs	r3, #2
 8000596:	443c      	add	r4, r7
 8000598:	e782      	b.n	80004a0 <__udivmoddi4+0x1e4>
 800059a:	3802      	subs	r0, #2
 800059c:	443c      	add	r4, r7
 800059e:	e76a      	b.n	8000476 <__udivmoddi4+0x1ba>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <log_init>:
#define LOG_BUFFER_SIZE 256

static LogLevel current_level = LOG_LEVEL_INFO;

void log_init(LogLevel level)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
    current_level = level;
 80005ae:	4a04      	ldr	r2, [pc, #16]	@ (80005c0 <log_init+0x1c>)
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	7013      	strb	r3, [r2, #0]
}
 80005b4:	bf00      	nop
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	20000000 	.word	0x20000000

080005c4 <log_generic>:

static void log_generic(LogLevel level, const char *prefix, const char *color, const char *fmt, va_list args)
{
 80005c4:	b590      	push	{r4, r7, lr}
 80005c6:	b0c7      	sub	sp, #284	@ 0x11c
 80005c8:	af02      	add	r7, sp, #8
 80005ca:	4604      	mov	r4, r0
 80005cc:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 80005d0:	f5a0 7084 	sub.w	r0, r0, #264	@ 0x108
 80005d4:	6001      	str	r1, [r0, #0]
 80005d6:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80005da:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 80005de:	600a      	str	r2, [r1, #0]
 80005e0:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80005e4:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80005e8:	6013      	str	r3, [r2, #0]
 80005ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80005ee:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 80005f2:	4622      	mov	r2, r4
 80005f4:	701a      	strb	r2, [r3, #0]
    if (level < current_level)
 80005f6:	4b16      	ldr	r3, [pc, #88]	@ (8000650 <log_generic+0x8c>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80005fe:	f2a2 1201 	subw	r2, r2, #257	@ 0x101
 8000602:	7812      	ldrb	r2, [r2, #0]
 8000604:	429a      	cmp	r2, r3
 8000606:	d31e      	bcc.n	8000646 <log_generic+0x82>
        return;

    char buffer[LOG_BUFFER_SIZE];
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000608:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800060c:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 8000610:	f107 0010 	add.w	r0, r7, #16
 8000614:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000618:	6812      	ldr	r2, [r2, #0]
 800061a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800061e:	f00f fff9 	bl	8010614 <vsniprintf>

    // Print directly using printf(), assumes it's redirected to VCOM via BSP
    printf("%s[%s] %s%s\r\n", color, prefix, buffer, COLOR_RESET);
 8000622:	f107 0310 	add.w	r3, r7, #16
 8000626:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800062a:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800062e:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8000632:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8000636:	4807      	ldr	r0, [pc, #28]	@ (8000654 <log_generic+0x90>)
 8000638:	9000      	str	r0, [sp, #0]
 800063a:	6812      	ldr	r2, [r2, #0]
 800063c:	6809      	ldr	r1, [r1, #0]
 800063e:	4806      	ldr	r0, [pc, #24]	@ (8000658 <log_generic+0x94>)
 8000640:	f00f ff14 	bl	801046c <iprintf>
 8000644:	e000      	b.n	8000648 <log_generic+0x84>
        return;
 8000646:	bf00      	nop
}
 8000648:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 800064c:	46bd      	mov	sp, r7
 800064e:	bd90      	pop	{r4, r7, pc}
 8000650:	20000000 	.word	0x20000000
 8000654:	08011614 	.word	0x08011614
 8000658:	08011604 	.word	0x08011604

0800065c <log_info>:
    log_generic(LOG_LEVEL_DEBUG, "DEBUG", COLOR_DEBUG, fmt, args);
    va_end(args);
}

void log_info(const char *fmt, ...)
{
 800065c:	b40f      	push	{r0, r1, r2, r3}
 800065e:	b580      	push	{r7, lr}
 8000660:	b084      	sub	sp, #16
 8000662:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_INFO, "INFO", COLOR_INFO, fmt, args);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	693b      	ldr	r3, [r7, #16]
 8000670:	4a05      	ldr	r2, [pc, #20]	@ (8000688 <log_info+0x2c>)
 8000672:	4906      	ldr	r1, [pc, #24]	@ (800068c <log_info+0x30>)
 8000674:	2001      	movs	r0, #1
 8000676:	f7ff ffa5 	bl	80005c4 <log_generic>
    va_end(args);
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000684:	b004      	add	sp, #16
 8000686:	4770      	bx	lr
 8000688:	0801162c 	.word	0x0801162c
 800068c:	08011634 	.word	0x08011634

08000690 <log_error>:
    log_generic(LOG_LEVEL_WARN, "WARN", COLOR_WARN, fmt, args);
    va_end(args);
}

void log_error(const char *fmt, ...)
{
 8000690:	b40f      	push	{r0, r1, r2, r3}
 8000692:	b580      	push	{r7, lr}
 8000694:	b084      	sub	sp, #16
 8000696:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_ERROR, "ERROR", COLOR_ERROR, fmt, args);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	693b      	ldr	r3, [r7, #16]
 80006a4:	4a05      	ldr	r2, [pc, #20]	@ (80006bc <log_error+0x2c>)
 80006a6:	4906      	ldr	r1, [pc, #24]	@ (80006c0 <log_error+0x30>)
 80006a8:	2003      	movs	r0, #3
 80006aa:	f7ff ff8b 	bl	80005c4 <log_generic>
    va_end(args);
}
 80006ae:	bf00      	nop
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006b8:	b004      	add	sp, #16
 80006ba:	4770      	bx	lr
 80006bc:	0801164c 	.word	0x0801164c
 80006c0:	08011654 	.word	0x08011654

080006c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b0aa      	sub	sp, #168	@ 0xa8
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  const uint8_t test_data[] = "Device startup complete. Initializing subsystems. Awaiting commands from host interface. Ensure proper connection and configuration before sending instructions.\r\n";
 80006ca:	4a5e      	ldr	r2, [pc, #376]	@ (8000844 <main+0x180>)
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	4611      	mov	r1, r2
 80006d0:	22a3      	movs	r2, #163	@ 0xa3
 80006d2:	4618      	mov	r0, r3
 80006d4:	f010 f827 	bl	8010726 <memcpy>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d8:	f001 fcb2 	bl	8002040 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006dc:	f000 f8be 	bl	800085c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e0:	f000 fbc0 	bl	8000e64 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 80006e4:	f000 fb5c 	bl	8000da0 <MX_USB_PCD_Init>
  MX_USART2_UART_Init();
 80006e8:	f000 fa76 	bl	8000bd8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80006ec:	f000 f946 	bl	800097c <MX_I2C1_Init>
  MX_SPI1_Init();
 80006f0:	f000 fa1c 	bl	8000b2c <MX_SPI1_Init>
  MX_USART6_UART_Init();
 80006f4:	f000 fb08 	bl	8000d08 <MX_USART6_UART_Init>
  MX_RTC_Init();
 80006f8:	f000 f996 	bl	8000a28 <MX_RTC_Init>
  MX_RNG_Init();
 80006fc:	f000 f97e 	bl	80009fc <MX_RNG_Init>
  MX_HASH_Init();
 8000700:	f000 f922 	bl	8000948 <MX_HASH_Init>
  MX_USART3_UART_Init();
 8000704:	f000 fab4 	bl	8000c70 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  while(hUsbDeviceFS.pClassData == NULL);
 8000708:	bf00      	nop
 800070a:	4b4f      	ldr	r3, [pc, #316]	@ (8000848 <main+0x184>)
 800070c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8000710:	2b00      	cmp	r3, #0
 8000712:	d0fa      	beq.n	800070a <main+0x46>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000714:	2000      	movs	r0, #0
 8000716:	f001 fa79 	bl	8001c0c <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 800071a:	2001      	movs	r0, #1
 800071c:	f001 fa76 	bl	8001c0c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000720:	2002      	movs	r0, #2
 8000722:	f001 fa73 	bl	8001c0c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000726:	2101      	movs	r1, #1
 8000728:	2000      	movs	r0, #0
 800072a:	f001 fb0f 	bl	8001d4c <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800072e:	4b47      	ldr	r3, [pc, #284]	@ (800084c <main+0x188>)
 8000730:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000734:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000736:	4b45      	ldr	r3, [pc, #276]	@ (800084c <main+0x188>)
 8000738:	2200      	movs	r2, #0
 800073a:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800073c:	4b43      	ldr	r3, [pc, #268]	@ (800084c <main+0x188>)
 800073e:	2200      	movs	r2, #0
 8000740:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000742:	4b42      	ldr	r3, [pc, #264]	@ (800084c <main+0x188>)
 8000744:	2200      	movs	r2, #0
 8000746:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000748:	4b40      	ldr	r3, [pc, #256]	@ (800084c <main+0x188>)
 800074a:	2200      	movs	r2, #0
 800074c:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800074e:	493f      	ldr	r1, [pc, #252]	@ (800084c <main+0x188>)
 8000750:	2000      	movs	r0, #0
 8000752:	f001 fb95 	bl	8001e80 <BSP_COM_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <main+0x9c>
  {
    Error_Handler();
 800075c:	f000 fc7e 	bl	800105c <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  log_init(LOG_LEVEL_DEBUG);
 8000760:	2000      	movs	r0, #0
 8000762:	f7ff ff1f 	bl	80005a4 <log_init>
  log_info("Turning LED ON.");
 8000766:	483a      	ldr	r0, [pc, #232]	@ (8000850 <main+0x18c>)
 8000768:	f7ff ff78 	bl	800065c <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 800076c:	2000      	movs	r0, #0
 800076e:	f001 fac3 	bl	8001cf8 <BSP_LED_Toggle>
 8000772:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000776:	f001 fd21 	bl	80021bc <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 800077a:	2002      	movs	r0, #2
 800077c:	f001 fabc 	bl	8001cf8 <BSP_LED_Toggle>
 8000780:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000784:	f001 fd1a 	bl	80021bc <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000788:	2001      	movs	r0, #1
 800078a:	f001 fab5 	bl	8001cf8 <BSP_LED_Toggle>
 800078e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000792:	f001 fd13 	bl	80021bc <HAL_Delay>
  log_info("Turning LED OFF.");
 8000796:	482f      	ldr	r0, [pc, #188]	@ (8000854 <main+0x190>)
 8000798:	f7ff ff60 	bl	800065c <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 800079c:	2000      	movs	r0, #0
 800079e:	f001 faab 	bl	8001cf8 <BSP_LED_Toggle>
 80007a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007a6:	f001 fd09 	bl	80021bc <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 80007aa:	2002      	movs	r0, #2
 80007ac:	f001 faa4 	bl	8001cf8 <BSP_LED_Toggle>
 80007b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007b4:	f001 fd02 	bl	80021bc <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 80007b8:	2001      	movs	r0, #1
 80007ba:	f001 fa9d 	bl	8001cf8 <BSP_LED_Toggle>
 80007be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007c2:	f001 fcfb 	bl	80021bc <HAL_Delay>
  log_info("Turning LED ON.");
 80007c6:	4822      	ldr	r0, [pc, #136]	@ (8000850 <main+0x18c>)
 80007c8:	f7ff ff48 	bl	800065c <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 80007cc:	2000      	movs	r0, #0
 80007ce:	f001 fa93 	bl	8001cf8 <BSP_LED_Toggle>
 80007d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007d6:	f001 fcf1 	bl	80021bc <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 80007da:	2002      	movs	r0, #2
 80007dc:	f001 fa8c 	bl	8001cf8 <BSP_LED_Toggle>
 80007e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007e4:	f001 fcea 	bl	80021bc <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 80007e8:	2001      	movs	r0, #1
 80007ea:	f001 fa85 	bl	8001cf8 <BSP_LED_Toggle>
 80007ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007f2:	f001 fce3 	bl	80021bc <HAL_Delay>
  log_info("Turning LED OFF.");
 80007f6:	4817      	ldr	r0, [pc, #92]	@ (8000854 <main+0x190>)
 80007f8:	f7ff ff30 	bl	800065c <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 80007fc:	2000      	movs	r0, #0
 80007fe:	f001 fa7b 	bl	8001cf8 <BSP_LED_Toggle>
 8000802:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000806:	f001 fcd9 	bl	80021bc <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 800080a:	2002      	movs	r0, #2
 800080c:	f001 fa74 	bl	8001cf8 <BSP_LED_Toggle>
 8000810:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000814:	f001 fcd2 	bl	80021bc <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000818:	2001      	movs	r0, #1
 800081a:	f001 fa6d 	bl	8001cf8 <BSP_LED_Toggle>
 800081e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000822:	f001 fccb 	bl	80021bc <HAL_Delay>

  while (1)
  {

	USB_Transmit((uint8_t *)test_data, sizeof(test_data) - 1);
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	21a2      	movs	r1, #162	@ 0xa2
 800082a:	4618      	mov	r0, r3
 800082c:	f00d fe42 	bl	800e4b4 <USB_Transmit>
	log_info("Waiting for Delay");
 8000830:	4809      	ldr	r0, [pc, #36]	@ (8000858 <main+0x194>)
 8000832:	f7ff ff13 	bl	800065c <log_info>
	HAL_Delay(10000);
 8000836:	f242 7010 	movw	r0, #10000	@ 0x2710
 800083a:	f001 fcbf 	bl	80021bc <HAL_Delay>
	USB_Transmit((uint8_t *)test_data, sizeof(test_data) - 1);
 800083e:	bf00      	nop
 8000840:	e7f1      	b.n	8000826 <main+0x162>
 8000842:	bf00      	nop
 8000844:	08011694 	.word	0x08011694
 8000848:	200007b4 	.word	0x200007b4
 800084c:	2000019c 	.word	0x2000019c
 8000850:	0801165c 	.word	0x0801165c
 8000854:	0801166c 	.word	0x0801166c
 8000858:	08011680 	.word	0x08011680

0800085c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b09c      	sub	sp, #112	@ 0x70
 8000860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000862:	f107 0320 	add.w	r3, r7, #32
 8000866:	2250      	movs	r2, #80	@ 0x50
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f00f fee0 	bl	8010630 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000870:	f107 0308 	add.w	r3, r7, #8
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]
 8000880:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000882:	4b2f      	ldr	r3, [pc, #188]	@ (8000940 <SystemClock_Config+0xe4>)
 8000884:	691b      	ldr	r3, [r3, #16]
 8000886:	4a2e      	ldr	r2, [pc, #184]	@ (8000940 <SystemClock_Config+0xe4>)
 8000888:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800088c:	6113      	str	r3, [r2, #16]
 800088e:	4b2c      	ldr	r3, [pc, #176]	@ (8000940 <SystemClock_Config+0xe4>)
 8000890:	691b      	ldr	r3, [r3, #16]
 8000892:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800089a:	bf00      	nop
 800089c:	4b28      	ldr	r3, [pc, #160]	@ (8000940 <SystemClock_Config+0xe4>)
 800089e:	695b      	ldr	r3, [r3, #20]
 80008a0:	f003 0308 	and.w	r3, r3, #8
 80008a4:	2b08      	cmp	r3, #8
 80008a6:	d1f9      	bne.n	800089c <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 80008a8:	2329      	movs	r3, #41	@ 0x29
 80008aa:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008ac:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80008b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008b2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80008b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80008b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008bc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008be:	2302      	movs	r3, #2
 80008c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 80008c2:	2303      	movs	r3, #3
 80008c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008c6:	2304      	movs	r3, #4
 80008c8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 80008ca:	23fa      	movs	r3, #250	@ 0xfa
 80008cc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008ce:	2302      	movs	r3, #2
 80008d0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008d2:	2302      	movs	r3, #2
 80008d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008d6:	2302      	movs	r3, #2
 80008d8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 80008da:	2304      	movs	r3, #4
 80008dc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80008de:	2300      	movs	r3, #0
 80008e0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e6:	f107 0320 	add.w	r3, r7, #32
 80008ea:	4618      	mov	r0, r3
 80008ec:	f003 fe94 	bl	8004618 <HAL_RCC_OscConfig>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008f6:	f000 fbb1 	bl	800105c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fa:	231f      	movs	r3, #31
 80008fc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fe:	2303      	movs	r3, #3
 8000900:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000912:	f107 0308 	add.w	r3, r7, #8
 8000916:	2105      	movs	r1, #5
 8000918:	4618      	mov	r0, r3
 800091a:	f004 fab5 	bl	8004e88 <HAL_RCC_ClockConfig>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000924:	f000 fb9a 	bl	800105c <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8000928:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <SystemClock_Config+0xe8>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000930:	4a04      	ldr	r2, [pc, #16]	@ (8000944 <SystemClock_Config+0xe8>)
 8000932:	f043 0320 	orr.w	r3, r3, #32
 8000936:	6013      	str	r3, [r2, #0]
}
 8000938:	bf00      	nop
 800093a:	3770      	adds	r7, #112	@ 0x70
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	44020800 	.word	0x44020800
 8000944:	40022000 	.word	0x40022000

08000948 <MX_HASH_Init>:
  * @brief HASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_HASH_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END HASH_Init 0 */

  /* USER CODE BEGIN HASH_Init 1 */

  /* USER CODE END HASH_Init 1 */
  hhash.Instance = HASH;
 800094c:	4b09      	ldr	r3, [pc, #36]	@ (8000974 <MX_HASH_Init+0x2c>)
 800094e:	4a0a      	ldr	r2, [pc, #40]	@ (8000978 <MX_HASH_Init+0x30>)
 8000950:	601a      	str	r2, [r3, #0]
  hhash.Init.DataType = HASH_NO_SWAP;
 8000952:	4b08      	ldr	r3, [pc, #32]	@ (8000974 <MX_HASH_Init+0x2c>)
 8000954:	2200      	movs	r2, #0
 8000956:	605a      	str	r2, [r3, #4]
  hhash.Init.Algorithm = HASH_ALGOSELECTION_SHA1;
 8000958:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <MX_HASH_Init+0x2c>)
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
  if (HAL_HASH_Init(&hhash) != HAL_OK)
 800095e:	4805      	ldr	r0, [pc, #20]	@ (8000974 <MX_HASH_Init+0x2c>)
 8000960:	f001 ffec 	bl	800293c <HAL_HASH_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_HASH_Init+0x26>
  {
    Error_Handler();
 800096a:	f000 fb77 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN HASH_Init 2 */

  /* USER CODE END HASH_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	200001ac 	.word	0x200001ac
 8000978:	420c0400 	.word	0x420c0400

0800097c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000980:	4b1b      	ldr	r3, [pc, #108]	@ (80009f0 <MX_I2C1_Init+0x74>)
 8000982:	4a1c      	ldr	r2, [pc, #112]	@ (80009f4 <MX_I2C1_Init+0x78>)
 8000984:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C043E5;
 8000986:	4b1a      	ldr	r3, [pc, #104]	@ (80009f0 <MX_I2C1_Init+0x74>)
 8000988:	4a1b      	ldr	r2, [pc, #108]	@ (80009f8 <MX_I2C1_Init+0x7c>)
 800098a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800098c:	4b18      	ldr	r3, [pc, #96]	@ (80009f0 <MX_I2C1_Init+0x74>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000992:	4b17      	ldr	r3, [pc, #92]	@ (80009f0 <MX_I2C1_Init+0x74>)
 8000994:	2201      	movs	r2, #1
 8000996:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000998:	4b15      	ldr	r3, [pc, #84]	@ (80009f0 <MX_I2C1_Init+0x74>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800099e:	4b14      	ldr	r3, [pc, #80]	@ (80009f0 <MX_I2C1_Init+0x74>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009a4:	4b12      	ldr	r3, [pc, #72]	@ (80009f0 <MX_I2C1_Init+0x74>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009aa:	4b11      	ldr	r3, [pc, #68]	@ (80009f0 <MX_I2C1_Init+0x74>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	@ (80009f0 <MX_I2C1_Init+0x74>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009b6:	480e      	ldr	r0, [pc, #56]	@ (80009f0 <MX_I2C1_Init+0x74>)
 80009b8:	f001 fff8 	bl	80029ac <HAL_I2C_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009c2:	f000 fb4b 	bl	800105c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009c6:	2100      	movs	r1, #0
 80009c8:	4809      	ldr	r0, [pc, #36]	@ (80009f0 <MX_I2C1_Init+0x74>)
 80009ca:	f002 f88a 	bl	8002ae2 <HAL_I2CEx_ConfigAnalogFilter>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009d4:	f000 fb42 	bl	800105c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009d8:	2100      	movs	r1, #0
 80009da:	4805      	ldr	r0, [pc, #20]	@ (80009f0 <MX_I2C1_Init+0x74>)
 80009dc:	f002 f8cc 	bl	8002b78 <HAL_I2CEx_ConfigDigitalFilter>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009e6:	f000 fb39 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200001ec 	.word	0x200001ec
 80009f4:	40005400 	.word	0x40005400
 80009f8:	10c043e5 	.word	0x10c043e5

080009fc <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000a00:	4b07      	ldr	r3, [pc, #28]	@ (8000a20 <MX_RNG_Init+0x24>)
 8000a02:	4a08      	ldr	r2, [pc, #32]	@ (8000a24 <MX_RNG_Init+0x28>)
 8000a04:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000a06:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <MX_RNG_Init+0x24>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000a0c:	4804      	ldr	r0, [pc, #16]	@ (8000a20 <MX_RNG_Init+0x24>)
 8000a0e:	f009 fdd5 	bl	800a5bc <HAL_RNG_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000a18:	f000 fb20 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000240 	.word	0x20000240
 8000a24:	420c0800 	.word	0x420c0800

08000a28 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08e      	sub	sp, #56	@ 0x38
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
 8000a3c:	611a      	str	r2, [r3, #16]
 8000a3e:	615a      	str	r2, [r3, #20]
 8000a40:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 8000a42:	f107 0308 	add.w	r3, r7, #8
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
 8000a50:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000a52:	2300      	movs	r3, #0
 8000a54:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a56:	4b33      	ldr	r3, [pc, #204]	@ (8000b24 <MX_RTC_Init+0xfc>)
 8000a58:	4a33      	ldr	r2, [pc, #204]	@ (8000b28 <MX_RTC_Init+0x100>)
 8000a5a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a5c:	4b31      	ldr	r3, [pc, #196]	@ (8000b24 <MX_RTC_Init+0xfc>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a62:	4b30      	ldr	r3, [pc, #192]	@ (8000b24 <MX_RTC_Init+0xfc>)
 8000a64:	227f      	movs	r2, #127	@ 0x7f
 8000a66:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a68:	4b2e      	ldr	r3, [pc, #184]	@ (8000b24 <MX_RTC_Init+0xfc>)
 8000a6a:	22ff      	movs	r2, #255	@ 0xff
 8000a6c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a6e:	4b2d      	ldr	r3, [pc, #180]	@ (8000b24 <MX_RTC_Init+0xfc>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a74:	4b2b      	ldr	r3, [pc, #172]	@ (8000b24 <MX_RTC_Init+0xfc>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a7a:	4b2a      	ldr	r3, [pc, #168]	@ (8000b24 <MX_RTC_Init+0xfc>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a80:	4b28      	ldr	r3, [pc, #160]	@ (8000b24 <MX_RTC_Init+0xfc>)
 8000a82:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a86:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000a88:	4b26      	ldr	r3, [pc, #152]	@ (8000b24 <MX_RTC_Init+0xfc>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000a8e:	4b25      	ldr	r3, [pc, #148]	@ (8000b24 <MX_RTC_Init+0xfc>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a94:	4823      	ldr	r0, [pc, #140]	@ (8000b24 <MX_RTC_Init+0xfc>)
 8000a96:	f009 fe2f 	bl	800a6f8 <HAL_RTC_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000aa0:	f000 fadc 	bl	800105c <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	4619      	mov	r1, r3
 8000aba:	481a      	ldr	r0, [pc, #104]	@ (8000b24 <MX_RTC_Init+0xfc>)
 8000abc:	f00a f882 	bl	800abc4 <HAL_RTCEx_PrivilegeModeSet>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000ac6:	f000 fac9 	bl	800105c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000ade:	f107 0308 	add.w	r3, r7, #8
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	480f      	ldr	r0, [pc, #60]	@ (8000b24 <MX_RTC_Init+0xfc>)
 8000ae8:	f009 fe88 	bl	800a7fc <HAL_RTC_SetTime>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8000af2:	f000 fab3 	bl	800105c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000af6:	2301      	movs	r3, #1
 8000af8:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 8000afa:	2301      	movs	r3, #1
 8000afc:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 8000afe:	2301      	movs	r3, #1
 8000b00:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	2201      	movs	r2, #1
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4805      	ldr	r0, [pc, #20]	@ (8000b24 <MX_RTC_Init+0xfc>)
 8000b0e:	f009 ff07 	bl	800a920 <HAL_RTC_SetDate>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 8000b18:	f000 faa0 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b1c:	bf00      	nop
 8000b1e:	3738      	adds	r7, #56	@ 0x38
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000254 	.word	0x20000254
 8000b28:	44007800 	.word	0x44007800

08000b2c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b30:	4b27      	ldr	r3, [pc, #156]	@ (8000bd0 <MX_SPI1_Init+0xa4>)
 8000b32:	4a28      	ldr	r2, [pc, #160]	@ (8000bd4 <MX_SPI1_Init+0xa8>)
 8000b34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b36:	4b26      	ldr	r3, [pc, #152]	@ (8000bd0 <MX_SPI1_Init+0xa4>)
 8000b38:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000b3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b3e:	4b24      	ldr	r3, [pc, #144]	@ (8000bd0 <MX_SPI1_Init+0xa4>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b44:	4b22      	ldr	r3, [pc, #136]	@ (8000bd0 <MX_SPI1_Init+0xa4>)
 8000b46:	2207      	movs	r2, #7
 8000b48:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b4a:	4b21      	ldr	r3, [pc, #132]	@ (8000bd0 <MX_SPI1_Init+0xa4>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b50:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd0 <MX_SPI1_Init+0xa4>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b56:	4b1e      	ldr	r3, [pc, #120]	@ (8000bd0 <MX_SPI1_Init+0xa4>)
 8000b58:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000b5c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd0 <MX_SPI1_Init+0xa4>)
 8000b60:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8000b64:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b66:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd0 <MX_SPI1_Init+0xa4>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b6c:	4b18      	ldr	r3, [pc, #96]	@ (8000bd0 <MX_SPI1_Init+0xa4>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b72:	4b17      	ldr	r3, [pc, #92]	@ (8000bd0 <MX_SPI1_Init+0xa4>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000b78:	4b15      	ldr	r3, [pc, #84]	@ (8000bd0 <MX_SPI1_Init+0xa4>)
 8000b7a:	2207      	movs	r2, #7
 8000b7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b7e:	4b14      	ldr	r3, [pc, #80]	@ (8000bd0 <MX_SPI1_Init+0xa4>)
 8000b80:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b84:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b86:	4b12      	ldr	r3, [pc, #72]	@ (8000bd0 <MX_SPI1_Init+0xa4>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b8c:	4b10      	ldr	r3, [pc, #64]	@ (8000bd0 <MX_SPI1_Init+0xa4>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b92:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd0 <MX_SPI1_Init+0xa4>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b98:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd0 <MX_SPI1_Init+0xa4>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd0 <MX_SPI1_Init+0xa4>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd0 <MX_SPI1_Init+0xa4>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000baa:	4b09      	ldr	r3, [pc, #36]	@ (8000bd0 <MX_SPI1_Init+0xa4>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000bb0:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <MX_SPI1_Init+0xa4>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000bb6:	4b06      	ldr	r3, [pc, #24]	@ (8000bd0 <MX_SPI1_Init+0xa4>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bbc:	4804      	ldr	r0, [pc, #16]	@ (8000bd0 <MX_SPI1_Init+0xa4>)
 8000bbe:	f00a f82f 	bl	800ac20 <HAL_SPI_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000bc8:	f000 fa48 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000284 	.word	0x20000284
 8000bd4:	40013000 	.word	0x40013000

08000bd8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bdc:	4b22      	ldr	r3, [pc, #136]	@ (8000c68 <MX_USART2_UART_Init+0x90>)
 8000bde:	4a23      	ldr	r2, [pc, #140]	@ (8000c6c <MX_USART2_UART_Init+0x94>)
 8000be0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000be2:	4b21      	ldr	r3, [pc, #132]	@ (8000c68 <MX_USART2_UART_Init+0x90>)
 8000be4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000be8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bea:	4b1f      	ldr	r3, [pc, #124]	@ (8000c68 <MX_USART2_UART_Init+0x90>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c68 <MX_USART2_UART_Init+0x90>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bf6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c68 <MX_USART2_UART_Init+0x90>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8000c68 <MX_USART2_UART_Init+0x90>)
 8000bfe:	220c      	movs	r2, #12
 8000c00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c02:	4b19      	ldr	r3, [pc, #100]	@ (8000c68 <MX_USART2_UART_Init+0x90>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c08:	4b17      	ldr	r3, [pc, #92]	@ (8000c68 <MX_USART2_UART_Init+0x90>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c0e:	4b16      	ldr	r3, [pc, #88]	@ (8000c68 <MX_USART2_UART_Init+0x90>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c14:	4b14      	ldr	r3, [pc, #80]	@ (8000c68 <MX_USART2_UART_Init+0x90>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c1a:	4b13      	ldr	r3, [pc, #76]	@ (8000c68 <MX_USART2_UART_Init+0x90>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c20:	4811      	ldr	r0, [pc, #68]	@ (8000c68 <MX_USART2_UART_Init+0x90>)
 8000c22:	f00a f988 	bl	800af36 <HAL_UART_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000c2c:	f000 fa16 	bl	800105c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c30:	2100      	movs	r1, #0
 8000c32:	480d      	ldr	r0, [pc, #52]	@ (8000c68 <MX_USART2_UART_Init+0x90>)
 8000c34:	f00a feb4 	bl	800b9a0 <HAL_UARTEx_SetTxFifoThreshold>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000c3e:	f000 fa0d 	bl	800105c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c42:	2100      	movs	r1, #0
 8000c44:	4808      	ldr	r0, [pc, #32]	@ (8000c68 <MX_USART2_UART_Init+0x90>)
 8000c46:	f00a fee9 	bl	800ba1c <HAL_UARTEx_SetRxFifoThreshold>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000c50:	f000 fa04 	bl	800105c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c54:	4804      	ldr	r0, [pc, #16]	@ (8000c68 <MX_USART2_UART_Init+0x90>)
 8000c56:	f00a fe6a 	bl	800b92e <HAL_UARTEx_DisableFifoMode>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c60:	f000 f9fc 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000314 	.word	0x20000314
 8000c6c:	40004400 	.word	0x40004400

08000c70 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c74:	4b22      	ldr	r3, [pc, #136]	@ (8000d00 <MX_USART3_UART_Init+0x90>)
 8000c76:	4a23      	ldr	r2, [pc, #140]	@ (8000d04 <MX_USART3_UART_Init+0x94>)
 8000c78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c7a:	4b21      	ldr	r3, [pc, #132]	@ (8000d00 <MX_USART3_UART_Init+0x90>)
 8000c7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c82:	4b1f      	ldr	r3, [pc, #124]	@ (8000d00 <MX_USART3_UART_Init+0x90>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c88:	4b1d      	ldr	r3, [pc, #116]	@ (8000d00 <MX_USART3_UART_Init+0x90>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000d00 <MX_USART3_UART_Init+0x90>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c94:	4b1a      	ldr	r3, [pc, #104]	@ (8000d00 <MX_USART3_UART_Init+0x90>)
 8000c96:	220c      	movs	r2, #12
 8000c98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9a:	4b19      	ldr	r3, [pc, #100]	@ (8000d00 <MX_USART3_UART_Init+0x90>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca0:	4b17      	ldr	r3, [pc, #92]	@ (8000d00 <MX_USART3_UART_Init+0x90>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ca6:	4b16      	ldr	r3, [pc, #88]	@ (8000d00 <MX_USART3_UART_Init+0x90>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cac:	4b14      	ldr	r3, [pc, #80]	@ (8000d00 <MX_USART3_UART_Init+0x90>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cb2:	4b13      	ldr	r3, [pc, #76]	@ (8000d00 <MX_USART3_UART_Init+0x90>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cb8:	4811      	ldr	r0, [pc, #68]	@ (8000d00 <MX_USART3_UART_Init+0x90>)
 8000cba:	f00a f93c 	bl	800af36 <HAL_UART_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000cc4:	f000 f9ca 	bl	800105c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cc8:	2100      	movs	r1, #0
 8000cca:	480d      	ldr	r0, [pc, #52]	@ (8000d00 <MX_USART3_UART_Init+0x90>)
 8000ccc:	f00a fe68 	bl	800b9a0 <HAL_UARTEx_SetTxFifoThreshold>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000cd6:	f000 f9c1 	bl	800105c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4808      	ldr	r0, [pc, #32]	@ (8000d00 <MX_USART3_UART_Init+0x90>)
 8000cde:	f00a fe9d 	bl	800ba1c <HAL_UARTEx_SetRxFifoThreshold>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ce8:	f000 f9b8 	bl	800105c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000cec:	4804      	ldr	r0, [pc, #16]	@ (8000d00 <MX_USART3_UART_Init+0x90>)
 8000cee:	f00a fe1e 	bl	800b92e <HAL_UARTEx_DisableFifoMode>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000cf8:	f000 f9b0 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	200003a8 	.word	0x200003a8
 8000d04:	40004800 	.word	0x40004800

08000d08 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000d0c:	4b22      	ldr	r3, [pc, #136]	@ (8000d98 <MX_USART6_UART_Init+0x90>)
 8000d0e:	4a23      	ldr	r2, [pc, #140]	@ (8000d9c <MX_USART6_UART_Init+0x94>)
 8000d10:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000d12:	4b21      	ldr	r3, [pc, #132]	@ (8000d98 <MX_USART6_UART_Init+0x90>)
 8000d14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d18:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000d1a:	4b1f      	ldr	r3, [pc, #124]	@ (8000d98 <MX_USART6_UART_Init+0x90>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000d20:	4b1d      	ldr	r3, [pc, #116]	@ (8000d98 <MX_USART6_UART_Init+0x90>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000d26:	4b1c      	ldr	r3, [pc, #112]	@ (8000d98 <MX_USART6_UART_Init+0x90>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000d2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000d98 <MX_USART6_UART_Init+0x90>)
 8000d2e:	220c      	movs	r2, #12
 8000d30:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d32:	4b19      	ldr	r3, [pc, #100]	@ (8000d98 <MX_USART6_UART_Init+0x90>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d38:	4b17      	ldr	r3, [pc, #92]	@ (8000d98 <MX_USART6_UART_Init+0x90>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d3e:	4b16      	ldr	r3, [pc, #88]	@ (8000d98 <MX_USART6_UART_Init+0x90>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d44:	4b14      	ldr	r3, [pc, #80]	@ (8000d98 <MX_USART6_UART_Init+0x90>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d4a:	4b13      	ldr	r3, [pc, #76]	@ (8000d98 <MX_USART6_UART_Init+0x90>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000d50:	4811      	ldr	r0, [pc, #68]	@ (8000d98 <MX_USART6_UART_Init+0x90>)
 8000d52:	f00a f8f0 	bl	800af36 <HAL_UART_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8000d5c:	f000 f97e 	bl	800105c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d60:	2100      	movs	r1, #0
 8000d62:	480d      	ldr	r0, [pc, #52]	@ (8000d98 <MX_USART6_UART_Init+0x90>)
 8000d64:	f00a fe1c 	bl	800b9a0 <HAL_UARTEx_SetTxFifoThreshold>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8000d6e:	f000 f975 	bl	800105c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d72:	2100      	movs	r1, #0
 8000d74:	4808      	ldr	r0, [pc, #32]	@ (8000d98 <MX_USART6_UART_Init+0x90>)
 8000d76:	f00a fe51 	bl	800ba1c <HAL_UARTEx_SetRxFifoThreshold>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8000d80:	f000 f96c 	bl	800105c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8000d84:	4804      	ldr	r0, [pc, #16]	@ (8000d98 <MX_USART6_UART_Init+0x90>)
 8000d86:	f00a fdd2 	bl	800b92e <HAL_UARTEx_DisableFifoMode>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8000d90:	f000 f964 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	2000043c 	.word	0x2000043c
 8000d9c:	40006400 	.word	0x40006400

08000da0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USB_Init 0 */
  hpcd_USB_DRD_FS.pData = &hUsbDeviceFS;
 8000da4:	4b29      	ldr	r3, [pc, #164]	@ (8000e4c <MX_USB_PCD_Init+0xac>)
 8000da6:	4a2a      	ldr	r2, [pc, #168]	@ (8000e50 <MX_USB_PCD_Init+0xb0>)
 8000da8:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8000dac:	4b27      	ldr	r3, [pc, #156]	@ (8000e4c <MX_USB_PCD_Init+0xac>)
 8000dae:	4a29      	ldr	r2, [pc, #164]	@ (8000e54 <MX_USB_PCD_Init+0xb4>)
 8000db0:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8000db2:	4b26      	ldr	r3, [pc, #152]	@ (8000e4c <MX_USB_PCD_Init+0xac>)
 8000db4:	2208      	movs	r2, #8
 8000db6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8000db8:	4b24      	ldr	r3, [pc, #144]	@ (8000e4c <MX_USB_PCD_Init+0xac>)
 8000dba:	2202      	movs	r2, #2
 8000dbc:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000dbe:	4b23      	ldr	r3, [pc, #140]	@ (8000e4c <MX_USB_PCD_Init+0xac>)
 8000dc0:	2202      	movs	r2, #2
 8000dc2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8000dc4:	4b21      	ldr	r3, [pc, #132]	@ (8000e4c <MX_USB_PCD_Init+0xac>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8000dca:	4b20      	ldr	r3, [pc, #128]	@ (8000e4c <MX_USB_PCD_Init+0xac>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8000dd0:	4b1e      	ldr	r3, [pc, #120]	@ (8000e4c <MX_USB_PCD_Init+0xac>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8000dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8000e4c <MX_USB_PCD_Init+0xac>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8000ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8000e4c <MX_USB_PCD_Init+0xac>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8000de2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e4c <MX_USB_PCD_Init+0xac>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8000de8:	4b18      	ldr	r3, [pc, #96]	@ (8000e4c <MX_USB_PCD_Init+0xac>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8000dee:	4817      	ldr	r0, [pc, #92]	@ (8000e4c <MX_USB_PCD_Init+0xac>)
 8000df0:	f001 ff71 	bl	8002cd6 <HAL_PCD_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_USB_PCD_Init+0x5e>
  {
    Error_Handler();
 8000dfa:	f000 f92f 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */
  if(USBD_Init(&hUsbDeviceFS, &Class_Desc, 0) != USBD_OK)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	4915      	ldr	r1, [pc, #84]	@ (8000e58 <MX_USB_PCD_Init+0xb8>)
 8000e02:	4813      	ldr	r0, [pc, #76]	@ (8000e50 <MX_USB_PCD_Init+0xb0>)
 8000e04:	f00d ff32 	bl	800ec6c <USBD_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_USB_PCD_Init+0x72>
        Error_Handler();
 8000e0e:	f000 f925 	bl	800105c <Error_Handler>

  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8000e12:	4912      	ldr	r1, [pc, #72]	@ (8000e5c <MX_USB_PCD_Init+0xbc>)
 8000e14:	480e      	ldr	r0, [pc, #56]	@ (8000e50 <MX_USB_PCD_Init+0xb0>)
 8000e16:	f00d ff59 	bl	800eccc <USBD_RegisterClass>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_USB_PCD_Init+0x84>
        Error_Handler();
 8000e20:	f000 f91c 	bl	800105c <Error_Handler>

  if(USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_CDC_Template_fops) != USBD_OK)
 8000e24:	490e      	ldr	r1, [pc, #56]	@ (8000e60 <MX_USB_PCD_Init+0xc0>)
 8000e26:	480a      	ldr	r0, [pc, #40]	@ (8000e50 <MX_USB_PCD_Init+0xb0>)
 8000e28:	f00d fa58 	bl	800e2dc <USBD_CDC_RegisterInterface>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_USB_PCD_Init+0x96>
        Error_Handler();
 8000e32:	f000 f913 	bl	800105c <Error_Handler>

  if(USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8000e36:	4806      	ldr	r0, [pc, #24]	@ (8000e50 <MX_USB_PCD_Init+0xb0>)
 8000e38:	f00d ff7e 	bl	800ed38 <USBD_Start>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_USB_PCD_Init+0xa6>
        Error_Handler();
 8000e42:	f000 f90b 	bl	800105c <Error_Handler>
  /* USER CODE END USB_Init 2 */

}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	200004d0 	.word	0x200004d0
 8000e50:	200007b4 	.word	0x200007b4
 8000e54:	40016000 	.word	0x40016000
 8000e58:	200000d4 	.word	0x200000d4
 8000e5c:	20000038 	.word	0x20000038
 8000e60:	200000b8 	.word	0x200000b8

08000e64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08c      	sub	sp, #48	@ 0x30
 8000e68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6a:	f107 031c 	add.w	r3, r7, #28
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]
 8000e78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e7a:	4b72      	ldr	r3, [pc, #456]	@ (8001044 <MX_GPIO_Init+0x1e0>)
 8000e7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e80:	4a70      	ldr	r2, [pc, #448]	@ (8001044 <MX_GPIO_Init+0x1e0>)
 8000e82:	f043 0310 	orr.w	r3, r3, #16
 8000e86:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e8a:	4b6e      	ldr	r3, [pc, #440]	@ (8001044 <MX_GPIO_Init+0x1e0>)
 8000e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e90:	f003 0310 	and.w	r3, r3, #16
 8000e94:	61bb      	str	r3, [r7, #24]
 8000e96:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e98:	4b6a      	ldr	r3, [pc, #424]	@ (8001044 <MX_GPIO_Init+0x1e0>)
 8000e9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e9e:	4a69      	ldr	r2, [pc, #420]	@ (8001044 <MX_GPIO_Init+0x1e0>)
 8000ea0:	f043 0304 	orr.w	r3, r3, #4
 8000ea4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ea8:	4b66      	ldr	r3, [pc, #408]	@ (8001044 <MX_GPIO_Init+0x1e0>)
 8000eaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000eae:	f003 0304 	and.w	r3, r3, #4
 8000eb2:	617b      	str	r3, [r7, #20]
 8000eb4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eb6:	4b63      	ldr	r3, [pc, #396]	@ (8001044 <MX_GPIO_Init+0x1e0>)
 8000eb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ebc:	4a61      	ldr	r2, [pc, #388]	@ (8001044 <MX_GPIO_Init+0x1e0>)
 8000ebe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ec2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ec6:	4b5f      	ldr	r3, [pc, #380]	@ (8001044 <MX_GPIO_Init+0x1e0>)
 8000ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ecc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed4:	4b5b      	ldr	r3, [pc, #364]	@ (8001044 <MX_GPIO_Init+0x1e0>)
 8000ed6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000eda:	4a5a      	ldr	r2, [pc, #360]	@ (8001044 <MX_GPIO_Init+0x1e0>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ee4:	4b57      	ldr	r3, [pc, #348]	@ (8001044 <MX_GPIO_Init+0x1e0>)
 8000ee6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef2:	4b54      	ldr	r3, [pc, #336]	@ (8001044 <MX_GPIO_Init+0x1e0>)
 8000ef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ef8:	4a52      	ldr	r2, [pc, #328]	@ (8001044 <MX_GPIO_Init+0x1e0>)
 8000efa:	f043 0302 	orr.w	r3, r3, #2
 8000efe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f02:	4b50      	ldr	r3, [pc, #320]	@ (8001044 <MX_GPIO_Init+0x1e0>)
 8000f04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f08:	f003 0302 	and.w	r3, r3, #2
 8000f0c:	60bb      	str	r3, [r7, #8]
 8000f0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f10:	4b4c      	ldr	r3, [pc, #304]	@ (8001044 <MX_GPIO_Init+0x1e0>)
 8000f12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f16:	4a4b      	ldr	r2, [pc, #300]	@ (8001044 <MX_GPIO_Init+0x1e0>)
 8000f18:	f043 0308 	orr.w	r3, r3, #8
 8000f1c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f20:	4b48      	ldr	r3, [pc, #288]	@ (8001044 <MX_GPIO_Init+0x1e0>)
 8000f22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f26:	f003 0308 	and.w	r3, r3, #8
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f2e:	4b45      	ldr	r3, [pc, #276]	@ (8001044 <MX_GPIO_Init+0x1e0>)
 8000f30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f34:	4a43      	ldr	r2, [pc, #268]	@ (8001044 <MX_GPIO_Init+0x1e0>)
 8000f36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f3a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f3e:	4b41      	ldr	r3, [pc, #260]	@ (8001044 <MX_GPIO_Init+0x1e0>)
 8000f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f48:	603b      	str	r3, [r7, #0]
 8000f4a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f4c:	2332      	movs	r3, #50	@ 0x32
 8000f4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f50:	2302      	movs	r3, #2
 8000f52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f5c:	230b      	movs	r3, #11
 8000f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f60:	f107 031c 	add.w	r3, r7, #28
 8000f64:	4619      	mov	r1, r3
 8000f66:	4838      	ldr	r0, [pc, #224]	@ (8001048 <MX_GPIO_Init+0x1e4>)
 8000f68:	f001 fb64 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000f6c:	2384      	movs	r3, #132	@ 0x84
 8000f6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f70:	2302      	movs	r3, #2
 8000f72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f7c:	230b      	movs	r3, #11
 8000f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f80:	f107 031c 	add.w	r3, r7, #28
 8000f84:	4619      	mov	r1, r3
 8000f86:	4831      	ldr	r0, [pc, #196]	@ (800104c <MX_GPIO_Init+0x1e8>)
 8000f88:	f001 fb54 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000f8c:	2310      	movs	r3, #16
 8000f8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f90:	2303      	movs	r3, #3
 8000f92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000f98:	f107 031c 	add.w	r3, r7, #28
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	482b      	ldr	r0, [pc, #172]	@ (800104c <MX_GPIO_Init+0x1e8>)
 8000fa0:	f001 fb48 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_CC1_Pin UCPD_CC2_Pin */
  GPIO_InitStruct.Pin = UCPD_CC1_Pin|UCPD_CC2_Pin;
 8000fa4:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000fa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000faa:	2303      	movs	r3, #3
 8000fac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb2:	f107 031c 	add.w	r3, r7, #28
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4825      	ldr	r0, [pc, #148]	@ (8001050 <MX_GPIO_Init+0x1ec>)
 8000fba:	f001 fb3b 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000fbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000fc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fd0:	230b      	movs	r3, #11
 8000fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000fd4:	f107 031c 	add.w	r3, r7, #28
 8000fd8:	4619      	mov	r1, r3
 8000fda:	481d      	ldr	r0, [pc, #116]	@ (8001050 <MX_GPIO_Init+0x1ec>)
 8000fdc:	f001 fb2a 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000fe0:	2380      	movs	r3, #128	@ 0x80
 8000fe2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fe4:	4b1b      	ldr	r3, [pc, #108]	@ (8001054 <MX_GPIO_Init+0x1f0>)
 8000fe6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000fec:	f107 031c 	add.w	r3, r7, #28
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4819      	ldr	r0, [pc, #100]	@ (8001058 <MX_GPIO_Init+0x1f4>)
 8000ff4:	f001 fb1e 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXT_EN_Pin RMI_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TXT_EN_Pin|RMI_TXD0_Pin;
 8000ff8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000ffc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001006:	2302      	movs	r3, #2
 8001008:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800100a:	230b      	movs	r3, #11
 800100c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800100e:	f107 031c 	add.w	r3, r7, #28
 8001012:	4619      	mov	r1, r3
 8001014:	4810      	ldr	r0, [pc, #64]	@ (8001058 <MX_GPIO_Init+0x1f4>)
 8001016:	f001 fb0d 	bl	8002634 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_TX_Pin ARD_D0_RX_Pin */
  GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 800101a:	23c0      	movs	r3, #192	@ 0xc0
 800101c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800102a:	2308      	movs	r3, #8
 800102c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102e:	f107 031c 	add.w	r3, r7, #28
 8001032:	4619      	mov	r1, r3
 8001034:	4806      	ldr	r0, [pc, #24]	@ (8001050 <MX_GPIO_Init+0x1ec>)
 8001036:	f001 fafd 	bl	8002634 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800103a:	bf00      	nop
 800103c:	3730      	adds	r7, #48	@ 0x30
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	44020c00 	.word	0x44020c00
 8001048:	42020800 	.word	0x42020800
 800104c:	42020000 	.word	0x42020000
 8001050:	42020400 	.word	0x42020400
 8001054:	10110000 	.word	0x10110000
 8001058:	42021800 	.word	0x42021800

0800105c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001060:	b672      	cpsid	i
}
 8001062:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001064:	bf00      	nop
 8001066:	e7fd      	b.n	8001064 <Error_Handler+0x8>

08001068 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
	...

08001078 <HAL_HASH_MspInit>:
* This function configures the hardware resources used in this example
* @param hhash: HASH handle pointer
* @retval None
*/
void HAL_HASH_MspInit(HASH_HandleTypeDef* hhash)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HASH_MspInit 0 */

  /* USER CODE END HASH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HASH_CLK_ENABLE();
 8001080:	4b0a      	ldr	r3, [pc, #40]	@ (80010ac <HAL_HASH_MspInit+0x34>)
 8001082:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001086:	4a09      	ldr	r2, [pc, #36]	@ (80010ac <HAL_HASH_MspInit+0x34>)
 8001088:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800108c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001090:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <HAL_HASH_MspInit+0x34>)
 8001092:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HASH_MspInit 1 */

  /* USER CODE END HASH_MspInit 1 */

}
 800109e:	bf00      	nop
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	44020c00 	.word	0x44020c00

080010b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b0cc      	sub	sp, #304	@ 0x130
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80010ba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80010be:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80010d4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80010d8:	4618      	mov	r0, r3
 80010da:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80010de:	461a      	mov	r2, r3
 80010e0:	2100      	movs	r1, #0
 80010e2:	f00f faa5 	bl	8010630 <memset>
  if(hi2c->Instance==I2C1)
 80010e6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80010ea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a33      	ldr	r2, [pc, #204]	@ (80011c0 <HAL_I2C_MspInit+0x110>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d15e      	bne.n	80011b6 <HAL_I2C_MspInit+0x106>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010f8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80010fc:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001100:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001104:	f04f 0300 	mov.w	r3, #0
 8001108:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800110c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001110:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001114:	2200      	movs	r2, #0
 8001116:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800111a:	f107 0310 	add.w	r3, r7, #16
 800111e:	4618      	mov	r0, r3
 8001120:	f004 f9f4 	bl	800550c <HAL_RCCEx_PeriphCLKConfig>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 800112a:	f7ff ff97 	bl	800105c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800112e:	4b25      	ldr	r3, [pc, #148]	@ (80011c4 <HAL_I2C_MspInit+0x114>)
 8001130:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001134:	4a23      	ldr	r2, [pc, #140]	@ (80011c4 <HAL_I2C_MspInit+0x114>)
 8001136:	f043 0302 	orr.w	r3, r3, #2
 800113a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800113e:	4b21      	ldr	r3, [pc, #132]	@ (80011c4 <HAL_I2C_MspInit+0x114>)
 8001140:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001144:	f003 0202 	and.w	r2, r3, #2
 8001148:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800114c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001156:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800115a:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800115c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001160:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001164:	2312      	movs	r3, #18
 8001166:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001170:	2300      	movs	r3, #0
 8001172:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001176:	2304      	movs	r3, #4
 8001178:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117c:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001180:	4619      	mov	r1, r3
 8001182:	4811      	ldr	r0, [pc, #68]	@ (80011c8 <HAL_I2C_MspInit+0x118>)
 8001184:	f001 fa56 	bl	8002634 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001188:	4b0e      	ldr	r3, [pc, #56]	@ (80011c4 <HAL_I2C_MspInit+0x114>)
 800118a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800118e:	4a0d      	ldr	r2, [pc, #52]	@ (80011c4 <HAL_I2C_MspInit+0x114>)
 8001190:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001194:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001198:	4b0a      	ldr	r3, [pc, #40]	@ (80011c4 <HAL_I2C_MspInit+0x114>)
 800119a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800119e:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80011a2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80011a6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80011b0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80011b4:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80011b6:	bf00      	nop
 80011b8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40005400 	.word	0x40005400
 80011c4:	44020c00 	.word	0x44020c00
 80011c8:	42020400 	.word	0x42020400

080011cc <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b0c6      	sub	sp, #280	@ 0x118
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80011d6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80011da:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011dc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80011e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80011e4:	4618      	mov	r0, r3
 80011e6:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80011ea:	461a      	mov	r2, r3
 80011ec:	2100      	movs	r1, #0
 80011ee:	f00f fa1f 	bl	8010630 <memset>
  if(hrng->Instance==RNG)
 80011f2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80011f6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a1d      	ldr	r2, [pc, #116]	@ (8001274 <HAL_RNG_MspInit+0xa8>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d131      	bne.n	8001268 <HAL_RNG_MspInit+0x9c>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001204:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001208:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 800120c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001210:	f04f 0300 	mov.w	r3, #0
 8001214:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8001218:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800121c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001220:	2200      	movs	r2, #0
 8001222:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001226:	f107 0310 	add.w	r3, r7, #16
 800122a:	4618      	mov	r0, r3
 800122c:	f004 f96e 	bl	800550c <HAL_RCCEx_PeriphCLKConfig>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <HAL_RNG_MspInit+0x6e>
    {
      Error_Handler();
 8001236:	f7ff ff11 	bl	800105c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800123a:	4b0f      	ldr	r3, [pc, #60]	@ (8001278 <HAL_RNG_MspInit+0xac>)
 800123c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001240:	4a0d      	ldr	r2, [pc, #52]	@ (8001278 <HAL_RNG_MspInit+0xac>)
 8001242:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001246:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800124a:	4b0b      	ldr	r3, [pc, #44]	@ (8001278 <HAL_RNG_MspInit+0xac>)
 800124c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001250:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 8001254:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001258:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001262:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001266:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8001268:	bf00      	nop
 800126a:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	420c0800 	.word	0x420c0800
 8001278:	44020c00 	.word	0x44020c00

0800127c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b0c6      	sub	sp, #280	@ 0x118
 8001280:	af00      	add	r7, sp, #0
 8001282:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001286:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800128a:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800128c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001290:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001294:	4618      	mov	r0, r3
 8001296:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800129a:	461a      	mov	r2, r3
 800129c:	2100      	movs	r1, #0
 800129e:	f00f f9c7 	bl	8010630 <memset>
  if(hrtc->Instance==RTC)
 80012a2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80012a6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a21      	ldr	r2, [pc, #132]	@ (8001334 <HAL_RTC_MspInit+0xb8>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d13a      	bne.n	800132a <HAL_RTC_MspInit+0xae>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80012b4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80012b8:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 80012bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80012c0:	f04f 0300 	mov.w	r3, #0
 80012c4:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80012c8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80012cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80012d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012d4:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012d8:	f107 0310 	add.w	r3, r7, #16
 80012dc:	4618      	mov	r0, r3
 80012de:	f004 f915 	bl	800550c <HAL_RCCEx_PeriphCLKConfig>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <HAL_RTC_MspInit+0x70>
    {
      Error_Handler();
 80012e8:	f7ff feb8 	bl	800105c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80012ec:	4b12      	ldr	r3, [pc, #72]	@ (8001338 <HAL_RTC_MspInit+0xbc>)
 80012ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012f2:	4a11      	ldr	r2, [pc, #68]	@ (8001338 <HAL_RTC_MspInit+0xbc>)
 80012f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012f8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80012fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001338 <HAL_RTC_MspInit+0xbc>)
 80012fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001302:	4a0d      	ldr	r2, [pc, #52]	@ (8001338 <HAL_RTC_MspInit+0xbc>)
 8001304:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001308:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 800130c:	4b0a      	ldr	r3, [pc, #40]	@ (8001338 <HAL_RTC_MspInit+0xbc>)
 800130e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001312:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001316:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800131a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001324:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001328:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800132a:	bf00      	nop
 800132c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	44007800 	.word	0x44007800
 8001338:	44020c00 	.word	0x44020c00

0800133c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b0ce      	sub	sp, #312	@ 0x138
 8001340:	af00      	add	r7, sp, #0
 8001342:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001346:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800134a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800135c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001360:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001364:	4618      	mov	r0, r3
 8001366:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800136a:	461a      	mov	r2, r3
 800136c:	2100      	movs	r1, #0
 800136e:	f00f f95f 	bl	8010630 <memset>
  if(hspi->Instance==SPI1)
 8001372:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001376:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a49      	ldr	r2, [pc, #292]	@ (80014a4 <HAL_SPI_MspInit+0x168>)
 8001380:	4293      	cmp	r3, r2
 8001382:	f040 808a 	bne.w	800149a <HAL_SPI_MspInit+0x15e>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001386:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800138a:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 800138e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001392:	f04f 0300 	mov.w	r3, #0
 8001396:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 800139a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800139e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80013a2:	2200      	movs	r2, #0
 80013a4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013a8:	f107 0318 	add.w	r3, r7, #24
 80013ac:	4618      	mov	r0, r3
 80013ae:	f004 f8ad 	bl	800550c <HAL_RCCEx_PeriphCLKConfig>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <HAL_SPI_MspInit+0x80>
    {
      Error_Handler();
 80013b8:	f7ff fe50 	bl	800105c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013bc:	4b3a      	ldr	r3, [pc, #232]	@ (80014a8 <HAL_SPI_MspInit+0x16c>)
 80013be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80013c2:	4a39      	ldr	r2, [pc, #228]	@ (80014a8 <HAL_SPI_MspInit+0x16c>)
 80013c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013c8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80013cc:	4b36      	ldr	r3, [pc, #216]	@ (80014a8 <HAL_SPI_MspInit+0x16c>)
 80013ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80013d2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80013d6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80013da:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80013e4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80013e8:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ea:	4b2f      	ldr	r3, [pc, #188]	@ (80014a8 <HAL_SPI_MspInit+0x16c>)
 80013ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013f0:	4a2d      	ldr	r2, [pc, #180]	@ (80014a8 <HAL_SPI_MspInit+0x16c>)
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013fa:	4b2b      	ldr	r3, [pc, #172]	@ (80014a8 <HAL_SPI_MspInit+0x16c>)
 80013fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001400:	f003 0201 	and.w	r2, r3, #1
 8001404:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001408:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001412:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001416:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001418:	4b23      	ldr	r3, [pc, #140]	@ (80014a8 <HAL_SPI_MspInit+0x16c>)
 800141a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800141e:	4a22      	ldr	r2, [pc, #136]	@ (80014a8 <HAL_SPI_MspInit+0x16c>)
 8001420:	f043 0308 	orr.w	r3, r3, #8
 8001424:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001428:	4b1f      	ldr	r3, [pc, #124]	@ (80014a8 <HAL_SPI_MspInit+0x16c>)
 800142a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800142e:	f003 0208 	and.w	r2, r3, #8
 8001432:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001436:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001440:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001444:	681b      	ldr	r3, [r3, #0]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001446:	2360      	movs	r3, #96	@ 0x60
 8001448:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144c:	2302      	movs	r3, #2
 800144e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001458:	2300      	movs	r3, #0
 800145a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800145e:	2305      	movs	r3, #5
 8001460:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001464:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001468:	4619      	mov	r1, r3
 800146a:	4810      	ldr	r0, [pc, #64]	@ (80014ac <HAL_SPI_MspInit+0x170>)
 800146c:	f001 f8e2 	bl	8002634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001470:	2380      	movs	r3, #128	@ 0x80
 8001472:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001476:	2302      	movs	r3, #2
 8001478:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	2300      	movs	r3, #0
 8001484:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001488:	2305      	movs	r3, #5
 800148a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800148e:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001492:	4619      	mov	r1, r3
 8001494:	4806      	ldr	r0, [pc, #24]	@ (80014b0 <HAL_SPI_MspInit+0x174>)
 8001496:	f001 f8cd 	bl	8002634 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800149a:	bf00      	nop
 800149c:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40013000 	.word	0x40013000
 80014a8:	44020c00 	.word	0x44020c00
 80014ac:	42020000 	.word	0x42020000
 80014b0:	42020c00 	.word	0x42020c00

080014b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b0d2      	sub	sp, #328	@ 0x148
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80014be:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80014c2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014d4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80014d8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80014dc:	4618      	mov	r0, r3
 80014de:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80014e2:	461a      	mov	r2, r3
 80014e4:	2100      	movs	r1, #0
 80014e6:	f00f f8a3 	bl	8010630 <memset>
  if(huart->Instance==USART2)
 80014ea:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80014ee:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4ac7      	ldr	r2, [pc, #796]	@ (8001814 <HAL_UART_MspInit+0x360>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	f040 808a 	bne.w	8001612 <HAL_UART_MspInit+0x15e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014fe:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001502:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001506:	f04f 0202 	mov.w	r2, #2
 800150a:	f04f 0300 	mov.w	r3, #0
 800150e:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001512:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001516:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800151a:	2200      	movs	r2, #0
 800151c:	661a      	str	r2, [r3, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800151e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001522:	4618      	mov	r0, r3
 8001524:	f003 fff2 	bl	800550c <HAL_RCCEx_PeriphCLKConfig>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 800152e:	f7ff fd95 	bl	800105c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001532:	4bb9      	ldr	r3, [pc, #740]	@ (8001818 <HAL_UART_MspInit+0x364>)
 8001534:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001538:	4ab7      	ldr	r2, [pc, #732]	@ (8001818 <HAL_UART_MspInit+0x364>)
 800153a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800153e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001542:	4bb5      	ldr	r3, [pc, #724]	@ (8001818 <HAL_UART_MspInit+0x364>)
 8001544:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001548:	f403 3200 	and.w	r2, r3, #131072	@ 0x20000
 800154c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001550:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800155a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800155e:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001560:	4bad      	ldr	r3, [pc, #692]	@ (8001818 <HAL_UART_MspInit+0x364>)
 8001562:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001566:	4aac      	ldr	r2, [pc, #688]	@ (8001818 <HAL_UART_MspInit+0x364>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001570:	4ba9      	ldr	r3, [pc, #676]	@ (8001818 <HAL_UART_MspInit+0x364>)
 8001572:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001576:	f003 0201 	and.w	r2, r3, #1
 800157a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800157e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001588:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800158c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800158e:	4ba2      	ldr	r3, [pc, #648]	@ (8001818 <HAL_UART_MspInit+0x364>)
 8001590:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001594:	4aa0      	ldr	r2, [pc, #640]	@ (8001818 <HAL_UART_MspInit+0x364>)
 8001596:	f043 0308 	orr.w	r3, r3, #8
 800159a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800159e:	4b9e      	ldr	r3, [pc, #632]	@ (8001818 <HAL_UART_MspInit+0x364>)
 80015a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015a4:	f003 0208 	and.w	r2, r3, #8
 80015a8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80015ac:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80015b6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80015ba:	681b      	ldr	r3, [r3, #0]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015bc:	2308      	movs	r3, #8
 80015be:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2300      	movs	r3, #0
 80015d0:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015d4:	2307      	movs	r3, #7
 80015d6:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015da:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80015de:	4619      	mov	r1, r3
 80015e0:	488e      	ldr	r0, [pc, #568]	@ (800181c <HAL_UART_MspInit+0x368>)
 80015e2:	f001 f827 	bl	8002634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015e6:	2320      	movs	r3, #32
 80015e8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ec:	2302      	movs	r3, #2
 80015ee:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f8:	2300      	movs	r3, #0
 80015fa:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015fe:	2307      	movs	r3, #7
 8001600:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001604:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001608:	4619      	mov	r1, r3
 800160a:	4885      	ldr	r0, [pc, #532]	@ (8001820 <HAL_UART_MspInit+0x36c>)
 800160c:	f001 f812 	bl	8002634 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001610:	e0fb      	b.n	800180a <HAL_UART_MspInit+0x356>
  else if(huart->Instance==USART3)
 8001612:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001616:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a81      	ldr	r2, [pc, #516]	@ (8001824 <HAL_UART_MspInit+0x370>)
 8001620:	4293      	cmp	r3, r2
 8001622:	f040 808c 	bne.w	800173e <HAL_UART_MspInit+0x28a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001626:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800162a:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 800162e:	f04f 0204 	mov.w	r2, #4
 8001632:	f04f 0300 	mov.w	r3, #0
 8001636:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800163a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800163e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001642:	2200      	movs	r2, #0
 8001644:	665a      	str	r2, [r3, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001646:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800164a:	4618      	mov	r0, r3
 800164c:	f003 ff5e 	bl	800550c <HAL_RCCEx_PeriphCLKConfig>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <HAL_UART_MspInit+0x1a6>
      Error_Handler();
 8001656:	f7ff fd01 	bl	800105c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800165a:	4b6f      	ldr	r3, [pc, #444]	@ (8001818 <HAL_UART_MspInit+0x364>)
 800165c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001660:	4a6d      	ldr	r2, [pc, #436]	@ (8001818 <HAL_UART_MspInit+0x364>)
 8001662:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001666:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800166a:	4b6b      	ldr	r3, [pc, #428]	@ (8001818 <HAL_UART_MspInit+0x364>)
 800166c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001670:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 8001674:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001678:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001682:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001686:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001688:	4b63      	ldr	r3, [pc, #396]	@ (8001818 <HAL_UART_MspInit+0x364>)
 800168a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800168e:	4a62      	ldr	r2, [pc, #392]	@ (8001818 <HAL_UART_MspInit+0x364>)
 8001690:	f043 0302 	orr.w	r3, r3, #2
 8001694:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001698:	4b5f      	ldr	r3, [pc, #380]	@ (8001818 <HAL_UART_MspInit+0x364>)
 800169a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800169e:	f003 0202 	and.w	r2, r3, #2
 80016a2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80016a6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80016b0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80016b4:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016b6:	4b58      	ldr	r3, [pc, #352]	@ (8001818 <HAL_UART_MspInit+0x364>)
 80016b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016bc:	4a56      	ldr	r2, [pc, #344]	@ (8001818 <HAL_UART_MspInit+0x364>)
 80016be:	f043 0308 	orr.w	r3, r3, #8
 80016c2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016c6:	4b54      	ldr	r3, [pc, #336]	@ (8001818 <HAL_UART_MspInit+0x364>)
 80016c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016cc:	f003 0208 	and.w	r2, r3, #8
 80016d0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80016d4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80016de:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80016e2:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016e8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ec:	2302      	movs	r3, #2
 80016ee:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f8:	2300      	movs	r3, #0
 80016fa:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016fe:	2307      	movs	r3, #7
 8001700:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001704:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001708:	4619      	mov	r1, r3
 800170a:	4847      	ldr	r0, [pc, #284]	@ (8001828 <HAL_UART_MspInit+0x374>)
 800170c:	f000 ff92 	bl	8002634 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001710:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001714:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001718:	2302      	movs	r3, #2
 800171a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	2300      	movs	r3, #0
 8001726:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800172a:	2307      	movs	r3, #7
 800172c:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001730:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001734:	4619      	mov	r1, r3
 8001736:	483a      	ldr	r0, [pc, #232]	@ (8001820 <HAL_UART_MspInit+0x36c>)
 8001738:	f000 ff7c 	bl	8002634 <HAL_GPIO_Init>
}
 800173c:	e065      	b.n	800180a <HAL_UART_MspInit+0x356>
  else if(huart->Instance==USART6)
 800173e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001742:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a38      	ldr	r2, [pc, #224]	@ (800182c <HAL_UART_MspInit+0x378>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d15c      	bne.n	800180a <HAL_UART_MspInit+0x356>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001750:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001754:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001758:	f04f 0220 	mov.w	r2, #32
 800175c:	f04f 0300 	mov.w	r3, #0
 8001760:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 8001764:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001768:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800176c:	2200      	movs	r2, #0
 800176e:	671a      	str	r2, [r3, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001770:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001774:	4618      	mov	r0, r3
 8001776:	f003 fec9 	bl	800550c <HAL_RCCEx_PeriphCLKConfig>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <HAL_UART_MspInit+0x2d0>
      Error_Handler();
 8001780:	f7ff fc6c 	bl	800105c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001784:	4b24      	ldr	r3, [pc, #144]	@ (8001818 <HAL_UART_MspInit+0x364>)
 8001786:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800178a:	4a23      	ldr	r2, [pc, #140]	@ (8001818 <HAL_UART_MspInit+0x364>)
 800178c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001790:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001794:	4b20      	ldr	r3, [pc, #128]	@ (8001818 <HAL_UART_MspInit+0x364>)
 8001796:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800179a:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 800179e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80017a2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80017ac:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80017b0:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b2:	4b19      	ldr	r3, [pc, #100]	@ (8001818 <HAL_UART_MspInit+0x364>)
 80017b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017b8:	4a17      	ldr	r2, [pc, #92]	@ (8001818 <HAL_UART_MspInit+0x364>)
 80017ba:	f043 0304 	orr.w	r3, r3, #4
 80017be:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017c2:	4b15      	ldr	r3, [pc, #84]	@ (8001818 <HAL_UART_MspInit+0x364>)
 80017c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017c8:	f003 0204 	and.w	r2, r3, #4
 80017cc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80017d0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80017da:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80017de:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017e0:	23c0      	movs	r3, #192	@ 0xc0
 80017e2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e6:	2302      	movs	r3, #2
 80017e8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f2:	2300      	movs	r3, #0
 80017f4:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80017f8:	2307      	movs	r3, #7
 80017fa:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017fe:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001802:	4619      	mov	r1, r3
 8001804:	480a      	ldr	r0, [pc, #40]	@ (8001830 <HAL_UART_MspInit+0x37c>)
 8001806:	f000 ff15 	bl	8002634 <HAL_GPIO_Init>
}
 800180a:	bf00      	nop
 800180c:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40004400 	.word	0x40004400
 8001818:	44020c00 	.word	0x44020c00
 800181c:	42020000 	.word	0x42020000
 8001820:	42020c00 	.word	0x42020c00
 8001824:	40004800 	.word	0x40004800
 8001828:	42020400 	.word	0x42020400
 800182c:	40006400 	.word	0x40006400
 8001830:	42020800 	.word	0x42020800

08001834 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b0c6      	sub	sp, #280	@ 0x118
 8001838:	af00      	add	r7, sp, #0
 800183a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800183e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001842:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001844:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001848:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800184c:	4618      	mov	r0, r3
 800184e:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001852:	461a      	mov	r2, r3
 8001854:	2100      	movs	r1, #0
 8001856:	f00e feeb 	bl	8010630 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 800185a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800185e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a22      	ldr	r2, [pc, #136]	@ (80018f0 <HAL_PCD_MspInit+0xbc>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d13b      	bne.n	80018e4 <HAL_PCD_MspInit+0xb0>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800186c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001870:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	f04f 0310 	mov.w	r3, #16
 800187c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001880:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001884:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001888:	2230      	movs	r2, #48	@ 0x30
 800188a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800188e:	f107 0310 	add.w	r3, r7, #16
 8001892:	4618      	mov	r0, r3
 8001894:	f003 fe3a 	bl	800550c <HAL_RCCEx_PeriphCLKConfig>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <HAL_PCD_MspInit+0x6e>
    {
      Error_Handler();
 800189e:	f7ff fbdd 	bl	800105c <Error_Handler>
    }

    /* Enable VDDUSB */
    HAL_PWREx_EnableVddUSB();
 80018a2:	f002 fea9 	bl	80045f8 <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80018a6:	4b13      	ldr	r3, [pc, #76]	@ (80018f4 <HAL_PCD_MspInit+0xc0>)
 80018a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80018ac:	4a11      	ldr	r2, [pc, #68]	@ (80018f4 <HAL_PCD_MspInit+0xc0>)
 80018ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018b2:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80018b6:	4b0f      	ldr	r3, [pc, #60]	@ (80018f4 <HAL_PCD_MspInit+0xc0>)
 80018b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80018bc:	f003 7280 	and.w	r2, r3, #16777216	@ 0x1000000
 80018c0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80018c4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80018ce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80018d2:	681b      	ldr	r3, [r3, #0]
    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 80018d4:	2200      	movs	r2, #0
 80018d6:	2100      	movs	r1, #0
 80018d8:	204a      	movs	r0, #74	@ 0x4a
 80018da:	f000 fd4b 	bl	8002374 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_DRD_FS_IRQn);
 80018de:	204a      	movs	r0, #74	@ 0x4a
 80018e0:	f000 fd62 	bl	80023a8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 80018e4:	bf00      	nop
 80018e6:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40016000 	.word	0x40016000
 80018f4:	44020c00 	.word	0x44020c00

080018f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018fc:	bf00      	nop
 80018fe:	e7fd      	b.n	80018fc <NMI_Handler+0x4>

08001900 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001904:	bf00      	nop
 8001906:	e7fd      	b.n	8001904 <HardFault_Handler+0x4>

08001908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800190c:	bf00      	nop
 800190e:	e7fd      	b.n	800190c <MemManage_Handler+0x4>

08001910 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001914:	bf00      	nop
 8001916:	e7fd      	b.n	8001914 <BusFault_Handler+0x4>

08001918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800191c:	bf00      	nop
 800191e:	e7fd      	b.n	800191c <UsageFault_Handler+0x4>

08001920 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800194e:	f000 fc15 	bl	800217c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}

08001956 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800195a:	2000      	movs	r0, #0
 800195c:	f000 fa6e 	bl	8001e3c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001960:	bf00      	nop
 8001962:	bd80      	pop	{r7, pc}

08001964 <USB_DRD_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt.
  */
void USB_DRD_FS_IRQHandler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DRD_FS_IRQn 0 */

  /* USER CODE END USB_DRD_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 8001968:	4802      	ldr	r0, [pc, #8]	@ (8001974 <USB_DRD_FS_IRQHandler+0x10>)
 800196a:	f001 fad7 	bl	8002f1c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_DRD_FS_IRQn 1 */

  /* USER CODE END USB_DRD_FS_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	200004d0 	.word	0x200004d0

08001978 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	e00a      	b.n	80019a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800198a:	f3af 8000 	nop.w
 800198e:	4601      	mov	r1, r0
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	1c5a      	adds	r2, r3, #1
 8001994:	60ba      	str	r2, [r7, #8]
 8001996:	b2ca      	uxtb	r2, r1
 8001998:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	3301      	adds	r3, #1
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	dbf0      	blt.n	800198a <_read+0x12>
  }

  return len;
 80019a8:	687b      	ldr	r3, [r7, #4]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b086      	sub	sp, #24
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	60f8      	str	r0, [r7, #12]
 80019ba:	60b9      	str	r1, [r7, #8]
 80019bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	e009      	b.n	80019d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	1c5a      	adds	r2, r3, #1
 80019c8:	60ba      	str	r2, [r7, #8]
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f000 fabb 	bl	8001f48 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	3301      	adds	r3, #1
 80019d6:	617b      	str	r3, [r7, #20]
 80019d8:	697a      	ldr	r2, [r7, #20]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	429a      	cmp	r2, r3
 80019de:	dbf1      	blt.n	80019c4 <_write+0x12>
  }
  return len;
 80019e0:	687b      	ldr	r3, [r7, #4]
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <_close>:

int _close(int file)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b083      	sub	sp, #12
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
 8001a0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a12:	605a      	str	r2, [r3, #4]
  return 0;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <_isatty>:

int _isatty(int file)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a2a:	2301      	movs	r3, #1
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
	...

08001a54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a5c:	4a14      	ldr	r2, [pc, #80]	@ (8001ab0 <_sbrk+0x5c>)
 8001a5e:	4b15      	ldr	r3, [pc, #84]	@ (8001ab4 <_sbrk+0x60>)
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a68:	4b13      	ldr	r3, [pc, #76]	@ (8001ab8 <_sbrk+0x64>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d102      	bne.n	8001a76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a70:	4b11      	ldr	r3, [pc, #68]	@ (8001ab8 <_sbrk+0x64>)
 8001a72:	4a12      	ldr	r2, [pc, #72]	@ (8001abc <_sbrk+0x68>)
 8001a74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a76:	4b10      	ldr	r3, [pc, #64]	@ (8001ab8 <_sbrk+0x64>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d207      	bcs.n	8001a94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a84:	f00e fe22 	bl	80106cc <__errno>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	220c      	movs	r2, #12
 8001a8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a92:	e009      	b.n	8001aa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a94:	4b08      	ldr	r3, [pc, #32]	@ (8001ab8 <_sbrk+0x64>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a9a:	4b07      	ldr	r3, [pc, #28]	@ (8001ab8 <_sbrk+0x64>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	4a05      	ldr	r2, [pc, #20]	@ (8001ab8 <_sbrk+0x64>)
 8001aa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3718      	adds	r7, #24
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	200a0000 	.word	0x200a0000
 8001ab4:	00000500 	.word	0x00000500
 8001ab8:	20000a90 	.word	0x20000a90
 8001abc:	200113b8 	.word	0x200113b8

08001ac0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ac6:	4b35      	ldr	r3, [pc, #212]	@ (8001b9c <SystemInit+0xdc>)
 8001ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001acc:	4a33      	ldr	r2, [pc, #204]	@ (8001b9c <SystemInit+0xdc>)
 8001ace:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ad2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8001ad6:	4b32      	ldr	r3, [pc, #200]	@ (8001ba0 <SystemInit+0xe0>)
 8001ad8:	2201      	movs	r2, #1
 8001ada:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001adc:	4b30      	ldr	r3, [pc, #192]	@ (8001ba0 <SystemInit+0xe0>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001ae2:	4b2f      	ldr	r3, [pc, #188]	@ (8001ba0 <SystemInit+0xe0>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001ae8:	4b2d      	ldr	r3, [pc, #180]	@ (8001ba0 <SystemInit+0xe0>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	492c      	ldr	r1, [pc, #176]	@ (8001ba0 <SystemInit+0xe0>)
 8001aee:	4b2d      	ldr	r3, [pc, #180]	@ (8001ba4 <SystemInit+0xe4>)
 8001af0:	4013      	ands	r3, r2
 8001af2:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001af4:	4b2a      	ldr	r3, [pc, #168]	@ (8001ba0 <SystemInit+0xe0>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8001afa:	4b29      	ldr	r3, [pc, #164]	@ (8001ba0 <SystemInit+0xe0>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8001b00:	4b27      	ldr	r3, [pc, #156]	@ (8001ba0 <SystemInit+0xe0>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001b06:	4b26      	ldr	r3, [pc, #152]	@ (8001ba0 <SystemInit+0xe0>)
 8001b08:	4a27      	ldr	r2, [pc, #156]	@ (8001ba8 <SystemInit+0xe8>)
 8001b0a:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001b0c:	4b24      	ldr	r3, [pc, #144]	@ (8001ba0 <SystemInit+0xe0>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8001b12:	4b23      	ldr	r3, [pc, #140]	@ (8001ba0 <SystemInit+0xe0>)
 8001b14:	4a24      	ldr	r2, [pc, #144]	@ (8001ba8 <SystemInit+0xe8>)
 8001b16:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001b18:	4b21      	ldr	r3, [pc, #132]	@ (8001ba0 <SystemInit+0xe0>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8001b1e:	4b20      	ldr	r3, [pc, #128]	@ (8001ba0 <SystemInit+0xe0>)
 8001b20:	4a21      	ldr	r2, [pc, #132]	@ (8001ba8 <SystemInit+0xe8>)
 8001b22:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001b24:	4b1e      	ldr	r3, [pc, #120]	@ (8001ba0 <SystemInit+0xe0>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001b2a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ba0 <SystemInit+0xe0>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ba0 <SystemInit+0xe0>)
 8001b30:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b34:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001b36:	4b1a      	ldr	r3, [pc, #104]	@ (8001ba0 <SystemInit+0xe0>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b3c:	4b17      	ldr	r3, [pc, #92]	@ (8001b9c <SystemInit+0xdc>)
 8001b3e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001b42:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001b44:	4b19      	ldr	r3, [pc, #100]	@ (8001bac <SystemInit+0xec>)
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8001b4c:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8001b54:	d003      	beq.n	8001b5e <SystemInit+0x9e>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001b5c:	d117      	bne.n	8001b8e <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001b5e:	4b13      	ldr	r3, [pc, #76]	@ (8001bac <SystemInit+0xec>)
 8001b60:	69db      	ldr	r3, [r3, #28]
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d005      	beq.n	8001b76 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001b6a:	4b10      	ldr	r3, [pc, #64]	@ (8001bac <SystemInit+0xec>)
 8001b6c:	4a10      	ldr	r2, [pc, #64]	@ (8001bb0 <SystemInit+0xf0>)
 8001b6e:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001b70:	4b0e      	ldr	r3, [pc, #56]	@ (8001bac <SystemInit+0xec>)
 8001b72:	4a10      	ldr	r2, [pc, #64]	@ (8001bb4 <SystemInit+0xf4>)
 8001b74:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001b76:	4b0d      	ldr	r3, [pc, #52]	@ (8001bac <SystemInit+0xec>)
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	4a0c      	ldr	r2, [pc, #48]	@ (8001bac <SystemInit+0xec>)
 8001b7c:	f043 0302 	orr.w	r3, r3, #2
 8001b80:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001b82:	4b0a      	ldr	r3, [pc, #40]	@ (8001bac <SystemInit+0xec>)
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	4a09      	ldr	r2, [pc, #36]	@ (8001bac <SystemInit+0xec>)
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	61d3      	str	r3, [r2, #28]
  }
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	e000ed00 	.word	0xe000ed00
 8001ba0:	44020c00 	.word	0x44020c00
 8001ba4:	eae2eae3 	.word	0xeae2eae3
 8001ba8:	01010280 	.word	0x01010280
 8001bac:	40022000 	.word	0x40022000
 8001bb0:	08192a3b 	.word	0x08192a3b
 8001bb4:	4c5d6e7f 	.word	0x4c5d6e7f

08001bb8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bb8:	480d      	ldr	r0, [pc, #52]	@ (8001bf0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bbc:	f7ff ff80 	bl	8001ac0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bc0:	480c      	ldr	r0, [pc, #48]	@ (8001bf4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bc2:	490d      	ldr	r1, [pc, #52]	@ (8001bf8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bc4:	4a0d      	ldr	r2, [pc, #52]	@ (8001bfc <LoopForever+0xe>)
  movs r3, #0
 8001bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bc8:	e002      	b.n	8001bd0 <LoopCopyDataInit>

08001bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bce:	3304      	adds	r3, #4

08001bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd4:	d3f9      	bcc.n	8001bca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001c00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bd8:	4c0a      	ldr	r4, [pc, #40]	@ (8001c04 <LoopForever+0x16>)
  movs r3, #0
 8001bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bdc:	e001      	b.n	8001be2 <LoopFillZerobss>

08001bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be0:	3204      	adds	r2, #4

08001be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be4:	d3fb      	bcc.n	8001bde <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001be6:	f00e fd77 	bl	80106d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bea:	f7fe fd6b 	bl	80006c4 <main>

08001bee <LoopForever>:

LoopForever:
    b LoopForever
 8001bee:	e7fe      	b.n	8001bee <LoopForever>
  ldr   r0, =_estack
 8001bf0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bf8:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8001bfc:	0801186c 	.word	0x0801186c
  ldr r2, =_sbss
 8001c00:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8001c04:	200113b4 	.word	0x200113b4

08001c08 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c08:	e7fe      	b.n	8001c08 <ADC1_IRQHandler>
	...

08001c0c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08c      	sub	sp, #48	@ 0x30
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001c16:	2300      	movs	r3, #0
 8001c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if ((Led != LED2)
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d009      	beq.n	8001c34 <BSP_LED_Init+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d006      	beq.n	8001c34 <BSP_LED_Init+0x28>
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d003      	beq.n	8001c34 <BSP_LED_Init+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001c2c:	f06f 0301 	mvn.w	r3, #1
 8001c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c32:	e055      	b.n	8001ce0 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d10f      	bne.n	8001c5a <BSP_LED_Init+0x4e>
    {
      LED2_GPIO_CLK_ENABLE();
 8001c3a:	4b2c      	ldr	r3, [pc, #176]	@ (8001cec <BSP_LED_Init+0xe0>)
 8001c3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c40:	4a2a      	ldr	r2, [pc, #168]	@ (8001cec <BSP_LED_Init+0xe0>)
 8001c42:	f043 0320 	orr.w	r3, r3, #32
 8001c46:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c4a:	4b28      	ldr	r3, [pc, #160]	@ (8001cec <BSP_LED_Init+0xe0>)
 8001c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c50:	f003 0320 	and.w	r3, r3, #32
 8001c54:	617b      	str	r3, [r7, #20]
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	e021      	b.n	8001c9e <BSP_LED_Init+0x92>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d10f      	bne.n	8001c80 <BSP_LED_Init+0x74>
    {
      LED1_GPIO_CLK_ENABLE();
 8001c60:	4b22      	ldr	r3, [pc, #136]	@ (8001cec <BSP_LED_Init+0xe0>)
 8001c62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c66:	4a21      	ldr	r2, [pc, #132]	@ (8001cec <BSP_LED_Init+0xe0>)
 8001c68:	f043 0302 	orr.w	r3, r3, #2
 8001c6c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c70:	4b1e      	ldr	r3, [pc, #120]	@ (8001cec <BSP_LED_Init+0xe0>)
 8001c72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	e00e      	b.n	8001c9e <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001c80:	4b1a      	ldr	r3, [pc, #104]	@ (8001cec <BSP_LED_Init+0xe0>)
 8001c82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c86:	4a19      	ldr	r2, [pc, #100]	@ (8001cec <BSP_LED_Init+0xe0>)
 8001c88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c8c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c90:	4b16      	ldr	r3, [pc, #88]	@ (8001cec <BSP_LED_Init+0xe0>)
 8001c92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	4a13      	ldr	r2, [pc, #76]	@ (8001cf0 <BSP_LED_Init+0xe4>)
 8001ca2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ca6:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	4a0f      	ldr	r2, [pc, #60]	@ (8001cf4 <BSP_LED_Init+0xe8>)
 8001cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cbc:	f107 0218 	add.w	r2, r7, #24
 8001cc0:	4611      	mov	r1, r2
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f000 fcb6 	bl	8002634 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf4 <BSP_LED_Init+0xe8>)
 8001ccc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
 8001cd2:	4a07      	ldr	r2, [pc, #28]	@ (8001cf0 <BSP_LED_Init+0xe4>)
 8001cd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	4619      	mov	r1, r3
 8001cdc:	f000 fdfc 	bl	80028d8 <HAL_GPIO_WritePin>
  }

  return ret;
 8001ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3730      	adds	r7, #48	@ 0x30
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	44020c00 	.word	0x44020c00
 8001cf0:	080117f4 	.word	0x080117f4
 8001cf4:	2000000c 	.word	0x2000000c

08001cf8 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 8001d06:	79fb      	ldrb	r3, [r7, #7]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d009      	beq.n	8001d20 <BSP_LED_Toggle+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d006      	beq.n	8001d20 <BSP_LED_Toggle+0x28>
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d003      	beq.n	8001d20 <BSP_LED_Toggle+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001d18:	f06f 0301 	mvn.w	r3, #1
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	e00b      	b.n	8001d38 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	4a08      	ldr	r2, [pc, #32]	@ (8001d44 <BSP_LED_Toggle+0x4c>)
 8001d24:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	4907      	ldr	r1, [pc, #28]	@ (8001d48 <BSP_LED_Toggle+0x50>)
 8001d2c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001d30:	4619      	mov	r1, r3
 8001d32:	4610      	mov	r0, r2
 8001d34:	f000 fde8 	bl	8002908 <HAL_GPIO_TogglePin>
  }

  return ret;
 8001d38:	68fb      	ldr	r3, [r7, #12]
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	2000000c 	.word	0x2000000c
 8001d48:	080117f4 	.word	0x080117f4

08001d4c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b088      	sub	sp, #32
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	460a      	mov	r2, r1
 8001d56:	71fb      	strb	r3, [r7, #7]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001d5c:	4b30      	ldr	r3, [pc, #192]	@ (8001e20 <BSP_PB_Init+0xd4>)
 8001d5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d62:	4a2f      	ldr	r2, [pc, #188]	@ (8001e20 <BSP_PB_Init+0xd4>)
 8001d64:	f043 0304 	orr.w	r3, r3, #4
 8001d68:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d6c:	4b2c      	ldr	r3, [pc, #176]	@ (8001e20 <BSP_PB_Init+0xd4>)
 8001d6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d72:	f003 0304 	and.w	r3, r3, #4
 8001d76:	60bb      	str	r3, [r7, #8]
 8001d78:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001d7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d7e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001d80:	2302      	movs	r3, #2
 8001d82:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d84:	2302      	movs	r3, #2
 8001d86:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8001d88:	79bb      	ldrb	r3, [r7, #6]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d10c      	bne.n	8001da8 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001d92:	79fb      	ldrb	r3, [r7, #7]
 8001d94:	4a23      	ldr	r2, [pc, #140]	@ (8001e24 <BSP_PB_Init+0xd8>)
 8001d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d9a:	f107 020c 	add.w	r2, r7, #12
 8001d9e:	4611      	mov	r1, r2
 8001da0:	4618      	mov	r0, r3
 8001da2:	f000 fc47 	bl	8002634 <HAL_GPIO_Init>
 8001da6:	e036      	b.n	8001e16 <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001da8:	4b1f      	ldr	r3, [pc, #124]	@ (8001e28 <BSP_PB_Init+0xdc>)
 8001daa:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001dac:	79fb      	ldrb	r3, [r7, #7]
 8001dae:	4a1d      	ldr	r2, [pc, #116]	@ (8001e24 <BSP_PB_Init+0xd8>)
 8001db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db4:	f107 020c 	add.w	r2, r7, #12
 8001db8:	4611      	mov	r1, r2
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f000 fc3a 	bl	8002634 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001dc0:	79fa      	ldrb	r2, [r7, #7]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	4413      	add	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	4a18      	ldr	r2, [pc, #96]	@ (8001e2c <BSP_PB_Init+0xe0>)
 8001dcc:	441a      	add	r2, r3
 8001dce:	79fb      	ldrb	r3, [r7, #7]
 8001dd0:	4917      	ldr	r1, [pc, #92]	@ (8001e30 <BSP_PB_Init+0xe4>)
 8001dd2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4610      	mov	r0, r2
 8001dda:	f000 fbcf 	bl	800257c <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001dde:	79fa      	ldrb	r2, [r7, #7]
 8001de0:	4613      	mov	r3, r2
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	4413      	add	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4a10      	ldr	r2, [pc, #64]	@ (8001e2c <BSP_PB_Init+0xe0>)
 8001dea:	1898      	adds	r0, r3, r2
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	4a11      	ldr	r2, [pc, #68]	@ (8001e34 <BSP_PB_Init+0xe8>)
 8001df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df4:	461a      	mov	r2, r3
 8001df6:	2100      	movs	r1, #0
 8001df8:	f000 fb94 	bl	8002524 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001dfc:	2018      	movs	r0, #24
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	4a0d      	ldr	r2, [pc, #52]	@ (8001e38 <BSP_PB_Init+0xec>)
 8001e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e06:	2200      	movs	r2, #0
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f000 fab3 	bl	8002374 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001e0e:	2318      	movs	r3, #24
 8001e10:	4618      	mov	r0, r3
 8001e12:	f000 fac9 	bl	80023a8 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3720      	adds	r7, #32
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	44020c00 	.word	0x44020c00
 8001e24:	20000018 	.word	0x20000018
 8001e28:	10110000 	.word	0x10110000
 8001e2c:	20000a94 	.word	0x20000a94
 8001e30:	080117fc 	.word	0x080117fc
 8001e34:	2000001c 	.word	0x2000001c
 8001e38:	20000020 	.word	0x20000020

08001e3c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001e46:	79fa      	ldrb	r2, [r7, #7]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	4413      	add	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4a04      	ldr	r2, [pc, #16]	@ (8001e64 <BSP_PB_IRQHandler+0x28>)
 8001e52:	4413      	add	r3, r2
 8001e54:	4618      	mov	r0, r3
 8001e56:	f000 fba5 	bl	80025a4 <HAL_EXTI_IRQHandler>
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000a94 	.word	0x20000a94

08001e68 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
	...

08001e80 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	6039      	str	r1, [r7, #0]
 8001e8a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60fb      	str	r3, [r7, #12]

  if (COM >= COM_NBR)
 8001e90:	79fb      	ldrb	r3, [r7, #7]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001e96:	f06f 0301 	mvn.w	r3, #1
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	e018      	b.n	8001ed0 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	2294      	movs	r2, #148	@ 0x94
 8001ea2:	fb02 f303 	mul.w	r3, r2, r3
 8001ea6:	4a0d      	ldr	r2, [pc, #52]	@ (8001edc <BSP_COM_Init+0x5c>)
 8001ea8:	4413      	add	r3, r2
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f000 f870 	bl	8001f90 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001eb0:	79fb      	ldrb	r3, [r7, #7]
 8001eb2:	2294      	movs	r2, #148	@ 0x94
 8001eb4:	fb02 f303 	mul.w	r3, r2, r3
 8001eb8:	4a08      	ldr	r2, [pc, #32]	@ (8001edc <BSP_COM_Init+0x5c>)
 8001eba:	4413      	add	r3, r2
 8001ebc:	6839      	ldr	r1, [r7, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 f80e 	bl	8001ee0 <MX_USART_Init>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d002      	beq.n	8001ed0 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001eca:	f06f 0303 	mvn.w	r3, #3
 8001ece:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20000aa0 	.word	0x20000aa0

08001ee0 <MX_USART_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8001eea:	4b16      	ldr	r3, [pc, #88]	@ (8001f44 <MX_USART_Init+0x64>)
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	220c      	movs	r2, #12
 8001efe:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	895b      	ldrh	r3, [r3, #10]
 8001f04:	461a      	mov	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685a      	ldr	r2, [r3, #4]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	891b      	ldrh	r3, [r3, #8]
 8001f16:	461a      	mov	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	899b      	ldrh	r3, [r3, #12]
 8001f20:	461a      	mov	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001f2c:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f008 fffe 	bl	800af36 <HAL_UART_Init>
 8001f3a:	4603      	mov	r3, r0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	20000008 	.word	0x20000008

08001f48 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001f50:	4b09      	ldr	r3, [pc, #36]	@ (8001f78 <__io_putchar+0x30>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	461a      	mov	r2, r3
 8001f56:	2394      	movs	r3, #148	@ 0x94
 8001f58:	fb02 f303 	mul.w	r3, r2, r3
 8001f5c:	4a07      	ldr	r2, [pc, #28]	@ (8001f7c <__io_putchar+0x34>)
 8001f5e:	1898      	adds	r0, r3, r2
 8001f60:	1d39      	adds	r1, r7, #4
 8001f62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f66:	2201      	movs	r2, #1
 8001f68:	f009 f835 	bl	800afd6 <HAL_UART_Transmit>
  return ch;
 8001f6c:	687b      	ldr	r3, [r7, #4]
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000b34 	.word	0x20000b34
 8001f7c:	20000aa0 	.word	0x20000aa0

08001f80 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001f84:	2000      	movs	r0, #0
 8001f86:	f7ff ff6f 	bl	8001e68 <BSP_PB_Callback>
}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
	...

08001f90 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b08a      	sub	sp, #40	@ 0x28
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001f98:	4b27      	ldr	r3, [pc, #156]	@ (8002038 <COM1_MspInit+0xa8>)
 8001f9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f9e:	4a26      	ldr	r2, [pc, #152]	@ (8002038 <COM1_MspInit+0xa8>)
 8001fa0:	f043 0308 	orr.w	r3, r3, #8
 8001fa4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001fa8:	4b23      	ldr	r3, [pc, #140]	@ (8002038 <COM1_MspInit+0xa8>)
 8001faa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fae:	f003 0308 	and.w	r3, r3, #8
 8001fb2:	613b      	str	r3, [r7, #16]
 8001fb4:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001fb6:	4b20      	ldr	r3, [pc, #128]	@ (8002038 <COM1_MspInit+0xa8>)
 8001fb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fbc:	4a1e      	ldr	r2, [pc, #120]	@ (8002038 <COM1_MspInit+0xa8>)
 8001fbe:	f043 0308 	orr.w	r3, r3, #8
 8001fc2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001fc6:	4b1c      	ldr	r3, [pc, #112]	@ (8002038 <COM1_MspInit+0xa8>)
 8001fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fcc:	f003 0308 	and.w	r3, r3, #8
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001fd4:	4b18      	ldr	r3, [pc, #96]	@ (8002038 <COM1_MspInit+0xa8>)
 8001fd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001fda:	4a17      	ldr	r2, [pc, #92]	@ (8002038 <COM1_MspInit+0xa8>)
 8001fdc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fe0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001fe4:	4b14      	ldr	r3, [pc, #80]	@ (8002038 <COM1_MspInit+0xa8>)
 8001fe6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001fea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fee:	60bb      	str	r3, [r7, #8]
 8001ff0:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001ff2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ff6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002000:	2301      	movs	r3, #1
 8002002:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8002004:	2307      	movs	r3, #7
 8002006:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8002008:	f107 0314 	add.w	r3, r7, #20
 800200c:	4619      	mov	r1, r3
 800200e:	480b      	ldr	r0, [pc, #44]	@ (800203c <COM1_MspInit+0xac>)
 8002010:	f000 fb10 	bl	8002634 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8002014:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002018:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800201a:	2302      	movs	r3, #2
 800201c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800201e:	2307      	movs	r3, #7
 8002020:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8002022:	f107 0314 	add.w	r3, r7, #20
 8002026:	4619      	mov	r1, r3
 8002028:	4804      	ldr	r0, [pc, #16]	@ (800203c <COM1_MspInit+0xac>)
 800202a:	f000 fb03 	bl	8002634 <HAL_GPIO_Init>
}
 800202e:	bf00      	nop
 8002030:	3728      	adds	r7, #40	@ 0x28
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	44020c00 	.word	0x44020c00
 800203c:	42020c00 	.word	0x42020c00

08002040 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002044:	2003      	movs	r0, #3
 8002046:	f000 f98a 	bl	800235e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800204a:	f003 f8d5 	bl	80051f8 <HAL_RCC_GetSysClockFreq>
 800204e:	4602      	mov	r2, r0
 8002050:	4b0c      	ldr	r3, [pc, #48]	@ (8002084 <HAL_Init+0x44>)
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	f003 030f 	and.w	r3, r3, #15
 8002058:	490b      	ldr	r1, [pc, #44]	@ (8002088 <HAL_Init+0x48>)
 800205a:	5ccb      	ldrb	r3, [r1, r3]
 800205c:	fa22 f303 	lsr.w	r3, r2, r3
 8002060:	4a0a      	ldr	r2, [pc, #40]	@ (800208c <HAL_Init+0x4c>)
 8002062:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002064:	2004      	movs	r0, #4
 8002066:	f000 f9cf 	bl	8002408 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800206a:	200f      	movs	r0, #15
 800206c:	f000 f810 	bl	8002090 <HAL_InitTick>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e002      	b.n	8002080 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800207a:	f7fe fff5 	bl	8001068 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	bd80      	pop	{r7, pc}
 8002084:	44020c00 	.word	0x44020c00
 8002088:	080117dc 	.word	0x080117dc
 800208c:	20000004 	.word	0x20000004

08002090 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002098:	2300      	movs	r3, #0
 800209a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 800209c:	4b33      	ldr	r3, [pc, #204]	@ (800216c <HAL_InitTick+0xdc>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d101      	bne.n	80020a8 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e05c      	b.n	8002162 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80020a8:	4b31      	ldr	r3, [pc, #196]	@ (8002170 <HAL_InitTick+0xe0>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b04      	cmp	r3, #4
 80020b2:	d10c      	bne.n	80020ce <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80020b4:	4b2f      	ldr	r3, [pc, #188]	@ (8002174 <HAL_InitTick+0xe4>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4b2c      	ldr	r3, [pc, #176]	@ (800216c <HAL_InitTick+0xdc>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	4619      	mov	r1, r3
 80020be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	e037      	b.n	800213e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80020ce:	f000 f9f3 	bl	80024b8 <HAL_SYSTICK_GetCLKSourceConfig>
 80020d2:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d023      	beq.n	8002122 <HAL_InitTick+0x92>
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d82d      	bhi.n	800213c <HAL_InitTick+0xac>
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_InitTick+0x5e>
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d00d      	beq.n	8002108 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80020ec:	e026      	b.n	800213c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80020ee:	4b21      	ldr	r3, [pc, #132]	@ (8002174 <HAL_InitTick+0xe4>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	4b1e      	ldr	r3, [pc, #120]	@ (800216c <HAL_InitTick+0xdc>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	4619      	mov	r1, r3
 80020f8:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80020fc:	fbb3 f3f1 	udiv	r3, r3, r1
 8002100:	fbb2 f3f3 	udiv	r3, r2, r3
 8002104:	60fb      	str	r3, [r7, #12]
        break;
 8002106:	e01a      	b.n	800213e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002108:	4b18      	ldr	r3, [pc, #96]	@ (800216c <HAL_InitTick+0xdc>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	461a      	mov	r2, r3
 800210e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002112:	fbb3 f3f2 	udiv	r3, r3, r2
 8002116:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800211a:	fbb2 f3f3 	udiv	r3, r2, r3
 800211e:	60fb      	str	r3, [r7, #12]
        break;
 8002120:	e00d      	b.n	800213e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002122:	4b12      	ldr	r3, [pc, #72]	@ (800216c <HAL_InitTick+0xdc>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	461a      	mov	r2, r3
 8002128:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800212c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002130:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002134:	fbb2 f3f3 	udiv	r3, r2, r3
 8002138:	60fb      	str	r3, [r7, #12]
        break;
 800213a:	e000      	b.n	800213e <HAL_InitTick+0xae>
        break;
 800213c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f000 f940 	bl	80023c4 <HAL_SYSTICK_Config>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e009      	b.n	8002162 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800214e:	2200      	movs	r2, #0
 8002150:	6879      	ldr	r1, [r7, #4]
 8002152:	f04f 30ff 	mov.w	r0, #4294967295
 8002156:	f000 f90d 	bl	8002374 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800215a:	4a07      	ldr	r2, [pc, #28]	@ (8002178 <HAL_InitTick+0xe8>)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000028 	.word	0x20000028
 8002170:	e000e010 	.word	0xe000e010
 8002174:	20000004 	.word	0x20000004
 8002178:	20000024 	.word	0x20000024

0800217c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002180:	4b06      	ldr	r3, [pc, #24]	@ (800219c <HAL_IncTick+0x20>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	461a      	mov	r2, r3
 8002186:	4b06      	ldr	r3, [pc, #24]	@ (80021a0 <HAL_IncTick+0x24>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4413      	add	r3, r2
 800218c:	4a04      	ldr	r2, [pc, #16]	@ (80021a0 <HAL_IncTick+0x24>)
 800218e:	6013      	str	r3, [r2, #0]
}
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	20000028 	.word	0x20000028
 80021a0:	20000b38 	.word	0x20000b38

080021a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  return uwTick;
 80021a8:	4b03      	ldr	r3, [pc, #12]	@ (80021b8 <HAL_GetTick+0x14>)
 80021aa:	681b      	ldr	r3, [r3, #0]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	20000b38 	.word	0x20000b38

080021bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021c4:	f7ff ffee 	bl	80021a4 <HAL_GetTick>
 80021c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d4:	d005      	beq.n	80021e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002200 <HAL_Delay+0x44>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	461a      	mov	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	4413      	add	r3, r2
 80021e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021e2:	bf00      	nop
 80021e4:	f7ff ffde 	bl	80021a4 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d8f7      	bhi.n	80021e4 <HAL_Delay+0x28>
  {
  }
}
 80021f4:	bf00      	nop
 80021f6:	bf00      	nop
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	20000028 	.word	0x20000028

08002204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002214:	4b0c      	ldr	r3, [pc, #48]	@ (8002248 <__NVIC_SetPriorityGrouping+0x44>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002220:	4013      	ands	r3, r2
 8002222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800222c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002230:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002236:	4a04      	ldr	r2, [pc, #16]	@ (8002248 <__NVIC_SetPriorityGrouping+0x44>)
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	60d3      	str	r3, [r2, #12]
}
 800223c:	bf00      	nop
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	e000ed00 	.word	0xe000ed00

0800224c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002250:	4b04      	ldr	r3, [pc, #16]	@ (8002264 <__NVIC_GetPriorityGrouping+0x18>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	0a1b      	lsrs	r3, r3, #8
 8002256:	f003 0307 	and.w	r3, r3, #7
}
 800225a:	4618      	mov	r0, r3
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	e000ed00 	.word	0xe000ed00

08002268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002272:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002276:	2b00      	cmp	r3, #0
 8002278:	db0b      	blt.n	8002292 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800227a:	88fb      	ldrh	r3, [r7, #6]
 800227c:	f003 021f 	and.w	r2, r3, #31
 8002280:	4907      	ldr	r1, [pc, #28]	@ (80022a0 <__NVIC_EnableIRQ+0x38>)
 8002282:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002286:	095b      	lsrs	r3, r3, #5
 8002288:	2001      	movs	r0, #1
 800228a:	fa00 f202 	lsl.w	r2, r0, r2
 800228e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	e000e100 	.word	0xe000e100

080022a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	6039      	str	r1, [r7, #0]
 80022ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80022b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	db0a      	blt.n	80022ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	490c      	ldr	r1, [pc, #48]	@ (80022f0 <__NVIC_SetPriority+0x4c>)
 80022be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022c2:	0112      	lsls	r2, r2, #4
 80022c4:	b2d2      	uxtb	r2, r2
 80022c6:	440b      	add	r3, r1
 80022c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022cc:	e00a      	b.n	80022e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	4908      	ldr	r1, [pc, #32]	@ (80022f4 <__NVIC_SetPriority+0x50>)
 80022d4:	88fb      	ldrh	r3, [r7, #6]
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	3b04      	subs	r3, #4
 80022dc:	0112      	lsls	r2, r2, #4
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	440b      	add	r3, r1
 80022e2:	761a      	strb	r2, [r3, #24]
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	e000e100 	.word	0xe000e100
 80022f4:	e000ed00 	.word	0xe000ed00

080022f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b089      	sub	sp, #36	@ 0x24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f1c3 0307 	rsb	r3, r3, #7
 8002312:	2b04      	cmp	r3, #4
 8002314:	bf28      	it	cs
 8002316:	2304      	movcs	r3, #4
 8002318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	3304      	adds	r3, #4
 800231e:	2b06      	cmp	r3, #6
 8002320:	d902      	bls.n	8002328 <NVIC_EncodePriority+0x30>
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	3b03      	subs	r3, #3
 8002326:	e000      	b.n	800232a <NVIC_EncodePriority+0x32>
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800232c:	f04f 32ff 	mov.w	r2, #4294967295
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	43da      	mvns	r2, r3
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	401a      	ands	r2, r3
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002340:	f04f 31ff 	mov.w	r1, #4294967295
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	fa01 f303 	lsl.w	r3, r1, r3
 800234a:	43d9      	mvns	r1, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002350:	4313      	orrs	r3, r2
         );
}
 8002352:	4618      	mov	r0, r3
 8002354:	3724      	adds	r7, #36	@ 0x24
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b082      	sub	sp, #8
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7ff ff4c 	bl	8002204 <__NVIC_SetPriorityGrouping>
}
 800236c:	bf00      	nop
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
 8002380:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002382:	f7ff ff63 	bl	800224c <__NVIC_GetPriorityGrouping>
 8002386:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	68b9      	ldr	r1, [r7, #8]
 800238c:	6978      	ldr	r0, [r7, #20]
 800238e:	f7ff ffb3 	bl	80022f8 <NVIC_EncodePriority>
 8002392:	4602      	mov	r2, r0
 8002394:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002398:	4611      	mov	r1, r2
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff ff82 	bl	80022a4 <__NVIC_SetPriority>
}
 80023a0:	bf00      	nop
 80023a2:	3718      	adds	r7, #24
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff ff56 	bl	8002268 <__NVIC_EnableIRQ>
}
 80023bc:	bf00      	nop
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3b01      	subs	r3, #1
 80023d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023d4:	d301      	bcc.n	80023da <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80023d6:	2301      	movs	r3, #1
 80023d8:	e00d      	b.n	80023f6 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80023da:	4a0a      	ldr	r2, [pc, #40]	@ (8002404 <HAL_SYSTICK_Config+0x40>)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3b01      	subs	r3, #1
 80023e0:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80023e2:	4b08      	ldr	r3, [pc, #32]	@ (8002404 <HAL_SYSTICK_Config+0x40>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80023e8:	4b06      	ldr	r3, [pc, #24]	@ (8002404 <HAL_SYSTICK_Config+0x40>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a05      	ldr	r2, [pc, #20]	@ (8002404 <HAL_SYSTICK_Config+0x40>)
 80023ee:	f043 0303 	orr.w	r3, r3, #3
 80023f2:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	e000e010 	.word	0xe000e010

08002408 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b04      	cmp	r3, #4
 8002414:	d844      	bhi.n	80024a0 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002416:	a201      	add	r2, pc, #4	@ (adr r2, 800241c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800241c:	0800243f 	.word	0x0800243f
 8002420:	0800245d 	.word	0x0800245d
 8002424:	0800247f 	.word	0x0800247f
 8002428:	080024a1 	.word	0x080024a1
 800242c:	08002431 	.word	0x08002431
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002430:	4b1f      	ldr	r3, [pc, #124]	@ (80024b0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a1e      	ldr	r2, [pc, #120]	@ (80024b0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002436:	f043 0304 	orr.w	r3, r3, #4
 800243a:	6013      	str	r3, [r2, #0]
      break;
 800243c:	e031      	b.n	80024a2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800243e:	4b1c      	ldr	r3, [pc, #112]	@ (80024b0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a1b      	ldr	r2, [pc, #108]	@ (80024b0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002444:	f023 0304 	bic.w	r3, r3, #4
 8002448:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800244a:	4b1a      	ldr	r3, [pc, #104]	@ (80024b4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800244c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002450:	4a18      	ldr	r2, [pc, #96]	@ (80024b4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002452:	f023 030c 	bic.w	r3, r3, #12
 8002456:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800245a:	e022      	b.n	80024a2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800245c:	4b14      	ldr	r3, [pc, #80]	@ (80024b0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a13      	ldr	r2, [pc, #76]	@ (80024b0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002462:	f023 0304 	bic.w	r3, r3, #4
 8002466:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8002468:	4b12      	ldr	r3, [pc, #72]	@ (80024b4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800246a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800246e:	f023 030c 	bic.w	r3, r3, #12
 8002472:	4a10      	ldr	r2, [pc, #64]	@ (80024b4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002474:	f043 0304 	orr.w	r3, r3, #4
 8002478:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800247c:	e011      	b.n	80024a2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800247e:	4b0c      	ldr	r3, [pc, #48]	@ (80024b0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a0b      	ldr	r2, [pc, #44]	@ (80024b0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002484:	f023 0304 	bic.w	r3, r3, #4
 8002488:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 800248a:	4b0a      	ldr	r3, [pc, #40]	@ (80024b4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800248c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002490:	f023 030c 	bic.w	r3, r3, #12
 8002494:	4a07      	ldr	r2, [pc, #28]	@ (80024b4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002496:	f043 0308 	orr.w	r3, r3, #8
 800249a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800249e:	e000      	b.n	80024a2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80024a0:	bf00      	nop
  }
}
 80024a2:	bf00      	nop
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	e000e010 	.word	0xe000e010
 80024b4:	44020c00 	.word	0x44020c00

080024b8 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80024be:	4b17      	ldr	r3, [pc, #92]	@ (800251c <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0304 	and.w	r3, r3, #4
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d002      	beq.n	80024d0 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80024ca:	2304      	movs	r3, #4
 80024cc:	607b      	str	r3, [r7, #4]
 80024ce:	e01e      	b.n	800250e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 80024d0:	4b13      	ldr	r3, [pc, #76]	@ (8002520 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 80024d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80024d6:	f003 030c 	and.w	r3, r3, #12
 80024da:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	2b08      	cmp	r3, #8
 80024e0:	d00f      	beq.n	8002502 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	2b08      	cmp	r3, #8
 80024e6:	d80f      	bhi.n	8002508 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	2b04      	cmp	r3, #4
 80024f2:	d003      	beq.n	80024fc <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80024f4:	e008      	b.n	8002508 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80024f6:	2300      	movs	r3, #0
 80024f8:	607b      	str	r3, [r7, #4]
        break;
 80024fa:	e008      	b.n	800250e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80024fc:	2301      	movs	r3, #1
 80024fe:	607b      	str	r3, [r7, #4]
        break;
 8002500:	e005      	b.n	800250e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8002502:	2302      	movs	r3, #2
 8002504:	607b      	str	r3, [r7, #4]
        break;
 8002506:	e002      	b.n	800250e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002508:	2300      	movs	r3, #0
 800250a:	607b      	str	r3, [r7, #4]
        break;
 800250c:	bf00      	nop
    }
  }
  return systick_source;
 800250e:	687b      	ldr	r3, [r7, #4]
}
 8002510:	4618      	mov	r0, r3
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	e000e010 	.word	0xe000e010
 8002520:	44020c00 	.word	0x44020c00

08002524 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8002524:	b480      	push	{r7}
 8002526:	b087      	sub	sp, #28
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	460b      	mov	r3, r1
 800252e:	607a      	str	r2, [r7, #4]
 8002530:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002532:	2300      	movs	r3, #0
 8002534:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8002536:	7afb      	ldrb	r3, [r7, #11]
 8002538:	2b02      	cmp	r3, #2
 800253a:	d011      	beq.n	8002560 <HAL_EXTI_RegisterCallback+0x3c>
 800253c:	2b02      	cmp	r3, #2
 800253e:	dc13      	bgt.n	8002568 <HAL_EXTI_RegisterCallback+0x44>
 8002540:	2b00      	cmp	r3, #0
 8002542:	d002      	beq.n	800254a <HAL_EXTI_RegisterCallback+0x26>
 8002544:	2b01      	cmp	r3, #1
 8002546:	d007      	beq.n	8002558 <HAL_EXTI_RegisterCallback+0x34>
 8002548:	e00e      	b.n	8002568 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	609a      	str	r2, [r3, #8]
      break;
 8002556:	e00a      	b.n	800256e <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	605a      	str	r2, [r3, #4]
      break;
 800255e:	e006      	b.n	800256e <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	609a      	str	r2, [r3, #8]
      break;
 8002566:	e002      	b.n	800256e <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	75fb      	strb	r3, [r7, #23]
      break;
 800256c:	bf00      	nop
  }

  return status;
 800256e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002570:	4618      	mov	r0, r3
 8002572:	371c      	adds	r7, #28
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e003      	b.n	8002598 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002596:	2300      	movs	r3, #0
  }
}
 8002598:	4618      	mov	r0, r3
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	0c1b      	lsrs	r3, r3, #16
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 031f 	and.w	r3, r3, #31
 80025c0:	2201      	movs	r2, #1
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	015a      	lsls	r2, r3, #5
 80025cc:	4b17      	ldr	r3, [pc, #92]	@ (800262c <HAL_EXTI_IRQHandler+0x88>)
 80025ce:	4413      	add	r3, r2
 80025d0:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	4013      	ands	r3, r2
 80025da:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d009      	beq.n	80025f6 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d002      	beq.n	80025f6 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	015a      	lsls	r2, r3, #5
 80025fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002630 <HAL_EXTI_IRQHandler+0x8c>)
 80025fc:	4413      	add	r3, r2
 80025fe:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	4013      	ands	r3, r2
 8002608:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d009      	beq.n	8002624 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d002      	beq.n	8002624 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	4798      	blx	r3
    }
  }
}
 8002624:	bf00      	nop
 8002626:	3718      	adds	r7, #24
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	4402200c 	.word	0x4402200c
 8002630:	44022010 	.word	0x44022010

08002634 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002634:	b480      	push	{r7}
 8002636:	b087      	sub	sp, #28
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800263e:	2300      	movs	r3, #0
 8002640:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002642:	e136      	b.n	80028b2 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	2101      	movs	r1, #1
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	fa01 f303 	lsl.w	r3, r1, r3
 8002650:	4013      	ands	r3, r2
 8002652:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2b00      	cmp	r3, #0
 8002658:	f000 8128 	beq.w	80028ac <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2b02      	cmp	r3, #2
 8002662:	d003      	beq.n	800266c <HAL_GPIO_Init+0x38>
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2b12      	cmp	r3, #18
 800266a:	d125      	bne.n	80026b8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	08da      	lsrs	r2, r3, #3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3208      	adds	r2, #8
 8002674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002678:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	220f      	movs	r2, #15
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	4013      	ands	r3, r2
 800268e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	f003 020f 	and.w	r2, r3, #15
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	08da      	lsrs	r2, r3, #3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	3208      	adds	r2, #8
 80026b2:	6979      	ldr	r1, [r7, #20]
 80026b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	2203      	movs	r2, #3
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	43db      	mvns	r3, r3
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	4013      	ands	r3, r2
 80026ce:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 0203 	and.w	r2, r3, #3
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	697a      	ldr	r2, [r7, #20]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d00b      	beq.n	800270c <HAL_GPIO_Init+0xd8>
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d007      	beq.n	800270c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002700:	2b11      	cmp	r3, #17
 8002702:	d003      	beq.n	800270c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b12      	cmp	r3, #18
 800270a:	d130      	bne.n	800276e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	2203      	movs	r2, #3
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	4013      	ands	r3, r2
 8002722:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	68da      	ldr	r2, [r3, #12]
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	4313      	orrs	r3, r2
 8002734:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002742:	2201      	movs	r2, #1
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	43db      	mvns	r3, r3
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	4013      	ands	r3, r2
 8002750:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	091b      	lsrs	r3, r3, #4
 8002758:	f003 0201 	and.w	r2, r3, #1
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	4313      	orrs	r3, r2
 8002766:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b03      	cmp	r3, #3
 8002774:	d017      	beq.n	80027a6 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	2203      	movs	r2, #3
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43db      	mvns	r3, r3
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	4013      	ands	r3, r2
 800278c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	4313      	orrs	r3, r2
 800279e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d07c      	beq.n	80028ac <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80027b2:	4a47      	ldr	r2, [pc, #284]	@ (80028d0 <HAL_GPIO_Init+0x29c>)
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	089b      	lsrs	r3, r3, #2
 80027b8:	3318      	adds	r3, #24
 80027ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027be:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	f003 0303 	and.w	r3, r3, #3
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	220f      	movs	r2, #15
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43db      	mvns	r3, r3
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	4013      	ands	r3, r2
 80027d4:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	0a9a      	lsrs	r2, r3, #10
 80027da:	4b3e      	ldr	r3, [pc, #248]	@ (80028d4 <HAL_GPIO_Init+0x2a0>)
 80027dc:	4013      	ands	r3, r2
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	f002 0203 	and.w	r2, r2, #3
 80027e4:	00d2      	lsls	r2, r2, #3
 80027e6:	4093      	lsls	r3, r2
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80027ee:	4938      	ldr	r1, [pc, #224]	@ (80028d0 <HAL_GPIO_Init+0x29c>)
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	089b      	lsrs	r3, r3, #2
 80027f4:	3318      	adds	r3, #24
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80027fc:	4b34      	ldr	r3, [pc, #208]	@ (80028d0 <HAL_GPIO_Init+0x29c>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	43db      	mvns	r3, r3
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	4013      	ands	r3, r2
 800280a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	4313      	orrs	r3, r2
 800281e:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002820:	4a2b      	ldr	r2, [pc, #172]	@ (80028d0 <HAL_GPIO_Init+0x29c>)
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002826:	4b2a      	ldr	r3, [pc, #168]	@ (80028d0 <HAL_GPIO_Init+0x29c>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	43db      	mvns	r3, r3
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	4013      	ands	r3, r2
 8002834:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4313      	orrs	r3, r2
 8002848:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800284a:	4a21      	ldr	r2, [pc, #132]	@ (80028d0 <HAL_GPIO_Init+0x29c>)
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002850:	4b1f      	ldr	r3, [pc, #124]	@ (80028d0 <HAL_GPIO_Init+0x29c>)
 8002852:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002856:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	43db      	mvns	r3, r3
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	4013      	ands	r3, r2
 8002860:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	4313      	orrs	r3, r2
 8002874:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002876:	4a16      	ldr	r2, [pc, #88]	@ (80028d0 <HAL_GPIO_Init+0x29c>)
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800287e:	4b14      	ldr	r3, [pc, #80]	@ (80028d0 <HAL_GPIO_Init+0x29c>)
 8002880:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002884:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	43db      	mvns	r3, r3
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	4013      	ands	r3, r2
 800288e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d003      	beq.n	80028a4 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80028a4:	4a0a      	ldr	r2, [pc, #40]	@ (80028d0 <HAL_GPIO_Init+0x29c>)
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	3301      	adds	r3, #1
 80028b0:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	fa22 f303 	lsr.w	r3, r2, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f47f aec1 	bne.w	8002644 <HAL_GPIO_Init+0x10>
  }
}
 80028c2:	bf00      	nop
 80028c4:	bf00      	nop
 80028c6:	371c      	adds	r7, #28
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	44022000 	.word	0x44022000
 80028d4:	002f7f7f 	.word	0x002f7f7f

080028d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	460b      	mov	r3, r1
 80028e2:	807b      	strh	r3, [r7, #2]
 80028e4:	4613      	mov	r3, r2
 80028e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028e8:	787b      	ldrb	r3, [r7, #1]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028ee:	887a      	ldrh	r2, [r7, #2]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028f4:	e002      	b.n	80028fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028f6:	887a      	ldrh	r2, [r7, #2]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	460b      	mov	r3, r1
 8002912:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800291a:	887a      	ldrh	r2, [r7, #2]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4013      	ands	r3, r2
 8002920:	041a      	lsls	r2, r3, #16
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	43d9      	mvns	r1, r3
 8002926:	887b      	ldrh	r3, [r7, #2]
 8002928:	400b      	ands	r3, r1
 800292a:	431a      	orrs	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	619a      	str	r2, [r3, #24]
}
 8002930:	bf00      	nop
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <HAL_HASH_Init>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_Init(HASH_HandleTypeDef *hhash)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t cr_value;

  /* Check the hash handle allocation */
  if (hhash == NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_HASH_Init+0x12>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e02a      	b.n	80029a4 <HAL_HASH_Init+0x68>

    /* Init the low level hardware */
    hhash->MspInitCallback(hhash);
  }
#else
  if (hhash->State == HAL_HASH_STATE_RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d106      	bne.n	8002968 <HAL_HASH_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhash->Lock = HAL_UNLOCKED;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Init the low level hardware */
    HAL_HASH_MspInit(hhash);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7fe fb88 	bl	8001078 <HAL_HASH_MspInit>
  }
#endif /* (USE_HAL_HASH_REGISTER_CALLBACKS) */

  /* Set the key size, data type and Algorithm */
  cr_value = (uint32_t)(hhash->Init.DataType | hhash->Init.Algorithm);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	4313      	orrs	r3, r2
 8002972:	60fb      	str	r3, [r7, #12]
  /* Set the key size, data type, algorithm and mode */
  MODIFY_REG(hhash->Instance->CR, HASH_CR_DATATYPE | HASH_CR_ALGO | HASH_CR_INIT, cr_value);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f423 13f0 	bic.w	r3, r3, #1966080	@ 0x1e0000
 800297e:	f023 0334 	bic.w	r3, r3, #52	@ 0x34
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6812      	ldr	r2, [r2, #0]
 8002986:	68f9      	ldr	r1, [r7, #12]
 8002988:	430b      	orrs	r3, r1
 800298a:	6013      	str	r3, [r2, #0]

  /* Change HASH phase to Ready */
  hhash->Phase = HAL_HASH_PHASE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  /* Change HASH state to Ready */
  hhash->State = HAL_HASH_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Reset error code field */
  hhash->ErrorCode = HAL_HASH_ERROR_NONE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_HASH_SUSPEND_RESUME == 1U)
  /* Reset suspension request flag */
  hhash->SuspendRequest = HAL_HASH_SUSPEND_NONE;
#endif /* (USE_HAL_HASH_SUSPEND_RESUME) */
  /* Return function status */
  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e08d      	b.n	8002ada <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d106      	bne.n	80029d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7fe fb6c 	bl	80010b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2224      	movs	r2, #36	@ 0x24
 80029dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 0201 	bic.w	r2, r2, #1
 80029ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a0c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d107      	bne.n	8002a26 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689a      	ldr	r2, [r3, #8]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a22:	609a      	str	r2, [r3, #8]
 8002a24:	e006      	b.n	8002a34 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689a      	ldr	r2, [r3, #8]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002a32:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d108      	bne.n	8002a4e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a4a:	605a      	str	r2, [r3, #4]
 8002a4c:	e007      	b.n	8002a5e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a5c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6812      	ldr	r2, [r2, #0]
 8002a68:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a70:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68da      	ldr	r2, [r3, #12]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a80:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	691a      	ldr	r2, [r3, #16]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	69d9      	ldr	r1, [r3, #28]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a1a      	ldr	r2, [r3, #32]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0201 	orr.w	r2, r2, #1
 8002aba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b083      	sub	sp, #12
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
 8002aea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b20      	cmp	r3, #32
 8002af6:	d138      	bne.n	8002b6a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d101      	bne.n	8002b06 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b02:	2302      	movs	r3, #2
 8002b04:	e032      	b.n	8002b6c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2224      	movs	r2, #36	@ 0x24
 8002b12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 0201 	bic.w	r2, r2, #1
 8002b24:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b34:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6819      	ldr	r1, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f042 0201 	orr.w	r2, r2, #1
 8002b54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b66:	2300      	movs	r3, #0
 8002b68:	e000      	b.n	8002b6c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b6a:	2302      	movs	r3, #2
  }
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b20      	cmp	r3, #32
 8002b8c:	d139      	bne.n	8002c02 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d101      	bne.n	8002b9c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b98:	2302      	movs	r3, #2
 8002b9a:	e033      	b.n	8002c04 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2224      	movs	r2, #36	@ 0x24
 8002ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 0201 	bic.w	r2, r2, #1
 8002bba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002bca:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	021b      	lsls	r3, r3, #8
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f042 0201 	orr.w	r2, r2, #1
 8002bec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	e000      	b.n	8002c04 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c02:	2302      	movs	r3, #2
  }
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3714      	adds	r7, #20
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	460b      	mov	r3, r1
 8002c1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8002c1c:	230a      	movs	r3, #10
 8002c1e:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8002c20:	e002      	b.n	8002c28 <PCD_GET_EP_RX_CNT+0x18>
  {
    count--;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	3b01      	subs	r3, #1
 8002c26:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f9      	bne.n	8002c22 <PCD_GET_EP_RX_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 8002c2e:	887b      	ldrh	r3, [r7, #2]
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002c36:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	0c1b      	lsrs	r3, r3, #16
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c44:	b29b      	uxth	r3, r3
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3714      	adds	r7, #20
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b085      	sub	sp, #20
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8002c5e:	230a      	movs	r3, #10
 8002c60:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8002c62:	e002      	b.n	8002c6a <PCD_GET_EP_DBUF0_CNT+0x18>
  {
    count--;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1f9      	bne.n	8002c64 <PCD_GET_EP_DBUF0_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 8002c70:	887b      	ldrh	r3, [r7, #2]
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002c78:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	0c1b      	lsrs	r3, r3, #16
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c86:	b29b      	uxth	r3, r3
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3714      	adds	r7, #20
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8002ca0:	230a      	movs	r3, #10
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8002ca4:	e002      	b.n	8002cac <PCD_GET_EP_DBUF1_CNT+0x18>
  {
    count--;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1f9      	bne.n	8002ca6 <PCD_GET_EP_DBUF1_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 8002cb2:	887b      	ldrh	r3, [r7, #2]
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002cba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	0c1b      	lsrs	r3, r3, #16
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cc8:	b29b      	uxth	r3, r3
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b086      	sub	sp, #24
 8002cda:	af02      	add	r7, sp, #8
 8002cdc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e0f3      	b.n	8002ed0 <HAL_PCD_Init+0x1fa>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d106      	bne.n	8002d02 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f7fe fd99 	bl	8001834 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2203      	movs	r2, #3
 8002d06:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f008 ff59 	bl	800bbc6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6818      	ldr	r0, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	7c1a      	ldrb	r2, [r3, #16]
 8002d1c:	f88d 2000 	strb.w	r2, [sp]
 8002d20:	3304      	adds	r3, #4
 8002d22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d24:	f008 ff1d 	bl	800bb62 <USB_CoreInit>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d005      	beq.n	8002d3a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2202      	movs	r2, #2
 8002d32:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e0ca      	b.n	8002ed0 <HAL_PCD_Init+0x1fa>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2100      	movs	r1, #0
 8002d40:	4618      	mov	r0, r3
 8002d42:	f008 ff55 	bl	800bbf0 <USB_SetCurrentMode>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d005      	beq.n	8002d58 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e0bb      	b.n	8002ed0 <HAL_PCD_Init+0x1fa>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d58:	2300      	movs	r3, #0
 8002d5a:	73fb      	strb	r3, [r7, #15]
 8002d5c:	e03f      	b.n	8002dde <HAL_PCD_Init+0x108>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d5e:	7bfa      	ldrb	r2, [r7, #15]
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	4613      	mov	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	4413      	add	r3, r2
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	440b      	add	r3, r1
 8002d6c:	3315      	adds	r3, #21
 8002d6e:	2201      	movs	r2, #1
 8002d70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d72:	7bfa      	ldrb	r2, [r7, #15]
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	4613      	mov	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	440b      	add	r3, r1
 8002d80:	3314      	adds	r3, #20
 8002d82:	7bfa      	ldrb	r2, [r7, #15]
 8002d84:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d86:	7bfa      	ldrb	r2, [r7, #15]
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4413      	add	r3, r2
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	440b      	add	r3, r1
 8002d94:	3317      	adds	r3, #23
 8002d96:	2200      	movs	r2, #0
 8002d98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d9a:	7bfa      	ldrb	r2, [r7, #15]
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	440b      	add	r3, r1
 8002da8:	3324      	adds	r3, #36	@ 0x24
 8002daa:	2200      	movs	r2, #0
 8002dac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002dae:	7bfa      	ldrb	r2, [r7, #15]
 8002db0:	6879      	ldr	r1, [r7, #4]
 8002db2:	4613      	mov	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4413      	add	r3, r2
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	440b      	add	r3, r1
 8002dbc:	3328      	adds	r3, #40	@ 0x28
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002dc2:	7bfb      	ldrb	r3, [r7, #15]
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	1c5a      	adds	r2, r3, #1
 8002dc8:	4613      	mov	r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4413      	add	r3, r2
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	440b      	add	r3, r1
 8002dd2:	3304      	adds	r3, #4
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
 8002dda:	3301      	adds	r3, #1
 8002ddc:	73fb      	strb	r3, [r7, #15]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	791b      	ldrb	r3, [r3, #4]
 8002de2:	7bfa      	ldrb	r2, [r7, #15]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d3ba      	bcc.n	8002d5e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002de8:	2300      	movs	r3, #0
 8002dea:	73fb      	strb	r3, [r7, #15]
 8002dec:	e044      	b.n	8002e78 <HAL_PCD_Init+0x1a2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002dee:	7bfa      	ldrb	r2, [r7, #15]
 8002df0:	6879      	ldr	r1, [r7, #4]
 8002df2:	4613      	mov	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4413      	add	r3, r2
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	440b      	add	r3, r1
 8002dfc:	f203 1355 	addw	r3, r3, #341	@ 0x155
 8002e00:	2200      	movs	r2, #0
 8002e02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e04:	7bfa      	ldrb	r2, [r7, #15]
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	440b      	add	r3, r1
 8002e12:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8002e16:	7bfa      	ldrb	r2, [r7, #15]
 8002e18:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e1a:	7bfa      	ldrb	r2, [r7, #15]
 8002e1c:	6879      	ldr	r1, [r7, #4]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4413      	add	r3, r2
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	440b      	add	r3, r1
 8002e28:	f203 1357 	addw	r3, r3, #343	@ 0x157
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e30:	7bfa      	ldrb	r2, [r7, #15]
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	4613      	mov	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	440b      	add	r3, r1
 8002e3e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002e42:	2200      	movs	r2, #0
 8002e44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e46:	7bfa      	ldrb	r2, [r7, #15]
 8002e48:	6879      	ldr	r1, [r7, #4]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4413      	add	r3, r2
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	440b      	add	r3, r1
 8002e54:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e5c:	7bfa      	ldrb	r2, [r7, #15]
 8002e5e:	6879      	ldr	r1, [r7, #4]
 8002e60:	4613      	mov	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	440b      	add	r3, r1
 8002e6a:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e72:	7bfb      	ldrb	r3, [r7, #15]
 8002e74:	3301      	adds	r3, #1
 8002e76:	73fb      	strb	r3, [r7, #15]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	791b      	ldrb	r3, [r3, #4]
 8002e7c:	7bfa      	ldrb	r2, [r7, #15]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d3b5      	bcc.n	8002dee <HAL_PCD_Init+0x118>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6818      	ldr	r0, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	7c1a      	ldrb	r2, [r3, #16]
 8002e8a:	f88d 2000 	strb.w	r2, [sp]
 8002e8e:	3304      	adds	r3, #4
 8002e90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e92:	f008 fed0 	bl	800bc36 <USB_DevInit>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d005      	beq.n	8002ea8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e013      	b.n	8002ed0 <HAL_PCD_Init+0x1fa>
  }

  hpcd->USB_Address = 0U;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	7b1b      	ldrb	r3, [r3, #12]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d102      	bne.n	8002ec4 <HAL_PCD_Init+0x1ee>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f001 fb6b 	bl	800459a <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f00a fd29 	bl	800d920 <USB_DevDisconnect>

  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d101      	bne.n	8002eee <HAL_PCD_Start+0x16>
 8002eea:	2302      	movs	r3, #2
 8002eec:	e012      	b.n	8002f14 <HAL_PCD_Start+0x3c>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f008 fe4f 	bl	800bb9e <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f00a fcfa 	bl	800d8fe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f00a fd0a 	bl	800d942 <USB_ReadInterrupts>
 8002f2e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 faf2 	bl	8003524 <PCD_EP_ISR_Handler>

    return;
 8002f40:	e0de      	b.n	8003100 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d010      	beq.n	8002f6e <HAL_PCD_IRQHandler+0x52>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	f64f 33ff 	movw	r3, #64511	@ 0xfbff
 8002f5a:	400b      	ands	r3, r1
 8002f5c:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f00b fcd9 	bl	800e916 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002f64:	2100      	movs	r1, #0
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f8e1 	bl	800312e <HAL_PCD_SetAddress>

    return;
 8002f6c:	e0c8      	b.n	8003100 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d009      	beq.n	8002f8c <HAL_PCD_IRQHandler+0x70>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	f64b 73ff 	movw	r3, #49151	@ 0xbfff
 8002f86:	400b      	ands	r3, r1
 8002f88:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8002f8a:	e0b9      	b.n	8003100 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d009      	beq.n	8002faa <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	f64d 73ff 	movw	r3, #57343	@ 0xdfff
 8002fa4:	400b      	ands	r3, r1
 8002fa6:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8002fa8:	e0aa      	b.n	8003100 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d029      	beq.n	8003008 <HAL_PCD_IRQHandler+0xec>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 0204 	bic.w	r2, r2, #4
 8002fc2:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 0208 	bic.w	r2, r2, #8
 8002fd2:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d107      	bne.n	8002fee <HAL_PCD_IRQHandler+0xd2>
    {
      hpcd->LPM_State = LPM_L0;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f001 faf8 	bl	80045de <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f893 	bl	800311a <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8003002:	400b      	ands	r3, r1
 8003004:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8003006:	e07b      	b.n	8003100 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800300e:	2b00      	cmp	r3, #0
 8003010:	d01c      	beq.n	800304c <HAL_PCD_IRQHandler+0x130>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f042 0208 	orr.w	r2, r2, #8
 8003020:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	f24f 73ff 	movw	r3, #63487	@ 0xf7ff
 8003030:	400b      	ands	r3, r1
 8003032:	6453      	str	r3, [r2, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 0204 	orr.w	r2, r2, #4
 8003042:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 f85e 	bl	8003106 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800304a:	e059      	b.n	8003100 <HAL_PCD_IRQHandler+0x1e4>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003052:	2b00      	cmp	r3, #0
 8003054:	d033      	beq.n	80030be <HAL_PCD_IRQHandler+0x1a2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 8003064:	400b      	ands	r3, r1
 8003066:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 800306e:	2b00      	cmp	r3, #0
 8003070:	d121      	bne.n	80030b6 <HAL_PCD_IRQHandler+0x19a>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f042 0204 	orr.w	r2, r2, #4
 8003080:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f042 0208 	orr.w	r2, r2, #8
 8003090:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030a0:	089b      	lsrs	r3, r3, #2
 80030a2:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80030ac:	2101      	movs	r1, #1
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f001 fa95 	bl	80045de <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80030b4:	e024      	b.n	8003100 <HAL_PCD_IRQHandler+0x1e4>
      HAL_PCD_SuspendCallback(hpcd);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f825 	bl	8003106 <HAL_PCD_SuspendCallback>
    return;
 80030bc:	e020      	b.n	8003100 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00c      	beq.n	80030e2 <HAL_PCD_IRQHandler+0x1c6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	f64f 53ff 	movw	r3, #65023	@ 0xfdff
 80030d6:	400b      	ands	r3, r1
 80030d8:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f00b fc0d 	bl	800e8fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80030e0:	e00e      	b.n	8003100 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d009      	beq.n	8003100 <HAL_PCD_IRQHandler+0x1e4>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80030fa:	400b      	ands	r3, r1
 80030fc:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 80030fe:	bf00      	nop
  }
}
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8003106:	b480      	push	{r7}
 8003108:	b083      	sub	sp, #12
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr

0800311a <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800311a:	b480      	push	{r7}
 800311c:	b083      	sub	sp, #12
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr

0800312e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b082      	sub	sp, #8
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
 8003136:	460b      	mov	r3, r1
 8003138:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8003140:	2b01      	cmp	r3, #1
 8003142:	d101      	bne.n	8003148 <HAL_PCD_SetAddress+0x1a>
 8003144:	2302      	movs	r3, #2
 8003146:	e012      	b.n	800316e <HAL_PCD_SetAddress+0x40>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  hpcd->USB_Address = address;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	78fa      	ldrb	r2, [r7, #3]
 8003154:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	78fa      	ldrb	r2, [r7, #3]
 800315c:	4611      	mov	r1, r2
 800315e:	4618      	mov	r0, r3
 8003160:	f00a fbba 	bl	800d8d8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b084      	sub	sp, #16
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
 800317e:	4608      	mov	r0, r1
 8003180:	4611      	mov	r1, r2
 8003182:	461a      	mov	r2, r3
 8003184:	4603      	mov	r3, r0
 8003186:	70fb      	strb	r3, [r7, #3]
 8003188:	460b      	mov	r3, r1
 800318a:	803b      	strh	r3, [r7, #0]
 800318c:	4613      	mov	r3, r2
 800318e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003190:	2300      	movs	r3, #0
 8003192:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003194:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003198:	2b00      	cmp	r3, #0
 800319a:	da0f      	bge.n	80031bc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800319c:	78fb      	ldrb	r3, [r7, #3]
 800319e:	f003 0207 	and.w	r2, r3, #7
 80031a2:	4613      	mov	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	4413      	add	r3, r2
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	3310      	adds	r3, #16
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	4413      	add	r3, r2
 80031b0:	3304      	adds	r3, #4
 80031b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2201      	movs	r2, #1
 80031b8:	705a      	strb	r2, [r3, #1]
 80031ba:	e00f      	b.n	80031dc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031bc:	78fb      	ldrb	r3, [r7, #3]
 80031be:	f003 0207 	and.w	r2, r3, #7
 80031c2:	4613      	mov	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4413      	add	r3, r2
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	4413      	add	r3, r2
 80031d2:	3304      	adds	r3, #4
 80031d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80031dc:	78fb      	ldrb	r3, [r7, #3]
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	b2da      	uxtb	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80031e8:	883b      	ldrh	r3, [r7, #0]
 80031ea:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	78ba      	ldrb	r2, [r7, #2]
 80031f6:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80031f8:	78bb      	ldrb	r3, [r7, #2]
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d102      	bne.n	8003204 <HAL_PCD_EP_Open+0x8e>
  {
    ep->data_pid_start = 0U;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 800320a:	2b01      	cmp	r3, #1
 800320c:	d101      	bne.n	8003212 <HAL_PCD_EP_Open+0x9c>
 800320e:	2302      	movs	r3, #2
 8003210:	e00e      	b.n	8003230 <HAL_PCD_EP_Open+0xba>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68f9      	ldr	r1, [r7, #12]
 8003220:	4618      	mov	r0, r3
 8003222:	f008 fd2b 	bl	800bc7c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return ret;
 800322e:	7afb      	ldrb	r3, [r7, #11]
}
 8003230:	4618      	mov	r0, r3
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	460b      	mov	r3, r1
 8003242:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003244:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003248:	2b00      	cmp	r3, #0
 800324a:	da0f      	bge.n	800326c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800324c:	78fb      	ldrb	r3, [r7, #3]
 800324e:	f003 0207 	and.w	r2, r3, #7
 8003252:	4613      	mov	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4413      	add	r3, r2
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	3310      	adds	r3, #16
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	4413      	add	r3, r2
 8003260:	3304      	adds	r3, #4
 8003262:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2201      	movs	r2, #1
 8003268:	705a      	strb	r2, [r3, #1]
 800326a:	e00f      	b.n	800328c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800326c:	78fb      	ldrb	r3, [r7, #3]
 800326e:	f003 0207 	and.w	r2, r3, #7
 8003272:	4613      	mov	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4413      	add	r3, r2
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	4413      	add	r3, r2
 8003282:	3304      	adds	r3, #4
 8003284:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800328c:	78fb      	ldrb	r3, [r7, #3]
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	b2da      	uxtb	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d101      	bne.n	80032a6 <HAL_PCD_EP_Close+0x6e>
 80032a2:	2302      	movs	r3, #2
 80032a4:	e00e      	b.n	80032c4 <HAL_PCD_EP_Close+0x8c>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68f9      	ldr	r1, [r7, #12]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f009 f841 	bl	800c33c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	607a      	str	r2, [r7, #4]
 80032d6:	603b      	str	r3, [r7, #0]
 80032d8:	460b      	mov	r3, r1
 80032da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032dc:	7afb      	ldrb	r3, [r7, #11]
 80032de:	f003 0207 	and.w	r2, r3, #7
 80032e2:	4613      	mov	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	4413      	add	r3, r2
 80032f2:	3304      	adds	r3, #4
 80032f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	2200      	movs	r2, #0
 8003306:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	2200      	movs	r2, #0
 800330c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800330e:	7afb      	ldrb	r3, [r7, #11]
 8003310:	f003 0307 	and.w	r3, r3, #7
 8003314:	b2da      	uxtb	r2, r3
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6979      	ldr	r1, [r7, #20]
 8003320:	4618      	mov	r0, r3
 8003322:	f009 f995 	bl	800c650 <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3718      	adds	r7, #24
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	460b      	mov	r3, r1
 800333a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800333c:	78fb      	ldrb	r3, [r7, #3]
 800333e:	f003 0207 	and.w	r2, r3, #7
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	4613      	mov	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	440b      	add	r3, r1
 800334e:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8003352:	681b      	ldr	r3, [r3, #0]
}
 8003354:	4618      	mov	r0, r3
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	607a      	str	r2, [r7, #4]
 800336a:	603b      	str	r3, [r7, #0]
 800336c:	460b      	mov	r3, r1
 800336e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003370:	7afb      	ldrb	r3, [r7, #11]
 8003372:	f003 0207 	and.w	r2, r3, #7
 8003376:	4613      	mov	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4413      	add	r3, r2
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	3310      	adds	r3, #16
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	4413      	add	r3, r2
 8003384:	3304      	adds	r3, #4
 8003386:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	619a      	str	r2, [r3, #24]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	621a      	str	r2, [r3, #32]
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	2200      	movs	r2, #0
 80033a6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	2201      	movs	r2, #1
 80033ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033ae:	7afb      	ldrb	r3, [r7, #11]
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6979      	ldr	r1, [r7, #20]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f009 f945 	bl	800c650 <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3718      	adds	r7, #24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	460b      	mov	r3, r1
 80033da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80033dc:	78fb      	ldrb	r3, [r7, #3]
 80033de:	f003 0307 	and.w	r3, r3, #7
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	7912      	ldrb	r2, [r2, #4]
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d901      	bls.n	80033ee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e040      	b.n	8003470 <HAL_PCD_EP_SetStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	da0f      	bge.n	8003416 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033f6:	78fb      	ldrb	r3, [r7, #3]
 80033f8:	f003 0207 	and.w	r2, r3, #7
 80033fc:	4613      	mov	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4413      	add	r3, r2
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	3310      	adds	r3, #16
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	4413      	add	r3, r2
 800340a:	3304      	adds	r3, #4
 800340c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2201      	movs	r2, #1
 8003412:	705a      	strb	r2, [r3, #1]
 8003414:	e00d      	b.n	8003432 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003416:	78fa      	ldrb	r2, [r7, #3]
 8003418:	4613      	mov	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	4413      	add	r3, r2
 8003428:	3304      	adds	r3, #4
 800342a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2201      	movs	r2, #1
 8003436:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003438:	78fb      	ldrb	r3, [r7, #3]
 800343a:	f003 0307 	and.w	r3, r3, #7
 800343e:	b2da      	uxtb	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 800344a:	2b01      	cmp	r3, #1
 800344c:	d101      	bne.n	8003452 <HAL_PCD_EP_SetStall+0x82>
 800344e:	2302      	movs	r3, #2
 8003450:	e00e      	b.n	8003470 <HAL_PCD_EP_SetStall+0xa0>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68f9      	ldr	r1, [r7, #12]
 8003460:	4618      	mov	r0, r3
 8003462:	f00a f95f 	bl	800d724 <USB_EPSetStall>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	460b      	mov	r3, r1
 8003482:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003484:	78fb      	ldrb	r3, [r7, #3]
 8003486:	f003 030f 	and.w	r3, r3, #15
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	7912      	ldrb	r2, [r2, #4]
 800348e:	4293      	cmp	r3, r2
 8003490:	d901      	bls.n	8003496 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e042      	b.n	800351c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003496:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800349a:	2b00      	cmp	r3, #0
 800349c:	da0f      	bge.n	80034be <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800349e:	78fb      	ldrb	r3, [r7, #3]
 80034a0:	f003 0207 	and.w	r2, r3, #7
 80034a4:	4613      	mov	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4413      	add	r3, r2
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	3310      	adds	r3, #16
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	4413      	add	r3, r2
 80034b2:	3304      	adds	r3, #4
 80034b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2201      	movs	r2, #1
 80034ba:	705a      	strb	r2, [r3, #1]
 80034bc:	e00f      	b.n	80034de <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034be:	78fb      	ldrb	r3, [r7, #3]
 80034c0:	f003 0207 	and.w	r2, r3, #7
 80034c4:	4613      	mov	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	4413      	add	r3, r2
 80034d4:	3304      	adds	r3, #4
 80034d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034e4:	78fb      	ldrb	r3, [r7, #3]
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d101      	bne.n	80034fe <HAL_PCD_EP_ClrStall+0x86>
 80034fa:	2302      	movs	r3, #2
 80034fc:	e00e      	b.n	800351c <HAL_PCD_EP_ClrStall+0xa4>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68f9      	ldr	r1, [r7, #12]
 800350c:	4618      	mov	r0, r3
 800350e:	f00a f94f 	bl	800d7b0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b08e      	sub	sp, #56	@ 0x38
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800352c:	e326      	b.n	8003b7c <PCD_EP_ISR_Handler+0x658>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003534:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 8003536:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003538:	b2db      	uxtb	r3, r3
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    if (epindex == 0U)
 8003542:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003546:	2b00      	cmp	r3, #0
 8003548:	f040 8124 	bne.w	8003794 <PCD_EP_ISR_Handler+0x270>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800354c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800354e:	f003 0310 	and.w	r3, r3, #16
 8003552:	2b00      	cmp	r3, #0
 8003554:	d13e      	bne.n	80035d4 <PCD_EP_ISR_Handler+0xb0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	4b89      	ldr	r3, [pc, #548]	@ (8003784 <PCD_EP_ISR_Handler+0x260>)
 800355e:	4013      	ands	r3, r2
 8003560:	60bb      	str	r3, [r7, #8]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800356c:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	3314      	adds	r3, #20
 8003572:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800357e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	0c1b      	lsrs	r3, r3, #16
 8003586:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800358a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800358c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800358e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003590:	695a      	ldr	r2, [r3, #20]
 8003592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	441a      	add	r2, r3
 8003598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800359a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800359c:	2100      	movs	r1, #0
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f00b f991 	bl	800e8c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	7c5b      	ldrb	r3, [r3, #17]
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f000 82e6 	beq.w	8003b7c <PCD_EP_ISR_Handler+0x658>
 80035b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f040 82e1 	bne.w	8003b7c <PCD_EP_ISR_Handler+0x658>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	7c5b      	ldrb	r3, [r3, #17]
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	745a      	strb	r2, [r3, #17]
 80035d2:	e2d3      	b.n	8003b7c <PCD_EP_ISR_Handler+0x658>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80035da:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	867b      	strh	r3, [r7, #50]	@ 0x32

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80035e4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80035e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d027      	beq.n	800363e <PCD_EP_ISR_Handler+0x11a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	4619      	mov	r1, r3
 80035f8:	4610      	mov	r0, r2
 80035fa:	f7ff fb09 	bl	8002c10 <PCD_GET_EP_RX_CNT>
 80035fe:	4603      	mov	r3, r0
 8003600:	461a      	mov	r2, r3
 8003602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003604:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6818      	ldr	r0, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 8003610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003612:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003616:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003618:	b29b      	uxth	r3, r3
 800361a:	f00a fa01 	bl	800da20 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	4b58      	ldr	r3, [pc, #352]	@ (8003788 <PCD_EP_ISR_Handler+0x264>)
 8003626:	4013      	ands	r3, r2
 8003628:	60fb      	str	r3, [r7, #12]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003634:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f00b f918 	bl	800e86c <HAL_PCD_SetupStageCallback>
 800363c:	e29e      	b.n	8003b7c <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 800363e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8003642:	2b00      	cmp	r3, #0
 8003644:	f280 829a 	bge.w	8003b7c <PCD_EP_ISR_Handler+0x658>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	4b4e      	ldr	r3, [pc, #312]	@ (8003788 <PCD_EP_ISR_Handler+0x264>)
 8003650:	4013      	ands	r3, r2
 8003652:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800365a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800365e:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	4619      	mov	r1, r3
 800366a:	4610      	mov	r0, r2
 800366c:	f7ff fad0 	bl	8002c10 <PCD_GET_EP_RX_CNT>
 8003670:	4603      	mov	r3, r0
 8003672:	461a      	mov	r2, r3
 8003674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003676:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800367a:	69db      	ldr	r3, [r3, #28]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d019      	beq.n	80036b4 <PCD_EP_ISR_Handler+0x190>
 8003680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d015      	beq.n	80036b4 <PCD_EP_ISR_Handler+0x190>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6818      	ldr	r0, [r3, #0]
 800368c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800368e:	6959      	ldr	r1, [r3, #20]
 8003690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003692:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003696:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003698:	b29b      	uxth	r3, r3
 800369a:	f00a f9c1 	bl	800da20 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800369e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036a0:	695a      	ldr	r2, [r3, #20]
 80036a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	441a      	add	r2, r3
 80036a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036aa:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80036ac:	2100      	movs	r1, #0
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f00b f8ee 	bl	800e890 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	867b      	strh	r3, [r7, #50]	@ 0x32

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80036bc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80036be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f040 825a 	bne.w	8003b7c <PCD_EP_ISR_Handler+0x658>
 80036c8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80036ca:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80036ce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80036d2:	f000 8253 	beq.w	8003b7c <PCD_EP_ISR_Handler+0x658>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80036d6:	4b2d      	ldr	r3, [pc, #180]	@ (800378c <PCD_EP_ISR_Handler+0x268>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	4a2c      	ldr	r2, [pc, #176]	@ (800378c <PCD_EP_ISR_Handler+0x268>)
 80036dc:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 80036e0:	6053      	str	r3, [r2, #4]
 80036e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d106      	bne.n	80036f8 <PCD_EP_ISR_Handler+0x1d4>
 80036ea:	4b28      	ldr	r3, [pc, #160]	@ (800378c <PCD_EP_ISR_Handler+0x268>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	4a27      	ldr	r2, [pc, #156]	@ (800378c <PCD_EP_ISR_Handler+0x268>)
 80036f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80036f4:	6053      	str	r3, [r2, #4]
 80036f6:	e02e      	b.n	8003756 <PCD_EP_ISR_Handler+0x232>
 80036f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	2b3e      	cmp	r3, #62	@ 0x3e
 80036fe:	d814      	bhi.n	800372a <PCD_EP_ISR_Handler+0x206>
 8003700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	085b      	lsrs	r3, r3, #1
 8003706:	617b      	str	r3, [r7, #20]
 8003708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	2b00      	cmp	r3, #0
 8003712:	d002      	beq.n	800371a <PCD_EP_ISR_Handler+0x1f6>
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	3301      	adds	r3, #1
 8003718:	617b      	str	r3, [r7, #20]
 800371a:	4b1c      	ldr	r3, [pc, #112]	@ (800378c <PCD_EP_ISR_Handler+0x268>)
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	069b      	lsls	r3, r3, #26
 8003722:	491a      	ldr	r1, [pc, #104]	@ (800378c <PCD_EP_ISR_Handler+0x268>)
 8003724:	4313      	orrs	r3, r2
 8003726:	604b      	str	r3, [r1, #4]
 8003728:	e015      	b.n	8003756 <PCD_EP_ISR_Handler+0x232>
 800372a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	095b      	lsrs	r3, r3, #5
 8003730:	617b      	str	r3, [r7, #20]
 8003732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	f003 031f 	and.w	r3, r3, #31
 800373a:	2b00      	cmp	r3, #0
 800373c:	d102      	bne.n	8003744 <PCD_EP_ISR_Handler+0x220>
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	3b01      	subs	r3, #1
 8003742:	617b      	str	r3, [r7, #20]
 8003744:	4b11      	ldr	r3, [pc, #68]	@ (800378c <PCD_EP_ISR_Handler+0x268>)
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	069b      	lsls	r3, r3, #26
 800374c:	4313      	orrs	r3, r2
 800374e:	4a0f      	ldr	r2, [pc, #60]	@ (800378c <PCD_EP_ISR_Handler+0x268>)
 8003750:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003754:	6053      	str	r3, [r2, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	4b0c      	ldr	r3, [pc, #48]	@ (8003790 <PCD_EP_ISR_Handler+0x26c>)
 800375e:	4013      	ands	r3, r2
 8003760:	613b      	str	r3, [r7, #16]
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003768:	613b      	str	r3, [r7, #16]
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003770:	613b      	str	r3, [r7, #16]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800377c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003780:	6013      	str	r3, [r2, #0]
 8003782:	e1fb      	b.n	8003b7c <PCD_EP_ISR_Handler+0x658>
 8003784:	07ff8f0f 	.word	0x07ff8f0f
 8003788:	07ff0f8f 	.word	0x07ff0f8f
 800378c:	40016400 	.word	0x40016400
 8003790:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	461a      	mov	r2, r3
 800379a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4413      	add	r3, r2
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	867b      	strh	r3, [r7, #50]	@ 0x32

      if ((wEPVal & USB_EP_VTRX) != 0U)
 80037a6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f280 80bd 	bge.w	800392a <PCD_EP_ISR_Handler+0x406>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	461a      	mov	r2, r3
 80037b6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	4413      	add	r3, r2
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	4b9e      	ldr	r3, [pc, #632]	@ (8003a3c <PCD_EP_ISR_Handler+0x518>)
 80037c2:	4013      	ands	r3, r2
 80037c4:	61fb      	str	r3, [r7, #28]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	461a      	mov	r2, r3
 80037cc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	4413      	add	r3, r2
 80037d4:	69fa      	ldr	r2, [r7, #28]
 80037d6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80037da:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80037dc:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80037e0:	4613      	mov	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4413      	add	r3, r2
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	4413      	add	r3, r2
 80037f0:	3304      	adds	r3, #4
 80037f2:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80037f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037f6:	7b1b      	ldrb	r3, [r3, #12]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d116      	bne.n	800382a <PCD_EP_ISR_Handler+0x306>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	4619      	mov	r1, r3
 8003806:	4610      	mov	r0, r2
 8003808:	f7ff fa02 	bl	8002c10 <PCD_GET_EP_RX_CNT>
 800380c:	4603      	mov	r3, r0
 800380e:	84bb      	strh	r3, [r7, #36]	@ 0x24

          if (count != 0U)
 8003810:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003812:	2b00      	cmp	r3, #0
 8003814:	d067      	beq.n	80038e6 <PCD_EP_ISR_Handler+0x3c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6818      	ldr	r0, [r3, #0]
 800381a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800381c:	6959      	ldr	r1, [r3, #20]
 800381e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003820:	88da      	ldrh	r2, [r3, #6]
 8003822:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003824:	f00a f8fc 	bl	800da20 <USB_ReadPMA>
 8003828:	e05d      	b.n	80038e6 <PCD_EP_ISR_Handler+0x3c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800382a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800382c:	78db      	ldrb	r3, [r3, #3]
 800382e:	2b02      	cmp	r3, #2
 8003830:	d108      	bne.n	8003844 <PCD_EP_ISR_Handler+0x320>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003832:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003834:	461a      	mov	r2, r3
 8003836:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 f9ad 	bl	8003b98 <HAL_PCD_EP_DB_Receive>
 800383e:	4603      	mov	r3, r0
 8003840:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8003842:	e050      	b.n	80038e6 <PCD_EP_ISR_Handler+0x3c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	461a      	mov	r2, r3
 800384a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4413      	add	r3, r2
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	4b7a      	ldr	r3, [pc, #488]	@ (8003a40 <PCD_EP_ISR_Handler+0x51c>)
 8003856:	4013      	ands	r3, r2
 8003858:	61bb      	str	r3, [r7, #24]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	461a      	mov	r2, r3
 8003860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	441a      	add	r2, r3
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800386e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003872:	6013      	str	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	461a      	mov	r2, r3
 800387a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4413      	add	r3, r2
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d016      	beq.n	80038ba <PCD_EP_ISR_Handler+0x396>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	4619      	mov	r1, r3
 8003896:	4610      	mov	r0, r2
 8003898:	f7ff f9db 	bl	8002c52 <PCD_GET_EP_DBUF0_CNT>
 800389c:	4603      	mov	r3, r0
 800389e:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 80038a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d01f      	beq.n	80038e6 <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6818      	ldr	r0, [r3, #0]
 80038aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038ac:	6959      	ldr	r1, [r3, #20]
 80038ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038b0:	891a      	ldrh	r2, [r3, #8]
 80038b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80038b4:	f00a f8b4 	bl	800da20 <USB_ReadPMA>
 80038b8:	e015      	b.n	80038e6 <PCD_EP_ISR_Handler+0x3c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	4619      	mov	r1, r3
 80038c4:	4610      	mov	r0, r2
 80038c6:	f7ff f9e5 	bl	8002c94 <PCD_GET_EP_DBUF1_CNT>
 80038ca:	4603      	mov	r3, r0
 80038cc:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 80038ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d008      	beq.n	80038e6 <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6818      	ldr	r0, [r3, #0]
 80038d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038da:	6959      	ldr	r1, [r3, #20]
 80038dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038de:	895a      	ldrh	r2, [r3, #10]
 80038e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80038e2:	f00a f89d 	bl	800da20 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80038e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038e8:	69da      	ldr	r2, [r3, #28]
 80038ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80038ec:	441a      	add	r2, r3
 80038ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038f0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80038f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038f4:	695a      	ldr	r2, [r3, #20]
 80038f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80038f8:	441a      	add	r2, r3
 80038fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038fc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80038fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d004      	beq.n	8003910 <PCD_EP_ISR_Handler+0x3ec>
 8003906:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	429a      	cmp	r2, r3
 800390e:	d206      	bcs.n	800391e <PCD_EP_ISR_Handler+0x3fa>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	4619      	mov	r1, r3
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f00a ffba 	bl	800e890 <HAL_PCD_DataOutStageCallback>
 800391c:	e005      	b.n	800392a <PCD_EP_ISR_Handler+0x406>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003924:	4618      	mov	r0, r3
 8003926:	f008 fe93 	bl	800c650 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 800392a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800392c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 8123 	beq.w	8003b7c <PCD_EP_ISR_Handler+0x658>
      {
        ep = &hpcd->IN_ep[epindex];
 8003936:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800393a:	4613      	mov	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	4413      	add	r3, r2
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	3310      	adds	r3, #16
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	4413      	add	r3, r2
 8003948:	3304      	adds	r3, #4
 800394a:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	461a      	mov	r2, r3
 8003952:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4413      	add	r3, r2
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	4b39      	ldr	r3, [pc, #228]	@ (8003a44 <PCD_EP_ISR_Handler+0x520>)
 800395e:	4013      	ands	r3, r2
 8003960:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	461a      	mov	r2, r3
 8003968:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4413      	add	r3, r2
 8003970:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003972:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003976:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800397a:	78db      	ldrb	r3, [r3, #3]
 800397c:	2b01      	cmp	r3, #1
 800397e:	f040 80b8 	bne.w	8003af2 <PCD_EP_ISR_Handler+0x5ce>
        {
          ep->xfer_len = 0U;
 8003982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003984:	2200      	movs	r2, #0
 8003986:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800398a:	7b1b      	ldrb	r3, [r3, #12]
 800398c:	2b00      	cmp	r3, #0
 800398e:	f000 80a9 	beq.w	8003ae4 <PCD_EP_ISR_Handler+0x5c0>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003992:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003998:	2b00      	cmp	r3, #0
 800399a:	d055      	beq.n	8003a48 <PCD_EP_ISR_Handler+0x524>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800399c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800399e:	785b      	ldrb	r3, [r3, #1]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d124      	bne.n	80039ee <PCD_EP_ISR_Handler+0x4ca>
 80039a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80039ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80039be:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80039c2:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80039d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80039e2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80039e6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	e07a      	b.n	8003ae4 <PCD_EP_ISR_Handler+0x5c0>
 80039ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039f0:	785b      	ldrb	r3, [r3, #1]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d176      	bne.n	8003ae4 <PCD_EP_ISR_Handler+0x5c0>
 80039f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a00:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a10:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003a14:	b292      	uxth	r2, r2
 8003a16:	601a      	str	r2, [r3, #0]
 8003a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003a22:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003a26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a30:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003a34:	6812      	ldr	r2, [r2, #0]
 8003a36:	601a      	str	r2, [r3, #0]
 8003a38:	e054      	b.n	8003ae4 <PCD_EP_ISR_Handler+0x5c0>
 8003a3a:	bf00      	nop
 8003a3c:	07ff0f8f 	.word	0x07ff0f8f
 8003a40:	07ff8f8f 	.word	0x07ff8f8f
 8003a44:	07ff8f0f 	.word	0x07ff8f0f
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a4a:	785b      	ldrb	r3, [r3, #1]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d124      	bne.n	8003a9a <PCD_EP_ISR_Handler+0x576>
 8003a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a5a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a6a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003a6e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003a72:	605a      	str	r2, [r3, #4]
 8003a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a7e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a8e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003a92:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003a96:	605a      	str	r2, [r3, #4]
 8003a98:	e024      	b.n	8003ae4 <PCD_EP_ISR_Handler+0x5c0>
 8003a9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a9c:	785b      	ldrb	r3, [r3, #1]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d120      	bne.n	8003ae4 <PCD_EP_ISR_Handler+0x5c0>
 8003aa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003aac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003ab0:	685a      	ldr	r2, [r3, #4]
 8003ab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003abc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003ac0:	b292      	uxth	r2, r2
 8003ac2:	605a      	str	r2, [r3, #4]
 8003ac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003ace:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003ad2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003adc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003ae0:	6852      	ldr	r2, [r2, #4]
 8003ae2:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	4619      	mov	r1, r3
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f00a feeb 	bl	800e8c6 <HAL_PCD_DataInStageCallback>
 8003af0:	e044      	b.n	8003b7c <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003af2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003af4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d139      	bne.n	8003b70 <PCD_EP_ISR_Handler+0x64c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b06:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	0c1b      	lsrs	r3, r3, #16
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b14:	84fb      	strh	r3, [r7, #38]	@ 0x26

            if (ep->xfer_len > TxPctSize)
 8003b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b18:	699a      	ldr	r2, [r3, #24]
 8003b1a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d906      	bls.n	8003b2e <PCD_EP_ISR_Handler+0x60a>
            {
              ep->xfer_len -= TxPctSize;
 8003b20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b22:	699a      	ldr	r2, [r3, #24]
 8003b24:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003b26:	1ad2      	subs	r2, r2, r3
 8003b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b2a:	619a      	str	r2, [r3, #24]
 8003b2c:	e002      	b.n	8003b34 <PCD_EP_ISR_Handler+0x610>
            }
            else
            {
              ep->xfer_len = 0U;
 8003b2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b30:	2200      	movs	r2, #0
 8003b32:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d106      	bne.n	8003b4a <PCD_EP_ISR_Handler+0x626>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	4619      	mov	r1, r3
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f00a febf 	bl	800e8c6 <HAL_PCD_DataInStageCallback>
 8003b48:	e018      	b.n	8003b7c <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003b4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b4c:	695a      	ldr	r2, [r3, #20]
 8003b4e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003b50:	441a      	add	r2, r3
 8003b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b54:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b58:	69da      	ldr	r2, [r3, #28]
 8003b5a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003b5c:	441a      	add	r2, r3
 8003b5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b60:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f008 fd71 	bl	800c650 <USB_EPStartXfer>
 8003b6e:	e005      	b.n	8003b7c <PCD_EP_ISR_Handler+0x658>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003b70:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003b72:	461a      	mov	r2, r3
 8003b74:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f8e8 	bl	8003d4c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f47f acd1 	bne.w	800352e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3738      	adds	r7, #56	@ 0x38
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop

08003b98 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b08a      	sub	sp, #40	@ 0x28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003ba6:	88fb      	ldrh	r3, [r7, #6]
 8003ba8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d062      	beq.n	8003c76 <HAL_PCD_EP_DB_Receive+0xde>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	4619      	mov	r1, r3
 8003bba:	4610      	mov	r0, r2
 8003bbc:	f7ff f849 	bl	8002c52 <PCD_GET_EP_DBUF0_CNT>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	699a      	ldr	r2, [r3, #24]
 8003bc8:	8bfb      	ldrh	r3, [r7, #30]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d306      	bcc.n	8003bdc <HAL_PCD_EP_DB_Receive+0x44>
    {
      ep->xfer_len -= count;
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	699a      	ldr	r2, [r3, #24]
 8003bd2:	8bfb      	ldrh	r3, [r7, #30]
 8003bd4:	1ad2      	subs	r2, r2, r3
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	619a      	str	r2, [r3, #24]
 8003bda:	e002      	b.n	8003be2 <HAL_PCD_EP_DB_Receive+0x4a>
    }
    else
    {
      ep->xfer_len = 0U;
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	2200      	movs	r2, #0
 8003be0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d11b      	bne.n	8003c22 <HAL_PCD_EP_DB_Receive+0x8a>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	4413      	add	r3, r2
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	4b52      	ldr	r3, [pc, #328]	@ (8003d44 <HAL_PCD_EP_DB_Receive+0x1ac>)
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	61bb      	str	r3, [r7, #24]
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003c06:	61bb      	str	r3, [r7, #24]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	441a      	add	r2, r3
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c20:	6013      	str	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c22:	88fb      	ldrh	r3, [r7, #6]
 8003c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d017      	beq.n	8003c5c <HAL_PCD_EP_DB_Receive+0xc4>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	461a      	mov	r2, r3
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4413      	add	r3, r2
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	4b42      	ldr	r3, [pc, #264]	@ (8003d48 <HAL_PCD_EP_DB_Receive+0x1b0>)
 8003c3e:	4013      	ands	r3, r2
 8003c40:	617b      	str	r3, [r7, #20]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	461a      	mov	r2, r3
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	441a      	add	r2, r3
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c56:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003c5a:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 8003c5c:	8bfb      	ldrh	r3, [r7, #30]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d06b      	beq.n	8003d3a <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6818      	ldr	r0, [r3, #0]
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	6959      	ldr	r1, [r3, #20]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	891a      	ldrh	r2, [r3, #8]
 8003c6e:	8bfb      	ldrh	r3, [r7, #30]
 8003c70:	f009 fed6 	bl	800da20 <USB_ReadPMA>
 8003c74:	e061      	b.n	8003d3a <HAL_PCD_EP_DB_Receive+0x1a2>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	4619      	mov	r1, r3
 8003c80:	4610      	mov	r0, r2
 8003c82:	f7ff f807 	bl	8002c94 <PCD_GET_EP_DBUF1_CNT>
 8003c86:	4603      	mov	r3, r0
 8003c88:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	699a      	ldr	r2, [r3, #24]
 8003c8e:	8bfb      	ldrh	r3, [r7, #30]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d306      	bcc.n	8003ca2 <HAL_PCD_EP_DB_Receive+0x10a>
    {
      ep->xfer_len -= count;
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	699a      	ldr	r2, [r3, #24]
 8003c98:	8bfb      	ldrh	r3, [r7, #30]
 8003c9a:	1ad2      	subs	r2, r2, r3
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	619a      	str	r2, [r3, #24]
 8003ca0:	e002      	b.n	8003ca8 <HAL_PCD_EP_DB_Receive+0x110>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d11b      	bne.n	8003ce8 <HAL_PCD_EP_DB_Receive+0x150>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4413      	add	r3, r2
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	4b20      	ldr	r3, [pc, #128]	@ (8003d44 <HAL_PCD_EP_DB_Receive+0x1ac>)
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003ccc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	441a      	add	r2, r3
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ce2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ce6:	6013      	str	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003ce8:	88fb      	ldrh	r3, [r7, #6]
 8003cea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d117      	bne.n	8003d22 <HAL_PCD_EP_DB_Receive+0x18a>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	4413      	add	r3, r2
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	4b11      	ldr	r3, [pc, #68]	@ (8003d48 <HAL_PCD_EP_DB_Receive+0x1b0>)
 8003d04:	4013      	ands	r3, r2
 8003d06:	623b      	str	r3, [r7, #32]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	441a      	add	r2, r3
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d1c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003d20:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 8003d22:	8bfb      	ldrh	r3, [r7, #30]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d008      	beq.n	8003d3a <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6818      	ldr	r0, [r3, #0]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	6959      	ldr	r1, [r3, #20]
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	895a      	ldrh	r2, [r3, #10]
 8003d34:	8bfb      	ldrh	r3, [r7, #30]
 8003d36:	f009 fe73 	bl	800da20 <USB_ReadPMA>
    }
  }

  return count;
 8003d3a:	8bfb      	ldrh	r3, [r7, #30]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3728      	adds	r7, #40	@ 0x28
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	07ffbf8f 	.word	0x07ffbf8f
 8003d48:	07ff8f8f 	.word	0x07ff8f8f

08003d4c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b08e      	sub	sp, #56	@ 0x38
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	4613      	mov	r3, r2
 8003d58:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003d5a:	88fb      	ldrh	r3, [r7, #6]
 8003d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 81d5 	beq.w	8004110 <HAL_PCD_EP_DB_Transmit+0x3c4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	4619      	mov	r1, r3
 8003d70:	4610      	mov	r0, r2
 8003d72:	f7fe ff6e 	bl	8002c52 <PCD_GET_EP_DBUF0_CNT>
 8003d76:	4603      	mov	r3, r0
 8003d78:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len > TxPctSize)
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	699a      	ldr	r2, [r3, #24]
 8003d7e:	8bfb      	ldrh	r3, [r7, #30]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d906      	bls.n	8003d92 <HAL_PCD_EP_DB_Transmit+0x46>
    {
      ep->xfer_len -= TxPctSize;
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	699a      	ldr	r2, [r3, #24]
 8003d88:	8bfb      	ldrh	r3, [r7, #30]
 8003d8a:	1ad2      	subs	r2, r2, r3
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	619a      	str	r2, [r3, #24]
 8003d90:	e002      	b.n	8003d98 <HAL_PCD_EP_DB_Transmit+0x4c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	2200      	movs	r2, #0
 8003d96:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f040 80c1 	bne.w	8003f24 <HAL_PCD_EP_DB_Transmit+0x1d8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	785b      	ldrb	r3, [r3, #1]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d124      	bne.n	8003df4 <HAL_PCD_EP_DB_Transmit+0xa8>
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003db4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003dc4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003dc8:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003dcc:	601a      	str	r2, [r3, #0]
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003dd8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003de8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003dec:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003df0:	601a      	str	r2, [r3, #0]
 8003df2:	e024      	b.n	8003e3e <HAL_PCD_EP_DB_Transmit+0xf2>
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	785b      	ldrb	r3, [r3, #1]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d120      	bne.n	8003e3e <HAL_PCD_EP_DB_Transmit+0xf2>
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e06:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	00db      	lsls	r3, r3, #3
 8003e12:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e16:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e1a:	b292      	uxth	r2, r2
 8003e1c:	601a      	str	r2, [r3, #0]
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003e28:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	00db      	lsls	r3, r3, #3
 8003e32:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e36:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e3a:	6812      	ldr	r2, [r2, #0]
 8003e3c:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	785b      	ldrb	r3, [r3, #1]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d124      	bne.n	8003e90 <HAL_PCD_EP_DB_Transmit+0x144>
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e50:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e60:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e64:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003e68:	605a      	str	r2, [r3, #4]
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e74:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	00db      	lsls	r3, r3, #3
 8003e80:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e84:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e88:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003e8c:	605a      	str	r2, [r3, #4]
 8003e8e:	e024      	b.n	8003eda <HAL_PCD_EP_DB_Transmit+0x18e>
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	785b      	ldrb	r3, [r3, #1]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d120      	bne.n	8003eda <HAL_PCD_EP_DB_Transmit+0x18e>
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ea2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003eb2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003eb6:	b292      	uxth	r2, r2
 8003eb8:	605a      	str	r2, [r3, #4]
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003ec4:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ed2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003ed6:	6852      	ldr	r2, [r2, #4]
 8003ed8:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	4619      	mov	r1, r3
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f00a fcf0 	bl	800e8c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003ee6:	88fb      	ldrh	r3, [r7, #6]
 8003ee8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f000 82e5 	beq.w	80044bc <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4413      	add	r3, r2
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	4b8e      	ldr	r3, [pc, #568]	@ (800413c <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8003f04:	4013      	ands	r3, r2
 8003f06:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	441a      	add	r2, r3
 8003f16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f20:	6013      	str	r3, [r2, #0]
 8003f22:	e2cb      	b.n	80044bc <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f24:	88fb      	ldrh	r3, [r7, #6]
 8003f26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d017      	beq.n	8003f5e <HAL_PCD_EP_DB_Transmit+0x212>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	461a      	mov	r2, r3
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	4413      	add	r3, r2
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	4b7f      	ldr	r3, [pc, #508]	@ (800413c <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8003f40:	4013      	ands	r3, r2
 8003f42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	461a      	mov	r2, r3
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	441a      	add	r2, r3
 8003f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f54:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f5c:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	f040 82a9 	bne.w	80044bc <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	695a      	ldr	r2, [r3, #20]
 8003f6e:	8bfb      	ldrh	r3, [r7, #30]
 8003f70:	441a      	add	r2, r3
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	69da      	ldr	r2, [r3, #28]
 8003f7a:	8bfb      	ldrh	r3, [r7, #30]
 8003f7c:	441a      	add	r2, r3
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	6a1a      	ldr	r2, [r3, #32]
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d309      	bcc.n	8003fa2 <HAL_PCD_EP_DB_Transmit+0x256>
        {
          len = ep->maxpacket;
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	6a1a      	ldr	r2, [r3, #32]
 8003f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9a:	1ad2      	subs	r2, r2, r3
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	621a      	str	r2, [r3, #32]
 8003fa0:	e014      	b.n	8003fcc <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else if (ep->xfer_len_db == 0U)
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d106      	bne.n	8003fb8 <HAL_PCD_EP_DB_Transmit+0x26c>
        {
          len = TxPctSize;
 8003faa:	8bfb      	ldrh	r3, [r7, #30]
 8003fac:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003fb6:	e009      	b.n	8003fcc <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	6a1b      	ldr	r3, [r3, #32]
 8003fc4:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	785b      	ldrb	r3, [r3, #1]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d16a      	bne.n	80040aa <HAL_PCD_EP_DB_Transmit+0x35e>
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	00db      	lsls	r3, r3, #3
 8003fda:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003fde:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	00db      	lsls	r3, r3, #3
 8003fea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003fee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003ff2:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003ff6:	601a      	str	r2, [r3, #0]
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d112      	bne.n	8004024 <HAL_PCD_EP_DB_Transmit+0x2d8>
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004008:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004018:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800401c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004020:	601a      	str	r2, [r3, #0]
 8004022:	e06a      	b.n	80040fa <HAL_PCD_EP_DB_Transmit+0x3ae>
 8004024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004026:	2b3e      	cmp	r3, #62	@ 0x3e
 8004028:	d81e      	bhi.n	8004068 <HAL_PCD_EP_DB_Transmit+0x31c>
 800402a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402c:	085b      	lsrs	r3, r3, #1
 800402e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	d002      	beq.n	8004040 <HAL_PCD_EP_DB_Transmit+0x2f4>
 800403a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800403c:	3301      	adds	r3, #1
 800403e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	00db      	lsls	r3, r3, #3
 8004046:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800404a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800404e:	6819      	ldr	r1, [r3, #0]
 8004050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004052:	069a      	lsls	r2, r3, #26
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800405e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004062:	430a      	orrs	r2, r1
 8004064:	601a      	str	r2, [r3, #0]
 8004066:	e048      	b.n	80040fa <HAL_PCD_EP_DB_Transmit+0x3ae>
 8004068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406a:	095b      	lsrs	r3, r3, #5
 800406c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800406e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004070:	f003 031f 	and.w	r3, r3, #31
 8004074:	2b00      	cmp	r3, #0
 8004076:	d102      	bne.n	800407e <HAL_PCD_EP_DB_Transmit+0x332>
 8004078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800407a:	3b01      	subs	r3, #1
 800407c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	00db      	lsls	r3, r3, #3
 8004084:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004088:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004090:	069b      	lsls	r3, r3, #26
 8004092:	431a      	orrs	r2, r3
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800409e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80040a2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	e027      	b.n	80040fa <HAL_PCD_EP_DB_Transmit+0x3ae>
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	785b      	ldrb	r3, [r3, #1]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d123      	bne.n	80040fa <HAL_PCD_EP_DB_Transmit+0x3ae>
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80040bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	00db      	lsls	r3, r3, #3
 80040c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80040cc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80040d0:	b292      	uxth	r2, r2
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80040de:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80040e2:	6819      	ldr	r1, [r3, #0]
 80040e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e6:	041a      	lsls	r2, r3, #16
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	00db      	lsls	r3, r3, #3
 80040ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80040f2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80040f6:	430a      	orrs	r2, r1
 80040f8:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6818      	ldr	r0, [r3, #0]
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	6959      	ldr	r1, [r3, #20]
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	891a      	ldrh	r2, [r3, #8]
 8004106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004108:	b29b      	uxth	r3, r3
 800410a:	f009 fc28 	bl	800d95e <USB_WritePMA>
 800410e:	e1d5      	b.n	80044bc <HAL_PCD_EP_DB_Transmit+0x770>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	4619      	mov	r1, r3
 800411a:	4610      	mov	r0, r2
 800411c:	f7fe fdba 	bl	8002c94 <PCD_GET_EP_DBUF1_CNT>
 8004120:	4603      	mov	r3, r0
 8004122:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= TxPctSize)
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	699a      	ldr	r2, [r3, #24]
 8004128:	8bfb      	ldrh	r3, [r7, #30]
 800412a:	429a      	cmp	r2, r3
 800412c:	d308      	bcc.n	8004140 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxPctSize;
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	699a      	ldr	r2, [r3, #24]
 8004132:	8bfb      	ldrh	r3, [r7, #30]
 8004134:	1ad2      	subs	r2, r2, r3
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	619a      	str	r2, [r3, #24]
 800413a:	e004      	b.n	8004146 <HAL_PCD_EP_DB_Transmit+0x3fa>
 800413c:	07ff8f8f 	.word	0x07ff8f8f
    }
    else
    {
      ep->xfer_len = 0U;
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	2200      	movs	r2, #0
 8004144:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	2b00      	cmp	r3, #0
 800414c:	f040 80c1 	bne.w	80042d2 <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	785b      	ldrb	r3, [r3, #1]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d124      	bne.n	80041a2 <HAL_PCD_EP_DB_Transmit+0x456>
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004162:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	00db      	lsls	r3, r3, #3
 800416e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004172:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004176:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	00db      	lsls	r3, r3, #3
 8004182:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004186:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	00db      	lsls	r3, r3, #3
 8004192:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004196:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800419a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800419e:	601a      	str	r2, [r3, #0]
 80041a0:	e024      	b.n	80041ec <HAL_PCD_EP_DB_Transmit+0x4a0>
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	785b      	ldrb	r3, [r3, #1]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d120      	bne.n	80041ec <HAL_PCD_EP_DB_Transmit+0x4a0>
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80041b4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	00db      	lsls	r3, r3, #3
 80041c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80041c4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80041c8:	b292      	uxth	r2, r2
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	00db      	lsls	r3, r3, #3
 80041d2:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80041d6:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80041e4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80041e8:	6812      	ldr	r2, [r2, #0]
 80041ea:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	785b      	ldrb	r3, [r3, #1]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d124      	bne.n	800423e <HAL_PCD_EP_DB_Transmit+0x4f2>
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	00db      	lsls	r3, r3, #3
 80041fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80041fe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	00db      	lsls	r3, r3, #3
 800420a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800420e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004212:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8004216:	605a      	str	r2, [r3, #4]
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	00db      	lsls	r3, r3, #3
 800421e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004222:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004226:	685a      	ldr	r2, [r3, #4]
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	00db      	lsls	r3, r3, #3
 800422e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004232:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004236:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800423a:	605a      	str	r2, [r3, #4]
 800423c:	e024      	b.n	8004288 <HAL_PCD_EP_DB_Transmit+0x53c>
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	785b      	ldrb	r3, [r3, #1]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d120      	bne.n	8004288 <HAL_PCD_EP_DB_Transmit+0x53c>
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004250:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004260:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004264:	b292      	uxth	r2, r2
 8004266:	605a      	str	r2, [r3, #4]
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	00db      	lsls	r3, r3, #3
 800426e:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8004272:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	00db      	lsls	r3, r3, #3
 800427c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004280:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004284:	6852      	ldr	r2, [r2, #4]
 8004286:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	4619      	mov	r1, r3
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f00a fb19 	bl	800e8c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004294:	88fb      	ldrh	r3, [r7, #6]
 8004296:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800429a:	2b00      	cmp	r3, #0
 800429c:	f040 810e 	bne.w	80044bc <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	461a      	mov	r2, r3
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4413      	add	r3, r2
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	4b95      	ldr	r3, [pc, #596]	@ (8004508 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 80042b2:	4013      	ands	r3, r2
 80042b4:	623b      	str	r3, [r7, #32]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	461a      	mov	r2, r3
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	441a      	add	r2, r3
 80042c4:	6a3b      	ldr	r3, [r7, #32]
 80042c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80042ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042ce:	6013      	str	r3, [r2, #0]
 80042d0:	e0f4      	b.n	80044bc <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80042d2:	88fb      	ldrh	r3, [r7, #6]
 80042d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d117      	bne.n	800430c <HAL_PCD_EP_DB_Transmit+0x5c0>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	461a      	mov	r2, r3
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4413      	add	r3, r2
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	4b86      	ldr	r3, [pc, #536]	@ (8004508 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 80042ee:	4013      	ands	r3, r2
 80042f0:	617b      	str	r3, [r7, #20]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	461a      	mov	r2, r3
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	441a      	add	r2, r3
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004306:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800430a:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004312:	2b01      	cmp	r3, #1
 8004314:	f040 80d2 	bne.w	80044bc <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	695a      	ldr	r2, [r3, #20]
 800431c:	8bfb      	ldrh	r3, [r7, #30]
 800431e:	441a      	add	r2, r3
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	69da      	ldr	r2, [r3, #28]
 8004328:	8bfb      	ldrh	r3, [r7, #30]
 800432a:	441a      	add	r2, r3
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	6a1a      	ldr	r2, [r3, #32]
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	429a      	cmp	r2, r3
 800433a:	d309      	bcc.n	8004350 <HAL_PCD_EP_DB_Transmit+0x604>
        {
          len = ep->maxpacket;
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	6a1a      	ldr	r2, [r3, #32]
 8004346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004348:	1ad2      	subs	r2, r2, r3
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	621a      	str	r2, [r3, #32]
 800434e:	e014      	b.n	800437a <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else if (ep->xfer_len_db == 0U)
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d106      	bne.n	8004366 <HAL_PCD_EP_DB_Transmit+0x61a>
        {
          len = TxPctSize;
 8004358:	8bfb      	ldrh	r3, [r7, #30]
 800435a:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004364:	e009      	b.n	800437a <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else
        {
          len = ep->xfer_len_db;
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	2200      	movs	r2, #0
 8004370:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	785b      	ldrb	r3, [r3, #1]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d16a      	bne.n	8004458 <HAL_PCD_EP_DB_Transmit+0x70c>
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800438c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004390:	685a      	ldr	r2, [r3, #4]
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800439c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80043a0:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80043a4:	605a      	str	r2, [r3, #4]
 80043a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d112      	bne.n	80043d2 <HAL_PCD_EP_DB_Transmit+0x686>
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	00db      	lsls	r3, r3, #3
 80043b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80043b6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	00db      	lsls	r3, r3, #3
 80043c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80043c6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80043ca:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80043ce:	605a      	str	r2, [r3, #4]
 80043d0:	e06a      	b.n	80044a8 <HAL_PCD_EP_DB_Transmit+0x75c>
 80043d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80043d6:	d81e      	bhi.n	8004416 <HAL_PCD_EP_DB_Transmit+0x6ca>
 80043d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043da:	085b      	lsrs	r3, r3, #1
 80043dc:	61bb      	str	r3, [r7, #24]
 80043de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d002      	beq.n	80043ee <HAL_PCD_EP_DB_Transmit+0x6a2>
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	3301      	adds	r3, #1
 80043ec:	61bb      	str	r3, [r7, #24]
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80043f8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80043fc:	6859      	ldr	r1, [r3, #4]
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	069a      	lsls	r2, r3, #26
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	00db      	lsls	r3, r3, #3
 8004408:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800440c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004410:	430a      	orrs	r2, r1
 8004412:	605a      	str	r2, [r3, #4]
 8004414:	e048      	b.n	80044a8 <HAL_PCD_EP_DB_Transmit+0x75c>
 8004416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004418:	095b      	lsrs	r3, r3, #5
 800441a:	61bb      	str	r3, [r7, #24]
 800441c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441e:	f003 031f 	and.w	r3, r3, #31
 8004422:	2b00      	cmp	r3, #0
 8004424:	d102      	bne.n	800442c <HAL_PCD_EP_DB_Transmit+0x6e0>
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	3b01      	subs	r3, #1
 800442a:	61bb      	str	r3, [r7, #24]
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	00db      	lsls	r3, r3, #3
 8004432:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004436:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800443a:	685a      	ldr	r2, [r3, #4]
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	069b      	lsls	r3, r3, #26
 8004440:	431a      	orrs	r2, r3
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800444c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004450:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004454:	605a      	str	r2, [r3, #4]
 8004456:	e027      	b.n	80044a8 <HAL_PCD_EP_DB_Transmit+0x75c>
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	785b      	ldrb	r3, [r3, #1]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d123      	bne.n	80044a8 <HAL_PCD_EP_DB_Transmit+0x75c>
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	00db      	lsls	r3, r3, #3
 8004466:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800446a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	00db      	lsls	r3, r3, #3
 8004476:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800447a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800447e:	b292      	uxth	r2, r2
 8004480:	605a      	str	r2, [r3, #4]
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	00db      	lsls	r3, r3, #3
 8004488:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800448c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004490:	6859      	ldr	r1, [r3, #4]
 8004492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004494:	041a      	lsls	r2, r3, #16
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80044a0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80044a4:	430a      	orrs	r2, r1
 80044a6:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6818      	ldr	r0, [r3, #0]
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	6959      	ldr	r1, [r3, #20]
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	895a      	ldrh	r2, [r3, #10]
 80044b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	f009 fa51 	bl	800d95e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	461a      	mov	r2, r3
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4413      	add	r3, r2
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	4b0f      	ldr	r3, [pc, #60]	@ (800450c <HAL_PCD_EP_DB_Transmit+0x7c0>)
 80044ce:	4013      	ands	r3, r2
 80044d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80044d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d4:	f083 0310 	eor.w	r3, r3, #16
 80044d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80044da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044dc:	f083 0320 	eor.w	r3, r3, #32
 80044e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	461a      	mov	r2, r3
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	441a      	add	r2, r3
 80044f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044fa:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3738      	adds	r7, #56	@ 0x38
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	07ff8f8f 	.word	0x07ff8f8f
 800450c:	07ff8fbf 	.word	0x07ff8fbf

08004510 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004510:	b480      	push	{r7}
 8004512:	b087      	sub	sp, #28
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	607b      	str	r3, [r7, #4]
 800451a:	460b      	mov	r3, r1
 800451c:	817b      	strh	r3, [r7, #10]
 800451e:	4613      	mov	r3, r2
 8004520:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004522:	897b      	ldrh	r3, [r7, #10]
 8004524:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004528:	b29b      	uxth	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00c      	beq.n	8004548 <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800452e:	897b      	ldrh	r3, [r7, #10]
 8004530:	f003 0207 	and.w	r2, r3, #7
 8004534:	4613      	mov	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	3310      	adds	r3, #16
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	4413      	add	r3, r2
 8004542:	3304      	adds	r3, #4
 8004544:	617b      	str	r3, [r7, #20]
 8004546:	e00a      	b.n	800455e <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004548:	897a      	ldrh	r2, [r7, #10]
 800454a:	4613      	mov	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4413      	add	r3, r2
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	4413      	add	r3, r2
 800455a:	3304      	adds	r3, #4
 800455c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800455e:	893b      	ldrh	r3, [r7, #8]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d107      	bne.n	8004574 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	2200      	movs	r2, #0
 8004568:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	b29a      	uxth	r2, r3
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	80da      	strh	r2, [r3, #6]
 8004572:	e00b      	b.n	800458c <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	2201      	movs	r2, #1
 8004578:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	b29a      	uxth	r2, r3
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	0c1b      	lsrs	r3, r3, #16
 8004586:	b29a      	uxth	r2, r3
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	371c      	adds	r7, #28
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr

0800459a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800459a:	b480      	push	{r7}
 800459c:	b085      	sub	sp, #20
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  hpcd->LPM_State = LPM_L0;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045bc:	f043 0201 	orr.w	r2, r3, #1
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045c8:	f043 0202 	orr.w	r2, r3, #2
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80045de:	b480      	push	{r7}
 80045e0:	b083      	sub	sp, #12
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
 80045e6:	460b      	mov	r3, r1
 80045e8:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80045ea:	bf00      	nop
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
	...

080045f8 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80045f8:	b480      	push	{r7}
 80045fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33SV);
 80045fc:	4b05      	ldr	r3, [pc, #20]	@ (8004614 <HAL_PWREx_EnableVddUSB+0x1c>)
 80045fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004600:	4a04      	ldr	r2, [pc, #16]	@ (8004614 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004602:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004606:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8004608:	bf00      	nop
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	44020800 	.word	0x44020800

08004618 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b088      	sub	sp, #32
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d102      	bne.n	800462c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	f000 bc28 	b.w	8004e7c <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800462c:	4b94      	ldr	r3, [pc, #592]	@ (8004880 <HAL_RCC_OscConfig+0x268>)
 800462e:	69db      	ldr	r3, [r3, #28]
 8004630:	f003 0318 	and.w	r3, r3, #24
 8004634:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8004636:	4b92      	ldr	r3, [pc, #584]	@ (8004880 <HAL_RCC_OscConfig+0x268>)
 8004638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800463a:	f003 0303 	and.w	r3, r3, #3
 800463e:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0310 	and.w	r3, r3, #16
 8004648:	2b00      	cmp	r3, #0
 800464a:	d05b      	beq.n	8004704 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	2b08      	cmp	r3, #8
 8004650:	d005      	beq.n	800465e <HAL_RCC_OscConfig+0x46>
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	2b18      	cmp	r3, #24
 8004656:	d114      	bne.n	8004682 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	2b02      	cmp	r3, #2
 800465c:	d111      	bne.n	8004682 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d102      	bne.n	800466c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	f000 bc08 	b.w	8004e7c <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800466c:	4b84      	ldr	r3, [pc, #528]	@ (8004880 <HAL_RCC_OscConfig+0x268>)
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	041b      	lsls	r3, r3, #16
 800467a:	4981      	ldr	r1, [pc, #516]	@ (8004880 <HAL_RCC_OscConfig+0x268>)
 800467c:	4313      	orrs	r3, r2
 800467e:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8004680:	e040      	b.n	8004704 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	69db      	ldr	r3, [r3, #28]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d023      	beq.n	80046d2 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800468a:	4b7d      	ldr	r3, [pc, #500]	@ (8004880 <HAL_RCC_OscConfig+0x268>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a7c      	ldr	r2, [pc, #496]	@ (8004880 <HAL_RCC_OscConfig+0x268>)
 8004690:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004694:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004696:	f7fd fd85 	bl	80021a4 <HAL_GetTick>
 800469a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800469c:	e008      	b.n	80046b0 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800469e:	f7fd fd81 	bl	80021a4 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d901      	bls.n	80046b0 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e3e5      	b.n	8004e7c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80046b0:	4b73      	ldr	r3, [pc, #460]	@ (8004880 <HAL_RCC_OscConfig+0x268>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d0f0      	beq.n	800469e <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80046bc:	4b70      	ldr	r3, [pc, #448]	@ (8004880 <HAL_RCC_OscConfig+0x268>)
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	041b      	lsls	r3, r3, #16
 80046ca:	496d      	ldr	r1, [pc, #436]	@ (8004880 <HAL_RCC_OscConfig+0x268>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	618b      	str	r3, [r1, #24]
 80046d0:	e018      	b.n	8004704 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80046d2:	4b6b      	ldr	r3, [pc, #428]	@ (8004880 <HAL_RCC_OscConfig+0x268>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a6a      	ldr	r2, [pc, #424]	@ (8004880 <HAL_RCC_OscConfig+0x268>)
 80046d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046de:	f7fd fd61 	bl	80021a4 <HAL_GetTick>
 80046e2:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80046e4:	e008      	b.n	80046f8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80046e6:	f7fd fd5d 	bl	80021a4 <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e3c1      	b.n	8004e7c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80046f8:	4b61      	ldr	r3, [pc, #388]	@ (8004880 <HAL_RCC_OscConfig+0x268>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1f0      	bne.n	80046e6 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 80a0 	beq.w	8004852 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	2b10      	cmp	r3, #16
 8004716:	d005      	beq.n	8004724 <HAL_RCC_OscConfig+0x10c>
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	2b18      	cmp	r3, #24
 800471c:	d109      	bne.n	8004732 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	2b03      	cmp	r3, #3
 8004722:	d106      	bne.n	8004732 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	f040 8092 	bne.w	8004852 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e3a4      	b.n	8004e7c <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800473a:	d106      	bne.n	800474a <HAL_RCC_OscConfig+0x132>
 800473c:	4b50      	ldr	r3, [pc, #320]	@ (8004880 <HAL_RCC_OscConfig+0x268>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a4f      	ldr	r2, [pc, #316]	@ (8004880 <HAL_RCC_OscConfig+0x268>)
 8004742:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004746:	6013      	str	r3, [r2, #0]
 8004748:	e058      	b.n	80047fc <HAL_RCC_OscConfig+0x1e4>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d112      	bne.n	8004778 <HAL_RCC_OscConfig+0x160>
 8004752:	4b4b      	ldr	r3, [pc, #300]	@ (8004880 <HAL_RCC_OscConfig+0x268>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a4a      	ldr	r2, [pc, #296]	@ (8004880 <HAL_RCC_OscConfig+0x268>)
 8004758:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800475c:	6013      	str	r3, [r2, #0]
 800475e:	4b48      	ldr	r3, [pc, #288]	@ (8004880 <HAL_RCC_OscConfig+0x268>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a47      	ldr	r2, [pc, #284]	@ (8004880 <HAL_RCC_OscConfig+0x268>)
 8004764:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004768:	6013      	str	r3, [r2, #0]
 800476a:	4b45      	ldr	r3, [pc, #276]	@ (8004880 <HAL_RCC_OscConfig+0x268>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a44      	ldr	r2, [pc, #272]	@ (8004880 <HAL_RCC_OscConfig+0x268>)
 8004770:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004774:	6013      	str	r3, [r2, #0]
 8004776:	e041      	b.n	80047fc <HAL_RCC_OscConfig+0x1e4>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004780:	d112      	bne.n	80047a8 <HAL_RCC_OscConfig+0x190>
 8004782:	4b3f      	ldr	r3, [pc, #252]	@ (8004880 <HAL_RCC_OscConfig+0x268>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a3e      	ldr	r2, [pc, #248]	@ (8004880 <HAL_RCC_OscConfig+0x268>)
 8004788:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800478c:	6013      	str	r3, [r2, #0]
 800478e:	4b3c      	ldr	r3, [pc, #240]	@ (8004880 <HAL_RCC_OscConfig+0x268>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a3b      	ldr	r2, [pc, #236]	@ (8004880 <HAL_RCC_OscConfig+0x268>)
 8004794:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004798:	6013      	str	r3, [r2, #0]
 800479a:	4b39      	ldr	r3, [pc, #228]	@ (8004880 <HAL_RCC_OscConfig+0x268>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a38      	ldr	r2, [pc, #224]	@ (8004880 <HAL_RCC_OscConfig+0x268>)
 80047a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047a4:	6013      	str	r3, [r2, #0]
 80047a6:	e029      	b.n	80047fc <HAL_RCC_OscConfig+0x1e4>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80047b0:	d112      	bne.n	80047d8 <HAL_RCC_OscConfig+0x1c0>
 80047b2:	4b33      	ldr	r3, [pc, #204]	@ (8004880 <HAL_RCC_OscConfig+0x268>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a32      	ldr	r2, [pc, #200]	@ (8004880 <HAL_RCC_OscConfig+0x268>)
 80047b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047bc:	6013      	str	r3, [r2, #0]
 80047be:	4b30      	ldr	r3, [pc, #192]	@ (8004880 <HAL_RCC_OscConfig+0x268>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a2f      	ldr	r2, [pc, #188]	@ (8004880 <HAL_RCC_OscConfig+0x268>)
 80047c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047c8:	6013      	str	r3, [r2, #0]
 80047ca:	4b2d      	ldr	r3, [pc, #180]	@ (8004880 <HAL_RCC_OscConfig+0x268>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a2c      	ldr	r2, [pc, #176]	@ (8004880 <HAL_RCC_OscConfig+0x268>)
 80047d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047d4:	6013      	str	r3, [r2, #0]
 80047d6:	e011      	b.n	80047fc <HAL_RCC_OscConfig+0x1e4>
 80047d8:	4b29      	ldr	r3, [pc, #164]	@ (8004880 <HAL_RCC_OscConfig+0x268>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a28      	ldr	r2, [pc, #160]	@ (8004880 <HAL_RCC_OscConfig+0x268>)
 80047de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047e2:	6013      	str	r3, [r2, #0]
 80047e4:	4b26      	ldr	r3, [pc, #152]	@ (8004880 <HAL_RCC_OscConfig+0x268>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a25      	ldr	r2, [pc, #148]	@ (8004880 <HAL_RCC_OscConfig+0x268>)
 80047ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047ee:	6013      	str	r3, [r2, #0]
 80047f0:	4b23      	ldr	r3, [pc, #140]	@ (8004880 <HAL_RCC_OscConfig+0x268>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a22      	ldr	r2, [pc, #136]	@ (8004880 <HAL_RCC_OscConfig+0x268>)
 80047f6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80047fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d013      	beq.n	800482c <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004804:	f7fd fcce 	bl	80021a4 <HAL_GetTick>
 8004808:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800480a:	e008      	b.n	800481e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800480c:	f7fd fcca 	bl	80021a4 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b64      	cmp	r3, #100	@ 0x64
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e32e      	b.n	8004e7c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800481e:	4b18      	ldr	r3, [pc, #96]	@ (8004880 <HAL_RCC_OscConfig+0x268>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d0f0      	beq.n	800480c <HAL_RCC_OscConfig+0x1f4>
 800482a:	e012      	b.n	8004852 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800482c:	f7fd fcba 	bl	80021a4 <HAL_GetTick>
 8004830:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004832:	e008      	b.n	8004846 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004834:	f7fd fcb6 	bl	80021a4 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b64      	cmp	r3, #100	@ 0x64
 8004840:	d901      	bls.n	8004846 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e31a      	b.n	8004e7c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004846:	4b0e      	ldr	r3, [pc, #56]	@ (8004880 <HAL_RCC_OscConfig+0x268>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1f0      	bne.n	8004834 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b00      	cmp	r3, #0
 800485c:	f000 809a 	beq.w	8004994 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d005      	beq.n	8004872 <HAL_RCC_OscConfig+0x25a>
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	2b18      	cmp	r3, #24
 800486a:	d149      	bne.n	8004900 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d146      	bne.n	8004900 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d104      	bne.n	8004884 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e2fe      	b.n	8004e7c <HAL_RCC_OscConfig+0x864>
 800487e:	bf00      	nop
 8004880:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d11c      	bne.n	80048c4 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800488a:	4b9a      	ldr	r3, [pc, #616]	@ (8004af4 <HAL_RCC_OscConfig+0x4dc>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0218 	and.w	r2, r3, #24
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	429a      	cmp	r2, r3
 8004898:	d014      	beq.n	80048c4 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800489a:	4b96      	ldr	r3, [pc, #600]	@ (8004af4 <HAL_RCC_OscConfig+0x4dc>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f023 0218 	bic.w	r2, r3, #24
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	4993      	ldr	r1, [pc, #588]	@ (8004af4 <HAL_RCC_OscConfig+0x4dc>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80048ac:	f000 fdd0 	bl	8005450 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80048b0:	4b91      	ldr	r3, [pc, #580]	@ (8004af8 <HAL_RCC_OscConfig+0x4e0>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7fd fbeb 	bl	8002090 <HAL_InitTick>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d001      	beq.n	80048c4 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e2db      	b.n	8004e7c <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c4:	f7fd fc6e 	bl	80021a4 <HAL_GetTick>
 80048c8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048ca:	e008      	b.n	80048de <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80048cc:	f7fd fc6a 	bl	80021a4 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e2ce      	b.n	8004e7c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048de:	4b85      	ldr	r3, [pc, #532]	@ (8004af4 <HAL_RCC_OscConfig+0x4dc>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d0f0      	beq.n	80048cc <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80048ea:	4b82      	ldr	r3, [pc, #520]	@ (8004af4 <HAL_RCC_OscConfig+0x4dc>)
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	041b      	lsls	r3, r3, #16
 80048f8:	497e      	ldr	r1, [pc, #504]	@ (8004af4 <HAL_RCC_OscConfig+0x4dc>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80048fe:	e049      	b.n	8004994 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d02c      	beq.n	8004962 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8004908:	4b7a      	ldr	r3, [pc, #488]	@ (8004af4 <HAL_RCC_OscConfig+0x4dc>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f023 0218 	bic.w	r2, r3, #24
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	4977      	ldr	r1, [pc, #476]	@ (8004af4 <HAL_RCC_OscConfig+0x4dc>)
 8004916:	4313      	orrs	r3, r2
 8004918:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800491a:	4b76      	ldr	r3, [pc, #472]	@ (8004af4 <HAL_RCC_OscConfig+0x4dc>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a75      	ldr	r2, [pc, #468]	@ (8004af4 <HAL_RCC_OscConfig+0x4dc>)
 8004920:	f043 0301 	orr.w	r3, r3, #1
 8004924:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004926:	f7fd fc3d 	bl	80021a4 <HAL_GetTick>
 800492a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800492c:	e008      	b.n	8004940 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800492e:	f7fd fc39 	bl	80021a4 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b02      	cmp	r3, #2
 800493a:	d901      	bls.n	8004940 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e29d      	b.n	8004e7c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004940:	4b6c      	ldr	r3, [pc, #432]	@ (8004af4 <HAL_RCC_OscConfig+0x4dc>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d0f0      	beq.n	800492e <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800494c:	4b69      	ldr	r3, [pc, #420]	@ (8004af4 <HAL_RCC_OscConfig+0x4dc>)
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	695b      	ldr	r3, [r3, #20]
 8004958:	041b      	lsls	r3, r3, #16
 800495a:	4966      	ldr	r1, [pc, #408]	@ (8004af4 <HAL_RCC_OscConfig+0x4dc>)
 800495c:	4313      	orrs	r3, r2
 800495e:	610b      	str	r3, [r1, #16]
 8004960:	e018      	b.n	8004994 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004962:	4b64      	ldr	r3, [pc, #400]	@ (8004af4 <HAL_RCC_OscConfig+0x4dc>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a63      	ldr	r2, [pc, #396]	@ (8004af4 <HAL_RCC_OscConfig+0x4dc>)
 8004968:	f023 0301 	bic.w	r3, r3, #1
 800496c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800496e:	f7fd fc19 	bl	80021a4 <HAL_GetTick>
 8004972:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004974:	e008      	b.n	8004988 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004976:	f7fd fc15 	bl	80021a4 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	2b02      	cmp	r3, #2
 8004982:	d901      	bls.n	8004988 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e279      	b.n	8004e7c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004988:	4b5a      	ldr	r3, [pc, #360]	@ (8004af4 <HAL_RCC_OscConfig+0x4dc>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0302 	and.w	r3, r3, #2
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1f0      	bne.n	8004976 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0308 	and.w	r3, r3, #8
 800499c:	2b00      	cmp	r3, #0
 800499e:	d03c      	beq.n	8004a1a <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d01c      	beq.n	80049e2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049a8:	4b52      	ldr	r3, [pc, #328]	@ (8004af4 <HAL_RCC_OscConfig+0x4dc>)
 80049aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049ae:	4a51      	ldr	r2, [pc, #324]	@ (8004af4 <HAL_RCC_OscConfig+0x4dc>)
 80049b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80049b4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b8:	f7fd fbf4 	bl	80021a4 <HAL_GetTick>
 80049bc:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80049be:	e008      	b.n	80049d2 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80049c0:	f7fd fbf0 	bl	80021a4 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d901      	bls.n	80049d2 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e254      	b.n	8004e7c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80049d2:	4b48      	ldr	r3, [pc, #288]	@ (8004af4 <HAL_RCC_OscConfig+0x4dc>)
 80049d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d0ef      	beq.n	80049c0 <HAL_RCC_OscConfig+0x3a8>
 80049e0:	e01b      	b.n	8004a1a <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049e2:	4b44      	ldr	r3, [pc, #272]	@ (8004af4 <HAL_RCC_OscConfig+0x4dc>)
 80049e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049e8:	4a42      	ldr	r2, [pc, #264]	@ (8004af4 <HAL_RCC_OscConfig+0x4dc>)
 80049ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80049ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f2:	f7fd fbd7 	bl	80021a4 <HAL_GetTick>
 80049f6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80049f8:	e008      	b.n	8004a0c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80049fa:	f7fd fbd3 	bl	80021a4 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d901      	bls.n	8004a0c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e237      	b.n	8004e7c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004a0c:	4b39      	ldr	r3, [pc, #228]	@ (8004af4 <HAL_RCC_OscConfig+0x4dc>)
 8004a0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1ef      	bne.n	80049fa <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0304 	and.w	r3, r3, #4
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	f000 80d2 	beq.w	8004bcc <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004a28:	4b34      	ldr	r3, [pc, #208]	@ (8004afc <HAL_RCC_OscConfig+0x4e4>)
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d118      	bne.n	8004a66 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004a34:	4b31      	ldr	r3, [pc, #196]	@ (8004afc <HAL_RCC_OscConfig+0x4e4>)
 8004a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a38:	4a30      	ldr	r2, [pc, #192]	@ (8004afc <HAL_RCC_OscConfig+0x4e4>)
 8004a3a:	f043 0301 	orr.w	r3, r3, #1
 8004a3e:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a40:	f7fd fbb0 	bl	80021a4 <HAL_GetTick>
 8004a44:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004a46:	e008      	b.n	8004a5a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a48:	f7fd fbac 	bl	80021a4 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d901      	bls.n	8004a5a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e210      	b.n	8004e7c <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004a5a:	4b28      	ldr	r3, [pc, #160]	@ (8004afc <HAL_RCC_OscConfig+0x4e4>)
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d0f0      	beq.n	8004a48 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d108      	bne.n	8004a80 <HAL_RCC_OscConfig+0x468>
 8004a6e:	4b21      	ldr	r3, [pc, #132]	@ (8004af4 <HAL_RCC_OscConfig+0x4dc>)
 8004a70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a74:	4a1f      	ldr	r2, [pc, #124]	@ (8004af4 <HAL_RCC_OscConfig+0x4dc>)
 8004a76:	f043 0301 	orr.w	r3, r3, #1
 8004a7a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004a7e:	e074      	b.n	8004b6a <HAL_RCC_OscConfig+0x552>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d118      	bne.n	8004aba <HAL_RCC_OscConfig+0x4a2>
 8004a88:	4b1a      	ldr	r3, [pc, #104]	@ (8004af4 <HAL_RCC_OscConfig+0x4dc>)
 8004a8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a8e:	4a19      	ldr	r2, [pc, #100]	@ (8004af4 <HAL_RCC_OscConfig+0x4dc>)
 8004a90:	f023 0301 	bic.w	r3, r3, #1
 8004a94:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004a98:	4b16      	ldr	r3, [pc, #88]	@ (8004af4 <HAL_RCC_OscConfig+0x4dc>)
 8004a9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a9e:	4a15      	ldr	r2, [pc, #84]	@ (8004af4 <HAL_RCC_OscConfig+0x4dc>)
 8004aa0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004aa4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004aa8:	4b12      	ldr	r3, [pc, #72]	@ (8004af4 <HAL_RCC_OscConfig+0x4dc>)
 8004aaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004aae:	4a11      	ldr	r2, [pc, #68]	@ (8004af4 <HAL_RCC_OscConfig+0x4dc>)
 8004ab0:	f023 0304 	bic.w	r3, r3, #4
 8004ab4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004ab8:	e057      	b.n	8004b6a <HAL_RCC_OscConfig+0x552>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	2b05      	cmp	r3, #5
 8004ac0:	d11e      	bne.n	8004b00 <HAL_RCC_OscConfig+0x4e8>
 8004ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8004af4 <HAL_RCC_OscConfig+0x4dc>)
 8004ac4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ac8:	4a0a      	ldr	r2, [pc, #40]	@ (8004af4 <HAL_RCC_OscConfig+0x4dc>)
 8004aca:	f043 0304 	orr.w	r3, r3, #4
 8004ace:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004ad2:	4b08      	ldr	r3, [pc, #32]	@ (8004af4 <HAL_RCC_OscConfig+0x4dc>)
 8004ad4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ad8:	4a06      	ldr	r2, [pc, #24]	@ (8004af4 <HAL_RCC_OscConfig+0x4dc>)
 8004ada:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ade:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004ae2:	4b04      	ldr	r3, [pc, #16]	@ (8004af4 <HAL_RCC_OscConfig+0x4dc>)
 8004ae4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ae8:	4a02      	ldr	r2, [pc, #8]	@ (8004af4 <HAL_RCC_OscConfig+0x4dc>)
 8004aea:	f043 0301 	orr.w	r3, r3, #1
 8004aee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004af2:	e03a      	b.n	8004b6a <HAL_RCC_OscConfig+0x552>
 8004af4:	44020c00 	.word	0x44020c00
 8004af8:	20000024 	.word	0x20000024
 8004afc:	44020800 	.word	0x44020800
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	2b85      	cmp	r3, #133	@ 0x85
 8004b06:	d118      	bne.n	8004b3a <HAL_RCC_OscConfig+0x522>
 8004b08:	4ba2      	ldr	r3, [pc, #648]	@ (8004d94 <HAL_RCC_OscConfig+0x77c>)
 8004b0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b0e:	4aa1      	ldr	r2, [pc, #644]	@ (8004d94 <HAL_RCC_OscConfig+0x77c>)
 8004b10:	f043 0304 	orr.w	r3, r3, #4
 8004b14:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004b18:	4b9e      	ldr	r3, [pc, #632]	@ (8004d94 <HAL_RCC_OscConfig+0x77c>)
 8004b1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b1e:	4a9d      	ldr	r2, [pc, #628]	@ (8004d94 <HAL_RCC_OscConfig+0x77c>)
 8004b20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b24:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004b28:	4b9a      	ldr	r3, [pc, #616]	@ (8004d94 <HAL_RCC_OscConfig+0x77c>)
 8004b2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b2e:	4a99      	ldr	r2, [pc, #612]	@ (8004d94 <HAL_RCC_OscConfig+0x77c>)
 8004b30:	f043 0301 	orr.w	r3, r3, #1
 8004b34:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004b38:	e017      	b.n	8004b6a <HAL_RCC_OscConfig+0x552>
 8004b3a:	4b96      	ldr	r3, [pc, #600]	@ (8004d94 <HAL_RCC_OscConfig+0x77c>)
 8004b3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b40:	4a94      	ldr	r2, [pc, #592]	@ (8004d94 <HAL_RCC_OscConfig+0x77c>)
 8004b42:	f023 0301 	bic.w	r3, r3, #1
 8004b46:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004b4a:	4b92      	ldr	r3, [pc, #584]	@ (8004d94 <HAL_RCC_OscConfig+0x77c>)
 8004b4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b50:	4a90      	ldr	r2, [pc, #576]	@ (8004d94 <HAL_RCC_OscConfig+0x77c>)
 8004b52:	f023 0304 	bic.w	r3, r3, #4
 8004b56:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004b5a:	4b8e      	ldr	r3, [pc, #568]	@ (8004d94 <HAL_RCC_OscConfig+0x77c>)
 8004b5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b60:	4a8c      	ldr	r2, [pc, #560]	@ (8004d94 <HAL_RCC_OscConfig+0x77c>)
 8004b62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b66:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d016      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b72:	f7fd fb17 	bl	80021a4 <HAL_GetTick>
 8004b76:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b78:	e00a      	b.n	8004b90 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b7a:	f7fd fb13 	bl	80021a4 <HAL_GetTick>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d901      	bls.n	8004b90 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e175      	b.n	8004e7c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b90:	4b80      	ldr	r3, [pc, #512]	@ (8004d94 <HAL_RCC_OscConfig+0x77c>)
 8004b92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d0ed      	beq.n	8004b7a <HAL_RCC_OscConfig+0x562>
 8004b9e:	e015      	b.n	8004bcc <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ba0:	f7fd fb00 	bl	80021a4 <HAL_GetTick>
 8004ba4:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ba6:	e00a      	b.n	8004bbe <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ba8:	f7fd fafc 	bl	80021a4 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e15e      	b.n	8004e7c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004bbe:	4b75      	ldr	r3, [pc, #468]	@ (8004d94 <HAL_RCC_OscConfig+0x77c>)
 8004bc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1ed      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0320 	and.w	r3, r3, #32
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d036      	beq.n	8004c46 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d019      	beq.n	8004c14 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004be0:	4b6c      	ldr	r3, [pc, #432]	@ (8004d94 <HAL_RCC_OscConfig+0x77c>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a6b      	ldr	r2, [pc, #428]	@ (8004d94 <HAL_RCC_OscConfig+0x77c>)
 8004be6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004bea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bec:	f7fd fada 	bl	80021a4 <HAL_GetTick>
 8004bf0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004bf2:	e008      	b.n	8004c06 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004bf4:	f7fd fad6 	bl	80021a4 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d901      	bls.n	8004c06 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e13a      	b.n	8004e7c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004c06:	4b63      	ldr	r3, [pc, #396]	@ (8004d94 <HAL_RCC_OscConfig+0x77c>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d0f0      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x5dc>
 8004c12:	e018      	b.n	8004c46 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c14:	4b5f      	ldr	r3, [pc, #380]	@ (8004d94 <HAL_RCC_OscConfig+0x77c>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a5e      	ldr	r2, [pc, #376]	@ (8004d94 <HAL_RCC_OscConfig+0x77c>)
 8004c1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c20:	f7fd fac0 	bl	80021a4 <HAL_GetTick>
 8004c24:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004c26:	e008      	b.n	8004c3a <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004c28:	f7fd fabc 	bl	80021a4 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e120      	b.n	8004e7c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004c3a:	4b56      	ldr	r3, [pc, #344]	@ (8004d94 <HAL_RCC_OscConfig+0x77c>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1f0      	bne.n	8004c28 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f000 8115 	beq.w	8004e7a <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	2b18      	cmp	r3, #24
 8004c54:	f000 80af 	beq.w	8004db6 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	f040 8086 	bne.w	8004d6e <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8004c62:	4b4c      	ldr	r3, [pc, #304]	@ (8004d94 <HAL_RCC_OscConfig+0x77c>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a4b      	ldr	r2, [pc, #300]	@ (8004d94 <HAL_RCC_OscConfig+0x77c>)
 8004c68:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c6e:	f7fd fa99 	bl	80021a4 <HAL_GetTick>
 8004c72:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004c74:	e008      	b.n	8004c88 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004c76:	f7fd fa95 	bl	80021a4 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d901      	bls.n	8004c88 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e0f9      	b.n	8004e7c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004c88:	4b42      	ldr	r3, [pc, #264]	@ (8004d94 <HAL_RCC_OscConfig+0x77c>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1f0      	bne.n	8004c76 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8004c94:	4b3f      	ldr	r3, [pc, #252]	@ (8004d94 <HAL_RCC_OscConfig+0x77c>)
 8004c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c98:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004c9c:	f023 0303 	bic.w	r3, r3, #3
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004ca8:	0212      	lsls	r2, r2, #8
 8004caa:	430a      	orrs	r2, r1
 8004cac:	4939      	ldr	r1, [pc, #228]	@ (8004d94 <HAL_RCC_OscConfig+0x77c>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	628b      	str	r3, [r1, #40]	@ 0x28
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	025b      	lsls	r3, r3, #9
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	041b      	lsls	r3, r3, #16
 8004cd0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004cd4:	431a      	orrs	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	061b      	lsls	r3, r3, #24
 8004cde:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004ce2:	492c      	ldr	r1, [pc, #176]	@ (8004d94 <HAL_RCC_OscConfig+0x77c>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004ce8:	4b2a      	ldr	r3, [pc, #168]	@ (8004d94 <HAL_RCC_OscConfig+0x77c>)
 8004cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cec:	4a29      	ldr	r2, [pc, #164]	@ (8004d94 <HAL_RCC_OscConfig+0x77c>)
 8004cee:	f023 0310 	bic.w	r3, r3, #16
 8004cf2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cf8:	4a26      	ldr	r2, [pc, #152]	@ (8004d94 <HAL_RCC_OscConfig+0x77c>)
 8004cfa:	00db      	lsls	r3, r3, #3
 8004cfc:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8004cfe:	4b25      	ldr	r3, [pc, #148]	@ (8004d94 <HAL_RCC_OscConfig+0x77c>)
 8004d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d02:	4a24      	ldr	r2, [pc, #144]	@ (8004d94 <HAL_RCC_OscConfig+0x77c>)
 8004d04:	f043 0310 	orr.w	r3, r3, #16
 8004d08:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8004d0a:	4b22      	ldr	r3, [pc, #136]	@ (8004d94 <HAL_RCC_OscConfig+0x77c>)
 8004d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d0e:	f023 020c 	bic.w	r2, r3, #12
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d16:	491f      	ldr	r1, [pc, #124]	@ (8004d94 <HAL_RCC_OscConfig+0x77c>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8004d1c:	4b1d      	ldr	r3, [pc, #116]	@ (8004d94 <HAL_RCC_OscConfig+0x77c>)
 8004d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d20:	f023 0220 	bic.w	r2, r3, #32
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d28:	491a      	ldr	r1, [pc, #104]	@ (8004d94 <HAL_RCC_OscConfig+0x77c>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004d2e:	4b19      	ldr	r3, [pc, #100]	@ (8004d94 <HAL_RCC_OscConfig+0x77c>)
 8004d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d32:	4a18      	ldr	r2, [pc, #96]	@ (8004d94 <HAL_RCC_OscConfig+0x77c>)
 8004d34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d38:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8004d3a:	4b16      	ldr	r3, [pc, #88]	@ (8004d94 <HAL_RCC_OscConfig+0x77c>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a15      	ldr	r2, [pc, #84]	@ (8004d94 <HAL_RCC_OscConfig+0x77c>)
 8004d40:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d46:	f7fd fa2d 	bl	80021a4 <HAL_GetTick>
 8004d4a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004d4c:	e008      	b.n	8004d60 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004d4e:	f7fd fa29 	bl	80021a4 <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d901      	bls.n	8004d60 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e08d      	b.n	8004e7c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004d60:	4b0c      	ldr	r3, [pc, #48]	@ (8004d94 <HAL_RCC_OscConfig+0x77c>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d0f0      	beq.n	8004d4e <HAL_RCC_OscConfig+0x736>
 8004d6c:	e085      	b.n	8004e7a <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8004d6e:	4b09      	ldr	r3, [pc, #36]	@ (8004d94 <HAL_RCC_OscConfig+0x77c>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a08      	ldr	r2, [pc, #32]	@ (8004d94 <HAL_RCC_OscConfig+0x77c>)
 8004d74:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d7a:	f7fd fa13 	bl	80021a4 <HAL_GetTick>
 8004d7e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004d80:	e00a      	b.n	8004d98 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004d82:	f7fd fa0f 	bl	80021a4 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d903      	bls.n	8004d98 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e073      	b.n	8004e7c <HAL_RCC_OscConfig+0x864>
 8004d94:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004d98:	4b3a      	ldr	r3, [pc, #232]	@ (8004e84 <HAL_RCC_OscConfig+0x86c>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1ee      	bne.n	8004d82 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004da4:	4b37      	ldr	r3, [pc, #220]	@ (8004e84 <HAL_RCC_OscConfig+0x86c>)
 8004da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da8:	4a36      	ldr	r2, [pc, #216]	@ (8004e84 <HAL_RCC_OscConfig+0x86c>)
 8004daa:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004dae:	f023 0303 	bic.w	r3, r3, #3
 8004db2:	6293      	str	r3, [r2, #40]	@ 0x28
 8004db4:	e061      	b.n	8004e7a <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004db6:	4b33      	ldr	r3, [pc, #204]	@ (8004e84 <HAL_RCC_OscConfig+0x86c>)
 8004db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dba:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004dbc:	4b31      	ldr	r3, [pc, #196]	@ (8004e84 <HAL_RCC_OscConfig+0x86c>)
 8004dbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dc0:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d031      	beq.n	8004e2e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	f003 0203 	and.w	r2, r3, #3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d12a      	bne.n	8004e2e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	0a1b      	lsrs	r3, r3, #8
 8004ddc:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d122      	bne.n	8004e2e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004df2:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d11a      	bne.n	8004e2e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	0a5b      	lsrs	r3, r3, #9
 8004dfc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e04:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d111      	bne.n	8004e2e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	0c1b      	lsrs	r3, r3, #16
 8004e0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e16:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d108      	bne.n	8004e2e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	0e1b      	lsrs	r3, r3, #24
 8004e20:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e28:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d001      	beq.n	8004e32 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e024      	b.n	8004e7c <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004e32:	4b14      	ldr	r3, [pc, #80]	@ (8004e84 <HAL_RCC_OscConfig+0x86c>)
 8004e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e36:	08db      	lsrs	r3, r3, #3
 8004e38:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d01a      	beq.n	8004e7a <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004e44:	4b0f      	ldr	r3, [pc, #60]	@ (8004e84 <HAL_RCC_OscConfig+0x86c>)
 8004e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e48:	4a0e      	ldr	r2, [pc, #56]	@ (8004e84 <HAL_RCC_OscConfig+0x86c>)
 8004e4a:	f023 0310 	bic.w	r3, r3, #16
 8004e4e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e50:	f7fd f9a8 	bl	80021a4 <HAL_GetTick>
 8004e54:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8004e56:	bf00      	nop
 8004e58:	f7fd f9a4 	bl	80021a4 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d0f9      	beq.n	8004e58 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e68:	4a06      	ldr	r2, [pc, #24]	@ (8004e84 <HAL_RCC_OscConfig+0x86c>)
 8004e6a:	00db      	lsls	r3, r3, #3
 8004e6c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8004e6e:	4b05      	ldr	r3, [pc, #20]	@ (8004e84 <HAL_RCC_OscConfig+0x86c>)
 8004e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e72:	4a04      	ldr	r2, [pc, #16]	@ (8004e84 <HAL_RCC_OscConfig+0x86c>)
 8004e74:	f043 0310 	orr.w	r3, r3, #16
 8004e78:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3720      	adds	r7, #32
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	44020c00 	.word	0x44020c00

08004e88 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d101      	bne.n	8004e9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e19e      	b.n	80051da <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e9c:	4b83      	ldr	r3, [pc, #524]	@ (80050ac <HAL_RCC_ClockConfig+0x224>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 030f 	and.w	r3, r3, #15
 8004ea4:	683a      	ldr	r2, [r7, #0]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d910      	bls.n	8004ecc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eaa:	4b80      	ldr	r3, [pc, #512]	@ (80050ac <HAL_RCC_ClockConfig+0x224>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f023 020f 	bic.w	r2, r3, #15
 8004eb2:	497e      	ldr	r1, [pc, #504]	@ (80050ac <HAL_RCC_ClockConfig+0x224>)
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eba:	4b7c      	ldr	r3, [pc, #496]	@ (80050ac <HAL_RCC_ClockConfig+0x224>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 030f 	and.w	r3, r3, #15
 8004ec2:	683a      	ldr	r2, [r7, #0]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d001      	beq.n	8004ecc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e186      	b.n	80051da <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0310 	and.w	r3, r3, #16
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d012      	beq.n	8004efe <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	695a      	ldr	r2, [r3, #20]
 8004edc:	4b74      	ldr	r3, [pc, #464]	@ (80050b0 <HAL_RCC_ClockConfig+0x228>)
 8004ede:	6a1b      	ldr	r3, [r3, #32]
 8004ee0:	0a1b      	lsrs	r3, r3, #8
 8004ee2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d909      	bls.n	8004efe <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004eea:	4b71      	ldr	r3, [pc, #452]	@ (80050b0 <HAL_RCC_ClockConfig+0x228>)
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	021b      	lsls	r3, r3, #8
 8004ef8:	496d      	ldr	r1, [pc, #436]	@ (80050b0 <HAL_RCC_ClockConfig+0x228>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0308 	and.w	r3, r3, #8
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d012      	beq.n	8004f30 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	691a      	ldr	r2, [r3, #16]
 8004f0e:	4b68      	ldr	r3, [pc, #416]	@ (80050b0 <HAL_RCC_ClockConfig+0x228>)
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	091b      	lsrs	r3, r3, #4
 8004f14:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d909      	bls.n	8004f30 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004f1c:	4b64      	ldr	r3, [pc, #400]	@ (80050b0 <HAL_RCC_ClockConfig+0x228>)
 8004f1e:	6a1b      	ldr	r3, [r3, #32]
 8004f20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	011b      	lsls	r3, r3, #4
 8004f2a:	4961      	ldr	r1, [pc, #388]	@ (80050b0 <HAL_RCC_ClockConfig+0x228>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0304 	and.w	r3, r3, #4
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d010      	beq.n	8004f5e <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	68da      	ldr	r2, [r3, #12]
 8004f40:	4b5b      	ldr	r3, [pc, #364]	@ (80050b0 <HAL_RCC_ClockConfig+0x228>)
 8004f42:	6a1b      	ldr	r3, [r3, #32]
 8004f44:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d908      	bls.n	8004f5e <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004f4c:	4b58      	ldr	r3, [pc, #352]	@ (80050b0 <HAL_RCC_ClockConfig+0x228>)
 8004f4e:	6a1b      	ldr	r3, [r3, #32]
 8004f50:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	4955      	ldr	r1, [pc, #340]	@ (80050b0 <HAL_RCC_ClockConfig+0x228>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d010      	beq.n	8004f8c <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	689a      	ldr	r2, [r3, #8]
 8004f6e:	4b50      	ldr	r3, [pc, #320]	@ (80050b0 <HAL_RCC_ClockConfig+0x228>)
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	f003 030f 	and.w	r3, r3, #15
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d908      	bls.n	8004f8c <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004f7a:	4b4d      	ldr	r3, [pc, #308]	@ (80050b0 <HAL_RCC_ClockConfig+0x228>)
 8004f7c:	6a1b      	ldr	r3, [r3, #32]
 8004f7e:	f023 020f 	bic.w	r2, r3, #15
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	494a      	ldr	r1, [pc, #296]	@ (80050b0 <HAL_RCC_ClockConfig+0x228>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f000 8093 	beq.w	80050c0 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	2b03      	cmp	r3, #3
 8004fa0:	d107      	bne.n	8004fb2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004fa2:	4b43      	ldr	r3, [pc, #268]	@ (80050b0 <HAL_RCC_ClockConfig+0x228>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d121      	bne.n	8004ff2 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e113      	b.n	80051da <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d107      	bne.n	8004fca <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fba:	4b3d      	ldr	r3, [pc, #244]	@ (80050b0 <HAL_RCC_ClockConfig+0x228>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d115      	bne.n	8004ff2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e107      	b.n	80051da <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d107      	bne.n	8004fe2 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004fd2:	4b37      	ldr	r3, [pc, #220]	@ (80050b0 <HAL_RCC_ClockConfig+0x228>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d109      	bne.n	8004ff2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e0fb      	b.n	80051da <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fe2:	4b33      	ldr	r3, [pc, #204]	@ (80050b0 <HAL_RCC_ClockConfig+0x228>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e0f3      	b.n	80051da <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8004ff2:	4b2f      	ldr	r3, [pc, #188]	@ (80050b0 <HAL_RCC_ClockConfig+0x228>)
 8004ff4:	69db      	ldr	r3, [r3, #28]
 8004ff6:	f023 0203 	bic.w	r2, r3, #3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	492c      	ldr	r1, [pc, #176]	@ (80050b0 <HAL_RCC_ClockConfig+0x228>)
 8005000:	4313      	orrs	r3, r2
 8005002:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005004:	f7fd f8ce 	bl	80021a4 <HAL_GetTick>
 8005008:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	2b03      	cmp	r3, #3
 8005010:	d112      	bne.n	8005038 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005012:	e00a      	b.n	800502a <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005014:	f7fd f8c6 	bl	80021a4 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005022:	4293      	cmp	r3, r2
 8005024:	d901      	bls.n	800502a <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e0d7      	b.n	80051da <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800502a:	4b21      	ldr	r3, [pc, #132]	@ (80050b0 <HAL_RCC_ClockConfig+0x228>)
 800502c:	69db      	ldr	r3, [r3, #28]
 800502e:	f003 0318 	and.w	r3, r3, #24
 8005032:	2b18      	cmp	r3, #24
 8005034:	d1ee      	bne.n	8005014 <HAL_RCC_ClockConfig+0x18c>
 8005036:	e043      	b.n	80050c0 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	2b02      	cmp	r3, #2
 800503e:	d112      	bne.n	8005066 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005040:	e00a      	b.n	8005058 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005042:	f7fd f8af 	bl	80021a4 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005050:	4293      	cmp	r3, r2
 8005052:	d901      	bls.n	8005058 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e0c0      	b.n	80051da <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005058:	4b15      	ldr	r3, [pc, #84]	@ (80050b0 <HAL_RCC_ClockConfig+0x228>)
 800505a:	69db      	ldr	r3, [r3, #28]
 800505c:	f003 0318 	and.w	r3, r3, #24
 8005060:	2b10      	cmp	r3, #16
 8005062:	d1ee      	bne.n	8005042 <HAL_RCC_ClockConfig+0x1ba>
 8005064:	e02c      	b.n	80050c0 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	2b01      	cmp	r3, #1
 800506c:	d122      	bne.n	80050b4 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800506e:	e00a      	b.n	8005086 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005070:	f7fd f898 	bl	80021a4 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800507e:	4293      	cmp	r3, r2
 8005080:	d901      	bls.n	8005086 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e0a9      	b.n	80051da <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8005086:	4b0a      	ldr	r3, [pc, #40]	@ (80050b0 <HAL_RCC_ClockConfig+0x228>)
 8005088:	69db      	ldr	r3, [r3, #28]
 800508a:	f003 0318 	and.w	r3, r3, #24
 800508e:	2b08      	cmp	r3, #8
 8005090:	d1ee      	bne.n	8005070 <HAL_RCC_ClockConfig+0x1e8>
 8005092:	e015      	b.n	80050c0 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005094:	f7fd f886 	bl	80021a4 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d906      	bls.n	80050b4 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e097      	b.n	80051da <HAL_RCC_ClockConfig+0x352>
 80050aa:	bf00      	nop
 80050ac:	40022000 	.word	0x40022000
 80050b0:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80050b4:	4b4b      	ldr	r3, [pc, #300]	@ (80051e4 <HAL_RCC_ClockConfig+0x35c>)
 80050b6:	69db      	ldr	r3, [r3, #28]
 80050b8:	f003 0318 	and.w	r3, r3, #24
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1e9      	bne.n	8005094 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0302 	and.w	r3, r3, #2
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d010      	beq.n	80050ee <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689a      	ldr	r2, [r3, #8]
 80050d0:	4b44      	ldr	r3, [pc, #272]	@ (80051e4 <HAL_RCC_ClockConfig+0x35c>)
 80050d2:	6a1b      	ldr	r3, [r3, #32]
 80050d4:	f003 030f 	and.w	r3, r3, #15
 80050d8:	429a      	cmp	r2, r3
 80050da:	d208      	bcs.n	80050ee <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80050dc:	4b41      	ldr	r3, [pc, #260]	@ (80051e4 <HAL_RCC_ClockConfig+0x35c>)
 80050de:	6a1b      	ldr	r3, [r3, #32]
 80050e0:	f023 020f 	bic.w	r2, r3, #15
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	493e      	ldr	r1, [pc, #248]	@ (80051e4 <HAL_RCC_ClockConfig+0x35c>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050ee:	4b3e      	ldr	r3, [pc, #248]	@ (80051e8 <HAL_RCC_ClockConfig+0x360>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 030f 	and.w	r3, r3, #15
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d210      	bcs.n	800511e <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050fc:	4b3a      	ldr	r3, [pc, #232]	@ (80051e8 <HAL_RCC_ClockConfig+0x360>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f023 020f 	bic.w	r2, r3, #15
 8005104:	4938      	ldr	r1, [pc, #224]	@ (80051e8 <HAL_RCC_ClockConfig+0x360>)
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	4313      	orrs	r3, r2
 800510a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800510c:	4b36      	ldr	r3, [pc, #216]	@ (80051e8 <HAL_RCC_ClockConfig+0x360>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 030f 	and.w	r3, r3, #15
 8005114:	683a      	ldr	r2, [r7, #0]
 8005116:	429a      	cmp	r2, r3
 8005118:	d001      	beq.n	800511e <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e05d      	b.n	80051da <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0304 	and.w	r3, r3, #4
 8005126:	2b00      	cmp	r3, #0
 8005128:	d010      	beq.n	800514c <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	68da      	ldr	r2, [r3, #12]
 800512e:	4b2d      	ldr	r3, [pc, #180]	@ (80051e4 <HAL_RCC_ClockConfig+0x35c>)
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005136:	429a      	cmp	r2, r3
 8005138:	d208      	bcs.n	800514c <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800513a:	4b2a      	ldr	r3, [pc, #168]	@ (80051e4 <HAL_RCC_ClockConfig+0x35c>)
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	4927      	ldr	r1, [pc, #156]	@ (80051e4 <HAL_RCC_ClockConfig+0x35c>)
 8005148:	4313      	orrs	r3, r2
 800514a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0308 	and.w	r3, r3, #8
 8005154:	2b00      	cmp	r3, #0
 8005156:	d012      	beq.n	800517e <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	691a      	ldr	r2, [r3, #16]
 800515c:	4b21      	ldr	r3, [pc, #132]	@ (80051e4 <HAL_RCC_ClockConfig+0x35c>)
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	091b      	lsrs	r3, r3, #4
 8005162:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005166:	429a      	cmp	r2, r3
 8005168:	d209      	bcs.n	800517e <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800516a:	4b1e      	ldr	r3, [pc, #120]	@ (80051e4 <HAL_RCC_ClockConfig+0x35c>)
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	011b      	lsls	r3, r3, #4
 8005178:	491a      	ldr	r1, [pc, #104]	@ (80051e4 <HAL_RCC_ClockConfig+0x35c>)
 800517a:	4313      	orrs	r3, r2
 800517c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0310 	and.w	r3, r3, #16
 8005186:	2b00      	cmp	r3, #0
 8005188:	d012      	beq.n	80051b0 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	695a      	ldr	r2, [r3, #20]
 800518e:	4b15      	ldr	r3, [pc, #84]	@ (80051e4 <HAL_RCC_ClockConfig+0x35c>)
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	0a1b      	lsrs	r3, r3, #8
 8005194:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005198:	429a      	cmp	r2, r3
 800519a:	d209      	bcs.n	80051b0 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800519c:	4b11      	ldr	r3, [pc, #68]	@ (80051e4 <HAL_RCC_ClockConfig+0x35c>)
 800519e:	6a1b      	ldr	r3, [r3, #32]
 80051a0:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	695b      	ldr	r3, [r3, #20]
 80051a8:	021b      	lsls	r3, r3, #8
 80051aa:	490e      	ldr	r1, [pc, #56]	@ (80051e4 <HAL_RCC_ClockConfig+0x35c>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80051b0:	f000 f822 	bl	80051f8 <HAL_RCC_GetSysClockFreq>
 80051b4:	4602      	mov	r2, r0
 80051b6:	4b0b      	ldr	r3, [pc, #44]	@ (80051e4 <HAL_RCC_ClockConfig+0x35c>)
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	f003 030f 	and.w	r3, r3, #15
 80051be:	490b      	ldr	r1, [pc, #44]	@ (80051ec <HAL_RCC_ClockConfig+0x364>)
 80051c0:	5ccb      	ldrb	r3, [r1, r3]
 80051c2:	fa22 f303 	lsr.w	r3, r2, r3
 80051c6:	4a0a      	ldr	r2, [pc, #40]	@ (80051f0 <HAL_RCC_ClockConfig+0x368>)
 80051c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80051ca:	4b0a      	ldr	r3, [pc, #40]	@ (80051f4 <HAL_RCC_ClockConfig+0x36c>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7fc ff5e 	bl	8002090 <HAL_InitTick>
 80051d4:	4603      	mov	r3, r0
 80051d6:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80051d8:	7afb      	ldrb	r3, [r7, #11]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	44020c00 	.word	0x44020c00
 80051e8:	40022000 	.word	0x40022000
 80051ec:	080117dc 	.word	0x080117dc
 80051f0:	20000004 	.word	0x20000004
 80051f4:	20000024 	.word	0x20000024

080051f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b089      	sub	sp, #36	@ 0x24
 80051fc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80051fe:	4b8c      	ldr	r3, [pc, #560]	@ (8005430 <HAL_RCC_GetSysClockFreq+0x238>)
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	f003 0318 	and.w	r3, r3, #24
 8005206:	2b08      	cmp	r3, #8
 8005208:	d102      	bne.n	8005210 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800520a:	4b8a      	ldr	r3, [pc, #552]	@ (8005434 <HAL_RCC_GetSysClockFreq+0x23c>)
 800520c:	61fb      	str	r3, [r7, #28]
 800520e:	e107      	b.n	8005420 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005210:	4b87      	ldr	r3, [pc, #540]	@ (8005430 <HAL_RCC_GetSysClockFreq+0x238>)
 8005212:	69db      	ldr	r3, [r3, #28]
 8005214:	f003 0318 	and.w	r3, r3, #24
 8005218:	2b00      	cmp	r3, #0
 800521a:	d112      	bne.n	8005242 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800521c:	4b84      	ldr	r3, [pc, #528]	@ (8005430 <HAL_RCC_GetSysClockFreq+0x238>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0320 	and.w	r3, r3, #32
 8005224:	2b00      	cmp	r3, #0
 8005226:	d009      	beq.n	800523c <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005228:	4b81      	ldr	r3, [pc, #516]	@ (8005430 <HAL_RCC_GetSysClockFreq+0x238>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	08db      	lsrs	r3, r3, #3
 800522e:	f003 0303 	and.w	r3, r3, #3
 8005232:	4a81      	ldr	r2, [pc, #516]	@ (8005438 <HAL_RCC_GetSysClockFreq+0x240>)
 8005234:	fa22 f303 	lsr.w	r3, r2, r3
 8005238:	61fb      	str	r3, [r7, #28]
 800523a:	e0f1      	b.n	8005420 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 800523c:	4b7e      	ldr	r3, [pc, #504]	@ (8005438 <HAL_RCC_GetSysClockFreq+0x240>)
 800523e:	61fb      	str	r3, [r7, #28]
 8005240:	e0ee      	b.n	8005420 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005242:	4b7b      	ldr	r3, [pc, #492]	@ (8005430 <HAL_RCC_GetSysClockFreq+0x238>)
 8005244:	69db      	ldr	r3, [r3, #28]
 8005246:	f003 0318 	and.w	r3, r3, #24
 800524a:	2b10      	cmp	r3, #16
 800524c:	d102      	bne.n	8005254 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800524e:	4b7b      	ldr	r3, [pc, #492]	@ (800543c <HAL_RCC_GetSysClockFreq+0x244>)
 8005250:	61fb      	str	r3, [r7, #28]
 8005252:	e0e5      	b.n	8005420 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005254:	4b76      	ldr	r3, [pc, #472]	@ (8005430 <HAL_RCC_GetSysClockFreq+0x238>)
 8005256:	69db      	ldr	r3, [r3, #28]
 8005258:	f003 0318 	and.w	r3, r3, #24
 800525c:	2b18      	cmp	r3, #24
 800525e:	f040 80dd 	bne.w	800541c <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005262:	4b73      	ldr	r3, [pc, #460]	@ (8005430 <HAL_RCC_GetSysClockFreq+0x238>)
 8005264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005266:	f003 0303 	and.w	r3, r3, #3
 800526a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800526c:	4b70      	ldr	r3, [pc, #448]	@ (8005430 <HAL_RCC_GetSysClockFreq+0x238>)
 800526e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005270:	0a1b      	lsrs	r3, r3, #8
 8005272:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005276:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005278:	4b6d      	ldr	r3, [pc, #436]	@ (8005430 <HAL_RCC_GetSysClockFreq+0x238>)
 800527a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800527c:	091b      	lsrs	r3, r3, #4
 800527e:	f003 0301 	and.w	r3, r3, #1
 8005282:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8005284:	4b6a      	ldr	r3, [pc, #424]	@ (8005430 <HAL_RCC_GetSysClockFreq+0x238>)
 8005286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8005288:	08db      	lsrs	r3, r3, #3
 800528a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	fb02 f303 	mul.w	r3, r2, r3
 8005294:	ee07 3a90 	vmov	s15, r3
 8005298:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800529c:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f000 80b7 	beq.w	8005416 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d003      	beq.n	80052b6 <HAL_RCC_GetSysClockFreq+0xbe>
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	2b03      	cmp	r3, #3
 80052b2:	d056      	beq.n	8005362 <HAL_RCC_GetSysClockFreq+0x16a>
 80052b4:	e077      	b.n	80053a6 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80052b6:	4b5e      	ldr	r3, [pc, #376]	@ (8005430 <HAL_RCC_GetSysClockFreq+0x238>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0320 	and.w	r3, r3, #32
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d02d      	beq.n	800531e <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80052c2:	4b5b      	ldr	r3, [pc, #364]	@ (8005430 <HAL_RCC_GetSysClockFreq+0x238>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	08db      	lsrs	r3, r3, #3
 80052c8:	f003 0303 	and.w	r3, r3, #3
 80052cc:	4a5a      	ldr	r2, [pc, #360]	@ (8005438 <HAL_RCC_GetSysClockFreq+0x240>)
 80052ce:	fa22 f303 	lsr.w	r3, r2, r3
 80052d2:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	ee07 3a90 	vmov	s15, r3
 80052da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	ee07 3a90 	vmov	s15, r3
 80052e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052ec:	4b50      	ldr	r3, [pc, #320]	@ (8005430 <HAL_RCC_GetSysClockFreq+0x238>)
 80052ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052f4:	ee07 3a90 	vmov	s15, r3
 80052f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80052fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8005300:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8005440 <HAL_RCC_GetSysClockFreq+0x248>
 8005304:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005308:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800530c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005310:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005318:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 800531c:	e065      	b.n	80053ea <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	ee07 3a90 	vmov	s15, r3
 8005324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005328:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8005444 <HAL_RCC_GetSysClockFreq+0x24c>
 800532c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005330:	4b3f      	ldr	r3, [pc, #252]	@ (8005430 <HAL_RCC_GetSysClockFreq+0x238>)
 8005332:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005334:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005338:	ee07 3a90 	vmov	s15, r3
 800533c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8005340:	ed97 6a02 	vldr	s12, [r7, #8]
 8005344:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005440 <HAL_RCC_GetSysClockFreq+0x248>
 8005348:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800534c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8005350:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005354:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005358:	ee67 7a27 	vmul.f32	s15, s14, s15
 800535c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8005360:	e043      	b.n	80053ea <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	ee07 3a90 	vmov	s15, r3
 8005368:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800536c:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8005448 <HAL_RCC_GetSysClockFreq+0x250>
 8005370:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005374:	4b2e      	ldr	r3, [pc, #184]	@ (8005430 <HAL_RCC_GetSysClockFreq+0x238>)
 8005376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005378:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800537c:	ee07 3a90 	vmov	s15, r3
 8005380:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005384:	ed97 6a02 	vldr	s12, [r7, #8]
 8005388:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8005440 <HAL_RCC_GetSysClockFreq+0x248>
 800538c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005390:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005394:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005398:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800539c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053a0:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80053a4:	e021      	b.n	80053ea <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	ee07 3a90 	vmov	s15, r3
 80053ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053b0:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800544c <HAL_RCC_GetSysClockFreq+0x254>
 80053b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053b8:	4b1d      	ldr	r3, [pc, #116]	@ (8005430 <HAL_RCC_GetSysClockFreq+0x238>)
 80053ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053c0:	ee07 3a90 	vmov	s15, r3
 80053c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80053c8:	ed97 6a02 	vldr	s12, [r7, #8]
 80053cc:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8005440 <HAL_RCC_GetSysClockFreq+0x248>
 80053d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80053d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053e4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80053e8:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80053ea:	4b11      	ldr	r3, [pc, #68]	@ (8005430 <HAL_RCC_GetSysClockFreq+0x238>)
 80053ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053ee:	0a5b      	lsrs	r3, r3, #9
 80053f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053f4:	3301      	adds	r3, #1
 80053f6:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	ee07 3a90 	vmov	s15, r3
 80053fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005402:	edd7 6a06 	vldr	s13, [r7, #24]
 8005406:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800540a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800540e:	ee17 3a90 	vmov	r3, s15
 8005412:	61fb      	str	r3, [r7, #28]
 8005414:	e004      	b.n	8005420 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8005416:	2300      	movs	r3, #0
 8005418:	61fb      	str	r3, [r7, #28]
 800541a:	e001      	b.n	8005420 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 800541c:	4b06      	ldr	r3, [pc, #24]	@ (8005438 <HAL_RCC_GetSysClockFreq+0x240>)
 800541e:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8005420:	69fb      	ldr	r3, [r7, #28]
}
 8005422:	4618      	mov	r0, r3
 8005424:	3724      	adds	r7, #36	@ 0x24
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	44020c00 	.word	0x44020c00
 8005434:	003d0900 	.word	0x003d0900
 8005438:	03d09000 	.word	0x03d09000
 800543c:	007a1200 	.word	0x007a1200
 8005440:	46000000 	.word	0x46000000
 8005444:	4c742400 	.word	0x4c742400
 8005448:	4af42400 	.word	0x4af42400
 800544c:	4a742400 	.word	0x4a742400

08005450 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8005454:	f7ff fed0 	bl	80051f8 <HAL_RCC_GetSysClockFreq>
 8005458:	4602      	mov	r2, r0
 800545a:	4b08      	ldr	r3, [pc, #32]	@ (800547c <HAL_RCC_GetHCLKFreq+0x2c>)
 800545c:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800545e:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8005462:	4907      	ldr	r1, [pc, #28]	@ (8005480 <HAL_RCC_GetHCLKFreq+0x30>)
 8005464:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8005466:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800546a:	fa22 f303 	lsr.w	r3, r2, r3
 800546e:	4a05      	ldr	r2, [pc, #20]	@ (8005484 <HAL_RCC_GetHCLKFreq+0x34>)
 8005470:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8005472:	4b04      	ldr	r3, [pc, #16]	@ (8005484 <HAL_RCC_GetHCLKFreq+0x34>)
 8005474:	681b      	ldr	r3, [r3, #0]
}
 8005476:	4618      	mov	r0, r3
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	44020c00 	.word	0x44020c00
 8005480:	080117dc 	.word	0x080117dc
 8005484:	20000004 	.word	0x20000004

08005488 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 800548c:	f7ff ffe0 	bl	8005450 <HAL_RCC_GetHCLKFreq>
 8005490:	4602      	mov	r2, r0
 8005492:	4b06      	ldr	r3, [pc, #24]	@ (80054ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8005494:	6a1b      	ldr	r3, [r3, #32]
 8005496:	091b      	lsrs	r3, r3, #4
 8005498:	f003 0307 	and.w	r3, r3, #7
 800549c:	4904      	ldr	r1, [pc, #16]	@ (80054b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800549e:	5ccb      	ldrb	r3, [r1, r3]
 80054a0:	f003 031f 	and.w	r3, r3, #31
 80054a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	44020c00 	.word	0x44020c00
 80054b0:	080117ec 	.word	0x080117ec

080054b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 80054b8:	f7ff ffca 	bl	8005450 <HAL_RCC_GetHCLKFreq>
 80054bc:	4602      	mov	r2, r0
 80054be:	4b06      	ldr	r3, [pc, #24]	@ (80054d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	0a1b      	lsrs	r3, r3, #8
 80054c4:	f003 0307 	and.w	r3, r3, #7
 80054c8:	4904      	ldr	r1, [pc, #16]	@ (80054dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80054ca:	5ccb      	ldrb	r3, [r1, r3]
 80054cc:	f003 031f 	and.w	r3, r3, #31
 80054d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	44020c00 	.word	0x44020c00
 80054dc:	080117ec 	.word	0x080117ec

080054e0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80054e4:	f7ff ffb4 	bl	8005450 <HAL_RCC_GetHCLKFreq>
 80054e8:	4602      	mov	r2, r0
 80054ea:	4b06      	ldr	r3, [pc, #24]	@ (8005504 <HAL_RCC_GetPCLK3Freq+0x24>)
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	0b1b      	lsrs	r3, r3, #12
 80054f0:	f003 0307 	and.w	r3, r3, #7
 80054f4:	4904      	ldr	r1, [pc, #16]	@ (8005508 <HAL_RCC_GetPCLK3Freq+0x28>)
 80054f6:	5ccb      	ldrb	r3, [r1, r3]
 80054f8:	f003 031f 	and.w	r3, r3, #31
 80054fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005500:	4618      	mov	r0, r3
 8005502:	bd80      	pop	{r7, pc}
 8005504:	44020c00 	.word	0x44020c00
 8005508:	080117ec 	.word	0x080117ec

0800550c <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800550c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005510:	b0d8      	sub	sp, #352	@ 0x160
 8005512:	af00      	add	r7, sp, #0
 8005514:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005518:	2300      	movs	r3, #0
 800551a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800551e:	2300      	movs	r3, #0
 8005520:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005524:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552c:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8005530:	2500      	movs	r5, #0
 8005532:	ea54 0305 	orrs.w	r3, r4, r5
 8005536:	d00b      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8005538:	4bcd      	ldr	r3, [pc, #820]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800553a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800553e:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8005542:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005548:	4ac9      	ldr	r2, [pc, #804]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800554a:	430b      	orrs	r3, r1
 800554c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005550:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005558:	f002 0801 	and.w	r8, r2, #1
 800555c:	f04f 0900 	mov.w	r9, #0
 8005560:	ea58 0309 	orrs.w	r3, r8, r9
 8005564:	d042      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8005566:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800556a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800556c:	2b05      	cmp	r3, #5
 800556e:	d823      	bhi.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8005570:	a201      	add	r2, pc, #4	@ (adr r2, 8005578 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8005572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005576:	bf00      	nop
 8005578:	080055c1 	.word	0x080055c1
 800557c:	08005591 	.word	0x08005591
 8005580:	080055a5 	.word	0x080055a5
 8005584:	080055c1 	.word	0x080055c1
 8005588:	080055c1 	.word	0x080055c1
 800558c:	080055c1 	.word	0x080055c1
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005590:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005594:	3308      	adds	r3, #8
 8005596:	4618      	mov	r0, r3
 8005598:	f004 fee0 	bl	800a35c <RCCEx_PLL2_Config>
 800559c:	4603      	mov	r3, r0
 800559e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 80055a2:	e00e      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80055a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055a8:	3330      	adds	r3, #48	@ 0x30
 80055aa:	4618      	mov	r0, r3
 80055ac:	f004 ff6e 	bl	800a48c <RCCEx_PLL3_Config>
 80055b0:	4603      	mov	r3, r0
 80055b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 80055b6:	e004      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80055be:	e000      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 80055c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055c2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10c      	bne.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80055ca:	4ba9      	ldr	r3, [pc, #676]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80055cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80055d0:	f023 0107 	bic.w	r1, r3, #7
 80055d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055da:	4aa5      	ldr	r2, [pc, #660]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80055dc:	430b      	orrs	r3, r1
 80055de:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80055e2:	e003      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80055e8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f4:	f002 0a02 	and.w	sl, r2, #2
 80055f8:	f04f 0b00 	mov.w	fp, #0
 80055fc:	ea5a 030b 	orrs.w	r3, sl, fp
 8005600:	f000 8088 	beq.w	8005714 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8005604:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005608:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800560a:	2b28      	cmp	r3, #40	@ 0x28
 800560c:	d868      	bhi.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800560e:	a201      	add	r2, pc, #4	@ (adr r2, 8005614 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8005610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005614:	080056e9 	.word	0x080056e9
 8005618:	080056e1 	.word	0x080056e1
 800561c:	080056e1 	.word	0x080056e1
 8005620:	080056e1 	.word	0x080056e1
 8005624:	080056e1 	.word	0x080056e1
 8005628:	080056e1 	.word	0x080056e1
 800562c:	080056e1 	.word	0x080056e1
 8005630:	080056e1 	.word	0x080056e1
 8005634:	080056b9 	.word	0x080056b9
 8005638:	080056e1 	.word	0x080056e1
 800563c:	080056e1 	.word	0x080056e1
 8005640:	080056e1 	.word	0x080056e1
 8005644:	080056e1 	.word	0x080056e1
 8005648:	080056e1 	.word	0x080056e1
 800564c:	080056e1 	.word	0x080056e1
 8005650:	080056e1 	.word	0x080056e1
 8005654:	080056cd 	.word	0x080056cd
 8005658:	080056e1 	.word	0x080056e1
 800565c:	080056e1 	.word	0x080056e1
 8005660:	080056e1 	.word	0x080056e1
 8005664:	080056e1 	.word	0x080056e1
 8005668:	080056e1 	.word	0x080056e1
 800566c:	080056e1 	.word	0x080056e1
 8005670:	080056e1 	.word	0x080056e1
 8005674:	080056e9 	.word	0x080056e9
 8005678:	080056e1 	.word	0x080056e1
 800567c:	080056e1 	.word	0x080056e1
 8005680:	080056e1 	.word	0x080056e1
 8005684:	080056e1 	.word	0x080056e1
 8005688:	080056e1 	.word	0x080056e1
 800568c:	080056e1 	.word	0x080056e1
 8005690:	080056e1 	.word	0x080056e1
 8005694:	080056e9 	.word	0x080056e9
 8005698:	080056e1 	.word	0x080056e1
 800569c:	080056e1 	.word	0x080056e1
 80056a0:	080056e1 	.word	0x080056e1
 80056a4:	080056e1 	.word	0x080056e1
 80056a8:	080056e1 	.word	0x080056e1
 80056ac:	080056e1 	.word	0x080056e1
 80056b0:	080056e1 	.word	0x080056e1
 80056b4:	080056e9 	.word	0x080056e9
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80056b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056bc:	3308      	adds	r3, #8
 80056be:	4618      	mov	r0, r3
 80056c0:	f004 fe4c 	bl	800a35c <RCCEx_PLL2_Config>
 80056c4:	4603      	mov	r3, r0
 80056c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80056ca:	e00e      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80056cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056d0:	3330      	adds	r3, #48	@ 0x30
 80056d2:	4618      	mov	r0, r3
 80056d4:	f004 feda 	bl	800a48c <RCCEx_PLL3_Config>
 80056d8:	4603      	mov	r3, r0
 80056da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80056de:	e004      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80056e6:	e000      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 80056e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056ea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10c      	bne.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80056f2:	4b5f      	ldr	r3, [pc, #380]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80056f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80056f8:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80056fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005700:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005702:	4a5b      	ldr	r2, [pc, #364]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005704:	430b      	orrs	r3, r1
 8005706:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800570a:	e003      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800570c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005710:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005714:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571c:	f002 0304 	and.w	r3, r2, #4
 8005720:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8005724:	2300      	movs	r3, #0
 8005726:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800572a:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 800572e:	460b      	mov	r3, r1
 8005730:	4313      	orrs	r3, r2
 8005732:	d04e      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8005734:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005738:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800573a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800573e:	d02c      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8005740:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005744:	d825      	bhi.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005746:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800574a:	d028      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x292>
 800574c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005750:	d81f      	bhi.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005752:	2bc0      	cmp	r3, #192	@ 0xc0
 8005754:	d025      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8005756:	2bc0      	cmp	r3, #192	@ 0xc0
 8005758:	d81b      	bhi.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800575a:	2b80      	cmp	r3, #128	@ 0x80
 800575c:	d00f      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x272>
 800575e:	2b80      	cmp	r3, #128	@ 0x80
 8005760:	d817      	bhi.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005762:	2b00      	cmp	r3, #0
 8005764:	d01f      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8005766:	2b40      	cmp	r3, #64	@ 0x40
 8005768:	d113      	bne.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800576a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800576e:	3308      	adds	r3, #8
 8005770:	4618      	mov	r0, r3
 8005772:	f004 fdf3 	bl	800a35c <RCCEx_PLL2_Config>
 8005776:	4603      	mov	r3, r0
 8005778:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 800577c:	e014      	b.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800577e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005782:	3330      	adds	r3, #48	@ 0x30
 8005784:	4618      	mov	r0, r3
 8005786:	f004 fe81 	bl	800a48c <RCCEx_PLL3_Config>
 800578a:	4603      	mov	r3, r0
 800578c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8005790:	e00a      	b.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005798:	e006      	b.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800579a:	bf00      	nop
 800579c:	e004      	b.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800579e:	bf00      	nop
 80057a0:	e002      	b.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80057a2:	bf00      	nop
 80057a4:	e000      	b.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80057a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057a8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10c      	bne.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80057b0:	4b2f      	ldr	r3, [pc, #188]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80057b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80057b6:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80057ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057c0:	4a2b      	ldr	r2, [pc, #172]	@ (8005870 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80057c2:	430b      	orrs	r3, r1
 80057c4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80057c8:	e003      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80057ce:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80057d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057da:	f002 0308 	and.w	r3, r2, #8
 80057de:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80057e2:	2300      	movs	r3, #0
 80057e4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80057e8:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 80057ec:	460b      	mov	r3, r1
 80057ee:	4313      	orrs	r3, r2
 80057f0:	d056      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 80057f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057f8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80057fc:	d031      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x356>
 80057fe:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005802:	d82a      	bhi.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005804:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005808:	d02d      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800580a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800580e:	d824      	bhi.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005810:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005814:	d029      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8005816:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800581a:	d81e      	bhi.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800581c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005820:	d011      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8005822:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005826:	d818      	bhi.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005828:	2b00      	cmp	r3, #0
 800582a:	d023      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800582c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005830:	d113      	bne.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005832:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005836:	3308      	adds	r3, #8
 8005838:	4618      	mov	r0, r3
 800583a:	f004 fd8f 	bl	800a35c <RCCEx_PLL2_Config>
 800583e:	4603      	mov	r3, r0
 8005840:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8005844:	e017      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005846:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800584a:	3330      	adds	r3, #48	@ 0x30
 800584c:	4618      	mov	r0, r3
 800584e:	f004 fe1d 	bl	800a48c <RCCEx_PLL3_Config>
 8005852:	4603      	mov	r3, r0
 8005854:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8005858:	e00d      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005860:	e009      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8005862:	bf00      	nop
 8005864:	e007      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8005866:	bf00      	nop
 8005868:	e005      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800586a:	bf00      	nop
 800586c:	e003      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800586e:	bf00      	nop
 8005870:	44020c00 	.word	0x44020c00
        break;
 8005874:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005876:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10c      	bne.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800587e:	4bbb      	ldr	r3, [pc, #748]	@ (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005880:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005884:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8005888:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800588c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800588e:	4ab7      	ldr	r2, [pc, #732]	@ (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005890:	430b      	orrs	r3, r1
 8005892:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005896:	e003      	b.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005898:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800589c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80058a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a8:	f002 0310 	and.w	r3, r2, #16
 80058ac:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80058b0:	2300      	movs	r3, #0
 80058b2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80058b6:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 80058ba:	460b      	mov	r3, r1
 80058bc:	4313      	orrs	r3, r2
 80058be:	d053      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 80058c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058c6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80058ca:	d031      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80058cc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80058d0:	d82a      	bhi.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80058d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058d6:	d02d      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80058d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058dc:	d824      	bhi.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80058de:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80058e2:	d029      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80058e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80058e8:	d81e      	bhi.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80058ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058ee:	d011      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80058f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058f4:	d818      	bhi.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d020      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x430>
 80058fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058fe:	d113      	bne.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005900:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005904:	3308      	adds	r3, #8
 8005906:	4618      	mov	r0, r3
 8005908:	f004 fd28 	bl	800a35c <RCCEx_PLL2_Config>
 800590c:	4603      	mov	r3, r0
 800590e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8005912:	e014      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005914:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005918:	3330      	adds	r3, #48	@ 0x30
 800591a:	4618      	mov	r0, r3
 800591c:	f004 fdb6 	bl	800a48c <RCCEx_PLL3_Config>
 8005920:	4603      	mov	r3, r0
 8005922:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8005926:	e00a      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800592e:	e006      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005930:	bf00      	nop
 8005932:	e004      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005934:	bf00      	nop
 8005936:	e002      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005938:	bf00      	nop
 800593a:	e000      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800593c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800593e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10c      	bne.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005946:	4b89      	ldr	r3, [pc, #548]	@ (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005948:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800594c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005950:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005954:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005956:	4a85      	ldr	r2, [pc, #532]	@ (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005958:	430b      	orrs	r3, r1
 800595a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800595e:	e003      	b.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005960:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005964:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005968:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800596c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005970:	f002 0320 	and.w	r3, r2, #32
 8005974:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8005978:	2300      	movs	r3, #0
 800597a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800597e:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 8005982:	460b      	mov	r3, r1
 8005984:	4313      	orrs	r3, r2
 8005986:	d053      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8005988:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800598c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800598e:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8005992:	d031      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8005994:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8005998:	d82a      	bhi.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800599a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800599e:	d02d      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80059a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059a4:	d824      	bhi.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80059a6:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80059aa:	d029      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 80059ac:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80059b0:	d81e      	bhi.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80059b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059b6:	d011      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80059b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059bc:	d818      	bhi.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d020      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 80059c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059c6:	d113      	bne.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80059c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059cc:	3308      	adds	r3, #8
 80059ce:	4618      	mov	r0, r3
 80059d0:	f004 fcc4 	bl	800a35c <RCCEx_PLL2_Config>
 80059d4:	4603      	mov	r3, r0
 80059d6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80059da:	e014      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80059dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059e0:	3330      	adds	r3, #48	@ 0x30
 80059e2:	4618      	mov	r0, r3
 80059e4:	f004 fd52 	bl	800a48c <RCCEx_PLL3_Config>
 80059e8:	4603      	mov	r3, r0
 80059ea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80059ee:	e00a      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80059f6:	e006      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80059f8:	bf00      	nop
 80059fa:	e004      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80059fc:	bf00      	nop
 80059fe:	e002      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005a00:	bf00      	nop
 8005a02:	e000      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005a04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a06:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d10c      	bne.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8005a0e:	4b57      	ldr	r3, [pc, #348]	@ (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005a10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005a14:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8005a18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a1e:	4a53      	ldr	r2, [pc, #332]	@ (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005a20:	430b      	orrs	r3, r1
 8005a22:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005a26:	e003      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a28:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005a2c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005a30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a38:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005a3c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8005a40:	2300      	movs	r3, #0
 8005a42:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8005a46:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	d053      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8005a50:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a56:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005a5a:	d031      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8005a5c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005a60:	d82a      	bhi.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005a62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a66:	d02d      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8005a68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a6c:	d824      	bhi.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005a6e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005a72:	d029      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005a74:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005a78:	d81e      	bhi.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005a7a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005a7e:	d011      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8005a80:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005a84:	d818      	bhi.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d020      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005a8a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005a8e:	d113      	bne.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a90:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a94:	3308      	adds	r3, #8
 8005a96:	4618      	mov	r0, r3
 8005a98:	f004 fc60 	bl	800a35c <RCCEx_PLL2_Config>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8005aa2:	e014      	b.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005aa4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005aa8:	3330      	adds	r3, #48	@ 0x30
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f004 fcee 	bl	800a48c <RCCEx_PLL3_Config>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8005ab6:	e00a      	b.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005abe:	e006      	b.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005ac0:	bf00      	nop
 8005ac2:	e004      	b.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005ac4:	bf00      	nop
 8005ac6:	e002      	b.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005ac8:	bf00      	nop
 8005aca:	e000      	b.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005acc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ace:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d10c      	bne.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8005ad6:	4b25      	ldr	r3, [pc, #148]	@ (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005ad8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005adc:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8005ae0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ae4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ae6:	4a21      	ldr	r2, [pc, #132]	@ (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005ae8:	430b      	orrs	r3, r1
 8005aea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005aee:	e003      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005af0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005af4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005af8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b00:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005b04:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005b08:	2300      	movs	r3, #0
 8005b0a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8005b0e:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 8005b12:	460b      	mov	r3, r1
 8005b14:	4313      	orrs	r3, r2
 8005b16:	d055      	beq.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8005b18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b1e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005b22:	d033      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x680>
 8005b24:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005b28:	d82c      	bhi.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005b2a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005b2e:	d02f      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8005b30:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005b34:	d826      	bhi.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005b36:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005b3a:	d02b      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8005b3c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005b40:	d820      	bhi.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005b42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b46:	d013      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005b48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b4c:	d81a      	bhi.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d022      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8005b52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b56:	d115      	bne.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b58:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b5c:	3308      	adds	r3, #8
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f004 fbfc 	bl	800a35c <RCCEx_PLL2_Config>
 8005b64:	4603      	mov	r3, r0
 8005b66:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8005b6a:	e016      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8005b6c:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b70:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b74:	3330      	adds	r3, #48	@ 0x30
 8005b76:	4618      	mov	r0, r3
 8005b78:	f004 fc88 	bl	800a48c <RCCEx_PLL3_Config>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8005b82:	e00a      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005b8a:	e006      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005b8c:	bf00      	nop
 8005b8e:	e004      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005b90:	bf00      	nop
 8005b92:	e002      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005b94:	bf00      	nop
 8005b96:	e000      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005b98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b9a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d10c      	bne.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8005ba2:	4bbb      	ldr	r3, [pc, #748]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005ba4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005ba8:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005bac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005bb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005bb2:	4ab7      	ldr	r2, [pc, #732]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005bb4:	430b      	orrs	r3, r1
 8005bb6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005bba:	e003      	b.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bbc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005bc0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8005bc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bcc:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8005bd0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8005bda:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8005bde:	460b      	mov	r3, r1
 8005be0:	4313      	orrs	r3, r2
 8005be2:	d053      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8005be4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005be8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005bea:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005bee:	d031      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8005bf0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005bf4:	d82a      	bhi.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005bf6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005bfa:	d02d      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8005bfc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c00:	d824      	bhi.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005c02:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005c06:	d029      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x750>
 8005c08:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005c0c:	d81e      	bhi.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005c0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c12:	d011      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8005c14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c18:	d818      	bhi.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d020      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8005c1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c22:	d113      	bne.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005c24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c28:	3308      	adds	r3, #8
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f004 fb96 	bl	800a35c <RCCEx_PLL2_Config>
 8005c30:	4603      	mov	r3, r0
 8005c32:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8005c36:	e014      	b.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005c38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c3c:	3330      	adds	r3, #48	@ 0x30
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f004 fc24 	bl	800a48c <RCCEx_PLL3_Config>
 8005c44:	4603      	mov	r3, r0
 8005c46:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8005c4a:	e00a      	b.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005c52:	e006      	b.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005c54:	bf00      	nop
 8005c56:	e004      	b.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005c58:	bf00      	nop
 8005c5a:	e002      	b.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005c5c:	bf00      	nop
 8005c5e:	e000      	b.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005c60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c62:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d10c      	bne.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8005c6a:	4b89      	ldr	r3, [pc, #548]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005c6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005c70:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005c74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c7a:	4a85      	ldr	r2, [pc, #532]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005c7c:	430b      	orrs	r3, r1
 8005c7e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005c82:	e003      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c84:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005c88:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8005c8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c94:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8005c98:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005ca2:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	d055      	beq.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8005cac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005cb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cb4:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8005cb8:	d031      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x812>
 8005cba:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8005cbe:	d82a      	bhi.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005cc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cc4:	d02d      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x816>
 8005cc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cca:	d824      	bhi.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005ccc:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8005cd0:	d029      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8005cd2:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8005cd6:	d81e      	bhi.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005cd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005cdc:	d011      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8005cde:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ce2:	d818      	bhi.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d020      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8005ce8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005cec:	d113      	bne.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005cee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005cf2:	3308      	adds	r3, #8
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f004 fb31 	bl	800a35c <RCCEx_PLL2_Config>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8005d00:	e014      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005d02:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d06:	3330      	adds	r3, #48	@ 0x30
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f004 fbbf 	bl	800a48c <RCCEx_PLL3_Config>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8005d14:	e00a      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005d1c:	e006      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8005d1e:	bf00      	nop
 8005d20:	e004      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8005d22:	bf00      	nop
 8005d24:	e002      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8005d26:	bf00      	nop
 8005d28:	e000      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8005d2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d2c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d10d      	bne.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8005d34:	4b56      	ldr	r3, [pc, #344]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005d36:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005d3a:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 8005d3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d46:	4a52      	ldr	r2, [pc, #328]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005d48:	430b      	orrs	r3, r1
 8005d4a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005d4e:	e003      	b.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d50:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005d54:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8005d58:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d60:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005d64:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005d68:	2300      	movs	r3, #0
 8005d6a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005d6e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005d72:	460b      	mov	r3, r1
 8005d74:	4313      	orrs	r3, r2
 8005d76:	d044      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8005d78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d80:	2b05      	cmp	r3, #5
 8005d82:	d823      	bhi.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8005d84:	a201      	add	r2, pc, #4	@ (adr r2, 8005d8c <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8005d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d8a:	bf00      	nop
 8005d8c:	08005dd5 	.word	0x08005dd5
 8005d90:	08005da5 	.word	0x08005da5
 8005d94:	08005db9 	.word	0x08005db9
 8005d98:	08005dd5 	.word	0x08005dd5
 8005d9c:	08005dd5 	.word	0x08005dd5
 8005da0:	08005dd5 	.word	0x08005dd5
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005da4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005da8:	3308      	adds	r3, #8
 8005daa:	4618      	mov	r0, r3
 8005dac:	f004 fad6 	bl	800a35c <RCCEx_PLL2_Config>
 8005db0:	4603      	mov	r3, r0
 8005db2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8005db6:	e00e      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005db8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005dbc:	3330      	adds	r3, #48	@ 0x30
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f004 fb64 	bl	800a48c <RCCEx_PLL3_Config>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8005dca:	e004      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005dd2:	e000      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8005dd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dd6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10d      	bne.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8005dde:	4b2c      	ldr	r3, [pc, #176]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005de0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005de4:	f023 0107 	bic.w	r1, r3, #7
 8005de8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005dec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005df0:	4a27      	ldr	r2, [pc, #156]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005df2:	430b      	orrs	r3, r1
 8005df4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005df8:	e003      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dfa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005dfe:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8005e02:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e0a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005e0e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005e12:	2300      	movs	r3, #0
 8005e14:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005e18:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	d04f      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8005e22:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e2a:	2b50      	cmp	r3, #80	@ 0x50
 8005e2c:	d029      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8005e2e:	2b50      	cmp	r3, #80	@ 0x50
 8005e30:	d823      	bhi.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005e32:	2b40      	cmp	r3, #64	@ 0x40
 8005e34:	d027      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8005e36:	2b40      	cmp	r3, #64	@ 0x40
 8005e38:	d81f      	bhi.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005e3a:	2b30      	cmp	r3, #48	@ 0x30
 8005e3c:	d025      	beq.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8005e3e:	2b30      	cmp	r3, #48	@ 0x30
 8005e40:	d81b      	bhi.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005e42:	2b20      	cmp	r3, #32
 8005e44:	d00f      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005e46:	2b20      	cmp	r3, #32
 8005e48:	d817      	bhi.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d022      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8005e4e:	2b10      	cmp	r3, #16
 8005e50:	d113      	bne.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005e52:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e56:	3308      	adds	r3, #8
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f004 fa7f 	bl	800a35c <RCCEx_PLL2_Config>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8005e64:	e017      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005e66:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e6a:	3330      	adds	r3, #48	@ 0x30
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f004 fb0d 	bl	800a48c <RCCEx_PLL3_Config>
 8005e72:	4603      	mov	r3, r0
 8005e74:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8005e78:	e00d      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005e80:	e009      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8005e82:	bf00      	nop
 8005e84:	e007      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8005e86:	bf00      	nop
 8005e88:	e005      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8005e8a:	bf00      	nop
 8005e8c:	e003      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8005e8e:	bf00      	nop
 8005e90:	44020c00 	.word	0x44020c00
        break;
 8005e94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e96:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d10d      	bne.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8005e9e:	4baf      	ldr	r3, [pc, #700]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005ea0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005ea4:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8005ea8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eb0:	4aaa      	ldr	r2, [pc, #680]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005eb2:	430b      	orrs	r3, r1
 8005eb4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005eb8:	e003      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005ebe:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ec2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eca:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005ece:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005ed8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005edc:	460b      	mov	r3, r1
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	d055      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8005ee2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ee6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005eea:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005eee:	d031      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8005ef0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005ef4:	d82a      	bhi.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005ef6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005efa:	d02d      	beq.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8005efc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005f00:	d824      	bhi.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005f02:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005f06:	d029      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8005f08:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005f0c:	d81e      	bhi.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005f0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f12:	d011      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8005f14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f18:	d818      	bhi.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d020      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8005f1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f22:	d113      	bne.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005f24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f28:	3308      	adds	r3, #8
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f004 fa16 	bl	800a35c <RCCEx_PLL2_Config>
 8005f30:	4603      	mov	r3, r0
 8005f32:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8005f36:	e014      	b.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005f38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f3c:	3330      	adds	r3, #48	@ 0x30
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f004 faa4 	bl	800a48c <RCCEx_PLL3_Config>
 8005f44:	4603      	mov	r3, r0
 8005f46:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8005f4a:	e00a      	b.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005f52:	e006      	b.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005f54:	bf00      	nop
 8005f56:	e004      	b.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005f58:	bf00      	nop
 8005f5a:	e002      	b.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005f5c:	bf00      	nop
 8005f5e:	e000      	b.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005f60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f62:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d10d      	bne.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005f6a:	4b7c      	ldr	r3, [pc, #496]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f70:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005f74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f7c:	4a77      	ldr	r2, [pc, #476]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005f7e:	430b      	orrs	r3, r1
 8005f80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005f84:	e003      	b.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f86:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005f8a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f96:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005f9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005fa4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005fa8:	460b      	mov	r3, r1
 8005faa:	4313      	orrs	r3, r2
 8005fac:	d03d      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8005fae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fb6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005fba:	d01b      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8005fbc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005fc0:	d814      	bhi.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8005fc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005fc6:	d017      	beq.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8005fc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005fcc:	d80e      	bhi.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d014      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8005fd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fd6:	d109      	bne.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005fd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fdc:	3330      	adds	r3, #48	@ 0x30
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f004 fa54 	bl	800a48c <RCCEx_PLL3_Config>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8005fea:	e008      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005ff2:	e004      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005ff4:	bf00      	nop
 8005ff6:	e002      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005ff8:	bf00      	nop
 8005ffa:	e000      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005ffc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ffe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006002:	2b00      	cmp	r3, #0
 8006004:	d10d      	bne.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8006006:	4b55      	ldr	r3, [pc, #340]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006008:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800600c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006010:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006014:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006018:	4a50      	ldr	r2, [pc, #320]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800601a:	430b      	orrs	r3, r1
 800601c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006020:	e003      	b.n	800602a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006022:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006026:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800602a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800602e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006032:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006036:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800603a:	2300      	movs	r3, #0
 800603c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006040:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006044:	460b      	mov	r3, r1
 8006046:	4313      	orrs	r3, r2
 8006048:	d03d      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 800604a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800604e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006052:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006056:	d01b      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8006058:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800605c:	d814      	bhi.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800605e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006062:	d017      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8006064:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006068:	d80e      	bhi.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800606a:	2b00      	cmp	r3, #0
 800606c:	d014      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 800606e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006072:	d109      	bne.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006074:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006078:	3330      	adds	r3, #48	@ 0x30
 800607a:	4618      	mov	r0, r3
 800607c:	f004 fa06 	bl	800a48c <RCCEx_PLL3_Config>
 8006080:	4603      	mov	r3, r0
 8006082:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8006086:	e008      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800608e:	e004      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8006090:	bf00      	nop
 8006092:	e002      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8006094:	bf00      	nop
 8006096:	e000      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8006098:	bf00      	nop
    }

    if (ret == HAL_OK)
 800609a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d10d      	bne.n	80060be <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80060a2:	4b2e      	ldr	r3, [pc, #184]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80060a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80060a8:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80060ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060b4:	4a29      	ldr	r2, [pc, #164]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80060b6:	430b      	orrs	r3, r1
 80060b8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80060bc:	e003      	b.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060be:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80060c2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80060c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ce:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80060d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80060d6:	2300      	movs	r3, #0
 80060d8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80060dc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80060e0:	460b      	mov	r3, r1
 80060e2:	4313      	orrs	r3, r2
 80060e4:	d040      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 80060e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80060ee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80060f2:	d01b      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0xc20>
 80060f4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80060f8:	d814      	bhi.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 80060fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80060fe:	d017      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006100:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006104:	d80e      	bhi.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8006106:	2b00      	cmp	r3, #0
 8006108:	d014      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800610a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800610e:	d109      	bne.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006110:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006114:	3330      	adds	r3, #48	@ 0x30
 8006116:	4618      	mov	r0, r3
 8006118:	f004 f9b8 	bl	800a48c <RCCEx_PLL3_Config>
 800611c:	4603      	mov	r3, r0
 800611e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8006122:	e008      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800612a:	e004      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800612c:	bf00      	nop
 800612e:	e002      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8006130:	bf00      	nop
 8006132:	e000      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8006134:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006136:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800613a:	2b00      	cmp	r3, #0
 800613c:	d110      	bne.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800613e:	4b07      	ldr	r3, [pc, #28]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006140:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006144:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006148:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800614c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006150:	4a02      	ldr	r2, [pc, #8]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006152:	430b      	orrs	r3, r1
 8006154:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006158:	e006      	b.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800615a:	bf00      	nop
 800615c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006160:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006164:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006168:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800616c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006170:	2100      	movs	r1, #0
 8006172:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8006176:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800617a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800617e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006182:	460b      	mov	r3, r1
 8006184:	4313      	orrs	r3, r2
 8006186:	d03d      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8006188:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800618c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006190:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006194:	d01b      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8006196:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800619a:	d814      	bhi.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 800619c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80061a0:	d017      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 80061a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80061a6:	d80e      	bhi.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d014      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 80061ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80061b0:	d109      	bne.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80061b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061b6:	3330      	adds	r3, #48	@ 0x30
 80061b8:	4618      	mov	r0, r3
 80061ba:	f004 f967 	bl	800a48c <RCCEx_PLL3_Config>
 80061be:	4603      	mov	r3, r0
 80061c0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 80061c4:	e008      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80061cc:	e004      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80061ce:	bf00      	nop
 80061d0:	e002      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80061d2:	bf00      	nop
 80061d4:	e000      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80061d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061d8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10d      	bne.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80061e0:	4bbe      	ldr	r3, [pc, #760]	@ (80064dc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80061e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80061e6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80061ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80061f2:	4aba      	ldr	r2, [pc, #744]	@ (80064dc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80061f4:	430b      	orrs	r3, r1
 80061f6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80061fa:	e003      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061fc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006200:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8006204:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006210:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006214:	2300      	movs	r3, #0
 8006216:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800621a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800621e:	460b      	mov	r3, r1
 8006220:	4313      	orrs	r3, r2
 8006222:	d035      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8006224:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006228:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800622c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006230:	d015      	beq.n	800625e <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8006232:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006236:	d80e      	bhi.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006238:	2b00      	cmp	r3, #0
 800623a:	d012      	beq.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 800623c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006240:	d109      	bne.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006242:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006246:	3330      	adds	r3, #48	@ 0x30
 8006248:	4618      	mov	r0, r3
 800624a:	f004 f91f 	bl	800a48c <RCCEx_PLL3_Config>
 800624e:	4603      	mov	r3, r0
 8006250:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8006254:	e006      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800625c:	e002      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800625e:	bf00      	nop
 8006260:	e000      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8006262:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006264:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006268:	2b00      	cmp	r3, #0
 800626a:	d10d      	bne.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 800626c:	4b9b      	ldr	r3, [pc, #620]	@ (80064dc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800626e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006272:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8006276:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800627a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800627e:	4a97      	ldr	r2, [pc, #604]	@ (80064dc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006280:	430b      	orrs	r3, r1
 8006282:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006286:	e003      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006288:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800628c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006290:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006298:	2100      	movs	r1, #0
 800629a:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 800629e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062a2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80062a6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80062aa:	460b      	mov	r3, r1
 80062ac:	4313      	orrs	r3, r2
 80062ae:	d00e      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80062b0:	4b8a      	ldr	r3, [pc, #552]	@ (80064dc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80062b2:	69db      	ldr	r3, [r3, #28]
 80062b4:	4a89      	ldr	r2, [pc, #548]	@ (80064dc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80062b6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80062ba:	61d3      	str	r3, [r2, #28]
 80062bc:	4b87      	ldr	r3, [pc, #540]	@ (80064dc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80062be:	69d9      	ldr	r1, [r3, #28]
 80062c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062c4:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80062c8:	4a84      	ldr	r2, [pc, #528]	@ (80064dc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80062ca:	430b      	orrs	r3, r1
 80062cc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80062ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80062da:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80062de:	2300      	movs	r3, #0
 80062e0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80062e4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80062e8:	460b      	mov	r3, r1
 80062ea:	4313      	orrs	r3, r2
 80062ec:	d055      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80062ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80062f6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80062fa:	d031      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 80062fc:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006300:	d82a      	bhi.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8006302:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006306:	d02d      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8006308:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800630c:	d824      	bhi.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800630e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006312:	d029      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8006314:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006318:	d81e      	bhi.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800631a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800631e:	d011      	beq.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8006320:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006324:	d818      	bhi.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8006326:	2b00      	cmp	r3, #0
 8006328:	d020      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800632a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800632e:	d113      	bne.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006330:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006334:	3308      	adds	r3, #8
 8006336:	4618      	mov	r0, r3
 8006338:	f004 f810 	bl	800a35c <RCCEx_PLL2_Config>
 800633c:	4603      	mov	r3, r0
 800633e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8006342:	e014      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006344:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006348:	3330      	adds	r3, #48	@ 0x30
 800634a:	4618      	mov	r0, r3
 800634c:	f004 f89e 	bl	800a48c <RCCEx_PLL3_Config>
 8006350:	4603      	mov	r3, r0
 8006352:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8006356:	e00a      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800635e:	e006      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8006360:	bf00      	nop
 8006362:	e004      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8006364:	bf00      	nop
 8006366:	e002      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8006368:	bf00      	nop
 800636a:	e000      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800636c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800636e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10d      	bne.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8006376:	4b59      	ldr	r3, [pc, #356]	@ (80064dc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006378:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800637c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8006380:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006384:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006388:	4a54      	ldr	r2, [pc, #336]	@ (80064dc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800638a:	430b      	orrs	r3, r1
 800638c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006390:	e003      	b.n	800639a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006392:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006396:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800639a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800639e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80063a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80063aa:	2300      	movs	r3, #0
 80063ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80063b0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80063b4:	460b      	mov	r3, r1
 80063b6:	4313      	orrs	r3, r2
 80063b8:	d055      	beq.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80063ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80063c2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80063c6:	d031      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0xf20>
 80063c8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80063cc:	d82a      	bhi.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80063ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063d2:	d02d      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 80063d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063d8:	d824      	bhi.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80063da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80063de:	d029      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 80063e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80063e4:	d81e      	bhi.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80063e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063ea:	d011      	beq.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 80063ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063f0:	d818      	bhi.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d020      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80063f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063fa:	d113      	bne.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80063fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006400:	3308      	adds	r3, #8
 8006402:	4618      	mov	r0, r3
 8006404:	f003 ffaa 	bl	800a35c <RCCEx_PLL2_Config>
 8006408:	4603      	mov	r3, r0
 800640a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800640e:	e014      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006410:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006414:	3330      	adds	r3, #48	@ 0x30
 8006416:	4618      	mov	r0, r3
 8006418:	f004 f838 	bl	800a48c <RCCEx_PLL3_Config>
 800641c:	4603      	mov	r3, r0
 800641e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8006422:	e00a      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800642a:	e006      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800642c:	bf00      	nop
 800642e:	e004      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8006430:	bf00      	nop
 8006432:	e002      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8006434:	bf00      	nop
 8006436:	e000      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8006438:	bf00      	nop
    }

    if (ret == HAL_OK)
 800643a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800643e:	2b00      	cmp	r3, #0
 8006440:	d10d      	bne.n	800645e <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8006442:	4b26      	ldr	r3, [pc, #152]	@ (80064dc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006444:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006448:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800644c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006450:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006454:	4a21      	ldr	r2, [pc, #132]	@ (80064dc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006456:	430b      	orrs	r3, r1
 8006458:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800645c:	e003      	b.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800645e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006462:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8006466:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800646a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646e:	2100      	movs	r1, #0
 8006470:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8006474:	f003 0320 	and.w	r3, r3, #32
 8006478:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800647c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006480:	460b      	mov	r3, r1
 8006482:	4313      	orrs	r3, r2
 8006484:	d057      	beq.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8006486:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800648a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800648e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006492:	d033      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8006494:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006498:	d82c      	bhi.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800649a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800649e:	d02f      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 80064a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80064a4:	d826      	bhi.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80064a6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80064aa:	d02b      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 80064ac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80064b0:	d820      	bhi.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80064b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064b6:	d013      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80064b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064bc:	d81a      	bhi.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d022      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 80064c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064c6:	d115      	bne.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80064c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064cc:	3308      	adds	r3, #8
 80064ce:	4618      	mov	r0, r3
 80064d0:	f003 ff44 	bl	800a35c <RCCEx_PLL2_Config>
 80064d4:	4603      	mov	r3, r0
 80064d6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80064da:	e016      	b.n	800650a <HAL_RCCEx_PeriphCLKConfig+0xffe>
 80064dc:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80064e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064e4:	3330      	adds	r3, #48	@ 0x30
 80064e6:	4618      	mov	r0, r3
 80064e8:	f003 ffd0 	bl	800a48c <RCCEx_PLL3_Config>
 80064ec:	4603      	mov	r3, r0
 80064ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80064f2:	e00a      	b.n	800650a <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80064fa:	e006      	b.n	800650a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80064fc:	bf00      	nop
 80064fe:	e004      	b.n	800650a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8006500:	bf00      	nop
 8006502:	e002      	b.n	800650a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8006504:	bf00      	nop
 8006506:	e000      	b.n	800650a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8006508:	bf00      	nop
    }

    if (ret == HAL_OK)
 800650a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800650e:	2b00      	cmp	r3, #0
 8006510:	d10d      	bne.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8006512:	4bbb      	ldr	r3, [pc, #748]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006514:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006518:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800651c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006520:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006524:	4ab6      	ldr	r2, [pc, #728]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006526:	430b      	orrs	r3, r1
 8006528:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800652c:	e003      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800652e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006532:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8006536:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800653a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653e:	2100      	movs	r1, #0
 8006540:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8006544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006548:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800654c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006550:	460b      	mov	r3, r1
 8006552:	4313      	orrs	r3, r2
 8006554:	d055      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8006556:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800655a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800655e:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8006562:	d031      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8006564:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8006568:	d82a      	bhi.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800656a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800656e:	d02d      	beq.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8006570:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006574:	d824      	bhi.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8006576:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800657a:	d029      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 800657c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006580:	d81e      	bhi.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8006582:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006586:	d011      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8006588:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800658c:	d818      	bhi.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800658e:	2b00      	cmp	r3, #0
 8006590:	d020      	beq.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8006592:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006596:	d113      	bne.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006598:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800659c:	3308      	adds	r3, #8
 800659e:	4618      	mov	r0, r3
 80065a0:	f003 fedc 	bl	800a35c <RCCEx_PLL2_Config>
 80065a4:	4603      	mov	r3, r0
 80065a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 80065aa:	e014      	b.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80065ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065b0:	3330      	adds	r3, #48	@ 0x30
 80065b2:	4618      	mov	r0, r3
 80065b4:	f003 ff6a 	bl	800a48c <RCCEx_PLL3_Config>
 80065b8:	4603      	mov	r3, r0
 80065ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 80065be:	e00a      	b.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80065c6:	e006      	b.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80065c8:	bf00      	nop
 80065ca:	e004      	b.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80065cc:	bf00      	nop
 80065ce:	e002      	b.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80065d0:	bf00      	nop
 80065d2:	e000      	b.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80065d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065d6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10d      	bne.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 80065de:	4b88      	ldr	r3, [pc, #544]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80065e0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80065e4:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 80065e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80065f0:	4a83      	ldr	r2, [pc, #524]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80065f2:	430b      	orrs	r3, r1
 80065f4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80065f8:	e003      	b.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065fa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80065fe:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8006602:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660a:	2100      	movs	r1, #0
 800660c:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8006610:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006614:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006618:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800661c:	460b      	mov	r3, r1
 800661e:	4313      	orrs	r3, r2
 8006620:	d055      	beq.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8006622:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006626:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800662a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800662e:	d031      	beq.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8006630:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006634:	d82a      	bhi.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8006636:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800663a:	d02d      	beq.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 800663c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006640:	d824      	bhi.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8006642:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006646:	d029      	beq.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8006648:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800664c:	d81e      	bhi.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800664e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006652:	d011      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8006654:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006658:	d818      	bhi.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800665a:	2b00      	cmp	r3, #0
 800665c:	d020      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 800665e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006662:	d113      	bne.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006664:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006668:	3308      	adds	r3, #8
 800666a:	4618      	mov	r0, r3
 800666c:	f003 fe76 	bl	800a35c <RCCEx_PLL2_Config>
 8006670:	4603      	mov	r3, r0
 8006672:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8006676:	e014      	b.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006678:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800667c:	3330      	adds	r3, #48	@ 0x30
 800667e:	4618      	mov	r0, r3
 8006680:	f003 ff04 	bl	800a48c <RCCEx_PLL3_Config>
 8006684:	4603      	mov	r3, r0
 8006686:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800668a:	e00a      	b.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006692:	e006      	b.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8006694:	bf00      	nop
 8006696:	e004      	b.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8006698:	bf00      	nop
 800669a:	e002      	b.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800669c:	bf00      	nop
 800669e:	e000      	b.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80066a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066a2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d10d      	bne.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 80066aa:	4b55      	ldr	r3, [pc, #340]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80066ac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80066b0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80066b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80066bc:	4a50      	ldr	r2, [pc, #320]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80066be:	430b      	orrs	r3, r1
 80066c0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80066c4:	e003      	b.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066c6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80066ca:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 80066ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d6:	2100      	movs	r1, #0
 80066d8:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 80066dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80066e4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80066e8:	460b      	mov	r3, r1
 80066ea:	4313      	orrs	r3, r2
 80066ec:	d055      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 80066ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066f2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80066f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80066fa:	d031      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 80066fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006700:	d82a      	bhi.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8006702:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006706:	d02d      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8006708:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800670c:	d824      	bhi.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800670e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006712:	d029      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8006714:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006718:	d81e      	bhi.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800671a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800671e:	d011      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8006720:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006724:	d818      	bhi.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8006726:	2b00      	cmp	r3, #0
 8006728:	d020      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x1260>
 800672a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800672e:	d113      	bne.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006730:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006734:	3308      	adds	r3, #8
 8006736:	4618      	mov	r0, r3
 8006738:	f003 fe10 	bl	800a35c <RCCEx_PLL2_Config>
 800673c:	4603      	mov	r3, r0
 800673e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8006742:	e014      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006744:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006748:	3330      	adds	r3, #48	@ 0x30
 800674a:	4618      	mov	r0, r3
 800674c:	f003 fe9e 	bl	800a48c <RCCEx_PLL3_Config>
 8006750:	4603      	mov	r3, r0
 8006752:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8006756:	e00a      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800675e:	e006      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006760:	bf00      	nop
 8006762:	e004      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006764:	bf00      	nop
 8006766:	e002      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006768:	bf00      	nop
 800676a:	e000      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800676c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800676e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10d      	bne.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8006776:	4b22      	ldr	r3, [pc, #136]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006778:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800677c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006780:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006784:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006788:	4a1d      	ldr	r2, [pc, #116]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800678a:	430b      	orrs	r3, r1
 800678c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006790:	e003      	b.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006792:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006796:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800679a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800679e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a2:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80067a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80067aa:	2300      	movs	r3, #0
 80067ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80067b0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80067b4:	460b      	mov	r3, r1
 80067b6:	4313      	orrs	r3, r2
 80067b8:	d055      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80067ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067be:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80067c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80067c6:	d035      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 80067c8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80067cc:	d82e      	bhi.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80067ce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80067d2:	d031      	beq.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 80067d4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80067d8:	d828      	bhi.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80067da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067de:	d01b      	beq.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 80067e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067e4:	d822      	bhi.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d003      	beq.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 80067ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067ee:	d009      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 80067f0:	e01c      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067f2:	4b03      	ldr	r3, [pc, #12]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80067f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067f6:	4a02      	ldr	r2, [pc, #8]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80067f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067fc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80067fe:	e01c      	b.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8006800:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006804:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006808:	3308      	adds	r3, #8
 800680a:	4618      	mov	r0, r3
 800680c:	f003 fda6 	bl	800a35c <RCCEx_PLL2_Config>
 8006810:	4603      	mov	r3, r0
 8006812:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006816:	e010      	b.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006818:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800681c:	3330      	adds	r3, #48	@ 0x30
 800681e:	4618      	mov	r0, r3
 8006820:	f003 fe34 	bl	800a48c <RCCEx_PLL3_Config>
 8006824:	4603      	mov	r3, r0
 8006826:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800682a:	e006      	b.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006832:	e002      	b.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8006834:	bf00      	nop
 8006836:	e000      	b.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8006838:	bf00      	nop
    }

    if (ret == HAL_OK)
 800683a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800683e:	2b00      	cmp	r3, #0
 8006840:	d10d      	bne.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8006842:	4bc3      	ldr	r3, [pc, #780]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006844:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006848:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800684c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006850:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006854:	4abe      	ldr	r2, [pc, #760]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006856:	430b      	orrs	r3, r1
 8006858:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800685c:	e003      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800685e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006862:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8006866:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800686a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686e:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006872:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006876:	2300      	movs	r3, #0
 8006878:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800687c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006880:	460b      	mov	r3, r1
 8006882:	4313      	orrs	r3, r2
 8006884:	d051      	beq.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8006886:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800688a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800688e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006892:	d033      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8006894:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006898:	d82c      	bhi.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800689a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800689e:	d02d      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80068a0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80068a4:	d826      	bhi.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80068a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068aa:	d019      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 80068ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068b0:	d820      	bhi.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d003      	beq.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 80068b6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80068ba:	d007      	beq.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 80068bc:	e01a      	b.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068be:	4ba4      	ldr	r3, [pc, #656]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80068c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068c2:	4aa3      	ldr	r2, [pc, #652]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80068c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068c8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80068ca:	e018      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80068cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068d0:	3308      	adds	r3, #8
 80068d2:	4618      	mov	r0, r3
 80068d4:	f003 fd42 	bl	800a35c <RCCEx_PLL2_Config>
 80068d8:	4603      	mov	r3, r0
 80068da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80068de:	e00e      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80068e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068e4:	3330      	adds	r3, #48	@ 0x30
 80068e6:	4618      	mov	r0, r3
 80068e8:	f003 fdd0 	bl	800a48c <RCCEx_PLL3_Config>
 80068ec:	4603      	mov	r3, r0
 80068ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80068f2:	e004      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80068fa:	e000      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 80068fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068fe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006902:	2b00      	cmp	r3, #0
 8006904:	d10d      	bne.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8006906:	4b92      	ldr	r3, [pc, #584]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006908:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800690c:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8006910:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006914:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006918:	4a8d      	ldr	r2, [pc, #564]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800691a:	430b      	orrs	r3, r1
 800691c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006920:	e003      	b.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006922:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006926:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800692a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800692e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006932:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006936:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006938:	2300      	movs	r3, #0
 800693a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800693c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006940:	460b      	mov	r3, r1
 8006942:	4313      	orrs	r3, r2
 8006944:	d032      	beq.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8006946:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800694a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800694e:	2b05      	cmp	r3, #5
 8006950:	d80f      	bhi.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8006952:	2b03      	cmp	r3, #3
 8006954:	d211      	bcs.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8006956:	2b01      	cmp	r3, #1
 8006958:	d911      	bls.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x1472>
 800695a:	2b02      	cmp	r3, #2
 800695c:	d109      	bne.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800695e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006962:	3308      	adds	r3, #8
 8006964:	4618      	mov	r0, r3
 8006966:	f003 fcf9 	bl	800a35c <RCCEx_PLL2_Config>
 800696a:	4603      	mov	r3, r0
 800696c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006970:	e006      	b.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006978:	e002      	b.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800697a:	bf00      	nop
 800697c:	e000      	b.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800697e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006980:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006984:	2b00      	cmp	r3, #0
 8006986:	d10d      	bne.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006988:	4b71      	ldr	r3, [pc, #452]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800698a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800698e:	f023 0107 	bic.w	r1, r3, #7
 8006992:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006996:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800699a:	4a6d      	ldr	r2, [pc, #436]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800699c:	430b      	orrs	r3, r1
 800699e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80069a2:	e003      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069a4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80069a8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80069ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b4:	2100      	movs	r1, #0
 80069b6:	6739      	str	r1, [r7, #112]	@ 0x70
 80069b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069bc:	677b      	str	r3, [r7, #116]	@ 0x74
 80069be:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80069c2:	460b      	mov	r3, r1
 80069c4:	4313      	orrs	r3, r2
 80069c6:	d024      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80069c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d005      	beq.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 80069d4:	2b08      	cmp	r3, #8
 80069d6:	d005      	beq.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80069de:	e002      	b.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80069e0:	bf00      	nop
 80069e2:	e000      	b.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80069e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069e6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d10d      	bne.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80069ee:	4b58      	ldr	r3, [pc, #352]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80069f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80069f4:	f023 0108 	bic.w	r1, r3, #8
 80069f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006a00:	4a53      	ldr	r2, [pc, #332]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006a02:	430b      	orrs	r3, r1
 8006a04:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006a08:	e003      	b.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a0a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006a0e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006a12:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1a:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006a1e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a20:	2300      	movs	r3, #0
 8006a22:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a24:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006a28:	460b      	mov	r3, r1
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	f000 80b9 	beq.w	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8006a30:	4b48      	ldr	r3, [pc, #288]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8006a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a34:	4a47      	ldr	r2, [pc, #284]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8006a36:	f043 0301 	orr.w	r3, r3, #1
 8006a3a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a3c:	f7fb fbb2 	bl	80021a4 <HAL_GetTick>
 8006a40:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006a44:	e00b      	b.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a46:	f7fb fbad 	bl	80021a4 <HAL_GetTick>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8006a50:	1ad3      	subs	r3, r2, r3
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d903      	bls.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006a5c:	e005      	b.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006a5e:	4b3d      	ldr	r3, [pc, #244]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8006a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a62:	f003 0301 	and.w	r3, r3, #1
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d0ed      	beq.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8006a6a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	f040 8093 	bne.w	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006a74:	4b36      	ldr	r3, [pc, #216]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006a76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a7e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006a82:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d023      	beq.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8006a8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a8e:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8006a92:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d01b      	beq.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006a9a:	4b2d      	ldr	r3, [pc, #180]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006a9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006aa0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006aa4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006aa8:	4b29      	ldr	r3, [pc, #164]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006aaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006aae:	4a28      	ldr	r2, [pc, #160]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006ab0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ab4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006ab8:	4b25      	ldr	r3, [pc, #148]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006aba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006abe:	4a24      	ldr	r2, [pc, #144]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006ac0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ac4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006ac8:	4a21      	ldr	r2, [pc, #132]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006aca:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8006ace:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006ad2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8006ad6:	f003 0301 	and.w	r3, r3, #1
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d019      	beq.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ade:	f7fb fb61 	bl	80021a4 <HAL_GetTick>
 8006ae2:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ae6:	e00d      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ae8:	f7fb fb5c 	bl	80021a4 <HAL_GetTick>
 8006aec:	4602      	mov	r2, r0
 8006aee:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8006af2:	1ad2      	subs	r2, r2, r3
 8006af4:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d903      	bls.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8006afc:	2303      	movs	r3, #3
 8006afe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 8006b02:	e006      	b.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b04:	4b12      	ldr	r3, [pc, #72]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006b06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b0a:	f003 0302 	and.w	r3, r3, #2
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d0ea      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8006b12:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d13a      	bne.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006b1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b1e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8006b22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b2a:	d115      	bne.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8006b2c:	4b08      	ldr	r3, [pc, #32]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006b2e:	69db      	ldr	r3, [r3, #28]
 8006b30:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006b34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b38:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8006b3c:	091b      	lsrs	r3, r3, #4
 8006b3e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006b42:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8006b46:	4a02      	ldr	r2, [pc, #8]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006b48:	430b      	orrs	r3, r1
 8006b4a:	61d3      	str	r3, [r2, #28]
 8006b4c:	e00a      	b.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8006b4e:	bf00      	nop
 8006b50:	44020c00 	.word	0x44020c00
 8006b54:	44020800 	.word	0x44020800
 8006b58:	4b9f      	ldr	r3, [pc, #636]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006b5a:	69db      	ldr	r3, [r3, #28]
 8006b5c:	4a9e      	ldr	r2, [pc, #632]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006b5e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006b62:	61d3      	str	r3, [r2, #28]
 8006b64:	4b9c      	ldr	r3, [pc, #624]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006b66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b6a:	4a9b      	ldr	r2, [pc, #620]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006b6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b70:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006b74:	4b98      	ldr	r3, [pc, #608]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006b76:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8006b7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b7e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8006b82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b86:	4a94      	ldr	r2, [pc, #592]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006b88:	430b      	orrs	r3, r1
 8006b8a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006b8e:	e008      	b.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006b90:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006b94:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 8006b98:	e003      	b.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b9a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006b9e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006ba2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006baa:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8006bae:	663b      	str	r3, [r7, #96]	@ 0x60
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	667b      	str	r3, [r7, #100]	@ 0x64
 8006bb4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006bb8:	460b      	mov	r3, r1
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	d035      	beq.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006bbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006bc2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006bc6:	2b30      	cmp	r3, #48	@ 0x30
 8006bc8:	d014      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8006bca:	2b30      	cmp	r3, #48	@ 0x30
 8006bcc:	d80e      	bhi.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8006bce:	2b20      	cmp	r3, #32
 8006bd0:	d012      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8006bd2:	2b20      	cmp	r3, #32
 8006bd4:	d80a      	bhi.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d010      	beq.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8006bda:	2b10      	cmp	r3, #16
 8006bdc:	d106      	bne.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bde:	4b7e      	ldr	r3, [pc, #504]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006be2:	4a7d      	ldr	r2, [pc, #500]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006be4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006be8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8006bea:	e008      	b.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006bf2:	e004      	b.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006bf4:	bf00      	nop
 8006bf6:	e002      	b.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006bf8:	bf00      	nop
 8006bfa:	e000      	b.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006bfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bfe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d10d      	bne.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006c06:	4b74      	ldr	r3, [pc, #464]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006c0c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006c10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c14:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006c18:	4a6f      	ldr	r2, [pc, #444]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006c1a:	430b      	orrs	r3, r1
 8006c1c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006c20:	e003      	b.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c22:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006c26:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006c2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c32:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006c36:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006c38:	2300      	movs	r3, #0
 8006c3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c3c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006c40:	460b      	mov	r3, r1
 8006c42:	4313      	orrs	r3, r2
 8006c44:	d033      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8006c46:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c4a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d002      	beq.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8006c52:	2b40      	cmp	r3, #64	@ 0x40
 8006c54:	d007      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8006c56:	e010      	b.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c58:	4b5f      	ldr	r3, [pc, #380]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c5c:	4a5e      	ldr	r2, [pc, #376]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006c5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c62:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8006c64:	e00d      	b.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006c66:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c6a:	3308      	adds	r3, #8
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f003 fb75 	bl	800a35c <RCCEx_PLL2_Config>
 8006c72:	4603      	mov	r3, r0
 8006c74:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8006c78:	e003      	b.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006c80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c82:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d10d      	bne.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8006c8a:	4b53      	ldr	r3, [pc, #332]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006c8c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006c90:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8006c94:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c98:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8006c9c:	4a4e      	ldr	r2, [pc, #312]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006c9e:	430b      	orrs	r3, r1
 8006ca0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006ca4:	e003      	b.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ca6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006caa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006cae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006cba:	653b      	str	r3, [r7, #80]	@ 0x50
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	657b      	str	r3, [r7, #84]	@ 0x54
 8006cc0:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	d033      	beq.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8006cca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cce:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d002      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8006cd6:	2b80      	cmp	r3, #128	@ 0x80
 8006cd8:	d007      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8006cda:	e010      	b.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cdc:	4b3e      	ldr	r3, [pc, #248]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ce0:	4a3d      	ldr	r2, [pc, #244]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006ce2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ce6:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8006ce8:	e00d      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006cea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cee:	3308      	adds	r3, #8
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f003 fb33 	bl	800a35c <RCCEx_PLL2_Config>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8006cfc:	e003      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006d04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d06:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d10d      	bne.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8006d0e:	4b32      	ldr	r3, [pc, #200]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006d10:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006d14:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8006d18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d1c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8006d20:	4a2d      	ldr	r2, [pc, #180]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006d22:	430b      	orrs	r3, r1
 8006d24:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006d28:	e003      	b.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d2a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006d2e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006d32:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3a:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8006d3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d40:	2300      	movs	r3, #0
 8006d42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d44:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006d48:	460b      	mov	r3, r1
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	d04a      	beq.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8006d4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d56:	2b04      	cmp	r3, #4
 8006d58:	d827      	bhi.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8006d5a:	a201      	add	r2, pc, #4	@ (adr r2, 8006d60 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8006d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d60:	08006d75 	.word	0x08006d75
 8006d64:	08006d83 	.word	0x08006d83
 8006d68:	08006d97 	.word	0x08006d97
 8006d6c:	08006db3 	.word	0x08006db3
 8006d70:	08006db3 	.word	0x08006db3
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d74:	4b18      	ldr	r3, [pc, #96]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d78:	4a17      	ldr	r2, [pc, #92]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006d7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d7e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8006d80:	e018      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006d82:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d86:	3308      	adds	r3, #8
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f003 fae7 	bl	800a35c <RCCEx_PLL2_Config>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8006d94:	e00e      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006d96:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d9a:	3330      	adds	r3, #48	@ 0x30
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f003 fb75 	bl	800a48c <RCCEx_PLL3_Config>
 8006da2:	4603      	mov	r3, r0
 8006da4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8006da8:	e004      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006db0:	e000      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8006db2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006db4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d10f      	bne.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006dbc:	4b06      	ldr	r3, [pc, #24]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006dc2:	f023 0107 	bic.w	r1, r3, #7
 8006dc6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006dce:	4a02      	ldr	r2, [pc, #8]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006dd0:	430b      	orrs	r3, r1
 8006dd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006dd6:	e005      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8006dd8:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ddc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006de0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006de4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dec:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006df0:	643b      	str	r3, [r7, #64]	@ 0x40
 8006df2:	2300      	movs	r3, #0
 8006df4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006df6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006dfa:	460b      	mov	r3, r1
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	f000 8081 	beq.w	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8006e02:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e06:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006e0a:	2b20      	cmp	r3, #32
 8006e0c:	d85f      	bhi.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8006e0e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e14 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8006e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e14:	08006e99 	.word	0x08006e99
 8006e18:	08006ecf 	.word	0x08006ecf
 8006e1c:	08006ecf 	.word	0x08006ecf
 8006e20:	08006ecf 	.word	0x08006ecf
 8006e24:	08006ecf 	.word	0x08006ecf
 8006e28:	08006ecf 	.word	0x08006ecf
 8006e2c:	08006ecf 	.word	0x08006ecf
 8006e30:	08006ecf 	.word	0x08006ecf
 8006e34:	08006ea7 	.word	0x08006ea7
 8006e38:	08006ecf 	.word	0x08006ecf
 8006e3c:	08006ecf 	.word	0x08006ecf
 8006e40:	08006ecf 	.word	0x08006ecf
 8006e44:	08006ecf 	.word	0x08006ecf
 8006e48:	08006ecf 	.word	0x08006ecf
 8006e4c:	08006ecf 	.word	0x08006ecf
 8006e50:	08006ecf 	.word	0x08006ecf
 8006e54:	08006ebb 	.word	0x08006ebb
 8006e58:	08006ecf 	.word	0x08006ecf
 8006e5c:	08006ecf 	.word	0x08006ecf
 8006e60:	08006ecf 	.word	0x08006ecf
 8006e64:	08006ecf 	.word	0x08006ecf
 8006e68:	08006ecf 	.word	0x08006ecf
 8006e6c:	08006ecf 	.word	0x08006ecf
 8006e70:	08006ecf 	.word	0x08006ecf
 8006e74:	08006ed7 	.word	0x08006ed7
 8006e78:	08006ecf 	.word	0x08006ecf
 8006e7c:	08006ecf 	.word	0x08006ecf
 8006e80:	08006ecf 	.word	0x08006ecf
 8006e84:	08006ecf 	.word	0x08006ecf
 8006e88:	08006ecf 	.word	0x08006ecf
 8006e8c:	08006ecf 	.word	0x08006ecf
 8006e90:	08006ecf 	.word	0x08006ecf
 8006e94:	08006ed7 	.word	0x08006ed7
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e98:	4bab      	ldr	r3, [pc, #684]	@ (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e9c:	4aaa      	ldr	r2, [pc, #680]	@ (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006e9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ea2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006ea4:	e018      	b.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006ea6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006eaa:	3308      	adds	r3, #8
 8006eac:	4618      	mov	r0, r3
 8006eae:	f003 fa55 	bl	800a35c <RCCEx_PLL2_Config>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006eb8:	e00e      	b.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006eba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ebe:	3330      	adds	r3, #48	@ 0x30
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f003 fae3 	bl	800a48c <RCCEx_PLL3_Config>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006ecc:	e004      	b.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006ed4:	e000      	b.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8006ed6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ed8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d10d      	bne.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006ee0:	4b99      	ldr	r3, [pc, #612]	@ (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ee6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006eea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006eee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006ef2:	4a95      	ldr	r2, [pc, #596]	@ (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006ef4:	430b      	orrs	r3, r1
 8006ef6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006efa:	e003      	b.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006efc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006f00:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006f04:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006f10:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f12:	2300      	movs	r3, #0
 8006f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f16:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	d04e      	beq.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8006f20:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006f28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f2c:	d02e      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8006f2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f32:	d827      	bhi.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006f34:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f36:	d02b      	beq.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8006f38:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f3a:	d823      	bhi.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006f3c:	2b80      	cmp	r3, #128	@ 0x80
 8006f3e:	d017      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8006f40:	2b80      	cmp	r3, #128	@ 0x80
 8006f42:	d81f      	bhi.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d002      	beq.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8006f48:	2b40      	cmp	r3, #64	@ 0x40
 8006f4a:	d007      	beq.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8006f4c:	e01a      	b.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f4e:	4b7e      	ldr	r3, [pc, #504]	@ (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f52:	4a7d      	ldr	r2, [pc, #500]	@ (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006f54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f58:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006f5a:	e01a      	b.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006f5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f60:	3308      	adds	r3, #8
 8006f62:	4618      	mov	r0, r3
 8006f64:	f003 f9fa 	bl	800a35c <RCCEx_PLL2_Config>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006f6e:	e010      	b.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006f70:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f74:	3330      	adds	r3, #48	@ 0x30
 8006f76:	4618      	mov	r0, r3
 8006f78:	f003 fa88 	bl	800a48c <RCCEx_PLL3_Config>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006f82:	e006      	b.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006f8a:	e002      	b.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8006f8c:	bf00      	nop
 8006f8e:	e000      	b.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8006f90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f92:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d10d      	bne.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006f9a:	4b6b      	ldr	r3, [pc, #428]	@ (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006fa0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006fa4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006fa8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006fac:	4a66      	ldr	r2, [pc, #408]	@ (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006fae:	430b      	orrs	r3, r1
 8006fb0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006fb4:	e003      	b.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fb6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006fba:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8006fbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006fca:	633b      	str	r3, [r7, #48]	@ 0x30
 8006fcc:	2300      	movs	r3, #0
 8006fce:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fd0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	d055      	beq.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8006fda:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006fde:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8006fe2:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006fe6:	d031      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8006fe8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006fec:	d82a      	bhi.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006fee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ff2:	d02d      	beq.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8006ff4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ff8:	d824      	bhi.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006ffa:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006ffe:	d029      	beq.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8007000:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007004:	d81e      	bhi.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8007006:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800700a:	d011      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 800700c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007010:	d818      	bhi.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8007012:	2b00      	cmp	r3, #0
 8007014:	d020      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8007016:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800701a:	d113      	bne.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800701c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007020:	3308      	adds	r3, #8
 8007022:	4618      	mov	r0, r3
 8007024:	f003 f99a 	bl	800a35c <RCCEx_PLL2_Config>
 8007028:	4603      	mov	r3, r0
 800702a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800702e:	e014      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007030:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007034:	3330      	adds	r3, #48	@ 0x30
 8007036:	4618      	mov	r0, r3
 8007038:	f003 fa28 	bl	800a48c <RCCEx_PLL3_Config>
 800703c:	4603      	mov	r3, r0
 800703e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8007042:	e00a      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800704a:	e006      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800704c:	bf00      	nop
 800704e:	e004      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8007050:	bf00      	nop
 8007052:	e002      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8007054:	bf00      	nop
 8007056:	e000      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8007058:	bf00      	nop
    }

    if (ret == HAL_OK)
 800705a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800705e:	2b00      	cmp	r3, #0
 8007060:	d10d      	bne.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8007062:	4b39      	ldr	r3, [pc, #228]	@ (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007068:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800706c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007070:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8007074:	4a34      	ldr	r2, [pc, #208]	@ (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007076:	430b      	orrs	r3, r1
 8007078:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800707c:	e003      	b.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800707e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007082:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8007086:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800708a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007092:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007094:	2300      	movs	r3, #0
 8007096:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007098:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800709c:	460b      	mov	r3, r1
 800709e:	4313      	orrs	r3, r2
 80070a0:	d058      	beq.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 80070a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070aa:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80070ae:	d031      	beq.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 80070b0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80070b4:	d82a      	bhi.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80070b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80070ba:	d02d      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 80070bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80070c0:	d824      	bhi.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80070c2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80070c6:	d029      	beq.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 80070c8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80070cc:	d81e      	bhi.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80070ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070d2:	d011      	beq.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 80070d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070d8:	d818      	bhi.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d020      	beq.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 80070de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070e2:	d113      	bne.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80070e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070e8:	3308      	adds	r3, #8
 80070ea:	4618      	mov	r0, r3
 80070ec:	f003 f936 	bl	800a35c <RCCEx_PLL2_Config>
 80070f0:	4603      	mov	r3, r0
 80070f2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 80070f6:	e014      	b.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80070f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070fc:	3330      	adds	r3, #48	@ 0x30
 80070fe:	4618      	mov	r0, r3
 8007100:	f003 f9c4 	bl	800a48c <RCCEx_PLL3_Config>
 8007104:	4603      	mov	r3, r0
 8007106:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800710a:	e00a      	b.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007112:	e006      	b.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8007114:	bf00      	nop
 8007116:	e004      	b.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8007118:	bf00      	nop
 800711a:	e002      	b.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800711c:	bf00      	nop
 800711e:	e000      	b.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8007120:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007122:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007126:	2b00      	cmp	r3, #0
 8007128:	d110      	bne.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 800712a:	4b07      	ldr	r3, [pc, #28]	@ (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800712c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007130:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8007134:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007138:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800713c:	4902      	ldr	r1, [pc, #8]	@ (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800713e:	4313      	orrs	r3, r2
 8007140:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8007144:	e006      	b.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8007146:	bf00      	nop
 8007148:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800714c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007150:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007154:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715c:	2100      	movs	r1, #0
 800715e:	6239      	str	r1, [r7, #32]
 8007160:	f003 0301 	and.w	r3, r3, #1
 8007164:	627b      	str	r3, [r7, #36]	@ 0x24
 8007166:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800716a:	460b      	mov	r3, r1
 800716c:	4313      	orrs	r3, r2
 800716e:	d055      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8007170:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007174:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007178:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800717c:	d031      	beq.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 800717e:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8007182:	d82a      	bhi.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8007184:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007188:	d02d      	beq.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 800718a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800718e:	d824      	bhi.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8007190:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8007194:	d029      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8007196:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800719a:	d81e      	bhi.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800719c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071a0:	d011      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 80071a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071a6:	d818      	bhi.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d020      	beq.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 80071ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071b0:	d113      	bne.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80071b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071b6:	3308      	adds	r3, #8
 80071b8:	4618      	mov	r0, r3
 80071ba:	f003 f8cf 	bl	800a35c <RCCEx_PLL2_Config>
 80071be:	4603      	mov	r3, r0
 80071c0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80071c4:	e014      	b.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80071c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071ca:	3330      	adds	r3, #48	@ 0x30
 80071cc:	4618      	mov	r0, r3
 80071ce:	f003 f95d 	bl	800a48c <RCCEx_PLL3_Config>
 80071d2:	4603      	mov	r3, r0
 80071d4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80071d8:	e00a      	b.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80071e0:	e006      	b.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80071e2:	bf00      	nop
 80071e4:	e004      	b.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80071e6:	bf00      	nop
 80071e8:	e002      	b.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80071ea:	bf00      	nop
 80071ec:	e000      	b.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80071ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071f0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d10d      	bne.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 80071f8:	4b88      	ldr	r3, [pc, #544]	@ (800741c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80071fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80071fe:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8007202:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007206:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800720a:	4984      	ldr	r1, [pc, #528]	@ (800741c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800720c:	4313      	orrs	r3, r2
 800720e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8007212:	e003      	b.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007214:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007218:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800721c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007224:	2100      	movs	r1, #0
 8007226:	61b9      	str	r1, [r7, #24]
 8007228:	f003 0302 	and.w	r3, r3, #2
 800722c:	61fb      	str	r3, [r7, #28]
 800722e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007232:	460b      	mov	r3, r1
 8007234:	4313      	orrs	r3, r2
 8007236:	d03d      	beq.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8007238:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800723c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007240:	2b03      	cmp	r3, #3
 8007242:	d81c      	bhi.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8007244:	a201      	add	r2, pc, #4	@ (adr r2, 800724c <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8007246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800724a:	bf00      	nop
 800724c:	08007287 	.word	0x08007287
 8007250:	0800725d 	.word	0x0800725d
 8007254:	0800726b 	.word	0x0800726b
 8007258:	08007287 	.word	0x08007287
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800725c:	4b6f      	ldr	r3, [pc, #444]	@ (800741c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800725e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007260:	4a6e      	ldr	r2, [pc, #440]	@ (800741c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007262:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007266:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007268:	e00e      	b.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800726a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800726e:	3308      	adds	r3, #8
 8007270:	4618      	mov	r0, r3
 8007272:	f003 f873 	bl	800a35c <RCCEx_PLL2_Config>
 8007276:	4603      	mov	r3, r0
 8007278:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 800727c:	e004      	b.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007284:	e000      	b.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8007286:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007288:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800728c:	2b00      	cmp	r3, #0
 800728e:	d10d      	bne.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8007290:	4b62      	ldr	r3, [pc, #392]	@ (800741c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007292:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007296:	f023 0203 	bic.w	r2, r3, #3
 800729a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800729e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80072a2:	495e      	ldr	r1, [pc, #376]	@ (800741c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80072a4:	4313      	orrs	r3, r2
 80072a6:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80072aa:	e003      	b.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072ac:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80072b0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80072b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072bc:	2100      	movs	r1, #0
 80072be:	6139      	str	r1, [r7, #16]
 80072c0:	f003 0304 	and.w	r3, r3, #4
 80072c4:	617b      	str	r3, [r7, #20]
 80072c6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80072ca:	460b      	mov	r3, r1
 80072cc:	4313      	orrs	r3, r2
 80072ce:	d03a      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 80072d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072d4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80072d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072dc:	d00e      	beq.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 80072de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072e2:	d815      	bhi.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d017      	beq.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 80072e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072ec:	d110      	bne.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072ee:	4b4b      	ldr	r3, [pc, #300]	@ (800741c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80072f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072f2:	4a4a      	ldr	r2, [pc, #296]	@ (800741c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80072f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072f8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80072fa:	e00e      	b.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80072fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007300:	3308      	adds	r3, #8
 8007302:	4618      	mov	r0, r3
 8007304:	f003 f82a 	bl	800a35c <RCCEx_PLL2_Config>
 8007308:	4603      	mov	r3, r0
 800730a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800730e:	e004      	b.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007316:	e000      	b.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8007318:	bf00      	nop
    }

    if (ret == HAL_OK)
 800731a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800731e:	2b00      	cmp	r3, #0
 8007320:	d10d      	bne.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8007322:	4b3e      	ldr	r3, [pc, #248]	@ (800741c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007324:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007328:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800732c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007330:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007334:	4939      	ldr	r1, [pc, #228]	@ (800741c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007336:	4313      	orrs	r3, r2
 8007338:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 800733c:	e003      	b.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800733e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007342:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007346:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800734a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734e:	2100      	movs	r1, #0
 8007350:	60b9      	str	r1, [r7, #8]
 8007352:	f003 0310 	and.w	r3, r3, #16
 8007356:	60fb      	str	r3, [r7, #12]
 8007358:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800735c:	460b      	mov	r3, r1
 800735e:	4313      	orrs	r3, r2
 8007360:	d038      	beq.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8007362:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007366:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800736a:	2b30      	cmp	r3, #48	@ 0x30
 800736c:	d01b      	beq.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 800736e:	2b30      	cmp	r3, #48	@ 0x30
 8007370:	d815      	bhi.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8007372:	2b10      	cmp	r3, #16
 8007374:	d002      	beq.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8007376:	2b20      	cmp	r3, #32
 8007378:	d007      	beq.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 800737a:	e010      	b.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800737c:	4b27      	ldr	r3, [pc, #156]	@ (800741c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800737e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007380:	4a26      	ldr	r2, [pc, #152]	@ (800741c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007382:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007386:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8007388:	e00e      	b.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800738a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800738e:	3330      	adds	r3, #48	@ 0x30
 8007390:	4618      	mov	r0, r3
 8007392:	f003 f87b 	bl	800a48c <RCCEx_PLL3_Config>
 8007396:	4603      	mov	r3, r0
 8007398:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 800739c:	e004      	b.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80073a4:	e000      	b.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 80073a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073a8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d10d      	bne.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 80073b0:	4b1a      	ldr	r3, [pc, #104]	@ (800741c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80073b2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80073b6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80073ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80073be:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80073c2:	4916      	ldr	r1, [pc, #88]	@ (800741c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80073c4:	4313      	orrs	r3, r2
 80073c6:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80073ca:	e003      	b.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073cc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80073d0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80073d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80073d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073dc:	2100      	movs	r1, #0
 80073de:	6039      	str	r1, [r7, #0]
 80073e0:	f003 0308 	and.w	r3, r3, #8
 80073e4:	607b      	str	r3, [r7, #4]
 80073e6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80073ea:	460b      	mov	r3, r1
 80073ec:	4313      	orrs	r3, r2
 80073ee:	d00c      	beq.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 80073f0:	4b0a      	ldr	r3, [pc, #40]	@ (800741c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80073f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80073f6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80073fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80073fe:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8007402:	4906      	ldr	r1, [pc, #24]	@ (800741c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007404:	4313      	orrs	r3, r2
 8007406:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 800740a:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 800740e:	4618      	mov	r0, r3
 8007410:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8007414:	46bd      	mov	sp, r7
 8007416:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800741a:	bf00      	nop
 800741c:	44020c00 	.word	0x44020c00

08007420 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8007420:	b480      	push	{r7}
 8007422:	b08b      	sub	sp, #44	@ 0x2c
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8007428:	4bae      	ldr	r3, [pc, #696]	@ (80076e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800742a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800742c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007430:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007432:	4bac      	ldr	r3, [pc, #688]	@ (80076e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007436:	f003 0303 	and.w	r3, r3, #3
 800743a:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800743c:	4ba9      	ldr	r3, [pc, #676]	@ (80076e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800743e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007440:	0a1b      	lsrs	r3, r3, #8
 8007442:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007446:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8007448:	4ba6      	ldr	r3, [pc, #664]	@ (80076e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800744a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800744c:	091b      	lsrs	r3, r3, #4
 800744e:	f003 0301 	and.w	r3, r3, #1
 8007452:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8007454:	4ba3      	ldr	r3, [pc, #652]	@ (80076e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007458:	08db      	lsrs	r3, r3, #3
 800745a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800745e:	697a      	ldr	r2, [r7, #20]
 8007460:	fb02 f303 	mul.w	r3, r2, r3
 8007464:	ee07 3a90 	vmov	s15, r3
 8007468:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800746c:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	2b00      	cmp	r3, #0
 8007474:	f000 8126 	beq.w	80076c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	2b03      	cmp	r3, #3
 800747c:	d053      	beq.n	8007526 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	2b03      	cmp	r3, #3
 8007482:	d86f      	bhi.n	8007564 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	2b01      	cmp	r3, #1
 8007488:	d003      	beq.n	8007492 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	2b02      	cmp	r3, #2
 800748e:	d02b      	beq.n	80074e8 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8007490:	e068      	b.n	8007564 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007492:	4b94      	ldr	r3, [pc, #592]	@ (80076e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	08db      	lsrs	r3, r3, #3
 8007498:	f003 0303 	and.w	r3, r3, #3
 800749c:	4a92      	ldr	r2, [pc, #584]	@ (80076e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800749e:	fa22 f303 	lsr.w	r3, r2, r3
 80074a2:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	ee07 3a90 	vmov	s15, r3
 80074aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	ee07 3a90 	vmov	s15, r3
 80074b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074bc:	6a3b      	ldr	r3, [r7, #32]
 80074be:	ee07 3a90 	vmov	s15, r3
 80074c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074c6:	ed97 6a04 	vldr	s12, [r7, #16]
 80074ca:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80076ec <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80074ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074e2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80074e6:	e068      	b.n	80075ba <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	ee07 3a90 	vmov	s15, r3
 80074ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074f2:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80076f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 80074f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074fa:	6a3b      	ldr	r3, [r7, #32]
 80074fc:	ee07 3a90 	vmov	s15, r3
 8007500:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007504:	ed97 6a04 	vldr	s12, [r7, #16]
 8007508:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80076ec <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800750c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007510:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007514:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007518:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800751c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007520:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007524:	e049      	b.n	80075ba <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	ee07 3a90 	vmov	s15, r3
 800752c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007530:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80076f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8007534:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007538:	6a3b      	ldr	r3, [r7, #32]
 800753a:	ee07 3a90 	vmov	s15, r3
 800753e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007542:	ed97 6a04 	vldr	s12, [r7, #16]
 8007546:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80076ec <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800754a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800754e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007552:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800755a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800755e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007562:	e02a      	b.n	80075ba <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007564:	4b5f      	ldr	r3, [pc, #380]	@ (80076e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	08db      	lsrs	r3, r3, #3
 800756a:	f003 0303 	and.w	r3, r3, #3
 800756e:	4a5e      	ldr	r2, [pc, #376]	@ (80076e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8007570:	fa22 f303 	lsr.w	r3, r2, r3
 8007574:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	ee07 3a90 	vmov	s15, r3
 800757c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	ee07 3a90 	vmov	s15, r3
 8007586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800758a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800758e:	6a3b      	ldr	r3, [r7, #32]
 8007590:	ee07 3a90 	vmov	s15, r3
 8007594:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007598:	ed97 6a04 	vldr	s12, [r7, #16]
 800759c:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80076ec <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80075a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075b4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80075b8:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80075ba:	4b4a      	ldr	r3, [pc, #296]	@ (80076e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80075c6:	d121      	bne.n	800760c <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80075c8:	4b46      	ldr	r3, [pc, #280]	@ (80076e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80075ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d017      	beq.n	8007604 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80075d4:	4b43      	ldr	r3, [pc, #268]	@ (80076e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80075d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075d8:	0a5b      	lsrs	r3, r3, #9
 80075da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075de:	ee07 3a90 	vmov	s15, r3
 80075e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80075e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80075ea:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80075ee:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80075f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075fa:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	601a      	str	r2, [r3, #0]
 8007602:	e006      	b.n	8007612 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	601a      	str	r2, [r3, #0]
 800760a:	e002      	b.n	8007612 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007612:	4b34      	ldr	r3, [pc, #208]	@ (80076e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800761a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800761e:	d121      	bne.n	8007664 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8007620:	4b30      	ldr	r3, [pc, #192]	@ (80076e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007624:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007628:	2b00      	cmp	r3, #0
 800762a:	d017      	beq.n	800765c <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800762c:	4b2d      	ldr	r3, [pc, #180]	@ (80076e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800762e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007630:	0c1b      	lsrs	r3, r3, #16
 8007632:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007636:	ee07 3a90 	vmov	s15, r3
 800763a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 800763e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007642:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8007646:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800764a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800764e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007652:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	605a      	str	r2, [r3, #4]
 800765a:	e006      	b.n	800766a <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	605a      	str	r2, [r3, #4]
 8007662:	e002      	b.n	800766a <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800766a:	4b1e      	ldr	r3, [pc, #120]	@ (80076e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007672:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007676:	d121      	bne.n	80076bc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8007678:	4b1a      	ldr	r3, [pc, #104]	@ (80076e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800767a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800767c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007680:	2b00      	cmp	r3, #0
 8007682:	d017      	beq.n	80076b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007684:	4b17      	ldr	r3, [pc, #92]	@ (80076e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007688:	0e1b      	lsrs	r3, r3, #24
 800768a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800768e:	ee07 3a90 	vmov	s15, r3
 8007692:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8007696:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800769a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800769e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80076a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076aa:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80076b2:	e010      	b.n	80076d6 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	609a      	str	r2, [r3, #8]
}
 80076ba:	e00c      	b.n	80076d6 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	609a      	str	r2, [r3, #8]
}
 80076c2:	e008      	b.n	80076d6 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	609a      	str	r2, [r3, #8]
}
 80076d6:	bf00      	nop
 80076d8:	372c      	adds	r7, #44	@ 0x2c
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	44020c00 	.word	0x44020c00
 80076e8:	03d09000 	.word	0x03d09000
 80076ec:	46000000 	.word	0x46000000
 80076f0:	4a742400 	.word	0x4a742400
 80076f4:	4af42400 	.word	0x4af42400

080076f8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b08b      	sub	sp, #44	@ 0x2c
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8007700:	4bae      	ldr	r3, [pc, #696]	@ (80079bc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007708:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800770a:	4bac      	ldr	r3, [pc, #688]	@ (80079bc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800770c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800770e:	f003 0303 	and.w	r3, r3, #3
 8007712:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8007714:	4ba9      	ldr	r3, [pc, #676]	@ (80079bc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007718:	0a1b      	lsrs	r3, r3, #8
 800771a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800771e:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8007720:	4ba6      	ldr	r3, [pc, #664]	@ (80079bc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007724:	091b      	lsrs	r3, r3, #4
 8007726:	f003 0301 	and.w	r3, r3, #1
 800772a:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800772c:	4ba3      	ldr	r3, [pc, #652]	@ (80079bc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800772e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007730:	08db      	lsrs	r3, r3, #3
 8007732:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007736:	697a      	ldr	r2, [r7, #20]
 8007738:	fb02 f303 	mul.w	r3, r2, r3
 800773c:	ee07 3a90 	vmov	s15, r3
 8007740:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007744:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8007748:	69bb      	ldr	r3, [r7, #24]
 800774a:	2b00      	cmp	r3, #0
 800774c:	f000 8126 	beq.w	800799c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	2b03      	cmp	r3, #3
 8007754:	d053      	beq.n	80077fe <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	2b03      	cmp	r3, #3
 800775a:	d86f      	bhi.n	800783c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	2b01      	cmp	r3, #1
 8007760:	d003      	beq.n	800776a <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	2b02      	cmp	r3, #2
 8007766:	d02b      	beq.n	80077c0 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8007768:	e068      	b.n	800783c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800776a:	4b94      	ldr	r3, [pc, #592]	@ (80079bc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	08db      	lsrs	r3, r3, #3
 8007770:	f003 0303 	and.w	r3, r3, #3
 8007774:	4a92      	ldr	r2, [pc, #584]	@ (80079c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8007776:	fa22 f303 	lsr.w	r3, r2, r3
 800777a:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	ee07 3a90 	vmov	s15, r3
 8007782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007786:	69bb      	ldr	r3, [r7, #24]
 8007788:	ee07 3a90 	vmov	s15, r3
 800778c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007790:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007794:	6a3b      	ldr	r3, [r7, #32]
 8007796:	ee07 3a90 	vmov	s15, r3
 800779a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800779e:	ed97 6a04 	vldr	s12, [r7, #16]
 80077a2:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80079c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80077a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077ba:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80077be:	e068      	b.n	8007892 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	ee07 3a90 	vmov	s15, r3
 80077c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ca:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80079c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 80077ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077d2:	6a3b      	ldr	r3, [r7, #32]
 80077d4:	ee07 3a90 	vmov	s15, r3
 80077d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077dc:	ed97 6a04 	vldr	s12, [r7, #16]
 80077e0:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80079c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80077e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077f8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80077fc:	e049      	b.n	8007892 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	ee07 3a90 	vmov	s15, r3
 8007804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007808:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80079cc <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 800780c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007810:	6a3b      	ldr	r3, [r7, #32]
 8007812:	ee07 3a90 	vmov	s15, r3
 8007816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800781a:	ed97 6a04 	vldr	s12, [r7, #16]
 800781e:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80079c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8007822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800782a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800782e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007836:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800783a:	e02a      	b.n	8007892 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800783c:	4b5f      	ldr	r3, [pc, #380]	@ (80079bc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	08db      	lsrs	r3, r3, #3
 8007842:	f003 0303 	and.w	r3, r3, #3
 8007846:	4a5e      	ldr	r2, [pc, #376]	@ (80079c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8007848:	fa22 f303 	lsr.w	r3, r2, r3
 800784c:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	ee07 3a90 	vmov	s15, r3
 8007854:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	ee07 3a90 	vmov	s15, r3
 800785e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007866:	6a3b      	ldr	r3, [r7, #32]
 8007868:	ee07 3a90 	vmov	s15, r3
 800786c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007870:	ed97 6a04 	vldr	s12, [r7, #16]
 8007874:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80079c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8007878:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800787c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007880:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007884:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007888:	ee67 7a27 	vmul.f32	s15, s14, s15
 800788c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007890:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007892:	4b4a      	ldr	r3, [pc, #296]	@ (80079bc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800789a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800789e:	d121      	bne.n	80078e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80078a0:	4b46      	ldr	r3, [pc, #280]	@ (80079bc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80078a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d017      	beq.n	80078dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80078ac:	4b43      	ldr	r3, [pc, #268]	@ (80079bc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80078ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078b0:	0a5b      	lsrs	r3, r3, #9
 80078b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078b6:	ee07 3a90 	vmov	s15, r3
 80078ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 80078be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80078c2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80078c6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80078ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078d2:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	601a      	str	r2, [r3, #0]
 80078da:	e006      	b.n	80078ea <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	601a      	str	r2, [r3, #0]
 80078e2:	e002      	b.n	80078ea <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80078ea:	4b34      	ldr	r3, [pc, #208]	@ (80079bc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80078f6:	d121      	bne.n	800793c <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80078f8:	4b30      	ldr	r3, [pc, #192]	@ (80079bc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80078fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007900:	2b00      	cmp	r3, #0
 8007902:	d017      	beq.n	8007934 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007904:	4b2d      	ldr	r3, [pc, #180]	@ (80079bc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007908:	0c1b      	lsrs	r3, r3, #16
 800790a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800790e:	ee07 3a90 	vmov	s15, r3
 8007912:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8007916:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800791a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800791e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007922:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007926:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800792a:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	605a      	str	r2, [r3, #4]
 8007932:	e006      	b.n	8007942 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	605a      	str	r2, [r3, #4]
 800793a:	e002      	b.n	8007942 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007942:	4b1e      	ldr	r3, [pc, #120]	@ (80079bc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800794a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800794e:	d121      	bne.n	8007994 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8007950:	4b1a      	ldr	r3, [pc, #104]	@ (80079bc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007954:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007958:	2b00      	cmp	r3, #0
 800795a:	d017      	beq.n	800798c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800795c:	4b17      	ldr	r3, [pc, #92]	@ (80079bc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800795e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007960:	0e1b      	lsrs	r3, r3, #24
 8007962:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007966:	ee07 3a90 	vmov	s15, r3
 800796a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 800796e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007972:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8007976:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800797a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800797e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007982:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800798a:	e010      	b.n	80079ae <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	609a      	str	r2, [r3, #8]
}
 8007992:	e00c      	b.n	80079ae <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	609a      	str	r2, [r3, #8]
}
 800799a:	e008      	b.n	80079ae <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	609a      	str	r2, [r3, #8]
}
 80079ae:	bf00      	nop
 80079b0:	372c      	adds	r7, #44	@ 0x2c
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr
 80079ba:	bf00      	nop
 80079bc:	44020c00 	.word	0x44020c00
 80079c0:	03d09000 	.word	0x03d09000
 80079c4:	46000000 	.word	0x46000000
 80079c8:	4a742400 	.word	0x4a742400
 80079cc:	4af42400 	.word	0x4af42400

080079d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b08b      	sub	sp, #44	@ 0x2c
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80079d8:	4bae      	ldr	r3, [pc, #696]	@ (8007c94 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80079da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079e0:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80079e2:	4bac      	ldr	r3, [pc, #688]	@ (8007c94 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80079e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079e6:	f003 0303 	and.w	r3, r3, #3
 80079ea:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 80079ec:	4ba9      	ldr	r3, [pc, #676]	@ (8007c94 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80079ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079f0:	0a1b      	lsrs	r3, r3, #8
 80079f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80079f6:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80079f8:	4ba6      	ldr	r3, [pc, #664]	@ (8007c94 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80079fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079fc:	091b      	lsrs	r3, r3, #4
 80079fe:	f003 0301 	and.w	r3, r3, #1
 8007a02:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8007a04:	4ba3      	ldr	r3, [pc, #652]	@ (8007c94 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007a06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a08:	08db      	lsrs	r3, r3, #3
 8007a0a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a0e:	697a      	ldr	r2, [r7, #20]
 8007a10:	fb02 f303 	mul.w	r3, r2, r3
 8007a14:	ee07 3a90 	vmov	s15, r3
 8007a18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a1c:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8007a20:	69bb      	ldr	r3, [r7, #24]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	f000 8126 	beq.w	8007c74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 8007a28:	69fb      	ldr	r3, [r7, #28]
 8007a2a:	2b03      	cmp	r3, #3
 8007a2c:	d053      	beq.n	8007ad6 <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	2b03      	cmp	r3, #3
 8007a32:	d86f      	bhi.n	8007b14 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d003      	beq.n	8007a42 <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 8007a3a:	69fb      	ldr	r3, [r7, #28]
 8007a3c:	2b02      	cmp	r3, #2
 8007a3e:	d02b      	beq.n	8007a98 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8007a40:	e068      	b.n	8007b14 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007a42:	4b94      	ldr	r3, [pc, #592]	@ (8007c94 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	08db      	lsrs	r3, r3, #3
 8007a48:	f003 0303 	and.w	r3, r3, #3
 8007a4c:	4a92      	ldr	r2, [pc, #584]	@ (8007c98 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8007a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8007a52:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	ee07 3a90 	vmov	s15, r3
 8007a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a5e:	69bb      	ldr	r3, [r7, #24]
 8007a60:	ee07 3a90 	vmov	s15, r3
 8007a64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a6c:	6a3b      	ldr	r3, [r7, #32]
 8007a6e:	ee07 3a90 	vmov	s15, r3
 8007a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a76:	ed97 6a04 	vldr	s12, [r7, #16]
 8007a7a:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8007c9c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a92:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007a96:	e068      	b.n	8007b6a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	ee07 3a90 	vmov	s15, r3
 8007a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aa2:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8007ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8007aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007aaa:	6a3b      	ldr	r3, [r7, #32]
 8007aac:	ee07 3a90 	vmov	s15, r3
 8007ab0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ab4:	ed97 6a04 	vldr	s12, [r7, #16]
 8007ab8:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007c9c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007abc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ac0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ac4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ac8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007acc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ad0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007ad4:	e049      	b.n	8007b6a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	ee07 3a90 	vmov	s15, r3
 8007adc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ae0:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8007ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 8007ae4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ae8:	6a3b      	ldr	r3, [r7, #32]
 8007aea:	ee07 3a90 	vmov	s15, r3
 8007aee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007af2:	ed97 6a04 	vldr	s12, [r7, #16]
 8007af6:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8007c9c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007afa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007afe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b0e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007b12:	e02a      	b.n	8007b6a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007b14:	4b5f      	ldr	r3, [pc, #380]	@ (8007c94 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	08db      	lsrs	r3, r3, #3
 8007b1a:	f003 0303 	and.w	r3, r3, #3
 8007b1e:	4a5e      	ldr	r2, [pc, #376]	@ (8007c98 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8007b20:	fa22 f303 	lsr.w	r3, r2, r3
 8007b24:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	ee07 3a90 	vmov	s15, r3
 8007b2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b30:	69bb      	ldr	r3, [r7, #24]
 8007b32:	ee07 3a90 	vmov	s15, r3
 8007b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b3e:	6a3b      	ldr	r3, [r7, #32]
 8007b40:	ee07 3a90 	vmov	s15, r3
 8007b44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b48:	ed97 6a04 	vldr	s12, [r7, #16]
 8007b4c:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8007c9c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007b50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b58:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b64:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007b68:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007b6a:	4b4a      	ldr	r3, [pc, #296]	@ (8007c94 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b76:	d121      	bne.n	8007bbc <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8007b78:	4b46      	ldr	r3, [pc, #280]	@ (8007c94 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d017      	beq.n	8007bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007b84:	4b43      	ldr	r3, [pc, #268]	@ (8007c94 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007b86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b88:	0a5b      	lsrs	r3, r3, #9
 8007b8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b8e:	ee07 3a90 	vmov	s15, r3
 8007b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8007b96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b9a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007b9e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007ba2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ba6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007baa:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	601a      	str	r2, [r3, #0]
 8007bb2:	e006      	b.n	8007bc2 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	601a      	str	r2, [r3, #0]
 8007bba:	e002      	b.n	8007bc2 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007bc2:	4b34      	ldr	r3, [pc, #208]	@ (8007c94 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007bca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bce:	d121      	bne.n	8007c14 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8007bd0:	4b30      	ldr	r3, [pc, #192]	@ (8007c94 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d017      	beq.n	8007c0c <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007bdc:	4b2d      	ldr	r3, [pc, #180]	@ (8007c94 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007bde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007be0:	0c1b      	lsrs	r3, r3, #16
 8007be2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007be6:	ee07 3a90 	vmov	s15, r3
 8007bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007bee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007bf2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007bf6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007bfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c02:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	605a      	str	r2, [r3, #4]
 8007c0a:	e006      	b.n	8007c1a <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	605a      	str	r2, [r3, #4]
 8007c12:	e002      	b.n	8007c1a <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c1a:	4b1e      	ldr	r3, [pc, #120]	@ (8007c94 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c26:	d121      	bne.n	8007c6c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8007c28:	4b1a      	ldr	r3, [pc, #104]	@ (8007c94 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d017      	beq.n	8007c64 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007c34:	4b17      	ldr	r3, [pc, #92]	@ (8007c94 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007c36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c38:	0e1b      	lsrs	r3, r3, #24
 8007c3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c3e:	ee07 3a90 	vmov	s15, r3
 8007c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8007c46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c4a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007c4e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007c52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c5a:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8007c62:	e010      	b.n	8007c86 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	609a      	str	r2, [r3, #8]
}
 8007c6a:	e00c      	b.n	8007c86 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	609a      	str	r2, [r3, #8]
}
 8007c72:	e008      	b.n	8007c86 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	609a      	str	r2, [r3, #8]
}
 8007c86:	bf00      	nop
 8007c88:	372c      	adds	r7, #44	@ 0x2c
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr
 8007c92:	bf00      	nop
 8007c94:	44020c00 	.word	0x44020c00
 8007c98:	03d09000 	.word	0x03d09000
 8007c9c:	46000000 	.word	0x46000000
 8007ca0:	4a742400 	.word	0x4a742400
 8007ca4:	4af42400 	.word	0x4af42400

08007ca8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007ca8:	b590      	push	{r4, r7, lr}
 8007caa:	b08f      	sub	sp, #60	@ 0x3c
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8007cb2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007cb6:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8007cba:	4321      	orrs	r1, r4
 8007cbc:	d150      	bne.n	8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007cbe:	4b26      	ldr	r3, [pc, #152]	@ (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007cc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007cc4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007cc8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8007cca:	4b23      	ldr	r3, [pc, #140]	@ (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007ccc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007cd0:	f003 0302 	and.w	r3, r3, #2
 8007cd4:	2b02      	cmp	r3, #2
 8007cd6:	d108      	bne.n	8007cea <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8007cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cde:	d104      	bne.n	8007cea <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8007ce0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ce4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ce6:	f002 bb2a 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8007cea:	4b1b      	ldr	r3, [pc, #108]	@ (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007cec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007cf0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007cf4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007cf8:	d108      	bne.n	8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8007cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d00:	d104      	bne.n	8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8007d02:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007d06:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d08:	f002 bb19 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8007d0c:	4b12      	ldr	r3, [pc, #72]	@ (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d18:	d119      	bne.n	8007d4e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8007d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d20:	d115      	bne.n	8007d4e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007d22:	4b0d      	ldr	r3, [pc, #52]	@ (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007d24:	69db      	ldr	r3, [r3, #28]
 8007d26:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8007d2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d2e:	d30a      	bcc.n	8007d46 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8007d30:	4b09      	ldr	r3, [pc, #36]	@ (8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007d32:	69db      	ldr	r3, [r3, #28]
 8007d34:	0a1b      	lsrs	r3, r3, #8
 8007d36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d3a:	4a08      	ldr	r2, [pc, #32]	@ (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d40:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007d42:	f002 bafc 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 8007d46:	2300      	movs	r3, #0
 8007d48:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007d4a:	f002 baf8 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d52:	f002 baf4 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007d56:	bf00      	nop
 8007d58:	44020c00 	.word	0x44020c00
 8007d5c:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8007d60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d64:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 8007d68:	ea50 0104 	orrs.w	r1, r0, r4
 8007d6c:	f001 8275 	beq.w	800925a <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8007d70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d74:	2801      	cmp	r0, #1
 8007d76:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 8007d7a:	f082 82dd 	bcs.w	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007d7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d82:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8007d86:	ea50 0104 	orrs.w	r1, r0, r4
 8007d8a:	f001 816c 	beq.w	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 8007d8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d92:	2801      	cmp	r0, #1
 8007d94:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8007d98:	f082 82ce 	bcs.w	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007d9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007da0:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 8007da4:	ea50 0104 	orrs.w	r1, r0, r4
 8007da8:	f001 8602 	beq.w	80099b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8007dac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007db0:	2801      	cmp	r0, #1
 8007db2:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 8007db6:	f082 82bf 	bcs.w	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007dba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007dbe:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 8007dc2:	ea50 0104 	orrs.w	r1, r0, r4
 8007dc6:	f001 854c 	beq.w	8009862 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8007dca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007dce:	2801      	cmp	r0, #1
 8007dd0:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 8007dd4:	f082 82b0 	bcs.w	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007dd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ddc:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 8007de0:	ea50 0104 	orrs.w	r1, r0, r4
 8007de4:	f001 849e 	beq.w	8009724 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8007de8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007dec:	2801      	cmp	r0, #1
 8007dee:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 8007df2:	f082 82a1 	bcs.w	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007df6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007dfa:	f1a1 0420 	sub.w	r4, r1, #32
 8007dfe:	ea50 0104 	orrs.w	r1, r0, r4
 8007e02:	f001 83e8 	beq.w	80095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8007e06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e0a:	2801      	cmp	r0, #1
 8007e0c:	f171 0120 	sbcs.w	r1, r1, #32
 8007e10:	f082 8292 	bcs.w	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007e14:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e18:	f1a1 0410 	sub.w	r4, r1, #16
 8007e1c:	ea50 0104 	orrs.w	r1, r0, r4
 8007e20:	f002 8256 	beq.w	800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8007e24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e28:	2801      	cmp	r0, #1
 8007e2a:	f171 0110 	sbcs.w	r1, r1, #16
 8007e2e:	f082 8283 	bcs.w	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007e32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e36:	f1a1 0408 	sub.w	r4, r1, #8
 8007e3a:	ea50 0104 	orrs.w	r1, r0, r4
 8007e3e:	f002 81cc 	beq.w	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8007e42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e46:	2801      	cmp	r0, #1
 8007e48:	f171 0108 	sbcs.w	r1, r1, #8
 8007e4c:	f082 8274 	bcs.w	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007e50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e54:	1f0c      	subs	r4, r1, #4
 8007e56:	ea50 0104 	orrs.w	r1, r0, r4
 8007e5a:	f001 8648 	beq.w	8009aee <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8007e5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e62:	2801      	cmp	r0, #1
 8007e64:	f171 0104 	sbcs.w	r1, r1, #4
 8007e68:	f082 8266 	bcs.w	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007e6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e70:	1e8c      	subs	r4, r1, #2
 8007e72:	ea50 0104 	orrs.w	r1, r0, r4
 8007e76:	f002 8143 	beq.w	800a100 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8007e7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e7e:	2801      	cmp	r0, #1
 8007e80:	f171 0102 	sbcs.w	r1, r1, #2
 8007e84:	f082 8258 	bcs.w	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007e88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e8c:	1e4c      	subs	r4, r1, #1
 8007e8e:	ea50 0104 	orrs.w	r1, r0, r4
 8007e92:	f002 80ce 	beq.w	800a032 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8007e96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e9a:	2801      	cmp	r0, #1
 8007e9c:	f171 0101 	sbcs.w	r1, r1, #1
 8007ea0:	f082 824a 	bcs.w	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007ea4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ea8:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8007eac:	4321      	orrs	r1, r4
 8007eae:	f002 8059 	beq.w	8009f64 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 8007eb2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007eb6:	4cd9      	ldr	r4, [pc, #868]	@ (800821c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8007eb8:	42a0      	cmp	r0, r4
 8007eba:	f171 0100 	sbcs.w	r1, r1, #0
 8007ebe:	f082 823b 	bcs.w	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007ec2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ec6:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8007eca:	4321      	orrs	r1, r4
 8007ecc:	f001 87d9 	beq.w	8009e82 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8007ed0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ed4:	4cd2      	ldr	r4, [pc, #840]	@ (8008220 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8007ed6:	42a0      	cmp	r0, r4
 8007ed8:	f171 0100 	sbcs.w	r1, r1, #0
 8007edc:	f082 822c 	bcs.w	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007ee0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ee4:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8007ee8:	4321      	orrs	r1, r4
 8007eea:	f001 8751 	beq.w	8009d90 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8007eee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ef2:	4ccc      	ldr	r4, [pc, #816]	@ (8008224 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8007ef4:	42a0      	cmp	r0, r4
 8007ef6:	f171 0100 	sbcs.w	r1, r1, #0
 8007efa:	f082 821d 	bcs.w	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007efe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f02:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8007f06:	4321      	orrs	r1, r4
 8007f08:	f001 869a 	beq.w	8009c40 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8007f0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f10:	4cc5      	ldr	r4, [pc, #788]	@ (8008228 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8007f12:	42a0      	cmp	r0, r4
 8007f14:	f171 0100 	sbcs.w	r1, r1, #0
 8007f18:	f082 820e 	bcs.w	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007f1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f20:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8007f24:	4321      	orrs	r1, r4
 8007f26:	f001 8612 	beq.w	8009b4e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8007f2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f2e:	4cbf      	ldr	r4, [pc, #764]	@ (800822c <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8007f30:	42a0      	cmp	r0, r4
 8007f32:	f171 0100 	sbcs.w	r1, r1, #0
 8007f36:	f082 81ff 	bcs.w	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007f3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f3e:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8007f42:	4321      	orrs	r1, r4
 8007f44:	f002 817e 	beq.w	800a244 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8007f48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f4c:	4cb8      	ldr	r4, [pc, #736]	@ (8008230 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007f4e:	42a0      	cmp	r0, r4
 8007f50:	f171 0100 	sbcs.w	r1, r1, #0
 8007f54:	f082 81f0 	bcs.w	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007f58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f5c:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 8007f60:	4321      	orrs	r1, r4
 8007f62:	f000 829e 	beq.w	80084a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8007f66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f6a:	4cb2      	ldr	r4, [pc, #712]	@ (8008234 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007f6c:	42a0      	cmp	r0, r4
 8007f6e:	f171 0100 	sbcs.w	r1, r1, #0
 8007f72:	f082 81e1 	bcs.w	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007f76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f7a:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8007f7e:	4321      	orrs	r1, r4
 8007f80:	f000 826d 	beq.w	800845e <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8007f84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f88:	4cab      	ldr	r4, [pc, #684]	@ (8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007f8a:	42a0      	cmp	r0, r4
 8007f8c:	f171 0100 	sbcs.w	r1, r1, #0
 8007f90:	f082 81d2 	bcs.w	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007f94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f98:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8007f9c:	4321      	orrs	r1, r4
 8007f9e:	f001 800d 	beq.w	8008fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8007fa2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fa6:	4ca5      	ldr	r4, [pc, #660]	@ (800823c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007fa8:	42a0      	cmp	r0, r4
 8007faa:	f171 0100 	sbcs.w	r1, r1, #0
 8007fae:	f082 81c3 	bcs.w	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007fb2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fb6:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 8007fba:	4321      	orrs	r1, r4
 8007fbc:	f000 81d0 	beq.w	8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8007fc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fc4:	4c9e      	ldr	r4, [pc, #632]	@ (8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007fc6:	42a0      	cmp	r0, r4
 8007fc8:	f171 0100 	sbcs.w	r1, r1, #0
 8007fcc:	f082 81b4 	bcs.w	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007fd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fd4:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 8007fd8:	4321      	orrs	r1, r4
 8007fda:	f000 8142 	beq.w	8008262 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8007fde:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fe2:	4c98      	ldr	r4, [pc, #608]	@ (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007fe4:	42a0      	cmp	r0, r4
 8007fe6:	f171 0100 	sbcs.w	r1, r1, #0
 8007fea:	f082 81a5 	bcs.w	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007fee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ff2:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8007ff6:	4321      	orrs	r1, r4
 8007ff8:	f001 824e 	beq.w	8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8007ffc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008000:	4c91      	ldr	r4, [pc, #580]	@ (8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8008002:	42a0      	cmp	r0, r4
 8008004:	f171 0100 	sbcs.w	r1, r1, #0
 8008008:	f082 8196 	bcs.w	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800800c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008010:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8008014:	4321      	orrs	r1, r4
 8008016:	f001 8197 	beq.w	8009348 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 800801a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800801e:	4c8b      	ldr	r4, [pc, #556]	@ (800824c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8008020:	42a0      	cmp	r0, r4
 8008022:	f171 0100 	sbcs.w	r1, r1, #0
 8008026:	f082 8187 	bcs.w	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800802a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800802e:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8008032:	4321      	orrs	r1, r4
 8008034:	f001 8154 	beq.w	80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8008038:	e9d7 0100 	ldrd	r0, r1, [r7]
 800803c:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8008040:	f171 0100 	sbcs.w	r1, r1, #0
 8008044:	f082 8178 	bcs.w	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008048:	e9d7 0100 	ldrd	r0, r1, [r7]
 800804c:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8008050:	4321      	orrs	r1, r4
 8008052:	f001 80b7 	beq.w	80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8008056:	e9d7 0100 	ldrd	r0, r1, [r7]
 800805a:	f248 0401 	movw	r4, #32769	@ 0x8001
 800805e:	42a0      	cmp	r0, r4
 8008060:	f171 0100 	sbcs.w	r1, r1, #0
 8008064:	f082 8168 	bcs.w	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008068:	e9d7 0100 	ldrd	r0, r1, [r7]
 800806c:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8008070:	4321      	orrs	r1, r4
 8008072:	f001 8064 	beq.w	800913e <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8008076:	e9d7 0100 	ldrd	r0, r1, [r7]
 800807a:	f244 0401 	movw	r4, #16385	@ 0x4001
 800807e:	42a0      	cmp	r0, r4
 8008080:	f171 0100 	sbcs.w	r1, r1, #0
 8008084:	f082 8158 	bcs.w	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008088:	e9d7 0100 	ldrd	r0, r1, [r7]
 800808c:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8008090:	4321      	orrs	r1, r4
 8008092:	f001 8011 	beq.w	80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8008096:	e9d7 0100 	ldrd	r0, r1, [r7]
 800809a:	f242 0401 	movw	r4, #8193	@ 0x2001
 800809e:	42a0      	cmp	r0, r4
 80080a0:	f171 0100 	sbcs.w	r1, r1, #0
 80080a4:	f082 8148 	bcs.w	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80080a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080ac:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 80080b0:	4321      	orrs	r1, r4
 80080b2:	f000 871e 	beq.w	8008ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 80080b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080ba:	f241 0401 	movw	r4, #4097	@ 0x1001
 80080be:	42a0      	cmp	r0, r4
 80080c0:	f171 0100 	sbcs.w	r1, r1, #0
 80080c4:	f082 8138 	bcs.w	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80080c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080cc:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 80080d0:	4321      	orrs	r1, r4
 80080d2:	f000 86a8 	beq.w	8008e26 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 80080d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080da:	f640 0401 	movw	r4, #2049	@ 0x801
 80080de:	42a0      	cmp	r0, r4
 80080e0:	f171 0100 	sbcs.w	r1, r1, #0
 80080e4:	f082 8128 	bcs.w	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80080e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080ec:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 80080f0:	4321      	orrs	r1, r4
 80080f2:	f000 8632 	beq.w	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 80080f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080fa:	f240 4401 	movw	r4, #1025	@ 0x401
 80080fe:	42a0      	cmp	r0, r4
 8008100:	f171 0100 	sbcs.w	r1, r1, #0
 8008104:	f082 8118 	bcs.w	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008108:	e9d7 0100 	ldrd	r0, r1, [r7]
 800810c:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 8008110:	4321      	orrs	r1, r4
 8008112:	f000 85b0 	beq.w	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8008116:	e9d7 0100 	ldrd	r0, r1, [r7]
 800811a:	f240 2401 	movw	r4, #513	@ 0x201
 800811e:	42a0      	cmp	r0, r4
 8008120:	f171 0100 	sbcs.w	r1, r1, #0
 8008124:	f082 8108 	bcs.w	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008128:	e9d7 0100 	ldrd	r0, r1, [r7]
 800812c:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 8008130:	4321      	orrs	r1, r4
 8008132:	f000 8535 	beq.w	8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8008136:	e9d7 0100 	ldrd	r0, r1, [r7]
 800813a:	f240 1401 	movw	r4, #257	@ 0x101
 800813e:	42a0      	cmp	r0, r4
 8008140:	f171 0100 	sbcs.w	r1, r1, #0
 8008144:	f082 80f8 	bcs.w	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008148:	e9d7 0100 	ldrd	r0, r1, [r7]
 800814c:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 8008150:	4321      	orrs	r1, r4
 8008152:	f000 84ba 	beq.w	8008aca <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8008156:	e9d7 0100 	ldrd	r0, r1, [r7]
 800815a:	2881      	cmp	r0, #129	@ 0x81
 800815c:	f171 0100 	sbcs.w	r1, r1, #0
 8008160:	f082 80ea 	bcs.w	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008164:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008168:	2821      	cmp	r0, #33	@ 0x21
 800816a:	f171 0100 	sbcs.w	r1, r1, #0
 800816e:	d26f      	bcs.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008170:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008174:	4301      	orrs	r1, r0
 8008176:	f002 80df 	beq.w	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800817a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800817e:	1e42      	subs	r2, r0, #1
 8008180:	f141 33ff 	adc.w	r3, r1, #4294967295
 8008184:	2a20      	cmp	r2, #32
 8008186:	f173 0100 	sbcs.w	r1, r3, #0
 800818a:	f082 80d5 	bcs.w	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800818e:	2a1f      	cmp	r2, #31
 8008190:	f202 80d2 	bhi.w	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008194:	a101      	add	r1, pc, #4	@ (adr r1, 800819c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8008196:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800819a:	bf00      	nop
 800819c:	080084fd 	.word	0x080084fd
 80081a0:	080085c9 	.word	0x080085c9
 80081a4:	0800a339 	.word	0x0800a339
 80081a8:	08008689 	.word	0x08008689
 80081ac:	0800a339 	.word	0x0800a339
 80081b0:	0800a339 	.word	0x0800a339
 80081b4:	0800a339 	.word	0x0800a339
 80081b8:	08008759 	.word	0x08008759
 80081bc:	0800a339 	.word	0x0800a339
 80081c0:	0800a339 	.word	0x0800a339
 80081c4:	0800a339 	.word	0x0800a339
 80081c8:	0800a339 	.word	0x0800a339
 80081cc:	0800a339 	.word	0x0800a339
 80081d0:	0800a339 	.word	0x0800a339
 80081d4:	0800a339 	.word	0x0800a339
 80081d8:	0800883b 	.word	0x0800883b
 80081dc:	0800a339 	.word	0x0800a339
 80081e0:	0800a339 	.word	0x0800a339
 80081e4:	0800a339 	.word	0x0800a339
 80081e8:	0800a339 	.word	0x0800a339
 80081ec:	0800a339 	.word	0x0800a339
 80081f0:	0800a339 	.word	0x0800a339
 80081f4:	0800a339 	.word	0x0800a339
 80081f8:	0800a339 	.word	0x0800a339
 80081fc:	0800a339 	.word	0x0800a339
 8008200:	0800a339 	.word	0x0800a339
 8008204:	0800a339 	.word	0x0800a339
 8008208:	0800a339 	.word	0x0800a339
 800820c:	0800a339 	.word	0x0800a339
 8008210:	0800a339 	.word	0x0800a339
 8008214:	0800a339 	.word	0x0800a339
 8008218:	08008911 	.word	0x08008911
 800821c:	80000001 	.word	0x80000001
 8008220:	40000001 	.word	0x40000001
 8008224:	20000001 	.word	0x20000001
 8008228:	10000001 	.word	0x10000001
 800822c:	08000001 	.word	0x08000001
 8008230:	04000001 	.word	0x04000001
 8008234:	00800001 	.word	0x00800001
 8008238:	00400001 	.word	0x00400001
 800823c:	00200001 	.word	0x00200001
 8008240:	00100001 	.word	0x00100001
 8008244:	00080001 	.word	0x00080001
 8008248:	00040001 	.word	0x00040001
 800824c:	00020001 	.word	0x00020001
 8008250:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008254:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8008258:	430b      	orrs	r3, r1
 800825a:	f000 83c4 	beq.w	80089e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800825e:	f002 b86b 	b.w	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8008262:	4ba1      	ldr	r3, [pc, #644]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008264:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008268:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800826c:	633b      	str	r3, [r7, #48]	@ 0x30
 800826e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008270:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008274:	d036      	beq.n	80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8008276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008278:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800827c:	d86b      	bhi.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800827e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008280:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008284:	d02b      	beq.n	80082de <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8008286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008288:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800828c:	d863      	bhi.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800828e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008290:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008294:	d01b      	beq.n	80082ce <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8008296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008298:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800829c:	d85b      	bhi.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800829e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d004      	beq.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 80082a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082aa:	d008      	beq.n	80082be <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 80082ac:	e053      	b.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80082ae:	f107 0320 	add.w	r3, r7, #32
 80082b2:	4618      	mov	r0, r3
 80082b4:	f7ff f8b4 	bl	8007420 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80082b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ba:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80082bc:	e04e      	b.n	800835c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082be:	f107 0314 	add.w	r3, r7, #20
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7ff fa18 	bl	80076f8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80082cc:	e046      	b.n	800835c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082ce:	f107 0308 	add.w	r3, r7, #8
 80082d2:	4618      	mov	r0, r3
 80082d4:	f7ff fb7c 	bl	80079d0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80082dc:	e03e      	b.n	800835c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80082de:	4b83      	ldr	r3, [pc, #524]	@ (80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80082e0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80082e2:	e03b      	b.n	800835c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80082e4:	4b80      	ldr	r3, [pc, #512]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80082e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80082ea:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80082ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80082f0:	4b7d      	ldr	r3, [pc, #500]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f003 0302 	and.w	r3, r3, #2
 80082f8:	2b02      	cmp	r3, #2
 80082fa:	d10c      	bne.n	8008316 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 80082fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d109      	bne.n	8008316 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008302:	4b79      	ldr	r3, [pc, #484]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	08db      	lsrs	r3, r3, #3
 8008308:	f003 0303 	and.w	r3, r3, #3
 800830c:	4a78      	ldr	r2, [pc, #480]	@ (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800830e:	fa22 f303 	lsr.w	r3, r2, r3
 8008312:	637b      	str	r3, [r7, #52]	@ 0x34
 8008314:	e01e      	b.n	8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008316:	4b74      	ldr	r3, [pc, #464]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800831e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008322:	d106      	bne.n	8008332 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008326:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800832a:	d102      	bne.n	8008332 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800832c:	4b71      	ldr	r3, [pc, #452]	@ (80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800832e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008330:	e010      	b.n	8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008332:	4b6d      	ldr	r3, [pc, #436]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800833a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800833e:	d106      	bne.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8008340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008342:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008346:	d102      	bne.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008348:	4b6b      	ldr	r3, [pc, #428]	@ (80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800834a:	637b      	str	r3, [r7, #52]	@ 0x34
 800834c:	e002      	b.n	8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800834e:	2300      	movs	r3, #0
 8008350:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008352:	e003      	b.n	800835c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8008354:	e002      	b.n	800835c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8008356:	2300      	movs	r3, #0
 8008358:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800835a:	bf00      	nop
          }
        }
        break;
 800835c:	f001 bfef 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8008360:	4b61      	ldr	r3, [pc, #388]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008362:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008366:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 800836a:	633b      	str	r3, [r7, #48]	@ 0x30
 800836c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800836e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008372:	d036      	beq.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8008374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008376:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800837a:	d86b      	bhi.n	8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800837c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800837e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8008382:	d02b      	beq.n	80083dc <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8008384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008386:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800838a:	d863      	bhi.n	8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800838c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800838e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008392:	d01b      	beq.n	80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008396:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800839a:	d85b      	bhi.n	8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800839c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d004      	beq.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80083a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80083a8:	d008      	beq.n	80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 80083aa:	e053      	b.n	8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80083ac:	f107 0320 	add.w	r3, r7, #32
 80083b0:	4618      	mov	r0, r3
 80083b2:	f7ff f835 	bl	8007420 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80083b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80083ba:	e04e      	b.n	800845a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083bc:	f107 0314 	add.w	r3, r7, #20
 80083c0:	4618      	mov	r0, r3
 80083c2:	f7ff f999 	bl	80076f8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80083ca:	e046      	b.n	800845a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083cc:	f107 0308 	add.w	r3, r7, #8
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7ff fafd 	bl	80079d0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80083da:	e03e      	b.n	800845a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80083dc:	4b43      	ldr	r3, [pc, #268]	@ (80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80083de:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80083e0:	e03b      	b.n	800845a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80083e2:	4b41      	ldr	r3, [pc, #260]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80083e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80083e8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80083ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80083ee:	4b3e      	ldr	r3, [pc, #248]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f003 0302 	and.w	r3, r3, #2
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	d10c      	bne.n	8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 80083fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d109      	bne.n	8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008400:	4b39      	ldr	r3, [pc, #228]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	08db      	lsrs	r3, r3, #3
 8008406:	f003 0303 	and.w	r3, r3, #3
 800840a:	4a39      	ldr	r2, [pc, #228]	@ (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800840c:	fa22 f303 	lsr.w	r3, r2, r3
 8008410:	637b      	str	r3, [r7, #52]	@ 0x34
 8008412:	e01e      	b.n	8008452 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008414:	4b34      	ldr	r3, [pc, #208]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800841c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008420:	d106      	bne.n	8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008424:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008428:	d102      	bne.n	8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800842a:	4b32      	ldr	r3, [pc, #200]	@ (80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800842c:	637b      	str	r3, [r7, #52]	@ 0x34
 800842e:	e010      	b.n	8008452 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008430:	4b2d      	ldr	r3, [pc, #180]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008438:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800843c:	d106      	bne.n	800844c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 800843e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008440:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008444:	d102      	bne.n	800844c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008446:	4b2c      	ldr	r3, [pc, #176]	@ (80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8008448:	637b      	str	r3, [r7, #52]	@ 0x34
 800844a:	e002      	b.n	8008452 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800844c:	2300      	movs	r3, #0
 800844e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008450:	e003      	b.n	800845a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8008452:	e002      	b.n	800845a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8008454:	2300      	movs	r3, #0
 8008456:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008458:	bf00      	nop
          }
        }
        break;
 800845a:	f001 bf70 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 800845e:	4b22      	ldr	r3, [pc, #136]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008460:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008468:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 800846a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800846c:	2b00      	cmp	r3, #0
 800846e:	d108      	bne.n	8008482 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008470:	f107 0320 	add.w	r3, r7, #32
 8008474:	4618      	mov	r0, r3
 8008476:	f7fe ffd3 	bl	8007420 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800847a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800847c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800847e:	f001 bf5e 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8008482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008484:	2b40      	cmp	r3, #64	@ 0x40
 8008486:	d108      	bne.n	800849a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008488:	f107 0314 	add.w	r3, r7, #20
 800848c:	4618      	mov	r0, r3
 800848e:	f7ff f933 	bl	80076f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008492:	69fb      	ldr	r3, [r7, #28]
 8008494:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008496:	f001 bf52 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800849a:	2300      	movs	r3, #0
 800849c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800849e:	f001 bf4e 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 80084a2:	4b11      	ldr	r3, [pc, #68]	@ (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80084a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80084a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084ac:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 80084ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d108      	bne.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80084b4:	f107 0320 	add.w	r3, r7, #32
 80084b8:	4618      	mov	r0, r3
 80084ba:	f7fe ffb1 	bl	8007420 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80084be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80084c2:	f001 bf3c 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 80084c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c8:	2b80      	cmp	r3, #128	@ 0x80
 80084ca:	d108      	bne.n	80084de <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084cc:	f107 0314 	add.w	r3, r7, #20
 80084d0:	4618      	mov	r0, r3
 80084d2:	f7ff f911 	bl	80076f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80084d6:	69fb      	ldr	r3, [r7, #28]
 80084d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80084da:	f001 bf30 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80084de:	2300      	movs	r3, #0
 80084e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80084e2:	f001 bf2c 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80084e6:	bf00      	nop
 80084e8:	44020c00 	.word	0x44020c00
 80084ec:	00bb8000 	.word	0x00bb8000
 80084f0:	03d09000 	.word	0x03d09000
 80084f4:	003d0900 	.word	0x003d0900
 80084f8:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80084fc:	4b9d      	ldr	r3, [pc, #628]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80084fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008502:	f003 0307 	and.w	r3, r3, #7
 8008506:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8008508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800850a:	2b00      	cmp	r3, #0
 800850c:	d104      	bne.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800850e:	f7fc ffd1 	bl	80054b4 <HAL_RCC_GetPCLK2Freq>
 8008512:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008514:	f001 bf13 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8008518:	4b96      	ldr	r3, [pc, #600]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008520:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008524:	d10a      	bne.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8008526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008528:	2b01      	cmp	r3, #1
 800852a:	d107      	bne.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800852c:	f107 0314 	add.w	r3, r7, #20
 8008530:	4618      	mov	r0, r3
 8008532:	f7ff f8e1 	bl	80076f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008536:	69bb      	ldr	r3, [r7, #24]
 8008538:	637b      	str	r3, [r7, #52]	@ 0x34
 800853a:	e043      	b.n	80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 800853c:	4b8d      	ldr	r3, [pc, #564]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008544:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008548:	d10a      	bne.n	8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 800854a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800854c:	2b02      	cmp	r3, #2
 800854e:	d107      	bne.n	8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008550:	f107 0308 	add.w	r3, r7, #8
 8008554:	4618      	mov	r0, r3
 8008556:	f7ff fa3b 	bl	80079d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	637b      	str	r3, [r7, #52]	@ 0x34
 800855e:	e031      	b.n	80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8008560:	4b84      	ldr	r3, [pc, #528]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f003 0302 	and.w	r3, r3, #2
 8008568:	2b02      	cmp	r3, #2
 800856a:	d10c      	bne.n	8008586 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800856c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800856e:	2b03      	cmp	r3, #3
 8008570:	d109      	bne.n	8008586 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008572:	4b80      	ldr	r3, [pc, #512]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	08db      	lsrs	r3, r3, #3
 8008578:	f003 0303 	and.w	r3, r3, #3
 800857c:	4a7e      	ldr	r2, [pc, #504]	@ (8008778 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800857e:	fa22 f303 	lsr.w	r3, r2, r3
 8008582:	637b      	str	r3, [r7, #52]	@ 0x34
 8008584:	e01e      	b.n	80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8008586:	4b7b      	ldr	r3, [pc, #492]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800858e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008592:	d105      	bne.n	80085a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8008594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008596:	2b04      	cmp	r3, #4
 8008598:	d102      	bne.n	80085a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 800859a:	4b78      	ldr	r3, [pc, #480]	@ (800877c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800859c:	637b      	str	r3, [r7, #52]	@ 0x34
 800859e:	e011      	b.n	80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80085a0:	4b74      	ldr	r3, [pc, #464]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80085a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80085a6:	f003 0302 	and.w	r3, r3, #2
 80085aa:	2b02      	cmp	r3, #2
 80085ac:	d106      	bne.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 80085ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b0:	2b05      	cmp	r3, #5
 80085b2:	d103      	bne.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 80085b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80085ba:	e003      	b.n	80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 80085bc:	2300      	movs	r3, #0
 80085be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80085c0:	f001 bebd 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80085c4:	f001 bebb 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80085c8:	4b6a      	ldr	r3, [pc, #424]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80085ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80085ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80085d2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80085d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d104      	bne.n	80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80085da:	f7fc ff55 	bl	8005488 <HAL_RCC_GetPCLK1Freq>
 80085de:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80085e0:	f001 bead 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80085e4:	4b63      	ldr	r3, [pc, #396]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80085ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085f0:	d10a      	bne.n	8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80085f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f4:	2b08      	cmp	r3, #8
 80085f6:	d107      	bne.n	8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085f8:	f107 0314 	add.w	r3, r7, #20
 80085fc:	4618      	mov	r0, r3
 80085fe:	f7ff f87b 	bl	80076f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008602:	69bb      	ldr	r3, [r7, #24]
 8008604:	637b      	str	r3, [r7, #52]	@ 0x34
 8008606:	e03d      	b.n	8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8008608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800860a:	2b10      	cmp	r3, #16
 800860c:	d108      	bne.n	8008620 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800860e:	f107 0308 	add.w	r3, r7, #8
 8008612:	4618      	mov	r0, r3
 8008614:	f7ff f9dc 	bl	80079d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800861c:	f001 be8f 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8008620:	4b54      	ldr	r3, [pc, #336]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f003 0302 	and.w	r3, r3, #2
 8008628:	2b02      	cmp	r3, #2
 800862a:	d10c      	bne.n	8008646 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800862c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800862e:	2b18      	cmp	r3, #24
 8008630:	d109      	bne.n	8008646 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008632:	4b50      	ldr	r3, [pc, #320]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	08db      	lsrs	r3, r3, #3
 8008638:	f003 0303 	and.w	r3, r3, #3
 800863c:	4a4e      	ldr	r2, [pc, #312]	@ (8008778 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800863e:	fa22 f303 	lsr.w	r3, r2, r3
 8008642:	637b      	str	r3, [r7, #52]	@ 0x34
 8008644:	e01e      	b.n	8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8008646:	4b4b      	ldr	r3, [pc, #300]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800864e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008652:	d105      	bne.n	8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008656:	2b20      	cmp	r3, #32
 8008658:	d102      	bne.n	8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 800865a:	4b48      	ldr	r3, [pc, #288]	@ (800877c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800865c:	637b      	str	r3, [r7, #52]	@ 0x34
 800865e:	e011      	b.n	8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008660:	4b44      	ldr	r3, [pc, #272]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008662:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008666:	f003 0302 	and.w	r3, r3, #2
 800866a:	2b02      	cmp	r3, #2
 800866c:	d106      	bne.n	800867c <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 800866e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008670:	2b28      	cmp	r3, #40	@ 0x28
 8008672:	d103      	bne.n	800867c <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8008674:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008678:	637b      	str	r3, [r7, #52]	@ 0x34
 800867a:	e003      	b.n	8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 800867c:	2300      	movs	r3, #0
 800867e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008680:	f001 be5d 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008684:	f001 be5b 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008688:	4b3a      	ldr	r3, [pc, #232]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800868a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800868e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008692:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8008694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008696:	2b00      	cmp	r3, #0
 8008698:	d104      	bne.n	80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800869a:	f7fc fef5 	bl	8005488 <HAL_RCC_GetPCLK1Freq>
 800869e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 80086a0:	f001 be4d 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 80086a4:	4b33      	ldr	r3, [pc, #204]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086b0:	d10a      	bne.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 80086b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b4:	2b40      	cmp	r3, #64	@ 0x40
 80086b6:	d107      	bne.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086b8:	f107 0314 	add.w	r3, r7, #20
 80086bc:	4618      	mov	r0, r3
 80086be:	f7ff f81b 	bl	80076f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80086c2:	69bb      	ldr	r3, [r7, #24]
 80086c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80086c6:	e045      	b.n	8008754 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 80086c8:	4b2a      	ldr	r3, [pc, #168]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80086d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086d4:	d10a      	bne.n	80086ec <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 80086d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d8:	2b80      	cmp	r3, #128	@ 0x80
 80086da:	d107      	bne.n	80086ec <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086dc:	f107 0308 	add.w	r3, r7, #8
 80086e0:	4618      	mov	r0, r3
 80086e2:	f7ff f975 	bl	80079d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80086ea:	e033      	b.n	8008754 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80086ec:	4b21      	ldr	r3, [pc, #132]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f003 0302 	and.w	r3, r3, #2
 80086f4:	2b02      	cmp	r3, #2
 80086f6:	d10c      	bne.n	8008712 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 80086f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80086fc:	d109      	bne.n	8008712 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80086fe:	4b1d      	ldr	r3, [pc, #116]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	08db      	lsrs	r3, r3, #3
 8008704:	f003 0303 	and.w	r3, r3, #3
 8008708:	4a1b      	ldr	r2, [pc, #108]	@ (8008778 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800870a:	fa22 f303 	lsr.w	r3, r2, r3
 800870e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008710:	e020      	b.n	8008754 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8008712:	4b18      	ldr	r3, [pc, #96]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800871a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800871e:	d106      	bne.n	800872e <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8008720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008722:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008726:	d102      	bne.n	800872e <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8008728:	4b14      	ldr	r3, [pc, #80]	@ (800877c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800872a:	637b      	str	r3, [r7, #52]	@ 0x34
 800872c:	e012      	b.n	8008754 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800872e:	4b11      	ldr	r3, [pc, #68]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008730:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008734:	f003 0302 	and.w	r3, r3, #2
 8008738:	2b02      	cmp	r3, #2
 800873a:	d107      	bne.n	800874c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 800873c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800873e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8008742:	d103      	bne.n	800874c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8008744:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008748:	637b      	str	r3, [r7, #52]	@ 0x34
 800874a:	e003      	b.n	8008754 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 800874c:	2300      	movs	r3, #0
 800874e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008750:	f001 bdf5 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008754:	f001 bdf3 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008758:	4b06      	ldr	r3, [pc, #24]	@ (8008774 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800875a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800875e:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8008762:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8008764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008766:	2b00      	cmp	r3, #0
 8008768:	d10a      	bne.n	8008780 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800876a:	f7fc fe8d 	bl	8005488 <HAL_RCC_GetPCLK1Freq>
 800876e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8008770:	f001 bde5 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008774:	44020c00 	.word	0x44020c00
 8008778:	03d09000 	.word	0x03d09000
 800877c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8008780:	4ba0      	ldr	r3, [pc, #640]	@ (8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008788:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800878c:	d10b      	bne.n	80087a6 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 800878e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008790:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008794:	d107      	bne.n	80087a6 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008796:	f107 0314 	add.w	r3, r7, #20
 800879a:	4618      	mov	r0, r3
 800879c:	f7fe ffac 	bl	80076f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80087a0:	69bb      	ldr	r3, [r7, #24]
 80087a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80087a4:	e047      	b.n	8008836 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 80087a6:	4b97      	ldr	r3, [pc, #604]	@ (8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80087ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087b2:	d10b      	bne.n	80087cc <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 80087b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087ba:	d107      	bne.n	80087cc <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087bc:	f107 0308 	add.w	r3, r7, #8
 80087c0:	4618      	mov	r0, r3
 80087c2:	f7ff f905 	bl	80079d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80087ca:	e034      	b.n	8008836 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80087cc:	4b8d      	ldr	r3, [pc, #564]	@ (8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f003 0302 	and.w	r3, r3, #2
 80087d4:	2b02      	cmp	r3, #2
 80087d6:	d10d      	bne.n	80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 80087d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087da:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80087de:	d109      	bne.n	80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80087e0:	4b88      	ldr	r3, [pc, #544]	@ (8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	08db      	lsrs	r3, r3, #3
 80087e6:	f003 0303 	and.w	r3, r3, #3
 80087ea:	4a87      	ldr	r2, [pc, #540]	@ (8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80087ec:	fa22 f303 	lsr.w	r3, r2, r3
 80087f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80087f2:	e020      	b.n	8008836 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 80087f4:	4b83      	ldr	r3, [pc, #524]	@ (8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80087fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008800:	d106      	bne.n	8008810 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8008802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008804:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008808:	d102      	bne.n	8008810 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 800880a:	4b80      	ldr	r3, [pc, #512]	@ (8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800880c:	637b      	str	r3, [r7, #52]	@ 0x34
 800880e:	e012      	b.n	8008836 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8008810:	4b7c      	ldr	r3, [pc, #496]	@ (8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008812:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008816:	f003 0302 	and.w	r3, r3, #2
 800881a:	2b02      	cmp	r3, #2
 800881c:	d107      	bne.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800881e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008820:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008824:	d103      	bne.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8008826:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800882a:	637b      	str	r3, [r7, #52]	@ 0x34
 800882c:	e003      	b.n	8008836 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 800882e:	2300      	movs	r3, #0
 8008830:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008832:	f001 bd84 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008836:	f001 bd82 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800883a:	4b72      	ldr	r3, [pc, #456]	@ (8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800883c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008840:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008844:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8008846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008848:	2b00      	cmp	r3, #0
 800884a:	d104      	bne.n	8008856 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800884c:	f7fc fe1c 	bl	8005488 <HAL_RCC_GetPCLK1Freq>
 8008850:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8008852:	f001 bd74 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8008856:	4b6b      	ldr	r3, [pc, #428]	@ (8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800885e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008862:	d10b      	bne.n	800887c <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8008864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008866:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800886a:	d107      	bne.n	800887c <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800886c:	f107 0314 	add.w	r3, r7, #20
 8008870:	4618      	mov	r0, r3
 8008872:	f7fe ff41 	bl	80076f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008876:	69bb      	ldr	r3, [r7, #24]
 8008878:	637b      	str	r3, [r7, #52]	@ 0x34
 800887a:	e047      	b.n	800890c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 800887c:	4b61      	ldr	r3, [pc, #388]	@ (8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008884:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008888:	d10b      	bne.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800888a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800888c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008890:	d107      	bne.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008892:	f107 0308 	add.w	r3, r7, #8
 8008896:	4618      	mov	r0, r3
 8008898:	f7ff f89a 	bl	80079d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	637b      	str	r3, [r7, #52]	@ 0x34
 80088a0:	e034      	b.n	800890c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80088a2:	4b58      	ldr	r3, [pc, #352]	@ (8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f003 0302 	and.w	r3, r3, #2
 80088aa:	2b02      	cmp	r3, #2
 80088ac:	d10d      	bne.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80088ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80088b4:	d109      	bne.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80088b6:	4b53      	ldr	r3, [pc, #332]	@ (8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	08db      	lsrs	r3, r3, #3
 80088bc:	f003 0303 	and.w	r3, r3, #3
 80088c0:	4a51      	ldr	r2, [pc, #324]	@ (8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80088c2:	fa22 f303 	lsr.w	r3, r2, r3
 80088c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80088c8:	e020      	b.n	800890c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 80088ca:	4b4e      	ldr	r3, [pc, #312]	@ (8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80088d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088d6:	d106      	bne.n	80088e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 80088d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80088de:	d102      	bne.n	80088e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 80088e0:	4b4a      	ldr	r3, [pc, #296]	@ (8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80088e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80088e4:	e012      	b.n	800890c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80088e6:	4b47      	ldr	r3, [pc, #284]	@ (8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80088e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80088ec:	f003 0302 	and.w	r3, r3, #2
 80088f0:	2b02      	cmp	r3, #2
 80088f2:	d107      	bne.n	8008904 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 80088f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80088fa:	d103      	bne.n	8008904 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 80088fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008900:	637b      	str	r3, [r7, #52]	@ 0x34
 8008902:	e003      	b.n	800890c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8008904:	2300      	movs	r3, #0
 8008906:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008908:	f001 bd19 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800890c:	f001 bd17 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8008910:	4b3c      	ldr	r3, [pc, #240]	@ (8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008912:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008916:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800891a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800891c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800891e:	2b00      	cmp	r3, #0
 8008920:	d104      	bne.n	800892c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008922:	f7fc fdb1 	bl	8005488 <HAL_RCC_GetPCLK1Freq>
 8008926:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8008928:	f001 bd09 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 800892c:	4b35      	ldr	r3, [pc, #212]	@ (8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008934:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008938:	d10b      	bne.n	8008952 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800893a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800893c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008940:	d107      	bne.n	8008952 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008942:	f107 0314 	add.w	r3, r7, #20
 8008946:	4618      	mov	r0, r3
 8008948:	f7fe fed6 	bl	80076f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800894c:	69bb      	ldr	r3, [r7, #24]
 800894e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008950:	e047      	b.n	80089e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8008952:	4b2c      	ldr	r3, [pc, #176]	@ (8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800895a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800895e:	d10b      	bne.n	8008978 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8008960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008962:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008966:	d107      	bne.n	8008978 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008968:	f107 0308 	add.w	r3, r7, #8
 800896c:	4618      	mov	r0, r3
 800896e:	f7ff f82f 	bl	80079d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	637b      	str	r3, [r7, #52]	@ 0x34
 8008976:	e034      	b.n	80089e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8008978:	4b22      	ldr	r3, [pc, #136]	@ (8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f003 0302 	and.w	r3, r3, #2
 8008980:	2b02      	cmp	r3, #2
 8008982:	d10d      	bne.n	80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8008984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008986:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800898a:	d109      	bne.n	80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800898c:	4b1d      	ldr	r3, [pc, #116]	@ (8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	08db      	lsrs	r3, r3, #3
 8008992:	f003 0303 	and.w	r3, r3, #3
 8008996:	4a1c      	ldr	r2, [pc, #112]	@ (8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8008998:	fa22 f303 	lsr.w	r3, r2, r3
 800899c:	637b      	str	r3, [r7, #52]	@ 0x34
 800899e:	e020      	b.n	80089e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 80089a0:	4b18      	ldr	r3, [pc, #96]	@ (8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80089a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089ac:	d106      	bne.n	80089bc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 80089ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089b4:	d102      	bne.n	80089bc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 80089b6:	4b15      	ldr	r3, [pc, #84]	@ (8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80089b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80089ba:	e012      	b.n	80089e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 80089bc:	4b11      	ldr	r3, [pc, #68]	@ (8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80089be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80089c2:	f003 0302 	and.w	r3, r3, #2
 80089c6:	2b02      	cmp	r3, #2
 80089c8:	d107      	bne.n	80089da <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 80089ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089cc:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80089d0:	d103      	bne.n	80089da <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 80089d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80089d8:	e003      	b.n	80089e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 80089da:	2300      	movs	r3, #0
 80089dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089de:	f001 bcae 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80089e2:	f001 bcac 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 80089e6:	4b07      	ldr	r3, [pc, #28]	@ (8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80089e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80089ec:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 80089f0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 80089f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d10b      	bne.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80089f8:	f7fc fd46 	bl	8005488 <HAL_RCC_GetPCLK1Freq>
 80089fc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 80089fe:	f001 bc9e 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008a02:	bf00      	nop
 8008a04:	44020c00 	.word	0x44020c00
 8008a08:	03d09000 	.word	0x03d09000
 8008a0c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8008a10:	4ba0      	ldr	r3, [pc, #640]	@ (8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a1c:	d10b      	bne.n	8008a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8008a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a20:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008a24:	d107      	bne.n	8008a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a26:	f107 0314 	add.w	r3, r7, #20
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f7fe fe64 	bl	80076f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008a30:	69bb      	ldr	r3, [r7, #24]
 8008a32:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a34:	e047      	b.n	8008ac6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8008a36:	4b97      	ldr	r3, [pc, #604]	@ (8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a42:	d10b      	bne.n	8008a5c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8008a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a46:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008a4a:	d107      	bne.n	8008a5c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a4c:	f107 0308 	add.w	r3, r7, #8
 8008a50:	4618      	mov	r0, r3
 8008a52:	f7fe ffbd 	bl	80079d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a5a:	e034      	b.n	8008ac6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8008a5c:	4b8d      	ldr	r3, [pc, #564]	@ (8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f003 0302 	and.w	r3, r3, #2
 8008a64:	2b02      	cmp	r3, #2
 8008a66:	d10d      	bne.n	8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8008a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a6a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008a6e:	d109      	bne.n	8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008a70:	4b88      	ldr	r3, [pc, #544]	@ (8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	08db      	lsrs	r3, r3, #3
 8008a76:	f003 0303 	and.w	r3, r3, #3
 8008a7a:	4a87      	ldr	r2, [pc, #540]	@ (8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8008a80:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a82:	e020      	b.n	8008ac6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8008a84:	4b83      	ldr	r3, [pc, #524]	@ (8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a90:	d106      	bne.n	8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8008a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a98:	d102      	bne.n	8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 8008a9a:	4b80      	ldr	r3, [pc, #512]	@ (8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8008a9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a9e:	e012      	b.n	8008ac6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8008aa0:	4b7c      	ldr	r3, [pc, #496]	@ (8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008aa2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008aa6:	f003 0302 	and.w	r3, r3, #2
 8008aaa:	2b02      	cmp	r3, #2
 8008aac:	d107      	bne.n	8008abe <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8008aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ab0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8008ab4:	d103      	bne.n	8008abe <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 8008ab6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008aba:	637b      	str	r3, [r7, #52]	@ 0x34
 8008abc:	e003      	b.n	8008ac6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ac2:	f001 bc3c 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008ac6:	f001 bc3a 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8008aca:	4b72      	ldr	r3, [pc, #456]	@ (8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008acc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008ad0:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008ad4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8008ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d104      	bne.n	8008ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008adc:	f7fc fcd4 	bl	8005488 <HAL_RCC_GetPCLK1Freq>
 8008ae0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 8008ae2:	f001 bc2c 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8008ae6:	4b6b      	ldr	r3, [pc, #428]	@ (8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008aee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008af2:	d10b      	bne.n	8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8008af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008afa:	d107      	bne.n	8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008afc:	f107 0314 	add.w	r3, r7, #20
 8008b00:	4618      	mov	r0, r3
 8008b02:	f7fe fdf9 	bl	80076f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008b06:	69bb      	ldr	r3, [r7, #24]
 8008b08:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b0a:	e047      	b.n	8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8008b0c:	4b61      	ldr	r3, [pc, #388]	@ (8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b18:	d10b      	bne.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8008b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008b20:	d107      	bne.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b22:	f107 0308 	add.w	r3, r7, #8
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7fe ff52 	bl	80079d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b30:	e034      	b.n	8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8008b32:	4b58      	ldr	r3, [pc, #352]	@ (8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f003 0302 	and.w	r3, r3, #2
 8008b3a:	2b02      	cmp	r3, #2
 8008b3c:	d10d      	bne.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 8008b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b40:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008b44:	d109      	bne.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008b46:	4b53      	ldr	r3, [pc, #332]	@ (8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	08db      	lsrs	r3, r3, #3
 8008b4c:	f003 0303 	and.w	r3, r3, #3
 8008b50:	4a51      	ldr	r2, [pc, #324]	@ (8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008b52:	fa22 f303 	lsr.w	r3, r2, r3
 8008b56:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b58:	e020      	b.n	8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8008b5a:	4b4e      	ldr	r3, [pc, #312]	@ (8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008b62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b66:	d106      	bne.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8008b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b6a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008b6e:	d102      	bne.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 8008b70:	4b4a      	ldr	r3, [pc, #296]	@ (8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8008b72:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b74:	e012      	b.n	8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 8008b76:	4b47      	ldr	r3, [pc, #284]	@ (8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008b78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b7c:	f003 0302 	and.w	r3, r3, #2
 8008b80:	2b02      	cmp	r3, #2
 8008b82:	d107      	bne.n	8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8008b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b86:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008b8a:	d103      	bne.n	8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8008b8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b90:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b92:	e003      	b.n	8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 8008b94:	2300      	movs	r3, #0
 8008b96:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b98:	f001 bbd1 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008b9c:	f001 bbcf 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8008ba0:	4b3c      	ldr	r3, [pc, #240]	@ (8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008ba2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008ba6:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008baa:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8008bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d104      	bne.n	8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008bb2:	f7fc fc69 	bl	8005488 <HAL_RCC_GetPCLK1Freq>
 8008bb6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8008bb8:	f001 bbc1 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8008bbc:	4b35      	ldr	r3, [pc, #212]	@ (8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008bc4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008bc8:	d10b      	bne.n	8008be2 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 8008bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008bd0:	d107      	bne.n	8008be2 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bd2:	f107 0314 	add.w	r3, r7, #20
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f7fe fd8e 	bl	80076f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008bdc:	69bb      	ldr	r3, [r7, #24]
 8008bde:	637b      	str	r3, [r7, #52]	@ 0x34
 8008be0:	e047      	b.n	8008c72 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 8008be2:	4b2c      	ldr	r3, [pc, #176]	@ (8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008bea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bee:	d10b      	bne.n	8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8008bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bf2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008bf6:	d107      	bne.n	8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bf8:	f107 0308 	add.w	r3, r7, #8
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f7fe fee7 	bl	80079d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c06:	e034      	b.n	8008c72 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8008c08:	4b22      	ldr	r3, [pc, #136]	@ (8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f003 0302 	and.w	r3, r3, #2
 8008c10:	2b02      	cmp	r3, #2
 8008c12:	d10d      	bne.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8008c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c16:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008c1a:	d109      	bne.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008c1c:	4b1d      	ldr	r3, [pc, #116]	@ (8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	08db      	lsrs	r3, r3, #3
 8008c22:	f003 0303 	and.w	r3, r3, #3
 8008c26:	4a1c      	ldr	r2, [pc, #112]	@ (8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008c28:	fa22 f303 	lsr.w	r3, r2, r3
 8008c2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c2e:	e020      	b.n	8008c72 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8008c30:	4b18      	ldr	r3, [pc, #96]	@ (8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008c38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c3c:	d106      	bne.n	8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8008c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c40:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008c44:	d102      	bne.n	8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 8008c46:	4b15      	ldr	r3, [pc, #84]	@ (8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8008c48:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c4a:	e012      	b.n	8008c72 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8008c4c:	4b11      	ldr	r3, [pc, #68]	@ (8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008c4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c52:	f003 0302 	and.w	r3, r3, #2
 8008c56:	2b02      	cmp	r3, #2
 8008c58:	d107      	bne.n	8008c6a <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 8008c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c5c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008c60:	d103      	bne.n	8008c6a <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 8008c62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c66:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c68:	e003      	b.n	8008c72 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c6e:	f001 bb66 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008c72:	f001 bb64 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 8008c76:	4b07      	ldr	r3, [pc, #28]	@ (8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008c78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008c7c:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 8008c80:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 8008c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d10b      	bne.n	8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008c88:	f7fc fbfe 	bl	8005488 <HAL_RCC_GetPCLK1Freq>
 8008c8c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 8008c8e:	f001 bb56 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008c92:	bf00      	nop
 8008c94:	44020c00 	.word	0x44020c00
 8008c98:	03d09000 	.word	0x03d09000
 8008c9c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8008ca0:	4ba1      	ldr	r3, [pc, #644]	@ (8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ca8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008cac:	d10b      	bne.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8008cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008cb4:	d107      	bne.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cb6:	f107 0314 	add.w	r3, r7, #20
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f7fe fd1c 	bl	80076f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008cc0:	69bb      	ldr	r3, [r7, #24]
 8008cc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cc4:	e047      	b.n	8008d56 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8008cc6:	4b98      	ldr	r3, [pc, #608]	@ (8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008cce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008cd2:	d10b      	bne.n	8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8008cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008cda:	d107      	bne.n	8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cdc:	f107 0308 	add.w	r3, r7, #8
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f7fe fe75 	bl	80079d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cea:	e034      	b.n	8008d56 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8008cec:	4b8e      	ldr	r3, [pc, #568]	@ (8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f003 0302 	and.w	r3, r3, #2
 8008cf4:	2b02      	cmp	r3, #2
 8008cf6:	d10d      	bne.n	8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8008cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cfa:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8008cfe:	d109      	bne.n	8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008d00:	4b89      	ldr	r3, [pc, #548]	@ (8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	08db      	lsrs	r3, r3, #3
 8008d06:	f003 0303 	and.w	r3, r3, #3
 8008d0a:	4a88      	ldr	r2, [pc, #544]	@ (8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8008d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8008d10:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d12:	e020      	b.n	8008d56 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8008d14:	4b84      	ldr	r3, [pc, #528]	@ (8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008d1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d20:	d106      	bne.n	8008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 8008d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d28:	d102      	bne.n	8008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 8008d2a:	4b81      	ldr	r3, [pc, #516]	@ (8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8008d2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d2e:	e012      	b.n	8008d56 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8008d30:	4b7d      	ldr	r3, [pc, #500]	@ (8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008d32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d36:	f003 0302 	and.w	r3, r3, #2
 8008d3a:	2b02      	cmp	r3, #2
 8008d3c:	d107      	bne.n	8008d4e <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8008d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d40:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8008d44:	d103      	bne.n	8008d4e <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 8008d46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d4c:	e003      	b.n	8008d56 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008d52:	f001 baf4 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008d56:	f001 baf2 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8008d5a:	4b73      	ldr	r3, [pc, #460]	@ (8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008d5c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008d60:	f003 0307 	and.w	r3, r3, #7
 8008d64:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 8008d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d104      	bne.n	8008d76 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008d6c:	f7fc fb8c 	bl	8005488 <HAL_RCC_GetPCLK1Freq>
 8008d70:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 8008d72:	f001 bae4 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8008d76:	4b6c      	ldr	r3, [pc, #432]	@ (8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d82:	d10a      	bne.n	8008d9a <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8008d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d107      	bne.n	8008d9a <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d8a:	f107 0314 	add.w	r3, r7, #20
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7fe fcb2 	bl	80076f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008d94:	69bb      	ldr	r3, [r7, #24]
 8008d96:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d98:	e043      	b.n	8008e22 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8008d9a:	4b63      	ldr	r3, [pc, #396]	@ (8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008da2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008da6:	d10a      	bne.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8008da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008daa:	2b02      	cmp	r3, #2
 8008dac:	d107      	bne.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008dae:	f107 0308 	add.w	r3, r7, #8
 8008db2:	4618      	mov	r0, r3
 8008db4:	f7fe fe0c 	bl	80079d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dbc:	e031      	b.n	8008e22 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8008dbe:	4b5a      	ldr	r3, [pc, #360]	@ (8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f003 0302 	and.w	r3, r3, #2
 8008dc6:	2b02      	cmp	r3, #2
 8008dc8:	d10c      	bne.n	8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 8008dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dcc:	2b03      	cmp	r3, #3
 8008dce:	d109      	bne.n	8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008dd0:	4b55      	ldr	r3, [pc, #340]	@ (8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	08db      	lsrs	r3, r3, #3
 8008dd6:	f003 0303 	and.w	r3, r3, #3
 8008dda:	4a54      	ldr	r2, [pc, #336]	@ (8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8008ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8008de0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008de2:	e01e      	b.n	8008e22 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8008de4:	4b50      	ldr	r3, [pc, #320]	@ (8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008dec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008df0:	d105      	bne.n	8008dfe <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 8008df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df4:	2b04      	cmp	r3, #4
 8008df6:	d102      	bne.n	8008dfe <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8008df8:	4b4d      	ldr	r3, [pc, #308]	@ (8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8008dfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dfc:	e011      	b.n	8008e22 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8008dfe:	4b4a      	ldr	r3, [pc, #296]	@ (8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008e00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008e04:	f003 0302 	and.w	r3, r3, #2
 8008e08:	2b02      	cmp	r3, #2
 8008e0a:	d106      	bne.n	8008e1a <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8008e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e0e:	2b05      	cmp	r3, #5
 8008e10:	d103      	bne.n	8008e1a <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 8008e12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e16:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e18:	e003      	b.n	8008e22 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e1e:	f001 ba8e 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008e22:	f001 ba8c 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8008e26:	4b40      	ldr	r3, [pc, #256]	@ (8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008e28:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008e2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008e30:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8008e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d104      	bne.n	8008e42 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008e38:	f7fc fb26 	bl	8005488 <HAL_RCC_GetPCLK1Freq>
 8008e3c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8008e3e:	f001 ba7e 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8008e42:	4b39      	ldr	r3, [pc, #228]	@ (8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e4e:	d10a      	bne.n	8008e66 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8008e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e52:	2b10      	cmp	r3, #16
 8008e54:	d107      	bne.n	8008e66 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e56:	f107 0314 	add.w	r3, r7, #20
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f7fe fc4c 	bl	80076f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008e60:	69bb      	ldr	r3, [r7, #24]
 8008e62:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e64:	e043      	b.n	8008eee <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8008e66:	4b30      	ldr	r3, [pc, #192]	@ (8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008e6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e72:	d10a      	bne.n	8008e8a <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8008e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e76:	2b20      	cmp	r3, #32
 8008e78:	d107      	bne.n	8008e8a <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e7a:	f107 0308 	add.w	r3, r7, #8
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f7fe fda6 	bl	80079d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e88:	e031      	b.n	8008eee <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8008e8a:	4b27      	ldr	r3, [pc, #156]	@ (8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f003 0302 	and.w	r3, r3, #2
 8008e92:	2b02      	cmp	r3, #2
 8008e94:	d10c      	bne.n	8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8008e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e98:	2b30      	cmp	r3, #48	@ 0x30
 8008e9a:	d109      	bne.n	8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008e9c:	4b22      	ldr	r3, [pc, #136]	@ (8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	08db      	lsrs	r3, r3, #3
 8008ea2:	f003 0303 	and.w	r3, r3, #3
 8008ea6:	4a21      	ldr	r2, [pc, #132]	@ (8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8008ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8008eac:	637b      	str	r3, [r7, #52]	@ 0x34
 8008eae:	e01e      	b.n	8008eee <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8008eb0:	4b1d      	ldr	r3, [pc, #116]	@ (8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008eb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ebc:	d105      	bne.n	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8008ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ec0:	2b40      	cmp	r3, #64	@ 0x40
 8008ec2:	d102      	bne.n	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8008ec4:	4b1a      	ldr	r3, [pc, #104]	@ (8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8008ec6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ec8:	e011      	b.n	8008eee <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8008eca:	4b17      	ldr	r3, [pc, #92]	@ (8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008ecc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ed0:	f003 0302 	and.w	r3, r3, #2
 8008ed4:	2b02      	cmp	r3, #2
 8008ed6:	d106      	bne.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8008ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eda:	2b50      	cmp	r3, #80	@ 0x50
 8008edc:	d103      	bne.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 8008ede:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ee2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ee4:	e003      	b.n	8008eee <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008eea:	f001 ba28 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008eee:	f001 ba26 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008ef8:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008efc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8008efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d104      	bne.n	8008f0e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008f04:	f7fc faec 	bl	80054e0 <HAL_RCC_GetPCLK3Freq>
 8008f08:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008f0a:	f001 ba18 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8008f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008f14:	d10e      	bne.n	8008f34 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f16:	f107 0314 	add.w	r3, r7, #20
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f7fe fbec 	bl	80076f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008f20:	69bb      	ldr	r3, [r7, #24]
 8008f22:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f24:	f001 ba0b 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008f28:	44020c00 	.word	0x44020c00
 8008f2c:	03d09000 	.word	0x03d09000
 8008f30:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8008f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f36:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f3a:	d108      	bne.n	8008f4e <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f3c:	f107 0308 	add.w	r3, r7, #8
 8008f40:	4618      	mov	r0, r3
 8008f42:	f7fe fd45 	bl	80079d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f4a:	f001 b9f8 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8008f4e:	4ba4      	ldr	r3, [pc, #656]	@ (80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f003 0302 	and.w	r3, r3, #2
 8008f56:	2b02      	cmp	r3, #2
 8008f58:	d10d      	bne.n	8008f76 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8008f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f5c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008f60:	d109      	bne.n	8008f76 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008f62:	4b9f      	ldr	r3, [pc, #636]	@ (80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	08db      	lsrs	r3, r3, #3
 8008f68:	f003 0303 	and.w	r3, r3, #3
 8008f6c:	4a9d      	ldr	r2, [pc, #628]	@ (80091e4 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8008f72:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f74:	e020      	b.n	8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8008f76:	4b9a      	ldr	r3, [pc, #616]	@ (80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f82:	d106      	bne.n	8008f92 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8008f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f86:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008f8a:	d102      	bne.n	8008f92 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8008f8c:	4b96      	ldr	r3, [pc, #600]	@ (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008f8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f90:	e012      	b.n	8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8008f92:	4b93      	ldr	r3, [pc, #588]	@ (80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008f94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008f98:	f003 0302 	and.w	r3, r3, #2
 8008f9c:	2b02      	cmp	r3, #2
 8008f9e:	d107      	bne.n	8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8008fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008fa6:	d103      	bne.n	8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8008fa8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008fac:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fae:	e003      	b.n	8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008fb4:	f001 b9c3 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008fb8:	f001 b9c1 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8008fbc:	4b88      	ldr	r3, [pc, #544]	@ (80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008fbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008fc2:	f003 0307 	and.w	r3, r3, #7
 8008fc6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8008fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d104      	bne.n	8008fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8008fce:	f7fc fa3f 	bl	8005450 <HAL_RCC_GetHCLKFreq>
 8008fd2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8008fd4:	f001 b9b3 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8008fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d104      	bne.n	8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8008fde:	f7fc f90b 	bl	80051f8 <HAL_RCC_GetSysClockFreq>
 8008fe2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008fe4:	f001 b9ab 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8008fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fea:	2b02      	cmp	r3, #2
 8008fec:	d108      	bne.n	8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fee:	f107 0314 	add.w	r3, r7, #20
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f7fe fb80 	bl	80076f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008ff8:	69fb      	ldr	r3, [r7, #28]
 8008ffa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ffc:	f001 b99f 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8009000:	4b77      	ldr	r3, [pc, #476]	@ (80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009008:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800900c:	d105      	bne.n	800901a <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 800900e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009010:	2b03      	cmp	r3, #3
 8009012:	d102      	bne.n	800901a <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8009014:	4b75      	ldr	r3, [pc, #468]	@ (80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8009016:	637b      	str	r3, [r7, #52]	@ 0x34
 8009018:	e023      	b.n	8009062 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800901a:	4b71      	ldr	r3, [pc, #452]	@ (80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f003 0302 	and.w	r3, r3, #2
 8009022:	2b02      	cmp	r3, #2
 8009024:	d10c      	bne.n	8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8009026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009028:	2b04      	cmp	r3, #4
 800902a:	d109      	bne.n	8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800902c:	4b6c      	ldr	r3, [pc, #432]	@ (80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	08db      	lsrs	r3, r3, #3
 8009032:	f003 0303 	and.w	r3, r3, #3
 8009036:	4a6b      	ldr	r2, [pc, #428]	@ (80091e4 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8009038:	fa22 f303 	lsr.w	r3, r2, r3
 800903c:	637b      	str	r3, [r7, #52]	@ 0x34
 800903e:	e010      	b.n	8009062 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8009040:	4b67      	ldr	r3, [pc, #412]	@ (80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009048:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800904c:	d105      	bne.n	800905a <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 800904e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009050:	2b05      	cmp	r3, #5
 8009052:	d102      	bne.n	800905a <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8009054:	4b64      	ldr	r3, [pc, #400]	@ (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8009056:	637b      	str	r3, [r7, #52]	@ 0x34
 8009058:	e003      	b.n	8009062 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 800905a:	2300      	movs	r3, #0
 800905c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800905e:	f001 b96e 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009062:	f001 b96c 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8009066:	4b5e      	ldr	r3, [pc, #376]	@ (80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009068:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800906c:	f003 0308 	and.w	r3, r3, #8
 8009070:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8009072:	4b5b      	ldr	r3, [pc, #364]	@ (80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009074:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009078:	f003 0302 	and.w	r3, r3, #2
 800907c:	2b02      	cmp	r3, #2
 800907e:	d106      	bne.n	800908e <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8009080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009082:	2b00      	cmp	r3, #0
 8009084:	d103      	bne.n	800908e <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8009086:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800908a:	637b      	str	r3, [r7, #52]	@ 0x34
 800908c:	e012      	b.n	80090b4 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800908e:	4b54      	ldr	r3, [pc, #336]	@ (80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009090:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009094:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009098:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800909c:	d106      	bne.n	80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 800909e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090a0:	2b08      	cmp	r3, #8
 80090a2:	d103      	bne.n	80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 80090a4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80090a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80090aa:	e003      	b.n	80090b4 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 80090ac:	2300      	movs	r3, #0
 80090ae:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80090b0:	f001 b945 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80090b4:	f001 b943 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80090b8:	4b49      	ldr	r3, [pc, #292]	@ (80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80090ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80090be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80090c2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80090c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d104      	bne.n	80090d4 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80090ca:	f7fc f9dd 	bl	8005488 <HAL_RCC_GetPCLK1Freq>
 80090ce:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80090d0:	f001 b935 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 80090d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090da:	d108      	bne.n	80090ee <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090dc:	f107 0308 	add.w	r3, r7, #8
 80090e0:	4618      	mov	r0, r3
 80090e2:	f7fe fc75 	bl	80079d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80090ea:	f001 b928 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80090ee:	4b3c      	ldr	r3, [pc, #240]	@ (80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f003 0302 	and.w	r3, r3, #2
 80090f6:	2b02      	cmp	r3, #2
 80090f8:	d10d      	bne.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 80090fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009100:	d109      	bne.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009102:	4b37      	ldr	r3, [pc, #220]	@ (80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	08db      	lsrs	r3, r3, #3
 8009108:	f003 0303 	and.w	r3, r3, #3
 800910c:	4a35      	ldr	r2, [pc, #212]	@ (80091e4 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800910e:	fa22 f303 	lsr.w	r3, r2, r3
 8009112:	637b      	str	r3, [r7, #52]	@ 0x34
 8009114:	e011      	b.n	800913a <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8009116:	4b32      	ldr	r3, [pc, #200]	@ (80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800911e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009122:	d106      	bne.n	8009132 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8009124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009126:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800912a:	d102      	bne.n	8009132 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 800912c:	4b2e      	ldr	r3, [pc, #184]	@ (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800912e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009130:	e003      	b.n	800913a <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8009132:	2300      	movs	r3, #0
 8009134:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009136:	f001 b902 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800913a:	f001 b900 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800913e:	4b28      	ldr	r3, [pc, #160]	@ (80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009140:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009144:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8009148:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800914a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800914c:	2b00      	cmp	r3, #0
 800914e:	d104      	bne.n	800915a <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009150:	f7fc f99a 	bl	8005488 <HAL_RCC_GetPCLK1Freq>
 8009154:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8009156:	f001 b8f2 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 800915a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800915c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009160:	d108      	bne.n	8009174 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009162:	f107 0308 	add.w	r3, r7, #8
 8009166:	4618      	mov	r0, r3
 8009168:	f7fe fc32 	bl	80079d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009170:	f001 b8e5 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8009174:	4b1a      	ldr	r3, [pc, #104]	@ (80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f003 0302 	and.w	r3, r3, #2
 800917c:	2b02      	cmp	r3, #2
 800917e:	d10d      	bne.n	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8009180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009182:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009186:	d109      	bne.n	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009188:	4b15      	ldr	r3, [pc, #84]	@ (80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	08db      	lsrs	r3, r3, #3
 800918e:	f003 0303 	and.w	r3, r3, #3
 8009192:	4a14      	ldr	r2, [pc, #80]	@ (80091e4 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8009194:	fa22 f303 	lsr.w	r3, r2, r3
 8009198:	637b      	str	r3, [r7, #52]	@ 0x34
 800919a:	e011      	b.n	80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 800919c:	4b10      	ldr	r3, [pc, #64]	@ (80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80091a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091a8:	d106      	bne.n	80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 80091aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ac:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80091b0:	d102      	bne.n	80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 80091b2:	4b0d      	ldr	r3, [pc, #52]	@ (80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80091b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80091b6:	e003      	b.n	80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 80091b8:	2300      	movs	r3, #0
 80091ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091bc:	f001 b8bf 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80091c0:	f001 b8bd 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80091c4:	4b06      	ldr	r3, [pc, #24]	@ (80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80091c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80091ca:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80091ce:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 80091d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d10c      	bne.n	80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80091d6:	f7fc f983 	bl	80054e0 <HAL_RCC_GetPCLK3Freq>
 80091da:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 80091dc:	f001 b8af 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80091e0:	44020c00 	.word	0x44020c00
 80091e4:	03d09000 	.word	0x03d09000
 80091e8:	003d0900 	.word	0x003d0900
 80091ec:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 80091f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80091f6:	d108      	bne.n	800920a <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091f8:	f107 0308 	add.w	r3, r7, #8
 80091fc:	4618      	mov	r0, r3
 80091fe:	f7fe fbe7 	bl	80079d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009206:	f001 b89a 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800920a:	4b9f      	ldr	r3, [pc, #636]	@ (8009488 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f003 0302 	and.w	r3, r3, #2
 8009212:	2b02      	cmp	r3, #2
 8009214:	d10d      	bne.n	8009232 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 8009216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009218:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800921c:	d109      	bne.n	8009232 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800921e:	4b9a      	ldr	r3, [pc, #616]	@ (8009488 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	08db      	lsrs	r3, r3, #3
 8009224:	f003 0303 	and.w	r3, r3, #3
 8009228:	4a98      	ldr	r2, [pc, #608]	@ (800948c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800922a:	fa22 f303 	lsr.w	r3, r2, r3
 800922e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009230:	e011      	b.n	8009256 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8009232:	4b95      	ldr	r3, [pc, #596]	@ (8009488 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800923a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800923e:	d106      	bne.n	800924e <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8009240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009242:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009246:	d102      	bne.n	800924e <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8009248:	4b91      	ldr	r3, [pc, #580]	@ (8009490 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800924a:	637b      	str	r3, [r7, #52]	@ 0x34
 800924c:	e003      	b.n	8009256 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 800924e:	2300      	movs	r3, #0
 8009250:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009252:	f001 b874 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009256:	f001 b872 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800925a:	4b8b      	ldr	r3, [pc, #556]	@ (8009488 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800925c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009260:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8009264:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8009266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009268:	2b00      	cmp	r3, #0
 800926a:	d104      	bne.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800926c:	f7fc f938 	bl	80054e0 <HAL_RCC_GetPCLK3Freq>
 8009270:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8009272:	f001 b864 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8009276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009278:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800927c:	d108      	bne.n	8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800927e:	f107 0308 	add.w	r3, r7, #8
 8009282:	4618      	mov	r0, r3
 8009284:	f7fe fba4 	bl	80079d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800928c:	f001 b857 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8009290:	4b7d      	ldr	r3, [pc, #500]	@ (8009488 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f003 0302 	and.w	r3, r3, #2
 8009298:	2b02      	cmp	r3, #2
 800929a:	d10d      	bne.n	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 800929c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800929e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80092a2:	d109      	bne.n	80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80092a4:	4b78      	ldr	r3, [pc, #480]	@ (8009488 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	08db      	lsrs	r3, r3, #3
 80092aa:	f003 0303 	and.w	r3, r3, #3
 80092ae:	4a77      	ldr	r2, [pc, #476]	@ (800948c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80092b0:	fa22 f303 	lsr.w	r3, r2, r3
 80092b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80092b6:	e011      	b.n	80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 80092b8:	4b73      	ldr	r3, [pc, #460]	@ (8009488 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80092c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092c4:	d106      	bne.n	80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 80092c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80092cc:	d102      	bne.n	80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 80092ce:	4b70      	ldr	r3, [pc, #448]	@ (8009490 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 80092d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80092d2:	e003      	b.n	80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 80092d4:	2300      	movs	r3, #0
 80092d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80092d8:	f001 b831 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80092dc:	f001 b82f 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 80092e0:	4b69      	ldr	r3, [pc, #420]	@ (8009488 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80092e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80092e6:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80092ea:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 80092ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d104      	bne.n	80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80092f2:	f7fc f8c9 	bl	8005488 <HAL_RCC_GetPCLK1Freq>
 80092f6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80092f8:	f001 b821 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 80092fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009302:	d108      	bne.n	8009316 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009304:	f107 0308 	add.w	r3, r7, #8
 8009308:	4618      	mov	r0, r3
 800930a:	f7fe fb61 	bl	80079d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009312:	f001 b814 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8009316:	4b5c      	ldr	r3, [pc, #368]	@ (8009488 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f003 0302 	and.w	r3, r3, #2
 800931e:	2b02      	cmp	r3, #2
 8009320:	d10e      	bne.n	8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8009322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009324:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009328:	d10a      	bne.n	8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800932a:	4b57      	ldr	r3, [pc, #348]	@ (8009488 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	08db      	lsrs	r3, r3, #3
 8009330:	f003 0303 	and.w	r3, r3, #3
 8009334:	4a55      	ldr	r2, [pc, #340]	@ (800948c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8009336:	fa22 f303 	lsr.w	r3, r2, r3
 800933a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800933c:	f000 bfff 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8009340:	2300      	movs	r3, #0
 8009342:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009344:	f000 bffb 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009348:	4b4f      	ldr	r3, [pc, #316]	@ (8009488 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800934a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800934e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009352:	633b      	str	r3, [r7, #48]	@ 0x30
 8009354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009356:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800935a:	d056      	beq.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 800935c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800935e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8009362:	f200 808b 	bhi.w	800947c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8009366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009368:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800936c:	d03e      	beq.n	80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 800936e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009370:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009374:	f200 8082 	bhi.w	800947c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8009378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800937a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800937e:	d027      	beq.n	80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8009380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009382:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009386:	d879      	bhi.n	800947c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8009388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800938a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800938e:	d017      	beq.n	80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8009390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009392:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009396:	d871      	bhi.n	800947c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8009398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800939a:	2b00      	cmp	r3, #0
 800939c:	d004      	beq.n	80093a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 800939e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093a4:	d004      	beq.n	80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 80093a6:	e069      	b.n	800947c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80093a8:	f7fc f89a 	bl	80054e0 <HAL_RCC_GetPCLK3Freq>
 80093ac:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80093ae:	e068      	b.n	8009482 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093b0:	f107 0314 	add.w	r3, r7, #20
 80093b4:	4618      	mov	r0, r3
 80093b6:	f7fe f99f 	bl	80076f8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80093be:	e060      	b.n	8009482 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093c0:	f107 0308 	add.w	r3, r7, #8
 80093c4:	4618      	mov	r0, r3
 80093c6:	f7fe fb03 	bl	80079d0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80093ce:	e058      	b.n	8009482 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80093d0:	4b2d      	ldr	r3, [pc, #180]	@ (8009488 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80093d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093d6:	f003 0302 	and.w	r3, r3, #2
 80093da:	2b02      	cmp	r3, #2
 80093dc:	d103      	bne.n	80093e6 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 80093de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80093e2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80093e4:	e04d      	b.n	8009482 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 80093e6:	2300      	movs	r3, #0
 80093e8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80093ea:	e04a      	b.n	8009482 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80093ec:	4b26      	ldr	r3, [pc, #152]	@ (8009488 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80093ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80093f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80093fa:	d103      	bne.n	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 80093fc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009400:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009402:	e03e      	b.n	8009482 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8009404:	2300      	movs	r3, #0
 8009406:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009408:	e03b      	b.n	8009482 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800940a:	4b1f      	ldr	r3, [pc, #124]	@ (8009488 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800940c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009410:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009414:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009416:	4b1c      	ldr	r3, [pc, #112]	@ (8009488 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f003 0302 	and.w	r3, r3, #2
 800941e:	2b02      	cmp	r3, #2
 8009420:	d10c      	bne.n	800943c <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8009422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009424:	2b00      	cmp	r3, #0
 8009426:	d109      	bne.n	800943c <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009428:	4b17      	ldr	r3, [pc, #92]	@ (8009488 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	08db      	lsrs	r3, r3, #3
 800942e:	f003 0303 	and.w	r3, r3, #3
 8009432:	4a16      	ldr	r2, [pc, #88]	@ (800948c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8009434:	fa22 f303 	lsr.w	r3, r2, r3
 8009438:	637b      	str	r3, [r7, #52]	@ 0x34
 800943a:	e01e      	b.n	800947a <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800943c:	4b12      	ldr	r3, [pc, #72]	@ (8009488 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009444:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009448:	d106      	bne.n	8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 800944a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800944c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009450:	d102      	bne.n	8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009452:	4b0f      	ldr	r3, [pc, #60]	@ (8009490 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8009454:	637b      	str	r3, [r7, #52]	@ 0x34
 8009456:	e010      	b.n	800947a <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009458:	4b0b      	ldr	r3, [pc, #44]	@ (8009488 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009460:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009464:	d106      	bne.n	8009474 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8009466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009468:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800946c:	d102      	bne.n	8009474 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800946e:	4b09      	ldr	r3, [pc, #36]	@ (8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8009470:	637b      	str	r3, [r7, #52]	@ 0x34
 8009472:	e002      	b.n	800947a <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009474:	2300      	movs	r3, #0
 8009476:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009478:	e003      	b.n	8009482 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 800947a:	e002      	b.n	8009482 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 800947c:	2300      	movs	r3, #0
 800947e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009480:	bf00      	nop
          }
        }
        break;
 8009482:	f000 bf5c 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009486:	bf00      	nop
 8009488:	44020c00 	.word	0x44020c00
 800948c:	03d09000 	.word	0x03d09000
 8009490:	003d0900 	.word	0x003d0900
 8009494:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009498:	4b9e      	ldr	r3, [pc, #632]	@ (8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800949a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800949e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80094a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80094a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80094aa:	d056      	beq.n	800955a <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 80094ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ae:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80094b2:	f200 808b 	bhi.w	80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80094b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80094bc:	d03e      	beq.n	800953c <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 80094be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80094c4:	f200 8082 	bhi.w	80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80094c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80094ce:	d027      	beq.n	8009520 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 80094d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80094d6:	d879      	bhi.n	80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80094d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094de:	d017      	beq.n	8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 80094e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094e6:	d871      	bhi.n	80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80094e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d004      	beq.n	80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 80094ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094f4:	d004      	beq.n	8009500 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 80094f6:	e069      	b.n	80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 80094f8:	f7fb ffc6 	bl	8005488 <HAL_RCC_GetPCLK1Freq>
 80094fc:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80094fe:	e068      	b.n	80095d2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009500:	f107 0314 	add.w	r3, r7, #20
 8009504:	4618      	mov	r0, r3
 8009506:	f7fe f8f7 	bl	80076f8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800950e:	e060      	b.n	80095d2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009510:	f107 0308 	add.w	r3, r7, #8
 8009514:	4618      	mov	r0, r3
 8009516:	f7fe fa5b 	bl	80079d0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800951e:	e058      	b.n	80095d2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009520:	4b7c      	ldr	r3, [pc, #496]	@ (8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009522:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009526:	f003 0302 	and.w	r3, r3, #2
 800952a:	2b02      	cmp	r3, #2
 800952c:	d103      	bne.n	8009536 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 800952e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009532:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009534:	e04d      	b.n	80095d2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8009536:	2300      	movs	r3, #0
 8009538:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800953a:	e04a      	b.n	80095d2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800953c:	4b75      	ldr	r3, [pc, #468]	@ (8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800953e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009542:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009546:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800954a:	d103      	bne.n	8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 800954c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009550:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009552:	e03e      	b.n	80095d2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8009554:	2300      	movs	r3, #0
 8009556:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009558:	e03b      	b.n	80095d2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800955a:	4b6e      	ldr	r3, [pc, #440]	@ (8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800955c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009560:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009564:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009566:	4b6b      	ldr	r3, [pc, #428]	@ (8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f003 0302 	and.w	r3, r3, #2
 800956e:	2b02      	cmp	r3, #2
 8009570:	d10c      	bne.n	800958c <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8009572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009574:	2b00      	cmp	r3, #0
 8009576:	d109      	bne.n	800958c <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009578:	4b66      	ldr	r3, [pc, #408]	@ (8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	08db      	lsrs	r3, r3, #3
 800957e:	f003 0303 	and.w	r3, r3, #3
 8009582:	4a65      	ldr	r2, [pc, #404]	@ (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8009584:	fa22 f303 	lsr.w	r3, r2, r3
 8009588:	637b      	str	r3, [r7, #52]	@ 0x34
 800958a:	e01e      	b.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800958c:	4b61      	ldr	r3, [pc, #388]	@ (8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009594:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009598:	d106      	bne.n	80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 800959a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800959c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095a0:	d102      	bne.n	80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80095a2:	4b5e      	ldr	r3, [pc, #376]	@ (800971c <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 80095a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80095a6:	e010      	b.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80095a8:	4b5a      	ldr	r3, [pc, #360]	@ (8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095b4:	d106      	bne.n	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 80095b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80095bc:	d102      	bne.n	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80095be:	4b58      	ldr	r3, [pc, #352]	@ (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 80095c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80095c2:	e002      	b.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80095c4:	2300      	movs	r3, #0
 80095c6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80095c8:	e003      	b.n	80095d2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 80095ca:	e002      	b.n	80095d2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 80095cc:	2300      	movs	r3, #0
 80095ce:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80095d0:	bf00      	nop
          }
        }
        break;
 80095d2:	f000 beb4 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 80095d6:	4b4f      	ldr	r3, [pc, #316]	@ (8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80095d8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80095dc:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80095e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80095e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80095e8:	d056      	beq.n	8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 80095ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80095f0:	f200 808b 	bhi.w	800970a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80095f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095f6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80095fa:	d03e      	beq.n	800967a <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 80095fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009602:	f200 8082 	bhi.w	800970a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8009606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009608:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800960c:	d027      	beq.n	800965e <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 800960e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009610:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009614:	d879      	bhi.n	800970a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8009616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009618:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800961c:	d017      	beq.n	800964e <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 800961e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009620:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009624:	d871      	bhi.n	800970a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8009626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009628:	2b00      	cmp	r3, #0
 800962a:	d004      	beq.n	8009636 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 800962c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800962e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009632:	d004      	beq.n	800963e <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8009634:	e069      	b.n	800970a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009636:	f7fb ff53 	bl	80054e0 <HAL_RCC_GetPCLK3Freq>
 800963a:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800963c:	e068      	b.n	8009710 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800963e:	f107 0314 	add.w	r3, r7, #20
 8009642:	4618      	mov	r0, r3
 8009644:	f7fe f858 	bl	80076f8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800964c:	e060      	b.n	8009710 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800964e:	f107 0308 	add.w	r3, r7, #8
 8009652:	4618      	mov	r0, r3
 8009654:	f7fe f9bc 	bl	80079d0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800965c:	e058      	b.n	8009710 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800965e:	4b2d      	ldr	r3, [pc, #180]	@ (8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009660:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009664:	f003 0302 	and.w	r3, r3, #2
 8009668:	2b02      	cmp	r3, #2
 800966a:	d103      	bne.n	8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 800966c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009670:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009672:	e04d      	b.n	8009710 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8009674:	2300      	movs	r3, #0
 8009676:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009678:	e04a      	b.n	8009710 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800967a:	4b26      	ldr	r3, [pc, #152]	@ (8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800967c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009680:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009684:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009688:	d103      	bne.n	8009692 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 800968a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800968e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009690:	e03e      	b.n	8009710 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8009692:	2300      	movs	r3, #0
 8009694:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009696:	e03b      	b.n	8009710 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009698:	4b1e      	ldr	r3, [pc, #120]	@ (8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800969a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800969e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80096a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80096a4:	4b1b      	ldr	r3, [pc, #108]	@ (8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f003 0302 	and.w	r3, r3, #2
 80096ac:	2b02      	cmp	r3, #2
 80096ae:	d10c      	bne.n	80096ca <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 80096b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d109      	bne.n	80096ca <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80096b6:	4b17      	ldr	r3, [pc, #92]	@ (8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	08db      	lsrs	r3, r3, #3
 80096bc:	f003 0303 	and.w	r3, r3, #3
 80096c0:	4a15      	ldr	r2, [pc, #84]	@ (8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 80096c2:	fa22 f303 	lsr.w	r3, r2, r3
 80096c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80096c8:	e01e      	b.n	8009708 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80096ca:	4b12      	ldr	r3, [pc, #72]	@ (8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80096d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096d6:	d106      	bne.n	80096e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 80096d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096de:	d102      	bne.n	80096e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80096e0:	4b0e      	ldr	r3, [pc, #56]	@ (800971c <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 80096e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80096e4:	e010      	b.n	8009708 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80096e6:	4b0b      	ldr	r3, [pc, #44]	@ (8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80096f2:	d106      	bne.n	8009702 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 80096f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80096fa:	d102      	bne.n	8009702 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80096fc:	4b08      	ldr	r3, [pc, #32]	@ (8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 80096fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009700:	e002      	b.n	8009708 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009702:	2300      	movs	r3, #0
 8009704:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009706:	e003      	b.n	8009710 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8009708:	e002      	b.n	8009710 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 800970a:	2300      	movs	r3, #0
 800970c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800970e:	bf00      	nop
          }
        }
        break;
 8009710:	f000 be15 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009714:	44020c00 	.word	0x44020c00
 8009718:	03d09000 	.word	0x03d09000
 800971c:	003d0900 	.word	0x003d0900
 8009720:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8009724:	4b9e      	ldr	r3, [pc, #632]	@ (80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009726:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800972a:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 800972e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009732:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8009736:	d056      	beq.n	80097e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8009738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800973a:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800973e:	f200 808b 	bhi.w	8009858 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009744:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009748:	d03e      	beq.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 800974a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800974c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009750:	f200 8082 	bhi.w	8009858 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009756:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800975a:	d027      	beq.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 800975c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800975e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009762:	d879      	bhi.n	8009858 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009766:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800976a:	d017      	beq.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 800976c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800976e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009772:	d871      	bhi.n	8009858 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009776:	2b00      	cmp	r3, #0
 8009778:	d004      	beq.n	8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 800977a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800977c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009780:	d004      	beq.n	800978c <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 8009782:	e069      	b.n	8009858 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009784:	f7fb feac 	bl	80054e0 <HAL_RCC_GetPCLK3Freq>
 8009788:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800978a:	e068      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800978c:	f107 0314 	add.w	r3, r7, #20
 8009790:	4618      	mov	r0, r3
 8009792:	f7fd ffb1 	bl	80076f8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800979a:	e060      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800979c:	f107 0308 	add.w	r3, r7, #8
 80097a0:	4618      	mov	r0, r3
 80097a2:	f7fe f915 	bl	80079d0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80097aa:	e058      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80097ac:	4b7c      	ldr	r3, [pc, #496]	@ (80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80097ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80097b2:	f003 0302 	and.w	r3, r3, #2
 80097b6:	2b02      	cmp	r3, #2
 80097b8:	d103      	bne.n	80097c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 80097ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80097be:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80097c0:	e04d      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 80097c2:	2300      	movs	r3, #0
 80097c4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80097c6:	e04a      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80097c8:	4b75      	ldr	r3, [pc, #468]	@ (80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80097ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80097ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80097d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80097d6:	d103      	bne.n	80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 80097d8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80097dc:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80097de:	e03e      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 80097e0:	2300      	movs	r3, #0
 80097e2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80097e4:	e03b      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80097e6:	4b6e      	ldr	r3, [pc, #440]	@ (80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80097e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80097ec:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80097f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80097f2:	4b6b      	ldr	r3, [pc, #428]	@ (80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f003 0302 	and.w	r3, r3, #2
 80097fa:	2b02      	cmp	r3, #2
 80097fc:	d10c      	bne.n	8009818 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 80097fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009800:	2b00      	cmp	r3, #0
 8009802:	d109      	bne.n	8009818 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009804:	4b66      	ldr	r3, [pc, #408]	@ (80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	08db      	lsrs	r3, r3, #3
 800980a:	f003 0303 	and.w	r3, r3, #3
 800980e:	4a65      	ldr	r2, [pc, #404]	@ (80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8009810:	fa22 f303 	lsr.w	r3, r2, r3
 8009814:	637b      	str	r3, [r7, #52]	@ 0x34
 8009816:	e01e      	b.n	8009856 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009818:	4b61      	ldr	r3, [pc, #388]	@ (80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009820:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009824:	d106      	bne.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8009826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009828:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800982c:	d102      	bne.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800982e:	4b5e      	ldr	r3, [pc, #376]	@ (80099a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8009830:	637b      	str	r3, [r7, #52]	@ 0x34
 8009832:	e010      	b.n	8009856 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009834:	4b5a      	ldr	r3, [pc, #360]	@ (80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800983c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009840:	d106      	bne.n	8009850 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8009842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009844:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009848:	d102      	bne.n	8009850 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800984a:	4b58      	ldr	r3, [pc, #352]	@ (80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800984c:	637b      	str	r3, [r7, #52]	@ 0x34
 800984e:	e002      	b.n	8009856 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009850:	2300      	movs	r3, #0
 8009852:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009854:	e003      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 8009856:	e002      	b.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8009858:	2300      	movs	r3, #0
 800985a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800985c:	bf00      	nop
          }
        }
        break;
 800985e:	f000 bd6e 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8009862:	4b4f      	ldr	r3, [pc, #316]	@ (80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009864:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009868:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800986c:	633b      	str	r3, [r7, #48]	@ 0x30
 800986e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009870:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009874:	d056      	beq.n	8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 8009876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009878:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800987c:	f200 808b 	bhi.w	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8009880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009882:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009886:	d03e      	beq.n	8009906 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8009888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800988a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800988e:	f200 8082 	bhi.w	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8009892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009894:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009898:	d027      	beq.n	80098ea <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 800989a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800989c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80098a0:	d879      	bhi.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80098a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80098a8:	d017      	beq.n	80098da <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 80098aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80098b0:	d871      	bhi.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80098b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d004      	beq.n	80098c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 80098b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80098be:	d004      	beq.n	80098ca <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 80098c0:	e069      	b.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80098c2:	f7fb fe0d 	bl	80054e0 <HAL_RCC_GetPCLK3Freq>
 80098c6:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80098c8:	e068      	b.n	800999c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098ca:	f107 0314 	add.w	r3, r7, #20
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7fd ff12 	bl	80076f8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80098d8:	e060      	b.n	800999c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098da:	f107 0308 	add.w	r3, r7, #8
 80098de:	4618      	mov	r0, r3
 80098e0:	f7fe f876 	bl	80079d0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80098e8:	e058      	b.n	800999c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80098ea:	4b2d      	ldr	r3, [pc, #180]	@ (80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80098ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80098f0:	f003 0302 	and.w	r3, r3, #2
 80098f4:	2b02      	cmp	r3, #2
 80098f6:	d103      	bne.n	8009900 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 80098f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80098fc:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80098fe:	e04d      	b.n	800999c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8009900:	2300      	movs	r3, #0
 8009902:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009904:	e04a      	b.n	800999c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009906:	4b26      	ldr	r3, [pc, #152]	@ (80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009908:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800990c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009910:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009914:	d103      	bne.n	800991e <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 8009916:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800991a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800991c:	e03e      	b.n	800999c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800991e:	2300      	movs	r3, #0
 8009920:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009922:	e03b      	b.n	800999c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009924:	4b1e      	ldr	r3, [pc, #120]	@ (80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009926:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800992a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800992e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009930:	4b1b      	ldr	r3, [pc, #108]	@ (80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f003 0302 	and.w	r3, r3, #2
 8009938:	2b02      	cmp	r3, #2
 800993a:	d10c      	bne.n	8009956 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 800993c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800993e:	2b00      	cmp	r3, #0
 8009940:	d109      	bne.n	8009956 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009942:	4b17      	ldr	r3, [pc, #92]	@ (80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	08db      	lsrs	r3, r3, #3
 8009948:	f003 0303 	and.w	r3, r3, #3
 800994c:	4a15      	ldr	r2, [pc, #84]	@ (80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800994e:	fa22 f303 	lsr.w	r3, r2, r3
 8009952:	637b      	str	r3, [r7, #52]	@ 0x34
 8009954:	e01e      	b.n	8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009956:	4b12      	ldr	r3, [pc, #72]	@ (80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800995e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009962:	d106      	bne.n	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 8009964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009966:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800996a:	d102      	bne.n	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800996c:	4b0e      	ldr	r3, [pc, #56]	@ (80099a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800996e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009970:	e010      	b.n	8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009972:	4b0b      	ldr	r3, [pc, #44]	@ (80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800997a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800997e:	d106      	bne.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8009980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009982:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009986:	d102      	bne.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009988:	4b08      	ldr	r3, [pc, #32]	@ (80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800998a:	637b      	str	r3, [r7, #52]	@ 0x34
 800998c:	e002      	b.n	8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800998e:	2300      	movs	r3, #0
 8009990:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009992:	e003      	b.n	800999c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8009994:	e002      	b.n	800999c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 8009996:	2300      	movs	r3, #0
 8009998:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800999a:	bf00      	nop
          }
        }
        break;
 800999c:	f000 bccf 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80099a0:	44020c00 	.word	0x44020c00
 80099a4:	03d09000 	.word	0x03d09000
 80099a8:	003d0900 	.word	0x003d0900
 80099ac:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 80099b0:	4b9e      	ldr	r3, [pc, #632]	@ (8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80099b2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80099b6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80099ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80099bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80099c2:	d056      	beq.n	8009a72 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 80099c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80099ca:	f200 808b 	bhi.w	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80099ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099d4:	d03e      	beq.n	8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 80099d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099dc:	f200 8082 	bhi.w	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80099e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80099e6:	d027      	beq.n	8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 80099e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80099ee:	d879      	bhi.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80099f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099f6:	d017      	beq.n	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 80099f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099fe:	d871      	bhi.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d004      	beq.n	8009a10 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 8009a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a0c:	d004      	beq.n	8009a18 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 8009a0e:	e069      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009a10:	f7fb fd66 	bl	80054e0 <HAL_RCC_GetPCLK3Freq>
 8009a14:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009a16:	e068      	b.n	8009aea <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a18:	f107 0314 	add.w	r3, r7, #20
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f7fd fe6b 	bl	80076f8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009a26:	e060      	b.n	8009aea <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a28:	f107 0308 	add.w	r3, r7, #8
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f7fd ffcf 	bl	80079d0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009a36:	e058      	b.n	8009aea <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009a38:	4b7c      	ldr	r3, [pc, #496]	@ (8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009a3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a3e:	f003 0302 	and.w	r3, r3, #2
 8009a42:	2b02      	cmp	r3, #2
 8009a44:	d103      	bne.n	8009a4e <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 8009a46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a4a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009a4c:	e04d      	b.n	8009aea <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009a52:	e04a      	b.n	8009aea <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009a54:	4b75      	ldr	r3, [pc, #468]	@ (8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009a56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a62:	d103      	bne.n	8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 8009a64:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009a68:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009a6a:	e03e      	b.n	8009aea <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009a70:	e03b      	b.n	8009aea <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009a72:	4b6e      	ldr	r3, [pc, #440]	@ (8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009a74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009a78:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009a7e:	4b6b      	ldr	r3, [pc, #428]	@ (8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f003 0302 	and.w	r3, r3, #2
 8009a86:	2b02      	cmp	r3, #2
 8009a88:	d10c      	bne.n	8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 8009a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d109      	bne.n	8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009a90:	4b66      	ldr	r3, [pc, #408]	@ (8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	08db      	lsrs	r3, r3, #3
 8009a96:	f003 0303 	and.w	r3, r3, #3
 8009a9a:	4a65      	ldr	r2, [pc, #404]	@ (8009c30 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8009a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8009aa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009aa2:	e01e      	b.n	8009ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009aa4:	4b61      	ldr	r3, [pc, #388]	@ (8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009aac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ab0:	d106      	bne.n	8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 8009ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ab8:	d102      	bne.n	8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009aba:	4b5e      	ldr	r3, [pc, #376]	@ (8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8009abc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009abe:	e010      	b.n	8009ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009ac0:	4b5a      	ldr	r3, [pc, #360]	@ (8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ac8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009acc:	d106      	bne.n	8009adc <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 8009ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ad0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ad4:	d102      	bne.n	8009adc <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009ad6:	4b58      	ldr	r3, [pc, #352]	@ (8009c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009ad8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ada:	e002      	b.n	8009ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009adc:	2300      	movs	r3, #0
 8009ade:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009ae0:	e003      	b.n	8009aea <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 8009ae2:	e002      	b.n	8009aea <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009ae8:	bf00      	nop
          }
        }
        break;
 8009aea:	f000 bc28 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009aee:	4b4f      	ldr	r3, [pc, #316]	@ (8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009af0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009af4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009af8:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8009afa:	4b4c      	ldr	r3, [pc, #304]	@ (8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b06:	d106      	bne.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8009b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d103      	bne.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 8009b0e:	4b4a      	ldr	r3, [pc, #296]	@ (8009c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009b10:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8009b12:	f000 bc14 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8009b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b1c:	d108      	bne.n	8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b1e:	f107 0320 	add.w	r3, r7, #32
 8009b22:	4618      	mov	r0, r3
 8009b24:	f7fd fc7c 	bl	8007420 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b2a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b2c:	f000 bc07 	b.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8009b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b36:	d107      	bne.n	8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b38:	f107 0314 	add.w	r3, r7, #20
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f7fd fddb 	bl	80076f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009b42:	69bb      	ldr	r3, [r7, #24]
 8009b44:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b46:	e3fa      	b.n	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b4c:	e3f7      	b.n	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8009b4e:	4b37      	ldr	r3, [pc, #220]	@ (8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009b54:	f003 0307 	and.w	r3, r3, #7
 8009b58:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b5c:	2b04      	cmp	r3, #4
 8009b5e:	d861      	bhi.n	8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 8009b60:	a201      	add	r2, pc, #4	@ (adr r2, 8009b68 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 8009b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b66:	bf00      	nop
 8009b68:	08009b7d 	.word	0x08009b7d
 8009b6c:	08009b8d 	.word	0x08009b8d
 8009b70:	08009b9d 	.word	0x08009b9d
 8009b74:	08009bad 	.word	0x08009bad
 8009b78:	08009bb3 	.word	0x08009bb3
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b7c:	f107 0320 	add.w	r3, r7, #32
 8009b80:	4618      	mov	r0, r3
 8009b82:	f7fd fc4d 	bl	8007420 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b88:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009b8a:	e04e      	b.n	8009c2a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b8c:	f107 0314 	add.w	r3, r7, #20
 8009b90:	4618      	mov	r0, r3
 8009b92:	f7fd fdb1 	bl	80076f8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009b9a:	e046      	b.n	8009c2a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b9c:	f107 0308 	add.w	r3, r7, #8
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f7fd ff15 	bl	80079d0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009baa:	e03e      	b.n	8009c2a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009bac:	4b23      	ldr	r3, [pc, #140]	@ (8009c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 8009bae:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009bb0:	e03b      	b.n	8009c2a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009bb2:	4b1e      	ldr	r3, [pc, #120]	@ (8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009bb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009bb8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f003 0302 	and.w	r3, r3, #2
 8009bc6:	2b02      	cmp	r3, #2
 8009bc8:	d10c      	bne.n	8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 8009bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d109      	bne.n	8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009bd0:	4b16      	ldr	r3, [pc, #88]	@ (8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	08db      	lsrs	r3, r3, #3
 8009bd6:	f003 0303 	and.w	r3, r3, #3
 8009bda:	4a15      	ldr	r2, [pc, #84]	@ (8009c30 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8009bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8009be0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009be2:	e01e      	b.n	8009c22 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009be4:	4b11      	ldr	r3, [pc, #68]	@ (8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009bec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009bf0:	d106      	bne.n	8009c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 8009bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009bf8:	d102      	bne.n	8009c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009bfa:	4b0e      	ldr	r3, [pc, #56]	@ (8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8009bfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bfe:	e010      	b.n	8009c22 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009c00:	4b0a      	ldr	r3, [pc, #40]	@ (8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c0c:	d106      	bne.n	8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 8009c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c14:	d102      	bne.n	8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009c16:	4b08      	ldr	r3, [pc, #32]	@ (8009c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009c18:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c1a:	e002      	b.n	8009c22 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009c20:	e003      	b.n	8009c2a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 8009c22:	e002      	b.n	8009c2a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8009c24:	2300      	movs	r3, #0
 8009c26:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009c28:	bf00      	nop
          }
        }
        break;
 8009c2a:	e388      	b.n	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009c2c:	44020c00 	.word	0x44020c00
 8009c30:	03d09000 	.word	0x03d09000
 8009c34:	003d0900 	.word	0x003d0900
 8009c38:	007a1200 	.word	0x007a1200
 8009c3c:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8009c40:	4ba9      	ldr	r3, [pc, #676]	@ (8009ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009c46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009c4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8009c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c4e:	2b20      	cmp	r3, #32
 8009c50:	f200 809a 	bhi.w	8009d88 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 8009c54:	a201      	add	r2, pc, #4	@ (adr r2, 8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 8009c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c5a:	bf00      	nop
 8009c5c:	08009ce1 	.word	0x08009ce1
 8009c60:	08009d89 	.word	0x08009d89
 8009c64:	08009d89 	.word	0x08009d89
 8009c68:	08009d89 	.word	0x08009d89
 8009c6c:	08009d89 	.word	0x08009d89
 8009c70:	08009d89 	.word	0x08009d89
 8009c74:	08009d89 	.word	0x08009d89
 8009c78:	08009d89 	.word	0x08009d89
 8009c7c:	08009cf1 	.word	0x08009cf1
 8009c80:	08009d89 	.word	0x08009d89
 8009c84:	08009d89 	.word	0x08009d89
 8009c88:	08009d89 	.word	0x08009d89
 8009c8c:	08009d89 	.word	0x08009d89
 8009c90:	08009d89 	.word	0x08009d89
 8009c94:	08009d89 	.word	0x08009d89
 8009c98:	08009d89 	.word	0x08009d89
 8009c9c:	08009d01 	.word	0x08009d01
 8009ca0:	08009d89 	.word	0x08009d89
 8009ca4:	08009d89 	.word	0x08009d89
 8009ca8:	08009d89 	.word	0x08009d89
 8009cac:	08009d89 	.word	0x08009d89
 8009cb0:	08009d89 	.word	0x08009d89
 8009cb4:	08009d89 	.word	0x08009d89
 8009cb8:	08009d89 	.word	0x08009d89
 8009cbc:	08009d11 	.word	0x08009d11
 8009cc0:	08009d89 	.word	0x08009d89
 8009cc4:	08009d89 	.word	0x08009d89
 8009cc8:	08009d89 	.word	0x08009d89
 8009ccc:	08009d89 	.word	0x08009d89
 8009cd0:	08009d89 	.word	0x08009d89
 8009cd4:	08009d89 	.word	0x08009d89
 8009cd8:	08009d89 	.word	0x08009d89
 8009cdc:	08009d17 	.word	0x08009d17
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ce0:	f107 0320 	add.w	r3, r7, #32
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f7fd fb9b 	bl	8007420 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cec:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009cee:	e04e      	b.n	8009d8e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cf0:	f107 0314 	add.w	r3, r7, #20
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f7fd fcff 	bl	80076f8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009cfe:	e046      	b.n	8009d8e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d00:	f107 0308 	add.w	r3, r7, #8
 8009d04:	4618      	mov	r0, r3
 8009d06:	f7fd fe63 	bl	80079d0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009d0e:	e03e      	b.n	8009d8e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009d10:	4b76      	ldr	r3, [pc, #472]	@ (8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8009d12:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009d14:	e03b      	b.n	8009d8e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009d16:	4b74      	ldr	r3, [pc, #464]	@ (8009ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009d18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009d1c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009d20:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009d22:	4b71      	ldr	r3, [pc, #452]	@ (8009ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f003 0302 	and.w	r3, r3, #2
 8009d2a:	2b02      	cmp	r3, #2
 8009d2c:	d10c      	bne.n	8009d48 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 8009d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d109      	bne.n	8009d48 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009d34:	4b6c      	ldr	r3, [pc, #432]	@ (8009ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	08db      	lsrs	r3, r3, #3
 8009d3a:	f003 0303 	and.w	r3, r3, #3
 8009d3e:	4a6c      	ldr	r2, [pc, #432]	@ (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8009d40:	fa22 f303 	lsr.w	r3, r2, r3
 8009d44:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d46:	e01e      	b.n	8009d86 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009d48:	4b67      	ldr	r3, [pc, #412]	@ (8009ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009d50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d54:	d106      	bne.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 8009d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d5c:	d102      	bne.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009d5e:	4b65      	ldr	r3, [pc, #404]	@ (8009ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8009d60:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d62:	e010      	b.n	8009d86 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009d64:	4b60      	ldr	r3, [pc, #384]	@ (8009ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d70:	d106      	bne.n	8009d80 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 8009d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d78:	d102      	bne.n	8009d80 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009d7a:	4b5f      	ldr	r3, [pc, #380]	@ (8009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8009d7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d7e:	e002      	b.n	8009d86 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009d80:	2300      	movs	r3, #0
 8009d82:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009d84:	e003      	b.n	8009d8e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 8009d86:	e002      	b.n	8009d8e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009d8c:	bf00      	nop
          }
        }
        break;
 8009d8e:	e2d6      	b.n	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8009d90:	4b55      	ldr	r3, [pc, #340]	@ (8009ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009d92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009d96:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009d9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009da2:	d031      	beq.n	8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 8009da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009da6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009daa:	d866      	bhi.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8009dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dae:	2bc0      	cmp	r3, #192	@ 0xc0
 8009db0:	d027      	beq.n	8009e02 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 8009db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009db4:	2bc0      	cmp	r3, #192	@ 0xc0
 8009db6:	d860      	bhi.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8009db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dba:	2b80      	cmp	r3, #128	@ 0x80
 8009dbc:	d019      	beq.n	8009df2 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 8009dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dc0:	2b80      	cmp	r3, #128	@ 0x80
 8009dc2:	d85a      	bhi.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8009dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d003      	beq.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 8009dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dcc:	2b40      	cmp	r3, #64	@ 0x40
 8009dce:	d008      	beq.n	8009de2 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 8009dd0:	e053      	b.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009dd2:	f107 0320 	add.w	r3, r7, #32
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f7fd fb22 	bl	8007420 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dde:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009de0:	e04e      	b.n	8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009de2:	f107 0314 	add.w	r3, r7, #20
 8009de6:	4618      	mov	r0, r3
 8009de8:	f7fd fc86 	bl	80076f8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009df0:	e046      	b.n	8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009df2:	f107 0308 	add.w	r3, r7, #8
 8009df6:	4618      	mov	r0, r3
 8009df8:	f7fd fdea 	bl	80079d0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009e00:	e03e      	b.n	8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009e02:	4b3a      	ldr	r3, [pc, #232]	@ (8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8009e04:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009e06:	e03b      	b.n	8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009e08:	4b37      	ldr	r3, [pc, #220]	@ (8009ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009e0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009e0e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009e12:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009e14:	4b34      	ldr	r3, [pc, #208]	@ (8009ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f003 0302 	and.w	r3, r3, #2
 8009e1c:	2b02      	cmp	r3, #2
 8009e1e:	d10c      	bne.n	8009e3a <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 8009e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d109      	bne.n	8009e3a <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009e26:	4b30      	ldr	r3, [pc, #192]	@ (8009ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	08db      	lsrs	r3, r3, #3
 8009e2c:	f003 0303 	and.w	r3, r3, #3
 8009e30:	4a2f      	ldr	r2, [pc, #188]	@ (8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8009e32:	fa22 f303 	lsr.w	r3, r2, r3
 8009e36:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e38:	e01e      	b.n	8009e78 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009e3a:	4b2b      	ldr	r3, [pc, #172]	@ (8009ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009e42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e46:	d106      	bne.n	8009e56 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8009e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e4e:	d102      	bne.n	8009e56 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009e50:	4b28      	ldr	r3, [pc, #160]	@ (8009ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8009e52:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e54:	e010      	b.n	8009e78 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009e56:	4b24      	ldr	r3, [pc, #144]	@ (8009ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e62:	d106      	bne.n	8009e72 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 8009e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e6a:	d102      	bne.n	8009e72 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009e6c:	4b22      	ldr	r3, [pc, #136]	@ (8009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8009e6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e70:	e002      	b.n	8009e78 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009e72:	2300      	movs	r3, #0
 8009e74:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009e76:	e003      	b.n	8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 8009e78:	e002      	b.n	8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009e7e:	bf00      	nop
          }
        }
        break;
 8009e80:	e25d      	b.n	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8009e82:	4b19      	ldr	r3, [pc, #100]	@ (8009ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009e88:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8009e8c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8009e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d103      	bne.n	8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8009e94:	f7fb fb0e 	bl	80054b4 <HAL_RCC_GetPCLK2Freq>
 8009e98:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009e9a:	e250      	b.n	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8009e9c:	4b12      	ldr	r3, [pc, #72]	@ (8009ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ea4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ea8:	d10b      	bne.n	8009ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 8009eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009eb0:	d107      	bne.n	8009ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009eb2:	f107 0314 	add.w	r3, r7, #20
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f7fd fc1e 	bl	80076f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009ebc:	69bb      	ldr	r3, [r7, #24]
 8009ebe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ec0:	e04f      	b.n	8009f62 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8009ec2:	4b09      	ldr	r3, [pc, #36]	@ (8009ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009eca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ece:	d115      	bne.n	8009efc <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 8009ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ed2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ed6:	d111      	bne.n	8009efc <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ed8:	f107 0308 	add.w	r3, r7, #8
 8009edc:	4618      	mov	r0, r3
 8009ede:	f7fd fd77 	bl	80079d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ee6:	e03c      	b.n	8009f62 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8009ee8:	44020c00 	.word	0x44020c00
 8009eec:	00bb8000 	.word	0x00bb8000
 8009ef0:	03d09000 	.word	0x03d09000
 8009ef4:	003d0900 	.word	0x003d0900
 8009ef8:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8009efc:	4b94      	ldr	r3, [pc, #592]	@ (800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f003 0302 	and.w	r3, r3, #2
 8009f04:	2b02      	cmp	r3, #2
 8009f06:	d10d      	bne.n	8009f24 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8009f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f0a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009f0e:	d109      	bne.n	8009f24 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009f10:	4b8f      	ldr	r3, [pc, #572]	@ (800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	08db      	lsrs	r3, r3, #3
 8009f16:	f003 0303 	and.w	r3, r3, #3
 8009f1a:	4a8e      	ldr	r2, [pc, #568]	@ (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8009f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8009f20:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f22:	e01e      	b.n	8009f62 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8009f24:	4b8a      	ldr	r3, [pc, #552]	@ (800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009f2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f30:	d106      	bne.n	8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 8009f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f38:	d102      	bne.n	8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 8009f3a:	4b87      	ldr	r3, [pc, #540]	@ (800a158 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8009f3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f3e:	e010      	b.n	8009f62 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8009f40:	4b83      	ldr	r3, [pc, #524]	@ (800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f4c:	d106      	bne.n	8009f5c <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 8009f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f50:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8009f54:	d102      	bne.n	8009f5c <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 8009f56:	4b81      	ldr	r3, [pc, #516]	@ (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8009f58:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f5a:	e002      	b.n	8009f62 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009f60:	e1ed      	b.n	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009f62:	e1ec      	b.n	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8009f64:	4b7a      	ldr	r3, [pc, #488]	@ (800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009f6a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009f6e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8009f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d103      	bne.n	8009f7e <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8009f76:	f7fb fab3 	bl	80054e0 <HAL_RCC_GetPCLK3Freq>
 8009f7a:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009f7c:	e1df      	b.n	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8009f7e:	4b74      	ldr	r3, [pc, #464]	@ (800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009f8a:	d10b      	bne.n	8009fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8009f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f92:	d107      	bne.n	8009fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f94:	f107 0314 	add.w	r3, r7, #20
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f7fd fbad 	bl	80076f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009f9e:	69bb      	ldr	r3, [r7, #24]
 8009fa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fa2:	e045      	b.n	800a030 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8009fa4:	4b6a      	ldr	r3, [pc, #424]	@ (800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009fac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fb0:	d10b      	bne.n	8009fca <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 8009fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009fb8:	d107      	bne.n	8009fca <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009fba:	f107 0308 	add.w	r3, r7, #8
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f7fd fd06 	bl	80079d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fc8:	e032      	b.n	800a030 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8009fca:	4b61      	ldr	r3, [pc, #388]	@ (800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f003 0302 	and.w	r3, r3, #2
 8009fd2:	2b02      	cmp	r3, #2
 8009fd4:	d10d      	bne.n	8009ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 8009fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fd8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009fdc:	d109      	bne.n	8009ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009fde:	4b5c      	ldr	r3, [pc, #368]	@ (800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	08db      	lsrs	r3, r3, #3
 8009fe4:	f003 0303 	and.w	r3, r3, #3
 8009fe8:	4a5a      	ldr	r2, [pc, #360]	@ (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8009fea:	fa22 f303 	lsr.w	r3, r2, r3
 8009fee:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ff0:	e01e      	b.n	800a030 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8009ff2:	4b57      	ldr	r3, [pc, #348]	@ (800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009ffa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ffe:	d106      	bne.n	800a00e <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 800a000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a002:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a006:	d102      	bne.n	800a00e <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 800a008:	4b53      	ldr	r3, [pc, #332]	@ (800a158 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800a00a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a00c:	e010      	b.n	800a030 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 800a00e:	4b50      	ldr	r3, [pc, #320]	@ (800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a016:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a01a:	d106      	bne.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 800a01c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a01e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800a022:	d102      	bne.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 800a024:	4b4d      	ldr	r3, [pc, #308]	@ (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800a026:	637b      	str	r3, [r7, #52]	@ 0x34
 800a028:	e002      	b.n	800a030 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 800a02a:	2300      	movs	r3, #0
 800a02c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a02e:	e186      	b.n	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a030:	e185      	b.n	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a032:	4b47      	ldr	r3, [pc, #284]	@ (800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a038:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800a03c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800a03e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a040:	2b00      	cmp	r3, #0
 800a042:	d103      	bne.n	800a04c <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800a044:	f7fb fa36 	bl	80054b4 <HAL_RCC_GetPCLK2Freq>
 800a048:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800a04a:	e178      	b.n	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 800a04c:	4b40      	ldr	r3, [pc, #256]	@ (800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a054:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a058:	d10b      	bne.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 800a05a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a05c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a060:	d107      	bne.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a062:	f107 0314 	add.w	r3, r7, #20
 800a066:	4618      	mov	r0, r3
 800a068:	f7fd fb46 	bl	80076f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a06c:	69bb      	ldr	r3, [r7, #24]
 800a06e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a070:	e045      	b.n	800a0fe <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800a072:	4b37      	ldr	r3, [pc, #220]	@ (800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a07a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a07e:	d10b      	bne.n	800a098 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 800a080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a082:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a086:	d107      	bne.n	800a098 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a088:	f107 0308 	add.w	r3, r7, #8
 800a08c:	4618      	mov	r0, r3
 800a08e:	f7fd fc9f 	bl	80079d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	637b      	str	r3, [r7, #52]	@ 0x34
 800a096:	e032      	b.n	800a0fe <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 800a098:	4b2d      	ldr	r3, [pc, #180]	@ (800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f003 0302 	and.w	r3, r3, #2
 800a0a0:	2b02      	cmp	r3, #2
 800a0a2:	d10d      	bne.n	800a0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 800a0a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0a6:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800a0aa:	d109      	bne.n	800a0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a0ac:	4b28      	ldr	r3, [pc, #160]	@ (800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	08db      	lsrs	r3, r3, #3
 800a0b2:	f003 0303 	and.w	r3, r3, #3
 800a0b6:	4a27      	ldr	r2, [pc, #156]	@ (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800a0b8:	fa22 f303 	lsr.w	r3, r2, r3
 800a0bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0be:	e01e      	b.n	800a0fe <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800a0c0:	4b23      	ldr	r3, [pc, #140]	@ (800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a0c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0cc:	d106      	bne.n	800a0dc <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 800a0ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a0d4:	d102      	bne.n	800a0dc <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 800a0d6:	4b20      	ldr	r3, [pc, #128]	@ (800a158 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800a0d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0da:	e010      	b.n	800a0fe <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 800a0dc:	4b1c      	ldr	r3, [pc, #112]	@ (800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a0e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a0e8:	d106      	bne.n	800a0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 800a0ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ec:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800a0f0:	d102      	bne.n	800a0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 800a0f2:	4b1a      	ldr	r3, [pc, #104]	@ (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800a0f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0f6:	e002      	b.n	800a0fe <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a0fc:	e11f      	b.n	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a0fe:	e11e      	b.n	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800a100:	4b13      	ldr	r3, [pc, #76]	@ (800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a102:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a106:	f003 0303 	and.w	r3, r3, #3
 800a10a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a10c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a10e:	2b03      	cmp	r3, #3
 800a110:	d85f      	bhi.n	800a1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 800a112:	a201      	add	r2, pc, #4	@ (adr r2, 800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 800a114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a118:	0800a129 	.word	0x0800a129
 800a11c:	0800a131 	.word	0x0800a131
 800a120:	0800a141 	.word	0x0800a141
 800a124:	0800a161 	.word	0x0800a161

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 800a128:	f7fb f992 	bl	8005450 <HAL_RCC_GetHCLKFreq>
 800a12c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800a12e:	e053      	b.n	800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a130:	f107 0320 	add.w	r3, r7, #32
 800a134:	4618      	mov	r0, r3
 800a136:	f7fd f973 	bl	8007420 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800a13a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a13c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a13e:	e04b      	b.n	800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a140:	f107 0314 	add.w	r3, r7, #20
 800a144:	4618      	mov	r0, r3
 800a146:	f7fd fad7 	bl	80076f8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800a14a:	69fb      	ldr	r3, [r7, #28]
 800a14c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a14e:	e043      	b.n	800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800a150:	44020c00 	.word	0x44020c00
 800a154:	03d09000 	.word	0x03d09000
 800a158:	003d0900 	.word	0x003d0900
 800a15c:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a160:	4b79      	ldr	r3, [pc, #484]	@ (800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a162:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a166:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a16a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a16c:	4b76      	ldr	r3, [pc, #472]	@ (800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f003 0302 	and.w	r3, r3, #2
 800a174:	2b02      	cmp	r3, #2
 800a176:	d10c      	bne.n	800a192 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 800a178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d109      	bne.n	800a192 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a17e:	4b72      	ldr	r3, [pc, #456]	@ (800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	08db      	lsrs	r3, r3, #3
 800a184:	f003 0303 	and.w	r3, r3, #3
 800a188:	4a70      	ldr	r2, [pc, #448]	@ (800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 800a18a:	fa22 f303 	lsr.w	r3, r2, r3
 800a18e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a190:	e01e      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a192:	4b6d      	ldr	r3, [pc, #436]	@ (800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a19a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a19e:	d106      	bne.n	800a1ae <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 800a1a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1a6:	d102      	bne.n	800a1ae <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a1a8:	4b69      	ldr	r3, [pc, #420]	@ (800a350 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 800a1aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1ac:	e010      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a1ae:	4b66      	ldr	r3, [pc, #408]	@ (800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a1b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a1ba:	d106      	bne.n	800a1ca <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 800a1bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a1c2:	d102      	bne.n	800a1ca <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a1c4:	4b63      	ldr	r3, [pc, #396]	@ (800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800a1c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1c8:	e002      	b.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a1ce:	e003      	b.n	800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800a1d0:	e002      	b.n	800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a1d6:	bf00      	nop
          }
        }
        break;
 800a1d8:	e0b1      	b.n	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800a1da:	4b5b      	ldr	r3, [pc, #364]	@ (800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a1dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a1e0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a1e4:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800a1e6:	4b58      	ldr	r3, [pc, #352]	@ (800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a1e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a1ec:	f003 0302 	and.w	r3, r3, #2
 800a1f0:	2b02      	cmp	r3, #2
 800a1f2:	d106      	bne.n	800a202 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800a1f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d103      	bne.n	800a202 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 800a1fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a1fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800a200:	e01f      	b.n	800a242 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800a202:	4b51      	ldr	r3, [pc, #324]	@ (800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a204:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a208:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a20c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a210:	d106      	bne.n	800a220 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 800a212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a214:	2b40      	cmp	r3, #64	@ 0x40
 800a216:	d103      	bne.n	800a220 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 800a218:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a21c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a21e:	e010      	b.n	800a242 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 800a220:	4b49      	ldr	r3, [pc, #292]	@ (800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a228:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a22c:	d106      	bne.n	800a23c <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 800a22e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a230:	2b80      	cmp	r3, #128	@ 0x80
 800a232:	d103      	bne.n	800a23c <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 800a234:	f248 0312 	movw	r3, #32786	@ 0x8012
 800a238:	637b      	str	r3, [r7, #52]	@ 0x34
 800a23a:	e002      	b.n	800a242 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800a23c:	2300      	movs	r3, #0
 800a23e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800a240:	e07d      	b.n	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a242:	e07c      	b.n	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800a244:	4b40      	ldr	r3, [pc, #256]	@ (800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a246:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a24a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a24e:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800a250:	4b3d      	ldr	r3, [pc, #244]	@ (800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a258:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a25c:	d105      	bne.n	800a26a <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 800a25e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a260:	2b00      	cmp	r3, #0
 800a262:	d102      	bne.n	800a26a <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 800a264:	4b3c      	ldr	r3, [pc, #240]	@ (800a358 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800a266:	637b      	str	r3, [r7, #52]	@ 0x34
 800a268:	e031      	b.n	800a2ce <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800a26a:	4b37      	ldr	r3, [pc, #220]	@ (800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a272:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a276:	d10a      	bne.n	800a28e <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 800a278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a27a:	2b10      	cmp	r3, #16
 800a27c:	d107      	bne.n	800a28e <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a27e:	f107 0320 	add.w	r3, r7, #32
 800a282:	4618      	mov	r0, r3
 800a284:	f7fd f8cc 	bl	8007420 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a28a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a28c:	e01f      	b.n	800a2ce <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800a28e:	4b2e      	ldr	r3, [pc, #184]	@ (800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a290:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a294:	f003 0302 	and.w	r3, r3, #2
 800a298:	2b02      	cmp	r3, #2
 800a29a:	d106      	bne.n	800a2aa <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 800a29c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a29e:	2b20      	cmp	r3, #32
 800a2a0:	d103      	bne.n	800a2aa <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800a2a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a2a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2a8:	e011      	b.n	800a2ce <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800a2aa:	4b27      	ldr	r3, [pc, #156]	@ (800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a2ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a2b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a2b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a2b8:	d106      	bne.n	800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 800a2ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2bc:	2b30      	cmp	r3, #48	@ 0x30
 800a2be:	d103      	bne.n	800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 800a2c0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a2c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2c6:	e002      	b.n	800a2ce <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800a2cc:	e037      	b.n	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a2ce:	e036      	b.n	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800a2d0:	4b1d      	ldr	r3, [pc, #116]	@ (800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a2d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a2d6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a2da:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800a2dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2de:	2b10      	cmp	r3, #16
 800a2e0:	d107      	bne.n	800a2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a2e2:	f107 0320 	add.w	r3, r7, #32
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f7fd f89a 	bl	8007420 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a2ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ee:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800a2f0:	e025      	b.n	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800a2f2:	4b15      	ldr	r3, [pc, #84]	@ (800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a2fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2fe:	d10a      	bne.n	800a316 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 800a300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a302:	2b20      	cmp	r3, #32
 800a304:	d107      	bne.n	800a316 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a306:	f107 0308 	add.w	r3, r7, #8
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7fd fb60 	bl	80079d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	637b      	str	r3, [r7, #52]	@ 0x34
 800a314:	e00f      	b.n	800a336 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800a316:	4b0c      	ldr	r3, [pc, #48]	@ (800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a31e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a322:	d105      	bne.n	800a330 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 800a324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a326:	2b30      	cmp	r3, #48	@ 0x30
 800a328:	d102      	bne.n	800a330 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 800a32a:	4b0b      	ldr	r3, [pc, #44]	@ (800a358 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800a32c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a32e:	e002      	b.n	800a336 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800a330:	2300      	movs	r3, #0
 800a332:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 800a334:	e003      	b.n	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a336:	e002      	b.n	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 800a338:	2300      	movs	r3, #0
 800a33a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a33c:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 800a33e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a340:	4618      	mov	r0, r3
 800a342:	373c      	adds	r7, #60	@ 0x3c
 800a344:	46bd      	mov	sp, r7
 800a346:	bd90      	pop	{r4, r7, pc}
 800a348:	44020c00 	.word	0x44020c00
 800a34c:	03d09000 	.word	0x03d09000
 800a350:	003d0900 	.word	0x003d0900
 800a354:	007a1200 	.word	0x007a1200
 800a358:	02dc6c00 	.word	0x02dc6c00

0800a35c <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b084      	sub	sp, #16
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800a364:	4b48      	ldr	r3, [pc, #288]	@ (800a488 <RCCEx_PLL2_Config+0x12c>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4a47      	ldr	r2, [pc, #284]	@ (800a488 <RCCEx_PLL2_Config+0x12c>)
 800a36a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a36e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a370:	f7f7 ff18 	bl	80021a4 <HAL_GetTick>
 800a374:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a376:	e008      	b.n	800a38a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a378:	f7f7 ff14 	bl	80021a4 <HAL_GetTick>
 800a37c:	4602      	mov	r2, r0
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	1ad3      	subs	r3, r2, r3
 800a382:	2b02      	cmp	r3, #2
 800a384:	d901      	bls.n	800a38a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a386:	2303      	movs	r3, #3
 800a388:	e07a      	b.n	800a480 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a38a:	4b3f      	ldr	r3, [pc, #252]	@ (800a488 <RCCEx_PLL2_Config+0x12c>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a392:	2b00      	cmp	r3, #0
 800a394:	d1f0      	bne.n	800a378 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800a396:	4b3c      	ldr	r3, [pc, #240]	@ (800a488 <RCCEx_PLL2_Config+0x12c>)
 800a398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a39a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a39e:	f023 0303 	bic.w	r3, r3, #3
 800a3a2:	687a      	ldr	r2, [r7, #4]
 800a3a4:	6811      	ldr	r1, [r2, #0]
 800a3a6:	687a      	ldr	r2, [r7, #4]
 800a3a8:	6852      	ldr	r2, [r2, #4]
 800a3aa:	0212      	lsls	r2, r2, #8
 800a3ac:	430a      	orrs	r2, r1
 800a3ae:	4936      	ldr	r1, [pc, #216]	@ (800a488 <RCCEx_PLL2_Config+0x12c>)
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	689b      	ldr	r3, [r3, #8]
 800a3b8:	3b01      	subs	r3, #1
 800a3ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	68db      	ldr	r3, [r3, #12]
 800a3c2:	3b01      	subs	r3, #1
 800a3c4:	025b      	lsls	r3, r3, #9
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	431a      	orrs	r2, r3
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	691b      	ldr	r3, [r3, #16]
 800a3ce:	3b01      	subs	r3, #1
 800a3d0:	041b      	lsls	r3, r3, #16
 800a3d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a3d6:	431a      	orrs	r2, r3
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	695b      	ldr	r3, [r3, #20]
 800a3dc:	3b01      	subs	r3, #1
 800a3de:	061b      	lsls	r3, r3, #24
 800a3e0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a3e4:	4928      	ldr	r1, [pc, #160]	@ (800a488 <RCCEx_PLL2_Config+0x12c>)
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800a3ea:	4b27      	ldr	r3, [pc, #156]	@ (800a488 <RCCEx_PLL2_Config+0x12c>)
 800a3ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3ee:	f023 020c 	bic.w	r2, r3, #12
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	699b      	ldr	r3, [r3, #24]
 800a3f6:	4924      	ldr	r1, [pc, #144]	@ (800a488 <RCCEx_PLL2_Config+0x12c>)
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800a3fc:	4b22      	ldr	r3, [pc, #136]	@ (800a488 <RCCEx_PLL2_Config+0x12c>)
 800a3fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a400:	f023 0220 	bic.w	r2, r3, #32
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	69db      	ldr	r3, [r3, #28]
 800a408:	491f      	ldr	r1, [pc, #124]	@ (800a488 <RCCEx_PLL2_Config+0x12c>)
 800a40a:	4313      	orrs	r3, r2
 800a40c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800a40e:	4b1e      	ldr	r3, [pc, #120]	@ (800a488 <RCCEx_PLL2_Config+0x12c>)
 800a410:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a416:	491c      	ldr	r1, [pc, #112]	@ (800a488 <RCCEx_PLL2_Config+0x12c>)
 800a418:	4313      	orrs	r3, r2
 800a41a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800a41c:	4b1a      	ldr	r3, [pc, #104]	@ (800a488 <RCCEx_PLL2_Config+0x12c>)
 800a41e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a420:	4a19      	ldr	r2, [pc, #100]	@ (800a488 <RCCEx_PLL2_Config+0x12c>)
 800a422:	f023 0310 	bic.w	r3, r3, #16
 800a426:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800a428:	4b17      	ldr	r3, [pc, #92]	@ (800a488 <RCCEx_PLL2_Config+0x12c>)
 800a42a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a42c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a430:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a434:	687a      	ldr	r2, [r7, #4]
 800a436:	6a12      	ldr	r2, [r2, #32]
 800a438:	00d2      	lsls	r2, r2, #3
 800a43a:	4913      	ldr	r1, [pc, #76]	@ (800a488 <RCCEx_PLL2_Config+0x12c>)
 800a43c:	4313      	orrs	r3, r2
 800a43e:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800a440:	4b11      	ldr	r3, [pc, #68]	@ (800a488 <RCCEx_PLL2_Config+0x12c>)
 800a442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a444:	4a10      	ldr	r2, [pc, #64]	@ (800a488 <RCCEx_PLL2_Config+0x12c>)
 800a446:	f043 0310 	orr.w	r3, r3, #16
 800a44a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800a44c:	4b0e      	ldr	r3, [pc, #56]	@ (800a488 <RCCEx_PLL2_Config+0x12c>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4a0d      	ldr	r2, [pc, #52]	@ (800a488 <RCCEx_PLL2_Config+0x12c>)
 800a452:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a456:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a458:	f7f7 fea4 	bl	80021a4 <HAL_GetTick>
 800a45c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a45e:	e008      	b.n	800a472 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a460:	f7f7 fea0 	bl	80021a4 <HAL_GetTick>
 800a464:	4602      	mov	r2, r0
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	1ad3      	subs	r3, r2, r3
 800a46a:	2b02      	cmp	r3, #2
 800a46c:	d901      	bls.n	800a472 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800a46e:	2303      	movs	r3, #3
 800a470:	e006      	b.n	800a480 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a472:	4b05      	ldr	r3, [pc, #20]	@ (800a488 <RCCEx_PLL2_Config+0x12c>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d0f0      	beq.n	800a460 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800a47e:	2300      	movs	r3, #0

}
 800a480:	4618      	mov	r0, r3
 800a482:	3710      	adds	r7, #16
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}
 800a488:	44020c00 	.word	0x44020c00

0800a48c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b084      	sub	sp, #16
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800a494:	4b48      	ldr	r3, [pc, #288]	@ (800a5b8 <RCCEx_PLL3_Config+0x12c>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	4a47      	ldr	r2, [pc, #284]	@ (800a5b8 <RCCEx_PLL3_Config+0x12c>)
 800a49a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a49e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a4a0:	f7f7 fe80 	bl	80021a4 <HAL_GetTick>
 800a4a4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a4a6:	e008      	b.n	800a4ba <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a4a8:	f7f7 fe7c 	bl	80021a4 <HAL_GetTick>
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	1ad3      	subs	r3, r2, r3
 800a4b2:	2b02      	cmp	r3, #2
 800a4b4:	d901      	bls.n	800a4ba <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a4b6:	2303      	movs	r3, #3
 800a4b8:	e07a      	b.n	800a5b0 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a4ba:	4b3f      	ldr	r3, [pc, #252]	@ (800a5b8 <RCCEx_PLL3_Config+0x12c>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d1f0      	bne.n	800a4a8 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800a4c6:	4b3c      	ldr	r3, [pc, #240]	@ (800a5b8 <RCCEx_PLL3_Config+0x12c>)
 800a4c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4ca:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a4ce:	f023 0303 	bic.w	r3, r3, #3
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	6811      	ldr	r1, [r2, #0]
 800a4d6:	687a      	ldr	r2, [r7, #4]
 800a4d8:	6852      	ldr	r2, [r2, #4]
 800a4da:	0212      	lsls	r2, r2, #8
 800a4dc:	430a      	orrs	r2, r1
 800a4de:	4936      	ldr	r1, [pc, #216]	@ (800a5b8 <RCCEx_PLL3_Config+0x12c>)
 800a4e0:	4313      	orrs	r3, r2
 800a4e2:	630b      	str	r3, [r1, #48]	@ 0x30
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	689b      	ldr	r3, [r3, #8]
 800a4e8:	3b01      	subs	r3, #1
 800a4ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	68db      	ldr	r3, [r3, #12]
 800a4f2:	3b01      	subs	r3, #1
 800a4f4:	025b      	lsls	r3, r3, #9
 800a4f6:	b29b      	uxth	r3, r3
 800a4f8:	431a      	orrs	r2, r3
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	691b      	ldr	r3, [r3, #16]
 800a4fe:	3b01      	subs	r3, #1
 800a500:	041b      	lsls	r3, r3, #16
 800a502:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a506:	431a      	orrs	r2, r3
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	695b      	ldr	r3, [r3, #20]
 800a50c:	3b01      	subs	r3, #1
 800a50e:	061b      	lsls	r3, r3, #24
 800a510:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a514:	4928      	ldr	r1, [pc, #160]	@ (800a5b8 <RCCEx_PLL3_Config+0x12c>)
 800a516:	4313      	orrs	r3, r2
 800a518:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a51a:	4b27      	ldr	r3, [pc, #156]	@ (800a5b8 <RCCEx_PLL3_Config+0x12c>)
 800a51c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a51e:	f023 020c 	bic.w	r2, r3, #12
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	699b      	ldr	r3, [r3, #24]
 800a526:	4924      	ldr	r1, [pc, #144]	@ (800a5b8 <RCCEx_PLL3_Config+0x12c>)
 800a528:	4313      	orrs	r3, r2
 800a52a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800a52c:	4b22      	ldr	r3, [pc, #136]	@ (800a5b8 <RCCEx_PLL3_Config+0x12c>)
 800a52e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a530:	f023 0220 	bic.w	r2, r3, #32
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	69db      	ldr	r3, [r3, #28]
 800a538:	491f      	ldr	r1, [pc, #124]	@ (800a5b8 <RCCEx_PLL3_Config+0x12c>)
 800a53a:	4313      	orrs	r3, r2
 800a53c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800a53e:	4b1e      	ldr	r3, [pc, #120]	@ (800a5b8 <RCCEx_PLL3_Config+0x12c>)
 800a540:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a546:	491c      	ldr	r1, [pc, #112]	@ (800a5b8 <RCCEx_PLL3_Config+0x12c>)
 800a548:	4313      	orrs	r3, r2
 800a54a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800a54c:	4b1a      	ldr	r3, [pc, #104]	@ (800a5b8 <RCCEx_PLL3_Config+0x12c>)
 800a54e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a550:	4a19      	ldr	r2, [pc, #100]	@ (800a5b8 <RCCEx_PLL3_Config+0x12c>)
 800a552:	f023 0310 	bic.w	r3, r3, #16
 800a556:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800a558:	4b17      	ldr	r3, [pc, #92]	@ (800a5b8 <RCCEx_PLL3_Config+0x12c>)
 800a55a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a55c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a560:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a564:	687a      	ldr	r2, [r7, #4]
 800a566:	6a12      	ldr	r2, [r2, #32]
 800a568:	00d2      	lsls	r2, r2, #3
 800a56a:	4913      	ldr	r1, [pc, #76]	@ (800a5b8 <RCCEx_PLL3_Config+0x12c>)
 800a56c:	4313      	orrs	r3, r2
 800a56e:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800a570:	4b11      	ldr	r3, [pc, #68]	@ (800a5b8 <RCCEx_PLL3_Config+0x12c>)
 800a572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a574:	4a10      	ldr	r2, [pc, #64]	@ (800a5b8 <RCCEx_PLL3_Config+0x12c>)
 800a576:	f043 0310 	orr.w	r3, r3, #16
 800a57a:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800a57c:	4b0e      	ldr	r3, [pc, #56]	@ (800a5b8 <RCCEx_PLL3_Config+0x12c>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	4a0d      	ldr	r2, [pc, #52]	@ (800a5b8 <RCCEx_PLL3_Config+0x12c>)
 800a582:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a586:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a588:	f7f7 fe0c 	bl	80021a4 <HAL_GetTick>
 800a58c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a58e:	e008      	b.n	800a5a2 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a590:	f7f7 fe08 	bl	80021a4 <HAL_GetTick>
 800a594:	4602      	mov	r2, r0
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	1ad3      	subs	r3, r2, r3
 800a59a:	2b02      	cmp	r3, #2
 800a59c:	d901      	bls.n	800a5a2 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800a59e:	2303      	movs	r3, #3
 800a5a0:	e006      	b.n	800a5b0 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a5a2:	4b05      	ldr	r3, [pc, #20]	@ (800a5b8 <RCCEx_PLL3_Config+0x12c>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d0f0      	beq.n	800a590 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800a5ae:	2300      	movs	r3, #0
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3710      	adds	r7, #16
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}
 800a5b8:	44020c00 	.word	0x44020c00

0800a5bc <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b084      	sub	sp, #16
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d101      	bne.n	800a5ce <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	e08c      	b.n	800a6e8 <HAL_RNG_Init+0x12c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	7a5b      	ldrb	r3, [r3, #9]
 800a5d2:	b2db      	uxtb	r3, r3
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d105      	bne.n	800a5e4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f7f6 fdf4 	bl	80011cc <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2202      	movs	r2, #2
 800a5e8:	725a      	strb	r2, [r3, #9]

  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	681a      	ldr	r2, [r3, #0]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f022 0204 	bic.w	r2, r2, #4
 800a5f8:	601a      	str	r2, [r3, #0]

#if defined(RNG_CR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->CR, RNG_CR_NIST_VALUE | RNG_CR_CONDRST | hrng->Init.ClockErrorDetection);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6859      	ldr	r1, [r3, #4]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	4b3b      	ldr	r3, [pc, #236]	@ (800a6f0 <HAL_RNG_Init+0x134>)
 800a604:	430b      	orrs	r3, r1
 800a606:	6013      	str	r3, [r2, #0]
  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
#endif /* RNG_CR_NIST_VALUE */
#if defined(RNG_HTCR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCR_NIST_VALUE);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f646 2291 	movw	r2, #27281	@ 0x6a91
 800a610:	611a      	str	r2, [r3, #16]
#endif /* RNG_HTCR_NIST_VALUE */
#if defined(RNG_NSCR_NIST_VALUE)
  WRITE_REG(hrng->Instance->NSCR, RNG_NSCR_NIST_VALUE);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	4a37      	ldr	r2, [pc, #220]	@ (800a6f4 <HAL_RNG_Init+0x138>)
 800a618:	60da      	str	r2, [r3, #12]
#endif /* RNG_NSCR_NIST_VALUE */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	681a      	ldr	r2, [r3, #0]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800a628:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a62a:	f7f7 fdbb 	bl	80021a4 <HAL_GetTick>
 800a62e:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a630:	e016      	b.n	800a660 <HAL_RNG_Init+0xa4>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800a632:	f7f7 fdb7 	bl	80021a4 <HAL_GetTick>
 800a636:	4602      	mov	r2, r0
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	1ad3      	subs	r3, r2, r3
 800a63c:	2b04      	cmp	r3, #4
 800a63e:	d90f      	bls.n	800a660 <HAL_RNG_Init+0xa4>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a64a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a64e:	d107      	bne.n	800a660 <HAL_RNG_Init+0xa4>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2201      	movs	r2, #1
 800a654:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2202      	movs	r2, #2
 800a65a:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800a65c:	2301      	movs	r3, #1
 800a65e:	e043      	b.n	800a6e8 <HAL_RNG_Init+0x12c>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a66a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a66e:	d0e0      	beq.n	800a632 <HAL_RNG_Init+0x76>
      }
    }
  }

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	681a      	ldr	r2, [r3, #0]
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f042 0204 	orr.w	r2, r2, #4
 800a67e:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a68a:	2b40      	cmp	r3, #64	@ 0x40
 800a68c:	d104      	bne.n	800a698 <HAL_RNG_Init+0xdc>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2204      	movs	r2, #4
 800a692:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800a694:	2301      	movs	r3, #1
 800a696:	e027      	b.n	800a6e8 <HAL_RNG_Init+0x12c>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800a698:	f7f7 fd84 	bl	80021a4 <HAL_GetTick>
 800a69c:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800a69e:	e015      	b.n	800a6cc <HAL_RNG_Init+0x110>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800a6a0:	f7f7 fd80 	bl	80021a4 <HAL_GetTick>
 800a6a4:	4602      	mov	r2, r0
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	1ad3      	subs	r3, r2, r3
 800a6aa:	2b04      	cmp	r3, #4
 800a6ac:	d90e      	bls.n	800a6cc <HAL_RNG_Init+0x110>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	685b      	ldr	r3, [r3, #4]
 800a6b4:	f003 0301 	and.w	r3, r3, #1
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	d007      	beq.n	800a6cc <HAL_RNG_Init+0x110>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2204      	movs	r2, #4
 800a6c0:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2202      	movs	r2, #2
 800a6c6:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	e00d      	b.n	800a6e8 <HAL_RNG_Init+0x12c>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	f003 0301 	and.w	r3, r3, #1
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	d1e2      	bne.n	800a6a0 <HAL_RNG_Init+0xe4>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2201      	movs	r2, #1
 800a6de:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800a6e6:	2300      	movs	r3, #0
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3710      	adds	r7, #16
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}
 800a6f0:	40f00e00 	.word	0x40f00e00
 800a6f4:	0003af66 	.word	0x0003af66

0800a6f8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b084      	sub	sp, #16
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a700:	2301      	movs	r3, #1
 800a702:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d071      	beq.n	800a7ee <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a710:	b2db      	uxtb	r3, r3
 800a712:	2b00      	cmp	r3, #0
 800a714:	d106      	bne.n	800a724 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2200      	movs	r2, #0
 800a71a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f7f6 fdac 	bl	800127c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2202      	movs	r2, #2
 800a728:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a72c:	4b32      	ldr	r3, [pc, #200]	@ (800a7f8 <HAL_RTC_Init+0x100>)
 800a72e:	68db      	ldr	r3, [r3, #12]
 800a730:	f003 0310 	and.w	r3, r3, #16
 800a734:	2b10      	cmp	r3, #16
 800a736:	d051      	beq.n	800a7dc <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a738:	4b2f      	ldr	r3, [pc, #188]	@ (800a7f8 <HAL_RTC_Init+0x100>)
 800a73a:	22ca      	movs	r2, #202	@ 0xca
 800a73c:	625a      	str	r2, [r3, #36]	@ 0x24
 800a73e:	4b2e      	ldr	r3, [pc, #184]	@ (800a7f8 <HAL_RTC_Init+0x100>)
 800a740:	2253      	movs	r2, #83	@ 0x53
 800a742:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f000 f9a3 	bl	800aa90 <RTC_EnterInitMode>
 800a74a:	4603      	mov	r3, r0
 800a74c:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800a74e:	7bfb      	ldrb	r3, [r7, #15]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d13f      	bne.n	800a7d4 <HAL_RTC_Init+0xdc>
      {
#if defined(RTC_CR_OSEL)
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800a754:	4b28      	ldr	r3, [pc, #160]	@ (800a7f8 <HAL_RTC_Init+0x100>)
 800a756:	699b      	ldr	r3, [r3, #24]
 800a758:	4a27      	ldr	r2, [pc, #156]	@ (800a7f8 <HAL_RTC_Init+0x100>)
 800a75a:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800a75e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a762:	6193      	str	r3, [r2, #24]

        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800a764:	4b24      	ldr	r3, [pc, #144]	@ (800a7f8 <HAL_RTC_Init+0x100>)
 800a766:	699a      	ldr	r2, [r3, #24]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6859      	ldr	r1, [r3, #4]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	691b      	ldr	r3, [r3, #16]
 800a770:	4319      	orrs	r1, r3
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	699b      	ldr	r3, [r3, #24]
 800a776:	430b      	orrs	r3, r1
 800a778:	491f      	ldr	r1, [pc, #124]	@ (800a7f8 <HAL_RTC_Init+0x100>)
 800a77a:	4313      	orrs	r3, r2
 800a77c:	618b      	str	r3, [r1, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, hrtc->Init.HourFormat);
#endif /* RTC_CR_OSEL */

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	68da      	ldr	r2, [r3, #12]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	689b      	ldr	r3, [r3, #8]
 800a786:	041b      	lsls	r3, r3, #16
 800a788:	491b      	ldr	r1, [pc, #108]	@ (800a7f8 <HAL_RTC_Init+0x100>)
 800a78a:	4313      	orrs	r3, r2
 800a78c:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800a78e:	4b1a      	ldr	r3, [pc, #104]	@ (800a7f8 <HAL_RTC_Init+0x100>)
 800a790:	68db      	ldr	r3, [r3, #12]
 800a792:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a79e:	430b      	orrs	r3, r1
 800a7a0:	4915      	ldr	r1, [pc, #84]	@ (800a7f8 <HAL_RTC_Init+0x100>)
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f000 f9ae 	bl	800ab08 <RTC_ExitInitMode>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	73fb      	strb	r3, [r7, #15]

#if defined(RTC_CR_OSEL)
        if (status == HAL_OK)
 800a7b0:	7bfb      	ldrb	r3, [r7, #15]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d10e      	bne.n	800a7d4 <HAL_RTC_Init+0xdc>
        {
#if defined(RTC_CR_OUT2EN)
          MODIFY_REG(RTC->CR, \
 800a7b6:	4b10      	ldr	r3, [pc, #64]	@ (800a7f8 <HAL_RTC_Init+0x100>)
 800a7b8:	699b      	ldr	r3, [r3, #24]
 800a7ba:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6a19      	ldr	r1, [r3, #32]
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	69db      	ldr	r3, [r3, #28]
 800a7c6:	4319      	orrs	r1, r3
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	695b      	ldr	r3, [r3, #20]
 800a7cc:	430b      	orrs	r3, r1
 800a7ce:	490a      	ldr	r1, [pc, #40]	@ (800a7f8 <HAL_RTC_Init+0x100>)
 800a7d0:	4313      	orrs	r3, r2
 800a7d2:	618b      	str	r3, [r1, #24]
        }
#endif /* RTC_CR_OSEL */
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a7d4:	4b08      	ldr	r3, [pc, #32]	@ (800a7f8 <HAL_RTC_Init+0x100>)
 800a7d6:	22ff      	movs	r2, #255	@ 0xff
 800a7d8:	625a      	str	r2, [r3, #36]	@ 0x24
 800a7da:	e001      	b.n	800a7e0 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800a7e0:	7bfb      	ldrb	r3, [r7, #15]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d103      	bne.n	800a7ee <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800a7ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3710      	adds	r7, #16
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}
 800a7f8:	44007800 	.word	0x44007800

0800a7fc <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a7fc:	b590      	push	{r4, r7, lr}
 800a7fe:	b087      	sub	sp, #28
 800a800:	af00      	add	r7, sp, #0
 800a802:	60f8      	str	r0, [r7, #12]
 800a804:	60b9      	str	r1, [r7, #8]
 800a806:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a80e:	2b01      	cmp	r3, #1
 800a810:	d101      	bne.n	800a816 <HAL_RTC_SetTime+0x1a>
 800a812:	2302      	movs	r3, #2
 800a814:	e07e      	b.n	800a914 <HAL_RTC_SetTime+0x118>
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2201      	movs	r2, #1
 800a81a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2202      	movs	r2, #2
 800a822:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a826:	4b3d      	ldr	r3, [pc, #244]	@ (800a91c <HAL_RTC_SetTime+0x120>)
 800a828:	22ca      	movs	r2, #202	@ 0xca
 800a82a:	625a      	str	r2, [r3, #36]	@ 0x24
 800a82c:	4b3b      	ldr	r3, [pc, #236]	@ (800a91c <HAL_RTC_SetTime+0x120>)
 800a82e:	2253      	movs	r2, #83	@ 0x53
 800a830:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a832:	68f8      	ldr	r0, [r7, #12]
 800a834:	f000 f92c 	bl	800aa90 <RTC_EnterInitMode>
 800a838:	4603      	mov	r3, r0
 800a83a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a83c:	7cfb      	ldrb	r3, [r7, #19]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d159      	bne.n	800a8f6 <HAL_RTC_SetTime+0xfa>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800a842:	4b36      	ldr	r3, [pc, #216]	@ (800a91c <HAL_RTC_SetTime+0x120>)
 800a844:	68db      	ldr	r3, [r3, #12]
 800a846:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a84a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a84e:	d04d      	beq.n	800a8ec <HAL_RTC_SetTime+0xf0>
    {
      if (Format == RTC_FORMAT_BIN)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d125      	bne.n	800a8a2 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800a856:	4b31      	ldr	r3, [pc, #196]	@ (800a91c <HAL_RTC_SetTime+0x120>)
 800a858:	699b      	ldr	r3, [r3, #24]
 800a85a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d102      	bne.n	800a868 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	2200      	movs	r2, #0
 800a866:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	781b      	ldrb	r3, [r3, #0]
 800a86c:	4618      	mov	r0, r3
 800a86e:	f000 f989 	bl	800ab84 <RTC_ByteToBcd2>
 800a872:	4603      	mov	r3, r0
 800a874:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	785b      	ldrb	r3, [r3, #1]
 800a87a:	4618      	mov	r0, r3
 800a87c:	f000 f982 	bl	800ab84 <RTC_ByteToBcd2>
 800a880:	4603      	mov	r3, r0
 800a882:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a884:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	789b      	ldrb	r3, [r3, #2]
 800a88a:	4618      	mov	r0, r3
 800a88c:	f000 f97a 	bl	800ab84 <RTC_ByteToBcd2>
 800a890:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a892:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	78db      	ldrb	r3, [r3, #3]
 800a89a:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a89c:	4313      	orrs	r3, r2
 800a89e:	617b      	str	r3, [r7, #20]
 800a8a0:	e017      	b.n	800a8d2 <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800a8a2:	4b1e      	ldr	r3, [pc, #120]	@ (800a91c <HAL_RTC_SetTime+0x120>)
 800a8a4:	699b      	ldr	r3, [r3, #24]
 800a8a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d102      	bne.n	800a8b4 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	781b      	ldrb	r3, [r3, #0]
 800a8b8:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	785b      	ldrb	r3, [r3, #1]
 800a8be:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a8c0:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800a8c2:	68ba      	ldr	r2, [r7, #8]
 800a8c4:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a8c6:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	78db      	ldrb	r3, [r3, #3]
 800a8cc:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800a8d2:	4a12      	ldr	r2, [pc, #72]	@ (800a91c <HAL_RTC_SetTime+0x120>)
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800a8da:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800a8de:	6013      	str	r3, [r2, #0]

      /* Clear the bits to be configured */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800a8e0:	4b0e      	ldr	r3, [pc, #56]	@ (800a91c <HAL_RTC_SetTime+0x120>)
 800a8e2:	699b      	ldr	r3, [r3, #24]
 800a8e4:	4a0d      	ldr	r2, [pc, #52]	@ (800a91c <HAL_RTC_SetTime+0x120>)
 800a8e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a8ea:	6193      	str	r3, [r2, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a8ec:	68f8      	ldr	r0, [r7, #12]
 800a8ee:	f000 f90b 	bl	800ab08 <RTC_ExitInitMode>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a8f6:	4b09      	ldr	r3, [pc, #36]	@ (800a91c <HAL_RTC_SetTime+0x120>)
 800a8f8:	22ff      	movs	r2, #255	@ 0xff
 800a8fa:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800a8fc:	7cfb      	ldrb	r3, [r7, #19]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d103      	bne.n	800a90a <HAL_RTC_SetTime+0x10e>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	2201      	movs	r2, #1
 800a906:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	2200      	movs	r2, #0
 800a90e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800a912:	7cfb      	ldrb	r3, [r7, #19]
}
 800a914:	4618      	mov	r0, r3
 800a916:	371c      	adds	r7, #28
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd90      	pop	{r4, r7, pc}
 800a91c:	44007800 	.word	0x44007800

0800a920 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a920:	b590      	push	{r4, r7, lr}
 800a922:	b087      	sub	sp, #28
 800a924:	af00      	add	r7, sp, #0
 800a926:	60f8      	str	r0, [r7, #12]
 800a928:	60b9      	str	r1, [r7, #8]
 800a92a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a932:	2b01      	cmp	r3, #1
 800a934:	d101      	bne.n	800a93a <HAL_RTC_SetDate+0x1a>
 800a936:	2302      	movs	r3, #2
 800a938:	e071      	b.n	800aa1e <HAL_RTC_SetDate+0xfe>
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	2201      	movs	r2, #1
 800a93e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	2202      	movs	r2, #2
 800a946:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d10e      	bne.n	800a96e <HAL_RTC_SetDate+0x4e>
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	785b      	ldrb	r3, [r3, #1]
 800a954:	f003 0310 	and.w	r3, r3, #16
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d008      	beq.n	800a96e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	785b      	ldrb	r3, [r3, #1]
 800a960:	f023 0310 	bic.w	r3, r3, #16
 800a964:	b2db      	uxtb	r3, r3
 800a966:	330a      	adds	r3, #10
 800a968:	b2da      	uxtb	r2, r3
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d11c      	bne.n	800a9ae <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	78db      	ldrb	r3, [r3, #3]
 800a978:	4618      	mov	r0, r3
 800a97a:	f000 f903 	bl	800ab84 <RTC_ByteToBcd2>
 800a97e:	4603      	mov	r3, r0
 800a980:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	785b      	ldrb	r3, [r3, #1]
 800a986:	4618      	mov	r0, r3
 800a988:	f000 f8fc 	bl	800ab84 <RTC_ByteToBcd2>
 800a98c:	4603      	mov	r3, r0
 800a98e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a990:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	789b      	ldrb	r3, [r3, #2]
 800a996:	4618      	mov	r0, r3
 800a998:	f000 f8f4 	bl	800ab84 <RTC_ByteToBcd2>
 800a99c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a99e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	781b      	ldrb	r3, [r3, #0]
 800a9a6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a9a8:	4313      	orrs	r3, r2
 800a9aa:	617b      	str	r3, [r7, #20]
 800a9ac:	e00e      	b.n	800a9cc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	78db      	ldrb	r3, [r3, #3]
 800a9b2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	785b      	ldrb	r3, [r3, #1]
 800a9b8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a9ba:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800a9bc:	68ba      	ldr	r2, [r7, #8]
 800a9be:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800a9c0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	781b      	ldrb	r3, [r3, #0]
 800a9c6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a9c8:	4313      	orrs	r3, r2
 800a9ca:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a9cc:	4b16      	ldr	r3, [pc, #88]	@ (800aa28 <HAL_RTC_SetDate+0x108>)
 800a9ce:	22ca      	movs	r2, #202	@ 0xca
 800a9d0:	625a      	str	r2, [r3, #36]	@ 0x24
 800a9d2:	4b15      	ldr	r3, [pc, #84]	@ (800aa28 <HAL_RTC_SetDate+0x108>)
 800a9d4:	2253      	movs	r2, #83	@ 0x53
 800a9d6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a9d8:	68f8      	ldr	r0, [r7, #12]
 800a9da:	f000 f859 	bl	800aa90 <RTC_EnterInitMode>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a9e2:	7cfb      	ldrb	r3, [r7, #19]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d10b      	bne.n	800aa00 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800a9e8:	4a0f      	ldr	r2, [pc, #60]	@ (800aa28 <HAL_RTC_SetDate+0x108>)
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a9f0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a9f4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a9f6:	68f8      	ldr	r0, [r7, #12]
 800a9f8:	f000 f886 	bl	800ab08 <RTC_ExitInitMode>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aa00:	4b09      	ldr	r3, [pc, #36]	@ (800aa28 <HAL_RTC_SetDate+0x108>)
 800aa02:	22ff      	movs	r2, #255	@ 0xff
 800aa04:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800aa06:	7cfb      	ldrb	r3, [r7, #19]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d103      	bne.n	800aa14 <HAL_RTC_SetDate+0xf4>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	2201      	movs	r2, #1
 800aa10:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2200      	movs	r2, #0
 800aa18:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800aa1c:	7cfb      	ldrb	r3, [r7, #19]
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	371c      	adds	r7, #28
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd90      	pop	{r4, r7, pc}
 800aa26:	bf00      	nop
 800aa28:	44007800 	.word	0x44007800

0800aa2c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b084      	sub	sp, #16
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800aa34:	4b15      	ldr	r3, [pc, #84]	@ (800aa8c <HAL_RTC_WaitForSynchro+0x60>)
 800aa36:	68db      	ldr	r3, [r3, #12]
 800aa38:	4a14      	ldr	r2, [pc, #80]	@ (800aa8c <HAL_RTC_WaitForSynchro+0x60>)
 800aa3a:	f023 0320 	bic.w	r3, r3, #32
 800aa3e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800aa40:	f7f7 fbb0 	bl	80021a4 <HAL_GetTick>
 800aa44:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800aa46:	e013      	b.n	800aa70 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800aa48:	f7f7 fbac 	bl	80021a4 <HAL_GetTick>
 800aa4c:	4602      	mov	r2, r0
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	1ad3      	subs	r3, r2, r3
 800aa52:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800aa56:	d90b      	bls.n	800aa70 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800aa58:	4b0c      	ldr	r3, [pc, #48]	@ (800aa8c <HAL_RTC_WaitForSynchro+0x60>)
 800aa5a:	68db      	ldr	r3, [r3, #12]
 800aa5c:	f003 0320 	and.w	r3, r3, #32
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d10c      	bne.n	800aa7e <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2203      	movs	r2, #3
 800aa68:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800aa6c:	2303      	movs	r3, #3
 800aa6e:	e008      	b.n	800aa82 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800aa70:	4b06      	ldr	r3, [pc, #24]	@ (800aa8c <HAL_RTC_WaitForSynchro+0x60>)
 800aa72:	68db      	ldr	r3, [r3, #12]
 800aa74:	f003 0320 	and.w	r3, r3, #32
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d0e5      	beq.n	800aa48 <HAL_RTC_WaitForSynchro+0x1c>
 800aa7c:	e000      	b.n	800aa80 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800aa7e:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800aa80:	2300      	movs	r3, #0
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3710      	adds	r7, #16
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}
 800aa8a:	bf00      	nop
 800aa8c:	44007800 	.word	0x44007800

0800aa90 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b084      	sub	sp, #16
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800aa9c:	4b19      	ldr	r3, [pc, #100]	@ (800ab04 <RTC_EnterInitMode+0x74>)
 800aa9e:	68db      	ldr	r3, [r3, #12]
 800aaa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d128      	bne.n	800aafa <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800aaa8:	4b16      	ldr	r3, [pc, #88]	@ (800ab04 <RTC_EnterInitMode+0x74>)
 800aaaa:	68db      	ldr	r3, [r3, #12]
 800aaac:	4a15      	ldr	r2, [pc, #84]	@ (800ab04 <RTC_EnterInitMode+0x74>)
 800aaae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aab2:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800aab4:	f7f7 fb76 	bl	80021a4 <HAL_GetTick>
 800aab8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800aaba:	e013      	b.n	800aae4 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800aabc:	f7f7 fb72 	bl	80021a4 <HAL_GetTick>
 800aac0:	4602      	mov	r2, r0
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	1ad3      	subs	r3, r2, r3
 800aac6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800aaca:	d90b      	bls.n	800aae4 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800aacc:	4b0d      	ldr	r3, [pc, #52]	@ (800ab04 <RTC_EnterInitMode+0x74>)
 800aace:	68db      	ldr	r3, [r3, #12]
 800aad0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d10f      	bne.n	800aaf8 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800aad8:	2303      	movs	r3, #3
 800aada:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2203      	movs	r2, #3
 800aae0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800aae4:	4b07      	ldr	r3, [pc, #28]	@ (800ab04 <RTC_EnterInitMode+0x74>)
 800aae6:	68db      	ldr	r3, [r3, #12]
 800aae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d104      	bne.n	800aafa <RTC_EnterInitMode+0x6a>
 800aaf0:	7bfb      	ldrb	r3, [r7, #15]
 800aaf2:	2b03      	cmp	r3, #3
 800aaf4:	d1e2      	bne.n	800aabc <RTC_EnterInitMode+0x2c>
 800aaf6:	e000      	b.n	800aafa <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800aaf8:	bf00      	nop
        }
      }
    }
  }

  return status;
 800aafa:	7bfb      	ldrb	r3, [r7, #15]
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3710      	adds	r7, #16
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}
 800ab04:	44007800 	.word	0x44007800

0800ab08 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b084      	sub	sp, #16
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ab10:	2300      	movs	r3, #0
 800ab12:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800ab14:	4b1a      	ldr	r3, [pc, #104]	@ (800ab80 <RTC_ExitInitMode+0x78>)
 800ab16:	68db      	ldr	r3, [r3, #12]
 800ab18:	4a19      	ldr	r2, [pc, #100]	@ (800ab80 <RTC_ExitInitMode+0x78>)
 800ab1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ab1e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800ab20:	4b17      	ldr	r3, [pc, #92]	@ (800ab80 <RTC_ExitInitMode+0x78>)
 800ab22:	699b      	ldr	r3, [r3, #24]
 800ab24:	f003 0320 	and.w	r3, r3, #32
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d10c      	bne.n	800ab46 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f7ff ff7d 	bl	800aa2c <HAL_RTC_WaitForSynchro>
 800ab32:	4603      	mov	r3, r0
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d01e      	beq.n	800ab76 <RTC_ExitInitMode+0x6e>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2203      	movs	r2, #3
 800ab3c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800ab40:	2303      	movs	r3, #3
 800ab42:	73fb      	strb	r3, [r7, #15]
 800ab44:	e017      	b.n	800ab76 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ab46:	4b0e      	ldr	r3, [pc, #56]	@ (800ab80 <RTC_ExitInitMode+0x78>)
 800ab48:	699b      	ldr	r3, [r3, #24]
 800ab4a:	4a0d      	ldr	r2, [pc, #52]	@ (800ab80 <RTC_ExitInitMode+0x78>)
 800ab4c:	f023 0320 	bic.w	r3, r3, #32
 800ab50:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f7ff ff6a 	bl	800aa2c <HAL_RTC_WaitForSynchro>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d005      	beq.n	800ab6a <RTC_ExitInitMode+0x62>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2203      	movs	r2, #3
 800ab62:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800ab66:	2303      	movs	r3, #3
 800ab68:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ab6a:	4b05      	ldr	r3, [pc, #20]	@ (800ab80 <RTC_ExitInitMode+0x78>)
 800ab6c:	699b      	ldr	r3, [r3, #24]
 800ab6e:	4a04      	ldr	r2, [pc, #16]	@ (800ab80 <RTC_ExitInitMode+0x78>)
 800ab70:	f043 0320 	orr.w	r3, r3, #32
 800ab74:	6193      	str	r3, [r2, #24]
  }
  return status;
 800ab76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3710      	adds	r7, #16
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}
 800ab80:	44007800 	.word	0x44007800

0800ab84 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b085      	sub	sp, #20
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcd_high = 0U;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_value = Value;
 800ab92:	79fb      	ldrb	r3, [r7, #7]
 800ab94:	72fb      	strb	r3, [r7, #11]

  while (tmp_value >= 10U)
 800ab96:	e005      	b.n	800aba4 <RTC_ByteToBcd2+0x20>
  {
    bcd_high++;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	3301      	adds	r3, #1
 800ab9c:	60fb      	str	r3, [r7, #12]
    tmp_value -= 10U;
 800ab9e:	7afb      	ldrb	r3, [r7, #11]
 800aba0:	3b0a      	subs	r3, #10
 800aba2:	72fb      	strb	r3, [r7, #11]
  while (tmp_value >= 10U)
 800aba4:	7afb      	ldrb	r3, [r7, #11]
 800aba6:	2b09      	cmp	r3, #9
 800aba8:	d8f6      	bhi.n	800ab98 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcd_high << 4U) | tmp_value);
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	b2db      	uxtb	r3, r3
 800abae:	011b      	lsls	r3, r3, #4
 800abb0:	b2da      	uxtb	r2, r3
 800abb2:	7afb      	ldrb	r3, [r7, #11]
 800abb4:	4313      	orrs	r3, r2
 800abb6:	b2db      	uxtb	r3, r3
}
 800abb8:	4618      	mov	r0, r3
 800abba:	3714      	adds	r7, #20
 800abbc:	46bd      	mov	sp, r7
 800abbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc2:	4770      	bx	lr

0800abc4 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(const RTC_HandleTypeDef *hrtc,
                                             const RTC_PrivilegeStateTypeDef *privilegeState)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b083      	sub	sp, #12
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	681a      	ldr	r2, [r3, #0]
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	685b      	ldr	r3, [r3, #4]
 800abd6:	4910      	ldr	r1, [pc, #64]	@ (800ac18 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800abd8:	4313      	orrs	r3, r2
 800abda:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	689a      	ldr	r2, [r3, #8]
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	68db      	ldr	r3, [r3, #12]
 800abe4:	431a      	orrs	r2, r3
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	699b      	ldr	r3, [r3, #24]
 800abea:	490c      	ldr	r1, [pc, #48]	@ (800ac1c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800abec:	4313      	orrs	r3, r2
 800abee:	624b      	str	r3, [r1, #36]	@ 0x24
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
#if defined(TAMP_SECCFGR_BKPWSEC)
  MODIFY_REG(TAMP->SECCFGR,
 800abf0:	4b0a      	ldr	r3, [pc, #40]	@ (800ac1c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800abf2:	6a1b      	ldr	r3, [r3, #32]
 800abf4:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	6919      	ldr	r1, [r3, #16]
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	695b      	ldr	r3, [r3, #20]
 800ac00:	041b      	lsls	r3, r3, #16
 800ac02:	430b      	orrs	r3, r1
 800ac04:	4905      	ldr	r1, [pc, #20]	@ (800ac1c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800ac06:	4313      	orrs	r3, r2
 800ac08:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));
#endif /* TAMP_SECCFGR_BKPWSEC */

  return HAL_OK;
 800ac0a:	2300      	movs	r3, #0
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	370c      	adds	r7, #12
 800ac10:	46bd      	mov	sp, r7
 800ac12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac16:	4770      	bx	lr
 800ac18:	44007800 	.word	0x44007800
 800ac1c:	44007c00 	.word	0x44007c00

0800ac20 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b084      	sub	sp, #16
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d101      	bne.n	800ac32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ac2e:	2301      	movs	r3, #1
 800ac30:	e162      	b.n	800aef8 <HAL_SPI_Init+0x2d8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	4a70      	ldr	r2, [pc, #448]	@ (800adf8 <HAL_SPI_Init+0x1d8>)
 800ac38:	4293      	cmp	r3, r2
 800ac3a:	d018      	beq.n	800ac6e <HAL_SPI_Init+0x4e>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	4a6e      	ldr	r2, [pc, #440]	@ (800adfc <HAL_SPI_Init+0x1dc>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d013      	beq.n	800ac6e <HAL_SPI_Init+0x4e>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4a6d      	ldr	r2, [pc, #436]	@ (800ae00 <HAL_SPI_Init+0x1e0>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d00e      	beq.n	800ac6e <HAL_SPI_Init+0x4e>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	4a6b      	ldr	r2, [pc, #428]	@ (800ae04 <HAL_SPI_Init+0x1e4>)
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d009      	beq.n	800ac6e <HAL_SPI_Init+0x4e>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	4a6a      	ldr	r2, [pc, #424]	@ (800ae08 <HAL_SPI_Init+0x1e8>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d004      	beq.n	800ac6e <HAL_SPI_Init+0x4e>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4a68      	ldr	r2, [pc, #416]	@ (800ae0c <HAL_SPI_Init+0x1ec>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	e000      	b.n	800ac70 <HAL_SPI_Init+0x50>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800ac6e:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2200      	movs	r2, #0
 800ac74:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	4a5f      	ldr	r2, [pc, #380]	@ (800adf8 <HAL_SPI_Init+0x1d8>)
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	d018      	beq.n	800acb2 <HAL_SPI_Init+0x92>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	4a5d      	ldr	r2, [pc, #372]	@ (800adfc <HAL_SPI_Init+0x1dc>)
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d013      	beq.n	800acb2 <HAL_SPI_Init+0x92>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	4a5c      	ldr	r2, [pc, #368]	@ (800ae00 <HAL_SPI_Init+0x1e0>)
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d00e      	beq.n	800acb2 <HAL_SPI_Init+0x92>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	4a5a      	ldr	r2, [pc, #360]	@ (800ae04 <HAL_SPI_Init+0x1e4>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d009      	beq.n	800acb2 <HAL_SPI_Init+0x92>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	4a59      	ldr	r2, [pc, #356]	@ (800ae08 <HAL_SPI_Init+0x1e8>)
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d004      	beq.n	800acb2 <HAL_SPI_Init+0x92>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	4a57      	ldr	r2, [pc, #348]	@ (800ae0c <HAL_SPI_Init+0x1ec>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d105      	bne.n	800acbe <HAL_SPI_Init+0x9e>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	68db      	ldr	r3, [r3, #12]
 800acb6:	2b0f      	cmp	r3, #15
 800acb8:	d901      	bls.n	800acbe <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 800acba:	2301      	movs	r3, #1
 800acbc:	e11c      	b.n	800aef8 <HAL_SPI_Init+0x2d8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f000 f91e 	bl	800af00 <SPI_GetPacketSize>
 800acc4:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	4a4b      	ldr	r2, [pc, #300]	@ (800adf8 <HAL_SPI_Init+0x1d8>)
 800accc:	4293      	cmp	r3, r2
 800acce:	d018      	beq.n	800ad02 <HAL_SPI_Init+0xe2>
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	4a49      	ldr	r2, [pc, #292]	@ (800adfc <HAL_SPI_Init+0x1dc>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d013      	beq.n	800ad02 <HAL_SPI_Init+0xe2>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	4a48      	ldr	r2, [pc, #288]	@ (800ae00 <HAL_SPI_Init+0x1e0>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d00e      	beq.n	800ad02 <HAL_SPI_Init+0xe2>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	4a46      	ldr	r2, [pc, #280]	@ (800ae04 <HAL_SPI_Init+0x1e4>)
 800acea:	4293      	cmp	r3, r2
 800acec:	d009      	beq.n	800ad02 <HAL_SPI_Init+0xe2>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	4a45      	ldr	r2, [pc, #276]	@ (800ae08 <HAL_SPI_Init+0x1e8>)
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d004      	beq.n	800ad02 <HAL_SPI_Init+0xe2>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	4a43      	ldr	r2, [pc, #268]	@ (800ae0c <HAL_SPI_Init+0x1ec>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d102      	bne.n	800ad08 <HAL_SPI_Init+0xe8>
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	2b08      	cmp	r3, #8
 800ad06:	d820      	bhi.n	800ad4a <HAL_SPI_Init+0x12a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ad0c:	4a40      	ldr	r2, [pc, #256]	@ (800ae10 <HAL_SPI_Init+0x1f0>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d018      	beq.n	800ad44 <HAL_SPI_Init+0x124>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	4a3f      	ldr	r2, [pc, #252]	@ (800ae14 <HAL_SPI_Init+0x1f4>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d013      	beq.n	800ad44 <HAL_SPI_Init+0x124>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4a3d      	ldr	r2, [pc, #244]	@ (800ae18 <HAL_SPI_Init+0x1f8>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d00e      	beq.n	800ad44 <HAL_SPI_Init+0x124>
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	4a3c      	ldr	r2, [pc, #240]	@ (800ae1c <HAL_SPI_Init+0x1fc>)
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d009      	beq.n	800ad44 <HAL_SPI_Init+0x124>
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	4a3a      	ldr	r2, [pc, #232]	@ (800ae20 <HAL_SPI_Init+0x200>)
 800ad36:	4293      	cmp	r3, r2
 800ad38:	d004      	beq.n	800ad44 <HAL_SPI_Init+0x124>
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	4a39      	ldr	r2, [pc, #228]	@ (800ae24 <HAL_SPI_Init+0x204>)
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d104      	bne.n	800ad4e <HAL_SPI_Init+0x12e>
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2b10      	cmp	r3, #16
 800ad48:	d901      	bls.n	800ad4e <HAL_SPI_Init+0x12e>
  {
    return HAL_ERROR;
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	e0d4      	b.n	800aef8 <HAL_SPI_Init+0x2d8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800ad54:	b2db      	uxtb	r3, r3
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d106      	bne.n	800ad68 <HAL_SPI_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f7f6 faea 	bl	800133c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2202      	movs	r2, #2
 800ad6c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	681a      	ldr	r2, [r3, #0]
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f022 0201 	bic.w	r2, r2, #1
 800ad7e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	689b      	ldr	r3, [r3, #8]
 800ad86:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800ad8a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	699b      	ldr	r3, [r3, #24]
 800ad90:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ad94:	d119      	bne.n	800adca <HAL_SPI_Init+0x1aa>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	685b      	ldr	r3, [r3, #4]
 800ad9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ad9e:	d103      	bne.n	800ada8 <HAL_SPI_Init+0x188>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d008      	beq.n	800adba <HAL_SPI_Init+0x19a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800adac:	2b00      	cmp	r3, #0
 800adae:	d10c      	bne.n	800adca <HAL_SPI_Init+0x1aa>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800adb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800adb8:	d107      	bne.n	800adca <HAL_SPI_Init+0x1aa>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	681a      	ldr	r2, [r3, #0]
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800adc8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	685b      	ldr	r3, [r3, #4]
 800adce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800add2:	2b00      	cmp	r3, #0
 800add4:	d028      	beq.n	800ae28 <HAL_SPI_Init+0x208>
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	68db      	ldr	r3, [r3, #12]
 800adda:	2b06      	cmp	r3, #6
 800addc:	d924      	bls.n	800ae28 <HAL_SPI_Init+0x208>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	430a      	orrs	r2, r1
 800adf2:	601a      	str	r2, [r3, #0]
 800adf4:	e020      	b.n	800ae38 <HAL_SPI_Init+0x218>
 800adf6:	bf00      	nop
 800adf8:	40014c00 	.word	0x40014c00
 800adfc:	50014c00 	.word	0x50014c00
 800ae00:	44002000 	.word	0x44002000
 800ae04:	54002000 	.word	0x54002000
 800ae08:	40015000 	.word	0x40015000
 800ae0c:	50015000 	.word	0x50015000
 800ae10:	40013000 	.word	0x40013000
 800ae14:	50013000 	.word	0x50013000
 800ae18:	40003800 	.word	0x40003800
 800ae1c:	50003800 	.word	0x50003800
 800ae20:	40003c00 	.word	0x40003c00
 800ae24:	50003c00 	.word	0x50003c00
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	681a      	ldr	r2, [r3, #0]
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ae36:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	69da      	ldr	r2, [r3, #28]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae40:	431a      	orrs	r2, r3
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	431a      	orrs	r2, r3
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae4a:	ea42 0103 	orr.w	r1, r2, r3
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	68da      	ldr	r2, [r3, #12]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	430a      	orrs	r2, r1
 800ae58:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae62:	431a      	orrs	r2, r3
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae68:	431a      	orrs	r2, r3
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	699b      	ldr	r3, [r3, #24]
 800ae6e:	431a      	orrs	r2, r3
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	691b      	ldr	r3, [r3, #16]
 800ae74:	431a      	orrs	r2, r3
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	695b      	ldr	r3, [r3, #20]
 800ae7a:	431a      	orrs	r2, r3
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6a1b      	ldr	r3, [r3, #32]
 800ae80:	431a      	orrs	r2, r3
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	685b      	ldr	r3, [r3, #4]
 800ae86:	431a      	orrs	r2, r3
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae8c:	431a      	orrs	r2, r3
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	689b      	ldr	r3, [r3, #8]
 800ae92:	431a      	orrs	r2, r3
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ae98:	431a      	orrs	r2, r3
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae9e:	431a      	orrs	r2, r3
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aea4:	ea42 0103 	orr.w	r1, r2, r3
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	430a      	orrs	r2, r1
 800aeb2:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f022 0201 	bic.w	r2, r2, #1
 800aec2:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	685b      	ldr	r3, [r3, #4]
 800aec8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d00a      	beq.n	800aee6 <HAL_SPI_Init+0x2c6>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	68db      	ldr	r3, [r3, #12]
 800aed6:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	430a      	orrs	r2, r1
 800aee4:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2200      	movs	r2, #0
 800aeea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2201      	movs	r2, #1
 800aef2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800aef6:	2300      	movs	r3, #0
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3710      	adds	r7, #16
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800af00:	b480      	push	{r7}
 800af02:	b085      	sub	sp, #20
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af0c:	095b      	lsrs	r3, r3, #5
 800af0e:	3301      	adds	r3, #1
 800af10:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	68db      	ldr	r3, [r3, #12]
 800af16:	3301      	adds	r3, #1
 800af18:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	3307      	adds	r3, #7
 800af1e:	08db      	lsrs	r3, r3, #3
 800af20:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	68fa      	ldr	r2, [r7, #12]
 800af26:	fb02 f303 	mul.w	r3, r2, r3
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3714      	adds	r7, #20
 800af2e:	46bd      	mov	sp, r7
 800af30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af34:	4770      	bx	lr

0800af36 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800af36:	b580      	push	{r7, lr}
 800af38:	b082      	sub	sp, #8
 800af3a:	af00      	add	r7, sp, #0
 800af3c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d101      	bne.n	800af48 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800af44:	2301      	movs	r3, #1
 800af46:	e042      	b.n	800afce <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d106      	bne.n	800af60 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2200      	movs	r2, #0
 800af56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f7f6 faaa 	bl	80014b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2224      	movs	r2, #36	@ 0x24
 800af64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	681a      	ldr	r2, [r3, #0]
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f022 0201 	bic.w	r2, r2, #1
 800af76:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d002      	beq.n	800af86 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f000 fab5 	bl	800b4f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f000 f8c4 	bl	800b114 <UART_SetConfig>
 800af8c:	4603      	mov	r3, r0
 800af8e:	2b01      	cmp	r3, #1
 800af90:	d101      	bne.n	800af96 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800af92:	2301      	movs	r3, #1
 800af94:	e01b      	b.n	800afce <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	685a      	ldr	r2, [r3, #4]
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800afa4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	689a      	ldr	r2, [r3, #8]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800afb4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	681a      	ldr	r2, [r3, #0]
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f042 0201 	orr.w	r2, r2, #1
 800afc4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f000 fb34 	bl	800b634 <UART_CheckIdleState>
 800afcc:	4603      	mov	r3, r0
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3708      	adds	r7, #8
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}

0800afd6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800afd6:	b580      	push	{r7, lr}
 800afd8:	b08a      	sub	sp, #40	@ 0x28
 800afda:	af02      	add	r7, sp, #8
 800afdc:	60f8      	str	r0, [r7, #12]
 800afde:	60b9      	str	r1, [r7, #8]
 800afe0:	603b      	str	r3, [r7, #0]
 800afe2:	4613      	mov	r3, r2
 800afe4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800afec:	2b20      	cmp	r3, #32
 800afee:	f040 808b 	bne.w	800b108 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d002      	beq.n	800affe <HAL_UART_Transmit+0x28>
 800aff8:	88fb      	ldrh	r3, [r7, #6]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d101      	bne.n	800b002 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800affe:	2301      	movs	r3, #1
 800b000:	e083      	b.n	800b10a <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	689b      	ldr	r3, [r3, #8]
 800b008:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b00c:	2b80      	cmp	r3, #128	@ 0x80
 800b00e:	d107      	bne.n	800b020 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	689a      	ldr	r2, [r3, #8]
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b01e:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	2200      	movs	r2, #0
 800b024:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	2221      	movs	r2, #33	@ 0x21
 800b02c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b030:	f7f7 f8b8 	bl	80021a4 <HAL_GetTick>
 800b034:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	88fa      	ldrh	r2, [r7, #6]
 800b03a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	88fa      	ldrh	r2, [r7, #6]
 800b042:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	689b      	ldr	r3, [r3, #8]
 800b04a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b04e:	d108      	bne.n	800b062 <HAL_UART_Transmit+0x8c>
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	691b      	ldr	r3, [r3, #16]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d104      	bne.n	800b062 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800b058:	2300      	movs	r3, #0
 800b05a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	61bb      	str	r3, [r7, #24]
 800b060:	e003      	b.n	800b06a <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b066:	2300      	movs	r3, #0
 800b068:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b06a:	e030      	b.n	800b0ce <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	9300      	str	r3, [sp, #0]
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	2200      	movs	r2, #0
 800b074:	2180      	movs	r1, #128	@ 0x80
 800b076:	68f8      	ldr	r0, [r7, #12]
 800b078:	f000 fb86 	bl	800b788 <UART_WaitOnFlagUntilTimeout>
 800b07c:	4603      	mov	r3, r0
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d005      	beq.n	800b08e <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	2220      	movs	r2, #32
 800b086:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b08a:	2303      	movs	r3, #3
 800b08c:	e03d      	b.n	800b10a <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800b08e:	69fb      	ldr	r3, [r7, #28]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d10b      	bne.n	800b0ac <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b094:	69bb      	ldr	r3, [r7, #24]
 800b096:	881b      	ldrh	r3, [r3, #0]
 800b098:	461a      	mov	r2, r3
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b0a2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b0a4:	69bb      	ldr	r3, [r7, #24]
 800b0a6:	3302      	adds	r3, #2
 800b0a8:	61bb      	str	r3, [r7, #24]
 800b0aa:	e007      	b.n	800b0bc <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b0ac:	69fb      	ldr	r3, [r7, #28]
 800b0ae:	781a      	ldrb	r2, [r3, #0]
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b0b6:	69fb      	ldr	r3, [r7, #28]
 800b0b8:	3301      	adds	r3, #1
 800b0ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b0c2:	b29b      	uxth	r3, r3
 800b0c4:	3b01      	subs	r3, #1
 800b0c6:	b29a      	uxth	r2, r3
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b0d4:	b29b      	uxth	r3, r3
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d1c8      	bne.n	800b06c <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	9300      	str	r3, [sp, #0]
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	2140      	movs	r1, #64	@ 0x40
 800b0e4:	68f8      	ldr	r0, [r7, #12]
 800b0e6:	f000 fb4f 	bl	800b788 <UART_WaitOnFlagUntilTimeout>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d005      	beq.n	800b0fc <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	2220      	movs	r2, #32
 800b0f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b0f8:	2303      	movs	r3, #3
 800b0fa:	e006      	b.n	800b10a <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	2220      	movs	r2, #32
 800b100:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b104:	2300      	movs	r3, #0
 800b106:	e000      	b.n	800b10a <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800b108:	2302      	movs	r3, #2
  }
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3720      	adds	r7, #32
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}
	...

0800b114 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b114:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b118:	b094      	sub	sp, #80	@ 0x50
 800b11a:	af00      	add	r7, sp, #0
 800b11c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b11e:	2300      	movs	r3, #0
 800b120:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800b124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b126:	681a      	ldr	r2, [r3, #0]
 800b128:	4b78      	ldr	r3, [pc, #480]	@ (800b30c <UART_SetConfig+0x1f8>)
 800b12a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b12c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b12e:	689a      	ldr	r2, [r3, #8]
 800b130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b132:	691b      	ldr	r3, [r3, #16]
 800b134:	431a      	orrs	r2, r3
 800b136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b138:	695b      	ldr	r3, [r3, #20]
 800b13a:	431a      	orrs	r2, r3
 800b13c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b13e:	69db      	ldr	r3, [r3, #28]
 800b140:	4313      	orrs	r3, r2
 800b142:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4971      	ldr	r1, [pc, #452]	@ (800b310 <UART_SetConfig+0x1fc>)
 800b14c:	4019      	ands	r1, r3
 800b14e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b150:	681a      	ldr	r2, [r3, #0]
 800b152:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b154:	430b      	orrs	r3, r1
 800b156:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b164:	68d9      	ldr	r1, [r3, #12]
 800b166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b168:	681a      	ldr	r2, [r3, #0]
 800b16a:	ea40 0301 	orr.w	r3, r0, r1
 800b16e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b172:	699b      	ldr	r3, [r3, #24]
 800b174:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b178:	681a      	ldr	r2, [r3, #0]
 800b17a:	4b64      	ldr	r3, [pc, #400]	@ (800b30c <UART_SetConfig+0x1f8>)
 800b17c:	429a      	cmp	r2, r3
 800b17e:	d009      	beq.n	800b194 <UART_SetConfig+0x80>
 800b180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b182:	681a      	ldr	r2, [r3, #0]
 800b184:	4b63      	ldr	r3, [pc, #396]	@ (800b314 <UART_SetConfig+0x200>)
 800b186:	429a      	cmp	r2, r3
 800b188:	d004      	beq.n	800b194 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b18a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b18c:	6a1a      	ldr	r2, [r3, #32]
 800b18e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b190:	4313      	orrs	r3, r2
 800b192:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	689b      	ldr	r3, [r3, #8]
 800b19a:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800b19e:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800b1a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1a4:	681a      	ldr	r2, [r3, #0]
 800b1a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b1a8:	430b      	orrs	r3, r1
 800b1aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b1ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1b2:	f023 000f 	bic.w	r0, r3, #15
 800b1b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1b8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800b1ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1bc:	681a      	ldr	r2, [r3, #0]
 800b1be:	ea40 0301 	orr.w	r3, r0, r1
 800b1c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b1c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1c6:	681a      	ldr	r2, [r3, #0]
 800b1c8:	4b53      	ldr	r3, [pc, #332]	@ (800b318 <UART_SetConfig+0x204>)
 800b1ca:	429a      	cmp	r2, r3
 800b1cc:	d102      	bne.n	800b1d4 <UART_SetConfig+0xc0>
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b1d2:	e066      	b.n	800b2a2 <UART_SetConfig+0x18e>
 800b1d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1d6:	681a      	ldr	r2, [r3, #0]
 800b1d8:	4b50      	ldr	r3, [pc, #320]	@ (800b31c <UART_SetConfig+0x208>)
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	d102      	bne.n	800b1e4 <UART_SetConfig+0xd0>
 800b1de:	2302      	movs	r3, #2
 800b1e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b1e2:	e05e      	b.n	800b2a2 <UART_SetConfig+0x18e>
 800b1e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1e6:	681a      	ldr	r2, [r3, #0]
 800b1e8:	4b4d      	ldr	r3, [pc, #308]	@ (800b320 <UART_SetConfig+0x20c>)
 800b1ea:	429a      	cmp	r2, r3
 800b1ec:	d102      	bne.n	800b1f4 <UART_SetConfig+0xe0>
 800b1ee:	2304      	movs	r3, #4
 800b1f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b1f2:	e056      	b.n	800b2a2 <UART_SetConfig+0x18e>
 800b1f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1f6:	681a      	ldr	r2, [r3, #0]
 800b1f8:	4b4a      	ldr	r3, [pc, #296]	@ (800b324 <UART_SetConfig+0x210>)
 800b1fa:	429a      	cmp	r2, r3
 800b1fc:	d102      	bne.n	800b204 <UART_SetConfig+0xf0>
 800b1fe:	2308      	movs	r3, #8
 800b200:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b202:	e04e      	b.n	800b2a2 <UART_SetConfig+0x18e>
 800b204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b206:	681a      	ldr	r2, [r3, #0]
 800b208:	4b47      	ldr	r3, [pc, #284]	@ (800b328 <UART_SetConfig+0x214>)
 800b20a:	429a      	cmp	r2, r3
 800b20c:	d102      	bne.n	800b214 <UART_SetConfig+0x100>
 800b20e:	2310      	movs	r3, #16
 800b210:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b212:	e046      	b.n	800b2a2 <UART_SetConfig+0x18e>
 800b214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b216:	681a      	ldr	r2, [r3, #0]
 800b218:	4b44      	ldr	r3, [pc, #272]	@ (800b32c <UART_SetConfig+0x218>)
 800b21a:	429a      	cmp	r2, r3
 800b21c:	d102      	bne.n	800b224 <UART_SetConfig+0x110>
 800b21e:	2320      	movs	r3, #32
 800b220:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b222:	e03e      	b.n	800b2a2 <UART_SetConfig+0x18e>
 800b224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b226:	681a      	ldr	r2, [r3, #0]
 800b228:	4b41      	ldr	r3, [pc, #260]	@ (800b330 <UART_SetConfig+0x21c>)
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d102      	bne.n	800b234 <UART_SetConfig+0x120>
 800b22e:	2340      	movs	r3, #64	@ 0x40
 800b230:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b232:	e036      	b.n	800b2a2 <UART_SetConfig+0x18e>
 800b234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b236:	681a      	ldr	r2, [r3, #0]
 800b238:	4b3e      	ldr	r3, [pc, #248]	@ (800b334 <UART_SetConfig+0x220>)
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d102      	bne.n	800b244 <UART_SetConfig+0x130>
 800b23e:	2380      	movs	r3, #128	@ 0x80
 800b240:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b242:	e02e      	b.n	800b2a2 <UART_SetConfig+0x18e>
 800b244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b246:	681a      	ldr	r2, [r3, #0]
 800b248:	4b3b      	ldr	r3, [pc, #236]	@ (800b338 <UART_SetConfig+0x224>)
 800b24a:	429a      	cmp	r2, r3
 800b24c:	d103      	bne.n	800b256 <UART_SetConfig+0x142>
 800b24e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b252:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b254:	e025      	b.n	800b2a2 <UART_SetConfig+0x18e>
 800b256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b258:	681a      	ldr	r2, [r3, #0]
 800b25a:	4b38      	ldr	r3, [pc, #224]	@ (800b33c <UART_SetConfig+0x228>)
 800b25c:	429a      	cmp	r2, r3
 800b25e:	d103      	bne.n	800b268 <UART_SetConfig+0x154>
 800b260:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b264:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b266:	e01c      	b.n	800b2a2 <UART_SetConfig+0x18e>
 800b268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b26a:	681a      	ldr	r2, [r3, #0]
 800b26c:	4b34      	ldr	r3, [pc, #208]	@ (800b340 <UART_SetConfig+0x22c>)
 800b26e:	429a      	cmp	r2, r3
 800b270:	d103      	bne.n	800b27a <UART_SetConfig+0x166>
 800b272:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b276:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b278:	e013      	b.n	800b2a2 <UART_SetConfig+0x18e>
 800b27a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b27c:	681a      	ldr	r2, [r3, #0]
 800b27e:	4b31      	ldr	r3, [pc, #196]	@ (800b344 <UART_SetConfig+0x230>)
 800b280:	429a      	cmp	r2, r3
 800b282:	d103      	bne.n	800b28c <UART_SetConfig+0x178>
 800b284:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b288:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b28a:	e00a      	b.n	800b2a2 <UART_SetConfig+0x18e>
 800b28c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b28e:	681a      	ldr	r2, [r3, #0]
 800b290:	4b1e      	ldr	r3, [pc, #120]	@ (800b30c <UART_SetConfig+0x1f8>)
 800b292:	429a      	cmp	r2, r3
 800b294:	d103      	bne.n	800b29e <UART_SetConfig+0x18a>
 800b296:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b29a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b29c:	e001      	b.n	800b2a2 <UART_SetConfig+0x18e>
 800b29e:	2300      	movs	r3, #0
 800b2a0:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b2a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2a4:	681a      	ldr	r2, [r3, #0]
 800b2a6:	4b19      	ldr	r3, [pc, #100]	@ (800b30c <UART_SetConfig+0x1f8>)
 800b2a8:	429a      	cmp	r2, r3
 800b2aa:	d005      	beq.n	800b2b8 <UART_SetConfig+0x1a4>
 800b2ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2ae:	681a      	ldr	r2, [r3, #0]
 800b2b0:	4b18      	ldr	r3, [pc, #96]	@ (800b314 <UART_SetConfig+0x200>)
 800b2b2:	429a      	cmp	r2, r3
 800b2b4:	f040 8094 	bne.w	800b3e0 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b2b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	623b      	str	r3, [r7, #32]
 800b2be:	627a      	str	r2, [r7, #36]	@ 0x24
 800b2c0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b2c4:	f7fc fcf0 	bl	8007ca8 <HAL_RCCEx_GetPeriphCLKFreq>
 800b2c8:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800b2ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	f000 80f7 	beq.w	800b4c0 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b2d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2d6:	4a1c      	ldr	r2, [pc, #112]	@ (800b348 <UART_SetConfig+0x234>)
 800b2d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2dc:	461a      	mov	r2, r3
 800b2de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b2e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b2e4:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b2e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2e8:	685a      	ldr	r2, [r3, #4]
 800b2ea:	4613      	mov	r3, r2
 800b2ec:	005b      	lsls	r3, r3, #1
 800b2ee:	4413      	add	r3, r2
 800b2f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b2f2:	429a      	cmp	r2, r3
 800b2f4:	d305      	bcc.n	800b302 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b2f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2f8:	685b      	ldr	r3, [r3, #4]
 800b2fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b2fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b2fe:	429a      	cmp	r2, r3
 800b300:	d924      	bls.n	800b34c <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800b302:	2301      	movs	r3, #1
 800b304:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b308:	e069      	b.n	800b3de <UART_SetConfig+0x2ca>
 800b30a:	bf00      	nop
 800b30c:	44002400 	.word	0x44002400
 800b310:	cfff69f3 	.word	0xcfff69f3
 800b314:	54002400 	.word	0x54002400
 800b318:	40013800 	.word	0x40013800
 800b31c:	40004400 	.word	0x40004400
 800b320:	40004800 	.word	0x40004800
 800b324:	40004c00 	.word	0x40004c00
 800b328:	40005000 	.word	0x40005000
 800b32c:	40006400 	.word	0x40006400
 800b330:	40007800 	.word	0x40007800
 800b334:	40007c00 	.word	0x40007c00
 800b338:	40008000 	.word	0x40008000
 800b33c:	40006800 	.word	0x40006800
 800b340:	40006c00 	.word	0x40006c00
 800b344:	40008400 	.word	0x40008400
 800b348:	08011800 	.word	0x08011800
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b34c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b34e:	2200      	movs	r2, #0
 800b350:	61bb      	str	r3, [r7, #24]
 800b352:	61fa      	str	r2, [r7, #28]
 800b354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b358:	4a64      	ldr	r2, [pc, #400]	@ (800b4ec <UART_SetConfig+0x3d8>)
 800b35a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b35e:	b29b      	uxth	r3, r3
 800b360:	2200      	movs	r2, #0
 800b362:	613b      	str	r3, [r7, #16]
 800b364:	617a      	str	r2, [r7, #20]
 800b366:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b36a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b36e:	f7f4 ff8d 	bl	800028c <__aeabi_uldivmod>
 800b372:	4602      	mov	r2, r0
 800b374:	460b      	mov	r3, r1
 800b376:	4610      	mov	r0, r2
 800b378:	4619      	mov	r1, r3
 800b37a:	f04f 0200 	mov.w	r2, #0
 800b37e:	f04f 0300 	mov.w	r3, #0
 800b382:	020b      	lsls	r3, r1, #8
 800b384:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b388:	0202      	lsls	r2, r0, #8
 800b38a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b38c:	6849      	ldr	r1, [r1, #4]
 800b38e:	0849      	lsrs	r1, r1, #1
 800b390:	2000      	movs	r0, #0
 800b392:	460c      	mov	r4, r1
 800b394:	4605      	mov	r5, r0
 800b396:	eb12 0804 	adds.w	r8, r2, r4
 800b39a:	eb43 0905 	adc.w	r9, r3, r5
 800b39e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	60bb      	str	r3, [r7, #8]
 800b3a6:	60fa      	str	r2, [r7, #12]
 800b3a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b3ac:	4640      	mov	r0, r8
 800b3ae:	4649      	mov	r1, r9
 800b3b0:	f7f4 ff6c 	bl	800028c <__aeabi_uldivmod>
 800b3b4:	4602      	mov	r2, r0
 800b3b6:	460b      	mov	r3, r1
 800b3b8:	4613      	mov	r3, r2
 800b3ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b3bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b3c2:	d308      	bcc.n	800b3d6 <UART_SetConfig+0x2c2>
 800b3c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b3ca:	d204      	bcs.n	800b3d6 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800b3cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b3d2:	60da      	str	r2, [r3, #12]
 800b3d4:	e003      	b.n	800b3de <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800b3dc:	e070      	b.n	800b4c0 <UART_SetConfig+0x3ac>
 800b3de:	e06f      	b.n	800b4c0 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b3e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3e2:	69db      	ldr	r3, [r3, #28]
 800b3e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b3e8:	d13c      	bne.n	800b464 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b3ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	603b      	str	r3, [r7, #0]
 800b3f0:	607a      	str	r2, [r7, #4]
 800b3f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b3f6:	f7fc fc57 	bl	8007ca8 <HAL_RCCEx_GetPeriphCLKFreq>
 800b3fa:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b3fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d05e      	beq.n	800b4c0 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b406:	4a39      	ldr	r2, [pc, #228]	@ (800b4ec <UART_SetConfig+0x3d8>)
 800b408:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b40c:	461a      	mov	r2, r3
 800b40e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b410:	fbb3 f3f2 	udiv	r3, r3, r2
 800b414:	005a      	lsls	r2, r3, #1
 800b416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b418:	685b      	ldr	r3, [r3, #4]
 800b41a:	085b      	lsrs	r3, r3, #1
 800b41c:	441a      	add	r2, r3
 800b41e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b420:	685b      	ldr	r3, [r3, #4]
 800b422:	fbb2 f3f3 	udiv	r3, r2, r3
 800b426:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b428:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b42a:	2b0f      	cmp	r3, #15
 800b42c:	d916      	bls.n	800b45c <UART_SetConfig+0x348>
 800b42e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b430:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b434:	d212      	bcs.n	800b45c <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b438:	b29b      	uxth	r3, r3
 800b43a:	f023 030f 	bic.w	r3, r3, #15
 800b43e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b440:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b442:	085b      	lsrs	r3, r3, #1
 800b444:	b29b      	uxth	r3, r3
 800b446:	f003 0307 	and.w	r3, r3, #7
 800b44a:	b29a      	uxth	r2, r3
 800b44c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b44e:	4313      	orrs	r3, r2
 800b450:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800b452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800b458:	60da      	str	r2, [r3, #12]
 800b45a:	e031      	b.n	800b4c0 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800b45c:	2301      	movs	r3, #1
 800b45e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b462:	e02d      	b.n	800b4c0 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b464:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b466:	2200      	movs	r2, #0
 800b468:	469a      	mov	sl, r3
 800b46a:	4693      	mov	fp, r2
 800b46c:	4650      	mov	r0, sl
 800b46e:	4659      	mov	r1, fp
 800b470:	f7fc fc1a 	bl	8007ca8 <HAL_RCCEx_GetPeriphCLKFreq>
 800b474:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800b476:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d021      	beq.n	800b4c0 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b47c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b47e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b480:	4a1a      	ldr	r2, [pc, #104]	@ (800b4ec <UART_SetConfig+0x3d8>)
 800b482:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b486:	461a      	mov	r2, r3
 800b488:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b48a:	fbb3 f2f2 	udiv	r2, r3, r2
 800b48e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b490:	685b      	ldr	r3, [r3, #4]
 800b492:	085b      	lsrs	r3, r3, #1
 800b494:	441a      	add	r2, r3
 800b496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b498:	685b      	ldr	r3, [r3, #4]
 800b49a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b49e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b4a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4a2:	2b0f      	cmp	r3, #15
 800b4a4:	d909      	bls.n	800b4ba <UART_SetConfig+0x3a6>
 800b4a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b4ac:	d205      	bcs.n	800b4ba <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b4ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4b0:	b29a      	uxth	r2, r3
 800b4b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	60da      	str	r2, [r3, #12]
 800b4b8:	e002      	b.n	800b4c0 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b4c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4c2:	2201      	movs	r2, #1
 800b4c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b4c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b4d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b4d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4d8:	2200      	movs	r2, #0
 800b4da:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b4dc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3750      	adds	r7, #80	@ 0x50
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b4ea:	bf00      	nop
 800b4ec:	08011800 	.word	0x08011800

0800b4f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b083      	sub	sp, #12
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4fc:	f003 0308 	and.w	r3, r3, #8
 800b500:	2b00      	cmp	r3, #0
 800b502:	d00a      	beq.n	800b51a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	685b      	ldr	r3, [r3, #4]
 800b50a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	430a      	orrs	r2, r1
 800b518:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b51e:	f003 0301 	and.w	r3, r3, #1
 800b522:	2b00      	cmp	r3, #0
 800b524:	d00a      	beq.n	800b53c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	685b      	ldr	r3, [r3, #4]
 800b52c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	430a      	orrs	r2, r1
 800b53a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b540:	f003 0302 	and.w	r3, r3, #2
 800b544:	2b00      	cmp	r3, #0
 800b546:	d00a      	beq.n	800b55e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	685b      	ldr	r3, [r3, #4]
 800b54e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	430a      	orrs	r2, r1
 800b55c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b562:	f003 0304 	and.w	r3, r3, #4
 800b566:	2b00      	cmp	r3, #0
 800b568:	d00a      	beq.n	800b580 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	685b      	ldr	r3, [r3, #4]
 800b570:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	430a      	orrs	r2, r1
 800b57e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b584:	f003 0310 	and.w	r3, r3, #16
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d00a      	beq.n	800b5a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	689b      	ldr	r3, [r3, #8]
 800b592:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	430a      	orrs	r2, r1
 800b5a0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5a6:	f003 0320 	and.w	r3, r3, #32
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d00a      	beq.n	800b5c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	689b      	ldr	r3, [r3, #8]
 800b5b4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	430a      	orrs	r2, r1
 800b5c2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d01a      	beq.n	800b606 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	685b      	ldr	r3, [r3, #4]
 800b5d6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	430a      	orrs	r2, r1
 800b5e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b5ee:	d10a      	bne.n	800b606 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	685b      	ldr	r3, [r3, #4]
 800b5f6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	430a      	orrs	r2, r1
 800b604:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b60a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d00a      	beq.n	800b628 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	685b      	ldr	r3, [r3, #4]
 800b618:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	430a      	orrs	r2, r1
 800b626:	605a      	str	r2, [r3, #4]
  }
}
 800b628:	bf00      	nop
 800b62a:	370c      	adds	r7, #12
 800b62c:	46bd      	mov	sp, r7
 800b62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b632:	4770      	bx	lr

0800b634 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b098      	sub	sp, #96	@ 0x60
 800b638:	af02      	add	r7, sp, #8
 800b63a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2200      	movs	r2, #0
 800b640:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b644:	f7f6 fdae 	bl	80021a4 <HAL_GetTick>
 800b648:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f003 0308 	and.w	r3, r3, #8
 800b654:	2b08      	cmp	r3, #8
 800b656:	d12f      	bne.n	800b6b8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b658:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b65c:	9300      	str	r3, [sp, #0]
 800b65e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b660:	2200      	movs	r2, #0
 800b662:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f000 f88e 	bl	800b788 <UART_WaitOnFlagUntilTimeout>
 800b66c:	4603      	mov	r3, r0
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d022      	beq.n	800b6b8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b67a:	e853 3f00 	ldrex	r3, [r3]
 800b67e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b682:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b686:	653b      	str	r3, [r7, #80]	@ 0x50
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	461a      	mov	r2, r3
 800b68e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b690:	647b      	str	r3, [r7, #68]	@ 0x44
 800b692:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b694:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b696:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b698:	e841 2300 	strex	r3, r2, [r1]
 800b69c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b69e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d1e6      	bne.n	800b672 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2220      	movs	r2, #32
 800b6a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b6b4:	2303      	movs	r3, #3
 800b6b6:	e063      	b.n	800b780 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f003 0304 	and.w	r3, r3, #4
 800b6c2:	2b04      	cmp	r3, #4
 800b6c4:	d149      	bne.n	800b75a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b6c6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b6ca:	9300      	str	r3, [sp, #0]
 800b6cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f000 f857 	bl	800b788 <UART_WaitOnFlagUntilTimeout>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d03c      	beq.n	800b75a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6e8:	e853 3f00 	ldrex	r3, [r3]
 800b6ec:	623b      	str	r3, [r7, #32]
   return(result);
 800b6ee:	6a3b      	ldr	r3, [r7, #32]
 800b6f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b6f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	461a      	mov	r2, r3
 800b6fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6fe:	633b      	str	r3, [r7, #48]	@ 0x30
 800b700:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b702:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b704:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b706:	e841 2300 	strex	r3, r2, [r1]
 800b70a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b70c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d1e6      	bne.n	800b6e0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	3308      	adds	r3, #8
 800b718:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b71a:	693b      	ldr	r3, [r7, #16]
 800b71c:	e853 3f00 	ldrex	r3, [r3]
 800b720:	60fb      	str	r3, [r7, #12]
   return(result);
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	f023 0301 	bic.w	r3, r3, #1
 800b728:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	3308      	adds	r3, #8
 800b730:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b732:	61fa      	str	r2, [r7, #28]
 800b734:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b736:	69b9      	ldr	r1, [r7, #24]
 800b738:	69fa      	ldr	r2, [r7, #28]
 800b73a:	e841 2300 	strex	r3, r2, [r1]
 800b73e:	617b      	str	r3, [r7, #20]
   return(result);
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d1e5      	bne.n	800b712 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2220      	movs	r2, #32
 800b74a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2200      	movs	r2, #0
 800b752:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b756:	2303      	movs	r3, #3
 800b758:	e012      	b.n	800b780 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2220      	movs	r2, #32
 800b75e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2220      	movs	r2, #32
 800b766:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2200      	movs	r2, #0
 800b76e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2200      	movs	r2, #0
 800b774:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2200      	movs	r2, #0
 800b77a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b77e:	2300      	movs	r3, #0
}
 800b780:	4618      	mov	r0, r3
 800b782:	3758      	adds	r7, #88	@ 0x58
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}

0800b788 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b084      	sub	sp, #16
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	60f8      	str	r0, [r7, #12]
 800b790:	60b9      	str	r1, [r7, #8]
 800b792:	603b      	str	r3, [r7, #0]
 800b794:	4613      	mov	r3, r2
 800b796:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b798:	e04f      	b.n	800b83a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b79a:	69bb      	ldr	r3, [r7, #24]
 800b79c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7a0:	d04b      	beq.n	800b83a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b7a2:	f7f6 fcff 	bl	80021a4 <HAL_GetTick>
 800b7a6:	4602      	mov	r2, r0
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	1ad3      	subs	r3, r2, r3
 800b7ac:	69ba      	ldr	r2, [r7, #24]
 800b7ae:	429a      	cmp	r2, r3
 800b7b0:	d302      	bcc.n	800b7b8 <UART_WaitOnFlagUntilTimeout+0x30>
 800b7b2:	69bb      	ldr	r3, [r7, #24]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d101      	bne.n	800b7bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b7b8:	2303      	movs	r3, #3
 800b7ba:	e04e      	b.n	800b85a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	f003 0304 	and.w	r3, r3, #4
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d037      	beq.n	800b83a <UART_WaitOnFlagUntilTimeout+0xb2>
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	2b80      	cmp	r3, #128	@ 0x80
 800b7ce:	d034      	beq.n	800b83a <UART_WaitOnFlagUntilTimeout+0xb2>
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	2b40      	cmp	r3, #64	@ 0x40
 800b7d4:	d031      	beq.n	800b83a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	69db      	ldr	r3, [r3, #28]
 800b7dc:	f003 0308 	and.w	r3, r3, #8
 800b7e0:	2b08      	cmp	r3, #8
 800b7e2:	d110      	bne.n	800b806 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	2208      	movs	r2, #8
 800b7ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b7ec:	68f8      	ldr	r0, [r7, #12]
 800b7ee:	f000 f838 	bl	800b862 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	2208      	movs	r2, #8
 800b7f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b802:	2301      	movs	r3, #1
 800b804:	e029      	b.n	800b85a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	69db      	ldr	r3, [r3, #28]
 800b80c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b810:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b814:	d111      	bne.n	800b83a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b81e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b820:	68f8      	ldr	r0, [r7, #12]
 800b822:	f000 f81e 	bl	800b862 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	2220      	movs	r2, #32
 800b82a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	2200      	movs	r2, #0
 800b832:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b836:	2303      	movs	r3, #3
 800b838:	e00f      	b.n	800b85a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	69da      	ldr	r2, [r3, #28]
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	4013      	ands	r3, r2
 800b844:	68ba      	ldr	r2, [r7, #8]
 800b846:	429a      	cmp	r2, r3
 800b848:	bf0c      	ite	eq
 800b84a:	2301      	moveq	r3, #1
 800b84c:	2300      	movne	r3, #0
 800b84e:	b2db      	uxtb	r3, r3
 800b850:	461a      	mov	r2, r3
 800b852:	79fb      	ldrb	r3, [r7, #7]
 800b854:	429a      	cmp	r2, r3
 800b856:	d0a0      	beq.n	800b79a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b858:	2300      	movs	r3, #0
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	3710      	adds	r7, #16
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}

0800b862 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b862:	b480      	push	{r7}
 800b864:	b095      	sub	sp, #84	@ 0x54
 800b866:	af00      	add	r7, sp, #0
 800b868:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b872:	e853 3f00 	ldrex	r3, [r3]
 800b876:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b87a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b87e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	461a      	mov	r2, r3
 800b886:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b888:	643b      	str	r3, [r7, #64]	@ 0x40
 800b88a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b88c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b88e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b890:	e841 2300 	strex	r3, r2, [r1]
 800b894:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d1e6      	bne.n	800b86a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	3308      	adds	r3, #8
 800b8a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8a4:	6a3b      	ldr	r3, [r7, #32]
 800b8a6:	e853 3f00 	ldrex	r3, [r3]
 800b8aa:	61fb      	str	r3, [r7, #28]
   return(result);
 800b8ac:	69fb      	ldr	r3, [r7, #28]
 800b8ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b8b2:	f023 0301 	bic.w	r3, r3, #1
 800b8b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	3308      	adds	r3, #8
 800b8be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b8c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b8c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b8c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b8c8:	e841 2300 	strex	r3, r2, [r1]
 800b8cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b8ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d1e3      	bne.n	800b89c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	d118      	bne.n	800b90e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	e853 3f00 	ldrex	r3, [r3]
 800b8e8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	f023 0310 	bic.w	r3, r3, #16
 800b8f0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b8fa:	61bb      	str	r3, [r7, #24]
 800b8fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8fe:	6979      	ldr	r1, [r7, #20]
 800b900:	69ba      	ldr	r2, [r7, #24]
 800b902:	e841 2300 	strex	r3, r2, [r1]
 800b906:	613b      	str	r3, [r7, #16]
   return(result);
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d1e6      	bne.n	800b8dc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2220      	movs	r2, #32
 800b912:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2200      	movs	r2, #0
 800b91a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2200      	movs	r2, #0
 800b920:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b922:	bf00      	nop
 800b924:	3754      	adds	r7, #84	@ 0x54
 800b926:	46bd      	mov	sp, r7
 800b928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92c:	4770      	bx	lr

0800b92e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b92e:	b480      	push	{r7}
 800b930:	b085      	sub	sp, #20
 800b932:	af00      	add	r7, sp, #0
 800b934:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b93c:	2b01      	cmp	r3, #1
 800b93e:	d101      	bne.n	800b944 <HAL_UARTEx_DisableFifoMode+0x16>
 800b940:	2302      	movs	r3, #2
 800b942:	e027      	b.n	800b994 <HAL_UARTEx_DisableFifoMode+0x66>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2201      	movs	r2, #1
 800b948:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2224      	movs	r2, #36	@ 0x24
 800b950:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	681a      	ldr	r2, [r3, #0]
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f022 0201 	bic.w	r2, r2, #1
 800b96a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b972:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2200      	movs	r2, #0
 800b978:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	68fa      	ldr	r2, [r7, #12]
 800b980:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2220      	movs	r2, #32
 800b986:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2200      	movs	r2, #0
 800b98e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b992:	2300      	movs	r3, #0
}
 800b994:	4618      	mov	r0, r3
 800b996:	3714      	adds	r7, #20
 800b998:	46bd      	mov	sp, r7
 800b99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99e:	4770      	bx	lr

0800b9a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b084      	sub	sp, #16
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b9b0:	2b01      	cmp	r3, #1
 800b9b2:	d101      	bne.n	800b9b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b9b4:	2302      	movs	r3, #2
 800b9b6:	e02d      	b.n	800ba14 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2201      	movs	r2, #1
 800b9bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2224      	movs	r2, #36	@ 0x24
 800b9c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	681a      	ldr	r2, [r3, #0]
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f022 0201 	bic.w	r2, r2, #1
 800b9de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	689b      	ldr	r3, [r3, #8]
 800b9e6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	683a      	ldr	r2, [r7, #0]
 800b9f0:	430a      	orrs	r2, r1
 800b9f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f000 f84f 	bl	800ba98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	68fa      	ldr	r2, [r7, #12]
 800ba00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2220      	movs	r2, #32
 800ba06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ba12:	2300      	movs	r3, #0
}
 800ba14:	4618      	mov	r0, r3
 800ba16:	3710      	adds	r7, #16
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}

0800ba1c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b084      	sub	sp, #16
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
 800ba24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	d101      	bne.n	800ba34 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ba30:	2302      	movs	r3, #2
 800ba32:	e02d      	b.n	800ba90 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2201      	movs	r2, #1
 800ba38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2224      	movs	r2, #36	@ 0x24
 800ba40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	681a      	ldr	r2, [r3, #0]
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f022 0201 	bic.w	r2, r2, #1
 800ba5a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	689b      	ldr	r3, [r3, #8]
 800ba62:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	683a      	ldr	r2, [r7, #0]
 800ba6c:	430a      	orrs	r2, r1
 800ba6e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f000 f811 	bl	800ba98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	68fa      	ldr	r2, [r7, #12]
 800ba7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2220      	movs	r2, #32
 800ba82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2200      	movs	r2, #0
 800ba8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ba8e:	2300      	movs	r3, #0
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	3710      	adds	r7, #16
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}

0800ba98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b085      	sub	sp, #20
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d108      	bne.n	800baba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2201      	movs	r2, #1
 800baac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2201      	movs	r2, #1
 800bab4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bab8:	e031      	b.n	800bb1e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800baba:	2308      	movs	r3, #8
 800babc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800babe:	2308      	movs	r3, #8
 800bac0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	689b      	ldr	r3, [r3, #8]
 800bac8:	0e5b      	lsrs	r3, r3, #25
 800baca:	b2db      	uxtb	r3, r3
 800bacc:	f003 0307 	and.w	r3, r3, #7
 800bad0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	689b      	ldr	r3, [r3, #8]
 800bad8:	0f5b      	lsrs	r3, r3, #29
 800bada:	b2db      	uxtb	r3, r3
 800badc:	f003 0307 	and.w	r3, r3, #7
 800bae0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bae2:	7bbb      	ldrb	r3, [r7, #14]
 800bae4:	7b3a      	ldrb	r2, [r7, #12]
 800bae6:	4911      	ldr	r1, [pc, #68]	@ (800bb2c <UARTEx_SetNbDataToProcess+0x94>)
 800bae8:	5c8a      	ldrb	r2, [r1, r2]
 800baea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800baee:	7b3a      	ldrb	r2, [r7, #12]
 800baf0:	490f      	ldr	r1, [pc, #60]	@ (800bb30 <UARTEx_SetNbDataToProcess+0x98>)
 800baf2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800baf4:	fb93 f3f2 	sdiv	r3, r3, r2
 800baf8:	b29a      	uxth	r2, r3
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb00:	7bfb      	ldrb	r3, [r7, #15]
 800bb02:	7b7a      	ldrb	r2, [r7, #13]
 800bb04:	4909      	ldr	r1, [pc, #36]	@ (800bb2c <UARTEx_SetNbDataToProcess+0x94>)
 800bb06:	5c8a      	ldrb	r2, [r1, r2]
 800bb08:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bb0c:	7b7a      	ldrb	r2, [r7, #13]
 800bb0e:	4908      	ldr	r1, [pc, #32]	@ (800bb30 <UARTEx_SetNbDataToProcess+0x98>)
 800bb10:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb12:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb16:	b29a      	uxth	r2, r3
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bb1e:	bf00      	nop
 800bb20:	3714      	adds	r7, #20
 800bb22:	46bd      	mov	sp, r7
 800bb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb28:	4770      	bx	lr
 800bb2a:	bf00      	nop
 800bb2c:	08011818 	.word	0x08011818
 800bb30:	08011820 	.word	0x08011820

0800bb34 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_DRD_TypeDef *USBx)
{
 800bb34:	b480      	push	{r7}
 800bb36:	b083      	sub	sp, #12
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
  /* Disable Host Mode */
  USBx->CNTR &= ~USB_CNTR_HOST;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb40:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Force Reset IP */
  USBx->CNTR |= USB_CNTR_USBRST;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb4c:	f043 0201 	orr.w	r2, r3, #1
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800bb54:	2300      	movs	r3, #0
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	370c      	adds	r7, #12
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb60:	4770      	bx	lr

0800bb62 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800bb62:	b084      	sub	sp, #16
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b084      	sub	sp, #16
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	f107 001c 	add.w	r0, r7, #28
 800bb70:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  UNUSED(cfg);

  if (USBx == NULL)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d101      	bne.n	800bb7e <USB_CoreInit+0x1c>
  {
    return HAL_ERROR;
 800bb7a:	2301      	movs	r3, #1
 800bb7c:	e008      	b.n	800bb90 <USB_CoreInit+0x2e>
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f7ff ffd8 	bl	800bb34 <USB_CoreReset>
 800bb84:	4603      	mov	r3, r0
 800bb86:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800bb8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3710      	adds	r7, #16
 800bb94:	46bd      	mov	sp, r7
 800bb96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bb9a:	b004      	add	sp, #16
 800bb9c:	4770      	bx	lr

0800bb9e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800bb9e:	b480      	push	{r7}
 800bba0:	b085      	sub	sp, #20
 800bba2:	af00      	add	r7, sp, #0
 800bba4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2200      	movs	r2, #0
 800bbaa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bbac:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800bbb0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	68fa      	ldr	r2, [r7, #12]
 800bbb6:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800bbb8:	2300      	movs	r3, #0
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3714      	adds	r7, #20
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc4:	4770      	bx	lr

0800bbc6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800bbc6:	b480      	push	{r7}
 800bbc8:	b085      	sub	sp, #20
 800bbca:	af00      	add	r7, sp, #0
 800bbcc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bbce:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800bbd2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	43db      	mvns	r3, r3
 800bbdc:	401a      	ands	r2, r3
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800bbe2:	2300      	movs	r3, #0
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3714      	adds	r7, #20
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbee:	4770      	bx	lr

0800bbf0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b083      	sub	sp, #12
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
 800bbf8:	460b      	mov	r3, r1
 800bbfa:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800bbfc:	78fb      	ldrb	r3, [r7, #3]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d106      	bne.n	800bc10 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc06:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	641a      	str	r2, [r3, #64]	@ 0x40
 800bc0e:	e00b      	b.n	800bc28 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800bc10:	78fb      	ldrb	r3, [r7, #3]
 800bc12:	2b01      	cmp	r3, #1
 800bc14:	d106      	bne.n	800bc24 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc1a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	641a      	str	r2, [r3, #64]	@ 0x40
 800bc22:	e001      	b.n	800bc28 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800bc24:	2301      	movs	r3, #1
 800bc26:	e000      	b.n	800bc2a <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800bc28:	2300      	movs	r3, #0
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	370c      	adds	r7, #12
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc34:	4770      	bx	lr

0800bc36 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800bc36:	b084      	sub	sp, #16
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b084      	sub	sp, #16
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
 800bc40:	f107 001c 	add.w	r0, r7, #28
 800bc44:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2201      	movs	r2, #1
 800bc4c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc52:	f023 0201 	bic.w	r2, r3, #1
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800bc5a:	2100      	movs	r1, #0
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f7ff ffc7 	bl	800bbf0 <USB_SetCurrentMode>
 800bc62:	4603      	mov	r3, r0
 800bc64:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2200      	movs	r2, #0
 800bc6a:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800bc6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3710      	adds	r7, #16
 800bc72:	46bd      	mov	sp, r7
 800bc74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bc78:	b004      	add	sp, #16
 800bc7a:	4770      	bx	lr

0800bc7c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b09f      	sub	sp, #124	@ 0x7c
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800bc86:	2300      	movs	r3, #0
 800bc88:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800bc8c:	687a      	ldr	r2, [r7, #4]
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	781b      	ldrb	r3, [r3, #0]
 800bc92:	009b      	lsls	r3, r3, #2
 800bc94:	4413      	add	r3, r2
 800bc96:	681a      	ldr	r2, [r3, #0]
 800bc98:	4ba0      	ldr	r3, [pc, #640]	@ (800bf1c <USB_ActivateEndpoint+0x2a0>)
 800bc9a:	4013      	ands	r3, r2
 800bc9c:	673b      	str	r3, [r7, #112]	@ 0x70

  /* initialize Endpoint */
  switch (ep->type)
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	78db      	ldrb	r3, [r3, #3]
 800bca2:	2b03      	cmp	r3, #3
 800bca4:	d819      	bhi.n	800bcda <USB_ActivateEndpoint+0x5e>
 800bca6:	a201      	add	r2, pc, #4	@ (adr r2, 800bcac <USB_ActivateEndpoint+0x30>)
 800bca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcac:	0800bcbd 	.word	0x0800bcbd
 800bcb0:	0800bcd1 	.word	0x0800bcd1
 800bcb4:	0800bce3 	.word	0x0800bce3
 800bcb8:	0800bcc7 	.word	0x0800bcc7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800bcbc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bcbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800bcc2:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800bcc4:	e00e      	b.n	800bce4 <USB_ActivateEndpoint+0x68>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800bcc6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bcc8:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800bccc:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800bcce:	e009      	b.n	800bce4 <USB_ActivateEndpoint+0x68>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800bcd0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bcd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800bcd6:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800bcd8:	e004      	b.n	800bce4 <USB_ActivateEndpoint+0x68>

    default:
      ret = HAL_ERROR;
 800bcda:	2301      	movs	r3, #1
 800bcdc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      break;
 800bce0:	e000      	b.n	800bce4 <USB_ActivateEndpoint+0x68>
      break;
 800bce2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 800bce4:	687a      	ldr	r2, [r7, #4]
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	781b      	ldrb	r3, [r3, #0]
 800bcea:	009b      	lsls	r3, r3, #2
 800bcec:	441a      	add	r2, r3
 800bcee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bcf0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bcf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bcf8:	6013      	str	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800bcfa:	687a      	ldr	r2, [r7, #4]
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	781b      	ldrb	r3, [r3, #0]
 800bd00:	009b      	lsls	r3, r3, #2
 800bd02:	4413      	add	r3, r2
 800bd04:	681a      	ldr	r2, [r3, #0]
 800bd06:	4b86      	ldr	r3, [pc, #536]	@ (800bf20 <USB_ActivateEndpoint+0x2a4>)
 800bd08:	4013      	ands	r3, r2
 800bd0a:	683a      	ldr	r2, [r7, #0]
 800bd0c:	7812      	ldrb	r2, [r2, #0]
 800bd0e:	4313      	orrs	r3, r2
 800bd10:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bd12:	687a      	ldr	r2, [r7, #4]
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	781b      	ldrb	r3, [r3, #0]
 800bd18:	009b      	lsls	r3, r3, #2
 800bd1a:	441a      	add	r2, r3
 800bd1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bd1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bd22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd26:	6013      	str	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	7b1b      	ldrb	r3, [r3, #12]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	f040 8177 	bne.w	800c020 <USB_ActivateEndpoint+0x3a4>
  {
    if (ep->is_in != 0U)
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	785b      	ldrb	r3, [r3, #1]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d079      	beq.n	800be2e <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	781b      	ldrb	r3, [r3, #0]
 800bd3e:	00db      	lsls	r3, r3, #3
 800bd40:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bd44:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bd48:	681a      	ldr	r2, [r3, #0]
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	781b      	ldrb	r3, [r3, #0]
 800bd4e:	00db      	lsls	r3, r3, #3
 800bd50:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bd54:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bd58:	0c12      	lsrs	r2, r2, #16
 800bd5a:	0412      	lsls	r2, r2, #16
 800bd5c:	601a      	str	r2, [r3, #0]
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	781b      	ldrb	r3, [r3, #0]
 800bd62:	00db      	lsls	r3, r3, #3
 800bd64:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bd68:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bd6c:	6819      	ldr	r1, [r3, #0]
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	88db      	ldrh	r3, [r3, #6]
 800bd72:	089b      	lsrs	r3, r3, #2
 800bd74:	b29b      	uxth	r3, r3
 800bd76:	009a      	lsls	r2, r3, #2
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	781b      	ldrb	r3, [r3, #0]
 800bd7c:	00db      	lsls	r3, r3, #3
 800bd7e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bd82:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bd86:	430a      	orrs	r2, r1
 800bd88:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bd8a:	687a      	ldr	r2, [r7, #4]
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	781b      	ldrb	r3, [r3, #0]
 800bd90:	009b      	lsls	r3, r3, #2
 800bd92:	4413      	add	r3, r2
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	61bb      	str	r3, [r7, #24]
 800bd98:	69bb      	ldr	r3, [r7, #24]
 800bd9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d013      	beq.n	800bdca <USB_ActivateEndpoint+0x14e>
 800bda2:	687a      	ldr	r2, [r7, #4]
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	781b      	ldrb	r3, [r3, #0]
 800bda8:	009b      	lsls	r3, r3, #2
 800bdaa:	4413      	add	r3, r2
 800bdac:	681a      	ldr	r2, [r3, #0]
 800bdae:	4b5c      	ldr	r3, [pc, #368]	@ (800bf20 <USB_ActivateEndpoint+0x2a4>)
 800bdb0:	4013      	ands	r3, r2
 800bdb2:	617b      	str	r3, [r7, #20]
 800bdb4:	687a      	ldr	r2, [r7, #4]
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	781b      	ldrb	r3, [r3, #0]
 800bdba:	009b      	lsls	r3, r3, #2
 800bdbc:	441a      	add	r2, r3
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bdc4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bdc8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	78db      	ldrb	r3, [r3, #3]
 800bdce:	2b01      	cmp	r3, #1
 800bdd0:	d018      	beq.n	800be04 <USB_ActivateEndpoint+0x188>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bdd2:	687a      	ldr	r2, [r7, #4]
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	781b      	ldrb	r3, [r3, #0]
 800bdd8:	009b      	lsls	r3, r3, #2
 800bdda:	4413      	add	r3, r2
 800bddc:	681a      	ldr	r2, [r3, #0]
 800bdde:	4b51      	ldr	r3, [pc, #324]	@ (800bf24 <USB_ActivateEndpoint+0x2a8>)
 800bde0:	4013      	ands	r3, r2
 800bde2:	60fb      	str	r3, [r7, #12]
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	f083 0320 	eor.w	r3, r3, #32
 800bdea:	60fb      	str	r3, [r7, #12]
 800bdec:	687a      	ldr	r2, [r7, #4]
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	781b      	ldrb	r3, [r3, #0]
 800bdf2:	009b      	lsls	r3, r3, #2
 800bdf4:	441a      	add	r2, r3
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bdfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be00:	6013      	str	r3, [r2, #0]
 800be02:	e28c      	b.n	800c31e <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800be04:	687a      	ldr	r2, [r7, #4]
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	781b      	ldrb	r3, [r3, #0]
 800be0a:	009b      	lsls	r3, r3, #2
 800be0c:	4413      	add	r3, r2
 800be0e:	681a      	ldr	r2, [r3, #0]
 800be10:	4b44      	ldr	r3, [pc, #272]	@ (800bf24 <USB_ActivateEndpoint+0x2a8>)
 800be12:	4013      	ands	r3, r2
 800be14:	613b      	str	r3, [r7, #16]
 800be16:	687a      	ldr	r2, [r7, #4]
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	781b      	ldrb	r3, [r3, #0]
 800be1c:	009b      	lsls	r3, r3, #2
 800be1e:	441a      	add	r2, r3
 800be20:	693b      	ldr	r3, [r7, #16]
 800be22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800be26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be2a:	6013      	str	r3, [r2, #0]
 800be2c:	e277      	b.n	800c31e <USB_ActivateEndpoint+0x6a2>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	781b      	ldrb	r3, [r3, #0]
 800be32:	00db      	lsls	r3, r3, #3
 800be34:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800be38:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800be3c:	685a      	ldr	r2, [r3, #4]
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	781b      	ldrb	r3, [r3, #0]
 800be42:	00db      	lsls	r3, r3, #3
 800be44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800be48:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800be4c:	0c12      	lsrs	r2, r2, #16
 800be4e:	0412      	lsls	r2, r2, #16
 800be50:	605a      	str	r2, [r3, #4]
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	00db      	lsls	r3, r3, #3
 800be58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800be5c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800be60:	6859      	ldr	r1, [r3, #4]
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	88db      	ldrh	r3, [r3, #6]
 800be66:	089b      	lsrs	r3, r3, #2
 800be68:	b29b      	uxth	r3, r3
 800be6a:	009a      	lsls	r2, r3, #2
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	781b      	ldrb	r3, [r3, #0]
 800be70:	00db      	lsls	r3, r3, #3
 800be72:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800be76:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800be7a:	430a      	orrs	r2, r1
 800be7c:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	00db      	lsls	r3, r3, #3
 800be84:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800be88:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800be8c:	685a      	ldr	r2, [r3, #4]
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	781b      	ldrb	r3, [r3, #0]
 800be92:	00db      	lsls	r3, r3, #3
 800be94:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800be98:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800be9c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800bea0:	605a      	str	r2, [r3, #4]
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	691b      	ldr	r3, [r3, #16]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d112      	bne.n	800bed0 <USB_ActivateEndpoint+0x254>
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	781b      	ldrb	r3, [r3, #0]
 800beae:	00db      	lsls	r3, r3, #3
 800beb0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800beb4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800beb8:	685a      	ldr	r2, [r3, #4]
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	781b      	ldrb	r3, [r3, #0]
 800bebe:	00db      	lsls	r3, r3, #3
 800bec0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bec4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bec8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800becc:	605a      	str	r2, [r3, #4]
 800bece:	e04d      	b.n	800bf6c <USB_ActivateEndpoint+0x2f0>
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	691b      	ldr	r3, [r3, #16]
 800bed4:	2b3e      	cmp	r3, #62	@ 0x3e
 800bed6:	d827      	bhi.n	800bf28 <USB_ActivateEndpoint+0x2ac>
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	691b      	ldr	r3, [r3, #16]
 800bedc:	085b      	lsrs	r3, r3, #1
 800bede:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	691b      	ldr	r3, [r3, #16]
 800bee4:	f003 0301 	and.w	r3, r3, #1
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d002      	beq.n	800bef2 <USB_ActivateEndpoint+0x276>
 800beec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800beee:	3301      	adds	r3, #1
 800bef0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	781b      	ldrb	r3, [r3, #0]
 800bef6:	00db      	lsls	r3, r3, #3
 800bef8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800befc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bf00:	6859      	ldr	r1, [r3, #4]
 800bf02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bf04:	069a      	lsls	r2, r3, #26
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	781b      	ldrb	r3, [r3, #0]
 800bf0a:	00db      	lsls	r3, r3, #3
 800bf0c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bf10:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bf14:	430a      	orrs	r2, r1
 800bf16:	605a      	str	r2, [r3, #4]
 800bf18:	e028      	b.n	800bf6c <USB_ActivateEndpoint+0x2f0>
 800bf1a:	bf00      	nop
 800bf1c:	07ff898f 	.word	0x07ff898f
 800bf20:	07ff8f8f 	.word	0x07ff8f8f
 800bf24:	07ff8fbf 	.word	0x07ff8fbf
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	691b      	ldr	r3, [r3, #16]
 800bf2c:	095b      	lsrs	r3, r3, #5
 800bf2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	691b      	ldr	r3, [r3, #16]
 800bf34:	f003 031f 	and.w	r3, r3, #31
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d102      	bne.n	800bf42 <USB_ActivateEndpoint+0x2c6>
 800bf3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bf3e:	3b01      	subs	r3, #1
 800bf40:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	781b      	ldrb	r3, [r3, #0]
 800bf46:	00db      	lsls	r3, r3, #3
 800bf48:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bf4c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bf50:	685a      	ldr	r2, [r3, #4]
 800bf52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bf54:	069b      	lsls	r3, r3, #26
 800bf56:	431a      	orrs	r2, r3
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	781b      	ldrb	r3, [r3, #0]
 800bf5c:	00db      	lsls	r3, r3, #3
 800bf5e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bf62:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bf66:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800bf6a:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bf6c:	687a      	ldr	r2, [r7, #4]
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	781b      	ldrb	r3, [r3, #0]
 800bf72:	009b      	lsls	r3, r3, #2
 800bf74:	4413      	add	r3, r2
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bf7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d013      	beq.n	800bfac <USB_ActivateEndpoint+0x330>
 800bf84:	687a      	ldr	r2, [r7, #4]
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	781b      	ldrb	r3, [r3, #0]
 800bf8a:	009b      	lsls	r3, r3, #2
 800bf8c:	4413      	add	r3, r2
 800bf8e:	681a      	ldr	r2, [r3, #0]
 800bf90:	4b9c      	ldr	r3, [pc, #624]	@ (800c204 <USB_ActivateEndpoint+0x588>)
 800bf92:	4013      	ands	r3, r2
 800bf94:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf96:	687a      	ldr	r2, [r7, #4]
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	781b      	ldrb	r3, [r3, #0]
 800bf9c:	009b      	lsls	r3, r3, #2
 800bf9e:	441a      	add	r2, r3
 800bfa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfa2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bfa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfaa:	6013      	str	r3, [r2, #0]

      if (ep->num == 0U)
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	781b      	ldrb	r3, [r3, #0]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d11c      	bne.n	800bfee <USB_ActivateEndpoint+0x372>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bfb4:	687a      	ldr	r2, [r7, #4]
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	781b      	ldrb	r3, [r3, #0]
 800bfba:	009b      	lsls	r3, r3, #2
 800bfbc:	4413      	add	r3, r2
 800bfbe:	681a      	ldr	r2, [r3, #0]
 800bfc0:	4b91      	ldr	r3, [pc, #580]	@ (800c208 <USB_ActivateEndpoint+0x58c>)
 800bfc2:	4013      	ands	r3, r2
 800bfc4:	61fb      	str	r3, [r7, #28]
 800bfc6:	69fb      	ldr	r3, [r7, #28]
 800bfc8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800bfcc:	61fb      	str	r3, [r7, #28]
 800bfce:	69fb      	ldr	r3, [r7, #28]
 800bfd0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800bfd4:	61fb      	str	r3, [r7, #28]
 800bfd6:	687a      	ldr	r2, [r7, #4]
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	781b      	ldrb	r3, [r3, #0]
 800bfdc:	009b      	lsls	r3, r3, #2
 800bfde:	441a      	add	r2, r3
 800bfe0:	69fb      	ldr	r3, [r7, #28]
 800bfe2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bfe6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfea:	6013      	str	r3, [r2, #0]
 800bfec:	e197      	b.n	800c31e <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800bfee:	687a      	ldr	r2, [r7, #4]
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	781b      	ldrb	r3, [r3, #0]
 800bff4:	009b      	lsls	r3, r3, #2
 800bff6:	4413      	add	r3, r2
 800bff8:	681a      	ldr	r2, [r3, #0]
 800bffa:	4b83      	ldr	r3, [pc, #524]	@ (800c208 <USB_ActivateEndpoint+0x58c>)
 800bffc:	4013      	ands	r3, r2
 800bffe:	623b      	str	r3, [r7, #32]
 800c000:	6a3b      	ldr	r3, [r7, #32]
 800c002:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c006:	623b      	str	r3, [r7, #32]
 800c008:	687a      	ldr	r2, [r7, #4]
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	781b      	ldrb	r3, [r3, #0]
 800c00e:	009b      	lsls	r3, r3, #2
 800c010:	441a      	add	r2, r3
 800c012:	6a3b      	ldr	r3, [r7, #32]
 800c014:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c018:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c01c:	6013      	str	r3, [r2, #0]
 800c01e:	e17e      	b.n	800c31e <USB_ActivateEndpoint+0x6a2>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	78db      	ldrb	r3, [r3, #3]
 800c024:	2b02      	cmp	r3, #2
 800c026:	d114      	bne.n	800c052 <USB_ActivateEndpoint+0x3d6>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c028:	687a      	ldr	r2, [r7, #4]
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	781b      	ldrb	r3, [r3, #0]
 800c02e:	009b      	lsls	r3, r3, #2
 800c030:	4413      	add	r3, r2
 800c032:	681a      	ldr	r2, [r3, #0]
 800c034:	4b73      	ldr	r3, [pc, #460]	@ (800c204 <USB_ActivateEndpoint+0x588>)
 800c036:	4013      	ands	r3, r2
 800c038:	663b      	str	r3, [r7, #96]	@ 0x60
 800c03a:	687a      	ldr	r2, [r7, #4]
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	781b      	ldrb	r3, [r3, #0]
 800c040:	009b      	lsls	r3, r3, #2
 800c042:	441a      	add	r2, r3
 800c044:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c046:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c04a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c04e:	6013      	str	r3, [r2, #0]
 800c050:	e013      	b.n	800c07a <USB_ActivateEndpoint+0x3fe>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800c052:	687a      	ldr	r2, [r7, #4]
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	781b      	ldrb	r3, [r3, #0]
 800c058:	009b      	lsls	r3, r3, #2
 800c05a:	4413      	add	r3, r2
 800c05c:	681a      	ldr	r2, [r3, #0]
 800c05e:	4b6b      	ldr	r3, [pc, #428]	@ (800c20c <USB_ActivateEndpoint+0x590>)
 800c060:	4013      	ands	r3, r2
 800c062:	667b      	str	r3, [r7, #100]	@ 0x64
 800c064:	687a      	ldr	r2, [r7, #4]
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	781b      	ldrb	r3, [r3, #0]
 800c06a:	009b      	lsls	r3, r3, #2
 800c06c:	441a      	add	r2, r3
 800c06e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c070:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c074:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c078:	6013      	str	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	781b      	ldrb	r3, [r3, #0]
 800c07e:	00db      	lsls	r3, r3, #3
 800c080:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c084:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c088:	681a      	ldr	r2, [r3, #0]
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	781b      	ldrb	r3, [r3, #0]
 800c08e:	00db      	lsls	r3, r3, #3
 800c090:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c094:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c098:	0c12      	lsrs	r2, r2, #16
 800c09a:	0412      	lsls	r2, r2, #16
 800c09c:	601a      	str	r2, [r3, #0]
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	781b      	ldrb	r3, [r3, #0]
 800c0a2:	00db      	lsls	r3, r3, #3
 800c0a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c0a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c0ac:	6819      	ldr	r1, [r3, #0]
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	891b      	ldrh	r3, [r3, #8]
 800c0b2:	089b      	lsrs	r3, r3, #2
 800c0b4:	b29b      	uxth	r3, r3
 800c0b6:	009a      	lsls	r2, r3, #2
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	781b      	ldrb	r3, [r3, #0]
 800c0bc:	00db      	lsls	r3, r3, #3
 800c0be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c0c2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c0c6:	430a      	orrs	r2, r1
 800c0c8:	601a      	str	r2, [r3, #0]
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	781b      	ldrb	r3, [r3, #0]
 800c0ce:	00db      	lsls	r3, r3, #3
 800c0d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c0d4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c0d8:	685a      	ldr	r2, [r3, #4]
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	781b      	ldrb	r3, [r3, #0]
 800c0de:	00db      	lsls	r3, r3, #3
 800c0e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c0e4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c0e8:	0c12      	lsrs	r2, r2, #16
 800c0ea:	0412      	lsls	r2, r2, #16
 800c0ec:	605a      	str	r2, [r3, #4]
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	781b      	ldrb	r3, [r3, #0]
 800c0f2:	00db      	lsls	r3, r3, #3
 800c0f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c0f8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c0fc:	6859      	ldr	r1, [r3, #4]
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	895b      	ldrh	r3, [r3, #10]
 800c102:	089b      	lsrs	r3, r3, #2
 800c104:	b29b      	uxth	r3, r3
 800c106:	009a      	lsls	r2, r3, #2
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	781b      	ldrb	r3, [r3, #0]
 800c10c:	00db      	lsls	r3, r3, #3
 800c10e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c112:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c116:	430a      	orrs	r2, r1
 800c118:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	785b      	ldrb	r3, [r3, #1]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d178      	bne.n	800c214 <USB_ActivateEndpoint+0x598>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c122:	687a      	ldr	r2, [r7, #4]
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	781b      	ldrb	r3, [r3, #0]
 800c128:	009b      	lsls	r3, r3, #2
 800c12a:	4413      	add	r3, r2
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	643b      	str	r3, [r7, #64]	@ 0x40
 800c130:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c132:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c136:	2b00      	cmp	r3, #0
 800c138:	d013      	beq.n	800c162 <USB_ActivateEndpoint+0x4e6>
 800c13a:	687a      	ldr	r2, [r7, #4]
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	781b      	ldrb	r3, [r3, #0]
 800c140:	009b      	lsls	r3, r3, #2
 800c142:	4413      	add	r3, r2
 800c144:	681a      	ldr	r2, [r3, #0]
 800c146:	4b2f      	ldr	r3, [pc, #188]	@ (800c204 <USB_ActivateEndpoint+0x588>)
 800c148:	4013      	ands	r3, r2
 800c14a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c14c:	687a      	ldr	r2, [r7, #4]
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	781b      	ldrb	r3, [r3, #0]
 800c152:	009b      	lsls	r3, r3, #2
 800c154:	441a      	add	r2, r3
 800c156:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c158:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c15c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c160:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c162:	687a      	ldr	r2, [r7, #4]
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	781b      	ldrb	r3, [r3, #0]
 800c168:	009b      	lsls	r3, r3, #2
 800c16a:	4413      	add	r3, r2
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c172:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c176:	2b00      	cmp	r3, #0
 800c178:	d013      	beq.n	800c1a2 <USB_ActivateEndpoint+0x526>
 800c17a:	687a      	ldr	r2, [r7, #4]
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	781b      	ldrb	r3, [r3, #0]
 800c180:	009b      	lsls	r3, r3, #2
 800c182:	4413      	add	r3, r2
 800c184:	681a      	ldr	r2, [r3, #0]
 800c186:	4b1f      	ldr	r3, [pc, #124]	@ (800c204 <USB_ActivateEndpoint+0x588>)
 800c188:	4013      	ands	r3, r2
 800c18a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c18c:	687a      	ldr	r2, [r7, #4]
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	781b      	ldrb	r3, [r3, #0]
 800c192:	009b      	lsls	r3, r3, #2
 800c194:	441a      	add	r2, r3
 800c196:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c198:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c19c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c1a0:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c1a2:	687a      	ldr	r2, [r7, #4]
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	781b      	ldrb	r3, [r3, #0]
 800c1a8:	009b      	lsls	r3, r3, #2
 800c1aa:	4413      	add	r3, r2
 800c1ac:	681a      	ldr	r2, [r3, #0]
 800c1ae:	4b16      	ldr	r3, [pc, #88]	@ (800c208 <USB_ActivateEndpoint+0x58c>)
 800c1b0:	4013      	ands	r3, r2
 800c1b2:	633b      	str	r3, [r7, #48]	@ 0x30
 800c1b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1b6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c1ba:	633b      	str	r3, [r7, #48]	@ 0x30
 800c1bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1be:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c1c2:	633b      	str	r3, [r7, #48]	@ 0x30
 800c1c4:	687a      	ldr	r2, [r7, #4]
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	781b      	ldrb	r3, [r3, #0]
 800c1ca:	009b      	lsls	r3, r3, #2
 800c1cc:	441a      	add	r2, r3
 800c1ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c1d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1d8:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c1da:	687a      	ldr	r2, [r7, #4]
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	781b      	ldrb	r3, [r3, #0]
 800c1e0:	009b      	lsls	r3, r3, #2
 800c1e2:	4413      	add	r3, r2
 800c1e4:	681a      	ldr	r2, [r3, #0]
 800c1e6:	4b0a      	ldr	r3, [pc, #40]	@ (800c210 <USB_ActivateEndpoint+0x594>)
 800c1e8:	4013      	ands	r3, r2
 800c1ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c1ec:	687a      	ldr	r2, [r7, #4]
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	781b      	ldrb	r3, [r3, #0]
 800c1f2:	009b      	lsls	r3, r3, #2
 800c1f4:	441a      	add	r2, r3
 800c1f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c1fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c200:	6013      	str	r3, [r2, #0]
 800c202:	e08c      	b.n	800c31e <USB_ActivateEndpoint+0x6a2>
 800c204:	07ff8f8f 	.word	0x07ff8f8f
 800c208:	07ffbf8f 	.word	0x07ffbf8f
 800c20c:	07ff8e8f 	.word	0x07ff8e8f
 800c210:	07ff8fbf 	.word	0x07ff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c214:	687a      	ldr	r2, [r7, #4]
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	781b      	ldrb	r3, [r3, #0]
 800c21a:	009b      	lsls	r3, r3, #2
 800c21c:	4413      	add	r3, r2
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c222:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c224:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d013      	beq.n	800c254 <USB_ActivateEndpoint+0x5d8>
 800c22c:	687a      	ldr	r2, [r7, #4]
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	781b      	ldrb	r3, [r3, #0]
 800c232:	009b      	lsls	r3, r3, #2
 800c234:	4413      	add	r3, r2
 800c236:	681a      	ldr	r2, [r3, #0]
 800c238:	4b3d      	ldr	r3, [pc, #244]	@ (800c330 <USB_ActivateEndpoint+0x6b4>)
 800c23a:	4013      	ands	r3, r2
 800c23c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c23e:	687a      	ldr	r2, [r7, #4]
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	781b      	ldrb	r3, [r3, #0]
 800c244:	009b      	lsls	r3, r3, #2
 800c246:	441a      	add	r2, r3
 800c248:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c24a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c24e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c252:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c254:	687a      	ldr	r2, [r7, #4]
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	781b      	ldrb	r3, [r3, #0]
 800c25a:	009b      	lsls	r3, r3, #2
 800c25c:	4413      	add	r3, r2
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	657b      	str	r3, [r7, #84]	@ 0x54
 800c262:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d013      	beq.n	800c294 <USB_ActivateEndpoint+0x618>
 800c26c:	687a      	ldr	r2, [r7, #4]
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	781b      	ldrb	r3, [r3, #0]
 800c272:	009b      	lsls	r3, r3, #2
 800c274:	4413      	add	r3, r2
 800c276:	681a      	ldr	r2, [r3, #0]
 800c278:	4b2d      	ldr	r3, [pc, #180]	@ (800c330 <USB_ActivateEndpoint+0x6b4>)
 800c27a:	4013      	ands	r3, r2
 800c27c:	653b      	str	r3, [r7, #80]	@ 0x50
 800c27e:	687a      	ldr	r2, [r7, #4]
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	781b      	ldrb	r3, [r3, #0]
 800c284:	009b      	lsls	r3, r3, #2
 800c286:	441a      	add	r2, r3
 800c288:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c28a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c28e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c292:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	78db      	ldrb	r3, [r3, #3]
 800c298:	2b01      	cmp	r3, #1
 800c29a:	d018      	beq.n	800c2ce <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c29c:	687a      	ldr	r2, [r7, #4]
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	781b      	ldrb	r3, [r3, #0]
 800c2a2:	009b      	lsls	r3, r3, #2
 800c2a4:	4413      	add	r3, r2
 800c2a6:	681a      	ldr	r2, [r3, #0]
 800c2a8:	4b22      	ldr	r3, [pc, #136]	@ (800c334 <USB_ActivateEndpoint+0x6b8>)
 800c2aa:	4013      	ands	r3, r2
 800c2ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c2ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c2b0:	f083 0320 	eor.w	r3, r3, #32
 800c2b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c2b6:	687a      	ldr	r2, [r7, #4]
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	781b      	ldrb	r3, [r3, #0]
 800c2bc:	009b      	lsls	r3, r3, #2
 800c2be:	441a      	add	r2, r3
 800c2c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c2c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c2c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2ca:	6013      	str	r3, [r2, #0]
 800c2cc:	e013      	b.n	800c2f6 <USB_ActivateEndpoint+0x67a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c2ce:	687a      	ldr	r2, [r7, #4]
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	781b      	ldrb	r3, [r3, #0]
 800c2d4:	009b      	lsls	r3, r3, #2
 800c2d6:	4413      	add	r3, r2
 800c2d8:	681a      	ldr	r2, [r3, #0]
 800c2da:	4b16      	ldr	r3, [pc, #88]	@ (800c334 <USB_ActivateEndpoint+0x6b8>)
 800c2dc:	4013      	ands	r3, r2
 800c2de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c2e0:	687a      	ldr	r2, [r7, #4]
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	781b      	ldrb	r3, [r3, #0]
 800c2e6:	009b      	lsls	r3, r3, #2
 800c2e8:	441a      	add	r2, r3
 800c2ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c2ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c2f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2f4:	6013      	str	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c2f6:	687a      	ldr	r2, [r7, #4]
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	781b      	ldrb	r3, [r3, #0]
 800c2fc:	009b      	lsls	r3, r3, #2
 800c2fe:	4413      	add	r3, r2
 800c300:	681a      	ldr	r2, [r3, #0]
 800c302:	4b0d      	ldr	r3, [pc, #52]	@ (800c338 <USB_ActivateEndpoint+0x6bc>)
 800c304:	4013      	ands	r3, r2
 800c306:	647b      	str	r3, [r7, #68]	@ 0x44
 800c308:	687a      	ldr	r2, [r7, #4]
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	781b      	ldrb	r3, [r3, #0]
 800c30e:	009b      	lsls	r3, r3, #2
 800c310:	441a      	add	r2, r3
 800c312:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c314:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c318:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c31c:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800c31e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800c322:	4618      	mov	r0, r3
 800c324:	377c      	adds	r7, #124	@ 0x7c
 800c326:	46bd      	mov	sp, r7
 800c328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32c:	4770      	bx	lr
 800c32e:	bf00      	nop
 800c330:	07ff8f8f 	.word	0x07ff8f8f
 800c334:	07ff8fbf 	.word	0x07ff8fbf
 800c338:	07ffbf8f 	.word	0x07ffbf8f

0800c33c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800c33c:	b480      	push	{r7}
 800c33e:	b097      	sub	sp, #92	@ 0x5c
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
 800c344:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	7b1b      	ldrb	r3, [r3, #12]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d16d      	bne.n	800c42a <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in != 0U)
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	785b      	ldrb	r3, [r3, #1]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d034      	beq.n	800c3c0 <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c356:	687a      	ldr	r2, [r7, #4]
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	781b      	ldrb	r3, [r3, #0]
 800c35c:	009b      	lsls	r3, r3, #2
 800c35e:	4413      	add	r3, r2
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	613b      	str	r3, [r7, #16]
 800c364:	693b      	ldr	r3, [r7, #16]
 800c366:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d013      	beq.n	800c396 <USB_DeactivateEndpoint+0x5a>
 800c36e:	687a      	ldr	r2, [r7, #4]
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	781b      	ldrb	r3, [r3, #0]
 800c374:	009b      	lsls	r3, r3, #2
 800c376:	4413      	add	r3, r2
 800c378:	681a      	ldr	r2, [r3, #0]
 800c37a:	4b6d      	ldr	r3, [pc, #436]	@ (800c530 <USB_DeactivateEndpoint+0x1f4>)
 800c37c:	4013      	ands	r3, r2
 800c37e:	60fb      	str	r3, [r7, #12]
 800c380:	687a      	ldr	r2, [r7, #4]
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	781b      	ldrb	r3, [r3, #0]
 800c386:	009b      	lsls	r3, r3, #2
 800c388:	441a      	add	r2, r3
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c390:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c394:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c396:	687a      	ldr	r2, [r7, #4]
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	781b      	ldrb	r3, [r3, #0]
 800c39c:	009b      	lsls	r3, r3, #2
 800c39e:	4413      	add	r3, r2
 800c3a0:	681a      	ldr	r2, [r3, #0]
 800c3a2:	4b64      	ldr	r3, [pc, #400]	@ (800c534 <USB_DeactivateEndpoint+0x1f8>)
 800c3a4:	4013      	ands	r3, r2
 800c3a6:	60bb      	str	r3, [r7, #8]
 800c3a8:	687a      	ldr	r2, [r7, #4]
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	781b      	ldrb	r3, [r3, #0]
 800c3ae:	009b      	lsls	r3, r3, #2
 800c3b0:	441a      	add	r2, r3
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c3b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3bc:	6013      	str	r3, [r2, #0]
 800c3be:	e139      	b.n	800c634 <USB_DeactivateEndpoint+0x2f8>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c3c0:	687a      	ldr	r2, [r7, #4]
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	781b      	ldrb	r3, [r3, #0]
 800c3c6:	009b      	lsls	r3, r3, #2
 800c3c8:	4413      	add	r3, r2
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	61fb      	str	r3, [r7, #28]
 800c3ce:	69fb      	ldr	r3, [r7, #28]
 800c3d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d013      	beq.n	800c400 <USB_DeactivateEndpoint+0xc4>
 800c3d8:	687a      	ldr	r2, [r7, #4]
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	781b      	ldrb	r3, [r3, #0]
 800c3de:	009b      	lsls	r3, r3, #2
 800c3e0:	4413      	add	r3, r2
 800c3e2:	681a      	ldr	r2, [r3, #0]
 800c3e4:	4b52      	ldr	r3, [pc, #328]	@ (800c530 <USB_DeactivateEndpoint+0x1f4>)
 800c3e6:	4013      	ands	r3, r2
 800c3e8:	61bb      	str	r3, [r7, #24]
 800c3ea:	687a      	ldr	r2, [r7, #4]
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	781b      	ldrb	r3, [r3, #0]
 800c3f0:	009b      	lsls	r3, r3, #2
 800c3f2:	441a      	add	r2, r3
 800c3f4:	69bb      	ldr	r3, [r7, #24]
 800c3f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c3fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3fe:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c400:	687a      	ldr	r2, [r7, #4]
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	781b      	ldrb	r3, [r3, #0]
 800c406:	009b      	lsls	r3, r3, #2
 800c408:	4413      	add	r3, r2
 800c40a:	681a      	ldr	r2, [r3, #0]
 800c40c:	4b4a      	ldr	r3, [pc, #296]	@ (800c538 <USB_DeactivateEndpoint+0x1fc>)
 800c40e:	4013      	ands	r3, r2
 800c410:	617b      	str	r3, [r7, #20]
 800c412:	687a      	ldr	r2, [r7, #4]
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	781b      	ldrb	r3, [r3, #0]
 800c418:	009b      	lsls	r3, r3, #2
 800c41a:	441a      	add	r2, r3
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c422:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c426:	6013      	str	r3, [r2, #0]
 800c428:	e104      	b.n	800c634 <USB_DeactivateEndpoint+0x2f8>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	785b      	ldrb	r3, [r3, #1]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	f040 8084 	bne.w	800c53c <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c434:	687a      	ldr	r2, [r7, #4]
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	781b      	ldrb	r3, [r3, #0]
 800c43a:	009b      	lsls	r3, r3, #2
 800c43c:	4413      	add	r3, r2
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c444:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d013      	beq.n	800c474 <USB_DeactivateEndpoint+0x138>
 800c44c:	687a      	ldr	r2, [r7, #4]
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	781b      	ldrb	r3, [r3, #0]
 800c452:	009b      	lsls	r3, r3, #2
 800c454:	4413      	add	r3, r2
 800c456:	681a      	ldr	r2, [r3, #0]
 800c458:	4b35      	ldr	r3, [pc, #212]	@ (800c530 <USB_DeactivateEndpoint+0x1f4>)
 800c45a:	4013      	ands	r3, r2
 800c45c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c45e:	687a      	ldr	r2, [r7, #4]
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	781b      	ldrb	r3, [r3, #0]
 800c464:	009b      	lsls	r3, r3, #2
 800c466:	441a      	add	r2, r3
 800c468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c46a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c46e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c472:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c474:	687a      	ldr	r2, [r7, #4]
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	781b      	ldrb	r3, [r3, #0]
 800c47a:	009b      	lsls	r3, r3, #2
 800c47c:	4413      	add	r3, r2
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	633b      	str	r3, [r7, #48]	@ 0x30
 800c482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d013      	beq.n	800c4b4 <USB_DeactivateEndpoint+0x178>
 800c48c:	687a      	ldr	r2, [r7, #4]
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	781b      	ldrb	r3, [r3, #0]
 800c492:	009b      	lsls	r3, r3, #2
 800c494:	4413      	add	r3, r2
 800c496:	681a      	ldr	r2, [r3, #0]
 800c498:	4b25      	ldr	r3, [pc, #148]	@ (800c530 <USB_DeactivateEndpoint+0x1f4>)
 800c49a:	4013      	ands	r3, r2
 800c49c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c49e:	687a      	ldr	r2, [r7, #4]
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	781b      	ldrb	r3, [r3, #0]
 800c4a4:	009b      	lsls	r3, r3, #2
 800c4a6:	441a      	add	r2, r3
 800c4a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c4ae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c4b2:	6013      	str	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800c4b4:	687a      	ldr	r2, [r7, #4]
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	781b      	ldrb	r3, [r3, #0]
 800c4ba:	009b      	lsls	r3, r3, #2
 800c4bc:	4413      	add	r3, r2
 800c4be:	681a      	ldr	r2, [r3, #0]
 800c4c0:	4b1b      	ldr	r3, [pc, #108]	@ (800c530 <USB_DeactivateEndpoint+0x1f4>)
 800c4c2:	4013      	ands	r3, r2
 800c4c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c4c6:	687a      	ldr	r2, [r7, #4]
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	781b      	ldrb	r3, [r3, #0]
 800c4cc:	009b      	lsls	r3, r3, #2
 800c4ce:	441a      	add	r2, r3
 800c4d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c4d6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c4da:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c4dc:	687a      	ldr	r2, [r7, #4]
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	781b      	ldrb	r3, [r3, #0]
 800c4e2:	009b      	lsls	r3, r3, #2
 800c4e4:	4413      	add	r3, r2
 800c4e6:	681a      	ldr	r2, [r3, #0]
 800c4e8:	4b13      	ldr	r3, [pc, #76]	@ (800c538 <USB_DeactivateEndpoint+0x1fc>)
 800c4ea:	4013      	ands	r3, r2
 800c4ec:	627b      	str	r3, [r7, #36]	@ 0x24
 800c4ee:	687a      	ldr	r2, [r7, #4]
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	781b      	ldrb	r3, [r3, #0]
 800c4f4:	009b      	lsls	r3, r3, #2
 800c4f6:	441a      	add	r2, r3
 800c4f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c4fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c502:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c504:	687a      	ldr	r2, [r7, #4]
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	781b      	ldrb	r3, [r3, #0]
 800c50a:	009b      	lsls	r3, r3, #2
 800c50c:	4413      	add	r3, r2
 800c50e:	681a      	ldr	r2, [r3, #0]
 800c510:	4b08      	ldr	r3, [pc, #32]	@ (800c534 <USB_DeactivateEndpoint+0x1f8>)
 800c512:	4013      	ands	r3, r2
 800c514:	623b      	str	r3, [r7, #32]
 800c516:	687a      	ldr	r2, [r7, #4]
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	781b      	ldrb	r3, [r3, #0]
 800c51c:	009b      	lsls	r3, r3, #2
 800c51e:	441a      	add	r2, r3
 800c520:	6a3b      	ldr	r3, [r7, #32]
 800c522:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c526:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c52a:	6013      	str	r3, [r2, #0]
 800c52c:	e082      	b.n	800c634 <USB_DeactivateEndpoint+0x2f8>
 800c52e:	bf00      	nop
 800c530:	07ff8f8f 	.word	0x07ff8f8f
 800c534:	07ff8fbf 	.word	0x07ff8fbf
 800c538:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c53c:	687a      	ldr	r2, [r7, #4]
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	781b      	ldrb	r3, [r3, #0]
 800c542:	009b      	lsls	r3, r3, #2
 800c544:	4413      	add	r3, r2
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	657b      	str	r3, [r7, #84]	@ 0x54
 800c54a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c54c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c550:	2b00      	cmp	r3, #0
 800c552:	d013      	beq.n	800c57c <USB_DeactivateEndpoint+0x240>
 800c554:	687a      	ldr	r2, [r7, #4]
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	781b      	ldrb	r3, [r3, #0]
 800c55a:	009b      	lsls	r3, r3, #2
 800c55c:	4413      	add	r3, r2
 800c55e:	681a      	ldr	r2, [r3, #0]
 800c560:	4b38      	ldr	r3, [pc, #224]	@ (800c644 <USB_DeactivateEndpoint+0x308>)
 800c562:	4013      	ands	r3, r2
 800c564:	653b      	str	r3, [r7, #80]	@ 0x50
 800c566:	687a      	ldr	r2, [r7, #4]
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	781b      	ldrb	r3, [r3, #0]
 800c56c:	009b      	lsls	r3, r3, #2
 800c56e:	441a      	add	r2, r3
 800c570:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c572:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c576:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c57a:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c57c:	687a      	ldr	r2, [r7, #4]
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	781b      	ldrb	r3, [r3, #0]
 800c582:	009b      	lsls	r3, r3, #2
 800c584:	4413      	add	r3, r2
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c58a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c58c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c590:	2b00      	cmp	r3, #0
 800c592:	d013      	beq.n	800c5bc <USB_DeactivateEndpoint+0x280>
 800c594:	687a      	ldr	r2, [r7, #4]
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	781b      	ldrb	r3, [r3, #0]
 800c59a:	009b      	lsls	r3, r3, #2
 800c59c:	4413      	add	r3, r2
 800c59e:	681a      	ldr	r2, [r3, #0]
 800c5a0:	4b28      	ldr	r3, [pc, #160]	@ (800c644 <USB_DeactivateEndpoint+0x308>)
 800c5a2:	4013      	ands	r3, r2
 800c5a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c5a6:	687a      	ldr	r2, [r7, #4]
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	781b      	ldrb	r3, [r3, #0]
 800c5ac:	009b      	lsls	r3, r3, #2
 800c5ae:	441a      	add	r2, r3
 800c5b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c5b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c5b6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c5ba:	6013      	str	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800c5bc:	687a      	ldr	r2, [r7, #4]
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	781b      	ldrb	r3, [r3, #0]
 800c5c2:	009b      	lsls	r3, r3, #2
 800c5c4:	4413      	add	r3, r2
 800c5c6:	681a      	ldr	r2, [r3, #0]
 800c5c8:	4b1e      	ldr	r3, [pc, #120]	@ (800c644 <USB_DeactivateEndpoint+0x308>)
 800c5ca:	4013      	ands	r3, r2
 800c5cc:	647b      	str	r3, [r7, #68]	@ 0x44
 800c5ce:	687a      	ldr	r2, [r7, #4]
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	781b      	ldrb	r3, [r3, #0]
 800c5d4:	009b      	lsls	r3, r3, #2
 800c5d6:	441a      	add	r2, r3
 800c5d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c5da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c5de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5e2:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c5e4:	687a      	ldr	r2, [r7, #4]
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	781b      	ldrb	r3, [r3, #0]
 800c5ea:	009b      	lsls	r3, r3, #2
 800c5ec:	4413      	add	r3, r2
 800c5ee:	681a      	ldr	r2, [r3, #0]
 800c5f0:	4b15      	ldr	r3, [pc, #84]	@ (800c648 <USB_DeactivateEndpoint+0x30c>)
 800c5f2:	4013      	ands	r3, r2
 800c5f4:	643b      	str	r3, [r7, #64]	@ 0x40
 800c5f6:	687a      	ldr	r2, [r7, #4]
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	781b      	ldrb	r3, [r3, #0]
 800c5fc:	009b      	lsls	r3, r3, #2
 800c5fe:	441a      	add	r2, r3
 800c600:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c602:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c606:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c60a:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c60c:	687a      	ldr	r2, [r7, #4]
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	781b      	ldrb	r3, [r3, #0]
 800c612:	009b      	lsls	r3, r3, #2
 800c614:	4413      	add	r3, r2
 800c616:	681a      	ldr	r2, [r3, #0]
 800c618:	4b0c      	ldr	r3, [pc, #48]	@ (800c64c <USB_DeactivateEndpoint+0x310>)
 800c61a:	4013      	ands	r3, r2
 800c61c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c61e:	687a      	ldr	r2, [r7, #4]
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	781b      	ldrb	r3, [r3, #0]
 800c624:	009b      	lsls	r3, r3, #2
 800c626:	441a      	add	r2, r3
 800c628:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c62a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c62e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c632:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800c634:	2300      	movs	r3, #0
}
 800c636:	4618      	mov	r0, r3
 800c638:	375c      	adds	r7, #92	@ 0x5c
 800c63a:	46bd      	mov	sp, r7
 800c63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c640:	4770      	bx	lr
 800c642:	bf00      	nop
 800c644:	07ff8f8f 	.word	0x07ff8f8f
 800c648:	07ff8fbf 	.word	0x07ff8fbf
 800c64c:	07ffbf8f 	.word	0x07ffbf8f

0800c650 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b096      	sub	sp, #88	@ 0x58
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
 800c658:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	785b      	ldrb	r3, [r3, #1]
 800c65e:	2b01      	cmp	r3, #1
 800c660:	f040 84ed 	bne.w	800d03e <USB_EPStartXfer+0x9ee>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	699a      	ldr	r2, [r3, #24]
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	691b      	ldr	r3, [r3, #16]
 800c66c:	429a      	cmp	r2, r3
 800c66e:	d903      	bls.n	800c678 <USB_EPStartXfer+0x28>
    {
      len = ep->maxpacket;
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	691b      	ldr	r3, [r3, #16]
 800c674:	657b      	str	r3, [r7, #84]	@ 0x54
 800c676:	e002      	b.n	800c67e <USB_EPStartXfer+0x2e>
    }
    else
    {
      len = ep->xfer_len;
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	699b      	ldr	r3, [r3, #24]
 800c67c:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	7b1b      	ldrb	r3, [r3, #12]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d12e      	bne.n	800c6e4 <USB_EPStartXfer+0x94>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	6959      	ldr	r1, [r3, #20]
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	88da      	ldrh	r2, [r3, #6]
 800c68e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c690:	b29b      	uxth	r3, r3
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f001 f963 	bl	800d95e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	781b      	ldrb	r3, [r3, #0]
 800c69c:	00db      	lsls	r3, r3, #3
 800c69e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c6a2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c6a6:	681a      	ldr	r2, [r3, #0]
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	781b      	ldrb	r3, [r3, #0]
 800c6ac:	00db      	lsls	r3, r3, #3
 800c6ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c6b2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c6b6:	b292      	uxth	r2, r2
 800c6b8:	601a      	str	r2, [r3, #0]
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	781b      	ldrb	r3, [r3, #0]
 800c6be:	00db      	lsls	r3, r3, #3
 800c6c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c6c4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c6c8:	6819      	ldr	r1, [r3, #0]
 800c6ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6cc:	041a      	lsls	r2, r3, #16
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	781b      	ldrb	r3, [r3, #0]
 800c6d2:	00db      	lsls	r3, r3, #3
 800c6d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c6d8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c6dc:	430a      	orrs	r2, r1
 800c6de:	601a      	str	r2, [r3, #0]
 800c6e0:	f000 bc90 	b.w	800d004 <USB_EPStartXfer+0x9b4>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	78db      	ldrb	r3, [r3, #3]
 800c6e8:	2b02      	cmp	r3, #2
 800c6ea:	f040 8332 	bne.w	800cd52 <USB_EPStartXfer+0x702>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	6a1a      	ldr	r2, [r3, #32]
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	691b      	ldr	r3, [r3, #16]
 800c6f6:	429a      	cmp	r2, r3
 800c6f8:	f240 82e4 	bls.w	800ccc4 <USB_EPStartXfer+0x674>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c6fc:	687a      	ldr	r2, [r7, #4]
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	781b      	ldrb	r3, [r3, #0]
 800c702:	009b      	lsls	r3, r3, #2
 800c704:	4413      	add	r3, r2
 800c706:	681a      	ldr	r2, [r3, #0]
 800c708:	4ba4      	ldr	r3, [pc, #656]	@ (800c99c <USB_EPStartXfer+0x34c>)
 800c70a:	4013      	ands	r3, r2
 800c70c:	613b      	str	r3, [r7, #16]
 800c70e:	687a      	ldr	r2, [r7, #4]
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	009b      	lsls	r3, r3, #2
 800c716:	441a      	add	r2, r3
 800c718:	693b      	ldr	r3, [r7, #16]
 800c71a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c71e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c722:	6013      	str	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	6a1a      	ldr	r2, [r3, #32]
 800c728:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c72a:	1ad2      	subs	r2, r2, r3
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c730:	687a      	ldr	r2, [r7, #4]
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	781b      	ldrb	r3, [r3, #0]
 800c736:	009b      	lsls	r3, r3, #2
 800c738:	4413      	add	r3, r2
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c740:	2b00      	cmp	r3, #0
 800c742:	f000 8161 	beq.w	800ca08 <USB_EPStartXfer+0x3b8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	785b      	ldrb	r3, [r3, #1]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d16a      	bne.n	800c824 <USB_EPStartXfer+0x1d4>
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	00db      	lsls	r3, r3, #3
 800c754:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c758:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c75c:	685a      	ldr	r2, [r3, #4]
 800c75e:	683b      	ldr	r3, [r7, #0]
 800c760:	781b      	ldrb	r3, [r3, #0]
 800c762:	00db      	lsls	r3, r3, #3
 800c764:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c768:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c76c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c770:	605a      	str	r2, [r3, #4]
 800c772:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c774:	2b00      	cmp	r3, #0
 800c776:	d112      	bne.n	800c79e <USB_EPStartXfer+0x14e>
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	781b      	ldrb	r3, [r3, #0]
 800c77c:	00db      	lsls	r3, r3, #3
 800c77e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c782:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c786:	685a      	ldr	r2, [r3, #4]
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	781b      	ldrb	r3, [r3, #0]
 800c78c:	00db      	lsls	r3, r3, #3
 800c78e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c792:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c796:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c79a:	605a      	str	r2, [r3, #4]
 800c79c:	e06a      	b.n	800c874 <USB_EPStartXfer+0x224>
 800c79e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c7a0:	2b3e      	cmp	r3, #62	@ 0x3e
 800c7a2:	d81e      	bhi.n	800c7e2 <USB_EPStartXfer+0x192>
 800c7a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c7a6:	085b      	lsrs	r3, r3, #1
 800c7a8:	653b      	str	r3, [r7, #80]	@ 0x50
 800c7aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c7ac:	f003 0301 	and.w	r3, r3, #1
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d002      	beq.n	800c7ba <USB_EPStartXfer+0x16a>
 800c7b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c7b6:	3301      	adds	r3, #1
 800c7b8:	653b      	str	r3, [r7, #80]	@ 0x50
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	781b      	ldrb	r3, [r3, #0]
 800c7be:	00db      	lsls	r3, r3, #3
 800c7c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c7c4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c7c8:	6859      	ldr	r1, [r3, #4]
 800c7ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c7cc:	069a      	lsls	r2, r3, #26
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	781b      	ldrb	r3, [r3, #0]
 800c7d2:	00db      	lsls	r3, r3, #3
 800c7d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c7d8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c7dc:	430a      	orrs	r2, r1
 800c7de:	605a      	str	r2, [r3, #4]
 800c7e0:	e048      	b.n	800c874 <USB_EPStartXfer+0x224>
 800c7e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c7e4:	095b      	lsrs	r3, r3, #5
 800c7e6:	653b      	str	r3, [r7, #80]	@ 0x50
 800c7e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c7ea:	f003 031f 	and.w	r3, r3, #31
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d102      	bne.n	800c7f8 <USB_EPStartXfer+0x1a8>
 800c7f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c7f4:	3b01      	subs	r3, #1
 800c7f6:	653b      	str	r3, [r7, #80]	@ 0x50
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	781b      	ldrb	r3, [r3, #0]
 800c7fc:	00db      	lsls	r3, r3, #3
 800c7fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c802:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c806:	685a      	ldr	r2, [r3, #4]
 800c808:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c80a:	069b      	lsls	r3, r3, #26
 800c80c:	431a      	orrs	r2, r3
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	781b      	ldrb	r3, [r3, #0]
 800c812:	00db      	lsls	r3, r3, #3
 800c814:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c818:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c81c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c820:	605a      	str	r2, [r3, #4]
 800c822:	e027      	b.n	800c874 <USB_EPStartXfer+0x224>
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	785b      	ldrb	r3, [r3, #1]
 800c828:	2b01      	cmp	r3, #1
 800c82a:	d123      	bne.n	800c874 <USB_EPStartXfer+0x224>
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	781b      	ldrb	r3, [r3, #0]
 800c830:	00db      	lsls	r3, r3, #3
 800c832:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c836:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c83a:	685a      	ldr	r2, [r3, #4]
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	781b      	ldrb	r3, [r3, #0]
 800c840:	00db      	lsls	r3, r3, #3
 800c842:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c846:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c84a:	b292      	uxth	r2, r2
 800c84c:	605a      	str	r2, [r3, #4]
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	781b      	ldrb	r3, [r3, #0]
 800c852:	00db      	lsls	r3, r3, #3
 800c854:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c858:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c85c:	6859      	ldr	r1, [r3, #4]
 800c85e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c860:	041a      	lsls	r2, r3, #16
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	781b      	ldrb	r3, [r3, #0]
 800c866:	00db      	lsls	r3, r3, #3
 800c868:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c86c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c870:	430a      	orrs	r2, r1
 800c872:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	895b      	ldrh	r3, [r3, #10]
 800c878:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	6959      	ldr	r1, [r3, #20]
 800c87e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c880:	b29b      	uxth	r3, r3
 800c882:	8b7a      	ldrh	r2, [r7, #26]
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	f001 f86a 	bl	800d95e <USB_WritePMA>
            ep->xfer_buff += len;
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	695a      	ldr	r2, [r3, #20]
 800c88e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c890:	441a      	add	r2, r3
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	6a1a      	ldr	r2, [r3, #32]
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	691b      	ldr	r3, [r3, #16]
 800c89e:	429a      	cmp	r2, r3
 800c8a0:	d906      	bls.n	800c8b0 <USB_EPStartXfer+0x260>
            {
              ep->xfer_len_db -= len;
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	6a1a      	ldr	r2, [r3, #32]
 800c8a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c8a8:	1ad2      	subs	r2, r2, r3
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	621a      	str	r2, [r3, #32]
 800c8ae:	e005      	b.n	800c8bc <USB_EPStartXfer+0x26c>
            }
            else
            {
              len = ep->xfer_len_db;
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	6a1b      	ldr	r3, [r3, #32]
 800c8b4:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	785b      	ldrb	r3, [r3, #1]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d16d      	bne.n	800c9a0 <USB_EPStartXfer+0x350>
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	781b      	ldrb	r3, [r3, #0]
 800c8c8:	00db      	lsls	r3, r3, #3
 800c8ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c8ce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c8d2:	681a      	ldr	r2, [r3, #0]
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	781b      	ldrb	r3, [r3, #0]
 800c8d8:	00db      	lsls	r3, r3, #3
 800c8da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c8de:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c8e2:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c8e6:	601a      	str	r2, [r3, #0]
 800c8e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d112      	bne.n	800c914 <USB_EPStartXfer+0x2c4>
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	781b      	ldrb	r3, [r3, #0]
 800c8f2:	00db      	lsls	r3, r3, #3
 800c8f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c8f8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c8fc:	681a      	ldr	r2, [r3, #0]
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	00db      	lsls	r3, r3, #3
 800c904:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c908:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c90c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c910:	601a      	str	r2, [r3, #0]
 800c912:	e06d      	b.n	800c9f0 <USB_EPStartXfer+0x3a0>
 800c914:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c916:	2b3e      	cmp	r3, #62	@ 0x3e
 800c918:	d81e      	bhi.n	800c958 <USB_EPStartXfer+0x308>
 800c91a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c91c:	085b      	lsrs	r3, r3, #1
 800c91e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c920:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c922:	f003 0301 	and.w	r3, r3, #1
 800c926:	2b00      	cmp	r3, #0
 800c928:	d002      	beq.n	800c930 <USB_EPStartXfer+0x2e0>
 800c92a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c92c:	3301      	adds	r3, #1
 800c92e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	781b      	ldrb	r3, [r3, #0]
 800c934:	00db      	lsls	r3, r3, #3
 800c936:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c93a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c93e:	6819      	ldr	r1, [r3, #0]
 800c940:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c942:	069a      	lsls	r2, r3, #26
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	781b      	ldrb	r3, [r3, #0]
 800c948:	00db      	lsls	r3, r3, #3
 800c94a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c94e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c952:	430a      	orrs	r2, r1
 800c954:	601a      	str	r2, [r3, #0]
 800c956:	e04b      	b.n	800c9f0 <USB_EPStartXfer+0x3a0>
 800c958:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c95a:	095b      	lsrs	r3, r3, #5
 800c95c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c95e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c960:	f003 031f 	and.w	r3, r3, #31
 800c964:	2b00      	cmp	r3, #0
 800c966:	d102      	bne.n	800c96e <USB_EPStartXfer+0x31e>
 800c968:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c96a:	3b01      	subs	r3, #1
 800c96c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	781b      	ldrb	r3, [r3, #0]
 800c972:	00db      	lsls	r3, r3, #3
 800c974:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c978:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c97c:	681a      	ldr	r2, [r3, #0]
 800c97e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c980:	069b      	lsls	r3, r3, #26
 800c982:	431a      	orrs	r2, r3
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	781b      	ldrb	r3, [r3, #0]
 800c988:	00db      	lsls	r3, r3, #3
 800c98a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c98e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c992:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c996:	601a      	str	r2, [r3, #0]
 800c998:	e02a      	b.n	800c9f0 <USB_EPStartXfer+0x3a0>
 800c99a:	bf00      	nop
 800c99c:	07ff8f8f 	.word	0x07ff8f8f
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	785b      	ldrb	r3, [r3, #1]
 800c9a4:	2b01      	cmp	r3, #1
 800c9a6:	d123      	bne.n	800c9f0 <USB_EPStartXfer+0x3a0>
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	781b      	ldrb	r3, [r3, #0]
 800c9ac:	00db      	lsls	r3, r3, #3
 800c9ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c9b2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c9b6:	681a      	ldr	r2, [r3, #0]
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	781b      	ldrb	r3, [r3, #0]
 800c9bc:	00db      	lsls	r3, r3, #3
 800c9be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c9c2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c9c6:	b292      	uxth	r2, r2
 800c9c8:	601a      	str	r2, [r3, #0]
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	781b      	ldrb	r3, [r3, #0]
 800c9ce:	00db      	lsls	r3, r3, #3
 800c9d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c9d4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c9d8:	6819      	ldr	r1, [r3, #0]
 800c9da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9dc:	041a      	lsls	r2, r3, #16
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	781b      	ldrb	r3, [r3, #0]
 800c9e2:	00db      	lsls	r3, r3, #3
 800c9e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c9e8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c9ec:	430a      	orrs	r2, r1
 800c9ee:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	891b      	ldrh	r3, [r3, #8]
 800c9f4:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	6959      	ldr	r1, [r3, #20]
 800c9fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9fc:	b29b      	uxth	r3, r3
 800c9fe:	8b7a      	ldrh	r2, [r7, #26]
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	f000 ffac 	bl	800d95e <USB_WritePMA>
 800ca06:	e2fd      	b.n	800d004 <USB_EPStartXfer+0x9b4>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	785b      	ldrb	r3, [r3, #1]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d16a      	bne.n	800cae6 <USB_EPStartXfer+0x496>
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	781b      	ldrb	r3, [r3, #0]
 800ca14:	00db      	lsls	r3, r3, #3
 800ca16:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca1a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca1e:	681a      	ldr	r2, [r3, #0]
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	781b      	ldrb	r3, [r3, #0]
 800ca24:	00db      	lsls	r3, r3, #3
 800ca26:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca2a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca2e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800ca32:	601a      	str	r2, [r3, #0]
 800ca34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d112      	bne.n	800ca60 <USB_EPStartXfer+0x410>
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	781b      	ldrb	r3, [r3, #0]
 800ca3e:	00db      	lsls	r3, r3, #3
 800ca40:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca44:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca48:	681a      	ldr	r2, [r3, #0]
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	781b      	ldrb	r3, [r3, #0]
 800ca4e:	00db      	lsls	r3, r3, #3
 800ca50:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca54:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca58:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ca5c:	601a      	str	r2, [r3, #0]
 800ca5e:	e06a      	b.n	800cb36 <USB_EPStartXfer+0x4e6>
 800ca60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca62:	2b3e      	cmp	r3, #62	@ 0x3e
 800ca64:	d81e      	bhi.n	800caa4 <USB_EPStartXfer+0x454>
 800ca66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca68:	085b      	lsrs	r3, r3, #1
 800ca6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ca6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca6e:	f003 0301 	and.w	r3, r3, #1
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d002      	beq.n	800ca7c <USB_EPStartXfer+0x42c>
 800ca76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca78:	3301      	adds	r3, #1
 800ca7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	781b      	ldrb	r3, [r3, #0]
 800ca80:	00db      	lsls	r3, r3, #3
 800ca82:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca86:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca8a:	6819      	ldr	r1, [r3, #0]
 800ca8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca8e:	069a      	lsls	r2, r3, #26
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	781b      	ldrb	r3, [r3, #0]
 800ca94:	00db      	lsls	r3, r3, #3
 800ca96:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca9a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca9e:	430a      	orrs	r2, r1
 800caa0:	601a      	str	r2, [r3, #0]
 800caa2:	e048      	b.n	800cb36 <USB_EPStartXfer+0x4e6>
 800caa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800caa6:	095b      	lsrs	r3, r3, #5
 800caa8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800caaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800caac:	f003 031f 	and.w	r3, r3, #31
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d102      	bne.n	800caba <USB_EPStartXfer+0x46a>
 800cab4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cab6:	3b01      	subs	r3, #1
 800cab8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	781b      	ldrb	r3, [r3, #0]
 800cabe:	00db      	lsls	r3, r3, #3
 800cac0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cac4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cac8:	681a      	ldr	r2, [r3, #0]
 800caca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cacc:	069b      	lsls	r3, r3, #26
 800cace:	431a      	orrs	r2, r3
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	781b      	ldrb	r3, [r3, #0]
 800cad4:	00db      	lsls	r3, r3, #3
 800cad6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cada:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cade:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cae2:	601a      	str	r2, [r3, #0]
 800cae4:	e027      	b.n	800cb36 <USB_EPStartXfer+0x4e6>
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	785b      	ldrb	r3, [r3, #1]
 800caea:	2b01      	cmp	r3, #1
 800caec:	d123      	bne.n	800cb36 <USB_EPStartXfer+0x4e6>
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	781b      	ldrb	r3, [r3, #0]
 800caf2:	00db      	lsls	r3, r3, #3
 800caf4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800caf8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cafc:	681a      	ldr	r2, [r3, #0]
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	781b      	ldrb	r3, [r3, #0]
 800cb02:	00db      	lsls	r3, r3, #3
 800cb04:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb08:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb0c:	b292      	uxth	r2, r2
 800cb0e:	601a      	str	r2, [r3, #0]
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	781b      	ldrb	r3, [r3, #0]
 800cb14:	00db      	lsls	r3, r3, #3
 800cb16:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb1a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb1e:	6819      	ldr	r1, [r3, #0]
 800cb20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb22:	041a      	lsls	r2, r3, #16
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	781b      	ldrb	r3, [r3, #0]
 800cb28:	00db      	lsls	r3, r3, #3
 800cb2a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb2e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb32:	430a      	orrs	r2, r1
 800cb34:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	891b      	ldrh	r3, [r3, #8]
 800cb3a:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	6959      	ldr	r1, [r3, #20]
 800cb40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb42:	b29b      	uxth	r3, r3
 800cb44:	8b7a      	ldrh	r2, [r7, #26]
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f000 ff09 	bl	800d95e <USB_WritePMA>
            ep->xfer_buff += len;
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	695a      	ldr	r2, [r3, #20]
 800cb50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb52:	441a      	add	r2, r3
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	6a1a      	ldr	r2, [r3, #32]
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	691b      	ldr	r3, [r3, #16]
 800cb60:	429a      	cmp	r2, r3
 800cb62:	d906      	bls.n	800cb72 <USB_EPStartXfer+0x522>
            {
              ep->xfer_len_db -= len;
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	6a1a      	ldr	r2, [r3, #32]
 800cb68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb6a:	1ad2      	subs	r2, r2, r3
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	621a      	str	r2, [r3, #32]
 800cb70:	e005      	b.n	800cb7e <USB_EPStartXfer+0x52e>
            }
            else
            {
              len = ep->xfer_len_db;
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	6a1b      	ldr	r3, [r3, #32]
 800cb76:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	785b      	ldrb	r3, [r3, #1]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d16a      	bne.n	800cc5c <USB_EPStartXfer+0x60c>
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	781b      	ldrb	r3, [r3, #0]
 800cb8a:	00db      	lsls	r3, r3, #3
 800cb8c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb90:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb94:	685a      	ldr	r2, [r3, #4]
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	781b      	ldrb	r3, [r3, #0]
 800cb9a:	00db      	lsls	r3, r3, #3
 800cb9c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cba0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cba4:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800cba8:	605a      	str	r2, [r3, #4]
 800cbaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d112      	bne.n	800cbd6 <USB_EPStartXfer+0x586>
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	781b      	ldrb	r3, [r3, #0]
 800cbb4:	00db      	lsls	r3, r3, #3
 800cbb6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cbba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cbbe:	685a      	ldr	r2, [r3, #4]
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	781b      	ldrb	r3, [r3, #0]
 800cbc4:	00db      	lsls	r3, r3, #3
 800cbc6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cbca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cbce:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cbd2:	605a      	str	r2, [r3, #4]
 800cbd4:	e06a      	b.n	800ccac <USB_EPStartXfer+0x65c>
 800cbd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cbd8:	2b3e      	cmp	r3, #62	@ 0x3e
 800cbda:	d81e      	bhi.n	800cc1a <USB_EPStartXfer+0x5ca>
 800cbdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cbde:	085b      	lsrs	r3, r3, #1
 800cbe0:	647b      	str	r3, [r7, #68]	@ 0x44
 800cbe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cbe4:	f003 0301 	and.w	r3, r3, #1
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d002      	beq.n	800cbf2 <USB_EPStartXfer+0x5a2>
 800cbec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbee:	3301      	adds	r3, #1
 800cbf0:	647b      	str	r3, [r7, #68]	@ 0x44
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	781b      	ldrb	r3, [r3, #0]
 800cbf6:	00db      	lsls	r3, r3, #3
 800cbf8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cbfc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc00:	6859      	ldr	r1, [r3, #4]
 800cc02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc04:	069a      	lsls	r2, r3, #26
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	781b      	ldrb	r3, [r3, #0]
 800cc0a:	00db      	lsls	r3, r3, #3
 800cc0c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc10:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc14:	430a      	orrs	r2, r1
 800cc16:	605a      	str	r2, [r3, #4]
 800cc18:	e048      	b.n	800ccac <USB_EPStartXfer+0x65c>
 800cc1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc1c:	095b      	lsrs	r3, r3, #5
 800cc1e:	647b      	str	r3, [r7, #68]	@ 0x44
 800cc20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc22:	f003 031f 	and.w	r3, r3, #31
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d102      	bne.n	800cc30 <USB_EPStartXfer+0x5e0>
 800cc2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc2c:	3b01      	subs	r3, #1
 800cc2e:	647b      	str	r3, [r7, #68]	@ 0x44
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	781b      	ldrb	r3, [r3, #0]
 800cc34:	00db      	lsls	r3, r3, #3
 800cc36:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc3a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc3e:	685a      	ldr	r2, [r3, #4]
 800cc40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc42:	069b      	lsls	r3, r3, #26
 800cc44:	431a      	orrs	r2, r3
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	781b      	ldrb	r3, [r3, #0]
 800cc4a:	00db      	lsls	r3, r3, #3
 800cc4c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc50:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc54:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cc58:	605a      	str	r2, [r3, #4]
 800cc5a:	e027      	b.n	800ccac <USB_EPStartXfer+0x65c>
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	785b      	ldrb	r3, [r3, #1]
 800cc60:	2b01      	cmp	r3, #1
 800cc62:	d123      	bne.n	800ccac <USB_EPStartXfer+0x65c>
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	781b      	ldrb	r3, [r3, #0]
 800cc68:	00db      	lsls	r3, r3, #3
 800cc6a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc6e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc72:	685a      	ldr	r2, [r3, #4]
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	781b      	ldrb	r3, [r3, #0]
 800cc78:	00db      	lsls	r3, r3, #3
 800cc7a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc7e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc82:	b292      	uxth	r2, r2
 800cc84:	605a      	str	r2, [r3, #4]
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	781b      	ldrb	r3, [r3, #0]
 800cc8a:	00db      	lsls	r3, r3, #3
 800cc8c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc90:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc94:	6859      	ldr	r1, [r3, #4]
 800cc96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc98:	041a      	lsls	r2, r3, #16
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	781b      	ldrb	r3, [r3, #0]
 800cc9e:	00db      	lsls	r3, r3, #3
 800cca0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cca4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cca8:	430a      	orrs	r2, r1
 800ccaa:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	895b      	ldrh	r3, [r3, #10]
 800ccb0:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	6959      	ldr	r1, [r3, #20]
 800ccb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ccb8:	b29b      	uxth	r3, r3
 800ccba:	8b7a      	ldrh	r2, [r7, #26]
 800ccbc:	6878      	ldr	r0, [r7, #4]
 800ccbe:	f000 fe4e 	bl	800d95e <USB_WritePMA>
 800ccc2:	e19f      	b.n	800d004 <USB_EPStartXfer+0x9b4>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	6a1b      	ldr	r3, [r3, #32]
 800ccc8:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800ccca:	687a      	ldr	r2, [r7, #4]
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	781b      	ldrb	r3, [r3, #0]
 800ccd0:	009b      	lsls	r3, r3, #2
 800ccd2:	4413      	add	r3, r2
 800ccd4:	681a      	ldr	r2, [r3, #0]
 800ccd6:	4ba0      	ldr	r3, [pc, #640]	@ (800cf58 <USB_EPStartXfer+0x908>)
 800ccd8:	4013      	ands	r3, r2
 800ccda:	617b      	str	r3, [r7, #20]
 800ccdc:	687a      	ldr	r2, [r7, #4]
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	781b      	ldrb	r3, [r3, #0]
 800cce2:	009b      	lsls	r3, r3, #2
 800cce4:	441a      	add	r2, r3
 800cce6:	697b      	ldr	r3, [r7, #20]
 800cce8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ccec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ccf0:	6013      	str	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	781b      	ldrb	r3, [r3, #0]
 800ccf6:	00db      	lsls	r3, r3, #3
 800ccf8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ccfc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd00:	681a      	ldr	r2, [r3, #0]
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	781b      	ldrb	r3, [r3, #0]
 800cd06:	00db      	lsls	r3, r3, #3
 800cd08:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd0c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd10:	b292      	uxth	r2, r2
 800cd12:	601a      	str	r2, [r3, #0]
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	781b      	ldrb	r3, [r3, #0]
 800cd18:	00db      	lsls	r3, r3, #3
 800cd1a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd1e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd22:	6819      	ldr	r1, [r3, #0]
 800cd24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd26:	041a      	lsls	r2, r3, #16
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	781b      	ldrb	r3, [r3, #0]
 800cd2c:	00db      	lsls	r3, r3, #3
 800cd2e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd32:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd36:	430a      	orrs	r2, r1
 800cd38:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	891b      	ldrh	r3, [r3, #8]
 800cd3e:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	6959      	ldr	r1, [r3, #20]
 800cd44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd46:	b29b      	uxth	r3, r3
 800cd48:	8b7a      	ldrh	r2, [r7, #26]
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f000 fe07 	bl	800d95e <USB_WritePMA>
 800cd50:	e158      	b.n	800d004 <USB_EPStartXfer+0x9b4>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	6a1a      	ldr	r2, [r3, #32]
 800cd56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd58:	1ad2      	subs	r2, r2, r3
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800cd5e:	687a      	ldr	r2, [r7, #4]
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	781b      	ldrb	r3, [r3, #0]
 800cd64:	009b      	lsls	r3, r3, #2
 800cd66:	4413      	add	r3, r2
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	f000 80a3 	beq.w	800ceba <USB_EPStartXfer+0x86a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	785b      	ldrb	r3, [r3, #1]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d16a      	bne.n	800ce52 <USB_EPStartXfer+0x802>
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	781b      	ldrb	r3, [r3, #0]
 800cd80:	00db      	lsls	r3, r3, #3
 800cd82:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd86:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd8a:	685a      	ldr	r2, [r3, #4]
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	781b      	ldrb	r3, [r3, #0]
 800cd90:	00db      	lsls	r3, r3, #3
 800cd92:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd96:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd9a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800cd9e:	605a      	str	r2, [r3, #4]
 800cda0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d112      	bne.n	800cdcc <USB_EPStartXfer+0x77c>
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	781b      	ldrb	r3, [r3, #0]
 800cdaa:	00db      	lsls	r3, r3, #3
 800cdac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cdb0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cdb4:	685a      	ldr	r2, [r3, #4]
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	781b      	ldrb	r3, [r3, #0]
 800cdba:	00db      	lsls	r3, r3, #3
 800cdbc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cdc0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cdc4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cdc8:	605a      	str	r2, [r3, #4]
 800cdca:	e06a      	b.n	800cea2 <USB_EPStartXfer+0x852>
 800cdcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cdce:	2b3e      	cmp	r3, #62	@ 0x3e
 800cdd0:	d81e      	bhi.n	800ce10 <USB_EPStartXfer+0x7c0>
 800cdd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cdd4:	085b      	lsrs	r3, r3, #1
 800cdd6:	643b      	str	r3, [r7, #64]	@ 0x40
 800cdd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cdda:	f003 0301 	and.w	r3, r3, #1
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d002      	beq.n	800cde8 <USB_EPStartXfer+0x798>
 800cde2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cde4:	3301      	adds	r3, #1
 800cde6:	643b      	str	r3, [r7, #64]	@ 0x40
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	781b      	ldrb	r3, [r3, #0]
 800cdec:	00db      	lsls	r3, r3, #3
 800cdee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cdf2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cdf6:	6859      	ldr	r1, [r3, #4]
 800cdf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cdfa:	069a      	lsls	r2, r3, #26
 800cdfc:	683b      	ldr	r3, [r7, #0]
 800cdfe:	781b      	ldrb	r3, [r3, #0]
 800ce00:	00db      	lsls	r3, r3, #3
 800ce02:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce06:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce0a:	430a      	orrs	r2, r1
 800ce0c:	605a      	str	r2, [r3, #4]
 800ce0e:	e048      	b.n	800cea2 <USB_EPStartXfer+0x852>
 800ce10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce12:	095b      	lsrs	r3, r3, #5
 800ce14:	643b      	str	r3, [r7, #64]	@ 0x40
 800ce16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce18:	f003 031f 	and.w	r3, r3, #31
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d102      	bne.n	800ce26 <USB_EPStartXfer+0x7d6>
 800ce20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce22:	3b01      	subs	r3, #1
 800ce24:	643b      	str	r3, [r7, #64]	@ 0x40
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	781b      	ldrb	r3, [r3, #0]
 800ce2a:	00db      	lsls	r3, r3, #3
 800ce2c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce30:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce34:	685a      	ldr	r2, [r3, #4]
 800ce36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce38:	069b      	lsls	r3, r3, #26
 800ce3a:	431a      	orrs	r2, r3
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	781b      	ldrb	r3, [r3, #0]
 800ce40:	00db      	lsls	r3, r3, #3
 800ce42:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce46:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce4a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ce4e:	605a      	str	r2, [r3, #4]
 800ce50:	e027      	b.n	800cea2 <USB_EPStartXfer+0x852>
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	785b      	ldrb	r3, [r3, #1]
 800ce56:	2b01      	cmp	r3, #1
 800ce58:	d123      	bne.n	800cea2 <USB_EPStartXfer+0x852>
 800ce5a:	683b      	ldr	r3, [r7, #0]
 800ce5c:	781b      	ldrb	r3, [r3, #0]
 800ce5e:	00db      	lsls	r3, r3, #3
 800ce60:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce64:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce68:	685a      	ldr	r2, [r3, #4]
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	781b      	ldrb	r3, [r3, #0]
 800ce6e:	00db      	lsls	r3, r3, #3
 800ce70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce74:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce78:	b292      	uxth	r2, r2
 800ce7a:	605a      	str	r2, [r3, #4]
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	781b      	ldrb	r3, [r3, #0]
 800ce80:	00db      	lsls	r3, r3, #3
 800ce82:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce86:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce8a:	6859      	ldr	r1, [r3, #4]
 800ce8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce8e:	041a      	lsls	r2, r3, #16
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	781b      	ldrb	r3, [r3, #0]
 800ce94:	00db      	lsls	r3, r3, #3
 800ce96:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce9a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce9e:	430a      	orrs	r2, r1
 800cea0:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	895b      	ldrh	r3, [r3, #10]
 800cea6:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	6959      	ldr	r1, [r3, #20]
 800ceac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ceae:	b29b      	uxth	r3, r3
 800ceb0:	8b7a      	ldrh	r2, [r7, #26]
 800ceb2:	6878      	ldr	r0, [r7, #4]
 800ceb4:	f000 fd53 	bl	800d95e <USB_WritePMA>
 800ceb8:	e0a4      	b.n	800d004 <USB_EPStartXfer+0x9b4>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	785b      	ldrb	r3, [r3, #1]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d16d      	bne.n	800cf9e <USB_EPStartXfer+0x94e>
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	781b      	ldrb	r3, [r3, #0]
 800cec6:	00db      	lsls	r3, r3, #3
 800cec8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cecc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ced0:	681a      	ldr	r2, [r3, #0]
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	781b      	ldrb	r3, [r3, #0]
 800ced6:	00db      	lsls	r3, r3, #3
 800ced8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cedc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cee0:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800cee4:	601a      	str	r2, [r3, #0]
 800cee6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d112      	bne.n	800cf12 <USB_EPStartXfer+0x8c2>
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	781b      	ldrb	r3, [r3, #0]
 800cef0:	00db      	lsls	r3, r3, #3
 800cef2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cef6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cefa:	681a      	ldr	r2, [r3, #0]
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	781b      	ldrb	r3, [r3, #0]
 800cf00:	00db      	lsls	r3, r3, #3
 800cf02:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf06:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf0a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cf0e:	601a      	str	r2, [r3, #0]
 800cf10:	e06d      	b.n	800cfee <USB_EPStartXfer+0x99e>
 800cf12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf14:	2b3e      	cmp	r3, #62	@ 0x3e
 800cf16:	d821      	bhi.n	800cf5c <USB_EPStartXfer+0x90c>
 800cf18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf1a:	085b      	lsrs	r3, r3, #1
 800cf1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cf1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf20:	f003 0301 	and.w	r3, r3, #1
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d002      	beq.n	800cf2e <USB_EPStartXfer+0x8de>
 800cf28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf2a:	3301      	adds	r3, #1
 800cf2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	781b      	ldrb	r3, [r3, #0]
 800cf32:	00db      	lsls	r3, r3, #3
 800cf34:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf38:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf3c:	6819      	ldr	r1, [r3, #0]
 800cf3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf40:	069a      	lsls	r2, r3, #26
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	781b      	ldrb	r3, [r3, #0]
 800cf46:	00db      	lsls	r3, r3, #3
 800cf48:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf4c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf50:	430a      	orrs	r2, r1
 800cf52:	601a      	str	r2, [r3, #0]
 800cf54:	e04b      	b.n	800cfee <USB_EPStartXfer+0x99e>
 800cf56:	bf00      	nop
 800cf58:	07ff8e8f 	.word	0x07ff8e8f
 800cf5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf5e:	095b      	lsrs	r3, r3, #5
 800cf60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cf62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf64:	f003 031f 	and.w	r3, r3, #31
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d102      	bne.n	800cf72 <USB_EPStartXfer+0x922>
 800cf6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf6e:	3b01      	subs	r3, #1
 800cf70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	781b      	ldrb	r3, [r3, #0]
 800cf76:	00db      	lsls	r3, r3, #3
 800cf78:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf7c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf80:	681a      	ldr	r2, [r3, #0]
 800cf82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf84:	069b      	lsls	r3, r3, #26
 800cf86:	431a      	orrs	r2, r3
 800cf88:	683b      	ldr	r3, [r7, #0]
 800cf8a:	781b      	ldrb	r3, [r3, #0]
 800cf8c:	00db      	lsls	r3, r3, #3
 800cf8e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf92:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf96:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cf9a:	601a      	str	r2, [r3, #0]
 800cf9c:	e027      	b.n	800cfee <USB_EPStartXfer+0x99e>
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	785b      	ldrb	r3, [r3, #1]
 800cfa2:	2b01      	cmp	r3, #1
 800cfa4:	d123      	bne.n	800cfee <USB_EPStartXfer+0x99e>
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	781b      	ldrb	r3, [r3, #0]
 800cfaa:	00db      	lsls	r3, r3, #3
 800cfac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cfb0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cfb4:	681a      	ldr	r2, [r3, #0]
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	781b      	ldrb	r3, [r3, #0]
 800cfba:	00db      	lsls	r3, r3, #3
 800cfbc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cfc0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cfc4:	b292      	uxth	r2, r2
 800cfc6:	601a      	str	r2, [r3, #0]
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	781b      	ldrb	r3, [r3, #0]
 800cfcc:	00db      	lsls	r3, r3, #3
 800cfce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cfd2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cfd6:	6819      	ldr	r1, [r3, #0]
 800cfd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cfda:	041a      	lsls	r2, r3, #16
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	781b      	ldrb	r3, [r3, #0]
 800cfe0:	00db      	lsls	r3, r3, #3
 800cfe2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cfe6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cfea:	430a      	orrs	r2, r1
 800cfec:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	891b      	ldrh	r3, [r3, #8]
 800cff2:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	6959      	ldr	r1, [r3, #20]
 800cff8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cffa:	b29b      	uxth	r3, r3
 800cffc:	8b7a      	ldrh	r2, [r7, #26]
 800cffe:	6878      	ldr	r0, [r7, #4]
 800d000:	f000 fcad 	bl	800d95e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800d004:	687a      	ldr	r2, [r7, #4]
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	781b      	ldrb	r3, [r3, #0]
 800d00a:	009b      	lsls	r3, r3, #2
 800d00c:	4413      	add	r3, r2
 800d00e:	681a      	ldr	r2, [r3, #0]
 800d010:	4b8b      	ldr	r3, [pc, #556]	@ (800d240 <USB_EPStartXfer+0xbf0>)
 800d012:	4013      	ands	r3, r2
 800d014:	60fb      	str	r3, [r7, #12]
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	f083 0310 	eor.w	r3, r3, #16
 800d01c:	60fb      	str	r3, [r7, #12]
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	f083 0320 	eor.w	r3, r3, #32
 800d024:	60fb      	str	r3, [r7, #12]
 800d026:	687a      	ldr	r2, [r7, #4]
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	781b      	ldrb	r3, [r3, #0]
 800d02c:	009b      	lsls	r3, r3, #2
 800d02e:	441a      	add	r2, r3
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d036:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d03a:	6013      	str	r3, [r2, #0]
 800d03c:	e36b      	b.n	800d716 <USB_EPStartXfer+0x10c6>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	7b1b      	ldrb	r3, [r3, #12]
 800d042:	2b00      	cmp	r3, #0
 800d044:	f040 8081 	bne.w	800d14a <USB_EPStartXfer+0xafa>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	699a      	ldr	r2, [r3, #24]
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	691b      	ldr	r3, [r3, #16]
 800d050:	429a      	cmp	r2, r3
 800d052:	d909      	bls.n	800d068 <USB_EPStartXfer+0xa18>
      {
        len = ep->maxpacket;
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	691b      	ldr	r3, [r3, #16]
 800d058:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 800d05a:	683b      	ldr	r3, [r7, #0]
 800d05c:	699a      	ldr	r2, [r3, #24]
 800d05e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d060:	1ad2      	subs	r2, r2, r3
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	619a      	str	r2, [r3, #24]
 800d066:	e005      	b.n	800d074 <USB_EPStartXfer+0xa24>
      }
      else
      {
        len = ep->xfer_len;
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	699b      	ldr	r3, [r3, #24]
 800d06c:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	2200      	movs	r2, #0
 800d072:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800d074:	683b      	ldr	r3, [r7, #0]
 800d076:	781b      	ldrb	r3, [r3, #0]
 800d078:	00db      	lsls	r3, r3, #3
 800d07a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d07e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d082:	685a      	ldr	r2, [r3, #4]
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	781b      	ldrb	r3, [r3, #0]
 800d088:	00db      	lsls	r3, r3, #3
 800d08a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d08e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d092:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d096:	605a      	str	r2, [r3, #4]
 800d098:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d112      	bne.n	800d0c4 <USB_EPStartXfer+0xa74>
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	781b      	ldrb	r3, [r3, #0]
 800d0a2:	00db      	lsls	r3, r3, #3
 800d0a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d0a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d0ac:	685a      	ldr	r2, [r3, #4]
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	781b      	ldrb	r3, [r3, #0]
 800d0b2:	00db      	lsls	r3, r3, #3
 800d0b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d0b8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d0bc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d0c0:	605a      	str	r2, [r3, #4]
 800d0c2:	e30c      	b.n	800d6de <USB_EPStartXfer+0x108e>
 800d0c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d0c6:	2b3e      	cmp	r3, #62	@ 0x3e
 800d0c8:	d81e      	bhi.n	800d108 <USB_EPStartXfer+0xab8>
 800d0ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d0cc:	085b      	lsrs	r3, r3, #1
 800d0ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d0d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d0d2:	f003 0301 	and.w	r3, r3, #1
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d002      	beq.n	800d0e0 <USB_EPStartXfer+0xa90>
 800d0da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0dc:	3301      	adds	r3, #1
 800d0de:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	781b      	ldrb	r3, [r3, #0]
 800d0e4:	00db      	lsls	r3, r3, #3
 800d0e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d0ea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d0ee:	6859      	ldr	r1, [r3, #4]
 800d0f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0f2:	069a      	lsls	r2, r3, #26
 800d0f4:	683b      	ldr	r3, [r7, #0]
 800d0f6:	781b      	ldrb	r3, [r3, #0]
 800d0f8:	00db      	lsls	r3, r3, #3
 800d0fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d0fe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d102:	430a      	orrs	r2, r1
 800d104:	605a      	str	r2, [r3, #4]
 800d106:	e2ea      	b.n	800d6de <USB_EPStartXfer+0x108e>
 800d108:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d10a:	095b      	lsrs	r3, r3, #5
 800d10c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d10e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d110:	f003 031f 	and.w	r3, r3, #31
 800d114:	2b00      	cmp	r3, #0
 800d116:	d102      	bne.n	800d11e <USB_EPStartXfer+0xace>
 800d118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d11a:	3b01      	subs	r3, #1
 800d11c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	781b      	ldrb	r3, [r3, #0]
 800d122:	00db      	lsls	r3, r3, #3
 800d124:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d128:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d12c:	685a      	ldr	r2, [r3, #4]
 800d12e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d130:	069b      	lsls	r3, r3, #26
 800d132:	431a      	orrs	r2, r3
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	781b      	ldrb	r3, [r3, #0]
 800d138:	00db      	lsls	r3, r3, #3
 800d13a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d13e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d142:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d146:	605a      	str	r2, [r3, #4]
 800d148:	e2c9      	b.n	800d6de <USB_EPStartXfer+0x108e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	78db      	ldrb	r3, [r3, #3]
 800d14e:	2b02      	cmp	r3, #2
 800d150:	f040 8176 	bne.w	800d440 <USB_EPStartXfer+0xdf0>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	785b      	ldrb	r3, [r3, #1]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d173      	bne.n	800d244 <USB_EPStartXfer+0xbf4>
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	781b      	ldrb	r3, [r3, #0]
 800d160:	00db      	lsls	r3, r3, #3
 800d162:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d166:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d16a:	681a      	ldr	r2, [r3, #0]
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	781b      	ldrb	r3, [r3, #0]
 800d170:	00db      	lsls	r3, r3, #3
 800d172:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d176:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d17a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d17e:	601a      	str	r2, [r3, #0]
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	691b      	ldr	r3, [r3, #16]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d112      	bne.n	800d1ae <USB_EPStartXfer+0xb5e>
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	781b      	ldrb	r3, [r3, #0]
 800d18c:	00db      	lsls	r3, r3, #3
 800d18e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d192:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d196:	681a      	ldr	r2, [r3, #0]
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	781b      	ldrb	r3, [r3, #0]
 800d19c:	00db      	lsls	r3, r3, #3
 800d19e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d1a2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d1a6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d1aa:	601a      	str	r2, [r3, #0]
 800d1ac:	e073      	b.n	800d296 <USB_EPStartXfer+0xc46>
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	691b      	ldr	r3, [r3, #16]
 800d1b2:	2b3e      	cmp	r3, #62	@ 0x3e
 800d1b4:	d820      	bhi.n	800d1f8 <USB_EPStartXfer+0xba8>
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	691b      	ldr	r3, [r3, #16]
 800d1ba:	085b      	lsrs	r3, r3, #1
 800d1bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	691b      	ldr	r3, [r3, #16]
 800d1c2:	f003 0301 	and.w	r3, r3, #1
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d002      	beq.n	800d1d0 <USB_EPStartXfer+0xb80>
 800d1ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1cc:	3301      	adds	r3, #1
 800d1ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	781b      	ldrb	r3, [r3, #0]
 800d1d4:	00db      	lsls	r3, r3, #3
 800d1d6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d1da:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d1de:	6819      	ldr	r1, [r3, #0]
 800d1e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1e2:	069a      	lsls	r2, r3, #26
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	781b      	ldrb	r3, [r3, #0]
 800d1e8:	00db      	lsls	r3, r3, #3
 800d1ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d1ee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d1f2:	430a      	orrs	r2, r1
 800d1f4:	601a      	str	r2, [r3, #0]
 800d1f6:	e04e      	b.n	800d296 <USB_EPStartXfer+0xc46>
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	691b      	ldr	r3, [r3, #16]
 800d1fc:	095b      	lsrs	r3, r3, #5
 800d1fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	691b      	ldr	r3, [r3, #16]
 800d204:	f003 031f 	and.w	r3, r3, #31
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d102      	bne.n	800d212 <USB_EPStartXfer+0xbc2>
 800d20c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d20e:	3b01      	subs	r3, #1
 800d210:	637b      	str	r3, [r7, #52]	@ 0x34
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	781b      	ldrb	r3, [r3, #0]
 800d216:	00db      	lsls	r3, r3, #3
 800d218:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d21c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d220:	681a      	ldr	r2, [r3, #0]
 800d222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d224:	069b      	lsls	r3, r3, #26
 800d226:	431a      	orrs	r2, r3
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	781b      	ldrb	r3, [r3, #0]
 800d22c:	00db      	lsls	r3, r3, #3
 800d22e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d232:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d236:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d23a:	601a      	str	r2, [r3, #0]
 800d23c:	e02b      	b.n	800d296 <USB_EPStartXfer+0xc46>
 800d23e:	bf00      	nop
 800d240:	07ff8fbf 	.word	0x07ff8fbf
 800d244:	683b      	ldr	r3, [r7, #0]
 800d246:	785b      	ldrb	r3, [r3, #1]
 800d248:	2b01      	cmp	r3, #1
 800d24a:	d124      	bne.n	800d296 <USB_EPStartXfer+0xc46>
 800d24c:	683b      	ldr	r3, [r7, #0]
 800d24e:	781b      	ldrb	r3, [r3, #0]
 800d250:	00db      	lsls	r3, r3, #3
 800d252:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d256:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d25a:	681a      	ldr	r2, [r3, #0]
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	781b      	ldrb	r3, [r3, #0]
 800d260:	00db      	lsls	r3, r3, #3
 800d262:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d266:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d26a:	b292      	uxth	r2, r2
 800d26c:	601a      	str	r2, [r3, #0]
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	781b      	ldrb	r3, [r3, #0]
 800d272:	00db      	lsls	r3, r3, #3
 800d274:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d278:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d27c:	6819      	ldr	r1, [r3, #0]
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	691b      	ldr	r3, [r3, #16]
 800d282:	041a      	lsls	r2, r3, #16
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	781b      	ldrb	r3, [r3, #0]
 800d288:	00db      	lsls	r3, r3, #3
 800d28a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d28e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d292:	430a      	orrs	r2, r1
 800d294:	601a      	str	r2, [r3, #0]
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	785b      	ldrb	r3, [r3, #1]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d170      	bne.n	800d380 <USB_EPStartXfer+0xd30>
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	781b      	ldrb	r3, [r3, #0]
 800d2a2:	00db      	lsls	r3, r3, #3
 800d2a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d2a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d2ac:	685a      	ldr	r2, [r3, #4]
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	781b      	ldrb	r3, [r3, #0]
 800d2b2:	00db      	lsls	r3, r3, #3
 800d2b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d2b8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d2bc:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d2c0:	605a      	str	r2, [r3, #4]
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	691b      	ldr	r3, [r3, #16]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d112      	bne.n	800d2f0 <USB_EPStartXfer+0xca0>
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	781b      	ldrb	r3, [r3, #0]
 800d2ce:	00db      	lsls	r3, r3, #3
 800d2d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d2d4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d2d8:	685a      	ldr	r2, [r3, #4]
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	781b      	ldrb	r3, [r3, #0]
 800d2de:	00db      	lsls	r3, r3, #3
 800d2e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d2e4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d2e8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d2ec:	605a      	str	r2, [r3, #4]
 800d2ee:	e070      	b.n	800d3d2 <USB_EPStartXfer+0xd82>
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	691b      	ldr	r3, [r3, #16]
 800d2f4:	2b3e      	cmp	r3, #62	@ 0x3e
 800d2f6:	d820      	bhi.n	800d33a <USB_EPStartXfer+0xcea>
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	691b      	ldr	r3, [r3, #16]
 800d2fc:	085b      	lsrs	r3, r3, #1
 800d2fe:	633b      	str	r3, [r7, #48]	@ 0x30
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	691b      	ldr	r3, [r3, #16]
 800d304:	f003 0301 	and.w	r3, r3, #1
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d002      	beq.n	800d312 <USB_EPStartXfer+0xcc2>
 800d30c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d30e:	3301      	adds	r3, #1
 800d310:	633b      	str	r3, [r7, #48]	@ 0x30
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	781b      	ldrb	r3, [r3, #0]
 800d316:	00db      	lsls	r3, r3, #3
 800d318:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d31c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d320:	6859      	ldr	r1, [r3, #4]
 800d322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d324:	069a      	lsls	r2, r3, #26
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	781b      	ldrb	r3, [r3, #0]
 800d32a:	00db      	lsls	r3, r3, #3
 800d32c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d330:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d334:	430a      	orrs	r2, r1
 800d336:	605a      	str	r2, [r3, #4]
 800d338:	e04b      	b.n	800d3d2 <USB_EPStartXfer+0xd82>
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	691b      	ldr	r3, [r3, #16]
 800d33e:	095b      	lsrs	r3, r3, #5
 800d340:	633b      	str	r3, [r7, #48]	@ 0x30
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	691b      	ldr	r3, [r3, #16]
 800d346:	f003 031f 	and.w	r3, r3, #31
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d102      	bne.n	800d354 <USB_EPStartXfer+0xd04>
 800d34e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d350:	3b01      	subs	r3, #1
 800d352:	633b      	str	r3, [r7, #48]	@ 0x30
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	781b      	ldrb	r3, [r3, #0]
 800d358:	00db      	lsls	r3, r3, #3
 800d35a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d35e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d362:	685a      	ldr	r2, [r3, #4]
 800d364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d366:	069b      	lsls	r3, r3, #26
 800d368:	431a      	orrs	r2, r3
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	781b      	ldrb	r3, [r3, #0]
 800d36e:	00db      	lsls	r3, r3, #3
 800d370:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d374:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d378:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d37c:	605a      	str	r2, [r3, #4]
 800d37e:	e028      	b.n	800d3d2 <USB_EPStartXfer+0xd82>
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	785b      	ldrb	r3, [r3, #1]
 800d384:	2b01      	cmp	r3, #1
 800d386:	d124      	bne.n	800d3d2 <USB_EPStartXfer+0xd82>
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	781b      	ldrb	r3, [r3, #0]
 800d38c:	00db      	lsls	r3, r3, #3
 800d38e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d392:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d396:	685a      	ldr	r2, [r3, #4]
 800d398:	683b      	ldr	r3, [r7, #0]
 800d39a:	781b      	ldrb	r3, [r3, #0]
 800d39c:	00db      	lsls	r3, r3, #3
 800d39e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d3a2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d3a6:	b292      	uxth	r2, r2
 800d3a8:	605a      	str	r2, [r3, #4]
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	781b      	ldrb	r3, [r3, #0]
 800d3ae:	00db      	lsls	r3, r3, #3
 800d3b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d3b4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d3b8:	6859      	ldr	r1, [r3, #4]
 800d3ba:	683b      	ldr	r3, [r7, #0]
 800d3bc:	691b      	ldr	r3, [r3, #16]
 800d3be:	041a      	lsls	r2, r3, #16
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	781b      	ldrb	r3, [r3, #0]
 800d3c4:	00db      	lsls	r3, r3, #3
 800d3c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d3ca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d3ce:	430a      	orrs	r2, r1
 800d3d0:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	69db      	ldr	r3, [r3, #28]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	f000 8181 	beq.w	800d6de <USB_EPStartXfer+0x108e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 800d3dc:	687a      	ldr	r2, [r7, #4]
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	781b      	ldrb	r3, [r3, #0]
 800d3e2:	009b      	lsls	r3, r3, #2
 800d3e4:	4413      	add	r3, r2
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	84fb      	strh	r3, [r7, #38]	@ 0x26

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d3ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d3ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d004      	beq.n	800d3fe <USB_EPStartXfer+0xdae>
 800d3f4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d3f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d10b      	bne.n	800d416 <USB_EPStartXfer+0xdc6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d3fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d400:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d404:	2b00      	cmp	r3, #0
 800d406:	f040 816a 	bne.w	800d6de <USB_EPStartXfer+0x108e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d40a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d40c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d410:	2b00      	cmp	r3, #0
 800d412:	f040 8164 	bne.w	800d6de <USB_EPStartXfer+0x108e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800d416:	687a      	ldr	r2, [r7, #4]
 800d418:	683b      	ldr	r3, [r7, #0]
 800d41a:	781b      	ldrb	r3, [r3, #0]
 800d41c:	009b      	lsls	r3, r3, #2
 800d41e:	4413      	add	r3, r2
 800d420:	681a      	ldr	r2, [r3, #0]
 800d422:	4b98      	ldr	r3, [pc, #608]	@ (800d684 <USB_EPStartXfer+0x1034>)
 800d424:	4013      	ands	r3, r2
 800d426:	623b      	str	r3, [r7, #32]
 800d428:	687a      	ldr	r2, [r7, #4]
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	781b      	ldrb	r3, [r3, #0]
 800d42e:	009b      	lsls	r3, r3, #2
 800d430:	441a      	add	r2, r3
 800d432:	6a3b      	ldr	r3, [r7, #32]
 800d434:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d438:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d43c:	6013      	str	r3, [r2, #0]
 800d43e:	e14e      	b.n	800d6de <USB_EPStartXfer+0x108e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	78db      	ldrb	r3, [r3, #3]
 800d444:	2b01      	cmp	r3, #1
 800d446:	f040 8148 	bne.w	800d6da <USB_EPStartXfer+0x108a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	699a      	ldr	r2, [r3, #24]
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	691b      	ldr	r3, [r3, #16]
 800d452:	429a      	cmp	r2, r3
 800d454:	d909      	bls.n	800d46a <USB_EPStartXfer+0xe1a>
        {
          len = ep->maxpacket;
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	691b      	ldr	r3, [r3, #16]
 800d45a:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	699a      	ldr	r2, [r3, #24]
 800d460:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d462:	1ad2      	subs	r2, r2, r3
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	619a      	str	r2, [r3, #24]
 800d468:	e005      	b.n	800d476 <USB_EPStartXfer+0xe26>
        }
        else
        {
          len = ep->xfer_len;
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	699b      	ldr	r3, [r3, #24]
 800d46e:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 800d470:	683b      	ldr	r3, [r7, #0]
 800d472:	2200      	movs	r2, #0
 800d474:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	785b      	ldrb	r3, [r3, #1]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d16a      	bne.n	800d554 <USB_EPStartXfer+0xf04>
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	781b      	ldrb	r3, [r3, #0]
 800d482:	00db      	lsls	r3, r3, #3
 800d484:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d488:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d48c:	681a      	ldr	r2, [r3, #0]
 800d48e:	683b      	ldr	r3, [r7, #0]
 800d490:	781b      	ldrb	r3, [r3, #0]
 800d492:	00db      	lsls	r3, r3, #3
 800d494:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d498:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d49c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d4a0:	601a      	str	r2, [r3, #0]
 800d4a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d112      	bne.n	800d4ce <USB_EPStartXfer+0xe7e>
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	781b      	ldrb	r3, [r3, #0]
 800d4ac:	00db      	lsls	r3, r3, #3
 800d4ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d4b2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d4b6:	681a      	ldr	r2, [r3, #0]
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	781b      	ldrb	r3, [r3, #0]
 800d4bc:	00db      	lsls	r3, r3, #3
 800d4be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d4c2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d4c6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d4ca:	601a      	str	r2, [r3, #0]
 800d4cc:	e06a      	b.n	800d5a4 <USB_EPStartXfer+0xf54>
 800d4ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4d0:	2b3e      	cmp	r3, #62	@ 0x3e
 800d4d2:	d81e      	bhi.n	800d512 <USB_EPStartXfer+0xec2>
 800d4d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4d6:	085b      	lsrs	r3, r3, #1
 800d4d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d4da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4dc:	f003 0301 	and.w	r3, r3, #1
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d002      	beq.n	800d4ea <USB_EPStartXfer+0xe9a>
 800d4e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4e6:	3301      	adds	r3, #1
 800d4e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d4ea:	683b      	ldr	r3, [r7, #0]
 800d4ec:	781b      	ldrb	r3, [r3, #0]
 800d4ee:	00db      	lsls	r3, r3, #3
 800d4f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d4f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d4f8:	6819      	ldr	r1, [r3, #0]
 800d4fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4fc:	069a      	lsls	r2, r3, #26
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	781b      	ldrb	r3, [r3, #0]
 800d502:	00db      	lsls	r3, r3, #3
 800d504:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d508:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d50c:	430a      	orrs	r2, r1
 800d50e:	601a      	str	r2, [r3, #0]
 800d510:	e048      	b.n	800d5a4 <USB_EPStartXfer+0xf54>
 800d512:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d514:	095b      	lsrs	r3, r3, #5
 800d516:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d518:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d51a:	f003 031f 	and.w	r3, r3, #31
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d102      	bne.n	800d528 <USB_EPStartXfer+0xed8>
 800d522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d524:	3b01      	subs	r3, #1
 800d526:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	781b      	ldrb	r3, [r3, #0]
 800d52c:	00db      	lsls	r3, r3, #3
 800d52e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d532:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d536:	681a      	ldr	r2, [r3, #0]
 800d538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d53a:	069b      	lsls	r3, r3, #26
 800d53c:	431a      	orrs	r2, r3
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	781b      	ldrb	r3, [r3, #0]
 800d542:	00db      	lsls	r3, r3, #3
 800d544:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d548:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d54c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d550:	601a      	str	r2, [r3, #0]
 800d552:	e027      	b.n	800d5a4 <USB_EPStartXfer+0xf54>
 800d554:	683b      	ldr	r3, [r7, #0]
 800d556:	785b      	ldrb	r3, [r3, #1]
 800d558:	2b01      	cmp	r3, #1
 800d55a:	d123      	bne.n	800d5a4 <USB_EPStartXfer+0xf54>
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	781b      	ldrb	r3, [r3, #0]
 800d560:	00db      	lsls	r3, r3, #3
 800d562:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d566:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d56a:	681a      	ldr	r2, [r3, #0]
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	781b      	ldrb	r3, [r3, #0]
 800d570:	00db      	lsls	r3, r3, #3
 800d572:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d576:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d57a:	b292      	uxth	r2, r2
 800d57c:	601a      	str	r2, [r3, #0]
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	781b      	ldrb	r3, [r3, #0]
 800d582:	00db      	lsls	r3, r3, #3
 800d584:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d588:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d58c:	6819      	ldr	r1, [r3, #0]
 800d58e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d590:	041a      	lsls	r2, r3, #16
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	781b      	ldrb	r3, [r3, #0]
 800d596:	00db      	lsls	r3, r3, #3
 800d598:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d59c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d5a0:	430a      	orrs	r2, r1
 800d5a2:	601a      	str	r2, [r3, #0]
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	785b      	ldrb	r3, [r3, #1]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d16d      	bne.n	800d688 <USB_EPStartXfer+0x1038>
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	781b      	ldrb	r3, [r3, #0]
 800d5b0:	00db      	lsls	r3, r3, #3
 800d5b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d5b6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d5ba:	685a      	ldr	r2, [r3, #4]
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	781b      	ldrb	r3, [r3, #0]
 800d5c0:	00db      	lsls	r3, r3, #3
 800d5c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d5c6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d5ca:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d5ce:	605a      	str	r2, [r3, #4]
 800d5d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d112      	bne.n	800d5fc <USB_EPStartXfer+0xfac>
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	781b      	ldrb	r3, [r3, #0]
 800d5da:	00db      	lsls	r3, r3, #3
 800d5dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d5e0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d5e4:	685a      	ldr	r2, [r3, #4]
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	781b      	ldrb	r3, [r3, #0]
 800d5ea:	00db      	lsls	r3, r3, #3
 800d5ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d5f0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d5f4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d5f8:	605a      	str	r2, [r3, #4]
 800d5fa:	e070      	b.n	800d6de <USB_EPStartXfer+0x108e>
 800d5fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5fe:	2b3e      	cmp	r3, #62	@ 0x3e
 800d600:	d81e      	bhi.n	800d640 <USB_EPStartXfer+0xff0>
 800d602:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d604:	085b      	lsrs	r3, r3, #1
 800d606:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d608:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d60a:	f003 0301 	and.w	r3, r3, #1
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d002      	beq.n	800d618 <USB_EPStartXfer+0xfc8>
 800d612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d614:	3301      	adds	r3, #1
 800d616:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	781b      	ldrb	r3, [r3, #0]
 800d61c:	00db      	lsls	r3, r3, #3
 800d61e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d622:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d626:	6859      	ldr	r1, [r3, #4]
 800d628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d62a:	069a      	lsls	r2, r3, #26
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	781b      	ldrb	r3, [r3, #0]
 800d630:	00db      	lsls	r3, r3, #3
 800d632:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d636:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d63a:	430a      	orrs	r2, r1
 800d63c:	605a      	str	r2, [r3, #4]
 800d63e:	e04e      	b.n	800d6de <USB_EPStartXfer+0x108e>
 800d640:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d642:	095b      	lsrs	r3, r3, #5
 800d644:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d646:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d648:	f003 031f 	and.w	r3, r3, #31
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d102      	bne.n	800d656 <USB_EPStartXfer+0x1006>
 800d650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d652:	3b01      	subs	r3, #1
 800d654:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	781b      	ldrb	r3, [r3, #0]
 800d65a:	00db      	lsls	r3, r3, #3
 800d65c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d660:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d664:	685a      	ldr	r2, [r3, #4]
 800d666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d668:	069b      	lsls	r3, r3, #26
 800d66a:	431a      	orrs	r2, r3
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	781b      	ldrb	r3, [r3, #0]
 800d670:	00db      	lsls	r3, r3, #3
 800d672:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d676:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d67a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d67e:	605a      	str	r2, [r3, #4]
 800d680:	e02d      	b.n	800d6de <USB_EPStartXfer+0x108e>
 800d682:	bf00      	nop
 800d684:	07ff8f8f 	.word	0x07ff8f8f
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	785b      	ldrb	r3, [r3, #1]
 800d68c:	2b01      	cmp	r3, #1
 800d68e:	d126      	bne.n	800d6de <USB_EPStartXfer+0x108e>
 800d690:	683b      	ldr	r3, [r7, #0]
 800d692:	781b      	ldrb	r3, [r3, #0]
 800d694:	00db      	lsls	r3, r3, #3
 800d696:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d69a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d69e:	685a      	ldr	r2, [r3, #4]
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	781b      	ldrb	r3, [r3, #0]
 800d6a4:	00db      	lsls	r3, r3, #3
 800d6a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d6aa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d6ae:	b292      	uxth	r2, r2
 800d6b0:	605a      	str	r2, [r3, #4]
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	781b      	ldrb	r3, [r3, #0]
 800d6b6:	00db      	lsls	r3, r3, #3
 800d6b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d6bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d6c0:	6859      	ldr	r1, [r3, #4]
 800d6c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d6c4:	041a      	lsls	r2, r3, #16
 800d6c6:	683b      	ldr	r3, [r7, #0]
 800d6c8:	781b      	ldrb	r3, [r3, #0]
 800d6ca:	00db      	lsls	r3, r3, #3
 800d6cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d6d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d6d4:	430a      	orrs	r2, r1
 800d6d6:	605a      	str	r2, [r3, #4]
 800d6d8:	e001      	b.n	800d6de <USB_EPStartXfer+0x108e>
      }
      else
      {
        return HAL_ERROR;
 800d6da:	2301      	movs	r3, #1
 800d6dc:	e01c      	b.n	800d718 <USB_EPStartXfer+0x10c8>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d6de:	687a      	ldr	r2, [r7, #4]
 800d6e0:	683b      	ldr	r3, [r7, #0]
 800d6e2:	781b      	ldrb	r3, [r3, #0]
 800d6e4:	009b      	lsls	r3, r3, #2
 800d6e6:	4413      	add	r3, r2
 800d6e8:	681a      	ldr	r2, [r3, #0]
 800d6ea:	4b0d      	ldr	r3, [pc, #52]	@ (800d720 <USB_EPStartXfer+0x10d0>)
 800d6ec:	4013      	ands	r3, r2
 800d6ee:	61fb      	str	r3, [r7, #28]
 800d6f0:	69fb      	ldr	r3, [r7, #28]
 800d6f2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d6f6:	61fb      	str	r3, [r7, #28]
 800d6f8:	69fb      	ldr	r3, [r7, #28]
 800d6fa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d6fe:	61fb      	str	r3, [r7, #28]
 800d700:	687a      	ldr	r2, [r7, #4]
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	781b      	ldrb	r3, [r3, #0]
 800d706:	009b      	lsls	r3, r3, #2
 800d708:	441a      	add	r2, r3
 800d70a:	69fb      	ldr	r3, [r7, #28]
 800d70c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d710:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d714:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d716:	2300      	movs	r3, #0
}
 800d718:	4618      	mov	r0, r3
 800d71a:	3758      	adds	r7, #88	@ 0x58
 800d71c:	46bd      	mov	sp, r7
 800d71e:	bd80      	pop	{r7, pc}
 800d720:	07ffbf8f 	.word	0x07ffbf8f

0800d724 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800d724:	b480      	push	{r7}
 800d726:	b085      	sub	sp, #20
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
 800d72c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	785b      	ldrb	r3, [r3, #1]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d018      	beq.n	800d768 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800d736:	687a      	ldr	r2, [r7, #4]
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	781b      	ldrb	r3, [r3, #0]
 800d73c:	009b      	lsls	r3, r3, #2
 800d73e:	4413      	add	r3, r2
 800d740:	681a      	ldr	r2, [r3, #0]
 800d742:	4b19      	ldr	r3, [pc, #100]	@ (800d7a8 <USB_EPSetStall+0x84>)
 800d744:	4013      	ands	r3, r2
 800d746:	60bb      	str	r3, [r7, #8]
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	f083 0310 	eor.w	r3, r3, #16
 800d74e:	60bb      	str	r3, [r7, #8]
 800d750:	687a      	ldr	r2, [r7, #4]
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	781b      	ldrb	r3, [r3, #0]
 800d756:	009b      	lsls	r3, r3, #2
 800d758:	441a      	add	r2, r3
 800d75a:	68bb      	ldr	r3, [r7, #8]
 800d75c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d760:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d764:	6013      	str	r3, [r2, #0]
 800d766:	e017      	b.n	800d798 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800d768:	687a      	ldr	r2, [r7, #4]
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	781b      	ldrb	r3, [r3, #0]
 800d76e:	009b      	lsls	r3, r3, #2
 800d770:	4413      	add	r3, r2
 800d772:	681a      	ldr	r2, [r3, #0]
 800d774:	4b0d      	ldr	r3, [pc, #52]	@ (800d7ac <USB_EPSetStall+0x88>)
 800d776:	4013      	ands	r3, r2
 800d778:	60fb      	str	r3, [r7, #12]
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d780:	60fb      	str	r3, [r7, #12]
 800d782:	687a      	ldr	r2, [r7, #4]
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	781b      	ldrb	r3, [r3, #0]
 800d788:	009b      	lsls	r3, r3, #2
 800d78a:	441a      	add	r2, r3
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d792:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d796:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d798:	2300      	movs	r3, #0
}
 800d79a:	4618      	mov	r0, r3
 800d79c:	3714      	adds	r7, #20
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a4:	4770      	bx	lr
 800d7a6:	bf00      	nop
 800d7a8:	07ff8fbf 	.word	0x07ff8fbf
 800d7ac:	07ffbf8f 	.word	0x07ffbf8f

0800d7b0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800d7b0:	b480      	push	{r7}
 800d7b2:	b089      	sub	sp, #36	@ 0x24
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
 800d7b8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800d7ba:	683b      	ldr	r3, [r7, #0]
 800d7bc:	7b1b      	ldrb	r3, [r3, #12]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d17c      	bne.n	800d8bc <USB_EPClearStall+0x10c>
  {
    if (ep->is_in != 0U)
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	785b      	ldrb	r3, [r3, #1]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d03c      	beq.n	800d844 <USB_EPClearStall+0x94>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d7ca:	687a      	ldr	r2, [r7, #4]
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	781b      	ldrb	r3, [r3, #0]
 800d7d0:	009b      	lsls	r3, r3, #2
 800d7d2:	4413      	add	r3, r2
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	613b      	str	r3, [r7, #16]
 800d7d8:	693b      	ldr	r3, [r7, #16]
 800d7da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d013      	beq.n	800d80a <USB_EPClearStall+0x5a>
 800d7e2:	687a      	ldr	r2, [r7, #4]
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	781b      	ldrb	r3, [r3, #0]
 800d7e8:	009b      	lsls	r3, r3, #2
 800d7ea:	4413      	add	r3, r2
 800d7ec:	681a      	ldr	r2, [r3, #0]
 800d7ee:	4b37      	ldr	r3, [pc, #220]	@ (800d8cc <USB_EPClearStall+0x11c>)
 800d7f0:	4013      	ands	r3, r2
 800d7f2:	60fb      	str	r3, [r7, #12]
 800d7f4:	687a      	ldr	r2, [r7, #4]
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	781b      	ldrb	r3, [r3, #0]
 800d7fa:	009b      	lsls	r3, r3, #2
 800d7fc:	441a      	add	r2, r3
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d804:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d808:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	78db      	ldrb	r3, [r3, #3]
 800d80e:	2b01      	cmp	r3, #1
 800d810:	d054      	beq.n	800d8bc <USB_EPClearStall+0x10c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d812:	687a      	ldr	r2, [r7, #4]
 800d814:	683b      	ldr	r3, [r7, #0]
 800d816:	781b      	ldrb	r3, [r3, #0]
 800d818:	009b      	lsls	r3, r3, #2
 800d81a:	4413      	add	r3, r2
 800d81c:	681a      	ldr	r2, [r3, #0]
 800d81e:	4b2c      	ldr	r3, [pc, #176]	@ (800d8d0 <USB_EPClearStall+0x120>)
 800d820:	4013      	ands	r3, r2
 800d822:	60bb      	str	r3, [r7, #8]
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	f083 0320 	eor.w	r3, r3, #32
 800d82a:	60bb      	str	r3, [r7, #8]
 800d82c:	687a      	ldr	r2, [r7, #4]
 800d82e:	683b      	ldr	r3, [r7, #0]
 800d830:	781b      	ldrb	r3, [r3, #0]
 800d832:	009b      	lsls	r3, r3, #2
 800d834:	441a      	add	r2, r3
 800d836:	68bb      	ldr	r3, [r7, #8]
 800d838:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d83c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d840:	6013      	str	r3, [r2, #0]
 800d842:	e03b      	b.n	800d8bc <USB_EPClearStall+0x10c>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d844:	687a      	ldr	r2, [r7, #4]
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	781b      	ldrb	r3, [r3, #0]
 800d84a:	009b      	lsls	r3, r3, #2
 800d84c:	4413      	add	r3, r2
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	61fb      	str	r3, [r7, #28]
 800d852:	69fb      	ldr	r3, [r7, #28]
 800d854:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d013      	beq.n	800d884 <USB_EPClearStall+0xd4>
 800d85c:	687a      	ldr	r2, [r7, #4]
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	781b      	ldrb	r3, [r3, #0]
 800d862:	009b      	lsls	r3, r3, #2
 800d864:	4413      	add	r3, r2
 800d866:	681a      	ldr	r2, [r3, #0]
 800d868:	4b18      	ldr	r3, [pc, #96]	@ (800d8cc <USB_EPClearStall+0x11c>)
 800d86a:	4013      	ands	r3, r2
 800d86c:	61bb      	str	r3, [r7, #24]
 800d86e:	687a      	ldr	r2, [r7, #4]
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	781b      	ldrb	r3, [r3, #0]
 800d874:	009b      	lsls	r3, r3, #2
 800d876:	441a      	add	r2, r3
 800d878:	69bb      	ldr	r3, [r7, #24]
 800d87a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d87e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d882:	6013      	str	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d884:	687a      	ldr	r2, [r7, #4]
 800d886:	683b      	ldr	r3, [r7, #0]
 800d888:	781b      	ldrb	r3, [r3, #0]
 800d88a:	009b      	lsls	r3, r3, #2
 800d88c:	4413      	add	r3, r2
 800d88e:	681a      	ldr	r2, [r3, #0]
 800d890:	4b10      	ldr	r3, [pc, #64]	@ (800d8d4 <USB_EPClearStall+0x124>)
 800d892:	4013      	ands	r3, r2
 800d894:	617b      	str	r3, [r7, #20]
 800d896:	697b      	ldr	r3, [r7, #20]
 800d898:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d89c:	617b      	str	r3, [r7, #20]
 800d89e:	697b      	ldr	r3, [r7, #20]
 800d8a0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d8a4:	617b      	str	r3, [r7, #20]
 800d8a6:	687a      	ldr	r2, [r7, #4]
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	781b      	ldrb	r3, [r3, #0]
 800d8ac:	009b      	lsls	r3, r3, #2
 800d8ae:	441a      	add	r2, r3
 800d8b0:	697b      	ldr	r3, [r7, #20]
 800d8b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d8b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d8ba:	6013      	str	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800d8bc:	2300      	movs	r3, #0
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	3724      	adds	r7, #36	@ 0x24
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c8:	4770      	bx	lr
 800d8ca:	bf00      	nop
 800d8cc:	07ff8f8f 	.word	0x07ff8f8f
 800d8d0:	07ff8fbf 	.word	0x07ff8fbf
 800d8d4:	07ffbf8f 	.word	0x07ffbf8f

0800d8d8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 800d8d8:	b480      	push	{r7}
 800d8da:	b083      	sub	sp, #12
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
 800d8e0:	460b      	mov	r3, r1
 800d8e2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800d8e4:	78fb      	ldrb	r3, [r7, #3]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d102      	bne.n	800d8f0 <USB_SetDevAddress+0x18>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	2280      	movs	r2, #128	@ 0x80
 800d8ee:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800d8f0:	2300      	movs	r3, #0
}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	370c      	adds	r7, #12
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fc:	4770      	bx	lr

0800d8fe <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 800d8fe:	b480      	push	{r7}
 800d900:	b083      	sub	sp, #12
 800d902:	af00      	add	r7, sp, #0
 800d904:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d90a:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d912:	2300      	movs	r3, #0
}
 800d914:	4618      	mov	r0, r3
 800d916:	370c      	adds	r7, #12
 800d918:	46bd      	mov	sp, r7
 800d91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91e:	4770      	bx	lr

0800d920 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 800d920:	b480      	push	{r7}
 800d922:	b083      	sub	sp, #12
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d92c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d934:	2300      	movs	r3, #0
}
 800d936:	4618      	mov	r0, r3
 800d938:	370c      	adds	r7, #12
 800d93a:	46bd      	mov	sp, r7
 800d93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d940:	4770      	bx	lr

0800d942 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 800d942:	b480      	push	{r7}
 800d944:	b085      	sub	sp, #20
 800d946:	af00      	add	r7, sp, #0
 800d948:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d94e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800d950:	68fb      	ldr	r3, [r7, #12]
}
 800d952:	4618      	mov	r0, r3
 800d954:	3714      	adds	r7, #20
 800d956:	46bd      	mov	sp, r7
 800d958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95c:	4770      	bx	lr

0800d95e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d95e:	b480      	push	{r7}
 800d960:	b08b      	sub	sp, #44	@ 0x2c
 800d962:	af00      	add	r7, sp, #0
 800d964:	60f8      	str	r0, [r7, #12]
 800d966:	60b9      	str	r1, [r7, #8]
 800d968:	4611      	mov	r1, r2
 800d96a:	461a      	mov	r2, r3
 800d96c:	460b      	mov	r3, r1
 800d96e:	80fb      	strh	r3, [r7, #6]
 800d970:	4613      	mov	r3, r2
 800d972:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800d974:	88bb      	ldrh	r3, [r7, #4]
 800d976:	3303      	adds	r3, #3
 800d978:	089b      	lsrs	r3, r3, #2
 800d97a:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800d97c:	88bb      	ldrh	r3, [r7, #4]
 800d97e:	f003 0303 	and.w	r3, r3, #3
 800d982:	82fb      	strh	r3, [r7, #22]
  uint8_t *pBuf = pbUsrBuf;
 800d984:	68bb      	ldr	r3, [r7, #8]
 800d986:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 800d988:	8afb      	ldrh	r3, [r7, #22]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d002      	beq.n	800d994 <USB_WritePMA+0x36>
  {
    NbWords--;
 800d98e:	69bb      	ldr	r3, [r7, #24]
 800d990:	3b01      	subs	r3, #1
 800d992:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800d994:	88fb      	ldrh	r3, [r7, #6]
 800d996:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d99a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d99e:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 800d9a0:	69bb      	ldr	r3, [r7, #24]
 800d9a2:	623b      	str	r3, [r7, #32]
 800d9a4:	e015      	b.n	800d9d2 <USB_WritePMA+0x74>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 800d9a6:	693b      	ldr	r3, [r7, #16]
 800d9a8:	681a      	ldr	r2, [r3, #0]
 800d9aa:	69fb      	ldr	r3, [r7, #28]
 800d9ac:	601a      	str	r2, [r3, #0]
    pdwVal++;
 800d9ae:	69fb      	ldr	r3, [r7, #28]
 800d9b0:	3304      	adds	r3, #4
 800d9b2:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 800d9b4:	693b      	ldr	r3, [r7, #16]
 800d9b6:	3301      	adds	r3, #1
 800d9b8:	613b      	str	r3, [r7, #16]
    pBuf++;
 800d9ba:	693b      	ldr	r3, [r7, #16]
 800d9bc:	3301      	adds	r3, #1
 800d9be:	613b      	str	r3, [r7, #16]
    pBuf++;
 800d9c0:	693b      	ldr	r3, [r7, #16]
 800d9c2:	3301      	adds	r3, #1
 800d9c4:	613b      	str	r3, [r7, #16]
    pBuf++;
 800d9c6:	693b      	ldr	r3, [r7, #16]
 800d9c8:	3301      	adds	r3, #1
 800d9ca:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 800d9cc:	6a3b      	ldr	r3, [r7, #32]
 800d9ce:	3b01      	subs	r3, #1
 800d9d0:	623b      	str	r3, [r7, #32]
 800d9d2:	6a3b      	ldr	r3, [r7, #32]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d1e6      	bne.n	800d9a6 <USB_WritePMA+0x48>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 800d9d8:	8afb      	ldrh	r3, [r7, #22]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d01a      	beq.n	800da14 <USB_WritePMA+0xb6>
  {
    WrVal = 0U;
 800d9de:	2300      	movs	r3, #0
 800d9e0:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800d9e2:	693b      	ldr	r3, [r7, #16]
 800d9e4:	781b      	ldrb	r3, [r3, #0]
 800d9e6:	461a      	mov	r2, r3
 800d9e8:	6a3b      	ldr	r3, [r7, #32]
 800d9ea:	00db      	lsls	r3, r3, #3
 800d9ec:	fa02 f303 	lsl.w	r3, r2, r3
 800d9f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d9f2:	4313      	orrs	r3, r2
 800d9f4:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 800d9f6:	6a3b      	ldr	r3, [r7, #32]
 800d9f8:	3301      	adds	r3, #1
 800d9fa:	623b      	str	r3, [r7, #32]
      pBuf++;
 800d9fc:	693b      	ldr	r3, [r7, #16]
 800d9fe:	3301      	adds	r3, #1
 800da00:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 800da02:	8afb      	ldrh	r3, [r7, #22]
 800da04:	3b01      	subs	r3, #1
 800da06:	82fb      	strh	r3, [r7, #22]
    } while (remaining_bytes != 0U);
 800da08:	8afb      	ldrh	r3, [r7, #22]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d1e9      	bne.n	800d9e2 <USB_WritePMA+0x84>

    *pdwVal = WrVal;
 800da0e:	69fb      	ldr	r3, [r7, #28]
 800da10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800da12:	601a      	str	r2, [r3, #0]
  }
}
 800da14:	bf00      	nop
 800da16:	372c      	adds	r7, #44	@ 0x2c
 800da18:	46bd      	mov	sp, r7
 800da1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1e:	4770      	bx	lr

0800da20 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800da20:	b480      	push	{r7}
 800da22:	b08b      	sub	sp, #44	@ 0x2c
 800da24:	af00      	add	r7, sp, #0
 800da26:	60f8      	str	r0, [r7, #12]
 800da28:	60b9      	str	r1, [r7, #8]
 800da2a:	4611      	mov	r1, r2
 800da2c:	461a      	mov	r2, r3
 800da2e:	460b      	mov	r3, r1
 800da30:	80fb      	strh	r3, [r7, #6]
 800da32:	4613      	mov	r3, r2
 800da34:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800da36:	88bb      	ldrh	r3, [r7, #4]
 800da38:	3303      	adds	r3, #3
 800da3a:	089b      	lsrs	r3, r3, #2
 800da3c:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800da3e:	88bb      	ldrh	r3, [r7, #4]
 800da40:	f003 0303 	and.w	r3, r3, #3
 800da44:	837b      	strh	r3, [r7, #26]
  uint8_t *pBuf = pbUsrBuf;
 800da46:	68bb      	ldr	r3, [r7, #8]
 800da48:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800da4a:	88fb      	ldrh	r3, [r7, #6]
 800da4c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800da50:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800da54:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 800da56:	8b7b      	ldrh	r3, [r7, #26]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d002      	beq.n	800da62 <USB_ReadPMA+0x42>
  {
    NbWords--;
 800da5c:	69fb      	ldr	r3, [r7, #28]
 800da5e:	3b01      	subs	r3, #1
 800da60:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 800da62:	69fb      	ldr	r3, [r7, #28]
 800da64:	627b      	str	r3, [r7, #36]	@ 0x24
 800da66:	e015      	b.n	800da94 <USB_ReadPMA+0x74>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 800da68:	6a3b      	ldr	r3, [r7, #32]
 800da6a:	681a      	ldr	r2, [r3, #0]
 800da6c:	697b      	ldr	r3, [r7, #20]
 800da6e:	601a      	str	r2, [r3, #0]

    pdwVal++;
 800da70:	6a3b      	ldr	r3, [r7, #32]
 800da72:	3304      	adds	r3, #4
 800da74:	623b      	str	r3, [r7, #32]
    pBuf++;
 800da76:	697b      	ldr	r3, [r7, #20]
 800da78:	3301      	adds	r3, #1
 800da7a:	617b      	str	r3, [r7, #20]
    pBuf++;
 800da7c:	697b      	ldr	r3, [r7, #20]
 800da7e:	3301      	adds	r3, #1
 800da80:	617b      	str	r3, [r7, #20]
    pBuf++;
 800da82:	697b      	ldr	r3, [r7, #20]
 800da84:	3301      	adds	r3, #1
 800da86:	617b      	str	r3, [r7, #20]
    pBuf++;
 800da88:	697b      	ldr	r3, [r7, #20]
 800da8a:	3301      	adds	r3, #1
 800da8c:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 800da8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da90:	3b01      	subs	r3, #1
 800da92:	627b      	str	r3, [r7, #36]	@ 0x24
 800da94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da96:	2b00      	cmp	r3, #0
 800da98:	d1e6      	bne.n	800da68 <USB_ReadPMA+0x48>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 800da9a:	8b7b      	ldrh	r3, [r7, #26]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d017      	beq.n	800dad0 <USB_ReadPMA+0xb0>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 800daa0:	6a3b      	ldr	r3, [r7, #32]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 800daa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daa8:	b2db      	uxtb	r3, r3
 800daaa:	00db      	lsls	r3, r3, #3
 800daac:	693a      	ldr	r2, [r7, #16]
 800daae:	fa22 f303 	lsr.w	r3, r2, r3
 800dab2:	b2da      	uxtb	r2, r3
 800dab4:	697b      	ldr	r3, [r7, #20]
 800dab6:	701a      	strb	r2, [r3, #0]
      count++;
 800dab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daba:	3301      	adds	r3, #1
 800dabc:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 800dabe:	697b      	ldr	r3, [r7, #20]
 800dac0:	3301      	adds	r3, #1
 800dac2:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 800dac4:	8b7b      	ldrh	r3, [r7, #26]
 800dac6:	3b01      	subs	r3, #1
 800dac8:	837b      	strh	r3, [r7, #26]
    } while (remaining_bytes != 0U);
 800daca:	8b7b      	ldrh	r3, [r7, #26]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d1ea      	bne.n	800daa6 <USB_ReadPMA+0x86>
  }
}
 800dad0:	bf00      	nop
 800dad2:	372c      	adds	r7, #44	@ 0x2c
 800dad4:	46bd      	mov	sp, r7
 800dad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dada:	4770      	bx	lr

0800dadc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b084      	sub	sp, #16
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
 800dae4:	460b      	mov	r3, r1
 800dae6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800dae8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800daec:	f001 f87a 	bl	800ebe4 <USBD_static_malloc>
 800daf0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d109      	bne.n	800db0c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	32b0      	adds	r2, #176	@ 0xb0
 800db02:	2100      	movs	r1, #0
 800db04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800db08:	2302      	movs	r3, #2
 800db0a:	e0d4      	b.n	800dcb6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800db0c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800db10:	2100      	movs	r1, #0
 800db12:	68f8      	ldr	r0, [r7, #12]
 800db14:	f002 fd8c 	bl	8010630 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	32b0      	adds	r2, #176	@ 0xb0
 800db22:	68f9      	ldr	r1, [r7, #12]
 800db24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	32b0      	adds	r2, #176	@ 0xb0
 800db32:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	7c1b      	ldrb	r3, [r3, #16]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d138      	bne.n	800dbb6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800db44:	4b5e      	ldr	r3, [pc, #376]	@ (800dcc0 <USBD_CDC_Init+0x1e4>)
 800db46:	7819      	ldrb	r1, [r3, #0]
 800db48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800db4c:	2202      	movs	r2, #2
 800db4e:	6878      	ldr	r0, [r7, #4]
 800db50:	f000 ff4f 	bl	800e9f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800db54:	4b5a      	ldr	r3, [pc, #360]	@ (800dcc0 <USBD_CDC_Init+0x1e4>)
 800db56:	781b      	ldrb	r3, [r3, #0]
 800db58:	f003 020f 	and.w	r2, r3, #15
 800db5c:	6879      	ldr	r1, [r7, #4]
 800db5e:	4613      	mov	r3, r2
 800db60:	009b      	lsls	r3, r3, #2
 800db62:	4413      	add	r3, r2
 800db64:	009b      	lsls	r3, r3, #2
 800db66:	440b      	add	r3, r1
 800db68:	3324      	adds	r3, #36	@ 0x24
 800db6a:	2201      	movs	r2, #1
 800db6c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800db6e:	4b55      	ldr	r3, [pc, #340]	@ (800dcc4 <USBD_CDC_Init+0x1e8>)
 800db70:	7819      	ldrb	r1, [r3, #0]
 800db72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800db76:	2202      	movs	r2, #2
 800db78:	6878      	ldr	r0, [r7, #4]
 800db7a:	f000 ff3a 	bl	800e9f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800db7e:	4b51      	ldr	r3, [pc, #324]	@ (800dcc4 <USBD_CDC_Init+0x1e8>)
 800db80:	781b      	ldrb	r3, [r3, #0]
 800db82:	f003 020f 	and.w	r2, r3, #15
 800db86:	6879      	ldr	r1, [r7, #4]
 800db88:	4613      	mov	r3, r2
 800db8a:	009b      	lsls	r3, r3, #2
 800db8c:	4413      	add	r3, r2
 800db8e:	009b      	lsls	r3, r3, #2
 800db90:	440b      	add	r3, r1
 800db92:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800db96:	2201      	movs	r2, #1
 800db98:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800db9a:	4b4b      	ldr	r3, [pc, #300]	@ (800dcc8 <USBD_CDC_Init+0x1ec>)
 800db9c:	781b      	ldrb	r3, [r3, #0]
 800db9e:	f003 020f 	and.w	r2, r3, #15
 800dba2:	6879      	ldr	r1, [r7, #4]
 800dba4:	4613      	mov	r3, r2
 800dba6:	009b      	lsls	r3, r3, #2
 800dba8:	4413      	add	r3, r2
 800dbaa:	009b      	lsls	r3, r3, #2
 800dbac:	440b      	add	r3, r1
 800dbae:	3326      	adds	r3, #38	@ 0x26
 800dbb0:	2210      	movs	r2, #16
 800dbb2:	801a      	strh	r2, [r3, #0]
 800dbb4:	e035      	b.n	800dc22 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800dbb6:	4b42      	ldr	r3, [pc, #264]	@ (800dcc0 <USBD_CDC_Init+0x1e4>)
 800dbb8:	7819      	ldrb	r1, [r3, #0]
 800dbba:	2340      	movs	r3, #64	@ 0x40
 800dbbc:	2202      	movs	r2, #2
 800dbbe:	6878      	ldr	r0, [r7, #4]
 800dbc0:	f000 ff17 	bl	800e9f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800dbc4:	4b3e      	ldr	r3, [pc, #248]	@ (800dcc0 <USBD_CDC_Init+0x1e4>)
 800dbc6:	781b      	ldrb	r3, [r3, #0]
 800dbc8:	f003 020f 	and.w	r2, r3, #15
 800dbcc:	6879      	ldr	r1, [r7, #4]
 800dbce:	4613      	mov	r3, r2
 800dbd0:	009b      	lsls	r3, r3, #2
 800dbd2:	4413      	add	r3, r2
 800dbd4:	009b      	lsls	r3, r3, #2
 800dbd6:	440b      	add	r3, r1
 800dbd8:	3324      	adds	r3, #36	@ 0x24
 800dbda:	2201      	movs	r2, #1
 800dbdc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800dbde:	4b39      	ldr	r3, [pc, #228]	@ (800dcc4 <USBD_CDC_Init+0x1e8>)
 800dbe0:	7819      	ldrb	r1, [r3, #0]
 800dbe2:	2340      	movs	r3, #64	@ 0x40
 800dbe4:	2202      	movs	r2, #2
 800dbe6:	6878      	ldr	r0, [r7, #4]
 800dbe8:	f000 ff03 	bl	800e9f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800dbec:	4b35      	ldr	r3, [pc, #212]	@ (800dcc4 <USBD_CDC_Init+0x1e8>)
 800dbee:	781b      	ldrb	r3, [r3, #0]
 800dbf0:	f003 020f 	and.w	r2, r3, #15
 800dbf4:	6879      	ldr	r1, [r7, #4]
 800dbf6:	4613      	mov	r3, r2
 800dbf8:	009b      	lsls	r3, r3, #2
 800dbfa:	4413      	add	r3, r2
 800dbfc:	009b      	lsls	r3, r3, #2
 800dbfe:	440b      	add	r3, r1
 800dc00:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800dc04:	2201      	movs	r2, #1
 800dc06:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800dc08:	4b2f      	ldr	r3, [pc, #188]	@ (800dcc8 <USBD_CDC_Init+0x1ec>)
 800dc0a:	781b      	ldrb	r3, [r3, #0]
 800dc0c:	f003 020f 	and.w	r2, r3, #15
 800dc10:	6879      	ldr	r1, [r7, #4]
 800dc12:	4613      	mov	r3, r2
 800dc14:	009b      	lsls	r3, r3, #2
 800dc16:	4413      	add	r3, r2
 800dc18:	009b      	lsls	r3, r3, #2
 800dc1a:	440b      	add	r3, r1
 800dc1c:	3326      	adds	r3, #38	@ 0x26
 800dc1e:	2210      	movs	r2, #16
 800dc20:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800dc22:	4b29      	ldr	r3, [pc, #164]	@ (800dcc8 <USBD_CDC_Init+0x1ec>)
 800dc24:	7819      	ldrb	r1, [r3, #0]
 800dc26:	2308      	movs	r3, #8
 800dc28:	2203      	movs	r2, #3
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	f000 fee1 	bl	800e9f2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800dc30:	4b25      	ldr	r3, [pc, #148]	@ (800dcc8 <USBD_CDC_Init+0x1ec>)
 800dc32:	781b      	ldrb	r3, [r3, #0]
 800dc34:	f003 020f 	and.w	r2, r3, #15
 800dc38:	6879      	ldr	r1, [r7, #4]
 800dc3a:	4613      	mov	r3, r2
 800dc3c:	009b      	lsls	r3, r3, #2
 800dc3e:	4413      	add	r3, r2
 800dc40:	009b      	lsls	r3, r3, #2
 800dc42:	440b      	add	r3, r1
 800dc44:	3324      	adds	r3, #36	@ 0x24
 800dc46:	2201      	movs	r2, #1
 800dc48:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dc58:	687a      	ldr	r2, [r7, #4]
 800dc5a:	33b0      	adds	r3, #176	@ 0xb0
 800dc5c:	009b      	lsls	r3, r3, #2
 800dc5e:	4413      	add	r3, r2
 800dc60:	685b      	ldr	r3, [r3, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	2200      	movs	r2, #0
 800dc6a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	2200      	movs	r2, #0
 800dc72:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d101      	bne.n	800dc84 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800dc80:	2302      	movs	r3, #2
 800dc82:	e018      	b.n	800dcb6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	7c1b      	ldrb	r3, [r3, #16]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d10a      	bne.n	800dca2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dc8c:	4b0d      	ldr	r3, [pc, #52]	@ (800dcc4 <USBD_CDC_Init+0x1e8>)
 800dc8e:	7819      	ldrb	r1, [r3, #0]
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dc96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dc9a:	6878      	ldr	r0, [r7, #4]
 800dc9c:	f000 ff74 	bl	800eb88 <USBD_LL_PrepareReceive>
 800dca0:	e008      	b.n	800dcb4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dca2:	4b08      	ldr	r3, [pc, #32]	@ (800dcc4 <USBD_CDC_Init+0x1e8>)
 800dca4:	7819      	ldrb	r1, [r3, #0]
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dcac:	2340      	movs	r3, #64	@ 0x40
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	f000 ff6a 	bl	800eb88 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dcb4:	2300      	movs	r3, #0
}
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	3710      	adds	r7, #16
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bd80      	pop	{r7, pc}
 800dcbe:	bf00      	nop
 800dcc0:	200000b3 	.word	0x200000b3
 800dcc4:	200000b4 	.word	0x200000b4
 800dcc8:	200000b5 	.word	0x200000b5

0800dccc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b082      	sub	sp, #8
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
 800dcd4:	460b      	mov	r3, r1
 800dcd6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800dcd8:	4b3a      	ldr	r3, [pc, #232]	@ (800ddc4 <USBD_CDC_DeInit+0xf8>)
 800dcda:	781b      	ldrb	r3, [r3, #0]
 800dcdc:	4619      	mov	r1, r3
 800dcde:	6878      	ldr	r0, [r7, #4]
 800dce0:	f000 fea7 	bl	800ea32 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800dce4:	4b37      	ldr	r3, [pc, #220]	@ (800ddc4 <USBD_CDC_DeInit+0xf8>)
 800dce6:	781b      	ldrb	r3, [r3, #0]
 800dce8:	f003 020f 	and.w	r2, r3, #15
 800dcec:	6879      	ldr	r1, [r7, #4]
 800dcee:	4613      	mov	r3, r2
 800dcf0:	009b      	lsls	r3, r3, #2
 800dcf2:	4413      	add	r3, r2
 800dcf4:	009b      	lsls	r3, r3, #2
 800dcf6:	440b      	add	r3, r1
 800dcf8:	3324      	adds	r3, #36	@ 0x24
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800dcfe:	4b32      	ldr	r3, [pc, #200]	@ (800ddc8 <USBD_CDC_DeInit+0xfc>)
 800dd00:	781b      	ldrb	r3, [r3, #0]
 800dd02:	4619      	mov	r1, r3
 800dd04:	6878      	ldr	r0, [r7, #4]
 800dd06:	f000 fe94 	bl	800ea32 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800dd0a:	4b2f      	ldr	r3, [pc, #188]	@ (800ddc8 <USBD_CDC_DeInit+0xfc>)
 800dd0c:	781b      	ldrb	r3, [r3, #0]
 800dd0e:	f003 020f 	and.w	r2, r3, #15
 800dd12:	6879      	ldr	r1, [r7, #4]
 800dd14:	4613      	mov	r3, r2
 800dd16:	009b      	lsls	r3, r3, #2
 800dd18:	4413      	add	r3, r2
 800dd1a:	009b      	lsls	r3, r3, #2
 800dd1c:	440b      	add	r3, r1
 800dd1e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800dd22:	2200      	movs	r2, #0
 800dd24:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800dd26:	4b29      	ldr	r3, [pc, #164]	@ (800ddcc <USBD_CDC_DeInit+0x100>)
 800dd28:	781b      	ldrb	r3, [r3, #0]
 800dd2a:	4619      	mov	r1, r3
 800dd2c:	6878      	ldr	r0, [r7, #4]
 800dd2e:	f000 fe80 	bl	800ea32 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800dd32:	4b26      	ldr	r3, [pc, #152]	@ (800ddcc <USBD_CDC_DeInit+0x100>)
 800dd34:	781b      	ldrb	r3, [r3, #0]
 800dd36:	f003 020f 	and.w	r2, r3, #15
 800dd3a:	6879      	ldr	r1, [r7, #4]
 800dd3c:	4613      	mov	r3, r2
 800dd3e:	009b      	lsls	r3, r3, #2
 800dd40:	4413      	add	r3, r2
 800dd42:	009b      	lsls	r3, r3, #2
 800dd44:	440b      	add	r3, r1
 800dd46:	3324      	adds	r3, #36	@ 0x24
 800dd48:	2200      	movs	r2, #0
 800dd4a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800dd4c:	4b1f      	ldr	r3, [pc, #124]	@ (800ddcc <USBD_CDC_DeInit+0x100>)
 800dd4e:	781b      	ldrb	r3, [r3, #0]
 800dd50:	f003 020f 	and.w	r2, r3, #15
 800dd54:	6879      	ldr	r1, [r7, #4]
 800dd56:	4613      	mov	r3, r2
 800dd58:	009b      	lsls	r3, r3, #2
 800dd5a:	4413      	add	r3, r2
 800dd5c:	009b      	lsls	r3, r3, #2
 800dd5e:	440b      	add	r3, r1
 800dd60:	3326      	adds	r3, #38	@ 0x26
 800dd62:	2200      	movs	r2, #0
 800dd64:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	32b0      	adds	r2, #176	@ 0xb0
 800dd70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d01f      	beq.n	800ddb8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dd7e:	687a      	ldr	r2, [r7, #4]
 800dd80:	33b0      	adds	r3, #176	@ 0xb0
 800dd82:	009b      	lsls	r3, r3, #2
 800dd84:	4413      	add	r3, r2
 800dd86:	685b      	ldr	r3, [r3, #4]
 800dd88:	685b      	ldr	r3, [r3, #4]
 800dd8a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	32b0      	adds	r2, #176	@ 0xb0
 800dd96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	f000 ff30 	bl	800ec00 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	32b0      	adds	r2, #176	@ 0xb0
 800ddaa:	2100      	movs	r1, #0
 800ddac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ddb8:	2300      	movs	r3, #0
}
 800ddba:	4618      	mov	r0, r3
 800ddbc:	3708      	adds	r7, #8
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd80      	pop	{r7, pc}
 800ddc2:	bf00      	nop
 800ddc4:	200000b3 	.word	0x200000b3
 800ddc8:	200000b4 	.word	0x200000b4
 800ddcc:	200000b5 	.word	0x200000b5

0800ddd0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b086      	sub	sp, #24
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
 800ddd8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	32b0      	adds	r2, #176	@ 0xb0
 800dde4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dde8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ddea:	2300      	movs	r3, #0
 800ddec:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ddee:	2300      	movs	r3, #0
 800ddf0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ddf6:	693b      	ldr	r3, [r7, #16]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d101      	bne.n	800de00 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ddfc:	2303      	movs	r3, #3
 800ddfe:	e0bf      	b.n	800df80 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800de00:	683b      	ldr	r3, [r7, #0]
 800de02:	781b      	ldrb	r3, [r3, #0]
 800de04:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d050      	beq.n	800deae <USBD_CDC_Setup+0xde>
 800de0c:	2b20      	cmp	r3, #32
 800de0e:	f040 80af 	bne.w	800df70 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	88db      	ldrh	r3, [r3, #6]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d03a      	beq.n	800de90 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800de1a:	683b      	ldr	r3, [r7, #0]
 800de1c:	781b      	ldrb	r3, [r3, #0]
 800de1e:	b25b      	sxtb	r3, r3
 800de20:	2b00      	cmp	r3, #0
 800de22:	da1b      	bge.n	800de5c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800de2a:	687a      	ldr	r2, [r7, #4]
 800de2c:	33b0      	adds	r3, #176	@ 0xb0
 800de2e:	009b      	lsls	r3, r3, #2
 800de30:	4413      	add	r3, r2
 800de32:	685b      	ldr	r3, [r3, #4]
 800de34:	689b      	ldr	r3, [r3, #8]
 800de36:	683a      	ldr	r2, [r7, #0]
 800de38:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800de3a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800de3c:	683a      	ldr	r2, [r7, #0]
 800de3e:	88d2      	ldrh	r2, [r2, #6]
 800de40:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800de42:	683b      	ldr	r3, [r7, #0]
 800de44:	88db      	ldrh	r3, [r3, #6]
 800de46:	2b07      	cmp	r3, #7
 800de48:	bf28      	it	cs
 800de4a:	2307      	movcs	r3, #7
 800de4c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800de4e:	693b      	ldr	r3, [r7, #16]
 800de50:	89fa      	ldrh	r2, [r7, #14]
 800de52:	4619      	mov	r1, r3
 800de54:	6878      	ldr	r0, [r7, #4]
 800de56:	f002 f9c6 	bl	80101e6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800de5a:	e090      	b.n	800df7e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	785a      	ldrb	r2, [r3, #1]
 800de60:	693b      	ldr	r3, [r7, #16]
 800de62:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800de66:	683b      	ldr	r3, [r7, #0]
 800de68:	88db      	ldrh	r3, [r3, #6]
 800de6a:	2b3f      	cmp	r3, #63	@ 0x3f
 800de6c:	d803      	bhi.n	800de76 <USBD_CDC_Setup+0xa6>
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	88db      	ldrh	r3, [r3, #6]
 800de72:	b2da      	uxtb	r2, r3
 800de74:	e000      	b.n	800de78 <USBD_CDC_Setup+0xa8>
 800de76:	2240      	movs	r2, #64	@ 0x40
 800de78:	693b      	ldr	r3, [r7, #16]
 800de7a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800de7e:	6939      	ldr	r1, [r7, #16]
 800de80:	693b      	ldr	r3, [r7, #16]
 800de82:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800de86:	461a      	mov	r2, r3
 800de88:	6878      	ldr	r0, [r7, #4]
 800de8a:	f002 f9d8 	bl	801023e <USBD_CtlPrepareRx>
      break;
 800de8e:	e076      	b.n	800df7e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800de96:	687a      	ldr	r2, [r7, #4]
 800de98:	33b0      	adds	r3, #176	@ 0xb0
 800de9a:	009b      	lsls	r3, r3, #2
 800de9c:	4413      	add	r3, r2
 800de9e:	685b      	ldr	r3, [r3, #4]
 800dea0:	689b      	ldr	r3, [r3, #8]
 800dea2:	683a      	ldr	r2, [r7, #0]
 800dea4:	7850      	ldrb	r0, [r2, #1]
 800dea6:	2200      	movs	r2, #0
 800dea8:	6839      	ldr	r1, [r7, #0]
 800deaa:	4798      	blx	r3
      break;
 800deac:	e067      	b.n	800df7e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800deae:	683b      	ldr	r3, [r7, #0]
 800deb0:	785b      	ldrb	r3, [r3, #1]
 800deb2:	2b0b      	cmp	r3, #11
 800deb4:	d851      	bhi.n	800df5a <USBD_CDC_Setup+0x18a>
 800deb6:	a201      	add	r2, pc, #4	@ (adr r2, 800debc <USBD_CDC_Setup+0xec>)
 800deb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800debc:	0800deed 	.word	0x0800deed
 800dec0:	0800df69 	.word	0x0800df69
 800dec4:	0800df5b 	.word	0x0800df5b
 800dec8:	0800df5b 	.word	0x0800df5b
 800decc:	0800df5b 	.word	0x0800df5b
 800ded0:	0800df5b 	.word	0x0800df5b
 800ded4:	0800df5b 	.word	0x0800df5b
 800ded8:	0800df5b 	.word	0x0800df5b
 800dedc:	0800df5b 	.word	0x0800df5b
 800dee0:	0800df5b 	.word	0x0800df5b
 800dee4:	0800df17 	.word	0x0800df17
 800dee8:	0800df41 	.word	0x0800df41
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800def2:	b2db      	uxtb	r3, r3
 800def4:	2b03      	cmp	r3, #3
 800def6:	d107      	bne.n	800df08 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800def8:	f107 030a 	add.w	r3, r7, #10
 800defc:	2202      	movs	r2, #2
 800defe:	4619      	mov	r1, r3
 800df00:	6878      	ldr	r0, [r7, #4]
 800df02:	f002 f970 	bl	80101e6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800df06:	e032      	b.n	800df6e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800df08:	6839      	ldr	r1, [r7, #0]
 800df0a:	6878      	ldr	r0, [r7, #4]
 800df0c:	f001 ffed 	bl	800feea <USBD_CtlError>
            ret = USBD_FAIL;
 800df10:	2303      	movs	r3, #3
 800df12:	75fb      	strb	r3, [r7, #23]
          break;
 800df14:	e02b      	b.n	800df6e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800df1c:	b2db      	uxtb	r3, r3
 800df1e:	2b03      	cmp	r3, #3
 800df20:	d107      	bne.n	800df32 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800df22:	f107 030d 	add.w	r3, r7, #13
 800df26:	2201      	movs	r2, #1
 800df28:	4619      	mov	r1, r3
 800df2a:	6878      	ldr	r0, [r7, #4]
 800df2c:	f002 f95b 	bl	80101e6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800df30:	e01d      	b.n	800df6e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800df32:	6839      	ldr	r1, [r7, #0]
 800df34:	6878      	ldr	r0, [r7, #4]
 800df36:	f001 ffd8 	bl	800feea <USBD_CtlError>
            ret = USBD_FAIL;
 800df3a:	2303      	movs	r3, #3
 800df3c:	75fb      	strb	r3, [r7, #23]
          break;
 800df3e:	e016      	b.n	800df6e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800df46:	b2db      	uxtb	r3, r3
 800df48:	2b03      	cmp	r3, #3
 800df4a:	d00f      	beq.n	800df6c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800df4c:	6839      	ldr	r1, [r7, #0]
 800df4e:	6878      	ldr	r0, [r7, #4]
 800df50:	f001 ffcb 	bl	800feea <USBD_CtlError>
            ret = USBD_FAIL;
 800df54:	2303      	movs	r3, #3
 800df56:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800df58:	e008      	b.n	800df6c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800df5a:	6839      	ldr	r1, [r7, #0]
 800df5c:	6878      	ldr	r0, [r7, #4]
 800df5e:	f001 ffc4 	bl	800feea <USBD_CtlError>
          ret = USBD_FAIL;
 800df62:	2303      	movs	r3, #3
 800df64:	75fb      	strb	r3, [r7, #23]
          break;
 800df66:	e002      	b.n	800df6e <USBD_CDC_Setup+0x19e>
          break;
 800df68:	bf00      	nop
 800df6a:	e008      	b.n	800df7e <USBD_CDC_Setup+0x1ae>
          break;
 800df6c:	bf00      	nop
      }
      break;
 800df6e:	e006      	b.n	800df7e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800df70:	6839      	ldr	r1, [r7, #0]
 800df72:	6878      	ldr	r0, [r7, #4]
 800df74:	f001 ffb9 	bl	800feea <USBD_CtlError>
      ret = USBD_FAIL;
 800df78:	2303      	movs	r3, #3
 800df7a:	75fb      	strb	r3, [r7, #23]
      break;
 800df7c:	bf00      	nop
  }

  return (uint8_t)ret;
 800df7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800df80:	4618      	mov	r0, r3
 800df82:	3718      	adds	r7, #24
 800df84:	46bd      	mov	sp, r7
 800df86:	bd80      	pop	{r7, pc}

0800df88 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b084      	sub	sp, #16
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
 800df90:	460b      	mov	r3, r1
 800df92:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800df9a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	32b0      	adds	r2, #176	@ 0xb0
 800dfa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d101      	bne.n	800dfb2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800dfae:	2303      	movs	r3, #3
 800dfb0:	e065      	b.n	800e07e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	32b0      	adds	r2, #176	@ 0xb0
 800dfbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfc0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800dfc2:	78fb      	ldrb	r3, [r7, #3]
 800dfc4:	f003 020f 	and.w	r2, r3, #15
 800dfc8:	6879      	ldr	r1, [r7, #4]
 800dfca:	4613      	mov	r3, r2
 800dfcc:	009b      	lsls	r3, r3, #2
 800dfce:	4413      	add	r3, r2
 800dfd0:	009b      	lsls	r3, r3, #2
 800dfd2:	440b      	add	r3, r1
 800dfd4:	3318      	adds	r3, #24
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d02f      	beq.n	800e03c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800dfdc:	78fb      	ldrb	r3, [r7, #3]
 800dfde:	f003 020f 	and.w	r2, r3, #15
 800dfe2:	6879      	ldr	r1, [r7, #4]
 800dfe4:	4613      	mov	r3, r2
 800dfe6:	009b      	lsls	r3, r3, #2
 800dfe8:	4413      	add	r3, r2
 800dfea:	009b      	lsls	r3, r3, #2
 800dfec:	440b      	add	r3, r1
 800dfee:	3318      	adds	r3, #24
 800dff0:	681a      	ldr	r2, [r3, #0]
 800dff2:	78fb      	ldrb	r3, [r7, #3]
 800dff4:	f003 010f 	and.w	r1, r3, #15
 800dff8:	68f8      	ldr	r0, [r7, #12]
 800dffa:	460b      	mov	r3, r1
 800dffc:	009b      	lsls	r3, r3, #2
 800dffe:	440b      	add	r3, r1
 800e000:	00db      	lsls	r3, r3, #3
 800e002:	4403      	add	r3, r0
 800e004:	3324      	adds	r3, #36	@ 0x24
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	fbb2 f1f3 	udiv	r1, r2, r3
 800e00c:	fb01 f303 	mul.w	r3, r1, r3
 800e010:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e012:	2b00      	cmp	r3, #0
 800e014:	d112      	bne.n	800e03c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800e016:	78fb      	ldrb	r3, [r7, #3]
 800e018:	f003 020f 	and.w	r2, r3, #15
 800e01c:	6879      	ldr	r1, [r7, #4]
 800e01e:	4613      	mov	r3, r2
 800e020:	009b      	lsls	r3, r3, #2
 800e022:	4413      	add	r3, r2
 800e024:	009b      	lsls	r3, r3, #2
 800e026:	440b      	add	r3, r1
 800e028:	3318      	adds	r3, #24
 800e02a:	2200      	movs	r2, #0
 800e02c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e02e:	78f9      	ldrb	r1, [r7, #3]
 800e030:	2300      	movs	r3, #0
 800e032:	2200      	movs	r2, #0
 800e034:	6878      	ldr	r0, [r7, #4]
 800e036:	f000 fd8c 	bl	800eb52 <USBD_LL_Transmit>
 800e03a:	e01f      	b.n	800e07c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	2200      	movs	r2, #0
 800e040:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e04a:	687a      	ldr	r2, [r7, #4]
 800e04c:	33b0      	adds	r3, #176	@ 0xb0
 800e04e:	009b      	lsls	r3, r3, #2
 800e050:	4413      	add	r3, r2
 800e052:	685b      	ldr	r3, [r3, #4]
 800e054:	691b      	ldr	r3, [r3, #16]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d010      	beq.n	800e07c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e060:	687a      	ldr	r2, [r7, #4]
 800e062:	33b0      	adds	r3, #176	@ 0xb0
 800e064:	009b      	lsls	r3, r3, #2
 800e066:	4413      	add	r3, r2
 800e068:	685b      	ldr	r3, [r3, #4]
 800e06a:	691b      	ldr	r3, [r3, #16]
 800e06c:	68ba      	ldr	r2, [r7, #8]
 800e06e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800e072:	68ba      	ldr	r2, [r7, #8]
 800e074:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800e078:	78fa      	ldrb	r2, [r7, #3]
 800e07a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e07c:	2300      	movs	r3, #0
}
 800e07e:	4618      	mov	r0, r3
 800e080:	3710      	adds	r7, #16
 800e082:	46bd      	mov	sp, r7
 800e084:	bd80      	pop	{r7, pc}

0800e086 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e086:	b580      	push	{r7, lr}
 800e088:	b084      	sub	sp, #16
 800e08a:	af00      	add	r7, sp, #0
 800e08c:	6078      	str	r0, [r7, #4]
 800e08e:	460b      	mov	r3, r1
 800e090:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	32b0      	adds	r2, #176	@ 0xb0
 800e09c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0a0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	32b0      	adds	r2, #176	@ 0xb0
 800e0ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d101      	bne.n	800e0b8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800e0b4:	2303      	movs	r3, #3
 800e0b6:	e01a      	b.n	800e0ee <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e0b8:	78fb      	ldrb	r3, [r7, #3]
 800e0ba:	4619      	mov	r1, r3
 800e0bc:	6878      	ldr	r0, [r7, #4]
 800e0be:	f000 fd7e 	bl	800ebbe <USBD_LL_GetRxDataSize>
 800e0c2:	4602      	mov	r2, r0
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e0d0:	687a      	ldr	r2, [r7, #4]
 800e0d2:	33b0      	adds	r3, #176	@ 0xb0
 800e0d4:	009b      	lsls	r3, r3, #2
 800e0d6:	4413      	add	r3, r2
 800e0d8:	685b      	ldr	r3, [r3, #4]
 800e0da:	68db      	ldr	r3, [r3, #12]
 800e0dc:	68fa      	ldr	r2, [r7, #12]
 800e0de:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800e0e2:	68fa      	ldr	r2, [r7, #12]
 800e0e4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800e0e8:	4611      	mov	r1, r2
 800e0ea:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e0ec:	2300      	movs	r3, #0
}
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	3710      	adds	r7, #16
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}

0800e0f6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e0f6:	b580      	push	{r7, lr}
 800e0f8:	b084      	sub	sp, #16
 800e0fa:	af00      	add	r7, sp, #0
 800e0fc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	32b0      	adds	r2, #176	@ 0xb0
 800e108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e10c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d101      	bne.n	800e118 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e114:	2303      	movs	r3, #3
 800e116:	e024      	b.n	800e162 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e11e:	687a      	ldr	r2, [r7, #4]
 800e120:	33b0      	adds	r3, #176	@ 0xb0
 800e122:	009b      	lsls	r3, r3, #2
 800e124:	4413      	add	r3, r2
 800e126:	685b      	ldr	r3, [r3, #4]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d019      	beq.n	800e160 <USBD_CDC_EP0_RxReady+0x6a>
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800e132:	2bff      	cmp	r3, #255	@ 0xff
 800e134:	d014      	beq.n	800e160 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e13c:	687a      	ldr	r2, [r7, #4]
 800e13e:	33b0      	adds	r3, #176	@ 0xb0
 800e140:	009b      	lsls	r3, r3, #2
 800e142:	4413      	add	r3, r2
 800e144:	685b      	ldr	r3, [r3, #4]
 800e146:	689b      	ldr	r3, [r3, #8]
 800e148:	68fa      	ldr	r2, [r7, #12]
 800e14a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800e14e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800e150:	68fa      	ldr	r2, [r7, #12]
 800e152:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e156:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	22ff      	movs	r2, #255	@ 0xff
 800e15c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800e160:	2300      	movs	r3, #0
}
 800e162:	4618      	mov	r0, r3
 800e164:	3710      	adds	r7, #16
 800e166:	46bd      	mov	sp, r7
 800e168:	bd80      	pop	{r7, pc}
	...

0800e16c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b086      	sub	sp, #24
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e174:	2182      	movs	r1, #130	@ 0x82
 800e176:	4818      	ldr	r0, [pc, #96]	@ (800e1d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e178:	f001 f881 	bl	800f27e <USBD_GetEpDesc>
 800e17c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e17e:	2101      	movs	r1, #1
 800e180:	4815      	ldr	r0, [pc, #84]	@ (800e1d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e182:	f001 f87c 	bl	800f27e <USBD_GetEpDesc>
 800e186:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e188:	2181      	movs	r1, #129	@ 0x81
 800e18a:	4813      	ldr	r0, [pc, #76]	@ (800e1d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e18c:	f001 f877 	bl	800f27e <USBD_GetEpDesc>
 800e190:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e192:	697b      	ldr	r3, [r7, #20]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d002      	beq.n	800e19e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e198:	697b      	ldr	r3, [r7, #20]
 800e19a:	2210      	movs	r2, #16
 800e19c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e19e:	693b      	ldr	r3, [r7, #16]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d006      	beq.n	800e1b2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e1a4:	693b      	ldr	r3, [r7, #16]
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e1ac:	711a      	strb	r2, [r3, #4]
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d006      	beq.n	800e1c6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e1c0:	711a      	strb	r2, [r3, #4]
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	2243      	movs	r2, #67	@ 0x43
 800e1ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e1cc:	4b02      	ldr	r3, [pc, #8]	@ (800e1d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	3718      	adds	r7, #24
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd80      	pop	{r7, pc}
 800e1d6:	bf00      	nop
 800e1d8:	20000070 	.word	0x20000070

0800e1dc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b086      	sub	sp, #24
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e1e4:	2182      	movs	r1, #130	@ 0x82
 800e1e6:	4818      	ldr	r0, [pc, #96]	@ (800e248 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e1e8:	f001 f849 	bl	800f27e <USBD_GetEpDesc>
 800e1ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e1ee:	2101      	movs	r1, #1
 800e1f0:	4815      	ldr	r0, [pc, #84]	@ (800e248 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e1f2:	f001 f844 	bl	800f27e <USBD_GetEpDesc>
 800e1f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e1f8:	2181      	movs	r1, #129	@ 0x81
 800e1fa:	4813      	ldr	r0, [pc, #76]	@ (800e248 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e1fc:	f001 f83f 	bl	800f27e <USBD_GetEpDesc>
 800e200:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e202:	697b      	ldr	r3, [r7, #20]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d002      	beq.n	800e20e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800e208:	697b      	ldr	r3, [r7, #20]
 800e20a:	2210      	movs	r2, #16
 800e20c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e20e:	693b      	ldr	r3, [r7, #16]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d006      	beq.n	800e222 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e214:	693b      	ldr	r3, [r7, #16]
 800e216:	2200      	movs	r2, #0
 800e218:	711a      	strb	r2, [r3, #4]
 800e21a:	2200      	movs	r2, #0
 800e21c:	f042 0202 	orr.w	r2, r2, #2
 800e220:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d006      	beq.n	800e236 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	2200      	movs	r2, #0
 800e22c:	711a      	strb	r2, [r3, #4]
 800e22e:	2200      	movs	r2, #0
 800e230:	f042 0202 	orr.w	r2, r2, #2
 800e234:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	2243      	movs	r2, #67	@ 0x43
 800e23a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e23c:	4b02      	ldr	r3, [pc, #8]	@ (800e248 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800e23e:	4618      	mov	r0, r3
 800e240:	3718      	adds	r7, #24
 800e242:	46bd      	mov	sp, r7
 800e244:	bd80      	pop	{r7, pc}
 800e246:	bf00      	nop
 800e248:	20000070 	.word	0x20000070

0800e24c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b086      	sub	sp, #24
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e254:	2182      	movs	r1, #130	@ 0x82
 800e256:	4818      	ldr	r0, [pc, #96]	@ (800e2b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e258:	f001 f811 	bl	800f27e <USBD_GetEpDesc>
 800e25c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e25e:	2101      	movs	r1, #1
 800e260:	4815      	ldr	r0, [pc, #84]	@ (800e2b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e262:	f001 f80c 	bl	800f27e <USBD_GetEpDesc>
 800e266:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e268:	2181      	movs	r1, #129	@ 0x81
 800e26a:	4813      	ldr	r0, [pc, #76]	@ (800e2b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e26c:	f001 f807 	bl	800f27e <USBD_GetEpDesc>
 800e270:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e272:	697b      	ldr	r3, [r7, #20]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d002      	beq.n	800e27e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e278:	697b      	ldr	r3, [r7, #20]
 800e27a:	2210      	movs	r2, #16
 800e27c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e27e:	693b      	ldr	r3, [r7, #16]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d006      	beq.n	800e292 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e284:	693b      	ldr	r3, [r7, #16]
 800e286:	2200      	movs	r2, #0
 800e288:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e28c:	711a      	strb	r2, [r3, #4]
 800e28e:	2200      	movs	r2, #0
 800e290:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d006      	beq.n	800e2a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	2200      	movs	r2, #0
 800e29c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e2a0:	711a      	strb	r2, [r3, #4]
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	2243      	movs	r2, #67	@ 0x43
 800e2aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e2ac:	4b02      	ldr	r3, [pc, #8]	@ (800e2b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	3718      	adds	r7, #24
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	bd80      	pop	{r7, pc}
 800e2b6:	bf00      	nop
 800e2b8:	20000070 	.word	0x20000070

0800e2bc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e2bc:	b480      	push	{r7}
 800e2be:	b083      	sub	sp, #12
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	220a      	movs	r2, #10
 800e2c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e2ca:	4b03      	ldr	r3, [pc, #12]	@ (800e2d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	370c      	adds	r7, #12
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d6:	4770      	bx	lr
 800e2d8:	2000002c 	.word	0x2000002c

0800e2dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e2dc:	b480      	push	{r7}
 800e2de:	b083      	sub	sp, #12
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
 800e2e4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d101      	bne.n	800e2f0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e2ec:	2303      	movs	r3, #3
 800e2ee:	e009      	b.n	800e304 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e2f6:	687a      	ldr	r2, [r7, #4]
 800e2f8:	33b0      	adds	r3, #176	@ 0xb0
 800e2fa:	009b      	lsls	r3, r3, #2
 800e2fc:	4413      	add	r3, r2
 800e2fe:	683a      	ldr	r2, [r7, #0]
 800e300:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800e302:	2300      	movs	r3, #0
}
 800e304:	4618      	mov	r0, r3
 800e306:	370c      	adds	r7, #12
 800e308:	46bd      	mov	sp, r7
 800e30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30e:	4770      	bx	lr

0800e310 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e310:	b480      	push	{r7}
 800e312:	b087      	sub	sp, #28
 800e314:	af00      	add	r7, sp, #0
 800e316:	60f8      	str	r0, [r7, #12]
 800e318:	60b9      	str	r1, [r7, #8]
 800e31a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	32b0      	adds	r2, #176	@ 0xb0
 800e326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e32a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e32c:	697b      	ldr	r3, [r7, #20]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d101      	bne.n	800e336 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e332:	2303      	movs	r3, #3
 800e334:	e008      	b.n	800e348 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800e336:	697b      	ldr	r3, [r7, #20]
 800e338:	68ba      	ldr	r2, [r7, #8]
 800e33a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800e33e:	697b      	ldr	r3, [r7, #20]
 800e340:	687a      	ldr	r2, [r7, #4]
 800e342:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800e346:	2300      	movs	r3, #0
}
 800e348:	4618      	mov	r0, r3
 800e34a:	371c      	adds	r7, #28
 800e34c:	46bd      	mov	sp, r7
 800e34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e352:	4770      	bx	lr

0800e354 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e354:	b480      	push	{r7}
 800e356:	b085      	sub	sp, #20
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
 800e35c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	32b0      	adds	r2, #176	@ 0xb0
 800e368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e36c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d101      	bne.n	800e378 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800e374:	2303      	movs	r3, #3
 800e376:	e004      	b.n	800e382 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	683a      	ldr	r2, [r7, #0]
 800e37c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800e380:	2300      	movs	r3, #0
}
 800e382:	4618      	mov	r0, r3
 800e384:	3714      	adds	r7, #20
 800e386:	46bd      	mov	sp, r7
 800e388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38c:	4770      	bx	lr
	...

0800e390 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b084      	sub	sp, #16
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	32b0      	adds	r2, #176	@ 0xb0
 800e3a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3a6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800e3a8:	2301      	movs	r3, #1
 800e3aa:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d101      	bne.n	800e3b6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e3b2:	2303      	movs	r3, #3
 800e3b4:	e025      	b.n	800e402 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800e3b6:	68bb      	ldr	r3, [r7, #8]
 800e3b8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d11f      	bne.n	800e400 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e3c0:	68bb      	ldr	r3, [r7, #8]
 800e3c2:	2201      	movs	r2, #1
 800e3c4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800e3c8:	4b10      	ldr	r3, [pc, #64]	@ (800e40c <USBD_CDC_TransmitPacket+0x7c>)
 800e3ca:	781b      	ldrb	r3, [r3, #0]
 800e3cc:	f003 020f 	and.w	r2, r3, #15
 800e3d0:	68bb      	ldr	r3, [r7, #8]
 800e3d2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	4613      	mov	r3, r2
 800e3da:	009b      	lsls	r3, r3, #2
 800e3dc:	4413      	add	r3, r2
 800e3de:	009b      	lsls	r3, r3, #2
 800e3e0:	4403      	add	r3, r0
 800e3e2:	3318      	adds	r3, #24
 800e3e4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800e3e6:	4b09      	ldr	r3, [pc, #36]	@ (800e40c <USBD_CDC_TransmitPacket+0x7c>)
 800e3e8:	7819      	ldrb	r1, [r3, #0]
 800e3ea:	68bb      	ldr	r3, [r7, #8]
 800e3ec:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800e3f0:	68bb      	ldr	r3, [r7, #8]
 800e3f2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800e3f6:	6878      	ldr	r0, [r7, #4]
 800e3f8:	f000 fbab 	bl	800eb52 <USBD_LL_Transmit>

    ret = USBD_OK;
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e400:	7bfb      	ldrb	r3, [r7, #15]
}
 800e402:	4618      	mov	r0, r3
 800e404:	3710      	adds	r7, #16
 800e406:	46bd      	mov	sp, r7
 800e408:	bd80      	pop	{r7, pc}
 800e40a:	bf00      	nop
 800e40c:	200000b3 	.word	0x200000b3

0800e410 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b084      	sub	sp, #16
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	32b0      	adds	r2, #176	@ 0xb0
 800e422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e426:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	32b0      	adds	r2, #176	@ 0xb0
 800e432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d101      	bne.n	800e43e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800e43a:	2303      	movs	r3, #3
 800e43c:	e018      	b.n	800e470 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	7c1b      	ldrb	r3, [r3, #16]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d10a      	bne.n	800e45c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e446:	4b0c      	ldr	r3, [pc, #48]	@ (800e478 <USBD_CDC_ReceivePacket+0x68>)
 800e448:	7819      	ldrb	r1, [r3, #0]
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e450:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e454:	6878      	ldr	r0, [r7, #4]
 800e456:	f000 fb97 	bl	800eb88 <USBD_LL_PrepareReceive>
 800e45a:	e008      	b.n	800e46e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e45c:	4b06      	ldr	r3, [pc, #24]	@ (800e478 <USBD_CDC_ReceivePacket+0x68>)
 800e45e:	7819      	ldrb	r1, [r3, #0]
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e466:	2340      	movs	r3, #64	@ 0x40
 800e468:	6878      	ldr	r0, [r7, #4]
 800e46a:	f000 fb8d 	bl	800eb88 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e46e:	2300      	movs	r3, #0
}
 800e470:	4618      	mov	r0, r3
 800e472:	3710      	adds	r7, #16
 800e474:	46bd      	mov	sp, r7
 800e476:	bd80      	pop	{r7, pc}
 800e478:	200000b4 	.word	0x200000b4

0800e47c <TEMPLATE_Init>:
  *         Initializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Init(void)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	af00      	add	r7, sp, #0
      USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e480:	2200      	movs	r2, #0
 800e482:	4905      	ldr	r1, [pc, #20]	@ (800e498 <TEMPLATE_Init+0x1c>)
 800e484:	4805      	ldr	r0, [pc, #20]	@ (800e49c <TEMPLATE_Init+0x20>)
 800e486:	f7ff ff43 	bl	800e310 <USBD_CDC_SetTxBuffer>
      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e48a:	4905      	ldr	r1, [pc, #20]	@ (800e4a0 <TEMPLATE_Init+0x24>)
 800e48c:	4803      	ldr	r0, [pc, #12]	@ (800e49c <TEMPLATE_Init+0x20>)
 800e48e:	f7ff ff61 	bl	800e354 <USBD_CDC_SetRxBuffer>
      return (0);
 800e492:	2300      	movs	r3, #0
}
 800e494:	4618      	mov	r0, r3
 800e496:	bd80      	pop	{r7, pc}
 800e498:	20000d3c 	.word	0x20000d3c
 800e49c:	200007b4 	.word	0x200007b4
 800e4a0:	20000b3c 	.word	0x20000b3c

0800e4a4 <TEMPLATE_DeInit>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_DeInit(void)
{
 800e4a4:	b480      	push	{r7}
 800e4a6:	af00      	add	r7, sp, #0
  /*
     Add your deinitialization code here
  */
  return (0);
 800e4a8:	2300      	movs	r3, #0
}
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b2:	4770      	bx	lr

0800e4b4 <USB_Transmit>:

uint8_t USB_Transmit(uint8_t *data, uint32_t len)
{
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b0ba      	sub	sp, #232	@ 0xe8
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	6078      	str	r0, [r7, #4]
 800e4bc:	6039      	str	r1, [r7, #0]
    uint32_t offset = 0;
 800e4be:	2300      	movs	r3, #0
 800e4c0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    while (offset < len)
 800e4c4:	e084      	b.n	800e5d0 <USB_Transmit+0x11c>
    {
        uint16_t chunk_len = ((len - offset) >= CDC_BLOCK_SIZE) ? CDC_BLOCK_SIZE : (len - offset);
 800e4c6:	683a      	ldr	r2, [r7, #0]
 800e4c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e4cc:	1ad3      	subs	r3, r2, r3
 800e4ce:	2b40      	cmp	r3, #64	@ 0x40
 800e4d0:	bf28      	it	cs
 800e4d2:	2340      	movcs	r3, #64	@ 0x40
 800e4d4:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
        tx_complete = 0;
 800e4d8:	4b43      	ldr	r3, [pc, #268]	@ (800e5e8 <USB_Transmit+0x134>)
 800e4da:	2200      	movs	r2, #0
 800e4dc:	701a      	strb	r2, [r3, #0]
        USBD_CDC_SetTxBuffer(&hUsbDeviceFS, &data[offset], chunk_len);
 800e4de:	687a      	ldr	r2, [r7, #4]
 800e4e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e4e4:	4413      	add	r3, r2
 800e4e6:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	@ 0xd6
 800e4ea:	4619      	mov	r1, r3
 800e4ec:	483f      	ldr	r0, [pc, #252]	@ (800e5ec <USB_Transmit+0x138>)
 800e4ee:	f7ff ff0f 	bl	800e310 <USBD_CDC_SetTxBuffer>

        // Prepare log string
        char log_line[CDC_BLOCK_SIZE * 3 + 1] = {0};
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	60fb      	str	r3, [r7, #12]
 800e4f6:	f107 0310 	add.w	r3, r7, #16
 800e4fa:	22bd      	movs	r2, #189	@ 0xbd
 800e4fc:	2100      	movs	r1, #0
 800e4fe:	4618      	mov	r0, r3
 800e500:	f002 f896 	bl	8010630 <memset>
        char *ptr = log_line;
 800e504:	f107 030c 	add.w	r3, r7, #12
 800e508:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
        for (uint16_t i = 0; i < chunk_len; i++)
 800e50c:	2300      	movs	r3, #0
 800e50e:	f8a7 30de 	strh.w	r3, [r7, #222]	@ 0xde
 800e512:	e019      	b.n	800e548 <USB_Transmit+0x94>
        {
            ptr += sprintf(ptr, "%02X ", data[offset + i]);
 800e514:	f8b7 20de 	ldrh.w	r2, [r7, #222]	@ 0xde
 800e518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e51c:	4413      	add	r3, r2
 800e51e:	687a      	ldr	r2, [r7, #4]
 800e520:	4413      	add	r3, r2
 800e522:	781b      	ldrb	r3, [r3, #0]
 800e524:	461a      	mov	r2, r3
 800e526:	4932      	ldr	r1, [pc, #200]	@ (800e5f0 <USB_Transmit+0x13c>)
 800e528:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 800e52c:	f001 ffe4 	bl	80104f8 <siprintf>
 800e530:	4603      	mov	r3, r0
 800e532:	461a      	mov	r2, r3
 800e534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e538:	4413      	add	r3, r2
 800e53a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
        for (uint16_t i = 0; i < chunk_len; i++)
 800e53e:	f8b7 30de 	ldrh.w	r3, [r7, #222]	@ 0xde
 800e542:	3301      	adds	r3, #1
 800e544:	f8a7 30de 	strh.w	r3, [r7, #222]	@ 0xde
 800e548:	f8b7 20de 	ldrh.w	r2, [r7, #222]	@ 0xde
 800e54c:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 800e550:	429a      	cmp	r2, r3
 800e552:	d3df      	bcc.n	800e514 <USB_Transmit+0x60>
        }

        // Log the data and its size
        log_info("USB Tx (%d bytes): %s", chunk_len, log_line);
 800e554:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 800e558:	f107 020c 	add.w	r2, r7, #12
 800e55c:	4619      	mov	r1, r3
 800e55e:	4825      	ldr	r0, [pc, #148]	@ (800e5f4 <USB_Transmit+0x140>)
 800e560:	f7f2 f87c 	bl	800065c <log_info>

        if (USBD_CDC_TransmitPacket(&hUsbDeviceFS) != USBD_OK)
 800e564:	4821      	ldr	r0, [pc, #132]	@ (800e5ec <USB_Transmit+0x138>)
 800e566:	f7ff ff13 	bl	800e390 <USBD_CDC_TransmitPacket>
 800e56a:	4603      	mov	r3, r0
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d001      	beq.n	800e574 <USB_Transmit+0xc0>
        {
            return USBD_FAIL;
 800e570:	2303      	movs	r3, #3
 800e572:	e034      	b.n	800e5de <USB_Transmit+0x12a>
        }

        uint32_t timeout = 10000;
 800e574:	f242 7310 	movw	r3, #10000	@ 0x2710
 800e578:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
        while (tx_complete == 0 && timeout--);
 800e57c:	bf00      	nop
 800e57e:	4b1a      	ldr	r3, [pc, #104]	@ (800e5e8 <USB_Transmit+0x134>)
 800e580:	781b      	ldrb	r3, [r3, #0]
 800e582:	b2db      	uxtb	r3, r3
 800e584:	2b00      	cmp	r3, #0
 800e586:	d106      	bne.n	800e596 <USB_Transmit+0xe2>
 800e588:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e58c:	1e5a      	subs	r2, r3, #1
 800e58e:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 800e592:	2b00      	cmp	r3, #0
 800e594:	d1f3      	bne.n	800e57e <USB_Transmit+0xca>
        if (timeout == 0)
 800e596:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d104      	bne.n	800e5a8 <USB_Transmit+0xf4>
        {
            log_error("USB TX Timeout");
 800e59e:	4816      	ldr	r0, [pc, #88]	@ (800e5f8 <USB_Transmit+0x144>)
 800e5a0:	f7f2 f876 	bl	8000690 <log_error>
            return USBD_FAIL;
 800e5a4:	2303      	movs	r3, #3
 800e5a6:	e01a      	b.n	800e5de <USB_Transmit+0x12a>
        }

        offset += chunk_len;
 800e5a8:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 800e5ac:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800e5b0:	4413      	add	r3, r2
 800e5b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

        // Optional delay — helps avoid subtle race conditions in some MCUs
        for (volatile int i = 0; i < 200; i++);
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e5bc:	e004      	b.n	800e5c8 <USB_Transmit+0x114>
 800e5be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800e5c2:	3301      	adds	r3, #1
 800e5c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e5c8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800e5cc:	2bc7      	cmp	r3, #199	@ 0xc7
 800e5ce:	ddf6      	ble.n	800e5be <USB_Transmit+0x10a>
    while (offset < len)
 800e5d0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800e5d4:	683b      	ldr	r3, [r7, #0]
 800e5d6:	429a      	cmp	r2, r3
 800e5d8:	f4ff af75 	bcc.w	800e4c6 <USB_Transmit+0x12>
    }
    return USBD_OK;
 800e5dc:	2300      	movs	r3, #0
}
 800e5de:	4618      	mov	r0, r3
 800e5e0:	37e8      	adds	r7, #232	@ 0xe8
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	bd80      	pop	{r7, pc}
 800e5e6:	bf00      	nop
 800e5e8:	200000b6 	.word	0x200000b6
 800e5ec:	200007b4 	.word	0x200007b4
 800e5f0:	08011738 	.word	0x08011738
 800e5f4:	08011740 	.word	0x08011740
 800e5f8:	08011758 	.word	0x08011758

0800e5fc <TEMPLATE_Control>:
  * @param  Buf: Buffer containing command data (request parameters)
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Control(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 800e5fc:	b480      	push	{r7}
 800e5fe:	b083      	sub	sp, #12
 800e600:	af00      	add	r7, sp, #0
 800e602:	4603      	mov	r3, r0
 800e604:	6039      	str	r1, [r7, #0]
 800e606:	71fb      	strb	r3, [r7, #7]
 800e608:	4613      	mov	r3, r2
 800e60a:	80bb      	strh	r3, [r7, #4]
  UNUSED(length);

  switch (cmd)
 800e60c:	79fb      	ldrb	r3, [r7, #7]
 800e60e:	2b23      	cmp	r3, #35	@ 0x23
 800e610:	f200 8098 	bhi.w	800e744 <TEMPLATE_Control+0x148>
 800e614:	a201      	add	r2, pc, #4	@ (adr r2, 800e61c <TEMPLATE_Control+0x20>)
 800e616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e61a:	bf00      	nop
 800e61c:	0800e745 	.word	0x0800e745
 800e620:	0800e745 	.word	0x0800e745
 800e624:	0800e745 	.word	0x0800e745
 800e628:	0800e745 	.word	0x0800e745
 800e62c:	0800e745 	.word	0x0800e745
 800e630:	0800e745 	.word	0x0800e745
 800e634:	0800e745 	.word	0x0800e745
 800e638:	0800e745 	.word	0x0800e745
 800e63c:	0800e745 	.word	0x0800e745
 800e640:	0800e745 	.word	0x0800e745
 800e644:	0800e745 	.word	0x0800e745
 800e648:	0800e745 	.word	0x0800e745
 800e64c:	0800e745 	.word	0x0800e745
 800e650:	0800e745 	.word	0x0800e745
 800e654:	0800e745 	.word	0x0800e745
 800e658:	0800e745 	.word	0x0800e745
 800e65c:	0800e745 	.word	0x0800e745
 800e660:	0800e745 	.word	0x0800e745
 800e664:	0800e745 	.word	0x0800e745
 800e668:	0800e745 	.word	0x0800e745
 800e66c:	0800e745 	.word	0x0800e745
 800e670:	0800e745 	.word	0x0800e745
 800e674:	0800e745 	.word	0x0800e745
 800e678:	0800e745 	.word	0x0800e745
 800e67c:	0800e745 	.word	0x0800e745
 800e680:	0800e745 	.word	0x0800e745
 800e684:	0800e745 	.word	0x0800e745
 800e688:	0800e745 	.word	0x0800e745
 800e68c:	0800e745 	.word	0x0800e745
 800e690:	0800e745 	.word	0x0800e745
 800e694:	0800e745 	.word	0x0800e745
 800e698:	0800e745 	.word	0x0800e745
 800e69c:	0800e6ad 	.word	0x0800e6ad
 800e6a0:	0800e6f1 	.word	0x0800e6f1
 800e6a4:	0800e745 	.word	0x0800e745
 800e6a8:	0800e745 	.word	0x0800e745
    case CDC_CLEAR_COMM_FEATURE:
      /* Add your code here */
      break;

    case CDC_SET_LINE_CODING:
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800e6ac:	683b      	ldr	r3, [r7, #0]
 800e6ae:	781b      	ldrb	r3, [r3, #0]
 800e6b0:	461a      	mov	r2, r3
 800e6b2:	683b      	ldr	r3, [r7, #0]
 800e6b4:	3301      	adds	r3, #1
 800e6b6:	781b      	ldrb	r3, [r3, #0]
 800e6b8:	021b      	lsls	r3, r3, #8
 800e6ba:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800e6bc:	683b      	ldr	r3, [r7, #0]
 800e6be:	3302      	adds	r3, #2
 800e6c0:	781b      	ldrb	r3, [r3, #0]
 800e6c2:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800e6c4:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800e6c6:	683b      	ldr	r3, [r7, #0]
 800e6c8:	3303      	adds	r3, #3
 800e6ca:	781b      	ldrb	r3, [r3, #0]
 800e6cc:	061b      	lsls	r3, r3, #24
 800e6ce:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800e6d0:	461a      	mov	r2, r3
 800e6d2:	4b20      	ldr	r3, [pc, #128]	@ (800e754 <TEMPLATE_Control+0x158>)
 800e6d4:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 800e6d6:	683b      	ldr	r3, [r7, #0]
 800e6d8:	791a      	ldrb	r2, [r3, #4]
 800e6da:	4b1e      	ldr	r3, [pc, #120]	@ (800e754 <TEMPLATE_Control+0x158>)
 800e6dc:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 800e6de:	683b      	ldr	r3, [r7, #0]
 800e6e0:	795a      	ldrb	r2, [r3, #5]
 800e6e2:	4b1c      	ldr	r3, [pc, #112]	@ (800e754 <TEMPLATE_Control+0x158>)
 800e6e4:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 800e6e6:	683b      	ldr	r3, [r7, #0]
 800e6e8:	799a      	ldrb	r2, [r3, #6]
 800e6ea:	4b1a      	ldr	r3, [pc, #104]	@ (800e754 <TEMPLATE_Control+0x158>)
 800e6ec:	719a      	strb	r2, [r3, #6]

      /* Add your code here */
      break;
 800e6ee:	e02a      	b.n	800e746 <TEMPLATE_Control+0x14a>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 800e6f0:	4b18      	ldr	r3, [pc, #96]	@ (800e754 <TEMPLATE_Control+0x158>)
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	b2da      	uxtb	r2, r3
 800e6f6:	683b      	ldr	r3, [r7, #0]
 800e6f8:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 800e6fa:	4b16      	ldr	r3, [pc, #88]	@ (800e754 <TEMPLATE_Control+0x158>)
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	0a1a      	lsrs	r2, r3, #8
 800e700:	683b      	ldr	r3, [r7, #0]
 800e702:	3301      	adds	r3, #1
 800e704:	b2d2      	uxtb	r2, r2
 800e706:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 800e708:	4b12      	ldr	r3, [pc, #72]	@ (800e754 <TEMPLATE_Control+0x158>)
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	0c1a      	lsrs	r2, r3, #16
 800e70e:	683b      	ldr	r3, [r7, #0]
 800e710:	3302      	adds	r3, #2
 800e712:	b2d2      	uxtb	r2, r2
 800e714:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 800e716:	4b0f      	ldr	r3, [pc, #60]	@ (800e754 <TEMPLATE_Control+0x158>)
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	0e1a      	lsrs	r2, r3, #24
 800e71c:	683b      	ldr	r3, [r7, #0]
 800e71e:	3303      	adds	r3, #3
 800e720:	b2d2      	uxtb	r2, r2
 800e722:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 800e724:	683b      	ldr	r3, [r7, #0]
 800e726:	3304      	adds	r3, #4
 800e728:	4a0a      	ldr	r2, [pc, #40]	@ (800e754 <TEMPLATE_Control+0x158>)
 800e72a:	7912      	ldrb	r2, [r2, #4]
 800e72c:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 800e72e:	683b      	ldr	r3, [r7, #0]
 800e730:	3305      	adds	r3, #5
 800e732:	4a08      	ldr	r2, [pc, #32]	@ (800e754 <TEMPLATE_Control+0x158>)
 800e734:	7952      	ldrb	r2, [r2, #5]
 800e736:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	3306      	adds	r3, #6
 800e73c:	4a05      	ldr	r2, [pc, #20]	@ (800e754 <TEMPLATE_Control+0x158>)
 800e73e:	7992      	ldrb	r2, [r2, #6]
 800e740:	701a      	strb	r2, [r3, #0]

      /* Add your code here */
      break;
 800e742:	e000      	b.n	800e746 <TEMPLATE_Control+0x14a>
    case CDC_SEND_BREAK:
      /* Add your code here */
      break;

    default:
      break;
 800e744:	bf00      	nop
  }

  return (0);
 800e746:	2300      	movs	r3, #0
}
 800e748:	4618      	mov	r0, r3
 800e74a:	370c      	adds	r7, #12
 800e74c:	46bd      	mov	sp, r7
 800e74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e752:	4770      	bx	lr
 800e754:	200000cc 	.word	0x200000cc

0800e758 <TEMPLATE_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Receive(uint8_t *Buf, uint32_t *Len)
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b0b6      	sub	sp, #216	@ 0xd8
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
 800e760:	6039      	str	r1, [r7, #0]
    uint32_t maxLen = (*Len > CDC_DATA_FS_MAX_PACKET_SIZE) ? CDC_DATA_FS_MAX_PACKET_SIZE : *Len;
 800e762:	683b      	ldr	r3, [r7, #0]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	2b40      	cmp	r3, #64	@ 0x40
 800e768:	bf28      	it	cs
 800e76a:	2340      	movcs	r3, #64	@ 0x40
 800e76c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    char hexStr[3 * CDC_DATA_FS_MAX_PACKET_SIZE + 1] = {0};
 800e770:	2300      	movs	r3, #0
 800e772:	60fb      	str	r3, [r7, #12]
 800e774:	f107 0310 	add.w	r3, r7, #16
 800e778:	22bd      	movs	r2, #189	@ 0xbd
 800e77a:	2100      	movs	r1, #0
 800e77c:	4618      	mov	r0, r3
 800e77e:	f001 ff57 	bl	8010630 <memset>
    for (uint32_t i = 0; i < maxLen; ++i)
 800e782:	2300      	movs	r3, #0
 800e784:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e788:	e015      	b.n	800e7b6 <TEMPLATE_Receive+0x5e>
    {
        snprintf(&hexStr[i * 3], 4, "%02X ", Buf[i]);
 800e78a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800e78e:	4613      	mov	r3, r2
 800e790:	005b      	lsls	r3, r3, #1
 800e792:	4413      	add	r3, r2
 800e794:	f107 020c 	add.w	r2, r7, #12
 800e798:	18d0      	adds	r0, r2, r3
 800e79a:	687a      	ldr	r2, [r7, #4]
 800e79c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e7a0:	4413      	add	r3, r2
 800e7a2:	781b      	ldrb	r3, [r3, #0]
 800e7a4:	4a23      	ldr	r2, [pc, #140]	@ (800e834 <TEMPLATE_Receive+0xdc>)
 800e7a6:	2104      	movs	r1, #4
 800e7a8:	f001 fe72 	bl	8010490 <sniprintf>
    for (uint32_t i = 0; i < maxLen; ++i)
 800e7ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e7b0:	3301      	adds	r3, #1
 800e7b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e7b6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800e7ba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800e7be:	429a      	cmp	r2, r3
 800e7c0:	d3e3      	bcc.n	800e78a <TEMPLATE_Receive+0x32>
    }
    log_info("USB Rx (%lu bytes): %s", *Len, hexStr);
 800e7c2:	683b      	ldr	r3, [r7, #0]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	f107 020c 	add.w	r2, r7, #12
 800e7ca:	4619      	mov	r1, r3
 800e7cc:	481a      	ldr	r0, [pc, #104]	@ (800e838 <TEMPLATE_Receive+0xe0>)
 800e7ce:	f7f1 ff45 	bl	800065c <log_info>

    if ((usb_rx_index + *Len) < MAX_USB_DATA_SIZE)
 800e7d2:	683b      	ldr	r3, [r7, #0]
 800e7d4:	681a      	ldr	r2, [r3, #0]
 800e7d6:	4b19      	ldr	r3, [pc, #100]	@ (800e83c <TEMPLATE_Receive+0xe4>)
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	4413      	add	r3, r2
 800e7dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e7e0:	d215      	bcs.n	800e80e <TEMPLATE_Receive+0xb6>
    {
        memcpy(&usb_rx_buffer[usb_rx_index], Buf, *Len);
 800e7e2:	4b16      	ldr	r3, [pc, #88]	@ (800e83c <TEMPLATE_Receive+0xe4>)
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	4a16      	ldr	r2, [pc, #88]	@ (800e840 <TEMPLATE_Receive+0xe8>)
 800e7e8:	1898      	adds	r0, r3, r2
 800e7ea:	683b      	ldr	r3, [r7, #0]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	461a      	mov	r2, r3
 800e7f0:	6879      	ldr	r1, [r7, #4]
 800e7f2:	f001 ff98 	bl	8010726 <memcpy>
        usb_rx_index += *Len;
 800e7f6:	683b      	ldr	r3, [r7, #0]
 800e7f8:	681a      	ldr	r2, [r3, #0]
 800e7fa:	4b10      	ldr	r3, [pc, #64]	@ (800e83c <TEMPLATE_Receive+0xe4>)
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	4413      	add	r3, r2
 800e800:	4a0e      	ldr	r2, [pc, #56]	@ (800e83c <TEMPLATE_Receive+0xe4>)
 800e802:	6013      	str	r3, [r2, #0]
        usb_rx_index = 0;
        log_error("USB buffer overflow");
        return USBD_FAIL;
    }

    if (*Len < CDC_DATA_FS_MAX_PACKET_SIZE)
 800e804:	683b      	ldr	r3, [r7, #0]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	2b3f      	cmp	r3, #63	@ 0x3f
 800e80a:	d80b      	bhi.n	800e824 <TEMPLATE_Receive+0xcc>
 800e80c:	e007      	b.n	800e81e <TEMPLATE_Receive+0xc6>
        usb_rx_index = 0;
 800e80e:	4b0b      	ldr	r3, [pc, #44]	@ (800e83c <TEMPLATE_Receive+0xe4>)
 800e810:	2200      	movs	r2, #0
 800e812:	601a      	str	r2, [r3, #0]
        log_error("USB buffer overflow");
 800e814:	480b      	ldr	r0, [pc, #44]	@ (800e844 <TEMPLATE_Receive+0xec>)
 800e816:	f7f1 ff3b 	bl	8000690 <log_error>
        return USBD_FAIL;
 800e81a:	2303      	movs	r3, #3
 800e81c:	e006      	b.n	800e82c <TEMPLATE_Receive+0xd4>
    {
        usb_rx_complete = true;
 800e81e:	4b0a      	ldr	r3, [pc, #40]	@ (800e848 <TEMPLATE_Receive+0xf0>)
 800e820:	2201      	movs	r2, #1
 800e822:	701a      	strb	r2, [r3, #0]
    }

    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e824:	4809      	ldr	r0, [pc, #36]	@ (800e84c <TEMPLATE_Receive+0xf4>)
 800e826:	f7ff fdf3 	bl	800e410 <USBD_CDC_ReceivePacket>
    return USBD_OK;
 800e82a:	2300      	movs	r3, #0
}
 800e82c:	4618      	mov	r0, r3
 800e82e:	37d8      	adds	r7, #216	@ 0xd8
 800e830:	46bd      	mov	sp, r7
 800e832:	bd80      	pop	{r7, pc}
 800e834:	08011738 	.word	0x08011738
 800e838:	08011768 	.word	0x08011768
 800e83c:	20010f3c 	.word	0x20010f3c
 800e840:	20000f3c 	.word	0x20000f3c
 800e844:	08011780 	.word	0x08011780
 800e848:	20010f40 	.word	0x20010f40
 800e84c:	200007b4 	.word	0x200007b4

0800e850 <TEMPLATE_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_TransmitCplt(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e850:	b480      	push	{r7}
 800e852:	b085      	sub	sp, #20
 800e854:	af00      	add	r7, sp, #0
 800e856:	60f8      	str	r0, [r7, #12]
 800e858:	60b9      	str	r1, [r7, #8]
 800e85a:	4613      	mov	r3, r2
 800e85c:	71fb      	strb	r3, [r7, #7]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);

  return 0;
 800e85e:	2300      	movs	r3, #0

}
 800e860:	4618      	mov	r0, r3
 800e862:	3714      	adds	r7, #20
 800e864:	46bd      	mov	sp, r7
 800e866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86a:	4770      	bx	lr

0800e86c <HAL_PCD_SetupStageCallback>:
extern PCD_HandleTypeDef hpcd_USB_DRD_FS;
/* Private function prototypes -----------------------------------------------*/
static USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status);
/* Private functions ---------------------------------------------------------*/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b082      	sub	sp, #8
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800e880:	4619      	mov	r1, r3
 800e882:	4610      	mov	r0, r2
 800e884:	f000 faa5 	bl	800edd2 <USBD_LL_SetupStage>
}
 800e888:	bf00      	nop
 800e88a:	3708      	adds	r7, #8
 800e88c:	46bd      	mov	sp, r7
 800e88e:	bd80      	pop	{r7, pc}

0800e890 <HAL_PCD_DataOutStageCallback>:

void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b082      	sub	sp, #8
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
 800e898:	460b      	mov	r3, r1
 800e89a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 800e8a2:	78fa      	ldrb	r2, [r7, #3]
 800e8a4:	6879      	ldr	r1, [r7, #4]
 800e8a6:	4613      	mov	r3, r2
 800e8a8:	009b      	lsls	r3, r3, #2
 800e8aa:	4413      	add	r3, r2
 800e8ac:	00db      	lsls	r3, r3, #3
 800e8ae:	440b      	add	r3, r1
 800e8b0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800e8b4:	681a      	ldr	r2, [r3, #0]
 800e8b6:	78fb      	ldrb	r3, [r7, #3]
 800e8b8:	4619      	mov	r1, r3
 800e8ba:	f000 fadf 	bl	800ee7c <USBD_LL_DataOutStage>
}
 800e8be:	bf00      	nop
 800e8c0:	3708      	adds	r7, #8
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	bd80      	pop	{r7, pc}

0800e8c6 <HAL_PCD_DataInStageCallback>:

void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800e8c6:	b580      	push	{r7, lr}
 800e8c8:	b082      	sub	sp, #8
 800e8ca:	af00      	add	r7, sp, #0
 800e8cc:	6078      	str	r0, [r7, #4]
 800e8ce:	460b      	mov	r3, r1
 800e8d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 800e8d8:	78fa      	ldrb	r2, [r7, #3]
 800e8da:	6879      	ldr	r1, [r7, #4]
 800e8dc:	4613      	mov	r3, r2
 800e8de:	009b      	lsls	r3, r3, #2
 800e8e0:	4413      	add	r3, r2
 800e8e2:	00db      	lsls	r3, r3, #3
 800e8e4:	440b      	add	r3, r1
 800e8e6:	3328      	adds	r3, #40	@ 0x28
 800e8e8:	681a      	ldr	r2, [r3, #0]
 800e8ea:	78fb      	ldrb	r3, [r7, #3]
 800e8ec:	4619      	mov	r1, r3
 800e8ee:	f000 fb78 	bl	800efe2 <USBD_LL_DataInStage>
}
 800e8f2:	bf00      	nop
 800e8f4:	3708      	adds	r7, #8
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	bd80      	pop	{r7, pc}

0800e8fa <HAL_PCD_SOFCallback>:

void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800e8fa:	b580      	push	{r7, lr}
 800e8fc:	b082      	sub	sp, #8
 800e8fe:	af00      	add	r7, sp, #0
 800e900:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800e908:	4618      	mov	r0, r3
 800e90a:	f000 fc7e 	bl	800f20a <USBD_LL_SOF>
}
 800e90e:	bf00      	nop
 800e910:	3708      	adds	r7, #8
 800e912:	46bd      	mov	sp, r7
 800e914:	bd80      	pop	{r7, pc}

0800e916 <HAL_PCD_ResetCallback>:

void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800e916:	b580      	push	{r7, lr}
 800e918:	b084      	sub	sp, #16
 800e91a:	af00      	add	r7, sp, #0
 800e91c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e91e:	2301      	movs	r3, #1
 800e920:	73fb      	strb	r3, [r7, #15]
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	79db      	ldrb	r3, [r3, #7]
 800e926:	2b02      	cmp	r3, #2
 800e928:	d001      	beq.n	800e92e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e92a:	f7f2 fb97 	bl	800105c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800e934:	7bfa      	ldrb	r2, [r7, #15]
 800e936:	4611      	mov	r1, r2
 800e938:	4618      	mov	r0, r3
 800e93a:	f000 fc56 	bl	800f1ea <USBD_LL_SetSpeed>
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800e944:	4618      	mov	r0, r3
 800e946:	f000 fbfe 	bl	800f146 <USBD_LL_Reset>
}
 800e94a:	bf00      	nop
 800e94c:	3710      	adds	r7, #16
 800e94e:	46bd      	mov	sp, r7
 800e950:	bd80      	pop	{r7, pc}
	...

0800e954 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e954:	b580      	push	{r7, lr}
 800e956:	b082      	sub	sp, #8
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
      pdev->pData  = &hpcd_USB_DRD_FS;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	4a19      	ldr	r2, [pc, #100]	@ (800e9c4 <USBD_LL_Init+0x70>)
 800e960:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x40);
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e96a:	2340      	movs	r3, #64	@ 0x40
 800e96c:	2200      	movs	r2, #0
 800e96e:	2100      	movs	r1, #0
 800e970:	f7f5 fdce 	bl	8004510 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x80);
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e97a:	2380      	movs	r3, #128	@ 0x80
 800e97c:	2200      	movs	r2, #0
 800e97e:	2180      	movs	r1, #128	@ 0x80
 800e980:	f7f5 fdc6 	bl	8004510 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0xC0);
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e98a:	23c0      	movs	r3, #192	@ 0xc0
 800e98c:	2200      	movs	r2, #0
 800e98e:	2181      	movs	r1, #129	@ 0x81
 800e990:	f7f5 fdbe 	bl	8004510 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0x100);
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e99a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e99e:	2200      	movs	r2, #0
 800e9a0:	2101      	movs	r1, #1
 800e9a2:	f7f5 fdb5 	bl	8004510 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x140);
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e9ac:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	2182      	movs	r1, #130	@ 0x82
 800e9b4:	f7f5 fdac 	bl	8004510 <HAL_PCDEx_PMAConfig>
      return USBD_OK;
 800e9b8:	2300      	movs	r3, #0
}
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	3708      	adds	r7, #8
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	bd80      	pop	{r7, pc}
 800e9c2:	bf00      	nop
 800e9c4:	200004d0 	.word	0x200004d0

0800e9c8 <USBD_LL_Start>:
      hal_status = HAL_PCD_DeInit(pdev->pData);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b084      	sub	sp, #16
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_Start(pdev->pData);
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	f7f4 fa7e 	bl	8002ed8 <HAL_PCD_Start>
 800e9dc:	4603      	mov	r3, r0
 800e9de:	73fb      	strb	r3, [r7, #15]
      return  USBD_Get_USB_Status(hal_status);
 800e9e0:	7bfb      	ldrb	r3, [r7, #15]
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	f000 f916 	bl	800ec14 <USBD_Get_USB_Status>
 800e9e8:	4603      	mov	r3, r0
}
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	3710      	adds	r7, #16
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	bd80      	pop	{r7, pc}

0800e9f2 <USBD_LL_OpenEP>:
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t ep_type, uint16_t ep_mps)
{
 800e9f2:	b580      	push	{r7, lr}
 800e9f4:	b084      	sub	sp, #16
 800e9f6:	af00      	add	r7, sp, #0
 800e9f8:	6078      	str	r0, [r7, #4]
 800e9fa:	4608      	mov	r0, r1
 800e9fc:	4611      	mov	r1, r2
 800e9fe:	461a      	mov	r2, r3
 800ea00:	4603      	mov	r3, r0
 800ea02:	70fb      	strb	r3, [r7, #3]
 800ea04:	460b      	mov	r3, r1
 800ea06:	70bb      	strb	r3, [r7, #2]
 800ea08:	4613      	mov	r3, r2
 800ea0a:	803b      	strh	r3, [r7, #0]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ea12:	78bb      	ldrb	r3, [r7, #2]
 800ea14:	883a      	ldrh	r2, [r7, #0]
 800ea16:	78f9      	ldrb	r1, [r7, #3]
 800ea18:	f7f4 fbad 	bl	8003176 <HAL_PCD_EP_Open>
 800ea1c:	4603      	mov	r3, r0
 800ea1e:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800ea20:	7bfb      	ldrb	r3, [r7, #15]
 800ea22:	4618      	mov	r0, r3
 800ea24:	f000 f8f6 	bl	800ec14 <USBD_Get_USB_Status>
 800ea28:	4603      	mov	r3, r0
}
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	3710      	adds	r7, #16
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	bd80      	pop	{r7, pc}

0800ea32 <USBD_LL_CloseEP>:

USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ea32:	b580      	push	{r7, lr}
 800ea34:	b084      	sub	sp, #16
 800ea36:	af00      	add	r7, sp, #0
 800ea38:	6078      	str	r0, [r7, #4]
 800ea3a:	460b      	mov	r3, r1
 800ea3c:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ea44:	78fa      	ldrb	r2, [r7, #3]
 800ea46:	4611      	mov	r1, r2
 800ea48:	4618      	mov	r0, r3
 800ea4a:	f7f4 fbf5 	bl	8003238 <HAL_PCD_EP_Close>
 800ea4e:	4603      	mov	r3, r0
 800ea50:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800ea52:	7bfb      	ldrb	r3, [r7, #15]
 800ea54:	4618      	mov	r0, r3
 800ea56:	f000 f8dd 	bl	800ec14 <USBD_Get_USB_Status>
 800ea5a:	4603      	mov	r3, r0
}
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	3710      	adds	r7, #16
 800ea60:	46bd      	mov	sp, r7
 800ea62:	bd80      	pop	{r7, pc}

0800ea64 <USBD_LL_StallEP>:
      hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b084      	sub	sp, #16
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
 800ea6c:	460b      	mov	r3, r1
 800ea6e:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ea76:	78fa      	ldrb	r2, [r7, #3]
 800ea78:	4611      	mov	r1, r2
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	f7f4 fca8 	bl	80033d0 <HAL_PCD_EP_SetStall>
 800ea80:	4603      	mov	r3, r0
 800ea82:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800ea84:	7bfb      	ldrb	r3, [r7, #15]
 800ea86:	4618      	mov	r0, r3
 800ea88:	f000 f8c4 	bl	800ec14 <USBD_Get_USB_Status>
 800ea8c:	4603      	mov	r3, r0
}
 800ea8e:	4618      	mov	r0, r3
 800ea90:	3710      	adds	r7, #16
 800ea92:	46bd      	mov	sp, r7
 800ea94:	bd80      	pop	{r7, pc}

0800ea96 <USBD_LL_ClearStallEP>:

USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr)
{
 800ea96:	b580      	push	{r7, lr}
 800ea98:	b084      	sub	sp, #16
 800ea9a:	af00      	add	r7, sp, #0
 800ea9c:	6078      	str	r0, [r7, #4]
 800ea9e:	460b      	mov	r3, r1
 800eaa0:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800eaa8:	78fa      	ldrb	r2, [r7, #3]
 800eaaa:	4611      	mov	r1, r2
 800eaac:	4618      	mov	r0, r3
 800eaae:	f7f4 fce3 	bl	8003478 <HAL_PCD_EP_ClrStall>
 800eab2:	4603      	mov	r3, r0
 800eab4:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800eab6:	7bfb      	ldrb	r3, [r7, #15]
 800eab8:	4618      	mov	r0, r3
 800eaba:	f000 f8ab 	bl	800ec14 <USBD_Get_USB_Status>
 800eabe:	4603      	mov	r3, r0
}
 800eac0:	4618      	mov	r0, r3
 800eac2:	3710      	adds	r7, #16
 800eac4:	46bd      	mov	sp, r7
 800eac6:	bd80      	pop	{r7, pc}

0800eac8 <USBD_LL_IsStallEP>:

uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eac8:	b480      	push	{r7}
 800eaca:	b085      	sub	sp, #20
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
 800ead0:	460b      	mov	r3, r1
 800ead2:	70fb      	strb	r3, [r7, #3]
      PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800eada:	60fb      	str	r3, [r7, #12]
      if((ep_addr & 0x80) == 0x80)
 800eadc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	da0b      	bge.n	800eafc <USBD_LL_IsStallEP+0x34>
      {
             return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800eae4:	78fb      	ldrb	r3, [r7, #3]
 800eae6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800eaea:	68f9      	ldr	r1, [r7, #12]
 800eaec:	4613      	mov	r3, r2
 800eaee:	009b      	lsls	r3, r3, #2
 800eaf0:	4413      	add	r3, r2
 800eaf2:	00db      	lsls	r3, r3, #3
 800eaf4:	440b      	add	r3, r1
 800eaf6:	3316      	adds	r3, #22
 800eaf8:	781b      	ldrb	r3, [r3, #0]
 800eafa:	e00b      	b.n	800eb14 <USBD_LL_IsStallEP+0x4c>
      }
      else
      {
             return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800eafc:	78fb      	ldrb	r3, [r7, #3]
 800eafe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800eb02:	68f9      	ldr	r1, [r7, #12]
 800eb04:	4613      	mov	r3, r2
 800eb06:	009b      	lsls	r3, r3, #2
 800eb08:	4413      	add	r3, r2
 800eb0a:	00db      	lsls	r3, r3, #3
 800eb0c:	440b      	add	r3, r1
 800eb0e:	f503 73ab 	add.w	r3, r3, #342	@ 0x156
 800eb12:	781b      	ldrb	r3, [r3, #0]
      }
}
 800eb14:	4618      	mov	r0, r3
 800eb16:	3714      	adds	r7, #20
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1e:	4770      	bx	lr

0800eb20 <USBD_LL_SetUSBAddress>:

USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev,
             uint8_t dev_addr)
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b084      	sub	sp, #16
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
 800eb28:	460b      	mov	r3, r1
 800eb2a:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800eb32:	78fa      	ldrb	r2, [r7, #3]
 800eb34:	4611      	mov	r1, r2
 800eb36:	4618      	mov	r0, r3
 800eb38:	f7f4 faf9 	bl	800312e <HAL_PCD_SetAddress>
 800eb3c:	4603      	mov	r3, r0
 800eb3e:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800eb40:	7bfb      	ldrb	r3, [r7, #15]
 800eb42:	4618      	mov	r0, r3
 800eb44:	f000 f866 	bl	800ec14 <USBD_Get_USB_Status>
 800eb48:	4603      	mov	r3, r0
}
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	3710      	adds	r7, #16
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd80      	pop	{r7, pc}

0800eb52 <USBD_LL_Transmit>:

USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t *pbuf, uint32_t size)
{
 800eb52:	b580      	push	{r7, lr}
 800eb54:	b086      	sub	sp, #24
 800eb56:	af00      	add	r7, sp, #0
 800eb58:	60f8      	str	r0, [r7, #12]
 800eb5a:	607a      	str	r2, [r7, #4]
 800eb5c:	603b      	str	r3, [r7, #0]
 800eb5e:	460b      	mov	r3, r1
 800eb60:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800eb68:	7af9      	ldrb	r1, [r7, #11]
 800eb6a:	683b      	ldr	r3, [r7, #0]
 800eb6c:	687a      	ldr	r2, [r7, #4]
 800eb6e:	f7f4 fbf7 	bl	8003360 <HAL_PCD_EP_Transmit>
 800eb72:	4603      	mov	r3, r0
 800eb74:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 800eb76:	7dfb      	ldrb	r3, [r7, #23]
 800eb78:	4618      	mov	r0, r3
 800eb7a:	f000 f84b 	bl	800ec14 <USBD_Get_USB_Status>
 800eb7e:	4603      	mov	r3, r0
}
 800eb80:	4618      	mov	r0, r3
 800eb82:	3718      	adds	r7, #24
 800eb84:	46bd      	mov	sp, r7
 800eb86:	bd80      	pop	{r7, pc}

0800eb88 <USBD_LL_PrepareReceive>:

USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr, uint8_t *pbuf,
             uint32_t size)
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b086      	sub	sp, #24
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	60f8      	str	r0, [r7, #12]
 800eb90:	607a      	str	r2, [r7, #4]
 800eb92:	603b      	str	r3, [r7, #0]
 800eb94:	460b      	mov	r3, r1
 800eb96:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800eb9e:	7af9      	ldrb	r1, [r7, #11]
 800eba0:	683b      	ldr	r3, [r7, #0]
 800eba2:	687a      	ldr	r2, [r7, #4]
 800eba4:	f7f4 fb92 	bl	80032cc <HAL_PCD_EP_Receive>
 800eba8:	4603      	mov	r3, r0
 800ebaa:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 800ebac:	7dfb      	ldrb	r3, [r7, #23]
 800ebae:	4618      	mov	r0, r3
 800ebb0:	f000 f830 	bl	800ec14 <USBD_Get_USB_Status>
 800ebb4:	4603      	mov	r3, r0
}
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	3718      	adds	r7, #24
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	bd80      	pop	{r7, pc}

0800ebbe <USBD_LL_GetRxDataSize>:

uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ebbe:	b580      	push	{r7, lr}
 800ebc0:	b082      	sub	sp, #8
 800ebc2:	af00      	add	r7, sp, #0
 800ebc4:	6078      	str	r0, [r7, #4]
 800ebc6:	460b      	mov	r3, r1
 800ebc8:	70fb      	strb	r3, [r7, #3]
      return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ebd0:	78fa      	ldrb	r2, [r7, #3]
 800ebd2:	4611      	mov	r1, r2
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	f7f4 fbab 	bl	8003330 <HAL_PCD_EP_GetRxCount>
 800ebda:	4603      	mov	r3, r0
}
 800ebdc:	4618      	mov	r0, r3
 800ebde:	3708      	adds	r7, #8
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	bd80      	pop	{r7, pc}

0800ebe4 <USBD_static_malloc>:

void *USBD_static_malloc(uint32_t size)
{
 800ebe4:	b480      	push	{r7}
 800ebe6:	b083      	sub	sp, #12
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
      UNUSED(size);
      static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef) / 4) + 1]; /* On 32-bit boundary */
      return mem;
 800ebec:	4b03      	ldr	r3, [pc, #12]	@ (800ebfc <USBD_static_malloc+0x18>)
}
 800ebee:	4618      	mov	r0, r3
 800ebf0:	370c      	adds	r7, #12
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf8:	4770      	bx	lr
 800ebfa:	bf00      	nop
 800ebfc:	20010f44 	.word	0x20010f44

0800ec00 <USBD_static_free>:

void USBD_static_free(void *p)
{
 800ec00:	b480      	push	{r7}
 800ec02:	b083      	sub	sp, #12
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
      UNUSED(p);
}
 800ec08:	bf00      	nop
 800ec0a:	370c      	adds	r7, #12
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec12:	4770      	bx	lr

0800ec14 <USBD_Get_USB_Status>:
{
      HAL_Delay(Delay);
}

USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ec14:	b480      	push	{r7}
 800ec16:	b085      	sub	sp, #20
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	71fb      	strb	r3, [r7, #7]
      USBD_StatusTypeDef usb_status = USBD_OK;
 800ec1e:	2300      	movs	r3, #0
 800ec20:	73fb      	strb	r3, [r7, #15]
      switch (hal_status)
 800ec22:	79fb      	ldrb	r3, [r7, #7]
 800ec24:	2b03      	cmp	r3, #3
 800ec26:	d817      	bhi.n	800ec58 <USBD_Get_USB_Status+0x44>
 800ec28:	a201      	add	r2, pc, #4	@ (adr r2, 800ec30 <USBD_Get_USB_Status+0x1c>)
 800ec2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec2e:	bf00      	nop
 800ec30:	0800ec41 	.word	0x0800ec41
 800ec34:	0800ec47 	.word	0x0800ec47
 800ec38:	0800ec4d 	.word	0x0800ec4d
 800ec3c:	0800ec53 	.word	0x0800ec53
      {
      case HAL_OK :
             usb_status = USBD_OK;
 800ec40:	2300      	movs	r3, #0
 800ec42:	73fb      	strb	r3, [r7, #15]
             break;
 800ec44:	e00b      	b.n	800ec5e <USBD_Get_USB_Status+0x4a>
      case HAL_ERROR :
             usb_status = USBD_FAIL;
 800ec46:	2303      	movs	r3, #3
 800ec48:	73fb      	strb	r3, [r7, #15]
             break;
 800ec4a:	e008      	b.n	800ec5e <USBD_Get_USB_Status+0x4a>
      case HAL_BUSY :
             usb_status = USBD_BUSY;
 800ec4c:	2301      	movs	r3, #1
 800ec4e:	73fb      	strb	r3, [r7, #15]
             break;
 800ec50:	e005      	b.n	800ec5e <USBD_Get_USB_Status+0x4a>
      case HAL_TIMEOUT :
             usb_status = USBD_FAIL;
 800ec52:	2303      	movs	r3, #3
 800ec54:	73fb      	strb	r3, [r7, #15]
             break;
 800ec56:	e002      	b.n	800ec5e <USBD_Get_USB_Status+0x4a>
      default :
             usb_status = USBD_FAIL;
 800ec58:	2303      	movs	r3, #3
 800ec5a:	73fb      	strb	r3, [r7, #15]
             break;
 800ec5c:	bf00      	nop
      }
      return usb_status;
 800ec5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec60:	4618      	mov	r0, r3
 800ec62:	3714      	adds	r7, #20
 800ec64:	46bd      	mov	sp, r7
 800ec66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6a:	4770      	bx	lr

0800ec6c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b086      	sub	sp, #24
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	60f8      	str	r0, [r7, #12]
 800ec74:	60b9      	str	r1, [r7, #8]
 800ec76:	4613      	mov	r3, r2
 800ec78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d101      	bne.n	800ec84 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ec80:	2303      	movs	r3, #3
 800ec82:	e01f      	b.n	800ecc4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	2200      	movs	r2, #0
 800ec88:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	2200      	movs	r2, #0
 800ec90:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	2200      	movs	r2, #0
 800ec98:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ec9c:	68bb      	ldr	r3, [r7, #8]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d003      	beq.n	800ecaa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	68ba      	ldr	r2, [r7, #8]
 800eca6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	2201      	movs	r2, #1
 800ecae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	79fa      	ldrb	r2, [r7, #7]
 800ecb6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ecb8:	68f8      	ldr	r0, [r7, #12]
 800ecba:	f7ff fe4b 	bl	800e954 <USBD_LL_Init>
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ecc2:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	3718      	adds	r7, #24
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	bd80      	pop	{r7, pc}

0800eccc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b084      	sub	sp, #16
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	6078      	str	r0, [r7, #4]
 800ecd4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ecda:	683b      	ldr	r3, [r7, #0]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d101      	bne.n	800ece4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ece0:	2303      	movs	r3, #3
 800ece2:	e025      	b.n	800ed30 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	683a      	ldr	r2, [r7, #0]
 800ece8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	32ae      	adds	r2, #174	@ 0xae
 800ecf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d00f      	beq.n	800ed20 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	32ae      	adds	r2, #174	@ 0xae
 800ed0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed10:	f107 020e 	add.w	r2, r7, #14
 800ed14:	4610      	mov	r0, r2
 800ed16:	4798      	blx	r3
 800ed18:	4602      	mov	r2, r0
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ed26:	1c5a      	adds	r2, r3, #1
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800ed2e:	2300      	movs	r3, #0
}
 800ed30:	4618      	mov	r0, r3
 800ed32:	3710      	adds	r7, #16
 800ed34:	46bd      	mov	sp, r7
 800ed36:	bd80      	pop	{r7, pc}

0800ed38 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b082      	sub	sp, #8
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ed40:	6878      	ldr	r0, [r7, #4]
 800ed42:	f7ff fe41 	bl	800e9c8 <USBD_LL_Start>
 800ed46:	4603      	mov	r3, r0
}
 800ed48:	4618      	mov	r0, r3
 800ed4a:	3708      	adds	r7, #8
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	bd80      	pop	{r7, pc}

0800ed50 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ed50:	b480      	push	{r7}
 800ed52:	b083      	sub	sp, #12
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ed58:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	370c      	adds	r7, #12
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed64:	4770      	bx	lr

0800ed66 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ed66:	b580      	push	{r7, lr}
 800ed68:	b084      	sub	sp, #16
 800ed6a:	af00      	add	r7, sp, #0
 800ed6c:	6078      	str	r0, [r7, #4]
 800ed6e:	460b      	mov	r3, r1
 800ed70:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ed72:	2300      	movs	r3, #0
 800ed74:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d009      	beq.n	800ed94 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	78fa      	ldrb	r2, [r7, #3]
 800ed8a:	4611      	mov	r1, r2
 800ed8c:	6878      	ldr	r0, [r7, #4]
 800ed8e:	4798      	blx	r3
 800ed90:	4603      	mov	r3, r0
 800ed92:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ed94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed96:	4618      	mov	r0, r3
 800ed98:	3710      	adds	r7, #16
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	bd80      	pop	{r7, pc}

0800ed9e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ed9e:	b580      	push	{r7, lr}
 800eda0:	b084      	sub	sp, #16
 800eda2:	af00      	add	r7, sp, #0
 800eda4:	6078      	str	r0, [r7, #4]
 800eda6:	460b      	mov	r3, r1
 800eda8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800edaa:	2300      	movs	r3, #0
 800edac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800edb4:	685b      	ldr	r3, [r3, #4]
 800edb6:	78fa      	ldrb	r2, [r7, #3]
 800edb8:	4611      	mov	r1, r2
 800edba:	6878      	ldr	r0, [r7, #4]
 800edbc:	4798      	blx	r3
 800edbe:	4603      	mov	r3, r0
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d001      	beq.n	800edc8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800edc4:	2303      	movs	r3, #3
 800edc6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800edc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800edca:	4618      	mov	r0, r3
 800edcc:	3710      	adds	r7, #16
 800edce:	46bd      	mov	sp, r7
 800edd0:	bd80      	pop	{r7, pc}

0800edd2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800edd2:	b580      	push	{r7, lr}
 800edd4:	b084      	sub	sp, #16
 800edd6:	af00      	add	r7, sp, #0
 800edd8:	6078      	str	r0, [r7, #4]
 800edda:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ede2:	6839      	ldr	r1, [r7, #0]
 800ede4:	4618      	mov	r0, r3
 800ede6:	f001 f846 	bl	800fe76 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	2201      	movs	r2, #1
 800edee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800edf8:	461a      	mov	r2, r3
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ee06:	f003 031f 	and.w	r3, r3, #31
 800ee0a:	2b02      	cmp	r3, #2
 800ee0c:	d01a      	beq.n	800ee44 <USBD_LL_SetupStage+0x72>
 800ee0e:	2b02      	cmp	r3, #2
 800ee10:	d822      	bhi.n	800ee58 <USBD_LL_SetupStage+0x86>
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d002      	beq.n	800ee1c <USBD_LL_SetupStage+0x4a>
 800ee16:	2b01      	cmp	r3, #1
 800ee18:	d00a      	beq.n	800ee30 <USBD_LL_SetupStage+0x5e>
 800ee1a:	e01d      	b.n	800ee58 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ee22:	4619      	mov	r1, r3
 800ee24:	6878      	ldr	r0, [r7, #4]
 800ee26:	f000 fa9d 	bl	800f364 <USBD_StdDevReq>
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	73fb      	strb	r3, [r7, #15]
      break;
 800ee2e:	e020      	b.n	800ee72 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ee36:	4619      	mov	r1, r3
 800ee38:	6878      	ldr	r0, [r7, #4]
 800ee3a:	f000 fb05 	bl	800f448 <USBD_StdItfReq>
 800ee3e:	4603      	mov	r3, r0
 800ee40:	73fb      	strb	r3, [r7, #15]
      break;
 800ee42:	e016      	b.n	800ee72 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ee4a:	4619      	mov	r1, r3
 800ee4c:	6878      	ldr	r0, [r7, #4]
 800ee4e:	f000 fb67 	bl	800f520 <USBD_StdEPReq>
 800ee52:	4603      	mov	r3, r0
 800ee54:	73fb      	strb	r3, [r7, #15]
      break;
 800ee56:	e00c      	b.n	800ee72 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ee5e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ee62:	b2db      	uxtb	r3, r3
 800ee64:	4619      	mov	r1, r3
 800ee66:	6878      	ldr	r0, [r7, #4]
 800ee68:	f7ff fdfc 	bl	800ea64 <USBD_LL_StallEP>
 800ee6c:	4603      	mov	r3, r0
 800ee6e:	73fb      	strb	r3, [r7, #15]
      break;
 800ee70:	bf00      	nop
  }

  return ret;
 800ee72:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee74:	4618      	mov	r0, r3
 800ee76:	3710      	adds	r7, #16
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	bd80      	pop	{r7, pc}

0800ee7c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b086      	sub	sp, #24
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	60f8      	str	r0, [r7, #12]
 800ee84:	460b      	mov	r3, r1
 800ee86:	607a      	str	r2, [r7, #4]
 800ee88:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ee8e:	7afb      	ldrb	r3, [r7, #11]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d16e      	bne.n	800ef72 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ee9a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800eea2:	2b03      	cmp	r3, #3
 800eea4:	f040 8098 	bne.w	800efd8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800eea8:	693b      	ldr	r3, [r7, #16]
 800eeaa:	689a      	ldr	r2, [r3, #8]
 800eeac:	693b      	ldr	r3, [r7, #16]
 800eeae:	68db      	ldr	r3, [r3, #12]
 800eeb0:	429a      	cmp	r2, r3
 800eeb2:	d913      	bls.n	800eedc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800eeb4:	693b      	ldr	r3, [r7, #16]
 800eeb6:	689a      	ldr	r2, [r3, #8]
 800eeb8:	693b      	ldr	r3, [r7, #16]
 800eeba:	68db      	ldr	r3, [r3, #12]
 800eebc:	1ad2      	subs	r2, r2, r3
 800eebe:	693b      	ldr	r3, [r7, #16]
 800eec0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800eec2:	693b      	ldr	r3, [r7, #16]
 800eec4:	68da      	ldr	r2, [r3, #12]
 800eec6:	693b      	ldr	r3, [r7, #16]
 800eec8:	689b      	ldr	r3, [r3, #8]
 800eeca:	4293      	cmp	r3, r2
 800eecc:	bf28      	it	cs
 800eece:	4613      	movcs	r3, r2
 800eed0:	461a      	mov	r2, r3
 800eed2:	6879      	ldr	r1, [r7, #4]
 800eed4:	68f8      	ldr	r0, [r7, #12]
 800eed6:	f001 f9cf 	bl	8010278 <USBD_CtlContinueRx>
 800eeda:	e07d      	b.n	800efd8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800eee2:	f003 031f 	and.w	r3, r3, #31
 800eee6:	2b02      	cmp	r3, #2
 800eee8:	d014      	beq.n	800ef14 <USBD_LL_DataOutStage+0x98>
 800eeea:	2b02      	cmp	r3, #2
 800eeec:	d81d      	bhi.n	800ef2a <USBD_LL_DataOutStage+0xae>
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d002      	beq.n	800eef8 <USBD_LL_DataOutStage+0x7c>
 800eef2:	2b01      	cmp	r3, #1
 800eef4:	d003      	beq.n	800eefe <USBD_LL_DataOutStage+0x82>
 800eef6:	e018      	b.n	800ef2a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800eef8:	2300      	movs	r3, #0
 800eefa:	75bb      	strb	r3, [r7, #22]
            break;
 800eefc:	e018      	b.n	800ef30 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ef04:	b2db      	uxtb	r3, r3
 800ef06:	4619      	mov	r1, r3
 800ef08:	68f8      	ldr	r0, [r7, #12]
 800ef0a:	f000 f99e 	bl	800f24a <USBD_CoreFindIF>
 800ef0e:	4603      	mov	r3, r0
 800ef10:	75bb      	strb	r3, [r7, #22]
            break;
 800ef12:	e00d      	b.n	800ef30 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ef1a:	b2db      	uxtb	r3, r3
 800ef1c:	4619      	mov	r1, r3
 800ef1e:	68f8      	ldr	r0, [r7, #12]
 800ef20:	f000 f9a0 	bl	800f264 <USBD_CoreFindEP>
 800ef24:	4603      	mov	r3, r0
 800ef26:	75bb      	strb	r3, [r7, #22]
            break;
 800ef28:	e002      	b.n	800ef30 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	75bb      	strb	r3, [r7, #22]
            break;
 800ef2e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ef30:	7dbb      	ldrb	r3, [r7, #22]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d119      	bne.n	800ef6a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ef3c:	b2db      	uxtb	r3, r3
 800ef3e:	2b03      	cmp	r3, #3
 800ef40:	d113      	bne.n	800ef6a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ef42:	7dba      	ldrb	r2, [r7, #22]
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	32ae      	adds	r2, #174	@ 0xae
 800ef48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef4c:	691b      	ldr	r3, [r3, #16]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d00b      	beq.n	800ef6a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ef52:	7dba      	ldrb	r2, [r7, #22]
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ef5a:	7dba      	ldrb	r2, [r7, #22]
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	32ae      	adds	r2, #174	@ 0xae
 800ef60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef64:	691b      	ldr	r3, [r3, #16]
 800ef66:	68f8      	ldr	r0, [r7, #12]
 800ef68:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ef6a:	68f8      	ldr	r0, [r7, #12]
 800ef6c:	f001 f995 	bl	801029a <USBD_CtlSendStatus>
 800ef70:	e032      	b.n	800efd8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ef72:	7afb      	ldrb	r3, [r7, #11]
 800ef74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ef78:	b2db      	uxtb	r3, r3
 800ef7a:	4619      	mov	r1, r3
 800ef7c:	68f8      	ldr	r0, [r7, #12]
 800ef7e:	f000 f971 	bl	800f264 <USBD_CoreFindEP>
 800ef82:	4603      	mov	r3, r0
 800ef84:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ef86:	7dbb      	ldrb	r3, [r7, #22]
 800ef88:	2bff      	cmp	r3, #255	@ 0xff
 800ef8a:	d025      	beq.n	800efd8 <USBD_LL_DataOutStage+0x15c>
 800ef8c:	7dbb      	ldrb	r3, [r7, #22]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d122      	bne.n	800efd8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ef98:	b2db      	uxtb	r3, r3
 800ef9a:	2b03      	cmp	r3, #3
 800ef9c:	d117      	bne.n	800efce <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ef9e:	7dba      	ldrb	r2, [r7, #22]
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	32ae      	adds	r2, #174	@ 0xae
 800efa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efa8:	699b      	ldr	r3, [r3, #24]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d00f      	beq.n	800efce <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800efae:	7dba      	ldrb	r2, [r7, #22]
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800efb6:	7dba      	ldrb	r2, [r7, #22]
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	32ae      	adds	r2, #174	@ 0xae
 800efbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efc0:	699b      	ldr	r3, [r3, #24]
 800efc2:	7afa      	ldrb	r2, [r7, #11]
 800efc4:	4611      	mov	r1, r2
 800efc6:	68f8      	ldr	r0, [r7, #12]
 800efc8:	4798      	blx	r3
 800efca:	4603      	mov	r3, r0
 800efcc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800efce:	7dfb      	ldrb	r3, [r7, #23]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d001      	beq.n	800efd8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800efd4:	7dfb      	ldrb	r3, [r7, #23]
 800efd6:	e000      	b.n	800efda <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800efd8:	2300      	movs	r3, #0
}
 800efda:	4618      	mov	r0, r3
 800efdc:	3718      	adds	r7, #24
 800efde:	46bd      	mov	sp, r7
 800efe0:	bd80      	pop	{r7, pc}

0800efe2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800efe2:	b580      	push	{r7, lr}
 800efe4:	b086      	sub	sp, #24
 800efe6:	af00      	add	r7, sp, #0
 800efe8:	60f8      	str	r0, [r7, #12]
 800efea:	460b      	mov	r3, r1
 800efec:	607a      	str	r2, [r7, #4]
 800efee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800eff0:	7afb      	ldrb	r3, [r7, #11]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d16f      	bne.n	800f0d6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	3314      	adds	r3, #20
 800effa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f002:	2b02      	cmp	r3, #2
 800f004:	d15a      	bne.n	800f0bc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800f006:	693b      	ldr	r3, [r7, #16]
 800f008:	689a      	ldr	r2, [r3, #8]
 800f00a:	693b      	ldr	r3, [r7, #16]
 800f00c:	68db      	ldr	r3, [r3, #12]
 800f00e:	429a      	cmp	r2, r3
 800f010:	d914      	bls.n	800f03c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f012:	693b      	ldr	r3, [r7, #16]
 800f014:	689a      	ldr	r2, [r3, #8]
 800f016:	693b      	ldr	r3, [r7, #16]
 800f018:	68db      	ldr	r3, [r3, #12]
 800f01a:	1ad2      	subs	r2, r2, r3
 800f01c:	693b      	ldr	r3, [r7, #16]
 800f01e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f020:	693b      	ldr	r3, [r7, #16]
 800f022:	689b      	ldr	r3, [r3, #8]
 800f024:	461a      	mov	r2, r3
 800f026:	6879      	ldr	r1, [r7, #4]
 800f028:	68f8      	ldr	r0, [r7, #12]
 800f02a:	f001 f8f7 	bl	801021c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f02e:	2300      	movs	r3, #0
 800f030:	2200      	movs	r2, #0
 800f032:	2100      	movs	r1, #0
 800f034:	68f8      	ldr	r0, [r7, #12]
 800f036:	f7ff fda7 	bl	800eb88 <USBD_LL_PrepareReceive>
 800f03a:	e03f      	b.n	800f0bc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f03c:	693b      	ldr	r3, [r7, #16]
 800f03e:	68da      	ldr	r2, [r3, #12]
 800f040:	693b      	ldr	r3, [r7, #16]
 800f042:	689b      	ldr	r3, [r3, #8]
 800f044:	429a      	cmp	r2, r3
 800f046:	d11c      	bne.n	800f082 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f048:	693b      	ldr	r3, [r7, #16]
 800f04a:	685a      	ldr	r2, [r3, #4]
 800f04c:	693b      	ldr	r3, [r7, #16]
 800f04e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f050:	429a      	cmp	r2, r3
 800f052:	d316      	bcc.n	800f082 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f054:	693b      	ldr	r3, [r7, #16]
 800f056:	685a      	ldr	r2, [r3, #4]
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f05e:	429a      	cmp	r2, r3
 800f060:	d20f      	bcs.n	800f082 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f062:	2200      	movs	r2, #0
 800f064:	2100      	movs	r1, #0
 800f066:	68f8      	ldr	r0, [r7, #12]
 800f068:	f001 f8d8 	bl	801021c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	2200      	movs	r2, #0
 800f070:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f074:	2300      	movs	r3, #0
 800f076:	2200      	movs	r2, #0
 800f078:	2100      	movs	r1, #0
 800f07a:	68f8      	ldr	r0, [r7, #12]
 800f07c:	f7ff fd84 	bl	800eb88 <USBD_LL_PrepareReceive>
 800f080:	e01c      	b.n	800f0bc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f088:	b2db      	uxtb	r3, r3
 800f08a:	2b03      	cmp	r3, #3
 800f08c:	d10f      	bne.n	800f0ae <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f094:	68db      	ldr	r3, [r3, #12]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d009      	beq.n	800f0ae <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	2200      	movs	r2, #0
 800f09e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f0a8:	68db      	ldr	r3, [r3, #12]
 800f0aa:	68f8      	ldr	r0, [r7, #12]
 800f0ac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f0ae:	2180      	movs	r1, #128	@ 0x80
 800f0b0:	68f8      	ldr	r0, [r7, #12]
 800f0b2:	f7ff fcd7 	bl	800ea64 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f0b6:	68f8      	ldr	r0, [r7, #12]
 800f0b8:	f001 f902 	bl	80102c0 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d03a      	beq.n	800f13c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800f0c6:	68f8      	ldr	r0, [r7, #12]
 800f0c8:	f7ff fe42 	bl	800ed50 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	2200      	movs	r2, #0
 800f0d0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800f0d4:	e032      	b.n	800f13c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800f0d6:	7afb      	ldrb	r3, [r7, #11]
 800f0d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800f0dc:	b2db      	uxtb	r3, r3
 800f0de:	4619      	mov	r1, r3
 800f0e0:	68f8      	ldr	r0, [r7, #12]
 800f0e2:	f000 f8bf 	bl	800f264 <USBD_CoreFindEP>
 800f0e6:	4603      	mov	r3, r0
 800f0e8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f0ea:	7dfb      	ldrb	r3, [r7, #23]
 800f0ec:	2bff      	cmp	r3, #255	@ 0xff
 800f0ee:	d025      	beq.n	800f13c <USBD_LL_DataInStage+0x15a>
 800f0f0:	7dfb      	ldrb	r3, [r7, #23]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d122      	bne.n	800f13c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f0fc:	b2db      	uxtb	r3, r3
 800f0fe:	2b03      	cmp	r3, #3
 800f100:	d11c      	bne.n	800f13c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800f102:	7dfa      	ldrb	r2, [r7, #23]
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	32ae      	adds	r2, #174	@ 0xae
 800f108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f10c:	695b      	ldr	r3, [r3, #20]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d014      	beq.n	800f13c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800f112:	7dfa      	ldrb	r2, [r7, #23]
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800f11a:	7dfa      	ldrb	r2, [r7, #23]
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	32ae      	adds	r2, #174	@ 0xae
 800f120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f124:	695b      	ldr	r3, [r3, #20]
 800f126:	7afa      	ldrb	r2, [r7, #11]
 800f128:	4611      	mov	r1, r2
 800f12a:	68f8      	ldr	r0, [r7, #12]
 800f12c:	4798      	blx	r3
 800f12e:	4603      	mov	r3, r0
 800f130:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800f132:	7dbb      	ldrb	r3, [r7, #22]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d001      	beq.n	800f13c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800f138:	7dbb      	ldrb	r3, [r7, #22]
 800f13a:	e000      	b.n	800f13e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800f13c:	2300      	movs	r3, #0
}
 800f13e:	4618      	mov	r0, r3
 800f140:	3718      	adds	r7, #24
 800f142:	46bd      	mov	sp, r7
 800f144:	bd80      	pop	{r7, pc}

0800f146 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f146:	b580      	push	{r7, lr}
 800f148:	b084      	sub	sp, #16
 800f14a:	af00      	add	r7, sp, #0
 800f14c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800f14e:	2300      	movs	r3, #0
 800f150:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	2201      	movs	r2, #1
 800f156:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	2200      	movs	r2, #0
 800f15e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	2200      	movs	r2, #0
 800f166:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	2200      	movs	r2, #0
 800f16c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	2200      	movs	r2, #0
 800f174:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d014      	beq.n	800f1ac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f188:	685b      	ldr	r3, [r3, #4]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d00e      	beq.n	800f1ac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f194:	685b      	ldr	r3, [r3, #4]
 800f196:	687a      	ldr	r2, [r7, #4]
 800f198:	6852      	ldr	r2, [r2, #4]
 800f19a:	b2d2      	uxtb	r2, r2
 800f19c:	4611      	mov	r1, r2
 800f19e:	6878      	ldr	r0, [r7, #4]
 800f1a0:	4798      	blx	r3
 800f1a2:	4603      	mov	r3, r0
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d001      	beq.n	800f1ac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800f1a8:	2303      	movs	r3, #3
 800f1aa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f1ac:	2340      	movs	r3, #64	@ 0x40
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	2100      	movs	r1, #0
 800f1b2:	6878      	ldr	r0, [r7, #4]
 800f1b4:	f7ff fc1d 	bl	800e9f2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	2201      	movs	r2, #1
 800f1bc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	2240      	movs	r2, #64	@ 0x40
 800f1c4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f1c8:	2340      	movs	r3, #64	@ 0x40
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	2180      	movs	r1, #128	@ 0x80
 800f1ce:	6878      	ldr	r0, [r7, #4]
 800f1d0:	f7ff fc0f 	bl	800e9f2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	2201      	movs	r2, #1
 800f1d8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	2240      	movs	r2, #64	@ 0x40
 800f1de:	621a      	str	r2, [r3, #32]

  return ret;
 800f1e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	3710      	adds	r7, #16
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	bd80      	pop	{r7, pc}

0800f1ea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f1ea:	b480      	push	{r7}
 800f1ec:	b083      	sub	sp, #12
 800f1ee:	af00      	add	r7, sp, #0
 800f1f0:	6078      	str	r0, [r7, #4]
 800f1f2:	460b      	mov	r3, r1
 800f1f4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	78fa      	ldrb	r2, [r7, #3]
 800f1fa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f1fc:	2300      	movs	r3, #0
}
 800f1fe:	4618      	mov	r0, r3
 800f200:	370c      	adds	r7, #12
 800f202:	46bd      	mov	sp, r7
 800f204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f208:	4770      	bx	lr

0800f20a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f20a:	b580      	push	{r7, lr}
 800f20c:	b082      	sub	sp, #8
 800f20e:	af00      	add	r7, sp, #0
 800f210:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f218:	b2db      	uxtb	r3, r3
 800f21a:	2b03      	cmp	r3, #3
 800f21c:	d110      	bne.n	800f240 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f224:	2b00      	cmp	r3, #0
 800f226:	d00b      	beq.n	800f240 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f22e:	69db      	ldr	r3, [r3, #28]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d005      	beq.n	800f240 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f23a:	69db      	ldr	r3, [r3, #28]
 800f23c:	6878      	ldr	r0, [r7, #4]
 800f23e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800f240:	2300      	movs	r3, #0
}
 800f242:	4618      	mov	r0, r3
 800f244:	3708      	adds	r7, #8
 800f246:	46bd      	mov	sp, r7
 800f248:	bd80      	pop	{r7, pc}

0800f24a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f24a:	b480      	push	{r7}
 800f24c:	b083      	sub	sp, #12
 800f24e:	af00      	add	r7, sp, #0
 800f250:	6078      	str	r0, [r7, #4]
 800f252:	460b      	mov	r3, r1
 800f254:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f256:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f258:	4618      	mov	r0, r3
 800f25a:	370c      	adds	r7, #12
 800f25c:	46bd      	mov	sp, r7
 800f25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f262:	4770      	bx	lr

0800f264 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f264:	b480      	push	{r7}
 800f266:	b083      	sub	sp, #12
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
 800f26c:	460b      	mov	r3, r1
 800f26e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f270:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f272:	4618      	mov	r0, r3
 800f274:	370c      	adds	r7, #12
 800f276:	46bd      	mov	sp, r7
 800f278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27c:	4770      	bx	lr

0800f27e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800f27e:	b580      	push	{r7, lr}
 800f280:	b086      	sub	sp, #24
 800f282:	af00      	add	r7, sp, #0
 800f284:	6078      	str	r0, [r7, #4]
 800f286:	460b      	mov	r3, r1
 800f288:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800f292:	2300      	movs	r3, #0
 800f294:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	885b      	ldrh	r3, [r3, #2]
 800f29a:	b29b      	uxth	r3, r3
 800f29c:	68fa      	ldr	r2, [r7, #12]
 800f29e:	7812      	ldrb	r2, [r2, #0]
 800f2a0:	4293      	cmp	r3, r2
 800f2a2:	d91f      	bls.n	800f2e4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	781b      	ldrb	r3, [r3, #0]
 800f2a8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800f2aa:	e013      	b.n	800f2d4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800f2ac:	f107 030a 	add.w	r3, r7, #10
 800f2b0:	4619      	mov	r1, r3
 800f2b2:	6978      	ldr	r0, [r7, #20]
 800f2b4:	f000 f81b 	bl	800f2ee <USBD_GetNextDesc>
 800f2b8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800f2ba:	697b      	ldr	r3, [r7, #20]
 800f2bc:	785b      	ldrb	r3, [r3, #1]
 800f2be:	2b05      	cmp	r3, #5
 800f2c0:	d108      	bne.n	800f2d4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800f2c2:	697b      	ldr	r3, [r7, #20]
 800f2c4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800f2c6:	693b      	ldr	r3, [r7, #16]
 800f2c8:	789b      	ldrb	r3, [r3, #2]
 800f2ca:	78fa      	ldrb	r2, [r7, #3]
 800f2cc:	429a      	cmp	r2, r3
 800f2ce:	d008      	beq.n	800f2e2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	885b      	ldrh	r3, [r3, #2]
 800f2d8:	b29a      	uxth	r2, r3
 800f2da:	897b      	ldrh	r3, [r7, #10]
 800f2dc:	429a      	cmp	r2, r3
 800f2de:	d8e5      	bhi.n	800f2ac <USBD_GetEpDesc+0x2e>
 800f2e0:	e000      	b.n	800f2e4 <USBD_GetEpDesc+0x66>
          break;
 800f2e2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800f2e4:	693b      	ldr	r3, [r7, #16]
}
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	3718      	adds	r7, #24
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	bd80      	pop	{r7, pc}

0800f2ee <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800f2ee:	b480      	push	{r7}
 800f2f0:	b085      	sub	sp, #20
 800f2f2:	af00      	add	r7, sp, #0
 800f2f4:	6078      	str	r0, [r7, #4]
 800f2f6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	881b      	ldrh	r3, [r3, #0]
 800f300:	68fa      	ldr	r2, [r7, #12]
 800f302:	7812      	ldrb	r2, [r2, #0]
 800f304:	4413      	add	r3, r2
 800f306:	b29a      	uxth	r2, r3
 800f308:	683b      	ldr	r3, [r7, #0]
 800f30a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	781b      	ldrb	r3, [r3, #0]
 800f310:	461a      	mov	r2, r3
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	4413      	add	r3, r2
 800f316:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f318:	68fb      	ldr	r3, [r7, #12]
}
 800f31a:	4618      	mov	r0, r3
 800f31c:	3714      	adds	r7, #20
 800f31e:	46bd      	mov	sp, r7
 800f320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f324:	4770      	bx	lr

0800f326 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f326:	b480      	push	{r7}
 800f328:	b087      	sub	sp, #28
 800f32a:	af00      	add	r7, sp, #0
 800f32c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f332:	697b      	ldr	r3, [r7, #20]
 800f334:	781b      	ldrb	r3, [r3, #0]
 800f336:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f338:	697b      	ldr	r3, [r7, #20]
 800f33a:	3301      	adds	r3, #1
 800f33c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f33e:	697b      	ldr	r3, [r7, #20]
 800f340:	781b      	ldrb	r3, [r3, #0]
 800f342:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f344:	8a3b      	ldrh	r3, [r7, #16]
 800f346:	021b      	lsls	r3, r3, #8
 800f348:	b21a      	sxth	r2, r3
 800f34a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f34e:	4313      	orrs	r3, r2
 800f350:	b21b      	sxth	r3, r3
 800f352:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f354:	89fb      	ldrh	r3, [r7, #14]
}
 800f356:	4618      	mov	r0, r3
 800f358:	371c      	adds	r7, #28
 800f35a:	46bd      	mov	sp, r7
 800f35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f360:	4770      	bx	lr
	...

0800f364 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b084      	sub	sp, #16
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
 800f36c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f36e:	2300      	movs	r3, #0
 800f370:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	781b      	ldrb	r3, [r3, #0]
 800f376:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f37a:	2b40      	cmp	r3, #64	@ 0x40
 800f37c:	d005      	beq.n	800f38a <USBD_StdDevReq+0x26>
 800f37e:	2b40      	cmp	r3, #64	@ 0x40
 800f380:	d857      	bhi.n	800f432 <USBD_StdDevReq+0xce>
 800f382:	2b00      	cmp	r3, #0
 800f384:	d00f      	beq.n	800f3a6 <USBD_StdDevReq+0x42>
 800f386:	2b20      	cmp	r3, #32
 800f388:	d153      	bne.n	800f432 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	32ae      	adds	r2, #174	@ 0xae
 800f394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f398:	689b      	ldr	r3, [r3, #8]
 800f39a:	6839      	ldr	r1, [r7, #0]
 800f39c:	6878      	ldr	r0, [r7, #4]
 800f39e:	4798      	blx	r3
 800f3a0:	4603      	mov	r3, r0
 800f3a2:	73fb      	strb	r3, [r7, #15]
      break;
 800f3a4:	e04a      	b.n	800f43c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	785b      	ldrb	r3, [r3, #1]
 800f3aa:	2b09      	cmp	r3, #9
 800f3ac:	d83b      	bhi.n	800f426 <USBD_StdDevReq+0xc2>
 800f3ae:	a201      	add	r2, pc, #4	@ (adr r2, 800f3b4 <USBD_StdDevReq+0x50>)
 800f3b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3b4:	0800f409 	.word	0x0800f409
 800f3b8:	0800f41d 	.word	0x0800f41d
 800f3bc:	0800f427 	.word	0x0800f427
 800f3c0:	0800f413 	.word	0x0800f413
 800f3c4:	0800f427 	.word	0x0800f427
 800f3c8:	0800f3e7 	.word	0x0800f3e7
 800f3cc:	0800f3dd 	.word	0x0800f3dd
 800f3d0:	0800f427 	.word	0x0800f427
 800f3d4:	0800f3ff 	.word	0x0800f3ff
 800f3d8:	0800f3f1 	.word	0x0800f3f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f3dc:	6839      	ldr	r1, [r7, #0]
 800f3de:	6878      	ldr	r0, [r7, #4]
 800f3e0:	f000 fa3c 	bl	800f85c <USBD_GetDescriptor>
          break;
 800f3e4:	e024      	b.n	800f430 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f3e6:	6839      	ldr	r1, [r7, #0]
 800f3e8:	6878      	ldr	r0, [r7, #4]
 800f3ea:	f000 fba1 	bl	800fb30 <USBD_SetAddress>
          break;
 800f3ee:	e01f      	b.n	800f430 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f3f0:	6839      	ldr	r1, [r7, #0]
 800f3f2:	6878      	ldr	r0, [r7, #4]
 800f3f4:	f000 fbe0 	bl	800fbb8 <USBD_SetConfig>
 800f3f8:	4603      	mov	r3, r0
 800f3fa:	73fb      	strb	r3, [r7, #15]
          break;
 800f3fc:	e018      	b.n	800f430 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f3fe:	6839      	ldr	r1, [r7, #0]
 800f400:	6878      	ldr	r0, [r7, #4]
 800f402:	f000 fc83 	bl	800fd0c <USBD_GetConfig>
          break;
 800f406:	e013      	b.n	800f430 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f408:	6839      	ldr	r1, [r7, #0]
 800f40a:	6878      	ldr	r0, [r7, #4]
 800f40c:	f000 fcb4 	bl	800fd78 <USBD_GetStatus>
          break;
 800f410:	e00e      	b.n	800f430 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f412:	6839      	ldr	r1, [r7, #0]
 800f414:	6878      	ldr	r0, [r7, #4]
 800f416:	f000 fce3 	bl	800fde0 <USBD_SetFeature>
          break;
 800f41a:	e009      	b.n	800f430 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f41c:	6839      	ldr	r1, [r7, #0]
 800f41e:	6878      	ldr	r0, [r7, #4]
 800f420:	f000 fd07 	bl	800fe32 <USBD_ClrFeature>
          break;
 800f424:	e004      	b.n	800f430 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800f426:	6839      	ldr	r1, [r7, #0]
 800f428:	6878      	ldr	r0, [r7, #4]
 800f42a:	f000 fd5e 	bl	800feea <USBD_CtlError>
          break;
 800f42e:	bf00      	nop
      }
      break;
 800f430:	e004      	b.n	800f43c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800f432:	6839      	ldr	r1, [r7, #0]
 800f434:	6878      	ldr	r0, [r7, #4]
 800f436:	f000 fd58 	bl	800feea <USBD_CtlError>
      break;
 800f43a:	bf00      	nop
  }

  return ret;
 800f43c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f43e:	4618      	mov	r0, r3
 800f440:	3710      	adds	r7, #16
 800f442:	46bd      	mov	sp, r7
 800f444:	bd80      	pop	{r7, pc}
 800f446:	bf00      	nop

0800f448 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b084      	sub	sp, #16
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
 800f450:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f452:	2300      	movs	r3, #0
 800f454:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f456:	683b      	ldr	r3, [r7, #0]
 800f458:	781b      	ldrb	r3, [r3, #0]
 800f45a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f45e:	2b40      	cmp	r3, #64	@ 0x40
 800f460:	d005      	beq.n	800f46e <USBD_StdItfReq+0x26>
 800f462:	2b40      	cmp	r3, #64	@ 0x40
 800f464:	d852      	bhi.n	800f50c <USBD_StdItfReq+0xc4>
 800f466:	2b00      	cmp	r3, #0
 800f468:	d001      	beq.n	800f46e <USBD_StdItfReq+0x26>
 800f46a:	2b20      	cmp	r3, #32
 800f46c:	d14e      	bne.n	800f50c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f474:	b2db      	uxtb	r3, r3
 800f476:	3b01      	subs	r3, #1
 800f478:	2b02      	cmp	r3, #2
 800f47a:	d840      	bhi.n	800f4fe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	889b      	ldrh	r3, [r3, #4]
 800f480:	b2db      	uxtb	r3, r3
 800f482:	2b01      	cmp	r3, #1
 800f484:	d836      	bhi.n	800f4f4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800f486:	683b      	ldr	r3, [r7, #0]
 800f488:	889b      	ldrh	r3, [r3, #4]
 800f48a:	b2db      	uxtb	r3, r3
 800f48c:	4619      	mov	r1, r3
 800f48e:	6878      	ldr	r0, [r7, #4]
 800f490:	f7ff fedb 	bl	800f24a <USBD_CoreFindIF>
 800f494:	4603      	mov	r3, r0
 800f496:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f498:	7bbb      	ldrb	r3, [r7, #14]
 800f49a:	2bff      	cmp	r3, #255	@ 0xff
 800f49c:	d01d      	beq.n	800f4da <USBD_StdItfReq+0x92>
 800f49e:	7bbb      	ldrb	r3, [r7, #14]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d11a      	bne.n	800f4da <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800f4a4:	7bba      	ldrb	r2, [r7, #14]
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	32ae      	adds	r2, #174	@ 0xae
 800f4aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4ae:	689b      	ldr	r3, [r3, #8]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d00f      	beq.n	800f4d4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800f4b4:	7bba      	ldrb	r2, [r7, #14]
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f4bc:	7bba      	ldrb	r2, [r7, #14]
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	32ae      	adds	r2, #174	@ 0xae
 800f4c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4c6:	689b      	ldr	r3, [r3, #8]
 800f4c8:	6839      	ldr	r1, [r7, #0]
 800f4ca:	6878      	ldr	r0, [r7, #4]
 800f4cc:	4798      	blx	r3
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f4d2:	e004      	b.n	800f4de <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800f4d4:	2303      	movs	r3, #3
 800f4d6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f4d8:	e001      	b.n	800f4de <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800f4da:	2303      	movs	r3, #3
 800f4dc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f4de:	683b      	ldr	r3, [r7, #0]
 800f4e0:	88db      	ldrh	r3, [r3, #6]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d110      	bne.n	800f508 <USBD_StdItfReq+0xc0>
 800f4e6:	7bfb      	ldrb	r3, [r7, #15]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d10d      	bne.n	800f508 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f4ec:	6878      	ldr	r0, [r7, #4]
 800f4ee:	f000 fed4 	bl	801029a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f4f2:	e009      	b.n	800f508 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800f4f4:	6839      	ldr	r1, [r7, #0]
 800f4f6:	6878      	ldr	r0, [r7, #4]
 800f4f8:	f000 fcf7 	bl	800feea <USBD_CtlError>
          break;
 800f4fc:	e004      	b.n	800f508 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800f4fe:	6839      	ldr	r1, [r7, #0]
 800f500:	6878      	ldr	r0, [r7, #4]
 800f502:	f000 fcf2 	bl	800feea <USBD_CtlError>
          break;
 800f506:	e000      	b.n	800f50a <USBD_StdItfReq+0xc2>
          break;
 800f508:	bf00      	nop
      }
      break;
 800f50a:	e004      	b.n	800f516 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f50c:	6839      	ldr	r1, [r7, #0]
 800f50e:	6878      	ldr	r0, [r7, #4]
 800f510:	f000 fceb 	bl	800feea <USBD_CtlError>
      break;
 800f514:	bf00      	nop
  }

  return ret;
 800f516:	7bfb      	ldrb	r3, [r7, #15]
}
 800f518:	4618      	mov	r0, r3
 800f51a:	3710      	adds	r7, #16
 800f51c:	46bd      	mov	sp, r7
 800f51e:	bd80      	pop	{r7, pc}

0800f520 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b084      	sub	sp, #16
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
 800f528:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f52a:	2300      	movs	r3, #0
 800f52c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f52e:	683b      	ldr	r3, [r7, #0]
 800f530:	889b      	ldrh	r3, [r3, #4]
 800f532:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f534:	683b      	ldr	r3, [r7, #0]
 800f536:	781b      	ldrb	r3, [r3, #0]
 800f538:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f53c:	2b40      	cmp	r3, #64	@ 0x40
 800f53e:	d007      	beq.n	800f550 <USBD_StdEPReq+0x30>
 800f540:	2b40      	cmp	r3, #64	@ 0x40
 800f542:	f200 817f 	bhi.w	800f844 <USBD_StdEPReq+0x324>
 800f546:	2b00      	cmp	r3, #0
 800f548:	d02a      	beq.n	800f5a0 <USBD_StdEPReq+0x80>
 800f54a:	2b20      	cmp	r3, #32
 800f54c:	f040 817a 	bne.w	800f844 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f550:	7bbb      	ldrb	r3, [r7, #14]
 800f552:	4619      	mov	r1, r3
 800f554:	6878      	ldr	r0, [r7, #4]
 800f556:	f7ff fe85 	bl	800f264 <USBD_CoreFindEP>
 800f55a:	4603      	mov	r3, r0
 800f55c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f55e:	7b7b      	ldrb	r3, [r7, #13]
 800f560:	2bff      	cmp	r3, #255	@ 0xff
 800f562:	f000 8174 	beq.w	800f84e <USBD_StdEPReq+0x32e>
 800f566:	7b7b      	ldrb	r3, [r7, #13]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	f040 8170 	bne.w	800f84e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f56e:	7b7a      	ldrb	r2, [r7, #13]
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f576:	7b7a      	ldrb	r2, [r7, #13]
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	32ae      	adds	r2, #174	@ 0xae
 800f57c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f580:	689b      	ldr	r3, [r3, #8]
 800f582:	2b00      	cmp	r3, #0
 800f584:	f000 8163 	beq.w	800f84e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f588:	7b7a      	ldrb	r2, [r7, #13]
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	32ae      	adds	r2, #174	@ 0xae
 800f58e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f592:	689b      	ldr	r3, [r3, #8]
 800f594:	6839      	ldr	r1, [r7, #0]
 800f596:	6878      	ldr	r0, [r7, #4]
 800f598:	4798      	blx	r3
 800f59a:	4603      	mov	r3, r0
 800f59c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f59e:	e156      	b.n	800f84e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f5a0:	683b      	ldr	r3, [r7, #0]
 800f5a2:	785b      	ldrb	r3, [r3, #1]
 800f5a4:	2b03      	cmp	r3, #3
 800f5a6:	d008      	beq.n	800f5ba <USBD_StdEPReq+0x9a>
 800f5a8:	2b03      	cmp	r3, #3
 800f5aa:	f300 8145 	bgt.w	800f838 <USBD_StdEPReq+0x318>
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	f000 809b 	beq.w	800f6ea <USBD_StdEPReq+0x1ca>
 800f5b4:	2b01      	cmp	r3, #1
 800f5b6:	d03c      	beq.n	800f632 <USBD_StdEPReq+0x112>
 800f5b8:	e13e      	b.n	800f838 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f5c0:	b2db      	uxtb	r3, r3
 800f5c2:	2b02      	cmp	r3, #2
 800f5c4:	d002      	beq.n	800f5cc <USBD_StdEPReq+0xac>
 800f5c6:	2b03      	cmp	r3, #3
 800f5c8:	d016      	beq.n	800f5f8 <USBD_StdEPReq+0xd8>
 800f5ca:	e02c      	b.n	800f626 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f5cc:	7bbb      	ldrb	r3, [r7, #14]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d00d      	beq.n	800f5ee <USBD_StdEPReq+0xce>
 800f5d2:	7bbb      	ldrb	r3, [r7, #14]
 800f5d4:	2b80      	cmp	r3, #128	@ 0x80
 800f5d6:	d00a      	beq.n	800f5ee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f5d8:	7bbb      	ldrb	r3, [r7, #14]
 800f5da:	4619      	mov	r1, r3
 800f5dc:	6878      	ldr	r0, [r7, #4]
 800f5de:	f7ff fa41 	bl	800ea64 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f5e2:	2180      	movs	r1, #128	@ 0x80
 800f5e4:	6878      	ldr	r0, [r7, #4]
 800f5e6:	f7ff fa3d 	bl	800ea64 <USBD_LL_StallEP>
 800f5ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f5ec:	e020      	b.n	800f630 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f5ee:	6839      	ldr	r1, [r7, #0]
 800f5f0:	6878      	ldr	r0, [r7, #4]
 800f5f2:	f000 fc7a 	bl	800feea <USBD_CtlError>
              break;
 800f5f6:	e01b      	b.n	800f630 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f5f8:	683b      	ldr	r3, [r7, #0]
 800f5fa:	885b      	ldrh	r3, [r3, #2]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d10e      	bne.n	800f61e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f600:	7bbb      	ldrb	r3, [r7, #14]
 800f602:	2b00      	cmp	r3, #0
 800f604:	d00b      	beq.n	800f61e <USBD_StdEPReq+0xfe>
 800f606:	7bbb      	ldrb	r3, [r7, #14]
 800f608:	2b80      	cmp	r3, #128	@ 0x80
 800f60a:	d008      	beq.n	800f61e <USBD_StdEPReq+0xfe>
 800f60c:	683b      	ldr	r3, [r7, #0]
 800f60e:	88db      	ldrh	r3, [r3, #6]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d104      	bne.n	800f61e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f614:	7bbb      	ldrb	r3, [r7, #14]
 800f616:	4619      	mov	r1, r3
 800f618:	6878      	ldr	r0, [r7, #4]
 800f61a:	f7ff fa23 	bl	800ea64 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f61e:	6878      	ldr	r0, [r7, #4]
 800f620:	f000 fe3b 	bl	801029a <USBD_CtlSendStatus>

              break;
 800f624:	e004      	b.n	800f630 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f626:	6839      	ldr	r1, [r7, #0]
 800f628:	6878      	ldr	r0, [r7, #4]
 800f62a:	f000 fc5e 	bl	800feea <USBD_CtlError>
              break;
 800f62e:	bf00      	nop
          }
          break;
 800f630:	e107      	b.n	800f842 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f638:	b2db      	uxtb	r3, r3
 800f63a:	2b02      	cmp	r3, #2
 800f63c:	d002      	beq.n	800f644 <USBD_StdEPReq+0x124>
 800f63e:	2b03      	cmp	r3, #3
 800f640:	d016      	beq.n	800f670 <USBD_StdEPReq+0x150>
 800f642:	e04b      	b.n	800f6dc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f644:	7bbb      	ldrb	r3, [r7, #14]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d00d      	beq.n	800f666 <USBD_StdEPReq+0x146>
 800f64a:	7bbb      	ldrb	r3, [r7, #14]
 800f64c:	2b80      	cmp	r3, #128	@ 0x80
 800f64e:	d00a      	beq.n	800f666 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f650:	7bbb      	ldrb	r3, [r7, #14]
 800f652:	4619      	mov	r1, r3
 800f654:	6878      	ldr	r0, [r7, #4]
 800f656:	f7ff fa05 	bl	800ea64 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f65a:	2180      	movs	r1, #128	@ 0x80
 800f65c:	6878      	ldr	r0, [r7, #4]
 800f65e:	f7ff fa01 	bl	800ea64 <USBD_LL_StallEP>
 800f662:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f664:	e040      	b.n	800f6e8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f666:	6839      	ldr	r1, [r7, #0]
 800f668:	6878      	ldr	r0, [r7, #4]
 800f66a:	f000 fc3e 	bl	800feea <USBD_CtlError>
              break;
 800f66e:	e03b      	b.n	800f6e8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f670:	683b      	ldr	r3, [r7, #0]
 800f672:	885b      	ldrh	r3, [r3, #2]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d136      	bne.n	800f6e6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f678:	7bbb      	ldrb	r3, [r7, #14]
 800f67a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d004      	beq.n	800f68c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f682:	7bbb      	ldrb	r3, [r7, #14]
 800f684:	4619      	mov	r1, r3
 800f686:	6878      	ldr	r0, [r7, #4]
 800f688:	f7ff fa05 	bl	800ea96 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f68c:	6878      	ldr	r0, [r7, #4]
 800f68e:	f000 fe04 	bl	801029a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f692:	7bbb      	ldrb	r3, [r7, #14]
 800f694:	4619      	mov	r1, r3
 800f696:	6878      	ldr	r0, [r7, #4]
 800f698:	f7ff fde4 	bl	800f264 <USBD_CoreFindEP>
 800f69c:	4603      	mov	r3, r0
 800f69e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f6a0:	7b7b      	ldrb	r3, [r7, #13]
 800f6a2:	2bff      	cmp	r3, #255	@ 0xff
 800f6a4:	d01f      	beq.n	800f6e6 <USBD_StdEPReq+0x1c6>
 800f6a6:	7b7b      	ldrb	r3, [r7, #13]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d11c      	bne.n	800f6e6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f6ac:	7b7a      	ldrb	r2, [r7, #13]
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f6b4:	7b7a      	ldrb	r2, [r7, #13]
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	32ae      	adds	r2, #174	@ 0xae
 800f6ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6be:	689b      	ldr	r3, [r3, #8]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d010      	beq.n	800f6e6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f6c4:	7b7a      	ldrb	r2, [r7, #13]
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	32ae      	adds	r2, #174	@ 0xae
 800f6ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6ce:	689b      	ldr	r3, [r3, #8]
 800f6d0:	6839      	ldr	r1, [r7, #0]
 800f6d2:	6878      	ldr	r0, [r7, #4]
 800f6d4:	4798      	blx	r3
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f6da:	e004      	b.n	800f6e6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f6dc:	6839      	ldr	r1, [r7, #0]
 800f6de:	6878      	ldr	r0, [r7, #4]
 800f6e0:	f000 fc03 	bl	800feea <USBD_CtlError>
              break;
 800f6e4:	e000      	b.n	800f6e8 <USBD_StdEPReq+0x1c8>
              break;
 800f6e6:	bf00      	nop
          }
          break;
 800f6e8:	e0ab      	b.n	800f842 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f6f0:	b2db      	uxtb	r3, r3
 800f6f2:	2b02      	cmp	r3, #2
 800f6f4:	d002      	beq.n	800f6fc <USBD_StdEPReq+0x1dc>
 800f6f6:	2b03      	cmp	r3, #3
 800f6f8:	d032      	beq.n	800f760 <USBD_StdEPReq+0x240>
 800f6fa:	e097      	b.n	800f82c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f6fc:	7bbb      	ldrb	r3, [r7, #14]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d007      	beq.n	800f712 <USBD_StdEPReq+0x1f2>
 800f702:	7bbb      	ldrb	r3, [r7, #14]
 800f704:	2b80      	cmp	r3, #128	@ 0x80
 800f706:	d004      	beq.n	800f712 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f708:	6839      	ldr	r1, [r7, #0]
 800f70a:	6878      	ldr	r0, [r7, #4]
 800f70c:	f000 fbed 	bl	800feea <USBD_CtlError>
                break;
 800f710:	e091      	b.n	800f836 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f712:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f716:	2b00      	cmp	r3, #0
 800f718:	da0b      	bge.n	800f732 <USBD_StdEPReq+0x212>
 800f71a:	7bbb      	ldrb	r3, [r7, #14]
 800f71c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f720:	4613      	mov	r3, r2
 800f722:	009b      	lsls	r3, r3, #2
 800f724:	4413      	add	r3, r2
 800f726:	009b      	lsls	r3, r3, #2
 800f728:	3310      	adds	r3, #16
 800f72a:	687a      	ldr	r2, [r7, #4]
 800f72c:	4413      	add	r3, r2
 800f72e:	3304      	adds	r3, #4
 800f730:	e00b      	b.n	800f74a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f732:	7bbb      	ldrb	r3, [r7, #14]
 800f734:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f738:	4613      	mov	r3, r2
 800f73a:	009b      	lsls	r3, r3, #2
 800f73c:	4413      	add	r3, r2
 800f73e:	009b      	lsls	r3, r3, #2
 800f740:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f744:	687a      	ldr	r2, [r7, #4]
 800f746:	4413      	add	r3, r2
 800f748:	3304      	adds	r3, #4
 800f74a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f74c:	68bb      	ldr	r3, [r7, #8]
 800f74e:	2200      	movs	r2, #0
 800f750:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f752:	68bb      	ldr	r3, [r7, #8]
 800f754:	2202      	movs	r2, #2
 800f756:	4619      	mov	r1, r3
 800f758:	6878      	ldr	r0, [r7, #4]
 800f75a:	f000 fd44 	bl	80101e6 <USBD_CtlSendData>
              break;
 800f75e:	e06a      	b.n	800f836 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f760:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f764:	2b00      	cmp	r3, #0
 800f766:	da11      	bge.n	800f78c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f768:	7bbb      	ldrb	r3, [r7, #14]
 800f76a:	f003 020f 	and.w	r2, r3, #15
 800f76e:	6879      	ldr	r1, [r7, #4]
 800f770:	4613      	mov	r3, r2
 800f772:	009b      	lsls	r3, r3, #2
 800f774:	4413      	add	r3, r2
 800f776:	009b      	lsls	r3, r3, #2
 800f778:	440b      	add	r3, r1
 800f77a:	3324      	adds	r3, #36	@ 0x24
 800f77c:	881b      	ldrh	r3, [r3, #0]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d117      	bne.n	800f7b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f782:	6839      	ldr	r1, [r7, #0]
 800f784:	6878      	ldr	r0, [r7, #4]
 800f786:	f000 fbb0 	bl	800feea <USBD_CtlError>
                  break;
 800f78a:	e054      	b.n	800f836 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f78c:	7bbb      	ldrb	r3, [r7, #14]
 800f78e:	f003 020f 	and.w	r2, r3, #15
 800f792:	6879      	ldr	r1, [r7, #4]
 800f794:	4613      	mov	r3, r2
 800f796:	009b      	lsls	r3, r3, #2
 800f798:	4413      	add	r3, r2
 800f79a:	009b      	lsls	r3, r3, #2
 800f79c:	440b      	add	r3, r1
 800f79e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f7a2:	881b      	ldrh	r3, [r3, #0]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d104      	bne.n	800f7b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f7a8:	6839      	ldr	r1, [r7, #0]
 800f7aa:	6878      	ldr	r0, [r7, #4]
 800f7ac:	f000 fb9d 	bl	800feea <USBD_CtlError>
                  break;
 800f7b0:	e041      	b.n	800f836 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f7b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	da0b      	bge.n	800f7d2 <USBD_StdEPReq+0x2b2>
 800f7ba:	7bbb      	ldrb	r3, [r7, #14]
 800f7bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f7c0:	4613      	mov	r3, r2
 800f7c2:	009b      	lsls	r3, r3, #2
 800f7c4:	4413      	add	r3, r2
 800f7c6:	009b      	lsls	r3, r3, #2
 800f7c8:	3310      	adds	r3, #16
 800f7ca:	687a      	ldr	r2, [r7, #4]
 800f7cc:	4413      	add	r3, r2
 800f7ce:	3304      	adds	r3, #4
 800f7d0:	e00b      	b.n	800f7ea <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f7d2:	7bbb      	ldrb	r3, [r7, #14]
 800f7d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f7d8:	4613      	mov	r3, r2
 800f7da:	009b      	lsls	r3, r3, #2
 800f7dc:	4413      	add	r3, r2
 800f7de:	009b      	lsls	r3, r3, #2
 800f7e0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f7e4:	687a      	ldr	r2, [r7, #4]
 800f7e6:	4413      	add	r3, r2
 800f7e8:	3304      	adds	r3, #4
 800f7ea:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f7ec:	7bbb      	ldrb	r3, [r7, #14]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d002      	beq.n	800f7f8 <USBD_StdEPReq+0x2d8>
 800f7f2:	7bbb      	ldrb	r3, [r7, #14]
 800f7f4:	2b80      	cmp	r3, #128	@ 0x80
 800f7f6:	d103      	bne.n	800f800 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f7f8:	68bb      	ldr	r3, [r7, #8]
 800f7fa:	2200      	movs	r2, #0
 800f7fc:	601a      	str	r2, [r3, #0]
 800f7fe:	e00e      	b.n	800f81e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f800:	7bbb      	ldrb	r3, [r7, #14]
 800f802:	4619      	mov	r1, r3
 800f804:	6878      	ldr	r0, [r7, #4]
 800f806:	f7ff f95f 	bl	800eac8 <USBD_LL_IsStallEP>
 800f80a:	4603      	mov	r3, r0
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d003      	beq.n	800f818 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f810:	68bb      	ldr	r3, [r7, #8]
 800f812:	2201      	movs	r2, #1
 800f814:	601a      	str	r2, [r3, #0]
 800f816:	e002      	b.n	800f81e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f818:	68bb      	ldr	r3, [r7, #8]
 800f81a:	2200      	movs	r2, #0
 800f81c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f81e:	68bb      	ldr	r3, [r7, #8]
 800f820:	2202      	movs	r2, #2
 800f822:	4619      	mov	r1, r3
 800f824:	6878      	ldr	r0, [r7, #4]
 800f826:	f000 fcde 	bl	80101e6 <USBD_CtlSendData>
              break;
 800f82a:	e004      	b.n	800f836 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f82c:	6839      	ldr	r1, [r7, #0]
 800f82e:	6878      	ldr	r0, [r7, #4]
 800f830:	f000 fb5b 	bl	800feea <USBD_CtlError>
              break;
 800f834:	bf00      	nop
          }
          break;
 800f836:	e004      	b.n	800f842 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800f838:	6839      	ldr	r1, [r7, #0]
 800f83a:	6878      	ldr	r0, [r7, #4]
 800f83c:	f000 fb55 	bl	800feea <USBD_CtlError>
          break;
 800f840:	bf00      	nop
      }
      break;
 800f842:	e005      	b.n	800f850 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800f844:	6839      	ldr	r1, [r7, #0]
 800f846:	6878      	ldr	r0, [r7, #4]
 800f848:	f000 fb4f 	bl	800feea <USBD_CtlError>
      break;
 800f84c:	e000      	b.n	800f850 <USBD_StdEPReq+0x330>
      break;
 800f84e:	bf00      	nop
  }

  return ret;
 800f850:	7bfb      	ldrb	r3, [r7, #15]
}
 800f852:	4618      	mov	r0, r3
 800f854:	3710      	adds	r7, #16
 800f856:	46bd      	mov	sp, r7
 800f858:	bd80      	pop	{r7, pc}
	...

0800f85c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b084      	sub	sp, #16
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
 800f864:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f866:	2300      	movs	r3, #0
 800f868:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f86a:	2300      	movs	r3, #0
 800f86c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f86e:	2300      	movs	r3, #0
 800f870:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f872:	683b      	ldr	r3, [r7, #0]
 800f874:	885b      	ldrh	r3, [r3, #2]
 800f876:	0a1b      	lsrs	r3, r3, #8
 800f878:	b29b      	uxth	r3, r3
 800f87a:	3b01      	subs	r3, #1
 800f87c:	2b06      	cmp	r3, #6
 800f87e:	f200 8128 	bhi.w	800fad2 <USBD_GetDescriptor+0x276>
 800f882:	a201      	add	r2, pc, #4	@ (adr r2, 800f888 <USBD_GetDescriptor+0x2c>)
 800f884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f888:	0800f8a5 	.word	0x0800f8a5
 800f88c:	0800f8bd 	.word	0x0800f8bd
 800f890:	0800f8fd 	.word	0x0800f8fd
 800f894:	0800fad3 	.word	0x0800fad3
 800f898:	0800fad3 	.word	0x0800fad3
 800f89c:	0800fa73 	.word	0x0800fa73
 800f8a0:	0800fa9f 	.word	0x0800fa9f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	687a      	ldr	r2, [r7, #4]
 800f8ae:	7c12      	ldrb	r2, [r2, #16]
 800f8b0:	f107 0108 	add.w	r1, r7, #8
 800f8b4:	4610      	mov	r0, r2
 800f8b6:	4798      	blx	r3
 800f8b8:	60f8      	str	r0, [r7, #12]
      break;
 800f8ba:	e112      	b.n	800fae2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	7c1b      	ldrb	r3, [r3, #16]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d10d      	bne.n	800f8e0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f8ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f8cc:	f107 0208 	add.w	r2, r7, #8
 800f8d0:	4610      	mov	r0, r2
 800f8d2:	4798      	blx	r3
 800f8d4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	3301      	adds	r3, #1
 800f8da:	2202      	movs	r2, #2
 800f8dc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f8de:	e100      	b.n	800fae2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f8e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8e8:	f107 0208 	add.w	r2, r7, #8
 800f8ec:	4610      	mov	r0, r2
 800f8ee:	4798      	blx	r3
 800f8f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	3301      	adds	r3, #1
 800f8f6:	2202      	movs	r2, #2
 800f8f8:	701a      	strb	r2, [r3, #0]
      break;
 800f8fa:	e0f2      	b.n	800fae2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f8fc:	683b      	ldr	r3, [r7, #0]
 800f8fe:	885b      	ldrh	r3, [r3, #2]
 800f900:	b2db      	uxtb	r3, r3
 800f902:	2b05      	cmp	r3, #5
 800f904:	f200 80ac 	bhi.w	800fa60 <USBD_GetDescriptor+0x204>
 800f908:	a201      	add	r2, pc, #4	@ (adr r2, 800f910 <USBD_GetDescriptor+0xb4>)
 800f90a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f90e:	bf00      	nop
 800f910:	0800f929 	.word	0x0800f929
 800f914:	0800f95d 	.word	0x0800f95d
 800f918:	0800f991 	.word	0x0800f991
 800f91c:	0800f9c5 	.word	0x0800f9c5
 800f920:	0800f9f9 	.word	0x0800f9f9
 800f924:	0800fa2d 	.word	0x0800fa2d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f92e:	685b      	ldr	r3, [r3, #4]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d00b      	beq.n	800f94c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f93a:	685b      	ldr	r3, [r3, #4]
 800f93c:	687a      	ldr	r2, [r7, #4]
 800f93e:	7c12      	ldrb	r2, [r2, #16]
 800f940:	f107 0108 	add.w	r1, r7, #8
 800f944:	4610      	mov	r0, r2
 800f946:	4798      	blx	r3
 800f948:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f94a:	e091      	b.n	800fa70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f94c:	6839      	ldr	r1, [r7, #0]
 800f94e:	6878      	ldr	r0, [r7, #4]
 800f950:	f000 facb 	bl	800feea <USBD_CtlError>
            err++;
 800f954:	7afb      	ldrb	r3, [r7, #11]
 800f956:	3301      	adds	r3, #1
 800f958:	72fb      	strb	r3, [r7, #11]
          break;
 800f95a:	e089      	b.n	800fa70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f962:	689b      	ldr	r3, [r3, #8]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d00b      	beq.n	800f980 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f96e:	689b      	ldr	r3, [r3, #8]
 800f970:	687a      	ldr	r2, [r7, #4]
 800f972:	7c12      	ldrb	r2, [r2, #16]
 800f974:	f107 0108 	add.w	r1, r7, #8
 800f978:	4610      	mov	r0, r2
 800f97a:	4798      	blx	r3
 800f97c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f97e:	e077      	b.n	800fa70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f980:	6839      	ldr	r1, [r7, #0]
 800f982:	6878      	ldr	r0, [r7, #4]
 800f984:	f000 fab1 	bl	800feea <USBD_CtlError>
            err++;
 800f988:	7afb      	ldrb	r3, [r7, #11]
 800f98a:	3301      	adds	r3, #1
 800f98c:	72fb      	strb	r3, [r7, #11]
          break;
 800f98e:	e06f      	b.n	800fa70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f996:	68db      	ldr	r3, [r3, #12]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d00b      	beq.n	800f9b4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f9a2:	68db      	ldr	r3, [r3, #12]
 800f9a4:	687a      	ldr	r2, [r7, #4]
 800f9a6:	7c12      	ldrb	r2, [r2, #16]
 800f9a8:	f107 0108 	add.w	r1, r7, #8
 800f9ac:	4610      	mov	r0, r2
 800f9ae:	4798      	blx	r3
 800f9b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f9b2:	e05d      	b.n	800fa70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f9b4:	6839      	ldr	r1, [r7, #0]
 800f9b6:	6878      	ldr	r0, [r7, #4]
 800f9b8:	f000 fa97 	bl	800feea <USBD_CtlError>
            err++;
 800f9bc:	7afb      	ldrb	r3, [r7, #11]
 800f9be:	3301      	adds	r3, #1
 800f9c0:	72fb      	strb	r3, [r7, #11]
          break;
 800f9c2:	e055      	b.n	800fa70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f9ca:	691b      	ldr	r3, [r3, #16]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d00b      	beq.n	800f9e8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f9d6:	691b      	ldr	r3, [r3, #16]
 800f9d8:	687a      	ldr	r2, [r7, #4]
 800f9da:	7c12      	ldrb	r2, [r2, #16]
 800f9dc:	f107 0108 	add.w	r1, r7, #8
 800f9e0:	4610      	mov	r0, r2
 800f9e2:	4798      	blx	r3
 800f9e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f9e6:	e043      	b.n	800fa70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f9e8:	6839      	ldr	r1, [r7, #0]
 800f9ea:	6878      	ldr	r0, [r7, #4]
 800f9ec:	f000 fa7d 	bl	800feea <USBD_CtlError>
            err++;
 800f9f0:	7afb      	ldrb	r3, [r7, #11]
 800f9f2:	3301      	adds	r3, #1
 800f9f4:	72fb      	strb	r3, [r7, #11]
          break;
 800f9f6:	e03b      	b.n	800fa70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f9fe:	695b      	ldr	r3, [r3, #20]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d00b      	beq.n	800fa1c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fa0a:	695b      	ldr	r3, [r3, #20]
 800fa0c:	687a      	ldr	r2, [r7, #4]
 800fa0e:	7c12      	ldrb	r2, [r2, #16]
 800fa10:	f107 0108 	add.w	r1, r7, #8
 800fa14:	4610      	mov	r0, r2
 800fa16:	4798      	blx	r3
 800fa18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fa1a:	e029      	b.n	800fa70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fa1c:	6839      	ldr	r1, [r7, #0]
 800fa1e:	6878      	ldr	r0, [r7, #4]
 800fa20:	f000 fa63 	bl	800feea <USBD_CtlError>
            err++;
 800fa24:	7afb      	ldrb	r3, [r7, #11]
 800fa26:	3301      	adds	r3, #1
 800fa28:	72fb      	strb	r3, [r7, #11]
          break;
 800fa2a:	e021      	b.n	800fa70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fa32:	699b      	ldr	r3, [r3, #24]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d00b      	beq.n	800fa50 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fa3e:	699b      	ldr	r3, [r3, #24]
 800fa40:	687a      	ldr	r2, [r7, #4]
 800fa42:	7c12      	ldrb	r2, [r2, #16]
 800fa44:	f107 0108 	add.w	r1, r7, #8
 800fa48:	4610      	mov	r0, r2
 800fa4a:	4798      	blx	r3
 800fa4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fa4e:	e00f      	b.n	800fa70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fa50:	6839      	ldr	r1, [r7, #0]
 800fa52:	6878      	ldr	r0, [r7, #4]
 800fa54:	f000 fa49 	bl	800feea <USBD_CtlError>
            err++;
 800fa58:	7afb      	ldrb	r3, [r7, #11]
 800fa5a:	3301      	adds	r3, #1
 800fa5c:	72fb      	strb	r3, [r7, #11]
          break;
 800fa5e:	e007      	b.n	800fa70 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800fa60:	6839      	ldr	r1, [r7, #0]
 800fa62:	6878      	ldr	r0, [r7, #4]
 800fa64:	f000 fa41 	bl	800feea <USBD_CtlError>
          err++;
 800fa68:	7afb      	ldrb	r3, [r7, #11]
 800fa6a:	3301      	adds	r3, #1
 800fa6c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800fa6e:	bf00      	nop
      }
      break;
 800fa70:	e037      	b.n	800fae2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	7c1b      	ldrb	r3, [r3, #16]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d109      	bne.n	800fa8e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fa80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fa82:	f107 0208 	add.w	r2, r7, #8
 800fa86:	4610      	mov	r0, r2
 800fa88:	4798      	blx	r3
 800fa8a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fa8c:	e029      	b.n	800fae2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800fa8e:	6839      	ldr	r1, [r7, #0]
 800fa90:	6878      	ldr	r0, [r7, #4]
 800fa92:	f000 fa2a 	bl	800feea <USBD_CtlError>
        err++;
 800fa96:	7afb      	ldrb	r3, [r7, #11]
 800fa98:	3301      	adds	r3, #1
 800fa9a:	72fb      	strb	r3, [r7, #11]
      break;
 800fa9c:	e021      	b.n	800fae2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	7c1b      	ldrb	r3, [r3, #16]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d10d      	bne.n	800fac2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800faac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800faae:	f107 0208 	add.w	r2, r7, #8
 800fab2:	4610      	mov	r0, r2
 800fab4:	4798      	blx	r3
 800fab6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	3301      	adds	r3, #1
 800fabc:	2207      	movs	r2, #7
 800fabe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fac0:	e00f      	b.n	800fae2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800fac2:	6839      	ldr	r1, [r7, #0]
 800fac4:	6878      	ldr	r0, [r7, #4]
 800fac6:	f000 fa10 	bl	800feea <USBD_CtlError>
        err++;
 800faca:	7afb      	ldrb	r3, [r7, #11]
 800facc:	3301      	adds	r3, #1
 800face:	72fb      	strb	r3, [r7, #11]
      break;
 800fad0:	e007      	b.n	800fae2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800fad2:	6839      	ldr	r1, [r7, #0]
 800fad4:	6878      	ldr	r0, [r7, #4]
 800fad6:	f000 fa08 	bl	800feea <USBD_CtlError>
      err++;
 800fada:	7afb      	ldrb	r3, [r7, #11]
 800fadc:	3301      	adds	r3, #1
 800fade:	72fb      	strb	r3, [r7, #11]
      break;
 800fae0:	bf00      	nop
  }

  if (err != 0U)
 800fae2:	7afb      	ldrb	r3, [r7, #11]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d11e      	bne.n	800fb26 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800fae8:	683b      	ldr	r3, [r7, #0]
 800faea:	88db      	ldrh	r3, [r3, #6]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d016      	beq.n	800fb1e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800faf0:	893b      	ldrh	r3, [r7, #8]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d00e      	beq.n	800fb14 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800faf6:	683b      	ldr	r3, [r7, #0]
 800faf8:	88da      	ldrh	r2, [r3, #6]
 800fafa:	893b      	ldrh	r3, [r7, #8]
 800fafc:	4293      	cmp	r3, r2
 800fafe:	bf28      	it	cs
 800fb00:	4613      	movcs	r3, r2
 800fb02:	b29b      	uxth	r3, r3
 800fb04:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800fb06:	893b      	ldrh	r3, [r7, #8]
 800fb08:	461a      	mov	r2, r3
 800fb0a:	68f9      	ldr	r1, [r7, #12]
 800fb0c:	6878      	ldr	r0, [r7, #4]
 800fb0e:	f000 fb6a 	bl	80101e6 <USBD_CtlSendData>
 800fb12:	e009      	b.n	800fb28 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800fb14:	6839      	ldr	r1, [r7, #0]
 800fb16:	6878      	ldr	r0, [r7, #4]
 800fb18:	f000 f9e7 	bl	800feea <USBD_CtlError>
 800fb1c:	e004      	b.n	800fb28 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800fb1e:	6878      	ldr	r0, [r7, #4]
 800fb20:	f000 fbbb 	bl	801029a <USBD_CtlSendStatus>
 800fb24:	e000      	b.n	800fb28 <USBD_GetDescriptor+0x2cc>
    return;
 800fb26:	bf00      	nop
  }
}
 800fb28:	3710      	adds	r7, #16
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	bd80      	pop	{r7, pc}
 800fb2e:	bf00      	nop

0800fb30 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b084      	sub	sp, #16
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
 800fb38:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800fb3a:	683b      	ldr	r3, [r7, #0]
 800fb3c:	889b      	ldrh	r3, [r3, #4]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d131      	bne.n	800fba6 <USBD_SetAddress+0x76>
 800fb42:	683b      	ldr	r3, [r7, #0]
 800fb44:	88db      	ldrh	r3, [r3, #6]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d12d      	bne.n	800fba6 <USBD_SetAddress+0x76>
 800fb4a:	683b      	ldr	r3, [r7, #0]
 800fb4c:	885b      	ldrh	r3, [r3, #2]
 800fb4e:	2b7f      	cmp	r3, #127	@ 0x7f
 800fb50:	d829      	bhi.n	800fba6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800fb52:	683b      	ldr	r3, [r7, #0]
 800fb54:	885b      	ldrh	r3, [r3, #2]
 800fb56:	b2db      	uxtb	r3, r3
 800fb58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fb5c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fb64:	b2db      	uxtb	r3, r3
 800fb66:	2b03      	cmp	r3, #3
 800fb68:	d104      	bne.n	800fb74 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800fb6a:	6839      	ldr	r1, [r7, #0]
 800fb6c:	6878      	ldr	r0, [r7, #4]
 800fb6e:	f000 f9bc 	bl	800feea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb72:	e01d      	b.n	800fbb0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	7bfa      	ldrb	r2, [r7, #15]
 800fb78:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fb7c:	7bfb      	ldrb	r3, [r7, #15]
 800fb7e:	4619      	mov	r1, r3
 800fb80:	6878      	ldr	r0, [r7, #4]
 800fb82:	f7fe ffcd 	bl	800eb20 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800fb86:	6878      	ldr	r0, [r7, #4]
 800fb88:	f000 fb87 	bl	801029a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800fb8c:	7bfb      	ldrb	r3, [r7, #15]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d004      	beq.n	800fb9c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	2202      	movs	r2, #2
 800fb96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb9a:	e009      	b.n	800fbb0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	2201      	movs	r2, #1
 800fba0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fba4:	e004      	b.n	800fbb0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800fba6:	6839      	ldr	r1, [r7, #0]
 800fba8:	6878      	ldr	r0, [r7, #4]
 800fbaa:	f000 f99e 	bl	800feea <USBD_CtlError>
  }
}
 800fbae:	bf00      	nop
 800fbb0:	bf00      	nop
 800fbb2:	3710      	adds	r7, #16
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	bd80      	pop	{r7, pc}

0800fbb8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b084      	sub	sp, #16
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
 800fbc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800fbc6:	683b      	ldr	r3, [r7, #0]
 800fbc8:	885b      	ldrh	r3, [r3, #2]
 800fbca:	b2da      	uxtb	r2, r3
 800fbcc:	4b4e      	ldr	r3, [pc, #312]	@ (800fd08 <USBD_SetConfig+0x150>)
 800fbce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fbd0:	4b4d      	ldr	r3, [pc, #308]	@ (800fd08 <USBD_SetConfig+0x150>)
 800fbd2:	781b      	ldrb	r3, [r3, #0]
 800fbd4:	2b01      	cmp	r3, #1
 800fbd6:	d905      	bls.n	800fbe4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800fbd8:	6839      	ldr	r1, [r7, #0]
 800fbda:	6878      	ldr	r0, [r7, #4]
 800fbdc:	f000 f985 	bl	800feea <USBD_CtlError>
    return USBD_FAIL;
 800fbe0:	2303      	movs	r3, #3
 800fbe2:	e08c      	b.n	800fcfe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fbea:	b2db      	uxtb	r3, r3
 800fbec:	2b02      	cmp	r3, #2
 800fbee:	d002      	beq.n	800fbf6 <USBD_SetConfig+0x3e>
 800fbf0:	2b03      	cmp	r3, #3
 800fbf2:	d029      	beq.n	800fc48 <USBD_SetConfig+0x90>
 800fbf4:	e075      	b.n	800fce2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800fbf6:	4b44      	ldr	r3, [pc, #272]	@ (800fd08 <USBD_SetConfig+0x150>)
 800fbf8:	781b      	ldrb	r3, [r3, #0]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d020      	beq.n	800fc40 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800fbfe:	4b42      	ldr	r3, [pc, #264]	@ (800fd08 <USBD_SetConfig+0x150>)
 800fc00:	781b      	ldrb	r3, [r3, #0]
 800fc02:	461a      	mov	r2, r3
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fc08:	4b3f      	ldr	r3, [pc, #252]	@ (800fd08 <USBD_SetConfig+0x150>)
 800fc0a:	781b      	ldrb	r3, [r3, #0]
 800fc0c:	4619      	mov	r1, r3
 800fc0e:	6878      	ldr	r0, [r7, #4]
 800fc10:	f7ff f8a9 	bl	800ed66 <USBD_SetClassConfig>
 800fc14:	4603      	mov	r3, r0
 800fc16:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800fc18:	7bfb      	ldrb	r3, [r7, #15]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d008      	beq.n	800fc30 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800fc1e:	6839      	ldr	r1, [r7, #0]
 800fc20:	6878      	ldr	r0, [r7, #4]
 800fc22:	f000 f962 	bl	800feea <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	2202      	movs	r2, #2
 800fc2a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fc2e:	e065      	b.n	800fcfc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fc30:	6878      	ldr	r0, [r7, #4]
 800fc32:	f000 fb32 	bl	801029a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	2203      	movs	r2, #3
 800fc3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800fc3e:	e05d      	b.n	800fcfc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fc40:	6878      	ldr	r0, [r7, #4]
 800fc42:	f000 fb2a 	bl	801029a <USBD_CtlSendStatus>
      break;
 800fc46:	e059      	b.n	800fcfc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800fc48:	4b2f      	ldr	r3, [pc, #188]	@ (800fd08 <USBD_SetConfig+0x150>)
 800fc4a:	781b      	ldrb	r3, [r3, #0]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d112      	bne.n	800fc76 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	2202      	movs	r2, #2
 800fc54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800fc58:	4b2b      	ldr	r3, [pc, #172]	@ (800fd08 <USBD_SetConfig+0x150>)
 800fc5a:	781b      	ldrb	r3, [r3, #0]
 800fc5c:	461a      	mov	r2, r3
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fc62:	4b29      	ldr	r3, [pc, #164]	@ (800fd08 <USBD_SetConfig+0x150>)
 800fc64:	781b      	ldrb	r3, [r3, #0]
 800fc66:	4619      	mov	r1, r3
 800fc68:	6878      	ldr	r0, [r7, #4]
 800fc6a:	f7ff f898 	bl	800ed9e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800fc6e:	6878      	ldr	r0, [r7, #4]
 800fc70:	f000 fb13 	bl	801029a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fc74:	e042      	b.n	800fcfc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800fc76:	4b24      	ldr	r3, [pc, #144]	@ (800fd08 <USBD_SetConfig+0x150>)
 800fc78:	781b      	ldrb	r3, [r3, #0]
 800fc7a:	461a      	mov	r2, r3
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	685b      	ldr	r3, [r3, #4]
 800fc80:	429a      	cmp	r2, r3
 800fc82:	d02a      	beq.n	800fcda <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	685b      	ldr	r3, [r3, #4]
 800fc88:	b2db      	uxtb	r3, r3
 800fc8a:	4619      	mov	r1, r3
 800fc8c:	6878      	ldr	r0, [r7, #4]
 800fc8e:	f7ff f886 	bl	800ed9e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800fc92:	4b1d      	ldr	r3, [pc, #116]	@ (800fd08 <USBD_SetConfig+0x150>)
 800fc94:	781b      	ldrb	r3, [r3, #0]
 800fc96:	461a      	mov	r2, r3
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fc9c:	4b1a      	ldr	r3, [pc, #104]	@ (800fd08 <USBD_SetConfig+0x150>)
 800fc9e:	781b      	ldrb	r3, [r3, #0]
 800fca0:	4619      	mov	r1, r3
 800fca2:	6878      	ldr	r0, [r7, #4]
 800fca4:	f7ff f85f 	bl	800ed66 <USBD_SetClassConfig>
 800fca8:	4603      	mov	r3, r0
 800fcaa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800fcac:	7bfb      	ldrb	r3, [r7, #15]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d00f      	beq.n	800fcd2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800fcb2:	6839      	ldr	r1, [r7, #0]
 800fcb4:	6878      	ldr	r0, [r7, #4]
 800fcb6:	f000 f918 	bl	800feea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	685b      	ldr	r3, [r3, #4]
 800fcbe:	b2db      	uxtb	r3, r3
 800fcc0:	4619      	mov	r1, r3
 800fcc2:	6878      	ldr	r0, [r7, #4]
 800fcc4:	f7ff f86b 	bl	800ed9e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	2202      	movs	r2, #2
 800fccc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800fcd0:	e014      	b.n	800fcfc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fcd2:	6878      	ldr	r0, [r7, #4]
 800fcd4:	f000 fae1 	bl	801029a <USBD_CtlSendStatus>
      break;
 800fcd8:	e010      	b.n	800fcfc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fcda:	6878      	ldr	r0, [r7, #4]
 800fcdc:	f000 fadd 	bl	801029a <USBD_CtlSendStatus>
      break;
 800fce0:	e00c      	b.n	800fcfc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800fce2:	6839      	ldr	r1, [r7, #0]
 800fce4:	6878      	ldr	r0, [r7, #4]
 800fce6:	f000 f900 	bl	800feea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fcea:	4b07      	ldr	r3, [pc, #28]	@ (800fd08 <USBD_SetConfig+0x150>)
 800fcec:	781b      	ldrb	r3, [r3, #0]
 800fcee:	4619      	mov	r1, r3
 800fcf0:	6878      	ldr	r0, [r7, #4]
 800fcf2:	f7ff f854 	bl	800ed9e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800fcf6:	2303      	movs	r3, #3
 800fcf8:	73fb      	strb	r3, [r7, #15]
      break;
 800fcfa:	bf00      	nop
  }

  return ret;
 800fcfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcfe:	4618      	mov	r0, r3
 800fd00:	3710      	adds	r7, #16
 800fd02:	46bd      	mov	sp, r7
 800fd04:	bd80      	pop	{r7, pc}
 800fd06:	bf00      	nop
 800fd08:	20011164 	.word	0x20011164

0800fd0c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b082      	sub	sp, #8
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]
 800fd14:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800fd16:	683b      	ldr	r3, [r7, #0]
 800fd18:	88db      	ldrh	r3, [r3, #6]
 800fd1a:	2b01      	cmp	r3, #1
 800fd1c:	d004      	beq.n	800fd28 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fd1e:	6839      	ldr	r1, [r7, #0]
 800fd20:	6878      	ldr	r0, [r7, #4]
 800fd22:	f000 f8e2 	bl	800feea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800fd26:	e023      	b.n	800fd70 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fd2e:	b2db      	uxtb	r3, r3
 800fd30:	2b02      	cmp	r3, #2
 800fd32:	dc02      	bgt.n	800fd3a <USBD_GetConfig+0x2e>
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	dc03      	bgt.n	800fd40 <USBD_GetConfig+0x34>
 800fd38:	e015      	b.n	800fd66 <USBD_GetConfig+0x5a>
 800fd3a:	2b03      	cmp	r3, #3
 800fd3c:	d00b      	beq.n	800fd56 <USBD_GetConfig+0x4a>
 800fd3e:	e012      	b.n	800fd66 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	2200      	movs	r2, #0
 800fd44:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	3308      	adds	r3, #8
 800fd4a:	2201      	movs	r2, #1
 800fd4c:	4619      	mov	r1, r3
 800fd4e:	6878      	ldr	r0, [r7, #4]
 800fd50:	f000 fa49 	bl	80101e6 <USBD_CtlSendData>
        break;
 800fd54:	e00c      	b.n	800fd70 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	3304      	adds	r3, #4
 800fd5a:	2201      	movs	r2, #1
 800fd5c:	4619      	mov	r1, r3
 800fd5e:	6878      	ldr	r0, [r7, #4]
 800fd60:	f000 fa41 	bl	80101e6 <USBD_CtlSendData>
        break;
 800fd64:	e004      	b.n	800fd70 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800fd66:	6839      	ldr	r1, [r7, #0]
 800fd68:	6878      	ldr	r0, [r7, #4]
 800fd6a:	f000 f8be 	bl	800feea <USBD_CtlError>
        break;
 800fd6e:	bf00      	nop
}
 800fd70:	bf00      	nop
 800fd72:	3708      	adds	r7, #8
 800fd74:	46bd      	mov	sp, r7
 800fd76:	bd80      	pop	{r7, pc}

0800fd78 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b082      	sub	sp, #8
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
 800fd80:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fd88:	b2db      	uxtb	r3, r3
 800fd8a:	3b01      	subs	r3, #1
 800fd8c:	2b02      	cmp	r3, #2
 800fd8e:	d81e      	bhi.n	800fdce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800fd90:	683b      	ldr	r3, [r7, #0]
 800fd92:	88db      	ldrh	r3, [r3, #6]
 800fd94:	2b02      	cmp	r3, #2
 800fd96:	d004      	beq.n	800fda2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800fd98:	6839      	ldr	r1, [r7, #0]
 800fd9a:	6878      	ldr	r0, [r7, #4]
 800fd9c:	f000 f8a5 	bl	800feea <USBD_CtlError>
        break;
 800fda0:	e01a      	b.n	800fdd8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	2201      	movs	r2, #1
 800fda6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d005      	beq.n	800fdbe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	68db      	ldr	r3, [r3, #12]
 800fdb6:	f043 0202 	orr.w	r2, r3, #2
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	330c      	adds	r3, #12
 800fdc2:	2202      	movs	r2, #2
 800fdc4:	4619      	mov	r1, r3
 800fdc6:	6878      	ldr	r0, [r7, #4]
 800fdc8:	f000 fa0d 	bl	80101e6 <USBD_CtlSendData>
      break;
 800fdcc:	e004      	b.n	800fdd8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800fdce:	6839      	ldr	r1, [r7, #0]
 800fdd0:	6878      	ldr	r0, [r7, #4]
 800fdd2:	f000 f88a 	bl	800feea <USBD_CtlError>
      break;
 800fdd6:	bf00      	nop
  }
}
 800fdd8:	bf00      	nop
 800fdda:	3708      	adds	r7, #8
 800fddc:	46bd      	mov	sp, r7
 800fdde:	bd80      	pop	{r7, pc}

0800fde0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fde0:	b580      	push	{r7, lr}
 800fde2:	b082      	sub	sp, #8
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	6078      	str	r0, [r7, #4]
 800fde8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fdea:	683b      	ldr	r3, [r7, #0]
 800fdec:	885b      	ldrh	r3, [r3, #2]
 800fdee:	2b01      	cmp	r3, #1
 800fdf0:	d107      	bne.n	800fe02 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	2201      	movs	r2, #1
 800fdf6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800fdfa:	6878      	ldr	r0, [r7, #4]
 800fdfc:	f000 fa4d 	bl	801029a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800fe00:	e013      	b.n	800fe2a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800fe02:	683b      	ldr	r3, [r7, #0]
 800fe04:	885b      	ldrh	r3, [r3, #2]
 800fe06:	2b02      	cmp	r3, #2
 800fe08:	d10b      	bne.n	800fe22 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800fe0a:	683b      	ldr	r3, [r7, #0]
 800fe0c:	889b      	ldrh	r3, [r3, #4]
 800fe0e:	0a1b      	lsrs	r3, r3, #8
 800fe10:	b29b      	uxth	r3, r3
 800fe12:	b2da      	uxtb	r2, r3
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800fe1a:	6878      	ldr	r0, [r7, #4]
 800fe1c:	f000 fa3d 	bl	801029a <USBD_CtlSendStatus>
}
 800fe20:	e003      	b.n	800fe2a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800fe22:	6839      	ldr	r1, [r7, #0]
 800fe24:	6878      	ldr	r0, [r7, #4]
 800fe26:	f000 f860 	bl	800feea <USBD_CtlError>
}
 800fe2a:	bf00      	nop
 800fe2c:	3708      	adds	r7, #8
 800fe2e:	46bd      	mov	sp, r7
 800fe30:	bd80      	pop	{r7, pc}

0800fe32 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe32:	b580      	push	{r7, lr}
 800fe34:	b082      	sub	sp, #8
 800fe36:	af00      	add	r7, sp, #0
 800fe38:	6078      	str	r0, [r7, #4]
 800fe3a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fe42:	b2db      	uxtb	r3, r3
 800fe44:	3b01      	subs	r3, #1
 800fe46:	2b02      	cmp	r3, #2
 800fe48:	d80b      	bhi.n	800fe62 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fe4a:	683b      	ldr	r3, [r7, #0]
 800fe4c:	885b      	ldrh	r3, [r3, #2]
 800fe4e:	2b01      	cmp	r3, #1
 800fe50:	d10c      	bne.n	800fe6c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	2200      	movs	r2, #0
 800fe56:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fe5a:	6878      	ldr	r0, [r7, #4]
 800fe5c:	f000 fa1d 	bl	801029a <USBD_CtlSendStatus>
      }
      break;
 800fe60:	e004      	b.n	800fe6c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800fe62:	6839      	ldr	r1, [r7, #0]
 800fe64:	6878      	ldr	r0, [r7, #4]
 800fe66:	f000 f840 	bl	800feea <USBD_CtlError>
      break;
 800fe6a:	e000      	b.n	800fe6e <USBD_ClrFeature+0x3c>
      break;
 800fe6c:	bf00      	nop
  }
}
 800fe6e:	bf00      	nop
 800fe70:	3708      	adds	r7, #8
 800fe72:	46bd      	mov	sp, r7
 800fe74:	bd80      	pop	{r7, pc}

0800fe76 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800fe76:	b580      	push	{r7, lr}
 800fe78:	b084      	sub	sp, #16
 800fe7a:	af00      	add	r7, sp, #0
 800fe7c:	6078      	str	r0, [r7, #4]
 800fe7e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800fe80:	683b      	ldr	r3, [r7, #0]
 800fe82:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	781a      	ldrb	r2, [r3, #0]
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	3301      	adds	r3, #1
 800fe90:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	781a      	ldrb	r2, [r3, #0]
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	3301      	adds	r3, #1
 800fe9e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fea0:	68f8      	ldr	r0, [r7, #12]
 800fea2:	f7ff fa40 	bl	800f326 <SWAPBYTE>
 800fea6:	4603      	mov	r3, r0
 800fea8:	461a      	mov	r2, r3
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	3301      	adds	r3, #1
 800feb2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	3301      	adds	r3, #1
 800feb8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800feba:	68f8      	ldr	r0, [r7, #12]
 800febc:	f7ff fa33 	bl	800f326 <SWAPBYTE>
 800fec0:	4603      	mov	r3, r0
 800fec2:	461a      	mov	r2, r3
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	3301      	adds	r3, #1
 800fecc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	3301      	adds	r3, #1
 800fed2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fed4:	68f8      	ldr	r0, [r7, #12]
 800fed6:	f7ff fa26 	bl	800f326 <SWAPBYTE>
 800feda:	4603      	mov	r3, r0
 800fedc:	461a      	mov	r2, r3
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	80da      	strh	r2, [r3, #6]
}
 800fee2:	bf00      	nop
 800fee4:	3710      	adds	r7, #16
 800fee6:	46bd      	mov	sp, r7
 800fee8:	bd80      	pop	{r7, pc}

0800feea <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800feea:	b580      	push	{r7, lr}
 800feec:	b082      	sub	sp, #8
 800feee:	af00      	add	r7, sp, #0
 800fef0:	6078      	str	r0, [r7, #4]
 800fef2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fef4:	2180      	movs	r1, #128	@ 0x80
 800fef6:	6878      	ldr	r0, [r7, #4]
 800fef8:	f7fe fdb4 	bl	800ea64 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fefc:	2100      	movs	r1, #0
 800fefe:	6878      	ldr	r0, [r7, #4]
 800ff00:	f7fe fdb0 	bl	800ea64 <USBD_LL_StallEP>
}
 800ff04:	bf00      	nop
 800ff06:	3708      	adds	r7, #8
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	bd80      	pop	{r7, pc}

0800ff0c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b086      	sub	sp, #24
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	60f8      	str	r0, [r7, #12]
 800ff14:	60b9      	str	r1, [r7, #8]
 800ff16:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ff18:	2300      	movs	r3, #0
 800ff1a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d036      	beq.n	800ff90 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ff26:	6938      	ldr	r0, [r7, #16]
 800ff28:	f000 f836 	bl	800ff98 <USBD_GetLen>
 800ff2c:	4603      	mov	r3, r0
 800ff2e:	3301      	adds	r3, #1
 800ff30:	b29b      	uxth	r3, r3
 800ff32:	005b      	lsls	r3, r3, #1
 800ff34:	b29a      	uxth	r2, r3
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ff3a:	7dfb      	ldrb	r3, [r7, #23]
 800ff3c:	68ba      	ldr	r2, [r7, #8]
 800ff3e:	4413      	add	r3, r2
 800ff40:	687a      	ldr	r2, [r7, #4]
 800ff42:	7812      	ldrb	r2, [r2, #0]
 800ff44:	701a      	strb	r2, [r3, #0]
  idx++;
 800ff46:	7dfb      	ldrb	r3, [r7, #23]
 800ff48:	3301      	adds	r3, #1
 800ff4a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ff4c:	7dfb      	ldrb	r3, [r7, #23]
 800ff4e:	68ba      	ldr	r2, [r7, #8]
 800ff50:	4413      	add	r3, r2
 800ff52:	2203      	movs	r2, #3
 800ff54:	701a      	strb	r2, [r3, #0]
  idx++;
 800ff56:	7dfb      	ldrb	r3, [r7, #23]
 800ff58:	3301      	adds	r3, #1
 800ff5a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ff5c:	e013      	b.n	800ff86 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ff5e:	7dfb      	ldrb	r3, [r7, #23]
 800ff60:	68ba      	ldr	r2, [r7, #8]
 800ff62:	4413      	add	r3, r2
 800ff64:	693a      	ldr	r2, [r7, #16]
 800ff66:	7812      	ldrb	r2, [r2, #0]
 800ff68:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ff6a:	693b      	ldr	r3, [r7, #16]
 800ff6c:	3301      	adds	r3, #1
 800ff6e:	613b      	str	r3, [r7, #16]
    idx++;
 800ff70:	7dfb      	ldrb	r3, [r7, #23]
 800ff72:	3301      	adds	r3, #1
 800ff74:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ff76:	7dfb      	ldrb	r3, [r7, #23]
 800ff78:	68ba      	ldr	r2, [r7, #8]
 800ff7a:	4413      	add	r3, r2
 800ff7c:	2200      	movs	r2, #0
 800ff7e:	701a      	strb	r2, [r3, #0]
    idx++;
 800ff80:	7dfb      	ldrb	r3, [r7, #23]
 800ff82:	3301      	adds	r3, #1
 800ff84:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ff86:	693b      	ldr	r3, [r7, #16]
 800ff88:	781b      	ldrb	r3, [r3, #0]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d1e7      	bne.n	800ff5e <USBD_GetString+0x52>
 800ff8e:	e000      	b.n	800ff92 <USBD_GetString+0x86>
    return;
 800ff90:	bf00      	nop
  }
}
 800ff92:	3718      	adds	r7, #24
 800ff94:	46bd      	mov	sp, r7
 800ff96:	bd80      	pop	{r7, pc}

0800ff98 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ff98:	b480      	push	{r7}
 800ff9a:	b085      	sub	sp, #20
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ffa8:	e005      	b.n	800ffb6 <USBD_GetLen+0x1e>
  {
    len++;
 800ffaa:	7bfb      	ldrb	r3, [r7, #15]
 800ffac:	3301      	adds	r3, #1
 800ffae:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ffb0:	68bb      	ldr	r3, [r7, #8]
 800ffb2:	3301      	adds	r3, #1
 800ffb4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ffb6:	68bb      	ldr	r3, [r7, #8]
 800ffb8:	781b      	ldrb	r3, [r3, #0]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d1f5      	bne.n	800ffaa <USBD_GetLen+0x12>
  }

  return len;
 800ffbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	3714      	adds	r7, #20
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffca:	4770      	bx	lr

0800ffcc <USBD_Class_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ffcc:	b480      	push	{r7}
 800ffce:	b083      	sub	sp, #12
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	4603      	mov	r3, r0
 800ffd4:	6039      	str	r1, [r7, #0]
 800ffd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_DeviceDesc);
 800ffd8:	683b      	ldr	r3, [r7, #0]
 800ffda:	2212      	movs	r2, #18
 800ffdc:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_DeviceDesc;
 800ffde:	4b03      	ldr	r3, [pc, #12]	@ (800ffec <USBD_Class_DeviceDescriptor+0x20>)
}
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	370c      	adds	r7, #12
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffea:	4770      	bx	lr
 800ffec:	200000f0 	.word	0x200000f0

0800fff0 <USBD_Class_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fff0:	b480      	push	{r7}
 800fff2:	b083      	sub	sp, #12
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	4603      	mov	r3, r0
 800fff8:	6039      	str	r1, [r7, #0]
 800fffa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_LangIDDesc);
 800fffc:	683b      	ldr	r3, [r7, #0]
 800fffe:	2204      	movs	r2, #4
 8010000:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_LangIDDesc;
 8010002:	4b03      	ldr	r3, [pc, #12]	@ (8010010 <USBD_Class_LangIDStrDescriptor+0x20>)
}
 8010004:	4618      	mov	r0, r3
 8010006:	370c      	adds	r7, #12
 8010008:	46bd      	mov	sp, r7
 801000a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000e:	4770      	bx	lr
 8010010:	20000104 	.word	0x20000104

08010014 <USBD_Class_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010014:	b580      	push	{r7, lr}
 8010016:	b082      	sub	sp, #8
 8010018:	af00      	add	r7, sp, #0
 801001a:	4603      	mov	r3, r0
 801001c:	6039      	str	r1, [r7, #0]
 801001e:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 8010020:	79fb      	ldrb	r3, [r7, #7]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d105      	bne.n	8010032 <USBD_Class_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 8010026:	683a      	ldr	r2, [r7, #0]
 8010028:	4907      	ldr	r1, [pc, #28]	@ (8010048 <USBD_Class_ProductStrDescriptor+0x34>)
 801002a:	4808      	ldr	r0, [pc, #32]	@ (801004c <USBD_Class_ProductStrDescriptor+0x38>)
 801002c:	f7ff ff6e 	bl	800ff0c <USBD_GetString>
 8010030:	e004      	b.n	801003c <USBD_Class_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 8010032:	683a      	ldr	r2, [r7, #0]
 8010034:	4904      	ldr	r1, [pc, #16]	@ (8010048 <USBD_Class_ProductStrDescriptor+0x34>)
 8010036:	4805      	ldr	r0, [pc, #20]	@ (801004c <USBD_Class_ProductStrDescriptor+0x38>)
 8010038:	f7ff ff68 	bl	800ff0c <USBD_GetString>
  }
  return USBD_StrDesc;
 801003c:	4b02      	ldr	r3, [pc, #8]	@ (8010048 <USBD_Class_ProductStrDescriptor+0x34>)
}
 801003e:	4618      	mov	r0, r3
 8010040:	3708      	adds	r7, #8
 8010042:	46bd      	mov	sp, r7
 8010044:	bd80      	pop	{r7, pc}
 8010046:	bf00      	nop
 8010048:	20011168 	.word	0x20011168
 801004c:	08011794 	.word	0x08011794

08010050 <USBD_Class_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010050:	b580      	push	{r7, lr}
 8010052:	b082      	sub	sp, #8
 8010054:	af00      	add	r7, sp, #0
 8010056:	4603      	mov	r3, r0
 8010058:	6039      	str	r1, [r7, #0]
 801005a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801005c:	683a      	ldr	r2, [r7, #0]
 801005e:	4904      	ldr	r1, [pc, #16]	@ (8010070 <USBD_Class_ManufacturerStrDescriptor+0x20>)
 8010060:	4804      	ldr	r0, [pc, #16]	@ (8010074 <USBD_Class_ManufacturerStrDescriptor+0x24>)
 8010062:	f7ff ff53 	bl	800ff0c <USBD_GetString>
  return USBD_StrDesc;
 8010066:	4b02      	ldr	r3, [pc, #8]	@ (8010070 <USBD_Class_ManufacturerStrDescriptor+0x20>)
}
 8010068:	4618      	mov	r0, r3
 801006a:	3708      	adds	r7, #8
 801006c:	46bd      	mov	sp, r7
 801006e:	bd80      	pop	{r7, pc}
 8010070:	20011168 	.word	0x20011168
 8010074:	080117ac 	.word	0x080117ac

08010078 <USBD_Class_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010078:	b580      	push	{r7, lr}
 801007a:	b082      	sub	sp, #8
 801007c:	af00      	add	r7, sp, #0
 801007e:	4603      	mov	r3, r0
 8010080:	6039      	str	r1, [r7, #0]
 8010082:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = USB_SIZ_STRING_SERIAL;
 8010084:	683b      	ldr	r3, [r7, #0]
 8010086:	221a      	movs	r2, #26
 8010088:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 801008a:	f000 f843 	bl	8010114 <Get_SerialNum>

  return (uint8_t *)USBD_StringSerial;
 801008e:	4b02      	ldr	r3, [pc, #8]	@ (8010098 <USBD_Class_SerialStrDescriptor+0x20>)
}
 8010090:	4618      	mov	r0, r3
 8010092:	3708      	adds	r7, #8
 8010094:	46bd      	mov	sp, r7
 8010096:	bd80      	pop	{r7, pc}
 8010098:	20000108 	.word	0x20000108

0801009c <USBD_Class_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801009c:	b580      	push	{r7, lr}
 801009e:	b082      	sub	sp, #8
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	4603      	mov	r3, r0
 80100a4:	6039      	str	r1, [r7, #0]
 80100a6:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 80100a8:	79fb      	ldrb	r3, [r7, #7]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d105      	bne.n	80100ba <USBD_Class_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 80100ae:	683a      	ldr	r2, [r7, #0]
 80100b0:	4907      	ldr	r1, [pc, #28]	@ (80100d0 <USBD_Class_ConfigStrDescriptor+0x34>)
 80100b2:	4808      	ldr	r0, [pc, #32]	@ (80100d4 <USBD_Class_ConfigStrDescriptor+0x38>)
 80100b4:	f7ff ff2a 	bl	800ff0c <USBD_GetString>
 80100b8:	e004      	b.n	80100c4 <USBD_Class_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 80100ba:	683a      	ldr	r2, [r7, #0]
 80100bc:	4904      	ldr	r1, [pc, #16]	@ (80100d0 <USBD_Class_ConfigStrDescriptor+0x34>)
 80100be:	4805      	ldr	r0, [pc, #20]	@ (80100d4 <USBD_Class_ConfigStrDescriptor+0x38>)
 80100c0:	f7ff ff24 	bl	800ff0c <USBD_GetString>
  }
  return USBD_StrDesc;
 80100c4:	4b02      	ldr	r3, [pc, #8]	@ (80100d0 <USBD_Class_ConfigStrDescriptor+0x34>)
}
 80100c6:	4618      	mov	r0, r3
 80100c8:	3708      	adds	r7, #8
 80100ca:	46bd      	mov	sp, r7
 80100cc:	bd80      	pop	{r7, pc}
 80100ce:	bf00      	nop
 80100d0:	20011168 	.word	0x20011168
 80100d4:	080117c0 	.word	0x080117c0

080100d8 <USBD_Class_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b082      	sub	sp, #8
 80100dc:	af00      	add	r7, sp, #0
 80100de:	4603      	mov	r3, r0
 80100e0:	6039      	str	r1, [r7, #0]
 80100e2:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 80100e4:	79fb      	ldrb	r3, [r7, #7]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d105      	bne.n	80100f6 <USBD_Class_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 80100ea:	683a      	ldr	r2, [r7, #0]
 80100ec:	4907      	ldr	r1, [pc, #28]	@ (801010c <USBD_Class_InterfaceStrDescriptor+0x34>)
 80100ee:	4808      	ldr	r0, [pc, #32]	@ (8010110 <USBD_Class_InterfaceStrDescriptor+0x38>)
 80100f0:	f7ff ff0c 	bl	800ff0c <USBD_GetString>
 80100f4:	e004      	b.n	8010100 <USBD_Class_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 80100f6:	683a      	ldr	r2, [r7, #0]
 80100f8:	4904      	ldr	r1, [pc, #16]	@ (801010c <USBD_Class_InterfaceStrDescriptor+0x34>)
 80100fa:	4805      	ldr	r0, [pc, #20]	@ (8010110 <USBD_Class_InterfaceStrDescriptor+0x38>)
 80100fc:	f7ff ff06 	bl	800ff0c <USBD_GetString>
  }
  return USBD_StrDesc;
 8010100:	4b02      	ldr	r3, [pc, #8]	@ (801010c <USBD_Class_InterfaceStrDescriptor+0x34>)
}
 8010102:	4618      	mov	r0, r3
 8010104:	3708      	adds	r7, #8
 8010106:	46bd      	mov	sp, r7
 8010108:	bd80      	pop	{r7, pc}
 801010a:	bf00      	nop
 801010c:	20011168 	.word	0x20011168
 8010110:	080117cc 	.word	0x080117cc

08010114 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010114:	b580      	push	{r7, lr}
 8010116:	b084      	sub	sp, #16
 8010118:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *)DEVICE_ID1;
 801011a:	4b0f      	ldr	r3, [pc, #60]	@ (8010158 <Get_SerialNum+0x44>)
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *)DEVICE_ID2;
 8010120:	4b0e      	ldr	r3, [pc, #56]	@ (801015c <Get_SerialNum+0x48>)
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *)DEVICE_ID3;
 8010126:	4b0e      	ldr	r3, [pc, #56]	@ (8010160 <Get_SerialNum+0x4c>)
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801012c:	68fa      	ldr	r2, [r7, #12]
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	4413      	add	r3, r2
 8010132:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0U)
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d009      	beq.n	801014e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8U);
 801013a:	2208      	movs	r2, #8
 801013c:	4909      	ldr	r1, [pc, #36]	@ (8010164 <Get_SerialNum+0x50>)
 801013e:	68f8      	ldr	r0, [r7, #12]
 8010140:	f000 f814 	bl	801016c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4U);
 8010144:	2204      	movs	r2, #4
 8010146:	4908      	ldr	r1, [pc, #32]	@ (8010168 <Get_SerialNum+0x54>)
 8010148:	68b8      	ldr	r0, [r7, #8]
 801014a:	f000 f80f 	bl	801016c <IntToUnicode>
  }
}
 801014e:	bf00      	nop
 8010150:	3710      	adds	r7, #16
 8010152:	46bd      	mov	sp, r7
 8010154:	bd80      	pop	{r7, pc}
 8010156:	bf00      	nop
 8010158:	08fff800 	.word	0x08fff800
 801015c:	08fff804 	.word	0x08fff804
 8010160:	08fff808 	.word	0x08fff808
 8010164:	2000010a 	.word	0x2000010a
 8010168:	2000011a 	.word	0x2000011a

0801016c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len)
{
 801016c:	b480      	push	{r7}
 801016e:	b087      	sub	sp, #28
 8010170:	af00      	add	r7, sp, #0
 8010172:	60f8      	str	r0, [r7, #12]
 8010174:	60b9      	str	r1, [r7, #8]
 8010176:	4613      	mov	r3, r2
 8010178:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0U;
 801017a:	2300      	movs	r3, #0
 801017c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0U ; idx < len ; idx ++)
 801017e:	2300      	movs	r3, #0
 8010180:	75fb      	strb	r3, [r7, #23]
 8010182:	e025      	b.n	80101d0 <IntToUnicode+0x64>
  {
    if (((value >> 28)) < 0xAU)
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	0f1b      	lsrs	r3, r3, #28
 8010188:	2b09      	cmp	r3, #9
 801018a:	d80a      	bhi.n	80101a2 <IntToUnicode+0x36>
    {
      pbuf[ 2U * idx] = (value >> 28) + '0';
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	0f1b      	lsrs	r3, r3, #28
 8010190:	b2da      	uxtb	r2, r3
 8010192:	7dfb      	ldrb	r3, [r7, #23]
 8010194:	005b      	lsls	r3, r3, #1
 8010196:	68b9      	ldr	r1, [r7, #8]
 8010198:	440b      	add	r3, r1
 801019a:	3230      	adds	r2, #48	@ 0x30
 801019c:	b2d2      	uxtb	r2, r2
 801019e:	701a      	strb	r2, [r3, #0]
 80101a0:	e009      	b.n	80101b6 <IntToUnicode+0x4a>
    }
    else
    {
      pbuf[2U * idx] = (value >> 28) + 'A' - 10U;
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	0f1b      	lsrs	r3, r3, #28
 80101a6:	b2da      	uxtb	r2, r3
 80101a8:	7dfb      	ldrb	r3, [r7, #23]
 80101aa:	005b      	lsls	r3, r3, #1
 80101ac:	68b9      	ldr	r1, [r7, #8]
 80101ae:	440b      	add	r3, r1
 80101b0:	3237      	adds	r2, #55	@ 0x37
 80101b2:	b2d2      	uxtb	r2, r2
 80101b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	011b      	lsls	r3, r3, #4
 80101ba:	60fb      	str	r3, [r7, #12]

    pbuf[2U * idx + 1] = 0U;
 80101bc:	7dfb      	ldrb	r3, [r7, #23]
 80101be:	005b      	lsls	r3, r3, #1
 80101c0:	3301      	adds	r3, #1
 80101c2:	68ba      	ldr	r2, [r7, #8]
 80101c4:	4413      	add	r3, r2
 80101c6:	2200      	movs	r2, #0
 80101c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0U ; idx < len ; idx ++)
 80101ca:	7dfb      	ldrb	r3, [r7, #23]
 80101cc:	3301      	adds	r3, #1
 80101ce:	75fb      	strb	r3, [r7, #23]
 80101d0:	7dfa      	ldrb	r2, [r7, #23]
 80101d2:	79fb      	ldrb	r3, [r7, #7]
 80101d4:	429a      	cmp	r2, r3
 80101d6:	d3d5      	bcc.n	8010184 <IntToUnicode+0x18>
  }
}
 80101d8:	bf00      	nop
 80101da:	bf00      	nop
 80101dc:	371c      	adds	r7, #28
 80101de:	46bd      	mov	sp, r7
 80101e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e4:	4770      	bx	lr

080101e6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80101e6:	b580      	push	{r7, lr}
 80101e8:	b084      	sub	sp, #16
 80101ea:	af00      	add	r7, sp, #0
 80101ec:	60f8      	str	r0, [r7, #12]
 80101ee:	60b9      	str	r1, [r7, #8]
 80101f0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	2202      	movs	r2, #2
 80101f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	687a      	ldr	r2, [r7, #4]
 80101fe:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	687a      	ldr	r2, [r7, #4]
 8010204:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	68ba      	ldr	r2, [r7, #8]
 801020a:	2100      	movs	r1, #0
 801020c:	68f8      	ldr	r0, [r7, #12]
 801020e:	f7fe fca0 	bl	800eb52 <USBD_LL_Transmit>

  return USBD_OK;
 8010212:	2300      	movs	r3, #0
}
 8010214:	4618      	mov	r0, r3
 8010216:	3710      	adds	r7, #16
 8010218:	46bd      	mov	sp, r7
 801021a:	bd80      	pop	{r7, pc}

0801021c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801021c:	b580      	push	{r7, lr}
 801021e:	b084      	sub	sp, #16
 8010220:	af00      	add	r7, sp, #0
 8010222:	60f8      	str	r0, [r7, #12]
 8010224:	60b9      	str	r1, [r7, #8]
 8010226:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	68ba      	ldr	r2, [r7, #8]
 801022c:	2100      	movs	r1, #0
 801022e:	68f8      	ldr	r0, [r7, #12]
 8010230:	f7fe fc8f 	bl	800eb52 <USBD_LL_Transmit>

  return USBD_OK;
 8010234:	2300      	movs	r3, #0
}
 8010236:	4618      	mov	r0, r3
 8010238:	3710      	adds	r7, #16
 801023a:	46bd      	mov	sp, r7
 801023c:	bd80      	pop	{r7, pc}

0801023e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801023e:	b580      	push	{r7, lr}
 8010240:	b084      	sub	sp, #16
 8010242:	af00      	add	r7, sp, #0
 8010244:	60f8      	str	r0, [r7, #12]
 8010246:	60b9      	str	r1, [r7, #8]
 8010248:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	2203      	movs	r2, #3
 801024e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	687a      	ldr	r2, [r7, #4]
 8010256:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	687a      	ldr	r2, [r7, #4]
 801025e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	68ba      	ldr	r2, [r7, #8]
 8010266:	2100      	movs	r1, #0
 8010268:	68f8      	ldr	r0, [r7, #12]
 801026a:	f7fe fc8d 	bl	800eb88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801026e:	2300      	movs	r3, #0
}
 8010270:	4618      	mov	r0, r3
 8010272:	3710      	adds	r7, #16
 8010274:	46bd      	mov	sp, r7
 8010276:	bd80      	pop	{r7, pc}

08010278 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b084      	sub	sp, #16
 801027c:	af00      	add	r7, sp, #0
 801027e:	60f8      	str	r0, [r7, #12]
 8010280:	60b9      	str	r1, [r7, #8]
 8010282:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	68ba      	ldr	r2, [r7, #8]
 8010288:	2100      	movs	r1, #0
 801028a:	68f8      	ldr	r0, [r7, #12]
 801028c:	f7fe fc7c 	bl	800eb88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010290:	2300      	movs	r3, #0
}
 8010292:	4618      	mov	r0, r3
 8010294:	3710      	adds	r7, #16
 8010296:	46bd      	mov	sp, r7
 8010298:	bd80      	pop	{r7, pc}

0801029a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801029a:	b580      	push	{r7, lr}
 801029c:	b082      	sub	sp, #8
 801029e:	af00      	add	r7, sp, #0
 80102a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	2204      	movs	r2, #4
 80102a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80102aa:	2300      	movs	r3, #0
 80102ac:	2200      	movs	r2, #0
 80102ae:	2100      	movs	r1, #0
 80102b0:	6878      	ldr	r0, [r7, #4]
 80102b2:	f7fe fc4e 	bl	800eb52 <USBD_LL_Transmit>

  return USBD_OK;
 80102b6:	2300      	movs	r3, #0
}
 80102b8:	4618      	mov	r0, r3
 80102ba:	3708      	adds	r7, #8
 80102bc:	46bd      	mov	sp, r7
 80102be:	bd80      	pop	{r7, pc}

080102c0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b082      	sub	sp, #8
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	2205      	movs	r2, #5
 80102cc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80102d0:	2300      	movs	r3, #0
 80102d2:	2200      	movs	r2, #0
 80102d4:	2100      	movs	r1, #0
 80102d6:	6878      	ldr	r0, [r7, #4]
 80102d8:	f7fe fc56 	bl	800eb88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80102dc:	2300      	movs	r3, #0
}
 80102de:	4618      	mov	r0, r3
 80102e0:	3708      	adds	r7, #8
 80102e2:	46bd      	mov	sp, r7
 80102e4:	bd80      	pop	{r7, pc}
	...

080102e8 <std>:
 80102e8:	2300      	movs	r3, #0
 80102ea:	b510      	push	{r4, lr}
 80102ec:	4604      	mov	r4, r0
 80102ee:	6083      	str	r3, [r0, #8]
 80102f0:	8181      	strh	r1, [r0, #12]
 80102f2:	4619      	mov	r1, r3
 80102f4:	6643      	str	r3, [r0, #100]	@ 0x64
 80102f6:	81c2      	strh	r2, [r0, #14]
 80102f8:	2208      	movs	r2, #8
 80102fa:	6183      	str	r3, [r0, #24]
 80102fc:	e9c0 3300 	strd	r3, r3, [r0]
 8010300:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010304:	305c      	adds	r0, #92	@ 0x5c
 8010306:	f000 f993 	bl	8010630 <memset>
 801030a:	4b0d      	ldr	r3, [pc, #52]	@ (8010340 <std+0x58>)
 801030c:	6224      	str	r4, [r4, #32]
 801030e:	6263      	str	r3, [r4, #36]	@ 0x24
 8010310:	4b0c      	ldr	r3, [pc, #48]	@ (8010344 <std+0x5c>)
 8010312:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010314:	4b0c      	ldr	r3, [pc, #48]	@ (8010348 <std+0x60>)
 8010316:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010318:	4b0c      	ldr	r3, [pc, #48]	@ (801034c <std+0x64>)
 801031a:	6323      	str	r3, [r4, #48]	@ 0x30
 801031c:	4b0c      	ldr	r3, [pc, #48]	@ (8010350 <std+0x68>)
 801031e:	429c      	cmp	r4, r3
 8010320:	d006      	beq.n	8010330 <std+0x48>
 8010322:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010326:	4294      	cmp	r4, r2
 8010328:	d002      	beq.n	8010330 <std+0x48>
 801032a:	33d0      	adds	r3, #208	@ 0xd0
 801032c:	429c      	cmp	r4, r3
 801032e:	d105      	bne.n	801033c <std+0x54>
 8010330:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010338:	f000 b9f2 	b.w	8010720 <__retarget_lock_init_recursive>
 801033c:	bd10      	pop	{r4, pc}
 801033e:	bf00      	nop
 8010340:	08010539 	.word	0x08010539
 8010344:	0801055b 	.word	0x0801055b
 8010348:	08010593 	.word	0x08010593
 801034c:	080105b7 	.word	0x080105b7
 8010350:	20011268 	.word	0x20011268

08010354 <stdio_exit_handler>:
 8010354:	4a02      	ldr	r2, [pc, #8]	@ (8010360 <stdio_exit_handler+0xc>)
 8010356:	4903      	ldr	r1, [pc, #12]	@ (8010364 <stdio_exit_handler+0x10>)
 8010358:	4803      	ldr	r0, [pc, #12]	@ (8010368 <stdio_exit_handler+0x14>)
 801035a:	f000 b869 	b.w	8010430 <_fwalk_sglue>
 801035e:	bf00      	nop
 8010360:	20000124 	.word	0x20000124
 8010364:	08011291 	.word	0x08011291
 8010368:	20000134 	.word	0x20000134

0801036c <cleanup_stdio>:
 801036c:	6841      	ldr	r1, [r0, #4]
 801036e:	4b0c      	ldr	r3, [pc, #48]	@ (80103a0 <cleanup_stdio+0x34>)
 8010370:	4299      	cmp	r1, r3
 8010372:	b510      	push	{r4, lr}
 8010374:	4604      	mov	r4, r0
 8010376:	d001      	beq.n	801037c <cleanup_stdio+0x10>
 8010378:	f000 ff8a 	bl	8011290 <_fflush_r>
 801037c:	68a1      	ldr	r1, [r4, #8]
 801037e:	4b09      	ldr	r3, [pc, #36]	@ (80103a4 <cleanup_stdio+0x38>)
 8010380:	4299      	cmp	r1, r3
 8010382:	d002      	beq.n	801038a <cleanup_stdio+0x1e>
 8010384:	4620      	mov	r0, r4
 8010386:	f000 ff83 	bl	8011290 <_fflush_r>
 801038a:	68e1      	ldr	r1, [r4, #12]
 801038c:	4b06      	ldr	r3, [pc, #24]	@ (80103a8 <cleanup_stdio+0x3c>)
 801038e:	4299      	cmp	r1, r3
 8010390:	d004      	beq.n	801039c <cleanup_stdio+0x30>
 8010392:	4620      	mov	r0, r4
 8010394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010398:	f000 bf7a 	b.w	8011290 <_fflush_r>
 801039c:	bd10      	pop	{r4, pc}
 801039e:	bf00      	nop
 80103a0:	20011268 	.word	0x20011268
 80103a4:	200112d0 	.word	0x200112d0
 80103a8:	20011338 	.word	0x20011338

080103ac <global_stdio_init.part.0>:
 80103ac:	b510      	push	{r4, lr}
 80103ae:	4b0b      	ldr	r3, [pc, #44]	@ (80103dc <global_stdio_init.part.0+0x30>)
 80103b0:	2104      	movs	r1, #4
 80103b2:	4c0b      	ldr	r4, [pc, #44]	@ (80103e0 <global_stdio_init.part.0+0x34>)
 80103b4:	4a0b      	ldr	r2, [pc, #44]	@ (80103e4 <global_stdio_init.part.0+0x38>)
 80103b6:	4620      	mov	r0, r4
 80103b8:	601a      	str	r2, [r3, #0]
 80103ba:	2200      	movs	r2, #0
 80103bc:	f7ff ff94 	bl	80102e8 <std>
 80103c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80103c4:	2201      	movs	r2, #1
 80103c6:	2109      	movs	r1, #9
 80103c8:	f7ff ff8e 	bl	80102e8 <std>
 80103cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80103d0:	2202      	movs	r2, #2
 80103d2:	2112      	movs	r1, #18
 80103d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80103d8:	f7ff bf86 	b.w	80102e8 <std>
 80103dc:	200113a0 	.word	0x200113a0
 80103e0:	20011268 	.word	0x20011268
 80103e4:	08010355 	.word	0x08010355

080103e8 <__sfp_lock_acquire>:
 80103e8:	4801      	ldr	r0, [pc, #4]	@ (80103f0 <__sfp_lock_acquire+0x8>)
 80103ea:	f000 b99a 	b.w	8010722 <__retarget_lock_acquire_recursive>
 80103ee:	bf00      	nop
 80103f0:	200113a9 	.word	0x200113a9

080103f4 <__sfp_lock_release>:
 80103f4:	4801      	ldr	r0, [pc, #4]	@ (80103fc <__sfp_lock_release+0x8>)
 80103f6:	f000 b995 	b.w	8010724 <__retarget_lock_release_recursive>
 80103fa:	bf00      	nop
 80103fc:	200113a9 	.word	0x200113a9

08010400 <__sinit>:
 8010400:	b510      	push	{r4, lr}
 8010402:	4604      	mov	r4, r0
 8010404:	f7ff fff0 	bl	80103e8 <__sfp_lock_acquire>
 8010408:	6a23      	ldr	r3, [r4, #32]
 801040a:	b11b      	cbz	r3, 8010414 <__sinit+0x14>
 801040c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010410:	f7ff bff0 	b.w	80103f4 <__sfp_lock_release>
 8010414:	4b04      	ldr	r3, [pc, #16]	@ (8010428 <__sinit+0x28>)
 8010416:	6223      	str	r3, [r4, #32]
 8010418:	4b04      	ldr	r3, [pc, #16]	@ (801042c <__sinit+0x2c>)
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d1f5      	bne.n	801040c <__sinit+0xc>
 8010420:	f7ff ffc4 	bl	80103ac <global_stdio_init.part.0>
 8010424:	e7f2      	b.n	801040c <__sinit+0xc>
 8010426:	bf00      	nop
 8010428:	0801036d 	.word	0x0801036d
 801042c:	200113a0 	.word	0x200113a0

08010430 <_fwalk_sglue>:
 8010430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010434:	4607      	mov	r7, r0
 8010436:	4688      	mov	r8, r1
 8010438:	4614      	mov	r4, r2
 801043a:	2600      	movs	r6, #0
 801043c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010440:	f1b9 0901 	subs.w	r9, r9, #1
 8010444:	d505      	bpl.n	8010452 <_fwalk_sglue+0x22>
 8010446:	6824      	ldr	r4, [r4, #0]
 8010448:	2c00      	cmp	r4, #0
 801044a:	d1f7      	bne.n	801043c <_fwalk_sglue+0xc>
 801044c:	4630      	mov	r0, r6
 801044e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010452:	89ab      	ldrh	r3, [r5, #12]
 8010454:	2b01      	cmp	r3, #1
 8010456:	d907      	bls.n	8010468 <_fwalk_sglue+0x38>
 8010458:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801045c:	3301      	adds	r3, #1
 801045e:	d003      	beq.n	8010468 <_fwalk_sglue+0x38>
 8010460:	4629      	mov	r1, r5
 8010462:	4638      	mov	r0, r7
 8010464:	47c0      	blx	r8
 8010466:	4306      	orrs	r6, r0
 8010468:	3568      	adds	r5, #104	@ 0x68
 801046a:	e7e9      	b.n	8010440 <_fwalk_sglue+0x10>

0801046c <iprintf>:
 801046c:	b40f      	push	{r0, r1, r2, r3}
 801046e:	b507      	push	{r0, r1, r2, lr}
 8010470:	4906      	ldr	r1, [pc, #24]	@ (801048c <iprintf+0x20>)
 8010472:	ab04      	add	r3, sp, #16
 8010474:	6808      	ldr	r0, [r1, #0]
 8010476:	f853 2b04 	ldr.w	r2, [r3], #4
 801047a:	6881      	ldr	r1, [r0, #8]
 801047c:	9301      	str	r3, [sp, #4]
 801047e:	f000 fbd9 	bl	8010c34 <_vfiprintf_r>
 8010482:	b003      	add	sp, #12
 8010484:	f85d eb04 	ldr.w	lr, [sp], #4
 8010488:	b004      	add	sp, #16
 801048a:	4770      	bx	lr
 801048c:	20000130 	.word	0x20000130

08010490 <sniprintf>:
 8010490:	b40c      	push	{r2, r3}
 8010492:	4b18      	ldr	r3, [pc, #96]	@ (80104f4 <sniprintf+0x64>)
 8010494:	b530      	push	{r4, r5, lr}
 8010496:	1e0c      	subs	r4, r1, #0
 8010498:	b09d      	sub	sp, #116	@ 0x74
 801049a:	681d      	ldr	r5, [r3, #0]
 801049c:	da08      	bge.n	80104b0 <sniprintf+0x20>
 801049e:	238b      	movs	r3, #139	@ 0x8b
 80104a0:	f04f 30ff 	mov.w	r0, #4294967295
 80104a4:	602b      	str	r3, [r5, #0]
 80104a6:	b01d      	add	sp, #116	@ 0x74
 80104a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80104ac:	b002      	add	sp, #8
 80104ae:	4770      	bx	lr
 80104b0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80104b4:	9002      	str	r0, [sp, #8]
 80104b6:	9006      	str	r0, [sp, #24]
 80104b8:	a902      	add	r1, sp, #8
 80104ba:	f8ad 3014 	strh.w	r3, [sp, #20]
 80104be:	bf14      	ite	ne
 80104c0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80104c4:	4623      	moveq	r3, r4
 80104c6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80104c8:	4628      	mov	r0, r5
 80104ca:	9304      	str	r3, [sp, #16]
 80104cc:	9307      	str	r3, [sp, #28]
 80104ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80104d2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80104d6:	ab21      	add	r3, sp, #132	@ 0x84
 80104d8:	9301      	str	r3, [sp, #4]
 80104da:	f000 fa85 	bl	80109e8 <_svfiprintf_r>
 80104de:	1c43      	adds	r3, r0, #1
 80104e0:	bfbc      	itt	lt
 80104e2:	238b      	movlt	r3, #139	@ 0x8b
 80104e4:	602b      	strlt	r3, [r5, #0]
 80104e6:	2c00      	cmp	r4, #0
 80104e8:	d0dd      	beq.n	80104a6 <sniprintf+0x16>
 80104ea:	9b02      	ldr	r3, [sp, #8]
 80104ec:	2200      	movs	r2, #0
 80104ee:	701a      	strb	r2, [r3, #0]
 80104f0:	e7d9      	b.n	80104a6 <sniprintf+0x16>
 80104f2:	bf00      	nop
 80104f4:	20000130 	.word	0x20000130

080104f8 <siprintf>:
 80104f8:	b40e      	push	{r1, r2, r3}
 80104fa:	b500      	push	{lr}
 80104fc:	b09c      	sub	sp, #112	@ 0x70
 80104fe:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010502:	ab1d      	add	r3, sp, #116	@ 0x74
 8010504:	9002      	str	r0, [sp, #8]
 8010506:	9006      	str	r0, [sp, #24]
 8010508:	9107      	str	r1, [sp, #28]
 801050a:	9104      	str	r1, [sp, #16]
 801050c:	4808      	ldr	r0, [pc, #32]	@ (8010530 <siprintf+0x38>)
 801050e:	4909      	ldr	r1, [pc, #36]	@ (8010534 <siprintf+0x3c>)
 8010510:	f853 2b04 	ldr.w	r2, [r3], #4
 8010514:	9105      	str	r1, [sp, #20]
 8010516:	a902      	add	r1, sp, #8
 8010518:	6800      	ldr	r0, [r0, #0]
 801051a:	9301      	str	r3, [sp, #4]
 801051c:	f000 fa64 	bl	80109e8 <_svfiprintf_r>
 8010520:	9b02      	ldr	r3, [sp, #8]
 8010522:	2200      	movs	r2, #0
 8010524:	701a      	strb	r2, [r3, #0]
 8010526:	b01c      	add	sp, #112	@ 0x70
 8010528:	f85d eb04 	ldr.w	lr, [sp], #4
 801052c:	b003      	add	sp, #12
 801052e:	4770      	bx	lr
 8010530:	20000130 	.word	0x20000130
 8010534:	ffff0208 	.word	0xffff0208

08010538 <__sread>:
 8010538:	b510      	push	{r4, lr}
 801053a:	460c      	mov	r4, r1
 801053c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010540:	f000 f8a0 	bl	8010684 <_read_r>
 8010544:	2800      	cmp	r0, #0
 8010546:	bfab      	itete	ge
 8010548:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801054a:	89a3      	ldrhlt	r3, [r4, #12]
 801054c:	181b      	addge	r3, r3, r0
 801054e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010552:	bfac      	ite	ge
 8010554:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010556:	81a3      	strhlt	r3, [r4, #12]
 8010558:	bd10      	pop	{r4, pc}

0801055a <__swrite>:
 801055a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801055e:	461f      	mov	r7, r3
 8010560:	898b      	ldrh	r3, [r1, #12]
 8010562:	4605      	mov	r5, r0
 8010564:	460c      	mov	r4, r1
 8010566:	05db      	lsls	r3, r3, #23
 8010568:	4616      	mov	r6, r2
 801056a:	d505      	bpl.n	8010578 <__swrite+0x1e>
 801056c:	2302      	movs	r3, #2
 801056e:	2200      	movs	r2, #0
 8010570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010574:	f000 f874 	bl	8010660 <_lseek_r>
 8010578:	89a3      	ldrh	r3, [r4, #12]
 801057a:	4632      	mov	r2, r6
 801057c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010580:	4628      	mov	r0, r5
 8010582:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010586:	81a3      	strh	r3, [r4, #12]
 8010588:	463b      	mov	r3, r7
 801058a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801058e:	f000 b88b 	b.w	80106a8 <_write_r>

08010592 <__sseek>:
 8010592:	b510      	push	{r4, lr}
 8010594:	460c      	mov	r4, r1
 8010596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801059a:	f000 f861 	bl	8010660 <_lseek_r>
 801059e:	1c43      	adds	r3, r0, #1
 80105a0:	89a3      	ldrh	r3, [r4, #12]
 80105a2:	bf15      	itete	ne
 80105a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80105a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80105aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80105ae:	81a3      	strheq	r3, [r4, #12]
 80105b0:	bf18      	it	ne
 80105b2:	81a3      	strhne	r3, [r4, #12]
 80105b4:	bd10      	pop	{r4, pc}

080105b6 <__sclose>:
 80105b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105ba:	f000 b841 	b.w	8010640 <_close_r>

080105be <_vsniprintf_r>:
 80105be:	b530      	push	{r4, r5, lr}
 80105c0:	4614      	mov	r4, r2
 80105c2:	b09b      	sub	sp, #108	@ 0x6c
 80105c4:	4605      	mov	r5, r0
 80105c6:	461a      	mov	r2, r3
 80105c8:	2c00      	cmp	r4, #0
 80105ca:	da05      	bge.n	80105d8 <_vsniprintf_r+0x1a>
 80105cc:	238b      	movs	r3, #139	@ 0x8b
 80105ce:	6003      	str	r3, [r0, #0]
 80105d0:	f04f 30ff 	mov.w	r0, #4294967295
 80105d4:	b01b      	add	sp, #108	@ 0x6c
 80105d6:	bd30      	pop	{r4, r5, pc}
 80105d8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80105dc:	9100      	str	r1, [sp, #0]
 80105de:	9104      	str	r1, [sp, #16]
 80105e0:	4669      	mov	r1, sp
 80105e2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80105e6:	bf14      	ite	ne
 80105e8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80105ec:	4623      	moveq	r3, r4
 80105ee:	9302      	str	r3, [sp, #8]
 80105f0:	9305      	str	r3, [sp, #20]
 80105f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80105f6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80105fa:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80105fc:	f000 f9f4 	bl	80109e8 <_svfiprintf_r>
 8010600:	1c43      	adds	r3, r0, #1
 8010602:	bfbc      	itt	lt
 8010604:	238b      	movlt	r3, #139	@ 0x8b
 8010606:	602b      	strlt	r3, [r5, #0]
 8010608:	2c00      	cmp	r4, #0
 801060a:	d0e3      	beq.n	80105d4 <_vsniprintf_r+0x16>
 801060c:	9b00      	ldr	r3, [sp, #0]
 801060e:	2200      	movs	r2, #0
 8010610:	701a      	strb	r2, [r3, #0]
 8010612:	e7df      	b.n	80105d4 <_vsniprintf_r+0x16>

08010614 <vsniprintf>:
 8010614:	b507      	push	{r0, r1, r2, lr}
 8010616:	9300      	str	r3, [sp, #0]
 8010618:	4613      	mov	r3, r2
 801061a:	460a      	mov	r2, r1
 801061c:	4601      	mov	r1, r0
 801061e:	4803      	ldr	r0, [pc, #12]	@ (801062c <vsniprintf+0x18>)
 8010620:	6800      	ldr	r0, [r0, #0]
 8010622:	f7ff ffcc 	bl	80105be <_vsniprintf_r>
 8010626:	b003      	add	sp, #12
 8010628:	f85d fb04 	ldr.w	pc, [sp], #4
 801062c:	20000130 	.word	0x20000130

08010630 <memset>:
 8010630:	4402      	add	r2, r0
 8010632:	4603      	mov	r3, r0
 8010634:	4293      	cmp	r3, r2
 8010636:	d100      	bne.n	801063a <memset+0xa>
 8010638:	4770      	bx	lr
 801063a:	f803 1b01 	strb.w	r1, [r3], #1
 801063e:	e7f9      	b.n	8010634 <memset+0x4>

08010640 <_close_r>:
 8010640:	b538      	push	{r3, r4, r5, lr}
 8010642:	2300      	movs	r3, #0
 8010644:	4d05      	ldr	r5, [pc, #20]	@ (801065c <_close_r+0x1c>)
 8010646:	4604      	mov	r4, r0
 8010648:	4608      	mov	r0, r1
 801064a:	602b      	str	r3, [r5, #0]
 801064c:	f7f1 f9cd 	bl	80019ea <_close>
 8010650:	1c43      	adds	r3, r0, #1
 8010652:	d102      	bne.n	801065a <_close_r+0x1a>
 8010654:	682b      	ldr	r3, [r5, #0]
 8010656:	b103      	cbz	r3, 801065a <_close_r+0x1a>
 8010658:	6023      	str	r3, [r4, #0]
 801065a:	bd38      	pop	{r3, r4, r5, pc}
 801065c:	200113a4 	.word	0x200113a4

08010660 <_lseek_r>:
 8010660:	b538      	push	{r3, r4, r5, lr}
 8010662:	4604      	mov	r4, r0
 8010664:	4d06      	ldr	r5, [pc, #24]	@ (8010680 <_lseek_r+0x20>)
 8010666:	4608      	mov	r0, r1
 8010668:	4611      	mov	r1, r2
 801066a:	2200      	movs	r2, #0
 801066c:	602a      	str	r2, [r5, #0]
 801066e:	461a      	mov	r2, r3
 8010670:	f7f1 f9e2 	bl	8001a38 <_lseek>
 8010674:	1c43      	adds	r3, r0, #1
 8010676:	d102      	bne.n	801067e <_lseek_r+0x1e>
 8010678:	682b      	ldr	r3, [r5, #0]
 801067a:	b103      	cbz	r3, 801067e <_lseek_r+0x1e>
 801067c:	6023      	str	r3, [r4, #0]
 801067e:	bd38      	pop	{r3, r4, r5, pc}
 8010680:	200113a4 	.word	0x200113a4

08010684 <_read_r>:
 8010684:	b538      	push	{r3, r4, r5, lr}
 8010686:	4604      	mov	r4, r0
 8010688:	4d06      	ldr	r5, [pc, #24]	@ (80106a4 <_read_r+0x20>)
 801068a:	4608      	mov	r0, r1
 801068c:	4611      	mov	r1, r2
 801068e:	2200      	movs	r2, #0
 8010690:	602a      	str	r2, [r5, #0]
 8010692:	461a      	mov	r2, r3
 8010694:	f7f1 f970 	bl	8001978 <_read>
 8010698:	1c43      	adds	r3, r0, #1
 801069a:	d102      	bne.n	80106a2 <_read_r+0x1e>
 801069c:	682b      	ldr	r3, [r5, #0]
 801069e:	b103      	cbz	r3, 80106a2 <_read_r+0x1e>
 80106a0:	6023      	str	r3, [r4, #0]
 80106a2:	bd38      	pop	{r3, r4, r5, pc}
 80106a4:	200113a4 	.word	0x200113a4

080106a8 <_write_r>:
 80106a8:	b538      	push	{r3, r4, r5, lr}
 80106aa:	4604      	mov	r4, r0
 80106ac:	4d06      	ldr	r5, [pc, #24]	@ (80106c8 <_write_r+0x20>)
 80106ae:	4608      	mov	r0, r1
 80106b0:	4611      	mov	r1, r2
 80106b2:	2200      	movs	r2, #0
 80106b4:	602a      	str	r2, [r5, #0]
 80106b6:	461a      	mov	r2, r3
 80106b8:	f7f1 f97b 	bl	80019b2 <_write>
 80106bc:	1c43      	adds	r3, r0, #1
 80106be:	d102      	bne.n	80106c6 <_write_r+0x1e>
 80106c0:	682b      	ldr	r3, [r5, #0]
 80106c2:	b103      	cbz	r3, 80106c6 <_write_r+0x1e>
 80106c4:	6023      	str	r3, [r4, #0]
 80106c6:	bd38      	pop	{r3, r4, r5, pc}
 80106c8:	200113a4 	.word	0x200113a4

080106cc <__errno>:
 80106cc:	4b01      	ldr	r3, [pc, #4]	@ (80106d4 <__errno+0x8>)
 80106ce:	6818      	ldr	r0, [r3, #0]
 80106d0:	4770      	bx	lr
 80106d2:	bf00      	nop
 80106d4:	20000130 	.word	0x20000130

080106d8 <__libc_init_array>:
 80106d8:	b570      	push	{r4, r5, r6, lr}
 80106da:	4d0d      	ldr	r5, [pc, #52]	@ (8010710 <__libc_init_array+0x38>)
 80106dc:	2600      	movs	r6, #0
 80106de:	4c0d      	ldr	r4, [pc, #52]	@ (8010714 <__libc_init_array+0x3c>)
 80106e0:	1b64      	subs	r4, r4, r5
 80106e2:	10a4      	asrs	r4, r4, #2
 80106e4:	42a6      	cmp	r6, r4
 80106e6:	d109      	bne.n	80106fc <__libc_init_array+0x24>
 80106e8:	4d0b      	ldr	r5, [pc, #44]	@ (8010718 <__libc_init_array+0x40>)
 80106ea:	2600      	movs	r6, #0
 80106ec:	4c0b      	ldr	r4, [pc, #44]	@ (801071c <__libc_init_array+0x44>)
 80106ee:	f000 ff7d 	bl	80115ec <_init>
 80106f2:	1b64      	subs	r4, r4, r5
 80106f4:	10a4      	asrs	r4, r4, #2
 80106f6:	42a6      	cmp	r6, r4
 80106f8:	d105      	bne.n	8010706 <__libc_init_array+0x2e>
 80106fa:	bd70      	pop	{r4, r5, r6, pc}
 80106fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8010700:	3601      	adds	r6, #1
 8010702:	4798      	blx	r3
 8010704:	e7ee      	b.n	80106e4 <__libc_init_array+0xc>
 8010706:	f855 3b04 	ldr.w	r3, [r5], #4
 801070a:	3601      	adds	r6, #1
 801070c:	4798      	blx	r3
 801070e:	e7f2      	b.n	80106f6 <__libc_init_array+0x1e>
 8010710:	08011864 	.word	0x08011864
 8010714:	08011864 	.word	0x08011864
 8010718:	08011864 	.word	0x08011864
 801071c:	08011868 	.word	0x08011868

08010720 <__retarget_lock_init_recursive>:
 8010720:	4770      	bx	lr

08010722 <__retarget_lock_acquire_recursive>:
 8010722:	4770      	bx	lr

08010724 <__retarget_lock_release_recursive>:
 8010724:	4770      	bx	lr

08010726 <memcpy>:
 8010726:	440a      	add	r2, r1
 8010728:	1e43      	subs	r3, r0, #1
 801072a:	4291      	cmp	r1, r2
 801072c:	d100      	bne.n	8010730 <memcpy+0xa>
 801072e:	4770      	bx	lr
 8010730:	b510      	push	{r4, lr}
 8010732:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010736:	4291      	cmp	r1, r2
 8010738:	f803 4f01 	strb.w	r4, [r3, #1]!
 801073c:	d1f9      	bne.n	8010732 <memcpy+0xc>
 801073e:	bd10      	pop	{r4, pc}

08010740 <_free_r>:
 8010740:	b538      	push	{r3, r4, r5, lr}
 8010742:	4605      	mov	r5, r0
 8010744:	2900      	cmp	r1, #0
 8010746:	d041      	beq.n	80107cc <_free_r+0x8c>
 8010748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801074c:	1f0c      	subs	r4, r1, #4
 801074e:	2b00      	cmp	r3, #0
 8010750:	bfb8      	it	lt
 8010752:	18e4      	addlt	r4, r4, r3
 8010754:	f000 f8e0 	bl	8010918 <__malloc_lock>
 8010758:	4a1d      	ldr	r2, [pc, #116]	@ (80107d0 <_free_r+0x90>)
 801075a:	6813      	ldr	r3, [r2, #0]
 801075c:	b933      	cbnz	r3, 801076c <_free_r+0x2c>
 801075e:	6063      	str	r3, [r4, #4]
 8010760:	6014      	str	r4, [r2, #0]
 8010762:	4628      	mov	r0, r5
 8010764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010768:	f000 b8dc 	b.w	8010924 <__malloc_unlock>
 801076c:	42a3      	cmp	r3, r4
 801076e:	d908      	bls.n	8010782 <_free_r+0x42>
 8010770:	6820      	ldr	r0, [r4, #0]
 8010772:	1821      	adds	r1, r4, r0
 8010774:	428b      	cmp	r3, r1
 8010776:	bf01      	itttt	eq
 8010778:	6819      	ldreq	r1, [r3, #0]
 801077a:	685b      	ldreq	r3, [r3, #4]
 801077c:	1809      	addeq	r1, r1, r0
 801077e:	6021      	streq	r1, [r4, #0]
 8010780:	e7ed      	b.n	801075e <_free_r+0x1e>
 8010782:	461a      	mov	r2, r3
 8010784:	685b      	ldr	r3, [r3, #4]
 8010786:	b10b      	cbz	r3, 801078c <_free_r+0x4c>
 8010788:	42a3      	cmp	r3, r4
 801078a:	d9fa      	bls.n	8010782 <_free_r+0x42>
 801078c:	6811      	ldr	r1, [r2, #0]
 801078e:	1850      	adds	r0, r2, r1
 8010790:	42a0      	cmp	r0, r4
 8010792:	d10b      	bne.n	80107ac <_free_r+0x6c>
 8010794:	6820      	ldr	r0, [r4, #0]
 8010796:	4401      	add	r1, r0
 8010798:	1850      	adds	r0, r2, r1
 801079a:	6011      	str	r1, [r2, #0]
 801079c:	4283      	cmp	r3, r0
 801079e:	d1e0      	bne.n	8010762 <_free_r+0x22>
 80107a0:	6818      	ldr	r0, [r3, #0]
 80107a2:	685b      	ldr	r3, [r3, #4]
 80107a4:	4408      	add	r0, r1
 80107a6:	6053      	str	r3, [r2, #4]
 80107a8:	6010      	str	r0, [r2, #0]
 80107aa:	e7da      	b.n	8010762 <_free_r+0x22>
 80107ac:	d902      	bls.n	80107b4 <_free_r+0x74>
 80107ae:	230c      	movs	r3, #12
 80107b0:	602b      	str	r3, [r5, #0]
 80107b2:	e7d6      	b.n	8010762 <_free_r+0x22>
 80107b4:	6820      	ldr	r0, [r4, #0]
 80107b6:	1821      	adds	r1, r4, r0
 80107b8:	428b      	cmp	r3, r1
 80107ba:	bf02      	ittt	eq
 80107bc:	6819      	ldreq	r1, [r3, #0]
 80107be:	685b      	ldreq	r3, [r3, #4]
 80107c0:	1809      	addeq	r1, r1, r0
 80107c2:	6063      	str	r3, [r4, #4]
 80107c4:	bf08      	it	eq
 80107c6:	6021      	streq	r1, [r4, #0]
 80107c8:	6054      	str	r4, [r2, #4]
 80107ca:	e7ca      	b.n	8010762 <_free_r+0x22>
 80107cc:	bd38      	pop	{r3, r4, r5, pc}
 80107ce:	bf00      	nop
 80107d0:	200113b0 	.word	0x200113b0

080107d4 <sbrk_aligned>:
 80107d4:	b570      	push	{r4, r5, r6, lr}
 80107d6:	4e0f      	ldr	r6, [pc, #60]	@ (8010814 <sbrk_aligned+0x40>)
 80107d8:	460c      	mov	r4, r1
 80107da:	4605      	mov	r5, r0
 80107dc:	6831      	ldr	r1, [r6, #0]
 80107de:	b911      	cbnz	r1, 80107e6 <sbrk_aligned+0x12>
 80107e0:	f000 fe2c 	bl	801143c <_sbrk_r>
 80107e4:	6030      	str	r0, [r6, #0]
 80107e6:	4621      	mov	r1, r4
 80107e8:	4628      	mov	r0, r5
 80107ea:	f000 fe27 	bl	801143c <_sbrk_r>
 80107ee:	1c43      	adds	r3, r0, #1
 80107f0:	d103      	bne.n	80107fa <sbrk_aligned+0x26>
 80107f2:	f04f 34ff 	mov.w	r4, #4294967295
 80107f6:	4620      	mov	r0, r4
 80107f8:	bd70      	pop	{r4, r5, r6, pc}
 80107fa:	1cc4      	adds	r4, r0, #3
 80107fc:	f024 0403 	bic.w	r4, r4, #3
 8010800:	42a0      	cmp	r0, r4
 8010802:	d0f8      	beq.n	80107f6 <sbrk_aligned+0x22>
 8010804:	1a21      	subs	r1, r4, r0
 8010806:	4628      	mov	r0, r5
 8010808:	f000 fe18 	bl	801143c <_sbrk_r>
 801080c:	3001      	adds	r0, #1
 801080e:	d1f2      	bne.n	80107f6 <sbrk_aligned+0x22>
 8010810:	e7ef      	b.n	80107f2 <sbrk_aligned+0x1e>
 8010812:	bf00      	nop
 8010814:	200113ac 	.word	0x200113ac

08010818 <_malloc_r>:
 8010818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801081c:	1ccd      	adds	r5, r1, #3
 801081e:	4606      	mov	r6, r0
 8010820:	f025 0503 	bic.w	r5, r5, #3
 8010824:	3508      	adds	r5, #8
 8010826:	2d0c      	cmp	r5, #12
 8010828:	bf38      	it	cc
 801082a:	250c      	movcc	r5, #12
 801082c:	2d00      	cmp	r5, #0
 801082e:	db01      	blt.n	8010834 <_malloc_r+0x1c>
 8010830:	42a9      	cmp	r1, r5
 8010832:	d904      	bls.n	801083e <_malloc_r+0x26>
 8010834:	230c      	movs	r3, #12
 8010836:	6033      	str	r3, [r6, #0]
 8010838:	2000      	movs	r0, #0
 801083a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801083e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010914 <_malloc_r+0xfc>
 8010842:	f000 f869 	bl	8010918 <__malloc_lock>
 8010846:	f8d8 3000 	ldr.w	r3, [r8]
 801084a:	461c      	mov	r4, r3
 801084c:	bb44      	cbnz	r4, 80108a0 <_malloc_r+0x88>
 801084e:	4629      	mov	r1, r5
 8010850:	4630      	mov	r0, r6
 8010852:	f7ff ffbf 	bl	80107d4 <sbrk_aligned>
 8010856:	1c43      	adds	r3, r0, #1
 8010858:	4604      	mov	r4, r0
 801085a:	d158      	bne.n	801090e <_malloc_r+0xf6>
 801085c:	f8d8 4000 	ldr.w	r4, [r8]
 8010860:	4627      	mov	r7, r4
 8010862:	2f00      	cmp	r7, #0
 8010864:	d143      	bne.n	80108ee <_malloc_r+0xd6>
 8010866:	2c00      	cmp	r4, #0
 8010868:	d04b      	beq.n	8010902 <_malloc_r+0xea>
 801086a:	6823      	ldr	r3, [r4, #0]
 801086c:	4639      	mov	r1, r7
 801086e:	4630      	mov	r0, r6
 8010870:	eb04 0903 	add.w	r9, r4, r3
 8010874:	f000 fde2 	bl	801143c <_sbrk_r>
 8010878:	4581      	cmp	r9, r0
 801087a:	d142      	bne.n	8010902 <_malloc_r+0xea>
 801087c:	6821      	ldr	r1, [r4, #0]
 801087e:	4630      	mov	r0, r6
 8010880:	1a6d      	subs	r5, r5, r1
 8010882:	4629      	mov	r1, r5
 8010884:	f7ff ffa6 	bl	80107d4 <sbrk_aligned>
 8010888:	3001      	adds	r0, #1
 801088a:	d03a      	beq.n	8010902 <_malloc_r+0xea>
 801088c:	6823      	ldr	r3, [r4, #0]
 801088e:	442b      	add	r3, r5
 8010890:	6023      	str	r3, [r4, #0]
 8010892:	f8d8 3000 	ldr.w	r3, [r8]
 8010896:	685a      	ldr	r2, [r3, #4]
 8010898:	bb62      	cbnz	r2, 80108f4 <_malloc_r+0xdc>
 801089a:	f8c8 7000 	str.w	r7, [r8]
 801089e:	e00f      	b.n	80108c0 <_malloc_r+0xa8>
 80108a0:	6822      	ldr	r2, [r4, #0]
 80108a2:	1b52      	subs	r2, r2, r5
 80108a4:	d420      	bmi.n	80108e8 <_malloc_r+0xd0>
 80108a6:	2a0b      	cmp	r2, #11
 80108a8:	d917      	bls.n	80108da <_malloc_r+0xc2>
 80108aa:	1961      	adds	r1, r4, r5
 80108ac:	42a3      	cmp	r3, r4
 80108ae:	6025      	str	r5, [r4, #0]
 80108b0:	bf18      	it	ne
 80108b2:	6059      	strne	r1, [r3, #4]
 80108b4:	6863      	ldr	r3, [r4, #4]
 80108b6:	bf08      	it	eq
 80108b8:	f8c8 1000 	streq.w	r1, [r8]
 80108bc:	5162      	str	r2, [r4, r5]
 80108be:	604b      	str	r3, [r1, #4]
 80108c0:	4630      	mov	r0, r6
 80108c2:	f000 f82f 	bl	8010924 <__malloc_unlock>
 80108c6:	f104 000b 	add.w	r0, r4, #11
 80108ca:	1d23      	adds	r3, r4, #4
 80108cc:	f020 0007 	bic.w	r0, r0, #7
 80108d0:	1ac2      	subs	r2, r0, r3
 80108d2:	bf1c      	itt	ne
 80108d4:	1a1b      	subne	r3, r3, r0
 80108d6:	50a3      	strne	r3, [r4, r2]
 80108d8:	e7af      	b.n	801083a <_malloc_r+0x22>
 80108da:	6862      	ldr	r2, [r4, #4]
 80108dc:	42a3      	cmp	r3, r4
 80108de:	bf0c      	ite	eq
 80108e0:	f8c8 2000 	streq.w	r2, [r8]
 80108e4:	605a      	strne	r2, [r3, #4]
 80108e6:	e7eb      	b.n	80108c0 <_malloc_r+0xa8>
 80108e8:	4623      	mov	r3, r4
 80108ea:	6864      	ldr	r4, [r4, #4]
 80108ec:	e7ae      	b.n	801084c <_malloc_r+0x34>
 80108ee:	463c      	mov	r4, r7
 80108f0:	687f      	ldr	r7, [r7, #4]
 80108f2:	e7b6      	b.n	8010862 <_malloc_r+0x4a>
 80108f4:	461a      	mov	r2, r3
 80108f6:	685b      	ldr	r3, [r3, #4]
 80108f8:	42a3      	cmp	r3, r4
 80108fa:	d1fb      	bne.n	80108f4 <_malloc_r+0xdc>
 80108fc:	2300      	movs	r3, #0
 80108fe:	6053      	str	r3, [r2, #4]
 8010900:	e7de      	b.n	80108c0 <_malloc_r+0xa8>
 8010902:	230c      	movs	r3, #12
 8010904:	4630      	mov	r0, r6
 8010906:	6033      	str	r3, [r6, #0]
 8010908:	f000 f80c 	bl	8010924 <__malloc_unlock>
 801090c:	e794      	b.n	8010838 <_malloc_r+0x20>
 801090e:	6005      	str	r5, [r0, #0]
 8010910:	e7d6      	b.n	80108c0 <_malloc_r+0xa8>
 8010912:	bf00      	nop
 8010914:	200113b0 	.word	0x200113b0

08010918 <__malloc_lock>:
 8010918:	4801      	ldr	r0, [pc, #4]	@ (8010920 <__malloc_lock+0x8>)
 801091a:	f7ff bf02 	b.w	8010722 <__retarget_lock_acquire_recursive>
 801091e:	bf00      	nop
 8010920:	200113a8 	.word	0x200113a8

08010924 <__malloc_unlock>:
 8010924:	4801      	ldr	r0, [pc, #4]	@ (801092c <__malloc_unlock+0x8>)
 8010926:	f7ff befd 	b.w	8010724 <__retarget_lock_release_recursive>
 801092a:	bf00      	nop
 801092c:	200113a8 	.word	0x200113a8

08010930 <__ssputs_r>:
 8010930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010934:	461f      	mov	r7, r3
 8010936:	688e      	ldr	r6, [r1, #8]
 8010938:	4682      	mov	sl, r0
 801093a:	460c      	mov	r4, r1
 801093c:	42be      	cmp	r6, r7
 801093e:	4690      	mov	r8, r2
 8010940:	680b      	ldr	r3, [r1, #0]
 8010942:	d82d      	bhi.n	80109a0 <__ssputs_r+0x70>
 8010944:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010948:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801094c:	d026      	beq.n	801099c <__ssputs_r+0x6c>
 801094e:	6965      	ldr	r5, [r4, #20]
 8010950:	6909      	ldr	r1, [r1, #16]
 8010952:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010956:	eba3 0901 	sub.w	r9, r3, r1
 801095a:	1c7b      	adds	r3, r7, #1
 801095c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010960:	444b      	add	r3, r9
 8010962:	106d      	asrs	r5, r5, #1
 8010964:	429d      	cmp	r5, r3
 8010966:	bf38      	it	cc
 8010968:	461d      	movcc	r5, r3
 801096a:	0553      	lsls	r3, r2, #21
 801096c:	d527      	bpl.n	80109be <__ssputs_r+0x8e>
 801096e:	4629      	mov	r1, r5
 8010970:	f7ff ff52 	bl	8010818 <_malloc_r>
 8010974:	4606      	mov	r6, r0
 8010976:	b360      	cbz	r0, 80109d2 <__ssputs_r+0xa2>
 8010978:	464a      	mov	r2, r9
 801097a:	6921      	ldr	r1, [r4, #16]
 801097c:	f7ff fed3 	bl	8010726 <memcpy>
 8010980:	89a3      	ldrh	r3, [r4, #12]
 8010982:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010986:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801098a:	81a3      	strh	r3, [r4, #12]
 801098c:	6126      	str	r6, [r4, #16]
 801098e:	444e      	add	r6, r9
 8010990:	6165      	str	r5, [r4, #20]
 8010992:	eba5 0509 	sub.w	r5, r5, r9
 8010996:	6026      	str	r6, [r4, #0]
 8010998:	463e      	mov	r6, r7
 801099a:	60a5      	str	r5, [r4, #8]
 801099c:	42be      	cmp	r6, r7
 801099e:	d900      	bls.n	80109a2 <__ssputs_r+0x72>
 80109a0:	463e      	mov	r6, r7
 80109a2:	4632      	mov	r2, r6
 80109a4:	4641      	mov	r1, r8
 80109a6:	6820      	ldr	r0, [r4, #0]
 80109a8:	f000 fd2e 	bl	8011408 <memmove>
 80109ac:	68a3      	ldr	r3, [r4, #8]
 80109ae:	2000      	movs	r0, #0
 80109b0:	1b9b      	subs	r3, r3, r6
 80109b2:	60a3      	str	r3, [r4, #8]
 80109b4:	6823      	ldr	r3, [r4, #0]
 80109b6:	4433      	add	r3, r6
 80109b8:	6023      	str	r3, [r4, #0]
 80109ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109be:	462a      	mov	r2, r5
 80109c0:	f000 fd5a 	bl	8011478 <_realloc_r>
 80109c4:	4606      	mov	r6, r0
 80109c6:	2800      	cmp	r0, #0
 80109c8:	d1e0      	bne.n	801098c <__ssputs_r+0x5c>
 80109ca:	6921      	ldr	r1, [r4, #16]
 80109cc:	4650      	mov	r0, sl
 80109ce:	f7ff feb7 	bl	8010740 <_free_r>
 80109d2:	230c      	movs	r3, #12
 80109d4:	f04f 30ff 	mov.w	r0, #4294967295
 80109d8:	f8ca 3000 	str.w	r3, [sl]
 80109dc:	89a3      	ldrh	r3, [r4, #12]
 80109de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80109e2:	81a3      	strh	r3, [r4, #12]
 80109e4:	e7e9      	b.n	80109ba <__ssputs_r+0x8a>
	...

080109e8 <_svfiprintf_r>:
 80109e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109ec:	4698      	mov	r8, r3
 80109ee:	898b      	ldrh	r3, [r1, #12]
 80109f0:	b09d      	sub	sp, #116	@ 0x74
 80109f2:	4607      	mov	r7, r0
 80109f4:	061b      	lsls	r3, r3, #24
 80109f6:	460d      	mov	r5, r1
 80109f8:	4614      	mov	r4, r2
 80109fa:	d510      	bpl.n	8010a1e <_svfiprintf_r+0x36>
 80109fc:	690b      	ldr	r3, [r1, #16]
 80109fe:	b973      	cbnz	r3, 8010a1e <_svfiprintf_r+0x36>
 8010a00:	2140      	movs	r1, #64	@ 0x40
 8010a02:	f7ff ff09 	bl	8010818 <_malloc_r>
 8010a06:	6028      	str	r0, [r5, #0]
 8010a08:	6128      	str	r0, [r5, #16]
 8010a0a:	b930      	cbnz	r0, 8010a1a <_svfiprintf_r+0x32>
 8010a0c:	230c      	movs	r3, #12
 8010a0e:	603b      	str	r3, [r7, #0]
 8010a10:	f04f 30ff 	mov.w	r0, #4294967295
 8010a14:	b01d      	add	sp, #116	@ 0x74
 8010a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a1a:	2340      	movs	r3, #64	@ 0x40
 8010a1c:	616b      	str	r3, [r5, #20]
 8010a1e:	2300      	movs	r3, #0
 8010a20:	f8cd 800c 	str.w	r8, [sp, #12]
 8010a24:	f04f 0901 	mov.w	r9, #1
 8010a28:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8010bcc <_svfiprintf_r+0x1e4>
 8010a2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8010a2e:	2320      	movs	r3, #32
 8010a30:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010a34:	2330      	movs	r3, #48	@ 0x30
 8010a36:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010a3a:	4623      	mov	r3, r4
 8010a3c:	469a      	mov	sl, r3
 8010a3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010a42:	b10a      	cbz	r2, 8010a48 <_svfiprintf_r+0x60>
 8010a44:	2a25      	cmp	r2, #37	@ 0x25
 8010a46:	d1f9      	bne.n	8010a3c <_svfiprintf_r+0x54>
 8010a48:	ebba 0b04 	subs.w	fp, sl, r4
 8010a4c:	d00b      	beq.n	8010a66 <_svfiprintf_r+0x7e>
 8010a4e:	465b      	mov	r3, fp
 8010a50:	4622      	mov	r2, r4
 8010a52:	4629      	mov	r1, r5
 8010a54:	4638      	mov	r0, r7
 8010a56:	f7ff ff6b 	bl	8010930 <__ssputs_r>
 8010a5a:	3001      	adds	r0, #1
 8010a5c:	f000 80a7 	beq.w	8010bae <_svfiprintf_r+0x1c6>
 8010a60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010a62:	445a      	add	r2, fp
 8010a64:	9209      	str	r2, [sp, #36]	@ 0x24
 8010a66:	f89a 3000 	ldrb.w	r3, [sl]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	f000 809f 	beq.w	8010bae <_svfiprintf_r+0x1c6>
 8010a70:	2300      	movs	r3, #0
 8010a72:	f04f 32ff 	mov.w	r2, #4294967295
 8010a76:	f10a 0a01 	add.w	sl, sl, #1
 8010a7a:	9304      	str	r3, [sp, #16]
 8010a7c:	9307      	str	r3, [sp, #28]
 8010a7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010a82:	931a      	str	r3, [sp, #104]	@ 0x68
 8010a84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010a88:	4654      	mov	r4, sl
 8010a8a:	2205      	movs	r2, #5
 8010a8c:	484f      	ldr	r0, [pc, #316]	@ (8010bcc <_svfiprintf_r+0x1e4>)
 8010a8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a92:	f000 fce3 	bl	801145c <memchr>
 8010a96:	9a04      	ldr	r2, [sp, #16]
 8010a98:	b9d8      	cbnz	r0, 8010ad2 <_svfiprintf_r+0xea>
 8010a9a:	06d0      	lsls	r0, r2, #27
 8010a9c:	bf44      	itt	mi
 8010a9e:	2320      	movmi	r3, #32
 8010aa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010aa4:	0711      	lsls	r1, r2, #28
 8010aa6:	bf44      	itt	mi
 8010aa8:	232b      	movmi	r3, #43	@ 0x2b
 8010aaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010aae:	f89a 3000 	ldrb.w	r3, [sl]
 8010ab2:	2b2a      	cmp	r3, #42	@ 0x2a
 8010ab4:	d015      	beq.n	8010ae2 <_svfiprintf_r+0xfa>
 8010ab6:	9a07      	ldr	r2, [sp, #28]
 8010ab8:	4654      	mov	r4, sl
 8010aba:	2000      	movs	r0, #0
 8010abc:	f04f 0c0a 	mov.w	ip, #10
 8010ac0:	4621      	mov	r1, r4
 8010ac2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010ac6:	3b30      	subs	r3, #48	@ 0x30
 8010ac8:	2b09      	cmp	r3, #9
 8010aca:	d94b      	bls.n	8010b64 <_svfiprintf_r+0x17c>
 8010acc:	b1b0      	cbz	r0, 8010afc <_svfiprintf_r+0x114>
 8010ace:	9207      	str	r2, [sp, #28]
 8010ad0:	e014      	b.n	8010afc <_svfiprintf_r+0x114>
 8010ad2:	eba0 0308 	sub.w	r3, r0, r8
 8010ad6:	46a2      	mov	sl, r4
 8010ad8:	fa09 f303 	lsl.w	r3, r9, r3
 8010adc:	4313      	orrs	r3, r2
 8010ade:	9304      	str	r3, [sp, #16]
 8010ae0:	e7d2      	b.n	8010a88 <_svfiprintf_r+0xa0>
 8010ae2:	9b03      	ldr	r3, [sp, #12]
 8010ae4:	1d19      	adds	r1, r3, #4
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	9103      	str	r1, [sp, #12]
 8010aec:	bfbb      	ittet	lt
 8010aee:	425b      	neglt	r3, r3
 8010af0:	f042 0202 	orrlt.w	r2, r2, #2
 8010af4:	9307      	strge	r3, [sp, #28]
 8010af6:	9307      	strlt	r3, [sp, #28]
 8010af8:	bfb8      	it	lt
 8010afa:	9204      	strlt	r2, [sp, #16]
 8010afc:	7823      	ldrb	r3, [r4, #0]
 8010afe:	2b2e      	cmp	r3, #46	@ 0x2e
 8010b00:	d10a      	bne.n	8010b18 <_svfiprintf_r+0x130>
 8010b02:	7863      	ldrb	r3, [r4, #1]
 8010b04:	2b2a      	cmp	r3, #42	@ 0x2a
 8010b06:	d132      	bne.n	8010b6e <_svfiprintf_r+0x186>
 8010b08:	9b03      	ldr	r3, [sp, #12]
 8010b0a:	3402      	adds	r4, #2
 8010b0c:	1d1a      	adds	r2, r3, #4
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010b14:	9203      	str	r2, [sp, #12]
 8010b16:	9305      	str	r3, [sp, #20]
 8010b18:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010bdc <_svfiprintf_r+0x1f4>
 8010b1c:	2203      	movs	r2, #3
 8010b1e:	7821      	ldrb	r1, [r4, #0]
 8010b20:	4650      	mov	r0, sl
 8010b22:	f000 fc9b 	bl	801145c <memchr>
 8010b26:	b138      	cbz	r0, 8010b38 <_svfiprintf_r+0x150>
 8010b28:	eba0 000a 	sub.w	r0, r0, sl
 8010b2c:	2240      	movs	r2, #64	@ 0x40
 8010b2e:	9b04      	ldr	r3, [sp, #16]
 8010b30:	3401      	adds	r4, #1
 8010b32:	4082      	lsls	r2, r0
 8010b34:	4313      	orrs	r3, r2
 8010b36:	9304      	str	r3, [sp, #16]
 8010b38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b3c:	2206      	movs	r2, #6
 8010b3e:	4824      	ldr	r0, [pc, #144]	@ (8010bd0 <_svfiprintf_r+0x1e8>)
 8010b40:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010b44:	f000 fc8a 	bl	801145c <memchr>
 8010b48:	2800      	cmp	r0, #0
 8010b4a:	d036      	beq.n	8010bba <_svfiprintf_r+0x1d2>
 8010b4c:	4b21      	ldr	r3, [pc, #132]	@ (8010bd4 <_svfiprintf_r+0x1ec>)
 8010b4e:	bb1b      	cbnz	r3, 8010b98 <_svfiprintf_r+0x1b0>
 8010b50:	9b03      	ldr	r3, [sp, #12]
 8010b52:	3307      	adds	r3, #7
 8010b54:	f023 0307 	bic.w	r3, r3, #7
 8010b58:	3308      	adds	r3, #8
 8010b5a:	9303      	str	r3, [sp, #12]
 8010b5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b5e:	4433      	add	r3, r6
 8010b60:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b62:	e76a      	b.n	8010a3a <_svfiprintf_r+0x52>
 8010b64:	fb0c 3202 	mla	r2, ip, r2, r3
 8010b68:	460c      	mov	r4, r1
 8010b6a:	2001      	movs	r0, #1
 8010b6c:	e7a8      	b.n	8010ac0 <_svfiprintf_r+0xd8>
 8010b6e:	2300      	movs	r3, #0
 8010b70:	3401      	adds	r4, #1
 8010b72:	f04f 0c0a 	mov.w	ip, #10
 8010b76:	4619      	mov	r1, r3
 8010b78:	9305      	str	r3, [sp, #20]
 8010b7a:	4620      	mov	r0, r4
 8010b7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010b80:	3a30      	subs	r2, #48	@ 0x30
 8010b82:	2a09      	cmp	r2, #9
 8010b84:	d903      	bls.n	8010b8e <_svfiprintf_r+0x1a6>
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d0c6      	beq.n	8010b18 <_svfiprintf_r+0x130>
 8010b8a:	9105      	str	r1, [sp, #20]
 8010b8c:	e7c4      	b.n	8010b18 <_svfiprintf_r+0x130>
 8010b8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010b92:	4604      	mov	r4, r0
 8010b94:	2301      	movs	r3, #1
 8010b96:	e7f0      	b.n	8010b7a <_svfiprintf_r+0x192>
 8010b98:	ab03      	add	r3, sp, #12
 8010b9a:	462a      	mov	r2, r5
 8010b9c:	a904      	add	r1, sp, #16
 8010b9e:	4638      	mov	r0, r7
 8010ba0:	9300      	str	r3, [sp, #0]
 8010ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8010bd8 <_svfiprintf_r+0x1f0>)
 8010ba4:	f3af 8000 	nop.w
 8010ba8:	1c42      	adds	r2, r0, #1
 8010baa:	4606      	mov	r6, r0
 8010bac:	d1d6      	bne.n	8010b5c <_svfiprintf_r+0x174>
 8010bae:	89ab      	ldrh	r3, [r5, #12]
 8010bb0:	065b      	lsls	r3, r3, #25
 8010bb2:	f53f af2d 	bmi.w	8010a10 <_svfiprintf_r+0x28>
 8010bb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010bb8:	e72c      	b.n	8010a14 <_svfiprintf_r+0x2c>
 8010bba:	ab03      	add	r3, sp, #12
 8010bbc:	462a      	mov	r2, r5
 8010bbe:	a904      	add	r1, sp, #16
 8010bc0:	4638      	mov	r0, r7
 8010bc2:	9300      	str	r3, [sp, #0]
 8010bc4:	4b04      	ldr	r3, [pc, #16]	@ (8010bd8 <_svfiprintf_r+0x1f0>)
 8010bc6:	f000 f9bf 	bl	8010f48 <_printf_i>
 8010bca:	e7ed      	b.n	8010ba8 <_svfiprintf_r+0x1c0>
 8010bcc:	08011828 	.word	0x08011828
 8010bd0:	08011832 	.word	0x08011832
 8010bd4:	00000000 	.word	0x00000000
 8010bd8:	08010931 	.word	0x08010931
 8010bdc:	0801182e 	.word	0x0801182e

08010be0 <__sfputc_r>:
 8010be0:	6893      	ldr	r3, [r2, #8]
 8010be2:	3b01      	subs	r3, #1
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	6093      	str	r3, [r2, #8]
 8010be8:	b410      	push	{r4}
 8010bea:	da08      	bge.n	8010bfe <__sfputc_r+0x1e>
 8010bec:	6994      	ldr	r4, [r2, #24]
 8010bee:	42a3      	cmp	r3, r4
 8010bf0:	db01      	blt.n	8010bf6 <__sfputc_r+0x16>
 8010bf2:	290a      	cmp	r1, #10
 8010bf4:	d103      	bne.n	8010bfe <__sfputc_r+0x1e>
 8010bf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010bfa:	f000 bb71 	b.w	80112e0 <__swbuf_r>
 8010bfe:	6813      	ldr	r3, [r2, #0]
 8010c00:	1c58      	adds	r0, r3, #1
 8010c02:	6010      	str	r0, [r2, #0]
 8010c04:	4608      	mov	r0, r1
 8010c06:	7019      	strb	r1, [r3, #0]
 8010c08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c0c:	4770      	bx	lr

08010c0e <__sfputs_r>:
 8010c0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c10:	4606      	mov	r6, r0
 8010c12:	460f      	mov	r7, r1
 8010c14:	4614      	mov	r4, r2
 8010c16:	18d5      	adds	r5, r2, r3
 8010c18:	42ac      	cmp	r4, r5
 8010c1a:	d101      	bne.n	8010c20 <__sfputs_r+0x12>
 8010c1c:	2000      	movs	r0, #0
 8010c1e:	e007      	b.n	8010c30 <__sfputs_r+0x22>
 8010c20:	463a      	mov	r2, r7
 8010c22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c26:	4630      	mov	r0, r6
 8010c28:	f7ff ffda 	bl	8010be0 <__sfputc_r>
 8010c2c:	1c43      	adds	r3, r0, #1
 8010c2e:	d1f3      	bne.n	8010c18 <__sfputs_r+0xa>
 8010c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010c34 <_vfiprintf_r>:
 8010c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c38:	460d      	mov	r5, r1
 8010c3a:	b09d      	sub	sp, #116	@ 0x74
 8010c3c:	4614      	mov	r4, r2
 8010c3e:	4698      	mov	r8, r3
 8010c40:	4606      	mov	r6, r0
 8010c42:	b118      	cbz	r0, 8010c4c <_vfiprintf_r+0x18>
 8010c44:	6a03      	ldr	r3, [r0, #32]
 8010c46:	b90b      	cbnz	r3, 8010c4c <_vfiprintf_r+0x18>
 8010c48:	f7ff fbda 	bl	8010400 <__sinit>
 8010c4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010c4e:	07d9      	lsls	r1, r3, #31
 8010c50:	d405      	bmi.n	8010c5e <_vfiprintf_r+0x2a>
 8010c52:	89ab      	ldrh	r3, [r5, #12]
 8010c54:	059a      	lsls	r2, r3, #22
 8010c56:	d402      	bmi.n	8010c5e <_vfiprintf_r+0x2a>
 8010c58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010c5a:	f7ff fd62 	bl	8010722 <__retarget_lock_acquire_recursive>
 8010c5e:	89ab      	ldrh	r3, [r5, #12]
 8010c60:	071b      	lsls	r3, r3, #28
 8010c62:	d501      	bpl.n	8010c68 <_vfiprintf_r+0x34>
 8010c64:	692b      	ldr	r3, [r5, #16]
 8010c66:	b99b      	cbnz	r3, 8010c90 <_vfiprintf_r+0x5c>
 8010c68:	4629      	mov	r1, r5
 8010c6a:	4630      	mov	r0, r6
 8010c6c:	f000 fb76 	bl	801135c <__swsetup_r>
 8010c70:	b170      	cbz	r0, 8010c90 <_vfiprintf_r+0x5c>
 8010c72:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010c74:	07dc      	lsls	r4, r3, #31
 8010c76:	d504      	bpl.n	8010c82 <_vfiprintf_r+0x4e>
 8010c78:	f04f 30ff 	mov.w	r0, #4294967295
 8010c7c:	b01d      	add	sp, #116	@ 0x74
 8010c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c82:	89ab      	ldrh	r3, [r5, #12]
 8010c84:	0598      	lsls	r0, r3, #22
 8010c86:	d4f7      	bmi.n	8010c78 <_vfiprintf_r+0x44>
 8010c88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010c8a:	f7ff fd4b 	bl	8010724 <__retarget_lock_release_recursive>
 8010c8e:	e7f3      	b.n	8010c78 <_vfiprintf_r+0x44>
 8010c90:	2300      	movs	r3, #0
 8010c92:	f8cd 800c 	str.w	r8, [sp, #12]
 8010c96:	f04f 0901 	mov.w	r9, #1
 8010c9a:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8010e50 <_vfiprintf_r+0x21c>
 8010c9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010ca0:	2320      	movs	r3, #32
 8010ca2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010ca6:	2330      	movs	r3, #48	@ 0x30
 8010ca8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010cac:	4623      	mov	r3, r4
 8010cae:	469a      	mov	sl, r3
 8010cb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010cb4:	b10a      	cbz	r2, 8010cba <_vfiprintf_r+0x86>
 8010cb6:	2a25      	cmp	r2, #37	@ 0x25
 8010cb8:	d1f9      	bne.n	8010cae <_vfiprintf_r+0x7a>
 8010cba:	ebba 0b04 	subs.w	fp, sl, r4
 8010cbe:	d00b      	beq.n	8010cd8 <_vfiprintf_r+0xa4>
 8010cc0:	465b      	mov	r3, fp
 8010cc2:	4622      	mov	r2, r4
 8010cc4:	4629      	mov	r1, r5
 8010cc6:	4630      	mov	r0, r6
 8010cc8:	f7ff ffa1 	bl	8010c0e <__sfputs_r>
 8010ccc:	3001      	adds	r0, #1
 8010cce:	f000 80a7 	beq.w	8010e20 <_vfiprintf_r+0x1ec>
 8010cd2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010cd4:	445a      	add	r2, fp
 8010cd6:	9209      	str	r2, [sp, #36]	@ 0x24
 8010cd8:	f89a 3000 	ldrb.w	r3, [sl]
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	f000 809f 	beq.w	8010e20 <_vfiprintf_r+0x1ec>
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8010ce8:	f10a 0a01 	add.w	sl, sl, #1
 8010cec:	9304      	str	r3, [sp, #16]
 8010cee:	9307      	str	r3, [sp, #28]
 8010cf0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010cf4:	931a      	str	r3, [sp, #104]	@ 0x68
 8010cf6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010cfa:	4654      	mov	r4, sl
 8010cfc:	2205      	movs	r2, #5
 8010cfe:	4854      	ldr	r0, [pc, #336]	@ (8010e50 <_vfiprintf_r+0x21c>)
 8010d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d04:	f000 fbaa 	bl	801145c <memchr>
 8010d08:	9a04      	ldr	r2, [sp, #16]
 8010d0a:	b9d8      	cbnz	r0, 8010d44 <_vfiprintf_r+0x110>
 8010d0c:	06d1      	lsls	r1, r2, #27
 8010d0e:	bf44      	itt	mi
 8010d10:	2320      	movmi	r3, #32
 8010d12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010d16:	0713      	lsls	r3, r2, #28
 8010d18:	bf44      	itt	mi
 8010d1a:	232b      	movmi	r3, #43	@ 0x2b
 8010d1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010d20:	f89a 3000 	ldrb.w	r3, [sl]
 8010d24:	2b2a      	cmp	r3, #42	@ 0x2a
 8010d26:	d015      	beq.n	8010d54 <_vfiprintf_r+0x120>
 8010d28:	9a07      	ldr	r2, [sp, #28]
 8010d2a:	4654      	mov	r4, sl
 8010d2c:	2000      	movs	r0, #0
 8010d2e:	f04f 0c0a 	mov.w	ip, #10
 8010d32:	4621      	mov	r1, r4
 8010d34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010d38:	3b30      	subs	r3, #48	@ 0x30
 8010d3a:	2b09      	cmp	r3, #9
 8010d3c:	d94b      	bls.n	8010dd6 <_vfiprintf_r+0x1a2>
 8010d3e:	b1b0      	cbz	r0, 8010d6e <_vfiprintf_r+0x13a>
 8010d40:	9207      	str	r2, [sp, #28]
 8010d42:	e014      	b.n	8010d6e <_vfiprintf_r+0x13a>
 8010d44:	eba0 0308 	sub.w	r3, r0, r8
 8010d48:	46a2      	mov	sl, r4
 8010d4a:	fa09 f303 	lsl.w	r3, r9, r3
 8010d4e:	4313      	orrs	r3, r2
 8010d50:	9304      	str	r3, [sp, #16]
 8010d52:	e7d2      	b.n	8010cfa <_vfiprintf_r+0xc6>
 8010d54:	9b03      	ldr	r3, [sp, #12]
 8010d56:	1d19      	adds	r1, r3, #4
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	9103      	str	r1, [sp, #12]
 8010d5e:	bfbb      	ittet	lt
 8010d60:	425b      	neglt	r3, r3
 8010d62:	f042 0202 	orrlt.w	r2, r2, #2
 8010d66:	9307      	strge	r3, [sp, #28]
 8010d68:	9307      	strlt	r3, [sp, #28]
 8010d6a:	bfb8      	it	lt
 8010d6c:	9204      	strlt	r2, [sp, #16]
 8010d6e:	7823      	ldrb	r3, [r4, #0]
 8010d70:	2b2e      	cmp	r3, #46	@ 0x2e
 8010d72:	d10a      	bne.n	8010d8a <_vfiprintf_r+0x156>
 8010d74:	7863      	ldrb	r3, [r4, #1]
 8010d76:	2b2a      	cmp	r3, #42	@ 0x2a
 8010d78:	d132      	bne.n	8010de0 <_vfiprintf_r+0x1ac>
 8010d7a:	9b03      	ldr	r3, [sp, #12]
 8010d7c:	3402      	adds	r4, #2
 8010d7e:	1d1a      	adds	r2, r3, #4
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010d86:	9203      	str	r2, [sp, #12]
 8010d88:	9305      	str	r3, [sp, #20]
 8010d8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010e60 <_vfiprintf_r+0x22c>
 8010d8e:	2203      	movs	r2, #3
 8010d90:	7821      	ldrb	r1, [r4, #0]
 8010d92:	4650      	mov	r0, sl
 8010d94:	f000 fb62 	bl	801145c <memchr>
 8010d98:	b138      	cbz	r0, 8010daa <_vfiprintf_r+0x176>
 8010d9a:	eba0 000a 	sub.w	r0, r0, sl
 8010d9e:	2240      	movs	r2, #64	@ 0x40
 8010da0:	9b04      	ldr	r3, [sp, #16]
 8010da2:	3401      	adds	r4, #1
 8010da4:	4082      	lsls	r2, r0
 8010da6:	4313      	orrs	r3, r2
 8010da8:	9304      	str	r3, [sp, #16]
 8010daa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010dae:	2206      	movs	r2, #6
 8010db0:	4828      	ldr	r0, [pc, #160]	@ (8010e54 <_vfiprintf_r+0x220>)
 8010db2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010db6:	f000 fb51 	bl	801145c <memchr>
 8010dba:	2800      	cmp	r0, #0
 8010dbc:	d03f      	beq.n	8010e3e <_vfiprintf_r+0x20a>
 8010dbe:	4b26      	ldr	r3, [pc, #152]	@ (8010e58 <_vfiprintf_r+0x224>)
 8010dc0:	bb1b      	cbnz	r3, 8010e0a <_vfiprintf_r+0x1d6>
 8010dc2:	9b03      	ldr	r3, [sp, #12]
 8010dc4:	3307      	adds	r3, #7
 8010dc6:	f023 0307 	bic.w	r3, r3, #7
 8010dca:	3308      	adds	r3, #8
 8010dcc:	9303      	str	r3, [sp, #12]
 8010dce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010dd0:	443b      	add	r3, r7
 8010dd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8010dd4:	e76a      	b.n	8010cac <_vfiprintf_r+0x78>
 8010dd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8010dda:	460c      	mov	r4, r1
 8010ddc:	2001      	movs	r0, #1
 8010dde:	e7a8      	b.n	8010d32 <_vfiprintf_r+0xfe>
 8010de0:	2300      	movs	r3, #0
 8010de2:	3401      	adds	r4, #1
 8010de4:	f04f 0c0a 	mov.w	ip, #10
 8010de8:	4619      	mov	r1, r3
 8010dea:	9305      	str	r3, [sp, #20]
 8010dec:	4620      	mov	r0, r4
 8010dee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010df2:	3a30      	subs	r2, #48	@ 0x30
 8010df4:	2a09      	cmp	r2, #9
 8010df6:	d903      	bls.n	8010e00 <_vfiprintf_r+0x1cc>
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d0c6      	beq.n	8010d8a <_vfiprintf_r+0x156>
 8010dfc:	9105      	str	r1, [sp, #20]
 8010dfe:	e7c4      	b.n	8010d8a <_vfiprintf_r+0x156>
 8010e00:	fb0c 2101 	mla	r1, ip, r1, r2
 8010e04:	4604      	mov	r4, r0
 8010e06:	2301      	movs	r3, #1
 8010e08:	e7f0      	b.n	8010dec <_vfiprintf_r+0x1b8>
 8010e0a:	ab03      	add	r3, sp, #12
 8010e0c:	462a      	mov	r2, r5
 8010e0e:	a904      	add	r1, sp, #16
 8010e10:	4630      	mov	r0, r6
 8010e12:	9300      	str	r3, [sp, #0]
 8010e14:	4b11      	ldr	r3, [pc, #68]	@ (8010e5c <_vfiprintf_r+0x228>)
 8010e16:	f3af 8000 	nop.w
 8010e1a:	4607      	mov	r7, r0
 8010e1c:	1c78      	adds	r0, r7, #1
 8010e1e:	d1d6      	bne.n	8010dce <_vfiprintf_r+0x19a>
 8010e20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010e22:	07d9      	lsls	r1, r3, #31
 8010e24:	d405      	bmi.n	8010e32 <_vfiprintf_r+0x1fe>
 8010e26:	89ab      	ldrh	r3, [r5, #12]
 8010e28:	059a      	lsls	r2, r3, #22
 8010e2a:	d402      	bmi.n	8010e32 <_vfiprintf_r+0x1fe>
 8010e2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010e2e:	f7ff fc79 	bl	8010724 <__retarget_lock_release_recursive>
 8010e32:	89ab      	ldrh	r3, [r5, #12]
 8010e34:	065b      	lsls	r3, r3, #25
 8010e36:	f53f af1f 	bmi.w	8010c78 <_vfiprintf_r+0x44>
 8010e3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010e3c:	e71e      	b.n	8010c7c <_vfiprintf_r+0x48>
 8010e3e:	ab03      	add	r3, sp, #12
 8010e40:	462a      	mov	r2, r5
 8010e42:	a904      	add	r1, sp, #16
 8010e44:	4630      	mov	r0, r6
 8010e46:	9300      	str	r3, [sp, #0]
 8010e48:	4b04      	ldr	r3, [pc, #16]	@ (8010e5c <_vfiprintf_r+0x228>)
 8010e4a:	f000 f87d 	bl	8010f48 <_printf_i>
 8010e4e:	e7e4      	b.n	8010e1a <_vfiprintf_r+0x1e6>
 8010e50:	08011828 	.word	0x08011828
 8010e54:	08011832 	.word	0x08011832
 8010e58:	00000000 	.word	0x00000000
 8010e5c:	08010c0f 	.word	0x08010c0f
 8010e60:	0801182e 	.word	0x0801182e

08010e64 <_printf_common>:
 8010e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e68:	4616      	mov	r6, r2
 8010e6a:	4698      	mov	r8, r3
 8010e6c:	688a      	ldr	r2, [r1, #8]
 8010e6e:	4607      	mov	r7, r0
 8010e70:	690b      	ldr	r3, [r1, #16]
 8010e72:	460c      	mov	r4, r1
 8010e74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010e78:	4293      	cmp	r3, r2
 8010e7a:	bfb8      	it	lt
 8010e7c:	4613      	movlt	r3, r2
 8010e7e:	6033      	str	r3, [r6, #0]
 8010e80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010e84:	b10a      	cbz	r2, 8010e8a <_printf_common+0x26>
 8010e86:	3301      	adds	r3, #1
 8010e88:	6033      	str	r3, [r6, #0]
 8010e8a:	6823      	ldr	r3, [r4, #0]
 8010e8c:	0699      	lsls	r1, r3, #26
 8010e8e:	bf42      	ittt	mi
 8010e90:	6833      	ldrmi	r3, [r6, #0]
 8010e92:	3302      	addmi	r3, #2
 8010e94:	6033      	strmi	r3, [r6, #0]
 8010e96:	6825      	ldr	r5, [r4, #0]
 8010e98:	f015 0506 	ands.w	r5, r5, #6
 8010e9c:	d106      	bne.n	8010eac <_printf_common+0x48>
 8010e9e:	f104 0a19 	add.w	sl, r4, #25
 8010ea2:	68e3      	ldr	r3, [r4, #12]
 8010ea4:	6832      	ldr	r2, [r6, #0]
 8010ea6:	1a9b      	subs	r3, r3, r2
 8010ea8:	42ab      	cmp	r3, r5
 8010eaa:	dc2b      	bgt.n	8010f04 <_printf_common+0xa0>
 8010eac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010eb0:	6822      	ldr	r2, [r4, #0]
 8010eb2:	3b00      	subs	r3, #0
 8010eb4:	bf18      	it	ne
 8010eb6:	2301      	movne	r3, #1
 8010eb8:	0692      	lsls	r2, r2, #26
 8010eba:	d430      	bmi.n	8010f1e <_printf_common+0xba>
 8010ebc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010ec0:	4641      	mov	r1, r8
 8010ec2:	4638      	mov	r0, r7
 8010ec4:	47c8      	blx	r9
 8010ec6:	3001      	adds	r0, #1
 8010ec8:	d023      	beq.n	8010f12 <_printf_common+0xae>
 8010eca:	6823      	ldr	r3, [r4, #0]
 8010ecc:	341a      	adds	r4, #26
 8010ece:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8010ed2:	f003 0306 	and.w	r3, r3, #6
 8010ed6:	2b04      	cmp	r3, #4
 8010ed8:	bf0a      	itet	eq
 8010eda:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8010ede:	2500      	movne	r5, #0
 8010ee0:	6833      	ldreq	r3, [r6, #0]
 8010ee2:	f04f 0600 	mov.w	r6, #0
 8010ee6:	bf08      	it	eq
 8010ee8:	1aed      	subeq	r5, r5, r3
 8010eea:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8010eee:	bf08      	it	eq
 8010ef0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010ef4:	4293      	cmp	r3, r2
 8010ef6:	bfc4      	itt	gt
 8010ef8:	1a9b      	subgt	r3, r3, r2
 8010efa:	18ed      	addgt	r5, r5, r3
 8010efc:	42b5      	cmp	r5, r6
 8010efe:	d11a      	bne.n	8010f36 <_printf_common+0xd2>
 8010f00:	2000      	movs	r0, #0
 8010f02:	e008      	b.n	8010f16 <_printf_common+0xb2>
 8010f04:	2301      	movs	r3, #1
 8010f06:	4652      	mov	r2, sl
 8010f08:	4641      	mov	r1, r8
 8010f0a:	4638      	mov	r0, r7
 8010f0c:	47c8      	blx	r9
 8010f0e:	3001      	adds	r0, #1
 8010f10:	d103      	bne.n	8010f1a <_printf_common+0xb6>
 8010f12:	f04f 30ff 	mov.w	r0, #4294967295
 8010f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f1a:	3501      	adds	r5, #1
 8010f1c:	e7c1      	b.n	8010ea2 <_printf_common+0x3e>
 8010f1e:	18e1      	adds	r1, r4, r3
 8010f20:	1c5a      	adds	r2, r3, #1
 8010f22:	2030      	movs	r0, #48	@ 0x30
 8010f24:	3302      	adds	r3, #2
 8010f26:	4422      	add	r2, r4
 8010f28:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010f2c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010f30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010f34:	e7c2      	b.n	8010ebc <_printf_common+0x58>
 8010f36:	2301      	movs	r3, #1
 8010f38:	4622      	mov	r2, r4
 8010f3a:	4641      	mov	r1, r8
 8010f3c:	4638      	mov	r0, r7
 8010f3e:	47c8      	blx	r9
 8010f40:	3001      	adds	r0, #1
 8010f42:	d0e6      	beq.n	8010f12 <_printf_common+0xae>
 8010f44:	3601      	adds	r6, #1
 8010f46:	e7d9      	b.n	8010efc <_printf_common+0x98>

08010f48 <_printf_i>:
 8010f48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010f4c:	7e0f      	ldrb	r7, [r1, #24]
 8010f4e:	4691      	mov	r9, r2
 8010f50:	4680      	mov	r8, r0
 8010f52:	460c      	mov	r4, r1
 8010f54:	2f78      	cmp	r7, #120	@ 0x78
 8010f56:	469a      	mov	sl, r3
 8010f58:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010f5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010f5e:	d807      	bhi.n	8010f70 <_printf_i+0x28>
 8010f60:	2f62      	cmp	r7, #98	@ 0x62
 8010f62:	d80a      	bhi.n	8010f7a <_printf_i+0x32>
 8010f64:	2f00      	cmp	r7, #0
 8010f66:	f000 80d2 	beq.w	801110e <_printf_i+0x1c6>
 8010f6a:	2f58      	cmp	r7, #88	@ 0x58
 8010f6c:	f000 80b9 	beq.w	80110e2 <_printf_i+0x19a>
 8010f70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010f74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010f78:	e03a      	b.n	8010ff0 <_printf_i+0xa8>
 8010f7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010f7e:	2b15      	cmp	r3, #21
 8010f80:	d8f6      	bhi.n	8010f70 <_printf_i+0x28>
 8010f82:	a101      	add	r1, pc, #4	@ (adr r1, 8010f88 <_printf_i+0x40>)
 8010f84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010f88:	08010fe1 	.word	0x08010fe1
 8010f8c:	08010ff5 	.word	0x08010ff5
 8010f90:	08010f71 	.word	0x08010f71
 8010f94:	08010f71 	.word	0x08010f71
 8010f98:	08010f71 	.word	0x08010f71
 8010f9c:	08010f71 	.word	0x08010f71
 8010fa0:	08010ff5 	.word	0x08010ff5
 8010fa4:	08010f71 	.word	0x08010f71
 8010fa8:	08010f71 	.word	0x08010f71
 8010fac:	08010f71 	.word	0x08010f71
 8010fb0:	08010f71 	.word	0x08010f71
 8010fb4:	080110f5 	.word	0x080110f5
 8010fb8:	0801101f 	.word	0x0801101f
 8010fbc:	080110af 	.word	0x080110af
 8010fc0:	08010f71 	.word	0x08010f71
 8010fc4:	08010f71 	.word	0x08010f71
 8010fc8:	08011117 	.word	0x08011117
 8010fcc:	08010f71 	.word	0x08010f71
 8010fd0:	0801101f 	.word	0x0801101f
 8010fd4:	08010f71 	.word	0x08010f71
 8010fd8:	08010f71 	.word	0x08010f71
 8010fdc:	080110b7 	.word	0x080110b7
 8010fe0:	6833      	ldr	r3, [r6, #0]
 8010fe2:	1d1a      	adds	r2, r3, #4
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	6032      	str	r2, [r6, #0]
 8010fe8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010fec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010ff0:	2301      	movs	r3, #1
 8010ff2:	e09d      	b.n	8011130 <_printf_i+0x1e8>
 8010ff4:	6833      	ldr	r3, [r6, #0]
 8010ff6:	6820      	ldr	r0, [r4, #0]
 8010ff8:	1d19      	adds	r1, r3, #4
 8010ffa:	6031      	str	r1, [r6, #0]
 8010ffc:	0606      	lsls	r6, r0, #24
 8010ffe:	d501      	bpl.n	8011004 <_printf_i+0xbc>
 8011000:	681d      	ldr	r5, [r3, #0]
 8011002:	e003      	b.n	801100c <_printf_i+0xc4>
 8011004:	0645      	lsls	r5, r0, #25
 8011006:	d5fb      	bpl.n	8011000 <_printf_i+0xb8>
 8011008:	f9b3 5000 	ldrsh.w	r5, [r3]
 801100c:	2d00      	cmp	r5, #0
 801100e:	da03      	bge.n	8011018 <_printf_i+0xd0>
 8011010:	232d      	movs	r3, #45	@ 0x2d
 8011012:	426d      	negs	r5, r5
 8011014:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011018:	4859      	ldr	r0, [pc, #356]	@ (8011180 <_printf_i+0x238>)
 801101a:	230a      	movs	r3, #10
 801101c:	e011      	b.n	8011042 <_printf_i+0xfa>
 801101e:	6821      	ldr	r1, [r4, #0]
 8011020:	6833      	ldr	r3, [r6, #0]
 8011022:	0608      	lsls	r0, r1, #24
 8011024:	f853 5b04 	ldr.w	r5, [r3], #4
 8011028:	d402      	bmi.n	8011030 <_printf_i+0xe8>
 801102a:	0649      	lsls	r1, r1, #25
 801102c:	bf48      	it	mi
 801102e:	b2ad      	uxthmi	r5, r5
 8011030:	2f6f      	cmp	r7, #111	@ 0x6f
 8011032:	6033      	str	r3, [r6, #0]
 8011034:	4852      	ldr	r0, [pc, #328]	@ (8011180 <_printf_i+0x238>)
 8011036:	bf14      	ite	ne
 8011038:	230a      	movne	r3, #10
 801103a:	2308      	moveq	r3, #8
 801103c:	2100      	movs	r1, #0
 801103e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011042:	6866      	ldr	r6, [r4, #4]
 8011044:	2e00      	cmp	r6, #0
 8011046:	60a6      	str	r6, [r4, #8]
 8011048:	bfa2      	ittt	ge
 801104a:	6821      	ldrge	r1, [r4, #0]
 801104c:	f021 0104 	bicge.w	r1, r1, #4
 8011050:	6021      	strge	r1, [r4, #0]
 8011052:	b90d      	cbnz	r5, 8011058 <_printf_i+0x110>
 8011054:	2e00      	cmp	r6, #0
 8011056:	d04b      	beq.n	80110f0 <_printf_i+0x1a8>
 8011058:	4616      	mov	r6, r2
 801105a:	fbb5 f1f3 	udiv	r1, r5, r3
 801105e:	fb03 5711 	mls	r7, r3, r1, r5
 8011062:	5dc7      	ldrb	r7, [r0, r7]
 8011064:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011068:	462f      	mov	r7, r5
 801106a:	460d      	mov	r5, r1
 801106c:	42bb      	cmp	r3, r7
 801106e:	d9f4      	bls.n	801105a <_printf_i+0x112>
 8011070:	2b08      	cmp	r3, #8
 8011072:	d10b      	bne.n	801108c <_printf_i+0x144>
 8011074:	6823      	ldr	r3, [r4, #0]
 8011076:	07df      	lsls	r7, r3, #31
 8011078:	d508      	bpl.n	801108c <_printf_i+0x144>
 801107a:	6923      	ldr	r3, [r4, #16]
 801107c:	6861      	ldr	r1, [r4, #4]
 801107e:	4299      	cmp	r1, r3
 8011080:	bfde      	ittt	le
 8011082:	2330      	movle	r3, #48	@ 0x30
 8011084:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011088:	f106 36ff 	addle.w	r6, r6, #4294967295
 801108c:	1b92      	subs	r2, r2, r6
 801108e:	6122      	str	r2, [r4, #16]
 8011090:	464b      	mov	r3, r9
 8011092:	aa03      	add	r2, sp, #12
 8011094:	4621      	mov	r1, r4
 8011096:	4640      	mov	r0, r8
 8011098:	f8cd a000 	str.w	sl, [sp]
 801109c:	f7ff fee2 	bl	8010e64 <_printf_common>
 80110a0:	3001      	adds	r0, #1
 80110a2:	d14a      	bne.n	801113a <_printf_i+0x1f2>
 80110a4:	f04f 30ff 	mov.w	r0, #4294967295
 80110a8:	b004      	add	sp, #16
 80110aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110ae:	6823      	ldr	r3, [r4, #0]
 80110b0:	f043 0320 	orr.w	r3, r3, #32
 80110b4:	6023      	str	r3, [r4, #0]
 80110b6:	2778      	movs	r7, #120	@ 0x78
 80110b8:	4832      	ldr	r0, [pc, #200]	@ (8011184 <_printf_i+0x23c>)
 80110ba:	6823      	ldr	r3, [r4, #0]
 80110bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80110c0:	061f      	lsls	r7, r3, #24
 80110c2:	6831      	ldr	r1, [r6, #0]
 80110c4:	f851 5b04 	ldr.w	r5, [r1], #4
 80110c8:	d402      	bmi.n	80110d0 <_printf_i+0x188>
 80110ca:	065f      	lsls	r7, r3, #25
 80110cc:	bf48      	it	mi
 80110ce:	b2ad      	uxthmi	r5, r5
 80110d0:	6031      	str	r1, [r6, #0]
 80110d2:	07d9      	lsls	r1, r3, #31
 80110d4:	bf44      	itt	mi
 80110d6:	f043 0320 	orrmi.w	r3, r3, #32
 80110da:	6023      	strmi	r3, [r4, #0]
 80110dc:	b11d      	cbz	r5, 80110e6 <_printf_i+0x19e>
 80110de:	2310      	movs	r3, #16
 80110e0:	e7ac      	b.n	801103c <_printf_i+0xf4>
 80110e2:	4827      	ldr	r0, [pc, #156]	@ (8011180 <_printf_i+0x238>)
 80110e4:	e7e9      	b.n	80110ba <_printf_i+0x172>
 80110e6:	6823      	ldr	r3, [r4, #0]
 80110e8:	f023 0320 	bic.w	r3, r3, #32
 80110ec:	6023      	str	r3, [r4, #0]
 80110ee:	e7f6      	b.n	80110de <_printf_i+0x196>
 80110f0:	4616      	mov	r6, r2
 80110f2:	e7bd      	b.n	8011070 <_printf_i+0x128>
 80110f4:	6833      	ldr	r3, [r6, #0]
 80110f6:	6825      	ldr	r5, [r4, #0]
 80110f8:	1d18      	adds	r0, r3, #4
 80110fa:	6961      	ldr	r1, [r4, #20]
 80110fc:	6030      	str	r0, [r6, #0]
 80110fe:	062e      	lsls	r6, r5, #24
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	d501      	bpl.n	8011108 <_printf_i+0x1c0>
 8011104:	6019      	str	r1, [r3, #0]
 8011106:	e002      	b.n	801110e <_printf_i+0x1c6>
 8011108:	0668      	lsls	r0, r5, #25
 801110a:	d5fb      	bpl.n	8011104 <_printf_i+0x1bc>
 801110c:	8019      	strh	r1, [r3, #0]
 801110e:	2300      	movs	r3, #0
 8011110:	4616      	mov	r6, r2
 8011112:	6123      	str	r3, [r4, #16]
 8011114:	e7bc      	b.n	8011090 <_printf_i+0x148>
 8011116:	6833      	ldr	r3, [r6, #0]
 8011118:	2100      	movs	r1, #0
 801111a:	1d1a      	adds	r2, r3, #4
 801111c:	6032      	str	r2, [r6, #0]
 801111e:	681e      	ldr	r6, [r3, #0]
 8011120:	6862      	ldr	r2, [r4, #4]
 8011122:	4630      	mov	r0, r6
 8011124:	f000 f99a 	bl	801145c <memchr>
 8011128:	b108      	cbz	r0, 801112e <_printf_i+0x1e6>
 801112a:	1b80      	subs	r0, r0, r6
 801112c:	6060      	str	r0, [r4, #4]
 801112e:	6863      	ldr	r3, [r4, #4]
 8011130:	6123      	str	r3, [r4, #16]
 8011132:	2300      	movs	r3, #0
 8011134:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011138:	e7aa      	b.n	8011090 <_printf_i+0x148>
 801113a:	6923      	ldr	r3, [r4, #16]
 801113c:	4632      	mov	r2, r6
 801113e:	4649      	mov	r1, r9
 8011140:	4640      	mov	r0, r8
 8011142:	47d0      	blx	sl
 8011144:	3001      	adds	r0, #1
 8011146:	d0ad      	beq.n	80110a4 <_printf_i+0x15c>
 8011148:	6823      	ldr	r3, [r4, #0]
 801114a:	079b      	lsls	r3, r3, #30
 801114c:	d413      	bmi.n	8011176 <_printf_i+0x22e>
 801114e:	68e0      	ldr	r0, [r4, #12]
 8011150:	9b03      	ldr	r3, [sp, #12]
 8011152:	4298      	cmp	r0, r3
 8011154:	bfb8      	it	lt
 8011156:	4618      	movlt	r0, r3
 8011158:	e7a6      	b.n	80110a8 <_printf_i+0x160>
 801115a:	2301      	movs	r3, #1
 801115c:	4632      	mov	r2, r6
 801115e:	4649      	mov	r1, r9
 8011160:	4640      	mov	r0, r8
 8011162:	47d0      	blx	sl
 8011164:	3001      	adds	r0, #1
 8011166:	d09d      	beq.n	80110a4 <_printf_i+0x15c>
 8011168:	3501      	adds	r5, #1
 801116a:	68e3      	ldr	r3, [r4, #12]
 801116c:	9903      	ldr	r1, [sp, #12]
 801116e:	1a5b      	subs	r3, r3, r1
 8011170:	42ab      	cmp	r3, r5
 8011172:	dcf2      	bgt.n	801115a <_printf_i+0x212>
 8011174:	e7eb      	b.n	801114e <_printf_i+0x206>
 8011176:	2500      	movs	r5, #0
 8011178:	f104 0619 	add.w	r6, r4, #25
 801117c:	e7f5      	b.n	801116a <_printf_i+0x222>
 801117e:	bf00      	nop
 8011180:	08011839 	.word	0x08011839
 8011184:	0801184a 	.word	0x0801184a

08011188 <__sflush_r>:
 8011188:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801118c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011190:	0716      	lsls	r6, r2, #28
 8011192:	4605      	mov	r5, r0
 8011194:	460c      	mov	r4, r1
 8011196:	d454      	bmi.n	8011242 <__sflush_r+0xba>
 8011198:	684b      	ldr	r3, [r1, #4]
 801119a:	2b00      	cmp	r3, #0
 801119c:	dc02      	bgt.n	80111a4 <__sflush_r+0x1c>
 801119e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	dd48      	ble.n	8011236 <__sflush_r+0xae>
 80111a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80111a6:	2e00      	cmp	r6, #0
 80111a8:	d045      	beq.n	8011236 <__sflush_r+0xae>
 80111aa:	2300      	movs	r3, #0
 80111ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80111b0:	682f      	ldr	r7, [r5, #0]
 80111b2:	6a21      	ldr	r1, [r4, #32]
 80111b4:	602b      	str	r3, [r5, #0]
 80111b6:	d030      	beq.n	801121a <__sflush_r+0x92>
 80111b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80111ba:	89a3      	ldrh	r3, [r4, #12]
 80111bc:	0759      	lsls	r1, r3, #29
 80111be:	d505      	bpl.n	80111cc <__sflush_r+0x44>
 80111c0:	6863      	ldr	r3, [r4, #4]
 80111c2:	1ad2      	subs	r2, r2, r3
 80111c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80111c6:	b10b      	cbz	r3, 80111cc <__sflush_r+0x44>
 80111c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80111ca:	1ad2      	subs	r2, r2, r3
 80111cc:	2300      	movs	r3, #0
 80111ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80111d0:	6a21      	ldr	r1, [r4, #32]
 80111d2:	4628      	mov	r0, r5
 80111d4:	47b0      	blx	r6
 80111d6:	1c43      	adds	r3, r0, #1
 80111d8:	89a3      	ldrh	r3, [r4, #12]
 80111da:	d106      	bne.n	80111ea <__sflush_r+0x62>
 80111dc:	6829      	ldr	r1, [r5, #0]
 80111de:	291d      	cmp	r1, #29
 80111e0:	d82b      	bhi.n	801123a <__sflush_r+0xb2>
 80111e2:	4a2a      	ldr	r2, [pc, #168]	@ (801128c <__sflush_r+0x104>)
 80111e4:	410a      	asrs	r2, r1
 80111e6:	07d6      	lsls	r6, r2, #31
 80111e8:	d427      	bmi.n	801123a <__sflush_r+0xb2>
 80111ea:	2200      	movs	r2, #0
 80111ec:	04d9      	lsls	r1, r3, #19
 80111ee:	6062      	str	r2, [r4, #4]
 80111f0:	6922      	ldr	r2, [r4, #16]
 80111f2:	6022      	str	r2, [r4, #0]
 80111f4:	d504      	bpl.n	8011200 <__sflush_r+0x78>
 80111f6:	1c42      	adds	r2, r0, #1
 80111f8:	d101      	bne.n	80111fe <__sflush_r+0x76>
 80111fa:	682b      	ldr	r3, [r5, #0]
 80111fc:	b903      	cbnz	r3, 8011200 <__sflush_r+0x78>
 80111fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8011200:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011202:	602f      	str	r7, [r5, #0]
 8011204:	b1b9      	cbz	r1, 8011236 <__sflush_r+0xae>
 8011206:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801120a:	4299      	cmp	r1, r3
 801120c:	d002      	beq.n	8011214 <__sflush_r+0x8c>
 801120e:	4628      	mov	r0, r5
 8011210:	f7ff fa96 	bl	8010740 <_free_r>
 8011214:	2300      	movs	r3, #0
 8011216:	6363      	str	r3, [r4, #52]	@ 0x34
 8011218:	e00d      	b.n	8011236 <__sflush_r+0xae>
 801121a:	2301      	movs	r3, #1
 801121c:	4628      	mov	r0, r5
 801121e:	47b0      	blx	r6
 8011220:	4602      	mov	r2, r0
 8011222:	1c50      	adds	r0, r2, #1
 8011224:	d1c9      	bne.n	80111ba <__sflush_r+0x32>
 8011226:	682b      	ldr	r3, [r5, #0]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d0c6      	beq.n	80111ba <__sflush_r+0x32>
 801122c:	2b1d      	cmp	r3, #29
 801122e:	d001      	beq.n	8011234 <__sflush_r+0xac>
 8011230:	2b16      	cmp	r3, #22
 8011232:	d11d      	bne.n	8011270 <__sflush_r+0xe8>
 8011234:	602f      	str	r7, [r5, #0]
 8011236:	2000      	movs	r0, #0
 8011238:	e021      	b.n	801127e <__sflush_r+0xf6>
 801123a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801123e:	b21b      	sxth	r3, r3
 8011240:	e01a      	b.n	8011278 <__sflush_r+0xf0>
 8011242:	690f      	ldr	r7, [r1, #16]
 8011244:	2f00      	cmp	r7, #0
 8011246:	d0f6      	beq.n	8011236 <__sflush_r+0xae>
 8011248:	0793      	lsls	r3, r2, #30
 801124a:	680e      	ldr	r6, [r1, #0]
 801124c:	600f      	str	r7, [r1, #0]
 801124e:	bf0c      	ite	eq
 8011250:	694b      	ldreq	r3, [r1, #20]
 8011252:	2300      	movne	r3, #0
 8011254:	eba6 0807 	sub.w	r8, r6, r7
 8011258:	608b      	str	r3, [r1, #8]
 801125a:	f1b8 0f00 	cmp.w	r8, #0
 801125e:	ddea      	ble.n	8011236 <__sflush_r+0xae>
 8011260:	4643      	mov	r3, r8
 8011262:	463a      	mov	r2, r7
 8011264:	6a21      	ldr	r1, [r4, #32]
 8011266:	4628      	mov	r0, r5
 8011268:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801126a:	47b0      	blx	r6
 801126c:	2800      	cmp	r0, #0
 801126e:	dc08      	bgt.n	8011282 <__sflush_r+0xfa>
 8011270:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011274:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011278:	f04f 30ff 	mov.w	r0, #4294967295
 801127c:	81a3      	strh	r3, [r4, #12]
 801127e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011282:	4407      	add	r7, r0
 8011284:	eba8 0800 	sub.w	r8, r8, r0
 8011288:	e7e7      	b.n	801125a <__sflush_r+0xd2>
 801128a:	bf00      	nop
 801128c:	dfbffffe 	.word	0xdfbffffe

08011290 <_fflush_r>:
 8011290:	b538      	push	{r3, r4, r5, lr}
 8011292:	690b      	ldr	r3, [r1, #16]
 8011294:	4605      	mov	r5, r0
 8011296:	460c      	mov	r4, r1
 8011298:	b913      	cbnz	r3, 80112a0 <_fflush_r+0x10>
 801129a:	2500      	movs	r5, #0
 801129c:	4628      	mov	r0, r5
 801129e:	bd38      	pop	{r3, r4, r5, pc}
 80112a0:	b118      	cbz	r0, 80112aa <_fflush_r+0x1a>
 80112a2:	6a03      	ldr	r3, [r0, #32]
 80112a4:	b90b      	cbnz	r3, 80112aa <_fflush_r+0x1a>
 80112a6:	f7ff f8ab 	bl	8010400 <__sinit>
 80112aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d0f3      	beq.n	801129a <_fflush_r+0xa>
 80112b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80112b4:	07d0      	lsls	r0, r2, #31
 80112b6:	d404      	bmi.n	80112c2 <_fflush_r+0x32>
 80112b8:	0599      	lsls	r1, r3, #22
 80112ba:	d402      	bmi.n	80112c2 <_fflush_r+0x32>
 80112bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80112be:	f7ff fa30 	bl	8010722 <__retarget_lock_acquire_recursive>
 80112c2:	4628      	mov	r0, r5
 80112c4:	4621      	mov	r1, r4
 80112c6:	f7ff ff5f 	bl	8011188 <__sflush_r>
 80112ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80112cc:	4605      	mov	r5, r0
 80112ce:	07da      	lsls	r2, r3, #31
 80112d0:	d4e4      	bmi.n	801129c <_fflush_r+0xc>
 80112d2:	89a3      	ldrh	r3, [r4, #12]
 80112d4:	059b      	lsls	r3, r3, #22
 80112d6:	d4e1      	bmi.n	801129c <_fflush_r+0xc>
 80112d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80112da:	f7ff fa23 	bl	8010724 <__retarget_lock_release_recursive>
 80112de:	e7dd      	b.n	801129c <_fflush_r+0xc>

080112e0 <__swbuf_r>:
 80112e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112e2:	460e      	mov	r6, r1
 80112e4:	4614      	mov	r4, r2
 80112e6:	4605      	mov	r5, r0
 80112e8:	b118      	cbz	r0, 80112f2 <__swbuf_r+0x12>
 80112ea:	6a03      	ldr	r3, [r0, #32]
 80112ec:	b90b      	cbnz	r3, 80112f2 <__swbuf_r+0x12>
 80112ee:	f7ff f887 	bl	8010400 <__sinit>
 80112f2:	69a3      	ldr	r3, [r4, #24]
 80112f4:	60a3      	str	r3, [r4, #8]
 80112f6:	89a3      	ldrh	r3, [r4, #12]
 80112f8:	071a      	lsls	r2, r3, #28
 80112fa:	d501      	bpl.n	8011300 <__swbuf_r+0x20>
 80112fc:	6923      	ldr	r3, [r4, #16]
 80112fe:	b943      	cbnz	r3, 8011312 <__swbuf_r+0x32>
 8011300:	4621      	mov	r1, r4
 8011302:	4628      	mov	r0, r5
 8011304:	f000 f82a 	bl	801135c <__swsetup_r>
 8011308:	b118      	cbz	r0, 8011312 <__swbuf_r+0x32>
 801130a:	f04f 37ff 	mov.w	r7, #4294967295
 801130e:	4638      	mov	r0, r7
 8011310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011312:	6823      	ldr	r3, [r4, #0]
 8011314:	b2f6      	uxtb	r6, r6
 8011316:	6922      	ldr	r2, [r4, #16]
 8011318:	4637      	mov	r7, r6
 801131a:	1a98      	subs	r0, r3, r2
 801131c:	6963      	ldr	r3, [r4, #20]
 801131e:	4283      	cmp	r3, r0
 8011320:	dc05      	bgt.n	801132e <__swbuf_r+0x4e>
 8011322:	4621      	mov	r1, r4
 8011324:	4628      	mov	r0, r5
 8011326:	f7ff ffb3 	bl	8011290 <_fflush_r>
 801132a:	2800      	cmp	r0, #0
 801132c:	d1ed      	bne.n	801130a <__swbuf_r+0x2a>
 801132e:	68a3      	ldr	r3, [r4, #8]
 8011330:	3b01      	subs	r3, #1
 8011332:	60a3      	str	r3, [r4, #8]
 8011334:	6823      	ldr	r3, [r4, #0]
 8011336:	1c5a      	adds	r2, r3, #1
 8011338:	6022      	str	r2, [r4, #0]
 801133a:	701e      	strb	r6, [r3, #0]
 801133c:	1c43      	adds	r3, r0, #1
 801133e:	6962      	ldr	r2, [r4, #20]
 8011340:	429a      	cmp	r2, r3
 8011342:	d004      	beq.n	801134e <__swbuf_r+0x6e>
 8011344:	89a3      	ldrh	r3, [r4, #12]
 8011346:	07db      	lsls	r3, r3, #31
 8011348:	d5e1      	bpl.n	801130e <__swbuf_r+0x2e>
 801134a:	2e0a      	cmp	r6, #10
 801134c:	d1df      	bne.n	801130e <__swbuf_r+0x2e>
 801134e:	4621      	mov	r1, r4
 8011350:	4628      	mov	r0, r5
 8011352:	f7ff ff9d 	bl	8011290 <_fflush_r>
 8011356:	2800      	cmp	r0, #0
 8011358:	d0d9      	beq.n	801130e <__swbuf_r+0x2e>
 801135a:	e7d6      	b.n	801130a <__swbuf_r+0x2a>

0801135c <__swsetup_r>:
 801135c:	b538      	push	{r3, r4, r5, lr}
 801135e:	4b29      	ldr	r3, [pc, #164]	@ (8011404 <__swsetup_r+0xa8>)
 8011360:	4605      	mov	r5, r0
 8011362:	460c      	mov	r4, r1
 8011364:	6818      	ldr	r0, [r3, #0]
 8011366:	b118      	cbz	r0, 8011370 <__swsetup_r+0x14>
 8011368:	6a03      	ldr	r3, [r0, #32]
 801136a:	b90b      	cbnz	r3, 8011370 <__swsetup_r+0x14>
 801136c:	f7ff f848 	bl	8010400 <__sinit>
 8011370:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011374:	0719      	lsls	r1, r3, #28
 8011376:	d422      	bmi.n	80113be <__swsetup_r+0x62>
 8011378:	06da      	lsls	r2, r3, #27
 801137a:	d407      	bmi.n	801138c <__swsetup_r+0x30>
 801137c:	2209      	movs	r2, #9
 801137e:	602a      	str	r2, [r5, #0]
 8011380:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011384:	f04f 30ff 	mov.w	r0, #4294967295
 8011388:	81a3      	strh	r3, [r4, #12]
 801138a:	e033      	b.n	80113f4 <__swsetup_r+0x98>
 801138c:	0758      	lsls	r0, r3, #29
 801138e:	d512      	bpl.n	80113b6 <__swsetup_r+0x5a>
 8011390:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011392:	b141      	cbz	r1, 80113a6 <__swsetup_r+0x4a>
 8011394:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011398:	4299      	cmp	r1, r3
 801139a:	d002      	beq.n	80113a2 <__swsetup_r+0x46>
 801139c:	4628      	mov	r0, r5
 801139e:	f7ff f9cf 	bl	8010740 <_free_r>
 80113a2:	2300      	movs	r3, #0
 80113a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80113a6:	89a3      	ldrh	r3, [r4, #12]
 80113a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80113ac:	81a3      	strh	r3, [r4, #12]
 80113ae:	2300      	movs	r3, #0
 80113b0:	6063      	str	r3, [r4, #4]
 80113b2:	6923      	ldr	r3, [r4, #16]
 80113b4:	6023      	str	r3, [r4, #0]
 80113b6:	89a3      	ldrh	r3, [r4, #12]
 80113b8:	f043 0308 	orr.w	r3, r3, #8
 80113bc:	81a3      	strh	r3, [r4, #12]
 80113be:	6923      	ldr	r3, [r4, #16]
 80113c0:	b94b      	cbnz	r3, 80113d6 <__swsetup_r+0x7a>
 80113c2:	89a3      	ldrh	r3, [r4, #12]
 80113c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80113c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80113cc:	d003      	beq.n	80113d6 <__swsetup_r+0x7a>
 80113ce:	4621      	mov	r1, r4
 80113d0:	4628      	mov	r0, r5
 80113d2:	f000 f8a4 	bl	801151e <__smakebuf_r>
 80113d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113da:	f013 0201 	ands.w	r2, r3, #1
 80113de:	d00a      	beq.n	80113f6 <__swsetup_r+0x9a>
 80113e0:	2200      	movs	r2, #0
 80113e2:	60a2      	str	r2, [r4, #8]
 80113e4:	6962      	ldr	r2, [r4, #20]
 80113e6:	4252      	negs	r2, r2
 80113e8:	61a2      	str	r2, [r4, #24]
 80113ea:	6922      	ldr	r2, [r4, #16]
 80113ec:	b942      	cbnz	r2, 8011400 <__swsetup_r+0xa4>
 80113ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80113f2:	d1c5      	bne.n	8011380 <__swsetup_r+0x24>
 80113f4:	bd38      	pop	{r3, r4, r5, pc}
 80113f6:	0799      	lsls	r1, r3, #30
 80113f8:	bf58      	it	pl
 80113fa:	6962      	ldrpl	r2, [r4, #20]
 80113fc:	60a2      	str	r2, [r4, #8]
 80113fe:	e7f4      	b.n	80113ea <__swsetup_r+0x8e>
 8011400:	2000      	movs	r0, #0
 8011402:	e7f7      	b.n	80113f4 <__swsetup_r+0x98>
 8011404:	20000130 	.word	0x20000130

08011408 <memmove>:
 8011408:	4288      	cmp	r0, r1
 801140a:	b510      	push	{r4, lr}
 801140c:	eb01 0402 	add.w	r4, r1, r2
 8011410:	d902      	bls.n	8011418 <memmove+0x10>
 8011412:	4284      	cmp	r4, r0
 8011414:	4623      	mov	r3, r4
 8011416:	d807      	bhi.n	8011428 <memmove+0x20>
 8011418:	1e43      	subs	r3, r0, #1
 801141a:	42a1      	cmp	r1, r4
 801141c:	d008      	beq.n	8011430 <memmove+0x28>
 801141e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011422:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011426:	e7f8      	b.n	801141a <memmove+0x12>
 8011428:	4402      	add	r2, r0
 801142a:	4601      	mov	r1, r0
 801142c:	428a      	cmp	r2, r1
 801142e:	d100      	bne.n	8011432 <memmove+0x2a>
 8011430:	bd10      	pop	{r4, pc}
 8011432:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011436:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801143a:	e7f7      	b.n	801142c <memmove+0x24>

0801143c <_sbrk_r>:
 801143c:	b538      	push	{r3, r4, r5, lr}
 801143e:	2300      	movs	r3, #0
 8011440:	4d05      	ldr	r5, [pc, #20]	@ (8011458 <_sbrk_r+0x1c>)
 8011442:	4604      	mov	r4, r0
 8011444:	4608      	mov	r0, r1
 8011446:	602b      	str	r3, [r5, #0]
 8011448:	f7f0 fb04 	bl	8001a54 <_sbrk>
 801144c:	1c43      	adds	r3, r0, #1
 801144e:	d102      	bne.n	8011456 <_sbrk_r+0x1a>
 8011450:	682b      	ldr	r3, [r5, #0]
 8011452:	b103      	cbz	r3, 8011456 <_sbrk_r+0x1a>
 8011454:	6023      	str	r3, [r4, #0]
 8011456:	bd38      	pop	{r3, r4, r5, pc}
 8011458:	200113a4 	.word	0x200113a4

0801145c <memchr>:
 801145c:	b2c9      	uxtb	r1, r1
 801145e:	4603      	mov	r3, r0
 8011460:	4402      	add	r2, r0
 8011462:	b510      	push	{r4, lr}
 8011464:	4293      	cmp	r3, r2
 8011466:	4618      	mov	r0, r3
 8011468:	d101      	bne.n	801146e <memchr+0x12>
 801146a:	2000      	movs	r0, #0
 801146c:	e003      	b.n	8011476 <memchr+0x1a>
 801146e:	7804      	ldrb	r4, [r0, #0]
 8011470:	3301      	adds	r3, #1
 8011472:	428c      	cmp	r4, r1
 8011474:	d1f6      	bne.n	8011464 <memchr+0x8>
 8011476:	bd10      	pop	{r4, pc}

08011478 <_realloc_r>:
 8011478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801147c:	4680      	mov	r8, r0
 801147e:	4615      	mov	r5, r2
 8011480:	460c      	mov	r4, r1
 8011482:	b921      	cbnz	r1, 801148e <_realloc_r+0x16>
 8011484:	4611      	mov	r1, r2
 8011486:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801148a:	f7ff b9c5 	b.w	8010818 <_malloc_r>
 801148e:	b92a      	cbnz	r2, 801149c <_realloc_r+0x24>
 8011490:	f7ff f956 	bl	8010740 <_free_r>
 8011494:	2400      	movs	r4, #0
 8011496:	4620      	mov	r0, r4
 8011498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801149c:	f000 f89e 	bl	80115dc <_malloc_usable_size_r>
 80114a0:	4285      	cmp	r5, r0
 80114a2:	4606      	mov	r6, r0
 80114a4:	d802      	bhi.n	80114ac <_realloc_r+0x34>
 80114a6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80114aa:	d8f4      	bhi.n	8011496 <_realloc_r+0x1e>
 80114ac:	4629      	mov	r1, r5
 80114ae:	4640      	mov	r0, r8
 80114b0:	f7ff f9b2 	bl	8010818 <_malloc_r>
 80114b4:	4607      	mov	r7, r0
 80114b6:	2800      	cmp	r0, #0
 80114b8:	d0ec      	beq.n	8011494 <_realloc_r+0x1c>
 80114ba:	42b5      	cmp	r5, r6
 80114bc:	462a      	mov	r2, r5
 80114be:	4621      	mov	r1, r4
 80114c0:	bf28      	it	cs
 80114c2:	4632      	movcs	r2, r6
 80114c4:	f7ff f92f 	bl	8010726 <memcpy>
 80114c8:	4621      	mov	r1, r4
 80114ca:	4640      	mov	r0, r8
 80114cc:	463c      	mov	r4, r7
 80114ce:	f7ff f937 	bl	8010740 <_free_r>
 80114d2:	e7e0      	b.n	8011496 <_realloc_r+0x1e>

080114d4 <__swhatbuf_r>:
 80114d4:	b570      	push	{r4, r5, r6, lr}
 80114d6:	460c      	mov	r4, r1
 80114d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80114dc:	b096      	sub	sp, #88	@ 0x58
 80114de:	4615      	mov	r5, r2
 80114e0:	2900      	cmp	r1, #0
 80114e2:	461e      	mov	r6, r3
 80114e4:	da0c      	bge.n	8011500 <__swhatbuf_r+0x2c>
 80114e6:	89a3      	ldrh	r3, [r4, #12]
 80114e8:	2100      	movs	r1, #0
 80114ea:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80114ee:	bf14      	ite	ne
 80114f0:	2340      	movne	r3, #64	@ 0x40
 80114f2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80114f6:	2000      	movs	r0, #0
 80114f8:	6031      	str	r1, [r6, #0]
 80114fa:	602b      	str	r3, [r5, #0]
 80114fc:	b016      	add	sp, #88	@ 0x58
 80114fe:	bd70      	pop	{r4, r5, r6, pc}
 8011500:	466a      	mov	r2, sp
 8011502:	f000 f849 	bl	8011598 <_fstat_r>
 8011506:	2800      	cmp	r0, #0
 8011508:	dbed      	blt.n	80114e6 <__swhatbuf_r+0x12>
 801150a:	9901      	ldr	r1, [sp, #4]
 801150c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011510:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011514:	4259      	negs	r1, r3
 8011516:	4159      	adcs	r1, r3
 8011518:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801151c:	e7eb      	b.n	80114f6 <__swhatbuf_r+0x22>

0801151e <__smakebuf_r>:
 801151e:	898b      	ldrh	r3, [r1, #12]
 8011520:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011522:	079d      	lsls	r5, r3, #30
 8011524:	4606      	mov	r6, r0
 8011526:	460c      	mov	r4, r1
 8011528:	d507      	bpl.n	801153a <__smakebuf_r+0x1c>
 801152a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801152e:	6023      	str	r3, [r4, #0]
 8011530:	6123      	str	r3, [r4, #16]
 8011532:	2301      	movs	r3, #1
 8011534:	6163      	str	r3, [r4, #20]
 8011536:	b003      	add	sp, #12
 8011538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801153a:	ab01      	add	r3, sp, #4
 801153c:	466a      	mov	r2, sp
 801153e:	f7ff ffc9 	bl	80114d4 <__swhatbuf_r>
 8011542:	9f00      	ldr	r7, [sp, #0]
 8011544:	4605      	mov	r5, r0
 8011546:	4630      	mov	r0, r6
 8011548:	4639      	mov	r1, r7
 801154a:	f7ff f965 	bl	8010818 <_malloc_r>
 801154e:	b948      	cbnz	r0, 8011564 <__smakebuf_r+0x46>
 8011550:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011554:	059a      	lsls	r2, r3, #22
 8011556:	d4ee      	bmi.n	8011536 <__smakebuf_r+0x18>
 8011558:	f023 0303 	bic.w	r3, r3, #3
 801155c:	f043 0302 	orr.w	r3, r3, #2
 8011560:	81a3      	strh	r3, [r4, #12]
 8011562:	e7e2      	b.n	801152a <__smakebuf_r+0xc>
 8011564:	89a3      	ldrh	r3, [r4, #12]
 8011566:	6020      	str	r0, [r4, #0]
 8011568:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801156c:	81a3      	strh	r3, [r4, #12]
 801156e:	9b01      	ldr	r3, [sp, #4]
 8011570:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011574:	b15b      	cbz	r3, 801158e <__smakebuf_r+0x70>
 8011576:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801157a:	4630      	mov	r0, r6
 801157c:	f000 f81e 	bl	80115bc <_isatty_r>
 8011580:	b128      	cbz	r0, 801158e <__smakebuf_r+0x70>
 8011582:	89a3      	ldrh	r3, [r4, #12]
 8011584:	f023 0303 	bic.w	r3, r3, #3
 8011588:	f043 0301 	orr.w	r3, r3, #1
 801158c:	81a3      	strh	r3, [r4, #12]
 801158e:	89a3      	ldrh	r3, [r4, #12]
 8011590:	431d      	orrs	r5, r3
 8011592:	81a5      	strh	r5, [r4, #12]
 8011594:	e7cf      	b.n	8011536 <__smakebuf_r+0x18>
	...

08011598 <_fstat_r>:
 8011598:	b538      	push	{r3, r4, r5, lr}
 801159a:	2300      	movs	r3, #0
 801159c:	4d06      	ldr	r5, [pc, #24]	@ (80115b8 <_fstat_r+0x20>)
 801159e:	4604      	mov	r4, r0
 80115a0:	4608      	mov	r0, r1
 80115a2:	4611      	mov	r1, r2
 80115a4:	602b      	str	r3, [r5, #0]
 80115a6:	f7f0 fa2c 	bl	8001a02 <_fstat>
 80115aa:	1c43      	adds	r3, r0, #1
 80115ac:	d102      	bne.n	80115b4 <_fstat_r+0x1c>
 80115ae:	682b      	ldr	r3, [r5, #0]
 80115b0:	b103      	cbz	r3, 80115b4 <_fstat_r+0x1c>
 80115b2:	6023      	str	r3, [r4, #0]
 80115b4:	bd38      	pop	{r3, r4, r5, pc}
 80115b6:	bf00      	nop
 80115b8:	200113a4 	.word	0x200113a4

080115bc <_isatty_r>:
 80115bc:	b538      	push	{r3, r4, r5, lr}
 80115be:	2300      	movs	r3, #0
 80115c0:	4d05      	ldr	r5, [pc, #20]	@ (80115d8 <_isatty_r+0x1c>)
 80115c2:	4604      	mov	r4, r0
 80115c4:	4608      	mov	r0, r1
 80115c6:	602b      	str	r3, [r5, #0]
 80115c8:	f7f0 fa2b 	bl	8001a22 <_isatty>
 80115cc:	1c43      	adds	r3, r0, #1
 80115ce:	d102      	bne.n	80115d6 <_isatty_r+0x1a>
 80115d0:	682b      	ldr	r3, [r5, #0]
 80115d2:	b103      	cbz	r3, 80115d6 <_isatty_r+0x1a>
 80115d4:	6023      	str	r3, [r4, #0]
 80115d6:	bd38      	pop	{r3, r4, r5, pc}
 80115d8:	200113a4 	.word	0x200113a4

080115dc <_malloc_usable_size_r>:
 80115dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80115e0:	1f18      	subs	r0, r3, #4
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	bfbc      	itt	lt
 80115e6:	580b      	ldrlt	r3, [r1, r0]
 80115e8:	18c0      	addlt	r0, r0, r3
 80115ea:	4770      	bx	lr

080115ec <_init>:
 80115ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115ee:	bf00      	nop
 80115f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80115f2:	bc08      	pop	{r3}
 80115f4:	469e      	mov	lr, r3
 80115f6:	4770      	bx	lr

080115f8 <_fini>:
 80115f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115fa:	bf00      	nop
 80115fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80115fe:	bc08      	pop	{r3}
 8011600:	469e      	mov	lr, r3
 8011602:	4770      	bx	lr
