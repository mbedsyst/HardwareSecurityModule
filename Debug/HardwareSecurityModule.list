
HardwareSecurityModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013270  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  080134bc  080134bc  000144bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080136c4  080136c4  00015180  2**0
                  CONTENTS
  4 .ARM          00000008  080136c4  080136c4  000146c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080136cc  080136cc  00015180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080136cc  080136cc  000146cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080136d0  080136d0  000146d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000180  20000000  080136d4  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000111a0  20000180  08013854  00015180  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  20011320  08013854  00015320  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00015180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027bb0  00000000  00000000  000151b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005176  00000000  00000000  0003cd66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e90  00000000  00000000  00041ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001763  00000000  00000000  00043d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007f18  00000000  00000000  000454d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b3d5  00000000  00000000  0004d3eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014bf3c  00000000  00000000  000787c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c46fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b80  00000000  00000000  001c4740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  001cd2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000180 	.word	0x20000180
 8000268:	00000000 	.word	0x00000000
 800026c:	080134a4 	.word	0x080134a4

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000184 	.word	0x20000184
 8000288:	080134a4 	.word	0x080134a4

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295
 800029c:	f04f 30ff 	movne.w	r0, #4294967295
 80002a0:	f000 b97e 	b.w	80005a0 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002c2:	460c      	mov	r4, r1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d14d      	bne.n	8000364 <__udivmoddi4+0xa8>
 80002c8:	428a      	cmp	r2, r1
 80002ca:	460f      	mov	r7, r1
 80002cc:	4684      	mov	ip, r0
 80002ce:	4696      	mov	lr, r2
 80002d0:	fab2 f382 	clz	r3, r2
 80002d4:	d960      	bls.n	8000398 <__udivmoddi4+0xdc>
 80002d6:	b14b      	cbz	r3, 80002ec <__udivmoddi4+0x30>
 80002d8:	fa02 fe03 	lsl.w	lr, r2, r3
 80002dc:	f1c3 0220 	rsb	r2, r3, #32
 80002e0:	409f      	lsls	r7, r3
 80002e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002f0:	fa1f f48e 	uxth.w	r4, lr
 80002f4:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002f8:	fbb7 f1f6 	udiv	r1, r7, r6
 80002fc:	fb06 7711 	mls	r7, r6, r1, r7
 8000300:	fb01 f004 	mul.w	r0, r1, r4
 8000304:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000308:	4290      	cmp	r0, r2
 800030a:	d908      	bls.n	800031e <__udivmoddi4+0x62>
 800030c:	eb1e 0202 	adds.w	r2, lr, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x60>
 8000316:	4290      	cmp	r0, r2
 8000318:	f200 812d 	bhi.w	8000576 <__udivmoddi4+0x2ba>
 800031c:	4639      	mov	r1, r7
 800031e:	1a12      	subs	r2, r2, r0
 8000320:	fa1f fc8c 	uxth.w	ip, ip
 8000324:	fbb2 f0f6 	udiv	r0, r2, r6
 8000328:	fb06 2210 	mls	r2, r6, r0, r2
 800032c:	fb00 f404 	mul.w	r4, r0, r4
 8000330:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000334:	4564      	cmp	r4, ip
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x8e>
 8000338:	eb1e 0c0c 	adds.w	ip, lr, ip
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x8c>
 8000342:	4564      	cmp	r4, ip
 8000344:	f200 811a 	bhi.w	800057c <__udivmoddi4+0x2c0>
 8000348:	4610      	mov	r0, r2
 800034a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034e:	ebac 0c04 	sub.w	ip, ip, r4
 8000352:	2100      	movs	r1, #0
 8000354:	b125      	cbz	r5, 8000360 <__udivmoddi4+0xa4>
 8000356:	fa2c f303 	lsr.w	r3, ip, r3
 800035a:	2200      	movs	r2, #0
 800035c:	e9c5 3200 	strd	r3, r2, [r5]
 8000360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d905      	bls.n	8000374 <__udivmoddi4+0xb8>
 8000368:	b10d      	cbz	r5, 800036e <__udivmoddi4+0xb2>
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	2100      	movs	r1, #0
 8000370:	4608      	mov	r0, r1
 8000372:	e7f5      	b.n	8000360 <__udivmoddi4+0xa4>
 8000374:	fab3 f183 	clz	r1, r3
 8000378:	2900      	cmp	r1, #0
 800037a:	d14d      	bne.n	8000418 <__udivmoddi4+0x15c>
 800037c:	42a3      	cmp	r3, r4
 800037e:	f0c0 80f2 	bcc.w	8000566 <__udivmoddi4+0x2aa>
 8000382:	4290      	cmp	r0, r2
 8000384:	f080 80ef 	bcs.w	8000566 <__udivmoddi4+0x2aa>
 8000388:	4606      	mov	r6, r0
 800038a:	4623      	mov	r3, r4
 800038c:	4608      	mov	r0, r1
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e6      	beq.n	8000360 <__udivmoddi4+0xa4>
 8000392:	e9c5 6300 	strd	r6, r3, [r5]
 8000396:	e7e3      	b.n	8000360 <__udivmoddi4+0xa4>
 8000398:	2b00      	cmp	r3, #0
 800039a:	f040 80a2 	bne.w	80004e2 <__udivmoddi4+0x226>
 800039e:	1a8a      	subs	r2, r1, r2
 80003a0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003a4:	fa1f f68e 	uxth.w	r6, lr
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 f4f7 	udiv	r4, r2, r7
 80003ae:	fb07 2014 	mls	r0, r7, r4, r2
 80003b2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb06 f004 	mul.w	r0, r6, r4
 80003be:	4290      	cmp	r0, r2
 80003c0:	d90f      	bls.n	80003e2 <__udivmoddi4+0x126>
 80003c2:	eb1e 0202 	adds.w	r2, lr, r2
 80003c6:	f104 38ff 	add.w	r8, r4, #4294967295
 80003ca:	bf2c      	ite	cs
 80003cc:	f04f 0901 	movcs.w	r9, #1
 80003d0:	f04f 0900 	movcc.w	r9, #0
 80003d4:	4290      	cmp	r0, r2
 80003d6:	d903      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003d8:	f1b9 0f00 	cmp.w	r9, #0
 80003dc:	f000 80c8 	beq.w	8000570 <__udivmoddi4+0x2b4>
 80003e0:	4644      	mov	r4, r8
 80003e2:	1a12      	subs	r2, r2, r0
 80003e4:	fa1f fc8c 	uxth.w	ip, ip
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	fb00 f606 	mul.w	r6, r0, r6
 80003f4:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003f8:	4566      	cmp	r6, ip
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x152>
 80003fc:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x150>
 8000406:	4566      	cmp	r6, ip
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c6>
 800040c:	4610      	mov	r0, r2
 800040e:	ebac 0c06 	sub.w	ip, ip, r6
 8000412:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000416:	e79d      	b.n	8000354 <__udivmoddi4+0x98>
 8000418:	f1c1 0620 	rsb	r6, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	fa20 fc06 	lsr.w	ip, r0, r6
 800042a:	40f4      	lsrs	r4, r6
 800042c:	408a      	lsls	r2, r1
 800042e:	431f      	orrs	r7, r3
 8000430:	ea4e 030c 	orr.w	r3, lr, ip
 8000434:	fa00 fe01 	lsl.w	lr, r0, r1
 8000438:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800043c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000440:	fa1f fc87 	uxth.w	ip, r7
 8000444:	fbb4 f0f8 	udiv	r0, r4, r8
 8000448:	fb08 4410 	mls	r4, r8, r0, r4
 800044c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000450:	fb00 f90c 	mul.w	r9, r0, ip
 8000454:	45a1      	cmp	r9, r4
 8000456:	d90e      	bls.n	8000476 <__udivmoddi4+0x1ba>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f100 3aff 	add.w	sl, r0, #4294967295
 800045e:	bf2c      	ite	cs
 8000460:	f04f 0b01 	movcs.w	fp, #1
 8000464:	f04f 0b00 	movcc.w	fp, #0
 8000468:	45a1      	cmp	r9, r4
 800046a:	d903      	bls.n	8000474 <__udivmoddi4+0x1b8>
 800046c:	f1bb 0f00 	cmp.w	fp, #0
 8000470:	f000 8093 	beq.w	800059a <__udivmoddi4+0x2de>
 8000474:	4650      	mov	r0, sl
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000482:	fb08 4413 	mls	r4, r8, r3, r4
 8000486:	fb03 fc0c 	mul.w	ip, r3, ip
 800048a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048e:	45a4      	cmp	ip, r4
 8000490:	d906      	bls.n	80004a0 <__udivmoddi4+0x1e4>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 38ff 	add.w	r8, r3, #4294967295
 8000498:	d201      	bcs.n	800049e <__udivmoddi4+0x1e2>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d87a      	bhi.n	8000594 <__udivmoddi4+0x2d8>
 800049e:	4643      	mov	r3, r8
 80004a0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a4:	eba4 040c 	sub.w	r4, r4, ip
 80004a8:	fba0 9802 	umull	r9, r8, r0, r2
 80004ac:	4544      	cmp	r4, r8
 80004ae:	46cc      	mov	ip, r9
 80004b0:	4643      	mov	r3, r8
 80004b2:	d302      	bcc.n	80004ba <__udivmoddi4+0x1fe>
 80004b4:	d106      	bne.n	80004c4 <__udivmoddi4+0x208>
 80004b6:	45ce      	cmp	lr, r9
 80004b8:	d204      	bcs.n	80004c4 <__udivmoddi4+0x208>
 80004ba:	3801      	subs	r0, #1
 80004bc:	ebb9 0c02 	subs.w	ip, r9, r2
 80004c0:	eb68 0307 	sbc.w	r3, r8, r7
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x222>
 80004c6:	ebbe 020c 	subs.w	r2, lr, ip
 80004ca:	eb64 0403 	sbc.w	r4, r4, r3
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	40cc      	lsrs	r4, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e73e      	b.n	8000360 <__udivmoddi4+0xa4>
 80004e2:	fa02 fe03 	lsl.w	lr, r2, r3
 80004e6:	f1c3 0120 	rsb	r1, r3, #32
 80004ea:	fa04 f203 	lsl.w	r2, r4, r3
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	40cc      	lsrs	r4, r1
 80004f4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004f8:	fa20 f101 	lsr.w	r1, r0, r1
 80004fc:	fa1f f68e 	uxth.w	r6, lr
 8000500:	fbb4 f0f7 	udiv	r0, r4, r7
 8000504:	430a      	orrs	r2, r1
 8000506:	fb07 4410 	mls	r4, r7, r0, r4
 800050a:	0c11      	lsrs	r1, r2, #16
 800050c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000510:	fb00 f406 	mul.w	r4, r0, r6
 8000514:	428c      	cmp	r4, r1
 8000516:	d90e      	bls.n	8000536 <__udivmoddi4+0x27a>
 8000518:	eb1e 0101 	adds.w	r1, lr, r1
 800051c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000520:	bf2c      	ite	cs
 8000522:	f04f 0901 	movcs.w	r9, #1
 8000526:	f04f 0900 	movcc.w	r9, #0
 800052a:	428c      	cmp	r4, r1
 800052c:	d902      	bls.n	8000534 <__udivmoddi4+0x278>
 800052e:	f1b9 0f00 	cmp.w	r9, #0
 8000532:	d02c      	beq.n	800058e <__udivmoddi4+0x2d2>
 8000534:	4640      	mov	r0, r8
 8000536:	1b09      	subs	r1, r1, r4
 8000538:	b292      	uxth	r2, r2
 800053a:	fbb1 f4f7 	udiv	r4, r1, r7
 800053e:	fb07 1114 	mls	r1, r7, r4, r1
 8000542:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000546:	fb04 f106 	mul.w	r1, r4, r6
 800054a:	4291      	cmp	r1, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x2a2>
 800054e:	eb1e 0202 	adds.w	r2, lr, r2
 8000552:	f104 38ff 	add.w	r8, r4, #4294967295
 8000556:	d201      	bcs.n	800055c <__udivmoddi4+0x2a0>
 8000558:	4291      	cmp	r1, r2
 800055a:	d815      	bhi.n	8000588 <__udivmoddi4+0x2cc>
 800055c:	4644      	mov	r4, r8
 800055e:	1a52      	subs	r2, r2, r1
 8000560:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000564:	e721      	b.n	80003aa <__udivmoddi4+0xee>
 8000566:	1a86      	subs	r6, r0, r2
 8000568:	eb64 0303 	sbc.w	r3, r4, r3
 800056c:	2001      	movs	r0, #1
 800056e:	e70e      	b.n	800038e <__udivmoddi4+0xd2>
 8000570:	3c02      	subs	r4, #2
 8000572:	4472      	add	r2, lr
 8000574:	e735      	b.n	80003e2 <__udivmoddi4+0x126>
 8000576:	3902      	subs	r1, #2
 8000578:	4472      	add	r2, lr
 800057a:	e6d0      	b.n	800031e <__udivmoddi4+0x62>
 800057c:	44f4      	add	ip, lr
 800057e:	3802      	subs	r0, #2
 8000580:	e6e3      	b.n	800034a <__udivmoddi4+0x8e>
 8000582:	44f4      	add	ip, lr
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x152>
 8000588:	3c02      	subs	r4, #2
 800058a:	4472      	add	r2, lr
 800058c:	e7e7      	b.n	800055e <__udivmoddi4+0x2a2>
 800058e:	3802      	subs	r0, #2
 8000590:	4471      	add	r1, lr
 8000592:	e7d0      	b.n	8000536 <__udivmoddi4+0x27a>
 8000594:	3b02      	subs	r3, #2
 8000596:	443c      	add	r4, r7
 8000598:	e782      	b.n	80004a0 <__udivmoddi4+0x1e4>
 800059a:	3802      	subs	r0, #2
 800059c:	443c      	add	r4, r7
 800059e:	e76a      	b.n	8000476 <__udivmoddi4+0x1ba>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <W25Q_Delay>:
#define W25Q_SPI hspi1

#define numBLOCK 32

void W25Q_Delay(uint32_t time)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	HAL_Delay(time);
 80005ac:	6878      	ldr	r0, [r7, #4]
 80005ae:	f002 f985 	bl	80028bc <HAL_Delay>
}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
	...

080005bc <csLOW>:

void csLOW (void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005c6:	4802      	ldr	r0, [pc, #8]	@ (80005d0 <csLOW+0x14>)
 80005c8:	f002 fd06 	bl	8002fd8 <HAL_GPIO_WritePin>
}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	42020c00 	.word	0x42020c00

080005d4 <csHIGH>:

void csHIGH (void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005de:	4802      	ldr	r0, [pc, #8]	@ (80005e8 <csHIGH+0x14>)
 80005e0:	f002 fcfa 	bl	8002fd8 <HAL_GPIO_WritePin>
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	42020c00 	.word	0x42020c00

080005ec <SPI_Write>:

void SPI_Write(uint8_t *data, uint8_t len)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	460b      	mov	r3, r1
 80005f6:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(&W25Q_SPI, data, len, 2000);
 80005f8:	78fb      	ldrb	r3, [r7, #3]
 80005fa:	b29a      	uxth	r2, r3
 80005fc:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000600:	6879      	ldr	r1, [r7, #4]
 8000602:	4803      	ldr	r0, [pc, #12]	@ (8000610 <SPI_Write+0x24>)
 8000604:	f00b febe 	bl	800c384 <HAL_SPI_Transmit>
}
 8000608:	bf00      	nop
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000284 	.word	0x20000284

08000614 <SPI_Read>:

void SPI_Read(uint8_t *data, uint32_t len)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	6039      	str	r1, [r7, #0]
	HAL_SPI_Receive(&W25Q_SPI, data, len, 5000);
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	b29a      	uxth	r2, r3
 8000622:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000626:	6879      	ldr	r1, [r7, #4]
 8000628:	4803      	ldr	r0, [pc, #12]	@ (8000638 <SPI_Read+0x24>)
 800062a:	f00c f8e3 	bl	800c7f4 <HAL_SPI_Receive>
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000284 	.word	0x20000284

0800063c <W25Q_Reset>:


void W25Q_Reset (void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
	uint8_t tData[2];
	tData[0] = 0x66;
 8000642:	2366      	movs	r3, #102	@ 0x66
 8000644:	713b      	strb	r3, [r7, #4]
	tData[1] = 0x99;
 8000646:	2399      	movs	r3, #153	@ 0x99
 8000648:	717b      	strb	r3, [r7, #5]
	csLOW();
 800064a:	f7ff ffb7 	bl	80005bc <csLOW>
	SPI_Write(tData, 2);
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	2102      	movs	r1, #2
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff ffca 	bl	80005ec <SPI_Write>
	csHIGH();
 8000658:	f7ff ffbc 	bl	80005d4 <csHIGH>
	W25Q_Delay(100);
 800065c:	2064      	movs	r0, #100	@ 0x64
 800065e:	f7ff ffa1 	bl	80005a4 <W25Q_Delay>
}
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}

0800066a <W25Q_Read>:
	csHIGH();
	return ((rData[0]<<16)|(rData[1]<<8)|rData[2]);
}

void W25Q_Read (uint32_t startPage, uint8_t offset, uint32_t size, uint8_t *rData)
{
 800066a:	b580      	push	{r7, lr}
 800066c:	b088      	sub	sp, #32
 800066e:	af00      	add	r7, sp, #0
 8000670:	60f8      	str	r0, [r7, #12]
 8000672:	607a      	str	r2, [r7, #4]
 8000674:	603b      	str	r3, [r7, #0]
 8000676:	460b      	mov	r3, r1
 8000678:	72fb      	strb	r3, [r7, #11]
	uint8_t tData[5];
	uint32_t memAddr = (startPage*256) + offset;
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	021a      	lsls	r2, r3, #8
 800067e:	7afb      	ldrb	r3, [r7, #11]
 8000680:	4413      	add	r3, r2
 8000682:	61fb      	str	r3, [r7, #28]

	if (numBLOCK<512)   // Chip Size<256Mb
	{
		tData[0] = 0x03;  // enable Read
 8000684:	2303      	movs	r3, #3
 8000686:	753b      	strb	r3, [r7, #20]
		tData[1] = (memAddr>>16)&0xFF;  // MSB of the memory Address
 8000688:	69fb      	ldr	r3, [r7, #28]
 800068a:	0c1b      	lsrs	r3, r3, #16
 800068c:	b2db      	uxtb	r3, r3
 800068e:	757b      	strb	r3, [r7, #21]
		tData[2] = (memAddr>>8)&0xFF;
 8000690:	69fb      	ldr	r3, [r7, #28]
 8000692:	0a1b      	lsrs	r3, r3, #8
 8000694:	b2db      	uxtb	r3, r3
 8000696:	75bb      	strb	r3, [r7, #22]
		tData[3] = (memAddr)&0xFF; // LSB of the memory Address
 8000698:	69fb      	ldr	r3, [r7, #28]
 800069a:	b2db      	uxtb	r3, r3
 800069c:	75fb      	strb	r3, [r7, #23]
		tData[2] = (memAddr>>16)&0xFF;
		tData[3] = (memAddr>>8)&0xFF;
		tData[4] = (memAddr)&0xFF; // LSB of the memory Address
	}

	csLOW();  // pull the CS Low
 800069e:	f7ff ff8d 	bl	80005bc <csLOW>
	if (numBLOCK<512)
	{
		SPI_Write(tData, 4);  // send read instruction along with the 24 bit memory address
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	2104      	movs	r1, #4
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff ff9f 	bl	80005ec <SPI_Write>
	else
	{
		SPI_Write(tData, 5);  // send read instruction along with the 32 bit memory address
	}

	SPI_Read(rData, size);  // Read the data
 80006ae:	6879      	ldr	r1, [r7, #4]
 80006b0:	6838      	ldr	r0, [r7, #0]
 80006b2:	f7ff ffaf 	bl	8000614 <SPI_Read>
	csHIGH();  // pull the CS High
 80006b6:	f7ff ff8d 	bl	80005d4 <csHIGH>
}
 80006ba:	bf00      	nop
 80006bc:	3720      	adds	r7, #32
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}

080006c2 <W25Q_FastRead>:

void W25Q_FastRead (uint32_t startPage, uint8_t offset, uint32_t size, uint8_t *rData)
{
 80006c2:	b580      	push	{r7, lr}
 80006c4:	b088      	sub	sp, #32
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	60f8      	str	r0, [r7, #12]
 80006ca:	607a      	str	r2, [r7, #4]
 80006cc:	603b      	str	r3, [r7, #0]
 80006ce:	460b      	mov	r3, r1
 80006d0:	72fb      	strb	r3, [r7, #11]
	uint8_t tData[6];
	uint32_t memAddr = (startPage*256) + offset;
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	021a      	lsls	r2, r3, #8
 80006d6:	7afb      	ldrb	r3, [r7, #11]
 80006d8:	4413      	add	r3, r2
 80006da:	61fb      	str	r3, [r7, #28]

	if (numBLOCK<512)   // Chip Size<256Mb
	{
		tData[0] = 0x0B;  // enable Fast Read
 80006dc:	230b      	movs	r3, #11
 80006de:	753b      	strb	r3, [r7, #20]
		tData[1] = (memAddr>>16)&0xFF;  // MSB of the memory Address
 80006e0:	69fb      	ldr	r3, [r7, #28]
 80006e2:	0c1b      	lsrs	r3, r3, #16
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	757b      	strb	r3, [r7, #21]
		tData[2] = (memAddr>>8)&0xFF;
 80006e8:	69fb      	ldr	r3, [r7, #28]
 80006ea:	0a1b      	lsrs	r3, r3, #8
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	75bb      	strb	r3, [r7, #22]
		tData[3] = (memAddr)&0xFF; // LSB of the memory Address
 80006f0:	69fb      	ldr	r3, [r7, #28]
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	75fb      	strb	r3, [r7, #23]
		tData[4] = 0;  // Dummy clock
 80006f6:	2300      	movs	r3, #0
 80006f8:	763b      	strb	r3, [r7, #24]
		tData[3] = (memAddr>>8)&0xFF;
		tData[4] = (memAddr)&0xFF; // LSB of the memory Address
		tData[5] = 0;  // Dummy clock
	}

	csLOW();  // pull the CS Low
 80006fa:	f7ff ff5f 	bl	80005bc <csLOW>
	if (numBLOCK<512)
	{
		SPI_Write(tData, 5);  // send read instruction along with the 24 bit memory address
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	2105      	movs	r1, #5
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ff71 	bl	80005ec <SPI_Write>
	else
	{
		SPI_Write(tData, 6);  // send read instruction along with the 32 bit memory address
	}

	SPI_Read(rData, size);  // Read the data
 800070a:	6879      	ldr	r1, [r7, #4]
 800070c:	6838      	ldr	r0, [r7, #0]
 800070e:	f7ff ff81 	bl	8000614 <SPI_Read>
	csHIGH();  // pull the CS High
 8000712:	f7ff ff5f 	bl	80005d4 <csHIGH>
}
 8000716:	bf00      	nop
 8000718:	3720      	adds	r7, #32
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <write_enable>:

void write_enable (void)
{
 800071e:	b580      	push	{r7, lr}
 8000720:	b082      	sub	sp, #8
 8000722:	af00      	add	r7, sp, #0
	uint8_t tData = 0x06;  // enable write
 8000724:	2306      	movs	r3, #6
 8000726:	71fb      	strb	r3, [r7, #7]
	csLOW();
 8000728:	f7ff ff48 	bl	80005bc <csLOW>
	SPI_Write(&tData, 1);
 800072c:	1dfb      	adds	r3, r7, #7
 800072e:	2101      	movs	r1, #1
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff ff5b 	bl	80005ec <SPI_Write>
	csHIGH();
 8000736:	f7ff ff4d 	bl	80005d4 <csHIGH>
	W25Q_Delay(5);  // 5ms delay
 800073a:	2005      	movs	r0, #5
 800073c:	f7ff ff32 	bl	80005a4 <W25Q_Delay>
}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <write_disable>:

void write_disable(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
	uint8_t tData = 0x04;  // disable write
 800074e:	2304      	movs	r3, #4
 8000750:	71fb      	strb	r3, [r7, #7]
	csLOW();
 8000752:	f7ff ff33 	bl	80005bc <csLOW>
	SPI_Write(&tData, 1);
 8000756:	1dfb      	adds	r3, r7, #7
 8000758:	2101      	movs	r1, #1
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff46 	bl	80005ec <SPI_Write>
	csHIGH();
 8000760:	f7ff ff38 	bl	80005d4 <csHIGH>
	W25Q_Delay(5);  // 5ms delay
 8000764:	2005      	movs	r0, #5
 8000766:	f7ff ff1d 	bl	80005a4 <W25Q_Delay>
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}

08000772 <bytestowriteFLASH>:

uint32_t bytestowriteFLASH (uint32_t size, uint16_t offset)
{
 8000772:	b480      	push	{r7}
 8000774:	b083      	sub	sp, #12
 8000776:	af00      	add	r7, sp, #0
 8000778:	6078      	str	r0, [r7, #4]
 800077a:	460b      	mov	r3, r1
 800077c:	807b      	strh	r3, [r7, #2]
	if ((size+offset)<256) return size;
 800077e:	887a      	ldrh	r2, [r7, #2]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4413      	add	r3, r2
 8000784:	2bff      	cmp	r3, #255	@ 0xff
 8000786:	d801      	bhi.n	800078c <bytestowriteFLASH+0x1a>
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	e002      	b.n	8000792 <bytestowriteFLASH+0x20>
	else return 256-offset;
 800078c:	887b      	ldrh	r3, [r7, #2]
 800078e:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
}
 8000792:	4618      	mov	r0, r3
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr

0800079e <bytestomodify>:

uint32_t bytestomodify (uint32_t size, uint16_t offset)
{
 800079e:	b480      	push	{r7}
 80007a0:	b083      	sub	sp, #12
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	6078      	str	r0, [r7, #4]
 80007a6:	460b      	mov	r3, r1
 80007a8:	807b      	strh	r3, [r7, #2]
	if ((size+offset)<4096) return size;
 80007aa:	887a      	ldrh	r2, [r7, #2]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	4413      	add	r3, r2
 80007b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80007b4:	d201      	bcs.n	80007ba <bytestomodify+0x1c>
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	e002      	b.n	80007c0 <bytestomodify+0x22>
	else return 4096-offset;
 80007ba:	887b      	ldrh	r3, [r7, #2]
 80007bc:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <W25Q_Erase_Sector>:

void W25Q_Erase_Sector (uint16_t numsector)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	80fb      	strh	r3, [r7, #6]
	uint8_t tData[6];
	uint32_t memAddr = numsector*16*256;   // Each sector contains 16 pages * 256 bytes
 80007d6:	88fb      	ldrh	r3, [r7, #6]
 80007d8:	031b      	lsls	r3, r3, #12
 80007da:	617b      	str	r3, [r7, #20]

	write_enable();
 80007dc:	f7ff ff9f 	bl	800071e <write_enable>

	if (numBLOCK<512)   // Chip Size<256Mb
	{
		tData[0] = 0x20;  // Erase sector
 80007e0:	2320      	movs	r3, #32
 80007e2:	733b      	strb	r3, [r7, #12]
		tData[1] = (memAddr>>16)&0xFF;  // MSB of the memory Address
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	0c1b      	lsrs	r3, r3, #16
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	737b      	strb	r3, [r7, #13]
		tData[2] = (memAddr>>8)&0xFF;
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	0a1b      	lsrs	r3, r3, #8
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	73bb      	strb	r3, [r7, #14]
		tData[3] = (memAddr)&0xFF; // LSB of the memory Address
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	73fb      	strb	r3, [r7, #15]

		csLOW();
 80007fa:	f7ff fedf 	bl	80005bc <csLOW>
		SPI_Write(tData, 4);
 80007fe:	f107 030c 	add.w	r3, r7, #12
 8000802:	2104      	movs	r1, #4
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff fef1 	bl	80005ec <SPI_Write>
		csHIGH();
 800080a:	f7ff fee3 	bl	80005d4 <csHIGH>
		csLOW();  // pull the CS LOW
		SPI_Write(tData, 5);
		csHIGH();  // pull the HIGH
	}

	W25Q_Delay(450);  // 450ms delay for sector erase
 800080e:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000812:	f7ff fec7 	bl	80005a4 <W25Q_Delay>

	write_disable();
 8000816:	f7ff ff97 	bl	8000748 <write_disable>

}
 800081a:	bf00      	nop
 800081c:	3718      	adds	r7, #24
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <W25Q_Write_Clean>:


void W25Q_Write_Clean (uint32_t page, uint16_t offset, uint32_t size, uint8_t *data)
{
 8000822:	b590      	push	{r4, r7, lr}
 8000824:	b0d3      	sub	sp, #332	@ 0x14c
 8000826:	af00      	add	r7, sp, #0
 8000828:	f507 74a4 	add.w	r4, r7, #328	@ 0x148
 800082c:	f5a4 749e 	sub.w	r4, r4, #316	@ 0x13c
 8000830:	6020      	str	r0, [r4, #0]
 8000832:	4608      	mov	r0, r1
 8000834:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 8000838:	f5a1 71a2 	sub.w	r1, r1, #324	@ 0x144
 800083c:	600a      	str	r2, [r1, #0]
 800083e:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8000842:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 8000846:	6013      	str	r3, [r2, #0]
 8000848:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800084c:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8000850:	4602      	mov	r2, r0
 8000852:	801a      	strh	r2, [r3, #0]
	uint8_t tData[266];
	uint32_t startPage = page;
 8000854:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000858:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
	uint32_t endPage  = startPage + ((size+offset-1)/256);
 8000862:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000866:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 800086a:	881a      	ldrh	r2, [r3, #0]
 800086c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000870:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4413      	add	r3, r2
 8000878:	3b01      	subs	r3, #1
 800087a:	0a1b      	lsrs	r3, r3, #8
 800087c:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8000880:	4413      	add	r3, r2
 8000882:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	uint32_t numPages = endPage-startPage+1;
 8000886:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800088a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800088e:	1ad3      	subs	r3, r2, r3
 8000890:	3301      	adds	r3, #1
 8000892:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128

	uint16_t startSector  = startPage/16;
 8000896:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800089a:	091b      	lsrs	r3, r3, #4
 800089c:	f8a7 3142 	strh.w	r3, [r7, #322]	@ 0x142
	uint16_t endSector  = endPage/16;
 80008a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80008a4:	091b      	lsrs	r3, r3, #4
 80008a6:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
	uint16_t numSectors = endSector-startSector+1;
 80008aa:	f8b7 2126 	ldrh.w	r2, [r7, #294]	@ 0x126
 80008ae:	f8b7 3142 	ldrh.w	r3, [r7, #322]	@ 0x142
 80008b2:	1ad3      	subs	r3, r2, r3
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	3301      	adds	r3, #1
 80008b8:	f8a7 3124 	strh.w	r3, [r7, #292]	@ 0x124
	for (uint16_t i=0; i<numSectors; i++)
 80008bc:	2300      	movs	r3, #0
 80008be:	f8a7 3140 	strh.w	r3, [r7, #320]	@ 0x140
 80008c2:	e00c      	b.n	80008de <W25Q_Write_Clean+0xbc>
	{
		W25Q_Erase_Sector(startSector++);
 80008c4:	f8b7 3142 	ldrh.w	r3, [r7, #322]	@ 0x142
 80008c8:	1c5a      	adds	r2, r3, #1
 80008ca:	f8a7 2142 	strh.w	r2, [r7, #322]	@ 0x142
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff ff7c 	bl	80007cc <W25Q_Erase_Sector>
	for (uint16_t i=0; i<numSectors; i++)
 80008d4:	f8b7 3140 	ldrh.w	r3, [r7, #320]	@ 0x140
 80008d8:	3301      	adds	r3, #1
 80008da:	f8a7 3140 	strh.w	r3, [r7, #320]	@ 0x140
 80008de:	f8b7 2140 	ldrh.w	r2, [r7, #320]	@ 0x140
 80008e2:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 80008e6:	429a      	cmp	r2, r3
 80008e8:	d3ec      	bcc.n	80008c4 <W25Q_Write_Clean+0xa2>
	}

	uint32_t dataPosition = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c

	// write the data
	for (uint32_t i=0; i<numPages; i++)
 80008f0:	2300      	movs	r3, #0
 80008f2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80008f6:	e0c0      	b.n	8000a7a <W25Q_Write_Clean+0x258>
	{
		uint32_t memAddr = (startPage*256)+offset;
 80008f8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80008fc:	021a      	lsls	r2, r3, #8
 80008fe:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000902:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8000906:	881b      	ldrh	r3, [r3, #0]
 8000908:	4413      	add	r3, r2
 800090a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
		uint16_t bytesremaining  = bytestowriteFLASH(size, offset);
 800090e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000912:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8000916:	881a      	ldrh	r2, [r3, #0]
 8000918:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800091c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000920:	4611      	mov	r1, r2
 8000922:	6818      	ldr	r0, [r3, #0]
 8000924:	f7ff ff25 	bl	8000772 <bytestowriteFLASH>
 8000928:	4603      	mov	r3, r0
 800092a:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
		uint32_t indx = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134

		write_enable();
 8000934:	f7ff fef3 	bl	800071e <write_enable>

		if (numBLOCK<512)   // Chip Size<256Mb
		{
			tData[0] = 0x02;  // page program
 8000938:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800093c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000940:	2202      	movs	r2, #2
 8000942:	701a      	strb	r2, [r3, #0]
			tData[1] = (memAddr>>16)&0xFF;  // MSB of the memory Address
 8000944:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000948:	0c1b      	lsrs	r3, r3, #16
 800094a:	b2da      	uxtb	r2, r3
 800094c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000950:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000954:	705a      	strb	r2, [r3, #1]
			tData[2] = (memAddr>>8)&0xFF;
 8000956:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800095a:	0a1b      	lsrs	r3, r3, #8
 800095c:	b2da      	uxtb	r2, r3
 800095e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000962:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000966:	709a      	strb	r2, [r3, #2]
			tData[3] = (memAddr)&0xFF; // LSB of the memory Address
 8000968:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800096c:	b2da      	uxtb	r2, r3
 800096e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000972:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000976:	70da      	strb	r2, [r3, #3]

			indx = 4;
 8000978:	2304      	movs	r3, #4
 800097a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
			tData[4] = (memAddr)&0xFF; // LSB of the memory Address

			indx = 5;
		}

		uint16_t bytestosend  = bytesremaining + indx;
 800097e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000982:	b29a      	uxth	r2, r3
 8000984:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 8000988:	4413      	add	r3, r2
 800098a:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c

		for (uint16_t i=0; i<bytesremaining; i++)
 800098e:	2300      	movs	r3, #0
 8000990:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
 8000994:	e01a      	b.n	80009cc <W25Q_Write_Clean+0x1aa>
		{
			tData[indx++] = data[i+dataPosition];
 8000996:	f8b7 2132 	ldrh.w	r2, [r7, #306]	@ 0x132
 800099a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800099e:	4413      	add	r3, r2
 80009a0:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 80009a4:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 80009a8:	6812      	ldr	r2, [r2, #0]
 80009aa:	441a      	add	r2, r3
 80009ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80009b0:	1c59      	adds	r1, r3, #1
 80009b2:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 80009b6:	7811      	ldrb	r1, [r2, #0]
 80009b8:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 80009bc:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 80009c0:	54d1      	strb	r1, [r2, r3]
		for (uint16_t i=0; i<bytesremaining; i++)
 80009c2:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 80009c6:	3301      	adds	r3, #1
 80009c8:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
 80009cc:	f8b7 2132 	ldrh.w	r2, [r7, #306]	@ 0x132
 80009d0:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d3de      	bcc.n	8000996 <W25Q_Write_Clean+0x174>
		}

		if (bytestosend > 250)
 80009d8:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 80009dc:	2bfa      	cmp	r3, #250	@ 0xfa
 80009de:	d916      	bls.n	8000a0e <W25Q_Write_Clean+0x1ec>
		{
			csLOW();
 80009e0:	f7ff fdec 	bl	80005bc <csLOW>
			SPI_Write(tData, 100);
 80009e4:	f107 0310 	add.w	r3, r7, #16
 80009e8:	2164      	movs	r1, #100	@ 0x64
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff fdfe 	bl	80005ec <SPI_Write>
			SPI_Write(tData+100, bytestosend-100);
 80009f0:	f107 0310 	add.w	r3, r7, #16
 80009f4:	3364      	adds	r3, #100	@ 0x64
 80009f6:	f8b7 211c 	ldrh.w	r2, [r7, #284]	@ 0x11c
 80009fa:	b2d2      	uxtb	r2, r2
 80009fc:	3a64      	subs	r2, #100	@ 0x64
 80009fe:	b2d2      	uxtb	r2, r2
 8000a00:	4611      	mov	r1, r2
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff fdf2 	bl	80005ec <SPI_Write>
			csHIGH();
 8000a08:	f7ff fde4 	bl	80005d4 <csHIGH>
 8000a0c:	e00c      	b.n	8000a28 <W25Q_Write_Clean+0x206>

		}

		else
		{
			csLOW();
 8000a0e:	f7ff fdd5 	bl	80005bc <csLOW>
			SPI_Write(tData, bytestosend);
 8000a12:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	f107 0310 	add.w	r3, r7, #16
 8000a1c:	4611      	mov	r1, r2
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff fde4 	bl	80005ec <SPI_Write>
			csHIGH();
 8000a24:	f7ff fdd6 	bl	80005d4 <csHIGH>
		}


		startPage++;
 8000a28:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
		offset = 0;
 8000a32:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000a36:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	801a      	strh	r2, [r3, #0]
		size = size-bytesremaining;
 8000a3e:	f8b7 211e 	ldrh.w	r2, [r7, #286]	@ 0x11e
 8000a42:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000a46:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000a4a:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 8000a4e:	f5a1 71a2 	sub.w	r1, r1, #324	@ 0x144
 8000a52:	6809      	ldr	r1, [r1, #0]
 8000a54:	1a8a      	subs	r2, r1, r2
 8000a56:	601a      	str	r2, [r3, #0]
		dataPosition = dataPosition+bytesremaining;
 8000a58:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 8000a5c:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8000a60:	4413      	add	r3, r2
 8000a62:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c

		W25Q_Delay(5);
 8000a66:	2005      	movs	r0, #5
 8000a68:	f7ff fd9c 	bl	80005a4 <W25Q_Delay>
		write_disable();
 8000a6c:	f7ff fe6c 	bl	8000748 <write_disable>
	for (uint32_t i=0; i<numPages; i++)
 8000a70:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8000a74:	3301      	adds	r3, #1
 8000a76:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8000a7a:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8000a7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000a82:	429a      	cmp	r2, r3
 8000a84:	f4ff af38 	bcc.w	80008f8 <W25Q_Write_Clean+0xd6>

	}
}
 8000a88:	bf00      	nop
 8000a8a:	bf00      	nop
 8000a8c:	f507 77a6 	add.w	r7, r7, #332	@ 0x14c
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd90      	pop	{r4, r7, pc}

08000a94 <W25Q_Write>:

void W25Q_Write (uint32_t page, uint16_t offset, uint32_t size, uint8_t *data)
{
 8000a94:	b590      	push	{r4, r7, lr}
 8000a96:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8000aa2:	f844 0c24 	str.w	r0, [r4, #-36]
 8000aa6:	4608      	mov	r0, r1
 8000aa8:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8000aac:	f841 2c2c 	str.w	r2, [r1, #-44]
 8000ab0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000ab4:	f842 3c30 	str.w	r3, [r2, #-48]
 8000ab8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000abc:	4602      	mov	r2, r0
 8000abe:	f823 2c26 	strh.w	r2, [r3, #-38]
	uint16_t startSector  = page/16;
 8000ac2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ac6:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8000aca:	091b      	lsrs	r3, r3, #4
 8000acc:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8000ad0:	f102 020e 	add.w	r2, r2, #14
 8000ad4:	8013      	strh	r3, [r2, #0]
	uint16_t endSector  = (page + ((size+offset-1)/256))/16;
 8000ad6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ada:	f833 2c26 	ldrh.w	r2, [r3, #-38]
 8000ade:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ae2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	3b01      	subs	r3, #1
 8000aea:	0a1a      	lsrs	r2, r3, #8
 8000aec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000af0:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8000af4:	4413      	add	r3, r2
 8000af6:	091b      	lsrs	r3, r3, #4
 8000af8:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000afc:	f102 021e 	add.w	r2, r2, #30
 8000b00:	8013      	strh	r3, [r2, #0]
	uint16_t numSectors = endSector-startSector+1;
 8000b02:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000b06:	f103 031e 	add.w	r3, r3, #30
 8000b0a:	881a      	ldrh	r2, [r3, #0]
 8000b0c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8000b10:	f103 030e 	add.w	r3, r3, #14
 8000b14:	881b      	ldrh	r3, [r3, #0]
 8000b16:	1ad3      	subs	r3, r2, r3
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000b20:	f102 021c 	add.w	r2, r2, #28
 8000b24:	8013      	strh	r3, [r2, #0]

	uint8_t previousData[4096];
	uint32_t sectorOffset = ((page%16)*256)+offset;
 8000b26:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b2a:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8000b2e:	f003 030f 	and.w	r3, r3, #15
 8000b32:	021a      	lsls	r2, r3, #8
 8000b34:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b38:	f833 3c26 	ldrh.w	r3, [r3, #-38]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8000b42:	f102 0208 	add.w	r2, r2, #8
 8000b46:	6013      	str	r3, [r2, #0]
	uint32_t dataindx = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8000b4e:	f102 0204 	add.w	r2, r2, #4
 8000b52:	6013      	str	r3, [r2, #0]

	for (uint16_t i=0; i<numSectors; i++)
 8000b54:	2300      	movs	r3, #0
 8000b56:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8000b5a:	f102 0202 	add.w	r2, r2, #2
 8000b5e:	8013      	strh	r3, [r2, #0]
 8000b60:	e0a5      	b.n	8000cae <W25Q_Write+0x21a>
	{
		uint32_t startPage = startSector*16;
 8000b62:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8000b66:	f103 030e 	add.w	r3, r3, #14
 8000b6a:	881b      	ldrh	r3, [r3, #0]
 8000b6c:	011b      	lsls	r3, r3, #4
 8000b6e:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000b72:	f102 0218 	add.w	r2, r2, #24
 8000b76:	6013      	str	r3, [r2, #0]
		W25Q_FastRead(startPage, 0, 4096, previousData);
 8000b78:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b7c:	3b1c      	subs	r3, #28
 8000b7e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b82:	2100      	movs	r1, #0
 8000b84:	f507 5080 	add.w	r0, r7, #4096	@ 0x1000
 8000b88:	f100 0018 	add.w	r0, r0, #24
 8000b8c:	6800      	ldr	r0, [r0, #0]
 8000b8e:	f7ff fd98 	bl	80006c2 <W25Q_FastRead>

		uint16_t bytesRemaining = bytestomodify(size, sectorOffset);
 8000b92:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8000b96:	f103 0308 	add.w	r3, r3, #8
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	f852 0c2c 	ldr.w	r0, [r2, #-44]
 8000ba8:	f7ff fdf9 	bl	800079e <bytestomodify>
 8000bac:	4603      	mov	r3, r0
 8000bae:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000bb2:	f102 0216 	add.w	r2, r2, #22
 8000bb6:	8013      	strh	r3, [r2, #0]
		for (uint16_t i=0; i<bytesRemaining; i++)
 8000bb8:	2300      	movs	r3, #0
 8000bba:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8000bbe:	8013      	strh	r3, [r2, #0]
 8000bc0:	e023      	b.n	8000c0a <W25Q_Write+0x176>
		{
			previousData[i+sectorOffset] = data[i+dataindx];
 8000bc2:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8000bc6:	881a      	ldrh	r2, [r3, #0]
 8000bc8:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8000bcc:	f103 0304 	add.w	r3, r3, #4
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000bd8:	f852 2c30 	ldr.w	r2, [r2, #-48]
 8000bdc:	441a      	add	r2, r3
 8000bde:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8000be2:	8819      	ldrh	r1, [r3, #0]
 8000be4:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8000be8:	f103 0308 	add.w	r3, r3, #8
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	440b      	add	r3, r1
 8000bf0:	7812      	ldrb	r2, [r2, #0]
 8000bf2:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8000bf6:	440b      	add	r3, r1
 8000bf8:	f803 2c1c 	strb.w	r2, [r3, #-28]
		for (uint16_t i=0; i<bytesRemaining; i++)
 8000bfc:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8000c00:	881b      	ldrh	r3, [r3, #0]
 8000c02:	3301      	adds	r3, #1
 8000c04:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8000c08:	8013      	strh	r3, [r2, #0]
 8000c0a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8000c0e:	881a      	ldrh	r2, [r3, #0]
 8000c10:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000c14:	f103 0316 	add.w	r3, r3, #22
 8000c18:	881b      	ldrh	r3, [r3, #0]
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	d3d1      	bcc.n	8000bc2 <W25Q_Write+0x12e>
		}

		W25Q_Write_Clean(startPage, 0, 4096, previousData);
 8000c1e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c22:	3b1c      	subs	r3, #28
 8000c24:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c28:	2100      	movs	r1, #0
 8000c2a:	f507 5080 	add.w	r0, r7, #4096	@ 0x1000
 8000c2e:	f100 0018 	add.w	r0, r0, #24
 8000c32:	6800      	ldr	r0, [r0, #0]
 8000c34:	f7ff fdf5 	bl	8000822 <W25Q_Write_Clean>

		startSector++;
 8000c38:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8000c3c:	f103 030e 	add.w	r3, r3, #14
 8000c40:	881b      	ldrh	r3, [r3, #0]
 8000c42:	3301      	adds	r3, #1
 8000c44:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8000c48:	f102 020e 	add.w	r2, r2, #14
 8000c4c:	8013      	strh	r3, [r2, #0]
		sectorOffset = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8000c54:	f102 0208 	add.w	r2, r2, #8
 8000c58:	6013      	str	r3, [r2, #0]
		dataindx = dataindx+bytesRemaining;
 8000c5a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000c5e:	f103 0316 	add.w	r3, r3, #22
 8000c62:	881b      	ldrh	r3, [r3, #0]
 8000c64:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8000c68:	f102 0204 	add.w	r2, r2, #4
 8000c6c:	6812      	ldr	r2, [r2, #0]
 8000c6e:	4413      	add	r3, r2
 8000c70:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8000c74:	f102 0204 	add.w	r2, r2, #4
 8000c78:	6013      	str	r3, [r2, #0]
		size = size-bytesRemaining;
 8000c7a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000c7e:	f103 0316 	add.w	r3, r3, #22
 8000c82:	881b      	ldrh	r3, [r3, #0]
 8000c84:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000c88:	4611      	mov	r1, r2
 8000c8a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000c8e:	f852 2c2c 	ldr.w	r2, [r2, #-44]
 8000c92:	1ad3      	subs	r3, r2, r3
 8000c94:	f841 3c2c 	str.w	r3, [r1, #-44]
	for (uint16_t i=0; i<numSectors; i++)
 8000c98:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8000c9c:	f103 0302 	add.w	r3, r3, #2
 8000ca0:	881b      	ldrh	r3, [r3, #0]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8000ca8:	f102 0202 	add.w	r2, r2, #2
 8000cac:	8013      	strh	r3, [r2, #0]
 8000cae:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8000cb2:	f103 0302 	add.w	r3, r3, #2
 8000cb6:	881a      	ldrh	r2, [r3, #0]
 8000cb8:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000cbc:	f103 031c 	add.w	r3, r3, #28
 8000cc0:	881b      	ldrh	r3, [r3, #0]
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	f4ff af4d 	bcc.w	8000b62 <W25Q_Write+0xce>
	}
}
 8000cc8:	bf00      	nop
 8000cca:	bf00      	nop
 8000ccc:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 8000cd0:	3714      	adds	r7, #20
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd90      	pop	{r4, r7, pc}
	...

08000cd8 <log_generic>:
{
    current_level = level;
}

static void log_generic(LogLevel level, const char *prefix, const char *color, const char *fmt, va_list args)
{
 8000cd8:	b590      	push	{r4, r7, lr}
 8000cda:	b0c7      	sub	sp, #284	@ 0x11c
 8000cdc:	af02      	add	r7, sp, #8
 8000cde:	4604      	mov	r4, r0
 8000ce0:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8000ce4:	f5a0 7084 	sub.w	r0, r0, #264	@ 0x108
 8000ce8:	6001      	str	r1, [r0, #0]
 8000cea:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8000cee:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8000cf2:	600a      	str	r2, [r1, #0]
 8000cf4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000cf8:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000cfc:	6013      	str	r3, [r2, #0]
 8000cfe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000d02:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8000d06:	4622      	mov	r2, r4
 8000d08:	701a      	strb	r2, [r3, #0]
    if (level < current_level)
 8000d0a:	4b16      	ldr	r3, [pc, #88]	@ (8000d64 <log_generic+0x8c>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000d12:	f2a2 1201 	subw	r2, r2, #257	@ 0x101
 8000d16:	7812      	ldrb	r2, [r2, #0]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d31e      	bcc.n	8000d5a <log_generic+0x82>
        return;

    char buffer[LOG_BUFFER_SIZE];
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000d1c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000d20:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 8000d24:	f107 0010 	add.w	r0, r7, #16
 8000d28:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000d2c:	6812      	ldr	r2, [r2, #0]
 8000d2e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d32:	f011 fc79 	bl	8012628 <vsniprintf>

    // Print directly using printf(), assumes it's redirected to VCOM via BSP
    printf("%s[%s] %s%s\r\n", color, prefix, buffer, COLOR_RESET);
 8000d36:	f107 0310 	add.w	r3, r7, #16
 8000d3a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000d3e:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8000d42:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8000d46:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8000d4a:	4807      	ldr	r0, [pc, #28]	@ (8000d68 <log_generic+0x90>)
 8000d4c:	9000      	str	r0, [sp, #0]
 8000d4e:	6812      	ldr	r2, [r2, #0]
 8000d50:	6809      	ldr	r1, [r1, #0]
 8000d52:	4806      	ldr	r0, [pc, #24]	@ (8000d6c <log_generic+0x94>)
 8000d54:	f011 fbb4 	bl	80124c0 <iprintf>
 8000d58:	e000      	b.n	8000d5c <log_generic+0x84>
        return;
 8000d5a:	bf00      	nop
}
 8000d5c:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd90      	pop	{r4, r7, pc}
 8000d64:	20000000 	.word	0x20000000
 8000d68:	080134cc 	.word	0x080134cc
 8000d6c:	080134bc 	.word	0x080134bc

08000d70 <log_info>:
    log_generic(LOG_LEVEL_DEBUG, "DEBUG", COLOR_DEBUG, fmt, args);
    va_end(args);
}

void log_info(const char *fmt, ...)
{
 8000d70:	b40f      	push	{r0, r1, r2, r3}
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b084      	sub	sp, #16
 8000d76:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_INFO, "INFO", COLOR_INFO, fmt, args);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	9300      	str	r3, [sp, #0]
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	4a05      	ldr	r2, [pc, #20]	@ (8000d9c <log_info+0x2c>)
 8000d86:	4906      	ldr	r1, [pc, #24]	@ (8000da0 <log_info+0x30>)
 8000d88:	2001      	movs	r0, #1
 8000d8a:	f7ff ffa5 	bl	8000cd8 <log_generic>
    va_end(args);
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d98:	b004      	add	sp, #16
 8000d9a:	4770      	bx	lr
 8000d9c:	080134e4 	.word	0x080134e4
 8000da0:	080134ec 	.word	0x080134ec

08000da4 <log_error>:
    log_generic(LOG_LEVEL_WARN, "WARN", COLOR_WARN, fmt, args);
    va_end(args);
}

void log_error(const char *fmt, ...)
{
 8000da4:	b40f      	push	{r0, r1, r2, r3}
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b084      	sub	sp, #16
 8000daa:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_ERROR, "ERROR", COLOR_ERROR, fmt, args);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	9300      	str	r3, [sp, #0]
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	4a05      	ldr	r2, [pc, #20]	@ (8000dd0 <log_error+0x2c>)
 8000dba:	4906      	ldr	r1, [pc, #24]	@ (8000dd4 <log_error+0x30>)
 8000dbc:	2003      	movs	r0, #3
 8000dbe:	f7ff ff8b 	bl	8000cd8 <log_generic>
    va_end(args);
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000dcc:	b004      	add	sp, #16
 8000dce:	4770      	bx	lr
 8000dd0:	08013504 	.word	0x08013504
 8000dd4:	0801350c 	.word	0x0801350c

08000dd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b0ae      	sub	sp, #184	@ 0xb8
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  uint8_t data[100] = {0};
 8000dde:	2300      	movs	r3, #0
 8000de0:	657b      	str	r3, [r7, #84]	@ 0x54
 8000de2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000de6:	2260      	movs	r2, #96	@ 0x60
 8000de8:	2100      	movs	r1, #0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f011 fc2a 	bl	8012644 <memset>
  uint8_t msg[] = "WELL, IT JUST SO HAPPENS THAT WE ARE EXPERTS AT EXTERMINATING SHITBAG SUPES.";
 8000df0:	4a8f      	ldr	r2, [pc, #572]	@ (8001030 <main+0x258>)
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	4611      	mov	r1, r2
 8000df6:	224d      	movs	r2, #77	@ 0x4d
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f011 fcae 	bl	801275a <memcpy>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dfe:	f001 fc9f 	bl	8002740 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e02:	f000 f921 	bl	8001048 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e06:	f000 fbdf 	bl	80015c8 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 8000e0a:	f000 fb7b 	bl	8001504 <MX_USB_PCD_Init>
  MX_USART2_UART_Init();
 8000e0e:	f000 fae1 	bl	80013d4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000e12:	f000 f9b1 	bl	8001178 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000e16:	f000 fa87 	bl	8001328 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 8000e1a:	f000 fb27 	bl	800146c <MX_USART6_UART_Init>
  MX_RTC_Init();
 8000e1e:	f000 fa01 	bl	8001224 <MX_RTC_Init>
  MX_RNG_Init();
 8000e22:	f000 f9e9 	bl	80011f8 <MX_RNG_Init>
  MX_HASH_Init();
 8000e26:	f000 f985 	bl	8001134 <MX_HASH_Init>
  /* USER CODE BEGIN 2 */
  while(hUsbDeviceFS.pClassData == NULL);
 8000e2a:	bf00      	nop
 8000e2c:	4b81      	ldr	r3, [pc, #516]	@ (8001034 <main+0x25c>)
 8000e2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d0fa      	beq.n	8000e2c <main+0x54>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000e36:	2000      	movs	r0, #0
 8000e38:	f001 fa68 	bl	800230c <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	f001 fa65 	bl	800230c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000e42:	2002      	movs	r0, #2
 8000e44:	f001 fa62 	bl	800230c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000e48:	2101      	movs	r1, #1
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	f001 fafe 	bl	800244c <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000e50:	4b79      	ldr	r3, [pc, #484]	@ (8001038 <main+0x260>)
 8000e52:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e56:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000e58:	4b77      	ldr	r3, [pc, #476]	@ (8001038 <main+0x260>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000e5e:	4b76      	ldr	r3, [pc, #472]	@ (8001038 <main+0x260>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000e64:	4b74      	ldr	r3, [pc, #464]	@ (8001038 <main+0x260>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000e6a:	4b73      	ldr	r3, [pc, #460]	@ (8001038 <main+0x260>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000e70:	4971      	ldr	r1, [pc, #452]	@ (8001038 <main+0x260>)
 8000e72:	2000      	movs	r0, #0
 8000e74:	f001 fb84 	bl	8002580 <BSP_COM_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <main+0xaa>
  {
    Error_Handler();
 8000e7e:	f000 fcc7 	bl	8001810 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // HSMManager_Init();

  // HSMManager_ProcessCommand();
  W25Q_Reset();
 8000e82:	f7ff fbdb 	bl	800063c <W25Q_Reset>
  W25Q_Write(0, 0, sizeof(msg), msg);
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	224d      	movs	r2, #77	@ 0x4d
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	f7ff fe01 	bl	8000a94 <W25Q_Write>
  log_info("Turning LED ON.");
 8000e92:	486a      	ldr	r0, [pc, #424]	@ (800103c <main+0x264>)
 8000e94:	f7ff ff6c 	bl	8000d70 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f001 faad 	bl	80023f8 <BSP_LED_Toggle>
 8000e9e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ea2:	f001 fd0b 	bl	80028bc <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000ea6:	2002      	movs	r0, #2
 8000ea8:	f001 faa6 	bl	80023f8 <BSP_LED_Toggle>
 8000eac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000eb0:	f001 fd04 	bl	80028bc <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	f001 fa9f 	bl	80023f8 <BSP_LED_Toggle>
 8000eba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ebe:	f001 fcfd 	bl	80028bc <HAL_Delay>
  log_info("Turning LED OFF.");
 8000ec2:	485f      	ldr	r0, [pc, #380]	@ (8001040 <main+0x268>)
 8000ec4:	f7ff ff54 	bl	8000d70 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000ec8:	2000      	movs	r0, #0
 8000eca:	f001 fa95 	bl	80023f8 <BSP_LED_Toggle>
 8000ece:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ed2:	f001 fcf3 	bl	80028bc <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000ed6:	2002      	movs	r0, #2
 8000ed8:	f001 fa8e 	bl	80023f8 <BSP_LED_Toggle>
 8000edc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ee0:	f001 fcec 	bl	80028bc <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	f001 fa87 	bl	80023f8 <BSP_LED_Toggle>
 8000eea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000eee:	f001 fce5 	bl	80028bc <HAL_Delay>
  log_info("Turning LED ON.");
 8000ef2:	4852      	ldr	r0, [pc, #328]	@ (800103c <main+0x264>)
 8000ef4:	f7ff ff3c 	bl	8000d70 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000ef8:	2000      	movs	r0, #0
 8000efa:	f001 fa7d 	bl	80023f8 <BSP_LED_Toggle>
 8000efe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f02:	f001 fcdb 	bl	80028bc <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000f06:	2002      	movs	r0, #2
 8000f08:	f001 fa76 	bl	80023f8 <BSP_LED_Toggle>
 8000f0c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f10:	f001 fcd4 	bl	80028bc <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000f14:	2001      	movs	r0, #1
 8000f16:	f001 fa6f 	bl	80023f8 <BSP_LED_Toggle>
 8000f1a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f1e:	f001 fccd 	bl	80028bc <HAL_Delay>
  log_info("Turning LED OFF.");
 8000f22:	4847      	ldr	r0, [pc, #284]	@ (8001040 <main+0x268>)
 8000f24:	f7ff ff24 	bl	8000d70 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f001 fa65 	bl	80023f8 <BSP_LED_Toggle>
 8000f2e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f32:	f001 fcc3 	bl	80028bc <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000f36:	2002      	movs	r0, #2
 8000f38:	f001 fa5e 	bl	80023f8 <BSP_LED_Toggle>
 8000f3c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f40:	f001 fcbc 	bl	80028bc <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000f44:	2001      	movs	r0, #1
 8000f46:	f001 fa57 	bl	80023f8 <BSP_LED_Toggle>
 8000f4a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f4e:	f001 fcb5 	bl	80028bc <HAL_Delay>
  W25Q_Read(0, 0, sizeof(msg), data);
 8000f52:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f56:	224d      	movs	r2, #77	@ 0x4d
 8000f58:	2100      	movs	r1, #0
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f7ff fb85 	bl	800066a <W25Q_Read>
  log_info("Turning LED ON.");
 8000f60:	4836      	ldr	r0, [pc, #216]	@ (800103c <main+0x264>)
 8000f62:	f7ff ff05 	bl	8000d70 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000f66:	2000      	movs	r0, #0
 8000f68:	f001 fa46 	bl	80023f8 <BSP_LED_Toggle>
 8000f6c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f70:	f001 fca4 	bl	80028bc <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000f74:	2002      	movs	r0, #2
 8000f76:	f001 fa3f 	bl	80023f8 <BSP_LED_Toggle>
 8000f7a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f7e:	f001 fc9d 	bl	80028bc <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000f82:	2001      	movs	r0, #1
 8000f84:	f001 fa38 	bl	80023f8 <BSP_LED_Toggle>
 8000f88:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f8c:	f001 fc96 	bl	80028bc <HAL_Delay>
  log_info("Turning LED OFF.");
 8000f90:	482b      	ldr	r0, [pc, #172]	@ (8001040 <main+0x268>)
 8000f92:	f7ff feed 	bl	8000d70 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000f96:	2000      	movs	r0, #0
 8000f98:	f001 fa2e 	bl	80023f8 <BSP_LED_Toggle>
 8000f9c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fa0:	f001 fc8c 	bl	80028bc <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000fa4:	2002      	movs	r0, #2
 8000fa6:	f001 fa27 	bl	80023f8 <BSP_LED_Toggle>
 8000faa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fae:	f001 fc85 	bl	80028bc <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f001 fa20 	bl	80023f8 <BSP_LED_Toggle>
 8000fb8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fbc:	f001 fc7e 	bl	80028bc <HAL_Delay>
  log_info("Turning LED ON.");
 8000fc0:	481e      	ldr	r0, [pc, #120]	@ (800103c <main+0x264>)
 8000fc2:	f7ff fed5 	bl	8000d70 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f001 fa16 	bl	80023f8 <BSP_LED_Toggle>
 8000fcc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fd0:	f001 fc74 	bl	80028bc <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000fd4:	2002      	movs	r0, #2
 8000fd6:	f001 fa0f 	bl	80023f8 <BSP_LED_Toggle>
 8000fda:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fde:	f001 fc6d 	bl	80028bc <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000fe2:	2001      	movs	r0, #1
 8000fe4:	f001 fa08 	bl	80023f8 <BSP_LED_Toggle>
 8000fe8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fec:	f001 fc66 	bl	80028bc <HAL_Delay>
  log_info("Turning LED OFF.");
 8000ff0:	4813      	ldr	r0, [pc, #76]	@ (8001040 <main+0x268>)
 8000ff2:	f7ff febd 	bl	8000d70 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	f001 f9fe 	bl	80023f8 <BSP_LED_Toggle>
 8000ffc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001000:	f001 fc5c 	bl	80028bc <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8001004:	2002      	movs	r0, #2
 8001006:	f001 f9f7 	bl	80023f8 <BSP_LED_Toggle>
 800100a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800100e:	f001 fc55 	bl	80028bc <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8001012:	2001      	movs	r0, #1
 8001014:	f001 f9f0 	bl	80023f8 <BSP_LED_Toggle>
 8001018:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800101c:	f001 fc4e 	bl	80028bc <HAL_Delay>
  printf("\n\n\r%s", data);
 8001020:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001024:	4619      	mov	r1, r3
 8001026:	4807      	ldr	r0, [pc, #28]	@ (8001044 <main+0x26c>)
 8001028:	f011 fa4a 	bl	80124c0 <iprintf>

  while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <main+0x254>
 8001030:	08013540 	.word	0x08013540
 8001034:	20000720 	.word	0x20000720
 8001038:	2000019c 	.word	0x2000019c
 800103c:	08013514 	.word	0x08013514
 8001040:	08013524 	.word	0x08013524
 8001044:	08013538 	.word	0x08013538

08001048 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b09c      	sub	sp, #112	@ 0x70
 800104c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104e:	f107 0320 	add.w	r3, r7, #32
 8001052:	2250      	movs	r2, #80	@ 0x50
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f011 faf4 	bl	8012644 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800105c:	f107 0308 	add.w	r3, r7, #8
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
 800106c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800106e:	4b2f      	ldr	r3, [pc, #188]	@ (800112c <SystemClock_Config+0xe4>)
 8001070:	691b      	ldr	r3, [r3, #16]
 8001072:	4a2e      	ldr	r2, [pc, #184]	@ (800112c <SystemClock_Config+0xe4>)
 8001074:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001078:	6113      	str	r3, [r2, #16]
 800107a:	4b2c      	ldr	r3, [pc, #176]	@ (800112c <SystemClock_Config+0xe4>)
 800107c:	691b      	ldr	r3, [r3, #16]
 800107e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001086:	bf00      	nop
 8001088:	4b28      	ldr	r3, [pc, #160]	@ (800112c <SystemClock_Config+0xe4>)
 800108a:	695b      	ldr	r3, [r3, #20]
 800108c:	f003 0308 	and.w	r3, r3, #8
 8001090:	2b08      	cmp	r3, #8
 8001092:	d1f9      	bne.n	8001088 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8001094:	2329      	movs	r3, #41	@ 0x29
 8001096:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001098:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800109c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800109e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80010a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80010a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010aa:	2302      	movs	r3, #2
 80010ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 80010ae:	2303      	movs	r3, #3
 80010b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010b2:	2304      	movs	r3, #4
 80010b4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 80010b6:	23fa      	movs	r3, #250	@ 0xfa
 80010b8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80010ba:	2302      	movs	r3, #2
 80010bc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010be:	2302      	movs	r3, #2
 80010c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010c2:	2302      	movs	r3, #2
 80010c4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 80010c6:	2304      	movs	r3, #4
 80010c8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80010ca:	2300      	movs	r3, #0
 80010cc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d2:	f107 0320 	add.w	r3, r7, #32
 80010d6:	4618      	mov	r0, r3
 80010d8:	f004 fce0 	bl	8005a9c <HAL_RCC_OscConfig>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80010e2:	f000 fb95 	bl	8001810 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e6:	231f      	movs	r3, #31
 80010e8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ea:	2303      	movs	r3, #3
 80010ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ee:	2300      	movs	r3, #0
 80010f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010fe:	f107 0308 	add.w	r3, r7, #8
 8001102:	2105      	movs	r1, #5
 8001104:	4618      	mov	r0, r3
 8001106:	f005 f901 	bl	800630c <HAL_RCC_ClockConfig>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001110:	f000 fb7e 	bl	8001810 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8001114:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <SystemClock_Config+0xe8>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800111c:	4a04      	ldr	r2, [pc, #16]	@ (8001130 <SystemClock_Config+0xe8>)
 800111e:	f043 0320 	orr.w	r3, r3, #32
 8001122:	6013      	str	r3, [r2, #0]
}
 8001124:	bf00      	nop
 8001126:	3770      	adds	r7, #112	@ 0x70
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	44020800 	.word	0x44020800
 8001130:	40022000 	.word	0x40022000

08001134 <MX_HASH_Init>:
  * @brief HASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_HASH_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END HASH_Init 0 */

  /* USER CODE BEGIN HASH_Init 1 */

  /* USER CODE END HASH_Init 1 */
  hhash.Instance = HASH;
 8001138:	4b0c      	ldr	r3, [pc, #48]	@ (800116c <MX_HASH_Init+0x38>)
 800113a:	4a0d      	ldr	r2, [pc, #52]	@ (8001170 <MX_HASH_Init+0x3c>)
 800113c:	601a      	str	r2, [r3, #0]
  hhash.Init.DataType = HASH_BYTE_SWAP;
 800113e:	4b0b      	ldr	r3, [pc, #44]	@ (800116c <MX_HASH_Init+0x38>)
 8001140:	2220      	movs	r2, #32
 8001142:	605a      	str	r2, [r3, #4]
  hhash.Init.KeySize = 1;
 8001144:	4b09      	ldr	r3, [pc, #36]	@ (800116c <MX_HASH_Init+0x38>)
 8001146:	2201      	movs	r2, #1
 8001148:	609a      	str	r2, [r3, #8]
  hhash.Init.pKey = (uint8_t *)pKeyHASH;
 800114a:	4b08      	ldr	r3, [pc, #32]	@ (800116c <MX_HASH_Init+0x38>)
 800114c:	4a09      	ldr	r2, [pc, #36]	@ (8001174 <MX_HASH_Init+0x40>)
 800114e:	60da      	str	r2, [r3, #12]
  hhash.Init.Algorithm = HASH_ALGOSELECTION_SHA256;
 8001150:	4b06      	ldr	r3, [pc, #24]	@ (800116c <MX_HASH_Init+0x38>)
 8001152:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 8001156:	611a      	str	r2, [r3, #16]
  if (HAL_HASH_Init(&hhash) != HAL_OK)
 8001158:	4804      	ldr	r0, [pc, #16]	@ (800116c <MX_HASH_Init+0x38>)
 800115a:	f001 ff6f 	bl	800303c <HAL_HASH_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_HASH_Init+0x34>
  {
    Error_Handler();
 8001164:	f000 fb54 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN HASH_Init 2 */

  /* USER CODE END HASH_Init 2 */

}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}
 800116c:	200001ac 	.word	0x200001ac
 8001170:	420c0400 	.word	0x420c0400
 8001174:	08013640 	.word	0x08013640

08001178 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800117c:	4b1b      	ldr	r3, [pc, #108]	@ (80011ec <MX_I2C1_Init+0x74>)
 800117e:	4a1c      	ldr	r2, [pc, #112]	@ (80011f0 <MX_I2C1_Init+0x78>)
 8001180:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C043E5;
 8001182:	4b1a      	ldr	r3, [pc, #104]	@ (80011ec <MX_I2C1_Init+0x74>)
 8001184:	4a1b      	ldr	r2, [pc, #108]	@ (80011f4 <MX_I2C1_Init+0x7c>)
 8001186:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001188:	4b18      	ldr	r3, [pc, #96]	@ (80011ec <MX_I2C1_Init+0x74>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800118e:	4b17      	ldr	r3, [pc, #92]	@ (80011ec <MX_I2C1_Init+0x74>)
 8001190:	2201      	movs	r2, #1
 8001192:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001194:	4b15      	ldr	r3, [pc, #84]	@ (80011ec <MX_I2C1_Init+0x74>)
 8001196:	2200      	movs	r2, #0
 8001198:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800119a:	4b14      	ldr	r3, [pc, #80]	@ (80011ec <MX_I2C1_Init+0x74>)
 800119c:	2200      	movs	r2, #0
 800119e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011a0:	4b12      	ldr	r3, [pc, #72]	@ (80011ec <MX_I2C1_Init+0x74>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011a6:	4b11      	ldr	r3, [pc, #68]	@ (80011ec <MX_I2C1_Init+0x74>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ac:	4b0f      	ldr	r3, [pc, #60]	@ (80011ec <MX_I2C1_Init+0x74>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011b2:	480e      	ldr	r0, [pc, #56]	@ (80011ec <MX_I2C1_Init+0x74>)
 80011b4:	f002 fe3c 	bl	8003e30 <HAL_I2C_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011be:	f000 fb27 	bl	8001810 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011c2:	2100      	movs	r1, #0
 80011c4:	4809      	ldr	r0, [pc, #36]	@ (80011ec <MX_I2C1_Init+0x74>)
 80011c6:	f002 fece 	bl	8003f66 <HAL_I2CEx_ConfigAnalogFilter>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011d0:	f000 fb1e 	bl	8001810 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011d4:	2100      	movs	r1, #0
 80011d6:	4805      	ldr	r0, [pc, #20]	@ (80011ec <MX_I2C1_Init+0x74>)
 80011d8:	f002 ff10 	bl	8003ffc <HAL_I2CEx_ConfigDigitalFilter>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011e2:	f000 fb15 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	200001ec 	.word	0x200001ec
 80011f0:	40005400 	.word	0x40005400
 80011f4:	10c043e5 	.word	0x10c043e5

080011f8 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80011fc:	4b07      	ldr	r3, [pc, #28]	@ (800121c <MX_RNG_Init+0x24>)
 80011fe:	4a08      	ldr	r2, [pc, #32]	@ (8001220 <MX_RNG_Init+0x28>)
 8001200:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8001202:	4b06      	ldr	r3, [pc, #24]	@ (800121c <MX_RNG_Init+0x24>)
 8001204:	2200      	movs	r2, #0
 8001206:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001208:	4804      	ldr	r0, [pc, #16]	@ (800121c <MX_RNG_Init+0x24>)
 800120a:	f00a fc19 	bl	800ba40 <HAL_RNG_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8001214:	f000 fafc 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000240 	.word	0x20000240
 8001220:	420c0800 	.word	0x420c0800

08001224 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08e      	sub	sp, #56	@ 0x38
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 800122a:	f107 031c 	add.w	r3, r7, #28
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
 8001238:	611a      	str	r2, [r3, #16]
 800123a:	615a      	str	r2, [r3, #20]
 800123c:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 800123e:	f107 0308 	add.w	r3, r7, #8
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800124e:	2300      	movs	r3, #0
 8001250:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001252:	4b33      	ldr	r3, [pc, #204]	@ (8001320 <MX_RTC_Init+0xfc>)
 8001254:	4a33      	ldr	r2, [pc, #204]	@ (8001324 <MX_RTC_Init+0x100>)
 8001256:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001258:	4b31      	ldr	r3, [pc, #196]	@ (8001320 <MX_RTC_Init+0xfc>)
 800125a:	2200      	movs	r2, #0
 800125c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800125e:	4b30      	ldr	r3, [pc, #192]	@ (8001320 <MX_RTC_Init+0xfc>)
 8001260:	227f      	movs	r2, #127	@ 0x7f
 8001262:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001264:	4b2e      	ldr	r3, [pc, #184]	@ (8001320 <MX_RTC_Init+0xfc>)
 8001266:	22ff      	movs	r2, #255	@ 0xff
 8001268:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800126a:	4b2d      	ldr	r3, [pc, #180]	@ (8001320 <MX_RTC_Init+0xfc>)
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001270:	4b2b      	ldr	r3, [pc, #172]	@ (8001320 <MX_RTC_Init+0xfc>)
 8001272:	2200      	movs	r2, #0
 8001274:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001276:	4b2a      	ldr	r3, [pc, #168]	@ (8001320 <MX_RTC_Init+0xfc>)
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800127c:	4b28      	ldr	r3, [pc, #160]	@ (8001320 <MX_RTC_Init+0xfc>)
 800127e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001282:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001284:	4b26      	ldr	r3, [pc, #152]	@ (8001320 <MX_RTC_Init+0xfc>)
 8001286:	2200      	movs	r2, #0
 8001288:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 800128a:	4b25      	ldr	r3, [pc, #148]	@ (8001320 <MX_RTC_Init+0xfc>)
 800128c:	2200      	movs	r2, #0
 800128e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001290:	4823      	ldr	r0, [pc, #140]	@ (8001320 <MX_RTC_Init+0xfc>)
 8001292:	f00a fc73 	bl	800bb7c <HAL_RTC_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800129c:	f000 fab8 	bl	8001810 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80012a4:	2300      	movs	r3, #0
 80012a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80012b0:	f107 031c 	add.w	r3, r7, #28
 80012b4:	4619      	mov	r1, r3
 80012b6:	481a      	ldr	r0, [pc, #104]	@ (8001320 <MX_RTC_Init+0xfc>)
 80012b8:	f00a fec6 	bl	800c048 <HAL_RTCEx_PrivilegeModeSet>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80012c2:	f000 faa5 	bl	8001810 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80012da:	f107 0308 	add.w	r3, r7, #8
 80012de:	2201      	movs	r2, #1
 80012e0:	4619      	mov	r1, r3
 80012e2:	480f      	ldr	r0, [pc, #60]	@ (8001320 <MX_RTC_Init+0xfc>)
 80012e4:	f00a fccc 	bl	800bc80 <HAL_RTC_SetTime>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 80012ee:	f000 fa8f 	bl	8001810 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80012f2:	2301      	movs	r3, #1
 80012f4:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 80012f6:	2301      	movs	r3, #1
 80012f8:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 80012fa:	2301      	movs	r3, #1
 80012fc:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 80012fe:	2300      	movs	r3, #0
 8001300:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	2201      	movs	r2, #1
 8001306:	4619      	mov	r1, r3
 8001308:	4805      	ldr	r0, [pc, #20]	@ (8001320 <MX_RTC_Init+0xfc>)
 800130a:	f00a fd4b 	bl	800bda4 <HAL_RTC_SetDate>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 8001314:	f000 fa7c 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001318:	bf00      	nop
 800131a:	3738      	adds	r7, #56	@ 0x38
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20000254 	.word	0x20000254
 8001324:	44007800 	.word	0x44007800

08001328 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800132c:	4b27      	ldr	r3, [pc, #156]	@ (80013cc <MX_SPI1_Init+0xa4>)
 800132e:	4a28      	ldr	r2, [pc, #160]	@ (80013d0 <MX_SPI1_Init+0xa8>)
 8001330:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001332:	4b26      	ldr	r3, [pc, #152]	@ (80013cc <MX_SPI1_Init+0xa4>)
 8001334:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001338:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800133a:	4b24      	ldr	r3, [pc, #144]	@ (80013cc <MX_SPI1_Init+0xa4>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001340:	4b22      	ldr	r3, [pc, #136]	@ (80013cc <MX_SPI1_Init+0xa4>)
 8001342:	2207      	movs	r2, #7
 8001344:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001346:	4b21      	ldr	r3, [pc, #132]	@ (80013cc <MX_SPI1_Init+0xa4>)
 8001348:	2200      	movs	r2, #0
 800134a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800134c:	4b1f      	ldr	r3, [pc, #124]	@ (80013cc <MX_SPI1_Init+0xa4>)
 800134e:	2200      	movs	r2, #0
 8001350:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001352:	4b1e      	ldr	r3, [pc, #120]	@ (80013cc <MX_SPI1_Init+0xa4>)
 8001354:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001358:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800135a:	4b1c      	ldr	r3, [pc, #112]	@ (80013cc <MX_SPI1_Init+0xa4>)
 800135c:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8001360:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001362:	4b1a      	ldr	r3, [pc, #104]	@ (80013cc <MX_SPI1_Init+0xa4>)
 8001364:	2200      	movs	r2, #0
 8001366:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001368:	4b18      	ldr	r3, [pc, #96]	@ (80013cc <MX_SPI1_Init+0xa4>)
 800136a:	2200      	movs	r2, #0
 800136c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800136e:	4b17      	ldr	r3, [pc, #92]	@ (80013cc <MX_SPI1_Init+0xa4>)
 8001370:	2200      	movs	r2, #0
 8001372:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8001374:	4b15      	ldr	r3, [pc, #84]	@ (80013cc <MX_SPI1_Init+0xa4>)
 8001376:	2207      	movs	r2, #7
 8001378:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800137a:	4b14      	ldr	r3, [pc, #80]	@ (80013cc <MX_SPI1_Init+0xa4>)
 800137c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001380:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001382:	4b12      	ldr	r3, [pc, #72]	@ (80013cc <MX_SPI1_Init+0xa4>)
 8001384:	2200      	movs	r2, #0
 8001386:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001388:	4b10      	ldr	r3, [pc, #64]	@ (80013cc <MX_SPI1_Init+0xa4>)
 800138a:	2200      	movs	r2, #0
 800138c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800138e:	4b0f      	ldr	r3, [pc, #60]	@ (80013cc <MX_SPI1_Init+0xa4>)
 8001390:	2200      	movs	r2, #0
 8001392:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001394:	4b0d      	ldr	r3, [pc, #52]	@ (80013cc <MX_SPI1_Init+0xa4>)
 8001396:	2200      	movs	r2, #0
 8001398:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800139a:	4b0c      	ldr	r3, [pc, #48]	@ (80013cc <MX_SPI1_Init+0xa4>)
 800139c:	2200      	movs	r2, #0
 800139e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80013a0:	4b0a      	ldr	r3, [pc, #40]	@ (80013cc <MX_SPI1_Init+0xa4>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80013a6:	4b09      	ldr	r3, [pc, #36]	@ (80013cc <MX_SPI1_Init+0xa4>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80013ac:	4b07      	ldr	r3, [pc, #28]	@ (80013cc <MX_SPI1_Init+0xa4>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80013b2:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <MX_SPI1_Init+0xa4>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013b8:	4804      	ldr	r0, [pc, #16]	@ (80013cc <MX_SPI1_Init+0xa4>)
 80013ba:	f00a fe73 	bl	800c0a4 <HAL_SPI_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80013c4:	f000 fa24 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000284 	.word	0x20000284
 80013d0:	40013000 	.word	0x40013000

080013d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013d8:	4b22      	ldr	r3, [pc, #136]	@ (8001464 <MX_USART2_UART_Init+0x90>)
 80013da:	4a23      	ldr	r2, [pc, #140]	@ (8001468 <MX_USART2_UART_Init+0x94>)
 80013dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013de:	4b21      	ldr	r3, [pc, #132]	@ (8001464 <MX_USART2_UART_Init+0x90>)
 80013e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001464 <MX_USART2_UART_Init+0x90>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001464 <MX_USART2_UART_Init+0x90>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001464 <MX_USART2_UART_Init+0x90>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001464 <MX_USART2_UART_Init+0x90>)
 80013fa:	220c      	movs	r2, #12
 80013fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013fe:	4b19      	ldr	r3, [pc, #100]	@ (8001464 <MX_USART2_UART_Init+0x90>)
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001404:	4b17      	ldr	r3, [pc, #92]	@ (8001464 <MX_USART2_UART_Init+0x90>)
 8001406:	2200      	movs	r2, #0
 8001408:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800140a:	4b16      	ldr	r3, [pc, #88]	@ (8001464 <MX_USART2_UART_Init+0x90>)
 800140c:	2200      	movs	r2, #0
 800140e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001410:	4b14      	ldr	r3, [pc, #80]	@ (8001464 <MX_USART2_UART_Init+0x90>)
 8001412:	2200      	movs	r2, #0
 8001414:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001416:	4b13      	ldr	r3, [pc, #76]	@ (8001464 <MX_USART2_UART_Init+0x90>)
 8001418:	2200      	movs	r2, #0
 800141a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800141c:	4811      	ldr	r0, [pc, #68]	@ (8001464 <MX_USART2_UART_Init+0x90>)
 800141e:	f00b fd90 	bl	800cf42 <HAL_UART_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001428:	f000 f9f2 	bl	8001810 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800142c:	2100      	movs	r1, #0
 800142e:	480d      	ldr	r0, [pc, #52]	@ (8001464 <MX_USART2_UART_Init+0x90>)
 8001430:	f00c fabc 	bl	800d9ac <HAL_UARTEx_SetTxFifoThreshold>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800143a:	f000 f9e9 	bl	8001810 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800143e:	2100      	movs	r1, #0
 8001440:	4808      	ldr	r0, [pc, #32]	@ (8001464 <MX_USART2_UART_Init+0x90>)
 8001442:	f00c faf1 	bl	800da28 <HAL_UARTEx_SetRxFifoThreshold>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800144c:	f000 f9e0 	bl	8001810 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001450:	4804      	ldr	r0, [pc, #16]	@ (8001464 <MX_USART2_UART_Init+0x90>)
 8001452:	f00c fa72 	bl	800d93a <HAL_UARTEx_DisableFifoMode>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800145c:	f000 f9d8 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000314 	.word	0x20000314
 8001468:	40004400 	.word	0x40004400

0800146c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001470:	4b22      	ldr	r3, [pc, #136]	@ (80014fc <MX_USART6_UART_Init+0x90>)
 8001472:	4a23      	ldr	r2, [pc, #140]	@ (8001500 <MX_USART6_UART_Init+0x94>)
 8001474:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001476:	4b21      	ldr	r3, [pc, #132]	@ (80014fc <MX_USART6_UART_Init+0x90>)
 8001478:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800147c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800147e:	4b1f      	ldr	r3, [pc, #124]	@ (80014fc <MX_USART6_UART_Init+0x90>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001484:	4b1d      	ldr	r3, [pc, #116]	@ (80014fc <MX_USART6_UART_Init+0x90>)
 8001486:	2200      	movs	r2, #0
 8001488:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800148a:	4b1c      	ldr	r3, [pc, #112]	@ (80014fc <MX_USART6_UART_Init+0x90>)
 800148c:	2200      	movs	r2, #0
 800148e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001490:	4b1a      	ldr	r3, [pc, #104]	@ (80014fc <MX_USART6_UART_Init+0x90>)
 8001492:	220c      	movs	r2, #12
 8001494:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001496:	4b19      	ldr	r3, [pc, #100]	@ (80014fc <MX_USART6_UART_Init+0x90>)
 8001498:	2200      	movs	r2, #0
 800149a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800149c:	4b17      	ldr	r3, [pc, #92]	@ (80014fc <MX_USART6_UART_Init+0x90>)
 800149e:	2200      	movs	r2, #0
 80014a0:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014a2:	4b16      	ldr	r3, [pc, #88]	@ (80014fc <MX_USART6_UART_Init+0x90>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014a8:	4b14      	ldr	r3, [pc, #80]	@ (80014fc <MX_USART6_UART_Init+0x90>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ae:	4b13      	ldr	r3, [pc, #76]	@ (80014fc <MX_USART6_UART_Init+0x90>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80014b4:	4811      	ldr	r0, [pc, #68]	@ (80014fc <MX_USART6_UART_Init+0x90>)
 80014b6:	f00b fd44 	bl	800cf42 <HAL_UART_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80014c0:	f000 f9a6 	bl	8001810 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014c4:	2100      	movs	r1, #0
 80014c6:	480d      	ldr	r0, [pc, #52]	@ (80014fc <MX_USART6_UART_Init+0x90>)
 80014c8:	f00c fa70 	bl	800d9ac <HAL_UARTEx_SetTxFifoThreshold>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80014d2:	f000 f99d 	bl	8001810 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014d6:	2100      	movs	r1, #0
 80014d8:	4808      	ldr	r0, [pc, #32]	@ (80014fc <MX_USART6_UART_Init+0x90>)
 80014da:	f00c faa5 	bl	800da28 <HAL_UARTEx_SetRxFifoThreshold>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80014e4:	f000 f994 	bl	8001810 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80014e8:	4804      	ldr	r0, [pc, #16]	@ (80014fc <MX_USART6_UART_Init+0x90>)
 80014ea:	f00c fa26 	bl	800d93a <HAL_UARTEx_DisableFifoMode>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80014f4:	f000 f98c 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	200003a8 	.word	0x200003a8
 8001500:	40006400 	.word	0x40006400

08001504 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USB_Init 0 */
  hpcd_USB_DRD_FS.pData = &hUsbDeviceFS;
 8001508:	4b29      	ldr	r3, [pc, #164]	@ (80015b0 <MX_USB_PCD_Init+0xac>)
 800150a:	4a2a      	ldr	r2, [pc, #168]	@ (80015b4 <MX_USB_PCD_Init+0xb0>)
 800150c:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8001510:	4b27      	ldr	r3, [pc, #156]	@ (80015b0 <MX_USB_PCD_Init+0xac>)
 8001512:	4a29      	ldr	r2, [pc, #164]	@ (80015b8 <MX_USB_PCD_Init+0xb4>)
 8001514:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8001516:	4b26      	ldr	r3, [pc, #152]	@ (80015b0 <MX_USB_PCD_Init+0xac>)
 8001518:	2208      	movs	r2, #8
 800151a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 800151c:	4b24      	ldr	r3, [pc, #144]	@ (80015b0 <MX_USB_PCD_Init+0xac>)
 800151e:	2202      	movs	r2, #2
 8001520:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001522:	4b23      	ldr	r3, [pc, #140]	@ (80015b0 <MX_USB_PCD_Init+0xac>)
 8001524:	2202      	movs	r2, #2
 8001526:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8001528:	4b21      	ldr	r3, [pc, #132]	@ (80015b0 <MX_USB_PCD_Init+0xac>)
 800152a:	2200      	movs	r2, #0
 800152c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 800152e:	4b20      	ldr	r3, [pc, #128]	@ (80015b0 <MX_USB_PCD_Init+0xac>)
 8001530:	2200      	movs	r2, #0
 8001532:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8001534:	4b1e      	ldr	r3, [pc, #120]	@ (80015b0 <MX_USB_PCD_Init+0xac>)
 8001536:	2200      	movs	r2, #0
 8001538:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 800153a:	4b1d      	ldr	r3, [pc, #116]	@ (80015b0 <MX_USB_PCD_Init+0xac>)
 800153c:	2200      	movs	r2, #0
 800153e:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8001540:	4b1b      	ldr	r3, [pc, #108]	@ (80015b0 <MX_USB_PCD_Init+0xac>)
 8001542:	2200      	movs	r2, #0
 8001544:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8001546:	4b1a      	ldr	r3, [pc, #104]	@ (80015b0 <MX_USB_PCD_Init+0xac>)
 8001548:	2200      	movs	r2, #0
 800154a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 800154c:	4b18      	ldr	r3, [pc, #96]	@ (80015b0 <MX_USB_PCD_Init+0xac>)
 800154e:	2200      	movs	r2, #0
 8001550:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8001552:	4817      	ldr	r0, [pc, #92]	@ (80015b0 <MX_USB_PCD_Init+0xac>)
 8001554:	f002 fe01 	bl	800415a <HAL_PCD_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_USB_PCD_Init+0x5e>
  {
    Error_Handler();
 800155e:	f000 f957 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */
  if(USBD_Init(&hUsbDeviceFS, &Class_Desc, 0) != USBD_OK)
 8001562:	2200      	movs	r2, #0
 8001564:	4915      	ldr	r1, [pc, #84]	@ (80015bc <MX_USB_PCD_Init+0xb8>)
 8001566:	4813      	ldr	r0, [pc, #76]	@ (80015b4 <MX_USB_PCD_Init+0xb0>)
 8001568:	f00f fafc 	bl	8010b64 <USBD_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_USB_PCD_Init+0x72>
        Error_Handler();
 8001572:	f000 f94d 	bl	8001810 <Error_Handler>

  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8001576:	4912      	ldr	r1, [pc, #72]	@ (80015c0 <MX_USB_PCD_Init+0xbc>)
 8001578:	480e      	ldr	r0, [pc, #56]	@ (80015b4 <MX_USB_PCD_Init+0xb0>)
 800157a:	f00f fb23 	bl	8010bc4 <USBD_RegisterClass>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_USB_PCD_Init+0x84>
        Error_Handler();
 8001584:	f000 f944 	bl	8001810 <Error_Handler>

  if(USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_CDC_Template_fops) != USBD_OK)
 8001588:	490e      	ldr	r1, [pc, #56]	@ (80015c4 <MX_USB_PCD_Init+0xc0>)
 800158a:	480a      	ldr	r0, [pc, #40]	@ (80015b4 <MX_USB_PCD_Init+0xb0>)
 800158c:	f00e feac 	bl	80102e8 <USBD_CDC_RegisterInterface>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_USB_PCD_Init+0x96>
        Error_Handler();
 8001596:	f000 f93b 	bl	8001810 <Error_Handler>

  if(USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800159a:	4806      	ldr	r0, [pc, #24]	@ (80015b4 <MX_USB_PCD_Init+0xb0>)
 800159c:	f00f fb48 	bl	8010c30 <USBD_Start>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_USB_PCD_Init+0xa6>
        Error_Handler();
 80015a6:	f000 f933 	bl	8001810 <Error_Handler>
  /* USER CODE END USB_Init 2 */

}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	2000043c 	.word	0x2000043c
 80015b4:	20000720 	.word	0x20000720
 80015b8:	40016000 	.word	0x40016000
 80015bc:	200000d4 	.word	0x200000d4
 80015c0:	20000038 	.word	0x20000038
 80015c4:	200000b8 	.word	0x200000b8

080015c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08c      	sub	sp, #48	@ 0x30
 80015cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ce:	f107 031c 	add.w	r3, r7, #28
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	609a      	str	r2, [r3, #8]
 80015da:	60da      	str	r2, [r3, #12]
 80015dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015de:	4b85      	ldr	r3, [pc, #532]	@ (80017f4 <MX_GPIO_Init+0x22c>)
 80015e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015e4:	4a83      	ldr	r2, [pc, #524]	@ (80017f4 <MX_GPIO_Init+0x22c>)
 80015e6:	f043 0310 	orr.w	r3, r3, #16
 80015ea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015ee:	4b81      	ldr	r3, [pc, #516]	@ (80017f4 <MX_GPIO_Init+0x22c>)
 80015f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015f4:	f003 0310 	and.w	r3, r3, #16
 80015f8:	61bb      	str	r3, [r7, #24]
 80015fa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015fc:	4b7d      	ldr	r3, [pc, #500]	@ (80017f4 <MX_GPIO_Init+0x22c>)
 80015fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001602:	4a7c      	ldr	r2, [pc, #496]	@ (80017f4 <MX_GPIO_Init+0x22c>)
 8001604:	f043 0304 	orr.w	r3, r3, #4
 8001608:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800160c:	4b79      	ldr	r3, [pc, #484]	@ (80017f4 <MX_GPIO_Init+0x22c>)
 800160e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001612:	f003 0304 	and.w	r3, r3, #4
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800161a:	4b76      	ldr	r3, [pc, #472]	@ (80017f4 <MX_GPIO_Init+0x22c>)
 800161c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001620:	4a74      	ldr	r2, [pc, #464]	@ (80017f4 <MX_GPIO_Init+0x22c>)
 8001622:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001626:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800162a:	4b72      	ldr	r3, [pc, #456]	@ (80017f4 <MX_GPIO_Init+0x22c>)
 800162c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001630:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001638:	4b6e      	ldr	r3, [pc, #440]	@ (80017f4 <MX_GPIO_Init+0x22c>)
 800163a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800163e:	4a6d      	ldr	r2, [pc, #436]	@ (80017f4 <MX_GPIO_Init+0x22c>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001648:	4b6a      	ldr	r3, [pc, #424]	@ (80017f4 <MX_GPIO_Init+0x22c>)
 800164a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001656:	4b67      	ldr	r3, [pc, #412]	@ (80017f4 <MX_GPIO_Init+0x22c>)
 8001658:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800165c:	4a65      	ldr	r2, [pc, #404]	@ (80017f4 <MX_GPIO_Init+0x22c>)
 800165e:	f043 0302 	orr.w	r3, r3, #2
 8001662:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001666:	4b63      	ldr	r3, [pc, #396]	@ (80017f4 <MX_GPIO_Init+0x22c>)
 8001668:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001674:	4b5f      	ldr	r3, [pc, #380]	@ (80017f4 <MX_GPIO_Init+0x22c>)
 8001676:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800167a:	4a5e      	ldr	r2, [pc, #376]	@ (80017f4 <MX_GPIO_Init+0x22c>)
 800167c:	f043 0308 	orr.w	r3, r3, #8
 8001680:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001684:	4b5b      	ldr	r3, [pc, #364]	@ (80017f4 <MX_GPIO_Init+0x22c>)
 8001686:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800168a:	f003 0308 	and.w	r3, r3, #8
 800168e:	607b      	str	r3, [r7, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001692:	4b58      	ldr	r3, [pc, #352]	@ (80017f4 <MX_GPIO_Init+0x22c>)
 8001694:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001698:	4a56      	ldr	r2, [pc, #344]	@ (80017f4 <MX_GPIO_Init+0x22c>)
 800169a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800169e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016a2:	4b54      	ldr	r3, [pc, #336]	@ (80017f4 <MX_GPIO_Init+0x22c>)
 80016a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016ac:	603b      	str	r3, [r7, #0]
 80016ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80016b0:	2200      	movs	r2, #0
 80016b2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80016b6:	4850      	ldr	r0, [pc, #320]	@ (80017f8 <MX_GPIO_Init+0x230>)
 80016b8:	f001 fc8e 	bl	8002fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80016bc:	2332      	movs	r3, #50	@ 0x32
 80016be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c0:	2302      	movs	r3, #2
 80016c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016c8:	2302      	movs	r3, #2
 80016ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016cc:	230b      	movs	r3, #11
 80016ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d0:	f107 031c 	add.w	r3, r7, #28
 80016d4:	4619      	mov	r1, r3
 80016d6:	4849      	ldr	r0, [pc, #292]	@ (80017fc <MX_GPIO_Init+0x234>)
 80016d8:	f001 fb2c 	bl	8002d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80016dc:	2384      	movs	r3, #132	@ 0x84
 80016de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e0:	2302      	movs	r3, #2
 80016e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016e8:	2302      	movs	r3, #2
 80016ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016ec:	230b      	movs	r3, #11
 80016ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f0:	f107 031c 	add.w	r3, r7, #28
 80016f4:	4619      	mov	r1, r3
 80016f6:	4842      	ldr	r0, [pc, #264]	@ (8001800 <MX_GPIO_Init+0x238>)
 80016f8:	f001 fb1c 	bl	8002d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 80016fc:	2310      	movs	r3, #16
 80016fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001700:	2303      	movs	r3, #3
 8001702:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001708:	f107 031c 	add.w	r3, r7, #28
 800170c:	4619      	mov	r1, r3
 800170e:	483c      	ldr	r0, [pc, #240]	@ (8001800 <MX_GPIO_Init+0x238>)
 8001710:	f001 fb10 	bl	8002d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001714:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171a:	2302      	movs	r3, #2
 800171c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001722:	2300      	movs	r3, #0
 8001724:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001726:	2307      	movs	r3, #7
 8001728:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800172a:	f107 031c 	add.w	r3, r7, #28
 800172e:	4619      	mov	r1, r3
 8001730:	4834      	ldr	r0, [pc, #208]	@ (8001804 <MX_GPIO_Init+0x23c>)
 8001732:	f001 faff 	bl	8002d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_CC1_Pin UCPD_CC2_Pin */
  GPIO_InitStruct.Pin = UCPD_CC1_Pin|UCPD_CC2_Pin;
 8001736:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800173a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800173c:	2303      	movs	r3, #3
 800173e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001744:	f107 031c 	add.w	r3, r7, #28
 8001748:	4619      	mov	r1, r3
 800174a:	482e      	ldr	r0, [pc, #184]	@ (8001804 <MX_GPIO_Init+0x23c>)
 800174c:	f001 faf2 	bl	8002d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001750:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001756:	2302      	movs	r3, #2
 8001758:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800175e:	2302      	movs	r3, #2
 8001760:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001762:	230b      	movs	r3, #11
 8001764:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001766:	f107 031c 	add.w	r3, r7, #28
 800176a:	4619      	mov	r1, r3
 800176c:	4825      	ldr	r0, [pc, #148]	@ (8001804 <MX_GPIO_Init+0x23c>)
 800176e:	f001 fae1 	bl	8002d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001772:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001778:	2301      	movs	r3, #1
 800177a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001780:	2300      	movs	r3, #0
 8001782:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001784:	f107 031c 	add.w	r3, r7, #28
 8001788:	4619      	mov	r1, r3
 800178a:	481b      	ldr	r0, [pc, #108]	@ (80017f8 <MX_GPIO_Init+0x230>)
 800178c:	f001 fad2 	bl	8002d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8001790:	2380      	movs	r3, #128	@ 0x80
 8001792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001794:	4b1c      	ldr	r3, [pc, #112]	@ (8001808 <MX_GPIO_Init+0x240>)
 8001796:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 800179c:	f107 031c 	add.w	r3, r7, #28
 80017a0:	4619      	mov	r1, r3
 80017a2:	481a      	ldr	r0, [pc, #104]	@ (800180c <MX_GPIO_Init+0x244>)
 80017a4:	f001 fac6 	bl	8002d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXT_EN_Pin RMI_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TXT_EN_Pin|RMI_TXD0_Pin;
 80017a8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80017ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ae:	2302      	movs	r3, #2
 80017b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017b6:	2302      	movs	r3, #2
 80017b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017ba:	230b      	movs	r3, #11
 80017bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017be:	f107 031c 	add.w	r3, r7, #28
 80017c2:	4619      	mov	r1, r3
 80017c4:	4811      	ldr	r0, [pc, #68]	@ (800180c <MX_GPIO_Init+0x244>)
 80017c6:	f001 fab5 	bl	8002d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_TX_Pin ARD_D0_RX_Pin */
  GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 80017ca:	23c0      	movs	r3, #192	@ 0xc0
 80017cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ce:	2302      	movs	r3, #2
 80017d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d6:	2300      	movs	r3, #0
 80017d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80017da:	2308      	movs	r3, #8
 80017dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017de:	f107 031c 	add.w	r3, r7, #28
 80017e2:	4619      	mov	r1, r3
 80017e4:	4807      	ldr	r0, [pc, #28]	@ (8001804 <MX_GPIO_Init+0x23c>)
 80017e6:	f001 faa5 	bl	8002d34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017ea:	bf00      	nop
 80017ec:	3730      	adds	r7, #48	@ 0x30
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	44020c00 	.word	0x44020c00
 80017f8:	42020c00 	.word	0x42020c00
 80017fc:	42020800 	.word	0x42020800
 8001800:	42020000 	.word	0x42020000
 8001804:	42020400 	.word	0x42020400
 8001808:	10110000 	.word	0x10110000
 800180c:	42021800 	.word	0x42021800

08001810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001814:	b672      	cpsid	i
}
 8001816:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001818:	bf00      	nop
 800181a:	e7fd      	b.n	8001818 <Error_Handler+0x8>

0800181c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
	...

0800182c <HAL_HASH_MspInit>:
* This function configures the hardware resources used in this example
* @param hhash: HASH handle pointer
* @retval None
*/
void HAL_HASH_MspInit(HASH_HandleTypeDef* hhash)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HASH_MspInit 0 */

  /* USER CODE END HASH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HASH_CLK_ENABLE();
 8001834:	4b0d      	ldr	r3, [pc, #52]	@ (800186c <HAL_HASH_MspInit+0x40>)
 8001836:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800183a:	4a0c      	ldr	r2, [pc, #48]	@ (800186c <HAL_HASH_MspInit+0x40>)
 800183c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001840:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001844:	4b09      	ldr	r3, [pc, #36]	@ (800186c <HAL_HASH_MspInit+0x40>)
 8001846:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800184a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
    /* HASH interrupt Init */
    HAL_NVIC_SetPriority(HASH_IRQn, 0, 0);
 8001852:	2200      	movs	r2, #0
 8001854:	2100      	movs	r1, #0
 8001856:	2075      	movs	r0, #117	@ 0x75
 8001858:	f001 f90c 	bl	8002a74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_IRQn);
 800185c:	2075      	movs	r0, #117	@ 0x75
 800185e:	f001 f923 	bl	8002aa8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HASH_MspInit 1 */

  /* USER CODE END HASH_MspInit 1 */

}
 8001862:	bf00      	nop
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	44020c00 	.word	0x44020c00

08001870 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b0cc      	sub	sp, #304	@ 0x130
 8001874:	af00      	add	r7, sp, #0
 8001876:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800187a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800187e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001890:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001894:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001898:	4618      	mov	r0, r3
 800189a:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800189e:	461a      	mov	r2, r3
 80018a0:	2100      	movs	r1, #0
 80018a2:	f010 fecf 	bl	8012644 <memset>
  if(hi2c->Instance==I2C1)
 80018a6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80018aa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a33      	ldr	r2, [pc, #204]	@ (8001980 <HAL_I2C_MspInit+0x110>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d15e      	bne.n	8001976 <HAL_I2C_MspInit+0x106>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80018b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80018bc:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80018c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018c4:	f04f 0300 	mov.w	r3, #0
 80018c8:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80018cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80018d0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80018d4:	2200      	movs	r2, #0
 80018d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018da:	f107 0310 	add.w	r3, r7, #16
 80018de:	4618      	mov	r0, r3
 80018e0:	f005 f856 	bl	8006990 <HAL_RCCEx_PeriphCLKConfig>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 80018ea:	f7ff ff91 	bl	8001810 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ee:	4b25      	ldr	r3, [pc, #148]	@ (8001984 <HAL_I2C_MspInit+0x114>)
 80018f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018f4:	4a23      	ldr	r2, [pc, #140]	@ (8001984 <HAL_I2C_MspInit+0x114>)
 80018f6:	f043 0302 	orr.w	r3, r3, #2
 80018fa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018fe:	4b21      	ldr	r3, [pc, #132]	@ (8001984 <HAL_I2C_MspInit+0x114>)
 8001900:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001904:	f003 0202 	and.w	r2, r3, #2
 8001908:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800190c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001916:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800191a:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800191c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001920:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001924:	2312      	movs	r3, #18
 8001926:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001930:	2300      	movs	r3, #0
 8001932:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001936:	2304      	movs	r3, #4
 8001938:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193c:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001940:	4619      	mov	r1, r3
 8001942:	4811      	ldr	r0, [pc, #68]	@ (8001988 <HAL_I2C_MspInit+0x118>)
 8001944:	f001 f9f6 	bl	8002d34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001948:	4b0e      	ldr	r3, [pc, #56]	@ (8001984 <HAL_I2C_MspInit+0x114>)
 800194a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800194e:	4a0d      	ldr	r2, [pc, #52]	@ (8001984 <HAL_I2C_MspInit+0x114>)
 8001950:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001954:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001958:	4b0a      	ldr	r3, [pc, #40]	@ (8001984 <HAL_I2C_MspInit+0x114>)
 800195a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800195e:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001962:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001966:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001970:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001974:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001976:	bf00      	nop
 8001978:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40005400 	.word	0x40005400
 8001984:	44020c00 	.word	0x44020c00
 8001988:	42020400 	.word	0x42020400

0800198c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b0c6      	sub	sp, #280	@ 0x118
 8001990:	af00      	add	r7, sp, #0
 8001992:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001996:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800199a:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800199c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80019a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80019a4:	4618      	mov	r0, r3
 80019a6:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80019aa:	461a      	mov	r2, r3
 80019ac:	2100      	movs	r1, #0
 80019ae:	f010 fe49 	bl	8012644 <memset>
  if(hrng->Instance==RNG)
 80019b2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80019b6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a1d      	ldr	r2, [pc, #116]	@ (8001a34 <HAL_RNG_MspInit+0xa8>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d131      	bne.n	8001a28 <HAL_RNG_MspInit+0x9c>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80019c4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80019c8:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 80019cc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80019d0:	f04f 0300 	mov.w	r3, #0
 80019d4:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80019d8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80019dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80019e0:	2200      	movs	r2, #0
 80019e2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019e6:	f107 0310 	add.w	r3, r7, #16
 80019ea:	4618      	mov	r0, r3
 80019ec:	f004 ffd0 	bl	8006990 <HAL_RCCEx_PeriphCLKConfig>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <HAL_RNG_MspInit+0x6e>
    {
      Error_Handler();
 80019f6:	f7ff ff0b 	bl	8001810 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80019fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001a38 <HAL_RNG_MspInit+0xac>)
 80019fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a00:	4a0d      	ldr	r2, [pc, #52]	@ (8001a38 <HAL_RNG_MspInit+0xac>)
 8001a02:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a06:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a38 <HAL_RNG_MspInit+0xac>)
 8001a0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a10:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 8001a14:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001a18:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001a22:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001a26:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8001a28:	bf00      	nop
 8001a2a:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	420c0800 	.word	0x420c0800
 8001a38:	44020c00 	.word	0x44020c00

08001a3c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b0c6      	sub	sp, #280	@ 0x118
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001a46:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001a4a:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a4c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001a50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001a54:	4618      	mov	r0, r3
 8001a56:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	f010 fdf1 	bl	8012644 <memset>
  if(hrtc->Instance==RTC)
 8001a62:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001a66:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a21      	ldr	r2, [pc, #132]	@ (8001af4 <HAL_RTC_MspInit+0xb8>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d13a      	bne.n	8001aea <HAL_RTC_MspInit+0xae>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001a74:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001a78:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8001a7c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a80:	f04f 0300 	mov.w	r3, #0
 8001a84:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001a88:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001a8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001a90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a94:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a98:	f107 0310 	add.w	r3, r7, #16
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f004 ff77 	bl	8006990 <HAL_RCCEx_PeriphCLKConfig>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <HAL_RTC_MspInit+0x70>
    {
      Error_Handler();
 8001aa8:	f7ff feb2 	bl	8001810 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001aac:	4b12      	ldr	r3, [pc, #72]	@ (8001af8 <HAL_RTC_MspInit+0xbc>)
 8001aae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ab2:	4a11      	ldr	r2, [pc, #68]	@ (8001af8 <HAL_RTC_MspInit+0xbc>)
 8001ab4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ab8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001abc:	4b0e      	ldr	r3, [pc, #56]	@ (8001af8 <HAL_RTC_MspInit+0xbc>)
 8001abe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001ac2:	4a0d      	ldr	r2, [pc, #52]	@ (8001af8 <HAL_RTC_MspInit+0xbc>)
 8001ac4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ac8:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001acc:	4b0a      	ldr	r3, [pc, #40]	@ (8001af8 <HAL_RTC_MspInit+0xbc>)
 8001ace:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001ad2:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001ad6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ada:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ae4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001ae8:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001aea:	bf00      	nop
 8001aec:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	44007800 	.word	0x44007800
 8001af8:	44020c00 	.word	0x44020c00

08001afc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b0ce      	sub	sp, #312	@ 0x138
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001b06:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001b0a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0c:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b1c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001b20:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001b24:	4618      	mov	r0, r3
 8001b26:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	f010 fd89 	bl	8012644 <memset>
  if(hspi->Instance==SPI1)
 8001b32:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001b36:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a60      	ldr	r2, [pc, #384]	@ (8001cc0 <HAL_SPI_MspInit+0x1c4>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	f040 80b7 	bne.w	8001cb4 <HAL_SPI_MspInit+0x1b8>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001b46:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001b4a:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001b4e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001b52:	f04f 0300 	mov.w	r3, #0
 8001b56:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 8001b5a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001b5e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001b62:	2200      	movs	r2, #0
 8001b64:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b68:	f107 0318 	add.w	r3, r7, #24
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f004 ff0f 	bl	8006990 <HAL_RCCEx_PeriphCLKConfig>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <HAL_SPI_MspInit+0x80>
    {
      Error_Handler();
 8001b78:	f7ff fe4a 	bl	8001810 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b7c:	4b51      	ldr	r3, [pc, #324]	@ (8001cc4 <HAL_SPI_MspInit+0x1c8>)
 8001b7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001b82:	4a50      	ldr	r2, [pc, #320]	@ (8001cc4 <HAL_SPI_MspInit+0x1c8>)
 8001b84:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b88:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001b8c:	4b4d      	ldr	r3, [pc, #308]	@ (8001cc4 <HAL_SPI_MspInit+0x1c8>)
 8001b8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001b92:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8001b96:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001b9a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001ba4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001ba8:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001baa:	4b46      	ldr	r3, [pc, #280]	@ (8001cc4 <HAL_SPI_MspInit+0x1c8>)
 8001bac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bb0:	4a44      	ldr	r2, [pc, #272]	@ (8001cc4 <HAL_SPI_MspInit+0x1c8>)
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001bba:	4b42      	ldr	r3, [pc, #264]	@ (8001cc4 <HAL_SPI_MspInit+0x1c8>)
 8001bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bc0:	f003 0201 	and.w	r2, r3, #1
 8001bc4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001bc8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001bd2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001bd6:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bd8:	4b3a      	ldr	r3, [pc, #232]	@ (8001cc4 <HAL_SPI_MspInit+0x1c8>)
 8001bda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bde:	4a39      	ldr	r2, [pc, #228]	@ (8001cc4 <HAL_SPI_MspInit+0x1c8>)
 8001be0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001be4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001be8:	4b36      	ldr	r3, [pc, #216]	@ (8001cc4 <HAL_SPI_MspInit+0x1c8>)
 8001bea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bee:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8001bf2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001bf6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001c00:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001c04:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c06:	4b2f      	ldr	r3, [pc, #188]	@ (8001cc4 <HAL_SPI_MspInit+0x1c8>)
 8001c08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c0c:	4a2d      	ldr	r2, [pc, #180]	@ (8001cc4 <HAL_SPI_MspInit+0x1c8>)
 8001c0e:	f043 0302 	orr.w	r3, r3, #2
 8001c12:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c16:	4b2b      	ldr	r3, [pc, #172]	@ (8001cc4 <HAL_SPI_MspInit+0x1c8>)
 8001c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c1c:	f003 0202 	and.w	r2, r3, #2
 8001c20:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001c24:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001c2e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001c32:	681b      	ldr	r3, [r3, #0]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PG9     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c34:	2320      	movs	r3, #32
 8001c36:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c46:	2300      	movs	r3, #0
 8001c48:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c4c:	2305      	movs	r3, #5
 8001c4e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c52:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001c56:	4619      	mov	r1, r3
 8001c58:	481b      	ldr	r0, [pc, #108]	@ (8001cc8 <HAL_SPI_MspInit+0x1cc>)
 8001c5a:	f001 f86b 	bl	8002d34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c62:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c66:	2302      	movs	r3, #2
 8001c68:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c72:	2300      	movs	r3, #0
 8001c74:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c78:	2305      	movs	r3, #5
 8001c7a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c7e:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001c82:	4619      	mov	r1, r3
 8001c84:	4811      	ldr	r0, [pc, #68]	@ (8001ccc <HAL_SPI_MspInit+0x1d0>)
 8001c86:	f001 f855 	bl	8002d34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c8a:	2320      	movs	r3, #32
 8001c8c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c90:	2302      	movs	r3, #2
 8001c92:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ca2:	2305      	movs	r3, #5
 8001ca4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca8:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001cac:	4619      	mov	r1, r3
 8001cae:	4808      	ldr	r0, [pc, #32]	@ (8001cd0 <HAL_SPI_MspInit+0x1d4>)
 8001cb0:	f001 f840 	bl	8002d34 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001cb4:	bf00      	nop
 8001cb6:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40013000 	.word	0x40013000
 8001cc4:	44020c00 	.word	0x44020c00
 8001cc8:	42020000 	.word	0x42020000
 8001ccc:	42021800 	.word	0x42021800
 8001cd0:	42020400 	.word	0x42020400

08001cd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b0d0      	sub	sp, #320	@ 0x140
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001cde:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001ce2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
 8001cf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cf4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001cf8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001d02:	461a      	mov	r2, r3
 8001d04:	2100      	movs	r1, #0
 8001d06:	f010 fc9d 	bl	8012644 <memset>
  if(huart->Instance==USART2)
 8001d0a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001d0e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a7c      	ldr	r2, [pc, #496]	@ (8001f08 <HAL_UART_MspInit+0x234>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	f040 808a 	bne.w	8001e32 <HAL_UART_MspInit+0x15e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d1e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001d22:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001d26:	f04f 0202 	mov.w	r2, #2
 8001d2a:	f04f 0300 	mov.w	r3, #0
 8001d2e:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d32:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001d36:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	661a      	str	r2, [r3, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d3e:	f107 0320 	add.w	r3, r7, #32
 8001d42:	4618      	mov	r0, r3
 8001d44:	f004 fe24 	bl	8006990 <HAL_RCCEx_PeriphCLKConfig>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 8001d4e:	f7ff fd5f 	bl	8001810 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d52:	4b6e      	ldr	r3, [pc, #440]	@ (8001f0c <HAL_UART_MspInit+0x238>)
 8001d54:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001d58:	4a6c      	ldr	r2, [pc, #432]	@ (8001f0c <HAL_UART_MspInit+0x238>)
 8001d5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d5e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001d62:	4b6a      	ldr	r3, [pc, #424]	@ (8001f0c <HAL_UART_MspInit+0x238>)
 8001d64:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001d68:	f403 3200 	and.w	r2, r3, #131072	@ 0x20000
 8001d6c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001d70:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001d7a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001d7e:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d80:	4b62      	ldr	r3, [pc, #392]	@ (8001f0c <HAL_UART_MspInit+0x238>)
 8001d82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d86:	4a61      	ldr	r2, [pc, #388]	@ (8001f0c <HAL_UART_MspInit+0x238>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d90:	4b5e      	ldr	r3, [pc, #376]	@ (8001f0c <HAL_UART_MspInit+0x238>)
 8001d92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d96:	f003 0201 	and.w	r2, r3, #1
 8001d9a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001d9e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001da8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001dac:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dae:	4b57      	ldr	r3, [pc, #348]	@ (8001f0c <HAL_UART_MspInit+0x238>)
 8001db0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001db4:	4a55      	ldr	r2, [pc, #340]	@ (8001f0c <HAL_UART_MspInit+0x238>)
 8001db6:	f043 0308 	orr.w	r3, r3, #8
 8001dba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001dbe:	4b53      	ldr	r3, [pc, #332]	@ (8001f0c <HAL_UART_MspInit+0x238>)
 8001dc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001dc4:	f003 0208 	and.w	r2, r3, #8
 8001dc8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001dcc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001dd6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001dda:	681b      	ldr	r3, [r3, #0]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ddc:	2308      	movs	r3, #8
 8001dde:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de2:	2302      	movs	r3, #2
 8001de4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dee:	2300      	movs	r3, #0
 8001df0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001df4:	2307      	movs	r3, #7
 8001df6:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfa:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4843      	ldr	r0, [pc, #268]	@ (8001f10 <HAL_UART_MspInit+0x23c>)
 8001e02:	f000 ff97 	bl	8002d34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e06:	2320      	movs	r3, #32
 8001e08:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e12:	2300      	movs	r3, #0
 8001e14:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e1e:	2307      	movs	r3, #7
 8001e20:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e24:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8001e28:	4619      	mov	r1, r3
 8001e2a:	483a      	ldr	r0, [pc, #232]	@ (8001f14 <HAL_UART_MspInit+0x240>)
 8001e2c:	f000 ff82 	bl	8002d34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001e30:	e065      	b.n	8001efe <HAL_UART_MspInit+0x22a>
  else if(huart->Instance==USART6)
 8001e32:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001e36:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a36      	ldr	r2, [pc, #216]	@ (8001f18 <HAL_UART_MspInit+0x244>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d15c      	bne.n	8001efe <HAL_UART_MspInit+0x22a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001e44:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001e48:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001e4c:	f04f 0220 	mov.w	r2, #32
 8001e50:	f04f 0300 	mov.w	r3, #0
 8001e54:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 8001e58:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001e5c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001e60:	2200      	movs	r2, #0
 8001e62:	671a      	str	r2, [r3, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e64:	f107 0320 	add.w	r3, r7, #32
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f004 fd91 	bl	8006990 <HAL_RCCEx_PeriphCLKConfig>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 8001e74:	f7ff fccc 	bl	8001810 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001e78:	4b24      	ldr	r3, [pc, #144]	@ (8001f0c <HAL_UART_MspInit+0x238>)
 8001e7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001e7e:	4a23      	ldr	r2, [pc, #140]	@ (8001f0c <HAL_UART_MspInit+0x238>)
 8001e80:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e84:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001e88:	4b20      	ldr	r3, [pc, #128]	@ (8001f0c <HAL_UART_MspInit+0x238>)
 8001e8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001e8e:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 8001e92:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001e96:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001ea0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001ea4:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ea6:	4b19      	ldr	r3, [pc, #100]	@ (8001f0c <HAL_UART_MspInit+0x238>)
 8001ea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001eac:	4a17      	ldr	r2, [pc, #92]	@ (8001f0c <HAL_UART_MspInit+0x238>)
 8001eae:	f043 0304 	orr.w	r3, r3, #4
 8001eb2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001eb6:	4b15      	ldr	r3, [pc, #84]	@ (8001f0c <HAL_UART_MspInit+0x238>)
 8001eb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ebc:	f003 0204 	and.w	r2, r3, #4
 8001ec0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001ec4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001ece:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001ed2:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ed4:	23c0      	movs	r3, #192	@ 0xc0
 8001ed6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eda:	2302      	movs	r3, #2
 8001edc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8001eec:	2307      	movs	r3, #7
 8001eee:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ef2:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4808      	ldr	r0, [pc, #32]	@ (8001f1c <HAL_UART_MspInit+0x248>)
 8001efa:	f000 ff1b 	bl	8002d34 <HAL_GPIO_Init>
}
 8001efe:	bf00      	nop
 8001f00:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40004400 	.word	0x40004400
 8001f0c:	44020c00 	.word	0x44020c00
 8001f10:	42020000 	.word	0x42020000
 8001f14:	42020c00 	.word	0x42020c00
 8001f18:	40006400 	.word	0x40006400
 8001f1c:	42020800 	.word	0x42020800

08001f20 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b0c6      	sub	sp, #280	@ 0x118
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f2a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f2e:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f30:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001f3e:	461a      	mov	r2, r3
 8001f40:	2100      	movs	r1, #0
 8001f42:	f010 fb7f 	bl	8012644 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8001f46:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f4a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a22      	ldr	r2, [pc, #136]	@ (8001fdc <HAL_PCD_MspInit+0xbc>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d13b      	bne.n	8001fd0 <HAL_PCD_MspInit+0xb0>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001f58:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f5c:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8001f60:	f04f 0200 	mov.w	r2, #0
 8001f64:	f04f 0310 	mov.w	r3, #16
 8001f68:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001f6c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001f74:	2230      	movs	r2, #48	@ 0x30
 8001f76:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f7a:	f107 0310 	add.w	r3, r7, #16
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f004 fd06 	bl	8006990 <HAL_RCCEx_PeriphCLKConfig>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <HAL_PCD_MspInit+0x6e>
    {
      Error_Handler();
 8001f8a:	f7ff fc41 	bl	8001810 <Error_Handler>
    }

    /* Enable VDDUSB */
    HAL_PWREx_EnableVddUSB();
 8001f8e:	f003 fd75 	bl	8005a7c <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001f92:	4b13      	ldr	r3, [pc, #76]	@ (8001fe0 <HAL_PCD_MspInit+0xc0>)
 8001f94:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001f98:	4a11      	ldr	r2, [pc, #68]	@ (8001fe0 <HAL_PCD_MspInit+0xc0>)
 8001f9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f9e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe0 <HAL_PCD_MspInit+0xc0>)
 8001fa4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001fa8:	f003 7280 	and.w	r2, r3, #16777216	@ 0x1000000
 8001fac:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001fb0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001fba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001fbe:	681b      	ldr	r3, [r3, #0]
    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	204a      	movs	r0, #74	@ 0x4a
 8001fc6:	f000 fd55 	bl	8002a74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_DRD_FS_IRQn);
 8001fca:	204a      	movs	r0, #74	@ 0x4a
 8001fcc:	f000 fd6c 	bl	8002aa8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 8001fd0:	bf00      	nop
 8001fd2:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40016000 	.word	0x40016000
 8001fe0:	44020c00 	.word	0x44020c00

08001fe4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fe8:	bf00      	nop
 8001fea:	e7fd      	b.n	8001fe8 <NMI_Handler+0x4>

08001fec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ff0:	bf00      	nop
 8001ff2:	e7fd      	b.n	8001ff0 <HardFault_Handler+0x4>

08001ff4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ff8:	bf00      	nop
 8001ffa:	e7fd      	b.n	8001ff8 <MemManage_Handler+0x4>

08001ffc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002000:	bf00      	nop
 8002002:	e7fd      	b.n	8002000 <BusFault_Handler+0x4>

08002004 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002008:	bf00      	nop
 800200a:	e7fd      	b.n	8002008 <UsageFault_Handler+0x4>

0800200c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800201a:	b480      	push	{r7}
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800203a:	f000 fc1f 	bl	800287c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}

08002042 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8002046:	2000      	movs	r0, #0
 8002048:	f000 fa78 	bl	800253c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 800204c:	bf00      	nop
 800204e:	bd80      	pop	{r7, pc}

08002050 <USB_DRD_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt.
  */
void USB_DRD_FS_IRQHandler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DRD_FS_IRQn 0 */

  /* USER CODE END USB_DRD_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 8002054:	4802      	ldr	r0, [pc, #8]	@ (8002060 <USB_DRD_FS_IRQHandler+0x10>)
 8002056:	f002 f9a3 	bl	80043a0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_DRD_FS_IRQn 1 */

  /* USER CODE END USB_DRD_FS_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	2000043c 	.word	0x2000043c

08002064 <HASH_IRQHandler>:

/**
  * @brief This function handles HASH global interrupt.
  */
void HASH_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_IRQn 0 */

  /* USER CODE END HASH_IRQn 0 */
  HAL_HASH_IRQHandler(&hhash);
 8002068:	4802      	ldr	r0, [pc, #8]	@ (8002074 <HASH_IRQHandler+0x10>)
 800206a:	f001 f81f 	bl	80030ac <HAL_HASH_IRQHandler>
  /* USER CODE BEGIN HASH_IRQn 1 */

  /* USER CODE END HASH_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	200001ac 	.word	0x200001ac

08002078 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]
 8002088:	e00a      	b.n	80020a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800208a:	f3af 8000 	nop.w
 800208e:	4601      	mov	r1, r0
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	1c5a      	adds	r2, r3, #1
 8002094:	60ba      	str	r2, [r7, #8]
 8002096:	b2ca      	uxtb	r2, r1
 8002098:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	3301      	adds	r3, #1
 800209e:	617b      	str	r3, [r7, #20]
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	dbf0      	blt.n	800208a <_read+0x12>
  }

  return len;
 80020a8:	687b      	ldr	r3, [r7, #4]
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3718      	adds	r7, #24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b086      	sub	sp, #24
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	60f8      	str	r0, [r7, #12]
 80020ba:	60b9      	str	r1, [r7, #8]
 80020bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
 80020c2:	e009      	b.n	80020d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	1c5a      	adds	r2, r3, #1
 80020c8:	60ba      	str	r2, [r7, #8]
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f000 fabb 	bl	8002648 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	3301      	adds	r3, #1
 80020d6:	617b      	str	r3, [r7, #20]
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	429a      	cmp	r2, r3
 80020de:	dbf1      	blt.n	80020c4 <_write+0x12>
  }
  return len;
 80020e0:	687b      	ldr	r3, [r7, #4]
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3718      	adds	r7, #24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <_close>:

int _close(int file)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002112:	605a      	str	r2, [r3, #4]
  return 0;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <_isatty>:

int _isatty(int file)
{
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800212a:	2301      	movs	r3, #1
}
 800212c:	4618      	mov	r0, r3
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
	...

08002154 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800215c:	4a14      	ldr	r2, [pc, #80]	@ (80021b0 <_sbrk+0x5c>)
 800215e:	4b15      	ldr	r3, [pc, #84]	@ (80021b4 <_sbrk+0x60>)
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002168:	4b13      	ldr	r3, [pc, #76]	@ (80021b8 <_sbrk+0x64>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d102      	bne.n	8002176 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002170:	4b11      	ldr	r3, [pc, #68]	@ (80021b8 <_sbrk+0x64>)
 8002172:	4a12      	ldr	r2, [pc, #72]	@ (80021bc <_sbrk+0x68>)
 8002174:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002176:	4b10      	ldr	r3, [pc, #64]	@ (80021b8 <_sbrk+0x64>)
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4413      	add	r3, r2
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	429a      	cmp	r2, r3
 8002182:	d207      	bcs.n	8002194 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002184:	f010 fabc 	bl	8012700 <__errno>
 8002188:	4603      	mov	r3, r0
 800218a:	220c      	movs	r2, #12
 800218c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800218e:	f04f 33ff 	mov.w	r3, #4294967295
 8002192:	e009      	b.n	80021a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002194:	4b08      	ldr	r3, [pc, #32]	@ (80021b8 <_sbrk+0x64>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800219a:	4b07      	ldr	r3, [pc, #28]	@ (80021b8 <_sbrk+0x64>)
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4413      	add	r3, r2
 80021a2:	4a05      	ldr	r2, [pc, #20]	@ (80021b8 <_sbrk+0x64>)
 80021a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021a6:	68fb      	ldr	r3, [r7, #12]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	200a0000 	.word	0x200a0000
 80021b4:	00000500 	.word	0x00000500
 80021b8:	200009fc 	.word	0x200009fc
 80021bc:	20011320 	.word	0x20011320

080021c0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80021c6:	4b35      	ldr	r3, [pc, #212]	@ (800229c <SystemInit+0xdc>)
 80021c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021cc:	4a33      	ldr	r2, [pc, #204]	@ (800229c <SystemInit+0xdc>)
 80021ce:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021d2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80021d6:	4b32      	ldr	r3, [pc, #200]	@ (80022a0 <SystemInit+0xe0>)
 80021d8:	2201      	movs	r2, #1
 80021da:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80021dc:	4b30      	ldr	r3, [pc, #192]	@ (80022a0 <SystemInit+0xe0>)
 80021de:	2200      	movs	r2, #0
 80021e0:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80021e2:	4b2f      	ldr	r3, [pc, #188]	@ (80022a0 <SystemInit+0xe0>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80021e8:	4b2d      	ldr	r3, [pc, #180]	@ (80022a0 <SystemInit+0xe0>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	492c      	ldr	r1, [pc, #176]	@ (80022a0 <SystemInit+0xe0>)
 80021ee:	4b2d      	ldr	r3, [pc, #180]	@ (80022a4 <SystemInit+0xe4>)
 80021f0:	4013      	ands	r3, r2
 80021f2:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80021f4:	4b2a      	ldr	r3, [pc, #168]	@ (80022a0 <SystemInit+0xe0>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 80021fa:	4b29      	ldr	r3, [pc, #164]	@ (80022a0 <SystemInit+0xe0>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8002200:	4b27      	ldr	r3, [pc, #156]	@ (80022a0 <SystemInit+0xe0>)
 8002202:	2200      	movs	r2, #0
 8002204:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8002206:	4b26      	ldr	r3, [pc, #152]	@ (80022a0 <SystemInit+0xe0>)
 8002208:	4a27      	ldr	r2, [pc, #156]	@ (80022a8 <SystemInit+0xe8>)
 800220a:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 800220c:	4b24      	ldr	r3, [pc, #144]	@ (80022a0 <SystemInit+0xe0>)
 800220e:	2200      	movs	r2, #0
 8002210:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8002212:	4b23      	ldr	r3, [pc, #140]	@ (80022a0 <SystemInit+0xe0>)
 8002214:	4a24      	ldr	r2, [pc, #144]	@ (80022a8 <SystemInit+0xe8>)
 8002216:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8002218:	4b21      	ldr	r3, [pc, #132]	@ (80022a0 <SystemInit+0xe0>)
 800221a:	2200      	movs	r2, #0
 800221c:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 800221e:	4b20      	ldr	r3, [pc, #128]	@ (80022a0 <SystemInit+0xe0>)
 8002220:	4a21      	ldr	r2, [pc, #132]	@ (80022a8 <SystemInit+0xe8>)
 8002222:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8002224:	4b1e      	ldr	r3, [pc, #120]	@ (80022a0 <SystemInit+0xe0>)
 8002226:	2200      	movs	r2, #0
 8002228:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800222a:	4b1d      	ldr	r3, [pc, #116]	@ (80022a0 <SystemInit+0xe0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a1c      	ldr	r2, [pc, #112]	@ (80022a0 <SystemInit+0xe0>)
 8002230:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002234:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002236:	4b1a      	ldr	r3, [pc, #104]	@ (80022a0 <SystemInit+0xe0>)
 8002238:	2200      	movs	r2, #0
 800223a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800223c:	4b17      	ldr	r3, [pc, #92]	@ (800229c <SystemInit+0xdc>)
 800223e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002242:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8002244:	4b19      	ldr	r3, [pc, #100]	@ (80022ac <SystemInit+0xec>)
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 800224c:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8002254:	d003      	beq.n	800225e <SystemInit+0x9e>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800225c:	d117      	bne.n	800228e <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800225e:	4b13      	ldr	r3, [pc, #76]	@ (80022ac <SystemInit+0xec>)
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d005      	beq.n	8002276 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 800226a:	4b10      	ldr	r3, [pc, #64]	@ (80022ac <SystemInit+0xec>)
 800226c:	4a10      	ldr	r2, [pc, #64]	@ (80022b0 <SystemInit+0xf0>)
 800226e:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8002270:	4b0e      	ldr	r3, [pc, #56]	@ (80022ac <SystemInit+0xec>)
 8002272:	4a10      	ldr	r2, [pc, #64]	@ (80022b4 <SystemInit+0xf4>)
 8002274:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8002276:	4b0d      	ldr	r3, [pc, #52]	@ (80022ac <SystemInit+0xec>)
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	4a0c      	ldr	r2, [pc, #48]	@ (80022ac <SystemInit+0xec>)
 800227c:	f043 0302 	orr.w	r3, r3, #2
 8002280:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8002282:	4b0a      	ldr	r3, [pc, #40]	@ (80022ac <SystemInit+0xec>)
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	4a09      	ldr	r2, [pc, #36]	@ (80022ac <SystemInit+0xec>)
 8002288:	f043 0301 	orr.w	r3, r3, #1
 800228c:	61d3      	str	r3, [r2, #28]
  }
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	e000ed00 	.word	0xe000ed00
 80022a0:	44020c00 	.word	0x44020c00
 80022a4:	eae2eae3 	.word	0xeae2eae3
 80022a8:	01010280 	.word	0x01010280
 80022ac:	40022000 	.word	0x40022000
 80022b0:	08192a3b 	.word	0x08192a3b
 80022b4:	4c5d6e7f 	.word	0x4c5d6e7f

080022b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80022b8:	480d      	ldr	r0, [pc, #52]	@ (80022f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80022ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80022bc:	f7ff ff80 	bl	80021c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022c0:	480c      	ldr	r0, [pc, #48]	@ (80022f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80022c2:	490d      	ldr	r1, [pc, #52]	@ (80022f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022c4:	4a0d      	ldr	r2, [pc, #52]	@ (80022fc <LoopForever+0xe>)
  movs r3, #0
 80022c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022c8:	e002      	b.n	80022d0 <LoopCopyDataInit>

080022ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ce:	3304      	adds	r3, #4

080022d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022d4:	d3f9      	bcc.n	80022ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002300 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022d8:	4c0a      	ldr	r4, [pc, #40]	@ (8002304 <LoopForever+0x16>)
  movs r3, #0
 80022da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022dc:	e001      	b.n	80022e2 <LoopFillZerobss>

080022de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022e0:	3204      	adds	r2, #4

080022e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022e4:	d3fb      	bcc.n	80022de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80022e6:	f010 fa11 	bl	801270c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022ea:	f7fe fd75 	bl	8000dd8 <main>

080022ee <LoopForever>:

LoopForever:
    b LoopForever
 80022ee:	e7fe      	b.n	80022ee <LoopForever>
  ldr   r0, =_estack
 80022f0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80022f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022f8:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 80022fc:	080136d4 	.word	0x080136d4
  ldr r2, =_sbss
 8002300:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8002304:	20011320 	.word	0x20011320

08002308 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002308:	e7fe      	b.n	8002308 <ADC1_IRQHandler>
	...

0800230c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b08c      	sub	sp, #48	@ 0x30
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002316:	2300      	movs	r3, #0
 8002318:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if ((Led != LED2)
 800231a:	79fb      	ldrb	r3, [r7, #7]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d009      	beq.n	8002334 <BSP_LED_Init+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8002320:	79fb      	ldrb	r3, [r7, #7]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d006      	beq.n	8002334 <BSP_LED_Init+0x28>
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	2b02      	cmp	r3, #2
 800232a:	d003      	beq.n	8002334 <BSP_LED_Init+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800232c:	f06f 0301 	mvn.w	r3, #1
 8002330:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002332:	e055      	b.n	80023e0 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8002334:	79fb      	ldrb	r3, [r7, #7]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d10f      	bne.n	800235a <BSP_LED_Init+0x4e>
    {
      LED2_GPIO_CLK_ENABLE();
 800233a:	4b2c      	ldr	r3, [pc, #176]	@ (80023ec <BSP_LED_Init+0xe0>)
 800233c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002340:	4a2a      	ldr	r2, [pc, #168]	@ (80023ec <BSP_LED_Init+0xe0>)
 8002342:	f043 0320 	orr.w	r3, r3, #32
 8002346:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800234a:	4b28      	ldr	r3, [pc, #160]	@ (80023ec <BSP_LED_Init+0xe0>)
 800234c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002350:	f003 0320 	and.w	r3, r3, #32
 8002354:	617b      	str	r3, [r7, #20]
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	e021      	b.n	800239e <BSP_LED_Init+0x92>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10f      	bne.n	8002380 <BSP_LED_Init+0x74>
    {
      LED1_GPIO_CLK_ENABLE();
 8002360:	4b22      	ldr	r3, [pc, #136]	@ (80023ec <BSP_LED_Init+0xe0>)
 8002362:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002366:	4a21      	ldr	r2, [pc, #132]	@ (80023ec <BSP_LED_Init+0xe0>)
 8002368:	f043 0302 	orr.w	r3, r3, #2
 800236c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002370:	4b1e      	ldr	r3, [pc, #120]	@ (80023ec <BSP_LED_Init+0xe0>)
 8002372:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	613b      	str	r3, [r7, #16]
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	e00e      	b.n	800239e <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8002380:	4b1a      	ldr	r3, [pc, #104]	@ (80023ec <BSP_LED_Init+0xe0>)
 8002382:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002386:	4a19      	ldr	r2, [pc, #100]	@ (80023ec <BSP_LED_Init+0xe0>)
 8002388:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800238c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002390:	4b16      	ldr	r3, [pc, #88]	@ (80023ec <BSP_LED_Init+0xe0>)
 8002392:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002396:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	4a13      	ldr	r2, [pc, #76]	@ (80023f0 <BSP_LED_Init+0xe4>)
 80023a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023a6:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80023a8:	2301      	movs	r3, #1
 80023aa:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b0:	2303      	movs	r3, #3
 80023b2:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80023b4:	79fb      	ldrb	r3, [r7, #7]
 80023b6:	4a0f      	ldr	r2, [pc, #60]	@ (80023f4 <BSP_LED_Init+0xe8>)
 80023b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023bc:	f107 0218 	add.w	r2, r7, #24
 80023c0:	4611      	mov	r1, r2
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 fcb6 	bl	8002d34 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80023c8:	79fb      	ldrb	r3, [r7, #7]
 80023ca:	4a0a      	ldr	r2, [pc, #40]	@ (80023f4 <BSP_LED_Init+0xe8>)
 80023cc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80023d0:	79fb      	ldrb	r3, [r7, #7]
 80023d2:	4a07      	ldr	r2, [pc, #28]	@ (80023f0 <BSP_LED_Init+0xe4>)
 80023d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023d8:	2200      	movs	r2, #0
 80023da:	4619      	mov	r1, r3
 80023dc:	f000 fdfc 	bl	8002fd8 <HAL_GPIO_WritePin>
  }

  return ret;
 80023e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3730      	adds	r7, #48	@ 0x30
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	44020c00 	.word	0x44020c00
 80023f0:	0801365c 	.word	0x0801365c
 80023f4:	2000000c 	.word	0x2000000c

080023f8 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002402:	2300      	movs	r3, #0
 8002404:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 8002406:	79fb      	ldrb	r3, [r7, #7]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d009      	beq.n	8002420 <BSP_LED_Toggle+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 800240c:	79fb      	ldrb	r3, [r7, #7]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d006      	beq.n	8002420 <BSP_LED_Toggle+0x28>
 8002412:	79fb      	ldrb	r3, [r7, #7]
 8002414:	2b02      	cmp	r3, #2
 8002416:	d003      	beq.n	8002420 <BSP_LED_Toggle+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002418:	f06f 0301 	mvn.w	r3, #1
 800241c:	60fb      	str	r3, [r7, #12]
 800241e:	e00b      	b.n	8002438 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002420:	79fb      	ldrb	r3, [r7, #7]
 8002422:	4a08      	ldr	r2, [pc, #32]	@ (8002444 <BSP_LED_Toggle+0x4c>)
 8002424:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002428:	79fb      	ldrb	r3, [r7, #7]
 800242a:	4907      	ldr	r1, [pc, #28]	@ (8002448 <BSP_LED_Toggle+0x50>)
 800242c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002430:	4619      	mov	r1, r3
 8002432:	4610      	mov	r0, r2
 8002434:	f000 fde8 	bl	8003008 <HAL_GPIO_TogglePin>
  }

  return ret;
 8002438:	68fb      	ldr	r3, [r7, #12]
}
 800243a:	4618      	mov	r0, r3
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	2000000c 	.word	0x2000000c
 8002448:	0801365c 	.word	0x0801365c

0800244c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b088      	sub	sp, #32
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	460a      	mov	r2, r1
 8002456:	71fb      	strb	r3, [r7, #7]
 8002458:	4613      	mov	r3, r2
 800245a:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 800245c:	4b30      	ldr	r3, [pc, #192]	@ (8002520 <BSP_PB_Init+0xd4>)
 800245e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002462:	4a2f      	ldr	r2, [pc, #188]	@ (8002520 <BSP_PB_Init+0xd4>)
 8002464:	f043 0304 	orr.w	r3, r3, #4
 8002468:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800246c:	4b2c      	ldr	r3, [pc, #176]	@ (8002520 <BSP_PB_Init+0xd4>)
 800246e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002472:	f003 0304 	and.w	r3, r3, #4
 8002476:	60bb      	str	r3, [r7, #8]
 8002478:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800247a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800247e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002480:	2302      	movs	r3, #2
 8002482:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002484:	2302      	movs	r3, #2
 8002486:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8002488:	79bb      	ldrb	r3, [r7, #6]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10c      	bne.n	80024a8 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800248e:	2300      	movs	r3, #0
 8002490:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	4a23      	ldr	r2, [pc, #140]	@ (8002524 <BSP_PB_Init+0xd8>)
 8002496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800249a:	f107 020c 	add.w	r2, r7, #12
 800249e:	4611      	mov	r1, r2
 80024a0:	4618      	mov	r0, r3
 80024a2:	f000 fc47 	bl	8002d34 <HAL_GPIO_Init>
 80024a6:	e036      	b.n	8002516 <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80024a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002528 <BSP_PB_Init+0xdc>)
 80024aa:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80024ac:	79fb      	ldrb	r3, [r7, #7]
 80024ae:	4a1d      	ldr	r2, [pc, #116]	@ (8002524 <BSP_PB_Init+0xd8>)
 80024b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b4:	f107 020c 	add.w	r2, r7, #12
 80024b8:	4611      	mov	r1, r2
 80024ba:	4618      	mov	r0, r3
 80024bc:	f000 fc3a 	bl	8002d34 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80024c0:	79fa      	ldrb	r2, [r7, #7]
 80024c2:	4613      	mov	r3, r2
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	4413      	add	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4a18      	ldr	r2, [pc, #96]	@ (800252c <BSP_PB_Init+0xe0>)
 80024cc:	441a      	add	r2, r3
 80024ce:	79fb      	ldrb	r3, [r7, #7]
 80024d0:	4917      	ldr	r1, [pc, #92]	@ (8002530 <BSP_PB_Init+0xe4>)
 80024d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80024d6:	4619      	mov	r1, r3
 80024d8:	4610      	mov	r0, r2
 80024da:	f000 fbcf 	bl	8002c7c <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80024de:	79fa      	ldrb	r2, [r7, #7]
 80024e0:	4613      	mov	r3, r2
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	4413      	add	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4a10      	ldr	r2, [pc, #64]	@ (800252c <BSP_PB_Init+0xe0>)
 80024ea:	1898      	adds	r0, r3, r2
 80024ec:	79fb      	ldrb	r3, [r7, #7]
 80024ee:	4a11      	ldr	r2, [pc, #68]	@ (8002534 <BSP_PB_Init+0xe8>)
 80024f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024f4:	461a      	mov	r2, r3
 80024f6:	2100      	movs	r1, #0
 80024f8:	f000 fb94 	bl	8002c24 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80024fc:	2018      	movs	r0, #24
 80024fe:	79fb      	ldrb	r3, [r7, #7]
 8002500:	4a0d      	ldr	r2, [pc, #52]	@ (8002538 <BSP_PB_Init+0xec>)
 8002502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002506:	2200      	movs	r2, #0
 8002508:	4619      	mov	r1, r3
 800250a:	f000 fab3 	bl	8002a74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800250e:	2318      	movs	r3, #24
 8002510:	4618      	mov	r0, r3
 8002512:	f000 fac9 	bl	8002aa8 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3720      	adds	r7, #32
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	44020c00 	.word	0x44020c00
 8002524:	20000018 	.word	0x20000018
 8002528:	10110000 	.word	0x10110000
 800252c:	20000a00 	.word	0x20000a00
 8002530:	08013664 	.word	0x08013664
 8002534:	2000001c 	.word	0x2000001c
 8002538:	20000020 	.word	0x20000020

0800253c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8002546:	79fa      	ldrb	r2, [r7, #7]
 8002548:	4613      	mov	r3, r2
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	4413      	add	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4a04      	ldr	r2, [pc, #16]	@ (8002564 <BSP_PB_IRQHandler+0x28>)
 8002552:	4413      	add	r3, r2
 8002554:	4618      	mov	r0, r3
 8002556:	f000 fba5 	bl	8002ca4 <HAL_EXTI_IRQHandler>
}
 800255a:	bf00      	nop
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	20000a00 	.word	0x20000a00

08002568 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
	...

08002580 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	6039      	str	r1, [r7, #0]
 800258a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800258c:	2300      	movs	r3, #0
 800258e:	60fb      	str	r3, [r7, #12]

  if (COM >= COM_NBR)
 8002590:	79fb      	ldrb	r3, [r7, #7]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002596:	f06f 0301 	mvn.w	r3, #1
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	e018      	b.n	80025d0 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800259e:	79fb      	ldrb	r3, [r7, #7]
 80025a0:	2294      	movs	r2, #148	@ 0x94
 80025a2:	fb02 f303 	mul.w	r3, r2, r3
 80025a6:	4a0d      	ldr	r2, [pc, #52]	@ (80025dc <BSP_COM_Init+0x5c>)
 80025a8:	4413      	add	r3, r2
 80025aa:	4618      	mov	r0, r3
 80025ac:	f000 f870 	bl	8002690 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80025b0:	79fb      	ldrb	r3, [r7, #7]
 80025b2:	2294      	movs	r2, #148	@ 0x94
 80025b4:	fb02 f303 	mul.w	r3, r2, r3
 80025b8:	4a08      	ldr	r2, [pc, #32]	@ (80025dc <BSP_COM_Init+0x5c>)
 80025ba:	4413      	add	r3, r2
 80025bc:	6839      	ldr	r1, [r7, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 f80e 	bl	80025e0 <MX_USART_Init>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d002      	beq.n	80025d0 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80025ca:	f06f 0303 	mvn.w	r3, #3
 80025ce:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80025d0:	68fb      	ldr	r3, [r7, #12]
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	20000a0c 	.word	0x20000a0c

080025e0 <MX_USART_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 80025ea:	4b16      	ldr	r3, [pc, #88]	@ (8002644 <MX_USART_Init+0x64>)
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	220c      	movs	r2, #12
 80025fe:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	895b      	ldrh	r3, [r3, #10]
 8002604:	461a      	mov	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	891b      	ldrh	r3, [r3, #8]
 8002616:	461a      	mov	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	899b      	ldrh	r3, [r3, #12]
 8002620:	461a      	mov	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800262c:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f00a fc84 	bl	800cf42 <HAL_UART_Init>
 800263a:	4603      	mov	r3, r0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	20000008 	.word	0x20000008

08002648 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8002650:	4b09      	ldr	r3, [pc, #36]	@ (8002678 <__io_putchar+0x30>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	461a      	mov	r2, r3
 8002656:	2394      	movs	r3, #148	@ 0x94
 8002658:	fb02 f303 	mul.w	r3, r2, r3
 800265c:	4a07      	ldr	r2, [pc, #28]	@ (800267c <__io_putchar+0x34>)
 800265e:	1898      	adds	r0, r3, r2
 8002660:	1d39      	adds	r1, r7, #4
 8002662:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002666:	2201      	movs	r2, #1
 8002668:	f00a fcbb 	bl	800cfe2 <HAL_UART_Transmit>
  return ch;
 800266c:	687b      	ldr	r3, [r7, #4]
}
 800266e:	4618      	mov	r0, r3
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	20000aa0 	.word	0x20000aa0
 800267c:	20000a0c 	.word	0x20000a0c

08002680 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002684:	2000      	movs	r0, #0
 8002686:	f7ff ff6f 	bl	8002568 <BSP_PB_Callback>
}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08a      	sub	sp, #40	@ 0x28
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8002698:	4b27      	ldr	r3, [pc, #156]	@ (8002738 <COM1_MspInit+0xa8>)
 800269a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800269e:	4a26      	ldr	r2, [pc, #152]	@ (8002738 <COM1_MspInit+0xa8>)
 80026a0:	f043 0308 	orr.w	r3, r3, #8
 80026a4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80026a8:	4b23      	ldr	r3, [pc, #140]	@ (8002738 <COM1_MspInit+0xa8>)
 80026aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026ae:	f003 0308 	and.w	r3, r3, #8
 80026b2:	613b      	str	r3, [r7, #16]
 80026b4:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80026b6:	4b20      	ldr	r3, [pc, #128]	@ (8002738 <COM1_MspInit+0xa8>)
 80026b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026bc:	4a1e      	ldr	r2, [pc, #120]	@ (8002738 <COM1_MspInit+0xa8>)
 80026be:	f043 0308 	orr.w	r3, r3, #8
 80026c2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80026c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002738 <COM1_MspInit+0xa8>)
 80026c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026cc:	f003 0308 	and.w	r3, r3, #8
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80026d4:	4b18      	ldr	r3, [pc, #96]	@ (8002738 <COM1_MspInit+0xa8>)
 80026d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80026da:	4a17      	ldr	r2, [pc, #92]	@ (8002738 <COM1_MspInit+0xa8>)
 80026dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026e0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80026e4:	4b14      	ldr	r3, [pc, #80]	@ (8002738 <COM1_MspInit+0xa8>)
 80026e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80026ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026ee:	60bb      	str	r3, [r7, #8]
 80026f0:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 80026f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026f6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80026f8:	2302      	movs	r3, #2
 80026fa:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80026fc:	2302      	movs	r3, #2
 80026fe:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002700:	2301      	movs	r3, #1
 8002702:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8002704:	2307      	movs	r3, #7
 8002706:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8002708:	f107 0314 	add.w	r3, r7, #20
 800270c:	4619      	mov	r1, r3
 800270e:	480b      	ldr	r0, [pc, #44]	@ (800273c <COM1_MspInit+0xac>)
 8002710:	f000 fb10 	bl	8002d34 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8002714:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002718:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800271a:	2302      	movs	r3, #2
 800271c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800271e:	2307      	movs	r3, #7
 8002720:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8002722:	f107 0314 	add.w	r3, r7, #20
 8002726:	4619      	mov	r1, r3
 8002728:	4804      	ldr	r0, [pc, #16]	@ (800273c <COM1_MspInit+0xac>)
 800272a:	f000 fb03 	bl	8002d34 <HAL_GPIO_Init>
}
 800272e:	bf00      	nop
 8002730:	3728      	adds	r7, #40	@ 0x28
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	44020c00 	.word	0x44020c00
 800273c:	42020c00 	.word	0x42020c00

08002740 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002744:	2003      	movs	r0, #3
 8002746:	f000 f98a 	bl	8002a5e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800274a:	f003 ff97 	bl	800667c <HAL_RCC_GetSysClockFreq>
 800274e:	4602      	mov	r2, r0
 8002750:	4b0c      	ldr	r3, [pc, #48]	@ (8002784 <HAL_Init+0x44>)
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	f003 030f 	and.w	r3, r3, #15
 8002758:	490b      	ldr	r1, [pc, #44]	@ (8002788 <HAL_Init+0x48>)
 800275a:	5ccb      	ldrb	r3, [r1, r3]
 800275c:	fa22 f303 	lsr.w	r3, r2, r3
 8002760:	4a0a      	ldr	r2, [pc, #40]	@ (800278c <HAL_Init+0x4c>)
 8002762:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002764:	2004      	movs	r0, #4
 8002766:	f000 f9cf 	bl	8002b08 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800276a:	200f      	movs	r0, #15
 800276c:	f000 f810 	bl	8002790 <HAL_InitTick>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e002      	b.n	8002780 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800277a:	f7ff f84f 	bl	800181c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	bd80      	pop	{r7, pc}
 8002784:	44020c00 	.word	0x44020c00
 8002788:	08013644 	.word	0x08013644
 800278c:	20000004 	.word	0x20000004

08002790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002798:	2300      	movs	r3, #0
 800279a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 800279c:	4b33      	ldr	r3, [pc, #204]	@ (800286c <HAL_InitTick+0xdc>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e05c      	b.n	8002862 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80027a8:	4b31      	ldr	r3, [pc, #196]	@ (8002870 <HAL_InitTick+0xe0>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0304 	and.w	r3, r3, #4
 80027b0:	2b04      	cmp	r3, #4
 80027b2:	d10c      	bne.n	80027ce <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80027b4:	4b2f      	ldr	r3, [pc, #188]	@ (8002874 <HAL_InitTick+0xe4>)
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	4b2c      	ldr	r3, [pc, #176]	@ (800286c <HAL_InitTick+0xdc>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	4619      	mov	r1, r3
 80027be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80027c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	e037      	b.n	800283e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80027ce:	f000 f9f3 	bl	8002bb8 <HAL_SYSTICK_GetCLKSourceConfig>
 80027d2:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d023      	beq.n	8002822 <HAL_InitTick+0x92>
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d82d      	bhi.n	800283c <HAL_InitTick+0xac>
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <HAL_InitTick+0x5e>
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d00d      	beq.n	8002808 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80027ec:	e026      	b.n	800283c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80027ee:	4b21      	ldr	r3, [pc, #132]	@ (8002874 <HAL_InitTick+0xe4>)
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	4b1e      	ldr	r3, [pc, #120]	@ (800286c <HAL_InitTick+0xdc>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	4619      	mov	r1, r3
 80027f8:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80027fc:	fbb3 f3f1 	udiv	r3, r3, r1
 8002800:	fbb2 f3f3 	udiv	r3, r2, r3
 8002804:	60fb      	str	r3, [r7, #12]
        break;
 8002806:	e01a      	b.n	800283e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002808:	4b18      	ldr	r3, [pc, #96]	@ (800286c <HAL_InitTick+0xdc>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	461a      	mov	r2, r3
 800280e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002812:	fbb3 f3f2 	udiv	r3, r3, r2
 8002816:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800281a:	fbb2 f3f3 	udiv	r3, r2, r3
 800281e:	60fb      	str	r3, [r7, #12]
        break;
 8002820:	e00d      	b.n	800283e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002822:	4b12      	ldr	r3, [pc, #72]	@ (800286c <HAL_InitTick+0xdc>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	461a      	mov	r2, r3
 8002828:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800282c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002830:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002834:	fbb2 f3f3 	udiv	r3, r2, r3
 8002838:	60fb      	str	r3, [r7, #12]
        break;
 800283a:	e000      	b.n	800283e <HAL_InitTick+0xae>
        break;
 800283c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f000 f940 	bl	8002ac4 <HAL_SYSTICK_Config>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e009      	b.n	8002862 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800284e:	2200      	movs	r2, #0
 8002850:	6879      	ldr	r1, [r7, #4]
 8002852:	f04f 30ff 	mov.w	r0, #4294967295
 8002856:	f000 f90d 	bl	8002a74 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800285a:	4a07      	ldr	r2, [pc, #28]	@ (8002878 <HAL_InitTick+0xe8>)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	20000028 	.word	0x20000028
 8002870:	e000e010 	.word	0xe000e010
 8002874:	20000004 	.word	0x20000004
 8002878:	20000024 	.word	0x20000024

0800287c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002880:	4b06      	ldr	r3, [pc, #24]	@ (800289c <HAL_IncTick+0x20>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	461a      	mov	r2, r3
 8002886:	4b06      	ldr	r3, [pc, #24]	@ (80028a0 <HAL_IncTick+0x24>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4413      	add	r3, r2
 800288c:	4a04      	ldr	r2, [pc, #16]	@ (80028a0 <HAL_IncTick+0x24>)
 800288e:	6013      	str	r3, [r2, #0]
}
 8002890:	bf00      	nop
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	20000028 	.word	0x20000028
 80028a0:	20000aa4 	.word	0x20000aa4

080028a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  return uwTick;
 80028a8:	4b03      	ldr	r3, [pc, #12]	@ (80028b8 <HAL_GetTick+0x14>)
 80028aa:	681b      	ldr	r3, [r3, #0]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	20000aa4 	.word	0x20000aa4

080028bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028c4:	f7ff ffee 	bl	80028a4 <HAL_GetTick>
 80028c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d4:	d005      	beq.n	80028e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002900 <HAL_Delay+0x44>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	461a      	mov	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4413      	add	r3, r2
 80028e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028e2:	bf00      	nop
 80028e4:	f7ff ffde 	bl	80028a4 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d8f7      	bhi.n	80028e4 <HAL_Delay+0x28>
  {
  }
}
 80028f4:	bf00      	nop
 80028f6:	bf00      	nop
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	20000028 	.word	0x20000028

08002904 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002914:	4b0c      	ldr	r3, [pc, #48]	@ (8002948 <__NVIC_SetPriorityGrouping+0x44>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800291a:	68ba      	ldr	r2, [r7, #8]
 800291c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002920:	4013      	ands	r3, r2
 8002922:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800292c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002930:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002936:	4a04      	ldr	r2, [pc, #16]	@ (8002948 <__NVIC_SetPriorityGrouping+0x44>)
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	60d3      	str	r3, [r2, #12]
}
 800293c:	bf00      	nop
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	e000ed00 	.word	0xe000ed00

0800294c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002950:	4b04      	ldr	r3, [pc, #16]	@ (8002964 <__NVIC_GetPriorityGrouping+0x18>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	0a1b      	lsrs	r3, r3, #8
 8002956:	f003 0307 	and.w	r3, r3, #7
}
 800295a:	4618      	mov	r0, r3
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	e000ed00 	.word	0xe000ed00

08002968 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002972:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002976:	2b00      	cmp	r3, #0
 8002978:	db0b      	blt.n	8002992 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800297a:	88fb      	ldrh	r3, [r7, #6]
 800297c:	f003 021f 	and.w	r2, r3, #31
 8002980:	4907      	ldr	r1, [pc, #28]	@ (80029a0 <__NVIC_EnableIRQ+0x38>)
 8002982:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002986:	095b      	lsrs	r3, r3, #5
 8002988:	2001      	movs	r0, #1
 800298a:	fa00 f202 	lsl.w	r2, r0, r2
 800298e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	e000e100 	.word	0xe000e100

080029a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	6039      	str	r1, [r7, #0]
 80029ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80029b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	db0a      	blt.n	80029ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	490c      	ldr	r1, [pc, #48]	@ (80029f0 <__NVIC_SetPriority+0x4c>)
 80029be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029c2:	0112      	lsls	r2, r2, #4
 80029c4:	b2d2      	uxtb	r2, r2
 80029c6:	440b      	add	r3, r1
 80029c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029cc:	e00a      	b.n	80029e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	4908      	ldr	r1, [pc, #32]	@ (80029f4 <__NVIC_SetPriority+0x50>)
 80029d4:	88fb      	ldrh	r3, [r7, #6]
 80029d6:	f003 030f 	and.w	r3, r3, #15
 80029da:	3b04      	subs	r3, #4
 80029dc:	0112      	lsls	r2, r2, #4
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	440b      	add	r3, r1
 80029e2:	761a      	strb	r2, [r3, #24]
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	e000e100 	.word	0xe000e100
 80029f4:	e000ed00 	.word	0xe000ed00

080029f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b089      	sub	sp, #36	@ 0x24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f003 0307 	and.w	r3, r3, #7
 8002a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	f1c3 0307 	rsb	r3, r3, #7
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	bf28      	it	cs
 8002a16:	2304      	movcs	r3, #4
 8002a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	2b06      	cmp	r3, #6
 8002a20:	d902      	bls.n	8002a28 <NVIC_EncodePriority+0x30>
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	3b03      	subs	r3, #3
 8002a26:	e000      	b.n	8002a2a <NVIC_EncodePriority+0x32>
 8002a28:	2300      	movs	r3, #0
 8002a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	43da      	mvns	r2, r3
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	401a      	ands	r2, r3
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a40:	f04f 31ff 	mov.w	r1, #4294967295
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4a:	43d9      	mvns	r1, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a50:	4313      	orrs	r3, r2
         );
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3724      	adds	r7, #36	@ 0x24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7ff ff4c 	bl	8002904 <__NVIC_SetPriorityGrouping>
}
 8002a6c:	bf00      	nop
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
 8002a80:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a82:	f7ff ff63 	bl	800294c <__NVIC_GetPriorityGrouping>
 8002a86:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	68b9      	ldr	r1, [r7, #8]
 8002a8c:	6978      	ldr	r0, [r7, #20]
 8002a8e:	f7ff ffb3 	bl	80029f8 <NVIC_EncodePriority>
 8002a92:	4602      	mov	r2, r0
 8002a94:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a98:	4611      	mov	r1, r2
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff ff82 	bl	80029a4 <__NVIC_SetPriority>
}
 8002aa0:	bf00      	nop
 8002aa2:	3718      	adds	r7, #24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	4603      	mov	r3, r0
 8002ab0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ab2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff ff56 	bl	8002968 <__NVIC_EnableIRQ>
}
 8002abc:	bf00      	nop
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ad4:	d301      	bcc.n	8002ada <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e00d      	b.n	8002af6 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8002ada:	4a0a      	ldr	r2, [pc, #40]	@ (8002b04 <HAL_SYSTICK_Config+0x40>)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8002ae2:	4b08      	ldr	r3, [pc, #32]	@ (8002b04 <HAL_SYSTICK_Config+0x40>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002ae8:	4b06      	ldr	r3, [pc, #24]	@ (8002b04 <HAL_SYSTICK_Config+0x40>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a05      	ldr	r2, [pc, #20]	@ (8002b04 <HAL_SYSTICK_Config+0x40>)
 8002aee:	f043 0303 	orr.w	r3, r3, #3
 8002af2:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	e000e010 	.word	0xe000e010

08002b08 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	d844      	bhi.n	8002ba0 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002b16:	a201      	add	r2, pc, #4	@ (adr r2, 8002b1c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b1c:	08002b3f 	.word	0x08002b3f
 8002b20:	08002b5d 	.word	0x08002b5d
 8002b24:	08002b7f 	.word	0x08002b7f
 8002b28:	08002ba1 	.word	0x08002ba1
 8002b2c:	08002b31 	.word	0x08002b31
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002b30:	4b1f      	ldr	r3, [pc, #124]	@ (8002bb0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a1e      	ldr	r2, [pc, #120]	@ (8002bb0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002b36:	f043 0304 	orr.w	r3, r3, #4
 8002b3a:	6013      	str	r3, [r2, #0]
      break;
 8002b3c:	e031      	b.n	8002ba2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002b3e:	4b1c      	ldr	r3, [pc, #112]	@ (8002bb0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a1b      	ldr	r2, [pc, #108]	@ (8002bb0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002b44:	f023 0304 	bic.w	r3, r3, #4
 8002b48:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8002b4a:	4b1a      	ldr	r3, [pc, #104]	@ (8002bb4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002b4c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002b50:	4a18      	ldr	r2, [pc, #96]	@ (8002bb4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002b52:	f023 030c 	bic.w	r3, r3, #12
 8002b56:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002b5a:	e022      	b.n	8002ba2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002b5c:	4b14      	ldr	r3, [pc, #80]	@ (8002bb0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a13      	ldr	r2, [pc, #76]	@ (8002bb0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002b62:	f023 0304 	bic.w	r3, r3, #4
 8002b66:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8002b68:	4b12      	ldr	r3, [pc, #72]	@ (8002bb4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002b6a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002b6e:	f023 030c 	bic.w	r3, r3, #12
 8002b72:	4a10      	ldr	r2, [pc, #64]	@ (8002bb4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002b74:	f043 0304 	orr.w	r3, r3, #4
 8002b78:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002b7c:	e011      	b.n	8002ba2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8002bb0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a0b      	ldr	r2, [pc, #44]	@ (8002bb0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002b84:	f023 0304 	bic.w	r3, r3, #4
 8002b88:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8002b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002bb4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002b8c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002b90:	f023 030c 	bic.w	r3, r3, #12
 8002b94:	4a07      	ldr	r2, [pc, #28]	@ (8002bb4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002b96:	f043 0308 	orr.w	r3, r3, #8
 8002b9a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002b9e:	e000      	b.n	8002ba2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002ba0:	bf00      	nop
  }
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	e000e010 	.word	0xe000e010
 8002bb4:	44020c00 	.word	0x44020c00

08002bb8 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8002bbe:	4b17      	ldr	r3, [pc, #92]	@ (8002c1c <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0304 	and.w	r3, r3, #4
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d002      	beq.n	8002bd0 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8002bca:	2304      	movs	r3, #4
 8002bcc:	607b      	str	r3, [r7, #4]
 8002bce:	e01e      	b.n	8002c0e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8002bd0:	4b13      	ldr	r3, [pc, #76]	@ (8002c20 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8002bd2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002bd6:	f003 030c 	and.w	r3, r3, #12
 8002bda:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	2b08      	cmp	r3, #8
 8002be0:	d00f      	beq.n	8002c02 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d80f      	bhi.n	8002c08 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	2b04      	cmp	r3, #4
 8002bf2:	d003      	beq.n	8002bfc <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8002bf4:	e008      	b.n	8002c08 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	607b      	str	r3, [r7, #4]
        break;
 8002bfa:	e008      	b.n	8002c0e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	607b      	str	r3, [r7, #4]
        break;
 8002c00:	e005      	b.n	8002c0e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8002c02:	2302      	movs	r3, #2
 8002c04:	607b      	str	r3, [r7, #4]
        break;
 8002c06:	e002      	b.n	8002c0e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	607b      	str	r3, [r7, #4]
        break;
 8002c0c:	bf00      	nop
    }
  }
  return systick_source;
 8002c0e:	687b      	ldr	r3, [r7, #4]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	e000e010 	.word	0xe000e010
 8002c20:	44020c00 	.word	0x44020c00

08002c24 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8002c24:	b480      	push	{r7}
 8002c26:	b087      	sub	sp, #28
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	607a      	str	r2, [r7, #4]
 8002c30:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002c32:	2300      	movs	r3, #0
 8002c34:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8002c36:	7afb      	ldrb	r3, [r7, #11]
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d011      	beq.n	8002c60 <HAL_EXTI_RegisterCallback+0x3c>
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	dc13      	bgt.n	8002c68 <HAL_EXTI_RegisterCallback+0x44>
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d002      	beq.n	8002c4a <HAL_EXTI_RegisterCallback+0x26>
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d007      	beq.n	8002c58 <HAL_EXTI_RegisterCallback+0x34>
 8002c48:	e00e      	b.n	8002c68 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	609a      	str	r2, [r3, #8]
      break;
 8002c56:	e00a      	b.n	8002c6e <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	605a      	str	r2, [r3, #4]
      break;
 8002c5e:	e006      	b.n	8002c6e <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	609a      	str	r2, [r3, #8]
      break;
 8002c66:	e002      	b.n	8002c6e <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	75fb      	strb	r3, [r7, #23]
      break;
 8002c6c:	bf00      	nop
  }

  return status;
 8002c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	371c      	adds	r7, #28
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e003      	b.n	8002c98 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002c96:	2300      	movs	r3, #0
  }
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	0c1b      	lsrs	r3, r3, #16
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 031f 	and.w	r3, r3, #31
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	015a      	lsls	r2, r3, #5
 8002ccc:	4b17      	ldr	r3, [pc, #92]	@ (8002d2c <HAL_EXTI_IRQHandler+0x88>)
 8002cce:	4413      	add	r3, r2
 8002cd0:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d009      	beq.n	8002cf6 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d002      	beq.n	8002cf6 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	015a      	lsls	r2, r3, #5
 8002cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8002d30 <HAL_EXTI_IRQHandler+0x8c>)
 8002cfc:	4413      	add	r3, r2
 8002cfe:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	4013      	ands	r3, r2
 8002d08:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d009      	beq.n	8002d24 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d002      	beq.n	8002d24 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	4798      	blx	r3
    }
  }
}
 8002d24:	bf00      	nop
 8002d26:	3718      	adds	r7, #24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	4402200c 	.word	0x4402200c
 8002d30:	44022010 	.word	0x44022010

08002d34 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b087      	sub	sp, #28
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002d42:	e136      	b.n	8002fb2 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	2101      	movs	r1, #1
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d50:	4013      	ands	r3, r2
 8002d52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f000 8128 	beq.w	8002fac <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d003      	beq.n	8002d6c <HAL_GPIO_Init+0x38>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	2b12      	cmp	r3, #18
 8002d6a:	d125      	bne.n	8002db8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	08da      	lsrs	r2, r3, #3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3208      	adds	r2, #8
 8002d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d78:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	220f      	movs	r2, #15
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	f003 020f 	and.w	r2, r3, #15
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	f003 0307 	and.w	r3, r3, #7
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	08da      	lsrs	r2, r3, #3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	3208      	adds	r2, #8
 8002db2:	6979      	ldr	r1, [r7, #20]
 8002db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	2203      	movs	r2, #3
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f003 0203 	and.w	r2, r3, #3
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d00b      	beq.n	8002e0c <HAL_GPIO_Init+0xd8>
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d007      	beq.n	8002e0c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e00:	2b11      	cmp	r3, #17
 8002e02:	d003      	beq.n	8002e0c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	2b12      	cmp	r3, #18
 8002e0a:	d130      	bne.n	8002e6e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	2203      	movs	r2, #3
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	4013      	ands	r3, r2
 8002e22:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	68da      	ldr	r2, [r3, #12]
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e42:	2201      	movs	r2, #1
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	091b      	lsrs	r3, r3, #4
 8002e58:	f003 0201 	and.w	r2, r3, #1
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	2b03      	cmp	r3, #3
 8002e74:	d017      	beq.n	8002ea6 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	2203      	movs	r2, #3
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	43db      	mvns	r3, r3
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d07c      	beq.n	8002fac <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002eb2:	4a47      	ldr	r2, [pc, #284]	@ (8002fd0 <HAL_GPIO_Init+0x29c>)
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	089b      	lsrs	r3, r3, #2
 8002eb8:	3318      	adds	r3, #24
 8002eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ebe:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	f003 0303 	and.w	r3, r3, #3
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	220f      	movs	r2, #15
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	43db      	mvns	r3, r3
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	0a9a      	lsrs	r2, r3, #10
 8002eda:	4b3e      	ldr	r3, [pc, #248]	@ (8002fd4 <HAL_GPIO_Init+0x2a0>)
 8002edc:	4013      	ands	r3, r2
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	f002 0203 	and.w	r2, r2, #3
 8002ee4:	00d2      	lsls	r2, r2, #3
 8002ee6:	4093      	lsls	r3, r2
 8002ee8:	697a      	ldr	r2, [r7, #20]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002eee:	4938      	ldr	r1, [pc, #224]	@ (8002fd0 <HAL_GPIO_Init+0x29c>)
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	089b      	lsrs	r3, r3, #2
 8002ef4:	3318      	adds	r3, #24
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002efc:	4b34      	ldr	r3, [pc, #208]	@ (8002fd0 <HAL_GPIO_Init+0x29c>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	43db      	mvns	r3, r3
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d003      	beq.n	8002f20 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002f20:	4a2b      	ldr	r2, [pc, #172]	@ (8002fd0 <HAL_GPIO_Init+0x29c>)
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002f26:	4b2a      	ldr	r3, [pc, #168]	@ (8002fd0 <HAL_GPIO_Init+0x29c>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	4013      	ands	r3, r2
 8002f34:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002f4a:	4a21      	ldr	r2, [pc, #132]	@ (8002fd0 <HAL_GPIO_Init+0x29c>)
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002f50:	4b1f      	ldr	r3, [pc, #124]	@ (8002fd0 <HAL_GPIO_Init+0x29c>)
 8002f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f56:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002f76:	4a16      	ldr	r2, [pc, #88]	@ (8002fd0 <HAL_GPIO_Init+0x29c>)
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002f7e:	4b14      	ldr	r3, [pc, #80]	@ (8002fd0 <HAL_GPIO_Init+0x29c>)
 8002f80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f84:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d003      	beq.n	8002fa4 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002fa4:	4a0a      	ldr	r2, [pc, #40]	@ (8002fd0 <HAL_GPIO_Init+0x29c>)
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f47f aec1 	bne.w	8002d44 <HAL_GPIO_Init+0x10>
  }
}
 8002fc2:	bf00      	nop
 8002fc4:	bf00      	nop
 8002fc6:	371c      	adds	r7, #28
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	44022000 	.word	0x44022000
 8002fd4:	002f7f7f 	.word	0x002f7f7f

08002fd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	807b      	strh	r3, [r7, #2]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fe8:	787b      	ldrb	r3, [r7, #1]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fee:	887a      	ldrh	r2, [r7, #2]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ff4:	e002      	b.n	8002ffc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ff6:	887a      	ldrh	r2, [r7, #2]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	460b      	mov	r3, r1
 8003012:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800301a:	887a      	ldrh	r2, [r7, #2]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4013      	ands	r3, r2
 8003020:	041a      	lsls	r2, r3, #16
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	43d9      	mvns	r1, r3
 8003026:	887b      	ldrh	r3, [r7, #2]
 8003028:	400b      	ands	r3, r1
 800302a:	431a      	orrs	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	619a      	str	r2, [r3, #24]
}
 8003030:	bf00      	nop
 8003032:	3714      	adds	r7, #20
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_HASH_Init>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_Init(HASH_HandleTypeDef *hhash)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t cr_value;

  /* Check the hash handle allocation */
  if (hhash == NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_HASH_Init+0x12>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e02a      	b.n	80030a4 <HAL_HASH_Init+0x68>

    /* Init the low level hardware */
    hhash->MspInitCallback(hhash);
  }
#else
  if (hhash->State == HAL_HASH_STATE_RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d106      	bne.n	8003068 <HAL_HASH_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhash->Lock = HAL_UNLOCKED;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Init the low level hardware */
    HAL_HASH_MspInit(hhash);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7fe fbe2 	bl	800182c <HAL_HASH_MspInit>
  }
#endif /* (USE_HAL_HASH_REGISTER_CALLBACKS) */

  /* Set the key size, data type and Algorithm */
  cr_value = (uint32_t)(hhash->Init.DataType | hhash->Init.Algorithm);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	4313      	orrs	r3, r2
 8003072:	60fb      	str	r3, [r7, #12]
  /* Set the key size, data type, algorithm and mode */
  MODIFY_REG(hhash->Instance->CR, HASH_CR_DATATYPE | HASH_CR_ALGO | HASH_CR_INIT, cr_value);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f423 13f0 	bic.w	r3, r3, #1966080	@ 0x1e0000
 800307e:	f023 0334 	bic.w	r3, r3, #52	@ 0x34
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6812      	ldr	r2, [r2, #0]
 8003086:	68f9      	ldr	r1, [r7, #12]
 8003088:	430b      	orrs	r3, r1
 800308a:	6013      	str	r3, [r2, #0]

  /* Change HASH phase to Ready */
  hhash->Phase = HAL_HASH_PHASE_READY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  /* Change HASH state to Ready */
  hhash->State = HAL_HASH_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Reset error code field */
  hhash->ErrorCode = HAL_HASH_ERROR_NONE;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_HASH_SUSPEND_RESUME == 1U)
  /* Reset suspension request flag */
  hhash->SuspendRequest = HAL_HASH_SUSPEND_NONE;
#endif /* (USE_HAL_HASH_SUSPEND_RESUME) */
  /* Return function status */
  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <HAL_HASH_IRQHandler>:
  * @param hhash HASH handle.
  * @note  HAL_HASH_IRQHandler() handles interrupts in HMAC processing as well.
  * @retval None
  */
void HAL_HASH_IRQHandler(HASH_HandleTypeDef *hhash)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t itsource = hhash->Instance->IMR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	617b      	str	r3, [r7, #20]
  uint32_t itflag   = hhash->Instance->SR;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c2:	613b      	str	r3, [r7, #16]

  /* If digest is ready */
  if ((itflag & HASH_FLAG_DCIS) == HASH_FLAG_DCIS)
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d062      	beq.n	8003194 <HAL_HASH_IRQHandler+0xe8>
  {
    /* Read the digest */
    HASH_GetDigest(hhash, hhash->pHashOutBuffPtr, HASH_DIGEST_LENGTH(hhash));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6999      	ldr	r1, [r3, #24]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d03d      	beq.n	800315c <HAL_HASH_IRQHandler+0xb0>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80030ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80030ee:	d033      	beq.n	8003158 <HAL_HASH_IRQHandler+0xac>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80030fa:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80030fe:	d029      	beq.n	8003154 <HAL_HASH_IRQHandler+0xa8>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800310a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800310e:	d01f      	beq.n	8003150 <HAL_HASH_IRQHandler+0xa4>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800311a:	f5b3 1fd0 	cmp.w	r3, #1703936	@ 0x1a0000
 800311e:	d015      	beq.n	800314c <HAL_HASH_IRQHandler+0xa0>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800312a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800312e:	d00b      	beq.n	8003148 <HAL_HASH_IRQHandler+0x9c>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800313a:	f5b3 1ff0 	cmp.w	r3, #1966080	@ 0x1e0000
 800313e:	d101      	bne.n	8003144 <HAL_HASH_IRQHandler+0x98>
 8003140:	2340      	movs	r3, #64	@ 0x40
 8003142:	e00c      	b.n	800315e <HAL_HASH_IRQHandler+0xb2>
 8003144:	2314      	movs	r3, #20
 8003146:	e00a      	b.n	800315e <HAL_HASH_IRQHandler+0xb2>
 8003148:	2320      	movs	r3, #32
 800314a:	e008      	b.n	800315e <HAL_HASH_IRQHandler+0xb2>
 800314c:	231c      	movs	r3, #28
 800314e:	e006      	b.n	800315e <HAL_HASH_IRQHandler+0xb2>
 8003150:	2330      	movs	r3, #48	@ 0x30
 8003152:	e004      	b.n	800315e <HAL_HASH_IRQHandler+0xb2>
 8003154:	2320      	movs	r3, #32
 8003156:	e002      	b.n	800315e <HAL_HASH_IRQHandler+0xb2>
 8003158:	231c      	movs	r3, #28
 800315a:	e000      	b.n	800315e <HAL_HASH_IRQHandler+0xb2>
 800315c:	2314      	movs	r3, #20
 800315e:	461a      	mov	r2, r3
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 fb65 	bl	8003830 <HASH_GetDigest>

    /* Disable Interrupts */
    __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	6a1a      	ldr	r2, [r3, #32]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 0203 	bic.w	r2, r2, #3
 8003174:	621a      	str	r2, [r3, #32]
    /* Change the HASH state */
    hhash->State = HAL_HASH_STATE_READY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Reset HASH state machine */
    hhash->Phase = HAL_HASH_PHASE_READY;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    /* Process Unlocked */
    __HAL_UNLOCK(hhash);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    /* Call digest computation complete call back */
#if (USE_HAL_HASH_REGISTER_CALLBACKS == 1)
    hhash->DgstCpltCallback(hhash);
#else
    HAL_HASH_DgstCpltCallback(hhash);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 f823 	bl	80031da <HAL_HASH_DgstCpltCallback>
#endif /* USE_HAL_HASH_REGISTER_CALLBACKS */

  }
  /* If Peripheral ready to accept new data */
  if ((itflag & HASH_FLAG_DINIS) == HASH_FLAG_DINIS)
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00f      	beq.n	80031be <HAL_HASH_IRQHandler+0x112>
  {
    if ((itsource & HASH_IT_DINI) == HASH_IT_DINI)
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00a      	beq.n	80031be <HAL_HASH_IRQHandler+0x112>
    {
      status = HASH_WriteData_IT(hhash);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 f82a 	bl	8003202 <HASH_WriteData_IT>
 80031ae:	4603      	mov	r3, r0
 80031b0:	73fb      	strb	r3, [r7, #15]
      if (status != HAL_OK)
 80031b2:	7bfb      	ldrb	r3, [r7, #15]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d002      	beq.n	80031be <HAL_HASH_IRQHandler+0x112>
      {
        /* Call error callback */
#if (USE_HAL_HASH_REGISTER_CALLBACKS == 1)
        hhash->ErrorCallback(hhash);
#else
        HAL_HASH_ErrorCallback(hhash);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 f818 	bl	80031ee <HAL_HASH_ErrorCallback>
#endif /* USE_HAL_HASH_REGISTER_CALLBACKS */
      }
    }
  }
}
 80031be:	bf00      	nop
 80031c0:	3718      	adds	r7, #24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HAL_HASH_InCpltCallback>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval None
  */
__weak void HAL_HASH_InCpltCallback(HASH_HandleTypeDef *hhash)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b083      	sub	sp, #12
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  UNUSED(hhash);

  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_HASH_InCpltCallback() can be implemented in the user file.
   */
}
 80031ce:	bf00      	nop
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr

080031da <HAL_HASH_DgstCpltCallback>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval None
  */
__weak void HAL_HASH_DgstCpltCallback(HASH_HandleTypeDef *hhash)
{
 80031da:	b480      	push	{r7}
 80031dc:	b083      	sub	sp, #12
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  UNUSED(hhash);

  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_HASH_DgstCpltCallback() can be implemented in the user file.
   */
}
 80031e2:	bf00      	nop
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr

080031ee <HAL_HASH_ErrorCallback>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval None
  */
__weak void HAL_HASH_ErrorCallback(HASH_HandleTypeDef *hhash)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b083      	sub	sp, #12
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  UNUSED(hhash);

  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_HASH_ErrorCallback() can be implemented in the user file.
   */
}
 80031f6:	bf00      	nop
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr

08003202 <HASH_WriteData_IT>:
  * @brief  Feed the input buffer to the HASH peripheral in interruption mode.
  * @param  hhash HASH handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef HASH_WriteData_IT(HASH_HandleTypeDef *hhash)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b088      	sub	sp, #32
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  uint32_t buffercounter;
  uint32_t count;
  __IO uint32_t keyaddr = (uint32_t)(hhash->pHashKeyBuffPtr);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320e:	613b      	str	r3, [r7, #16]
  __IO uint32_t inputaddr = (uint32_t)(hhash->pHashInBuffPtr);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	60fb      	str	r3, [r7, #12]
  uint32_t nbbytePartialHash  = (((hhash->Instance->SR) >> 16U) * 4U); /* Nb byte  to enter in HASH fifo to trig
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321c:	0c1b      	lsrs	r3, r3, #16
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	617b      	str	r3, [r7, #20]
                                                                      a partial HASH computation*/

  if (hhash->State == HAL_HASH_STATE_BUSY)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	f040 82ea 	bne.w	8003804 <HASH_WriteData_IT+0x602>
  {
    if ((hhash->Instance->CR & HASH_CR_MODE) == 0U)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800323a:	2b00      	cmp	r3, #0
 800323c:	f040 80b3 	bne.w	80033a6 <HASH_WriteData_IT+0x1a4>
      }
      else
      {
#endif /* USE_HAL_HASH_SUSPEND_RESUME */

        if (((hhash->HashInCount) + nbbytePartialHash) < (hhash->Size))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	69da      	ldr	r2, [r3, #28]
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	441a      	add	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	429a      	cmp	r2, r3
 800324e:	d258      	bcs.n	8003302 <HASH_WriteData_IT+0x100>
        {
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 8003250:	2300      	movs	r3, #0
 8003252:	61fb      	str	r3, [r7, #28]
 8003254:	e015      	b.n	8003282 <HASH_WriteData_IT+0x80>
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)inputaddr;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	461a      	mov	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6812      	ldr	r2, [r2, #0]
 8003260:	605a      	str	r2, [r3, #4]
            inputaddr += 4U;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	3304      	adds	r3, #4
 8003266:	60fb      	str	r3, [r7, #12]
            hhash->HashInCount += 4U;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	69db      	ldr	r3, [r3, #28]
 800326c:	1d1a      	adds	r2, r3, #4
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	61da      	str	r2, [r3, #28]
            hhash->pHashInBuffPtr += 4U;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	1d1a      	adds	r2, r3, #4
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	615a      	str	r2, [r3, #20]
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	3304      	adds	r3, #4
 8003280:	61fb      	str	r3, [r7, #28]
 8003282:	69fa      	ldr	r2, [r7, #28]
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	429a      	cmp	r2, r3
 8003288:	d3e5      	bcc.n	8003256 <HASH_WriteData_IT+0x54>
          }
          /* Wait for HASH_IT_DINI flag to be set */
          count = HASH_TIMEOUTVALUE;
 800328a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800328e:	61bb      	str	r3, [r7, #24]
          do
          {
            count--;
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	3b01      	subs	r3, #1
 8003294:	61bb      	str	r3, [r7, #24]
            if (count == 0U)
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d117      	bne.n	80032cc <HASH_WriteData_IT+0xca>
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6a1a      	ldr	r2, [r3, #32]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0203 	bic.w	r2, r2, #3
 80032aa:	621a      	str	r2, [r3, #32]

              /* Change state */
              hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032b0:	f043 0204 	orr.w	r2, r3, #4
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	635a      	str	r2, [r3, #52]	@ 0x34
              hhash->State = HAL_HASH_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e2ad      	b.n	8003828 <HASH_WriteData_IT+0x626>
            }
          } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DINIS));
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0da      	beq.n	8003290 <HASH_WriteData_IT+0x8e>
 80032da:	e2a4      	b.n	8003826 <HASH_WriteData_IT+0x624>
        else
        {
          while ((hhash->HashInCount) < hhash->Size)
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)inputaddr;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	461a      	mov	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6812      	ldr	r2, [r2, #0]
 80032e6:	605a      	str	r2, [r3, #4]
            inputaddr += 4U;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	3304      	adds	r3, #4
 80032ec:	60fb      	str	r3, [r7, #12]
            hhash->HashInCount += 4U;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	1d1a      	adds	r2, r3, #4
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	61da      	str	r2, [r3, #28]
            hhash->pHashInBuffPtr += 4U;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	695b      	ldr	r3, [r3, #20]
 80032fc:	1d1a      	adds	r2, r3, #4
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	615a      	str	r2, [r3, #20]
          while ((hhash->HashInCount) < hhash->Size)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69da      	ldr	r2, [r3, #28]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a1b      	ldr	r3, [r3, #32]
 800330a:	429a      	cmp	r2, r3
 800330c:	d3e6      	bcc.n	80032dc <HASH_WriteData_IT+0xda>
#if (USE_HAL_HASH_REGISTER_CALLBACKS == 1U)
          /*Call registered Input complete callback*/
          hhash->InCpltCallback(hhash);
#else
          /*Call legacy weak Input complete callback*/
          HAL_HASH_InCpltCallback(hhash);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7ff ff59 	bl	80031c6 <HAL_HASH_InCpltCallback>
#endif /* USE_HAL_HASH_REGISTER_CALLBACKS */
          if (hhash->Accumulation == 0U)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003318:	2b00      	cmp	r3, #0
 800331a:	d138      	bne.n	800338e <HASH_WriteData_IT+0x18c>
          {
            if (__HAL_HASH_GET_IT_SOURCE(hhash, HASH_IT_DINI))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b01      	cmp	r3, #1
 8003328:	f040 827d 	bne.w	8003826 <HASH_WriteData_IT+0x624>
            {
              /* Start the message padding then the Digest calculation */
              SET_BIT(hhash->Instance->STR, HASH_STR_DCAL);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800333a:	609a      	str	r2, [r3, #8]

              /* Wait for HASH_FLAG_DCIS flag to be set */
              count = HASH_TIMEOUTVALUE;
 800333c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003340:	61bb      	str	r3, [r7, #24]
              do
              {
                count--;
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	3b01      	subs	r3, #1
 8003346:	61bb      	str	r3, [r7, #24]
                if (count == 0U)
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d117      	bne.n	800337e <HASH_WriteData_IT+0x17c>
                {
                  /* Disable Interrupts */
                  __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6a1a      	ldr	r2, [r3, #32]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 0203 	bic.w	r2, r2, #3
 800335c:	621a      	str	r2, [r3, #32]

                  /* Change state */
                  hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003362:	f043 0204 	orr.w	r2, r3, #4
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	635a      	str	r2, [r3, #52]	@ 0x34
                  hhash->State = HAL_HASH_STATE_READY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                  __HAL_UNLOCK(hhash);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                  return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e254      	b.n	8003828 <HASH_WriteData_IT+0x626>
                }
              } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DCIS));
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0da      	beq.n	8003342 <HASH_WriteData_IT+0x140>
 800338c:	e24b      	b.n	8003826 <HASH_WriteData_IT+0x624>
            }
          }
          else
          {
            /* Reset multi buffers accumulation flag */
            hhash->Accumulation = 0U;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	63da      	str	r2, [r3, #60]	@ 0x3c
            /* Disable Interrupts */
            __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6a1a      	ldr	r2, [r3, #32]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 0201 	bic.w	r2, r2, #1
 80033a2:	621a      	str	r2, [r3, #32]
 80033a4:	e23f      	b.n	8003826 <HASH_WriteData_IT+0x624>
      }
#endif /* USE_HAL_HASH_SUSPEND_RESUME */
    }
    else /*HMAC */
    {
      if (hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_2) /* loading input*/
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80033ac:	2b04      	cmp	r3, #4
 80033ae:	f040 80df 	bne.w	8003570 <HASH_WriteData_IT+0x36e>
          __HAL_UNLOCK(hhash);
        }
        else
        {
#endif /* USE_HAL_HASH_SUSPEND_RESUME */
          if (hhash->Accumulation == 1U)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d108      	bne.n	80033cc <HASH_WriteData_IT+0x1ca>
          {
            /* Configure the number of valid bits in last word of the message */
            MODIFY_REG(hhash->Instance->STR, HASH_STR_NBLW, 0U);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689a      	ldr	r2, [r3, #8]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 021f 	bic.w	r2, r2, #31
 80033c8:	609a      	str	r2, [r3, #8]
 80033ca:	e00d      	b.n	80033e8 <HASH_WriteData_IT+0x1e6>
          }
          else
          {
            /* Configure the number of valid bits in last word of the message */
            MODIFY_REG(hhash->Instance->STR, HASH_STR_NBLW, 8U * (hhash->Size % 4U));
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f023 011f 	bic.w	r1, r3, #31
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	f003 0303 	and.w	r3, r3, #3
 80033de:	00da      	lsls	r2, r3, #3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	609a      	str	r2, [r3, #8]
          }
          if (((hhash->HashInCount) + nbbytePartialHash) < (hhash->Size))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	69da      	ldr	r2, [r3, #28]
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	441a      	add	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d258      	bcs.n	80034aa <HASH_WriteData_IT+0x2a8>
          {
            for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 80033f8:	2300      	movs	r3, #0
 80033fa:	61fb      	str	r3, [r7, #28]
 80033fc:	e015      	b.n	800342a <HASH_WriteData_IT+0x228>
            {
              /* Write input data 4 bytes at a time */
              hhash->Instance->DIN = *(uint32_t *)inputaddr;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	461a      	mov	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6812      	ldr	r2, [r2, #0]
 8003408:	605a      	str	r2, [r3, #4]
              inputaddr += 4U;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	3304      	adds	r3, #4
 800340e:	60fb      	str	r3, [r7, #12]
              hhash->HashInCount += 4U;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	69db      	ldr	r3, [r3, #28]
 8003414:	1d1a      	adds	r2, r3, #4
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	61da      	str	r2, [r3, #28]
              hhash->pHashInBuffPtr += 4U;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	1d1a      	adds	r2, r3, #4
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	615a      	str	r2, [r3, #20]
            for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	3304      	adds	r3, #4
 8003428:	61fb      	str	r3, [r7, #28]
 800342a:	69fa      	ldr	r2, [r7, #28]
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	429a      	cmp	r2, r3
 8003430:	d3e5      	bcc.n	80033fe <HASH_WriteData_IT+0x1fc>
            }
            /* Wait for HASH_IT_DINI flag to be set */
            count = HASH_TIMEOUTVALUE;
 8003432:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003436:	61bb      	str	r3, [r7, #24]
            do
            {
              count--;
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	3b01      	subs	r3, #1
 800343c:	61bb      	str	r3, [r7, #24]
              if (count == 0U)
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d117      	bne.n	8003474 <HASH_WriteData_IT+0x272>
              {
                /* Disable Interrupts */
                __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6a1a      	ldr	r2, [r3, #32]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 0203 	bic.w	r2, r2, #3
 8003452:	621a      	str	r2, [r3, #32]

                /* Change state */
                hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003458:	f043 0204 	orr.w	r2, r3, #4
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	635a      	str	r2, [r3, #52]	@ 0x34
                hhash->State = HAL_HASH_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                __HAL_UNLOCK(hhash);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e1d9      	b.n	8003828 <HASH_WriteData_IT+0x626>
              }
            } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DINIS));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0da      	beq.n	8003438 <HASH_WriteData_IT+0x236>
 8003482:	e1d0      	b.n	8003826 <HASH_WriteData_IT+0x624>
          else
          {
            while ((hhash->HashInCount) < hhash->Size)
            {
              /* Write input data 4 bytes at a time */
              hhash->Instance->DIN = *(uint32_t *)inputaddr;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	461a      	mov	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6812      	ldr	r2, [r2, #0]
 800348e:	605a      	str	r2, [r3, #4]
              inputaddr += 4U;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	3304      	adds	r3, #4
 8003494:	60fb      	str	r3, [r7, #12]
              hhash->HashInCount += 4U;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	1d1a      	adds	r2, r3, #4
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	61da      	str	r2, [r3, #28]
              hhash->pHashInBuffPtr += 4U;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	1d1a      	adds	r2, r3, #4
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	615a      	str	r2, [r3, #20]
            while ((hhash->HashInCount) < hhash->Size)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69da      	ldr	r2, [r3, #28]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d3e6      	bcc.n	8003484 <HASH_WriteData_IT+0x282>
#if (USE_HAL_HASH_REGISTER_CALLBACKS == 1U)
            /*Call registered Input complete callback*/
            hhash->InCpltCallback(hhash);
#else
            /*Call legacy weak Input complete callback*/
            HAL_HASH_InCpltCallback(hhash);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f7ff fe85 	bl	80031c6 <HAL_HASH_InCpltCallback>
#endif /* USE_HAL_HASH_REGISTER_CALLBACKS */

            if (hhash->Accumulation == 0U)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d143      	bne.n	800354c <HASH_WriteData_IT+0x34a>
            {
              if (__HAL_HASH_GET_IT_SOURCE(hhash, HASH_IT_DINI))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	f040 81a9 	bne.w	8003826 <HASH_WriteData_IT+0x624>
              {
                /* Start the message padding then the Digest calculation */
                SET_BIT(hhash->Instance->STR, HASH_STR_DCAL);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689a      	ldr	r2, [r3, #8]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034e2:	609a      	str	r2, [r3, #8]

                /* Wait for HASH_FLAG_BUSY flag to be set */
                count = HASH_TIMEOUTVALUE;
 80034e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034e8:	61bb      	str	r3, [r7, #24]
                do
                {
                  count--;
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	3b01      	subs	r3, #1
 80034ee:	61bb      	str	r3, [r7, #24]
                  if (count == 0U)
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d117      	bne.n	8003526 <HASH_WriteData_IT+0x324>
                  {
                    /* Disable Interrupts */
                    __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6a1a      	ldr	r2, [r3, #32]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0203 	bic.w	r2, r2, #3
 8003504:	621a      	str	r2, [r3, #32]

                    /* Change state */
                    hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800350a:	f043 0204 	orr.w	r2, r3, #4
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	635a      	str	r2, [r3, #52]	@ 0x34
                    hhash->State = HAL_HASH_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                    __HAL_UNLOCK(hhash);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e180      	b.n	8003828 <HASH_WriteData_IT+0x626>
                  }
                } while (HAL_IS_BIT_SET(hhash->Instance->SR, HASH_FLAG_BUSY));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352c:	f003 0308 	and.w	r3, r3, #8
 8003530:	2b08      	cmp	r3, #8
 8003532:	d0da      	beq.n	80034ea <HASH_WriteData_IT+0x2e8>

                hhash->Phase = HAL_HASH_PHASE_HMAC_STEP_3;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2205      	movs	r2, #5
 8003538:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                hhash->HashInCount = 0U;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	61da      	str	r2, [r3, #28]
                hhash->pHashKeyBuffPtr = hhash->Init.pKey;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68da      	ldr	r2, [r3, #12]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	625a      	str	r2, [r3, #36]	@ 0x24
 800354a:	e16c      	b.n	8003826 <HASH_WriteData_IT+0x624>
            }

            else
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6a1a      	ldr	r2, [r3, #32]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f022 0203 	bic.w	r2, r2, #3
 800355a:	621a      	str	r2, [r3, #32]
              hhash->State = HAL_HASH_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_OK;
 800356c:	2300      	movs	r3, #0
 800356e:	e15b      	b.n	8003828 <HASH_WriteData_IT+0x626>
#if (USE_HAL_HASH_SUSPEND_RESUME == 1U)
        }
#endif /* USE_HAL_HASH_SUSPEND_RESUME */
      }

      else if (hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_3)/* loading Key*/
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003576:	2b05      	cmp	r3, #5
 8003578:	f040 80a1 	bne.w	80036be <HASH_WriteData_IT+0x4bc>
      {

        /* Configure the number of valid bits in last word of the Key */
        MODIFY_REG(hhash->Instance->STR, HASH_STR_NBLW, 8U * ((hhash->Init.KeySize) % 4U));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f023 011f 	bic.w	r1, r3, #31
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f003 0303 	and.w	r3, r3, #3
 800358e:	00da      	lsls	r2, r3, #3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	609a      	str	r2, [r3, #8]

        if (((hhash->HashInCount) + nbbytePartialHash) < (hhash->Init.KeySize))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	69da      	ldr	r2, [r3, #28]
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	441a      	add	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d253      	bcs.n	8003650 <HASH_WriteData_IT+0x44e>
        {
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 80035a8:	2300      	movs	r3, #0
 80035aa:	61fb      	str	r3, [r7, #28]
 80035ac:	e015      	b.n	80035da <HASH_WriteData_IT+0x3d8>
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)keyaddr;
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	461a      	mov	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6812      	ldr	r2, [r2, #0]
 80035b8:	605a      	str	r2, [r3, #4]
            keyaddr += 4U;
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	3304      	adds	r3, #4
 80035be:	613b      	str	r3, [r7, #16]
            hhash->HashInCount += 4U;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	1d1a      	adds	r2, r3, #4
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	61da      	str	r2, [r3, #28]
            hhash->pHashKeyBuffPtr += 4U;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ce:	1d1a      	adds	r2, r3, #4
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	625a      	str	r2, [r3, #36]	@ 0x24
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	3304      	adds	r3, #4
 80035d8:	61fb      	str	r3, [r7, #28]
 80035da:	69fa      	ldr	r2, [r7, #28]
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d3e5      	bcc.n	80035ae <HASH_WriteData_IT+0x3ac>
          }
          /* Wait for HASH_IT_DINI flag to be set */
          count = HASH_TIMEOUTVALUE;
 80035e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035e6:	61bb      	str	r3, [r7, #24]
          do
          {
            count--;
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	61bb      	str	r3, [r7, #24]
            if (count == 0U)
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d117      	bne.n	8003624 <HASH_WriteData_IT+0x422>
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6a1a      	ldr	r2, [r3, #32]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0203 	bic.w	r2, r2, #3
 8003602:	621a      	str	r2, [r3, #32]

              /* Change state */
              hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003608:	f043 0204 	orr.w	r2, r3, #4
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	635a      	str	r2, [r3, #52]	@ 0x34
              hhash->State = HAL_HASH_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e101      	b.n	8003828 <HASH_WriteData_IT+0x626>
            }
          } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DINIS));
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0da      	beq.n	80035e8 <HASH_WriteData_IT+0x3e6>
 8003632:	e0f8      	b.n	8003826 <HASH_WriteData_IT+0x624>
        else
        {
          while ((hhash->HashInCount) < (hhash->Init.KeySize))
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)keyaddr;
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	461a      	mov	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6812      	ldr	r2, [r2, #0]
 800363e:	605a      	str	r2, [r3, #4]
            keyaddr += 4U;
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	3304      	adds	r3, #4
 8003644:	613b      	str	r3, [r7, #16]
            hhash->HashInCount += 4U;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	1d1a      	adds	r2, r3, #4
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	61da      	str	r2, [r3, #28]
          while ((hhash->HashInCount) < (hhash->Init.KeySize))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	69da      	ldr	r2, [r3, #28]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	429a      	cmp	r2, r3
 800365a:	d3eb      	bcc.n	8003634 <HASH_WriteData_IT+0x432>
          }
          /* Start the message padding then the Digest calculation */
          SET_BIT(hhash->Instance->STR, HASH_STR_DCAL);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689a      	ldr	r2, [r3, #8]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800366a:	609a      	str	r2, [r3, #8]

          /* Wait for HASH_FLAG_DCIS flag to be set */
          count = HASH_TIMEOUTVALUE;
 800366c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003670:	61bb      	str	r3, [r7, #24]
          do
          {
            count--;
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	3b01      	subs	r3, #1
 8003676:	61bb      	str	r3, [r7, #24]
            if (count == 0U)
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d117      	bne.n	80036ae <HASH_WriteData_IT+0x4ac>
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6a1a      	ldr	r2, [r3, #32]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0203 	bic.w	r2, r2, #3
 800368c:	621a      	str	r2, [r3, #32]

              /* Change state */
              hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003692:	f043 0204 	orr.w	r2, r3, #4
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	635a      	str	r2, [r3, #52]	@ 0x34
              hhash->State = HAL_HASH_STATE_READY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e0bc      	b.n	8003828 <HASH_WriteData_IT+0x626>
            }
          } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DCIS));
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0da      	beq.n	8003672 <HASH_WriteData_IT+0x470>
 80036bc:	e0b3      	b.n	8003826 <HASH_WriteData_IT+0x624>
        }
      }
      else  /*first step , loading key*/
      {

        hhash->Phase = HAL_HASH_PHASE_HMAC_STEP_1;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2203      	movs	r2, #3
 80036c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

        if (((hhash->HashInCount) + nbbytePartialHash) < (hhash->Init.KeySize))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	69da      	ldr	r2, [r3, #28]
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	441a      	add	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d258      	bcs.n	8003788 <HASH_WriteData_IT+0x586>
        {
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 80036d6:	2300      	movs	r3, #0
 80036d8:	61fb      	str	r3, [r7, #28]
 80036da:	e015      	b.n	8003708 <HASH_WriteData_IT+0x506>
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)keyaddr;
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	461a      	mov	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6812      	ldr	r2, [r2, #0]
 80036e6:	605a      	str	r2, [r3, #4]
            keyaddr += 4U;
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	3304      	adds	r3, #4
 80036ec:	613b      	str	r3, [r7, #16]
            hhash->HashInCount += 4U;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	1d1a      	adds	r2, r3, #4
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	61da      	str	r2, [r3, #28]
            hhash->pHashKeyBuffPtr += 4U;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fc:	1d1a      	adds	r2, r3, #4
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	625a      	str	r2, [r3, #36]	@ 0x24
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	3304      	adds	r3, #4
 8003706:	61fb      	str	r3, [r7, #28]
 8003708:	69fa      	ldr	r2, [r7, #28]
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	429a      	cmp	r2, r3
 800370e:	d3e5      	bcc.n	80036dc <HASH_WriteData_IT+0x4da>
          }
          /* Wait for HASH_IT_DINI flag to be set */
          count = HASH_TIMEOUTVALUE;
 8003710:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003714:	61bb      	str	r3, [r7, #24]
          do
          {
            count--;
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	3b01      	subs	r3, #1
 800371a:	61bb      	str	r3, [r7, #24]
            if (count == 0U)
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d117      	bne.n	8003752 <HASH_WriteData_IT+0x550>
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6a1a      	ldr	r2, [r3, #32]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0203 	bic.w	r2, r2, #3
 8003730:	621a      	str	r2, [r3, #32]

              /* Change state */
              hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003736:	f043 0204 	orr.w	r2, r3, #4
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	635a      	str	r2, [r3, #52]	@ 0x34
              hhash->State = HAL_HASH_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e06a      	b.n	8003828 <HASH_WriteData_IT+0x626>
            }
          } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DINIS));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0da      	beq.n	8003716 <HASH_WriteData_IT+0x514>
 8003760:	e061      	b.n	8003826 <HASH_WriteData_IT+0x624>
        else
        {
          while ((hhash->HashInCount) < (hhash->Init.KeySize))
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)keyaddr;
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	461a      	mov	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6812      	ldr	r2, [r2, #0]
 800376c:	605a      	str	r2, [r3, #4]
            keyaddr += 4U;
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	3304      	adds	r3, #4
 8003772:	613b      	str	r3, [r7, #16]
            hhash->HashInCount += 4U;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	69db      	ldr	r3, [r3, #28]
 8003778:	1d1a      	adds	r2, r3, #4
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	61da      	str	r2, [r3, #28]
            hhash->pHashKeyBuffPtr += 4U;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003782:	1d1a      	adds	r2, r3, #4
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	625a      	str	r2, [r3, #36]	@ 0x24
          while ((hhash->HashInCount) < (hhash->Init.KeySize))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	69da      	ldr	r2, [r3, #28]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	429a      	cmp	r2, r3
 8003792:	d3e6      	bcc.n	8003762 <HASH_WriteData_IT+0x560>
          }
          /* Start the message padding then the Digest calculation */
          SET_BIT(hhash->Instance->STR, HASH_STR_DCAL);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689a      	ldr	r2, [r3, #8]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037a2:	609a      	str	r2, [r3, #8]

          /* Wait for HASH_FLAG_BUSY flag to be set */
          count = HASH_TIMEOUTVALUE;
 80037a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037a8:	61bb      	str	r3, [r7, #24]
          do
          {
            count--;
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	3b01      	subs	r3, #1
 80037ae:	61bb      	str	r3, [r7, #24]
            if (count == 0U)
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d117      	bne.n	80037e6 <HASH_WriteData_IT+0x5e4>
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6a1a      	ldr	r2, [r3, #32]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0203 	bic.w	r2, r2, #3
 80037c4:	621a      	str	r2, [r3, #32]

              /* Change state */
              hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037ca:	f043 0204 	orr.w	r2, r3, #4
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	635a      	str	r2, [r3, #52]	@ 0x34
              hhash->State = HAL_HASH_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e020      	b.n	8003828 <HASH_WriteData_IT+0x626>
            }
          } while (HAL_IS_BIT_SET(hhash->Instance->SR, HASH_FLAG_BUSY));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ec:	f003 0308 	and.w	r3, r3, #8
 80037f0:	2b08      	cmp	r3, #8
 80037f2:	d0da      	beq.n	80037aa <HASH_WriteData_IT+0x5a8>
          /*change Phase to step 2*/
          hhash->Phase = HAL_HASH_PHASE_HMAC_STEP_2;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2204      	movs	r2, #4
 80037f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
          hhash->HashInCount = 0U;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	61da      	str	r2, [r3, #28]
 8003802:	e010      	b.n	8003826 <HASH_WriteData_IT+0x624>
        }
      }
    }
  }
  else if ((hhash->State == HAL_HASH_STATE_SUSPENDED))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b03      	cmp	r3, #3
 800380e:	d101      	bne.n	8003814 <HASH_WriteData_IT+0x612>
  {
    return HAL_OK;
 8003810:	2300      	movs	r3, #0
 8003812:	e009      	b.n	8003828 <HASH_WriteData_IT+0x626>
  }
  else
  {
    /* Busy error code field */
    hhash->ErrorCode |= HAL_HASH_ERROR_BUSY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003818:	f043 0201 	orr.w	r2, r3, #1
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_HASH_REGISTER_CALLBACKS == 1U)
    /*Call registered error callback*/
    hhash->ErrorCallback(hhash);
#else
    /*Call legacy weak error callback*/
    HAL_HASH_ErrorCallback(hhash);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f7ff fce4 	bl	80031ee <HAL_HASH_ErrorCallback>
#endif /* USE_HAL_HASH_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	3720      	adds	r7, #32
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <HASH_GetDigest>:
  * @param  pMsgDigest pointer to the computed digest.
  * @param  Size message digest size in bytes.
  * @retval None
  */
static void HASH_GetDigest(const HASH_HandleTypeDef *hhash, const uint8_t *pMsgDigest, uint8_t Size)
{
 8003830:	b480      	push	{r7}
 8003832:	b0b7      	sub	sp, #220	@ 0xdc
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	4613      	mov	r3, r2
 800383c:	71fb      	strb	r3, [r7, #7]
  uint32_t msgdigest = (uint32_t)pMsgDigest;
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  switch (Size)
 8003844:	79fb      	ldrb	r3, [r7, #7]
 8003846:	2b30      	cmp	r3, #48	@ 0x30
 8003848:	dc44      	bgt.n	80038d4 <HASH_GetDigest+0xa4>
 800384a:	2b14      	cmp	r3, #20
 800384c:	f2c0 82e7 	blt.w	8003e1e <HASH_GetDigest+0x5ee>
 8003850:	3b14      	subs	r3, #20
 8003852:	2b1c      	cmp	r3, #28
 8003854:	f200 82e3 	bhi.w	8003e1e <HASH_GetDigest+0x5ee>
 8003858:	a201      	add	r2, pc, #4	@ (adr r2, 8003860 <HASH_GetDigest+0x30>)
 800385a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800385e:	bf00      	nop
 8003860:	080038dd 	.word	0x080038dd
 8003864:	08003e1f 	.word	0x08003e1f
 8003868:	08003e1f 	.word	0x08003e1f
 800386c:	08003e1f 	.word	0x08003e1f
 8003870:	08003e1f 	.word	0x08003e1f
 8003874:	08003e1f 	.word	0x08003e1f
 8003878:	08003e1f 	.word	0x08003e1f
 800387c:	08003e1f 	.word	0x08003e1f
 8003880:	08003975 	.word	0x08003975
 8003884:	08003e1f 	.word	0x08003e1f
 8003888:	08003e1f 	.word	0x08003e1f
 800388c:	08003e1f 	.word	0x08003e1f
 8003890:	08003a49 	.word	0x08003a49
 8003894:	08003e1f 	.word	0x08003e1f
 8003898:	08003e1f 	.word	0x08003e1f
 800389c:	08003e1f 	.word	0x08003e1f
 80038a0:	08003e1f 	.word	0x08003e1f
 80038a4:	08003e1f 	.word	0x08003e1f
 80038a8:	08003e1f 	.word	0x08003e1f
 80038ac:	08003e1f 	.word	0x08003e1f
 80038b0:	08003e1f 	.word	0x08003e1f
 80038b4:	08003e1f 	.word	0x08003e1f
 80038b8:	08003e1f 	.word	0x08003e1f
 80038bc:	08003e1f 	.word	0x08003e1f
 80038c0:	08003e1f 	.word	0x08003e1f
 80038c4:	08003e1f 	.word	0x08003e1f
 80038c8:	08003e1f 	.word	0x08003e1f
 80038cc:	08003e1f 	.word	0x08003e1f
 80038d0:	08003b3b 	.word	0x08003b3b
 80038d4:	2b40      	cmp	r3, #64	@ 0x40
 80038d6:	f000 81d1 	beq.w	8003c7c <HASH_GetDigest+0x44c>
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[15]);

      break;
#endif /* defined(HASH_ALGOSELECTION_SHA512)*/
    default:
      break;
 80038da:	e2a0      	b.n	8003e1e <HASH_GetDigest+0x5ee>
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[0]);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68da      	ldr	r2, [r3, #12]
 80038e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038e6:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
  return __builtin_bswap32(value);
 80038ea:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80038ee:	ba12      	rev	r2, r2
 80038f0:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80038f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038f6:	3304      	adds	r3, #4
 80038f8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[1]);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	691a      	ldr	r2, [r3, #16]
 8003902:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003906:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800390a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800390e:	ba12      	rev	r2, r2
 8003910:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003912:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003916:	3304      	adds	r3, #4
 8003918:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[2]);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	695a      	ldr	r2, [r3, #20]
 8003922:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003926:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 800392a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800392e:	ba12      	rev	r2, r2
 8003930:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003932:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003936:	3304      	adds	r3, #4
 8003938:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[3]);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	699a      	ldr	r2, [r3, #24]
 8003942:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003946:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800394a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800394e:	ba12      	rev	r2, r2
 8003950:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003952:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003956:	3304      	adds	r3, #4
 8003958:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[4]);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	69da      	ldr	r2, [r3, #28]
 8003962:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003966:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 800396a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800396e:	ba12      	rev	r2, r2
 8003970:	601a      	str	r2, [r3, #0]
      break;
 8003972:	e255      	b.n	8003e20 <HASH_GetDigest+0x5f0>
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[0]);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68da      	ldr	r2, [r3, #12]
 800397a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800397e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003982:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8003986:	ba12      	rev	r2, r2
 8003988:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800398a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800398e:	3304      	adds	r3, #4
 8003990:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[1]);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	691a      	ldr	r2, [r3, #16]
 800399a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800399e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80039a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80039a6:	ba12      	rev	r2, r2
 80039a8:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80039aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039ae:	3304      	adds	r3, #4
 80039b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[2]);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	695a      	ldr	r2, [r3, #20]
 80039ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039be:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80039c2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80039c6:	ba12      	rev	r2, r2
 80039c8:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80039ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039ce:	3304      	adds	r3, #4
 80039d0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[3]);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	699a      	ldr	r2, [r3, #24]
 80039da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039de:	f8c7 20b0 	str.w	r2, [r7, #176]	@ 0xb0
 80039e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80039e6:	ba12      	rev	r2, r2
 80039e8:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80039ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039ee:	3304      	adds	r3, #4
 80039f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[4]);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	69da      	ldr	r2, [r3, #28]
 80039fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039fe:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8003a02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003a06:	ba12      	rev	r2, r2
 8003a08:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003a0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a0e:	3304      	adds	r3, #4
 8003a10:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 8003a14:	4b98      	ldr	r3, [pc, #608]	@ (8003c78 <HASH_GetDigest+0x448>)
 8003a16:	695a      	ldr	r2, [r3, #20]
 8003a18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a1c:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 8003a20:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003a24:	ba12      	rev	r2, r2
 8003a26:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003a28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a2c:	3304      	adds	r3, #4
 8003a2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 8003a32:	4b91      	ldr	r3, [pc, #580]	@ (8003c78 <HASH_GetDigest+0x448>)
 8003a34:	699a      	ldr	r2, [r3, #24]
 8003a36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a3a:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003a3e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8003a42:	ba12      	rev	r2, r2
 8003a44:	601a      	str	r2, [r3, #0]
      break;
 8003a46:	e1eb      	b.n	8003e20 <HASH_GetDigest+0x5f0>
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[0]);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68da      	ldr	r2, [r3, #12]
 8003a4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a52:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003a56:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8003a5a:	ba12      	rev	r2, r2
 8003a5c:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003a5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a62:	3304      	adds	r3, #4
 8003a64:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[1]);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	691a      	ldr	r2, [r3, #16]
 8003a6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a72:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003a76:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003a7a:	ba12      	rev	r2, r2
 8003a7c:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003a7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a82:	3304      	adds	r3, #4
 8003a84:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[2]);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	695a      	ldr	r2, [r3, #20]
 8003a8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a92:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003a96:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8003a9a:	ba12      	rev	r2, r2
 8003a9c:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003a9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003aa2:	3304      	adds	r3, #4
 8003aa4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[3]);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	699a      	ldr	r2, [r3, #24]
 8003aae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ab2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8003ab6:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8003aba:	ba12      	rev	r2, r2
 8003abc:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003abe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ac2:	3304      	adds	r3, #4
 8003ac4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[4]);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	69da      	ldr	r2, [r3, #28]
 8003ace:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ad2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003ad6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003ada:	ba12      	rev	r2, r2
 8003adc:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003ade:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ae2:	3304      	adds	r3, #4
 8003ae4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 8003ae8:	4b63      	ldr	r3, [pc, #396]	@ (8003c78 <HASH_GetDigest+0x448>)
 8003aea:	695a      	ldr	r2, [r3, #20]
 8003aec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003af0:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8003af4:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8003af8:	ba12      	rev	r2, r2
 8003afa:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003afc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b00:	3304      	adds	r3, #4
 8003b02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 8003b06:	4b5c      	ldr	r3, [pc, #368]	@ (8003c78 <HASH_GetDigest+0x448>)
 8003b08:	699a      	ldr	r2, [r3, #24]
 8003b0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b0e:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003b12:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8003b16:	ba12      	rev	r2, r2
 8003b18:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003b1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b1e:	3304      	adds	r3, #4
 8003b20:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[7]);
 8003b24:	4b54      	ldr	r3, [pc, #336]	@ (8003c78 <HASH_GetDigest+0x448>)
 8003b26:	69da      	ldr	r2, [r3, #28]
 8003b28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b2c:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8003b30:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8003b34:	ba12      	rev	r2, r2
 8003b36:	601a      	str	r2, [r3, #0]
      break;
 8003b38:	e172      	b.n	8003e20 <HASH_GetDigest+0x5f0>
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[0]);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68da      	ldr	r2, [r3, #12]
 8003b40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b44:	657a      	str	r2, [r7, #84]	@ 0x54
 8003b46:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003b48:	ba12      	rev	r2, r2
 8003b4a:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003b4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b50:	3304      	adds	r3, #4
 8003b52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[1]);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	691a      	ldr	r2, [r3, #16]
 8003b5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b60:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003b62:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b64:	ba12      	rev	r2, r2
 8003b66:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003b68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[2]);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	695a      	ldr	r2, [r3, #20]
 8003b78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b7c:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003b7e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003b80:	ba12      	rev	r2, r2
 8003b82:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003b84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b88:	3304      	adds	r3, #4
 8003b8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[3]);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	699a      	ldr	r2, [r3, #24]
 8003b94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b98:	663a      	str	r2, [r7, #96]	@ 0x60
 8003b9a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003b9c:	ba12      	rev	r2, r2
 8003b9e:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003ba0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ba4:	3304      	adds	r3, #4
 8003ba6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[4]);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	69da      	ldr	r2, [r3, #28]
 8003bb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003bb4:	667a      	str	r2, [r7, #100]	@ 0x64
 8003bb6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003bb8:	ba12      	rev	r2, r2
 8003bba:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003bbc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003bc0:	3304      	adds	r3, #4
 8003bc2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 8003bc6:	4b2c      	ldr	r3, [pc, #176]	@ (8003c78 <HASH_GetDigest+0x448>)
 8003bc8:	695a      	ldr	r2, [r3, #20]
 8003bca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003bce:	66ba      	str	r2, [r7, #104]	@ 0x68
 8003bd0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003bd2:	ba12      	rev	r2, r2
 8003bd4:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003bd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003bda:	3304      	adds	r3, #4
 8003bdc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 8003be0:	4b25      	ldr	r3, [pc, #148]	@ (8003c78 <HASH_GetDigest+0x448>)
 8003be2:	699a      	ldr	r2, [r3, #24]
 8003be4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003be8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003bea:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003bec:	ba12      	rev	r2, r2
 8003bee:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003bf0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[7]);
 8003bfa:	4b1f      	ldr	r3, [pc, #124]	@ (8003c78 <HASH_GetDigest+0x448>)
 8003bfc:	69da      	ldr	r2, [r3, #28]
 8003bfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c02:	673a      	str	r2, [r7, #112]	@ 0x70
 8003c04:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003c06:	ba12      	rev	r2, r2
 8003c08:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003c0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c0e:	3304      	adds	r3, #4
 8003c10:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[8]);
 8003c14:	4b18      	ldr	r3, [pc, #96]	@ (8003c78 <HASH_GetDigest+0x448>)
 8003c16:	6a1a      	ldr	r2, [r3, #32]
 8003c18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c1c:	677a      	str	r2, [r7, #116]	@ 0x74
 8003c1e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003c20:	ba12      	rev	r2, r2
 8003c22:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003c24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c28:	3304      	adds	r3, #4
 8003c2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[9]);
 8003c2e:	4b12      	ldr	r3, [pc, #72]	@ (8003c78 <HASH_GetDigest+0x448>)
 8003c30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c36:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003c38:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003c3a:	ba12      	rev	r2, r2
 8003c3c:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003c3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c42:	3304      	adds	r3, #4
 8003c44:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[10]);
 8003c48:	4b0b      	ldr	r3, [pc, #44]	@ (8003c78 <HASH_GetDigest+0x448>)
 8003c4a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c50:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003c52:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003c54:	ba12      	rev	r2, r2
 8003c56:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003c58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c5c:	3304      	adds	r3, #4
 8003c5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[11]);
 8003c62:	4b05      	ldr	r3, [pc, #20]	@ (8003c78 <HASH_GetDigest+0x448>)
 8003c64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c6a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003c6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003c72:	ba12      	rev	r2, r2
 8003c74:	601a      	str	r2, [r3, #0]
      break;
 8003c76:	e0d3      	b.n	8003e20 <HASH_GetDigest+0x5f0>
 8003c78:	420c0710 	.word	0x420c0710
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[0]);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68da      	ldr	r2, [r3, #12]
 8003c82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c86:	617a      	str	r2, [r7, #20]
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	ba12      	rev	r2, r2
 8003c8c:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003c8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c92:	3304      	adds	r3, #4
 8003c94:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[1]);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	691a      	ldr	r2, [r3, #16]
 8003c9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ca2:	61ba      	str	r2, [r7, #24]
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	ba12      	rev	r2, r2
 8003ca8:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003caa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003cae:	3304      	adds	r3, #4
 8003cb0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[2]);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	695a      	ldr	r2, [r3, #20]
 8003cba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003cbe:	61fa      	str	r2, [r7, #28]
 8003cc0:	69fa      	ldr	r2, [r7, #28]
 8003cc2:	ba12      	rev	r2, r2
 8003cc4:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003cc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003cca:	3304      	adds	r3, #4
 8003ccc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[3]);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	699a      	ldr	r2, [r3, #24]
 8003cd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003cda:	623a      	str	r2, [r7, #32]
 8003cdc:	6a3a      	ldr	r2, [r7, #32]
 8003cde:	ba12      	rev	r2, r2
 8003ce0:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003ce2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[4]);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	69da      	ldr	r2, [r3, #28]
 8003cf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003cf6:	627a      	str	r2, [r7, #36]	@ 0x24
 8003cf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cfa:	ba12      	rev	r2, r2
 8003cfc:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003cfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d02:	3304      	adds	r3, #4
 8003d04:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 8003d08:	4b48      	ldr	r3, [pc, #288]	@ (8003e2c <HASH_GetDigest+0x5fc>)
 8003d0a:	695a      	ldr	r2, [r3, #20]
 8003d0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d10:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003d12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d14:	ba12      	rev	r2, r2
 8003d16:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003d18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d1c:	3304      	adds	r3, #4
 8003d1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 8003d22:	4b42      	ldr	r3, [pc, #264]	@ (8003e2c <HASH_GetDigest+0x5fc>)
 8003d24:	699a      	ldr	r2, [r3, #24]
 8003d26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d2e:	ba12      	rev	r2, r2
 8003d30:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003d32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d36:	3304      	adds	r3, #4
 8003d38:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[7]);
 8003d3c:	4b3b      	ldr	r3, [pc, #236]	@ (8003e2c <HASH_GetDigest+0x5fc>)
 8003d3e:	69da      	ldr	r2, [r3, #28]
 8003d40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d44:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d48:	ba12      	rev	r2, r2
 8003d4a:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003d4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d50:	3304      	adds	r3, #4
 8003d52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[8]);
 8003d56:	4b35      	ldr	r3, [pc, #212]	@ (8003e2c <HASH_GetDigest+0x5fc>)
 8003d58:	6a1a      	ldr	r2, [r3, #32]
 8003d5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d5e:	637a      	str	r2, [r7, #52]	@ 0x34
 8003d60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d62:	ba12      	rev	r2, r2
 8003d64:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003d66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d6a:	3304      	adds	r3, #4
 8003d6c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[9]);
 8003d70:	4b2e      	ldr	r3, [pc, #184]	@ (8003e2c <HASH_GetDigest+0x5fc>)
 8003d72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d78:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003d7a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003d7c:	ba12      	rev	r2, r2
 8003d7e:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003d80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d84:	3304      	adds	r3, #4
 8003d86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[10]);
 8003d8a:	4b28      	ldr	r3, [pc, #160]	@ (8003e2c <HASH_GetDigest+0x5fc>)
 8003d8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d92:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003d94:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003d96:	ba12      	rev	r2, r2
 8003d98:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003d9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d9e:	3304      	adds	r3, #4
 8003da0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[11]);
 8003da4:	4b21      	ldr	r3, [pc, #132]	@ (8003e2c <HASH_GetDigest+0x5fc>)
 8003da6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003da8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003dac:	643a      	str	r2, [r7, #64]	@ 0x40
 8003dae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003db0:	ba12      	rev	r2, r2
 8003db2:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003db4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003db8:	3304      	adds	r3, #4
 8003dba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[12]);
 8003dbe:	4b1b      	ldr	r3, [pc, #108]	@ (8003e2c <HASH_GetDigest+0x5fc>)
 8003dc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003dc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003dc6:	647a      	str	r2, [r7, #68]	@ 0x44
 8003dc8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003dca:	ba12      	rev	r2, r2
 8003dcc:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003dce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003dd2:	3304      	adds	r3, #4
 8003dd4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[13]);
 8003dd8:	4b14      	ldr	r3, [pc, #80]	@ (8003e2c <HASH_GetDigest+0x5fc>)
 8003dda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ddc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003de0:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003de2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003de4:	ba12      	rev	r2, r2
 8003de6:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003de8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003dec:	3304      	adds	r3, #4
 8003dee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[14]);
 8003df2:	4b0e      	ldr	r3, [pc, #56]	@ (8003e2c <HASH_GetDigest+0x5fc>)
 8003df4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003df6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003dfa:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003dfc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003dfe:	ba12      	rev	r2, r2
 8003e00:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003e02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e06:	3304      	adds	r3, #4
 8003e08:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[15]);
 8003e0c:	4b07      	ldr	r3, [pc, #28]	@ (8003e2c <HASH_GetDigest+0x5fc>)
 8003e0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e14:	653a      	str	r2, [r7, #80]	@ 0x50
 8003e16:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003e18:	ba12      	rev	r2, r2
 8003e1a:	601a      	str	r2, [r3, #0]
      break;
 8003e1c:	e000      	b.n	8003e20 <HASH_GetDigest+0x5f0>
      break;
 8003e1e:	bf00      	nop
  }
}
 8003e20:	bf00      	nop
 8003e22:	37dc      	adds	r7, #220	@ 0xdc
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	420c0710 	.word	0x420c0710

08003e30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e08d      	b.n	8003f5e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d106      	bne.n	8003e5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7fd fd0a 	bl	8001870 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2224      	movs	r2, #36	@ 0x24
 8003e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f022 0201 	bic.w	r2, r2, #1
 8003e72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003e80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d107      	bne.n	8003eaa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	689a      	ldr	r2, [r3, #8]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ea6:	609a      	str	r2, [r3, #8]
 8003ea8:	e006      	b.n	8003eb8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689a      	ldr	r2, [r3, #8]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003eb6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d108      	bne.n	8003ed2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ece:	605a      	str	r2, [r3, #4]
 8003ed0:	e007      	b.n	8003ee2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	685a      	ldr	r2, [r3, #4]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ee0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	6812      	ldr	r2, [r2, #0]
 8003eec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003ef0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ef4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68da      	ldr	r2, [r3, #12]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f04:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	691a      	ldr	r2, [r3, #16]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	69d9      	ldr	r1, [r3, #28]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a1a      	ldr	r2, [r3, #32]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f042 0201 	orr.w	r2, r2, #1
 8003f3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2220      	movs	r2, #32
 8003f4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f66:	b480      	push	{r7}
 8003f68:	b083      	sub	sp, #12
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
 8003f6e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2b20      	cmp	r3, #32
 8003f7a:	d138      	bne.n	8003fee <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d101      	bne.n	8003f8a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f86:	2302      	movs	r3, #2
 8003f88:	e032      	b.n	8003ff0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2224      	movs	r2, #36	@ 0x24
 8003f96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f022 0201 	bic.w	r2, r2, #1
 8003fa8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003fb8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	6819      	ldr	r1, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f042 0201 	orr.w	r2, r2, #1
 8003fd8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003fea:	2300      	movs	r3, #0
 8003fec:	e000      	b.n	8003ff0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003fee:	2302      	movs	r3, #2
  }
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b20      	cmp	r3, #32
 8004010:	d139      	bne.n	8004086 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004018:	2b01      	cmp	r3, #1
 800401a:	d101      	bne.n	8004020 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800401c:	2302      	movs	r3, #2
 800401e:	e033      	b.n	8004088 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2224      	movs	r2, #36	@ 0x24
 800402c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f022 0201 	bic.w	r2, r2, #1
 800403e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800404e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	021b      	lsls	r3, r3, #8
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	4313      	orrs	r3, r2
 8004058:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f042 0201 	orr.w	r2, r2, #1
 8004070:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2220      	movs	r2, #32
 8004076:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004082:	2300      	movs	r3, #0
 8004084:	e000      	b.n	8004088 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004086:	2302      	movs	r3, #2
  }
}
 8004088:	4618      	mov	r0, r3
 800408a:	3714      	adds	r7, #20
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	460b      	mov	r3, r1
 800409e:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 80040a0:	230a      	movs	r3, #10
 80040a2:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 80040a4:	e002      	b.n	80040ac <PCD_GET_EP_RX_CNT+0x18>
  {
    count--;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	3b01      	subs	r3, #1
 80040aa:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1f9      	bne.n	80040a6 <PCD_GET_EP_RX_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 80040b2:	887b      	ldrh	r3, [r7, #2]
 80040b4:	00db      	lsls	r3, r3, #3
 80040b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80040ba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	0c1b      	lsrs	r3, r3, #16
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040c8:	b29b      	uxth	r3, r3
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3714      	adds	r7, #20
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b085      	sub	sp, #20
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
 80040de:	460b      	mov	r3, r1
 80040e0:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 80040e2:	230a      	movs	r3, #10
 80040e4:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 80040e6:	e002      	b.n	80040ee <PCD_GET_EP_DBUF0_CNT+0x18>
  {
    count--;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	3b01      	subs	r3, #1
 80040ec:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1f9      	bne.n	80040e8 <PCD_GET_EP_DBUF0_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 80040f4:	887b      	ldrh	r3, [r7, #2]
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80040fc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	0c1b      	lsrs	r3, r3, #16
 8004104:	b29b      	uxth	r3, r3
 8004106:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800410a:	b29b      	uxth	r3, r3
}
 800410c:	4618      	mov	r0, r3
 800410e:	3714      	adds	r7, #20
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	460b      	mov	r3, r1
 8004122:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8004124:	230a      	movs	r3, #10
 8004126:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8004128:	e002      	b.n	8004130 <PCD_GET_EP_DBUF1_CNT+0x18>
  {
    count--;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	3b01      	subs	r3, #1
 800412e:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1f9      	bne.n	800412a <PCD_GET_EP_DBUF1_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 8004136:	887b      	ldrh	r3, [r7, #2]
 8004138:	00db      	lsls	r3, r3, #3
 800413a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800413e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	0c1b      	lsrs	r3, r3, #16
 8004146:	b29b      	uxth	r3, r3
 8004148:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800414c:	b29b      	uxth	r3, r3
}
 800414e:	4618      	mov	r0, r3
 8004150:	3714      	adds	r7, #20
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr

0800415a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b086      	sub	sp, #24
 800415e:	af02      	add	r7, sp, #8
 8004160:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d101      	bne.n	800416c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e0f3      	b.n	8004354 <HAL_PCD_Init+0x1fa>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	d106      	bne.n	8004186 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f7fd fecd 	bl	8001f20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2203      	movs	r2, #3
 800418a:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4618      	mov	r0, r3
 8004194:	f009 fd1d 	bl	800dbd2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6818      	ldr	r0, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	7c1a      	ldrb	r2, [r3, #16]
 80041a0:	f88d 2000 	strb.w	r2, [sp]
 80041a4:	3304      	adds	r3, #4
 80041a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041a8:	f009 fce1 	bl	800db6e <USB_CoreInit>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d005      	beq.n	80041be <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2202      	movs	r2, #2
 80041b6:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e0ca      	b.n	8004354 <HAL_PCD_Init+0x1fa>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2100      	movs	r1, #0
 80041c4:	4618      	mov	r0, r3
 80041c6:	f009 fd19 	bl	800dbfc <USB_SetCurrentMode>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d005      	beq.n	80041dc <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2202      	movs	r2, #2
 80041d4:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e0bb      	b.n	8004354 <HAL_PCD_Init+0x1fa>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041dc:	2300      	movs	r3, #0
 80041de:	73fb      	strb	r3, [r7, #15]
 80041e0:	e03f      	b.n	8004262 <HAL_PCD_Init+0x108>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80041e2:	7bfa      	ldrb	r2, [r7, #15]
 80041e4:	6879      	ldr	r1, [r7, #4]
 80041e6:	4613      	mov	r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4413      	add	r3, r2
 80041ec:	00db      	lsls	r3, r3, #3
 80041ee:	440b      	add	r3, r1
 80041f0:	3315      	adds	r3, #21
 80041f2:	2201      	movs	r2, #1
 80041f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80041f6:	7bfa      	ldrb	r2, [r7, #15]
 80041f8:	6879      	ldr	r1, [r7, #4]
 80041fa:	4613      	mov	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	4413      	add	r3, r2
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	440b      	add	r3, r1
 8004204:	3314      	adds	r3, #20
 8004206:	7bfa      	ldrb	r2, [r7, #15]
 8004208:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800420a:	7bfa      	ldrb	r2, [r7, #15]
 800420c:	6879      	ldr	r1, [r7, #4]
 800420e:	4613      	mov	r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4413      	add	r3, r2
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	440b      	add	r3, r1
 8004218:	3317      	adds	r3, #23
 800421a:	2200      	movs	r2, #0
 800421c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800421e:	7bfa      	ldrb	r2, [r7, #15]
 8004220:	6879      	ldr	r1, [r7, #4]
 8004222:	4613      	mov	r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	4413      	add	r3, r2
 8004228:	00db      	lsls	r3, r3, #3
 800422a:	440b      	add	r3, r1
 800422c:	3324      	adds	r3, #36	@ 0x24
 800422e:	2200      	movs	r2, #0
 8004230:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004232:	7bfa      	ldrb	r2, [r7, #15]
 8004234:	6879      	ldr	r1, [r7, #4]
 8004236:	4613      	mov	r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	4413      	add	r3, r2
 800423c:	00db      	lsls	r3, r3, #3
 800423e:	440b      	add	r3, r1
 8004240:	3328      	adds	r3, #40	@ 0x28
 8004242:	2200      	movs	r2, #0
 8004244:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004246:	7bfb      	ldrb	r3, [r7, #15]
 8004248:	6879      	ldr	r1, [r7, #4]
 800424a:	1c5a      	adds	r2, r3, #1
 800424c:	4613      	mov	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4413      	add	r3, r2
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	440b      	add	r3, r1
 8004256:	3304      	adds	r3, #4
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800425c:	7bfb      	ldrb	r3, [r7, #15]
 800425e:	3301      	adds	r3, #1
 8004260:	73fb      	strb	r3, [r7, #15]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	791b      	ldrb	r3, [r3, #4]
 8004266:	7bfa      	ldrb	r2, [r7, #15]
 8004268:	429a      	cmp	r2, r3
 800426a:	d3ba      	bcc.n	80041e2 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800426c:	2300      	movs	r3, #0
 800426e:	73fb      	strb	r3, [r7, #15]
 8004270:	e044      	b.n	80042fc <HAL_PCD_Init+0x1a2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004272:	7bfa      	ldrb	r2, [r7, #15]
 8004274:	6879      	ldr	r1, [r7, #4]
 8004276:	4613      	mov	r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	4413      	add	r3, r2
 800427c:	00db      	lsls	r3, r3, #3
 800427e:	440b      	add	r3, r1
 8004280:	f203 1355 	addw	r3, r3, #341	@ 0x155
 8004284:	2200      	movs	r2, #0
 8004286:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004288:	7bfa      	ldrb	r2, [r7, #15]
 800428a:	6879      	ldr	r1, [r7, #4]
 800428c:	4613      	mov	r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4413      	add	r3, r2
 8004292:	00db      	lsls	r3, r3, #3
 8004294:	440b      	add	r3, r1
 8004296:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800429a:	7bfa      	ldrb	r2, [r7, #15]
 800429c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800429e:	7bfa      	ldrb	r2, [r7, #15]
 80042a0:	6879      	ldr	r1, [r7, #4]
 80042a2:	4613      	mov	r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	4413      	add	r3, r2
 80042a8:	00db      	lsls	r3, r3, #3
 80042aa:	440b      	add	r3, r1
 80042ac:	f203 1357 	addw	r3, r3, #343	@ 0x157
 80042b0:	2200      	movs	r2, #0
 80042b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80042b4:	7bfa      	ldrb	r2, [r7, #15]
 80042b6:	6879      	ldr	r1, [r7, #4]
 80042b8:	4613      	mov	r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	4413      	add	r3, r2
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	440b      	add	r3, r1
 80042c2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80042c6:	2200      	movs	r2, #0
 80042c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80042ca:	7bfa      	ldrb	r2, [r7, #15]
 80042cc:	6879      	ldr	r1, [r7, #4]
 80042ce:	4613      	mov	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4413      	add	r3, r2
 80042d4:	00db      	lsls	r3, r3, #3
 80042d6:	440b      	add	r3, r1
 80042d8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80042dc:	2200      	movs	r2, #0
 80042de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80042e0:	7bfa      	ldrb	r2, [r7, #15]
 80042e2:	6879      	ldr	r1, [r7, #4]
 80042e4:	4613      	mov	r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4413      	add	r3, r2
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	440b      	add	r3, r1
 80042ee:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80042f2:	2200      	movs	r2, #0
 80042f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042f6:	7bfb      	ldrb	r3, [r7, #15]
 80042f8:	3301      	adds	r3, #1
 80042fa:	73fb      	strb	r3, [r7, #15]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	791b      	ldrb	r3, [r3, #4]
 8004300:	7bfa      	ldrb	r2, [r7, #15]
 8004302:	429a      	cmp	r2, r3
 8004304:	d3b5      	bcc.n	8004272 <HAL_PCD_Init+0x118>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6818      	ldr	r0, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	7c1a      	ldrb	r2, [r3, #16]
 800430e:	f88d 2000 	strb.w	r2, [sp]
 8004312:	3304      	adds	r3, #4
 8004314:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004316:	f009 fc94 	bl	800dc42 <USB_DevInit>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d005      	beq.n	800432c <HAL_PCD_Init+0x1d2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2202      	movs	r2, #2
 8004324:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e013      	b.n	8004354 <HAL_PCD_Init+0x1fa>
  }

  hpcd->USB_Address = 0U;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	7b1b      	ldrb	r3, [r3, #12]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d102      	bne.n	8004348 <HAL_PCD_Init+0x1ee>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f001 fb6b 	bl	8005a1e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4618      	mov	r0, r3
 800434e:	f00b faed 	bl	800f92c <USB_DevDisconnect>

  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	3710      	adds	r7, #16
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 800436a:	2b01      	cmp	r3, #1
 800436c:	d101      	bne.n	8004372 <HAL_PCD_Start+0x16>
 800436e:	2302      	movs	r3, #2
 8004370:	e012      	b.n	8004398 <HAL_PCD_Start+0x3c>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4618      	mov	r0, r3
 8004380:	f009 fc13 	bl	800dbaa <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4618      	mov	r0, r3
 800438a:	f00b fabe 	bl	800f90a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3708      	adds	r7, #8
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f00b face 	bl	800f94e <USB_ReadInterrupts>
 80043b2:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 faf2 	bl	80049a8 <PCD_EP_ISR_Handler>

    return;
 80043c4:	e0de      	b.n	8004584 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d010      	beq.n	80043f2 <HAL_PCD_IRQHandler+0x52>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	f64f 33ff 	movw	r3, #64511	@ 0xfbff
 80043de:	400b      	ands	r3, r1
 80043e0:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f00c fa13 	bl	801080e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80043e8:	2100      	movs	r1, #0
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 f8e1 	bl	80045b2 <HAL_PCD_SetAddress>

    return;
 80043f0:	e0c8      	b.n	8004584 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d009      	beq.n	8004410 <HAL_PCD_IRQHandler+0x70>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	f64b 73ff 	movw	r3, #49151	@ 0xbfff
 800440a:	400b      	ands	r3, r1
 800440c:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 800440e:	e0b9      	b.n	8004584 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d009      	beq.n	800442e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	f64d 73ff 	movw	r3, #57343	@ 0xdfff
 8004428:	400b      	ands	r3, r1
 800442a:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 800442c:	e0aa      	b.n	8004584 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d029      	beq.n	800448c <HAL_PCD_IRQHandler+0xec>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f022 0204 	bic.w	r2, r2, #4
 8004446:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f022 0208 	bic.w	r2, r2, #8
 8004456:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 800445e:	2b01      	cmp	r3, #1
 8004460:	d107      	bne.n	8004472 <HAL_PCD_IRQHandler+0xd2>
    {
      hpcd->LPM_State = LPM_L0;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800446a:	2100      	movs	r1, #0
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f001 faf8 	bl	8005a62 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 f893 	bl	800459e <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8004486:	400b      	ands	r3, r1
 8004488:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 800448a:	e07b      	b.n	8004584 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004492:	2b00      	cmp	r3, #0
 8004494:	d01c      	beq.n	80044d0 <HAL_PCD_IRQHandler+0x130>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f042 0208 	orr.w	r2, r2, #8
 80044a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	f24f 73ff 	movw	r3, #63487	@ 0xf7ff
 80044b4:	400b      	ands	r3, r1
 80044b6:	6453      	str	r3, [r2, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f042 0204 	orr.w	r2, r2, #4
 80044c6:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 f85e 	bl	800458a <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80044ce:	e059      	b.n	8004584 <HAL_PCD_IRQHandler+0x1e4>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d033      	beq.n	8004542 <HAL_PCD_IRQHandler+0x1a2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 80044e8:	400b      	ands	r3, r1
 80044ea:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d121      	bne.n	800453a <HAL_PCD_IRQHandler+0x19a>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f042 0204 	orr.w	r2, r2, #4
 8004504:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f042 0208 	orr.w	r2, r2, #8
 8004514:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2201      	movs	r2, #1
 800451a:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004524:	089b      	lsrs	r3, r3, #2
 8004526:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004530:	2101      	movs	r1, #1
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f001 fa95 	bl	8005a62 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004538:	e024      	b.n	8004584 <HAL_PCD_IRQHandler+0x1e4>
      HAL_PCD_SuspendCallback(hpcd);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f825 	bl	800458a <HAL_PCD_SuspendCallback>
    return;
 8004540:	e020      	b.n	8004584 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00c      	beq.n	8004566 <HAL_PCD_IRQHandler+0x1c6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	f64f 53ff 	movw	r3, #65023	@ 0xfdff
 800455a:	400b      	ands	r3, r1
 800455c:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f00c f947 	bl	80107f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004564:	e00e      	b.n	8004584 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800456c:	2b00      	cmp	r3, #0
 800456e:	d009      	beq.n	8004584 <HAL_PCD_IRQHandler+0x1e4>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800457e:	400b      	ands	r3, r1
 8004580:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8004582:	bf00      	nop
  }
}
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800458a:	b480      	push	{r7}
 800458c:	b083      	sub	sp, #12
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8004592:	bf00      	nop
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr

0800459e <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800459e:	b480      	push	{r7}
 80045a0:	b083      	sub	sp, #12
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 80045a6:	bf00      	nop
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr

080045b2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b082      	sub	sp, #8
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
 80045ba:	460b      	mov	r3, r1
 80045bc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d101      	bne.n	80045cc <HAL_PCD_SetAddress+0x1a>
 80045c8:	2302      	movs	r3, #2
 80045ca:	e012      	b.n	80045f2 <HAL_PCD_SetAddress+0x40>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  hpcd->USB_Address = address;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	78fa      	ldrb	r2, [r7, #3]
 80045d8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	78fa      	ldrb	r2, [r7, #3]
 80045e0:	4611      	mov	r1, r2
 80045e2:	4618      	mov	r0, r3
 80045e4:	f00b f97e 	bl	800f8e4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b084      	sub	sp, #16
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
 8004602:	4608      	mov	r0, r1
 8004604:	4611      	mov	r1, r2
 8004606:	461a      	mov	r2, r3
 8004608:	4603      	mov	r3, r0
 800460a:	70fb      	strb	r3, [r7, #3]
 800460c:	460b      	mov	r3, r1
 800460e:	803b      	strh	r3, [r7, #0]
 8004610:	4613      	mov	r3, r2
 8004612:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004614:	2300      	movs	r3, #0
 8004616:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004618:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800461c:	2b00      	cmp	r3, #0
 800461e:	da0f      	bge.n	8004640 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004620:	78fb      	ldrb	r3, [r7, #3]
 8004622:	f003 0207 	and.w	r2, r3, #7
 8004626:	4613      	mov	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	4413      	add	r3, r2
 800462c:	00db      	lsls	r3, r3, #3
 800462e:	3310      	adds	r3, #16
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	4413      	add	r3, r2
 8004634:	3304      	adds	r3, #4
 8004636:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2201      	movs	r2, #1
 800463c:	705a      	strb	r2, [r3, #1]
 800463e:	e00f      	b.n	8004660 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004640:	78fb      	ldrb	r3, [r7, #3]
 8004642:	f003 0207 	and.w	r2, r3, #7
 8004646:	4613      	mov	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	4413      	add	r3, r2
 800464c:	00db      	lsls	r3, r3, #3
 800464e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	4413      	add	r3, r2
 8004656:	3304      	adds	r3, #4
 8004658:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004660:	78fb      	ldrb	r3, [r7, #3]
 8004662:	f003 0307 	and.w	r3, r3, #7
 8004666:	b2da      	uxtb	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800466c:	883b      	ldrh	r3, [r7, #0]
 800466e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	78ba      	ldrb	r2, [r7, #2]
 800467a:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800467c:	78bb      	ldrb	r3, [r7, #2]
 800467e:	2b02      	cmp	r3, #2
 8004680:	d102      	bne.n	8004688 <HAL_PCD_EP_Open+0x8e>
  {
    ep->data_pid_start = 0U;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 800468e:	2b01      	cmp	r3, #1
 8004690:	d101      	bne.n	8004696 <HAL_PCD_EP_Open+0x9c>
 8004692:	2302      	movs	r3, #2
 8004694:	e00e      	b.n	80046b4 <HAL_PCD_EP_Open+0xba>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68f9      	ldr	r1, [r7, #12]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f009 faef 	bl	800dc88 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return ret;
 80046b2:	7afb      	ldrb	r3, [r7, #11]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	460b      	mov	r3, r1
 80046c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80046c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	da0f      	bge.n	80046f0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046d0:	78fb      	ldrb	r3, [r7, #3]
 80046d2:	f003 0207 	and.w	r2, r3, #7
 80046d6:	4613      	mov	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4413      	add	r3, r2
 80046dc:	00db      	lsls	r3, r3, #3
 80046de:	3310      	adds	r3, #16
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	4413      	add	r3, r2
 80046e4:	3304      	adds	r3, #4
 80046e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2201      	movs	r2, #1
 80046ec:	705a      	strb	r2, [r3, #1]
 80046ee:	e00f      	b.n	8004710 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046f0:	78fb      	ldrb	r3, [r7, #3]
 80046f2:	f003 0207 	and.w	r2, r3, #7
 80046f6:	4613      	mov	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	4413      	add	r3, r2
 80046fc:	00db      	lsls	r3, r3, #3
 80046fe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	4413      	add	r3, r2
 8004706:	3304      	adds	r3, #4
 8004708:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004710:	78fb      	ldrb	r3, [r7, #3]
 8004712:	f003 0307 	and.w	r3, r3, #7
 8004716:	b2da      	uxtb	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8004722:	2b01      	cmp	r3, #1
 8004724:	d101      	bne.n	800472a <HAL_PCD_EP_Close+0x6e>
 8004726:	2302      	movs	r3, #2
 8004728:	e00e      	b.n	8004748 <HAL_PCD_EP_Close+0x8c>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68f9      	ldr	r1, [r7, #12]
 8004738:	4618      	mov	r0, r3
 800473a:	f009 fe05 	bl	800e348 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3710      	adds	r7, #16
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	607a      	str	r2, [r7, #4]
 800475a:	603b      	str	r3, [r7, #0]
 800475c:	460b      	mov	r3, r1
 800475e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004760:	7afb      	ldrb	r3, [r7, #11]
 8004762:	f003 0207 	and.w	r2, r3, #7
 8004766:	4613      	mov	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4413      	add	r3, r2
 800476c:	00db      	lsls	r3, r3, #3
 800476e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	4413      	add	r3, r2
 8004776:	3304      	adds	r3, #4
 8004778:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	683a      	ldr	r2, [r7, #0]
 8004784:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	2200      	movs	r2, #0
 800478a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	2200      	movs	r2, #0
 8004790:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004792:	7afb      	ldrb	r3, [r7, #11]
 8004794:	f003 0307 	and.w	r3, r3, #7
 8004798:	b2da      	uxtb	r2, r3
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	6979      	ldr	r1, [r7, #20]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f009 ff59 	bl	800e65c <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	460b      	mov	r3, r1
 80047be:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80047c0:	78fb      	ldrb	r3, [r7, #3]
 80047c2:	f003 0207 	and.w	r2, r3, #7
 80047c6:	6879      	ldr	r1, [r7, #4]
 80047c8:	4613      	mov	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4413      	add	r3, r2
 80047ce:	00db      	lsls	r3, r3, #3
 80047d0:	440b      	add	r3, r1
 80047d2:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 80047d6:	681b      	ldr	r3, [r3, #0]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	607a      	str	r2, [r7, #4]
 80047ee:	603b      	str	r3, [r7, #0]
 80047f0:	460b      	mov	r3, r1
 80047f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047f4:	7afb      	ldrb	r3, [r7, #11]
 80047f6:	f003 0207 	and.w	r2, r3, #7
 80047fa:	4613      	mov	r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	4413      	add	r3, r2
 8004800:	00db      	lsls	r3, r3, #3
 8004802:	3310      	adds	r3, #16
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	4413      	add	r3, r2
 8004808:	3304      	adds	r3, #4
 800480a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	619a      	str	r2, [r3, #24]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	621a      	str	r2, [r3, #32]
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	2200      	movs	r2, #0
 800482a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	2201      	movs	r2, #1
 8004830:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004832:	7afb      	ldrb	r3, [r7, #11]
 8004834:	f003 0307 	and.w	r3, r3, #7
 8004838:	b2da      	uxtb	r2, r3
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6979      	ldr	r1, [r7, #20]
 8004844:	4618      	mov	r0, r3
 8004846:	f009 ff09 	bl	800e65c <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3718      	adds	r7, #24
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	460b      	mov	r3, r1
 800485e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004860:	78fb      	ldrb	r3, [r7, #3]
 8004862:	f003 0307 	and.w	r3, r3, #7
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	7912      	ldrb	r2, [r2, #4]
 800486a:	4293      	cmp	r3, r2
 800486c:	d901      	bls.n	8004872 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e040      	b.n	80048f4 <HAL_PCD_EP_SetStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004872:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004876:	2b00      	cmp	r3, #0
 8004878:	da0f      	bge.n	800489a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800487a:	78fb      	ldrb	r3, [r7, #3]
 800487c:	f003 0207 	and.w	r2, r3, #7
 8004880:	4613      	mov	r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4413      	add	r3, r2
 8004886:	00db      	lsls	r3, r3, #3
 8004888:	3310      	adds	r3, #16
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	4413      	add	r3, r2
 800488e:	3304      	adds	r3, #4
 8004890:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2201      	movs	r2, #1
 8004896:	705a      	strb	r2, [r3, #1]
 8004898:	e00d      	b.n	80048b6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800489a:	78fa      	ldrb	r2, [r7, #3]
 800489c:	4613      	mov	r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	4413      	add	r3, r2
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	4413      	add	r3, r2
 80048ac:	3304      	adds	r3, #4
 80048ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2201      	movs	r2, #1
 80048ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048bc:	78fb      	ldrb	r3, [r7, #3]
 80048be:	f003 0307 	and.w	r3, r3, #7
 80048c2:	b2da      	uxtb	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d101      	bne.n	80048d6 <HAL_PCD_EP_SetStall+0x82>
 80048d2:	2302      	movs	r3, #2
 80048d4:	e00e      	b.n	80048f4 <HAL_PCD_EP_SetStall+0xa0>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68f9      	ldr	r1, [r7, #12]
 80048e4:	4618      	mov	r0, r3
 80048e6:	f00a ff23 	bl	800f730 <USB_EPSetStall>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3710      	adds	r7, #16
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	460b      	mov	r3, r1
 8004906:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004908:	78fb      	ldrb	r3, [r7, #3]
 800490a:	f003 030f 	and.w	r3, r3, #15
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	7912      	ldrb	r2, [r2, #4]
 8004912:	4293      	cmp	r3, r2
 8004914:	d901      	bls.n	800491a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e042      	b.n	80049a0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800491a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800491e:	2b00      	cmp	r3, #0
 8004920:	da0f      	bge.n	8004942 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004922:	78fb      	ldrb	r3, [r7, #3]
 8004924:	f003 0207 	and.w	r2, r3, #7
 8004928:	4613      	mov	r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4413      	add	r3, r2
 800492e:	00db      	lsls	r3, r3, #3
 8004930:	3310      	adds	r3, #16
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	4413      	add	r3, r2
 8004936:	3304      	adds	r3, #4
 8004938:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2201      	movs	r2, #1
 800493e:	705a      	strb	r2, [r3, #1]
 8004940:	e00f      	b.n	8004962 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004942:	78fb      	ldrb	r3, [r7, #3]
 8004944:	f003 0207 	and.w	r2, r3, #7
 8004948:	4613      	mov	r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4413      	add	r3, r2
 800494e:	00db      	lsls	r3, r3, #3
 8004950:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	4413      	add	r3, r2
 8004958:	3304      	adds	r3, #4
 800495a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004968:	78fb      	ldrb	r3, [r7, #3]
 800496a:	f003 0307 	and.w	r3, r3, #7
 800496e:	b2da      	uxtb	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 800497a:	2b01      	cmp	r3, #1
 800497c:	d101      	bne.n	8004982 <HAL_PCD_EP_ClrStall+0x86>
 800497e:	2302      	movs	r3, #2
 8004980:	e00e      	b.n	80049a0 <HAL_PCD_EP_ClrStall+0xa4>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68f9      	ldr	r1, [r7, #12]
 8004990:	4618      	mov	r0, r3
 8004992:	f00a ff13 	bl	800f7bc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b08e      	sub	sp, #56	@ 0x38
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80049b0:	e326      	b.n	8005000 <PCD_EP_ISR_Handler+0x658>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049b8:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 80049ba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	f003 030f 	and.w	r3, r3, #15
 80049c2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    if (epindex == 0U)
 80049c6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	f040 8124 	bne.w	8004c18 <PCD_EP_ISR_Handler+0x270>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80049d0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80049d2:	f003 0310 	and.w	r3, r3, #16
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d13e      	bne.n	8004a58 <PCD_EP_ISR_Handler+0xb0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	4b89      	ldr	r3, [pc, #548]	@ (8004c08 <PCD_EP_ISR_Handler+0x260>)
 80049e2:	4013      	ands	r3, r2
 80049e4:	60bb      	str	r3, [r7, #8]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049f0:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	3314      	adds	r3, #20
 80049f6:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80049f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	00db      	lsls	r3, r3, #3
 80049fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004a02:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	0c1b      	lsrs	r3, r3, #16
 8004a0a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a10:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004a12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a14:	695a      	ldr	r2, [r3, #20]
 8004a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	441a      	add	r2, r3
 8004a1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a1e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004a20:	2100      	movs	r1, #0
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f00b fecb 	bl	80107be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	7c5b      	ldrb	r3, [r3, #17]
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f000 82e6 	beq.w	8005000 <PCD_EP_ISR_Handler+0x658>
 8004a34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f040 82e1 	bne.w	8005000 <PCD_EP_ISR_Handler+0x658>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	7c5b      	ldrb	r3, [r3, #17]
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004a48:	b2da      	uxtb	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	745a      	strb	r2, [r3, #17]
 8004a56:	e2d3      	b.n	8005000 <PCD_EP_ISR_Handler+0x658>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8004a5e:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	867b      	strh	r3, [r7, #50]	@ 0x32

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004a68:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004a6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d027      	beq.n	8004ac2 <PCD_EP_ISR_Handler+0x11a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	4610      	mov	r0, r2
 8004a7e:	f7ff fb09 	bl	8004094 <PCD_GET_EP_RX_CNT>
 8004a82:	4603      	mov	r3, r0
 8004a84:	461a      	mov	r2, r3
 8004a86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a88:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6818      	ldr	r0, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 8004a94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a96:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a9a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	f00a ffc5 	bl	800fa2c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	4b58      	ldr	r3, [pc, #352]	@ (8004c0c <PCD_EP_ISR_Handler+0x264>)
 8004aaa:	4013      	ands	r3, r2
 8004aac:	60fb      	str	r3, [r7, #12]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004ab8:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f00b fe52 	bl	8010764 <HAL_PCD_SetupStageCallback>
 8004ac0:	e29e      	b.n	8005000 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 8004ac2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f280 829a 	bge.w	8005000 <PCD_EP_ISR_Handler+0x658>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	4b4e      	ldr	r3, [pc, #312]	@ (8004c0c <PCD_EP_ISR_Handler+0x264>)
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ade:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004ae2:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	4619      	mov	r1, r3
 8004aee:	4610      	mov	r0, r2
 8004af0:	f7ff fad0 	bl	8004094 <PCD_GET_EP_RX_CNT>
 8004af4:	4603      	mov	r3, r0
 8004af6:	461a      	mov	r2, r3
 8004af8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004afa:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004afe:	69db      	ldr	r3, [r3, #28]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d019      	beq.n	8004b38 <PCD_EP_ISR_Handler+0x190>
 8004b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d015      	beq.n	8004b38 <PCD_EP_ISR_Handler+0x190>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6818      	ldr	r0, [r3, #0]
 8004b10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b12:	6959      	ldr	r1, [r3, #20]
 8004b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b16:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004b18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b1a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	f00a ff85 	bl	800fa2c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b24:	695a      	ldr	r2, [r3, #20]
 8004b26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	441a      	add	r2, r3
 8004b2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b2e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004b30:	2100      	movs	r1, #0
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f00b fe28 	bl	8010788 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	867b      	strh	r3, [r7, #50]	@ 0x32

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004b40:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004b42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f040 825a 	bne.w	8005000 <PCD_EP_ISR_Handler+0x658>
 8004b4c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004b4e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004b52:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b56:	f000 8253 	beq.w	8005000 <PCD_EP_ISR_Handler+0x658>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004b5a:	4b2d      	ldr	r3, [pc, #180]	@ (8004c10 <PCD_EP_ISR_Handler+0x268>)
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	4a2c      	ldr	r2, [pc, #176]	@ (8004c10 <PCD_EP_ISR_Handler+0x268>)
 8004b60:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8004b64:	6053      	str	r3, [r2, #4]
 8004b66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d106      	bne.n	8004b7c <PCD_EP_ISR_Handler+0x1d4>
 8004b6e:	4b28      	ldr	r3, [pc, #160]	@ (8004c10 <PCD_EP_ISR_Handler+0x268>)
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	4a27      	ldr	r2, [pc, #156]	@ (8004c10 <PCD_EP_ISR_Handler+0x268>)
 8004b74:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004b78:	6053      	str	r3, [r2, #4]
 8004b7a:	e02e      	b.n	8004bda <PCD_EP_ISR_Handler+0x232>
 8004b7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	2b3e      	cmp	r3, #62	@ 0x3e
 8004b82:	d814      	bhi.n	8004bae <PCD_EP_ISR_Handler+0x206>
 8004b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	085b      	lsrs	r3, r3, #1
 8004b8a:	617b      	str	r3, [r7, #20]
 8004b8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d002      	beq.n	8004b9e <PCD_EP_ISR_Handler+0x1f6>
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	617b      	str	r3, [r7, #20]
 8004b9e:	4b1c      	ldr	r3, [pc, #112]	@ (8004c10 <PCD_EP_ISR_Handler+0x268>)
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	069b      	lsls	r3, r3, #26
 8004ba6:	491a      	ldr	r1, [pc, #104]	@ (8004c10 <PCD_EP_ISR_Handler+0x268>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	604b      	str	r3, [r1, #4]
 8004bac:	e015      	b.n	8004bda <PCD_EP_ISR_Handler+0x232>
 8004bae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	095b      	lsrs	r3, r3, #5
 8004bb4:	617b      	str	r3, [r7, #20]
 8004bb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	f003 031f 	and.w	r3, r3, #31
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d102      	bne.n	8004bc8 <PCD_EP_ISR_Handler+0x220>
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	617b      	str	r3, [r7, #20]
 8004bc8:	4b11      	ldr	r3, [pc, #68]	@ (8004c10 <PCD_EP_ISR_Handler+0x268>)
 8004bca:	685a      	ldr	r2, [r3, #4]
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	069b      	lsls	r3, r3, #26
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	4a0f      	ldr	r2, [pc, #60]	@ (8004c10 <PCD_EP_ISR_Handler+0x268>)
 8004bd4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004bd8:	6053      	str	r3, [r2, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	4b0c      	ldr	r3, [pc, #48]	@ (8004c14 <PCD_EP_ISR_Handler+0x26c>)
 8004be2:	4013      	ands	r3, r2
 8004be4:	613b      	str	r3, [r7, #16]
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004bec:	613b      	str	r3, [r7, #16]
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004bf4:	613b      	str	r3, [r7, #16]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c04:	6013      	str	r3, [r2, #0]
 8004c06:	e1fb      	b.n	8005000 <PCD_EP_ISR_Handler+0x658>
 8004c08:	07ff8f0f 	.word	0x07ff8f0f
 8004c0c:	07ff0f8f 	.word	0x07ff0f8f
 8004c10:	40016400 	.word	0x40016400
 8004c14:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	4413      	add	r3, r2
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	867b      	strh	r3, [r7, #50]	@ 0x32

      if ((wEPVal & USB_EP_VTRX) != 0U)
 8004c2a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f280 80bd 	bge.w	8004dae <PCD_EP_ISR_Handler+0x406>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	461a      	mov	r2, r3
 8004c3a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4413      	add	r3, r2
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	4b9e      	ldr	r3, [pc, #632]	@ (8004ec0 <PCD_EP_ISR_Handler+0x518>)
 8004c46:	4013      	ands	r3, r2
 8004c48:	61fb      	str	r3, [r7, #28]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	461a      	mov	r2, r3
 8004c50:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	4413      	add	r3, r2
 8004c58:	69fa      	ldr	r2, [r7, #28]
 8004c5a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004c5e:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004c60:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8004c64:	4613      	mov	r3, r2
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4413      	add	r3, r2
 8004c6a:	00db      	lsls	r3, r3, #3
 8004c6c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	4413      	add	r3, r2
 8004c74:	3304      	adds	r3, #4
 8004c76:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c7a:	7b1b      	ldrb	r3, [r3, #12]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d116      	bne.n	8004cae <PCD_EP_ISR_Handler+0x306>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	4619      	mov	r1, r3
 8004c8a:	4610      	mov	r0, r2
 8004c8c:	f7ff fa02 	bl	8004094 <PCD_GET_EP_RX_CNT>
 8004c90:	4603      	mov	r3, r0
 8004c92:	84bb      	strh	r3, [r7, #36]	@ 0x24

          if (count != 0U)
 8004c94:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d067      	beq.n	8004d6a <PCD_EP_ISR_Handler+0x3c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6818      	ldr	r0, [r3, #0]
 8004c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ca0:	6959      	ldr	r1, [r3, #20]
 8004ca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ca4:	88da      	ldrh	r2, [r3, #6]
 8004ca6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004ca8:	f00a fec0 	bl	800fa2c <USB_ReadPMA>
 8004cac:	e05d      	b.n	8004d6a <PCD_EP_ISR_Handler+0x3c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004cae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cb0:	78db      	ldrb	r3, [r3, #3]
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d108      	bne.n	8004cc8 <PCD_EP_ISR_Handler+0x320>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004cb6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004cb8:	461a      	mov	r2, r3
 8004cba:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 f9ad 	bl	800501c <HAL_PCD_EP_DB_Receive>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004cc6:	e050      	b.n	8004d6a <PCD_EP_ISR_Handler+0x3c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	461a      	mov	r2, r3
 8004cce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4413      	add	r3, r2
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	4b7a      	ldr	r3, [pc, #488]	@ (8004ec4 <PCD_EP_ISR_Handler+0x51c>)
 8004cda:	4013      	ands	r3, r2
 8004cdc:	61bb      	str	r3, [r7, #24]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	441a      	add	r2, r3
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cf2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004cf6:	6013      	str	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d016      	beq.n	8004d3e <PCD_EP_ISR_Handler+0x396>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	4619      	mov	r1, r3
 8004d1a:	4610      	mov	r0, r2
 8004d1c:	f7ff f9db 	bl	80040d6 <PCD_GET_EP_DBUF0_CNT>
 8004d20:	4603      	mov	r3, r0
 8004d22:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8004d24:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d01f      	beq.n	8004d6a <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6818      	ldr	r0, [r3, #0]
 8004d2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d30:	6959      	ldr	r1, [r3, #20]
 8004d32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d34:	891a      	ldrh	r2, [r3, #8]
 8004d36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004d38:	f00a fe78 	bl	800fa2c <USB_ReadPMA>
 8004d3c:	e015      	b.n	8004d6a <PCD_EP_ISR_Handler+0x3c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	4619      	mov	r1, r3
 8004d48:	4610      	mov	r0, r2
 8004d4a:	f7ff f9e5 	bl	8004118 <PCD_GET_EP_DBUF1_CNT>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8004d52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d008      	beq.n	8004d6a <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6818      	ldr	r0, [r3, #0]
 8004d5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d5e:	6959      	ldr	r1, [r3, #20]
 8004d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d62:	895a      	ldrh	r2, [r3, #10]
 8004d64:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004d66:	f00a fe61 	bl	800fa2c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004d6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d6c:	69da      	ldr	r2, [r3, #28]
 8004d6e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004d70:	441a      	add	r2, r3
 8004d72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d74:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d78:	695a      	ldr	r2, [r3, #20]
 8004d7a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004d7c:	441a      	add	r2, r3
 8004d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d80:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004d82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d004      	beq.n	8004d94 <PCD_EP_ISR_Handler+0x3ec>
 8004d8a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004d8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d206      	bcs.n	8004da2 <PCD_EP_ISR_Handler+0x3fa>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004d94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	4619      	mov	r1, r3
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f00b fcf4 	bl	8010788 <HAL_PCD_DataOutStageCallback>
 8004da0:	e005      	b.n	8004dae <PCD_EP_ISR_Handler+0x406>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004da8:	4618      	mov	r0, r3
 8004daa:	f009 fc57 	bl	800e65c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 8004dae:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004db0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f000 8123 	beq.w	8005000 <PCD_EP_ISR_Handler+0x658>
      {
        ep = &hpcd->IN_ep[epindex];
 8004dba:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	4413      	add	r3, r2
 8004dc4:	00db      	lsls	r3, r3, #3
 8004dc6:	3310      	adds	r3, #16
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	4413      	add	r3, r2
 8004dcc:	3304      	adds	r3, #4
 8004dce:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	4413      	add	r3, r2
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	4b39      	ldr	r3, [pc, #228]	@ (8004ec8 <PCD_EP_ISR_Handler+0x520>)
 8004de2:	4013      	ands	r3, r2
 8004de4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	461a      	mov	r2, r3
 8004dec:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4413      	add	r3, r2
 8004df4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004df6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004dfa:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dfe:	78db      	ldrb	r3, [r3, #3]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	f040 80b8 	bne.w	8004f76 <PCD_EP_ISR_Handler+0x5ce>
        {
          ep->xfer_len = 0U;
 8004e06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e08:	2200      	movs	r2, #0
 8004e0a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e0e:	7b1b      	ldrb	r3, [r3, #12]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	f000 80a9 	beq.w	8004f68 <PCD_EP_ISR_Handler+0x5c0>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004e16:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004e18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d055      	beq.n	8004ecc <PCD_EP_ISR_Handler+0x524>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e22:	785b      	ldrb	r3, [r3, #1]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d124      	bne.n	8004e72 <PCD_EP_ISR_Handler+0x4ca>
 8004e28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	00db      	lsls	r3, r3, #3
 8004e2e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004e32:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	00db      	lsls	r3, r3, #3
 8004e3e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004e42:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004e46:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8004e4a:	601a      	str	r2, [r3, #0]
 8004e4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	00db      	lsls	r3, r3, #3
 8004e52:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004e56:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	00db      	lsls	r3, r3, #3
 8004e62:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004e66:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004e6a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004e6e:	601a      	str	r2, [r3, #0]
 8004e70:	e07a      	b.n	8004f68 <PCD_EP_ISR_Handler+0x5c0>
 8004e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e74:	785b      	ldrb	r3, [r3, #1]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d176      	bne.n	8004f68 <PCD_EP_ISR_Handler+0x5c0>
 8004e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	00db      	lsls	r3, r3, #3
 8004e80:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004e84:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	00db      	lsls	r3, r3, #3
 8004e90:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004e94:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004e98:	b292      	uxth	r2, r2
 8004e9a:	601a      	str	r2, [r3, #0]
 8004e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	00db      	lsls	r3, r3, #3
 8004ea2:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8004ea6:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8004eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	00db      	lsls	r3, r3, #3
 8004eb0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004eb4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004eb8:	6812      	ldr	r2, [r2, #0]
 8004eba:	601a      	str	r2, [r3, #0]
 8004ebc:	e054      	b.n	8004f68 <PCD_EP_ISR_Handler+0x5c0>
 8004ebe:	bf00      	nop
 8004ec0:	07ff0f8f 	.word	0x07ff0f8f
 8004ec4:	07ff8f8f 	.word	0x07ff8f8f
 8004ec8:	07ff8f0f 	.word	0x07ff8f0f
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004ecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ece:	785b      	ldrb	r3, [r3, #1]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d124      	bne.n	8004f1e <PCD_EP_ISR_Handler+0x576>
 8004ed4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	00db      	lsls	r3, r3, #3
 8004eda:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004ede:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004ee2:	685a      	ldr	r2, [r3, #4]
 8004ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	00db      	lsls	r3, r3, #3
 8004eea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004eee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004ef2:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8004ef6:	605a      	str	r2, [r3, #4]
 8004ef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	00db      	lsls	r3, r3, #3
 8004efe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004f02:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	00db      	lsls	r3, r3, #3
 8004f0e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004f12:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004f16:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004f1a:	605a      	str	r2, [r3, #4]
 8004f1c:	e024      	b.n	8004f68 <PCD_EP_ISR_Handler+0x5c0>
 8004f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f20:	785b      	ldrb	r3, [r3, #1]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d120      	bne.n	8004f68 <PCD_EP_ISR_Handler+0x5c0>
 8004f26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	00db      	lsls	r3, r3, #3
 8004f2c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004f30:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004f40:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004f44:	b292      	uxth	r2, r2
 8004f46:	605a      	str	r2, [r3, #4]
 8004f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	00db      	lsls	r3, r3, #3
 8004f4e:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8004f52:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8004f56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	00db      	lsls	r3, r3, #3
 8004f5c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004f60:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004f64:	6852      	ldr	r2, [r2, #4]
 8004f66:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f00b fc25 	bl	80107be <HAL_PCD_DataInStageCallback>
 8004f74:	e044      	b.n	8005000 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004f76:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004f78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d139      	bne.n	8004ff4 <PCD_EP_ISR_Handler+0x64c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	00db      	lsls	r3, r3, #3
 8004f86:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004f8a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	0c1b      	lsrs	r3, r3, #16
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f98:	84fb      	strh	r3, [r7, #38]	@ 0x26

            if (ep->xfer_len > TxPctSize)
 8004f9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f9c:	699a      	ldr	r2, [r3, #24]
 8004f9e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d906      	bls.n	8004fb2 <PCD_EP_ISR_Handler+0x60a>
            {
              ep->xfer_len -= TxPctSize;
 8004fa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fa6:	699a      	ldr	r2, [r3, #24]
 8004fa8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004faa:	1ad2      	subs	r2, r2, r3
 8004fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fae:	619a      	str	r2, [r3, #24]
 8004fb0:	e002      	b.n	8004fb8 <PCD_EP_ISR_Handler+0x610>
            }
            else
            {
              ep->xfer_len = 0U;
 8004fb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004fb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d106      	bne.n	8004fce <PCD_EP_ISR_Handler+0x626>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f00b fbf9 	bl	80107be <HAL_PCD_DataInStageCallback>
 8004fcc:	e018      	b.n	8005000 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fd0:	695a      	ldr	r2, [r3, #20]
 8004fd2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004fd4:	441a      	add	r2, r3
 8004fd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fd8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004fda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fdc:	69da      	ldr	r2, [r3, #28]
 8004fde:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004fe0:	441a      	add	r2, r3
 8004fe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fe4:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004fec:	4618      	mov	r0, r3
 8004fee:	f009 fb35 	bl	800e65c <USB_EPStartXfer>
 8004ff2:	e005      	b.n	8005000 <PCD_EP_ISR_Handler+0x658>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004ff4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f8e8 	bl	80051d0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005006:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800500a:	2b00      	cmp	r3, #0
 800500c:	f47f acd1 	bne.w	80049b2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3738      	adds	r7, #56	@ 0x38
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop

0800501c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b08a      	sub	sp, #40	@ 0x28
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	4613      	mov	r3, r2
 8005028:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800502a:	88fb      	ldrh	r3, [r7, #6]
 800502c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d062      	beq.n	80050fa <HAL_PCD_EP_DB_Receive+0xde>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	4619      	mov	r1, r3
 800503e:	4610      	mov	r0, r2
 8005040:	f7ff f849 	bl	80040d6 <PCD_GET_EP_DBUF0_CNT>
 8005044:	4603      	mov	r3, r0
 8005046:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	699a      	ldr	r2, [r3, #24]
 800504c:	8bfb      	ldrh	r3, [r7, #30]
 800504e:	429a      	cmp	r2, r3
 8005050:	d306      	bcc.n	8005060 <HAL_PCD_EP_DB_Receive+0x44>
    {
      ep->xfer_len -= count;
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	699a      	ldr	r2, [r3, #24]
 8005056:	8bfb      	ldrh	r3, [r7, #30]
 8005058:	1ad2      	subs	r2, r2, r3
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	619a      	str	r2, [r3, #24]
 800505e:	e002      	b.n	8005066 <HAL_PCD_EP_DB_Receive+0x4a>
    }
    else
    {
      ep->xfer_len = 0U;
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	2200      	movs	r2, #0
 8005064:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d11b      	bne.n	80050a6 <HAL_PCD_EP_DB_Receive+0x8a>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	461a      	mov	r2, r3
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	4413      	add	r3, r2
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	4b52      	ldr	r3, [pc, #328]	@ (80051c8 <HAL_PCD_EP_DB_Receive+0x1ac>)
 8005080:	4013      	ands	r3, r2
 8005082:	61bb      	str	r3, [r7, #24]
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800508a:	61bb      	str	r3, [r7, #24]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	461a      	mov	r2, r3
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	441a      	add	r2, r3
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050a4:	6013      	str	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80050a6:	88fb      	ldrh	r3, [r7, #6]
 80050a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d017      	beq.n	80050e0 <HAL_PCD_EP_DB_Receive+0xc4>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	461a      	mov	r2, r3
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4413      	add	r3, r2
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	4b42      	ldr	r3, [pc, #264]	@ (80051cc <HAL_PCD_EP_DB_Receive+0x1b0>)
 80050c2:	4013      	ands	r3, r2
 80050c4:	617b      	str	r3, [r7, #20]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	461a      	mov	r2, r3
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	441a      	add	r2, r3
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050da:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80050de:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 80050e0:	8bfb      	ldrh	r3, [r7, #30]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d06b      	beq.n	80051be <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6818      	ldr	r0, [r3, #0]
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	6959      	ldr	r1, [r3, #20]
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	891a      	ldrh	r2, [r3, #8]
 80050f2:	8bfb      	ldrh	r3, [r7, #30]
 80050f4:	f00a fc9a 	bl	800fa2c <USB_ReadPMA>
 80050f8:	e061      	b.n	80051be <HAL_PCD_EP_DB_Receive+0x1a2>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	4619      	mov	r1, r3
 8005104:	4610      	mov	r0, r2
 8005106:	f7ff f807 	bl	8004118 <PCD_GET_EP_DBUF1_CNT>
 800510a:	4603      	mov	r3, r0
 800510c:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	699a      	ldr	r2, [r3, #24]
 8005112:	8bfb      	ldrh	r3, [r7, #30]
 8005114:	429a      	cmp	r2, r3
 8005116:	d306      	bcc.n	8005126 <HAL_PCD_EP_DB_Receive+0x10a>
    {
      ep->xfer_len -= count;
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	699a      	ldr	r2, [r3, #24]
 800511c:	8bfb      	ldrh	r3, [r7, #30]
 800511e:	1ad2      	subs	r2, r2, r3
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	619a      	str	r2, [r3, #24]
 8005124:	e002      	b.n	800512c <HAL_PCD_EP_DB_Receive+0x110>
    }
    else
    {
      ep->xfer_len = 0U;
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	2200      	movs	r2, #0
 800512a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d11b      	bne.n	800516c <HAL_PCD_EP_DB_Receive+0x150>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	461a      	mov	r2, r3
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4413      	add	r3, r2
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	4b20      	ldr	r3, [pc, #128]	@ (80051c8 <HAL_PCD_EP_DB_Receive+0x1ac>)
 8005146:	4013      	ands	r3, r2
 8005148:	627b      	str	r3, [r7, #36]	@ 0x24
 800514a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005150:	627b      	str	r3, [r7, #36]	@ 0x24
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	461a      	mov	r2, r3
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	441a      	add	r2, r3
 8005160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005162:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005166:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800516a:	6013      	str	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800516c:	88fb      	ldrh	r3, [r7, #6]
 800516e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005172:	2b00      	cmp	r3, #0
 8005174:	d117      	bne.n	80051a6 <HAL_PCD_EP_DB_Receive+0x18a>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	461a      	mov	r2, r3
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	4413      	add	r3, r2
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	4b11      	ldr	r3, [pc, #68]	@ (80051cc <HAL_PCD_EP_DB_Receive+0x1b0>)
 8005188:	4013      	ands	r3, r2
 800518a:	623b      	str	r3, [r7, #32]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	461a      	mov	r2, r3
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	441a      	add	r2, r3
 800519a:	6a3b      	ldr	r3, [r7, #32]
 800519c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051a0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80051a4:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 80051a6:	8bfb      	ldrh	r3, [r7, #30]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d008      	beq.n	80051be <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6818      	ldr	r0, [r3, #0]
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	6959      	ldr	r1, [r3, #20]
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	895a      	ldrh	r2, [r3, #10]
 80051b8:	8bfb      	ldrh	r3, [r7, #30]
 80051ba:	f00a fc37 	bl	800fa2c <USB_ReadPMA>
    }
  }

  return count;
 80051be:	8bfb      	ldrh	r3, [r7, #30]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3728      	adds	r7, #40	@ 0x28
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	07ffbf8f 	.word	0x07ffbf8f
 80051cc:	07ff8f8f 	.word	0x07ff8f8f

080051d0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b08e      	sub	sp, #56	@ 0x38
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	4613      	mov	r3, r2
 80051dc:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80051de:	88fb      	ldrh	r3, [r7, #6]
 80051e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 81d5 	beq.w	8005594 <HAL_PCD_EP_DB_Transmit+0x3c4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	4619      	mov	r1, r3
 80051f4:	4610      	mov	r0, r2
 80051f6:	f7fe ff6e 	bl	80040d6 <PCD_GET_EP_DBUF0_CNT>
 80051fa:	4603      	mov	r3, r0
 80051fc:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len > TxPctSize)
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	699a      	ldr	r2, [r3, #24]
 8005202:	8bfb      	ldrh	r3, [r7, #30]
 8005204:	429a      	cmp	r2, r3
 8005206:	d906      	bls.n	8005216 <HAL_PCD_EP_DB_Transmit+0x46>
    {
      ep->xfer_len -= TxPctSize;
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	699a      	ldr	r2, [r3, #24]
 800520c:	8bfb      	ldrh	r3, [r7, #30]
 800520e:	1ad2      	subs	r2, r2, r3
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	619a      	str	r2, [r3, #24]
 8005214:	e002      	b.n	800521c <HAL_PCD_EP_DB_Transmit+0x4c>
    }
    else
    {
      ep->xfer_len = 0U;
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	2200      	movs	r2, #0
 800521a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	2b00      	cmp	r3, #0
 8005222:	f040 80c1 	bne.w	80053a8 <HAL_PCD_EP_DB_Transmit+0x1d8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	785b      	ldrb	r3, [r3, #1]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d124      	bne.n	8005278 <HAL_PCD_EP_DB_Transmit+0xa8>
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	00db      	lsls	r3, r3, #3
 8005234:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005238:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	00db      	lsls	r3, r3, #3
 8005244:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005248:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800524c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8005250:	601a      	str	r2, [r3, #0]
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	00db      	lsls	r3, r3, #3
 8005258:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800525c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	00db      	lsls	r3, r3, #3
 8005268:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800526c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005270:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005274:	601a      	str	r2, [r3, #0]
 8005276:	e024      	b.n	80052c2 <HAL_PCD_EP_DB_Transmit+0xf2>
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	785b      	ldrb	r3, [r3, #1]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d120      	bne.n	80052c2 <HAL_PCD_EP_DB_Transmit+0xf2>
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	00db      	lsls	r3, r3, #3
 8005286:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800528a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	00db      	lsls	r3, r3, #3
 8005296:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800529a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800529e:	b292      	uxth	r2, r2
 80052a0:	601a      	str	r2, [r3, #0]
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	00db      	lsls	r3, r3, #3
 80052a8:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80052ac:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	00db      	lsls	r3, r3, #3
 80052b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80052ba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80052be:	6812      	ldr	r2, [r2, #0]
 80052c0:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	785b      	ldrb	r3, [r3, #1]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d124      	bne.n	8005314 <HAL_PCD_EP_DB_Transmit+0x144>
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80052d4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80052d8:	685a      	ldr	r2, [r3, #4]
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	00db      	lsls	r3, r3, #3
 80052e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80052e4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80052e8:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80052ec:	605a      	str	r2, [r3, #4]
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	00db      	lsls	r3, r3, #3
 80052f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80052f8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	00db      	lsls	r3, r3, #3
 8005304:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005308:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800530c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005310:	605a      	str	r2, [r3, #4]
 8005312:	e024      	b.n	800535e <HAL_PCD_EP_DB_Transmit+0x18e>
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	785b      	ldrb	r3, [r3, #1]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d120      	bne.n	800535e <HAL_PCD_EP_DB_Transmit+0x18e>
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	00db      	lsls	r3, r3, #3
 8005322:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005326:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	00db      	lsls	r3, r3, #3
 8005332:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005336:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800533a:	b292      	uxth	r2, r2
 800533c:	605a      	str	r2, [r3, #4]
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	00db      	lsls	r3, r3, #3
 8005344:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8005348:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	00db      	lsls	r3, r3, #3
 8005352:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005356:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800535a:	6852      	ldr	r2, [r2, #4]
 800535c:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	4619      	mov	r1, r3
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f00b fa2a 	bl	80107be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800536a:	88fb      	ldrh	r3, [r7, #6]
 800536c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005370:	2b00      	cmp	r3, #0
 8005372:	f000 82e5 	beq.w	8005940 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	461a      	mov	r2, r3
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	4413      	add	r3, r2
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	4b8e      	ldr	r3, [pc, #568]	@ (80055c0 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8005388:	4013      	ands	r3, r2
 800538a:	637b      	str	r3, [r7, #52]	@ 0x34
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	461a      	mov	r2, r3
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	441a      	add	r2, r3
 800539a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800539c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80053a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053a4:	6013      	str	r3, [r2, #0]
 80053a6:	e2cb      	b.n	8005940 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80053a8:	88fb      	ldrh	r3, [r7, #6]
 80053aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d017      	beq.n	80053e2 <HAL_PCD_EP_DB_Transmit+0x212>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	461a      	mov	r2, r3
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	4413      	add	r3, r2
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	4b7f      	ldr	r3, [pc, #508]	@ (80055c0 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 80053c4:	4013      	ands	r3, r2
 80053c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	461a      	mov	r2, r3
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	441a      	add	r2, r3
 80053d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80053dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053e0:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	f040 82a9 	bne.w	8005940 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	695a      	ldr	r2, [r3, #20]
 80053f2:	8bfb      	ldrh	r3, [r7, #30]
 80053f4:	441a      	add	r2, r3
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	69da      	ldr	r2, [r3, #28]
 80053fe:	8bfb      	ldrh	r3, [r7, #30]
 8005400:	441a      	add	r2, r3
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	6a1a      	ldr	r2, [r3, #32]
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	429a      	cmp	r2, r3
 8005410:	d309      	bcc.n	8005426 <HAL_PCD_EP_DB_Transmit+0x256>
        {
          len = ep->maxpacket;
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	6a1a      	ldr	r2, [r3, #32]
 800541c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541e:	1ad2      	subs	r2, r2, r3
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	621a      	str	r2, [r3, #32]
 8005424:	e014      	b.n	8005450 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else if (ep->xfer_len_db == 0U)
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d106      	bne.n	800543c <HAL_PCD_EP_DB_Transmit+0x26c>
        {
          len = TxPctSize;
 800542e:	8bfb      	ldrh	r3, [r7, #30]
 8005430:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800543a:	e009      	b.n	8005450 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	6a1b      	ldr	r3, [r3, #32]
 8005448:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	2200      	movs	r2, #0
 800544e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	785b      	ldrb	r3, [r3, #1]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d16a      	bne.n	800552e <HAL_PCD_EP_DB_Transmit+0x35e>
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	00db      	lsls	r3, r3, #3
 800545e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005462:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	00db      	lsls	r3, r3, #3
 800546e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005472:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005476:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800547a:	601a      	str	r2, [r3, #0]
 800547c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547e:	2b00      	cmp	r3, #0
 8005480:	d112      	bne.n	80054a8 <HAL_PCD_EP_DB_Transmit+0x2d8>
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	00db      	lsls	r3, r3, #3
 8005488:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800548c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	00db      	lsls	r3, r3, #3
 8005498:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800549c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80054a0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80054a4:	601a      	str	r2, [r3, #0]
 80054a6:	e06a      	b.n	800557e <HAL_PCD_EP_DB_Transmit+0x3ae>
 80054a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054aa:	2b3e      	cmp	r3, #62	@ 0x3e
 80054ac:	d81e      	bhi.n	80054ec <HAL_PCD_EP_DB_Transmit+0x31c>
 80054ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b0:	085b      	lsrs	r3, r3, #1
 80054b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d002      	beq.n	80054c4 <HAL_PCD_EP_DB_Transmit+0x2f4>
 80054be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054c0:	3301      	adds	r3, #1
 80054c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	00db      	lsls	r3, r3, #3
 80054ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80054ce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80054d2:	6819      	ldr	r1, [r3, #0]
 80054d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054d6:	069a      	lsls	r2, r3, #26
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	00db      	lsls	r3, r3, #3
 80054de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80054e2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80054e6:	430a      	orrs	r2, r1
 80054e8:	601a      	str	r2, [r3, #0]
 80054ea:	e048      	b.n	800557e <HAL_PCD_EP_DB_Transmit+0x3ae>
 80054ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ee:	095b      	lsrs	r3, r3, #5
 80054f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f4:	f003 031f 	and.w	r3, r3, #31
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d102      	bne.n	8005502 <HAL_PCD_EP_DB_Transmit+0x332>
 80054fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054fe:	3b01      	subs	r3, #1
 8005500:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800550c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005514:	069b      	lsls	r3, r3, #26
 8005516:	431a      	orrs	r2, r3
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	00db      	lsls	r3, r3, #3
 800551e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005522:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005526:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800552a:	601a      	str	r2, [r3, #0]
 800552c:	e027      	b.n	800557e <HAL_PCD_EP_DB_Transmit+0x3ae>
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	785b      	ldrb	r3, [r3, #1]
 8005532:	2b01      	cmp	r3, #1
 8005534:	d123      	bne.n	800557e <HAL_PCD_EP_DB_Transmit+0x3ae>
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	00db      	lsls	r3, r3, #3
 800553c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005540:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	00db      	lsls	r3, r3, #3
 800554c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005550:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005554:	b292      	uxth	r2, r2
 8005556:	601a      	str	r2, [r3, #0]
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	00db      	lsls	r3, r3, #3
 800555e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005562:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005566:	6819      	ldr	r1, [r3, #0]
 8005568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800556a:	041a      	lsls	r2, r3, #16
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	00db      	lsls	r3, r3, #3
 8005572:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005576:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800557a:	430a      	orrs	r2, r1
 800557c:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6818      	ldr	r0, [r3, #0]
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	6959      	ldr	r1, [r3, #20]
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	891a      	ldrh	r2, [r3, #8]
 800558a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558c:	b29b      	uxth	r3, r3
 800558e:	f00a f9ec 	bl	800f96a <USB_WritePMA>
 8005592:	e1d5      	b.n	8005940 <HAL_PCD_EP_DB_Transmit+0x770>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	4619      	mov	r1, r3
 800559e:	4610      	mov	r0, r2
 80055a0:	f7fe fdba 	bl	8004118 <PCD_GET_EP_DBUF1_CNT>
 80055a4:	4603      	mov	r3, r0
 80055a6:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= TxPctSize)
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	699a      	ldr	r2, [r3, #24]
 80055ac:	8bfb      	ldrh	r3, [r7, #30]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d308      	bcc.n	80055c4 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxPctSize;
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	699a      	ldr	r2, [r3, #24]
 80055b6:	8bfb      	ldrh	r3, [r7, #30]
 80055b8:	1ad2      	subs	r2, r2, r3
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	619a      	str	r2, [r3, #24]
 80055be:	e004      	b.n	80055ca <HAL_PCD_EP_DB_Transmit+0x3fa>
 80055c0:	07ff8f8f 	.word	0x07ff8f8f
    }
    else
    {
      ep->xfer_len = 0U;
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	2200      	movs	r2, #0
 80055c8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f040 80c1 	bne.w	8005756 <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	785b      	ldrb	r3, [r3, #1]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d124      	bne.n	8005626 <HAL_PCD_EP_DB_Transmit+0x456>
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	00db      	lsls	r3, r3, #3
 80055e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80055e6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	00db      	lsls	r3, r3, #3
 80055f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80055f6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80055fa:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80055fe:	601a      	str	r2, [r3, #0]
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	00db      	lsls	r3, r3, #3
 8005606:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800560a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	00db      	lsls	r3, r3, #3
 8005616:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800561a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800561e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005622:	601a      	str	r2, [r3, #0]
 8005624:	e024      	b.n	8005670 <HAL_PCD_EP_DB_Transmit+0x4a0>
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	785b      	ldrb	r3, [r3, #1]
 800562a:	2b01      	cmp	r3, #1
 800562c:	d120      	bne.n	8005670 <HAL_PCD_EP_DB_Transmit+0x4a0>
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	00db      	lsls	r3, r3, #3
 8005634:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005638:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	00db      	lsls	r3, r3, #3
 8005644:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005648:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800564c:	b292      	uxth	r2, r2
 800564e:	601a      	str	r2, [r3, #0]
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	00db      	lsls	r3, r3, #3
 8005656:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 800565a:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	00db      	lsls	r3, r3, #3
 8005664:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005668:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800566c:	6812      	ldr	r2, [r2, #0]
 800566e:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	785b      	ldrb	r3, [r3, #1]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d124      	bne.n	80056c2 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	00db      	lsls	r3, r3, #3
 800567e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005682:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005686:	685a      	ldr	r2, [r3, #4]
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	00db      	lsls	r3, r3, #3
 800568e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005692:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005696:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800569a:	605a      	str	r2, [r3, #4]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	00db      	lsls	r3, r3, #3
 80056a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80056a6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80056aa:	685a      	ldr	r2, [r3, #4]
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	00db      	lsls	r3, r3, #3
 80056b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80056b6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80056ba:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80056be:	605a      	str	r2, [r3, #4]
 80056c0:	e024      	b.n	800570c <HAL_PCD_EP_DB_Transmit+0x53c>
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	785b      	ldrb	r3, [r3, #1]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d120      	bne.n	800570c <HAL_PCD_EP_DB_Transmit+0x53c>
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	00db      	lsls	r3, r3, #3
 80056d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80056d4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80056d8:	685a      	ldr	r2, [r3, #4]
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	00db      	lsls	r3, r3, #3
 80056e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80056e4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80056e8:	b292      	uxth	r2, r2
 80056ea:	605a      	str	r2, [r3, #4]
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	00db      	lsls	r3, r3, #3
 80056f2:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80056f6:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	00db      	lsls	r3, r3, #3
 8005700:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005704:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005708:	6852      	ldr	r2, [r2, #4]
 800570a:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	4619      	mov	r1, r3
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f00b f853 	bl	80107be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005718:	88fb      	ldrh	r3, [r7, #6]
 800571a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800571e:	2b00      	cmp	r3, #0
 8005720:	f040 810e 	bne.w	8005940 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	461a      	mov	r2, r3
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	4413      	add	r3, r2
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	4b95      	ldr	r3, [pc, #596]	@ (800598c <HAL_PCD_EP_DB_Transmit+0x7bc>)
 8005736:	4013      	ands	r3, r2
 8005738:	623b      	str	r3, [r7, #32]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	461a      	mov	r2, r3
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	441a      	add	r2, r3
 8005748:	6a3b      	ldr	r3, [r7, #32]
 800574a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800574e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005752:	6013      	str	r3, [r2, #0]
 8005754:	e0f4      	b.n	8005940 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005756:	88fb      	ldrh	r3, [r7, #6]
 8005758:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d117      	bne.n	8005790 <HAL_PCD_EP_DB_Transmit+0x5c0>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	461a      	mov	r2, r3
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	4413      	add	r3, r2
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	4b86      	ldr	r3, [pc, #536]	@ (800598c <HAL_PCD_EP_DB_Transmit+0x7bc>)
 8005772:	4013      	ands	r3, r2
 8005774:	617b      	str	r3, [r7, #20]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	461a      	mov	r2, r3
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	441a      	add	r2, r3
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800578a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800578e:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005796:	2b01      	cmp	r3, #1
 8005798:	f040 80d2 	bne.w	8005940 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	695a      	ldr	r2, [r3, #20]
 80057a0:	8bfb      	ldrh	r3, [r7, #30]
 80057a2:	441a      	add	r2, r3
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	69da      	ldr	r2, [r3, #28]
 80057ac:	8bfb      	ldrh	r3, [r7, #30]
 80057ae:	441a      	add	r2, r3
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	6a1a      	ldr	r2, [r3, #32]
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d309      	bcc.n	80057d4 <HAL_PCD_EP_DB_Transmit+0x604>
        {
          len = ep->maxpacket;
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	6a1a      	ldr	r2, [r3, #32]
 80057ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057cc:	1ad2      	subs	r2, r2, r3
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	621a      	str	r2, [r3, #32]
 80057d2:	e014      	b.n	80057fe <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else if (ep->xfer_len_db == 0U)
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	6a1b      	ldr	r3, [r3, #32]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d106      	bne.n	80057ea <HAL_PCD_EP_DB_Transmit+0x61a>
        {
          len = TxPctSize;
 80057dc:	8bfb      	ldrh	r3, [r7, #30]
 80057de:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80057e8:	e009      	b.n	80057fe <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else
        {
          len = ep->xfer_len_db;
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	2200      	movs	r2, #0
 80057f4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	785b      	ldrb	r3, [r3, #1]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d16a      	bne.n	80058dc <HAL_PCD_EP_DB_Transmit+0x70c>
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	00db      	lsls	r3, r3, #3
 800580c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005810:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005814:	685a      	ldr	r2, [r3, #4]
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	00db      	lsls	r3, r3, #3
 800581c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005820:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005824:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8005828:	605a      	str	r2, [r3, #4]
 800582a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582c:	2b00      	cmp	r3, #0
 800582e:	d112      	bne.n	8005856 <HAL_PCD_EP_DB_Transmit+0x686>
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	00db      	lsls	r3, r3, #3
 8005836:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800583a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800583e:	685a      	ldr	r2, [r3, #4]
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	00db      	lsls	r3, r3, #3
 8005846:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800584a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800584e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005852:	605a      	str	r2, [r3, #4]
 8005854:	e06a      	b.n	800592c <HAL_PCD_EP_DB_Transmit+0x75c>
 8005856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005858:	2b3e      	cmp	r3, #62	@ 0x3e
 800585a:	d81e      	bhi.n	800589a <HAL_PCD_EP_DB_Transmit+0x6ca>
 800585c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800585e:	085b      	lsrs	r3, r3, #1
 8005860:	61bb      	str	r3, [r7, #24]
 8005862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005864:	f003 0301 	and.w	r3, r3, #1
 8005868:	2b00      	cmp	r3, #0
 800586a:	d002      	beq.n	8005872 <HAL_PCD_EP_DB_Transmit+0x6a2>
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	3301      	adds	r3, #1
 8005870:	61bb      	str	r3, [r7, #24]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	00db      	lsls	r3, r3, #3
 8005878:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800587c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005880:	6859      	ldr	r1, [r3, #4]
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	069a      	lsls	r2, r3, #26
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	00db      	lsls	r3, r3, #3
 800588c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005890:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005894:	430a      	orrs	r2, r1
 8005896:	605a      	str	r2, [r3, #4]
 8005898:	e048      	b.n	800592c <HAL_PCD_EP_DB_Transmit+0x75c>
 800589a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800589c:	095b      	lsrs	r3, r3, #5
 800589e:	61bb      	str	r3, [r7, #24]
 80058a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a2:	f003 031f 	and.w	r3, r3, #31
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d102      	bne.n	80058b0 <HAL_PCD_EP_DB_Transmit+0x6e0>
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	3b01      	subs	r3, #1
 80058ae:	61bb      	str	r3, [r7, #24]
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	00db      	lsls	r3, r3, #3
 80058b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80058ba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	069b      	lsls	r3, r3, #26
 80058c4:	431a      	orrs	r2, r3
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	00db      	lsls	r3, r3, #3
 80058cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80058d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80058d4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80058d8:	605a      	str	r2, [r3, #4]
 80058da:	e027      	b.n	800592c <HAL_PCD_EP_DB_Transmit+0x75c>
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	785b      	ldrb	r3, [r3, #1]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d123      	bne.n	800592c <HAL_PCD_EP_DB_Transmit+0x75c>
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	00db      	lsls	r3, r3, #3
 80058ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80058ee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80058f2:	685a      	ldr	r2, [r3, #4]
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	00db      	lsls	r3, r3, #3
 80058fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80058fe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005902:	b292      	uxth	r2, r2
 8005904:	605a      	str	r2, [r3, #4]
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	00db      	lsls	r3, r3, #3
 800590c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005910:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005914:	6859      	ldr	r1, [r3, #4]
 8005916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005918:	041a      	lsls	r2, r3, #16
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	00db      	lsls	r3, r3, #3
 8005920:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005924:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005928:	430a      	orrs	r2, r1
 800592a:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6818      	ldr	r0, [r3, #0]
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	6959      	ldr	r1, [r3, #20]
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	895a      	ldrh	r2, [r3, #10]
 8005938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593a:	b29b      	uxth	r3, r3
 800593c:	f00a f815 	bl	800f96a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	461a      	mov	r2, r3
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	4413      	add	r3, r2
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	4b0f      	ldr	r3, [pc, #60]	@ (8005990 <HAL_PCD_EP_DB_Transmit+0x7c0>)
 8005952:	4013      	ands	r3, r2
 8005954:	633b      	str	r3, [r7, #48]	@ 0x30
 8005956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005958:	f083 0310 	eor.w	r3, r3, #16
 800595c:	633b      	str	r3, [r7, #48]	@ 0x30
 800595e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005960:	f083 0320 	eor.w	r3, r3, #32
 8005964:	633b      	str	r3, [r7, #48]	@ 0x30
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	461a      	mov	r2, r3
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	441a      	add	r2, r3
 8005974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005976:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800597a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800597e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3738      	adds	r7, #56	@ 0x38
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	07ff8f8f 	.word	0x07ff8f8f
 8005990:	07ff8fbf 	.word	0x07ff8fbf

08005994 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005994:	b480      	push	{r7}
 8005996:	b087      	sub	sp, #28
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	607b      	str	r3, [r7, #4]
 800599e:	460b      	mov	r3, r1
 80059a0:	817b      	strh	r3, [r7, #10]
 80059a2:	4613      	mov	r3, r2
 80059a4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80059a6:	897b      	ldrh	r3, [r7, #10]
 80059a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00c      	beq.n	80059cc <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059b2:	897b      	ldrh	r3, [r7, #10]
 80059b4:	f003 0207 	and.w	r2, r3, #7
 80059b8:	4613      	mov	r3, r2
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	4413      	add	r3, r2
 80059be:	00db      	lsls	r3, r3, #3
 80059c0:	3310      	adds	r3, #16
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	4413      	add	r3, r2
 80059c6:	3304      	adds	r3, #4
 80059c8:	617b      	str	r3, [r7, #20]
 80059ca:	e00a      	b.n	80059e2 <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80059cc:	897a      	ldrh	r2, [r7, #10]
 80059ce:	4613      	mov	r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	4413      	add	r3, r2
 80059d4:	00db      	lsls	r3, r3, #3
 80059d6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	4413      	add	r3, r2
 80059de:	3304      	adds	r3, #4
 80059e0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80059e2:	893b      	ldrh	r3, [r7, #8]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d107      	bne.n	80059f8 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	2200      	movs	r2, #0
 80059ec:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	80da      	strh	r2, [r3, #6]
 80059f6:	e00b      	b.n	8005a10 <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	2201      	movs	r2, #1
 80059fc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	b29a      	uxth	r2, r3
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	0c1b      	lsrs	r3, r3, #16
 8005a0a:	b29a      	uxth	r2, r3
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	371c      	adds	r7, #28
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr

08005a1e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005a1e:	b480      	push	{r7}
 8005a20:	b085      	sub	sp, #20
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  hpcd->LPM_State = LPM_L0;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a40:	f043 0201 	orr.w	r2, r3, #1
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a4c:	f043 0202 	orr.w	r2, r3, #2
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3714      	adds	r7, #20
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr

08005a62 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005a62:	b480      	push	{r7}
 8005a64:	b083      	sub	sp, #12
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005a6e:	bf00      	nop
 8005a70:	370c      	adds	r7, #12
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
	...

08005a7c <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33SV);
 8005a80:	4b05      	ldr	r3, [pc, #20]	@ (8005a98 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a84:	4a04      	ldr	r2, [pc, #16]	@ (8005a98 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005a86:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005a8a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8005a8c:	bf00      	nop
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	44020800 	.word	0x44020800

08005a9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b088      	sub	sp, #32
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d102      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	f000 bc28 	b.w	8006300 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ab0:	4b94      	ldr	r3, [pc, #592]	@ (8005d04 <HAL_RCC_OscConfig+0x268>)
 8005ab2:	69db      	ldr	r3, [r3, #28]
 8005ab4:	f003 0318 	and.w	r3, r3, #24
 8005ab8:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8005aba:	4b92      	ldr	r3, [pc, #584]	@ (8005d04 <HAL_RCC_OscConfig+0x268>)
 8005abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005abe:	f003 0303 	and.w	r3, r3, #3
 8005ac2:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0310 	and.w	r3, r3, #16
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d05b      	beq.n	8005b88 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	2b08      	cmp	r3, #8
 8005ad4:	d005      	beq.n	8005ae2 <HAL_RCC_OscConfig+0x46>
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	2b18      	cmp	r3, #24
 8005ada:	d114      	bne.n	8005b06 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d111      	bne.n	8005b06 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d102      	bne.n	8005af0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	f000 bc08 	b.w	8006300 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8005af0:	4b84      	ldr	r3, [pc, #528]	@ (8005d04 <HAL_RCC_OscConfig+0x268>)
 8005af2:	699b      	ldr	r3, [r3, #24]
 8005af4:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a1b      	ldr	r3, [r3, #32]
 8005afc:	041b      	lsls	r3, r3, #16
 8005afe:	4981      	ldr	r1, [pc, #516]	@ (8005d04 <HAL_RCC_OscConfig+0x268>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8005b04:	e040      	b.n	8005b88 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	69db      	ldr	r3, [r3, #28]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d023      	beq.n	8005b56 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005b0e:	4b7d      	ldr	r3, [pc, #500]	@ (8005d04 <HAL_RCC_OscConfig+0x268>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a7c      	ldr	r2, [pc, #496]	@ (8005d04 <HAL_RCC_OscConfig+0x268>)
 8005b14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b1a:	f7fc fec3 	bl	80028a4 <HAL_GetTick>
 8005b1e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005b20:	e008      	b.n	8005b34 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8005b22:	f7fc febf 	bl	80028a4 <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d901      	bls.n	8005b34 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e3e5      	b.n	8006300 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005b34:	4b73      	ldr	r3, [pc, #460]	@ (8005d04 <HAL_RCC_OscConfig+0x268>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d0f0      	beq.n	8005b22 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8005b40:	4b70      	ldr	r3, [pc, #448]	@ (8005d04 <HAL_RCC_OscConfig+0x268>)
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a1b      	ldr	r3, [r3, #32]
 8005b4c:	041b      	lsls	r3, r3, #16
 8005b4e:	496d      	ldr	r1, [pc, #436]	@ (8005d04 <HAL_RCC_OscConfig+0x268>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	618b      	str	r3, [r1, #24]
 8005b54:	e018      	b.n	8005b88 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005b56:	4b6b      	ldr	r3, [pc, #428]	@ (8005d04 <HAL_RCC_OscConfig+0x268>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a6a      	ldr	r2, [pc, #424]	@ (8005d04 <HAL_RCC_OscConfig+0x268>)
 8005b5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b62:	f7fc fe9f 	bl	80028a4 <HAL_GetTick>
 8005b66:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8005b68:	e008      	b.n	8005b7c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8005b6a:	f7fc fe9b 	bl	80028a4 <HAL_GetTick>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d901      	bls.n	8005b7c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e3c1      	b.n	8006300 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8005b7c:	4b61      	ldr	r3, [pc, #388]	@ (8005d04 <HAL_RCC_OscConfig+0x268>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1f0      	bne.n	8005b6a <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f000 80a0 	beq.w	8005cd6 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	2b10      	cmp	r3, #16
 8005b9a:	d005      	beq.n	8005ba8 <HAL_RCC_OscConfig+0x10c>
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	2b18      	cmp	r3, #24
 8005ba0:	d109      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	2b03      	cmp	r3, #3
 8005ba6:	d106      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	f040 8092 	bne.w	8005cd6 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e3a4      	b.n	8006300 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bbe:	d106      	bne.n	8005bce <HAL_RCC_OscConfig+0x132>
 8005bc0:	4b50      	ldr	r3, [pc, #320]	@ (8005d04 <HAL_RCC_OscConfig+0x268>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a4f      	ldr	r2, [pc, #316]	@ (8005d04 <HAL_RCC_OscConfig+0x268>)
 8005bc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bca:	6013      	str	r3, [r2, #0]
 8005bcc:	e058      	b.n	8005c80 <HAL_RCC_OscConfig+0x1e4>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d112      	bne.n	8005bfc <HAL_RCC_OscConfig+0x160>
 8005bd6:	4b4b      	ldr	r3, [pc, #300]	@ (8005d04 <HAL_RCC_OscConfig+0x268>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a4a      	ldr	r2, [pc, #296]	@ (8005d04 <HAL_RCC_OscConfig+0x268>)
 8005bdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005be0:	6013      	str	r3, [r2, #0]
 8005be2:	4b48      	ldr	r3, [pc, #288]	@ (8005d04 <HAL_RCC_OscConfig+0x268>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a47      	ldr	r2, [pc, #284]	@ (8005d04 <HAL_RCC_OscConfig+0x268>)
 8005be8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005bec:	6013      	str	r3, [r2, #0]
 8005bee:	4b45      	ldr	r3, [pc, #276]	@ (8005d04 <HAL_RCC_OscConfig+0x268>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a44      	ldr	r2, [pc, #272]	@ (8005d04 <HAL_RCC_OscConfig+0x268>)
 8005bf4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005bf8:	6013      	str	r3, [r2, #0]
 8005bfa:	e041      	b.n	8005c80 <HAL_RCC_OscConfig+0x1e4>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c04:	d112      	bne.n	8005c2c <HAL_RCC_OscConfig+0x190>
 8005c06:	4b3f      	ldr	r3, [pc, #252]	@ (8005d04 <HAL_RCC_OscConfig+0x268>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a3e      	ldr	r2, [pc, #248]	@ (8005d04 <HAL_RCC_OscConfig+0x268>)
 8005c0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c10:	6013      	str	r3, [r2, #0]
 8005c12:	4b3c      	ldr	r3, [pc, #240]	@ (8005d04 <HAL_RCC_OscConfig+0x268>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a3b      	ldr	r2, [pc, #236]	@ (8005d04 <HAL_RCC_OscConfig+0x268>)
 8005c18:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005c1c:	6013      	str	r3, [r2, #0]
 8005c1e:	4b39      	ldr	r3, [pc, #228]	@ (8005d04 <HAL_RCC_OscConfig+0x268>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a38      	ldr	r2, [pc, #224]	@ (8005d04 <HAL_RCC_OscConfig+0x268>)
 8005c24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c28:	6013      	str	r3, [r2, #0]
 8005c2a:	e029      	b.n	8005c80 <HAL_RCC_OscConfig+0x1e4>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8005c34:	d112      	bne.n	8005c5c <HAL_RCC_OscConfig+0x1c0>
 8005c36:	4b33      	ldr	r3, [pc, #204]	@ (8005d04 <HAL_RCC_OscConfig+0x268>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a32      	ldr	r2, [pc, #200]	@ (8005d04 <HAL_RCC_OscConfig+0x268>)
 8005c3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c40:	6013      	str	r3, [r2, #0]
 8005c42:	4b30      	ldr	r3, [pc, #192]	@ (8005d04 <HAL_RCC_OscConfig+0x268>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a2f      	ldr	r2, [pc, #188]	@ (8005d04 <HAL_RCC_OscConfig+0x268>)
 8005c48:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c4c:	6013      	str	r3, [r2, #0]
 8005c4e:	4b2d      	ldr	r3, [pc, #180]	@ (8005d04 <HAL_RCC_OscConfig+0x268>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a2c      	ldr	r2, [pc, #176]	@ (8005d04 <HAL_RCC_OscConfig+0x268>)
 8005c54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c58:	6013      	str	r3, [r2, #0]
 8005c5a:	e011      	b.n	8005c80 <HAL_RCC_OscConfig+0x1e4>
 8005c5c:	4b29      	ldr	r3, [pc, #164]	@ (8005d04 <HAL_RCC_OscConfig+0x268>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a28      	ldr	r2, [pc, #160]	@ (8005d04 <HAL_RCC_OscConfig+0x268>)
 8005c62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c66:	6013      	str	r3, [r2, #0]
 8005c68:	4b26      	ldr	r3, [pc, #152]	@ (8005d04 <HAL_RCC_OscConfig+0x268>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a25      	ldr	r2, [pc, #148]	@ (8005d04 <HAL_RCC_OscConfig+0x268>)
 8005c6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c72:	6013      	str	r3, [r2, #0]
 8005c74:	4b23      	ldr	r3, [pc, #140]	@ (8005d04 <HAL_RCC_OscConfig+0x268>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a22      	ldr	r2, [pc, #136]	@ (8005d04 <HAL_RCC_OscConfig+0x268>)
 8005c7a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005c7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d013      	beq.n	8005cb0 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c88:	f7fc fe0c 	bl	80028a4 <HAL_GetTick>
 8005c8c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c8e:	e008      	b.n	8005ca2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005c90:	f7fc fe08 	bl	80028a4 <HAL_GetTick>
 8005c94:	4602      	mov	r2, r0
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	2b64      	cmp	r3, #100	@ 0x64
 8005c9c:	d901      	bls.n	8005ca2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	e32e      	b.n	8006300 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ca2:	4b18      	ldr	r3, [pc, #96]	@ (8005d04 <HAL_RCC_OscConfig+0x268>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d0f0      	beq.n	8005c90 <HAL_RCC_OscConfig+0x1f4>
 8005cae:	e012      	b.n	8005cd6 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cb0:	f7fc fdf8 	bl	80028a4 <HAL_GetTick>
 8005cb4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005cb6:	e008      	b.n	8005cca <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005cb8:	f7fc fdf4 	bl	80028a4 <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	2b64      	cmp	r3, #100	@ 0x64
 8005cc4:	d901      	bls.n	8005cca <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e31a      	b.n	8006300 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005cca:	4b0e      	ldr	r3, [pc, #56]	@ (8005d04 <HAL_RCC_OscConfig+0x268>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d1f0      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0302 	and.w	r3, r3, #2
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f000 809a 	beq.w	8005e18 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d005      	beq.n	8005cf6 <HAL_RCC_OscConfig+0x25a>
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	2b18      	cmp	r3, #24
 8005cee:	d149      	bne.n	8005d84 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d146      	bne.n	8005d84 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d104      	bne.n	8005d08 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e2fe      	b.n	8006300 <HAL_RCC_OscConfig+0x864>
 8005d02:	bf00      	nop
 8005d04:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d11c      	bne.n	8005d48 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8005d0e:	4b9a      	ldr	r3, [pc, #616]	@ (8005f78 <HAL_RCC_OscConfig+0x4dc>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0218 	and.w	r2, r3, #24
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d014      	beq.n	8005d48 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8005d1e:	4b96      	ldr	r3, [pc, #600]	@ (8005f78 <HAL_RCC_OscConfig+0x4dc>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f023 0218 	bic.w	r2, r3, #24
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	4993      	ldr	r1, [pc, #588]	@ (8005f78 <HAL_RCC_OscConfig+0x4dc>)
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8005d30:	f000 fdd0 	bl	80068d4 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005d34:	4b91      	ldr	r3, [pc, #580]	@ (8005f7c <HAL_RCC_OscConfig+0x4e0>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f7fc fd29 	bl	8002790 <HAL_InitTick>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d001      	beq.n	8005d48 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e2db      	b.n	8006300 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d48:	f7fc fdac 	bl	80028a4 <HAL_GetTick>
 8005d4c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d4e:	e008      	b.n	8005d62 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005d50:	f7fc fda8 	bl	80028a4 <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d901      	bls.n	8005d62 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e2ce      	b.n	8006300 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d62:	4b85      	ldr	r3, [pc, #532]	@ (8005f78 <HAL_RCC_OscConfig+0x4dc>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0302 	and.w	r3, r3, #2
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d0f0      	beq.n	8005d50 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8005d6e:	4b82      	ldr	r3, [pc, #520]	@ (8005f78 <HAL_RCC_OscConfig+0x4dc>)
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	041b      	lsls	r3, r3, #16
 8005d7c:	497e      	ldr	r1, [pc, #504]	@ (8005f78 <HAL_RCC_OscConfig+0x4dc>)
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8005d82:	e049      	b.n	8005e18 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d02c      	beq.n	8005de6 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8005d8c:	4b7a      	ldr	r3, [pc, #488]	@ (8005f78 <HAL_RCC_OscConfig+0x4dc>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f023 0218 	bic.w	r2, r3, #24
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	4977      	ldr	r1, [pc, #476]	@ (8005f78 <HAL_RCC_OscConfig+0x4dc>)
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8005d9e:	4b76      	ldr	r3, [pc, #472]	@ (8005f78 <HAL_RCC_OscConfig+0x4dc>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a75      	ldr	r2, [pc, #468]	@ (8005f78 <HAL_RCC_OscConfig+0x4dc>)
 8005da4:	f043 0301 	orr.w	r3, r3, #1
 8005da8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005daa:	f7fc fd7b 	bl	80028a4 <HAL_GetTick>
 8005dae:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005db0:	e008      	b.n	8005dc4 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005db2:	f7fc fd77 	bl	80028a4 <HAL_GetTick>
 8005db6:	4602      	mov	r2, r0
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d901      	bls.n	8005dc4 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	e29d      	b.n	8006300 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005dc4:	4b6c      	ldr	r3, [pc, #432]	@ (8005f78 <HAL_RCC_OscConfig+0x4dc>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0302 	and.w	r3, r3, #2
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d0f0      	beq.n	8005db2 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8005dd0:	4b69      	ldr	r3, [pc, #420]	@ (8005f78 <HAL_RCC_OscConfig+0x4dc>)
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	695b      	ldr	r3, [r3, #20]
 8005ddc:	041b      	lsls	r3, r3, #16
 8005dde:	4966      	ldr	r1, [pc, #408]	@ (8005f78 <HAL_RCC_OscConfig+0x4dc>)
 8005de0:	4313      	orrs	r3, r2
 8005de2:	610b      	str	r3, [r1, #16]
 8005de4:	e018      	b.n	8005e18 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005de6:	4b64      	ldr	r3, [pc, #400]	@ (8005f78 <HAL_RCC_OscConfig+0x4dc>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a63      	ldr	r2, [pc, #396]	@ (8005f78 <HAL_RCC_OscConfig+0x4dc>)
 8005dec:	f023 0301 	bic.w	r3, r3, #1
 8005df0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005df2:	f7fc fd57 	bl	80028a4 <HAL_GetTick>
 8005df6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005df8:	e008      	b.n	8005e0c <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005dfa:	f7fc fd53 	bl	80028a4 <HAL_GetTick>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	d901      	bls.n	8005e0c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8005e08:	2303      	movs	r3, #3
 8005e0a:	e279      	b.n	8006300 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e0c:	4b5a      	ldr	r3, [pc, #360]	@ (8005f78 <HAL_RCC_OscConfig+0x4dc>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0302 	and.w	r3, r3, #2
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d1f0      	bne.n	8005dfa <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0308 	and.w	r3, r3, #8
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d03c      	beq.n	8005e9e <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	699b      	ldr	r3, [r3, #24]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d01c      	beq.n	8005e66 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e2c:	4b52      	ldr	r3, [pc, #328]	@ (8005f78 <HAL_RCC_OscConfig+0x4dc>)
 8005e2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e32:	4a51      	ldr	r2, [pc, #324]	@ (8005f78 <HAL_RCC_OscConfig+0x4dc>)
 8005e34:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005e38:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e3c:	f7fc fd32 	bl	80028a4 <HAL_GetTick>
 8005e40:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005e42:	e008      	b.n	8005e56 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8005e44:	f7fc fd2e 	bl	80028a4 <HAL_GetTick>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	1ad3      	subs	r3, r2, r3
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d901      	bls.n	8005e56 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e254      	b.n	8006300 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005e56:	4b48      	ldr	r3, [pc, #288]	@ (8005f78 <HAL_RCC_OscConfig+0x4dc>)
 8005e58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d0ef      	beq.n	8005e44 <HAL_RCC_OscConfig+0x3a8>
 8005e64:	e01b      	b.n	8005e9e <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e66:	4b44      	ldr	r3, [pc, #272]	@ (8005f78 <HAL_RCC_OscConfig+0x4dc>)
 8005e68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e6c:	4a42      	ldr	r2, [pc, #264]	@ (8005f78 <HAL_RCC_OscConfig+0x4dc>)
 8005e6e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005e72:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e76:	f7fc fd15 	bl	80028a4 <HAL_GetTick>
 8005e7a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005e7c:	e008      	b.n	8005e90 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8005e7e:	f7fc fd11 	bl	80028a4 <HAL_GetTick>
 8005e82:	4602      	mov	r2, r0
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	1ad3      	subs	r3, r2, r3
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	d901      	bls.n	8005e90 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e237      	b.n	8006300 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005e90:	4b39      	ldr	r3, [pc, #228]	@ (8005f78 <HAL_RCC_OscConfig+0x4dc>)
 8005e92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d1ef      	bne.n	8005e7e <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0304 	and.w	r3, r3, #4
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	f000 80d2 	beq.w	8006050 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005eac:	4b34      	ldr	r3, [pc, #208]	@ (8005f80 <HAL_RCC_OscConfig+0x4e4>)
 8005eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb0:	f003 0301 	and.w	r3, r3, #1
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d118      	bne.n	8005eea <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8005eb8:	4b31      	ldr	r3, [pc, #196]	@ (8005f80 <HAL_RCC_OscConfig+0x4e4>)
 8005eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ebc:	4a30      	ldr	r2, [pc, #192]	@ (8005f80 <HAL_RCC_OscConfig+0x4e4>)
 8005ebe:	f043 0301 	orr.w	r3, r3, #1
 8005ec2:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ec4:	f7fc fcee 	bl	80028a4 <HAL_GetTick>
 8005ec8:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005eca:	e008      	b.n	8005ede <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ecc:	f7fc fcea 	bl	80028a4 <HAL_GetTick>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d901      	bls.n	8005ede <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e210      	b.n	8006300 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005ede:	4b28      	ldr	r3, [pc, #160]	@ (8005f80 <HAL_RCC_OscConfig+0x4e4>)
 8005ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee2:	f003 0301 	and.w	r3, r3, #1
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d0f0      	beq.n	8005ecc <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d108      	bne.n	8005f04 <HAL_RCC_OscConfig+0x468>
 8005ef2:	4b21      	ldr	r3, [pc, #132]	@ (8005f78 <HAL_RCC_OscConfig+0x4dc>)
 8005ef4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ef8:	4a1f      	ldr	r2, [pc, #124]	@ (8005f78 <HAL_RCC_OscConfig+0x4dc>)
 8005efa:	f043 0301 	orr.w	r3, r3, #1
 8005efe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005f02:	e074      	b.n	8005fee <HAL_RCC_OscConfig+0x552>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d118      	bne.n	8005f3e <HAL_RCC_OscConfig+0x4a2>
 8005f0c:	4b1a      	ldr	r3, [pc, #104]	@ (8005f78 <HAL_RCC_OscConfig+0x4dc>)
 8005f0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f12:	4a19      	ldr	r2, [pc, #100]	@ (8005f78 <HAL_RCC_OscConfig+0x4dc>)
 8005f14:	f023 0301 	bic.w	r3, r3, #1
 8005f18:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005f1c:	4b16      	ldr	r3, [pc, #88]	@ (8005f78 <HAL_RCC_OscConfig+0x4dc>)
 8005f1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f22:	4a15      	ldr	r2, [pc, #84]	@ (8005f78 <HAL_RCC_OscConfig+0x4dc>)
 8005f24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f28:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005f2c:	4b12      	ldr	r3, [pc, #72]	@ (8005f78 <HAL_RCC_OscConfig+0x4dc>)
 8005f2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f32:	4a11      	ldr	r2, [pc, #68]	@ (8005f78 <HAL_RCC_OscConfig+0x4dc>)
 8005f34:	f023 0304 	bic.w	r3, r3, #4
 8005f38:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005f3c:	e057      	b.n	8005fee <HAL_RCC_OscConfig+0x552>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	2b05      	cmp	r3, #5
 8005f44:	d11e      	bne.n	8005f84 <HAL_RCC_OscConfig+0x4e8>
 8005f46:	4b0c      	ldr	r3, [pc, #48]	@ (8005f78 <HAL_RCC_OscConfig+0x4dc>)
 8005f48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f4c:	4a0a      	ldr	r2, [pc, #40]	@ (8005f78 <HAL_RCC_OscConfig+0x4dc>)
 8005f4e:	f043 0304 	orr.w	r3, r3, #4
 8005f52:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005f56:	4b08      	ldr	r3, [pc, #32]	@ (8005f78 <HAL_RCC_OscConfig+0x4dc>)
 8005f58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f5c:	4a06      	ldr	r2, [pc, #24]	@ (8005f78 <HAL_RCC_OscConfig+0x4dc>)
 8005f5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f62:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005f66:	4b04      	ldr	r3, [pc, #16]	@ (8005f78 <HAL_RCC_OscConfig+0x4dc>)
 8005f68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f6c:	4a02      	ldr	r2, [pc, #8]	@ (8005f78 <HAL_RCC_OscConfig+0x4dc>)
 8005f6e:	f043 0301 	orr.w	r3, r3, #1
 8005f72:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005f76:	e03a      	b.n	8005fee <HAL_RCC_OscConfig+0x552>
 8005f78:	44020c00 	.word	0x44020c00
 8005f7c:	20000024 	.word	0x20000024
 8005f80:	44020800 	.word	0x44020800
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	2b85      	cmp	r3, #133	@ 0x85
 8005f8a:	d118      	bne.n	8005fbe <HAL_RCC_OscConfig+0x522>
 8005f8c:	4ba2      	ldr	r3, [pc, #648]	@ (8006218 <HAL_RCC_OscConfig+0x77c>)
 8005f8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f92:	4aa1      	ldr	r2, [pc, #644]	@ (8006218 <HAL_RCC_OscConfig+0x77c>)
 8005f94:	f043 0304 	orr.w	r3, r3, #4
 8005f98:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005f9c:	4b9e      	ldr	r3, [pc, #632]	@ (8006218 <HAL_RCC_OscConfig+0x77c>)
 8005f9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005fa2:	4a9d      	ldr	r2, [pc, #628]	@ (8006218 <HAL_RCC_OscConfig+0x77c>)
 8005fa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fa8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005fac:	4b9a      	ldr	r3, [pc, #616]	@ (8006218 <HAL_RCC_OscConfig+0x77c>)
 8005fae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005fb2:	4a99      	ldr	r2, [pc, #612]	@ (8006218 <HAL_RCC_OscConfig+0x77c>)
 8005fb4:	f043 0301 	orr.w	r3, r3, #1
 8005fb8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005fbc:	e017      	b.n	8005fee <HAL_RCC_OscConfig+0x552>
 8005fbe:	4b96      	ldr	r3, [pc, #600]	@ (8006218 <HAL_RCC_OscConfig+0x77c>)
 8005fc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005fc4:	4a94      	ldr	r2, [pc, #592]	@ (8006218 <HAL_RCC_OscConfig+0x77c>)
 8005fc6:	f023 0301 	bic.w	r3, r3, #1
 8005fca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005fce:	4b92      	ldr	r3, [pc, #584]	@ (8006218 <HAL_RCC_OscConfig+0x77c>)
 8005fd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005fd4:	4a90      	ldr	r2, [pc, #576]	@ (8006218 <HAL_RCC_OscConfig+0x77c>)
 8005fd6:	f023 0304 	bic.w	r3, r3, #4
 8005fda:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005fde:	4b8e      	ldr	r3, [pc, #568]	@ (8006218 <HAL_RCC_OscConfig+0x77c>)
 8005fe0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005fe4:	4a8c      	ldr	r2, [pc, #560]	@ (8006218 <HAL_RCC_OscConfig+0x77c>)
 8005fe6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d016      	beq.n	8006024 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ff6:	f7fc fc55 	bl	80028a4 <HAL_GetTick>
 8005ffa:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ffc:	e00a      	b.n	8006014 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ffe:	f7fc fc51 	bl	80028a4 <HAL_GetTick>
 8006002:	4602      	mov	r2, r0
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	f241 3288 	movw	r2, #5000	@ 0x1388
 800600c:	4293      	cmp	r3, r2
 800600e:	d901      	bls.n	8006014 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8006010:	2303      	movs	r3, #3
 8006012:	e175      	b.n	8006300 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006014:	4b80      	ldr	r3, [pc, #512]	@ (8006218 <HAL_RCC_OscConfig+0x77c>)
 8006016:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800601a:	f003 0302 	and.w	r3, r3, #2
 800601e:	2b00      	cmp	r3, #0
 8006020:	d0ed      	beq.n	8005ffe <HAL_RCC_OscConfig+0x562>
 8006022:	e015      	b.n	8006050 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006024:	f7fc fc3e 	bl	80028a4 <HAL_GetTick>
 8006028:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800602a:	e00a      	b.n	8006042 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800602c:	f7fc fc3a 	bl	80028a4 <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	f241 3288 	movw	r2, #5000	@ 0x1388
 800603a:	4293      	cmp	r3, r2
 800603c:	d901      	bls.n	8006042 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e15e      	b.n	8006300 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006042:	4b75      	ldr	r3, [pc, #468]	@ (8006218 <HAL_RCC_OscConfig+0x77c>)
 8006044:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006048:	f003 0302 	and.w	r3, r3, #2
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1ed      	bne.n	800602c <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 0320 	and.w	r3, r3, #32
 8006058:	2b00      	cmp	r3, #0
 800605a:	d036      	beq.n	80060ca <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006060:	2b00      	cmp	r3, #0
 8006062:	d019      	beq.n	8006098 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006064:	4b6c      	ldr	r3, [pc, #432]	@ (8006218 <HAL_RCC_OscConfig+0x77c>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a6b      	ldr	r2, [pc, #428]	@ (8006218 <HAL_RCC_OscConfig+0x77c>)
 800606a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800606e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006070:	f7fc fc18 	bl	80028a4 <HAL_GetTick>
 8006074:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006076:	e008      	b.n	800608a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8006078:	f7fc fc14 	bl	80028a4 <HAL_GetTick>
 800607c:	4602      	mov	r2, r0
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	2b02      	cmp	r3, #2
 8006084:	d901      	bls.n	800608a <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e13a      	b.n	8006300 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800608a:	4b63      	ldr	r3, [pc, #396]	@ (8006218 <HAL_RCC_OscConfig+0x77c>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006092:	2b00      	cmp	r3, #0
 8006094:	d0f0      	beq.n	8006078 <HAL_RCC_OscConfig+0x5dc>
 8006096:	e018      	b.n	80060ca <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006098:	4b5f      	ldr	r3, [pc, #380]	@ (8006218 <HAL_RCC_OscConfig+0x77c>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a5e      	ldr	r2, [pc, #376]	@ (8006218 <HAL_RCC_OscConfig+0x77c>)
 800609e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80060a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060a4:	f7fc fbfe 	bl	80028a4 <HAL_GetTick>
 80060a8:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80060aa:	e008      	b.n	80060be <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80060ac:	f7fc fbfa 	bl	80028a4 <HAL_GetTick>
 80060b0:	4602      	mov	r2, r0
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d901      	bls.n	80060be <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e120      	b.n	8006300 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80060be:	4b56      	ldr	r3, [pc, #344]	@ (8006218 <HAL_RCC_OscConfig+0x77c>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1f0      	bne.n	80060ac <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	f000 8115 	beq.w	80062fe <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	2b18      	cmp	r3, #24
 80060d8:	f000 80af 	beq.w	800623a <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	f040 8086 	bne.w	80061f2 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80060e6:	4b4c      	ldr	r3, [pc, #304]	@ (8006218 <HAL_RCC_OscConfig+0x77c>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a4b      	ldr	r2, [pc, #300]	@ (8006218 <HAL_RCC_OscConfig+0x77c>)
 80060ec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80060f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060f2:	f7fc fbd7 	bl	80028a4 <HAL_GetTick>
 80060f6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80060f8:	e008      	b.n	800610c <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80060fa:	f7fc fbd3 	bl	80028a4 <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	2b02      	cmp	r3, #2
 8006106:	d901      	bls.n	800610c <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8006108:	2303      	movs	r3, #3
 800610a:	e0f9      	b.n	8006300 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800610c:	4b42      	ldr	r3, [pc, #264]	@ (8006218 <HAL_RCC_OscConfig+0x77c>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1f0      	bne.n	80060fa <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8006118:	4b3f      	ldr	r3, [pc, #252]	@ (8006218 <HAL_RCC_OscConfig+0x77c>)
 800611a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800611c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006120:	f023 0303 	bic.w	r3, r3, #3
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800612c:	0212      	lsls	r2, r2, #8
 800612e:	430a      	orrs	r2, r1
 8006130:	4939      	ldr	r1, [pc, #228]	@ (8006218 <HAL_RCC_OscConfig+0x77c>)
 8006132:	4313      	orrs	r3, r2
 8006134:	628b      	str	r3, [r1, #40]	@ 0x28
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800613a:	3b01      	subs	r3, #1
 800613c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006144:	3b01      	subs	r3, #1
 8006146:	025b      	lsls	r3, r3, #9
 8006148:	b29b      	uxth	r3, r3
 800614a:	431a      	orrs	r2, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006150:	3b01      	subs	r3, #1
 8006152:	041b      	lsls	r3, r3, #16
 8006154:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006158:	431a      	orrs	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800615e:	3b01      	subs	r3, #1
 8006160:	061b      	lsls	r3, r3, #24
 8006162:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006166:	492c      	ldr	r1, [pc, #176]	@ (8006218 <HAL_RCC_OscConfig+0x77c>)
 8006168:	4313      	orrs	r3, r2
 800616a:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800616c:	4b2a      	ldr	r3, [pc, #168]	@ (8006218 <HAL_RCC_OscConfig+0x77c>)
 800616e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006170:	4a29      	ldr	r2, [pc, #164]	@ (8006218 <HAL_RCC_OscConfig+0x77c>)
 8006172:	f023 0310 	bic.w	r3, r3, #16
 8006176:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800617c:	4a26      	ldr	r2, [pc, #152]	@ (8006218 <HAL_RCC_OscConfig+0x77c>)
 800617e:	00db      	lsls	r3, r3, #3
 8006180:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8006182:	4b25      	ldr	r3, [pc, #148]	@ (8006218 <HAL_RCC_OscConfig+0x77c>)
 8006184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006186:	4a24      	ldr	r2, [pc, #144]	@ (8006218 <HAL_RCC_OscConfig+0x77c>)
 8006188:	f043 0310 	orr.w	r3, r3, #16
 800618c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800618e:	4b22      	ldr	r3, [pc, #136]	@ (8006218 <HAL_RCC_OscConfig+0x77c>)
 8006190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006192:	f023 020c 	bic.w	r2, r3, #12
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800619a:	491f      	ldr	r1, [pc, #124]	@ (8006218 <HAL_RCC_OscConfig+0x77c>)
 800619c:	4313      	orrs	r3, r2
 800619e:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80061a0:	4b1d      	ldr	r3, [pc, #116]	@ (8006218 <HAL_RCC_OscConfig+0x77c>)
 80061a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061a4:	f023 0220 	bic.w	r2, r3, #32
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061ac:	491a      	ldr	r1, [pc, #104]	@ (8006218 <HAL_RCC_OscConfig+0x77c>)
 80061ae:	4313      	orrs	r3, r2
 80061b0:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80061b2:	4b19      	ldr	r3, [pc, #100]	@ (8006218 <HAL_RCC_OscConfig+0x77c>)
 80061b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061b6:	4a18      	ldr	r2, [pc, #96]	@ (8006218 <HAL_RCC_OscConfig+0x77c>)
 80061b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061bc:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80061be:	4b16      	ldr	r3, [pc, #88]	@ (8006218 <HAL_RCC_OscConfig+0x77c>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a15      	ldr	r2, [pc, #84]	@ (8006218 <HAL_RCC_OscConfig+0x77c>)
 80061c4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80061c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ca:	f7fc fb6b 	bl	80028a4 <HAL_GetTick>
 80061ce:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80061d0:	e008      	b.n	80061e4 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80061d2:	f7fc fb67 	bl	80028a4 <HAL_GetTick>
 80061d6:	4602      	mov	r2, r0
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d901      	bls.n	80061e4 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80061e0:	2303      	movs	r3, #3
 80061e2:	e08d      	b.n	8006300 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80061e4:	4b0c      	ldr	r3, [pc, #48]	@ (8006218 <HAL_RCC_OscConfig+0x77c>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d0f0      	beq.n	80061d2 <HAL_RCC_OscConfig+0x736>
 80061f0:	e085      	b.n	80062fe <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80061f2:	4b09      	ldr	r3, [pc, #36]	@ (8006218 <HAL_RCC_OscConfig+0x77c>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a08      	ldr	r2, [pc, #32]	@ (8006218 <HAL_RCC_OscConfig+0x77c>)
 80061f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80061fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061fe:	f7fc fb51 	bl	80028a4 <HAL_GetTick>
 8006202:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006204:	e00a      	b.n	800621c <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8006206:	f7fc fb4d 	bl	80028a4 <HAL_GetTick>
 800620a:	4602      	mov	r2, r0
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	2b02      	cmp	r3, #2
 8006212:	d903      	bls.n	800621c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8006214:	2303      	movs	r3, #3
 8006216:	e073      	b.n	8006300 <HAL_RCC_OscConfig+0x864>
 8006218:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800621c:	4b3a      	ldr	r3, [pc, #232]	@ (8006308 <HAL_RCC_OscConfig+0x86c>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006224:	2b00      	cmp	r3, #0
 8006226:	d1ee      	bne.n	8006206 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8006228:	4b37      	ldr	r3, [pc, #220]	@ (8006308 <HAL_RCC_OscConfig+0x86c>)
 800622a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800622c:	4a36      	ldr	r2, [pc, #216]	@ (8006308 <HAL_RCC_OscConfig+0x86c>)
 800622e:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006232:	f023 0303 	bic.w	r3, r3, #3
 8006236:	6293      	str	r3, [r2, #40]	@ 0x28
 8006238:	e061      	b.n	80062fe <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800623a:	4b33      	ldr	r3, [pc, #204]	@ (8006308 <HAL_RCC_OscConfig+0x86c>)
 800623c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800623e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006240:	4b31      	ldr	r3, [pc, #196]	@ (8006308 <HAL_RCC_OscConfig+0x86c>)
 8006242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006244:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800624a:	2b01      	cmp	r3, #1
 800624c:	d031      	beq.n	80062b2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	f003 0203 	and.w	r2, r3, #3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006258:	429a      	cmp	r2, r3
 800625a:	d12a      	bne.n	80062b2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	0a1b      	lsrs	r3, r3, #8
 8006260:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8006268:	429a      	cmp	r2, r3
 800626a:	d122      	bne.n	80062b2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006276:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8006278:	429a      	cmp	r2, r3
 800627a:	d11a      	bne.n	80062b2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	0a5b      	lsrs	r3, r3, #9
 8006280:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006288:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800628a:	429a      	cmp	r2, r3
 800628c:	d111      	bne.n	80062b2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	0c1b      	lsrs	r3, r3, #16
 8006292:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800629a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800629c:	429a      	cmp	r2, r3
 800629e:	d108      	bne.n	80062b2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	0e1b      	lsrs	r3, r3, #24
 80062a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ac:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d001      	beq.n	80062b6 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e024      	b.n	8006300 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80062b6:	4b14      	ldr	r3, [pc, #80]	@ (8006308 <HAL_RCC_OscConfig+0x86c>)
 80062b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ba:	08db      	lsrs	r3, r3, #3
 80062bc:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d01a      	beq.n	80062fe <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80062c8:	4b0f      	ldr	r3, [pc, #60]	@ (8006308 <HAL_RCC_OscConfig+0x86c>)
 80062ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062cc:	4a0e      	ldr	r2, [pc, #56]	@ (8006308 <HAL_RCC_OscConfig+0x86c>)
 80062ce:	f023 0310 	bic.w	r3, r3, #16
 80062d2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062d4:	f7fc fae6 	bl	80028a4 <HAL_GetTick>
 80062d8:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80062da:	bf00      	nop
 80062dc:	f7fc fae2 	bl	80028a4 <HAL_GetTick>
 80062e0:	4602      	mov	r2, r0
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d0f9      	beq.n	80062dc <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062ec:	4a06      	ldr	r2, [pc, #24]	@ (8006308 <HAL_RCC_OscConfig+0x86c>)
 80062ee:	00db      	lsls	r3, r3, #3
 80062f0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80062f2:	4b05      	ldr	r3, [pc, #20]	@ (8006308 <HAL_RCC_OscConfig+0x86c>)
 80062f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062f6:	4a04      	ldr	r2, [pc, #16]	@ (8006308 <HAL_RCC_OscConfig+0x86c>)
 80062f8:	f043 0310 	orr.w	r3, r3, #16
 80062fc:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	4618      	mov	r0, r3
 8006302:	3720      	adds	r7, #32
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	44020c00 	.word	0x44020c00

0800630c <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d101      	bne.n	8006320 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e19e      	b.n	800665e <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006320:	4b83      	ldr	r3, [pc, #524]	@ (8006530 <HAL_RCC_ClockConfig+0x224>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 030f 	and.w	r3, r3, #15
 8006328:	683a      	ldr	r2, [r7, #0]
 800632a:	429a      	cmp	r2, r3
 800632c:	d910      	bls.n	8006350 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800632e:	4b80      	ldr	r3, [pc, #512]	@ (8006530 <HAL_RCC_ClockConfig+0x224>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f023 020f 	bic.w	r2, r3, #15
 8006336:	497e      	ldr	r1, [pc, #504]	@ (8006530 <HAL_RCC_ClockConfig+0x224>)
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	4313      	orrs	r3, r2
 800633c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800633e:	4b7c      	ldr	r3, [pc, #496]	@ (8006530 <HAL_RCC_ClockConfig+0x224>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 030f 	and.w	r3, r3, #15
 8006346:	683a      	ldr	r2, [r7, #0]
 8006348:	429a      	cmp	r2, r3
 800634a:	d001      	beq.n	8006350 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e186      	b.n	800665e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0310 	and.w	r3, r3, #16
 8006358:	2b00      	cmp	r3, #0
 800635a:	d012      	beq.n	8006382 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	695a      	ldr	r2, [r3, #20]
 8006360:	4b74      	ldr	r3, [pc, #464]	@ (8006534 <HAL_RCC_ClockConfig+0x228>)
 8006362:	6a1b      	ldr	r3, [r3, #32]
 8006364:	0a1b      	lsrs	r3, r3, #8
 8006366:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800636a:	429a      	cmp	r2, r3
 800636c:	d909      	bls.n	8006382 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800636e:	4b71      	ldr	r3, [pc, #452]	@ (8006534 <HAL_RCC_ClockConfig+0x228>)
 8006370:	6a1b      	ldr	r3, [r3, #32]
 8006372:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	021b      	lsls	r3, r3, #8
 800637c:	496d      	ldr	r1, [pc, #436]	@ (8006534 <HAL_RCC_ClockConfig+0x228>)
 800637e:	4313      	orrs	r3, r2
 8006380:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 0308 	and.w	r3, r3, #8
 800638a:	2b00      	cmp	r3, #0
 800638c:	d012      	beq.n	80063b4 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	691a      	ldr	r2, [r3, #16]
 8006392:	4b68      	ldr	r3, [pc, #416]	@ (8006534 <HAL_RCC_ClockConfig+0x228>)
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	091b      	lsrs	r3, r3, #4
 8006398:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800639c:	429a      	cmp	r2, r3
 800639e:	d909      	bls.n	80063b4 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80063a0:	4b64      	ldr	r3, [pc, #400]	@ (8006534 <HAL_RCC_ClockConfig+0x228>)
 80063a2:	6a1b      	ldr	r3, [r3, #32]
 80063a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	011b      	lsls	r3, r3, #4
 80063ae:	4961      	ldr	r1, [pc, #388]	@ (8006534 <HAL_RCC_ClockConfig+0x228>)
 80063b0:	4313      	orrs	r3, r2
 80063b2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0304 	and.w	r3, r3, #4
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d010      	beq.n	80063e2 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	68da      	ldr	r2, [r3, #12]
 80063c4:	4b5b      	ldr	r3, [pc, #364]	@ (8006534 <HAL_RCC_ClockConfig+0x228>)
 80063c6:	6a1b      	ldr	r3, [r3, #32]
 80063c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d908      	bls.n	80063e2 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80063d0:	4b58      	ldr	r3, [pc, #352]	@ (8006534 <HAL_RCC_ClockConfig+0x228>)
 80063d2:	6a1b      	ldr	r3, [r3, #32]
 80063d4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	4955      	ldr	r1, [pc, #340]	@ (8006534 <HAL_RCC_ClockConfig+0x228>)
 80063de:	4313      	orrs	r3, r2
 80063e0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0302 	and.w	r3, r3, #2
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d010      	beq.n	8006410 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	689a      	ldr	r2, [r3, #8]
 80063f2:	4b50      	ldr	r3, [pc, #320]	@ (8006534 <HAL_RCC_ClockConfig+0x228>)
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	f003 030f 	and.w	r3, r3, #15
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d908      	bls.n	8006410 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80063fe:	4b4d      	ldr	r3, [pc, #308]	@ (8006534 <HAL_RCC_ClockConfig+0x228>)
 8006400:	6a1b      	ldr	r3, [r3, #32]
 8006402:	f023 020f 	bic.w	r2, r3, #15
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	494a      	ldr	r1, [pc, #296]	@ (8006534 <HAL_RCC_ClockConfig+0x228>)
 800640c:	4313      	orrs	r3, r2
 800640e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0301 	and.w	r3, r3, #1
 8006418:	2b00      	cmp	r3, #0
 800641a:	f000 8093 	beq.w	8006544 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	2b03      	cmp	r3, #3
 8006424:	d107      	bne.n	8006436 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006426:	4b43      	ldr	r3, [pc, #268]	@ (8006534 <HAL_RCC_ClockConfig+0x228>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d121      	bne.n	8006476 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e113      	b.n	800665e <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	2b02      	cmp	r3, #2
 800643c:	d107      	bne.n	800644e <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800643e:	4b3d      	ldr	r3, [pc, #244]	@ (8006534 <HAL_RCC_ClockConfig+0x228>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006446:	2b00      	cmp	r3, #0
 8006448:	d115      	bne.n	8006476 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e107      	b.n	800665e <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	2b01      	cmp	r3, #1
 8006454:	d107      	bne.n	8006466 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8006456:	4b37      	ldr	r3, [pc, #220]	@ (8006534 <HAL_RCC_ClockConfig+0x228>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800645e:	2b00      	cmp	r3, #0
 8006460:	d109      	bne.n	8006476 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e0fb      	b.n	800665e <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006466:	4b33      	ldr	r3, [pc, #204]	@ (8006534 <HAL_RCC_ClockConfig+0x228>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 0302 	and.w	r3, r3, #2
 800646e:	2b00      	cmp	r3, #0
 8006470:	d101      	bne.n	8006476 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e0f3      	b.n	800665e <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8006476:	4b2f      	ldr	r3, [pc, #188]	@ (8006534 <HAL_RCC_ClockConfig+0x228>)
 8006478:	69db      	ldr	r3, [r3, #28]
 800647a:	f023 0203 	bic.w	r2, r3, #3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	492c      	ldr	r1, [pc, #176]	@ (8006534 <HAL_RCC_ClockConfig+0x228>)
 8006484:	4313      	orrs	r3, r2
 8006486:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006488:	f7fc fa0c 	bl	80028a4 <HAL_GetTick>
 800648c:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	2b03      	cmp	r3, #3
 8006494:	d112      	bne.n	80064bc <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006496:	e00a      	b.n	80064ae <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006498:	f7fc fa04 	bl	80028a4 <HAL_GetTick>
 800649c:	4602      	mov	r2, r0
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d901      	bls.n	80064ae <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80064aa:	2303      	movs	r3, #3
 80064ac:	e0d7      	b.n	800665e <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80064ae:	4b21      	ldr	r3, [pc, #132]	@ (8006534 <HAL_RCC_ClockConfig+0x228>)
 80064b0:	69db      	ldr	r3, [r3, #28]
 80064b2:	f003 0318 	and.w	r3, r3, #24
 80064b6:	2b18      	cmp	r3, #24
 80064b8:	d1ee      	bne.n	8006498 <HAL_RCC_ClockConfig+0x18c>
 80064ba:	e043      	b.n	8006544 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d112      	bne.n	80064ea <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80064c4:	e00a      	b.n	80064dc <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80064c6:	f7fc f9ed 	bl	80028a4 <HAL_GetTick>
 80064ca:	4602      	mov	r2, r0
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	1ad3      	subs	r3, r2, r3
 80064d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d901      	bls.n	80064dc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80064d8:	2303      	movs	r3, #3
 80064da:	e0c0      	b.n	800665e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80064dc:	4b15      	ldr	r3, [pc, #84]	@ (8006534 <HAL_RCC_ClockConfig+0x228>)
 80064de:	69db      	ldr	r3, [r3, #28]
 80064e0:	f003 0318 	and.w	r3, r3, #24
 80064e4:	2b10      	cmp	r3, #16
 80064e6:	d1ee      	bne.n	80064c6 <HAL_RCC_ClockConfig+0x1ba>
 80064e8:	e02c      	b.n	8006544 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d122      	bne.n	8006538 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80064f2:	e00a      	b.n	800650a <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80064f4:	f7fc f9d6 	bl	80028a4 <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006502:	4293      	cmp	r3, r2
 8006504:	d901      	bls.n	800650a <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e0a9      	b.n	800665e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800650a:	4b0a      	ldr	r3, [pc, #40]	@ (8006534 <HAL_RCC_ClockConfig+0x228>)
 800650c:	69db      	ldr	r3, [r3, #28]
 800650e:	f003 0318 	and.w	r3, r3, #24
 8006512:	2b08      	cmp	r3, #8
 8006514:	d1ee      	bne.n	80064f4 <HAL_RCC_ClockConfig+0x1e8>
 8006516:	e015      	b.n	8006544 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006518:	f7fc f9c4 	bl	80028a4 <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006526:	4293      	cmp	r3, r2
 8006528:	d906      	bls.n	8006538 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e097      	b.n	800665e <HAL_RCC_ClockConfig+0x352>
 800652e:	bf00      	nop
 8006530:	40022000 	.word	0x40022000
 8006534:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006538:	4b4b      	ldr	r3, [pc, #300]	@ (8006668 <HAL_RCC_ClockConfig+0x35c>)
 800653a:	69db      	ldr	r3, [r3, #28]
 800653c:	f003 0318 	and.w	r3, r3, #24
 8006540:	2b00      	cmp	r3, #0
 8006542:	d1e9      	bne.n	8006518 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0302 	and.w	r3, r3, #2
 800654c:	2b00      	cmp	r3, #0
 800654e:	d010      	beq.n	8006572 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	689a      	ldr	r2, [r3, #8]
 8006554:	4b44      	ldr	r3, [pc, #272]	@ (8006668 <HAL_RCC_ClockConfig+0x35c>)
 8006556:	6a1b      	ldr	r3, [r3, #32]
 8006558:	f003 030f 	and.w	r3, r3, #15
 800655c:	429a      	cmp	r2, r3
 800655e:	d208      	bcs.n	8006572 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8006560:	4b41      	ldr	r3, [pc, #260]	@ (8006668 <HAL_RCC_ClockConfig+0x35c>)
 8006562:	6a1b      	ldr	r3, [r3, #32]
 8006564:	f023 020f 	bic.w	r2, r3, #15
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	493e      	ldr	r1, [pc, #248]	@ (8006668 <HAL_RCC_ClockConfig+0x35c>)
 800656e:	4313      	orrs	r3, r2
 8006570:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006572:	4b3e      	ldr	r3, [pc, #248]	@ (800666c <HAL_RCC_ClockConfig+0x360>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 030f 	and.w	r3, r3, #15
 800657a:	683a      	ldr	r2, [r7, #0]
 800657c:	429a      	cmp	r2, r3
 800657e:	d210      	bcs.n	80065a2 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006580:	4b3a      	ldr	r3, [pc, #232]	@ (800666c <HAL_RCC_ClockConfig+0x360>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f023 020f 	bic.w	r2, r3, #15
 8006588:	4938      	ldr	r1, [pc, #224]	@ (800666c <HAL_RCC_ClockConfig+0x360>)
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	4313      	orrs	r3, r2
 800658e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006590:	4b36      	ldr	r3, [pc, #216]	@ (800666c <HAL_RCC_ClockConfig+0x360>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 030f 	and.w	r3, r3, #15
 8006598:	683a      	ldr	r2, [r7, #0]
 800659a:	429a      	cmp	r2, r3
 800659c:	d001      	beq.n	80065a2 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e05d      	b.n	800665e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 0304 	and.w	r3, r3, #4
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d010      	beq.n	80065d0 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	68da      	ldr	r2, [r3, #12]
 80065b2:	4b2d      	ldr	r3, [pc, #180]	@ (8006668 <HAL_RCC_ClockConfig+0x35c>)
 80065b4:	6a1b      	ldr	r3, [r3, #32]
 80065b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d208      	bcs.n	80065d0 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80065be:	4b2a      	ldr	r3, [pc, #168]	@ (8006668 <HAL_RCC_ClockConfig+0x35c>)
 80065c0:	6a1b      	ldr	r3, [r3, #32]
 80065c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	4927      	ldr	r1, [pc, #156]	@ (8006668 <HAL_RCC_ClockConfig+0x35c>)
 80065cc:	4313      	orrs	r3, r2
 80065ce:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 0308 	and.w	r3, r3, #8
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d012      	beq.n	8006602 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	691a      	ldr	r2, [r3, #16]
 80065e0:	4b21      	ldr	r3, [pc, #132]	@ (8006668 <HAL_RCC_ClockConfig+0x35c>)
 80065e2:	6a1b      	ldr	r3, [r3, #32]
 80065e4:	091b      	lsrs	r3, r3, #4
 80065e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d209      	bcs.n	8006602 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80065ee:	4b1e      	ldr	r3, [pc, #120]	@ (8006668 <HAL_RCC_ClockConfig+0x35c>)
 80065f0:	6a1b      	ldr	r3, [r3, #32]
 80065f2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	011b      	lsls	r3, r3, #4
 80065fc:	491a      	ldr	r1, [pc, #104]	@ (8006668 <HAL_RCC_ClockConfig+0x35c>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 0310 	and.w	r3, r3, #16
 800660a:	2b00      	cmp	r3, #0
 800660c:	d012      	beq.n	8006634 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	695a      	ldr	r2, [r3, #20]
 8006612:	4b15      	ldr	r3, [pc, #84]	@ (8006668 <HAL_RCC_ClockConfig+0x35c>)
 8006614:	6a1b      	ldr	r3, [r3, #32]
 8006616:	0a1b      	lsrs	r3, r3, #8
 8006618:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800661c:	429a      	cmp	r2, r3
 800661e:	d209      	bcs.n	8006634 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8006620:	4b11      	ldr	r3, [pc, #68]	@ (8006668 <HAL_RCC_ClockConfig+0x35c>)
 8006622:	6a1b      	ldr	r3, [r3, #32]
 8006624:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	695b      	ldr	r3, [r3, #20]
 800662c:	021b      	lsls	r3, r3, #8
 800662e:	490e      	ldr	r1, [pc, #56]	@ (8006668 <HAL_RCC_ClockConfig+0x35c>)
 8006630:	4313      	orrs	r3, r2
 8006632:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006634:	f000 f822 	bl	800667c <HAL_RCC_GetSysClockFreq>
 8006638:	4602      	mov	r2, r0
 800663a:	4b0b      	ldr	r3, [pc, #44]	@ (8006668 <HAL_RCC_ClockConfig+0x35c>)
 800663c:	6a1b      	ldr	r3, [r3, #32]
 800663e:	f003 030f 	and.w	r3, r3, #15
 8006642:	490b      	ldr	r1, [pc, #44]	@ (8006670 <HAL_RCC_ClockConfig+0x364>)
 8006644:	5ccb      	ldrb	r3, [r1, r3]
 8006646:	fa22 f303 	lsr.w	r3, r2, r3
 800664a:	4a0a      	ldr	r2, [pc, #40]	@ (8006674 <HAL_RCC_ClockConfig+0x368>)
 800664c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800664e:	4b0a      	ldr	r3, [pc, #40]	@ (8006678 <HAL_RCC_ClockConfig+0x36c>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4618      	mov	r0, r3
 8006654:	f7fc f89c 	bl	8002790 <HAL_InitTick>
 8006658:	4603      	mov	r3, r0
 800665a:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 800665c:	7afb      	ldrb	r3, [r7, #11]
}
 800665e:	4618      	mov	r0, r3
 8006660:	3710      	adds	r7, #16
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	44020c00 	.word	0x44020c00
 800666c:	40022000 	.word	0x40022000
 8006670:	08013644 	.word	0x08013644
 8006674:	20000004 	.word	0x20000004
 8006678:	20000024 	.word	0x20000024

0800667c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800667c:	b480      	push	{r7}
 800667e:	b089      	sub	sp, #36	@ 0x24
 8006680:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8006682:	4b8c      	ldr	r3, [pc, #560]	@ (80068b4 <HAL_RCC_GetSysClockFreq+0x238>)
 8006684:	69db      	ldr	r3, [r3, #28]
 8006686:	f003 0318 	and.w	r3, r3, #24
 800668a:	2b08      	cmp	r3, #8
 800668c:	d102      	bne.n	8006694 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800668e:	4b8a      	ldr	r3, [pc, #552]	@ (80068b8 <HAL_RCC_GetSysClockFreq+0x23c>)
 8006690:	61fb      	str	r3, [r7, #28]
 8006692:	e107      	b.n	80068a4 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006694:	4b87      	ldr	r3, [pc, #540]	@ (80068b4 <HAL_RCC_GetSysClockFreq+0x238>)
 8006696:	69db      	ldr	r3, [r3, #28]
 8006698:	f003 0318 	and.w	r3, r3, #24
 800669c:	2b00      	cmp	r3, #0
 800669e:	d112      	bne.n	80066c6 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80066a0:	4b84      	ldr	r3, [pc, #528]	@ (80068b4 <HAL_RCC_GetSysClockFreq+0x238>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0320 	and.w	r3, r3, #32
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d009      	beq.n	80066c0 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80066ac:	4b81      	ldr	r3, [pc, #516]	@ (80068b4 <HAL_RCC_GetSysClockFreq+0x238>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	08db      	lsrs	r3, r3, #3
 80066b2:	f003 0303 	and.w	r3, r3, #3
 80066b6:	4a81      	ldr	r2, [pc, #516]	@ (80068bc <HAL_RCC_GetSysClockFreq+0x240>)
 80066b8:	fa22 f303 	lsr.w	r3, r2, r3
 80066bc:	61fb      	str	r3, [r7, #28]
 80066be:	e0f1      	b.n	80068a4 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80066c0:	4b7e      	ldr	r3, [pc, #504]	@ (80068bc <HAL_RCC_GetSysClockFreq+0x240>)
 80066c2:	61fb      	str	r3, [r7, #28]
 80066c4:	e0ee      	b.n	80068a4 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80066c6:	4b7b      	ldr	r3, [pc, #492]	@ (80068b4 <HAL_RCC_GetSysClockFreq+0x238>)
 80066c8:	69db      	ldr	r3, [r3, #28]
 80066ca:	f003 0318 	and.w	r3, r3, #24
 80066ce:	2b10      	cmp	r3, #16
 80066d0:	d102      	bne.n	80066d8 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80066d2:	4b7b      	ldr	r3, [pc, #492]	@ (80068c0 <HAL_RCC_GetSysClockFreq+0x244>)
 80066d4:	61fb      	str	r3, [r7, #28]
 80066d6:	e0e5      	b.n	80068a4 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80066d8:	4b76      	ldr	r3, [pc, #472]	@ (80068b4 <HAL_RCC_GetSysClockFreq+0x238>)
 80066da:	69db      	ldr	r3, [r3, #28]
 80066dc:	f003 0318 	and.w	r3, r3, #24
 80066e0:	2b18      	cmp	r3, #24
 80066e2:	f040 80dd 	bne.w	80068a0 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80066e6:	4b73      	ldr	r3, [pc, #460]	@ (80068b4 <HAL_RCC_GetSysClockFreq+0x238>)
 80066e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ea:	f003 0303 	and.w	r3, r3, #3
 80066ee:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80066f0:	4b70      	ldr	r3, [pc, #448]	@ (80068b4 <HAL_RCC_GetSysClockFreq+0x238>)
 80066f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066f4:	0a1b      	lsrs	r3, r3, #8
 80066f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80066fa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80066fc:	4b6d      	ldr	r3, [pc, #436]	@ (80068b4 <HAL_RCC_GetSysClockFreq+0x238>)
 80066fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006700:	091b      	lsrs	r3, r3, #4
 8006702:	f003 0301 	and.w	r3, r3, #1
 8006706:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8006708:	4b6a      	ldr	r3, [pc, #424]	@ (80068b4 <HAL_RCC_GetSysClockFreq+0x238>)
 800670a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 800670c:	08db      	lsrs	r3, r3, #3
 800670e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	fb02 f303 	mul.w	r3, r2, r3
 8006718:	ee07 3a90 	vmov	s15, r3
 800671c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006720:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	2b00      	cmp	r3, #0
 8006728:	f000 80b7 	beq.w	800689a <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	2b01      	cmp	r3, #1
 8006730:	d003      	beq.n	800673a <HAL_RCC_GetSysClockFreq+0xbe>
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	2b03      	cmp	r3, #3
 8006736:	d056      	beq.n	80067e6 <HAL_RCC_GetSysClockFreq+0x16a>
 8006738:	e077      	b.n	800682a <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800673a:	4b5e      	ldr	r3, [pc, #376]	@ (80068b4 <HAL_RCC_GetSysClockFreq+0x238>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0320 	and.w	r3, r3, #32
 8006742:	2b00      	cmp	r3, #0
 8006744:	d02d      	beq.n	80067a2 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006746:	4b5b      	ldr	r3, [pc, #364]	@ (80068b4 <HAL_RCC_GetSysClockFreq+0x238>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	08db      	lsrs	r3, r3, #3
 800674c:	f003 0303 	and.w	r3, r3, #3
 8006750:	4a5a      	ldr	r2, [pc, #360]	@ (80068bc <HAL_RCC_GetSysClockFreq+0x240>)
 8006752:	fa22 f303 	lsr.w	r3, r2, r3
 8006756:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	ee07 3a90 	vmov	s15, r3
 800675e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	ee07 3a90 	vmov	s15, r3
 8006768:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800676c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006770:	4b50      	ldr	r3, [pc, #320]	@ (80068b4 <HAL_RCC_GetSysClockFreq+0x238>)
 8006772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006778:	ee07 3a90 	vmov	s15, r3
 800677c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8006780:	ed97 6a02 	vldr	s12, [r7, #8]
 8006784:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 80068c4 <HAL_RCC_GetSysClockFreq+0x248>
 8006788:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800678c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8006790:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006794:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006798:	ee67 7a27 	vmul.f32	s15, s14, s15
 800679c:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80067a0:	e065      	b.n	800686e <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	ee07 3a90 	vmov	s15, r3
 80067a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ac:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80068c8 <HAL_RCC_GetSysClockFreq+0x24c>
 80067b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067b4:	4b3f      	ldr	r3, [pc, #252]	@ (80068b4 <HAL_RCC_GetSysClockFreq+0x238>)
 80067b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067bc:	ee07 3a90 	vmov	s15, r3
 80067c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80067c4:	ed97 6a02 	vldr	s12, [r7, #8]
 80067c8:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80068c4 <HAL_RCC_GetSysClockFreq+0x248>
 80067cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80067d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80067d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80067dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067e0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80067e4:	e043      	b.n	800686e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	ee07 3a90 	vmov	s15, r3
 80067ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067f0:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80068cc <HAL_RCC_GetSysClockFreq+0x250>
 80067f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067f8:	4b2e      	ldr	r3, [pc, #184]	@ (80068b4 <HAL_RCC_GetSysClockFreq+0x238>)
 80067fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006800:	ee07 3a90 	vmov	s15, r3
 8006804:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006808:	ed97 6a02 	vldr	s12, [r7, #8]
 800680c:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80068c4 <HAL_RCC_GetSysClockFreq+0x248>
 8006810:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006814:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006818:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800681c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006820:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006824:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8006828:	e021      	b.n	800686e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	ee07 3a90 	vmov	s15, r3
 8006830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006834:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80068d0 <HAL_RCC_GetSysClockFreq+0x254>
 8006838:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800683c:	4b1d      	ldr	r3, [pc, #116]	@ (80068b4 <HAL_RCC_GetSysClockFreq+0x238>)
 800683e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006844:	ee07 3a90 	vmov	s15, r3
 8006848:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800684c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006850:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80068c4 <HAL_RCC_GetSysClockFreq+0x248>
 8006854:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006858:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800685c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006860:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006864:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006868:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800686c:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800686e:	4b11      	ldr	r3, [pc, #68]	@ (80068b4 <HAL_RCC_GetSysClockFreq+0x238>)
 8006870:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006872:	0a5b      	lsrs	r3, r3, #9
 8006874:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006878:	3301      	adds	r3, #1
 800687a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	ee07 3a90 	vmov	s15, r3
 8006882:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006886:	edd7 6a06 	vldr	s13, [r7, #24]
 800688a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800688e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006892:	ee17 3a90 	vmov	r3, s15
 8006896:	61fb      	str	r3, [r7, #28]
 8006898:	e004      	b.n	80068a4 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 800689a:	2300      	movs	r3, #0
 800689c:	61fb      	str	r3, [r7, #28]
 800689e:	e001      	b.n	80068a4 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80068a0:	4b06      	ldr	r3, [pc, #24]	@ (80068bc <HAL_RCC_GetSysClockFreq+0x240>)
 80068a2:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80068a4:	69fb      	ldr	r3, [r7, #28]
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3724      	adds	r7, #36	@ 0x24
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	44020c00 	.word	0x44020c00
 80068b8:	003d0900 	.word	0x003d0900
 80068bc:	03d09000 	.word	0x03d09000
 80068c0:	007a1200 	.word	0x007a1200
 80068c4:	46000000 	.word	0x46000000
 80068c8:	4c742400 	.word	0x4c742400
 80068cc:	4af42400 	.word	0x4af42400
 80068d0:	4a742400 	.word	0x4a742400

080068d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80068d8:	f7ff fed0 	bl	800667c <HAL_RCC_GetSysClockFreq>
 80068dc:	4602      	mov	r2, r0
 80068de:	4b08      	ldr	r3, [pc, #32]	@ (8006900 <HAL_RCC_GetHCLKFreq+0x2c>)
 80068e0:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80068e2:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80068e6:	4907      	ldr	r1, [pc, #28]	@ (8006904 <HAL_RCC_GetHCLKFreq+0x30>)
 80068e8:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80068ea:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80068ee:	fa22 f303 	lsr.w	r3, r2, r3
 80068f2:	4a05      	ldr	r2, [pc, #20]	@ (8006908 <HAL_RCC_GetHCLKFreq+0x34>)
 80068f4:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80068f6:	4b04      	ldr	r3, [pc, #16]	@ (8006908 <HAL_RCC_GetHCLKFreq+0x34>)
 80068f8:	681b      	ldr	r3, [r3, #0]
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	44020c00 	.word	0x44020c00
 8006904:	08013644 	.word	0x08013644
 8006908:	20000004 	.word	0x20000004

0800690c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8006910:	f7ff ffe0 	bl	80068d4 <HAL_RCC_GetHCLKFreq>
 8006914:	4602      	mov	r2, r0
 8006916:	4b06      	ldr	r3, [pc, #24]	@ (8006930 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006918:	6a1b      	ldr	r3, [r3, #32]
 800691a:	091b      	lsrs	r3, r3, #4
 800691c:	f003 0307 	and.w	r3, r3, #7
 8006920:	4904      	ldr	r1, [pc, #16]	@ (8006934 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006922:	5ccb      	ldrb	r3, [r1, r3]
 8006924:	f003 031f 	and.w	r3, r3, #31
 8006928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800692c:	4618      	mov	r0, r3
 800692e:	bd80      	pop	{r7, pc}
 8006930:	44020c00 	.word	0x44020c00
 8006934:	08013654 	.word	0x08013654

08006938 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 800693c:	f7ff ffca 	bl	80068d4 <HAL_RCC_GetHCLKFreq>
 8006940:	4602      	mov	r2, r0
 8006942:	4b06      	ldr	r3, [pc, #24]	@ (800695c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	0a1b      	lsrs	r3, r3, #8
 8006948:	f003 0307 	and.w	r3, r3, #7
 800694c:	4904      	ldr	r1, [pc, #16]	@ (8006960 <HAL_RCC_GetPCLK2Freq+0x28>)
 800694e:	5ccb      	ldrb	r3, [r1, r3]
 8006950:	f003 031f 	and.w	r3, r3, #31
 8006954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006958:	4618      	mov	r0, r3
 800695a:	bd80      	pop	{r7, pc}
 800695c:	44020c00 	.word	0x44020c00
 8006960:	08013654 	.word	0x08013654

08006964 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8006968:	f7ff ffb4 	bl	80068d4 <HAL_RCC_GetHCLKFreq>
 800696c:	4602      	mov	r2, r0
 800696e:	4b06      	ldr	r3, [pc, #24]	@ (8006988 <HAL_RCC_GetPCLK3Freq+0x24>)
 8006970:	6a1b      	ldr	r3, [r3, #32]
 8006972:	0b1b      	lsrs	r3, r3, #12
 8006974:	f003 0307 	and.w	r3, r3, #7
 8006978:	4904      	ldr	r1, [pc, #16]	@ (800698c <HAL_RCC_GetPCLK3Freq+0x28>)
 800697a:	5ccb      	ldrb	r3, [r1, r3]
 800697c:	f003 031f 	and.w	r3, r3, #31
 8006980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006984:	4618      	mov	r0, r3
 8006986:	bd80      	pop	{r7, pc}
 8006988:	44020c00 	.word	0x44020c00
 800698c:	08013654 	.word	0x08013654

08006990 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8006990:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006994:	b0d8      	sub	sp, #352	@ 0x160
 8006996:	af00      	add	r7, sp, #0
 8006998:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800699c:	2300      	movs	r3, #0
 800699e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80069a2:	2300      	movs	r3, #0
 80069a4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80069a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b0:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 80069b4:	2500      	movs	r5, #0
 80069b6:	ea54 0305 	orrs.w	r3, r4, r5
 80069ba:	d00b      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80069bc:	4bcd      	ldr	r3, [pc, #820]	@ (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80069be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80069c2:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80069c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069cc:	4ac9      	ldr	r2, [pc, #804]	@ (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80069ce:	430b      	orrs	r3, r1
 80069d0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80069d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069dc:	f002 0801 	and.w	r8, r2, #1
 80069e0:	f04f 0900 	mov.w	r9, #0
 80069e4:	ea58 0309 	orrs.w	r3, r8, r9
 80069e8:	d042      	beq.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80069ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069f0:	2b05      	cmp	r3, #5
 80069f2:	d823      	bhi.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0xac>
 80069f4:	a201      	add	r2, pc, #4	@ (adr r2, 80069fc <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80069f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fa:	bf00      	nop
 80069fc:	08006a45 	.word	0x08006a45
 8006a00:	08006a15 	.word	0x08006a15
 8006a04:	08006a29 	.word	0x08006a29
 8006a08:	08006a45 	.word	0x08006a45
 8006a0c:	08006a45 	.word	0x08006a45
 8006a10:	08006a45 	.word	0x08006a45
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006a14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a18:	3308      	adds	r3, #8
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f004 fee0 	bl	800b7e0 <RCCEx_PLL2_Config>
 8006a20:	4603      	mov	r3, r0
 8006a22:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8006a26:	e00e      	b.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006a28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a2c:	3330      	adds	r3, #48	@ 0x30
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f004 ff6e 	bl	800b910 <RCCEx_PLL3_Config>
 8006a34:	4603      	mov	r3, r0
 8006a36:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8006a3a:	e004      	b.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006a42:	e000      	b.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8006a44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a46:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d10c      	bne.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8006a4e:	4ba9      	ldr	r3, [pc, #676]	@ (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006a50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006a54:	f023 0107 	bic.w	r1, r3, #7
 8006a58:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a5e:	4aa5      	ldr	r2, [pc, #660]	@ (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006a60:	430b      	orrs	r3, r1
 8006a62:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006a66:	e003      	b.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a68:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006a6c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006a70:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a78:	f002 0a02 	and.w	sl, r2, #2
 8006a7c:	f04f 0b00 	mov.w	fp, #0
 8006a80:	ea5a 030b 	orrs.w	r3, sl, fp
 8006a84:	f000 8088 	beq.w	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8006a88:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a8e:	2b28      	cmp	r3, #40	@ 0x28
 8006a90:	d868      	bhi.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006a92:	a201      	add	r2, pc, #4	@ (adr r2, 8006a98 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8006a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a98:	08006b6d 	.word	0x08006b6d
 8006a9c:	08006b65 	.word	0x08006b65
 8006aa0:	08006b65 	.word	0x08006b65
 8006aa4:	08006b65 	.word	0x08006b65
 8006aa8:	08006b65 	.word	0x08006b65
 8006aac:	08006b65 	.word	0x08006b65
 8006ab0:	08006b65 	.word	0x08006b65
 8006ab4:	08006b65 	.word	0x08006b65
 8006ab8:	08006b3d 	.word	0x08006b3d
 8006abc:	08006b65 	.word	0x08006b65
 8006ac0:	08006b65 	.word	0x08006b65
 8006ac4:	08006b65 	.word	0x08006b65
 8006ac8:	08006b65 	.word	0x08006b65
 8006acc:	08006b65 	.word	0x08006b65
 8006ad0:	08006b65 	.word	0x08006b65
 8006ad4:	08006b65 	.word	0x08006b65
 8006ad8:	08006b51 	.word	0x08006b51
 8006adc:	08006b65 	.word	0x08006b65
 8006ae0:	08006b65 	.word	0x08006b65
 8006ae4:	08006b65 	.word	0x08006b65
 8006ae8:	08006b65 	.word	0x08006b65
 8006aec:	08006b65 	.word	0x08006b65
 8006af0:	08006b65 	.word	0x08006b65
 8006af4:	08006b65 	.word	0x08006b65
 8006af8:	08006b6d 	.word	0x08006b6d
 8006afc:	08006b65 	.word	0x08006b65
 8006b00:	08006b65 	.word	0x08006b65
 8006b04:	08006b65 	.word	0x08006b65
 8006b08:	08006b65 	.word	0x08006b65
 8006b0c:	08006b65 	.word	0x08006b65
 8006b10:	08006b65 	.word	0x08006b65
 8006b14:	08006b65 	.word	0x08006b65
 8006b18:	08006b6d 	.word	0x08006b6d
 8006b1c:	08006b65 	.word	0x08006b65
 8006b20:	08006b65 	.word	0x08006b65
 8006b24:	08006b65 	.word	0x08006b65
 8006b28:	08006b65 	.word	0x08006b65
 8006b2c:	08006b65 	.word	0x08006b65
 8006b30:	08006b65 	.word	0x08006b65
 8006b34:	08006b65 	.word	0x08006b65
 8006b38:	08006b6d 	.word	0x08006b6d
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006b3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b40:	3308      	adds	r3, #8
 8006b42:	4618      	mov	r0, r3
 8006b44:	f004 fe4c 	bl	800b7e0 <RCCEx_PLL2_Config>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8006b4e:	e00e      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006b50:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b54:	3330      	adds	r3, #48	@ 0x30
 8006b56:	4618      	mov	r0, r3
 8006b58:	f004 feda 	bl	800b910 <RCCEx_PLL3_Config>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8006b62:	e004      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006b6a:	e000      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8006b6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b6e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d10c      	bne.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8006b76:	4b5f      	ldr	r3, [pc, #380]	@ (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006b78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006b7c:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006b80:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b86:	4a5b      	ldr	r2, [pc, #364]	@ (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006b88:	430b      	orrs	r3, r1
 8006b8a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006b8e:	e003      	b.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b90:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006b94:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006b98:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba0:	f002 0304 	and.w	r3, r2, #4
 8006ba4:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8006ba8:	2300      	movs	r3, #0
 8006baa:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8006bae:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	d04e      	beq.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8006bb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006bbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bbe:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006bc2:	d02c      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8006bc4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006bc8:	d825      	bhi.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006bca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bce:	d028      	beq.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006bd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bd4:	d81f      	bhi.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006bd6:	2bc0      	cmp	r3, #192	@ 0xc0
 8006bd8:	d025      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8006bda:	2bc0      	cmp	r3, #192	@ 0xc0
 8006bdc:	d81b      	bhi.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006bde:	2b80      	cmp	r3, #128	@ 0x80
 8006be0:	d00f      	beq.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8006be2:	2b80      	cmp	r3, #128	@ 0x80
 8006be4:	d817      	bhi.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d01f      	beq.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8006bea:	2b40      	cmp	r3, #64	@ 0x40
 8006bec:	d113      	bne.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006bee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006bf2:	3308      	adds	r3, #8
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f004 fdf3 	bl	800b7e0 <RCCEx_PLL2_Config>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8006c00:	e014      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006c02:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c06:	3330      	adds	r3, #48	@ 0x30
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f004 fe81 	bl	800b910 <RCCEx_PLL3_Config>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8006c14:	e00a      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006c1c:	e006      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006c1e:	bf00      	nop
 8006c20:	e004      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006c22:	bf00      	nop
 8006c24:	e002      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006c26:	bf00      	nop
 8006c28:	e000      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006c2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c2c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d10c      	bne.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8006c34:	4b2f      	ldr	r3, [pc, #188]	@ (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006c36:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006c3a:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006c3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c44:	4a2b      	ldr	r2, [pc, #172]	@ (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006c46:	430b      	orrs	r3, r1
 8006c48:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006c4c:	e003      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c4e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006c52:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006c56:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5e:	f002 0308 	and.w	r3, r2, #8
 8006c62:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8006c66:	2300      	movs	r3, #0
 8006c68:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8006c6c:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8006c70:	460b      	mov	r3, r1
 8006c72:	4313      	orrs	r3, r2
 8006c74:	d056      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8006c76:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c7c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006c80:	d031      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8006c82:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006c86:	d82a      	bhi.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006c88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c8c:	d02d      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8006c8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c92:	d824      	bhi.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006c94:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006c98:	d029      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8006c9a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006c9e:	d81e      	bhi.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006ca0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ca4:	d011      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8006ca6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006caa:	d818      	bhi.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d023      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006cb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cb4:	d113      	bne.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006cb6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cba:	3308      	adds	r3, #8
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f004 fd8f 	bl	800b7e0 <RCCEx_PLL2_Config>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8006cc8:	e017      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006cca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cce:	3330      	adds	r3, #48	@ 0x30
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f004 fe1d 	bl	800b910 <RCCEx_PLL3_Config>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8006cdc:	e00d      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006ce4:	e009      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8006ce6:	bf00      	nop
 8006ce8:	e007      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8006cea:	bf00      	nop
 8006cec:	e005      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8006cee:	bf00      	nop
 8006cf0:	e003      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8006cf2:	bf00      	nop
 8006cf4:	44020c00 	.word	0x44020c00
        break;
 8006cf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cfa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d10c      	bne.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8006d02:	4bbb      	ldr	r3, [pc, #748]	@ (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8006d04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006d08:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8006d0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d12:	4ab7      	ldr	r2, [pc, #732]	@ (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8006d14:	430b      	orrs	r3, r1
 8006d16:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006d1a:	e003      	b.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d1c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006d20:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006d24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2c:	f002 0310 	and.w	r3, r2, #16
 8006d30:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8006d34:	2300      	movs	r3, #0
 8006d36:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8006d3a:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 8006d3e:	460b      	mov	r3, r1
 8006d40:	4313      	orrs	r3, r2
 8006d42:	d053      	beq.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8006d44:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d4a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006d4e:	d031      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8006d50:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006d54:	d82a      	bhi.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006d56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d5a:	d02d      	beq.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8006d5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d60:	d824      	bhi.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006d62:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006d66:	d029      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8006d68:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006d6c:	d81e      	bhi.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006d6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d72:	d011      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006d74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d78:	d818      	bhi.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d020      	beq.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8006d7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d82:	d113      	bne.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006d84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d88:	3308      	adds	r3, #8
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f004 fd28 	bl	800b7e0 <RCCEx_PLL2_Config>
 8006d90:	4603      	mov	r3, r0
 8006d92:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8006d96:	e014      	b.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006d98:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d9c:	3330      	adds	r3, #48	@ 0x30
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f004 fdb6 	bl	800b910 <RCCEx_PLL3_Config>
 8006da4:	4603      	mov	r3, r0
 8006da6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8006daa:	e00a      	b.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006db2:	e006      	b.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8006db4:	bf00      	nop
 8006db6:	e004      	b.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8006db8:	bf00      	nop
 8006dba:	e002      	b.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8006dbc:	bf00      	nop
 8006dbe:	e000      	b.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8006dc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dc2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d10c      	bne.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8006dca:	4b89      	ldr	r3, [pc, #548]	@ (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8006dcc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006dd0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006dd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006dd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006dda:	4a85      	ldr	r2, [pc, #532]	@ (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8006ddc:	430b      	orrs	r3, r1
 8006dde:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006de2:	e003      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006de4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006de8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006dec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df4:	f002 0320 	and.w	r3, r2, #32
 8006df8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8006e02:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 8006e06:	460b      	mov	r3, r1
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	d053      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8006e0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e12:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006e16:	d031      	beq.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8006e18:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006e1c:	d82a      	bhi.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8006e1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e22:	d02d      	beq.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8006e24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e28:	d824      	bhi.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8006e2a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8006e2e:	d029      	beq.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8006e30:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8006e34:	d81e      	bhi.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8006e36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e3a:	d011      	beq.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006e3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e40:	d818      	bhi.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d020      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8006e46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e4a:	d113      	bne.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006e4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e50:	3308      	adds	r3, #8
 8006e52:	4618      	mov	r0, r3
 8006e54:	f004 fcc4 	bl	800b7e0 <RCCEx_PLL2_Config>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8006e5e:	e014      	b.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006e60:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e64:	3330      	adds	r3, #48	@ 0x30
 8006e66:	4618      	mov	r0, r3
 8006e68:	f004 fd52 	bl	800b910 <RCCEx_PLL3_Config>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8006e72:	e00a      	b.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006e7a:	e006      	b.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8006e7c:	bf00      	nop
 8006e7e:	e004      	b.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8006e80:	bf00      	nop
 8006e82:	e002      	b.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8006e84:	bf00      	nop
 8006e86:	e000      	b.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8006e88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e8a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d10c      	bne.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8006e92:	4b57      	ldr	r3, [pc, #348]	@ (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8006e94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006e98:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8006e9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ea2:	4a53      	ldr	r2, [pc, #332]	@ (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8006ea4:	430b      	orrs	r3, r1
 8006ea6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006eaa:	e003      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eac:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006eb0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006eb4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ebc:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006ec0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8006eca:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 8006ece:	460b      	mov	r3, r1
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	d053      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8006ed4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ed8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006eda:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006ede:	d031      	beq.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8006ee0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006ee4:	d82a      	bhi.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8006ee6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006eea:	d02d      	beq.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8006eec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ef0:	d824      	bhi.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8006ef2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006ef6:	d029      	beq.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006ef8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006efc:	d81e      	bhi.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8006efe:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006f02:	d011      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8006f04:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006f08:	d818      	bhi.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d020      	beq.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006f0e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006f12:	d113      	bne.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006f14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f18:	3308      	adds	r3, #8
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f004 fc60 	bl	800b7e0 <RCCEx_PLL2_Config>
 8006f20:	4603      	mov	r3, r0
 8006f22:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8006f26:	e014      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006f28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f2c:	3330      	adds	r3, #48	@ 0x30
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f004 fcee 	bl	800b910 <RCCEx_PLL3_Config>
 8006f34:	4603      	mov	r3, r0
 8006f36:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8006f3a:	e00a      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006f42:	e006      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8006f44:	bf00      	nop
 8006f46:	e004      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8006f48:	bf00      	nop
 8006f4a:	e002      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8006f4c:	bf00      	nop
 8006f4e:	e000      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8006f50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f52:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d10c      	bne.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8006f5a:	4b25      	ldr	r3, [pc, #148]	@ (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8006f5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006f60:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8006f64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f6a:	4a21      	ldr	r2, [pc, #132]	@ (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8006f6c:	430b      	orrs	r3, r1
 8006f6e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006f72:	e003      	b.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f74:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006f78:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006f7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f84:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006f88:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8006f92:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 8006f96:	460b      	mov	r3, r1
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	d055      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8006f9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006fa0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006fa2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006fa6:	d033      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8006fa8:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006fac:	d82c      	bhi.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8006fae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006fb2:	d02f      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8006fb4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006fb8:	d826      	bhi.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8006fba:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006fbe:	d02b      	beq.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8006fc0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006fc4:	d820      	bhi.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8006fc6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006fca:	d013      	beq.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006fcc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006fd0:	d81a      	bhi.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d022      	beq.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8006fd6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006fda:	d115      	bne.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006fdc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006fe0:	3308      	adds	r3, #8
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f004 fbfc 	bl	800b7e0 <RCCEx_PLL2_Config>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8006fee:	e016      	b.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8006ff0:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006ff4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ff8:	3330      	adds	r3, #48	@ 0x30
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f004 fc88 	bl	800b910 <RCCEx_PLL3_Config>
 8007000:	4603      	mov	r3, r0
 8007002:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8007006:	e00a      	b.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800700e:	e006      	b.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8007010:	bf00      	nop
 8007012:	e004      	b.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8007014:	bf00      	nop
 8007016:	e002      	b.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8007018:	bf00      	nop
 800701a:	e000      	b.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800701c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800701e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007022:	2b00      	cmp	r3, #0
 8007024:	d10c      	bne.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8007026:	4bbb      	ldr	r3, [pc, #748]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007028:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800702c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007030:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007034:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007036:	4ab7      	ldr	r2, [pc, #732]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007038:	430b      	orrs	r3, r1
 800703a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800703e:	e003      	b.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007040:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007044:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8007048:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800704c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007050:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8007054:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8007058:	2300      	movs	r3, #0
 800705a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800705e:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8007062:	460b      	mov	r3, r1
 8007064:	4313      	orrs	r3, r2
 8007066:	d053      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8007068:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800706c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800706e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007072:	d031      	beq.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8007074:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007078:	d82a      	bhi.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800707a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800707e:	d02d      	beq.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8007080:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007084:	d824      	bhi.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8007086:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800708a:	d029      	beq.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x750>
 800708c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007090:	d81e      	bhi.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8007092:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007096:	d011      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8007098:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800709c:	d818      	bhi.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d020      	beq.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x754>
 80070a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80070a6:	d113      	bne.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80070a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070ac:	3308      	adds	r3, #8
 80070ae:	4618      	mov	r0, r3
 80070b0:	f004 fb96 	bl	800b7e0 <RCCEx_PLL2_Config>
 80070b4:	4603      	mov	r3, r0
 80070b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80070ba:	e014      	b.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80070bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070c0:	3330      	adds	r3, #48	@ 0x30
 80070c2:	4618      	mov	r0, r3
 80070c4:	f004 fc24 	bl	800b910 <RCCEx_PLL3_Config>
 80070c8:	4603      	mov	r3, r0
 80070ca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80070ce:	e00a      	b.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80070d6:	e006      	b.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80070d8:	bf00      	nop
 80070da:	e004      	b.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80070dc:	bf00      	nop
 80070de:	e002      	b.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80070e0:	bf00      	nop
 80070e2:	e000      	b.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80070e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070e6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d10c      	bne.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 80070ee:	4b89      	ldr	r3, [pc, #548]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80070f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80070f4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80070f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80070fe:	4a85      	ldr	r2, [pc, #532]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007100:	430b      	orrs	r3, r1
 8007102:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007106:	e003      	b.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007108:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800710c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8007110:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007118:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800711c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007120:	2300      	movs	r3, #0
 8007122:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007126:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800712a:	460b      	mov	r3, r1
 800712c:	4313      	orrs	r3, r2
 800712e:	d055      	beq.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8007130:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007134:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007138:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800713c:	d031      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x812>
 800713e:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8007142:	d82a      	bhi.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8007144:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007148:	d02d      	beq.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x816>
 800714a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800714e:	d824      	bhi.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8007150:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8007154:	d029      	beq.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8007156:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800715a:	d81e      	bhi.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800715c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007160:	d011      	beq.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8007162:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007166:	d818      	bhi.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8007168:	2b00      	cmp	r3, #0
 800716a:	d020      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800716c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007170:	d113      	bne.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007172:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007176:	3308      	adds	r3, #8
 8007178:	4618      	mov	r0, r3
 800717a:	f004 fb31 	bl	800b7e0 <RCCEx_PLL2_Config>
 800717e:	4603      	mov	r3, r0
 8007180:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8007184:	e014      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007186:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800718a:	3330      	adds	r3, #48	@ 0x30
 800718c:	4618      	mov	r0, r3
 800718e:	f004 fbbf 	bl	800b910 <RCCEx_PLL3_Config>
 8007192:	4603      	mov	r3, r0
 8007194:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8007198:	e00a      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80071a0:	e006      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80071a2:	bf00      	nop
 80071a4:	e004      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80071a6:	bf00      	nop
 80071a8:	e002      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80071aa:	bf00      	nop
 80071ac:	e000      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80071ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071b0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d10d      	bne.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 80071b8:	4b56      	ldr	r3, [pc, #344]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80071ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80071be:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 80071c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071ca:	4a52      	ldr	r2, [pc, #328]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80071cc:	430b      	orrs	r3, r1
 80071ce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80071d2:	e003      	b.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071d4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80071d8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 80071dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e4:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80071e8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80071ec:	2300      	movs	r3, #0
 80071ee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80071f2:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80071f6:	460b      	mov	r3, r1
 80071f8:	4313      	orrs	r3, r2
 80071fa:	d044      	beq.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 80071fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007200:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007204:	2b05      	cmp	r3, #5
 8007206:	d823      	bhi.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8007208:	a201      	add	r2, pc, #4	@ (adr r2, 8007210 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800720a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800720e:	bf00      	nop
 8007210:	08007259 	.word	0x08007259
 8007214:	08007229 	.word	0x08007229
 8007218:	0800723d 	.word	0x0800723d
 800721c:	08007259 	.word	0x08007259
 8007220:	08007259 	.word	0x08007259
 8007224:	08007259 	.word	0x08007259
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007228:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800722c:	3308      	adds	r3, #8
 800722e:	4618      	mov	r0, r3
 8007230:	f004 fad6 	bl	800b7e0 <RCCEx_PLL2_Config>
 8007234:	4603      	mov	r3, r0
 8007236:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800723a:	e00e      	b.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800723c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007240:	3330      	adds	r3, #48	@ 0x30
 8007242:	4618      	mov	r0, r3
 8007244:	f004 fb64 	bl	800b910 <RCCEx_PLL3_Config>
 8007248:	4603      	mov	r3, r0
 800724a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800724e:	e004      	b.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007256:	e000      	b.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8007258:	bf00      	nop
    }

    if (ret == HAL_OK)
 800725a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800725e:	2b00      	cmp	r3, #0
 8007260:	d10d      	bne.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8007262:	4b2c      	ldr	r3, [pc, #176]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007264:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007268:	f023 0107 	bic.w	r1, r3, #7
 800726c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007270:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007274:	4a27      	ldr	r2, [pc, #156]	@ (8007314 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007276:	430b      	orrs	r3, r1
 8007278:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800727c:	e003      	b.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800727e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007282:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8007286:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800728a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007292:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007296:	2300      	movs	r3, #0
 8007298:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800729c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80072a0:	460b      	mov	r3, r1
 80072a2:	4313      	orrs	r3, r2
 80072a4:	d04f      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 80072a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072ae:	2b50      	cmp	r3, #80	@ 0x50
 80072b0:	d029      	beq.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80072b2:	2b50      	cmp	r3, #80	@ 0x50
 80072b4:	d823      	bhi.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80072b6:	2b40      	cmp	r3, #64	@ 0x40
 80072b8:	d027      	beq.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x97a>
 80072ba:	2b40      	cmp	r3, #64	@ 0x40
 80072bc:	d81f      	bhi.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80072be:	2b30      	cmp	r3, #48	@ 0x30
 80072c0:	d025      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x97e>
 80072c2:	2b30      	cmp	r3, #48	@ 0x30
 80072c4:	d81b      	bhi.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80072c6:	2b20      	cmp	r3, #32
 80072c8:	d00f      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80072ca:	2b20      	cmp	r3, #32
 80072cc:	d817      	bhi.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d022      	beq.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80072d2:	2b10      	cmp	r3, #16
 80072d4:	d113      	bne.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80072d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072da:	3308      	adds	r3, #8
 80072dc:	4618      	mov	r0, r3
 80072de:	f004 fa7f 	bl	800b7e0 <RCCEx_PLL2_Config>
 80072e2:	4603      	mov	r3, r0
 80072e4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80072e8:	e017      	b.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80072ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072ee:	3330      	adds	r3, #48	@ 0x30
 80072f0:	4618      	mov	r0, r3
 80072f2:	f004 fb0d 	bl	800b910 <RCCEx_PLL3_Config>
 80072f6:	4603      	mov	r3, r0
 80072f8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80072fc:	e00d      	b.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007304:	e009      	b.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8007306:	bf00      	nop
 8007308:	e007      	b.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800730a:	bf00      	nop
 800730c:	e005      	b.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800730e:	bf00      	nop
 8007310:	e003      	b.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8007312:	bf00      	nop
 8007314:	44020c00 	.word	0x44020c00
        break;
 8007318:	bf00      	nop
    }

    if (ret == HAL_OK)
 800731a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800731e:	2b00      	cmp	r3, #0
 8007320:	d10d      	bne.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8007322:	4baf      	ldr	r3, [pc, #700]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007324:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007328:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800732c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007330:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007334:	4aaa      	ldr	r2, [pc, #680]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007336:	430b      	orrs	r3, r1
 8007338:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800733c:	e003      	b.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800733e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007342:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007346:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800734a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007352:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007356:	2300      	movs	r3, #0
 8007358:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800735c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007360:	460b      	mov	r3, r1
 8007362:	4313      	orrs	r3, r2
 8007364:	d055      	beq.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8007366:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800736a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800736e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007372:	d031      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8007374:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007378:	d82a      	bhi.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800737a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800737e:	d02d      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8007380:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007384:	d824      	bhi.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8007386:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800738a:	d029      	beq.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 800738c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007390:	d81e      	bhi.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8007392:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007396:	d011      	beq.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8007398:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800739c:	d818      	bhi.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d020      	beq.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 80073a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80073a6:	d113      	bne.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80073a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80073ac:	3308      	adds	r3, #8
 80073ae:	4618      	mov	r0, r3
 80073b0:	f004 fa16 	bl	800b7e0 <RCCEx_PLL2_Config>
 80073b4:	4603      	mov	r3, r0
 80073b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80073ba:	e014      	b.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80073bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80073c0:	3330      	adds	r3, #48	@ 0x30
 80073c2:	4618      	mov	r0, r3
 80073c4:	f004 faa4 	bl	800b910 <RCCEx_PLL3_Config>
 80073c8:	4603      	mov	r3, r0
 80073ca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80073ce:	e00a      	b.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80073d6:	e006      	b.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80073d8:	bf00      	nop
 80073da:	e004      	b.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80073dc:	bf00      	nop
 80073de:	e002      	b.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80073e0:	bf00      	nop
 80073e2:	e000      	b.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80073e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073e6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d10d      	bne.n	800740a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80073ee:	4b7c      	ldr	r3, [pc, #496]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80073f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80073f4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80073f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80073fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007400:	4a77      	ldr	r2, [pc, #476]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007402:	430b      	orrs	r3, r1
 8007404:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007408:	e003      	b.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800740a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800740e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007412:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800741e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007422:	2300      	movs	r3, #0
 8007424:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007428:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800742c:	460b      	mov	r3, r1
 800742e:	4313      	orrs	r3, r2
 8007430:	d03d      	beq.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8007432:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800743a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800743e:	d01b      	beq.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8007440:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007444:	d814      	bhi.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8007446:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800744a:	d017      	beq.n	800747c <HAL_RCCEx_PeriphCLKConfig+0xaec>
 800744c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007450:	d80e      	bhi.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8007452:	2b00      	cmp	r3, #0
 8007454:	d014      	beq.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8007456:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800745a:	d109      	bne.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800745c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007460:	3330      	adds	r3, #48	@ 0x30
 8007462:	4618      	mov	r0, r3
 8007464:	f004 fa54 	bl	800b910 <RCCEx_PLL3_Config>
 8007468:	4603      	mov	r3, r0
 800746a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 800746e:	e008      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007476:	e004      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8007478:	bf00      	nop
 800747a:	e002      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800747c:	bf00      	nop
 800747e:	e000      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8007480:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007482:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007486:	2b00      	cmp	r3, #0
 8007488:	d10d      	bne.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800748a:	4b55      	ldr	r3, [pc, #340]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800748c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007490:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007494:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800749c:	4a50      	ldr	r2, [pc, #320]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800749e:	430b      	orrs	r3, r1
 80074a0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80074a4:	e003      	b.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80074aa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80074ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80074ba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80074be:	2300      	movs	r3, #0
 80074c0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80074c4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80074c8:	460b      	mov	r3, r1
 80074ca:	4313      	orrs	r3, r2
 80074cc:	d03d      	beq.n	800754a <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 80074ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80074d6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80074da:	d01b      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 80074dc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80074e0:	d814      	bhi.n	800750c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80074e2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80074e6:	d017      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 80074e8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80074ec:	d80e      	bhi.n	800750c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d014      	beq.n	800751c <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 80074f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80074f6:	d109      	bne.n	800750c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80074f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074fc:	3330      	adds	r3, #48	@ 0x30
 80074fe:	4618      	mov	r0, r3
 8007500:	f004 fa06 	bl	800b910 <RCCEx_PLL3_Config>
 8007504:	4603      	mov	r3, r0
 8007506:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800750a:	e008      	b.n	800751e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800750c:	2301      	movs	r3, #1
 800750e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007512:	e004      	b.n	800751e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8007514:	bf00      	nop
 8007516:	e002      	b.n	800751e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8007518:	bf00      	nop
 800751a:	e000      	b.n	800751e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800751c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800751e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007522:	2b00      	cmp	r3, #0
 8007524:	d10d      	bne.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8007526:	4b2e      	ldr	r3, [pc, #184]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007528:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800752c:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8007530:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007534:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007538:	4a29      	ldr	r2, [pc, #164]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800753a:	430b      	orrs	r3, r1
 800753c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007540:	e003      	b.n	800754a <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007542:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007546:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800754a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800754e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007552:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007556:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800755a:	2300      	movs	r3, #0
 800755c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007560:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007564:	460b      	mov	r3, r1
 8007566:	4313      	orrs	r3, r2
 8007568:	d040      	beq.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 800756a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800756e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007572:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007576:	d01b      	beq.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8007578:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800757c:	d814      	bhi.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800757e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007582:	d017      	beq.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007584:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007588:	d80e      	bhi.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800758a:	2b00      	cmp	r3, #0
 800758c:	d014      	beq.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800758e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007592:	d109      	bne.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007594:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007598:	3330      	adds	r3, #48	@ 0x30
 800759a:	4618      	mov	r0, r3
 800759c:	f004 f9b8 	bl	800b910 <RCCEx_PLL3_Config>
 80075a0:	4603      	mov	r3, r0
 80075a2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 80075a6:	e008      	b.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80075ae:	e004      	b.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80075b0:	bf00      	nop
 80075b2:	e002      	b.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80075b4:	bf00      	nop
 80075b6:	e000      	b.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80075b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075ba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d110      	bne.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80075c2:	4b07      	ldr	r3, [pc, #28]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80075c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80075c8:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80075cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80075d4:	4a02      	ldr	r2, [pc, #8]	@ (80075e0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80075d6:	430b      	orrs	r3, r1
 80075d8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80075dc:	e006      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 80075de:	bf00      	nop
 80075e0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075e4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80075e8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80075ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f4:	2100      	movs	r1, #0
 80075f6:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 80075fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007602:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007606:	460b      	mov	r3, r1
 8007608:	4313      	orrs	r3, r2
 800760a:	d03d      	beq.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 800760c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007610:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007614:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007618:	d01b      	beq.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 800761a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800761e:	d814      	bhi.n	800764a <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8007620:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007624:	d017      	beq.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8007626:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800762a:	d80e      	bhi.n	800764a <HAL_RCCEx_PeriphCLKConfig+0xcba>
 800762c:	2b00      	cmp	r3, #0
 800762e:	d014      	beq.n	800765a <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8007630:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007634:	d109      	bne.n	800764a <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007636:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800763a:	3330      	adds	r3, #48	@ 0x30
 800763c:	4618      	mov	r0, r3
 800763e:	f004 f967 	bl	800b910 <RCCEx_PLL3_Config>
 8007642:	4603      	mov	r3, r0
 8007644:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8007648:	e008      	b.n	800765c <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007650:	e004      	b.n	800765c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8007652:	bf00      	nop
 8007654:	e002      	b.n	800765c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8007656:	bf00      	nop
 8007658:	e000      	b.n	800765c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800765a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800765c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007660:	2b00      	cmp	r3, #0
 8007662:	d10d      	bne.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8007664:	4bbe      	ldr	r3, [pc, #760]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007666:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800766a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800766e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007672:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007676:	4aba      	ldr	r2, [pc, #744]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007678:	430b      	orrs	r3, r1
 800767a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800767e:	e003      	b.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007680:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007684:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8007688:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800768c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007690:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007694:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007698:	2300      	movs	r3, #0
 800769a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800769e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80076a2:	460b      	mov	r3, r1
 80076a4:	4313      	orrs	r3, r2
 80076a6:	d035      	beq.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80076a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80076b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80076b4:	d015      	beq.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 80076b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80076ba:	d80e      	bhi.n	80076da <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d012      	beq.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 80076c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80076c4:	d109      	bne.n	80076da <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80076c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076ca:	3330      	adds	r3, #48	@ 0x30
 80076cc:	4618      	mov	r0, r3
 80076ce:	f004 f91f 	bl	800b910 <RCCEx_PLL3_Config>
 80076d2:	4603      	mov	r3, r0
 80076d4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80076d8:	e006      	b.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80076e0:	e002      	b.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80076e2:	bf00      	nop
 80076e4:	e000      	b.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80076e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076e8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d10d      	bne.n	800770c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80076f0:	4b9b      	ldr	r3, [pc, #620]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80076f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80076f6:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80076fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007702:	4a97      	ldr	r2, [pc, #604]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007704:	430b      	orrs	r3, r1
 8007706:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800770a:	e003      	b.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800770c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007710:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007714:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771c:	2100      	movs	r1, #0
 800771e:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8007722:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007726:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800772a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800772e:	460b      	mov	r3, r1
 8007730:	4313      	orrs	r3, r2
 8007732:	d00e      	beq.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8007734:	4b8a      	ldr	r3, [pc, #552]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007736:	69db      	ldr	r3, [r3, #28]
 8007738:	4a89      	ldr	r2, [pc, #548]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800773a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800773e:	61d3      	str	r3, [r2, #28]
 8007740:	4b87      	ldr	r3, [pc, #540]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007742:	69d9      	ldr	r1, [r3, #28]
 8007744:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007748:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800774c:	4a84      	ldr	r2, [pc, #528]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800774e:	430b      	orrs	r3, r1
 8007750:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007752:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800775e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007762:	2300      	movs	r3, #0
 8007764:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007768:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800776c:	460b      	mov	r3, r1
 800776e:	4313      	orrs	r3, r2
 8007770:	d055      	beq.n	800781e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8007772:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007776:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800777a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800777e:	d031      	beq.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8007780:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007784:	d82a      	bhi.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8007786:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800778a:	d02d      	beq.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 800778c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007790:	d824      	bhi.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8007792:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007796:	d029      	beq.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8007798:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800779c:	d81e      	bhi.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800779e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077a2:	d011      	beq.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 80077a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077a8:	d818      	bhi.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d020      	beq.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80077ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077b2:	d113      	bne.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80077b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80077b8:	3308      	adds	r3, #8
 80077ba:	4618      	mov	r0, r3
 80077bc:	f004 f810 	bl	800b7e0 <RCCEx_PLL2_Config>
 80077c0:	4603      	mov	r3, r0
 80077c2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80077c6:	e014      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80077c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80077cc:	3330      	adds	r3, #48	@ 0x30
 80077ce:	4618      	mov	r0, r3
 80077d0:	f004 f89e 	bl	800b910 <RCCEx_PLL3_Config>
 80077d4:	4603      	mov	r3, r0
 80077d6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80077da:	e00a      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80077e2:	e006      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80077e4:	bf00      	nop
 80077e6:	e004      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80077e8:	bf00      	nop
 80077ea:	e002      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80077ec:	bf00      	nop
 80077ee:	e000      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80077f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077f2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d10d      	bne.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80077fa:	4b59      	ldr	r3, [pc, #356]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80077fc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007800:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8007804:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007808:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800780c:	4a54      	ldr	r2, [pc, #336]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800780e:	430b      	orrs	r3, r1
 8007810:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007814:	e003      	b.n	800781e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007816:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800781a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800781e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007826:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800782a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800782e:	2300      	movs	r3, #0
 8007830:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007834:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007838:	460b      	mov	r3, r1
 800783a:	4313      	orrs	r3, r2
 800783c:	d055      	beq.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 800783e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007842:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007846:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800784a:	d031      	beq.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 800784c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007850:	d82a      	bhi.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8007852:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007856:	d02d      	beq.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8007858:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800785c:	d824      	bhi.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800785e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007862:	d029      	beq.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8007864:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007868:	d81e      	bhi.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800786a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800786e:	d011      	beq.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8007870:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007874:	d818      	bhi.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8007876:	2b00      	cmp	r3, #0
 8007878:	d020      	beq.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800787a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800787e:	d113      	bne.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007880:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007884:	3308      	adds	r3, #8
 8007886:	4618      	mov	r0, r3
 8007888:	f003 ffaa 	bl	800b7e0 <RCCEx_PLL2_Config>
 800788c:	4603      	mov	r3, r0
 800788e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8007892:	e014      	b.n	80078be <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007894:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007898:	3330      	adds	r3, #48	@ 0x30
 800789a:	4618      	mov	r0, r3
 800789c:	f004 f838 	bl	800b910 <RCCEx_PLL3_Config>
 80078a0:	4603      	mov	r3, r0
 80078a2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80078a6:	e00a      	b.n	80078be <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80078ae:	e006      	b.n	80078be <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80078b0:	bf00      	nop
 80078b2:	e004      	b.n	80078be <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80078b4:	bf00      	nop
 80078b6:	e002      	b.n	80078be <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80078b8:	bf00      	nop
 80078ba:	e000      	b.n	80078be <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80078bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078be:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d10d      	bne.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80078c6:	4b26      	ldr	r3, [pc, #152]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80078c8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80078cc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80078d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80078d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80078d8:	4a21      	ldr	r2, [pc, #132]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80078da:	430b      	orrs	r3, r1
 80078dc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80078e0:	e003      	b.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078e2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80078e6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 80078ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80078ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f2:	2100      	movs	r1, #0
 80078f4:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 80078f8:	f003 0320 	and.w	r3, r3, #32
 80078fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007900:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007904:	460b      	mov	r3, r1
 8007906:	4313      	orrs	r3, r2
 8007908:	d057      	beq.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 800790a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800790e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007912:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007916:	d033      	beq.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8007918:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800791c:	d82c      	bhi.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800791e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007922:	d02f      	beq.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8007924:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007928:	d826      	bhi.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800792a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800792e:	d02b      	beq.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8007930:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007934:	d820      	bhi.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8007936:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800793a:	d013      	beq.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800793c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007940:	d81a      	bhi.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8007942:	2b00      	cmp	r3, #0
 8007944:	d022      	beq.n	800798c <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8007946:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800794a:	d115      	bne.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800794c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007950:	3308      	adds	r3, #8
 8007952:	4618      	mov	r0, r3
 8007954:	f003 ff44 	bl	800b7e0 <RCCEx_PLL2_Config>
 8007958:	4603      	mov	r3, r0
 800795a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800795e:	e016      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8007960:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007964:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007968:	3330      	adds	r3, #48	@ 0x30
 800796a:	4618      	mov	r0, r3
 800796c:	f003 ffd0 	bl	800b910 <RCCEx_PLL3_Config>
 8007970:	4603      	mov	r3, r0
 8007972:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8007976:	e00a      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007978:	2301      	movs	r3, #1
 800797a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800797e:	e006      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8007980:	bf00      	nop
 8007982:	e004      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8007984:	bf00      	nop
 8007986:	e002      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8007988:	bf00      	nop
 800798a:	e000      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800798c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800798e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007992:	2b00      	cmp	r3, #0
 8007994:	d10d      	bne.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8007996:	4bbb      	ldr	r3, [pc, #748]	@ (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007998:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800799c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80079a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80079a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80079a8:	4ab6      	ldr	r2, [pc, #728]	@ (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80079aa:	430b      	orrs	r3, r1
 80079ac:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80079b0:	e003      	b.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079b2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80079b6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 80079ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80079be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c2:	2100      	movs	r1, #0
 80079c4:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 80079c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80079d0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80079d4:	460b      	mov	r3, r1
 80079d6:	4313      	orrs	r3, r2
 80079d8:	d055      	beq.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 80079da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80079de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80079e2:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80079e6:	d031      	beq.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80079e8:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80079ec:	d82a      	bhi.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80079ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80079f2:	d02d      	beq.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 80079f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80079f8:	d824      	bhi.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80079fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80079fe:	d029      	beq.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8007a00:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007a04:	d81e      	bhi.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8007a06:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a0a:	d011      	beq.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8007a0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a10:	d818      	bhi.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d020      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8007a16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a1a:	d113      	bne.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007a1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a20:	3308      	adds	r3, #8
 8007a22:	4618      	mov	r0, r3
 8007a24:	f003 fedc 	bl	800b7e0 <RCCEx_PLL2_Config>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8007a2e:	e014      	b.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007a30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a34:	3330      	adds	r3, #48	@ 0x30
 8007a36:	4618      	mov	r0, r3
 8007a38:	f003 ff6a 	bl	800b910 <RCCEx_PLL3_Config>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8007a42:	e00a      	b.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a44:	2301      	movs	r3, #1
 8007a46:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007a4a:	e006      	b.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8007a4c:	bf00      	nop
 8007a4e:	e004      	b.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8007a50:	bf00      	nop
 8007a52:	e002      	b.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8007a54:	bf00      	nop
 8007a56:	e000      	b.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8007a58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a5a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d10d      	bne.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8007a62:	4b88      	ldr	r3, [pc, #544]	@ (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007a64:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007a68:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8007a6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007a74:	4a83      	ldr	r2, [pc, #524]	@ (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007a76:	430b      	orrs	r3, r1
 8007a78:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007a7c:	e003      	b.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a7e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007a82:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8007a86:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8e:	2100      	movs	r1, #0
 8007a90:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8007a94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007a9c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	d055      	beq.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8007aa6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007aaa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007aae:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007ab2:	d031      	beq.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8007ab4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007ab8:	d82a      	bhi.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8007aba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007abe:	d02d      	beq.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8007ac0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007ac4:	d824      	bhi.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8007ac6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007aca:	d029      	beq.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8007acc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007ad0:	d81e      	bhi.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8007ad2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ad6:	d011      	beq.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8007ad8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007adc:	d818      	bhi.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d020      	beq.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8007ae2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007ae6:	d113      	bne.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007ae8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007aec:	3308      	adds	r3, #8
 8007aee:	4618      	mov	r0, r3
 8007af0:	f003 fe76 	bl	800b7e0 <RCCEx_PLL2_Config>
 8007af4:	4603      	mov	r3, r0
 8007af6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8007afa:	e014      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007afc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b00:	3330      	adds	r3, #48	@ 0x30
 8007b02:	4618      	mov	r0, r3
 8007b04:	f003 ff04 	bl	800b910 <RCCEx_PLL3_Config>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8007b0e:	e00a      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007b16:	e006      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8007b18:	bf00      	nop
 8007b1a:	e004      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8007b1c:	bf00      	nop
 8007b1e:	e002      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8007b20:	bf00      	nop
 8007b22:	e000      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8007b24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b26:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d10d      	bne.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8007b2e:	4b55      	ldr	r3, [pc, #340]	@ (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007b30:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007b34:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007b38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b3c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007b40:	4a50      	ldr	r2, [pc, #320]	@ (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007b42:	430b      	orrs	r3, r1
 8007b44:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007b48:	e003      	b.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b4a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007b4e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8007b52:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5a:	2100      	movs	r1, #0
 8007b5c:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8007b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b64:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007b68:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007b6c:	460b      	mov	r3, r1
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	d055      	beq.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8007b72:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b76:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007b7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b7e:	d031      	beq.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8007b80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b84:	d82a      	bhi.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8007b86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b8a:	d02d      	beq.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8007b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b90:	d824      	bhi.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8007b92:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007b96:	d029      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8007b98:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007b9c:	d81e      	bhi.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8007b9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ba2:	d011      	beq.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8007ba4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ba8:	d818      	bhi.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d020      	beq.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8007bae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007bb2:	d113      	bne.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007bb4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007bb8:	3308      	adds	r3, #8
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f003 fe10 	bl	800b7e0 <RCCEx_PLL2_Config>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8007bc6:	e014      	b.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007bc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007bcc:	3330      	adds	r3, #48	@ 0x30
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f003 fe9e 	bl	800b910 <RCCEx_PLL3_Config>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8007bda:	e00a      	b.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007be2:	e006      	b.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8007be4:	bf00      	nop
 8007be6:	e004      	b.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8007be8:	bf00      	nop
 8007bea:	e002      	b.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8007bec:	bf00      	nop
 8007bee:	e000      	b.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8007bf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bf2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d10d      	bne.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8007bfa:	4b22      	ldr	r3, [pc, #136]	@ (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007bfc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007c00:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007c04:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c08:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007c0c:	4a1d      	ldr	r2, [pc, #116]	@ (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007c0e:	430b      	orrs	r3, r1
 8007c10:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007c14:	e003      	b.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c16:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007c1a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007c1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c26:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007c2a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007c2e:	2300      	movs	r3, #0
 8007c30:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007c34:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007c38:	460b      	mov	r3, r1
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	d055      	beq.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8007c3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c42:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007c46:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007c4a:	d035      	beq.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8007c4c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007c50:	d82e      	bhi.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8007c52:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007c56:	d031      	beq.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8007c58:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007c5c:	d828      	bhi.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8007c5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c62:	d01b      	beq.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8007c64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c68:	d822      	bhi.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d003      	beq.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8007c6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c72:	d009      	beq.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8007c74:	e01c      	b.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c76:	4b03      	ldr	r3, [pc, #12]	@ (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c7a:	4a02      	ldr	r2, [pc, #8]	@ (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007c7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c80:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007c82:	e01c      	b.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8007c84:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007c88:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c8c:	3308      	adds	r3, #8
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f003 fda6 	bl	800b7e0 <RCCEx_PLL2_Config>
 8007c94:	4603      	mov	r3, r0
 8007c96:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007c9a:	e010      	b.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007c9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ca0:	3330      	adds	r3, #48	@ 0x30
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f003 fe34 	bl	800b910 <RCCEx_PLL3_Config>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007cae:	e006      	b.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007cb6:	e002      	b.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8007cb8:	bf00      	nop
 8007cba:	e000      	b.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8007cbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cbe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d10d      	bne.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8007cc6:	4bc3      	ldr	r3, [pc, #780]	@ (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007cc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007ccc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007cd0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007cd4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007cd8:	4abe      	ldr	r2, [pc, #760]	@ (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007cda:	430b      	orrs	r3, r1
 8007cdc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007ce0:	e003      	b.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ce2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007ce6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8007cea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf2:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007cf6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007d00:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007d04:	460b      	mov	r3, r1
 8007d06:	4313      	orrs	r3, r2
 8007d08:	d051      	beq.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8007d0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d0e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007d12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d16:	d033      	beq.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8007d18:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d1c:	d82c      	bhi.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8007d1e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8007d22:	d02d      	beq.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8007d24:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8007d28:	d826      	bhi.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8007d2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d2e:	d019      	beq.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8007d30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d34:	d820      	bhi.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d003      	beq.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8007d3a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007d3e:	d007      	beq.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8007d40:	e01a      	b.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d42:	4ba4      	ldr	r3, [pc, #656]	@ (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d46:	4aa3      	ldr	r2, [pc, #652]	@ (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007d48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d4c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007d4e:	e018      	b.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007d50:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d54:	3308      	adds	r3, #8
 8007d56:	4618      	mov	r0, r3
 8007d58:	f003 fd42 	bl	800b7e0 <RCCEx_PLL2_Config>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007d62:	e00e      	b.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007d64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d68:	3330      	adds	r3, #48	@ 0x30
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f003 fdd0 	bl	800b910 <RCCEx_PLL3_Config>
 8007d70:	4603      	mov	r3, r0
 8007d72:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007d76:	e004      	b.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007d7e:	e000      	b.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8007d80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d82:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d10d      	bne.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8007d8a:	4b92      	ldr	r3, [pc, #584]	@ (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007d8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007d90:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8007d94:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d98:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007d9c:	4a8d      	ldr	r2, [pc, #564]	@ (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007d9e:	430b      	orrs	r3, r1
 8007da0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007da4:	e003      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007da6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007daa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8007dae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007dba:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007dc0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	d032      	beq.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8007dca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007dce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8007dd2:	2b05      	cmp	r3, #5
 8007dd4:	d80f      	bhi.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8007dd6:	2b03      	cmp	r3, #3
 8007dd8:	d211      	bcs.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d911      	bls.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d109      	bne.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007de2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007de6:	3308      	adds	r3, #8
 8007de8:	4618      	mov	r0, r3
 8007dea:	f003 fcf9 	bl	800b7e0 <RCCEx_PLL2_Config>
 8007dee:	4603      	mov	r3, r0
 8007df0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007df4:	e006      	b.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007dfc:	e002      	b.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8007dfe:	bf00      	nop
 8007e00:	e000      	b.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8007e02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e04:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d10d      	bne.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8007e0c:	4b71      	ldr	r3, [pc, #452]	@ (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007e0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007e12:	f023 0107 	bic.w	r1, r3, #7
 8007e16:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e1a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8007e1e:	4a6d      	ldr	r2, [pc, #436]	@ (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007e20:	430b      	orrs	r3, r1
 8007e22:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007e26:	e003      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e28:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007e2c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8007e30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e38:	2100      	movs	r1, #0
 8007e3a:	6739      	str	r1, [r7, #112]	@ 0x70
 8007e3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e40:	677b      	str	r3, [r7, #116]	@ 0x74
 8007e42:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007e46:	460b      	mov	r3, r1
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	d024      	beq.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8007e4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d005      	beq.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8007e58:	2b08      	cmp	r3, #8
 8007e5a:	d005      	beq.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007e62:	e002      	b.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8007e64:	bf00      	nop
 8007e66:	e000      	b.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8007e68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e6a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d10d      	bne.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8007e72:	4b58      	ldr	r3, [pc, #352]	@ (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007e74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007e78:	f023 0108 	bic.w	r1, r3, #8
 8007e7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007e84:	4a53      	ldr	r2, [pc, #332]	@ (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007e86:	430b      	orrs	r3, r1
 8007e88:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007e8c:	e003      	b.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e8e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007e92:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007e96:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e9e:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007ea2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007ea8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007eac:	460b      	mov	r3, r1
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	f000 80b9 	beq.w	8008026 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8007eb4:	4b48      	ldr	r3, [pc, #288]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8007eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eb8:	4a47      	ldr	r2, [pc, #284]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8007eba:	f043 0301 	orr.w	r3, r3, #1
 8007ebe:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007ec0:	f7fa fcf0 	bl	80028a4 <HAL_GetTick>
 8007ec4:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8007ec8:	e00b      	b.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007eca:	f7fa fceb 	bl	80028a4 <HAL_GetTick>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8007ed4:	1ad3      	subs	r3, r2, r3
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	d903      	bls.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 8007eda:	2303      	movs	r3, #3
 8007edc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007ee0:	e005      	b.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8007ee2:	4b3d      	ldr	r3, [pc, #244]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8007ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ee6:	f003 0301 	and.w	r3, r3, #1
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d0ed      	beq.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8007eee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	f040 8093 	bne.w	800801e <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007ef8:	4b36      	ldr	r3, [pc, #216]	@ (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007efa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007efe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f02:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8007f06:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d023      	beq.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8007f0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f12:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8007f16:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d01b      	beq.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007f1e:	4b2d      	ldr	r3, [pc, #180]	@ (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007f20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f28:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007f2c:	4b29      	ldr	r3, [pc, #164]	@ (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007f2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f32:	4a28      	ldr	r2, [pc, #160]	@ (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007f34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f38:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007f3c:	4b25      	ldr	r3, [pc, #148]	@ (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007f3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f42:	4a24      	ldr	r2, [pc, #144]	@ (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007f44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f48:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007f4c:	4a21      	ldr	r2, [pc, #132]	@ (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007f4e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8007f52:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007f56:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8007f5a:	f003 0301 	and.w	r3, r3, #1
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d019      	beq.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f62:	f7fa fc9f 	bl	80028a4 <HAL_GetTick>
 8007f66:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f6a:	e00d      	b.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f6c:	f7fa fc9a 	bl	80028a4 <HAL_GetTick>
 8007f70:	4602      	mov	r2, r0
 8007f72:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8007f76:	1ad2      	subs	r2, r2, r3
 8007f78:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d903      	bls.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8007f80:	2303      	movs	r3, #3
 8007f82:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 8007f86:	e006      	b.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f88:	4b12      	ldr	r3, [pc, #72]	@ (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007f8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f8e:	f003 0302 	and.w	r3, r3, #2
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d0ea      	beq.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8007f96:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d13a      	bne.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8007f9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007fa2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8007fa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007faa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007fae:	d115      	bne.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8007fb0:	4b08      	ldr	r3, [pc, #32]	@ (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007fb2:	69db      	ldr	r3, [r3, #28]
 8007fb4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007fb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007fbc:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8007fc0:	091b      	lsrs	r3, r3, #4
 8007fc2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007fc6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8007fca:	4a02      	ldr	r2, [pc, #8]	@ (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007fcc:	430b      	orrs	r3, r1
 8007fce:	61d3      	str	r3, [r2, #28]
 8007fd0:	e00a      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8007fd2:	bf00      	nop
 8007fd4:	44020c00 	.word	0x44020c00
 8007fd8:	44020800 	.word	0x44020800
 8007fdc:	4b9f      	ldr	r3, [pc, #636]	@ (800825c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007fde:	69db      	ldr	r3, [r3, #28]
 8007fe0:	4a9e      	ldr	r2, [pc, #632]	@ (800825c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007fe2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007fe6:	61d3      	str	r3, [r2, #28]
 8007fe8:	4b9c      	ldr	r3, [pc, #624]	@ (800825c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007fea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007fee:	4a9b      	ldr	r2, [pc, #620]	@ (800825c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007ff0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ff4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007ff8:	4b98      	ldr	r3, [pc, #608]	@ (800825c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007ffa:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8007ffe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008002:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8008006:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800800a:	4a94      	ldr	r2, [pc, #592]	@ (800825c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800800c:	430b      	orrs	r3, r1
 800800e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008012:	e008      	b.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008014:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008018:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 800801c:	e003      	b.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800801e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008022:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008026:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800802a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800802e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8008032:	663b      	str	r3, [r7, #96]	@ 0x60
 8008034:	2300      	movs	r3, #0
 8008036:	667b      	str	r3, [r7, #100]	@ 0x64
 8008038:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800803c:	460b      	mov	r3, r1
 800803e:	4313      	orrs	r3, r2
 8008040:	d035      	beq.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8008042:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008046:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800804a:	2b30      	cmp	r3, #48	@ 0x30
 800804c:	d014      	beq.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 800804e:	2b30      	cmp	r3, #48	@ 0x30
 8008050:	d80e      	bhi.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8008052:	2b20      	cmp	r3, #32
 8008054:	d012      	beq.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8008056:	2b20      	cmp	r3, #32
 8008058:	d80a      	bhi.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800805a:	2b00      	cmp	r3, #0
 800805c:	d010      	beq.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 800805e:	2b10      	cmp	r3, #16
 8008060:	d106      	bne.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008062:	4b7e      	ldr	r3, [pc, #504]	@ (800825c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008066:	4a7d      	ldr	r2, [pc, #500]	@ (800825c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008068:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800806c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800806e:	e008      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008076:	e004      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8008078:	bf00      	nop
 800807a:	e002      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800807c:	bf00      	nop
 800807e:	e000      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8008080:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008082:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008086:	2b00      	cmp	r3, #0
 8008088:	d10d      	bne.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800808a:	4b74      	ldr	r3, [pc, #464]	@ (800825c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800808c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008090:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008094:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008098:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800809c:	4a6f      	ldr	r2, [pc, #444]	@ (800825c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800809e:	430b      	orrs	r3, r1
 80080a0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80080a4:	e003      	b.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80080aa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80080ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80080b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b6:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80080ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80080bc:	2300      	movs	r3, #0
 80080be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80080c0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80080c4:	460b      	mov	r3, r1
 80080c6:	4313      	orrs	r3, r2
 80080c8:	d033      	beq.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 80080ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80080ce:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d002      	beq.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x174c>
 80080d6:	2b40      	cmp	r3, #64	@ 0x40
 80080d8:	d007      	beq.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0x175a>
 80080da:	e010      	b.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080dc:	4b5f      	ldr	r3, [pc, #380]	@ (800825c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80080de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080e0:	4a5e      	ldr	r2, [pc, #376]	@ (800825c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80080e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080e6:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80080e8:	e00d      	b.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80080ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80080ee:	3308      	adds	r3, #8
 80080f0:	4618      	mov	r0, r3
 80080f2:	f003 fb75 	bl	800b7e0 <RCCEx_PLL2_Config>
 80080f6:	4603      	mov	r3, r0
 80080f8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80080fc:	e003      	b.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 80080fe:	2301      	movs	r3, #1
 8008100:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008104:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008106:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800810a:	2b00      	cmp	r3, #0
 800810c:	d10d      	bne.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 800810e:	4b53      	ldr	r3, [pc, #332]	@ (800825c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008110:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008114:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8008118:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800811c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8008120:	4a4e      	ldr	r2, [pc, #312]	@ (800825c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008122:	430b      	orrs	r3, r1
 8008124:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008128:	e003      	b.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800812a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800812e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8008132:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800813e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008140:	2300      	movs	r3, #0
 8008142:	657b      	str	r3, [r7, #84]	@ 0x54
 8008144:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008148:	460b      	mov	r3, r1
 800814a:	4313      	orrs	r3, r2
 800814c:	d033      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 800814e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008152:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8008156:	2b00      	cmp	r3, #0
 8008158:	d002      	beq.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 800815a:	2b80      	cmp	r3, #128	@ 0x80
 800815c:	d007      	beq.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x17de>
 800815e:	e010      	b.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008160:	4b3e      	ldr	r3, [pc, #248]	@ (800825c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008164:	4a3d      	ldr	r2, [pc, #244]	@ (800825c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008166:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800816a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 800816c:	e00d      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800816e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008172:	3308      	adds	r3, #8
 8008174:	4618      	mov	r0, r3
 8008176:	f003 fb33 	bl	800b7e0 <RCCEx_PLL2_Config>
 800817a:	4603      	mov	r3, r0
 800817c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8008180:	e003      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008188:	bf00      	nop
    }

    if (ret == HAL_OK)
 800818a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800818e:	2b00      	cmp	r3, #0
 8008190:	d10d      	bne.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8008192:	4b32      	ldr	r3, [pc, #200]	@ (800825c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008194:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008198:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800819c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80081a0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80081a4:	4a2d      	ldr	r2, [pc, #180]	@ (800825c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80081a6:	430b      	orrs	r3, r1
 80081a8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80081ac:	e003      	b.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081ae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80081b2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80081b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80081ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081be:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80081c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80081c4:	2300      	movs	r3, #0
 80081c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80081c8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80081cc:	460b      	mov	r3, r1
 80081ce:	4313      	orrs	r3, r2
 80081d0:	d04a      	beq.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80081d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80081d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80081da:	2b04      	cmp	r3, #4
 80081dc:	d827      	bhi.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x189e>
 80081de:	a201      	add	r2, pc, #4	@ (adr r2, 80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 80081e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e4:	080081f9 	.word	0x080081f9
 80081e8:	08008207 	.word	0x08008207
 80081ec:	0800821b 	.word	0x0800821b
 80081f0:	08008237 	.word	0x08008237
 80081f4:	08008237 	.word	0x08008237
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081f8:	4b18      	ldr	r3, [pc, #96]	@ (800825c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80081fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081fc:	4a17      	ldr	r2, [pc, #92]	@ (800825c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80081fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008202:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8008204:	e018      	b.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008206:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800820a:	3308      	adds	r3, #8
 800820c:	4618      	mov	r0, r3
 800820e:	f003 fae7 	bl	800b7e0 <RCCEx_PLL2_Config>
 8008212:	4603      	mov	r3, r0
 8008214:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8008218:	e00e      	b.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800821a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800821e:	3330      	adds	r3, #48	@ 0x30
 8008220:	4618      	mov	r0, r3
 8008222:	f003 fb75 	bl	800b910 <RCCEx_PLL3_Config>
 8008226:	4603      	mov	r3, r0
 8008228:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800822c:	e004      	b.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008234:	e000      	b.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8008236:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008238:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800823c:	2b00      	cmp	r3, #0
 800823e:	d10f      	bne.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8008240:	4b06      	ldr	r3, [pc, #24]	@ (800825c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008246:	f023 0107 	bic.w	r1, r3, #7
 800824a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800824e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008252:	4a02      	ldr	r2, [pc, #8]	@ (800825c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008254:	430b      	orrs	r3, r1
 8008256:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800825a:	e005      	b.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 800825c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008260:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008264:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8008268:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800826c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008270:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008274:	643b      	str	r3, [r7, #64]	@ 0x40
 8008276:	2300      	movs	r3, #0
 8008278:	647b      	str	r3, [r7, #68]	@ 0x44
 800827a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800827e:	460b      	mov	r3, r1
 8008280:	4313      	orrs	r3, r2
 8008282:	f000 8081 	beq.w	8008388 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8008286:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800828a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800828e:	2b20      	cmp	r3, #32
 8008290:	d85f      	bhi.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8008292:	a201      	add	r2, pc, #4	@ (adr r2, 8008298 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8008294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008298:	0800831d 	.word	0x0800831d
 800829c:	08008353 	.word	0x08008353
 80082a0:	08008353 	.word	0x08008353
 80082a4:	08008353 	.word	0x08008353
 80082a8:	08008353 	.word	0x08008353
 80082ac:	08008353 	.word	0x08008353
 80082b0:	08008353 	.word	0x08008353
 80082b4:	08008353 	.word	0x08008353
 80082b8:	0800832b 	.word	0x0800832b
 80082bc:	08008353 	.word	0x08008353
 80082c0:	08008353 	.word	0x08008353
 80082c4:	08008353 	.word	0x08008353
 80082c8:	08008353 	.word	0x08008353
 80082cc:	08008353 	.word	0x08008353
 80082d0:	08008353 	.word	0x08008353
 80082d4:	08008353 	.word	0x08008353
 80082d8:	0800833f 	.word	0x0800833f
 80082dc:	08008353 	.word	0x08008353
 80082e0:	08008353 	.word	0x08008353
 80082e4:	08008353 	.word	0x08008353
 80082e8:	08008353 	.word	0x08008353
 80082ec:	08008353 	.word	0x08008353
 80082f0:	08008353 	.word	0x08008353
 80082f4:	08008353 	.word	0x08008353
 80082f8:	0800835b 	.word	0x0800835b
 80082fc:	08008353 	.word	0x08008353
 8008300:	08008353 	.word	0x08008353
 8008304:	08008353 	.word	0x08008353
 8008308:	08008353 	.word	0x08008353
 800830c:	08008353 	.word	0x08008353
 8008310:	08008353 	.word	0x08008353
 8008314:	08008353 	.word	0x08008353
 8008318:	0800835b 	.word	0x0800835b
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800831c:	4bab      	ldr	r3, [pc, #684]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800831e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008320:	4aaa      	ldr	r2, [pc, #680]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008322:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008326:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8008328:	e018      	b.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800832a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800832e:	3308      	adds	r3, #8
 8008330:	4618      	mov	r0, r3
 8008332:	f003 fa55 	bl	800b7e0 <RCCEx_PLL2_Config>
 8008336:	4603      	mov	r3, r0
 8008338:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800833c:	e00e      	b.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800833e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008342:	3330      	adds	r3, #48	@ 0x30
 8008344:	4618      	mov	r0, r3
 8008346:	f003 fae3 	bl	800b910 <RCCEx_PLL3_Config>
 800834a:	4603      	mov	r3, r0
 800834c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8008350:	e004      	b.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008358:	e000      	b.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 800835a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800835c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008360:	2b00      	cmp	r3, #0
 8008362:	d10d      	bne.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8008364:	4b99      	ldr	r3, [pc, #612]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800836a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800836e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008372:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008376:	4a95      	ldr	r2, [pc, #596]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008378:	430b      	orrs	r3, r1
 800837a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800837e:	e003      	b.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008380:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008384:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8008388:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800838c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008390:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008394:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008396:	2300      	movs	r3, #0
 8008398:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800839a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800839e:	460b      	mov	r3, r1
 80083a0:	4313      	orrs	r3, r2
 80083a2:	d04e      	beq.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80083a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80083a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80083ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083b0:	d02e      	beq.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 80083b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083b6:	d827      	bhi.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80083b8:	2bc0      	cmp	r3, #192	@ 0xc0
 80083ba:	d02b      	beq.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 80083bc:	2bc0      	cmp	r3, #192	@ 0xc0
 80083be:	d823      	bhi.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80083c0:	2b80      	cmp	r3, #128	@ 0x80
 80083c2:	d017      	beq.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 80083c4:	2b80      	cmp	r3, #128	@ 0x80
 80083c6:	d81f      	bhi.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d002      	beq.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 80083cc:	2b40      	cmp	r3, #64	@ 0x40
 80083ce:	d007      	beq.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 80083d0:	e01a      	b.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083d2:	4b7e      	ldr	r3, [pc, #504]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80083d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083d6:	4a7d      	ldr	r2, [pc, #500]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80083d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083dc:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80083de:	e01a      	b.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80083e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80083e4:	3308      	adds	r3, #8
 80083e6:	4618      	mov	r0, r3
 80083e8:	f003 f9fa 	bl	800b7e0 <RCCEx_PLL2_Config>
 80083ec:	4603      	mov	r3, r0
 80083ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80083f2:	e010      	b.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80083f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80083f8:	3330      	adds	r3, #48	@ 0x30
 80083fa:	4618      	mov	r0, r3
 80083fc:	f003 fa88 	bl	800b910 <RCCEx_PLL3_Config>
 8008400:	4603      	mov	r3, r0
 8008402:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8008406:	e006      	b.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800840e:	e002      	b.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8008410:	bf00      	nop
 8008412:	e000      	b.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8008414:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008416:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800841a:	2b00      	cmp	r3, #0
 800841c:	d10d      	bne.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800841e:	4b6b      	ldr	r3, [pc, #428]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008424:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008428:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800842c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008430:	4a66      	ldr	r2, [pc, #408]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008432:	430b      	orrs	r3, r1
 8008434:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008438:	e003      	b.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800843a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800843e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8008442:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800844e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008450:	2300      	movs	r3, #0
 8008452:	637b      	str	r3, [r7, #52]	@ 0x34
 8008454:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008458:	460b      	mov	r3, r1
 800845a:	4313      	orrs	r3, r2
 800845c:	d055      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 800845e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008462:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8008466:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800846a:	d031      	beq.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 800846c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008470:	d82a      	bhi.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8008472:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008476:	d02d      	beq.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8008478:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800847c:	d824      	bhi.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800847e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008482:	d029      	beq.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8008484:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008488:	d81e      	bhi.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800848a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800848e:	d011      	beq.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8008490:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008494:	d818      	bhi.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8008496:	2b00      	cmp	r3, #0
 8008498:	d020      	beq.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 800849a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800849e:	d113      	bne.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80084a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80084a4:	3308      	adds	r3, #8
 80084a6:	4618      	mov	r0, r3
 80084a8:	f003 f99a 	bl	800b7e0 <RCCEx_PLL2_Config>
 80084ac:	4603      	mov	r3, r0
 80084ae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80084b2:	e014      	b.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80084b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80084b8:	3330      	adds	r3, #48	@ 0x30
 80084ba:	4618      	mov	r0, r3
 80084bc:	f003 fa28 	bl	800b910 <RCCEx_PLL3_Config>
 80084c0:	4603      	mov	r3, r0
 80084c2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80084c6:	e00a      	b.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084c8:	2301      	movs	r3, #1
 80084ca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80084ce:	e006      	b.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80084d0:	bf00      	nop
 80084d2:	e004      	b.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80084d4:	bf00      	nop
 80084d6:	e002      	b.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80084d8:	bf00      	nop
 80084da:	e000      	b.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80084dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084de:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d10d      	bne.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 80084e6:	4b39      	ldr	r3, [pc, #228]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80084e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80084ec:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80084f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80084f4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80084f8:	4a34      	ldr	r2, [pc, #208]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80084fa:	430b      	orrs	r3, r1
 80084fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008500:	e003      	b.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008502:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008506:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 800850a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800850e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008512:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008516:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008518:	2300      	movs	r3, #0
 800851a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800851c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008520:	460b      	mov	r3, r1
 8008522:	4313      	orrs	r3, r2
 8008524:	d058      	beq.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8008526:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800852a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800852e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008532:	d031      	beq.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8008534:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008538:	d82a      	bhi.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800853a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800853e:	d02d      	beq.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8008540:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008544:	d824      	bhi.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8008546:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800854a:	d029      	beq.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 800854c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008550:	d81e      	bhi.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8008552:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008556:	d011      	beq.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8008558:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800855c:	d818      	bhi.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800855e:	2b00      	cmp	r3, #0
 8008560:	d020      	beq.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8008562:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008566:	d113      	bne.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008568:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800856c:	3308      	adds	r3, #8
 800856e:	4618      	mov	r0, r3
 8008570:	f003 f936 	bl	800b7e0 <RCCEx_PLL2_Config>
 8008574:	4603      	mov	r3, r0
 8008576:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800857a:	e014      	b.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800857c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008580:	3330      	adds	r3, #48	@ 0x30
 8008582:	4618      	mov	r0, r3
 8008584:	f003 f9c4 	bl	800b910 <RCCEx_PLL3_Config>
 8008588:	4603      	mov	r3, r0
 800858a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800858e:	e00a      	b.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008596:	e006      	b.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8008598:	bf00      	nop
 800859a:	e004      	b.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800859c:	bf00      	nop
 800859e:	e002      	b.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80085a0:	bf00      	nop
 80085a2:	e000      	b.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80085a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d110      	bne.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 80085ae:	4b07      	ldr	r3, [pc, #28]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80085b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80085b4:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80085b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80085bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80085c0:	4902      	ldr	r1, [pc, #8]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80085c2:	4313      	orrs	r3, r2
 80085c4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80085c8:	e006      	b.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 80085ca:	bf00      	nop
 80085cc:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085d0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80085d4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80085d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80085dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e0:	2100      	movs	r1, #0
 80085e2:	6239      	str	r1, [r7, #32]
 80085e4:	f003 0301 	and.w	r3, r3, #1
 80085e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80085ea:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80085ee:	460b      	mov	r3, r1
 80085f0:	4313      	orrs	r3, r2
 80085f2:	d055      	beq.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 80085f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80085f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80085fc:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8008600:	d031      	beq.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8008602:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8008606:	d82a      	bhi.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8008608:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800860c:	d02d      	beq.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 800860e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008612:	d824      	bhi.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8008614:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8008618:	d029      	beq.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 800861a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800861e:	d81e      	bhi.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8008620:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008624:	d011      	beq.n	800864a <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8008626:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800862a:	d818      	bhi.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800862c:	2b00      	cmp	r3, #0
 800862e:	d020      	beq.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8008630:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008634:	d113      	bne.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008636:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800863a:	3308      	adds	r3, #8
 800863c:	4618      	mov	r0, r3
 800863e:	f003 f8cf 	bl	800b7e0 <RCCEx_PLL2_Config>
 8008642:	4603      	mov	r3, r0
 8008644:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008648:	e014      	b.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800864a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800864e:	3330      	adds	r3, #48	@ 0x30
 8008650:	4618      	mov	r0, r3
 8008652:	f003 f95d 	bl	800b910 <RCCEx_PLL3_Config>
 8008656:	4603      	mov	r3, r0
 8008658:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800865c:	e00a      	b.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800865e:	2301      	movs	r3, #1
 8008660:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008664:	e006      	b.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8008666:	bf00      	nop
 8008668:	e004      	b.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800866a:	bf00      	nop
 800866c:	e002      	b.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800866e:	bf00      	nop
 8008670:	e000      	b.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8008672:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008674:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008678:	2b00      	cmp	r3, #0
 800867a:	d10d      	bne.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 800867c:	4b88      	ldr	r3, [pc, #544]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800867e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008682:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8008686:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800868a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800868e:	4984      	ldr	r1, [pc, #528]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008690:	4313      	orrs	r3, r2
 8008692:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8008696:	e003      	b.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008698:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800869c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80086a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80086a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a8:	2100      	movs	r1, #0
 80086aa:	61b9      	str	r1, [r7, #24]
 80086ac:	f003 0302 	and.w	r3, r3, #2
 80086b0:	61fb      	str	r3, [r7, #28]
 80086b2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80086b6:	460b      	mov	r3, r1
 80086b8:	4313      	orrs	r3, r2
 80086ba:	d03d      	beq.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 80086bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80086c0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80086c4:	2b03      	cmp	r3, #3
 80086c6:	d81c      	bhi.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 80086c8:	a201      	add	r2, pc, #4	@ (adr r2, 80086d0 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 80086ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ce:	bf00      	nop
 80086d0:	0800870b 	.word	0x0800870b
 80086d4:	080086e1 	.word	0x080086e1
 80086d8:	080086ef 	.word	0x080086ef
 80086dc:	0800870b 	.word	0x0800870b
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086e0:	4b6f      	ldr	r3, [pc, #444]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80086e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086e4:	4a6e      	ldr	r2, [pc, #440]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80086e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80086ea:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80086ec:	e00e      	b.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80086ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80086f2:	3308      	adds	r3, #8
 80086f4:	4618      	mov	r0, r3
 80086f6:	f003 f873 	bl	800b7e0 <RCCEx_PLL2_Config>
 80086fa:	4603      	mov	r3, r0
 80086fc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8008700:	e004      	b.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008702:	2301      	movs	r3, #1
 8008704:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008708:	e000      	b.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 800870a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800870c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008710:	2b00      	cmp	r3, #0
 8008712:	d10d      	bne.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8008714:	4b62      	ldr	r3, [pc, #392]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008716:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800871a:	f023 0203 	bic.w	r2, r3, #3
 800871e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008722:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008726:	495e      	ldr	r1, [pc, #376]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008728:	4313      	orrs	r3, r2
 800872a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800872e:	e003      	b.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008730:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008734:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008738:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800873c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008740:	2100      	movs	r1, #0
 8008742:	6139      	str	r1, [r7, #16]
 8008744:	f003 0304 	and.w	r3, r3, #4
 8008748:	617b      	str	r3, [r7, #20]
 800874a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800874e:	460b      	mov	r3, r1
 8008750:	4313      	orrs	r3, r2
 8008752:	d03a      	beq.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8008754:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008758:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800875c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008760:	d00e      	beq.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8008762:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008766:	d815      	bhi.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8008768:	2b00      	cmp	r3, #0
 800876a:	d017      	beq.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 800876c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008770:	d110      	bne.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008772:	4b4b      	ldr	r3, [pc, #300]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008776:	4a4a      	ldr	r2, [pc, #296]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008778:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800877c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800877e:	e00e      	b.n	800879e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008780:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008784:	3308      	adds	r3, #8
 8008786:	4618      	mov	r0, r3
 8008788:	f003 f82a 	bl	800b7e0 <RCCEx_PLL2_Config>
 800878c:	4603      	mov	r3, r0
 800878e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8008792:	e004      	b.n	800879e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8008794:	2301      	movs	r3, #1
 8008796:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800879a:	e000      	b.n	800879e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 800879c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800879e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d10d      	bne.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80087a6:	4b3e      	ldr	r3, [pc, #248]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80087a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80087ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80087b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80087b4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80087b8:	4939      	ldr	r1, [pc, #228]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80087ba:	4313      	orrs	r3, r2
 80087bc:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80087c0:	e003      	b.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087c2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80087c6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80087ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80087ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d2:	2100      	movs	r1, #0
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	f003 0310 	and.w	r3, r3, #16
 80087da:	60fb      	str	r3, [r7, #12]
 80087dc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80087e0:	460b      	mov	r3, r1
 80087e2:	4313      	orrs	r3, r2
 80087e4:	d038      	beq.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 80087e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80087ea:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80087ee:	2b30      	cmp	r3, #48	@ 0x30
 80087f0:	d01b      	beq.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 80087f2:	2b30      	cmp	r3, #48	@ 0x30
 80087f4:	d815      	bhi.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 80087f6:	2b10      	cmp	r3, #16
 80087f8:	d002      	beq.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 80087fa:	2b20      	cmp	r3, #32
 80087fc:	d007      	beq.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 80087fe:	e010      	b.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008800:	4b27      	ldr	r3, [pc, #156]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008804:	4a26      	ldr	r2, [pc, #152]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008806:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800880a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 800880c:	e00e      	b.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800880e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008812:	3330      	adds	r3, #48	@ 0x30
 8008814:	4618      	mov	r0, r3
 8008816:	f003 f87b 	bl	800b910 <RCCEx_PLL3_Config>
 800881a:	4603      	mov	r3, r0
 800881c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8008820:	e004      	b.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008822:	2301      	movs	r3, #1
 8008824:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008828:	e000      	b.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 800882a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800882c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008830:	2b00      	cmp	r3, #0
 8008832:	d10d      	bne.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8008834:	4b1a      	ldr	r3, [pc, #104]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008836:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800883a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800883e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008842:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8008846:	4916      	ldr	r1, [pc, #88]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008848:	4313      	orrs	r3, r2
 800884a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800884e:	e003      	b.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008850:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008854:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008858:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800885c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008860:	2100      	movs	r1, #0
 8008862:	6039      	str	r1, [r7, #0]
 8008864:	f003 0308 	and.w	r3, r3, #8
 8008868:	607b      	str	r3, [r7, #4]
 800886a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800886e:	460b      	mov	r3, r1
 8008870:	4313      	orrs	r3, r2
 8008872:	d00c      	beq.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8008874:	4b0a      	ldr	r3, [pc, #40]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008876:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800887a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800887e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008882:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8008886:	4906      	ldr	r1, [pc, #24]	@ (80088a0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008888:	4313      	orrs	r3, r2
 800888a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 800888e:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 8008892:	4618      	mov	r0, r3
 8008894:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8008898:	46bd      	mov	sp, r7
 800889a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800889e:	bf00      	nop
 80088a0:	44020c00 	.word	0x44020c00

080088a4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b08b      	sub	sp, #44	@ 0x2c
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80088ac:	4bae      	ldr	r3, [pc, #696]	@ (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80088ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088b4:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80088b6:	4bac      	ldr	r3, [pc, #688]	@ (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80088b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088ba:	f003 0303 	and.w	r3, r3, #3
 80088be:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80088c0:	4ba9      	ldr	r3, [pc, #676]	@ (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80088c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088c4:	0a1b      	lsrs	r3, r3, #8
 80088c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80088ca:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80088cc:	4ba6      	ldr	r3, [pc, #664]	@ (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80088ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088d0:	091b      	lsrs	r3, r3, #4
 80088d2:	f003 0301 	and.w	r3, r3, #1
 80088d6:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80088d8:	4ba3      	ldr	r3, [pc, #652]	@ (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80088da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088dc:	08db      	lsrs	r3, r3, #3
 80088de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80088e2:	697a      	ldr	r2, [r7, #20]
 80088e4:	fb02 f303 	mul.w	r3, r2, r3
 80088e8:	ee07 3a90 	vmov	s15, r3
 80088ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088f0:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80088f4:	69bb      	ldr	r3, [r7, #24]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	f000 8126 	beq.w	8008b48 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	2b03      	cmp	r3, #3
 8008900:	d053      	beq.n	80089aa <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8008902:	69fb      	ldr	r3, [r7, #28]
 8008904:	2b03      	cmp	r3, #3
 8008906:	d86f      	bhi.n	80089e8 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8008908:	69fb      	ldr	r3, [r7, #28]
 800890a:	2b01      	cmp	r3, #1
 800890c:	d003      	beq.n	8008916 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 800890e:	69fb      	ldr	r3, [r7, #28]
 8008910:	2b02      	cmp	r3, #2
 8008912:	d02b      	beq.n	800896c <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8008914:	e068      	b.n	80089e8 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008916:	4b94      	ldr	r3, [pc, #592]	@ (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	08db      	lsrs	r3, r3, #3
 800891c:	f003 0303 	and.w	r3, r3, #3
 8008920:	4a92      	ldr	r2, [pc, #584]	@ (8008b6c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8008922:	fa22 f303 	lsr.w	r3, r2, r3
 8008926:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	ee07 3a90 	vmov	s15, r3
 800892e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008932:	69bb      	ldr	r3, [r7, #24]
 8008934:	ee07 3a90 	vmov	s15, r3
 8008938:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800893c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008940:	6a3b      	ldr	r3, [r7, #32]
 8008942:	ee07 3a90 	vmov	s15, r3
 8008946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800894a:	ed97 6a04 	vldr	s12, [r7, #16]
 800894e:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8008b70 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8008952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800895a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800895e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008966:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800896a:	e068      	b.n	8008a3e <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800896c:	69bb      	ldr	r3, [r7, #24]
 800896e:	ee07 3a90 	vmov	s15, r3
 8008972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008976:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8008b74 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800897a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800897e:	6a3b      	ldr	r3, [r7, #32]
 8008980:	ee07 3a90 	vmov	s15, r3
 8008984:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008988:	ed97 6a04 	vldr	s12, [r7, #16]
 800898c:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008b70 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8008990:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008994:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008998:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800899c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089a4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80089a8:	e049      	b.n	8008a3e <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80089aa:	69bb      	ldr	r3, [r7, #24]
 80089ac:	ee07 3a90 	vmov	s15, r3
 80089b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089b4:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8008b78 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 80089b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089bc:	6a3b      	ldr	r3, [r7, #32]
 80089be:	ee07 3a90 	vmov	s15, r3
 80089c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089c6:	ed97 6a04 	vldr	s12, [r7, #16]
 80089ca:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8008b70 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80089ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089e2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80089e6:	e02a      	b.n	8008a3e <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80089e8:	4b5f      	ldr	r3, [pc, #380]	@ (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	08db      	lsrs	r3, r3, #3
 80089ee:	f003 0303 	and.w	r3, r3, #3
 80089f2:	4a5e      	ldr	r2, [pc, #376]	@ (8008b6c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80089f4:	fa22 f303 	lsr.w	r3, r2, r3
 80089f8:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	ee07 3a90 	vmov	s15, r3
 8008a00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a04:	69bb      	ldr	r3, [r7, #24]
 8008a06:	ee07 3a90 	vmov	s15, r3
 8008a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a12:	6a3b      	ldr	r3, [r7, #32]
 8008a14:	ee07 3a90 	vmov	s15, r3
 8008a18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a1c:	ed97 6a04 	vldr	s12, [r7, #16]
 8008a20:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8008b70 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8008a24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a2c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a38:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008a3c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a3e:	4b4a      	ldr	r3, [pc, #296]	@ (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a46:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a4a:	d121      	bne.n	8008a90 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8008a4c:	4b46      	ldr	r3, [pc, #280]	@ (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d017      	beq.n	8008a88 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008a58:	4b43      	ldr	r3, [pc, #268]	@ (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008a5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a5c:	0a5b      	lsrs	r3, r3, #9
 8008a5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a62:	ee07 3a90 	vmov	s15, r3
 8008a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8008a6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008a6e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8008a72:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008a76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a7e:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	601a      	str	r2, [r3, #0]
 8008a86:	e006      	b.n	8008a96 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	601a      	str	r2, [r3, #0]
 8008a8e:	e002      	b.n	8008a96 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a96:	4b34      	ldr	r3, [pc, #208]	@ (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008aa2:	d121      	bne.n	8008ae8 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8008aa4:	4b30      	ldr	r3, [pc, #192]	@ (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d017      	beq.n	8008ae0 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008ab0:	4b2d      	ldr	r3, [pc, #180]	@ (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008ab2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ab4:	0c1b      	lsrs	r3, r3, #16
 8008ab6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008aba:	ee07 3a90 	vmov	s15, r3
 8008abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8008ac2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ac6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8008aca:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008ace:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ad2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ad6:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	605a      	str	r2, [r3, #4]
 8008ade:	e006      	b.n	8008aee <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	605a      	str	r2, [r3, #4]
 8008ae6:	e002      	b.n	8008aee <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2200      	movs	r2, #0
 8008aec:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008aee:	4b1e      	ldr	r3, [pc, #120]	@ (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008af6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008afa:	d121      	bne.n	8008b40 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8008afc:	4b1a      	ldr	r3, [pc, #104]	@ (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d017      	beq.n	8008b38 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008b08:	4b17      	ldr	r3, [pc, #92]	@ (8008b68 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008b0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b0c:	0e1b      	lsrs	r3, r3, #24
 8008b0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b12:	ee07 3a90 	vmov	s15, r3
 8008b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8008b1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b1e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8008b22:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008b26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b2e:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008b36:	e010      	b.n	8008b5a <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	609a      	str	r2, [r3, #8]
}
 8008b3e:	e00c      	b.n	8008b5a <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	609a      	str	r2, [r3, #8]
}
 8008b46:	e008      	b.n	8008b5a <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	609a      	str	r2, [r3, #8]
}
 8008b5a:	bf00      	nop
 8008b5c:	372c      	adds	r7, #44	@ 0x2c
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr
 8008b66:	bf00      	nop
 8008b68:	44020c00 	.word	0x44020c00
 8008b6c:	03d09000 	.word	0x03d09000
 8008b70:	46000000 	.word	0x46000000
 8008b74:	4a742400 	.word	0x4a742400
 8008b78:	4af42400 	.word	0x4af42400

08008b7c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b08b      	sub	sp, #44	@ 0x2c
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8008b84:	4bae      	ldr	r3, [pc, #696]	@ (8008e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008b86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b8c:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8008b8e:	4bac      	ldr	r3, [pc, #688]	@ (8008e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b92:	f003 0303 	and.w	r3, r3, #3
 8008b96:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8008b98:	4ba9      	ldr	r3, [pc, #676]	@ (8008e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b9c:	0a1b      	lsrs	r3, r3, #8
 8008b9e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ba2:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8008ba4:	4ba6      	ldr	r3, [pc, #664]	@ (8008e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ba8:	091b      	lsrs	r3, r3, #4
 8008baa:	f003 0301 	and.w	r3, r3, #1
 8008bae:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8008bb0:	4ba3      	ldr	r3, [pc, #652]	@ (8008e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bb4:	08db      	lsrs	r3, r3, #3
 8008bb6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008bba:	697a      	ldr	r2, [r7, #20]
 8008bbc:	fb02 f303 	mul.w	r3, r2, r3
 8008bc0:	ee07 3a90 	vmov	s15, r3
 8008bc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bc8:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8008bcc:	69bb      	ldr	r3, [r7, #24]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	f000 8126 	beq.w	8008e20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	2b03      	cmp	r3, #3
 8008bd8:	d053      	beq.n	8008c82 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8008bda:	69fb      	ldr	r3, [r7, #28]
 8008bdc:	2b03      	cmp	r3, #3
 8008bde:	d86f      	bhi.n	8008cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8008be0:	69fb      	ldr	r3, [r7, #28]
 8008be2:	2b01      	cmp	r3, #1
 8008be4:	d003      	beq.n	8008bee <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8008be6:	69fb      	ldr	r3, [r7, #28]
 8008be8:	2b02      	cmp	r3, #2
 8008bea:	d02b      	beq.n	8008c44 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8008bec:	e068      	b.n	8008cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008bee:	4b94      	ldr	r3, [pc, #592]	@ (8008e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	08db      	lsrs	r3, r3, #3
 8008bf4:	f003 0303 	and.w	r3, r3, #3
 8008bf8:	4a92      	ldr	r2, [pc, #584]	@ (8008e44 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8008bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8008bfe:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	ee07 3a90 	vmov	s15, r3
 8008c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	ee07 3a90 	vmov	s15, r3
 8008c10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c18:	6a3b      	ldr	r3, [r7, #32]
 8008c1a:	ee07 3a90 	vmov	s15, r3
 8008c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c22:	ed97 6a04 	vldr	s12, [r7, #16]
 8008c26:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8008e48 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8008c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c3e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008c42:	e068      	b.n	8008d16 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8008c44:	69bb      	ldr	r3, [r7, #24]
 8008c46:	ee07 3a90 	vmov	s15, r3
 8008c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c4e:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8008e4c <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8008c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c56:	6a3b      	ldr	r3, [r7, #32]
 8008c58:	ee07 3a90 	vmov	s15, r3
 8008c5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c60:	ed97 6a04 	vldr	s12, [r7, #16]
 8008c64:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008e48 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8008c68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c70:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c7c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008c80:	e049      	b.n	8008d16 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8008c82:	69bb      	ldr	r3, [r7, #24]
 8008c84:	ee07 3a90 	vmov	s15, r3
 8008c88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c8c:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8008e50 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8008c90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c94:	6a3b      	ldr	r3, [r7, #32]
 8008c96:	ee07 3a90 	vmov	s15, r3
 8008c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c9e:	ed97 6a04 	vldr	s12, [r7, #16]
 8008ca2:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8008e48 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8008ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cba:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008cbe:	e02a      	b.n	8008d16 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008cc0:	4b5f      	ldr	r3, [pc, #380]	@ (8008e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	08db      	lsrs	r3, r3, #3
 8008cc6:	f003 0303 	and.w	r3, r3, #3
 8008cca:	4a5e      	ldr	r2, [pc, #376]	@ (8008e44 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8008ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8008cd0:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	ee07 3a90 	vmov	s15, r3
 8008cd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cdc:	69bb      	ldr	r3, [r7, #24]
 8008cde:	ee07 3a90 	vmov	s15, r3
 8008ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cea:	6a3b      	ldr	r3, [r7, #32]
 8008cec:	ee07 3a90 	vmov	s15, r3
 8008cf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cf4:	ed97 6a04 	vldr	s12, [r7, #16]
 8008cf8:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8008e48 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8008cfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d04:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d10:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008d14:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d16:	4b4a      	ldr	r3, [pc, #296]	@ (8008e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d22:	d121      	bne.n	8008d68 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8008d24:	4b46      	ldr	r3, [pc, #280]	@ (8008e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d017      	beq.n	8008d60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008d30:	4b43      	ldr	r3, [pc, #268]	@ (8008e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d34:	0a5b      	lsrs	r3, r3, #9
 8008d36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d3a:	ee07 3a90 	vmov	s15, r3
 8008d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8008d42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008d46:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8008d4a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008d4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d56:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	601a      	str	r2, [r3, #0]
 8008d5e:	e006      	b.n	8008d6e <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2200      	movs	r2, #0
 8008d64:	601a      	str	r2, [r3, #0]
 8008d66:	e002      	b.n	8008d6e <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d6e:	4b34      	ldr	r3, [pc, #208]	@ (8008e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d7a:	d121      	bne.n	8008dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8008d7c:	4b30      	ldr	r3, [pc, #192]	@ (8008e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d017      	beq.n	8008db8 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008d88:	4b2d      	ldr	r3, [pc, #180]	@ (8008e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d8c:	0c1b      	lsrs	r3, r3, #16
 8008d8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d92:	ee07 3a90 	vmov	s15, r3
 8008d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8008d9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008d9e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8008da2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008da6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008daa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dae:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	605a      	str	r2, [r3, #4]
 8008db6:	e006      	b.n	8008dc6 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	605a      	str	r2, [r3, #4]
 8008dbe:	e002      	b.n	8008dc6 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008dc6:	4b1e      	ldr	r3, [pc, #120]	@ (8008e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008dce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008dd2:	d121      	bne.n	8008e18 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8008dd4:	4b1a      	ldr	r3, [pc, #104]	@ (8008e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dd8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d017      	beq.n	8008e10 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008de0:	4b17      	ldr	r3, [pc, #92]	@ (8008e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008de4:	0e1b      	lsrs	r3, r3, #24
 8008de6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008dea:	ee07 3a90 	vmov	s15, r3
 8008dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8008df2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008df6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8008dfa:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008dfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e06:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008e0e:	e010      	b.n	8008e32 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2200      	movs	r2, #0
 8008e14:	609a      	str	r2, [r3, #8]
}
 8008e16:	e00c      	b.n	8008e32 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	609a      	str	r2, [r3, #8]
}
 8008e1e:	e008      	b.n	8008e32 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2200      	movs	r2, #0
 8008e24:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	609a      	str	r2, [r3, #8]
}
 8008e32:	bf00      	nop
 8008e34:	372c      	adds	r7, #44	@ 0x2c
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr
 8008e3e:	bf00      	nop
 8008e40:	44020c00 	.word	0x44020c00
 8008e44:	03d09000 	.word	0x03d09000
 8008e48:	46000000 	.word	0x46000000
 8008e4c:	4a742400 	.word	0x4a742400
 8008e50:	4af42400 	.word	0x4af42400

08008e54 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b08b      	sub	sp, #44	@ 0x2c
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8008e5c:	4bae      	ldr	r3, [pc, #696]	@ (8009118 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008e5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e64:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8008e66:	4bac      	ldr	r3, [pc, #688]	@ (8009118 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e6a:	f003 0303 	and.w	r3, r3, #3
 8008e6e:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8008e70:	4ba9      	ldr	r3, [pc, #676]	@ (8009118 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e74:	0a1b      	lsrs	r3, r3, #8
 8008e76:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008e7a:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8008e7c:	4ba6      	ldr	r3, [pc, #664]	@ (8009118 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e80:	091b      	lsrs	r3, r3, #4
 8008e82:	f003 0301 	and.w	r3, r3, #1
 8008e86:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8008e88:	4ba3      	ldr	r3, [pc, #652]	@ (8009118 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008e8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e8c:	08db      	lsrs	r3, r3, #3
 8008e8e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e92:	697a      	ldr	r2, [r7, #20]
 8008e94:	fb02 f303 	mul.w	r3, r2, r3
 8008e98:	ee07 3a90 	vmov	s15, r3
 8008e9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ea0:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8008ea4:	69bb      	ldr	r3, [r7, #24]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	f000 8126 	beq.w	80090f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 8008eac:	69fb      	ldr	r3, [r7, #28]
 8008eae:	2b03      	cmp	r3, #3
 8008eb0:	d053      	beq.n	8008f5a <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 8008eb2:	69fb      	ldr	r3, [r7, #28]
 8008eb4:	2b03      	cmp	r3, #3
 8008eb6:	d86f      	bhi.n	8008f98 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8008eb8:	69fb      	ldr	r3, [r7, #28]
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d003      	beq.n	8008ec6 <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 8008ebe:	69fb      	ldr	r3, [r7, #28]
 8008ec0:	2b02      	cmp	r3, #2
 8008ec2:	d02b      	beq.n	8008f1c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8008ec4:	e068      	b.n	8008f98 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008ec6:	4b94      	ldr	r3, [pc, #592]	@ (8009118 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	08db      	lsrs	r3, r3, #3
 8008ecc:	f003 0303 	and.w	r3, r3, #3
 8008ed0:	4a92      	ldr	r2, [pc, #584]	@ (800911c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8008ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ed6:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	ee07 3a90 	vmov	s15, r3
 8008ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	ee07 3a90 	vmov	s15, r3
 8008ee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ef0:	6a3b      	ldr	r3, [r7, #32]
 8008ef2:	ee07 3a90 	vmov	s15, r3
 8008ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008efa:	ed97 6a04 	vldr	s12, [r7, #16]
 8008efe:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8009120 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8008f02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f16:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008f1a:	e068      	b.n	8008fee <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8008f1c:	69bb      	ldr	r3, [r7, #24]
 8008f1e:	ee07 3a90 	vmov	s15, r3
 8008f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f26:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8009124 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8008f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f2e:	6a3b      	ldr	r3, [r7, #32]
 8008f30:	ee07 3a90 	vmov	s15, r3
 8008f34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f38:	ed97 6a04 	vldr	s12, [r7, #16]
 8008f3c:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009120 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8008f40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f48:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f54:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008f58:	e049      	b.n	8008fee <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8008f5a:	69bb      	ldr	r3, [r7, #24]
 8008f5c:	ee07 3a90 	vmov	s15, r3
 8008f60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f64:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8009128 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 8008f68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f6c:	6a3b      	ldr	r3, [r7, #32]
 8008f6e:	ee07 3a90 	vmov	s15, r3
 8008f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f76:	ed97 6a04 	vldr	s12, [r7, #16]
 8008f7a:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8009120 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8008f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f92:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008f96:	e02a      	b.n	8008fee <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008f98:	4b5f      	ldr	r3, [pc, #380]	@ (8009118 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	08db      	lsrs	r3, r3, #3
 8008f9e:	f003 0303 	and.w	r3, r3, #3
 8008fa2:	4a5e      	ldr	r2, [pc, #376]	@ (800911c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8008fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8008fa8:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	ee07 3a90 	vmov	s15, r3
 8008fb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fb4:	69bb      	ldr	r3, [r7, #24]
 8008fb6:	ee07 3a90 	vmov	s15, r3
 8008fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fc2:	6a3b      	ldr	r3, [r7, #32]
 8008fc4:	ee07 3a90 	vmov	s15, r3
 8008fc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fcc:	ed97 6a04 	vldr	s12, [r7, #16]
 8008fd0:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8009120 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8008fd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fdc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fe0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fe4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fe8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008fec:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008fee:	4b4a      	ldr	r3, [pc, #296]	@ (8009118 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ff6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ffa:	d121      	bne.n	8009040 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8008ffc:	4b46      	ldr	r3, [pc, #280]	@ (8009118 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009000:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009004:	2b00      	cmp	r3, #0
 8009006:	d017      	beq.n	8009038 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009008:	4b43      	ldr	r3, [pc, #268]	@ (8009118 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800900a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800900c:	0a5b      	lsrs	r3, r3, #9
 800900e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009012:	ee07 3a90 	vmov	s15, r3
 8009016:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 800901a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800901e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8009022:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009026:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800902a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800902e:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	601a      	str	r2, [r3, #0]
 8009036:	e006      	b.n	8009046 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2200      	movs	r2, #0
 800903c:	601a      	str	r2, [r3, #0]
 800903e:	e002      	b.n	8009046 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2200      	movs	r2, #0
 8009044:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009046:	4b34      	ldr	r3, [pc, #208]	@ (8009118 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800904e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009052:	d121      	bne.n	8009098 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8009054:	4b30      	ldr	r3, [pc, #192]	@ (8009118 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009058:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800905c:	2b00      	cmp	r3, #0
 800905e:	d017      	beq.n	8009090 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009060:	4b2d      	ldr	r3, [pc, #180]	@ (8009118 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009064:	0c1b      	lsrs	r3, r3, #16
 8009066:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800906a:	ee07 3a90 	vmov	s15, r3
 800906e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8009072:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009076:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800907a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800907e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009082:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009086:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	605a      	str	r2, [r3, #4]
 800908e:	e006      	b.n	800909e <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2200      	movs	r2, #0
 8009094:	605a      	str	r2, [r3, #4]
 8009096:	e002      	b.n	800909e <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2200      	movs	r2, #0
 800909c:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800909e:	4b1e      	ldr	r3, [pc, #120]	@ (8009118 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80090a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090aa:	d121      	bne.n	80090f0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80090ac:	4b1a      	ldr	r3, [pc, #104]	@ (8009118 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80090ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d017      	beq.n	80090e8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80090b8:	4b17      	ldr	r3, [pc, #92]	@ (8009118 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80090ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090bc:	0e1b      	lsrs	r3, r3, #24
 80090be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090c2:	ee07 3a90 	vmov	s15, r3
 80090c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 80090ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80090ce:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80090d2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80090d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090de:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80090e6:	e010      	b.n	800910a <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2200      	movs	r2, #0
 80090ec:	609a      	str	r2, [r3, #8]
}
 80090ee:	e00c      	b.n	800910a <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2200      	movs	r2, #0
 80090f4:	609a      	str	r2, [r3, #8]
}
 80090f6:	e008      	b.n	800910a <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2200      	movs	r2, #0
 8009102:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	609a      	str	r2, [r3, #8]
}
 800910a:	bf00      	nop
 800910c:	372c      	adds	r7, #44	@ 0x2c
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr
 8009116:	bf00      	nop
 8009118:	44020c00 	.word	0x44020c00
 800911c:	03d09000 	.word	0x03d09000
 8009120:	46000000 	.word	0x46000000
 8009124:	4a742400 	.word	0x4a742400
 8009128:	4af42400 	.word	0x4af42400

0800912c <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800912c:	b590      	push	{r4, r7, lr}
 800912e:	b08f      	sub	sp, #60	@ 0x3c
 8009130:	af00      	add	r7, sp, #0
 8009132:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8009136:	e9d7 0100 	ldrd	r0, r1, [r7]
 800913a:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 800913e:	4321      	orrs	r1, r4
 8009140:	d150      	bne.n	80091e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8009142:	4b26      	ldr	r3, [pc, #152]	@ (80091dc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009144:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009148:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800914c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800914e:	4b23      	ldr	r3, [pc, #140]	@ (80091dc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009150:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009154:	f003 0302 	and.w	r3, r3, #2
 8009158:	2b02      	cmp	r3, #2
 800915a:	d108      	bne.n	800916e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800915c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800915e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009162:	d104      	bne.n	800916e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8009164:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009168:	637b      	str	r3, [r7, #52]	@ 0x34
 800916a:	f002 bb2a 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800916e:	4b1b      	ldr	r3, [pc, #108]	@ (80091dc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009170:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009174:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009178:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800917c:	d108      	bne.n	8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800917e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009180:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009184:	d104      	bne.n	8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8009186:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800918a:	637b      	str	r3, [r7, #52]	@ 0x34
 800918c:	f002 bb19 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8009190:	4b12      	ldr	r3, [pc, #72]	@ (80091dc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009198:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800919c:	d119      	bne.n	80091d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800919e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80091a4:	d115      	bne.n	80091d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80091a6:	4b0d      	ldr	r3, [pc, #52]	@ (80091dc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80091a8:	69db      	ldr	r3, [r3, #28]
 80091aa:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80091ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091b2:	d30a      	bcc.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80091b4:	4b09      	ldr	r3, [pc, #36]	@ (80091dc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80091b6:	69db      	ldr	r3, [r3, #28]
 80091b8:	0a1b      	lsrs	r3, r3, #8
 80091ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80091be:	4a08      	ldr	r2, [pc, #32]	@ (80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80091c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80091c4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80091c6:	f002 bafc 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 80091ca:	2300      	movs	r3, #0
 80091cc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80091ce:	f002 baf8 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80091d2:	2300      	movs	r3, #0
 80091d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80091d6:	f002 baf4 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80091da:	bf00      	nop
 80091dc:	44020c00 	.word	0x44020c00
 80091e0:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80091e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80091e8:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 80091ec:	ea50 0104 	orrs.w	r1, r0, r4
 80091f0:	f001 8275 	beq.w	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 80091f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80091f8:	2801      	cmp	r0, #1
 80091fa:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 80091fe:	f082 82dd 	bcs.w	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009202:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009206:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 800920a:	ea50 0104 	orrs.w	r1, r0, r4
 800920e:	f001 816c 	beq.w	800a4ea <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 8009212:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009216:	2801      	cmp	r0, #1
 8009218:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 800921c:	f082 82ce 	bcs.w	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009220:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009224:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 8009228:	ea50 0104 	orrs.w	r1, r0, r4
 800922c:	f001 8602 	beq.w	800ae34 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8009230:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009234:	2801      	cmp	r0, #1
 8009236:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 800923a:	f082 82bf 	bcs.w	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800923e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009242:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 8009246:	ea50 0104 	orrs.w	r1, r0, r4
 800924a:	f001 854c 	beq.w	800ace6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 800924e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009252:	2801      	cmp	r0, #1
 8009254:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 8009258:	f082 82b0 	bcs.w	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800925c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009260:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 8009264:	ea50 0104 	orrs.w	r1, r0, r4
 8009268:	f001 849e 	beq.w	800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 800926c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009270:	2801      	cmp	r0, #1
 8009272:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 8009276:	f082 82a1 	bcs.w	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800927a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800927e:	f1a1 0420 	sub.w	r4, r1, #32
 8009282:	ea50 0104 	orrs.w	r1, r0, r4
 8009286:	f001 83e8 	beq.w	800aa5a <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 800928a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800928e:	2801      	cmp	r0, #1
 8009290:	f171 0120 	sbcs.w	r1, r1, #32
 8009294:	f082 8292 	bcs.w	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009298:	e9d7 0100 	ldrd	r0, r1, [r7]
 800929c:	f1a1 0410 	sub.w	r4, r1, #16
 80092a0:	ea50 0104 	orrs.w	r1, r0, r4
 80092a4:	f002 8256 	beq.w	800b754 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80092a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80092ac:	2801      	cmp	r0, #1
 80092ae:	f171 0110 	sbcs.w	r1, r1, #16
 80092b2:	f082 8283 	bcs.w	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80092b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80092ba:	f1a1 0408 	sub.w	r4, r1, #8
 80092be:	ea50 0104 	orrs.w	r1, r0, r4
 80092c2:	f002 81cc 	beq.w	800b65e <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 80092c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80092ca:	2801      	cmp	r0, #1
 80092cc:	f171 0108 	sbcs.w	r1, r1, #8
 80092d0:	f082 8274 	bcs.w	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80092d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80092d8:	1f0c      	subs	r4, r1, #4
 80092da:	ea50 0104 	orrs.w	r1, r0, r4
 80092de:	f001 8648 	beq.w	800af72 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 80092e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80092e6:	2801      	cmp	r0, #1
 80092e8:	f171 0104 	sbcs.w	r1, r1, #4
 80092ec:	f082 8266 	bcs.w	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80092f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80092f4:	1e8c      	subs	r4, r1, #2
 80092f6:	ea50 0104 	orrs.w	r1, r0, r4
 80092fa:	f002 8143 	beq.w	800b584 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 80092fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009302:	2801      	cmp	r0, #1
 8009304:	f171 0102 	sbcs.w	r1, r1, #2
 8009308:	f082 8258 	bcs.w	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800930c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009310:	1e4c      	subs	r4, r1, #1
 8009312:	ea50 0104 	orrs.w	r1, r0, r4
 8009316:	f002 80ce 	beq.w	800b4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 800931a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800931e:	2801      	cmp	r0, #1
 8009320:	f171 0101 	sbcs.w	r1, r1, #1
 8009324:	f082 824a 	bcs.w	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009328:	e9d7 0100 	ldrd	r0, r1, [r7]
 800932c:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8009330:	4321      	orrs	r1, r4
 8009332:	f002 8059 	beq.w	800b3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 8009336:	e9d7 0100 	ldrd	r0, r1, [r7]
 800933a:	4cd9      	ldr	r4, [pc, #868]	@ (80096a0 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800933c:	42a0      	cmp	r0, r4
 800933e:	f171 0100 	sbcs.w	r1, r1, #0
 8009342:	f082 823b 	bcs.w	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009346:	e9d7 0100 	ldrd	r0, r1, [r7]
 800934a:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 800934e:	4321      	orrs	r1, r4
 8009350:	f001 87d9 	beq.w	800b306 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8009354:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009358:	4cd2      	ldr	r4, [pc, #840]	@ (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800935a:	42a0      	cmp	r0, r4
 800935c:	f171 0100 	sbcs.w	r1, r1, #0
 8009360:	f082 822c 	bcs.w	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009364:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009368:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 800936c:	4321      	orrs	r1, r4
 800936e:	f001 8751 	beq.w	800b214 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8009372:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009376:	4ccc      	ldr	r4, [pc, #816]	@ (80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8009378:	42a0      	cmp	r0, r4
 800937a:	f171 0100 	sbcs.w	r1, r1, #0
 800937e:	f082 821d 	bcs.w	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009382:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009386:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 800938a:	4321      	orrs	r1, r4
 800938c:	f001 869a 	beq.w	800b0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8009390:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009394:	4cc5      	ldr	r4, [pc, #788]	@ (80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8009396:	42a0      	cmp	r0, r4
 8009398:	f171 0100 	sbcs.w	r1, r1, #0
 800939c:	f082 820e 	bcs.w	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80093a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093a4:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 80093a8:	4321      	orrs	r1, r4
 80093aa:	f001 8612 	beq.w	800afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 80093ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093b2:	4cbf      	ldr	r4, [pc, #764]	@ (80096b0 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 80093b4:	42a0      	cmp	r0, r4
 80093b6:	f171 0100 	sbcs.w	r1, r1, #0
 80093ba:	f082 81ff 	bcs.w	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80093be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093c2:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 80093c6:	4321      	orrs	r1, r4
 80093c8:	f002 817e 	beq.w	800b6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 80093cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093d0:	4cb8      	ldr	r4, [pc, #736]	@ (80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80093d2:	42a0      	cmp	r0, r4
 80093d4:	f171 0100 	sbcs.w	r1, r1, #0
 80093d8:	f082 81f0 	bcs.w	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80093dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093e0:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 80093e4:	4321      	orrs	r1, r4
 80093e6:	f000 829e 	beq.w	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 80093ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093ee:	4cb2      	ldr	r4, [pc, #712]	@ (80096b8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80093f0:	42a0      	cmp	r0, r4
 80093f2:	f171 0100 	sbcs.w	r1, r1, #0
 80093f6:	f082 81e1 	bcs.w	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80093fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093fe:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8009402:	4321      	orrs	r1, r4
 8009404:	f000 826d 	beq.w	80098e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8009408:	e9d7 0100 	ldrd	r0, r1, [r7]
 800940c:	4cab      	ldr	r4, [pc, #684]	@ (80096bc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800940e:	42a0      	cmp	r0, r4
 8009410:	f171 0100 	sbcs.w	r1, r1, #0
 8009414:	f082 81d2 	bcs.w	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009418:	e9d7 0100 	ldrd	r0, r1, [r7]
 800941c:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8009420:	4321      	orrs	r1, r4
 8009422:	f001 800d 	beq.w	800a440 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8009426:	e9d7 0100 	ldrd	r0, r1, [r7]
 800942a:	4ca5      	ldr	r4, [pc, #660]	@ (80096c0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800942c:	42a0      	cmp	r0, r4
 800942e:	f171 0100 	sbcs.w	r1, r1, #0
 8009432:	f082 81c3 	bcs.w	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009436:	e9d7 0100 	ldrd	r0, r1, [r7]
 800943a:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 800943e:	4321      	orrs	r1, r4
 8009440:	f000 81d0 	beq.w	80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8009444:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009448:	4c9e      	ldr	r4, [pc, #632]	@ (80096c4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800944a:	42a0      	cmp	r0, r4
 800944c:	f171 0100 	sbcs.w	r1, r1, #0
 8009450:	f082 81b4 	bcs.w	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009454:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009458:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 800945c:	4321      	orrs	r1, r4
 800945e:	f000 8142 	beq.w	80096e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8009462:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009466:	4c98      	ldr	r4, [pc, #608]	@ (80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009468:	42a0      	cmp	r0, r4
 800946a:	f171 0100 	sbcs.w	r1, r1, #0
 800946e:	f082 81a5 	bcs.w	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009472:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009476:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 800947a:	4321      	orrs	r1, r4
 800947c:	f001 824e 	beq.w	800a91c <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8009480:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009484:	4c91      	ldr	r4, [pc, #580]	@ (80096cc <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8009486:	42a0      	cmp	r0, r4
 8009488:	f171 0100 	sbcs.w	r1, r1, #0
 800948c:	f082 8196 	bcs.w	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009490:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009494:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8009498:	4321      	orrs	r1, r4
 800949a:	f001 8197 	beq.w	800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 800949e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094a2:	4c8b      	ldr	r4, [pc, #556]	@ (80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80094a4:	42a0      	cmp	r0, r4
 80094a6:	f171 0100 	sbcs.w	r1, r1, #0
 80094aa:	f082 8187 	bcs.w	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80094ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094b2:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 80094b6:	4321      	orrs	r1, r4
 80094b8:	f001 8154 	beq.w	800a764 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 80094bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094c0:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 80094c4:	f171 0100 	sbcs.w	r1, r1, #0
 80094c8:	f082 8178 	bcs.w	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80094cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094d0:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 80094d4:	4321      	orrs	r1, r4
 80094d6:	f001 80b7 	beq.w	800a648 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 80094da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094de:	f248 0401 	movw	r4, #32769	@ 0x8001
 80094e2:	42a0      	cmp	r0, r4
 80094e4:	f171 0100 	sbcs.w	r1, r1, #0
 80094e8:	f082 8168 	bcs.w	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80094ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094f0:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 80094f4:	4321      	orrs	r1, r4
 80094f6:	f001 8064 	beq.w	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 80094fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094fe:	f244 0401 	movw	r4, #16385	@ 0x4001
 8009502:	42a0      	cmp	r0, r4
 8009504:	f171 0100 	sbcs.w	r1, r1, #0
 8009508:	f082 8158 	bcs.w	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800950c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009510:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8009514:	4321      	orrs	r1, r4
 8009516:	f001 8011 	beq.w	800a53c <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 800951a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800951e:	f242 0401 	movw	r4, #8193	@ 0x2001
 8009522:	42a0      	cmp	r0, r4
 8009524:	f171 0100 	sbcs.w	r1, r1, #0
 8009528:	f082 8148 	bcs.w	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800952c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009530:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 8009534:	4321      	orrs	r1, r4
 8009536:	f000 871e 	beq.w	800a376 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 800953a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800953e:	f241 0401 	movw	r4, #4097	@ 0x1001
 8009542:	42a0      	cmp	r0, r4
 8009544:	f171 0100 	sbcs.w	r1, r1, #0
 8009548:	f082 8138 	bcs.w	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800954c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009550:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 8009554:	4321      	orrs	r1, r4
 8009556:	f000 86a8 	beq.w	800a2aa <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 800955a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800955e:	f640 0401 	movw	r4, #2049	@ 0x801
 8009562:	42a0      	cmp	r0, r4
 8009564:	f171 0100 	sbcs.w	r1, r1, #0
 8009568:	f082 8128 	bcs.w	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800956c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009570:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 8009574:	4321      	orrs	r1, r4
 8009576:	f000 8632 	beq.w	800a1de <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 800957a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800957e:	f240 4401 	movw	r4, #1025	@ 0x401
 8009582:	42a0      	cmp	r0, r4
 8009584:	f171 0100 	sbcs.w	r1, r1, #0
 8009588:	f082 8118 	bcs.w	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800958c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009590:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 8009594:	4321      	orrs	r1, r4
 8009596:	f000 85b0 	beq.w	800a0fa <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 800959a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800959e:	f240 2401 	movw	r4, #513	@ 0x201
 80095a2:	42a0      	cmp	r0, r4
 80095a4:	f171 0100 	sbcs.w	r1, r1, #0
 80095a8:	f082 8108 	bcs.w	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80095ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095b0:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 80095b4:	4321      	orrs	r1, r4
 80095b6:	f000 8535 	beq.w	800a024 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 80095ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095be:	f240 1401 	movw	r4, #257	@ 0x101
 80095c2:	42a0      	cmp	r0, r4
 80095c4:	f171 0100 	sbcs.w	r1, r1, #0
 80095c8:	f082 80f8 	bcs.w	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80095cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095d0:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 80095d4:	4321      	orrs	r1, r4
 80095d6:	f000 84ba 	beq.w	8009f4e <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 80095da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095de:	2881      	cmp	r0, #129	@ 0x81
 80095e0:	f171 0100 	sbcs.w	r1, r1, #0
 80095e4:	f082 80ea 	bcs.w	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80095e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095ec:	2821      	cmp	r0, #33	@ 0x21
 80095ee:	f171 0100 	sbcs.w	r1, r1, #0
 80095f2:	d26f      	bcs.n	80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80095f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095f8:	4301      	orrs	r1, r0
 80095fa:	f002 80df 	beq.w	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80095fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009602:	1e42      	subs	r2, r0, #1
 8009604:	f141 33ff 	adc.w	r3, r1, #4294967295
 8009608:	2a20      	cmp	r2, #32
 800960a:	f173 0100 	sbcs.w	r1, r3, #0
 800960e:	f082 80d5 	bcs.w	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009612:	2a1f      	cmp	r2, #31
 8009614:	f202 80d2 	bhi.w	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009618:	a101      	add	r1, pc, #4	@ (adr r1, 8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 800961a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800961e:	bf00      	nop
 8009620:	08009981 	.word	0x08009981
 8009624:	08009a4d 	.word	0x08009a4d
 8009628:	0800b7bd 	.word	0x0800b7bd
 800962c:	08009b0d 	.word	0x08009b0d
 8009630:	0800b7bd 	.word	0x0800b7bd
 8009634:	0800b7bd 	.word	0x0800b7bd
 8009638:	0800b7bd 	.word	0x0800b7bd
 800963c:	08009bdd 	.word	0x08009bdd
 8009640:	0800b7bd 	.word	0x0800b7bd
 8009644:	0800b7bd 	.word	0x0800b7bd
 8009648:	0800b7bd 	.word	0x0800b7bd
 800964c:	0800b7bd 	.word	0x0800b7bd
 8009650:	0800b7bd 	.word	0x0800b7bd
 8009654:	0800b7bd 	.word	0x0800b7bd
 8009658:	0800b7bd 	.word	0x0800b7bd
 800965c:	08009cbf 	.word	0x08009cbf
 8009660:	0800b7bd 	.word	0x0800b7bd
 8009664:	0800b7bd 	.word	0x0800b7bd
 8009668:	0800b7bd 	.word	0x0800b7bd
 800966c:	0800b7bd 	.word	0x0800b7bd
 8009670:	0800b7bd 	.word	0x0800b7bd
 8009674:	0800b7bd 	.word	0x0800b7bd
 8009678:	0800b7bd 	.word	0x0800b7bd
 800967c:	0800b7bd 	.word	0x0800b7bd
 8009680:	0800b7bd 	.word	0x0800b7bd
 8009684:	0800b7bd 	.word	0x0800b7bd
 8009688:	0800b7bd 	.word	0x0800b7bd
 800968c:	0800b7bd 	.word	0x0800b7bd
 8009690:	0800b7bd 	.word	0x0800b7bd
 8009694:	0800b7bd 	.word	0x0800b7bd
 8009698:	0800b7bd 	.word	0x0800b7bd
 800969c:	08009d95 	.word	0x08009d95
 80096a0:	80000001 	.word	0x80000001
 80096a4:	40000001 	.word	0x40000001
 80096a8:	20000001 	.word	0x20000001
 80096ac:	10000001 	.word	0x10000001
 80096b0:	08000001 	.word	0x08000001
 80096b4:	04000001 	.word	0x04000001
 80096b8:	00800001 	.word	0x00800001
 80096bc:	00400001 	.word	0x00400001
 80096c0:	00200001 	.word	0x00200001
 80096c4:	00100001 	.word	0x00100001
 80096c8:	00080001 	.word	0x00080001
 80096cc:	00040001 	.word	0x00040001
 80096d0:	00020001 	.word	0x00020001
 80096d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096d8:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80096dc:	430b      	orrs	r3, r1
 80096de:	f000 83c4 	beq.w	8009e6a <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 80096e2:	f002 b86b 	b.w	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80096e6:	4ba1      	ldr	r3, [pc, #644]	@ (800996c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80096e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80096ec:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80096f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80096f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096f4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80096f8:	d036      	beq.n	8009768 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 80096fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009700:	d86b      	bhi.n	80097da <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8009702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009704:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009708:	d02b      	beq.n	8009762 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800970a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800970c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009710:	d863      	bhi.n	80097da <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8009712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009714:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009718:	d01b      	beq.n	8009752 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800971a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800971c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009720:	d85b      	bhi.n	80097da <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8009722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009724:	2b00      	cmp	r3, #0
 8009726:	d004      	beq.n	8009732 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8009728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800972a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800972e:	d008      	beq.n	8009742 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8009730:	e053      	b.n	80097da <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009732:	f107 0320 	add.w	r3, r7, #32
 8009736:	4618      	mov	r0, r3
 8009738:	f7ff f8b4 	bl	80088a4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800973c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800973e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009740:	e04e      	b.n	80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009742:	f107 0314 	add.w	r3, r7, #20
 8009746:	4618      	mov	r0, r3
 8009748:	f7ff fa18 	bl	8008b7c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009750:	e046      	b.n	80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009752:	f107 0308 	add.w	r3, r7, #8
 8009756:	4618      	mov	r0, r3
 8009758:	f7ff fb7c 	bl	8008e54 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009760:	e03e      	b.n	80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009762:	4b83      	ldr	r3, [pc, #524]	@ (8009970 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8009764:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009766:	e03b      	b.n	80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009768:	4b80      	ldr	r3, [pc, #512]	@ (800996c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800976a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800976e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009772:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009774:	4b7d      	ldr	r3, [pc, #500]	@ (800996c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f003 0302 	and.w	r3, r3, #2
 800977c:	2b02      	cmp	r3, #2
 800977e:	d10c      	bne.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8009780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009782:	2b00      	cmp	r3, #0
 8009784:	d109      	bne.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009786:	4b79      	ldr	r3, [pc, #484]	@ (800996c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	08db      	lsrs	r3, r3, #3
 800978c:	f003 0303 	and.w	r3, r3, #3
 8009790:	4a78      	ldr	r2, [pc, #480]	@ (8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8009792:	fa22 f303 	lsr.w	r3, r2, r3
 8009796:	637b      	str	r3, [r7, #52]	@ 0x34
 8009798:	e01e      	b.n	80097d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800979a:	4b74      	ldr	r3, [pc, #464]	@ (800996c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80097a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097a6:	d106      	bne.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80097a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097ae:	d102      	bne.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80097b0:	4b71      	ldr	r3, [pc, #452]	@ (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 80097b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80097b4:	e010      	b.n	80097d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80097b6:	4b6d      	ldr	r3, [pc, #436]	@ (800996c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097c2:	d106      	bne.n	80097d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 80097c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80097ca:	d102      	bne.n	80097d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80097cc:	4b6b      	ldr	r3, [pc, #428]	@ (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80097ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80097d0:	e002      	b.n	80097d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80097d2:	2300      	movs	r3, #0
 80097d4:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80097d6:	e003      	b.n	80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 80097d8:	e002      	b.n	80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 80097da:	2300      	movs	r3, #0
 80097dc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80097de:	bf00      	nop
          }
        }
        break;
 80097e0:	f001 bfef 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80097e4:	4b61      	ldr	r3, [pc, #388]	@ (800996c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80097e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80097ea:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 80097ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80097f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80097f6:	d036      	beq.n	8009866 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 80097f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80097fe:	d86b      	bhi.n	80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8009800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009802:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8009806:	d02b      	beq.n	8009860 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8009808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800980a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800980e:	d863      	bhi.n	80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8009810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009812:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009816:	d01b      	beq.n	8009850 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800981a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800981e:	d85b      	bhi.n	80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8009820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009822:	2b00      	cmp	r3, #0
 8009824:	d004      	beq.n	8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8009826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009828:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800982c:	d008      	beq.n	8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 800982e:	e053      	b.n	80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009830:	f107 0320 	add.w	r3, r7, #32
 8009834:	4618      	mov	r0, r3
 8009836:	f7ff f835 	bl	80088a4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800983a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800983c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800983e:	e04e      	b.n	80098de <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009840:	f107 0314 	add.w	r3, r7, #20
 8009844:	4618      	mov	r0, r3
 8009846:	f7ff f999 	bl	8008b7c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800984e:	e046      	b.n	80098de <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009850:	f107 0308 	add.w	r3, r7, #8
 8009854:	4618      	mov	r0, r3
 8009856:	f7ff fafd 	bl	8008e54 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800985e:	e03e      	b.n	80098de <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009860:	4b43      	ldr	r3, [pc, #268]	@ (8009970 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8009862:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009864:	e03b      	b.n	80098de <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009866:	4b41      	ldr	r3, [pc, #260]	@ (800996c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009868:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800986c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009870:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009872:	4b3e      	ldr	r3, [pc, #248]	@ (800996c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f003 0302 	and.w	r3, r3, #2
 800987a:	2b02      	cmp	r3, #2
 800987c:	d10c      	bne.n	8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 800987e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009880:	2b00      	cmp	r3, #0
 8009882:	d109      	bne.n	8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009884:	4b39      	ldr	r3, [pc, #228]	@ (800996c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	08db      	lsrs	r3, r3, #3
 800988a:	f003 0303 	and.w	r3, r3, #3
 800988e:	4a39      	ldr	r2, [pc, #228]	@ (8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8009890:	fa22 f303 	lsr.w	r3, r2, r3
 8009894:	637b      	str	r3, [r7, #52]	@ 0x34
 8009896:	e01e      	b.n	80098d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009898:	4b34      	ldr	r3, [pc, #208]	@ (800996c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80098a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098a4:	d106      	bne.n	80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80098a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098ac:	d102      	bne.n	80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80098ae:	4b32      	ldr	r3, [pc, #200]	@ (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 80098b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80098b2:	e010      	b.n	80098d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80098b4:	4b2d      	ldr	r3, [pc, #180]	@ (800996c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098c0:	d106      	bne.n	80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 80098c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80098c8:	d102      	bne.n	80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80098ca:	4b2c      	ldr	r3, [pc, #176]	@ (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80098cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80098ce:	e002      	b.n	80098d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80098d0:	2300      	movs	r3, #0
 80098d2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80098d4:	e003      	b.n	80098de <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 80098d6:	e002      	b.n	80098de <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 80098d8:	2300      	movs	r3, #0
 80098da:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80098dc:	bf00      	nop
          }
        }
        break;
 80098de:	f001 bf70 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 80098e2:	4b22      	ldr	r3, [pc, #136]	@ (800996c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80098e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80098e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098ec:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 80098ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d108      	bne.n	8009906 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80098f4:	f107 0320 	add.w	r3, r7, #32
 80098f8:	4618      	mov	r0, r3
 80098fa:	f7fe ffd3 	bl	80088a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80098fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009900:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009902:	f001 bf5e 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8009906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009908:	2b40      	cmp	r3, #64	@ 0x40
 800990a:	d108      	bne.n	800991e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800990c:	f107 0314 	add.w	r3, r7, #20
 8009910:	4618      	mov	r0, r3
 8009912:	f7ff f933 	bl	8008b7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009916:	69fb      	ldr	r3, [r7, #28]
 8009918:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800991a:	f001 bf52 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800991e:	2300      	movs	r3, #0
 8009920:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009922:	f001 bf4e 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8009926:	4b11      	ldr	r3, [pc, #68]	@ (800996c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009928:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800992c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009930:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8009932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009934:	2b00      	cmp	r3, #0
 8009936:	d108      	bne.n	800994a <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009938:	f107 0320 	add.w	r3, r7, #32
 800993c:	4618      	mov	r0, r3
 800993e:	f7fe ffb1 	bl	80088a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009944:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009946:	f001 bf3c 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 800994a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800994c:	2b80      	cmp	r3, #128	@ 0x80
 800994e:	d108      	bne.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009950:	f107 0314 	add.w	r3, r7, #20
 8009954:	4618      	mov	r0, r3
 8009956:	f7ff f911 	bl	8008b7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800995a:	69fb      	ldr	r3, [r7, #28]
 800995c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800995e:	f001 bf30 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8009962:	2300      	movs	r3, #0
 8009964:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009966:	f001 bf2c 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800996a:	bf00      	nop
 800996c:	44020c00 	.word	0x44020c00
 8009970:	00bb8000 	.word	0x00bb8000
 8009974:	03d09000 	.word	0x03d09000
 8009978:	003d0900 	.word	0x003d0900
 800997c:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8009980:	4b9d      	ldr	r3, [pc, #628]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009986:	f003 0307 	and.w	r3, r3, #7
 800998a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800998c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800998e:	2b00      	cmp	r3, #0
 8009990:	d104      	bne.n	800999c <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8009992:	f7fc ffd1 	bl	8006938 <HAL_RCC_GetPCLK2Freq>
 8009996:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8009998:	f001 bf13 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800999c:	4b96      	ldr	r3, [pc, #600]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80099a8:	d10a      	bne.n	80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 80099aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d107      	bne.n	80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099b0:	f107 0314 	add.w	r3, r7, #20
 80099b4:	4618      	mov	r0, r3
 80099b6:	f7ff f8e1 	bl	8008b7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80099ba:	69bb      	ldr	r3, [r7, #24]
 80099bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80099be:	e043      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 80099c0:	4b8d      	ldr	r3, [pc, #564]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80099c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099cc:	d10a      	bne.n	80099e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 80099ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099d0:	2b02      	cmp	r3, #2
 80099d2:	d107      	bne.n	80099e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099d4:	f107 0308 	add.w	r3, r7, #8
 80099d8:	4618      	mov	r0, r3
 80099da:	f7ff fa3b 	bl	8008e54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80099e2:	e031      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80099e4:	4b84      	ldr	r3, [pc, #528]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f003 0302 	and.w	r3, r3, #2
 80099ec:	2b02      	cmp	r3, #2
 80099ee:	d10c      	bne.n	8009a0a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80099f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099f2:	2b03      	cmp	r3, #3
 80099f4:	d109      	bne.n	8009a0a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80099f6:	4b80      	ldr	r3, [pc, #512]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	08db      	lsrs	r3, r3, #3
 80099fc:	f003 0303 	and.w	r3, r3, #3
 8009a00:	4a7e      	ldr	r2, [pc, #504]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8009a02:	fa22 f303 	lsr.w	r3, r2, r3
 8009a06:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a08:	e01e      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8009a0a:	4b7b      	ldr	r3, [pc, #492]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009a12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a16:	d105      	bne.n	8009a24 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8009a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a1a:	2b04      	cmp	r3, #4
 8009a1c:	d102      	bne.n	8009a24 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8009a1e:	4b78      	ldr	r3, [pc, #480]	@ (8009c00 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8009a20:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a22:	e011      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8009a24:	4b74      	ldr	r3, [pc, #464]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009a26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a2a:	f003 0302 	and.w	r3, r3, #2
 8009a2e:	2b02      	cmp	r3, #2
 8009a30:	d106      	bne.n	8009a40 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8009a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a34:	2b05      	cmp	r3, #5
 8009a36:	d103      	bne.n	8009a40 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8009a38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a3e:	e003      	b.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8009a40:	2300      	movs	r3, #0
 8009a42:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a44:	f001 bebd 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009a48:	f001 bebb 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8009a4c:	4b6a      	ldr	r3, [pc, #424]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009a4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009a52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009a56:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8009a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d104      	bne.n	8009a68 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009a5e:	f7fc ff55 	bl	800690c <HAL_RCC_GetPCLK1Freq>
 8009a62:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8009a64:	f001 bead 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8009a68:	4b63      	ldr	r3, [pc, #396]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a74:	d10a      	bne.n	8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8009a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a78:	2b08      	cmp	r3, #8
 8009a7a:	d107      	bne.n	8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a7c:	f107 0314 	add.w	r3, r7, #20
 8009a80:	4618      	mov	r0, r3
 8009a82:	f7ff f87b 	bl	8008b7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009a86:	69bb      	ldr	r3, [r7, #24]
 8009a88:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a8a:	e03d      	b.n	8009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8009a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a8e:	2b10      	cmp	r3, #16
 8009a90:	d108      	bne.n	8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a92:	f107 0308 	add.w	r3, r7, #8
 8009a96:	4618      	mov	r0, r3
 8009a98:	f7ff f9dc 	bl	8008e54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009aa0:	f001 be8f 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8009aa4:	4b54      	ldr	r3, [pc, #336]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f003 0302 	and.w	r3, r3, #2
 8009aac:	2b02      	cmp	r3, #2
 8009aae:	d10c      	bne.n	8009aca <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8009ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ab2:	2b18      	cmp	r3, #24
 8009ab4:	d109      	bne.n	8009aca <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009ab6:	4b50      	ldr	r3, [pc, #320]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	08db      	lsrs	r3, r3, #3
 8009abc:	f003 0303 	and.w	r3, r3, #3
 8009ac0:	4a4e      	ldr	r2, [pc, #312]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8009ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8009ac6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ac8:	e01e      	b.n	8009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8009aca:	4b4b      	ldr	r3, [pc, #300]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009ad2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ad6:	d105      	bne.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8009ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ada:	2b20      	cmp	r3, #32
 8009adc:	d102      	bne.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 8009ade:	4b48      	ldr	r3, [pc, #288]	@ (8009c00 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8009ae0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ae2:	e011      	b.n	8009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8009ae4:	4b44      	ldr	r3, [pc, #272]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009ae6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009aea:	f003 0302 	and.w	r3, r3, #2
 8009aee:	2b02      	cmp	r3, #2
 8009af0:	d106      	bne.n	8009b00 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 8009af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009af4:	2b28      	cmp	r3, #40	@ 0x28
 8009af6:	d103      	bne.n	8009b00 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8009af8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009afc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009afe:	e003      	b.n	8009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8009b00:	2300      	movs	r3, #0
 8009b02:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b04:	f001 be5d 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009b08:	f001 be5b 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8009b0c:	4b3a      	ldr	r3, [pc, #232]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009b0e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009b12:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009b16:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8009b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d104      	bne.n	8009b28 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009b1e:	f7fc fef5 	bl	800690c <HAL_RCC_GetPCLK1Freq>
 8009b22:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8009b24:	f001 be4d 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8009b28:	4b33      	ldr	r3, [pc, #204]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b34:	d10a      	bne.n	8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8009b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b38:	2b40      	cmp	r3, #64	@ 0x40
 8009b3a:	d107      	bne.n	8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b3c:	f107 0314 	add.w	r3, r7, #20
 8009b40:	4618      	mov	r0, r3
 8009b42:	f7ff f81b 	bl	8008b7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009b46:	69bb      	ldr	r3, [r7, #24]
 8009b48:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b4a:	e045      	b.n	8009bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8009b4c:	4b2a      	ldr	r3, [pc, #168]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b58:	d10a      	bne.n	8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8009b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b5c:	2b80      	cmp	r3, #128	@ 0x80
 8009b5e:	d107      	bne.n	8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b60:	f107 0308 	add.w	r3, r7, #8
 8009b64:	4618      	mov	r0, r3
 8009b66:	f7ff f975 	bl	8008e54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b6e:	e033      	b.n	8009bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8009b70:	4b21      	ldr	r3, [pc, #132]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f003 0302 	and.w	r3, r3, #2
 8009b78:	2b02      	cmp	r3, #2
 8009b7a:	d10c      	bne.n	8009b96 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8009b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009b80:	d109      	bne.n	8009b96 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009b82:	4b1d      	ldr	r3, [pc, #116]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	08db      	lsrs	r3, r3, #3
 8009b88:	f003 0303 	and.w	r3, r3, #3
 8009b8c:	4a1b      	ldr	r2, [pc, #108]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8009b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8009b92:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b94:	e020      	b.n	8009bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8009b96:	4b18      	ldr	r3, [pc, #96]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ba2:	d106      	bne.n	8009bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8009ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ba6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009baa:	d102      	bne.n	8009bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8009bac:	4b14      	ldr	r3, [pc, #80]	@ (8009c00 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8009bae:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bb0:	e012      	b.n	8009bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8009bb2:	4b11      	ldr	r3, [pc, #68]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009bb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009bb8:	f003 0302 	and.w	r3, r3, #2
 8009bbc:	2b02      	cmp	r3, #2
 8009bbe:	d107      	bne.n	8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8009bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bc2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8009bc6:	d103      	bne.n	8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8009bc8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009bcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bce:	e003      	b.n	8009bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009bd4:	f001 bdf5 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009bd8:	f001 bdf3 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8009bdc:	4b06      	ldr	r3, [pc, #24]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009bde:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009be2:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8009be6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8009be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d10a      	bne.n	8009c04 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009bee:	f7fc fe8d 	bl	800690c <HAL_RCC_GetPCLK1Freq>
 8009bf2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8009bf4:	f001 bde5 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009bf8:	44020c00 	.word	0x44020c00
 8009bfc:	03d09000 	.word	0x03d09000
 8009c00:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8009c04:	4ba0      	ldr	r3, [pc, #640]	@ (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c10:	d10b      	bne.n	8009c2a <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8009c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c18:	d107      	bne.n	8009c2a <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c1a:	f107 0314 	add.w	r3, r7, #20
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7fe ffac 	bl	8008b7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009c24:	69bb      	ldr	r3, [r7, #24]
 8009c26:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c28:	e047      	b.n	8009cba <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8009c2a:	4b97      	ldr	r3, [pc, #604]	@ (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009c32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c36:	d10b      	bne.n	8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8009c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c3e:	d107      	bne.n	8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c40:	f107 0308 	add.w	r3, r7, #8
 8009c44:	4618      	mov	r0, r3
 8009c46:	f7ff f905 	bl	8008e54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c4e:	e034      	b.n	8009cba <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8009c50:	4b8d      	ldr	r3, [pc, #564]	@ (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f003 0302 	and.w	r3, r3, #2
 8009c58:	2b02      	cmp	r3, #2
 8009c5a:	d10d      	bne.n	8009c78 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8009c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c5e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009c62:	d109      	bne.n	8009c78 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009c64:	4b88      	ldr	r3, [pc, #544]	@ (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	08db      	lsrs	r3, r3, #3
 8009c6a:	f003 0303 	and.w	r3, r3, #3
 8009c6e:	4a87      	ldr	r2, [pc, #540]	@ (8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8009c70:	fa22 f303 	lsr.w	r3, r2, r3
 8009c74:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c76:	e020      	b.n	8009cba <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8009c78:	4b83      	ldr	r3, [pc, #524]	@ (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009c80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c84:	d106      	bne.n	8009c94 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8009c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c8c:	d102      	bne.n	8009c94 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8009c8e:	4b80      	ldr	r3, [pc, #512]	@ (8009e90 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8009c90:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c92:	e012      	b.n	8009cba <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8009c94:	4b7c      	ldr	r3, [pc, #496]	@ (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009c96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c9a:	f003 0302 	and.w	r3, r3, #2
 8009c9e:	2b02      	cmp	r3, #2
 8009ca0:	d107      	bne.n	8009cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8009ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ca4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8009ca8:	d103      	bne.n	8009cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8009caa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009cae:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cb0:	e003      	b.n	8009cba <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009cb6:	f001 bd84 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009cba:	f001 bd82 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8009cbe:	4b72      	ldr	r3, [pc, #456]	@ (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009cc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009cc4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009cc8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8009cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d104      	bne.n	8009cda <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009cd0:	f7fc fe1c 	bl	800690c <HAL_RCC_GetPCLK1Freq>
 8009cd4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8009cd6:	f001 bd74 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8009cda:	4b6b      	ldr	r3, [pc, #428]	@ (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ce2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ce6:	d10b      	bne.n	8009d00 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8009ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009cee:	d107      	bne.n	8009d00 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cf0:	f107 0314 	add.w	r3, r7, #20
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f7fe ff41 	bl	8008b7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009cfa:	69bb      	ldr	r3, [r7, #24]
 8009cfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cfe:	e047      	b.n	8009d90 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8009d00:	4b61      	ldr	r3, [pc, #388]	@ (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009d08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d0c:	d10b      	bne.n	8009d26 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8009d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d14:	d107      	bne.n	8009d26 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d16:	f107 0308 	add.w	r3, r7, #8
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f7ff f89a 	bl	8008e54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d24:	e034      	b.n	8009d90 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8009d26:	4b58      	ldr	r3, [pc, #352]	@ (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f003 0302 	and.w	r3, r3, #2
 8009d2e:	2b02      	cmp	r3, #2
 8009d30:	d10d      	bne.n	8009d4e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8009d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d34:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009d38:	d109      	bne.n	8009d4e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009d3a:	4b53      	ldr	r3, [pc, #332]	@ (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	08db      	lsrs	r3, r3, #3
 8009d40:	f003 0303 	and.w	r3, r3, #3
 8009d44:	4a51      	ldr	r2, [pc, #324]	@ (8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8009d46:	fa22 f303 	lsr.w	r3, r2, r3
 8009d4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d4c:	e020      	b.n	8009d90 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8009d4e:	4b4e      	ldr	r3, [pc, #312]	@ (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009d56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d5a:	d106      	bne.n	8009d6a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8009d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009d62:	d102      	bne.n	8009d6a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8009d64:	4b4a      	ldr	r3, [pc, #296]	@ (8009e90 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8009d66:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d68:	e012      	b.n	8009d90 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8009d6a:	4b47      	ldr	r3, [pc, #284]	@ (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009d6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009d70:	f003 0302 	and.w	r3, r3, #2
 8009d74:	2b02      	cmp	r3, #2
 8009d76:	d107      	bne.n	8009d88 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8009d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d7a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009d7e:	d103      	bne.n	8009d88 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8009d80:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d84:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d86:	e003      	b.n	8009d90 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009d8c:	f001 bd19 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009d90:	f001 bd17 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8009d94:	4b3c      	ldr	r3, [pc, #240]	@ (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009d96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009d9a:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8009d9e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8009da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d104      	bne.n	8009db0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009da6:	f7fc fdb1 	bl	800690c <HAL_RCC_GetPCLK1Freq>
 8009daa:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8009dac:	f001 bd09 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8009db0:	4b35      	ldr	r3, [pc, #212]	@ (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009db8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009dbc:	d10b      	bne.n	8009dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8009dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009dc4:	d107      	bne.n	8009dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009dc6:	f107 0314 	add.w	r3, r7, #20
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f7fe fed6 	bl	8008b7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009dd0:	69bb      	ldr	r3, [r7, #24]
 8009dd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dd4:	e047      	b.n	8009e66 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8009dd6:	4b2c      	ldr	r3, [pc, #176]	@ (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009dde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009de2:	d10b      	bne.n	8009dfc <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8009de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009dea:	d107      	bne.n	8009dfc <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009dec:	f107 0308 	add.w	r3, r7, #8
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7ff f82f 	bl	8008e54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dfa:	e034      	b.n	8009e66 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8009dfc:	4b22      	ldr	r3, [pc, #136]	@ (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f003 0302 	and.w	r3, r3, #2
 8009e04:	2b02      	cmp	r3, #2
 8009e06:	d10d      	bne.n	8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8009e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e0a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8009e0e:	d109      	bne.n	8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009e10:	4b1d      	ldr	r3, [pc, #116]	@ (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	08db      	lsrs	r3, r3, #3
 8009e16:	f003 0303 	and.w	r3, r3, #3
 8009e1a:	4a1c      	ldr	r2, [pc, #112]	@ (8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8009e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8009e20:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e22:	e020      	b.n	8009e66 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8009e24:	4b18      	ldr	r3, [pc, #96]	@ (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009e2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e30:	d106      	bne.n	8009e40 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8009e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e38:	d102      	bne.n	8009e40 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8009e3a:	4b15      	ldr	r3, [pc, #84]	@ (8009e90 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8009e3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e3e:	e012      	b.n	8009e66 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8009e40:	4b11      	ldr	r3, [pc, #68]	@ (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009e42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e46:	f003 0302 	and.w	r3, r3, #2
 8009e4a:	2b02      	cmp	r3, #2
 8009e4c:	d107      	bne.n	8009e5e <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8009e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e50:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8009e54:	d103      	bne.n	8009e5e <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 8009e56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e5c:	e003      	b.n	8009e66 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009e62:	f001 bcae 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009e66:	f001 bcac 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8009e6a:	4b07      	ldr	r3, [pc, #28]	@ (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009e6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009e70:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 8009e74:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8009e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d10b      	bne.n	8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009e7c:	f7fc fd46 	bl	800690c <HAL_RCC_GetPCLK1Freq>
 8009e80:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 8009e82:	f001 bc9e 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009e86:	bf00      	nop
 8009e88:	44020c00 	.word	0x44020c00
 8009e8c:	03d09000 	.word	0x03d09000
 8009e90:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8009e94:	4ba0      	ldr	r3, [pc, #640]	@ (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ea0:	d10b      	bne.n	8009eba <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8009ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ea4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009ea8:	d107      	bne.n	8009eba <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009eaa:	f107 0314 	add.w	r3, r7, #20
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f7fe fe64 	bl	8008b7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009eb4:	69bb      	ldr	r3, [r7, #24]
 8009eb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009eb8:	e047      	b.n	8009f4a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8009eba:	4b97      	ldr	r3, [pc, #604]	@ (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009ec2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ec6:	d10b      	bne.n	8009ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8009ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eca:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009ece:	d107      	bne.n	8009ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ed0:	f107 0308 	add.w	r3, r7, #8
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f7fe ffbd 	bl	8008e54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ede:	e034      	b.n	8009f4a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8009ee0:	4b8d      	ldr	r3, [pc, #564]	@ (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f003 0302 	and.w	r3, r3, #2
 8009ee8:	2b02      	cmp	r3, #2
 8009eea:	d10d      	bne.n	8009f08 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8009eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eee:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009ef2:	d109      	bne.n	8009f08 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009ef4:	4b88      	ldr	r3, [pc, #544]	@ (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	08db      	lsrs	r3, r3, #3
 8009efa:	f003 0303 	and.w	r3, r3, #3
 8009efe:	4a87      	ldr	r2, [pc, #540]	@ (800a11c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8009f00:	fa22 f303 	lsr.w	r3, r2, r3
 8009f04:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f06:	e020      	b.n	8009f4a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8009f08:	4b83      	ldr	r3, [pc, #524]	@ (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009f10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f14:	d106      	bne.n	8009f24 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8009f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009f1c:	d102      	bne.n	8009f24 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 8009f1e:	4b80      	ldr	r3, [pc, #512]	@ (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8009f20:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f22:	e012      	b.n	8009f4a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8009f24:	4b7c      	ldr	r3, [pc, #496]	@ (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009f26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f2a:	f003 0302 	and.w	r3, r3, #2
 8009f2e:	2b02      	cmp	r3, #2
 8009f30:	d107      	bne.n	8009f42 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8009f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f34:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8009f38:	d103      	bne.n	8009f42 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 8009f3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f40:	e003      	b.n	8009f4a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 8009f42:	2300      	movs	r3, #0
 8009f44:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009f46:	f001 bc3c 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009f4a:	f001 bc3a 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8009f4e:	4b72      	ldr	r3, [pc, #456]	@ (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009f50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009f54:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8009f58:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8009f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d104      	bne.n	8009f6a <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009f60:	f7fc fcd4 	bl	800690c <HAL_RCC_GetPCLK1Freq>
 8009f64:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 8009f66:	f001 bc2c 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8009f6a:	4b6b      	ldr	r3, [pc, #428]	@ (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009f76:	d10b      	bne.n	8009f90 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8009f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009f7e:	d107      	bne.n	8009f90 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f80:	f107 0314 	add.w	r3, r7, #20
 8009f84:	4618      	mov	r0, r3
 8009f86:	f7fe fdf9 	bl	8008b7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009f8a:	69bb      	ldr	r3, [r7, #24]
 8009f8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f8e:	e047      	b.n	800a020 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8009f90:	4b61      	ldr	r3, [pc, #388]	@ (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009f98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f9c:	d10b      	bne.n	8009fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8009f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fa0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009fa4:	d107      	bne.n	8009fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009fa6:	f107 0308 	add.w	r3, r7, #8
 8009faa:	4618      	mov	r0, r3
 8009fac:	f7fe ff52 	bl	8008e54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fb4:	e034      	b.n	800a020 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8009fb6:	4b58      	ldr	r3, [pc, #352]	@ (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f003 0302 	and.w	r3, r3, #2
 8009fbe:	2b02      	cmp	r3, #2
 8009fc0:	d10d      	bne.n	8009fde <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 8009fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fc4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009fc8:	d109      	bne.n	8009fde <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009fca:	4b53      	ldr	r3, [pc, #332]	@ (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	08db      	lsrs	r3, r3, #3
 8009fd0:	f003 0303 	and.w	r3, r3, #3
 8009fd4:	4a51      	ldr	r2, [pc, #324]	@ (800a11c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8009fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8009fda:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fdc:	e020      	b.n	800a020 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8009fde:	4b4e      	ldr	r3, [pc, #312]	@ (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009fe6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fea:	d106      	bne.n	8009ffa <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8009fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009ff2:	d102      	bne.n	8009ffa <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 8009ff4:	4b4a      	ldr	r3, [pc, #296]	@ (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8009ff6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ff8:	e012      	b.n	800a020 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 8009ffa:	4b47      	ldr	r3, [pc, #284]	@ (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009ffc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a000:	f003 0302 	and.w	r3, r3, #2
 800a004:	2b02      	cmp	r3, #2
 800a006:	d107      	bne.n	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 800a008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a00a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800a00e:	d103      	bne.n	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 800a010:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a014:	637b      	str	r3, [r7, #52]	@ 0x34
 800a016:	e003      	b.n	800a020 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 800a018:	2300      	movs	r3, #0
 800a01a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a01c:	f001 bbd1 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a020:	f001 bbcf 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 800a024:	4b3c      	ldr	r3, [pc, #240]	@ (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a026:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a02a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a02e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 800a030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a032:	2b00      	cmp	r3, #0
 800a034:	d104      	bne.n	800a040 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a036:	f7fc fc69 	bl	800690c <HAL_RCC_GetPCLK1Freq>
 800a03a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 800a03c:	f001 bbc1 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 800a040:	4b35      	ldr	r3, [pc, #212]	@ (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a048:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a04c:	d10b      	bne.n	800a066 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 800a04e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a050:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a054:	d107      	bne.n	800a066 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a056:	f107 0314 	add.w	r3, r7, #20
 800a05a:	4618      	mov	r0, r3
 800a05c:	f7fe fd8e 	bl	8008b7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a060:	69bb      	ldr	r3, [r7, #24]
 800a062:	637b      	str	r3, [r7, #52]	@ 0x34
 800a064:	e047      	b.n	800a0f6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 800a066:	4b2c      	ldr	r3, [pc, #176]	@ (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a06e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a072:	d10b      	bne.n	800a08c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 800a074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a076:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a07a:	d107      	bne.n	800a08c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a07c:	f107 0308 	add.w	r3, r7, #8
 800a080:	4618      	mov	r0, r3
 800a082:	f7fe fee7 	bl	8008e54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	637b      	str	r3, [r7, #52]	@ 0x34
 800a08a:	e034      	b.n	800a0f6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 800a08c:	4b22      	ldr	r3, [pc, #136]	@ (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f003 0302 	and.w	r3, r3, #2
 800a094:	2b02      	cmp	r3, #2
 800a096:	d10d      	bne.n	800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 800a098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a09a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a09e:	d109      	bne.n	800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a0a0:	4b1d      	ldr	r3, [pc, #116]	@ (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	08db      	lsrs	r3, r3, #3
 800a0a6:	f003 0303 	and.w	r3, r3, #3
 800a0aa:	4a1c      	ldr	r2, [pc, #112]	@ (800a11c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800a0ac:	fa22 f303 	lsr.w	r3, r2, r3
 800a0b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0b2:	e020      	b.n	800a0f6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 800a0b4:	4b18      	ldr	r3, [pc, #96]	@ (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a0bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0c0:	d106      	bne.n	800a0d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 800a0c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a0c8:	d102      	bne.n	800a0d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 800a0ca:	4b15      	ldr	r3, [pc, #84]	@ (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800a0cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0ce:	e012      	b.n	800a0f6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 800a0d0:	4b11      	ldr	r3, [pc, #68]	@ (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a0d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a0d6:	f003 0302 	and.w	r3, r3, #2
 800a0da:	2b02      	cmp	r3, #2
 800a0dc:	d107      	bne.n	800a0ee <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 800a0de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0e0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a0e4:	d103      	bne.n	800a0ee <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 800a0e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a0ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0ec:	e003      	b.n	800a0f6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a0f2:	f001 bb66 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a0f6:	f001 bb64 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 800a0fa:	4b07      	ldr	r3, [pc, #28]	@ (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a0fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a100:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 800a104:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 800a106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d10b      	bne.n	800a124 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a10c:	f7fc fbfe 	bl	800690c <HAL_RCC_GetPCLK1Freq>
 800a110:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 800a112:	f001 bb56 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a116:	bf00      	nop
 800a118:	44020c00 	.word	0x44020c00
 800a11c:	03d09000 	.word	0x03d09000
 800a120:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 800a124:	4ba1      	ldr	r3, [pc, #644]	@ (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a12c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a130:	d10b      	bne.n	800a14a <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800a132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a134:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a138:	d107      	bne.n	800a14a <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a13a:	f107 0314 	add.w	r3, r7, #20
 800a13e:	4618      	mov	r0, r3
 800a140:	f7fe fd1c 	bl	8008b7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a144:	69bb      	ldr	r3, [r7, #24]
 800a146:	637b      	str	r3, [r7, #52]	@ 0x34
 800a148:	e047      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 800a14a:	4b98      	ldr	r3, [pc, #608]	@ (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a152:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a156:	d10b      	bne.n	800a170 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 800a158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a15a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a15e:	d107      	bne.n	800a170 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a160:	f107 0308 	add.w	r3, r7, #8
 800a164:	4618      	mov	r0, r3
 800a166:	f7fe fe75 	bl	8008e54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a16e:	e034      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 800a170:	4b8e      	ldr	r3, [pc, #568]	@ (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f003 0302 	and.w	r3, r3, #2
 800a178:	2b02      	cmp	r3, #2
 800a17a:	d10d      	bne.n	800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 800a17c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a17e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800a182:	d109      	bne.n	800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a184:	4b89      	ldr	r3, [pc, #548]	@ (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	08db      	lsrs	r3, r3, #3
 800a18a:	f003 0303 	and.w	r3, r3, #3
 800a18e:	4a88      	ldr	r2, [pc, #544]	@ (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800a190:	fa22 f303 	lsr.w	r3, r2, r3
 800a194:	637b      	str	r3, [r7, #52]	@ 0x34
 800a196:	e020      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 800a198:	4b84      	ldr	r3, [pc, #528]	@ (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a1a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1a4:	d106      	bne.n	800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 800a1a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a1ac:	d102      	bne.n	800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 800a1ae:	4b81      	ldr	r3, [pc, #516]	@ (800a3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800a1b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1b2:	e012      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 800a1b4:	4b7d      	ldr	r3, [pc, #500]	@ (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a1b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a1ba:	f003 0302 	and.w	r3, r3, #2
 800a1be:	2b02      	cmp	r3, #2
 800a1c0:	d107      	bne.n	800a1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 800a1c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1c4:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800a1c8:	d103      	bne.n	800a1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 800a1ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a1ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1d0:	e003      	b.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a1d6:	f001 baf4 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a1da:	f001 baf2 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 800a1de:	4b73      	ldr	r3, [pc, #460]	@ (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a1e0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a1e4:	f003 0307 	and.w	r3, r3, #7
 800a1e8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 800a1ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d104      	bne.n	800a1fa <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a1f0:	f7fc fb8c 	bl	800690c <HAL_RCC_GetPCLK1Freq>
 800a1f4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 800a1f6:	f001 bae4 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 800a1fa:	4b6c      	ldr	r3, [pc, #432]	@ (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a202:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a206:	d10a      	bne.n	800a21e <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 800a208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a20a:	2b01      	cmp	r3, #1
 800a20c:	d107      	bne.n	800a21e <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a20e:	f107 0314 	add.w	r3, r7, #20
 800a212:	4618      	mov	r0, r3
 800a214:	f7fe fcb2 	bl	8008b7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a218:	69bb      	ldr	r3, [r7, #24]
 800a21a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a21c:	e043      	b.n	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 800a21e:	4b63      	ldr	r3, [pc, #396]	@ (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a226:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a22a:	d10a      	bne.n	800a242 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 800a22c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a22e:	2b02      	cmp	r3, #2
 800a230:	d107      	bne.n	800a242 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a232:	f107 0308 	add.w	r3, r7, #8
 800a236:	4618      	mov	r0, r3
 800a238:	f7fe fe0c 	bl	8008e54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a240:	e031      	b.n	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800a242:	4b5a      	ldr	r3, [pc, #360]	@ (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f003 0302 	and.w	r3, r3, #2
 800a24a:	2b02      	cmp	r3, #2
 800a24c:	d10c      	bne.n	800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 800a24e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a250:	2b03      	cmp	r3, #3
 800a252:	d109      	bne.n	800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a254:	4b55      	ldr	r3, [pc, #340]	@ (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	08db      	lsrs	r3, r3, #3
 800a25a:	f003 0303 	and.w	r3, r3, #3
 800a25e:	4a54      	ldr	r2, [pc, #336]	@ (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800a260:	fa22 f303 	lsr.w	r3, r2, r3
 800a264:	637b      	str	r3, [r7, #52]	@ 0x34
 800a266:	e01e      	b.n	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 800a268:	4b50      	ldr	r3, [pc, #320]	@ (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a270:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a274:	d105      	bne.n	800a282 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 800a276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a278:	2b04      	cmp	r3, #4
 800a27a:	d102      	bne.n	800a282 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 800a27c:	4b4d      	ldr	r3, [pc, #308]	@ (800a3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800a27e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a280:	e011      	b.n	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 800a282:	4b4a      	ldr	r3, [pc, #296]	@ (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a284:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a288:	f003 0302 	and.w	r3, r3, #2
 800a28c:	2b02      	cmp	r3, #2
 800a28e:	d106      	bne.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 800a290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a292:	2b05      	cmp	r3, #5
 800a294:	d103      	bne.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 800a296:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a29a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a29c:	e003      	b.n	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a2a2:	f001 ba8e 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a2a6:	f001 ba8c 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 800a2aa:	4b40      	ldr	r3, [pc, #256]	@ (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a2ac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a2b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a2b4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 800a2b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d104      	bne.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a2bc:	f7fc fb26 	bl	800690c <HAL_RCC_GetPCLK1Freq>
 800a2c0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 800a2c2:	f001 ba7e 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 800a2c6:	4b39      	ldr	r3, [pc, #228]	@ (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a2ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a2d2:	d10a      	bne.n	800a2ea <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 800a2d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2d6:	2b10      	cmp	r3, #16
 800a2d8:	d107      	bne.n	800a2ea <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2da:	f107 0314 	add.w	r3, r7, #20
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f7fe fc4c 	bl	8008b7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a2e4:	69bb      	ldr	r3, [r7, #24]
 800a2e6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2e8:	e043      	b.n	800a372 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 800a2ea:	4b30      	ldr	r3, [pc, #192]	@ (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a2f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2f6:	d10a      	bne.n	800a30e <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800a2f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2fa:	2b20      	cmp	r3, #32
 800a2fc:	d107      	bne.n	800a30e <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2fe:	f107 0308 	add.w	r3, r7, #8
 800a302:	4618      	mov	r0, r3
 800a304:	f7fe fda6 	bl	8008e54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a30c:	e031      	b.n	800a372 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 800a30e:	4b27      	ldr	r3, [pc, #156]	@ (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f003 0302 	and.w	r3, r3, #2
 800a316:	2b02      	cmp	r3, #2
 800a318:	d10c      	bne.n	800a334 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800a31a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a31c:	2b30      	cmp	r3, #48	@ 0x30
 800a31e:	d109      	bne.n	800a334 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a320:	4b22      	ldr	r3, [pc, #136]	@ (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	08db      	lsrs	r3, r3, #3
 800a326:	f003 0303 	and.w	r3, r3, #3
 800a32a:	4a21      	ldr	r2, [pc, #132]	@ (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800a32c:	fa22 f303 	lsr.w	r3, r2, r3
 800a330:	637b      	str	r3, [r7, #52]	@ 0x34
 800a332:	e01e      	b.n	800a372 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 800a334:	4b1d      	ldr	r3, [pc, #116]	@ (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a33c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a340:	d105      	bne.n	800a34e <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 800a342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a344:	2b40      	cmp	r3, #64	@ 0x40
 800a346:	d102      	bne.n	800a34e <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 800a348:	4b1a      	ldr	r3, [pc, #104]	@ (800a3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800a34a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a34c:	e011      	b.n	800a372 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 800a34e:	4b17      	ldr	r3, [pc, #92]	@ (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a350:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a354:	f003 0302 	and.w	r3, r3, #2
 800a358:	2b02      	cmp	r3, #2
 800a35a:	d106      	bne.n	800a36a <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 800a35c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a35e:	2b50      	cmp	r3, #80	@ 0x50
 800a360:	d103      	bne.n	800a36a <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 800a362:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a366:	637b      	str	r3, [r7, #52]	@ 0x34
 800a368:	e003      	b.n	800a372 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 800a36a:	2300      	movs	r3, #0
 800a36c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a36e:	f001 ba28 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a372:	f001 ba26 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800a376:	4b0d      	ldr	r3, [pc, #52]	@ (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a37c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a380:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800a382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a384:	2b00      	cmp	r3, #0
 800a386:	d104      	bne.n	800a392 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800a388:	f7fc faec 	bl	8006964 <HAL_RCC_GetPCLK3Freq>
 800a38c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800a38e:	f001 ba18 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 800a392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a394:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a398:	d10e      	bne.n	800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a39a:	f107 0314 	add.w	r3, r7, #20
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f7fe fbec 	bl	8008b7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a3a4:	69bb      	ldr	r3, [r7, #24]
 800a3a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a3a8:	f001 ba0b 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a3ac:	44020c00 	.word	0x44020c00
 800a3b0:	03d09000 	.word	0x03d09000
 800a3b4:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 800a3b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a3be:	d108      	bne.n	800a3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3c0:	f107 0308 	add.w	r3, r7, #8
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7fe fd45 	bl	8008e54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a3ce:	f001 b9f8 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800a3d2:	4ba4      	ldr	r3, [pc, #656]	@ (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f003 0302 	and.w	r3, r3, #2
 800a3da:	2b02      	cmp	r3, #2
 800a3dc:	d10d      	bne.n	800a3fa <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800a3de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a3e4:	d109      	bne.n	800a3fa <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a3e6:	4b9f      	ldr	r3, [pc, #636]	@ (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	08db      	lsrs	r3, r3, #3
 800a3ec:	f003 0303 	and.w	r3, r3, #3
 800a3f0:	4a9d      	ldr	r2, [pc, #628]	@ (800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800a3f2:	fa22 f303 	lsr.w	r3, r2, r3
 800a3f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3f8:	e020      	b.n	800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800a3fa:	4b9a      	ldr	r3, [pc, #616]	@ (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a402:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a406:	d106      	bne.n	800a416 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 800a408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a40a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a40e:	d102      	bne.n	800a416 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 800a410:	4b96      	ldr	r3, [pc, #600]	@ (800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800a412:	637b      	str	r3, [r7, #52]	@ 0x34
 800a414:	e012      	b.n	800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800a416:	4b93      	ldr	r3, [pc, #588]	@ (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a418:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a41c:	f003 0302 	and.w	r3, r3, #2
 800a420:	2b02      	cmp	r3, #2
 800a422:	d107      	bne.n	800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 800a424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a426:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a42a:	d103      	bne.n	800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 800a42c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a430:	637b      	str	r3, [r7, #52]	@ 0x34
 800a432:	e003      	b.n	800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 800a434:	2300      	movs	r3, #0
 800a436:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a438:	f001 b9c3 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a43c:	f001 b9c1 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800a440:	4b88      	ldr	r3, [pc, #544]	@ (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a442:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a446:	f003 0307 	and.w	r3, r3, #7
 800a44a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800a44c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d104      	bne.n	800a45c <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800a452:	f7fc fa3f 	bl	80068d4 <HAL_RCC_GetHCLKFreq>
 800a456:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 800a458:	f001 b9b3 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800a45c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a45e:	2b01      	cmp	r3, #1
 800a460:	d104      	bne.n	800a46c <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 800a462:	f7fc f90b 	bl	800667c <HAL_RCC_GetSysClockFreq>
 800a466:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a468:	f001 b9ab 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 800a46c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a46e:	2b02      	cmp	r3, #2
 800a470:	d108      	bne.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a472:	f107 0314 	add.w	r3, r7, #20
 800a476:	4618      	mov	r0, r3
 800a478:	f7fe fb80 	bl	8008b7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a47c:	69fb      	ldr	r3, [r7, #28]
 800a47e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a480:	f001 b99f 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800a484:	4b77      	ldr	r3, [pc, #476]	@ (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a48c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a490:	d105      	bne.n	800a49e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 800a492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a494:	2b03      	cmp	r3, #3
 800a496:	d102      	bne.n	800a49e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 800a498:	4b75      	ldr	r3, [pc, #468]	@ (800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 800a49a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a49c:	e023      	b.n	800a4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800a49e:	4b71      	ldr	r3, [pc, #452]	@ (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f003 0302 	and.w	r3, r3, #2
 800a4a6:	2b02      	cmp	r3, #2
 800a4a8:	d10c      	bne.n	800a4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 800a4aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ac:	2b04      	cmp	r3, #4
 800a4ae:	d109      	bne.n	800a4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a4b0:	4b6c      	ldr	r3, [pc, #432]	@ (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	08db      	lsrs	r3, r3, #3
 800a4b6:	f003 0303 	and.w	r3, r3, #3
 800a4ba:	4a6b      	ldr	r2, [pc, #428]	@ (800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800a4bc:	fa22 f303 	lsr.w	r3, r2, r3
 800a4c0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4c2:	e010      	b.n	800a4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 800a4c4:	4b67      	ldr	r3, [pc, #412]	@ (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a4cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4d0:	d105      	bne.n	800a4de <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 800a4d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4d4:	2b05      	cmp	r3, #5
 800a4d6:	d102      	bne.n	800a4de <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 800a4d8:	4b64      	ldr	r3, [pc, #400]	@ (800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800a4da:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4dc:	e003      	b.n	800a4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a4e2:	f001 b96e 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a4e6:	f001 b96c 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800a4ea:	4b5e      	ldr	r3, [pc, #376]	@ (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a4ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a4f0:	f003 0308 	and.w	r3, r3, #8
 800a4f4:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800a4f6:	4b5b      	ldr	r3, [pc, #364]	@ (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a4f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a4fc:	f003 0302 	and.w	r3, r3, #2
 800a500:	2b02      	cmp	r3, #2
 800a502:	d106      	bne.n	800a512 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 800a504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a506:	2b00      	cmp	r3, #0
 800a508:	d103      	bne.n	800a512 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 800a50a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a50e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a510:	e012      	b.n	800a538 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800a512:	4b54      	ldr	r3, [pc, #336]	@ (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a514:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a518:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a51c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a520:	d106      	bne.n	800a530 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 800a522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a524:	2b08      	cmp	r3, #8
 800a526:	d103      	bne.n	800a530 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 800a528:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a52c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a52e:	e003      	b.n	800a538 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 800a530:	2300      	movs	r3, #0
 800a532:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800a534:	f001 b945 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a538:	f001 b943 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800a53c:	4b49      	ldr	r3, [pc, #292]	@ (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a53e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a542:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a546:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800a548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d104      	bne.n	800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a54e:	f7fc f9dd 	bl	800690c <HAL_RCC_GetPCLK1Freq>
 800a552:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800a554:	f001 b935 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 800a558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a55a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a55e:	d108      	bne.n	800a572 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a560:	f107 0308 	add.w	r3, r7, #8
 800a564:	4618      	mov	r0, r3
 800a566:	f7fe fc75 	bl	8008e54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a56e:	f001 b928 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800a572:	4b3c      	ldr	r3, [pc, #240]	@ (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f003 0302 	and.w	r3, r3, #2
 800a57a:	2b02      	cmp	r3, #2
 800a57c:	d10d      	bne.n	800a59a <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 800a57e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a580:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a584:	d109      	bne.n	800a59a <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a586:	4b37      	ldr	r3, [pc, #220]	@ (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	08db      	lsrs	r3, r3, #3
 800a58c:	f003 0303 	and.w	r3, r3, #3
 800a590:	4a35      	ldr	r2, [pc, #212]	@ (800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800a592:	fa22 f303 	lsr.w	r3, r2, r3
 800a596:	637b      	str	r3, [r7, #52]	@ 0x34
 800a598:	e011      	b.n	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800a59a:	4b32      	ldr	r3, [pc, #200]	@ (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a5a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a5a6:	d106      	bne.n	800a5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 800a5a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5aa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a5ae:	d102      	bne.n	800a5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 800a5b0:	4b2e      	ldr	r3, [pc, #184]	@ (800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800a5b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5b4:	e003      	b.n	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a5ba:	f001 b902 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a5be:	f001 b900 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800a5c2:	4b28      	ldr	r3, [pc, #160]	@ (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a5c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a5c8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800a5cc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800a5ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d104      	bne.n	800a5de <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a5d4:	f7fc f99a 	bl	800690c <HAL_RCC_GetPCLK1Freq>
 800a5d8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800a5da:	f001 b8f2 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 800a5de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a5e4:	d108      	bne.n	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5e6:	f107 0308 	add.w	r3, r7, #8
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f7fe fc32 	bl	8008e54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a5f4:	f001 b8e5 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800a5f8:	4b1a      	ldr	r3, [pc, #104]	@ (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f003 0302 	and.w	r3, r3, #2
 800a600:	2b02      	cmp	r3, #2
 800a602:	d10d      	bne.n	800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 800a604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a606:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a60a:	d109      	bne.n	800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a60c:	4b15      	ldr	r3, [pc, #84]	@ (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	08db      	lsrs	r3, r3, #3
 800a612:	f003 0303 	and.w	r3, r3, #3
 800a616:	4a14      	ldr	r2, [pc, #80]	@ (800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800a618:	fa22 f303 	lsr.w	r3, r2, r3
 800a61c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a61e:	e011      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 800a620:	4b10      	ldr	r3, [pc, #64]	@ (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a628:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a62c:	d106      	bne.n	800a63c <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 800a62e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a630:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a634:	d102      	bne.n	800a63c <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 800a636:	4b0d      	ldr	r3, [pc, #52]	@ (800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800a638:	637b      	str	r3, [r7, #52]	@ 0x34
 800a63a:	e003      	b.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 800a63c:	2300      	movs	r3, #0
 800a63e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a640:	f001 b8bf 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a644:	f001 b8bd 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800a648:	4b06      	ldr	r3, [pc, #24]	@ (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a64a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a64e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800a652:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 800a654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a656:	2b00      	cmp	r3, #0
 800a658:	d10c      	bne.n	800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800a65a:	f7fc f983 	bl	8006964 <HAL_RCC_GetPCLK3Freq>
 800a65e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 800a660:	f001 b8af 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a664:	44020c00 	.word	0x44020c00
 800a668:	03d09000 	.word	0x03d09000
 800a66c:	003d0900 	.word	0x003d0900
 800a670:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 800a674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a676:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a67a:	d108      	bne.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a67c:	f107 0308 	add.w	r3, r7, #8
 800a680:	4618      	mov	r0, r3
 800a682:	f7fe fbe7 	bl	8008e54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a68a:	f001 b89a 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800a68e:	4b9f      	ldr	r3, [pc, #636]	@ (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f003 0302 	and.w	r3, r3, #2
 800a696:	2b02      	cmp	r3, #2
 800a698:	d10d      	bne.n	800a6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 800a69a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a69c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a6a0:	d109      	bne.n	800a6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a6a2:	4b9a      	ldr	r3, [pc, #616]	@ (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	08db      	lsrs	r3, r3, #3
 800a6a8:	f003 0303 	and.w	r3, r3, #3
 800a6ac:	4a98      	ldr	r2, [pc, #608]	@ (800a910 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800a6ae:	fa22 f303 	lsr.w	r3, r2, r3
 800a6b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6b4:	e011      	b.n	800a6da <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800a6b6:	4b95      	ldr	r3, [pc, #596]	@ (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a6be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a6c2:	d106      	bne.n	800a6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 800a6c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6c6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a6ca:	d102      	bne.n	800a6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 800a6cc:	4b91      	ldr	r3, [pc, #580]	@ (800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800a6ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6d0:	e003      	b.n	800a6da <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a6d6:	f001 b874 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a6da:	f001 b872 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800a6de:	4b8b      	ldr	r3, [pc, #556]	@ (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a6e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a6e4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800a6e8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 800a6ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d104      	bne.n	800a6fa <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800a6f0:	f7fc f938 	bl	8006964 <HAL_RCC_GetPCLK3Freq>
 800a6f4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 800a6f6:	f001 b864 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 800a6fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a700:	d108      	bne.n	800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a702:	f107 0308 	add.w	r3, r7, #8
 800a706:	4618      	mov	r0, r3
 800a708:	f7fe fba4 	bl	8008e54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a710:	f001 b857 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800a714:	4b7d      	ldr	r3, [pc, #500]	@ (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f003 0302 	and.w	r3, r3, #2
 800a71c:	2b02      	cmp	r3, #2
 800a71e:	d10d      	bne.n	800a73c <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 800a720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a722:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a726:	d109      	bne.n	800a73c <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a728:	4b78      	ldr	r3, [pc, #480]	@ (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	08db      	lsrs	r3, r3, #3
 800a72e:	f003 0303 	and.w	r3, r3, #3
 800a732:	4a77      	ldr	r2, [pc, #476]	@ (800a910 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800a734:	fa22 f303 	lsr.w	r3, r2, r3
 800a738:	637b      	str	r3, [r7, #52]	@ 0x34
 800a73a:	e011      	b.n	800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 800a73c:	4b73      	ldr	r3, [pc, #460]	@ (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a744:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a748:	d106      	bne.n	800a758 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 800a74a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a74c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800a750:	d102      	bne.n	800a758 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 800a752:	4b70      	ldr	r3, [pc, #448]	@ (800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800a754:	637b      	str	r3, [r7, #52]	@ 0x34
 800a756:	e003      	b.n	800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 800a758:	2300      	movs	r3, #0
 800a75a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a75c:	f001 b831 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a760:	f001 b82f 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 800a764:	4b69      	ldr	r3, [pc, #420]	@ (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a766:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a76a:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800a76e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800a770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a772:	2b00      	cmp	r3, #0
 800a774:	d104      	bne.n	800a780 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a776:	f7fc f8c9 	bl	800690c <HAL_RCC_GetPCLK1Freq>
 800a77a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800a77c:	f001 b821 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 800a780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a782:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a786:	d108      	bne.n	800a79a <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a788:	f107 0308 	add.w	r3, r7, #8
 800a78c:	4618      	mov	r0, r3
 800a78e:	f7fe fb61 	bl	8008e54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a796:	f001 b814 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800a79a:	4b5c      	ldr	r3, [pc, #368]	@ (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f003 0302 	and.w	r3, r3, #2
 800a7a2:	2b02      	cmp	r3, #2
 800a7a4:	d10e      	bne.n	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 800a7a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a7ac:	d10a      	bne.n	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a7ae:	4b57      	ldr	r3, [pc, #348]	@ (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	08db      	lsrs	r3, r3, #3
 800a7b4:	f003 0303 	and.w	r3, r3, #3
 800a7b8:	4a55      	ldr	r2, [pc, #340]	@ (800a910 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800a7ba:	fa22 f303 	lsr.w	r3, r2, r3
 800a7be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a7c0:	f000 bfff 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a7c8:	f000 bffb 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800a7cc:	4b4f      	ldr	r3, [pc, #316]	@ (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a7ce:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a7d2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a7d6:	633b      	str	r3, [r7, #48]	@ 0x30
 800a7d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7da:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800a7de:	d056      	beq.n	800a88e <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 800a7e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7e2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800a7e6:	f200 808b 	bhi.w	800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800a7ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a7f0:	d03e      	beq.n	800a870 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 800a7f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a7f8:	f200 8082 	bhi.w	800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800a7fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a802:	d027      	beq.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 800a804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a806:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a80a:	d879      	bhi.n	800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800a80c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a80e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a812:	d017      	beq.n	800a844 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 800a814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a816:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a81a:	d871      	bhi.n	800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800a81c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d004      	beq.n	800a82c <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 800a822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a824:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a828:	d004      	beq.n	800a834 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 800a82a:	e069      	b.n	800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800a82c:	f7fc f89a 	bl	8006964 <HAL_RCC_GetPCLK3Freq>
 800a830:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800a832:	e068      	b.n	800a906 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a834:	f107 0314 	add.w	r3, r7, #20
 800a838:	4618      	mov	r0, r3
 800a83a:	f7fe f99f 	bl	8008b7c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a842:	e060      	b.n	800a906 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a844:	f107 0308 	add.w	r3, r7, #8
 800a848:	4618      	mov	r0, r3
 800a84a:	f7fe fb03 	bl	8008e54 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a852:	e058      	b.n	800a906 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a854:	4b2d      	ldr	r3, [pc, #180]	@ (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a856:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a85a:	f003 0302 	and.w	r3, r3, #2
 800a85e:	2b02      	cmp	r3, #2
 800a860:	d103      	bne.n	800a86a <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 800a862:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a866:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a868:	e04d      	b.n	800a906 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800a86a:	2300      	movs	r3, #0
 800a86c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a86e:	e04a      	b.n	800a906 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800a870:	4b26      	ldr	r3, [pc, #152]	@ (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a872:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a876:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a87a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a87e:	d103      	bne.n	800a888 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 800a880:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a884:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a886:	e03e      	b.n	800a906 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800a888:	2300      	movs	r3, #0
 800a88a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a88c:	e03b      	b.n	800a906 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a88e:	4b1f      	ldr	r3, [pc, #124]	@ (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a890:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a894:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a898:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a89a:	4b1c      	ldr	r3, [pc, #112]	@ (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f003 0302 	and.w	r3, r3, #2
 800a8a2:	2b02      	cmp	r3, #2
 800a8a4:	d10c      	bne.n	800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 800a8a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d109      	bne.n	800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a8ac:	4b17      	ldr	r3, [pc, #92]	@ (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	08db      	lsrs	r3, r3, #3
 800a8b2:	f003 0303 	and.w	r3, r3, #3
 800a8b6:	4a16      	ldr	r2, [pc, #88]	@ (800a910 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800a8b8:	fa22 f303 	lsr.w	r3, r2, r3
 800a8bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8be:	e01e      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a8c0:	4b12      	ldr	r3, [pc, #72]	@ (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a8c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a8cc:	d106      	bne.n	800a8dc <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 800a8ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8d4:	d102      	bne.n	800a8dc <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a8d6:	4b0f      	ldr	r3, [pc, #60]	@ (800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800a8d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8da:	e010      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a8dc:	4b0b      	ldr	r3, [pc, #44]	@ (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a8e8:	d106      	bne.n	800a8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 800a8ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a8f0:	d102      	bne.n	800a8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a8f2:	4b09      	ldr	r3, [pc, #36]	@ (800a918 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 800a8f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8f6:	e002      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a8fc:	e003      	b.n	800a906 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 800a8fe:	e002      	b.n	800a906 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 800a900:	2300      	movs	r3, #0
 800a902:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a904:	bf00      	nop
          }
        }
        break;
 800a906:	f000 bf5c 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a90a:	bf00      	nop
 800a90c:	44020c00 	.word	0x44020c00
 800a910:	03d09000 	.word	0x03d09000
 800a914:	003d0900 	.word	0x003d0900
 800a918:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800a91c:	4b9e      	ldr	r3, [pc, #632]	@ (800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a91e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a922:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a926:	633b      	str	r3, [r7, #48]	@ 0x30
 800a928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a92a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800a92e:	d056      	beq.n	800a9de <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 800a930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a932:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800a936:	f200 808b 	bhi.w	800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800a93a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a93c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a940:	d03e      	beq.n	800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 800a942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a944:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a948:	f200 8082 	bhi.w	800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800a94c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a94e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a952:	d027      	beq.n	800a9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 800a954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a956:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a95a:	d879      	bhi.n	800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800a95c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a95e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a962:	d017      	beq.n	800a994 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 800a964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a966:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a96a:	d871      	bhi.n	800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800a96c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d004      	beq.n	800a97c <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 800a972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a974:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a978:	d004      	beq.n	800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 800a97a:	e069      	b.n	800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 800a97c:	f7fb ffc6 	bl	800690c <HAL_RCC_GetPCLK1Freq>
 800a980:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800a982:	e068      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a984:	f107 0314 	add.w	r3, r7, #20
 800a988:	4618      	mov	r0, r3
 800a98a:	f7fe f8f7 	bl	8008b7c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a992:	e060      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a994:	f107 0308 	add.w	r3, r7, #8
 800a998:	4618      	mov	r0, r3
 800a99a:	f7fe fa5b 	bl	8008e54 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a9a2:	e058      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a9a4:	4b7c      	ldr	r3, [pc, #496]	@ (800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a9a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a9aa:	f003 0302 	and.w	r3, r3, #2
 800a9ae:	2b02      	cmp	r3, #2
 800a9b0:	d103      	bne.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 800a9b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a9b6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a9b8:	e04d      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a9be:	e04a      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800a9c0:	4b75      	ldr	r3, [pc, #468]	@ (800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a9c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a9c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a9ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a9ce:	d103      	bne.n	800a9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 800a9d0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a9d4:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a9d6:	e03e      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a9dc:	e03b      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a9de:	4b6e      	ldr	r3, [pc, #440]	@ (800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a9e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a9e4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a9e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a9ea:	4b6b      	ldr	r3, [pc, #428]	@ (800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f003 0302 	and.w	r3, r3, #2
 800a9f2:	2b02      	cmp	r3, #2
 800a9f4:	d10c      	bne.n	800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 800a9f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d109      	bne.n	800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a9fc:	4b66      	ldr	r3, [pc, #408]	@ (800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	08db      	lsrs	r3, r3, #3
 800aa02:	f003 0303 	and.w	r3, r3, #3
 800aa06:	4a65      	ldr	r2, [pc, #404]	@ (800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800aa08:	fa22 f303 	lsr.w	r3, r2, r3
 800aa0c:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa0e:	e01e      	b.n	800aa4e <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aa10:	4b61      	ldr	r3, [pc, #388]	@ (800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aa18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa1c:	d106      	bne.n	800aa2c <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 800aa1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa24:	d102      	bne.n	800aa2c <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800aa26:	4b5e      	ldr	r3, [pc, #376]	@ (800aba0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800aa28:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa2a:	e010      	b.n	800aa4e <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aa2c:	4b5a      	ldr	r3, [pc, #360]	@ (800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa38:	d106      	bne.n	800aa48 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 800aa3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aa40:	d102      	bne.n	800aa48 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800aa42:	4b58      	ldr	r3, [pc, #352]	@ (800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800aa44:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa46:	e002      	b.n	800aa4e <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800aa4c:	e003      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 800aa4e:	e002      	b.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 800aa50:	2300      	movs	r3, #0
 800aa52:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800aa54:	bf00      	nop
          }
        }
        break;
 800aa56:	f000 beb4 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800aa5a:	4b4f      	ldr	r3, [pc, #316]	@ (800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800aa5c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800aa60:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800aa64:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800aa6c:	d056      	beq.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 800aa6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800aa74:	f200 808b 	bhi.w	800ab8e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800aa78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa7a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800aa7e:	d03e      	beq.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 800aa80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa82:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800aa86:	f200 8082 	bhi.w	800ab8e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800aa8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa8c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800aa90:	d027      	beq.n	800aae2 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 800aa92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa94:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800aa98:	d879      	bhi.n	800ab8e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800aa9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aaa0:	d017      	beq.n	800aad2 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 800aaa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaa4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aaa8:	d871      	bhi.n	800ab8e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800aaaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d004      	beq.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 800aab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aab2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aab6:	d004      	beq.n	800aac2 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 800aab8:	e069      	b.n	800ab8e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800aaba:	f7fb ff53 	bl	8006964 <HAL_RCC_GetPCLK3Freq>
 800aabe:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800aac0:	e068      	b.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aac2:	f107 0314 	add.w	r3, r7, #20
 800aac6:	4618      	mov	r0, r3
 800aac8:	f7fe f858 	bl	8008b7c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800aad0:	e060      	b.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aad2:	f107 0308 	add.w	r3, r7, #8
 800aad6:	4618      	mov	r0, r3
 800aad8:	f7fe f9bc 	bl	8008e54 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800aae0:	e058      	b.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800aae2:	4b2d      	ldr	r3, [pc, #180]	@ (800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800aae4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aae8:	f003 0302 	and.w	r3, r3, #2
 800aaec:	2b02      	cmp	r3, #2
 800aaee:	d103      	bne.n	800aaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 800aaf0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aaf4:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800aaf6:	e04d      	b.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800aafc:	e04a      	b.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800aafe:	4b26      	ldr	r3, [pc, #152]	@ (800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ab00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ab04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab0c:	d103      	bne.n	800ab16 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 800ab0e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800ab12:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800ab14:	e03e      	b.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800ab16:	2300      	movs	r3, #0
 800ab18:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ab1a:	e03b      	b.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ab1c:	4b1e      	ldr	r3, [pc, #120]	@ (800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ab1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ab22:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800ab26:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ab28:	4b1b      	ldr	r3, [pc, #108]	@ (800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f003 0302 	and.w	r3, r3, #2
 800ab30:	2b02      	cmp	r3, #2
 800ab32:	d10c      	bne.n	800ab4e <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 800ab34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d109      	bne.n	800ab4e <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ab3a:	4b17      	ldr	r3, [pc, #92]	@ (800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	08db      	lsrs	r3, r3, #3
 800ab40:	f003 0303 	and.w	r3, r3, #3
 800ab44:	4a15      	ldr	r2, [pc, #84]	@ (800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800ab46:	fa22 f303 	lsr.w	r3, r2, r3
 800ab4a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab4c:	e01e      	b.n	800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ab4e:	4b12      	ldr	r3, [pc, #72]	@ (800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ab56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab5a:	d106      	bne.n	800ab6a <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 800ab5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab62:	d102      	bne.n	800ab6a <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800ab64:	4b0e      	ldr	r3, [pc, #56]	@ (800aba0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800ab66:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab68:	e010      	b.n	800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ab6a:	4b0b      	ldr	r3, [pc, #44]	@ (800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab76:	d106      	bne.n	800ab86 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 800ab78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ab7e:	d102      	bne.n	800ab86 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800ab80:	4b08      	ldr	r3, [pc, #32]	@ (800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800ab82:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab84:	e002      	b.n	800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800ab86:	2300      	movs	r3, #0
 800ab88:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800ab8a:	e003      	b.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 800ab8c:	e002      	b.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ab92:	bf00      	nop
          }
        }
        break;
 800ab94:	f000 be15 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ab98:	44020c00 	.word	0x44020c00
 800ab9c:	03d09000 	.word	0x03d09000
 800aba0:	003d0900 	.word	0x003d0900
 800aba4:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 800aba8:	4b9e      	ldr	r3, [pc, #632]	@ (800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800abaa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800abae:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 800abb2:	633b      	str	r3, [r7, #48]	@ 0x30
 800abb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abb6:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800abba:	d056      	beq.n	800ac6a <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 800abbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abbe:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800abc2:	f200 808b 	bhi.w	800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800abc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800abcc:	d03e      	beq.n	800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 800abce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800abd4:	f200 8082 	bhi.w	800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800abd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abda:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800abde:	d027      	beq.n	800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 800abe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abe2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800abe6:	d879      	bhi.n	800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800abe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800abee:	d017      	beq.n	800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 800abf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abf2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800abf6:	d871      	bhi.n	800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800abf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d004      	beq.n	800ac08 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 800abfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac00:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ac04:	d004      	beq.n	800ac10 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 800ac06:	e069      	b.n	800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800ac08:	f7fb feac 	bl	8006964 <HAL_RCC_GetPCLK3Freq>
 800ac0c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800ac0e:	e068      	b.n	800ace2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac10:	f107 0314 	add.w	r3, r7, #20
 800ac14:	4618      	mov	r0, r3
 800ac16:	f7fd ffb1 	bl	8008b7c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ac1e:	e060      	b.n	800ace2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac20:	f107 0308 	add.w	r3, r7, #8
 800ac24:	4618      	mov	r0, r3
 800ac26:	f7fe f915 	bl	8008e54 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800ac2a:	693b      	ldr	r3, [r7, #16]
 800ac2c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ac2e:	e058      	b.n	800ace2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ac30:	4b7c      	ldr	r3, [pc, #496]	@ (800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800ac32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac36:	f003 0302 	and.w	r3, r3, #2
 800ac3a:	2b02      	cmp	r3, #2
 800ac3c:	d103      	bne.n	800ac46 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 800ac3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac42:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800ac44:	e04d      	b.n	800ace2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800ac46:	2300      	movs	r3, #0
 800ac48:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ac4a:	e04a      	b.n	800ace2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800ac4c:	4b75      	ldr	r3, [pc, #468]	@ (800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800ac4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac5a:	d103      	bne.n	800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 800ac5c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800ac60:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800ac62:	e03e      	b.n	800ace2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800ac64:	2300      	movs	r3, #0
 800ac66:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ac68:	e03b      	b.n	800ace2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ac6a:	4b6e      	ldr	r3, [pc, #440]	@ (800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800ac6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ac70:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800ac74:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ac76:	4b6b      	ldr	r3, [pc, #428]	@ (800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f003 0302 	and.w	r3, r3, #2
 800ac7e:	2b02      	cmp	r3, #2
 800ac80:	d10c      	bne.n	800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 800ac82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d109      	bne.n	800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ac88:	4b66      	ldr	r3, [pc, #408]	@ (800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	08db      	lsrs	r3, r3, #3
 800ac8e:	f003 0303 	and.w	r3, r3, #3
 800ac92:	4a65      	ldr	r2, [pc, #404]	@ (800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800ac94:	fa22 f303 	lsr.w	r3, r2, r3
 800ac98:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac9a:	e01e      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ac9c:	4b61      	ldr	r3, [pc, #388]	@ (800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aca4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aca8:	d106      	bne.n	800acb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 800acaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acb0:	d102      	bne.n	800acb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800acb2:	4b5e      	ldr	r3, [pc, #376]	@ (800ae2c <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800acb4:	637b      	str	r3, [r7, #52]	@ 0x34
 800acb6:	e010      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800acb8:	4b5a      	ldr	r3, [pc, #360]	@ (800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800acc0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800acc4:	d106      	bne.n	800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 800acc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acc8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800accc:	d102      	bne.n	800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800acce:	4b58      	ldr	r3, [pc, #352]	@ (800ae30 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800acd0:	637b      	str	r3, [r7, #52]	@ 0x34
 800acd2:	e002      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800acd4:	2300      	movs	r3, #0
 800acd6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800acd8:	e003      	b.n	800ace2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 800acda:	e002      	b.n	800ace2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 800acdc:	2300      	movs	r3, #0
 800acde:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ace0:	bf00      	nop
          }
        }
        break;
 800ace2:	f000 bd6e 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 800ace6:	4b4f      	ldr	r3, [pc, #316]	@ (800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800ace8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800acec:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800acf0:	633b      	str	r3, [r7, #48]	@ 0x30
 800acf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acf4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800acf8:	d056      	beq.n	800ada8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 800acfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acfc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800ad00:	f200 808b 	bhi.w	800ae1a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800ad04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad06:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ad0a:	d03e      	beq.n	800ad8a <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 800ad0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad0e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ad12:	f200 8082 	bhi.w	800ae1a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800ad16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad18:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ad1c:	d027      	beq.n	800ad6e <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 800ad1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad20:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ad24:	d879      	bhi.n	800ae1a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800ad26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ad2c:	d017      	beq.n	800ad5e <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 800ad2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad30:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ad34:	d871      	bhi.n	800ae1a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800ad36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d004      	beq.n	800ad46 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 800ad3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ad42:	d004      	beq.n	800ad4e <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 800ad44:	e069      	b.n	800ae1a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800ad46:	f7fb fe0d 	bl	8006964 <HAL_RCC_GetPCLK3Freq>
 800ad4a:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800ad4c:	e068      	b.n	800ae20 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad4e:	f107 0314 	add.w	r3, r7, #20
 800ad52:	4618      	mov	r0, r3
 800ad54:	f7fd ff12 	bl	8008b7c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ad5c:	e060      	b.n	800ae20 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad5e:	f107 0308 	add.w	r3, r7, #8
 800ad62:	4618      	mov	r0, r3
 800ad64:	f7fe f876 	bl	8008e54 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ad6c:	e058      	b.n	800ae20 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ad6e:	4b2d      	ldr	r3, [pc, #180]	@ (800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800ad70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ad74:	f003 0302 	and.w	r3, r3, #2
 800ad78:	2b02      	cmp	r3, #2
 800ad7a:	d103      	bne.n	800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 800ad7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ad80:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800ad82:	e04d      	b.n	800ae20 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800ad84:	2300      	movs	r3, #0
 800ad86:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ad88:	e04a      	b.n	800ae20 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800ad8a:	4b26      	ldr	r3, [pc, #152]	@ (800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800ad8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ad90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ad98:	d103      	bne.n	800ada2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 800ad9a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800ad9e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800ada0:	e03e      	b.n	800ae20 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800ada2:	2300      	movs	r3, #0
 800ada4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ada6:	e03b      	b.n	800ae20 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ada8:	4b1e      	ldr	r3, [pc, #120]	@ (800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800adaa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800adae:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800adb2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800adb4:	4b1b      	ldr	r3, [pc, #108]	@ (800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f003 0302 	and.w	r3, r3, #2
 800adbc:	2b02      	cmp	r3, #2
 800adbe:	d10c      	bne.n	800adda <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 800adc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d109      	bne.n	800adda <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800adc6:	4b17      	ldr	r3, [pc, #92]	@ (800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	08db      	lsrs	r3, r3, #3
 800adcc:	f003 0303 	and.w	r3, r3, #3
 800add0:	4a15      	ldr	r2, [pc, #84]	@ (800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800add2:	fa22 f303 	lsr.w	r3, r2, r3
 800add6:	637b      	str	r3, [r7, #52]	@ 0x34
 800add8:	e01e      	b.n	800ae18 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800adda:	4b12      	ldr	r3, [pc, #72]	@ (800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ade2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ade6:	d106      	bne.n	800adf6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 800ade8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800adee:	d102      	bne.n	800adf6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800adf0:	4b0e      	ldr	r3, [pc, #56]	@ (800ae2c <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800adf2:	637b      	str	r3, [r7, #52]	@ 0x34
 800adf4:	e010      	b.n	800ae18 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800adf6:	4b0b      	ldr	r3, [pc, #44]	@ (800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800adfe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae02:	d106      	bne.n	800ae12 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 800ae04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ae0a:	d102      	bne.n	800ae12 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800ae0c:	4b08      	ldr	r3, [pc, #32]	@ (800ae30 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800ae0e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae10:	e002      	b.n	800ae18 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800ae12:	2300      	movs	r3, #0
 800ae14:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800ae16:	e003      	b.n	800ae20 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 800ae18:	e002      	b.n	800ae20 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ae1e:	bf00      	nop
          }
        }
        break;
 800ae20:	f000 bccf 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ae24:	44020c00 	.word	0x44020c00
 800ae28:	03d09000 	.word	0x03d09000
 800ae2c:	003d0900 	.word	0x003d0900
 800ae30:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 800ae34:	4b9e      	ldr	r3, [pc, #632]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800ae36:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800ae3a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800ae3e:	633b      	str	r3, [r7, #48]	@ 0x30
 800ae40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ae46:	d056      	beq.n	800aef6 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 800ae48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ae4e:	f200 808b 	bhi.w	800af68 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800ae52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae58:	d03e      	beq.n	800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 800ae5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae60:	f200 8082 	bhi.w	800af68 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800ae64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae66:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ae6a:	d027      	beq.n	800aebc <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 800ae6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae6e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ae72:	d879      	bhi.n	800af68 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800ae74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae7a:	d017      	beq.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 800ae7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae82:	d871      	bhi.n	800af68 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800ae84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d004      	beq.n	800ae94 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 800ae8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae90:	d004      	beq.n	800ae9c <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 800ae92:	e069      	b.n	800af68 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800ae94:	f7fb fd66 	bl	8006964 <HAL_RCC_GetPCLK3Freq>
 800ae98:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800ae9a:	e068      	b.n	800af6e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae9c:	f107 0314 	add.w	r3, r7, #20
 800aea0:	4618      	mov	r0, r3
 800aea2:	f7fd fe6b 	bl	8008b7c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800aeaa:	e060      	b.n	800af6e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aeac:	f107 0308 	add.w	r3, r7, #8
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f7fd ffcf 	bl	8008e54 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800aeba:	e058      	b.n	800af6e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800aebc:	4b7c      	ldr	r3, [pc, #496]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800aebe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aec2:	f003 0302 	and.w	r3, r3, #2
 800aec6:	2b02      	cmp	r3, #2
 800aec8:	d103      	bne.n	800aed2 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800aeca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aece:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800aed0:	e04d      	b.n	800af6e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800aed2:	2300      	movs	r3, #0
 800aed4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800aed6:	e04a      	b.n	800af6e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800aed8:	4b75      	ldr	r3, [pc, #468]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800aeda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aede:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aee2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aee6:	d103      	bne.n	800aef0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 800aee8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800aeec:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800aeee:	e03e      	b.n	800af6e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800aef0:	2300      	movs	r3, #0
 800aef2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800aef4:	e03b      	b.n	800af6e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aef6:	4b6e      	ldr	r3, [pc, #440]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800aef8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800aefc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800af00:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800af02:	4b6b      	ldr	r3, [pc, #428]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f003 0302 	and.w	r3, r3, #2
 800af0a:	2b02      	cmp	r3, #2
 800af0c:	d10c      	bne.n	800af28 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 800af0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af10:	2b00      	cmp	r3, #0
 800af12:	d109      	bne.n	800af28 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800af14:	4b66      	ldr	r3, [pc, #408]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	08db      	lsrs	r3, r3, #3
 800af1a:	f003 0303 	and.w	r3, r3, #3
 800af1e:	4a65      	ldr	r2, [pc, #404]	@ (800b0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800af20:	fa22 f303 	lsr.w	r3, r2, r3
 800af24:	637b      	str	r3, [r7, #52]	@ 0x34
 800af26:	e01e      	b.n	800af66 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800af28:	4b61      	ldr	r3, [pc, #388]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800af30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af34:	d106      	bne.n	800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 800af36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af3c:	d102      	bne.n	800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800af3e:	4b5e      	ldr	r3, [pc, #376]	@ (800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800af40:	637b      	str	r3, [r7, #52]	@ 0x34
 800af42:	e010      	b.n	800af66 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800af44:	4b5a      	ldr	r3, [pc, #360]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af50:	d106      	bne.n	800af60 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 800af52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800af58:	d102      	bne.n	800af60 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800af5a:	4b58      	ldr	r3, [pc, #352]	@ (800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800af5c:	637b      	str	r3, [r7, #52]	@ 0x34
 800af5e:	e002      	b.n	800af66 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800af60:	2300      	movs	r3, #0
 800af62:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800af64:	e003      	b.n	800af6e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 800af66:	e002      	b.n	800af6e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 800af68:	2300      	movs	r3, #0
 800af6a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800af6c:	bf00      	nop
          }
        }
        break;
 800af6e:	f000 bc28 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800af72:	4b4f      	ldr	r3, [pc, #316]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800af74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800af78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800af7c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800af7e:	4b4c      	ldr	r3, [pc, #304]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af8a:	d106      	bne.n	800af9a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 800af8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d103      	bne.n	800af9a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 800af92:	4b4a      	ldr	r3, [pc, #296]	@ (800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800af94:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800af96:	f000 bc14 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800af9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800afa0:	d108      	bne.n	800afb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800afa2:	f107 0320 	add.w	r3, r7, #32
 800afa6:	4618      	mov	r0, r3
 800afa8:	f7fd fc7c 	bl	80088a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800afac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800afb0:	f000 bc07 	b.w	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800afb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800afba:	d107      	bne.n	800afcc <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afbc:	f107 0314 	add.w	r3, r7, #20
 800afc0:	4618      	mov	r0, r3
 800afc2:	f7fd fddb 	bl	8008b7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800afc6:	69bb      	ldr	r3, [r7, #24]
 800afc8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800afca:	e3fa      	b.n	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800afcc:	2300      	movs	r3, #0
 800afce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800afd0:	e3f7      	b.n	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800afd2:	4b37      	ldr	r3, [pc, #220]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800afd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800afd8:	f003 0307 	and.w	r3, r3, #7
 800afdc:	633b      	str	r3, [r7, #48]	@ 0x30
 800afde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afe0:	2b04      	cmp	r3, #4
 800afe2:	d861      	bhi.n	800b0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 800afe4:	a201      	add	r2, pc, #4	@ (adr r2, 800afec <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 800afe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afea:	bf00      	nop
 800afec:	0800b001 	.word	0x0800b001
 800aff0:	0800b011 	.word	0x0800b011
 800aff4:	0800b021 	.word	0x0800b021
 800aff8:	0800b031 	.word	0x0800b031
 800affc:	0800b037 	.word	0x0800b037
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b000:	f107 0320 	add.w	r3, r7, #32
 800b004:	4618      	mov	r0, r3
 800b006:	f7fd fc4d 	bl	80088a4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800b00a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b00c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b00e:	e04e      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b010:	f107 0314 	add.w	r3, r7, #20
 800b014:	4618      	mov	r0, r3
 800b016:	f7fd fdb1 	bl	8008b7c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b01e:	e046      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b020:	f107 0308 	add.w	r3, r7, #8
 800b024:	4618      	mov	r0, r3
 800b026:	f7fd ff15 	bl	8008e54 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b02e:	e03e      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800b030:	4b23      	ldr	r3, [pc, #140]	@ (800b0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 800b032:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b034:	e03b      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b036:	4b1e      	ldr	r3, [pc, #120]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b038:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b03c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b040:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b042:	4b1b      	ldr	r3, [pc, #108]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f003 0302 	and.w	r3, r3, #2
 800b04a:	2b02      	cmp	r3, #2
 800b04c:	d10c      	bne.n	800b068 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 800b04e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b050:	2b00      	cmp	r3, #0
 800b052:	d109      	bne.n	800b068 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b054:	4b16      	ldr	r3, [pc, #88]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	08db      	lsrs	r3, r3, #3
 800b05a:	f003 0303 	and.w	r3, r3, #3
 800b05e:	4a15      	ldr	r2, [pc, #84]	@ (800b0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800b060:	fa22 f303 	lsr.w	r3, r2, r3
 800b064:	637b      	str	r3, [r7, #52]	@ 0x34
 800b066:	e01e      	b.n	800b0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b068:	4b11      	ldr	r3, [pc, #68]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b070:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b074:	d106      	bne.n	800b084 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 800b076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b078:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b07c:	d102      	bne.n	800b084 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b07e:	4b0e      	ldr	r3, [pc, #56]	@ (800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800b080:	637b      	str	r3, [r7, #52]	@ 0x34
 800b082:	e010      	b.n	800b0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b084:	4b0a      	ldr	r3, [pc, #40]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b08c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b090:	d106      	bne.n	800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 800b092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b094:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b098:	d102      	bne.n	800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b09a:	4b08      	ldr	r3, [pc, #32]	@ (800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800b09c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b09e:	e002      	b.n	800b0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b0a4:	e003      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 800b0a6:	e002      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b0ac:	bf00      	nop
          }
        }
        break;
 800b0ae:	e388      	b.n	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b0b0:	44020c00 	.word	0x44020c00
 800b0b4:	03d09000 	.word	0x03d09000
 800b0b8:	003d0900 	.word	0x003d0900
 800b0bc:	007a1200 	.word	0x007a1200
 800b0c0:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800b0c4:	4ba9      	ldr	r3, [pc, #676]	@ (800b36c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b0c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b0ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b0ce:	633b      	str	r3, [r7, #48]	@ 0x30
 800b0d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0d2:	2b20      	cmp	r3, #32
 800b0d4:	f200 809a 	bhi.w	800b20c <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 800b0d8:	a201      	add	r2, pc, #4	@ (adr r2, 800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800b0da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0de:	bf00      	nop
 800b0e0:	0800b165 	.word	0x0800b165
 800b0e4:	0800b20d 	.word	0x0800b20d
 800b0e8:	0800b20d 	.word	0x0800b20d
 800b0ec:	0800b20d 	.word	0x0800b20d
 800b0f0:	0800b20d 	.word	0x0800b20d
 800b0f4:	0800b20d 	.word	0x0800b20d
 800b0f8:	0800b20d 	.word	0x0800b20d
 800b0fc:	0800b20d 	.word	0x0800b20d
 800b100:	0800b175 	.word	0x0800b175
 800b104:	0800b20d 	.word	0x0800b20d
 800b108:	0800b20d 	.word	0x0800b20d
 800b10c:	0800b20d 	.word	0x0800b20d
 800b110:	0800b20d 	.word	0x0800b20d
 800b114:	0800b20d 	.word	0x0800b20d
 800b118:	0800b20d 	.word	0x0800b20d
 800b11c:	0800b20d 	.word	0x0800b20d
 800b120:	0800b185 	.word	0x0800b185
 800b124:	0800b20d 	.word	0x0800b20d
 800b128:	0800b20d 	.word	0x0800b20d
 800b12c:	0800b20d 	.word	0x0800b20d
 800b130:	0800b20d 	.word	0x0800b20d
 800b134:	0800b20d 	.word	0x0800b20d
 800b138:	0800b20d 	.word	0x0800b20d
 800b13c:	0800b20d 	.word	0x0800b20d
 800b140:	0800b195 	.word	0x0800b195
 800b144:	0800b20d 	.word	0x0800b20d
 800b148:	0800b20d 	.word	0x0800b20d
 800b14c:	0800b20d 	.word	0x0800b20d
 800b150:	0800b20d 	.word	0x0800b20d
 800b154:	0800b20d 	.word	0x0800b20d
 800b158:	0800b20d 	.word	0x0800b20d
 800b15c:	0800b20d 	.word	0x0800b20d
 800b160:	0800b19b 	.word	0x0800b19b
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b164:	f107 0320 	add.w	r3, r7, #32
 800b168:	4618      	mov	r0, r3
 800b16a:	f7fd fb9b 	bl	80088a4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800b16e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b170:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b172:	e04e      	b.n	800b212 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b174:	f107 0314 	add.w	r3, r7, #20
 800b178:	4618      	mov	r0, r3
 800b17a:	f7fd fcff 	bl	8008b7c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b182:	e046      	b.n	800b212 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b184:	f107 0308 	add.w	r3, r7, #8
 800b188:	4618      	mov	r0, r3
 800b18a:	f7fd fe63 	bl	8008e54 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b192:	e03e      	b.n	800b212 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800b194:	4b76      	ldr	r3, [pc, #472]	@ (800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800b196:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b198:	e03b      	b.n	800b212 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b19a:	4b74      	ldr	r3, [pc, #464]	@ (800b36c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b19c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b1a0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b1a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b1a6:	4b71      	ldr	r3, [pc, #452]	@ (800b36c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f003 0302 	and.w	r3, r3, #2
 800b1ae:	2b02      	cmp	r3, #2
 800b1b0:	d10c      	bne.n	800b1cc <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800b1b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d109      	bne.n	800b1cc <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b1b8:	4b6c      	ldr	r3, [pc, #432]	@ (800b36c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	08db      	lsrs	r3, r3, #3
 800b1be:	f003 0303 	and.w	r3, r3, #3
 800b1c2:	4a6c      	ldr	r2, [pc, #432]	@ (800b374 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800b1c4:	fa22 f303 	lsr.w	r3, r2, r3
 800b1c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1ca:	e01e      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b1cc:	4b67      	ldr	r3, [pc, #412]	@ (800b36c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b1d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b1d8:	d106      	bne.n	800b1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800b1da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1e0:	d102      	bne.n	800b1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b1e2:	4b65      	ldr	r3, [pc, #404]	@ (800b378 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800b1e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1e6:	e010      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b1e8:	4b60      	ldr	r3, [pc, #384]	@ (800b36c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b1f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b1f4:	d106      	bne.n	800b204 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800b1f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b1fc:	d102      	bne.n	800b204 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b1fe:	4b5f      	ldr	r3, [pc, #380]	@ (800b37c <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800b200:	637b      	str	r3, [r7, #52]	@ 0x34
 800b202:	e002      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b204:	2300      	movs	r3, #0
 800b206:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b208:	e003      	b.n	800b212 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800b20a:	e002      	b.n	800b212 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 800b20c:	2300      	movs	r3, #0
 800b20e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b210:	bf00      	nop
          }
        }
        break;
 800b212:	e2d6      	b.n	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800b214:	4b55      	ldr	r3, [pc, #340]	@ (800b36c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b21a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800b21e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b222:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b226:	d031      	beq.n	800b28c <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 800b228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b22a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b22e:	d866      	bhi.n	800b2fe <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800b230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b232:	2bc0      	cmp	r3, #192	@ 0xc0
 800b234:	d027      	beq.n	800b286 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800b236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b238:	2bc0      	cmp	r3, #192	@ 0xc0
 800b23a:	d860      	bhi.n	800b2fe <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800b23c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b23e:	2b80      	cmp	r3, #128	@ 0x80
 800b240:	d019      	beq.n	800b276 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800b242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b244:	2b80      	cmp	r3, #128	@ 0x80
 800b246:	d85a      	bhi.n	800b2fe <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800b248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d003      	beq.n	800b256 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 800b24e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b250:	2b40      	cmp	r3, #64	@ 0x40
 800b252:	d008      	beq.n	800b266 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 800b254:	e053      	b.n	800b2fe <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b256:	f107 0320 	add.w	r3, r7, #32
 800b25a:	4618      	mov	r0, r3
 800b25c:	f7fd fb22 	bl	80088a4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800b260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b262:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b264:	e04e      	b.n	800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b266:	f107 0314 	add.w	r3, r7, #20
 800b26a:	4618      	mov	r0, r3
 800b26c:	f7fd fc86 	bl	8008b7c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b274:	e046      	b.n	800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b276:	f107 0308 	add.w	r3, r7, #8
 800b27a:	4618      	mov	r0, r3
 800b27c:	f7fd fdea 	bl	8008e54 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b284:	e03e      	b.n	800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800b286:	4b3a      	ldr	r3, [pc, #232]	@ (800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800b288:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b28a:	e03b      	b.n	800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b28c:	4b37      	ldr	r3, [pc, #220]	@ (800b36c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b28e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b292:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b296:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b298:	4b34      	ldr	r3, [pc, #208]	@ (800b36c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f003 0302 	and.w	r3, r3, #2
 800b2a0:	2b02      	cmp	r3, #2
 800b2a2:	d10c      	bne.n	800b2be <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 800b2a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d109      	bne.n	800b2be <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b2aa:	4b30      	ldr	r3, [pc, #192]	@ (800b36c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	08db      	lsrs	r3, r3, #3
 800b2b0:	f003 0303 	and.w	r3, r3, #3
 800b2b4:	4a2f      	ldr	r2, [pc, #188]	@ (800b374 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800b2b6:	fa22 f303 	lsr.w	r3, r2, r3
 800b2ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2bc:	e01e      	b.n	800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b2be:	4b2b      	ldr	r3, [pc, #172]	@ (800b36c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b2c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b2ca:	d106      	bne.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 800b2cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2d2:	d102      	bne.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b2d4:	4b28      	ldr	r3, [pc, #160]	@ (800b378 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800b2d6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2d8:	e010      	b.n	800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b2da:	4b24      	ldr	r3, [pc, #144]	@ (800b36c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b2e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b2e6:	d106      	bne.n	800b2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 800b2e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b2ee:	d102      	bne.n	800b2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b2f0:	4b22      	ldr	r3, [pc, #136]	@ (800b37c <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800b2f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2f4:	e002      	b.n	800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b2fa:	e003      	b.n	800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 800b2fc:	e002      	b.n	800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 800b2fe:	2300      	movs	r3, #0
 800b300:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b302:	bf00      	nop
          }
        }
        break;
 800b304:	e25d      	b.n	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800b306:	4b19      	ldr	r3, [pc, #100]	@ (800b36c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b30c:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800b310:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800b312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b314:	2b00      	cmp	r3, #0
 800b316:	d103      	bne.n	800b320 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800b318:	f7fb fb0e 	bl	8006938 <HAL_RCC_GetPCLK2Freq>
 800b31c:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800b31e:	e250      	b.n	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800b320:	4b12      	ldr	r3, [pc, #72]	@ (800b36c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b328:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b32c:	d10b      	bne.n	800b346 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 800b32e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b330:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b334:	d107      	bne.n	800b346 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b336:	f107 0314 	add.w	r3, r7, #20
 800b33a:	4618      	mov	r0, r3
 800b33c:	f7fd fc1e 	bl	8008b7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b340:	69bb      	ldr	r3, [r7, #24]
 800b342:	637b      	str	r3, [r7, #52]	@ 0x34
 800b344:	e04f      	b.n	800b3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800b346:	4b09      	ldr	r3, [pc, #36]	@ (800b36c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b34e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b352:	d115      	bne.n	800b380 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800b354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b356:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b35a:	d111      	bne.n	800b380 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b35c:	f107 0308 	add.w	r3, r7, #8
 800b360:	4618      	mov	r0, r3
 800b362:	f7fd fd77 	bl	8008e54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	637b      	str	r3, [r7, #52]	@ 0x34
 800b36a:	e03c      	b.n	800b3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 800b36c:	44020c00 	.word	0x44020c00
 800b370:	00bb8000 	.word	0x00bb8000
 800b374:	03d09000 	.word	0x03d09000
 800b378:	003d0900 	.word	0x003d0900
 800b37c:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800b380:	4b94      	ldr	r3, [pc, #592]	@ (800b5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f003 0302 	and.w	r3, r3, #2
 800b388:	2b02      	cmp	r3, #2
 800b38a:	d10d      	bne.n	800b3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 800b38c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b38e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800b392:	d109      	bne.n	800b3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b394:	4b8f      	ldr	r3, [pc, #572]	@ (800b5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	08db      	lsrs	r3, r3, #3
 800b39a:	f003 0303 	and.w	r3, r3, #3
 800b39e:	4a8e      	ldr	r2, [pc, #568]	@ (800b5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800b3a0:	fa22 f303 	lsr.w	r3, r2, r3
 800b3a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3a6:	e01e      	b.n	800b3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800b3a8:	4b8a      	ldr	r3, [pc, #552]	@ (800b5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b3b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b3b4:	d106      	bne.n	800b3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800b3b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b3bc:	d102      	bne.n	800b3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 800b3be:	4b87      	ldr	r3, [pc, #540]	@ (800b5dc <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800b3c0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3c2:	e010      	b.n	800b3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800b3c4:	4b83      	ldr	r3, [pc, #524]	@ (800b5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b3cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b3d0:	d106      	bne.n	800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 800b3d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3d4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800b3d8:	d102      	bne.n	800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800b3da:	4b81      	ldr	r3, [pc, #516]	@ (800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800b3dc:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3de:	e002      	b.n	800b3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b3e4:	e1ed      	b.n	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b3e6:	e1ec      	b.n	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 800b3e8:	4b7a      	ldr	r3, [pc, #488]	@ (800b5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b3ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b3ee:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b3f2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 800b3f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d103      	bne.n	800b402 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800b3fa:	f7fb fab3 	bl	8006964 <HAL_RCC_GetPCLK3Freq>
 800b3fe:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800b400:	e1df      	b.n	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800b402:	4b74      	ldr	r3, [pc, #464]	@ (800b5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b40a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b40e:	d10b      	bne.n	800b428 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 800b410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b412:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b416:	d107      	bne.n	800b428 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b418:	f107 0314 	add.w	r3, r7, #20
 800b41c:	4618      	mov	r0, r3
 800b41e:	f7fd fbad 	bl	8008b7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b422:	69bb      	ldr	r3, [r7, #24]
 800b424:	637b      	str	r3, [r7, #52]	@ 0x34
 800b426:	e045      	b.n	800b4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 800b428:	4b6a      	ldr	r3, [pc, #424]	@ (800b5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b430:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b434:	d10b      	bne.n	800b44e <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800b436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b438:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b43c:	d107      	bne.n	800b44e <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b43e:	f107 0308 	add.w	r3, r7, #8
 800b442:	4618      	mov	r0, r3
 800b444:	f7fd fd06 	bl	8008e54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b44c:	e032      	b.n	800b4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 800b44e:	4b61      	ldr	r3, [pc, #388]	@ (800b5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f003 0302 	and.w	r3, r3, #2
 800b456:	2b02      	cmp	r3, #2
 800b458:	d10d      	bne.n	800b476 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 800b45a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b45c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b460:	d109      	bne.n	800b476 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b462:	4b5c      	ldr	r3, [pc, #368]	@ (800b5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	08db      	lsrs	r3, r3, #3
 800b468:	f003 0303 	and.w	r3, r3, #3
 800b46c:	4a5a      	ldr	r2, [pc, #360]	@ (800b5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800b46e:	fa22 f303 	lsr.w	r3, r2, r3
 800b472:	637b      	str	r3, [r7, #52]	@ 0x34
 800b474:	e01e      	b.n	800b4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800b476:	4b57      	ldr	r3, [pc, #348]	@ (800b5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b47e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b482:	d106      	bne.n	800b492 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 800b484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b486:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b48a:	d102      	bne.n	800b492 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 800b48c:	4b53      	ldr	r3, [pc, #332]	@ (800b5dc <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800b48e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b490:	e010      	b.n	800b4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 800b492:	4b50      	ldr	r3, [pc, #320]	@ (800b5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b49a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b49e:	d106      	bne.n	800b4ae <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 800b4a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4a2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b4a6:	d102      	bne.n	800b4ae <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 800b4a8:	4b4d      	ldr	r3, [pc, #308]	@ (800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800b4aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4ac:	e002      	b.n	800b4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b4b2:	e186      	b.n	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b4b4:	e185      	b.n	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b4b6:	4b47      	ldr	r3, [pc, #284]	@ (800b5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b4b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b4bc:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800b4c0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800b4c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d103      	bne.n	800b4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800b4c8:	f7fb fa36 	bl	8006938 <HAL_RCC_GetPCLK2Freq>
 800b4cc:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800b4ce:	e178      	b.n	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 800b4d0:	4b40      	ldr	r3, [pc, #256]	@ (800b5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b4d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b4dc:	d10b      	bne.n	800b4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 800b4de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b4e4:	d107      	bne.n	800b4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b4e6:	f107 0314 	add.w	r3, r7, #20
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f7fd fb46 	bl	8008b7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b4f0:	69bb      	ldr	r3, [r7, #24]
 800b4f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4f4:	e045      	b.n	800b582 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800b4f6:	4b37      	ldr	r3, [pc, #220]	@ (800b5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b4fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b502:	d10b      	bne.n	800b51c <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 800b504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b506:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b50a:	d107      	bne.n	800b51c <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b50c:	f107 0308 	add.w	r3, r7, #8
 800b510:	4618      	mov	r0, r3
 800b512:	f7fd fc9f 	bl	8008e54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	637b      	str	r3, [r7, #52]	@ 0x34
 800b51a:	e032      	b.n	800b582 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 800b51c:	4b2d      	ldr	r3, [pc, #180]	@ (800b5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f003 0302 	and.w	r3, r3, #2
 800b524:	2b02      	cmp	r3, #2
 800b526:	d10d      	bne.n	800b544 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 800b528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b52a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800b52e:	d109      	bne.n	800b544 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b530:	4b28      	ldr	r3, [pc, #160]	@ (800b5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	08db      	lsrs	r3, r3, #3
 800b536:	f003 0303 	and.w	r3, r3, #3
 800b53a:	4a27      	ldr	r2, [pc, #156]	@ (800b5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800b53c:	fa22 f303 	lsr.w	r3, r2, r3
 800b540:	637b      	str	r3, [r7, #52]	@ 0x34
 800b542:	e01e      	b.n	800b582 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800b544:	4b23      	ldr	r3, [pc, #140]	@ (800b5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b54c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b550:	d106      	bne.n	800b560 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 800b552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b554:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b558:	d102      	bne.n	800b560 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 800b55a:	4b20      	ldr	r3, [pc, #128]	@ (800b5dc <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800b55c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b55e:	e010      	b.n	800b582 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 800b560:	4b1c      	ldr	r3, [pc, #112]	@ (800b5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b568:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b56c:	d106      	bne.n	800b57c <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 800b56e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b570:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800b574:	d102      	bne.n	800b57c <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 800b576:	4b1a      	ldr	r3, [pc, #104]	@ (800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800b578:	637b      	str	r3, [r7, #52]	@ 0x34
 800b57a:	e002      	b.n	800b582 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 800b57c:	2300      	movs	r3, #0
 800b57e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b580:	e11f      	b.n	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b582:	e11e      	b.n	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800b584:	4b13      	ldr	r3, [pc, #76]	@ (800b5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b586:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b58a:	f003 0303 	and.w	r3, r3, #3
 800b58e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b592:	2b03      	cmp	r3, #3
 800b594:	d85f      	bhi.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 800b596:	a201      	add	r2, pc, #4	@ (adr r2, 800b59c <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 800b598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b59c:	0800b5ad 	.word	0x0800b5ad
 800b5a0:	0800b5b5 	.word	0x0800b5b5
 800b5a4:	0800b5c5 	.word	0x0800b5c5
 800b5a8:	0800b5e5 	.word	0x0800b5e5

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 800b5ac:	f7fb f992 	bl	80068d4 <HAL_RCC_GetHCLKFreq>
 800b5b0:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800b5b2:	e053      	b.n	800b65c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b5b4:	f107 0320 	add.w	r3, r7, #32
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f7fd f973 	bl	80088a4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800b5be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5c0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b5c2:	e04b      	b.n	800b65c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5c4:	f107 0314 	add.w	r3, r7, #20
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f7fd fad7 	bl	8008b7c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800b5ce:	69fb      	ldr	r3, [r7, #28]
 800b5d0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b5d2:	e043      	b.n	800b65c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800b5d4:	44020c00 	.word	0x44020c00
 800b5d8:	03d09000 	.word	0x03d09000
 800b5dc:	003d0900 	.word	0x003d0900
 800b5e0:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b5e4:	4b79      	ldr	r3, [pc, #484]	@ (800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b5e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b5ea:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b5ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b5f0:	4b76      	ldr	r3, [pc, #472]	@ (800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f003 0302 	and.w	r3, r3, #2
 800b5f8:	2b02      	cmp	r3, #2
 800b5fa:	d10c      	bne.n	800b616 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 800b5fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d109      	bne.n	800b616 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b602:	4b72      	ldr	r3, [pc, #456]	@ (800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	08db      	lsrs	r3, r3, #3
 800b608:	f003 0303 	and.w	r3, r3, #3
 800b60c:	4a70      	ldr	r2, [pc, #448]	@ (800b7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 800b60e:	fa22 f303 	lsr.w	r3, r2, r3
 800b612:	637b      	str	r3, [r7, #52]	@ 0x34
 800b614:	e01e      	b.n	800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b616:	4b6d      	ldr	r3, [pc, #436]	@ (800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b61e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b622:	d106      	bne.n	800b632 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 800b624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b626:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b62a:	d102      	bne.n	800b632 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b62c:	4b69      	ldr	r3, [pc, #420]	@ (800b7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 800b62e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b630:	e010      	b.n	800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b632:	4b66      	ldr	r3, [pc, #408]	@ (800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b63a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b63e:	d106      	bne.n	800b64e <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 800b640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b642:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b646:	d102      	bne.n	800b64e <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b648:	4b63      	ldr	r3, [pc, #396]	@ (800b7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800b64a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b64c:	e002      	b.n	800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800b64e:	2300      	movs	r3, #0
 800b650:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b652:	e003      	b.n	800b65c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800b654:	e002      	b.n	800b65c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800b656:	2300      	movs	r3, #0
 800b658:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b65a:	bf00      	nop
          }
        }
        break;
 800b65c:	e0b1      	b.n	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800b65e:	4b5b      	ldr	r3, [pc, #364]	@ (800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b660:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b664:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b668:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800b66a:	4b58      	ldr	r3, [pc, #352]	@ (800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b66c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b670:	f003 0302 	and.w	r3, r3, #2
 800b674:	2b02      	cmp	r3, #2
 800b676:	d106      	bne.n	800b686 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800b678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d103      	bne.n	800b686 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 800b67e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b682:	637b      	str	r3, [r7, #52]	@ 0x34
 800b684:	e01f      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800b686:	4b51      	ldr	r3, [pc, #324]	@ (800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b688:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b68c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b690:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b694:	d106      	bne.n	800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 800b696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b698:	2b40      	cmp	r3, #64	@ 0x40
 800b69a:	d103      	bne.n	800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 800b69c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b6a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6a2:	e010      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 800b6a4:	4b49      	ldr	r3, [pc, #292]	@ (800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b6ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b6b0:	d106      	bne.n	800b6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 800b6b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6b4:	2b80      	cmp	r3, #128	@ 0x80
 800b6b6:	d103      	bne.n	800b6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 800b6b8:	f248 0312 	movw	r3, #32786	@ 0x8012
 800b6bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6be:	e002      	b.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800b6c4:	e07d      	b.n	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b6c6:	e07c      	b.n	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800b6c8:	4b40      	ldr	r3, [pc, #256]	@ (800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b6ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b6ce:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b6d2:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800b6d4:	4b3d      	ldr	r3, [pc, #244]	@ (800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b6dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b6e0:	d105      	bne.n	800b6ee <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 800b6e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d102      	bne.n	800b6ee <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 800b6e8:	4b3c      	ldr	r3, [pc, #240]	@ (800b7dc <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800b6ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6ec:	e031      	b.n	800b752 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800b6ee:	4b37      	ldr	r3, [pc, #220]	@ (800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b6f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b6fa:	d10a      	bne.n	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 800b6fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6fe:	2b10      	cmp	r3, #16
 800b700:	d107      	bne.n	800b712 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b702:	f107 0320 	add.w	r3, r7, #32
 800b706:	4618      	mov	r0, r3
 800b708:	f7fd f8cc 	bl	80088a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b70c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b70e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b710:	e01f      	b.n	800b752 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800b712:	4b2e      	ldr	r3, [pc, #184]	@ (800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b714:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b718:	f003 0302 	and.w	r3, r3, #2
 800b71c:	2b02      	cmp	r3, #2
 800b71e:	d106      	bne.n	800b72e <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 800b720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b722:	2b20      	cmp	r3, #32
 800b724:	d103      	bne.n	800b72e <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800b726:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b72a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b72c:	e011      	b.n	800b752 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800b72e:	4b27      	ldr	r3, [pc, #156]	@ (800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b730:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b734:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b738:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b73c:	d106      	bne.n	800b74c <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 800b73e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b740:	2b30      	cmp	r3, #48	@ 0x30
 800b742:	d103      	bne.n	800b74c <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 800b744:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b748:	637b      	str	r3, [r7, #52]	@ 0x34
 800b74a:	e002      	b.n	800b752 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800b74c:	2300      	movs	r3, #0
 800b74e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800b750:	e037      	b.n	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b752:	e036      	b.n	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800b754:	4b1d      	ldr	r3, [pc, #116]	@ (800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b756:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b75a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b75e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800b760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b762:	2b10      	cmp	r3, #16
 800b764:	d107      	bne.n	800b776 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b766:	f107 0320 	add.w	r3, r7, #32
 800b76a:	4618      	mov	r0, r3
 800b76c:	f7fd f89a 	bl	80088a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b772:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800b774:	e025      	b.n	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800b776:	4b15      	ldr	r3, [pc, #84]	@ (800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b77e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b782:	d10a      	bne.n	800b79a <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 800b784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b786:	2b20      	cmp	r3, #32
 800b788:	d107      	bne.n	800b79a <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b78a:	f107 0308 	add.w	r3, r7, #8
 800b78e:	4618      	mov	r0, r3
 800b790:	f7fd fb60 	bl	8008e54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	637b      	str	r3, [r7, #52]	@ 0x34
 800b798:	e00f      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800b79a:	4b0c      	ldr	r3, [pc, #48]	@ (800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b7a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b7a6:	d105      	bne.n	800b7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 800b7a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7aa:	2b30      	cmp	r3, #48	@ 0x30
 800b7ac:	d102      	bne.n	800b7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 800b7ae:	4b0b      	ldr	r3, [pc, #44]	@ (800b7dc <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800b7b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7b2:	e002      	b.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 800b7b8:	e003      	b.n	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b7ba:	e002      	b.n	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 800b7bc:	2300      	movs	r3, #0
 800b7be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b7c0:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 800b7c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	373c      	adds	r7, #60	@ 0x3c
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd90      	pop	{r4, r7, pc}
 800b7cc:	44020c00 	.word	0x44020c00
 800b7d0:	03d09000 	.word	0x03d09000
 800b7d4:	003d0900 	.word	0x003d0900
 800b7d8:	007a1200 	.word	0x007a1200
 800b7dc:	02dc6c00 	.word	0x02dc6c00

0800b7e0 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b084      	sub	sp, #16
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800b7e8:	4b48      	ldr	r3, [pc, #288]	@ (800b90c <RCCEx_PLL2_Config+0x12c>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	4a47      	ldr	r2, [pc, #284]	@ (800b90c <RCCEx_PLL2_Config+0x12c>)
 800b7ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b7f2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b7f4:	f7f7 f856 	bl	80028a4 <HAL_GetTick>
 800b7f8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b7fa:	e008      	b.n	800b80e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b7fc:	f7f7 f852 	bl	80028a4 <HAL_GetTick>
 800b800:	4602      	mov	r2, r0
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	1ad3      	subs	r3, r2, r3
 800b806:	2b02      	cmp	r3, #2
 800b808:	d901      	bls.n	800b80e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800b80a:	2303      	movs	r3, #3
 800b80c:	e07a      	b.n	800b904 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b80e:	4b3f      	ldr	r3, [pc, #252]	@ (800b90c <RCCEx_PLL2_Config+0x12c>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b816:	2b00      	cmp	r3, #0
 800b818:	d1f0      	bne.n	800b7fc <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800b81a:	4b3c      	ldr	r3, [pc, #240]	@ (800b90c <RCCEx_PLL2_Config+0x12c>)
 800b81c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b81e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b822:	f023 0303 	bic.w	r3, r3, #3
 800b826:	687a      	ldr	r2, [r7, #4]
 800b828:	6811      	ldr	r1, [r2, #0]
 800b82a:	687a      	ldr	r2, [r7, #4]
 800b82c:	6852      	ldr	r2, [r2, #4]
 800b82e:	0212      	lsls	r2, r2, #8
 800b830:	430a      	orrs	r2, r1
 800b832:	4936      	ldr	r1, [pc, #216]	@ (800b90c <RCCEx_PLL2_Config+0x12c>)
 800b834:	4313      	orrs	r3, r2
 800b836:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	689b      	ldr	r3, [r3, #8]
 800b83c:	3b01      	subs	r3, #1
 800b83e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	68db      	ldr	r3, [r3, #12]
 800b846:	3b01      	subs	r3, #1
 800b848:	025b      	lsls	r3, r3, #9
 800b84a:	b29b      	uxth	r3, r3
 800b84c:	431a      	orrs	r2, r3
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	691b      	ldr	r3, [r3, #16]
 800b852:	3b01      	subs	r3, #1
 800b854:	041b      	lsls	r3, r3, #16
 800b856:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b85a:	431a      	orrs	r2, r3
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	695b      	ldr	r3, [r3, #20]
 800b860:	3b01      	subs	r3, #1
 800b862:	061b      	lsls	r3, r3, #24
 800b864:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b868:	4928      	ldr	r1, [pc, #160]	@ (800b90c <RCCEx_PLL2_Config+0x12c>)
 800b86a:	4313      	orrs	r3, r2
 800b86c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800b86e:	4b27      	ldr	r3, [pc, #156]	@ (800b90c <RCCEx_PLL2_Config+0x12c>)
 800b870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b872:	f023 020c 	bic.w	r2, r3, #12
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	699b      	ldr	r3, [r3, #24]
 800b87a:	4924      	ldr	r1, [pc, #144]	@ (800b90c <RCCEx_PLL2_Config+0x12c>)
 800b87c:	4313      	orrs	r3, r2
 800b87e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800b880:	4b22      	ldr	r3, [pc, #136]	@ (800b90c <RCCEx_PLL2_Config+0x12c>)
 800b882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b884:	f023 0220 	bic.w	r2, r3, #32
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	69db      	ldr	r3, [r3, #28]
 800b88c:	491f      	ldr	r1, [pc, #124]	@ (800b90c <RCCEx_PLL2_Config+0x12c>)
 800b88e:	4313      	orrs	r3, r2
 800b890:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800b892:	4b1e      	ldr	r3, [pc, #120]	@ (800b90c <RCCEx_PLL2_Config+0x12c>)
 800b894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b89a:	491c      	ldr	r1, [pc, #112]	@ (800b90c <RCCEx_PLL2_Config+0x12c>)
 800b89c:	4313      	orrs	r3, r2
 800b89e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800b8a0:	4b1a      	ldr	r3, [pc, #104]	@ (800b90c <RCCEx_PLL2_Config+0x12c>)
 800b8a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8a4:	4a19      	ldr	r2, [pc, #100]	@ (800b90c <RCCEx_PLL2_Config+0x12c>)
 800b8a6:	f023 0310 	bic.w	r3, r3, #16
 800b8aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800b8ac:	4b17      	ldr	r3, [pc, #92]	@ (800b90c <RCCEx_PLL2_Config+0x12c>)
 800b8ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8b0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b8b4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800b8b8:	687a      	ldr	r2, [r7, #4]
 800b8ba:	6a12      	ldr	r2, [r2, #32]
 800b8bc:	00d2      	lsls	r2, r2, #3
 800b8be:	4913      	ldr	r1, [pc, #76]	@ (800b90c <RCCEx_PLL2_Config+0x12c>)
 800b8c0:	4313      	orrs	r3, r2
 800b8c2:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800b8c4:	4b11      	ldr	r3, [pc, #68]	@ (800b90c <RCCEx_PLL2_Config+0x12c>)
 800b8c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8c8:	4a10      	ldr	r2, [pc, #64]	@ (800b90c <RCCEx_PLL2_Config+0x12c>)
 800b8ca:	f043 0310 	orr.w	r3, r3, #16
 800b8ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800b8d0:	4b0e      	ldr	r3, [pc, #56]	@ (800b90c <RCCEx_PLL2_Config+0x12c>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	4a0d      	ldr	r2, [pc, #52]	@ (800b90c <RCCEx_PLL2_Config+0x12c>)
 800b8d6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b8da:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b8dc:	f7f6 ffe2 	bl	80028a4 <HAL_GetTick>
 800b8e0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b8e2:	e008      	b.n	800b8f6 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b8e4:	f7f6 ffde 	bl	80028a4 <HAL_GetTick>
 800b8e8:	4602      	mov	r2, r0
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	1ad3      	subs	r3, r2, r3
 800b8ee:	2b02      	cmp	r3, #2
 800b8f0:	d901      	bls.n	800b8f6 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800b8f2:	2303      	movs	r3, #3
 800b8f4:	e006      	b.n	800b904 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b8f6:	4b05      	ldr	r3, [pc, #20]	@ (800b90c <RCCEx_PLL2_Config+0x12c>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d0f0      	beq.n	800b8e4 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800b902:	2300      	movs	r3, #0

}
 800b904:	4618      	mov	r0, r3
 800b906:	3710      	adds	r7, #16
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}
 800b90c:	44020c00 	.word	0x44020c00

0800b910 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b084      	sub	sp, #16
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800b918:	4b48      	ldr	r3, [pc, #288]	@ (800ba3c <RCCEx_PLL3_Config+0x12c>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	4a47      	ldr	r2, [pc, #284]	@ (800ba3c <RCCEx_PLL3_Config+0x12c>)
 800b91e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b922:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b924:	f7f6 ffbe 	bl	80028a4 <HAL_GetTick>
 800b928:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b92a:	e008      	b.n	800b93e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b92c:	f7f6 ffba 	bl	80028a4 <HAL_GetTick>
 800b930:	4602      	mov	r2, r0
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	1ad3      	subs	r3, r2, r3
 800b936:	2b02      	cmp	r3, #2
 800b938:	d901      	bls.n	800b93e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800b93a:	2303      	movs	r3, #3
 800b93c:	e07a      	b.n	800ba34 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b93e:	4b3f      	ldr	r3, [pc, #252]	@ (800ba3c <RCCEx_PLL3_Config+0x12c>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b946:	2b00      	cmp	r3, #0
 800b948:	d1f0      	bne.n	800b92c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800b94a:	4b3c      	ldr	r3, [pc, #240]	@ (800ba3c <RCCEx_PLL3_Config+0x12c>)
 800b94c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b94e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b952:	f023 0303 	bic.w	r3, r3, #3
 800b956:	687a      	ldr	r2, [r7, #4]
 800b958:	6811      	ldr	r1, [r2, #0]
 800b95a:	687a      	ldr	r2, [r7, #4]
 800b95c:	6852      	ldr	r2, [r2, #4]
 800b95e:	0212      	lsls	r2, r2, #8
 800b960:	430a      	orrs	r2, r1
 800b962:	4936      	ldr	r1, [pc, #216]	@ (800ba3c <RCCEx_PLL3_Config+0x12c>)
 800b964:	4313      	orrs	r3, r2
 800b966:	630b      	str	r3, [r1, #48]	@ 0x30
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	689b      	ldr	r3, [r3, #8]
 800b96c:	3b01      	subs	r3, #1
 800b96e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	68db      	ldr	r3, [r3, #12]
 800b976:	3b01      	subs	r3, #1
 800b978:	025b      	lsls	r3, r3, #9
 800b97a:	b29b      	uxth	r3, r3
 800b97c:	431a      	orrs	r2, r3
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	691b      	ldr	r3, [r3, #16]
 800b982:	3b01      	subs	r3, #1
 800b984:	041b      	lsls	r3, r3, #16
 800b986:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b98a:	431a      	orrs	r2, r3
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	695b      	ldr	r3, [r3, #20]
 800b990:	3b01      	subs	r3, #1
 800b992:	061b      	lsls	r3, r3, #24
 800b994:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b998:	4928      	ldr	r1, [pc, #160]	@ (800ba3c <RCCEx_PLL3_Config+0x12c>)
 800b99a:	4313      	orrs	r3, r2
 800b99c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b99e:	4b27      	ldr	r3, [pc, #156]	@ (800ba3c <RCCEx_PLL3_Config+0x12c>)
 800b9a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9a2:	f023 020c 	bic.w	r2, r3, #12
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	699b      	ldr	r3, [r3, #24]
 800b9aa:	4924      	ldr	r1, [pc, #144]	@ (800ba3c <RCCEx_PLL3_Config+0x12c>)
 800b9ac:	4313      	orrs	r3, r2
 800b9ae:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800b9b0:	4b22      	ldr	r3, [pc, #136]	@ (800ba3c <RCCEx_PLL3_Config+0x12c>)
 800b9b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9b4:	f023 0220 	bic.w	r2, r3, #32
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	69db      	ldr	r3, [r3, #28]
 800b9bc:	491f      	ldr	r1, [pc, #124]	@ (800ba3c <RCCEx_PLL3_Config+0x12c>)
 800b9be:	4313      	orrs	r3, r2
 800b9c0:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800b9c2:	4b1e      	ldr	r3, [pc, #120]	@ (800ba3c <RCCEx_PLL3_Config+0x12c>)
 800b9c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9ca:	491c      	ldr	r1, [pc, #112]	@ (800ba3c <RCCEx_PLL3_Config+0x12c>)
 800b9cc:	4313      	orrs	r3, r2
 800b9ce:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800b9d0:	4b1a      	ldr	r3, [pc, #104]	@ (800ba3c <RCCEx_PLL3_Config+0x12c>)
 800b9d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9d4:	4a19      	ldr	r2, [pc, #100]	@ (800ba3c <RCCEx_PLL3_Config+0x12c>)
 800b9d6:	f023 0310 	bic.w	r3, r3, #16
 800b9da:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800b9dc:	4b17      	ldr	r3, [pc, #92]	@ (800ba3c <RCCEx_PLL3_Config+0x12c>)
 800b9de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b9e0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b9e4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800b9e8:	687a      	ldr	r2, [r7, #4]
 800b9ea:	6a12      	ldr	r2, [r2, #32]
 800b9ec:	00d2      	lsls	r2, r2, #3
 800b9ee:	4913      	ldr	r1, [pc, #76]	@ (800ba3c <RCCEx_PLL3_Config+0x12c>)
 800b9f0:	4313      	orrs	r3, r2
 800b9f2:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800b9f4:	4b11      	ldr	r3, [pc, #68]	@ (800ba3c <RCCEx_PLL3_Config+0x12c>)
 800b9f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9f8:	4a10      	ldr	r2, [pc, #64]	@ (800ba3c <RCCEx_PLL3_Config+0x12c>)
 800b9fa:	f043 0310 	orr.w	r3, r3, #16
 800b9fe:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800ba00:	4b0e      	ldr	r3, [pc, #56]	@ (800ba3c <RCCEx_PLL3_Config+0x12c>)
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	4a0d      	ldr	r2, [pc, #52]	@ (800ba3c <RCCEx_PLL3_Config+0x12c>)
 800ba06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ba0a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ba0c:	f7f6 ff4a 	bl	80028a4 <HAL_GetTick>
 800ba10:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ba12:	e008      	b.n	800ba26 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ba14:	f7f6 ff46 	bl	80028a4 <HAL_GetTick>
 800ba18:	4602      	mov	r2, r0
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	1ad3      	subs	r3, r2, r3
 800ba1e:	2b02      	cmp	r3, #2
 800ba20:	d901      	bls.n	800ba26 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800ba22:	2303      	movs	r3, #3
 800ba24:	e006      	b.n	800ba34 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ba26:	4b05      	ldr	r3, [pc, #20]	@ (800ba3c <RCCEx_PLL3_Config+0x12c>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d0f0      	beq.n	800ba14 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800ba32:	2300      	movs	r3, #0
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	3710      	adds	r7, #16
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}
 800ba3c:	44020c00 	.word	0x44020c00

0800ba40 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b084      	sub	sp, #16
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d101      	bne.n	800ba52 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800ba4e:	2301      	movs	r3, #1
 800ba50:	e08c      	b.n	800bb6c <HAL_RNG_Init+0x12c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	7a5b      	ldrb	r3, [r3, #9]
 800ba56:	b2db      	uxtb	r3, r3
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d105      	bne.n	800ba68 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	f7f5 ff92 	bl	800198c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2202      	movs	r2, #2
 800ba6c:	725a      	strb	r2, [r3, #9]

  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	681a      	ldr	r2, [r3, #0]
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f022 0204 	bic.w	r2, r2, #4
 800ba7c:	601a      	str	r2, [r3, #0]

#if defined(RNG_CR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->CR, RNG_CR_NIST_VALUE | RNG_CR_CONDRST | hrng->Init.ClockErrorDetection);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6859      	ldr	r1, [r3, #4]
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681a      	ldr	r2, [r3, #0]
 800ba86:	4b3b      	ldr	r3, [pc, #236]	@ (800bb74 <HAL_RNG_Init+0x134>)
 800ba88:	430b      	orrs	r3, r1
 800ba8a:	6013      	str	r3, [r2, #0]
  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
#endif /* RNG_CR_NIST_VALUE */
#if defined(RNG_HTCR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCR_NIST_VALUE);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f646 2291 	movw	r2, #27281	@ 0x6a91
 800ba94:	611a      	str	r2, [r3, #16]
#endif /* RNG_HTCR_NIST_VALUE */
#if defined(RNG_NSCR_NIST_VALUE)
  WRITE_REG(hrng->Instance->NSCR, RNG_NSCR_NIST_VALUE);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	4a37      	ldr	r2, [pc, #220]	@ (800bb78 <HAL_RNG_Init+0x138>)
 800ba9c:	60da      	str	r2, [r3, #12]
#endif /* RNG_NSCR_NIST_VALUE */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	681a      	ldr	r2, [r3, #0]
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800baac:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800baae:	f7f6 fef9 	bl	80028a4 <HAL_GetTick>
 800bab2:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800bab4:	e016      	b.n	800bae4 <HAL_RNG_Init+0xa4>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800bab6:	f7f6 fef5 	bl	80028a4 <HAL_GetTick>
 800baba:	4602      	mov	r2, r0
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	1ad3      	subs	r3, r2, r3
 800bac0:	2b04      	cmp	r3, #4
 800bac2:	d90f      	bls.n	800bae4 <HAL_RNG_Init+0xa4>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800bace:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bad2:	d107      	bne.n	800bae4 <HAL_RNG_Init+0xa4>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2201      	movs	r2, #1
 800bad8:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2202      	movs	r2, #2
 800bade:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800bae0:	2301      	movs	r3, #1
 800bae2:	e043      	b.n	800bb6c <HAL_RNG_Init+0x12c>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800baee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800baf2:	d0e0      	beq.n	800bab6 <HAL_RNG_Init+0x76>
      }
    }
  }

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	681a      	ldr	r2, [r3, #0]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	f042 0204 	orr.w	r2, r2, #4
 800bb02:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	685b      	ldr	r3, [r3, #4]
 800bb0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb0e:	2b40      	cmp	r3, #64	@ 0x40
 800bb10:	d104      	bne.n	800bb1c <HAL_RNG_Init+0xdc>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2204      	movs	r2, #4
 800bb16:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800bb18:	2301      	movs	r3, #1
 800bb1a:	e027      	b.n	800bb6c <HAL_RNG_Init+0x12c>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800bb1c:	f7f6 fec2 	bl	80028a4 <HAL_GetTick>
 800bb20:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800bb22:	e015      	b.n	800bb50 <HAL_RNG_Init+0x110>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800bb24:	f7f6 febe 	bl	80028a4 <HAL_GetTick>
 800bb28:	4602      	mov	r2, r0
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	1ad3      	subs	r3, r2, r3
 800bb2e:	2b04      	cmp	r3, #4
 800bb30:	d90e      	bls.n	800bb50 <HAL_RNG_Init+0x110>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	685b      	ldr	r3, [r3, #4]
 800bb38:	f003 0301 	and.w	r3, r3, #1
 800bb3c:	2b01      	cmp	r3, #1
 800bb3e:	d007      	beq.n	800bb50 <HAL_RNG_Init+0x110>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2204      	movs	r2, #4
 800bb44:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2202      	movs	r2, #2
 800bb4a:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	e00d      	b.n	800bb6c <HAL_RNG_Init+0x12c>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	685b      	ldr	r3, [r3, #4]
 800bb56:	f003 0301 	and.w	r3, r3, #1
 800bb5a:	2b01      	cmp	r3, #1
 800bb5c:	d1e2      	bne.n	800bb24 <HAL_RNG_Init+0xe4>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2201      	movs	r2, #1
 800bb62:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2200      	movs	r2, #0
 800bb68:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800bb6a:	2300      	movs	r3, #0
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	3710      	adds	r7, #16
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}
 800bb74:	40f00e00 	.word	0x40f00e00
 800bb78:	0003af66 	.word	0x0003af66

0800bb7c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b084      	sub	sp, #16
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800bb84:	2301      	movs	r3, #1
 800bb86:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d071      	beq.n	800bc72 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bb94:	b2db      	uxtb	r3, r3
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d106      	bne.n	800bba8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f7f5 ff4a 	bl	8001a3c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2202      	movs	r2, #2
 800bbac:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800bbb0:	4b32      	ldr	r3, [pc, #200]	@ (800bc7c <HAL_RTC_Init+0x100>)
 800bbb2:	68db      	ldr	r3, [r3, #12]
 800bbb4:	f003 0310 	and.w	r3, r3, #16
 800bbb8:	2b10      	cmp	r3, #16
 800bbba:	d051      	beq.n	800bc60 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bbbc:	4b2f      	ldr	r3, [pc, #188]	@ (800bc7c <HAL_RTC_Init+0x100>)
 800bbbe:	22ca      	movs	r2, #202	@ 0xca
 800bbc0:	625a      	str	r2, [r3, #36]	@ 0x24
 800bbc2:	4b2e      	ldr	r3, [pc, #184]	@ (800bc7c <HAL_RTC_Init+0x100>)
 800bbc4:	2253      	movs	r2, #83	@ 0x53
 800bbc6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f000 f9a3 	bl	800bf14 <RTC_EnterInitMode>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800bbd2:	7bfb      	ldrb	r3, [r7, #15]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d13f      	bne.n	800bc58 <HAL_RTC_Init+0xdc>
      {
#if defined(RTC_CR_OSEL)
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800bbd8:	4b28      	ldr	r3, [pc, #160]	@ (800bc7c <HAL_RTC_Init+0x100>)
 800bbda:	699b      	ldr	r3, [r3, #24]
 800bbdc:	4a27      	ldr	r2, [pc, #156]	@ (800bc7c <HAL_RTC_Init+0x100>)
 800bbde:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800bbe2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bbe6:	6193      	str	r3, [r2, #24]

        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800bbe8:	4b24      	ldr	r3, [pc, #144]	@ (800bc7c <HAL_RTC_Init+0x100>)
 800bbea:	699a      	ldr	r2, [r3, #24]
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6859      	ldr	r1, [r3, #4]
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	691b      	ldr	r3, [r3, #16]
 800bbf4:	4319      	orrs	r1, r3
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	699b      	ldr	r3, [r3, #24]
 800bbfa:	430b      	orrs	r3, r1
 800bbfc:	491f      	ldr	r1, [pc, #124]	@ (800bc7c <HAL_RTC_Init+0x100>)
 800bbfe:	4313      	orrs	r3, r2
 800bc00:	618b      	str	r3, [r1, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, hrtc->Init.HourFormat);
#endif /* RTC_CR_OSEL */

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	68da      	ldr	r2, [r3, #12]
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	689b      	ldr	r3, [r3, #8]
 800bc0a:	041b      	lsls	r3, r3, #16
 800bc0c:	491b      	ldr	r1, [pc, #108]	@ (800bc7c <HAL_RTC_Init+0x100>)
 800bc0e:	4313      	orrs	r3, r2
 800bc10:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800bc12:	4b1a      	ldr	r3, [pc, #104]	@ (800bc7c <HAL_RTC_Init+0x100>)
 800bc14:	68db      	ldr	r3, [r3, #12]
 800bc16:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc22:	430b      	orrs	r3, r1
 800bc24:	4915      	ldr	r1, [pc, #84]	@ (800bc7c <HAL_RTC_Init+0x100>)
 800bc26:	4313      	orrs	r3, r2
 800bc28:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f000 f9ae 	bl	800bf8c <RTC_ExitInitMode>
 800bc30:	4603      	mov	r3, r0
 800bc32:	73fb      	strb	r3, [r7, #15]

#if defined(RTC_CR_OSEL)
        if (status == HAL_OK)
 800bc34:	7bfb      	ldrb	r3, [r7, #15]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d10e      	bne.n	800bc58 <HAL_RTC_Init+0xdc>
        {
#if defined(RTC_CR_OUT2EN)
          MODIFY_REG(RTC->CR, \
 800bc3a:	4b10      	ldr	r3, [pc, #64]	@ (800bc7c <HAL_RTC_Init+0x100>)
 800bc3c:	699b      	ldr	r3, [r3, #24]
 800bc3e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6a19      	ldr	r1, [r3, #32]
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	69db      	ldr	r3, [r3, #28]
 800bc4a:	4319      	orrs	r1, r3
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	695b      	ldr	r3, [r3, #20]
 800bc50:	430b      	orrs	r3, r1
 800bc52:	490a      	ldr	r1, [pc, #40]	@ (800bc7c <HAL_RTC_Init+0x100>)
 800bc54:	4313      	orrs	r3, r2
 800bc56:	618b      	str	r3, [r1, #24]
        }
#endif /* RTC_CR_OSEL */
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bc58:	4b08      	ldr	r3, [pc, #32]	@ (800bc7c <HAL_RTC_Init+0x100>)
 800bc5a:	22ff      	movs	r2, #255	@ 0xff
 800bc5c:	625a      	str	r2, [r3, #36]	@ 0x24
 800bc5e:	e001      	b.n	800bc64 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800bc60:	2300      	movs	r3, #0
 800bc62:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800bc64:	7bfb      	ldrb	r3, [r7, #15]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d103      	bne.n	800bc72 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800bc72:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	3710      	adds	r7, #16
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}
 800bc7c:	44007800 	.word	0x44007800

0800bc80 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800bc80:	b590      	push	{r4, r7, lr}
 800bc82:	b087      	sub	sp, #28
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	60f8      	str	r0, [r7, #12]
 800bc88:	60b9      	str	r1, [r7, #8]
 800bc8a:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800bc92:	2b01      	cmp	r3, #1
 800bc94:	d101      	bne.n	800bc9a <HAL_RTC_SetTime+0x1a>
 800bc96:	2302      	movs	r3, #2
 800bc98:	e07e      	b.n	800bd98 <HAL_RTC_SetTime+0x118>
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	2201      	movs	r2, #1
 800bc9e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	2202      	movs	r2, #2
 800bca6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bcaa:	4b3d      	ldr	r3, [pc, #244]	@ (800bda0 <HAL_RTC_SetTime+0x120>)
 800bcac:	22ca      	movs	r2, #202	@ 0xca
 800bcae:	625a      	str	r2, [r3, #36]	@ 0x24
 800bcb0:	4b3b      	ldr	r3, [pc, #236]	@ (800bda0 <HAL_RTC_SetTime+0x120>)
 800bcb2:	2253      	movs	r2, #83	@ 0x53
 800bcb4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800bcb6:	68f8      	ldr	r0, [r7, #12]
 800bcb8:	f000 f92c 	bl	800bf14 <RTC_EnterInitMode>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800bcc0:	7cfb      	ldrb	r3, [r7, #19]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d159      	bne.n	800bd7a <HAL_RTC_SetTime+0xfa>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800bcc6:	4b36      	ldr	r3, [pc, #216]	@ (800bda0 <HAL_RTC_SetTime+0x120>)
 800bcc8:	68db      	ldr	r3, [r3, #12]
 800bcca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bcce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bcd2:	d04d      	beq.n	800bd70 <HAL_RTC_SetTime+0xf0>
    {
      if (Format == RTC_FORMAT_BIN)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d125      	bne.n	800bd26 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800bcda:	4b31      	ldr	r3, [pc, #196]	@ (800bda0 <HAL_RTC_SetTime+0x120>)
 800bcdc:	699b      	ldr	r3, [r3, #24]
 800bcde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d102      	bne.n	800bcec <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800bce6:	68bb      	ldr	r3, [r7, #8]
 800bce8:	2200      	movs	r2, #0
 800bcea:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	781b      	ldrb	r3, [r3, #0]
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f000 f989 	bl	800c008 <RTC_ByteToBcd2>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bcfa:	68bb      	ldr	r3, [r7, #8]
 800bcfc:	785b      	ldrb	r3, [r3, #1]
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f000 f982 	bl	800c008 <RTC_ByteToBcd2>
 800bd04:	4603      	mov	r3, r0
 800bd06:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bd08:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	789b      	ldrb	r3, [r3, #2]
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f000 f97a 	bl	800c008 <RTC_ByteToBcd2>
 800bd14:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bd16:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	78db      	ldrb	r3, [r3, #3]
 800bd1e:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bd20:	4313      	orrs	r3, r2
 800bd22:	617b      	str	r3, [r7, #20]
 800bd24:	e017      	b.n	800bd56 <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800bd26:	4b1e      	ldr	r3, [pc, #120]	@ (800bda0 <HAL_RTC_SetTime+0x120>)
 800bd28:	699b      	ldr	r3, [r3, #24]
 800bd2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d102      	bne.n	800bd38 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	2200      	movs	r2, #0
 800bd36:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	781b      	ldrb	r3, [r3, #0]
 800bd3c:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	785b      	ldrb	r3, [r3, #1]
 800bd42:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bd44:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800bd46:	68ba      	ldr	r2, [r7, #8]
 800bd48:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bd4a:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	78db      	ldrb	r3, [r3, #3]
 800bd50:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bd52:	4313      	orrs	r3, r2
 800bd54:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800bd56:	4a12      	ldr	r2, [pc, #72]	@ (800bda0 <HAL_RTC_SetTime+0x120>)
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800bd5e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800bd62:	6013      	str	r3, [r2, #0]

      /* Clear the bits to be configured */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800bd64:	4b0e      	ldr	r3, [pc, #56]	@ (800bda0 <HAL_RTC_SetTime+0x120>)
 800bd66:	699b      	ldr	r3, [r3, #24]
 800bd68:	4a0d      	ldr	r2, [pc, #52]	@ (800bda0 <HAL_RTC_SetTime+0x120>)
 800bd6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bd6e:	6193      	str	r3, [r2, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800bd70:	68f8      	ldr	r0, [r7, #12]
 800bd72:	f000 f90b 	bl	800bf8c <RTC_ExitInitMode>
 800bd76:	4603      	mov	r3, r0
 800bd78:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bd7a:	4b09      	ldr	r3, [pc, #36]	@ (800bda0 <HAL_RTC_SetTime+0x120>)
 800bd7c:	22ff      	movs	r2, #255	@ 0xff
 800bd7e:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800bd80:	7cfb      	ldrb	r3, [r7, #19]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d103      	bne.n	800bd8e <HAL_RTC_SetTime+0x10e>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	2201      	movs	r2, #1
 800bd8a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	2200      	movs	r2, #0
 800bd92:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800bd96:	7cfb      	ldrb	r3, [r7, #19]
}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	371c      	adds	r7, #28
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd90      	pop	{r4, r7, pc}
 800bda0:	44007800 	.word	0x44007800

0800bda4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800bda4:	b590      	push	{r4, r7, lr}
 800bda6:	b087      	sub	sp, #28
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	60f8      	str	r0, [r7, #12]
 800bdac:	60b9      	str	r1, [r7, #8]
 800bdae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800bdb6:	2b01      	cmp	r3, #1
 800bdb8:	d101      	bne.n	800bdbe <HAL_RTC_SetDate+0x1a>
 800bdba:	2302      	movs	r3, #2
 800bdbc:	e071      	b.n	800bea2 <HAL_RTC_SetDate+0xfe>
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	2201      	movs	r2, #1
 800bdc2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	2202      	movs	r2, #2
 800bdca:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d10e      	bne.n	800bdf2 <HAL_RTC_SetDate+0x4e>
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	785b      	ldrb	r3, [r3, #1]
 800bdd8:	f003 0310 	and.w	r3, r3, #16
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d008      	beq.n	800bdf2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	785b      	ldrb	r3, [r3, #1]
 800bde4:	f023 0310 	bic.w	r3, r3, #16
 800bde8:	b2db      	uxtb	r3, r3
 800bdea:	330a      	adds	r3, #10
 800bdec:	b2da      	uxtb	r2, r3
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d11c      	bne.n	800be32 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	78db      	ldrb	r3, [r3, #3]
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f000 f903 	bl	800c008 <RTC_ByteToBcd2>
 800be02:	4603      	mov	r3, r0
 800be04:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	785b      	ldrb	r3, [r3, #1]
 800be0a:	4618      	mov	r0, r3
 800be0c:	f000 f8fc 	bl	800c008 <RTC_ByteToBcd2>
 800be10:	4603      	mov	r3, r0
 800be12:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800be14:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	789b      	ldrb	r3, [r3, #2]
 800be1a:	4618      	mov	r0, r3
 800be1c:	f000 f8f4 	bl	800c008 <RTC_ByteToBcd2>
 800be20:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800be22:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	781b      	ldrb	r3, [r3, #0]
 800be2a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800be2c:	4313      	orrs	r3, r2
 800be2e:	617b      	str	r3, [r7, #20]
 800be30:	e00e      	b.n	800be50 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	78db      	ldrb	r3, [r3, #3]
 800be36:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	785b      	ldrb	r3, [r3, #1]
 800be3c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800be3e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800be40:	68ba      	ldr	r2, [r7, #8]
 800be42:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800be44:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	781b      	ldrb	r3, [r3, #0]
 800be4a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800be4c:	4313      	orrs	r3, r2
 800be4e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800be50:	4b16      	ldr	r3, [pc, #88]	@ (800beac <HAL_RTC_SetDate+0x108>)
 800be52:	22ca      	movs	r2, #202	@ 0xca
 800be54:	625a      	str	r2, [r3, #36]	@ 0x24
 800be56:	4b15      	ldr	r3, [pc, #84]	@ (800beac <HAL_RTC_SetDate+0x108>)
 800be58:	2253      	movs	r2, #83	@ 0x53
 800be5a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800be5c:	68f8      	ldr	r0, [r7, #12]
 800be5e:	f000 f859 	bl	800bf14 <RTC_EnterInitMode>
 800be62:	4603      	mov	r3, r0
 800be64:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800be66:	7cfb      	ldrb	r3, [r7, #19]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d10b      	bne.n	800be84 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800be6c:	4a0f      	ldr	r2, [pc, #60]	@ (800beac <HAL_RTC_SetDate+0x108>)
 800be6e:	697b      	ldr	r3, [r7, #20]
 800be70:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800be74:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800be78:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800be7a:	68f8      	ldr	r0, [r7, #12]
 800be7c:	f000 f886 	bl	800bf8c <RTC_ExitInitMode>
 800be80:	4603      	mov	r3, r0
 800be82:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800be84:	4b09      	ldr	r3, [pc, #36]	@ (800beac <HAL_RTC_SetDate+0x108>)
 800be86:	22ff      	movs	r2, #255	@ 0xff
 800be88:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800be8a:	7cfb      	ldrb	r3, [r7, #19]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d103      	bne.n	800be98 <HAL_RTC_SetDate+0xf4>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	2201      	movs	r2, #1
 800be94:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	2200      	movs	r2, #0
 800be9c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800bea0:	7cfb      	ldrb	r3, [r7, #19]
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	371c      	adds	r7, #28
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd90      	pop	{r4, r7, pc}
 800beaa:	bf00      	nop
 800beac:	44007800 	.word	0x44007800

0800beb0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b084      	sub	sp, #16
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800beb8:	4b15      	ldr	r3, [pc, #84]	@ (800bf10 <HAL_RTC_WaitForSynchro+0x60>)
 800beba:	68db      	ldr	r3, [r3, #12]
 800bebc:	4a14      	ldr	r2, [pc, #80]	@ (800bf10 <HAL_RTC_WaitForSynchro+0x60>)
 800bebe:	f023 0320 	bic.w	r3, r3, #32
 800bec2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800bec4:	f7f6 fcee 	bl	80028a4 <HAL_GetTick>
 800bec8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800beca:	e013      	b.n	800bef4 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800becc:	f7f6 fcea 	bl	80028a4 <HAL_GetTick>
 800bed0:	4602      	mov	r2, r0
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	1ad3      	subs	r3, r2, r3
 800bed6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800beda:	d90b      	bls.n	800bef4 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800bedc:	4b0c      	ldr	r3, [pc, #48]	@ (800bf10 <HAL_RTC_WaitForSynchro+0x60>)
 800bede:	68db      	ldr	r3, [r3, #12]
 800bee0:	f003 0320 	and.w	r3, r3, #32
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d10c      	bne.n	800bf02 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2203      	movs	r2, #3
 800beec:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800bef0:	2303      	movs	r3, #3
 800bef2:	e008      	b.n	800bf06 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800bef4:	4b06      	ldr	r3, [pc, #24]	@ (800bf10 <HAL_RTC_WaitForSynchro+0x60>)
 800bef6:	68db      	ldr	r3, [r3, #12]
 800bef8:	f003 0320 	and.w	r3, r3, #32
 800befc:	2b00      	cmp	r3, #0
 800befe:	d0e5      	beq.n	800becc <HAL_RTC_WaitForSynchro+0x1c>
 800bf00:	e000      	b.n	800bf04 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800bf02:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800bf04:	2300      	movs	r3, #0
}
 800bf06:	4618      	mov	r0, r3
 800bf08:	3710      	adds	r7, #16
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}
 800bf0e:	bf00      	nop
 800bf10:	44007800 	.word	0x44007800

0800bf14 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b084      	sub	sp, #16
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800bf20:	4b19      	ldr	r3, [pc, #100]	@ (800bf88 <RTC_EnterInitMode+0x74>)
 800bf22:	68db      	ldr	r3, [r3, #12]
 800bf24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d128      	bne.n	800bf7e <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800bf2c:	4b16      	ldr	r3, [pc, #88]	@ (800bf88 <RTC_EnterInitMode+0x74>)
 800bf2e:	68db      	ldr	r3, [r3, #12]
 800bf30:	4a15      	ldr	r2, [pc, #84]	@ (800bf88 <RTC_EnterInitMode+0x74>)
 800bf32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf36:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800bf38:	f7f6 fcb4 	bl	80028a4 <HAL_GetTick>
 800bf3c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800bf3e:	e013      	b.n	800bf68 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800bf40:	f7f6 fcb0 	bl	80028a4 <HAL_GetTick>
 800bf44:	4602      	mov	r2, r0
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	1ad3      	subs	r3, r2, r3
 800bf4a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bf4e:	d90b      	bls.n	800bf68 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800bf50:	4b0d      	ldr	r3, [pc, #52]	@ (800bf88 <RTC_EnterInitMode+0x74>)
 800bf52:	68db      	ldr	r3, [r3, #12]
 800bf54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d10f      	bne.n	800bf7c <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800bf5c:	2303      	movs	r3, #3
 800bf5e:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2203      	movs	r2, #3
 800bf64:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800bf68:	4b07      	ldr	r3, [pc, #28]	@ (800bf88 <RTC_EnterInitMode+0x74>)
 800bf6a:	68db      	ldr	r3, [r3, #12]
 800bf6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d104      	bne.n	800bf7e <RTC_EnterInitMode+0x6a>
 800bf74:	7bfb      	ldrb	r3, [r7, #15]
 800bf76:	2b03      	cmp	r3, #3
 800bf78:	d1e2      	bne.n	800bf40 <RTC_EnterInitMode+0x2c>
 800bf7a:	e000      	b.n	800bf7e <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800bf7c:	bf00      	nop
        }
      }
    }
  }

  return status;
 800bf7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	3710      	adds	r7, #16
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}
 800bf88:	44007800 	.word	0x44007800

0800bf8c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b084      	sub	sp, #16
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bf94:	2300      	movs	r3, #0
 800bf96:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800bf98:	4b1a      	ldr	r3, [pc, #104]	@ (800c004 <RTC_ExitInitMode+0x78>)
 800bf9a:	68db      	ldr	r3, [r3, #12]
 800bf9c:	4a19      	ldr	r2, [pc, #100]	@ (800c004 <RTC_ExitInitMode+0x78>)
 800bf9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bfa2:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800bfa4:	4b17      	ldr	r3, [pc, #92]	@ (800c004 <RTC_ExitInitMode+0x78>)
 800bfa6:	699b      	ldr	r3, [r3, #24]
 800bfa8:	f003 0320 	and.w	r3, r3, #32
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d10c      	bne.n	800bfca <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bfb0:	6878      	ldr	r0, [r7, #4]
 800bfb2:	f7ff ff7d 	bl	800beb0 <HAL_RTC_WaitForSynchro>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d01e      	beq.n	800bffa <RTC_ExitInitMode+0x6e>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2203      	movs	r2, #3
 800bfc0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800bfc4:	2303      	movs	r3, #3
 800bfc6:	73fb      	strb	r3, [r7, #15]
 800bfc8:	e017      	b.n	800bffa <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800bfca:	4b0e      	ldr	r3, [pc, #56]	@ (800c004 <RTC_ExitInitMode+0x78>)
 800bfcc:	699b      	ldr	r3, [r3, #24]
 800bfce:	4a0d      	ldr	r2, [pc, #52]	@ (800c004 <RTC_ExitInitMode+0x78>)
 800bfd0:	f023 0320 	bic.w	r3, r3, #32
 800bfd4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f7ff ff6a 	bl	800beb0 <HAL_RTC_WaitForSynchro>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d005      	beq.n	800bfee <RTC_ExitInitMode+0x62>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2203      	movs	r2, #3
 800bfe6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800bfea:	2303      	movs	r3, #3
 800bfec:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800bfee:	4b05      	ldr	r3, [pc, #20]	@ (800c004 <RTC_ExitInitMode+0x78>)
 800bff0:	699b      	ldr	r3, [r3, #24]
 800bff2:	4a04      	ldr	r2, [pc, #16]	@ (800c004 <RTC_ExitInitMode+0x78>)
 800bff4:	f043 0320 	orr.w	r3, r3, #32
 800bff8:	6193      	str	r3, [r2, #24]
  }
  return status;
 800bffa:	7bfb      	ldrb	r3, [r7, #15]
}
 800bffc:	4618      	mov	r0, r3
 800bffe:	3710      	adds	r7, #16
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}
 800c004:	44007800 	.word	0x44007800

0800c008 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c008:	b480      	push	{r7}
 800c00a:	b085      	sub	sp, #20
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	4603      	mov	r3, r0
 800c010:	71fb      	strb	r3, [r7, #7]
  uint32_t bcd_high = 0U;
 800c012:	2300      	movs	r3, #0
 800c014:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_value = Value;
 800c016:	79fb      	ldrb	r3, [r7, #7]
 800c018:	72fb      	strb	r3, [r7, #11]

  while (tmp_value >= 10U)
 800c01a:	e005      	b.n	800c028 <RTC_ByteToBcd2+0x20>
  {
    bcd_high++;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	3301      	adds	r3, #1
 800c020:	60fb      	str	r3, [r7, #12]
    tmp_value -= 10U;
 800c022:	7afb      	ldrb	r3, [r7, #11]
 800c024:	3b0a      	subs	r3, #10
 800c026:	72fb      	strb	r3, [r7, #11]
  while (tmp_value >= 10U)
 800c028:	7afb      	ldrb	r3, [r7, #11]
 800c02a:	2b09      	cmp	r3, #9
 800c02c:	d8f6      	bhi.n	800c01c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcd_high << 4U) | tmp_value);
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	b2db      	uxtb	r3, r3
 800c032:	011b      	lsls	r3, r3, #4
 800c034:	b2da      	uxtb	r2, r3
 800c036:	7afb      	ldrb	r3, [r7, #11]
 800c038:	4313      	orrs	r3, r2
 800c03a:	b2db      	uxtb	r3, r3
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3714      	adds	r7, #20
 800c040:	46bd      	mov	sp, r7
 800c042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c046:	4770      	bx	lr

0800c048 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(const RTC_HandleTypeDef *hrtc,
                                             const RTC_PrivilegeStateTypeDef *privilegeState)
{
 800c048:	b480      	push	{r7}
 800c04a:	b083      	sub	sp, #12
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
 800c050:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	681a      	ldr	r2, [r3, #0]
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	685b      	ldr	r3, [r3, #4]
 800c05a:	4910      	ldr	r1, [pc, #64]	@ (800c09c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800c05c:	4313      	orrs	r3, r2
 800c05e:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	689a      	ldr	r2, [r3, #8]
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	68db      	ldr	r3, [r3, #12]
 800c068:	431a      	orrs	r2, r3
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	699b      	ldr	r3, [r3, #24]
 800c06e:	490c      	ldr	r1, [pc, #48]	@ (800c0a0 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800c070:	4313      	orrs	r3, r2
 800c072:	624b      	str	r3, [r1, #36]	@ 0x24
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
#if defined(TAMP_SECCFGR_BKPWSEC)
  MODIFY_REG(TAMP->SECCFGR,
 800c074:	4b0a      	ldr	r3, [pc, #40]	@ (800c0a0 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800c076:	6a1b      	ldr	r3, [r3, #32]
 800c078:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	6919      	ldr	r1, [r3, #16]
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	695b      	ldr	r3, [r3, #20]
 800c084:	041b      	lsls	r3, r3, #16
 800c086:	430b      	orrs	r3, r1
 800c088:	4905      	ldr	r1, [pc, #20]	@ (800c0a0 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800c08a:	4313      	orrs	r3, r2
 800c08c:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));
#endif /* TAMP_SECCFGR_BKPWSEC */

  return HAL_OK;
 800c08e:	2300      	movs	r3, #0
}
 800c090:	4618      	mov	r0, r3
 800c092:	370c      	adds	r7, #12
 800c094:	46bd      	mov	sp, r7
 800c096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09a:	4770      	bx	lr
 800c09c:	44007800 	.word	0x44007800
 800c0a0:	44007c00 	.word	0x44007c00

0800c0a4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b084      	sub	sp, #16
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d101      	bne.n	800c0b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	e162      	b.n	800c37c <HAL_SPI_Init+0x2d8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	4a70      	ldr	r2, [pc, #448]	@ (800c27c <HAL_SPI_Init+0x1d8>)
 800c0bc:	4293      	cmp	r3, r2
 800c0be:	d018      	beq.n	800c0f2 <HAL_SPI_Init+0x4e>
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	4a6e      	ldr	r2, [pc, #440]	@ (800c280 <HAL_SPI_Init+0x1dc>)
 800c0c6:	4293      	cmp	r3, r2
 800c0c8:	d013      	beq.n	800c0f2 <HAL_SPI_Init+0x4e>
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	4a6d      	ldr	r2, [pc, #436]	@ (800c284 <HAL_SPI_Init+0x1e0>)
 800c0d0:	4293      	cmp	r3, r2
 800c0d2:	d00e      	beq.n	800c0f2 <HAL_SPI_Init+0x4e>
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	4a6b      	ldr	r2, [pc, #428]	@ (800c288 <HAL_SPI_Init+0x1e4>)
 800c0da:	4293      	cmp	r3, r2
 800c0dc:	d009      	beq.n	800c0f2 <HAL_SPI_Init+0x4e>
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	4a6a      	ldr	r2, [pc, #424]	@ (800c28c <HAL_SPI_Init+0x1e8>)
 800c0e4:	4293      	cmp	r3, r2
 800c0e6:	d004      	beq.n	800c0f2 <HAL_SPI_Init+0x4e>
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	4a68      	ldr	r2, [pc, #416]	@ (800c290 <HAL_SPI_Init+0x1ec>)
 800c0ee:	4293      	cmp	r3, r2
 800c0f0:	e000      	b.n	800c0f4 <HAL_SPI_Init+0x50>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800c0f2:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	4a5f      	ldr	r2, [pc, #380]	@ (800c27c <HAL_SPI_Init+0x1d8>)
 800c100:	4293      	cmp	r3, r2
 800c102:	d018      	beq.n	800c136 <HAL_SPI_Init+0x92>
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	4a5d      	ldr	r2, [pc, #372]	@ (800c280 <HAL_SPI_Init+0x1dc>)
 800c10a:	4293      	cmp	r3, r2
 800c10c:	d013      	beq.n	800c136 <HAL_SPI_Init+0x92>
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	4a5c      	ldr	r2, [pc, #368]	@ (800c284 <HAL_SPI_Init+0x1e0>)
 800c114:	4293      	cmp	r3, r2
 800c116:	d00e      	beq.n	800c136 <HAL_SPI_Init+0x92>
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	4a5a      	ldr	r2, [pc, #360]	@ (800c288 <HAL_SPI_Init+0x1e4>)
 800c11e:	4293      	cmp	r3, r2
 800c120:	d009      	beq.n	800c136 <HAL_SPI_Init+0x92>
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	4a59      	ldr	r2, [pc, #356]	@ (800c28c <HAL_SPI_Init+0x1e8>)
 800c128:	4293      	cmp	r3, r2
 800c12a:	d004      	beq.n	800c136 <HAL_SPI_Init+0x92>
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	4a57      	ldr	r2, [pc, #348]	@ (800c290 <HAL_SPI_Init+0x1ec>)
 800c132:	4293      	cmp	r3, r2
 800c134:	d105      	bne.n	800c142 <HAL_SPI_Init+0x9e>
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	68db      	ldr	r3, [r3, #12]
 800c13a:	2b0f      	cmp	r3, #15
 800c13c:	d901      	bls.n	800c142 <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 800c13e:	2301      	movs	r3, #1
 800c140:	e11c      	b.n	800c37c <HAL_SPI_Init+0x2d8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f000 fee2 	bl	800cf0c <SPI_GetPacketSize>
 800c148:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	4a4b      	ldr	r2, [pc, #300]	@ (800c27c <HAL_SPI_Init+0x1d8>)
 800c150:	4293      	cmp	r3, r2
 800c152:	d018      	beq.n	800c186 <HAL_SPI_Init+0xe2>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	4a49      	ldr	r2, [pc, #292]	@ (800c280 <HAL_SPI_Init+0x1dc>)
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d013      	beq.n	800c186 <HAL_SPI_Init+0xe2>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	4a48      	ldr	r2, [pc, #288]	@ (800c284 <HAL_SPI_Init+0x1e0>)
 800c164:	4293      	cmp	r3, r2
 800c166:	d00e      	beq.n	800c186 <HAL_SPI_Init+0xe2>
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	4a46      	ldr	r2, [pc, #280]	@ (800c288 <HAL_SPI_Init+0x1e4>)
 800c16e:	4293      	cmp	r3, r2
 800c170:	d009      	beq.n	800c186 <HAL_SPI_Init+0xe2>
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	4a45      	ldr	r2, [pc, #276]	@ (800c28c <HAL_SPI_Init+0x1e8>)
 800c178:	4293      	cmp	r3, r2
 800c17a:	d004      	beq.n	800c186 <HAL_SPI_Init+0xe2>
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	4a43      	ldr	r2, [pc, #268]	@ (800c290 <HAL_SPI_Init+0x1ec>)
 800c182:	4293      	cmp	r3, r2
 800c184:	d102      	bne.n	800c18c <HAL_SPI_Init+0xe8>
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	2b08      	cmp	r3, #8
 800c18a:	d820      	bhi.n	800c1ce <HAL_SPI_Init+0x12a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c190:	4a40      	ldr	r2, [pc, #256]	@ (800c294 <HAL_SPI_Init+0x1f0>)
 800c192:	4293      	cmp	r3, r2
 800c194:	d018      	beq.n	800c1c8 <HAL_SPI_Init+0x124>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	4a3f      	ldr	r2, [pc, #252]	@ (800c298 <HAL_SPI_Init+0x1f4>)
 800c19c:	4293      	cmp	r3, r2
 800c19e:	d013      	beq.n	800c1c8 <HAL_SPI_Init+0x124>
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	4a3d      	ldr	r2, [pc, #244]	@ (800c29c <HAL_SPI_Init+0x1f8>)
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	d00e      	beq.n	800c1c8 <HAL_SPI_Init+0x124>
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	4a3c      	ldr	r2, [pc, #240]	@ (800c2a0 <HAL_SPI_Init+0x1fc>)
 800c1b0:	4293      	cmp	r3, r2
 800c1b2:	d009      	beq.n	800c1c8 <HAL_SPI_Init+0x124>
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	4a3a      	ldr	r2, [pc, #232]	@ (800c2a4 <HAL_SPI_Init+0x200>)
 800c1ba:	4293      	cmp	r3, r2
 800c1bc:	d004      	beq.n	800c1c8 <HAL_SPI_Init+0x124>
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	4a39      	ldr	r2, [pc, #228]	@ (800c2a8 <HAL_SPI_Init+0x204>)
 800c1c4:	4293      	cmp	r3, r2
 800c1c6:	d104      	bne.n	800c1d2 <HAL_SPI_Init+0x12e>
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	2b10      	cmp	r3, #16
 800c1cc:	d901      	bls.n	800c1d2 <HAL_SPI_Init+0x12e>
  {
    return HAL_ERROR;
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	e0d4      	b.n	800c37c <HAL_SPI_Init+0x2d8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800c1d8:	b2db      	uxtb	r3, r3
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d106      	bne.n	800c1ec <HAL_SPI_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c1e6:	6878      	ldr	r0, [r7, #4]
 800c1e8:	f7f5 fc88 	bl	8001afc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2202      	movs	r2, #2
 800c1f0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	681a      	ldr	r2, [r3, #0]
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	f022 0201 	bic.w	r2, r2, #1
 800c202:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	689b      	ldr	r3, [r3, #8]
 800c20a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800c20e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	699b      	ldr	r3, [r3, #24]
 800c214:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c218:	d119      	bne.n	800c24e <HAL_SPI_Init+0x1aa>
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	685b      	ldr	r3, [r3, #4]
 800c21e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c222:	d103      	bne.n	800c22c <HAL_SPI_Init+0x188>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d008      	beq.n	800c23e <HAL_SPI_Init+0x19a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c230:	2b00      	cmp	r3, #0
 800c232:	d10c      	bne.n	800c24e <HAL_SPI_Init+0x1aa>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c238:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c23c:	d107      	bne.n	800c24e <HAL_SPI_Init+0x1aa>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	681a      	ldr	r2, [r3, #0]
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c24c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	685b      	ldr	r3, [r3, #4]
 800c252:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c256:	2b00      	cmp	r3, #0
 800c258:	d028      	beq.n	800c2ac <HAL_SPI_Init+0x208>
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	68db      	ldr	r3, [r3, #12]
 800c25e:	2b06      	cmp	r3, #6
 800c260:	d924      	bls.n	800c2ac <HAL_SPI_Init+0x208>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	430a      	orrs	r2, r1
 800c276:	601a      	str	r2, [r3, #0]
 800c278:	e020      	b.n	800c2bc <HAL_SPI_Init+0x218>
 800c27a:	bf00      	nop
 800c27c:	40014c00 	.word	0x40014c00
 800c280:	50014c00 	.word	0x50014c00
 800c284:	44002000 	.word	0x44002000
 800c288:	54002000 	.word	0x54002000
 800c28c:	40015000 	.word	0x40015000
 800c290:	50015000 	.word	0x50015000
 800c294:	40013000 	.word	0x40013000
 800c298:	50013000 	.word	0x50013000
 800c29c:	40003800 	.word	0x40003800
 800c2a0:	50003800 	.word	0x50003800
 800c2a4:	40003c00 	.word	0x40003c00
 800c2a8:	50003c00 	.word	0x50003c00
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	681a      	ldr	r2, [r3, #0]
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c2ba:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	69da      	ldr	r2, [r3, #28]
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2c4:	431a      	orrs	r2, r3
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	431a      	orrs	r2, r3
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2ce:	ea42 0103 	orr.w	r1, r2, r3
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	68da      	ldr	r2, [r3, #12]
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	430a      	orrs	r2, r1
 800c2dc:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2e6:	431a      	orrs	r2, r3
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2ec:	431a      	orrs	r2, r3
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	699b      	ldr	r3, [r3, #24]
 800c2f2:	431a      	orrs	r2, r3
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	691b      	ldr	r3, [r3, #16]
 800c2f8:	431a      	orrs	r2, r3
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	695b      	ldr	r3, [r3, #20]
 800c2fe:	431a      	orrs	r2, r3
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6a1b      	ldr	r3, [r3, #32]
 800c304:	431a      	orrs	r2, r3
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	685b      	ldr	r3, [r3, #4]
 800c30a:	431a      	orrs	r2, r3
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c310:	431a      	orrs	r2, r3
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	689b      	ldr	r3, [r3, #8]
 800c316:	431a      	orrs	r2, r3
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c31c:	431a      	orrs	r2, r3
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c322:	431a      	orrs	r2, r3
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c328:	ea42 0103 	orr.w	r1, r2, r3
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	430a      	orrs	r2, r1
 800c336:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f022 0201 	bic.w	r2, r2, #1
 800c346:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	685b      	ldr	r3, [r3, #4]
 800c34c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c350:	2b00      	cmp	r3, #0
 800c352:	d00a      	beq.n	800c36a <HAL_SPI_Init+0x2c6>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	68db      	ldr	r3, [r3, #12]
 800c35a:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	430a      	orrs	r2, r1
 800c368:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2200      	movs	r2, #0
 800c36e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2201      	movs	r2, #1
 800c376:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800c37a:	2300      	movs	r3, #0
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	3710      	adds	r7, #16
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}

0800c384 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b088      	sub	sp, #32
 800c388:	af02      	add	r7, sp, #8
 800c38a:	60f8      	str	r0, [r7, #12]
 800c38c:	60b9      	str	r1, [r7, #8]
 800c38e:	603b      	str	r3, [r7, #0]
 800c390:	4613      	mov	r3, r2
 800c392:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	3320      	adds	r3, #32
 800c39a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	4a92      	ldr	r2, [pc, #584]	@ (800c5ec <HAL_SPI_Transmit+0x268>)
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	d012      	beq.n	800c3cc <HAL_SPI_Transmit+0x48>
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	4a91      	ldr	r2, [pc, #580]	@ (800c5f0 <HAL_SPI_Transmit+0x26c>)
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d00d      	beq.n	800c3cc <HAL_SPI_Transmit+0x48>
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	4a8f      	ldr	r2, [pc, #572]	@ (800c5f4 <HAL_SPI_Transmit+0x270>)
 800c3b6:	4293      	cmp	r3, r2
 800c3b8:	d008      	beq.n	800c3cc <HAL_SPI_Transmit+0x48>
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	4a8e      	ldr	r2, [pc, #568]	@ (800c5f8 <HAL_SPI_Transmit+0x274>)
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	d003      	beq.n	800c3cc <HAL_SPI_Transmit+0x48>
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	4a8c      	ldr	r2, [pc, #560]	@ (800c5fc <HAL_SPI_Transmit+0x278>)
 800c3ca:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c3cc:	f7f6 fa6a 	bl	80028a4 <HAL_GetTick>
 800c3d0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800c3d8:	b2db      	uxtb	r3, r3
 800c3da:	2b01      	cmp	r3, #1
 800c3dc:	d001      	beq.n	800c3e2 <HAL_SPI_Transmit+0x5e>
  {
    return HAL_BUSY;
 800c3de:	2302      	movs	r3, #2
 800c3e0:	e204      	b.n	800c7ec <HAL_SPI_Transmit+0x468>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c3e2:	68bb      	ldr	r3, [r7, #8]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d002      	beq.n	800c3ee <HAL_SPI_Transmit+0x6a>
 800c3e8:	88fb      	ldrh	r3, [r7, #6]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d101      	bne.n	800c3f2 <HAL_SPI_Transmit+0x6e>
  {
    return HAL_ERROR;
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	e1fc      	b.n	800c7ec <HAL_SPI_Transmit+0x468>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800c3f8:	2b01      	cmp	r3, #1
 800c3fa:	d101      	bne.n	800c400 <HAL_SPI_Transmit+0x7c>
 800c3fc:	2302      	movs	r3, #2
 800c3fe:	e1f5      	b.n	800c7ec <HAL_SPI_Transmit+0x468>
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	2201      	movs	r2, #1
 800c404:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	2203      	movs	r2, #3
 800c40c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	2200      	movs	r2, #0
 800c414:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	68ba      	ldr	r2, [r7, #8]
 800c41c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	88fa      	ldrh	r2, [r7, #6]
 800c422:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	88fa      	ldrh	r2, [r7, #6]
 800c42a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	2200      	movs	r2, #0
 800c432:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	2200      	movs	r2, #0
 800c438:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	2200      	movs	r2, #0
 800c440:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	2200      	movs	r2, #0
 800c448:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	2200      	movs	r2, #0
 800c44e:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	689b      	ldr	r3, [r3, #8]
 800c454:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800c458:	d108      	bne.n	800c46c <HAL_SPI_Transmit+0xe8>
  {
    SPI_1LINE_TX(hspi);
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	681a      	ldr	r2, [r3, #0]
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c468:	601a      	str	r2, [r3, #0]
 800c46a:	e009      	b.n	800c480 <HAL_SPI_Transmit+0xfc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	68db      	ldr	r3, [r3, #12]
 800c472:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800c47e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	685b      	ldr	r3, [r3, #4]
 800c486:	0c1b      	lsrs	r3, r3, #16
 800c488:	041b      	lsls	r3, r3, #16
 800c48a:	88f9      	ldrh	r1, [r7, #6]
 800c48c:	68fa      	ldr	r2, [r7, #12]
 800c48e:	6812      	ldr	r2, [r2, #0]
 800c490:	430b      	orrs	r3, r1
 800c492:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	681a      	ldr	r2, [r3, #0]
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	f042 0201 	orr.w	r2, r2, #1
 800c4a2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	685b      	ldr	r3, [r3, #4]
 800c4a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c4ac:	d107      	bne.n	800c4be <HAL_SPI_Transmit+0x13a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	681a      	ldr	r2, [r3, #0]
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c4bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	68db      	ldr	r3, [r3, #12]
 800c4c2:	2b0f      	cmp	r3, #15
 800c4c4:	d965      	bls.n	800c592 <HAL_SPI_Transmit+0x20e>
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	4a4d      	ldr	r2, [pc, #308]	@ (800c600 <HAL_SPI_Transmit+0x27c>)
 800c4cc:	4293      	cmp	r3, r2
 800c4ce:	d059      	beq.n	800c584 <HAL_SPI_Transmit+0x200>
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	4a4b      	ldr	r2, [pc, #300]	@ (800c604 <HAL_SPI_Transmit+0x280>)
 800c4d6:	4293      	cmp	r3, r2
 800c4d8:	d054      	beq.n	800c584 <HAL_SPI_Transmit+0x200>
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	4a4a      	ldr	r2, [pc, #296]	@ (800c608 <HAL_SPI_Transmit+0x284>)
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	d04f      	beq.n	800c584 <HAL_SPI_Transmit+0x200>
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	4a48      	ldr	r2, [pc, #288]	@ (800c60c <HAL_SPI_Transmit+0x288>)
 800c4ea:	4293      	cmp	r3, r2
 800c4ec:	d04a      	beq.n	800c584 <HAL_SPI_Transmit+0x200>
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	4a47      	ldr	r2, [pc, #284]	@ (800c610 <HAL_SPI_Transmit+0x28c>)
 800c4f4:	4293      	cmp	r3, r2
 800c4f6:	d045      	beq.n	800c584 <HAL_SPI_Transmit+0x200>
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	4a45      	ldr	r2, [pc, #276]	@ (800c614 <HAL_SPI_Transmit+0x290>)
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d147      	bne.n	800c592 <HAL_SPI_Transmit+0x20e>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c502:	e03f      	b.n	800c584 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	695b      	ldr	r3, [r3, #20]
 800c50a:	f003 0302 	and.w	r3, r3, #2
 800c50e:	2b02      	cmp	r3, #2
 800c510:	d114      	bne.n	800c53c <HAL_SPI_Transmit+0x1b8>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	6812      	ldr	r2, [r2, #0]
 800c51c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c522:	1d1a      	adds	r2, r3, #4
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c52e:	b29b      	uxth	r3, r3
 800c530:	3b01      	subs	r3, #1
 800c532:	b29a      	uxth	r2, r3
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c53a:	e023      	b.n	800c584 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c53c:	f7f6 f9b2 	bl	80028a4 <HAL_GetTick>
 800c540:	4602      	mov	r2, r0
 800c542:	693b      	ldr	r3, [r7, #16]
 800c544:	1ad3      	subs	r3, r2, r3
 800c546:	683a      	ldr	r2, [r7, #0]
 800c548:	429a      	cmp	r2, r3
 800c54a:	d803      	bhi.n	800c554 <HAL_SPI_Transmit+0x1d0>
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c552:	d102      	bne.n	800c55a <HAL_SPI_Transmit+0x1d6>
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d114      	bne.n	800c584 <HAL_SPI_Transmit+0x200>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c55a:	68f8      	ldr	r0, [r7, #12]
 800c55c:	f000 fc08 	bl	800cd70 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c566:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	2201      	movs	r2, #1
 800c574:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	2200      	movs	r2, #0
 800c57c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800c580:	2303      	movs	r3, #3
 800c582:	e133      	b.n	800c7ec <HAL_SPI_Transmit+0x468>
    while (hspi->TxXferCount > 0UL)
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c58a:	b29b      	uxth	r3, r3
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d1b9      	bne.n	800c504 <HAL_SPI_Transmit+0x180>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800c590:	e106      	b.n	800c7a0 <HAL_SPI_Transmit+0x41c>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	68db      	ldr	r3, [r3, #12]
 800c596:	2b07      	cmp	r3, #7
 800c598:	f240 80fb 	bls.w	800c792 <HAL_SPI_Transmit+0x40e>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c59c:	e074      	b.n	800c688 <HAL_SPI_Transmit+0x304>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	695b      	ldr	r3, [r3, #20]
 800c5a4:	f003 0302 	and.w	r3, r3, #2
 800c5a8:	2b02      	cmp	r3, #2
 800c5aa:	d149      	bne.n	800c640 <HAL_SPI_Transmit+0x2bc>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c5b2:	b29b      	uxth	r3, r3
 800c5b4:	2b01      	cmp	r3, #1
 800c5b6:	d92f      	bls.n	800c618 <HAL_SPI_Transmit+0x294>
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d02b      	beq.n	800c618 <HAL_SPI_Transmit+0x294>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	6812      	ldr	r2, [r2, #0]
 800c5ca:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c5d0:	1d1a      	adds	r2, r3, #4
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c5dc:	b29b      	uxth	r3, r3
 800c5de:	3b02      	subs	r3, #2
 800c5e0:	b29a      	uxth	r2, r3
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c5e8:	e04e      	b.n	800c688 <HAL_SPI_Transmit+0x304>
 800c5ea:	bf00      	nop
 800c5ec:	40014c00 	.word	0x40014c00
 800c5f0:	50014c00 	.word	0x50014c00
 800c5f4:	44002000 	.word	0x44002000
 800c5f8:	54002000 	.word	0x54002000
 800c5fc:	40015000 	.word	0x40015000
 800c600:	40013000 	.word	0x40013000
 800c604:	50013000 	.word	0x50013000
 800c608:	40003800 	.word	0x40003800
 800c60c:	50003800 	.word	0x50003800
 800c610:	40003c00 	.word	0x40003c00
 800c614:	50003c00 	.word	0x50003c00
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c61c:	881a      	ldrh	r2, [r3, #0]
 800c61e:	697b      	ldr	r3, [r7, #20]
 800c620:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c626:	1c9a      	adds	r2, r3, #2
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c632:	b29b      	uxth	r3, r3
 800c634:	3b01      	subs	r3, #1
 800c636:	b29a      	uxth	r2, r3
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c63e:	e023      	b.n	800c688 <HAL_SPI_Transmit+0x304>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c640:	f7f6 f930 	bl	80028a4 <HAL_GetTick>
 800c644:	4602      	mov	r2, r0
 800c646:	693b      	ldr	r3, [r7, #16]
 800c648:	1ad3      	subs	r3, r2, r3
 800c64a:	683a      	ldr	r2, [r7, #0]
 800c64c:	429a      	cmp	r2, r3
 800c64e:	d803      	bhi.n	800c658 <HAL_SPI_Transmit+0x2d4>
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c656:	d102      	bne.n	800c65e <HAL_SPI_Transmit+0x2da>
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d114      	bne.n	800c688 <HAL_SPI_Transmit+0x304>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c65e:	68f8      	ldr	r0, [r7, #12]
 800c660:	f000 fb86 	bl	800cd70 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c66a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	2201      	movs	r2, #1
 800c678:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	2200      	movs	r2, #0
 800c680:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800c684:	2303      	movs	r3, #3
 800c686:	e0b1      	b.n	800c7ec <HAL_SPI_Transmit+0x468>
    while (hspi->TxXferCount > 0UL)
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c68e:	b29b      	uxth	r3, r3
 800c690:	2b00      	cmp	r3, #0
 800c692:	d184      	bne.n	800c59e <HAL_SPI_Transmit+0x21a>
 800c694:	e084      	b.n	800c7a0 <HAL_SPI_Transmit+0x41c>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	695b      	ldr	r3, [r3, #20]
 800c69c:	f003 0302 	and.w	r3, r3, #2
 800c6a0:	2b02      	cmp	r3, #2
 800c6a2:	d152      	bne.n	800c74a <HAL_SPI_Transmit+0x3c6>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c6aa:	b29b      	uxth	r3, r3
 800c6ac:	2b03      	cmp	r3, #3
 800c6ae:	d918      	bls.n	800c6e2 <HAL_SPI_Transmit+0x35e>
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6b4:	2b40      	cmp	r3, #64	@ 0x40
 800c6b6:	d914      	bls.n	800c6e2 <HAL_SPI_Transmit+0x35e>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	6812      	ldr	r2, [r2, #0]
 800c6c2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c6c8:	1d1a      	adds	r2, r3, #4
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c6d4:	b29b      	uxth	r3, r3
 800c6d6:	3b04      	subs	r3, #4
 800c6d8:	b29a      	uxth	r2, r3
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c6e0:	e057      	b.n	800c792 <HAL_SPI_Transmit+0x40e>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c6e8:	b29b      	uxth	r3, r3
 800c6ea:	2b01      	cmp	r3, #1
 800c6ec:	d917      	bls.n	800c71e <HAL_SPI_Transmit+0x39a>
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d013      	beq.n	800c71e <HAL_SPI_Transmit+0x39a>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c6fa:	881a      	ldrh	r2, [r3, #0]
 800c6fc:	697b      	ldr	r3, [r7, #20]
 800c6fe:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c704:	1c9a      	adds	r2, r3, #2
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c710:	b29b      	uxth	r3, r3
 800c712:	3b02      	subs	r3, #2
 800c714:	b29a      	uxth	r2, r3
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c71c:	e039      	b.n	800c792 <HAL_SPI_Transmit+0x40e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	3320      	adds	r3, #32
 800c728:	7812      	ldrb	r2, [r2, #0]
 800c72a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c730:	1c5a      	adds	r2, r3, #1
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c73c:	b29b      	uxth	r3, r3
 800c73e:	3b01      	subs	r3, #1
 800c740:	b29a      	uxth	r2, r3
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c748:	e023      	b.n	800c792 <HAL_SPI_Transmit+0x40e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c74a:	f7f6 f8ab 	bl	80028a4 <HAL_GetTick>
 800c74e:	4602      	mov	r2, r0
 800c750:	693b      	ldr	r3, [r7, #16]
 800c752:	1ad3      	subs	r3, r2, r3
 800c754:	683a      	ldr	r2, [r7, #0]
 800c756:	429a      	cmp	r2, r3
 800c758:	d803      	bhi.n	800c762 <HAL_SPI_Transmit+0x3de>
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c760:	d102      	bne.n	800c768 <HAL_SPI_Transmit+0x3e4>
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d114      	bne.n	800c792 <HAL_SPI_Transmit+0x40e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c768:	68f8      	ldr	r0, [r7, #12]
 800c76a:	f000 fb01 	bl	800cd70 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c774:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	2201      	movs	r2, #1
 800c782:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	2200      	movs	r2, #0
 800c78a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800c78e:	2303      	movs	r3, #3
 800c790:	e02c      	b.n	800c7ec <HAL_SPI_Transmit+0x468>
    while (hspi->TxXferCount > 0UL)
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c798:	b29b      	uxth	r3, r3
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	f47f af7b 	bne.w	800c696 <HAL_SPI_Transmit+0x312>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800c7a0:	693b      	ldr	r3, [r7, #16]
 800c7a2:	9300      	str	r3, [sp, #0]
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	2108      	movs	r1, #8
 800c7aa:	68f8      	ldr	r0, [r7, #12]
 800c7ac:	f000 fb80 	bl	800ceb0 <SPI_WaitOnFlagUntilTimeout>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d007      	beq.n	800c7c6 <HAL_SPI_Transmit+0x442>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c7bc:	f043 0220 	orr.w	r2, r3, #32
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c7c6:	68f8      	ldr	r0, [r7, #12]
 800c7c8:	f000 fad2 	bl	800cd70 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	2201      	movs	r2, #1
 800c7d0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d001      	beq.n	800c7ea <HAL_SPI_Transmit+0x466>
  {
    return HAL_ERROR;
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	e000      	b.n	800c7ec <HAL_SPI_Transmit+0x468>
  }
  else
  {
    return HAL_OK;
 800c7ea:	2300      	movs	r3, #0
  }
}
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	3718      	adds	r7, #24
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}

0800c7f4 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b088      	sub	sp, #32
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	60f8      	str	r0, [r7, #12]
 800c7fc:	60b9      	str	r1, [r7, #8]
 800c7fe:	603b      	str	r3, [r7, #0]
 800c800:	4613      	mov	r3, r2
 800c802:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c808:	095b      	lsrs	r3, r3, #5
 800c80a:	b29b      	uxth	r3, r3
 800c80c:	3301      	adds	r3, #1
 800c80e:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	3330      	adds	r3, #48	@ 0x30
 800c816:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	4a92      	ldr	r2, [pc, #584]	@ (800ca68 <HAL_SPI_Receive+0x274>)
 800c81e:	4293      	cmp	r3, r2
 800c820:	d012      	beq.n	800c848 <HAL_SPI_Receive+0x54>
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	4a91      	ldr	r2, [pc, #580]	@ (800ca6c <HAL_SPI_Receive+0x278>)
 800c828:	4293      	cmp	r3, r2
 800c82a:	d00d      	beq.n	800c848 <HAL_SPI_Receive+0x54>
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	4a8f      	ldr	r2, [pc, #572]	@ (800ca70 <HAL_SPI_Receive+0x27c>)
 800c832:	4293      	cmp	r3, r2
 800c834:	d008      	beq.n	800c848 <HAL_SPI_Receive+0x54>
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	4a8e      	ldr	r2, [pc, #568]	@ (800ca74 <HAL_SPI_Receive+0x280>)
 800c83c:	4293      	cmp	r3, r2
 800c83e:	d003      	beq.n	800c848 <HAL_SPI_Receive+0x54>
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	4a8c      	ldr	r2, [pc, #560]	@ (800ca78 <HAL_SPI_Receive+0x284>)
 800c846:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c848:	f7f6 f82c 	bl	80028a4 <HAL_GetTick>
 800c84c:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800c854:	b2db      	uxtb	r3, r3
 800c856:	2b01      	cmp	r3, #1
 800c858:	d001      	beq.n	800c85e <HAL_SPI_Receive+0x6a>
  {
    return HAL_BUSY;
 800c85a:	2302      	movs	r3, #2
 800c85c:	e284      	b.n	800cd68 <HAL_SPI_Receive+0x574>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c85e:	68bb      	ldr	r3, [r7, #8]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d002      	beq.n	800c86a <HAL_SPI_Receive+0x76>
 800c864:	88fb      	ldrh	r3, [r7, #6]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d101      	bne.n	800c86e <HAL_SPI_Receive+0x7a>
  {
    return HAL_ERROR;
 800c86a:	2301      	movs	r3, #1
 800c86c:	e27c      	b.n	800cd68 <HAL_SPI_Receive+0x574>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800c874:	2b01      	cmp	r3, #1
 800c876:	d101      	bne.n	800c87c <HAL_SPI_Receive+0x88>
 800c878:	2302      	movs	r3, #2
 800c87a:	e275      	b.n	800cd68 <HAL_SPI_Receive+0x574>
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	2201      	movs	r2, #1
 800c880:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	2204      	movs	r2, #4
 800c888:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	2200      	movs	r2, #0
 800c890:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	68ba      	ldr	r2, [r7, #8]
 800c898:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	88fa      	ldrh	r2, [r7, #6]
 800c89e:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	88fa      	ldrh	r2, [r7, #6]
 800c8a6:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	689b      	ldr	r3, [r3, #8]
 800c8d0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800c8d4:	d108      	bne.n	800c8e8 <HAL_SPI_Receive+0xf4>
  {
    SPI_1LINE_RX(hspi);
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	681a      	ldr	r2, [r3, #0]
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c8e4:	601a      	str	r2, [r3, #0]
 800c8e6:	e009      	b.n	800c8fc <HAL_SPI_Receive+0x108>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	68db      	ldr	r3, [r3, #12]
 800c8ee:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800c8fa:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	685b      	ldr	r3, [r3, #4]
 800c902:	0c1b      	lsrs	r3, r3, #16
 800c904:	041b      	lsls	r3, r3, #16
 800c906:	88f9      	ldrh	r1, [r7, #6]
 800c908:	68fa      	ldr	r2, [r7, #12]
 800c90a:	6812      	ldr	r2, [r2, #0]
 800c90c:	430b      	orrs	r3, r1
 800c90e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	681a      	ldr	r2, [r3, #0]
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	f042 0201 	orr.w	r2, r2, #1
 800c91e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	685b      	ldr	r3, [r3, #4]
 800c924:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c928:	d107      	bne.n	800c93a <HAL_SPI_Receive+0x146>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	681a      	ldr	r2, [r3, #0]
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c938:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	68db      	ldr	r3, [r3, #12]
 800c93e:	2b0f      	cmp	r3, #15
 800c940:	f240 808b 	bls.w	800ca5a <HAL_SPI_Receive+0x266>
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	4a4c      	ldr	r2, [pc, #304]	@ (800ca7c <HAL_SPI_Receive+0x288>)
 800c94a:	4293      	cmp	r3, r2
 800c94c:	d07e      	beq.n	800ca4c <HAL_SPI_Receive+0x258>
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	4a4b      	ldr	r2, [pc, #300]	@ (800ca80 <HAL_SPI_Receive+0x28c>)
 800c954:	4293      	cmp	r3, r2
 800c956:	d079      	beq.n	800ca4c <HAL_SPI_Receive+0x258>
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	4a49      	ldr	r2, [pc, #292]	@ (800ca84 <HAL_SPI_Receive+0x290>)
 800c95e:	4293      	cmp	r3, r2
 800c960:	d074      	beq.n	800ca4c <HAL_SPI_Receive+0x258>
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	4a48      	ldr	r2, [pc, #288]	@ (800ca88 <HAL_SPI_Receive+0x294>)
 800c968:	4293      	cmp	r3, r2
 800c96a:	d06f      	beq.n	800ca4c <HAL_SPI_Receive+0x258>
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	4a46      	ldr	r2, [pc, #280]	@ (800ca8c <HAL_SPI_Receive+0x298>)
 800c972:	4293      	cmp	r3, r2
 800c974:	d06a      	beq.n	800ca4c <HAL_SPI_Receive+0x258>
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	4a45      	ldr	r2, [pc, #276]	@ (800ca90 <HAL_SPI_Receive+0x29c>)
 800c97c:	4293      	cmp	r3, r2
 800c97e:	d16c      	bne.n	800ca5a <HAL_SPI_Receive+0x266>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c980:	e064      	b.n	800ca4c <HAL_SPI_Receive+0x258>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	695b      	ldr	r3, [r3, #20]
 800c988:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	695b      	ldr	r3, [r3, #20]
 800c990:	f003 0301 	and.w	r3, r3, #1
 800c994:	2b01      	cmp	r3, #1
 800c996:	d114      	bne.n	800c9c2 <HAL_SPI_Receive+0x1ce>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	681a      	ldr	r2, [r3, #0]
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c9a0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c9a2:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c9a8:	1d1a      	adds	r2, r3, #4
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800c9b4:	b29b      	uxth	r3, r3
 800c9b6:	3b01      	subs	r3, #1
 800c9b8:	b29a      	uxth	r2, r3
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800c9c0:	e044      	b.n	800ca4c <HAL_SPI_Receive+0x258>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800c9c8:	b29b      	uxth	r3, r3
 800c9ca:	8bfa      	ldrh	r2, [r7, #30]
 800c9cc:	429a      	cmp	r2, r3
 800c9ce:	d919      	bls.n	800ca04 <HAL_SPI_Receive+0x210>
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d014      	beq.n	800ca04 <HAL_SPI_Receive+0x210>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681a      	ldr	r2, [r3, #0]
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c9e2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c9e4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c9ea:	1d1a      	adds	r2, r3, #4
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800c9f6:	b29b      	uxth	r3, r3
 800c9f8:	3b01      	subs	r3, #1
 800c9fa:	b29a      	uxth	r2, r3
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800ca02:	e023      	b.n	800ca4c <HAL_SPI_Receive+0x258>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ca04:	f7f5 ff4e 	bl	80028a4 <HAL_GetTick>
 800ca08:	4602      	mov	r2, r0
 800ca0a:	697b      	ldr	r3, [r7, #20]
 800ca0c:	1ad3      	subs	r3, r2, r3
 800ca0e:	683a      	ldr	r2, [r7, #0]
 800ca10:	429a      	cmp	r2, r3
 800ca12:	d803      	bhi.n	800ca1c <HAL_SPI_Receive+0x228>
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca1a:	d102      	bne.n	800ca22 <HAL_SPI_Receive+0x22e>
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d114      	bne.n	800ca4c <HAL_SPI_Receive+0x258>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ca22:	68f8      	ldr	r0, [r7, #12]
 800ca24:	f000 f9a4 	bl	800cd70 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ca2e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	2201      	movs	r2, #1
 800ca3c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	2200      	movs	r2, #0
 800ca44:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800ca48:	2303      	movs	r3, #3
 800ca4a:	e18d      	b.n	800cd68 <HAL_SPI_Receive+0x574>
    while (hspi->RxXferCount > 0UL)
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800ca52:	b29b      	uxth	r3, r3
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d194      	bne.n	800c982 <HAL_SPI_Receive+0x18e>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800ca58:	e173      	b.n	800cd42 <HAL_SPI_Receive+0x54e>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	68db      	ldr	r3, [r3, #12]
 800ca5e:	2b07      	cmp	r3, #7
 800ca60:	f240 8168 	bls.w	800cd34 <HAL_SPI_Receive+0x540>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ca64:	e0a6      	b.n	800cbb4 <HAL_SPI_Receive+0x3c0>
 800ca66:	bf00      	nop
 800ca68:	40014c00 	.word	0x40014c00
 800ca6c:	50014c00 	.word	0x50014c00
 800ca70:	44002000 	.word	0x44002000
 800ca74:	54002000 	.word	0x54002000
 800ca78:	40015000 	.word	0x40015000
 800ca7c:	40013000 	.word	0x40013000
 800ca80:	50013000 	.word	0x50013000
 800ca84:	40003800 	.word	0x40003800
 800ca88:	50003800 	.word	0x50003800
 800ca8c:	40003c00 	.word	0x40003c00
 800ca90:	50003c00 	.word	0x50003c00
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	695b      	ldr	r3, [r3, #20]
 800ca9a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	695b      	ldr	r3, [r3, #20]
 800caa2:	f003 0301 	and.w	r3, r3, #1
 800caa6:	2b01      	cmp	r3, #1
 800caa8:	d114      	bne.n	800cad4 <HAL_SPI_Receive+0x2e0>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800caae:	69ba      	ldr	r2, [r7, #24]
 800cab0:	8812      	ldrh	r2, [r2, #0]
 800cab2:	b292      	uxth	r2, r2
 800cab4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800caba:	1c9a      	adds	r2, r3, #2
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800cac6:	b29b      	uxth	r3, r3
 800cac8:	3b01      	subs	r3, #1
 800caca:	b29a      	uxth	r2, r3
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800cad2:	e06f      	b.n	800cbb4 <HAL_SPI_Receive+0x3c0>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800cada:	b29b      	uxth	r3, r3
 800cadc:	8bfa      	ldrh	r2, [r7, #30]
 800cade:	429a      	cmp	r2, r3
 800cae0:	d924      	bls.n	800cb2c <HAL_SPI_Receive+0x338>
 800cae2:	693b      	ldr	r3, [r7, #16]
 800cae4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d01f      	beq.n	800cb2c <HAL_SPI_Receive+0x338>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800caf0:	69ba      	ldr	r2, [r7, #24]
 800caf2:	8812      	ldrh	r2, [r2, #0]
 800caf4:	b292      	uxth	r2, r2
 800caf6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cafc:	1c9a      	adds	r2, r3, #2
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	66da      	str	r2, [r3, #108]	@ 0x6c
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb06:	69ba      	ldr	r2, [r7, #24]
 800cb08:	8812      	ldrh	r2, [r2, #0]
 800cb0a:	b292      	uxth	r2, r2
 800cb0c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb12:	1c9a      	adds	r2, r3, #2
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount -= (uint16_t)2UL;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800cb1e:	b29b      	uxth	r3, r3
 800cb20:	3b02      	subs	r3, #2
 800cb22:	b29a      	uxth	r2, r3
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800cb2a:	e043      	b.n	800cbb4 <HAL_SPI_Receive+0x3c0>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800cb32:	b29b      	uxth	r3, r3
 800cb34:	2b01      	cmp	r3, #1
 800cb36:	d119      	bne.n	800cb6c <HAL_SPI_Receive+0x378>
 800cb38:	693b      	ldr	r3, [r7, #16]
 800cb3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d014      	beq.n	800cb6c <HAL_SPI_Receive+0x378>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb46:	69ba      	ldr	r2, [r7, #24]
 800cb48:	8812      	ldrh	r2, [r2, #0]
 800cb4a:	b292      	uxth	r2, r2
 800cb4c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb52:	1c9a      	adds	r2, r3, #2
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800cb5e:	b29b      	uxth	r3, r3
 800cb60:	3b01      	subs	r3, #1
 800cb62:	b29a      	uxth	r2, r3
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800cb6a:	e023      	b.n	800cbb4 <HAL_SPI_Receive+0x3c0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cb6c:	f7f5 fe9a 	bl	80028a4 <HAL_GetTick>
 800cb70:	4602      	mov	r2, r0
 800cb72:	697b      	ldr	r3, [r7, #20]
 800cb74:	1ad3      	subs	r3, r2, r3
 800cb76:	683a      	ldr	r2, [r7, #0]
 800cb78:	429a      	cmp	r2, r3
 800cb7a:	d803      	bhi.n	800cb84 <HAL_SPI_Receive+0x390>
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb82:	d102      	bne.n	800cb8a <HAL_SPI_Receive+0x396>
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d114      	bne.n	800cbb4 <HAL_SPI_Receive+0x3c0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cb8a:	68f8      	ldr	r0, [r7, #12]
 800cb8c:	f000 f8f0 	bl	800cd70 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cb96:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	2201      	movs	r2, #1
 800cba4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800cbb0:	2303      	movs	r3, #3
 800cbb2:	e0d9      	b.n	800cd68 <HAL_SPI_Receive+0x574>
    while (hspi->RxXferCount > 0UL)
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800cbba:	b29b      	uxth	r3, r3
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	f47f af69 	bne.w	800ca94 <HAL_SPI_Receive+0x2a0>
 800cbc2:	e0be      	b.n	800cd42 <HAL_SPI_Receive+0x54e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	695b      	ldr	r3, [r3, #20]
 800cbca:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	695b      	ldr	r3, [r3, #20]
 800cbd2:	f003 0301 	and.w	r3, r3, #1
 800cbd6:	2b01      	cmp	r3, #1
 800cbd8:	d117      	bne.n	800cc0a <HAL_SPI_Receive+0x416>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cbe6:	7812      	ldrb	r2, [r2, #0]
 800cbe8:	b2d2      	uxtb	r2, r2
 800cbea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cbf0:	1c5a      	adds	r2, r3, #1
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800cbfc:	b29b      	uxth	r3, r3
 800cbfe:	3b01      	subs	r3, #1
 800cc00:	b29a      	uxth	r2, r3
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800cc08:	e094      	b.n	800cd34 <HAL_SPI_Receive+0x540>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800cc10:	b29b      	uxth	r3, r3
 800cc12:	8bfa      	ldrh	r2, [r7, #30]
 800cc14:	429a      	cmp	r2, r3
 800cc16:	d946      	bls.n	800cca6 <HAL_SPI_Receive+0x4b2>
 800cc18:	693b      	ldr	r3, [r7, #16]
 800cc1a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d041      	beq.n	800cca6 <HAL_SPI_Receive+0x4b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc2e:	7812      	ldrb	r2, [r2, #0]
 800cc30:	b2d2      	uxtb	r2, r2
 800cc32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc38:	1c5a      	adds	r2, r3, #1
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc4a:	7812      	ldrb	r2, [r2, #0]
 800cc4c:	b2d2      	uxtb	r2, r2
 800cc4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc54:	1c5a      	adds	r2, r3, #1
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc66:	7812      	ldrb	r2, [r2, #0]
 800cc68:	b2d2      	uxtb	r2, r2
 800cc6a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc70:	1c5a      	adds	r2, r3, #1
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc82:	7812      	ldrb	r2, [r2, #0]
 800cc84:	b2d2      	uxtb	r2, r2
 800cc86:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc8c:	1c5a      	adds	r2, r3, #1
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount -= (uint16_t)4UL;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800cc98:	b29b      	uxth	r3, r3
 800cc9a:	3b04      	subs	r3, #4
 800cc9c:	b29a      	uxth	r2, r3
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800cca4:	e046      	b.n	800cd34 <HAL_SPI_Receive+0x540>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800ccac:	b29b      	uxth	r3, r3
 800ccae:	2b03      	cmp	r3, #3
 800ccb0:	d81c      	bhi.n	800ccec <HAL_SPI_Receive+0x4f8>
 800ccb2:	693b      	ldr	r3, [r7, #16]
 800ccb4:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d017      	beq.n	800ccec <HAL_SPI_Receive+0x4f8>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ccc8:	7812      	ldrb	r2, [r2, #0]
 800ccca:	b2d2      	uxtb	r2, r2
 800cccc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ccd2:	1c5a      	adds	r2, r3, #1
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800ccde:	b29b      	uxth	r3, r3
 800cce0:	3b01      	subs	r3, #1
 800cce2:	b29a      	uxth	r2, r3
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800ccea:	e023      	b.n	800cd34 <HAL_SPI_Receive+0x540>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ccec:	f7f5 fdda 	bl	80028a4 <HAL_GetTick>
 800ccf0:	4602      	mov	r2, r0
 800ccf2:	697b      	ldr	r3, [r7, #20]
 800ccf4:	1ad3      	subs	r3, r2, r3
 800ccf6:	683a      	ldr	r2, [r7, #0]
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	d803      	bhi.n	800cd04 <HAL_SPI_Receive+0x510>
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd02:	d102      	bne.n	800cd0a <HAL_SPI_Receive+0x516>
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d114      	bne.n	800cd34 <HAL_SPI_Receive+0x540>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cd0a:	68f8      	ldr	r0, [r7, #12]
 800cd0c:	f000 f830 	bl	800cd70 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cd16:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	2201      	movs	r2, #1
 800cd24:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800cd30:	2303      	movs	r3, #3
 800cd32:	e019      	b.n	800cd68 <HAL_SPI_Receive+0x574>
    while (hspi->RxXferCount > 0UL)
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800cd3a:	b29b      	uxth	r3, r3
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	f47f af41 	bne.w	800cbc4 <HAL_SPI_Receive+0x3d0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800cd42:	68f8      	ldr	r0, [r7, #12]
 800cd44:	f000 f814 	bl	800cd70 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	2201      	movs	r2, #1
 800cd4c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	2200      	movs	r2, #0
 800cd54:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d001      	beq.n	800cd66 <HAL_SPI_Receive+0x572>
  {
    return HAL_ERROR;
 800cd62:	2301      	movs	r3, #1
 800cd64:	e000      	b.n	800cd68 <HAL_SPI_Receive+0x574>
  }
  else
  {
    return HAL_OK;
 800cd66:	2300      	movs	r3, #0
  }
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3720      	adds	r7, #32
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}

0800cd70 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800cd70:	b480      	push	{r7}
 800cd72:	b085      	sub	sp, #20
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	695b      	ldr	r3, [r3, #20]
 800cd7e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	699a      	ldr	r2, [r3, #24]
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	f042 0208 	orr.w	r2, r2, #8
 800cd8e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	699a      	ldr	r2, [r3, #24]
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	f042 0210 	orr.w	r2, r2, #16
 800cd9e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	681a      	ldr	r2, [r3, #0]
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	f022 0201 	bic.w	r2, r2, #1
 800cdae:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	691b      	ldr	r3, [r3, #16]
 800cdb6:	687a      	ldr	r2, [r7, #4]
 800cdb8:	6812      	ldr	r2, [r2, #0]
 800cdba:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 800cdbe:	f023 0303 	bic.w	r3, r3, #3
 800cdc2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	689a      	ldr	r2, [r3, #8]
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800cdd2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800cdda:	b2db      	uxtb	r3, r3
 800cddc:	2b04      	cmp	r3, #4
 800cdde:	d014      	beq.n	800ce0a <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	f003 0320 	and.w	r3, r3, #32
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d00f      	beq.n	800ce0a <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cdf0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	699a      	ldr	r2, [r3, #24]
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	f042 0220 	orr.w	r2, r2, #32
 800ce08:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800ce10:	b2db      	uxtb	r3, r3
 800ce12:	2b03      	cmp	r3, #3
 800ce14:	d014      	beq.n	800ce40 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d00f      	beq.n	800ce40 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ce26:	f043 0204 	orr.w	r2, r3, #4
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	699a      	ldr	r2, [r3, #24]
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ce3e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d00f      	beq.n	800ce6a <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ce50:	f043 0201 	orr.w	r2, r3, #1
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	699a      	ldr	r2, [r3, #24]
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ce68:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d00f      	beq.n	800ce94 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ce7a:	f043 0208 	orr.w	r2, r3, #8
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	699a      	ldr	r2, [r3, #24]
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ce92:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2200      	movs	r2, #0
 800ce98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2200      	movs	r2, #0
 800cea0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 800cea4:	bf00      	nop
 800cea6:	3714      	adds	r7, #20
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceae:	4770      	bx	lr

0800ceb0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b084      	sub	sp, #16
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	60f8      	str	r0, [r7, #12]
 800ceb8:	60b9      	str	r1, [r7, #8]
 800ceba:	603b      	str	r3, [r7, #0]
 800cebc:	4613      	mov	r3, r2
 800cebe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800cec0:	e010      	b.n	800cee4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cec2:	f7f5 fcef 	bl	80028a4 <HAL_GetTick>
 800cec6:	4602      	mov	r2, r0
 800cec8:	69bb      	ldr	r3, [r7, #24]
 800ceca:	1ad3      	subs	r3, r2, r3
 800cecc:	683a      	ldr	r2, [r7, #0]
 800cece:	429a      	cmp	r2, r3
 800ced0:	d803      	bhi.n	800ceda <SPI_WaitOnFlagUntilTimeout+0x2a>
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ced8:	d102      	bne.n	800cee0 <SPI_WaitOnFlagUntilTimeout+0x30>
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d101      	bne.n	800cee4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800cee0:	2303      	movs	r3, #3
 800cee2:	e00f      	b.n	800cf04 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	695a      	ldr	r2, [r3, #20]
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	4013      	ands	r3, r2
 800ceee:	68ba      	ldr	r2, [r7, #8]
 800cef0:	429a      	cmp	r2, r3
 800cef2:	bf0c      	ite	eq
 800cef4:	2301      	moveq	r3, #1
 800cef6:	2300      	movne	r3, #0
 800cef8:	b2db      	uxtb	r3, r3
 800cefa:	461a      	mov	r2, r3
 800cefc:	79fb      	ldrb	r3, [r7, #7]
 800cefe:	429a      	cmp	r2, r3
 800cf00:	d0df      	beq.n	800cec2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800cf02:	2300      	movs	r3, #0
}
 800cf04:	4618      	mov	r0, r3
 800cf06:	3710      	adds	r7, #16
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}

0800cf0c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800cf0c:	b480      	push	{r7}
 800cf0e:	b085      	sub	sp, #20
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf18:	095b      	lsrs	r3, r3, #5
 800cf1a:	3301      	adds	r3, #1
 800cf1c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	68db      	ldr	r3, [r3, #12]
 800cf22:	3301      	adds	r3, #1
 800cf24:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800cf26:	68bb      	ldr	r3, [r7, #8]
 800cf28:	3307      	adds	r3, #7
 800cf2a:	08db      	lsrs	r3, r3, #3
 800cf2c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800cf2e:	68bb      	ldr	r3, [r7, #8]
 800cf30:	68fa      	ldr	r2, [r7, #12]
 800cf32:	fb02 f303 	mul.w	r3, r2, r3
}
 800cf36:	4618      	mov	r0, r3
 800cf38:	3714      	adds	r7, #20
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf40:	4770      	bx	lr

0800cf42 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cf42:	b580      	push	{r7, lr}
 800cf44:	b082      	sub	sp, #8
 800cf46:	af00      	add	r7, sp, #0
 800cf48:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d101      	bne.n	800cf54 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cf50:	2301      	movs	r3, #1
 800cf52:	e042      	b.n	800cfda <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d106      	bne.n	800cf6c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2200      	movs	r2, #0
 800cf62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f7f4 feb4 	bl	8001cd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2224      	movs	r2, #36	@ 0x24
 800cf70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	681a      	ldr	r2, [r3, #0]
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	f022 0201 	bic.w	r2, r2, #1
 800cf82:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d002      	beq.n	800cf92 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800cf8c:	6878      	ldr	r0, [r7, #4]
 800cf8e:	f000 fab5 	bl	800d4fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cf92:	6878      	ldr	r0, [r7, #4]
 800cf94:	f000 f8c4 	bl	800d120 <UART_SetConfig>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	2b01      	cmp	r3, #1
 800cf9c:	d101      	bne.n	800cfa2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800cf9e:	2301      	movs	r3, #1
 800cfa0:	e01b      	b.n	800cfda <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	685a      	ldr	r2, [r3, #4]
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cfb0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	689a      	ldr	r2, [r3, #8]
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cfc0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	681a      	ldr	r2, [r3, #0]
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	f042 0201 	orr.w	r2, r2, #1
 800cfd0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	f000 fb34 	bl	800d640 <UART_CheckIdleState>
 800cfd8:	4603      	mov	r3, r0
}
 800cfda:	4618      	mov	r0, r3
 800cfdc:	3708      	adds	r7, #8
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	bd80      	pop	{r7, pc}

0800cfe2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cfe2:	b580      	push	{r7, lr}
 800cfe4:	b08a      	sub	sp, #40	@ 0x28
 800cfe6:	af02      	add	r7, sp, #8
 800cfe8:	60f8      	str	r0, [r7, #12]
 800cfea:	60b9      	str	r1, [r7, #8]
 800cfec:	603b      	str	r3, [r7, #0]
 800cfee:	4613      	mov	r3, r2
 800cff0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cff8:	2b20      	cmp	r3, #32
 800cffa:	f040 808b 	bne.w	800d114 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800cffe:	68bb      	ldr	r3, [r7, #8]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d002      	beq.n	800d00a <HAL_UART_Transmit+0x28>
 800d004:	88fb      	ldrh	r3, [r7, #6]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d101      	bne.n	800d00e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800d00a:	2301      	movs	r3, #1
 800d00c:	e083      	b.n	800d116 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	689b      	ldr	r3, [r3, #8]
 800d014:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d018:	2b80      	cmp	r3, #128	@ 0x80
 800d01a:	d107      	bne.n	800d02c <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	689a      	ldr	r2, [r3, #8]
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d02a:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	2200      	movs	r2, #0
 800d030:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	2221      	movs	r2, #33	@ 0x21
 800d038:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d03c:	f7f5 fc32 	bl	80028a4 <HAL_GetTick>
 800d040:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	88fa      	ldrh	r2, [r7, #6]
 800d046:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	88fa      	ldrh	r2, [r7, #6]
 800d04e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	689b      	ldr	r3, [r3, #8]
 800d056:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d05a:	d108      	bne.n	800d06e <HAL_UART_Transmit+0x8c>
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	691b      	ldr	r3, [r3, #16]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d104      	bne.n	800d06e <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800d064:	2300      	movs	r3, #0
 800d066:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d068:	68bb      	ldr	r3, [r7, #8]
 800d06a:	61bb      	str	r3, [r7, #24]
 800d06c:	e003      	b.n	800d076 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d072:	2300      	movs	r3, #0
 800d074:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d076:	e030      	b.n	800d0da <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	9300      	str	r3, [sp, #0]
 800d07c:	697b      	ldr	r3, [r7, #20]
 800d07e:	2200      	movs	r2, #0
 800d080:	2180      	movs	r1, #128	@ 0x80
 800d082:	68f8      	ldr	r0, [r7, #12]
 800d084:	f000 fb86 	bl	800d794 <UART_WaitOnFlagUntilTimeout>
 800d088:	4603      	mov	r3, r0
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d005      	beq.n	800d09a <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	2220      	movs	r2, #32
 800d092:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800d096:	2303      	movs	r3, #3
 800d098:	e03d      	b.n	800d116 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800d09a:	69fb      	ldr	r3, [r7, #28]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d10b      	bne.n	800d0b8 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d0a0:	69bb      	ldr	r3, [r7, #24]
 800d0a2:	881b      	ldrh	r3, [r3, #0]
 800d0a4:	461a      	mov	r2, r3
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d0ae:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800d0b0:	69bb      	ldr	r3, [r7, #24]
 800d0b2:	3302      	adds	r3, #2
 800d0b4:	61bb      	str	r3, [r7, #24]
 800d0b6:	e007      	b.n	800d0c8 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d0b8:	69fb      	ldr	r3, [r7, #28]
 800d0ba:	781a      	ldrb	r2, [r3, #0]
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800d0c2:	69fb      	ldr	r3, [r7, #28]
 800d0c4:	3301      	adds	r3, #1
 800d0c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d0ce:	b29b      	uxth	r3, r3
 800d0d0:	3b01      	subs	r3, #1
 800d0d2:	b29a      	uxth	r2, r3
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d0e0:	b29b      	uxth	r3, r3
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d1c8      	bne.n	800d078 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	9300      	str	r3, [sp, #0]
 800d0ea:	697b      	ldr	r3, [r7, #20]
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	2140      	movs	r1, #64	@ 0x40
 800d0f0:	68f8      	ldr	r0, [r7, #12]
 800d0f2:	f000 fb4f 	bl	800d794 <UART_WaitOnFlagUntilTimeout>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d005      	beq.n	800d108 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	2220      	movs	r2, #32
 800d100:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800d104:	2303      	movs	r3, #3
 800d106:	e006      	b.n	800d116 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	2220      	movs	r2, #32
 800d10c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800d110:	2300      	movs	r3, #0
 800d112:	e000      	b.n	800d116 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800d114:	2302      	movs	r3, #2
  }
}
 800d116:	4618      	mov	r0, r3
 800d118:	3720      	adds	r7, #32
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}
	...

0800d120 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d120:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d124:	b094      	sub	sp, #80	@ 0x50
 800d126:	af00      	add	r7, sp, #0
 800d128:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d12a:	2300      	movs	r3, #0
 800d12c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800d130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d132:	681a      	ldr	r2, [r3, #0]
 800d134:	4b78      	ldr	r3, [pc, #480]	@ (800d318 <UART_SetConfig+0x1f8>)
 800d136:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d13a:	689a      	ldr	r2, [r3, #8]
 800d13c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d13e:	691b      	ldr	r3, [r3, #16]
 800d140:	431a      	orrs	r2, r3
 800d142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d144:	695b      	ldr	r3, [r3, #20]
 800d146:	431a      	orrs	r2, r3
 800d148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d14a:	69db      	ldr	r3, [r3, #28]
 800d14c:	4313      	orrs	r3, r2
 800d14e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	4971      	ldr	r1, [pc, #452]	@ (800d31c <UART_SetConfig+0x1fc>)
 800d158:	4019      	ands	r1, r3
 800d15a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d15c:	681a      	ldr	r2, [r3, #0]
 800d15e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d160:	430b      	orrs	r3, r1
 800d162:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	685b      	ldr	r3, [r3, #4]
 800d16a:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800d16e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d170:	68d9      	ldr	r1, [r3, #12]
 800d172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d174:	681a      	ldr	r2, [r3, #0]
 800d176:	ea40 0301 	orr.w	r3, r0, r1
 800d17a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d17c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d17e:	699b      	ldr	r3, [r3, #24]
 800d180:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d184:	681a      	ldr	r2, [r3, #0]
 800d186:	4b64      	ldr	r3, [pc, #400]	@ (800d318 <UART_SetConfig+0x1f8>)
 800d188:	429a      	cmp	r2, r3
 800d18a:	d009      	beq.n	800d1a0 <UART_SetConfig+0x80>
 800d18c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d18e:	681a      	ldr	r2, [r3, #0]
 800d190:	4b63      	ldr	r3, [pc, #396]	@ (800d320 <UART_SetConfig+0x200>)
 800d192:	429a      	cmp	r2, r3
 800d194:	d004      	beq.n	800d1a0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d198:	6a1a      	ldr	r2, [r3, #32]
 800d19a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d19c:	4313      	orrs	r3, r2
 800d19e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d1a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	689b      	ldr	r3, [r3, #8]
 800d1a6:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800d1aa:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800d1ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1b0:	681a      	ldr	r2, [r3, #0]
 800d1b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d1b4:	430b      	orrs	r3, r1
 800d1b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d1b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1be:	f023 000f 	bic.w	r0, r3, #15
 800d1c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1c4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800d1c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1c8:	681a      	ldr	r2, [r3, #0]
 800d1ca:	ea40 0301 	orr.w	r3, r0, r1
 800d1ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d1d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1d2:	681a      	ldr	r2, [r3, #0]
 800d1d4:	4b53      	ldr	r3, [pc, #332]	@ (800d324 <UART_SetConfig+0x204>)
 800d1d6:	429a      	cmp	r2, r3
 800d1d8:	d102      	bne.n	800d1e0 <UART_SetConfig+0xc0>
 800d1da:	2301      	movs	r3, #1
 800d1dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d1de:	e066      	b.n	800d2ae <UART_SetConfig+0x18e>
 800d1e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1e2:	681a      	ldr	r2, [r3, #0]
 800d1e4:	4b50      	ldr	r3, [pc, #320]	@ (800d328 <UART_SetConfig+0x208>)
 800d1e6:	429a      	cmp	r2, r3
 800d1e8:	d102      	bne.n	800d1f0 <UART_SetConfig+0xd0>
 800d1ea:	2302      	movs	r3, #2
 800d1ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d1ee:	e05e      	b.n	800d2ae <UART_SetConfig+0x18e>
 800d1f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1f2:	681a      	ldr	r2, [r3, #0]
 800d1f4:	4b4d      	ldr	r3, [pc, #308]	@ (800d32c <UART_SetConfig+0x20c>)
 800d1f6:	429a      	cmp	r2, r3
 800d1f8:	d102      	bne.n	800d200 <UART_SetConfig+0xe0>
 800d1fa:	2304      	movs	r3, #4
 800d1fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d1fe:	e056      	b.n	800d2ae <UART_SetConfig+0x18e>
 800d200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d202:	681a      	ldr	r2, [r3, #0]
 800d204:	4b4a      	ldr	r3, [pc, #296]	@ (800d330 <UART_SetConfig+0x210>)
 800d206:	429a      	cmp	r2, r3
 800d208:	d102      	bne.n	800d210 <UART_SetConfig+0xf0>
 800d20a:	2308      	movs	r3, #8
 800d20c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d20e:	e04e      	b.n	800d2ae <UART_SetConfig+0x18e>
 800d210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d212:	681a      	ldr	r2, [r3, #0]
 800d214:	4b47      	ldr	r3, [pc, #284]	@ (800d334 <UART_SetConfig+0x214>)
 800d216:	429a      	cmp	r2, r3
 800d218:	d102      	bne.n	800d220 <UART_SetConfig+0x100>
 800d21a:	2310      	movs	r3, #16
 800d21c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d21e:	e046      	b.n	800d2ae <UART_SetConfig+0x18e>
 800d220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d222:	681a      	ldr	r2, [r3, #0]
 800d224:	4b44      	ldr	r3, [pc, #272]	@ (800d338 <UART_SetConfig+0x218>)
 800d226:	429a      	cmp	r2, r3
 800d228:	d102      	bne.n	800d230 <UART_SetConfig+0x110>
 800d22a:	2320      	movs	r3, #32
 800d22c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d22e:	e03e      	b.n	800d2ae <UART_SetConfig+0x18e>
 800d230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d232:	681a      	ldr	r2, [r3, #0]
 800d234:	4b41      	ldr	r3, [pc, #260]	@ (800d33c <UART_SetConfig+0x21c>)
 800d236:	429a      	cmp	r2, r3
 800d238:	d102      	bne.n	800d240 <UART_SetConfig+0x120>
 800d23a:	2340      	movs	r3, #64	@ 0x40
 800d23c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d23e:	e036      	b.n	800d2ae <UART_SetConfig+0x18e>
 800d240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d242:	681a      	ldr	r2, [r3, #0]
 800d244:	4b3e      	ldr	r3, [pc, #248]	@ (800d340 <UART_SetConfig+0x220>)
 800d246:	429a      	cmp	r2, r3
 800d248:	d102      	bne.n	800d250 <UART_SetConfig+0x130>
 800d24a:	2380      	movs	r3, #128	@ 0x80
 800d24c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d24e:	e02e      	b.n	800d2ae <UART_SetConfig+0x18e>
 800d250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d252:	681a      	ldr	r2, [r3, #0]
 800d254:	4b3b      	ldr	r3, [pc, #236]	@ (800d344 <UART_SetConfig+0x224>)
 800d256:	429a      	cmp	r2, r3
 800d258:	d103      	bne.n	800d262 <UART_SetConfig+0x142>
 800d25a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d25e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d260:	e025      	b.n	800d2ae <UART_SetConfig+0x18e>
 800d262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d264:	681a      	ldr	r2, [r3, #0]
 800d266:	4b38      	ldr	r3, [pc, #224]	@ (800d348 <UART_SetConfig+0x228>)
 800d268:	429a      	cmp	r2, r3
 800d26a:	d103      	bne.n	800d274 <UART_SetConfig+0x154>
 800d26c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d270:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d272:	e01c      	b.n	800d2ae <UART_SetConfig+0x18e>
 800d274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d276:	681a      	ldr	r2, [r3, #0]
 800d278:	4b34      	ldr	r3, [pc, #208]	@ (800d34c <UART_SetConfig+0x22c>)
 800d27a:	429a      	cmp	r2, r3
 800d27c:	d103      	bne.n	800d286 <UART_SetConfig+0x166>
 800d27e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d282:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d284:	e013      	b.n	800d2ae <UART_SetConfig+0x18e>
 800d286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d288:	681a      	ldr	r2, [r3, #0]
 800d28a:	4b31      	ldr	r3, [pc, #196]	@ (800d350 <UART_SetConfig+0x230>)
 800d28c:	429a      	cmp	r2, r3
 800d28e:	d103      	bne.n	800d298 <UART_SetConfig+0x178>
 800d290:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d294:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d296:	e00a      	b.n	800d2ae <UART_SetConfig+0x18e>
 800d298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d29a:	681a      	ldr	r2, [r3, #0]
 800d29c:	4b1e      	ldr	r3, [pc, #120]	@ (800d318 <UART_SetConfig+0x1f8>)
 800d29e:	429a      	cmp	r2, r3
 800d2a0:	d103      	bne.n	800d2aa <UART_SetConfig+0x18a>
 800d2a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d2a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d2a8:	e001      	b.n	800d2ae <UART_SetConfig+0x18e>
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d2ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2b0:	681a      	ldr	r2, [r3, #0]
 800d2b2:	4b19      	ldr	r3, [pc, #100]	@ (800d318 <UART_SetConfig+0x1f8>)
 800d2b4:	429a      	cmp	r2, r3
 800d2b6:	d005      	beq.n	800d2c4 <UART_SetConfig+0x1a4>
 800d2b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2ba:	681a      	ldr	r2, [r3, #0]
 800d2bc:	4b18      	ldr	r3, [pc, #96]	@ (800d320 <UART_SetConfig+0x200>)
 800d2be:	429a      	cmp	r2, r3
 800d2c0:	f040 8094 	bne.w	800d3ec <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d2c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	623b      	str	r3, [r7, #32]
 800d2ca:	627a      	str	r2, [r7, #36]	@ 0x24
 800d2cc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d2d0:	f7fb ff2c 	bl	800912c <HAL_RCCEx_GetPeriphCLKFreq>
 800d2d4:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800d2d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	f000 80f7 	beq.w	800d4cc <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d2de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2e2:	4a1c      	ldr	r2, [pc, #112]	@ (800d354 <UART_SetConfig+0x234>)
 800d2e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d2e8:	461a      	mov	r2, r3
 800d2ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d2ec:	fbb3 f3f2 	udiv	r3, r3, r2
 800d2f0:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d2f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2f4:	685a      	ldr	r2, [r3, #4]
 800d2f6:	4613      	mov	r3, r2
 800d2f8:	005b      	lsls	r3, r3, #1
 800d2fa:	4413      	add	r3, r2
 800d2fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d2fe:	429a      	cmp	r2, r3
 800d300:	d305      	bcc.n	800d30e <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d304:	685b      	ldr	r3, [r3, #4]
 800d306:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d308:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d30a:	429a      	cmp	r2, r3
 800d30c:	d924      	bls.n	800d358 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800d30e:	2301      	movs	r3, #1
 800d310:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800d314:	e069      	b.n	800d3ea <UART_SetConfig+0x2ca>
 800d316:	bf00      	nop
 800d318:	44002400 	.word	0x44002400
 800d31c:	cfff69f3 	.word	0xcfff69f3
 800d320:	54002400 	.word	0x54002400
 800d324:	40013800 	.word	0x40013800
 800d328:	40004400 	.word	0x40004400
 800d32c:	40004800 	.word	0x40004800
 800d330:	40004c00 	.word	0x40004c00
 800d334:	40005000 	.word	0x40005000
 800d338:	40006400 	.word	0x40006400
 800d33c:	40007800 	.word	0x40007800
 800d340:	40007c00 	.word	0x40007c00
 800d344:	40008000 	.word	0x40008000
 800d348:	40006800 	.word	0x40006800
 800d34c:	40006c00 	.word	0x40006c00
 800d350:	40008400 	.word	0x40008400
 800d354:	08013668 	.word	0x08013668
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d358:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d35a:	2200      	movs	r2, #0
 800d35c:	61bb      	str	r3, [r7, #24]
 800d35e:	61fa      	str	r2, [r7, #28]
 800d360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d364:	4a64      	ldr	r2, [pc, #400]	@ (800d4f8 <UART_SetConfig+0x3d8>)
 800d366:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d36a:	b29b      	uxth	r3, r3
 800d36c:	2200      	movs	r2, #0
 800d36e:	613b      	str	r3, [r7, #16]
 800d370:	617a      	str	r2, [r7, #20]
 800d372:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d376:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d37a:	f7f2 ff87 	bl	800028c <__aeabi_uldivmod>
 800d37e:	4602      	mov	r2, r0
 800d380:	460b      	mov	r3, r1
 800d382:	4610      	mov	r0, r2
 800d384:	4619      	mov	r1, r3
 800d386:	f04f 0200 	mov.w	r2, #0
 800d38a:	f04f 0300 	mov.w	r3, #0
 800d38e:	020b      	lsls	r3, r1, #8
 800d390:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d394:	0202      	lsls	r2, r0, #8
 800d396:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d398:	6849      	ldr	r1, [r1, #4]
 800d39a:	0849      	lsrs	r1, r1, #1
 800d39c:	2000      	movs	r0, #0
 800d39e:	460c      	mov	r4, r1
 800d3a0:	4605      	mov	r5, r0
 800d3a2:	eb12 0804 	adds.w	r8, r2, r4
 800d3a6:	eb43 0905 	adc.w	r9, r3, r5
 800d3aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3ac:	685b      	ldr	r3, [r3, #4]
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	60bb      	str	r3, [r7, #8]
 800d3b2:	60fa      	str	r2, [r7, #12]
 800d3b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d3b8:	4640      	mov	r0, r8
 800d3ba:	4649      	mov	r1, r9
 800d3bc:	f7f2 ff66 	bl	800028c <__aeabi_uldivmod>
 800d3c0:	4602      	mov	r2, r0
 800d3c2:	460b      	mov	r3, r1
 800d3c4:	4613      	mov	r3, r2
 800d3c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d3c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d3ce:	d308      	bcc.n	800d3e2 <UART_SetConfig+0x2c2>
 800d3d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d3d6:	d204      	bcs.n	800d3e2 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800d3d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d3de:	60da      	str	r2, [r3, #12]
 800d3e0:	e003      	b.n	800d3ea <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800d3e8:	e070      	b.n	800d4cc <UART_SetConfig+0x3ac>
 800d3ea:	e06f      	b.n	800d4cc <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d3ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3ee:	69db      	ldr	r3, [r3, #28]
 800d3f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d3f4:	d13c      	bne.n	800d470 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d3f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	603b      	str	r3, [r7, #0]
 800d3fc:	607a      	str	r2, [r7, #4]
 800d3fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d402:	f7fb fe93 	bl	800912c <HAL_RCCEx_GetPeriphCLKFreq>
 800d406:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d408:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d05e      	beq.n	800d4cc <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d40e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d412:	4a39      	ldr	r2, [pc, #228]	@ (800d4f8 <UART_SetConfig+0x3d8>)
 800d414:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d418:	461a      	mov	r2, r3
 800d41a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d41c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d420:	005a      	lsls	r2, r3, #1
 800d422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d424:	685b      	ldr	r3, [r3, #4]
 800d426:	085b      	lsrs	r3, r3, #1
 800d428:	441a      	add	r2, r3
 800d42a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d42c:	685b      	ldr	r3, [r3, #4]
 800d42e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d432:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d434:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d436:	2b0f      	cmp	r3, #15
 800d438:	d916      	bls.n	800d468 <UART_SetConfig+0x348>
 800d43a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d43c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d440:	d212      	bcs.n	800d468 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d442:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d444:	b29b      	uxth	r3, r3
 800d446:	f023 030f 	bic.w	r3, r3, #15
 800d44a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d44c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d44e:	085b      	lsrs	r3, r3, #1
 800d450:	b29b      	uxth	r3, r3
 800d452:	f003 0307 	and.w	r3, r3, #7
 800d456:	b29a      	uxth	r2, r3
 800d458:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d45a:	4313      	orrs	r3, r2
 800d45c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800d45e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d464:	60da      	str	r2, [r3, #12]
 800d466:	e031      	b.n	800d4cc <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800d468:	2301      	movs	r3, #1
 800d46a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800d46e:	e02d      	b.n	800d4cc <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d470:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d472:	2200      	movs	r2, #0
 800d474:	469a      	mov	sl, r3
 800d476:	4693      	mov	fp, r2
 800d478:	4650      	mov	r0, sl
 800d47a:	4659      	mov	r1, fp
 800d47c:	f7fb fe56 	bl	800912c <HAL_RCCEx_GetPeriphCLKFreq>
 800d480:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800d482:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d484:	2b00      	cmp	r3, #0
 800d486:	d021      	beq.n	800d4cc <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d48a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d48c:	4a1a      	ldr	r2, [pc, #104]	@ (800d4f8 <UART_SetConfig+0x3d8>)
 800d48e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d492:	461a      	mov	r2, r3
 800d494:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d496:	fbb3 f2f2 	udiv	r2, r3, r2
 800d49a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d49c:	685b      	ldr	r3, [r3, #4]
 800d49e:	085b      	lsrs	r3, r3, #1
 800d4a0:	441a      	add	r2, r3
 800d4a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4a4:	685b      	ldr	r3, [r3, #4]
 800d4a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d4ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4ae:	2b0f      	cmp	r3, #15
 800d4b0:	d909      	bls.n	800d4c6 <UART_SetConfig+0x3a6>
 800d4b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d4b8:	d205      	bcs.n	800d4c6 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d4ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4bc:	b29a      	uxth	r2, r3
 800d4be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	60da      	str	r2, [r3, #12]
 800d4c4:	e002      	b.n	800d4cc <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d4cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4ce:	2201      	movs	r2, #1
 800d4d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d4d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4d6:	2201      	movs	r2, #1
 800d4d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d4dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4de:	2200      	movs	r2, #0
 800d4e0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d4e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d4e8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	3750      	adds	r7, #80	@ 0x50
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d4f6:	bf00      	nop
 800d4f8:	08013668 	.word	0x08013668

0800d4fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d4fc:	b480      	push	{r7}
 800d4fe:	b083      	sub	sp, #12
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d508:	f003 0308 	and.w	r3, r3, #8
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d00a      	beq.n	800d526 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	685b      	ldr	r3, [r3, #4]
 800d516:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	430a      	orrs	r2, r1
 800d524:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d52a:	f003 0301 	and.w	r3, r3, #1
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d00a      	beq.n	800d548 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	685b      	ldr	r3, [r3, #4]
 800d538:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	430a      	orrs	r2, r1
 800d546:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d54c:	f003 0302 	and.w	r3, r3, #2
 800d550:	2b00      	cmp	r3, #0
 800d552:	d00a      	beq.n	800d56a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	685b      	ldr	r3, [r3, #4]
 800d55a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	430a      	orrs	r2, r1
 800d568:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d56e:	f003 0304 	and.w	r3, r3, #4
 800d572:	2b00      	cmp	r3, #0
 800d574:	d00a      	beq.n	800d58c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	685b      	ldr	r3, [r3, #4]
 800d57c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	430a      	orrs	r2, r1
 800d58a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d590:	f003 0310 	and.w	r3, r3, #16
 800d594:	2b00      	cmp	r3, #0
 800d596:	d00a      	beq.n	800d5ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	689b      	ldr	r3, [r3, #8]
 800d59e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	430a      	orrs	r2, r1
 800d5ac:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5b2:	f003 0320 	and.w	r3, r3, #32
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d00a      	beq.n	800d5d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	689b      	ldr	r3, [r3, #8]
 800d5c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	430a      	orrs	r2, r1
 800d5ce:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d01a      	beq.n	800d612 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	685b      	ldr	r3, [r3, #4]
 800d5e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	430a      	orrs	r2, r1
 800d5f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d5f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d5fa:	d10a      	bne.n	800d612 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	685b      	ldr	r3, [r3, #4]
 800d602:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	430a      	orrs	r2, r1
 800d610:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d00a      	beq.n	800d634 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	685b      	ldr	r3, [r3, #4]
 800d624:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	430a      	orrs	r2, r1
 800d632:	605a      	str	r2, [r3, #4]
  }
}
 800d634:	bf00      	nop
 800d636:	370c      	adds	r7, #12
 800d638:	46bd      	mov	sp, r7
 800d63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63e:	4770      	bx	lr

0800d640 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b098      	sub	sp, #96	@ 0x60
 800d644:	af02      	add	r7, sp, #8
 800d646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	2200      	movs	r2, #0
 800d64c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d650:	f7f5 f928 	bl	80028a4 <HAL_GetTick>
 800d654:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	f003 0308 	and.w	r3, r3, #8
 800d660:	2b08      	cmp	r3, #8
 800d662:	d12f      	bne.n	800d6c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d664:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d668:	9300      	str	r3, [sp, #0]
 800d66a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d66c:	2200      	movs	r2, #0
 800d66e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f000 f88e 	bl	800d794 <UART_WaitOnFlagUntilTimeout>
 800d678:	4603      	mov	r3, r0
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d022      	beq.n	800d6c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d686:	e853 3f00 	ldrex	r3, [r3]
 800d68a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d68c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d68e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d692:	653b      	str	r3, [r7, #80]	@ 0x50
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	461a      	mov	r2, r3
 800d69a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d69c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d69e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d6a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d6a4:	e841 2300 	strex	r3, r2, [r1]
 800d6a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d6aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d1e6      	bne.n	800d67e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2220      	movs	r2, #32
 800d6b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d6c0:	2303      	movs	r3, #3
 800d6c2:	e063      	b.n	800d78c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	f003 0304 	and.w	r3, r3, #4
 800d6ce:	2b04      	cmp	r3, #4
 800d6d0:	d149      	bne.n	800d766 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d6d2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d6d6:	9300      	str	r3, [sp, #0]
 800d6d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d6da:	2200      	movs	r2, #0
 800d6dc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d6e0:	6878      	ldr	r0, [r7, #4]
 800d6e2:	f000 f857 	bl	800d794 <UART_WaitOnFlagUntilTimeout>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d03c      	beq.n	800d766 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6f4:	e853 3f00 	ldrex	r3, [r3]
 800d6f8:	623b      	str	r3, [r7, #32]
   return(result);
 800d6fa:	6a3b      	ldr	r3, [r7, #32]
 800d6fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d700:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	461a      	mov	r2, r3
 800d708:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d70a:	633b      	str	r3, [r7, #48]	@ 0x30
 800d70c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d70e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d710:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d712:	e841 2300 	strex	r3, r2, [r1]
 800d716:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d1e6      	bne.n	800d6ec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	3308      	adds	r3, #8
 800d724:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d726:	693b      	ldr	r3, [r7, #16]
 800d728:	e853 3f00 	ldrex	r3, [r3]
 800d72c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	f023 0301 	bic.w	r3, r3, #1
 800d734:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	3308      	adds	r3, #8
 800d73c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d73e:	61fa      	str	r2, [r7, #28]
 800d740:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d742:	69b9      	ldr	r1, [r7, #24]
 800d744:	69fa      	ldr	r2, [r7, #28]
 800d746:	e841 2300 	strex	r3, r2, [r1]
 800d74a:	617b      	str	r3, [r7, #20]
   return(result);
 800d74c:	697b      	ldr	r3, [r7, #20]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d1e5      	bne.n	800d71e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	2220      	movs	r2, #32
 800d756:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	2200      	movs	r2, #0
 800d75e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d762:	2303      	movs	r3, #3
 800d764:	e012      	b.n	800d78c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	2220      	movs	r2, #32
 800d76a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	2220      	movs	r2, #32
 800d772:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	2200      	movs	r2, #0
 800d77a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2200      	movs	r2, #0
 800d780:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	2200      	movs	r2, #0
 800d786:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d78a:	2300      	movs	r3, #0
}
 800d78c:	4618      	mov	r0, r3
 800d78e:	3758      	adds	r7, #88	@ 0x58
 800d790:	46bd      	mov	sp, r7
 800d792:	bd80      	pop	{r7, pc}

0800d794 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b084      	sub	sp, #16
 800d798:	af00      	add	r7, sp, #0
 800d79a:	60f8      	str	r0, [r7, #12]
 800d79c:	60b9      	str	r1, [r7, #8]
 800d79e:	603b      	str	r3, [r7, #0]
 800d7a0:	4613      	mov	r3, r2
 800d7a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d7a4:	e04f      	b.n	800d846 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d7a6:	69bb      	ldr	r3, [r7, #24]
 800d7a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7ac:	d04b      	beq.n	800d846 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d7ae:	f7f5 f879 	bl	80028a4 <HAL_GetTick>
 800d7b2:	4602      	mov	r2, r0
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	1ad3      	subs	r3, r2, r3
 800d7b8:	69ba      	ldr	r2, [r7, #24]
 800d7ba:	429a      	cmp	r2, r3
 800d7bc:	d302      	bcc.n	800d7c4 <UART_WaitOnFlagUntilTimeout+0x30>
 800d7be:	69bb      	ldr	r3, [r7, #24]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d101      	bne.n	800d7c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d7c4:	2303      	movs	r3, #3
 800d7c6:	e04e      	b.n	800d866 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	f003 0304 	and.w	r3, r3, #4
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d037      	beq.n	800d846 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d7d6:	68bb      	ldr	r3, [r7, #8]
 800d7d8:	2b80      	cmp	r3, #128	@ 0x80
 800d7da:	d034      	beq.n	800d846 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d7dc:	68bb      	ldr	r3, [r7, #8]
 800d7de:	2b40      	cmp	r3, #64	@ 0x40
 800d7e0:	d031      	beq.n	800d846 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	69db      	ldr	r3, [r3, #28]
 800d7e8:	f003 0308 	and.w	r3, r3, #8
 800d7ec:	2b08      	cmp	r3, #8
 800d7ee:	d110      	bne.n	800d812 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	2208      	movs	r2, #8
 800d7f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d7f8:	68f8      	ldr	r0, [r7, #12]
 800d7fa:	f000 f838 	bl	800d86e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	2208      	movs	r2, #8
 800d802:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	2200      	movs	r2, #0
 800d80a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d80e:	2301      	movs	r3, #1
 800d810:	e029      	b.n	800d866 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	69db      	ldr	r3, [r3, #28]
 800d818:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d81c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d820:	d111      	bne.n	800d846 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d82a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d82c:	68f8      	ldr	r0, [r7, #12]
 800d82e:	f000 f81e 	bl	800d86e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	2220      	movs	r2, #32
 800d836:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	2200      	movs	r2, #0
 800d83e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d842:	2303      	movs	r3, #3
 800d844:	e00f      	b.n	800d866 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	69da      	ldr	r2, [r3, #28]
 800d84c:	68bb      	ldr	r3, [r7, #8]
 800d84e:	4013      	ands	r3, r2
 800d850:	68ba      	ldr	r2, [r7, #8]
 800d852:	429a      	cmp	r2, r3
 800d854:	bf0c      	ite	eq
 800d856:	2301      	moveq	r3, #1
 800d858:	2300      	movne	r3, #0
 800d85a:	b2db      	uxtb	r3, r3
 800d85c:	461a      	mov	r2, r3
 800d85e:	79fb      	ldrb	r3, [r7, #7]
 800d860:	429a      	cmp	r2, r3
 800d862:	d0a0      	beq.n	800d7a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d864:	2300      	movs	r3, #0
}
 800d866:	4618      	mov	r0, r3
 800d868:	3710      	adds	r7, #16
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}

0800d86e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d86e:	b480      	push	{r7}
 800d870:	b095      	sub	sp, #84	@ 0x54
 800d872:	af00      	add	r7, sp, #0
 800d874:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d87c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d87e:	e853 3f00 	ldrex	r3, [r3]
 800d882:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d886:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d88a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	461a      	mov	r2, r3
 800d892:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d894:	643b      	str	r3, [r7, #64]	@ 0x40
 800d896:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d898:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d89a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d89c:	e841 2300 	strex	r3, r2, [r1]
 800d8a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d8a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d1e6      	bne.n	800d876 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	3308      	adds	r3, #8
 800d8ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8b0:	6a3b      	ldr	r3, [r7, #32]
 800d8b2:	e853 3f00 	ldrex	r3, [r3]
 800d8b6:	61fb      	str	r3, [r7, #28]
   return(result);
 800d8b8:	69fb      	ldr	r3, [r7, #28]
 800d8ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d8be:	f023 0301 	bic.w	r3, r3, #1
 800d8c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	3308      	adds	r3, #8
 800d8ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d8cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d8ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d8d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d8d4:	e841 2300 	strex	r3, r2, [r1]
 800d8d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d8da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d1e3      	bne.n	800d8a8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d8e4:	2b01      	cmp	r3, #1
 800d8e6:	d118      	bne.n	800d91a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	e853 3f00 	ldrex	r3, [r3]
 800d8f4:	60bb      	str	r3, [r7, #8]
   return(result);
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	f023 0310 	bic.w	r3, r3, #16
 800d8fc:	647b      	str	r3, [r7, #68]	@ 0x44
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	461a      	mov	r2, r3
 800d904:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d906:	61bb      	str	r3, [r7, #24]
 800d908:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d90a:	6979      	ldr	r1, [r7, #20]
 800d90c:	69ba      	ldr	r2, [r7, #24]
 800d90e:	e841 2300 	strex	r3, r2, [r1]
 800d912:	613b      	str	r3, [r7, #16]
   return(result);
 800d914:	693b      	ldr	r3, [r7, #16]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d1e6      	bne.n	800d8e8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	2220      	movs	r2, #32
 800d91e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2200      	movs	r2, #0
 800d926:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2200      	movs	r2, #0
 800d92c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d92e:	bf00      	nop
 800d930:	3754      	adds	r7, #84	@ 0x54
 800d932:	46bd      	mov	sp, r7
 800d934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d938:	4770      	bx	lr

0800d93a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d93a:	b480      	push	{r7}
 800d93c:	b085      	sub	sp, #20
 800d93e:	af00      	add	r7, sp, #0
 800d940:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d948:	2b01      	cmp	r3, #1
 800d94a:	d101      	bne.n	800d950 <HAL_UARTEx_DisableFifoMode+0x16>
 800d94c:	2302      	movs	r3, #2
 800d94e:	e027      	b.n	800d9a0 <HAL_UARTEx_DisableFifoMode+0x66>
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2201      	movs	r2, #1
 800d954:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	2224      	movs	r2, #36	@ 0x24
 800d95c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	681a      	ldr	r2, [r3, #0]
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	f022 0201 	bic.w	r2, r2, #1
 800d976:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d97e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2200      	movs	r2, #0
 800d984:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	68fa      	ldr	r2, [r7, #12]
 800d98c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	2220      	movs	r2, #32
 800d992:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2200      	movs	r2, #0
 800d99a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d99e:	2300      	movs	r3, #0
}
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	3714      	adds	r7, #20
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9aa:	4770      	bx	lr

0800d9ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b084      	sub	sp, #16
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
 800d9b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d9bc:	2b01      	cmp	r3, #1
 800d9be:	d101      	bne.n	800d9c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d9c0:	2302      	movs	r3, #2
 800d9c2:	e02d      	b.n	800da20 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2201      	movs	r2, #1
 800d9c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2224      	movs	r2, #36	@ 0x24
 800d9d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	681a      	ldr	r2, [r3, #0]
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	f022 0201 	bic.w	r2, r2, #1
 800d9ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	689b      	ldr	r3, [r3, #8]
 800d9f2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	683a      	ldr	r2, [r7, #0]
 800d9fc:	430a      	orrs	r2, r1
 800d9fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800da00:	6878      	ldr	r0, [r7, #4]
 800da02:	f000 f84f 	bl	800daa4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	68fa      	ldr	r2, [r7, #12]
 800da0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2220      	movs	r2, #32
 800da12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	2200      	movs	r2, #0
 800da1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800da1e:	2300      	movs	r3, #0
}
 800da20:	4618      	mov	r0, r3
 800da22:	3710      	adds	r7, #16
 800da24:	46bd      	mov	sp, r7
 800da26:	bd80      	pop	{r7, pc}

0800da28 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b084      	sub	sp, #16
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
 800da30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800da38:	2b01      	cmp	r3, #1
 800da3a:	d101      	bne.n	800da40 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800da3c:	2302      	movs	r3, #2
 800da3e:	e02d      	b.n	800da9c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	2201      	movs	r2, #1
 800da44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2224      	movs	r2, #36	@ 0x24
 800da4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	681a      	ldr	r2, [r3, #0]
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	f022 0201 	bic.w	r2, r2, #1
 800da66:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	689b      	ldr	r3, [r3, #8]
 800da6e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	683a      	ldr	r2, [r7, #0]
 800da78:	430a      	orrs	r2, r1
 800da7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800da7c:	6878      	ldr	r0, [r7, #4]
 800da7e:	f000 f811 	bl	800daa4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	68fa      	ldr	r2, [r7, #12]
 800da88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	2220      	movs	r2, #32
 800da8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2200      	movs	r2, #0
 800da96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800da9a:	2300      	movs	r3, #0
}
 800da9c:	4618      	mov	r0, r3
 800da9e:	3710      	adds	r7, #16
 800daa0:	46bd      	mov	sp, r7
 800daa2:	bd80      	pop	{r7, pc}

0800daa4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800daa4:	b480      	push	{r7}
 800daa6:	b085      	sub	sp, #20
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d108      	bne.n	800dac6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2201      	movs	r2, #1
 800dab8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2201      	movs	r2, #1
 800dac0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dac4:	e031      	b.n	800db2a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dac6:	2308      	movs	r3, #8
 800dac8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800daca:	2308      	movs	r3, #8
 800dacc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	689b      	ldr	r3, [r3, #8]
 800dad4:	0e5b      	lsrs	r3, r3, #25
 800dad6:	b2db      	uxtb	r3, r3
 800dad8:	f003 0307 	and.w	r3, r3, #7
 800dadc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	689b      	ldr	r3, [r3, #8]
 800dae4:	0f5b      	lsrs	r3, r3, #29
 800dae6:	b2db      	uxtb	r3, r3
 800dae8:	f003 0307 	and.w	r3, r3, #7
 800daec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800daee:	7bbb      	ldrb	r3, [r7, #14]
 800daf0:	7b3a      	ldrb	r2, [r7, #12]
 800daf2:	4911      	ldr	r1, [pc, #68]	@ (800db38 <UARTEx_SetNbDataToProcess+0x94>)
 800daf4:	5c8a      	ldrb	r2, [r1, r2]
 800daf6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dafa:	7b3a      	ldrb	r2, [r7, #12]
 800dafc:	490f      	ldr	r1, [pc, #60]	@ (800db3c <UARTEx_SetNbDataToProcess+0x98>)
 800dafe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800db00:	fb93 f3f2 	sdiv	r3, r3, r2
 800db04:	b29a      	uxth	r2, r3
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800db0c:	7bfb      	ldrb	r3, [r7, #15]
 800db0e:	7b7a      	ldrb	r2, [r7, #13]
 800db10:	4909      	ldr	r1, [pc, #36]	@ (800db38 <UARTEx_SetNbDataToProcess+0x94>)
 800db12:	5c8a      	ldrb	r2, [r1, r2]
 800db14:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800db18:	7b7a      	ldrb	r2, [r7, #13]
 800db1a:	4908      	ldr	r1, [pc, #32]	@ (800db3c <UARTEx_SetNbDataToProcess+0x98>)
 800db1c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800db1e:	fb93 f3f2 	sdiv	r3, r3, r2
 800db22:	b29a      	uxth	r2, r3
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800db2a:	bf00      	nop
 800db2c:	3714      	adds	r7, #20
 800db2e:	46bd      	mov	sp, r7
 800db30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db34:	4770      	bx	lr
 800db36:	bf00      	nop
 800db38:	08013680 	.word	0x08013680
 800db3c:	08013688 	.word	0x08013688

0800db40 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_DRD_TypeDef *USBx)
{
 800db40:	b480      	push	{r7}
 800db42:	b083      	sub	sp, #12
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
  /* Disable Host Mode */
  USBx->CNTR &= ~USB_CNTR_HOST;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db4c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Force Reset IP */
  USBx->CNTR |= USB_CNTR_USBRST;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db58:	f043 0201 	orr.w	r2, r3, #1
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800db60:	2300      	movs	r3, #0
}
 800db62:	4618      	mov	r0, r3
 800db64:	370c      	adds	r7, #12
 800db66:	46bd      	mov	sp, r7
 800db68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6c:	4770      	bx	lr

0800db6e <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800db6e:	b084      	sub	sp, #16
 800db70:	b580      	push	{r7, lr}
 800db72:	b084      	sub	sp, #16
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
 800db78:	f107 001c 	add.w	r0, r7, #28
 800db7c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  UNUSED(cfg);

  if (USBx == NULL)
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d101      	bne.n	800db8a <USB_CoreInit+0x1c>
  {
    return HAL_ERROR;
 800db86:	2301      	movs	r3, #1
 800db88:	e008      	b.n	800db9c <USB_CoreInit+0x2e>
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800db8a:	6878      	ldr	r0, [r7, #4]
 800db8c:	f7ff ffd8 	bl	800db40 <USB_CoreReset>
 800db90:	4603      	mov	r3, r0
 800db92:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	2200      	movs	r2, #0
 800db98:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800db9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800db9c:	4618      	mov	r0, r3
 800db9e:	3710      	adds	r7, #16
 800dba0:	46bd      	mov	sp, r7
 800dba2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dba6:	b004      	add	sp, #16
 800dba8:	4770      	bx	lr

0800dbaa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800dbaa:	b480      	push	{r7}
 800dbac:	b085      	sub	sp, #20
 800dbae:	af00      	add	r7, sp, #0
 800dbb0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800dbb8:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800dbbc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	68fa      	ldr	r2, [r7, #12]
 800dbc2:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800dbc4:	2300      	movs	r3, #0
}
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	3714      	adds	r7, #20
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd0:	4770      	bx	lr

0800dbd2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800dbd2:	b480      	push	{r7}
 800dbd4:	b085      	sub	sp, #20
 800dbd6:	af00      	add	r7, sp, #0
 800dbd8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800dbda:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800dbde:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	43db      	mvns	r3, r3
 800dbe8:	401a      	ands	r2, r3
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800dbee:	2300      	movs	r3, #0
}
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	3714      	adds	r7, #20
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfa:	4770      	bx	lr

0800dbfc <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800dbfc:	b480      	push	{r7}
 800dbfe:	b083      	sub	sp, #12
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
 800dc04:	460b      	mov	r3, r1
 800dc06:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800dc08:	78fb      	ldrb	r3, [r7, #3]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d106      	bne.n	800dc1c <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc12:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	641a      	str	r2, [r3, #64]	@ 0x40
 800dc1a:	e00b      	b.n	800dc34 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800dc1c:	78fb      	ldrb	r3, [r7, #3]
 800dc1e:	2b01      	cmp	r3, #1
 800dc20:	d106      	bne.n	800dc30 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc26:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	641a      	str	r2, [r3, #64]	@ 0x40
 800dc2e:	e001      	b.n	800dc34 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800dc30:	2301      	movs	r3, #1
 800dc32:	e000      	b.n	800dc36 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800dc34:	2300      	movs	r3, #0
}
 800dc36:	4618      	mov	r0, r3
 800dc38:	370c      	adds	r7, #12
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc40:	4770      	bx	lr

0800dc42 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800dc42:	b084      	sub	sp, #16
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b084      	sub	sp, #16
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
 800dc4c:	f107 001c 	add.w	r0, r7, #28
 800dc50:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	2201      	movs	r2, #1
 800dc58:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc5e:	f023 0201 	bic.w	r2, r3, #1
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800dc66:	2100      	movs	r1, #0
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f7ff ffc7 	bl	800dbfc <USB_SetCurrentMode>
 800dc6e:	4603      	mov	r3, r0
 800dc70:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	2200      	movs	r2, #0
 800dc76:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800dc78:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	3710      	adds	r7, #16
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dc84:	b004      	add	sp, #16
 800dc86:	4770      	bx	lr

0800dc88 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800dc88:	b480      	push	{r7}
 800dc8a:	b09f      	sub	sp, #124	@ 0x7c
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800dc92:	2300      	movs	r3, #0
 800dc94:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800dc98:	687a      	ldr	r2, [r7, #4]
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	781b      	ldrb	r3, [r3, #0]
 800dc9e:	009b      	lsls	r3, r3, #2
 800dca0:	4413      	add	r3, r2
 800dca2:	681a      	ldr	r2, [r3, #0]
 800dca4:	4ba0      	ldr	r3, [pc, #640]	@ (800df28 <USB_ActivateEndpoint+0x2a0>)
 800dca6:	4013      	ands	r3, r2
 800dca8:	673b      	str	r3, [r7, #112]	@ 0x70

  /* initialize Endpoint */
  switch (ep->type)
 800dcaa:	683b      	ldr	r3, [r7, #0]
 800dcac:	78db      	ldrb	r3, [r3, #3]
 800dcae:	2b03      	cmp	r3, #3
 800dcb0:	d819      	bhi.n	800dce6 <USB_ActivateEndpoint+0x5e>
 800dcb2:	a201      	add	r2, pc, #4	@ (adr r2, 800dcb8 <USB_ActivateEndpoint+0x30>)
 800dcb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcb8:	0800dcc9 	.word	0x0800dcc9
 800dcbc:	0800dcdd 	.word	0x0800dcdd
 800dcc0:	0800dcef 	.word	0x0800dcef
 800dcc4:	0800dcd3 	.word	0x0800dcd3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800dcc8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dcca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800dcce:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800dcd0:	e00e      	b.n	800dcf0 <USB_ActivateEndpoint+0x68>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800dcd2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dcd4:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800dcd8:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800dcda:	e009      	b.n	800dcf0 <USB_ActivateEndpoint+0x68>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800dcdc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dcde:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800dce2:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800dce4:	e004      	b.n	800dcf0 <USB_ActivateEndpoint+0x68>

    default:
      ret = HAL_ERROR;
 800dce6:	2301      	movs	r3, #1
 800dce8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      break;
 800dcec:	e000      	b.n	800dcf0 <USB_ActivateEndpoint+0x68>
      break;
 800dcee:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 800dcf0:	687a      	ldr	r2, [r7, #4]
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	781b      	ldrb	r3, [r3, #0]
 800dcf6:	009b      	lsls	r3, r3, #2
 800dcf8:	441a      	add	r2, r3
 800dcfa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dcfc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dd00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd04:	6013      	str	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800dd06:	687a      	ldr	r2, [r7, #4]
 800dd08:	683b      	ldr	r3, [r7, #0]
 800dd0a:	781b      	ldrb	r3, [r3, #0]
 800dd0c:	009b      	lsls	r3, r3, #2
 800dd0e:	4413      	add	r3, r2
 800dd10:	681a      	ldr	r2, [r3, #0]
 800dd12:	4b86      	ldr	r3, [pc, #536]	@ (800df2c <USB_ActivateEndpoint+0x2a4>)
 800dd14:	4013      	ands	r3, r2
 800dd16:	683a      	ldr	r2, [r7, #0]
 800dd18:	7812      	ldrb	r2, [r2, #0]
 800dd1a:	4313      	orrs	r3, r2
 800dd1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dd1e:	687a      	ldr	r2, [r7, #4]
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	781b      	ldrb	r3, [r3, #0]
 800dd24:	009b      	lsls	r3, r3, #2
 800dd26:	441a      	add	r2, r3
 800dd28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dd2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dd2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd32:	6013      	str	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	7b1b      	ldrb	r3, [r3, #12]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	f040 8177 	bne.w	800e02c <USB_ActivateEndpoint+0x3a4>
  {
    if (ep->is_in != 0U)
 800dd3e:	683b      	ldr	r3, [r7, #0]
 800dd40:	785b      	ldrb	r3, [r3, #1]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d079      	beq.n	800de3a <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800dd46:	683b      	ldr	r3, [r7, #0]
 800dd48:	781b      	ldrb	r3, [r3, #0]
 800dd4a:	00db      	lsls	r3, r3, #3
 800dd4c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dd50:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dd54:	681a      	ldr	r2, [r3, #0]
 800dd56:	683b      	ldr	r3, [r7, #0]
 800dd58:	781b      	ldrb	r3, [r3, #0]
 800dd5a:	00db      	lsls	r3, r3, #3
 800dd5c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dd60:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dd64:	0c12      	lsrs	r2, r2, #16
 800dd66:	0412      	lsls	r2, r2, #16
 800dd68:	601a      	str	r2, [r3, #0]
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	781b      	ldrb	r3, [r3, #0]
 800dd6e:	00db      	lsls	r3, r3, #3
 800dd70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dd74:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dd78:	6819      	ldr	r1, [r3, #0]
 800dd7a:	683b      	ldr	r3, [r7, #0]
 800dd7c:	88db      	ldrh	r3, [r3, #6]
 800dd7e:	089b      	lsrs	r3, r3, #2
 800dd80:	b29b      	uxth	r3, r3
 800dd82:	009a      	lsls	r2, r3, #2
 800dd84:	683b      	ldr	r3, [r7, #0]
 800dd86:	781b      	ldrb	r3, [r3, #0]
 800dd88:	00db      	lsls	r3, r3, #3
 800dd8a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dd8e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dd92:	430a      	orrs	r2, r1
 800dd94:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800dd96:	687a      	ldr	r2, [r7, #4]
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	781b      	ldrb	r3, [r3, #0]
 800dd9c:	009b      	lsls	r3, r3, #2
 800dd9e:	4413      	add	r3, r2
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	61bb      	str	r3, [r7, #24]
 800dda4:	69bb      	ldr	r3, [r7, #24]
 800dda6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d013      	beq.n	800ddd6 <USB_ActivateEndpoint+0x14e>
 800ddae:	687a      	ldr	r2, [r7, #4]
 800ddb0:	683b      	ldr	r3, [r7, #0]
 800ddb2:	781b      	ldrb	r3, [r3, #0]
 800ddb4:	009b      	lsls	r3, r3, #2
 800ddb6:	4413      	add	r3, r2
 800ddb8:	681a      	ldr	r2, [r3, #0]
 800ddba:	4b5c      	ldr	r3, [pc, #368]	@ (800df2c <USB_ActivateEndpoint+0x2a4>)
 800ddbc:	4013      	ands	r3, r2
 800ddbe:	617b      	str	r3, [r7, #20]
 800ddc0:	687a      	ldr	r2, [r7, #4]
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	781b      	ldrb	r3, [r3, #0]
 800ddc6:	009b      	lsls	r3, r3, #2
 800ddc8:	441a      	add	r2, r3
 800ddca:	697b      	ldr	r3, [r7, #20]
 800ddcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ddd0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ddd4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	78db      	ldrb	r3, [r3, #3]
 800ddda:	2b01      	cmp	r3, #1
 800dddc:	d018      	beq.n	800de10 <USB_ActivateEndpoint+0x188>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ddde:	687a      	ldr	r2, [r7, #4]
 800dde0:	683b      	ldr	r3, [r7, #0]
 800dde2:	781b      	ldrb	r3, [r3, #0]
 800dde4:	009b      	lsls	r3, r3, #2
 800dde6:	4413      	add	r3, r2
 800dde8:	681a      	ldr	r2, [r3, #0]
 800ddea:	4b51      	ldr	r3, [pc, #324]	@ (800df30 <USB_ActivateEndpoint+0x2a8>)
 800ddec:	4013      	ands	r3, r2
 800ddee:	60fb      	str	r3, [r7, #12]
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	f083 0320 	eor.w	r3, r3, #32
 800ddf6:	60fb      	str	r3, [r7, #12]
 800ddf8:	687a      	ldr	r2, [r7, #4]
 800ddfa:	683b      	ldr	r3, [r7, #0]
 800ddfc:	781b      	ldrb	r3, [r3, #0]
 800ddfe:	009b      	lsls	r3, r3, #2
 800de00:	441a      	add	r2, r3
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800de08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de0c:	6013      	str	r3, [r2, #0]
 800de0e:	e28c      	b.n	800e32a <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800de10:	687a      	ldr	r2, [r7, #4]
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	781b      	ldrb	r3, [r3, #0]
 800de16:	009b      	lsls	r3, r3, #2
 800de18:	4413      	add	r3, r2
 800de1a:	681a      	ldr	r2, [r3, #0]
 800de1c:	4b44      	ldr	r3, [pc, #272]	@ (800df30 <USB_ActivateEndpoint+0x2a8>)
 800de1e:	4013      	ands	r3, r2
 800de20:	613b      	str	r3, [r7, #16]
 800de22:	687a      	ldr	r2, [r7, #4]
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	781b      	ldrb	r3, [r3, #0]
 800de28:	009b      	lsls	r3, r3, #2
 800de2a:	441a      	add	r2, r3
 800de2c:	693b      	ldr	r3, [r7, #16]
 800de2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800de32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de36:	6013      	str	r3, [r2, #0]
 800de38:	e277      	b.n	800e32a <USB_ActivateEndpoint+0x6a2>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	781b      	ldrb	r3, [r3, #0]
 800de3e:	00db      	lsls	r3, r3, #3
 800de40:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800de44:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800de48:	685a      	ldr	r2, [r3, #4]
 800de4a:	683b      	ldr	r3, [r7, #0]
 800de4c:	781b      	ldrb	r3, [r3, #0]
 800de4e:	00db      	lsls	r3, r3, #3
 800de50:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800de54:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800de58:	0c12      	lsrs	r2, r2, #16
 800de5a:	0412      	lsls	r2, r2, #16
 800de5c:	605a      	str	r2, [r3, #4]
 800de5e:	683b      	ldr	r3, [r7, #0]
 800de60:	781b      	ldrb	r3, [r3, #0]
 800de62:	00db      	lsls	r3, r3, #3
 800de64:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800de68:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800de6c:	6859      	ldr	r1, [r3, #4]
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	88db      	ldrh	r3, [r3, #6]
 800de72:	089b      	lsrs	r3, r3, #2
 800de74:	b29b      	uxth	r3, r3
 800de76:	009a      	lsls	r2, r3, #2
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	781b      	ldrb	r3, [r3, #0]
 800de7c:	00db      	lsls	r3, r3, #3
 800de7e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800de82:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800de86:	430a      	orrs	r2, r1
 800de88:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	781b      	ldrb	r3, [r3, #0]
 800de8e:	00db      	lsls	r3, r3, #3
 800de90:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800de94:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800de98:	685a      	ldr	r2, [r3, #4]
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	781b      	ldrb	r3, [r3, #0]
 800de9e:	00db      	lsls	r3, r3, #3
 800dea0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dea4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dea8:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800deac:	605a      	str	r2, [r3, #4]
 800deae:	683b      	ldr	r3, [r7, #0]
 800deb0:	691b      	ldr	r3, [r3, #16]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d112      	bne.n	800dedc <USB_ActivateEndpoint+0x254>
 800deb6:	683b      	ldr	r3, [r7, #0]
 800deb8:	781b      	ldrb	r3, [r3, #0]
 800deba:	00db      	lsls	r3, r3, #3
 800debc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dec0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dec4:	685a      	ldr	r2, [r3, #4]
 800dec6:	683b      	ldr	r3, [r7, #0]
 800dec8:	781b      	ldrb	r3, [r3, #0]
 800deca:	00db      	lsls	r3, r3, #3
 800decc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ded0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ded4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ded8:	605a      	str	r2, [r3, #4]
 800deda:	e04d      	b.n	800df78 <USB_ActivateEndpoint+0x2f0>
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	691b      	ldr	r3, [r3, #16]
 800dee0:	2b3e      	cmp	r3, #62	@ 0x3e
 800dee2:	d827      	bhi.n	800df34 <USB_ActivateEndpoint+0x2ac>
 800dee4:	683b      	ldr	r3, [r7, #0]
 800dee6:	691b      	ldr	r3, [r3, #16]
 800dee8:	085b      	lsrs	r3, r3, #1
 800deea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800deec:	683b      	ldr	r3, [r7, #0]
 800deee:	691b      	ldr	r3, [r3, #16]
 800def0:	f003 0301 	and.w	r3, r3, #1
 800def4:	2b00      	cmp	r3, #0
 800def6:	d002      	beq.n	800defe <USB_ActivateEndpoint+0x276>
 800def8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800defa:	3301      	adds	r3, #1
 800defc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	781b      	ldrb	r3, [r3, #0]
 800df02:	00db      	lsls	r3, r3, #3
 800df04:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800df08:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800df0c:	6859      	ldr	r1, [r3, #4]
 800df0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800df10:	069a      	lsls	r2, r3, #26
 800df12:	683b      	ldr	r3, [r7, #0]
 800df14:	781b      	ldrb	r3, [r3, #0]
 800df16:	00db      	lsls	r3, r3, #3
 800df18:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800df1c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800df20:	430a      	orrs	r2, r1
 800df22:	605a      	str	r2, [r3, #4]
 800df24:	e028      	b.n	800df78 <USB_ActivateEndpoint+0x2f0>
 800df26:	bf00      	nop
 800df28:	07ff898f 	.word	0x07ff898f
 800df2c:	07ff8f8f 	.word	0x07ff8f8f
 800df30:	07ff8fbf 	.word	0x07ff8fbf
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	691b      	ldr	r3, [r3, #16]
 800df38:	095b      	lsrs	r3, r3, #5
 800df3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800df3c:	683b      	ldr	r3, [r7, #0]
 800df3e:	691b      	ldr	r3, [r3, #16]
 800df40:	f003 031f 	and.w	r3, r3, #31
 800df44:	2b00      	cmp	r3, #0
 800df46:	d102      	bne.n	800df4e <USB_ActivateEndpoint+0x2c6>
 800df48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800df4a:	3b01      	subs	r3, #1
 800df4c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	781b      	ldrb	r3, [r3, #0]
 800df52:	00db      	lsls	r3, r3, #3
 800df54:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800df58:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800df5c:	685a      	ldr	r2, [r3, #4]
 800df5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800df60:	069b      	lsls	r3, r3, #26
 800df62:	431a      	orrs	r2, r3
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	781b      	ldrb	r3, [r3, #0]
 800df68:	00db      	lsls	r3, r3, #3
 800df6a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800df6e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800df72:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800df76:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800df78:	687a      	ldr	r2, [r7, #4]
 800df7a:	683b      	ldr	r3, [r7, #0]
 800df7c:	781b      	ldrb	r3, [r3, #0]
 800df7e:	009b      	lsls	r3, r3, #2
 800df80:	4413      	add	r3, r2
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	62bb      	str	r3, [r7, #40]	@ 0x28
 800df86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d013      	beq.n	800dfb8 <USB_ActivateEndpoint+0x330>
 800df90:	687a      	ldr	r2, [r7, #4]
 800df92:	683b      	ldr	r3, [r7, #0]
 800df94:	781b      	ldrb	r3, [r3, #0]
 800df96:	009b      	lsls	r3, r3, #2
 800df98:	4413      	add	r3, r2
 800df9a:	681a      	ldr	r2, [r3, #0]
 800df9c:	4b9c      	ldr	r3, [pc, #624]	@ (800e210 <USB_ActivateEndpoint+0x588>)
 800df9e:	4013      	ands	r3, r2
 800dfa0:	627b      	str	r3, [r7, #36]	@ 0x24
 800dfa2:	687a      	ldr	r2, [r7, #4]
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	781b      	ldrb	r3, [r3, #0]
 800dfa8:	009b      	lsls	r3, r3, #2
 800dfaa:	441a      	add	r2, r3
 800dfac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800dfb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dfb6:	6013      	str	r3, [r2, #0]

      if (ep->num == 0U)
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	781b      	ldrb	r3, [r3, #0]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d11c      	bne.n	800dffa <USB_ActivateEndpoint+0x372>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800dfc0:	687a      	ldr	r2, [r7, #4]
 800dfc2:	683b      	ldr	r3, [r7, #0]
 800dfc4:	781b      	ldrb	r3, [r3, #0]
 800dfc6:	009b      	lsls	r3, r3, #2
 800dfc8:	4413      	add	r3, r2
 800dfca:	681a      	ldr	r2, [r3, #0]
 800dfcc:	4b91      	ldr	r3, [pc, #580]	@ (800e214 <USB_ActivateEndpoint+0x58c>)
 800dfce:	4013      	ands	r3, r2
 800dfd0:	61fb      	str	r3, [r7, #28]
 800dfd2:	69fb      	ldr	r3, [r7, #28]
 800dfd4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800dfd8:	61fb      	str	r3, [r7, #28]
 800dfda:	69fb      	ldr	r3, [r7, #28]
 800dfdc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800dfe0:	61fb      	str	r3, [r7, #28]
 800dfe2:	687a      	ldr	r2, [r7, #4]
 800dfe4:	683b      	ldr	r3, [r7, #0]
 800dfe6:	781b      	ldrb	r3, [r3, #0]
 800dfe8:	009b      	lsls	r3, r3, #2
 800dfea:	441a      	add	r2, r3
 800dfec:	69fb      	ldr	r3, [r7, #28]
 800dfee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dff2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dff6:	6013      	str	r3, [r2, #0]
 800dff8:	e197      	b.n	800e32a <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800dffa:	687a      	ldr	r2, [r7, #4]
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	781b      	ldrb	r3, [r3, #0]
 800e000:	009b      	lsls	r3, r3, #2
 800e002:	4413      	add	r3, r2
 800e004:	681a      	ldr	r2, [r3, #0]
 800e006:	4b83      	ldr	r3, [pc, #524]	@ (800e214 <USB_ActivateEndpoint+0x58c>)
 800e008:	4013      	ands	r3, r2
 800e00a:	623b      	str	r3, [r7, #32]
 800e00c:	6a3b      	ldr	r3, [r7, #32]
 800e00e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e012:	623b      	str	r3, [r7, #32]
 800e014:	687a      	ldr	r2, [r7, #4]
 800e016:	683b      	ldr	r3, [r7, #0]
 800e018:	781b      	ldrb	r3, [r3, #0]
 800e01a:	009b      	lsls	r3, r3, #2
 800e01c:	441a      	add	r2, r3
 800e01e:	6a3b      	ldr	r3, [r7, #32]
 800e020:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e024:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e028:	6013      	str	r3, [r2, #0]
 800e02a:	e17e      	b.n	800e32a <USB_ActivateEndpoint+0x6a2>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	78db      	ldrb	r3, [r3, #3]
 800e030:	2b02      	cmp	r3, #2
 800e032:	d114      	bne.n	800e05e <USB_ActivateEndpoint+0x3d6>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800e034:	687a      	ldr	r2, [r7, #4]
 800e036:	683b      	ldr	r3, [r7, #0]
 800e038:	781b      	ldrb	r3, [r3, #0]
 800e03a:	009b      	lsls	r3, r3, #2
 800e03c:	4413      	add	r3, r2
 800e03e:	681a      	ldr	r2, [r3, #0]
 800e040:	4b73      	ldr	r3, [pc, #460]	@ (800e210 <USB_ActivateEndpoint+0x588>)
 800e042:	4013      	ands	r3, r2
 800e044:	663b      	str	r3, [r7, #96]	@ 0x60
 800e046:	687a      	ldr	r2, [r7, #4]
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	781b      	ldrb	r3, [r3, #0]
 800e04c:	009b      	lsls	r3, r3, #2
 800e04e:	441a      	add	r2, r3
 800e050:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e052:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800e056:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e05a:	6013      	str	r3, [r2, #0]
 800e05c:	e013      	b.n	800e086 <USB_ActivateEndpoint+0x3fe>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800e05e:	687a      	ldr	r2, [r7, #4]
 800e060:	683b      	ldr	r3, [r7, #0]
 800e062:	781b      	ldrb	r3, [r3, #0]
 800e064:	009b      	lsls	r3, r3, #2
 800e066:	4413      	add	r3, r2
 800e068:	681a      	ldr	r2, [r3, #0]
 800e06a:	4b6b      	ldr	r3, [pc, #428]	@ (800e218 <USB_ActivateEndpoint+0x590>)
 800e06c:	4013      	ands	r3, r2
 800e06e:	667b      	str	r3, [r7, #100]	@ 0x64
 800e070:	687a      	ldr	r2, [r7, #4]
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	781b      	ldrb	r3, [r3, #0]
 800e076:	009b      	lsls	r3, r3, #2
 800e078:	441a      	add	r2, r3
 800e07a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e07c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e080:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e084:	6013      	str	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	781b      	ldrb	r3, [r3, #0]
 800e08a:	00db      	lsls	r3, r3, #3
 800e08c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e090:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e094:	681a      	ldr	r2, [r3, #0]
 800e096:	683b      	ldr	r3, [r7, #0]
 800e098:	781b      	ldrb	r3, [r3, #0]
 800e09a:	00db      	lsls	r3, r3, #3
 800e09c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e0a0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e0a4:	0c12      	lsrs	r2, r2, #16
 800e0a6:	0412      	lsls	r2, r2, #16
 800e0a8:	601a      	str	r2, [r3, #0]
 800e0aa:	683b      	ldr	r3, [r7, #0]
 800e0ac:	781b      	ldrb	r3, [r3, #0]
 800e0ae:	00db      	lsls	r3, r3, #3
 800e0b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e0b4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e0b8:	6819      	ldr	r1, [r3, #0]
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	891b      	ldrh	r3, [r3, #8]
 800e0be:	089b      	lsrs	r3, r3, #2
 800e0c0:	b29b      	uxth	r3, r3
 800e0c2:	009a      	lsls	r2, r3, #2
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	781b      	ldrb	r3, [r3, #0]
 800e0c8:	00db      	lsls	r3, r3, #3
 800e0ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e0ce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e0d2:	430a      	orrs	r2, r1
 800e0d4:	601a      	str	r2, [r3, #0]
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	781b      	ldrb	r3, [r3, #0]
 800e0da:	00db      	lsls	r3, r3, #3
 800e0dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e0e0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e0e4:	685a      	ldr	r2, [r3, #4]
 800e0e6:	683b      	ldr	r3, [r7, #0]
 800e0e8:	781b      	ldrb	r3, [r3, #0]
 800e0ea:	00db      	lsls	r3, r3, #3
 800e0ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e0f0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e0f4:	0c12      	lsrs	r2, r2, #16
 800e0f6:	0412      	lsls	r2, r2, #16
 800e0f8:	605a      	str	r2, [r3, #4]
 800e0fa:	683b      	ldr	r3, [r7, #0]
 800e0fc:	781b      	ldrb	r3, [r3, #0]
 800e0fe:	00db      	lsls	r3, r3, #3
 800e100:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e104:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e108:	6859      	ldr	r1, [r3, #4]
 800e10a:	683b      	ldr	r3, [r7, #0]
 800e10c:	895b      	ldrh	r3, [r3, #10]
 800e10e:	089b      	lsrs	r3, r3, #2
 800e110:	b29b      	uxth	r3, r3
 800e112:	009a      	lsls	r2, r3, #2
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	781b      	ldrb	r3, [r3, #0]
 800e118:	00db      	lsls	r3, r3, #3
 800e11a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e11e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e122:	430a      	orrs	r2, r1
 800e124:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 800e126:	683b      	ldr	r3, [r7, #0]
 800e128:	785b      	ldrb	r3, [r3, #1]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d178      	bne.n	800e220 <USB_ActivateEndpoint+0x598>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e12e:	687a      	ldr	r2, [r7, #4]
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	781b      	ldrb	r3, [r3, #0]
 800e134:	009b      	lsls	r3, r3, #2
 800e136:	4413      	add	r3, r2
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	643b      	str	r3, [r7, #64]	@ 0x40
 800e13c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e13e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e142:	2b00      	cmp	r3, #0
 800e144:	d013      	beq.n	800e16e <USB_ActivateEndpoint+0x4e6>
 800e146:	687a      	ldr	r2, [r7, #4]
 800e148:	683b      	ldr	r3, [r7, #0]
 800e14a:	781b      	ldrb	r3, [r3, #0]
 800e14c:	009b      	lsls	r3, r3, #2
 800e14e:	4413      	add	r3, r2
 800e150:	681a      	ldr	r2, [r3, #0]
 800e152:	4b2f      	ldr	r3, [pc, #188]	@ (800e210 <USB_ActivateEndpoint+0x588>)
 800e154:	4013      	ands	r3, r2
 800e156:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e158:	687a      	ldr	r2, [r7, #4]
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	781b      	ldrb	r3, [r3, #0]
 800e15e:	009b      	lsls	r3, r3, #2
 800e160:	441a      	add	r2, r3
 800e162:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e164:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e168:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e16c:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e16e:	687a      	ldr	r2, [r7, #4]
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	781b      	ldrb	r3, [r3, #0]
 800e174:	009b      	lsls	r3, r3, #2
 800e176:	4413      	add	r3, r2
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e17c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e17e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e182:	2b00      	cmp	r3, #0
 800e184:	d013      	beq.n	800e1ae <USB_ActivateEndpoint+0x526>
 800e186:	687a      	ldr	r2, [r7, #4]
 800e188:	683b      	ldr	r3, [r7, #0]
 800e18a:	781b      	ldrb	r3, [r3, #0]
 800e18c:	009b      	lsls	r3, r3, #2
 800e18e:	4413      	add	r3, r2
 800e190:	681a      	ldr	r2, [r3, #0]
 800e192:	4b1f      	ldr	r3, [pc, #124]	@ (800e210 <USB_ActivateEndpoint+0x588>)
 800e194:	4013      	ands	r3, r2
 800e196:	637b      	str	r3, [r7, #52]	@ 0x34
 800e198:	687a      	ldr	r2, [r7, #4]
 800e19a:	683b      	ldr	r3, [r7, #0]
 800e19c:	781b      	ldrb	r3, [r3, #0]
 800e19e:	009b      	lsls	r3, r3, #2
 800e1a0:	441a      	add	r2, r3
 800e1a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e1a8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e1ac:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e1ae:	687a      	ldr	r2, [r7, #4]
 800e1b0:	683b      	ldr	r3, [r7, #0]
 800e1b2:	781b      	ldrb	r3, [r3, #0]
 800e1b4:	009b      	lsls	r3, r3, #2
 800e1b6:	4413      	add	r3, r2
 800e1b8:	681a      	ldr	r2, [r3, #0]
 800e1ba:	4b16      	ldr	r3, [pc, #88]	@ (800e214 <USB_ActivateEndpoint+0x58c>)
 800e1bc:	4013      	ands	r3, r2
 800e1be:	633b      	str	r3, [r7, #48]	@ 0x30
 800e1c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1c2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e1c6:	633b      	str	r3, [r7, #48]	@ 0x30
 800e1c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1ca:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e1ce:	633b      	str	r3, [r7, #48]	@ 0x30
 800e1d0:	687a      	ldr	r2, [r7, #4]
 800e1d2:	683b      	ldr	r3, [r7, #0]
 800e1d4:	781b      	ldrb	r3, [r3, #0]
 800e1d6:	009b      	lsls	r3, r3, #2
 800e1d8:	441a      	add	r2, r3
 800e1da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e1e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e1e4:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e1e6:	687a      	ldr	r2, [r7, #4]
 800e1e8:	683b      	ldr	r3, [r7, #0]
 800e1ea:	781b      	ldrb	r3, [r3, #0]
 800e1ec:	009b      	lsls	r3, r3, #2
 800e1ee:	4413      	add	r3, r2
 800e1f0:	681a      	ldr	r2, [r3, #0]
 800e1f2:	4b0a      	ldr	r3, [pc, #40]	@ (800e21c <USB_ActivateEndpoint+0x594>)
 800e1f4:	4013      	ands	r3, r2
 800e1f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e1f8:	687a      	ldr	r2, [r7, #4]
 800e1fa:	683b      	ldr	r3, [r7, #0]
 800e1fc:	781b      	ldrb	r3, [r3, #0]
 800e1fe:	009b      	lsls	r3, r3, #2
 800e200:	441a      	add	r2, r3
 800e202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e204:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e208:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e20c:	6013      	str	r3, [r2, #0]
 800e20e:	e08c      	b.n	800e32a <USB_ActivateEndpoint+0x6a2>
 800e210:	07ff8f8f 	.word	0x07ff8f8f
 800e214:	07ffbf8f 	.word	0x07ffbf8f
 800e218:	07ff8e8f 	.word	0x07ff8e8f
 800e21c:	07ff8fbf 	.word	0x07ff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e220:	687a      	ldr	r2, [r7, #4]
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	781b      	ldrb	r3, [r3, #0]
 800e226:	009b      	lsls	r3, r3, #2
 800e228:	4413      	add	r3, r2
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e22e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e230:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e234:	2b00      	cmp	r3, #0
 800e236:	d013      	beq.n	800e260 <USB_ActivateEndpoint+0x5d8>
 800e238:	687a      	ldr	r2, [r7, #4]
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	781b      	ldrb	r3, [r3, #0]
 800e23e:	009b      	lsls	r3, r3, #2
 800e240:	4413      	add	r3, r2
 800e242:	681a      	ldr	r2, [r3, #0]
 800e244:	4b3d      	ldr	r3, [pc, #244]	@ (800e33c <USB_ActivateEndpoint+0x6b4>)
 800e246:	4013      	ands	r3, r2
 800e248:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e24a:	687a      	ldr	r2, [r7, #4]
 800e24c:	683b      	ldr	r3, [r7, #0]
 800e24e:	781b      	ldrb	r3, [r3, #0]
 800e250:	009b      	lsls	r3, r3, #2
 800e252:	441a      	add	r2, r3
 800e254:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e256:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e25a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e25e:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e260:	687a      	ldr	r2, [r7, #4]
 800e262:	683b      	ldr	r3, [r7, #0]
 800e264:	781b      	ldrb	r3, [r3, #0]
 800e266:	009b      	lsls	r3, r3, #2
 800e268:	4413      	add	r3, r2
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	657b      	str	r3, [r7, #84]	@ 0x54
 800e26e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e270:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e274:	2b00      	cmp	r3, #0
 800e276:	d013      	beq.n	800e2a0 <USB_ActivateEndpoint+0x618>
 800e278:	687a      	ldr	r2, [r7, #4]
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	781b      	ldrb	r3, [r3, #0]
 800e27e:	009b      	lsls	r3, r3, #2
 800e280:	4413      	add	r3, r2
 800e282:	681a      	ldr	r2, [r3, #0]
 800e284:	4b2d      	ldr	r3, [pc, #180]	@ (800e33c <USB_ActivateEndpoint+0x6b4>)
 800e286:	4013      	ands	r3, r2
 800e288:	653b      	str	r3, [r7, #80]	@ 0x50
 800e28a:	687a      	ldr	r2, [r7, #4]
 800e28c:	683b      	ldr	r3, [r7, #0]
 800e28e:	781b      	ldrb	r3, [r3, #0]
 800e290:	009b      	lsls	r3, r3, #2
 800e292:	441a      	add	r2, r3
 800e294:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e296:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e29a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e29e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e2a0:	683b      	ldr	r3, [r7, #0]
 800e2a2:	78db      	ldrb	r3, [r3, #3]
 800e2a4:	2b01      	cmp	r3, #1
 800e2a6:	d018      	beq.n	800e2da <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e2a8:	687a      	ldr	r2, [r7, #4]
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	781b      	ldrb	r3, [r3, #0]
 800e2ae:	009b      	lsls	r3, r3, #2
 800e2b0:	4413      	add	r3, r2
 800e2b2:	681a      	ldr	r2, [r3, #0]
 800e2b4:	4b22      	ldr	r3, [pc, #136]	@ (800e340 <USB_ActivateEndpoint+0x6b8>)
 800e2b6:	4013      	ands	r3, r2
 800e2b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e2ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e2bc:	f083 0320 	eor.w	r3, r3, #32
 800e2c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e2c2:	687a      	ldr	r2, [r7, #4]
 800e2c4:	683b      	ldr	r3, [r7, #0]
 800e2c6:	781b      	ldrb	r3, [r3, #0]
 800e2c8:	009b      	lsls	r3, r3, #2
 800e2ca:	441a      	add	r2, r3
 800e2cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e2ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e2d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e2d6:	6013      	str	r3, [r2, #0]
 800e2d8:	e013      	b.n	800e302 <USB_ActivateEndpoint+0x67a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e2da:	687a      	ldr	r2, [r7, #4]
 800e2dc:	683b      	ldr	r3, [r7, #0]
 800e2de:	781b      	ldrb	r3, [r3, #0]
 800e2e0:	009b      	lsls	r3, r3, #2
 800e2e2:	4413      	add	r3, r2
 800e2e4:	681a      	ldr	r2, [r3, #0]
 800e2e6:	4b16      	ldr	r3, [pc, #88]	@ (800e340 <USB_ActivateEndpoint+0x6b8>)
 800e2e8:	4013      	ands	r3, r2
 800e2ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e2ec:	687a      	ldr	r2, [r7, #4]
 800e2ee:	683b      	ldr	r3, [r7, #0]
 800e2f0:	781b      	ldrb	r3, [r3, #0]
 800e2f2:	009b      	lsls	r3, r3, #2
 800e2f4:	441a      	add	r2, r3
 800e2f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e2f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e2fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e300:	6013      	str	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e302:	687a      	ldr	r2, [r7, #4]
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	781b      	ldrb	r3, [r3, #0]
 800e308:	009b      	lsls	r3, r3, #2
 800e30a:	4413      	add	r3, r2
 800e30c:	681a      	ldr	r2, [r3, #0]
 800e30e:	4b0d      	ldr	r3, [pc, #52]	@ (800e344 <USB_ActivateEndpoint+0x6bc>)
 800e310:	4013      	ands	r3, r2
 800e312:	647b      	str	r3, [r7, #68]	@ 0x44
 800e314:	687a      	ldr	r2, [r7, #4]
 800e316:	683b      	ldr	r3, [r7, #0]
 800e318:	781b      	ldrb	r3, [r3, #0]
 800e31a:	009b      	lsls	r3, r3, #2
 800e31c:	441a      	add	r2, r3
 800e31e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e320:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e324:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e328:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800e32a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800e32e:	4618      	mov	r0, r3
 800e330:	377c      	adds	r7, #124	@ 0x7c
 800e332:	46bd      	mov	sp, r7
 800e334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e338:	4770      	bx	lr
 800e33a:	bf00      	nop
 800e33c:	07ff8f8f 	.word	0x07ff8f8f
 800e340:	07ff8fbf 	.word	0x07ff8fbf
 800e344:	07ffbf8f 	.word	0x07ffbf8f

0800e348 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800e348:	b480      	push	{r7}
 800e34a:	b097      	sub	sp, #92	@ 0x5c
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
 800e350:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800e352:	683b      	ldr	r3, [r7, #0]
 800e354:	7b1b      	ldrb	r3, [r3, #12]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d16d      	bne.n	800e436 <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in != 0U)
 800e35a:	683b      	ldr	r3, [r7, #0]
 800e35c:	785b      	ldrb	r3, [r3, #1]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d034      	beq.n	800e3cc <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e362:	687a      	ldr	r2, [r7, #4]
 800e364:	683b      	ldr	r3, [r7, #0]
 800e366:	781b      	ldrb	r3, [r3, #0]
 800e368:	009b      	lsls	r3, r3, #2
 800e36a:	4413      	add	r3, r2
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	613b      	str	r3, [r7, #16]
 800e370:	693b      	ldr	r3, [r7, #16]
 800e372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e376:	2b00      	cmp	r3, #0
 800e378:	d013      	beq.n	800e3a2 <USB_DeactivateEndpoint+0x5a>
 800e37a:	687a      	ldr	r2, [r7, #4]
 800e37c:	683b      	ldr	r3, [r7, #0]
 800e37e:	781b      	ldrb	r3, [r3, #0]
 800e380:	009b      	lsls	r3, r3, #2
 800e382:	4413      	add	r3, r2
 800e384:	681a      	ldr	r2, [r3, #0]
 800e386:	4b6d      	ldr	r3, [pc, #436]	@ (800e53c <USB_DeactivateEndpoint+0x1f4>)
 800e388:	4013      	ands	r3, r2
 800e38a:	60fb      	str	r3, [r7, #12]
 800e38c:	687a      	ldr	r2, [r7, #4]
 800e38e:	683b      	ldr	r3, [r7, #0]
 800e390:	781b      	ldrb	r3, [r3, #0]
 800e392:	009b      	lsls	r3, r3, #2
 800e394:	441a      	add	r2, r3
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e39c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e3a0:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e3a2:	687a      	ldr	r2, [r7, #4]
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	781b      	ldrb	r3, [r3, #0]
 800e3a8:	009b      	lsls	r3, r3, #2
 800e3aa:	4413      	add	r3, r2
 800e3ac:	681a      	ldr	r2, [r3, #0]
 800e3ae:	4b64      	ldr	r3, [pc, #400]	@ (800e540 <USB_DeactivateEndpoint+0x1f8>)
 800e3b0:	4013      	ands	r3, r2
 800e3b2:	60bb      	str	r3, [r7, #8]
 800e3b4:	687a      	ldr	r2, [r7, #4]
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	781b      	ldrb	r3, [r3, #0]
 800e3ba:	009b      	lsls	r3, r3, #2
 800e3bc:	441a      	add	r2, r3
 800e3be:	68bb      	ldr	r3, [r7, #8]
 800e3c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e3c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e3c8:	6013      	str	r3, [r2, #0]
 800e3ca:	e139      	b.n	800e640 <USB_DeactivateEndpoint+0x2f8>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e3cc:	687a      	ldr	r2, [r7, #4]
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	781b      	ldrb	r3, [r3, #0]
 800e3d2:	009b      	lsls	r3, r3, #2
 800e3d4:	4413      	add	r3, r2
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	61fb      	str	r3, [r7, #28]
 800e3da:	69fb      	ldr	r3, [r7, #28]
 800e3dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d013      	beq.n	800e40c <USB_DeactivateEndpoint+0xc4>
 800e3e4:	687a      	ldr	r2, [r7, #4]
 800e3e6:	683b      	ldr	r3, [r7, #0]
 800e3e8:	781b      	ldrb	r3, [r3, #0]
 800e3ea:	009b      	lsls	r3, r3, #2
 800e3ec:	4413      	add	r3, r2
 800e3ee:	681a      	ldr	r2, [r3, #0]
 800e3f0:	4b52      	ldr	r3, [pc, #328]	@ (800e53c <USB_DeactivateEndpoint+0x1f4>)
 800e3f2:	4013      	ands	r3, r2
 800e3f4:	61bb      	str	r3, [r7, #24]
 800e3f6:	687a      	ldr	r2, [r7, #4]
 800e3f8:	683b      	ldr	r3, [r7, #0]
 800e3fa:	781b      	ldrb	r3, [r3, #0]
 800e3fc:	009b      	lsls	r3, r3, #2
 800e3fe:	441a      	add	r2, r3
 800e400:	69bb      	ldr	r3, [r7, #24]
 800e402:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e406:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e40a:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e40c:	687a      	ldr	r2, [r7, #4]
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	781b      	ldrb	r3, [r3, #0]
 800e412:	009b      	lsls	r3, r3, #2
 800e414:	4413      	add	r3, r2
 800e416:	681a      	ldr	r2, [r3, #0]
 800e418:	4b4a      	ldr	r3, [pc, #296]	@ (800e544 <USB_DeactivateEndpoint+0x1fc>)
 800e41a:	4013      	ands	r3, r2
 800e41c:	617b      	str	r3, [r7, #20]
 800e41e:	687a      	ldr	r2, [r7, #4]
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	781b      	ldrb	r3, [r3, #0]
 800e424:	009b      	lsls	r3, r3, #2
 800e426:	441a      	add	r2, r3
 800e428:	697b      	ldr	r3, [r7, #20]
 800e42a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e42e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e432:	6013      	str	r3, [r2, #0]
 800e434:	e104      	b.n	800e640 <USB_DeactivateEndpoint+0x2f8>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800e436:	683b      	ldr	r3, [r7, #0]
 800e438:	785b      	ldrb	r3, [r3, #1]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	f040 8084 	bne.w	800e548 <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e440:	687a      	ldr	r2, [r7, #4]
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	781b      	ldrb	r3, [r3, #0]
 800e446:	009b      	lsls	r3, r3, #2
 800e448:	4413      	add	r3, r2
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e44e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e450:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e454:	2b00      	cmp	r3, #0
 800e456:	d013      	beq.n	800e480 <USB_DeactivateEndpoint+0x138>
 800e458:	687a      	ldr	r2, [r7, #4]
 800e45a:	683b      	ldr	r3, [r7, #0]
 800e45c:	781b      	ldrb	r3, [r3, #0]
 800e45e:	009b      	lsls	r3, r3, #2
 800e460:	4413      	add	r3, r2
 800e462:	681a      	ldr	r2, [r3, #0]
 800e464:	4b35      	ldr	r3, [pc, #212]	@ (800e53c <USB_DeactivateEndpoint+0x1f4>)
 800e466:	4013      	ands	r3, r2
 800e468:	637b      	str	r3, [r7, #52]	@ 0x34
 800e46a:	687a      	ldr	r2, [r7, #4]
 800e46c:	683b      	ldr	r3, [r7, #0]
 800e46e:	781b      	ldrb	r3, [r3, #0]
 800e470:	009b      	lsls	r3, r3, #2
 800e472:	441a      	add	r2, r3
 800e474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e476:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e47a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e47e:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e480:	687a      	ldr	r2, [r7, #4]
 800e482:	683b      	ldr	r3, [r7, #0]
 800e484:	781b      	ldrb	r3, [r3, #0]
 800e486:	009b      	lsls	r3, r3, #2
 800e488:	4413      	add	r3, r2
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	633b      	str	r3, [r7, #48]	@ 0x30
 800e48e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e494:	2b00      	cmp	r3, #0
 800e496:	d013      	beq.n	800e4c0 <USB_DeactivateEndpoint+0x178>
 800e498:	687a      	ldr	r2, [r7, #4]
 800e49a:	683b      	ldr	r3, [r7, #0]
 800e49c:	781b      	ldrb	r3, [r3, #0]
 800e49e:	009b      	lsls	r3, r3, #2
 800e4a0:	4413      	add	r3, r2
 800e4a2:	681a      	ldr	r2, [r3, #0]
 800e4a4:	4b25      	ldr	r3, [pc, #148]	@ (800e53c <USB_DeactivateEndpoint+0x1f4>)
 800e4a6:	4013      	ands	r3, r2
 800e4a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e4aa:	687a      	ldr	r2, [r7, #4]
 800e4ac:	683b      	ldr	r3, [r7, #0]
 800e4ae:	781b      	ldrb	r3, [r3, #0]
 800e4b0:	009b      	lsls	r3, r3, #2
 800e4b2:	441a      	add	r2, r3
 800e4b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e4ba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e4be:	6013      	str	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800e4c0:	687a      	ldr	r2, [r7, #4]
 800e4c2:	683b      	ldr	r3, [r7, #0]
 800e4c4:	781b      	ldrb	r3, [r3, #0]
 800e4c6:	009b      	lsls	r3, r3, #2
 800e4c8:	4413      	add	r3, r2
 800e4ca:	681a      	ldr	r2, [r3, #0]
 800e4cc:	4b1b      	ldr	r3, [pc, #108]	@ (800e53c <USB_DeactivateEndpoint+0x1f4>)
 800e4ce:	4013      	ands	r3, r2
 800e4d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e4d2:	687a      	ldr	r2, [r7, #4]
 800e4d4:	683b      	ldr	r3, [r7, #0]
 800e4d6:	781b      	ldrb	r3, [r3, #0]
 800e4d8:	009b      	lsls	r3, r3, #2
 800e4da:	441a      	add	r2, r3
 800e4dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e4e2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e4e6:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e4e8:	687a      	ldr	r2, [r7, #4]
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	781b      	ldrb	r3, [r3, #0]
 800e4ee:	009b      	lsls	r3, r3, #2
 800e4f0:	4413      	add	r3, r2
 800e4f2:	681a      	ldr	r2, [r3, #0]
 800e4f4:	4b13      	ldr	r3, [pc, #76]	@ (800e544 <USB_DeactivateEndpoint+0x1fc>)
 800e4f6:	4013      	ands	r3, r2
 800e4f8:	627b      	str	r3, [r7, #36]	@ 0x24
 800e4fa:	687a      	ldr	r2, [r7, #4]
 800e4fc:	683b      	ldr	r3, [r7, #0]
 800e4fe:	781b      	ldrb	r3, [r3, #0]
 800e500:	009b      	lsls	r3, r3, #2
 800e502:	441a      	add	r2, r3
 800e504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e506:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e50a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e50e:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e510:	687a      	ldr	r2, [r7, #4]
 800e512:	683b      	ldr	r3, [r7, #0]
 800e514:	781b      	ldrb	r3, [r3, #0]
 800e516:	009b      	lsls	r3, r3, #2
 800e518:	4413      	add	r3, r2
 800e51a:	681a      	ldr	r2, [r3, #0]
 800e51c:	4b08      	ldr	r3, [pc, #32]	@ (800e540 <USB_DeactivateEndpoint+0x1f8>)
 800e51e:	4013      	ands	r3, r2
 800e520:	623b      	str	r3, [r7, #32]
 800e522:	687a      	ldr	r2, [r7, #4]
 800e524:	683b      	ldr	r3, [r7, #0]
 800e526:	781b      	ldrb	r3, [r3, #0]
 800e528:	009b      	lsls	r3, r3, #2
 800e52a:	441a      	add	r2, r3
 800e52c:	6a3b      	ldr	r3, [r7, #32]
 800e52e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e536:	6013      	str	r3, [r2, #0]
 800e538:	e082      	b.n	800e640 <USB_DeactivateEndpoint+0x2f8>
 800e53a:	bf00      	nop
 800e53c:	07ff8f8f 	.word	0x07ff8f8f
 800e540:	07ff8fbf 	.word	0x07ff8fbf
 800e544:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e548:	687a      	ldr	r2, [r7, #4]
 800e54a:	683b      	ldr	r3, [r7, #0]
 800e54c:	781b      	ldrb	r3, [r3, #0]
 800e54e:	009b      	lsls	r3, r3, #2
 800e550:	4413      	add	r3, r2
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	657b      	str	r3, [r7, #84]	@ 0x54
 800e556:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e558:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d013      	beq.n	800e588 <USB_DeactivateEndpoint+0x240>
 800e560:	687a      	ldr	r2, [r7, #4]
 800e562:	683b      	ldr	r3, [r7, #0]
 800e564:	781b      	ldrb	r3, [r3, #0]
 800e566:	009b      	lsls	r3, r3, #2
 800e568:	4413      	add	r3, r2
 800e56a:	681a      	ldr	r2, [r3, #0]
 800e56c:	4b38      	ldr	r3, [pc, #224]	@ (800e650 <USB_DeactivateEndpoint+0x308>)
 800e56e:	4013      	ands	r3, r2
 800e570:	653b      	str	r3, [r7, #80]	@ 0x50
 800e572:	687a      	ldr	r2, [r7, #4]
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	781b      	ldrb	r3, [r3, #0]
 800e578:	009b      	lsls	r3, r3, #2
 800e57a:	441a      	add	r2, r3
 800e57c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e57e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e582:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e586:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e588:	687a      	ldr	r2, [r7, #4]
 800e58a:	683b      	ldr	r3, [r7, #0]
 800e58c:	781b      	ldrb	r3, [r3, #0]
 800e58e:	009b      	lsls	r3, r3, #2
 800e590:	4413      	add	r3, r2
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e596:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e598:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d013      	beq.n	800e5c8 <USB_DeactivateEndpoint+0x280>
 800e5a0:	687a      	ldr	r2, [r7, #4]
 800e5a2:	683b      	ldr	r3, [r7, #0]
 800e5a4:	781b      	ldrb	r3, [r3, #0]
 800e5a6:	009b      	lsls	r3, r3, #2
 800e5a8:	4413      	add	r3, r2
 800e5aa:	681a      	ldr	r2, [r3, #0]
 800e5ac:	4b28      	ldr	r3, [pc, #160]	@ (800e650 <USB_DeactivateEndpoint+0x308>)
 800e5ae:	4013      	ands	r3, r2
 800e5b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e5b2:	687a      	ldr	r2, [r7, #4]
 800e5b4:	683b      	ldr	r3, [r7, #0]
 800e5b6:	781b      	ldrb	r3, [r3, #0]
 800e5b8:	009b      	lsls	r3, r3, #2
 800e5ba:	441a      	add	r2, r3
 800e5bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e5be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e5c2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e5c6:	6013      	str	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800e5c8:	687a      	ldr	r2, [r7, #4]
 800e5ca:	683b      	ldr	r3, [r7, #0]
 800e5cc:	781b      	ldrb	r3, [r3, #0]
 800e5ce:	009b      	lsls	r3, r3, #2
 800e5d0:	4413      	add	r3, r2
 800e5d2:	681a      	ldr	r2, [r3, #0]
 800e5d4:	4b1e      	ldr	r3, [pc, #120]	@ (800e650 <USB_DeactivateEndpoint+0x308>)
 800e5d6:	4013      	ands	r3, r2
 800e5d8:	647b      	str	r3, [r7, #68]	@ 0x44
 800e5da:	687a      	ldr	r2, [r7, #4]
 800e5dc:	683b      	ldr	r3, [r7, #0]
 800e5de:	781b      	ldrb	r3, [r3, #0]
 800e5e0:	009b      	lsls	r3, r3, #2
 800e5e2:	441a      	add	r2, r3
 800e5e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e5e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e5ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e5ee:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e5f0:	687a      	ldr	r2, [r7, #4]
 800e5f2:	683b      	ldr	r3, [r7, #0]
 800e5f4:	781b      	ldrb	r3, [r3, #0]
 800e5f6:	009b      	lsls	r3, r3, #2
 800e5f8:	4413      	add	r3, r2
 800e5fa:	681a      	ldr	r2, [r3, #0]
 800e5fc:	4b15      	ldr	r3, [pc, #84]	@ (800e654 <USB_DeactivateEndpoint+0x30c>)
 800e5fe:	4013      	ands	r3, r2
 800e600:	643b      	str	r3, [r7, #64]	@ 0x40
 800e602:	687a      	ldr	r2, [r7, #4]
 800e604:	683b      	ldr	r3, [r7, #0]
 800e606:	781b      	ldrb	r3, [r3, #0]
 800e608:	009b      	lsls	r3, r3, #2
 800e60a:	441a      	add	r2, r3
 800e60c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e60e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e612:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e616:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e618:	687a      	ldr	r2, [r7, #4]
 800e61a:	683b      	ldr	r3, [r7, #0]
 800e61c:	781b      	ldrb	r3, [r3, #0]
 800e61e:	009b      	lsls	r3, r3, #2
 800e620:	4413      	add	r3, r2
 800e622:	681a      	ldr	r2, [r3, #0]
 800e624:	4b0c      	ldr	r3, [pc, #48]	@ (800e658 <USB_DeactivateEndpoint+0x310>)
 800e626:	4013      	ands	r3, r2
 800e628:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e62a:	687a      	ldr	r2, [r7, #4]
 800e62c:	683b      	ldr	r3, [r7, #0]
 800e62e:	781b      	ldrb	r3, [r3, #0]
 800e630:	009b      	lsls	r3, r3, #2
 800e632:	441a      	add	r2, r3
 800e634:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e636:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e63a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e63e:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800e640:	2300      	movs	r3, #0
}
 800e642:	4618      	mov	r0, r3
 800e644:	375c      	adds	r7, #92	@ 0x5c
 800e646:	46bd      	mov	sp, r7
 800e648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64c:	4770      	bx	lr
 800e64e:	bf00      	nop
 800e650:	07ff8f8f 	.word	0x07ff8f8f
 800e654:	07ff8fbf 	.word	0x07ff8fbf
 800e658:	07ffbf8f 	.word	0x07ffbf8f

0800e65c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b096      	sub	sp, #88	@ 0x58
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
 800e664:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e666:	683b      	ldr	r3, [r7, #0]
 800e668:	785b      	ldrb	r3, [r3, #1]
 800e66a:	2b01      	cmp	r3, #1
 800e66c:	f040 84ed 	bne.w	800f04a <USB_EPStartXfer+0x9ee>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800e670:	683b      	ldr	r3, [r7, #0]
 800e672:	699a      	ldr	r2, [r3, #24]
 800e674:	683b      	ldr	r3, [r7, #0]
 800e676:	691b      	ldr	r3, [r3, #16]
 800e678:	429a      	cmp	r2, r3
 800e67a:	d903      	bls.n	800e684 <USB_EPStartXfer+0x28>
    {
      len = ep->maxpacket;
 800e67c:	683b      	ldr	r3, [r7, #0]
 800e67e:	691b      	ldr	r3, [r3, #16]
 800e680:	657b      	str	r3, [r7, #84]	@ 0x54
 800e682:	e002      	b.n	800e68a <USB_EPStartXfer+0x2e>
    }
    else
    {
      len = ep->xfer_len;
 800e684:	683b      	ldr	r3, [r7, #0]
 800e686:	699b      	ldr	r3, [r3, #24]
 800e688:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800e68a:	683b      	ldr	r3, [r7, #0]
 800e68c:	7b1b      	ldrb	r3, [r3, #12]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d12e      	bne.n	800e6f0 <USB_EPStartXfer+0x94>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800e692:	683b      	ldr	r3, [r7, #0]
 800e694:	6959      	ldr	r1, [r3, #20]
 800e696:	683b      	ldr	r3, [r7, #0]
 800e698:	88da      	ldrh	r2, [r3, #6]
 800e69a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e69c:	b29b      	uxth	r3, r3
 800e69e:	6878      	ldr	r0, [r7, #4]
 800e6a0:	f001 f963 	bl	800f96a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800e6a4:	683b      	ldr	r3, [r7, #0]
 800e6a6:	781b      	ldrb	r3, [r3, #0]
 800e6a8:	00db      	lsls	r3, r3, #3
 800e6aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e6ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e6b2:	681a      	ldr	r2, [r3, #0]
 800e6b4:	683b      	ldr	r3, [r7, #0]
 800e6b6:	781b      	ldrb	r3, [r3, #0]
 800e6b8:	00db      	lsls	r3, r3, #3
 800e6ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e6be:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e6c2:	b292      	uxth	r2, r2
 800e6c4:	601a      	str	r2, [r3, #0]
 800e6c6:	683b      	ldr	r3, [r7, #0]
 800e6c8:	781b      	ldrb	r3, [r3, #0]
 800e6ca:	00db      	lsls	r3, r3, #3
 800e6cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e6d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e6d4:	6819      	ldr	r1, [r3, #0]
 800e6d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e6d8:	041a      	lsls	r2, r3, #16
 800e6da:	683b      	ldr	r3, [r7, #0]
 800e6dc:	781b      	ldrb	r3, [r3, #0]
 800e6de:	00db      	lsls	r3, r3, #3
 800e6e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e6e4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e6e8:	430a      	orrs	r2, r1
 800e6ea:	601a      	str	r2, [r3, #0]
 800e6ec:	f000 bc90 	b.w	800f010 <USB_EPStartXfer+0x9b4>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800e6f0:	683b      	ldr	r3, [r7, #0]
 800e6f2:	78db      	ldrb	r3, [r3, #3]
 800e6f4:	2b02      	cmp	r3, #2
 800e6f6:	f040 8332 	bne.w	800ed5e <USB_EPStartXfer+0x702>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800e6fa:	683b      	ldr	r3, [r7, #0]
 800e6fc:	6a1a      	ldr	r2, [r3, #32]
 800e6fe:	683b      	ldr	r3, [r7, #0]
 800e700:	691b      	ldr	r3, [r3, #16]
 800e702:	429a      	cmp	r2, r3
 800e704:	f240 82e4 	bls.w	800ecd0 <USB_EPStartXfer+0x674>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800e708:	687a      	ldr	r2, [r7, #4]
 800e70a:	683b      	ldr	r3, [r7, #0]
 800e70c:	781b      	ldrb	r3, [r3, #0]
 800e70e:	009b      	lsls	r3, r3, #2
 800e710:	4413      	add	r3, r2
 800e712:	681a      	ldr	r2, [r3, #0]
 800e714:	4ba4      	ldr	r3, [pc, #656]	@ (800e9a8 <USB_EPStartXfer+0x34c>)
 800e716:	4013      	ands	r3, r2
 800e718:	613b      	str	r3, [r7, #16]
 800e71a:	687a      	ldr	r2, [r7, #4]
 800e71c:	683b      	ldr	r3, [r7, #0]
 800e71e:	781b      	ldrb	r3, [r3, #0]
 800e720:	009b      	lsls	r3, r3, #2
 800e722:	441a      	add	r2, r3
 800e724:	693b      	ldr	r3, [r7, #16]
 800e726:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800e72a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e72e:	6013      	str	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800e730:	683b      	ldr	r3, [r7, #0]
 800e732:	6a1a      	ldr	r2, [r3, #32]
 800e734:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e736:	1ad2      	subs	r2, r2, r3
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800e73c:	687a      	ldr	r2, [r7, #4]
 800e73e:	683b      	ldr	r3, [r7, #0]
 800e740:	781b      	ldrb	r3, [r3, #0]
 800e742:	009b      	lsls	r3, r3, #2
 800e744:	4413      	add	r3, r2
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	f000 8161 	beq.w	800ea14 <USB_EPStartXfer+0x3b8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e752:	683b      	ldr	r3, [r7, #0]
 800e754:	785b      	ldrb	r3, [r3, #1]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d16a      	bne.n	800e830 <USB_EPStartXfer+0x1d4>
 800e75a:	683b      	ldr	r3, [r7, #0]
 800e75c:	781b      	ldrb	r3, [r3, #0]
 800e75e:	00db      	lsls	r3, r3, #3
 800e760:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e764:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e768:	685a      	ldr	r2, [r3, #4]
 800e76a:	683b      	ldr	r3, [r7, #0]
 800e76c:	781b      	ldrb	r3, [r3, #0]
 800e76e:	00db      	lsls	r3, r3, #3
 800e770:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e774:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e778:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800e77c:	605a      	str	r2, [r3, #4]
 800e77e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e780:	2b00      	cmp	r3, #0
 800e782:	d112      	bne.n	800e7aa <USB_EPStartXfer+0x14e>
 800e784:	683b      	ldr	r3, [r7, #0]
 800e786:	781b      	ldrb	r3, [r3, #0]
 800e788:	00db      	lsls	r3, r3, #3
 800e78a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e78e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e792:	685a      	ldr	r2, [r3, #4]
 800e794:	683b      	ldr	r3, [r7, #0]
 800e796:	781b      	ldrb	r3, [r3, #0]
 800e798:	00db      	lsls	r3, r3, #3
 800e79a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e79e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e7a2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e7a6:	605a      	str	r2, [r3, #4]
 800e7a8:	e06a      	b.n	800e880 <USB_EPStartXfer+0x224>
 800e7aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e7ac:	2b3e      	cmp	r3, #62	@ 0x3e
 800e7ae:	d81e      	bhi.n	800e7ee <USB_EPStartXfer+0x192>
 800e7b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e7b2:	085b      	lsrs	r3, r3, #1
 800e7b4:	653b      	str	r3, [r7, #80]	@ 0x50
 800e7b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e7b8:	f003 0301 	and.w	r3, r3, #1
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d002      	beq.n	800e7c6 <USB_EPStartXfer+0x16a>
 800e7c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e7c2:	3301      	adds	r3, #1
 800e7c4:	653b      	str	r3, [r7, #80]	@ 0x50
 800e7c6:	683b      	ldr	r3, [r7, #0]
 800e7c8:	781b      	ldrb	r3, [r3, #0]
 800e7ca:	00db      	lsls	r3, r3, #3
 800e7cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e7d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e7d4:	6859      	ldr	r1, [r3, #4]
 800e7d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e7d8:	069a      	lsls	r2, r3, #26
 800e7da:	683b      	ldr	r3, [r7, #0]
 800e7dc:	781b      	ldrb	r3, [r3, #0]
 800e7de:	00db      	lsls	r3, r3, #3
 800e7e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e7e4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e7e8:	430a      	orrs	r2, r1
 800e7ea:	605a      	str	r2, [r3, #4]
 800e7ec:	e048      	b.n	800e880 <USB_EPStartXfer+0x224>
 800e7ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e7f0:	095b      	lsrs	r3, r3, #5
 800e7f2:	653b      	str	r3, [r7, #80]	@ 0x50
 800e7f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e7f6:	f003 031f 	and.w	r3, r3, #31
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d102      	bne.n	800e804 <USB_EPStartXfer+0x1a8>
 800e7fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e800:	3b01      	subs	r3, #1
 800e802:	653b      	str	r3, [r7, #80]	@ 0x50
 800e804:	683b      	ldr	r3, [r7, #0]
 800e806:	781b      	ldrb	r3, [r3, #0]
 800e808:	00db      	lsls	r3, r3, #3
 800e80a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e80e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e812:	685a      	ldr	r2, [r3, #4]
 800e814:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e816:	069b      	lsls	r3, r3, #26
 800e818:	431a      	orrs	r2, r3
 800e81a:	683b      	ldr	r3, [r7, #0]
 800e81c:	781b      	ldrb	r3, [r3, #0]
 800e81e:	00db      	lsls	r3, r3, #3
 800e820:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e824:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e828:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e82c:	605a      	str	r2, [r3, #4]
 800e82e:	e027      	b.n	800e880 <USB_EPStartXfer+0x224>
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	785b      	ldrb	r3, [r3, #1]
 800e834:	2b01      	cmp	r3, #1
 800e836:	d123      	bne.n	800e880 <USB_EPStartXfer+0x224>
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	781b      	ldrb	r3, [r3, #0]
 800e83c:	00db      	lsls	r3, r3, #3
 800e83e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e842:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e846:	685a      	ldr	r2, [r3, #4]
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	781b      	ldrb	r3, [r3, #0]
 800e84c:	00db      	lsls	r3, r3, #3
 800e84e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e852:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e856:	b292      	uxth	r2, r2
 800e858:	605a      	str	r2, [r3, #4]
 800e85a:	683b      	ldr	r3, [r7, #0]
 800e85c:	781b      	ldrb	r3, [r3, #0]
 800e85e:	00db      	lsls	r3, r3, #3
 800e860:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e864:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e868:	6859      	ldr	r1, [r3, #4]
 800e86a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e86c:	041a      	lsls	r2, r3, #16
 800e86e:	683b      	ldr	r3, [r7, #0]
 800e870:	781b      	ldrb	r3, [r3, #0]
 800e872:	00db      	lsls	r3, r3, #3
 800e874:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e878:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e87c:	430a      	orrs	r2, r1
 800e87e:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	895b      	ldrh	r3, [r3, #10]
 800e884:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e886:	683b      	ldr	r3, [r7, #0]
 800e888:	6959      	ldr	r1, [r3, #20]
 800e88a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e88c:	b29b      	uxth	r3, r3
 800e88e:	8b7a      	ldrh	r2, [r7, #26]
 800e890:	6878      	ldr	r0, [r7, #4]
 800e892:	f001 f86a 	bl	800f96a <USB_WritePMA>
            ep->xfer_buff += len;
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	695a      	ldr	r2, [r3, #20]
 800e89a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e89c:	441a      	add	r2, r3
 800e89e:	683b      	ldr	r3, [r7, #0]
 800e8a0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	6a1a      	ldr	r2, [r3, #32]
 800e8a6:	683b      	ldr	r3, [r7, #0]
 800e8a8:	691b      	ldr	r3, [r3, #16]
 800e8aa:	429a      	cmp	r2, r3
 800e8ac:	d906      	bls.n	800e8bc <USB_EPStartXfer+0x260>
            {
              ep->xfer_len_db -= len;
 800e8ae:	683b      	ldr	r3, [r7, #0]
 800e8b0:	6a1a      	ldr	r2, [r3, #32]
 800e8b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8b4:	1ad2      	subs	r2, r2, r3
 800e8b6:	683b      	ldr	r3, [r7, #0]
 800e8b8:	621a      	str	r2, [r3, #32]
 800e8ba:	e005      	b.n	800e8c8 <USB_EPStartXfer+0x26c>
            }
            else
            {
              len = ep->xfer_len_db;
 800e8bc:	683b      	ldr	r3, [r7, #0]
 800e8be:	6a1b      	ldr	r3, [r3, #32]
 800e8c0:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800e8c2:	683b      	ldr	r3, [r7, #0]
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e8c8:	683b      	ldr	r3, [r7, #0]
 800e8ca:	785b      	ldrb	r3, [r3, #1]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d16d      	bne.n	800e9ac <USB_EPStartXfer+0x350>
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	781b      	ldrb	r3, [r3, #0]
 800e8d4:	00db      	lsls	r3, r3, #3
 800e8d6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e8da:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e8de:	681a      	ldr	r2, [r3, #0]
 800e8e0:	683b      	ldr	r3, [r7, #0]
 800e8e2:	781b      	ldrb	r3, [r3, #0]
 800e8e4:	00db      	lsls	r3, r3, #3
 800e8e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e8ea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e8ee:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800e8f2:	601a      	str	r2, [r3, #0]
 800e8f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d112      	bne.n	800e920 <USB_EPStartXfer+0x2c4>
 800e8fa:	683b      	ldr	r3, [r7, #0]
 800e8fc:	781b      	ldrb	r3, [r3, #0]
 800e8fe:	00db      	lsls	r3, r3, #3
 800e900:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e904:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e908:	681a      	ldr	r2, [r3, #0]
 800e90a:	683b      	ldr	r3, [r7, #0]
 800e90c:	781b      	ldrb	r3, [r3, #0]
 800e90e:	00db      	lsls	r3, r3, #3
 800e910:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e914:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e918:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e91c:	601a      	str	r2, [r3, #0]
 800e91e:	e06d      	b.n	800e9fc <USB_EPStartXfer+0x3a0>
 800e920:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e922:	2b3e      	cmp	r3, #62	@ 0x3e
 800e924:	d81e      	bhi.n	800e964 <USB_EPStartXfer+0x308>
 800e926:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e928:	085b      	lsrs	r3, r3, #1
 800e92a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e92c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e92e:	f003 0301 	and.w	r3, r3, #1
 800e932:	2b00      	cmp	r3, #0
 800e934:	d002      	beq.n	800e93c <USB_EPStartXfer+0x2e0>
 800e936:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e938:	3301      	adds	r3, #1
 800e93a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e93c:	683b      	ldr	r3, [r7, #0]
 800e93e:	781b      	ldrb	r3, [r3, #0]
 800e940:	00db      	lsls	r3, r3, #3
 800e942:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e946:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e94a:	6819      	ldr	r1, [r3, #0]
 800e94c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e94e:	069a      	lsls	r2, r3, #26
 800e950:	683b      	ldr	r3, [r7, #0]
 800e952:	781b      	ldrb	r3, [r3, #0]
 800e954:	00db      	lsls	r3, r3, #3
 800e956:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e95a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e95e:	430a      	orrs	r2, r1
 800e960:	601a      	str	r2, [r3, #0]
 800e962:	e04b      	b.n	800e9fc <USB_EPStartXfer+0x3a0>
 800e964:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e966:	095b      	lsrs	r3, r3, #5
 800e968:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e96a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e96c:	f003 031f 	and.w	r3, r3, #31
 800e970:	2b00      	cmp	r3, #0
 800e972:	d102      	bne.n	800e97a <USB_EPStartXfer+0x31e>
 800e974:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e976:	3b01      	subs	r3, #1
 800e978:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e97a:	683b      	ldr	r3, [r7, #0]
 800e97c:	781b      	ldrb	r3, [r3, #0]
 800e97e:	00db      	lsls	r3, r3, #3
 800e980:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e984:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e988:	681a      	ldr	r2, [r3, #0]
 800e98a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e98c:	069b      	lsls	r3, r3, #26
 800e98e:	431a      	orrs	r2, r3
 800e990:	683b      	ldr	r3, [r7, #0]
 800e992:	781b      	ldrb	r3, [r3, #0]
 800e994:	00db      	lsls	r3, r3, #3
 800e996:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e99a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e99e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e9a2:	601a      	str	r2, [r3, #0]
 800e9a4:	e02a      	b.n	800e9fc <USB_EPStartXfer+0x3a0>
 800e9a6:	bf00      	nop
 800e9a8:	07ff8f8f 	.word	0x07ff8f8f
 800e9ac:	683b      	ldr	r3, [r7, #0]
 800e9ae:	785b      	ldrb	r3, [r3, #1]
 800e9b0:	2b01      	cmp	r3, #1
 800e9b2:	d123      	bne.n	800e9fc <USB_EPStartXfer+0x3a0>
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	781b      	ldrb	r3, [r3, #0]
 800e9b8:	00db      	lsls	r3, r3, #3
 800e9ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e9be:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e9c2:	681a      	ldr	r2, [r3, #0]
 800e9c4:	683b      	ldr	r3, [r7, #0]
 800e9c6:	781b      	ldrb	r3, [r3, #0]
 800e9c8:	00db      	lsls	r3, r3, #3
 800e9ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e9ce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e9d2:	b292      	uxth	r2, r2
 800e9d4:	601a      	str	r2, [r3, #0]
 800e9d6:	683b      	ldr	r3, [r7, #0]
 800e9d8:	781b      	ldrb	r3, [r3, #0]
 800e9da:	00db      	lsls	r3, r3, #3
 800e9dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e9e0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e9e4:	6819      	ldr	r1, [r3, #0]
 800e9e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9e8:	041a      	lsls	r2, r3, #16
 800e9ea:	683b      	ldr	r3, [r7, #0]
 800e9ec:	781b      	ldrb	r3, [r3, #0]
 800e9ee:	00db      	lsls	r3, r3, #3
 800e9f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e9f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e9f8:	430a      	orrs	r2, r1
 800e9fa:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	891b      	ldrh	r3, [r3, #8]
 800ea00:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ea02:	683b      	ldr	r3, [r7, #0]
 800ea04:	6959      	ldr	r1, [r3, #20]
 800ea06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea08:	b29b      	uxth	r3, r3
 800ea0a:	8b7a      	ldrh	r2, [r7, #26]
 800ea0c:	6878      	ldr	r0, [r7, #4]
 800ea0e:	f000 ffac 	bl	800f96a <USB_WritePMA>
 800ea12:	e2fd      	b.n	800f010 <USB_EPStartXfer+0x9b4>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ea14:	683b      	ldr	r3, [r7, #0]
 800ea16:	785b      	ldrb	r3, [r3, #1]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d16a      	bne.n	800eaf2 <USB_EPStartXfer+0x496>
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	781b      	ldrb	r3, [r3, #0]
 800ea20:	00db      	lsls	r3, r3, #3
 800ea22:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ea26:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea2a:	681a      	ldr	r2, [r3, #0]
 800ea2c:	683b      	ldr	r3, [r7, #0]
 800ea2e:	781b      	ldrb	r3, [r3, #0]
 800ea30:	00db      	lsls	r3, r3, #3
 800ea32:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ea36:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea3a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800ea3e:	601a      	str	r2, [r3, #0]
 800ea40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d112      	bne.n	800ea6c <USB_EPStartXfer+0x410>
 800ea46:	683b      	ldr	r3, [r7, #0]
 800ea48:	781b      	ldrb	r3, [r3, #0]
 800ea4a:	00db      	lsls	r3, r3, #3
 800ea4c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ea50:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea54:	681a      	ldr	r2, [r3, #0]
 800ea56:	683b      	ldr	r3, [r7, #0]
 800ea58:	781b      	ldrb	r3, [r3, #0]
 800ea5a:	00db      	lsls	r3, r3, #3
 800ea5c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ea60:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea64:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ea68:	601a      	str	r2, [r3, #0]
 800ea6a:	e06a      	b.n	800eb42 <USB_EPStartXfer+0x4e6>
 800ea6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea6e:	2b3e      	cmp	r3, #62	@ 0x3e
 800ea70:	d81e      	bhi.n	800eab0 <USB_EPStartXfer+0x454>
 800ea72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea74:	085b      	lsrs	r3, r3, #1
 800ea76:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ea78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea7a:	f003 0301 	and.w	r3, r3, #1
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d002      	beq.n	800ea88 <USB_EPStartXfer+0x42c>
 800ea82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ea84:	3301      	adds	r3, #1
 800ea86:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ea88:	683b      	ldr	r3, [r7, #0]
 800ea8a:	781b      	ldrb	r3, [r3, #0]
 800ea8c:	00db      	lsls	r3, r3, #3
 800ea8e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ea92:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea96:	6819      	ldr	r1, [r3, #0]
 800ea98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ea9a:	069a      	lsls	r2, r3, #26
 800ea9c:	683b      	ldr	r3, [r7, #0]
 800ea9e:	781b      	ldrb	r3, [r3, #0]
 800eaa0:	00db      	lsls	r3, r3, #3
 800eaa2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eaa6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eaaa:	430a      	orrs	r2, r1
 800eaac:	601a      	str	r2, [r3, #0]
 800eaae:	e048      	b.n	800eb42 <USB_EPStartXfer+0x4e6>
 800eab0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eab2:	095b      	lsrs	r3, r3, #5
 800eab4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800eab6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eab8:	f003 031f 	and.w	r3, r3, #31
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d102      	bne.n	800eac6 <USB_EPStartXfer+0x46a>
 800eac0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eac2:	3b01      	subs	r3, #1
 800eac4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800eac6:	683b      	ldr	r3, [r7, #0]
 800eac8:	781b      	ldrb	r3, [r3, #0]
 800eaca:	00db      	lsls	r3, r3, #3
 800eacc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ead0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ead4:	681a      	ldr	r2, [r3, #0]
 800ead6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ead8:	069b      	lsls	r3, r3, #26
 800eada:	431a      	orrs	r2, r3
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	781b      	ldrb	r3, [r3, #0]
 800eae0:	00db      	lsls	r3, r3, #3
 800eae2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eae6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eaea:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800eaee:	601a      	str	r2, [r3, #0]
 800eaf0:	e027      	b.n	800eb42 <USB_EPStartXfer+0x4e6>
 800eaf2:	683b      	ldr	r3, [r7, #0]
 800eaf4:	785b      	ldrb	r3, [r3, #1]
 800eaf6:	2b01      	cmp	r3, #1
 800eaf8:	d123      	bne.n	800eb42 <USB_EPStartXfer+0x4e6>
 800eafa:	683b      	ldr	r3, [r7, #0]
 800eafc:	781b      	ldrb	r3, [r3, #0]
 800eafe:	00db      	lsls	r3, r3, #3
 800eb00:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eb04:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eb08:	681a      	ldr	r2, [r3, #0]
 800eb0a:	683b      	ldr	r3, [r7, #0]
 800eb0c:	781b      	ldrb	r3, [r3, #0]
 800eb0e:	00db      	lsls	r3, r3, #3
 800eb10:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eb14:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eb18:	b292      	uxth	r2, r2
 800eb1a:	601a      	str	r2, [r3, #0]
 800eb1c:	683b      	ldr	r3, [r7, #0]
 800eb1e:	781b      	ldrb	r3, [r3, #0]
 800eb20:	00db      	lsls	r3, r3, #3
 800eb22:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eb26:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eb2a:	6819      	ldr	r1, [r3, #0]
 800eb2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb2e:	041a      	lsls	r2, r3, #16
 800eb30:	683b      	ldr	r3, [r7, #0]
 800eb32:	781b      	ldrb	r3, [r3, #0]
 800eb34:	00db      	lsls	r3, r3, #3
 800eb36:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eb3a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eb3e:	430a      	orrs	r2, r1
 800eb40:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800eb42:	683b      	ldr	r3, [r7, #0]
 800eb44:	891b      	ldrh	r3, [r3, #8]
 800eb46:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800eb48:	683b      	ldr	r3, [r7, #0]
 800eb4a:	6959      	ldr	r1, [r3, #20]
 800eb4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb4e:	b29b      	uxth	r3, r3
 800eb50:	8b7a      	ldrh	r2, [r7, #26]
 800eb52:	6878      	ldr	r0, [r7, #4]
 800eb54:	f000 ff09 	bl	800f96a <USB_WritePMA>
            ep->xfer_buff += len;
 800eb58:	683b      	ldr	r3, [r7, #0]
 800eb5a:	695a      	ldr	r2, [r3, #20]
 800eb5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb5e:	441a      	add	r2, r3
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800eb64:	683b      	ldr	r3, [r7, #0]
 800eb66:	6a1a      	ldr	r2, [r3, #32]
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	691b      	ldr	r3, [r3, #16]
 800eb6c:	429a      	cmp	r2, r3
 800eb6e:	d906      	bls.n	800eb7e <USB_EPStartXfer+0x522>
            {
              ep->xfer_len_db -= len;
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	6a1a      	ldr	r2, [r3, #32]
 800eb74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb76:	1ad2      	subs	r2, r2, r3
 800eb78:	683b      	ldr	r3, [r7, #0]
 800eb7a:	621a      	str	r2, [r3, #32]
 800eb7c:	e005      	b.n	800eb8a <USB_EPStartXfer+0x52e>
            }
            else
            {
              len = ep->xfer_len_db;
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	6a1b      	ldr	r3, [r3, #32]
 800eb82:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	2200      	movs	r2, #0
 800eb88:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	785b      	ldrb	r3, [r3, #1]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d16a      	bne.n	800ec68 <USB_EPStartXfer+0x60c>
 800eb92:	683b      	ldr	r3, [r7, #0]
 800eb94:	781b      	ldrb	r3, [r3, #0]
 800eb96:	00db      	lsls	r3, r3, #3
 800eb98:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eb9c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eba0:	685a      	ldr	r2, [r3, #4]
 800eba2:	683b      	ldr	r3, [r7, #0]
 800eba4:	781b      	ldrb	r3, [r3, #0]
 800eba6:	00db      	lsls	r3, r3, #3
 800eba8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ebac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ebb0:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800ebb4:	605a      	str	r2, [r3, #4]
 800ebb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d112      	bne.n	800ebe2 <USB_EPStartXfer+0x586>
 800ebbc:	683b      	ldr	r3, [r7, #0]
 800ebbe:	781b      	ldrb	r3, [r3, #0]
 800ebc0:	00db      	lsls	r3, r3, #3
 800ebc2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ebc6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ebca:	685a      	ldr	r2, [r3, #4]
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	781b      	ldrb	r3, [r3, #0]
 800ebd0:	00db      	lsls	r3, r3, #3
 800ebd2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ebd6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ebda:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ebde:	605a      	str	r2, [r3, #4]
 800ebe0:	e06a      	b.n	800ecb8 <USB_EPStartXfer+0x65c>
 800ebe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebe4:	2b3e      	cmp	r3, #62	@ 0x3e
 800ebe6:	d81e      	bhi.n	800ec26 <USB_EPStartXfer+0x5ca>
 800ebe8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebea:	085b      	lsrs	r3, r3, #1
 800ebec:	647b      	str	r3, [r7, #68]	@ 0x44
 800ebee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebf0:	f003 0301 	and.w	r3, r3, #1
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d002      	beq.n	800ebfe <USB_EPStartXfer+0x5a2>
 800ebf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ebfa:	3301      	adds	r3, #1
 800ebfc:	647b      	str	r3, [r7, #68]	@ 0x44
 800ebfe:	683b      	ldr	r3, [r7, #0]
 800ec00:	781b      	ldrb	r3, [r3, #0]
 800ec02:	00db      	lsls	r3, r3, #3
 800ec04:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ec08:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ec0c:	6859      	ldr	r1, [r3, #4]
 800ec0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec10:	069a      	lsls	r2, r3, #26
 800ec12:	683b      	ldr	r3, [r7, #0]
 800ec14:	781b      	ldrb	r3, [r3, #0]
 800ec16:	00db      	lsls	r3, r3, #3
 800ec18:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ec1c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ec20:	430a      	orrs	r2, r1
 800ec22:	605a      	str	r2, [r3, #4]
 800ec24:	e048      	b.n	800ecb8 <USB_EPStartXfer+0x65c>
 800ec26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec28:	095b      	lsrs	r3, r3, #5
 800ec2a:	647b      	str	r3, [r7, #68]	@ 0x44
 800ec2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec2e:	f003 031f 	and.w	r3, r3, #31
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d102      	bne.n	800ec3c <USB_EPStartXfer+0x5e0>
 800ec36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec38:	3b01      	subs	r3, #1
 800ec3a:	647b      	str	r3, [r7, #68]	@ 0x44
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	781b      	ldrb	r3, [r3, #0]
 800ec40:	00db      	lsls	r3, r3, #3
 800ec42:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ec46:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ec4a:	685a      	ldr	r2, [r3, #4]
 800ec4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec4e:	069b      	lsls	r3, r3, #26
 800ec50:	431a      	orrs	r2, r3
 800ec52:	683b      	ldr	r3, [r7, #0]
 800ec54:	781b      	ldrb	r3, [r3, #0]
 800ec56:	00db      	lsls	r3, r3, #3
 800ec58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ec5c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ec60:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ec64:	605a      	str	r2, [r3, #4]
 800ec66:	e027      	b.n	800ecb8 <USB_EPStartXfer+0x65c>
 800ec68:	683b      	ldr	r3, [r7, #0]
 800ec6a:	785b      	ldrb	r3, [r3, #1]
 800ec6c:	2b01      	cmp	r3, #1
 800ec6e:	d123      	bne.n	800ecb8 <USB_EPStartXfer+0x65c>
 800ec70:	683b      	ldr	r3, [r7, #0]
 800ec72:	781b      	ldrb	r3, [r3, #0]
 800ec74:	00db      	lsls	r3, r3, #3
 800ec76:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ec7a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ec7e:	685a      	ldr	r2, [r3, #4]
 800ec80:	683b      	ldr	r3, [r7, #0]
 800ec82:	781b      	ldrb	r3, [r3, #0]
 800ec84:	00db      	lsls	r3, r3, #3
 800ec86:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ec8a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ec8e:	b292      	uxth	r2, r2
 800ec90:	605a      	str	r2, [r3, #4]
 800ec92:	683b      	ldr	r3, [r7, #0]
 800ec94:	781b      	ldrb	r3, [r3, #0]
 800ec96:	00db      	lsls	r3, r3, #3
 800ec98:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ec9c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eca0:	6859      	ldr	r1, [r3, #4]
 800eca2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eca4:	041a      	lsls	r2, r3, #16
 800eca6:	683b      	ldr	r3, [r7, #0]
 800eca8:	781b      	ldrb	r3, [r3, #0]
 800ecaa:	00db      	lsls	r3, r3, #3
 800ecac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ecb0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ecb4:	430a      	orrs	r2, r1
 800ecb6:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800ecb8:	683b      	ldr	r3, [r7, #0]
 800ecba:	895b      	ldrh	r3, [r3, #10]
 800ecbc:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	6959      	ldr	r1, [r3, #20]
 800ecc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ecc4:	b29b      	uxth	r3, r3
 800ecc6:	8b7a      	ldrh	r2, [r7, #26]
 800ecc8:	6878      	ldr	r0, [r7, #4]
 800ecca:	f000 fe4e 	bl	800f96a <USB_WritePMA>
 800ecce:	e19f      	b.n	800f010 <USB_EPStartXfer+0x9b4>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800ecd0:	683b      	ldr	r3, [r7, #0]
 800ecd2:	6a1b      	ldr	r3, [r3, #32]
 800ecd4:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800ecd6:	687a      	ldr	r2, [r7, #4]
 800ecd8:	683b      	ldr	r3, [r7, #0]
 800ecda:	781b      	ldrb	r3, [r3, #0]
 800ecdc:	009b      	lsls	r3, r3, #2
 800ecde:	4413      	add	r3, r2
 800ece0:	681a      	ldr	r2, [r3, #0]
 800ece2:	4ba0      	ldr	r3, [pc, #640]	@ (800ef64 <USB_EPStartXfer+0x908>)
 800ece4:	4013      	ands	r3, r2
 800ece6:	617b      	str	r3, [r7, #20]
 800ece8:	687a      	ldr	r2, [r7, #4]
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	781b      	ldrb	r3, [r3, #0]
 800ecee:	009b      	lsls	r3, r3, #2
 800ecf0:	441a      	add	r2, r3
 800ecf2:	697b      	ldr	r3, [r7, #20]
 800ecf4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ecf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ecfc:	6013      	str	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ecfe:	683b      	ldr	r3, [r7, #0]
 800ed00:	781b      	ldrb	r3, [r3, #0]
 800ed02:	00db      	lsls	r3, r3, #3
 800ed04:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ed08:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ed0c:	681a      	ldr	r2, [r3, #0]
 800ed0e:	683b      	ldr	r3, [r7, #0]
 800ed10:	781b      	ldrb	r3, [r3, #0]
 800ed12:	00db      	lsls	r3, r3, #3
 800ed14:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ed18:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ed1c:	b292      	uxth	r2, r2
 800ed1e:	601a      	str	r2, [r3, #0]
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	781b      	ldrb	r3, [r3, #0]
 800ed24:	00db      	lsls	r3, r3, #3
 800ed26:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ed2a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ed2e:	6819      	ldr	r1, [r3, #0]
 800ed30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed32:	041a      	lsls	r2, r3, #16
 800ed34:	683b      	ldr	r3, [r7, #0]
 800ed36:	781b      	ldrb	r3, [r3, #0]
 800ed38:	00db      	lsls	r3, r3, #3
 800ed3a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ed3e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ed42:	430a      	orrs	r2, r1
 800ed44:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ed46:	683b      	ldr	r3, [r7, #0]
 800ed48:	891b      	ldrh	r3, [r3, #8]
 800ed4a:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ed4c:	683b      	ldr	r3, [r7, #0]
 800ed4e:	6959      	ldr	r1, [r3, #20]
 800ed50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed52:	b29b      	uxth	r3, r3
 800ed54:	8b7a      	ldrh	r2, [r7, #26]
 800ed56:	6878      	ldr	r0, [r7, #4]
 800ed58:	f000 fe07 	bl	800f96a <USB_WritePMA>
 800ed5c:	e158      	b.n	800f010 <USB_EPStartXfer+0x9b4>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800ed5e:	683b      	ldr	r3, [r7, #0]
 800ed60:	6a1a      	ldr	r2, [r3, #32]
 800ed62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed64:	1ad2      	subs	r2, r2, r3
 800ed66:	683b      	ldr	r3, [r7, #0]
 800ed68:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ed6a:	687a      	ldr	r2, [r7, #4]
 800ed6c:	683b      	ldr	r3, [r7, #0]
 800ed6e:	781b      	ldrb	r3, [r3, #0]
 800ed70:	009b      	lsls	r3, r3, #2
 800ed72:	4413      	add	r3, r2
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	f000 80a3 	beq.w	800eec6 <USB_EPStartXfer+0x86a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ed80:	683b      	ldr	r3, [r7, #0]
 800ed82:	785b      	ldrb	r3, [r3, #1]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d16a      	bne.n	800ee5e <USB_EPStartXfer+0x802>
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	781b      	ldrb	r3, [r3, #0]
 800ed8c:	00db      	lsls	r3, r3, #3
 800ed8e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ed92:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ed96:	685a      	ldr	r2, [r3, #4]
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	781b      	ldrb	r3, [r3, #0]
 800ed9c:	00db      	lsls	r3, r3, #3
 800ed9e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eda2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eda6:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800edaa:	605a      	str	r2, [r3, #4]
 800edac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d112      	bne.n	800edd8 <USB_EPStartXfer+0x77c>
 800edb2:	683b      	ldr	r3, [r7, #0]
 800edb4:	781b      	ldrb	r3, [r3, #0]
 800edb6:	00db      	lsls	r3, r3, #3
 800edb8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800edbc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800edc0:	685a      	ldr	r2, [r3, #4]
 800edc2:	683b      	ldr	r3, [r7, #0]
 800edc4:	781b      	ldrb	r3, [r3, #0]
 800edc6:	00db      	lsls	r3, r3, #3
 800edc8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800edcc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800edd0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800edd4:	605a      	str	r2, [r3, #4]
 800edd6:	e06a      	b.n	800eeae <USB_EPStartXfer+0x852>
 800edd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800edda:	2b3e      	cmp	r3, #62	@ 0x3e
 800eddc:	d81e      	bhi.n	800ee1c <USB_EPStartXfer+0x7c0>
 800edde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ede0:	085b      	lsrs	r3, r3, #1
 800ede2:	643b      	str	r3, [r7, #64]	@ 0x40
 800ede4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ede6:	f003 0301 	and.w	r3, r3, #1
 800edea:	2b00      	cmp	r3, #0
 800edec:	d002      	beq.n	800edf4 <USB_EPStartXfer+0x798>
 800edee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800edf0:	3301      	adds	r3, #1
 800edf2:	643b      	str	r3, [r7, #64]	@ 0x40
 800edf4:	683b      	ldr	r3, [r7, #0]
 800edf6:	781b      	ldrb	r3, [r3, #0]
 800edf8:	00db      	lsls	r3, r3, #3
 800edfa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800edfe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ee02:	6859      	ldr	r1, [r3, #4]
 800ee04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ee06:	069a      	lsls	r2, r3, #26
 800ee08:	683b      	ldr	r3, [r7, #0]
 800ee0a:	781b      	ldrb	r3, [r3, #0]
 800ee0c:	00db      	lsls	r3, r3, #3
 800ee0e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ee12:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ee16:	430a      	orrs	r2, r1
 800ee18:	605a      	str	r2, [r3, #4]
 800ee1a:	e048      	b.n	800eeae <USB_EPStartXfer+0x852>
 800ee1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee1e:	095b      	lsrs	r3, r3, #5
 800ee20:	643b      	str	r3, [r7, #64]	@ 0x40
 800ee22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee24:	f003 031f 	and.w	r3, r3, #31
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d102      	bne.n	800ee32 <USB_EPStartXfer+0x7d6>
 800ee2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ee2e:	3b01      	subs	r3, #1
 800ee30:	643b      	str	r3, [r7, #64]	@ 0x40
 800ee32:	683b      	ldr	r3, [r7, #0]
 800ee34:	781b      	ldrb	r3, [r3, #0]
 800ee36:	00db      	lsls	r3, r3, #3
 800ee38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ee3c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ee40:	685a      	ldr	r2, [r3, #4]
 800ee42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ee44:	069b      	lsls	r3, r3, #26
 800ee46:	431a      	orrs	r2, r3
 800ee48:	683b      	ldr	r3, [r7, #0]
 800ee4a:	781b      	ldrb	r3, [r3, #0]
 800ee4c:	00db      	lsls	r3, r3, #3
 800ee4e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ee52:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ee56:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ee5a:	605a      	str	r2, [r3, #4]
 800ee5c:	e027      	b.n	800eeae <USB_EPStartXfer+0x852>
 800ee5e:	683b      	ldr	r3, [r7, #0]
 800ee60:	785b      	ldrb	r3, [r3, #1]
 800ee62:	2b01      	cmp	r3, #1
 800ee64:	d123      	bne.n	800eeae <USB_EPStartXfer+0x852>
 800ee66:	683b      	ldr	r3, [r7, #0]
 800ee68:	781b      	ldrb	r3, [r3, #0]
 800ee6a:	00db      	lsls	r3, r3, #3
 800ee6c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ee70:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ee74:	685a      	ldr	r2, [r3, #4]
 800ee76:	683b      	ldr	r3, [r7, #0]
 800ee78:	781b      	ldrb	r3, [r3, #0]
 800ee7a:	00db      	lsls	r3, r3, #3
 800ee7c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ee80:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ee84:	b292      	uxth	r2, r2
 800ee86:	605a      	str	r2, [r3, #4]
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	781b      	ldrb	r3, [r3, #0]
 800ee8c:	00db      	lsls	r3, r3, #3
 800ee8e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ee92:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ee96:	6859      	ldr	r1, [r3, #4]
 800ee98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee9a:	041a      	lsls	r2, r3, #16
 800ee9c:	683b      	ldr	r3, [r7, #0]
 800ee9e:	781b      	ldrb	r3, [r3, #0]
 800eea0:	00db      	lsls	r3, r3, #3
 800eea2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eea6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eeaa:	430a      	orrs	r2, r1
 800eeac:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 800eeae:	683b      	ldr	r3, [r7, #0]
 800eeb0:	895b      	ldrh	r3, [r3, #10]
 800eeb2:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800eeb4:	683b      	ldr	r3, [r7, #0]
 800eeb6:	6959      	ldr	r1, [r3, #20]
 800eeb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eeba:	b29b      	uxth	r3, r3
 800eebc:	8b7a      	ldrh	r2, [r7, #26]
 800eebe:	6878      	ldr	r0, [r7, #4]
 800eec0:	f000 fd53 	bl	800f96a <USB_WritePMA>
 800eec4:	e0a4      	b.n	800f010 <USB_EPStartXfer+0x9b4>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800eec6:	683b      	ldr	r3, [r7, #0]
 800eec8:	785b      	ldrb	r3, [r3, #1]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d16d      	bne.n	800efaa <USB_EPStartXfer+0x94e>
 800eece:	683b      	ldr	r3, [r7, #0]
 800eed0:	781b      	ldrb	r3, [r3, #0]
 800eed2:	00db      	lsls	r3, r3, #3
 800eed4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eed8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eedc:	681a      	ldr	r2, [r3, #0]
 800eede:	683b      	ldr	r3, [r7, #0]
 800eee0:	781b      	ldrb	r3, [r3, #0]
 800eee2:	00db      	lsls	r3, r3, #3
 800eee4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eee8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eeec:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800eef0:	601a      	str	r2, [r3, #0]
 800eef2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d112      	bne.n	800ef1e <USB_EPStartXfer+0x8c2>
 800eef8:	683b      	ldr	r3, [r7, #0]
 800eefa:	781b      	ldrb	r3, [r3, #0]
 800eefc:	00db      	lsls	r3, r3, #3
 800eefe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ef02:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ef06:	681a      	ldr	r2, [r3, #0]
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	781b      	ldrb	r3, [r3, #0]
 800ef0c:	00db      	lsls	r3, r3, #3
 800ef0e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ef12:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ef16:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ef1a:	601a      	str	r2, [r3, #0]
 800ef1c:	e06d      	b.n	800effa <USB_EPStartXfer+0x99e>
 800ef1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef20:	2b3e      	cmp	r3, #62	@ 0x3e
 800ef22:	d821      	bhi.n	800ef68 <USB_EPStartXfer+0x90c>
 800ef24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef26:	085b      	lsrs	r3, r3, #1
 800ef28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ef2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef2c:	f003 0301 	and.w	r3, r3, #1
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d002      	beq.n	800ef3a <USB_EPStartXfer+0x8de>
 800ef34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef36:	3301      	adds	r3, #1
 800ef38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ef3a:	683b      	ldr	r3, [r7, #0]
 800ef3c:	781b      	ldrb	r3, [r3, #0]
 800ef3e:	00db      	lsls	r3, r3, #3
 800ef40:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ef44:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ef48:	6819      	ldr	r1, [r3, #0]
 800ef4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef4c:	069a      	lsls	r2, r3, #26
 800ef4e:	683b      	ldr	r3, [r7, #0]
 800ef50:	781b      	ldrb	r3, [r3, #0]
 800ef52:	00db      	lsls	r3, r3, #3
 800ef54:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ef58:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ef5c:	430a      	orrs	r2, r1
 800ef5e:	601a      	str	r2, [r3, #0]
 800ef60:	e04b      	b.n	800effa <USB_EPStartXfer+0x99e>
 800ef62:	bf00      	nop
 800ef64:	07ff8e8f 	.word	0x07ff8e8f
 800ef68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef6a:	095b      	lsrs	r3, r3, #5
 800ef6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ef6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef70:	f003 031f 	and.w	r3, r3, #31
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d102      	bne.n	800ef7e <USB_EPStartXfer+0x922>
 800ef78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef7a:	3b01      	subs	r3, #1
 800ef7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ef7e:	683b      	ldr	r3, [r7, #0]
 800ef80:	781b      	ldrb	r3, [r3, #0]
 800ef82:	00db      	lsls	r3, r3, #3
 800ef84:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ef88:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ef8c:	681a      	ldr	r2, [r3, #0]
 800ef8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef90:	069b      	lsls	r3, r3, #26
 800ef92:	431a      	orrs	r2, r3
 800ef94:	683b      	ldr	r3, [r7, #0]
 800ef96:	781b      	ldrb	r3, [r3, #0]
 800ef98:	00db      	lsls	r3, r3, #3
 800ef9a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ef9e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800efa2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800efa6:	601a      	str	r2, [r3, #0]
 800efa8:	e027      	b.n	800effa <USB_EPStartXfer+0x99e>
 800efaa:	683b      	ldr	r3, [r7, #0]
 800efac:	785b      	ldrb	r3, [r3, #1]
 800efae:	2b01      	cmp	r3, #1
 800efb0:	d123      	bne.n	800effa <USB_EPStartXfer+0x99e>
 800efb2:	683b      	ldr	r3, [r7, #0]
 800efb4:	781b      	ldrb	r3, [r3, #0]
 800efb6:	00db      	lsls	r3, r3, #3
 800efb8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800efbc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800efc0:	681a      	ldr	r2, [r3, #0]
 800efc2:	683b      	ldr	r3, [r7, #0]
 800efc4:	781b      	ldrb	r3, [r3, #0]
 800efc6:	00db      	lsls	r3, r3, #3
 800efc8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800efcc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800efd0:	b292      	uxth	r2, r2
 800efd2:	601a      	str	r2, [r3, #0]
 800efd4:	683b      	ldr	r3, [r7, #0]
 800efd6:	781b      	ldrb	r3, [r3, #0]
 800efd8:	00db      	lsls	r3, r3, #3
 800efda:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800efde:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800efe2:	6819      	ldr	r1, [r3, #0]
 800efe4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800efe6:	041a      	lsls	r2, r3, #16
 800efe8:	683b      	ldr	r3, [r7, #0]
 800efea:	781b      	ldrb	r3, [r3, #0]
 800efec:	00db      	lsls	r3, r3, #3
 800efee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eff2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eff6:	430a      	orrs	r2, r1
 800eff8:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800effa:	683b      	ldr	r3, [r7, #0]
 800effc:	891b      	ldrh	r3, [r3, #8]
 800effe:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f000:	683b      	ldr	r3, [r7, #0]
 800f002:	6959      	ldr	r1, [r3, #20]
 800f004:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f006:	b29b      	uxth	r3, r3
 800f008:	8b7a      	ldrh	r2, [r7, #26]
 800f00a:	6878      	ldr	r0, [r7, #4]
 800f00c:	f000 fcad 	bl	800f96a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800f010:	687a      	ldr	r2, [r7, #4]
 800f012:	683b      	ldr	r3, [r7, #0]
 800f014:	781b      	ldrb	r3, [r3, #0]
 800f016:	009b      	lsls	r3, r3, #2
 800f018:	4413      	add	r3, r2
 800f01a:	681a      	ldr	r2, [r3, #0]
 800f01c:	4b8b      	ldr	r3, [pc, #556]	@ (800f24c <USB_EPStartXfer+0xbf0>)
 800f01e:	4013      	ands	r3, r2
 800f020:	60fb      	str	r3, [r7, #12]
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	f083 0310 	eor.w	r3, r3, #16
 800f028:	60fb      	str	r3, [r7, #12]
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	f083 0320 	eor.w	r3, r3, #32
 800f030:	60fb      	str	r3, [r7, #12]
 800f032:	687a      	ldr	r2, [r7, #4]
 800f034:	683b      	ldr	r3, [r7, #0]
 800f036:	781b      	ldrb	r3, [r3, #0]
 800f038:	009b      	lsls	r3, r3, #2
 800f03a:	441a      	add	r2, r3
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f042:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f046:	6013      	str	r3, [r2, #0]
 800f048:	e36b      	b.n	800f722 <USB_EPStartXfer+0x10c6>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800f04a:	683b      	ldr	r3, [r7, #0]
 800f04c:	7b1b      	ldrb	r3, [r3, #12]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	f040 8081 	bne.w	800f156 <USB_EPStartXfer+0xafa>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800f054:	683b      	ldr	r3, [r7, #0]
 800f056:	699a      	ldr	r2, [r3, #24]
 800f058:	683b      	ldr	r3, [r7, #0]
 800f05a:	691b      	ldr	r3, [r3, #16]
 800f05c:	429a      	cmp	r2, r3
 800f05e:	d909      	bls.n	800f074 <USB_EPStartXfer+0xa18>
      {
        len = ep->maxpacket;
 800f060:	683b      	ldr	r3, [r7, #0]
 800f062:	691b      	ldr	r3, [r3, #16]
 800f064:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 800f066:	683b      	ldr	r3, [r7, #0]
 800f068:	699a      	ldr	r2, [r3, #24]
 800f06a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f06c:	1ad2      	subs	r2, r2, r3
 800f06e:	683b      	ldr	r3, [r7, #0]
 800f070:	619a      	str	r2, [r3, #24]
 800f072:	e005      	b.n	800f080 <USB_EPStartXfer+0xa24>
      }
      else
      {
        len = ep->xfer_len;
 800f074:	683b      	ldr	r3, [r7, #0]
 800f076:	699b      	ldr	r3, [r3, #24]
 800f078:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 800f07a:	683b      	ldr	r3, [r7, #0]
 800f07c:	2200      	movs	r2, #0
 800f07e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800f080:	683b      	ldr	r3, [r7, #0]
 800f082:	781b      	ldrb	r3, [r3, #0]
 800f084:	00db      	lsls	r3, r3, #3
 800f086:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f08a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f08e:	685a      	ldr	r2, [r3, #4]
 800f090:	683b      	ldr	r3, [r7, #0]
 800f092:	781b      	ldrb	r3, [r3, #0]
 800f094:	00db      	lsls	r3, r3, #3
 800f096:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f09a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f09e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800f0a2:	605a      	str	r2, [r3, #4]
 800f0a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d112      	bne.n	800f0d0 <USB_EPStartXfer+0xa74>
 800f0aa:	683b      	ldr	r3, [r7, #0]
 800f0ac:	781b      	ldrb	r3, [r3, #0]
 800f0ae:	00db      	lsls	r3, r3, #3
 800f0b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f0b4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f0b8:	685a      	ldr	r2, [r3, #4]
 800f0ba:	683b      	ldr	r3, [r7, #0]
 800f0bc:	781b      	ldrb	r3, [r3, #0]
 800f0be:	00db      	lsls	r3, r3, #3
 800f0c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f0c4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f0c8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f0cc:	605a      	str	r2, [r3, #4]
 800f0ce:	e30c      	b.n	800f6ea <USB_EPStartXfer+0x108e>
 800f0d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f0d2:	2b3e      	cmp	r3, #62	@ 0x3e
 800f0d4:	d81e      	bhi.n	800f114 <USB_EPStartXfer+0xab8>
 800f0d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f0d8:	085b      	lsrs	r3, r3, #1
 800f0da:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f0dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f0de:	f003 0301 	and.w	r3, r3, #1
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d002      	beq.n	800f0ec <USB_EPStartXfer+0xa90>
 800f0e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0e8:	3301      	adds	r3, #1
 800f0ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f0ec:	683b      	ldr	r3, [r7, #0]
 800f0ee:	781b      	ldrb	r3, [r3, #0]
 800f0f0:	00db      	lsls	r3, r3, #3
 800f0f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f0f6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f0fa:	6859      	ldr	r1, [r3, #4]
 800f0fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0fe:	069a      	lsls	r2, r3, #26
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	781b      	ldrb	r3, [r3, #0]
 800f104:	00db      	lsls	r3, r3, #3
 800f106:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f10a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f10e:	430a      	orrs	r2, r1
 800f110:	605a      	str	r2, [r3, #4]
 800f112:	e2ea      	b.n	800f6ea <USB_EPStartXfer+0x108e>
 800f114:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f116:	095b      	lsrs	r3, r3, #5
 800f118:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f11a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f11c:	f003 031f 	and.w	r3, r3, #31
 800f120:	2b00      	cmp	r3, #0
 800f122:	d102      	bne.n	800f12a <USB_EPStartXfer+0xace>
 800f124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f126:	3b01      	subs	r3, #1
 800f128:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f12a:	683b      	ldr	r3, [r7, #0]
 800f12c:	781b      	ldrb	r3, [r3, #0]
 800f12e:	00db      	lsls	r3, r3, #3
 800f130:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f134:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f138:	685a      	ldr	r2, [r3, #4]
 800f13a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f13c:	069b      	lsls	r3, r3, #26
 800f13e:	431a      	orrs	r2, r3
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	781b      	ldrb	r3, [r3, #0]
 800f144:	00db      	lsls	r3, r3, #3
 800f146:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f14a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f14e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f152:	605a      	str	r2, [r3, #4]
 800f154:	e2c9      	b.n	800f6ea <USB_EPStartXfer+0x108e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800f156:	683b      	ldr	r3, [r7, #0]
 800f158:	78db      	ldrb	r3, [r3, #3]
 800f15a:	2b02      	cmp	r3, #2
 800f15c:	f040 8176 	bne.w	800f44c <USB_EPStartXfer+0xdf0>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800f160:	683b      	ldr	r3, [r7, #0]
 800f162:	785b      	ldrb	r3, [r3, #1]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d173      	bne.n	800f250 <USB_EPStartXfer+0xbf4>
 800f168:	683b      	ldr	r3, [r7, #0]
 800f16a:	781b      	ldrb	r3, [r3, #0]
 800f16c:	00db      	lsls	r3, r3, #3
 800f16e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f172:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f176:	681a      	ldr	r2, [r3, #0]
 800f178:	683b      	ldr	r3, [r7, #0]
 800f17a:	781b      	ldrb	r3, [r3, #0]
 800f17c:	00db      	lsls	r3, r3, #3
 800f17e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f182:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f186:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800f18a:	601a      	str	r2, [r3, #0]
 800f18c:	683b      	ldr	r3, [r7, #0]
 800f18e:	691b      	ldr	r3, [r3, #16]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d112      	bne.n	800f1ba <USB_EPStartXfer+0xb5e>
 800f194:	683b      	ldr	r3, [r7, #0]
 800f196:	781b      	ldrb	r3, [r3, #0]
 800f198:	00db      	lsls	r3, r3, #3
 800f19a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f19e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f1a2:	681a      	ldr	r2, [r3, #0]
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	781b      	ldrb	r3, [r3, #0]
 800f1a8:	00db      	lsls	r3, r3, #3
 800f1aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f1ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f1b2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f1b6:	601a      	str	r2, [r3, #0]
 800f1b8:	e073      	b.n	800f2a2 <USB_EPStartXfer+0xc46>
 800f1ba:	683b      	ldr	r3, [r7, #0]
 800f1bc:	691b      	ldr	r3, [r3, #16]
 800f1be:	2b3e      	cmp	r3, #62	@ 0x3e
 800f1c0:	d820      	bhi.n	800f204 <USB_EPStartXfer+0xba8>
 800f1c2:	683b      	ldr	r3, [r7, #0]
 800f1c4:	691b      	ldr	r3, [r3, #16]
 800f1c6:	085b      	lsrs	r3, r3, #1
 800f1c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800f1ca:	683b      	ldr	r3, [r7, #0]
 800f1cc:	691b      	ldr	r3, [r3, #16]
 800f1ce:	f003 0301 	and.w	r3, r3, #1
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d002      	beq.n	800f1dc <USB_EPStartXfer+0xb80>
 800f1d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f1d8:	3301      	adds	r3, #1
 800f1da:	637b      	str	r3, [r7, #52]	@ 0x34
 800f1dc:	683b      	ldr	r3, [r7, #0]
 800f1de:	781b      	ldrb	r3, [r3, #0]
 800f1e0:	00db      	lsls	r3, r3, #3
 800f1e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f1e6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f1ea:	6819      	ldr	r1, [r3, #0]
 800f1ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f1ee:	069a      	lsls	r2, r3, #26
 800f1f0:	683b      	ldr	r3, [r7, #0]
 800f1f2:	781b      	ldrb	r3, [r3, #0]
 800f1f4:	00db      	lsls	r3, r3, #3
 800f1f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f1fa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f1fe:	430a      	orrs	r2, r1
 800f200:	601a      	str	r2, [r3, #0]
 800f202:	e04e      	b.n	800f2a2 <USB_EPStartXfer+0xc46>
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	691b      	ldr	r3, [r3, #16]
 800f208:	095b      	lsrs	r3, r3, #5
 800f20a:	637b      	str	r3, [r7, #52]	@ 0x34
 800f20c:	683b      	ldr	r3, [r7, #0]
 800f20e:	691b      	ldr	r3, [r3, #16]
 800f210:	f003 031f 	and.w	r3, r3, #31
 800f214:	2b00      	cmp	r3, #0
 800f216:	d102      	bne.n	800f21e <USB_EPStartXfer+0xbc2>
 800f218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f21a:	3b01      	subs	r3, #1
 800f21c:	637b      	str	r3, [r7, #52]	@ 0x34
 800f21e:	683b      	ldr	r3, [r7, #0]
 800f220:	781b      	ldrb	r3, [r3, #0]
 800f222:	00db      	lsls	r3, r3, #3
 800f224:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f228:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f22c:	681a      	ldr	r2, [r3, #0]
 800f22e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f230:	069b      	lsls	r3, r3, #26
 800f232:	431a      	orrs	r2, r3
 800f234:	683b      	ldr	r3, [r7, #0]
 800f236:	781b      	ldrb	r3, [r3, #0]
 800f238:	00db      	lsls	r3, r3, #3
 800f23a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f23e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f242:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f246:	601a      	str	r2, [r3, #0]
 800f248:	e02b      	b.n	800f2a2 <USB_EPStartXfer+0xc46>
 800f24a:	bf00      	nop
 800f24c:	07ff8fbf 	.word	0x07ff8fbf
 800f250:	683b      	ldr	r3, [r7, #0]
 800f252:	785b      	ldrb	r3, [r3, #1]
 800f254:	2b01      	cmp	r3, #1
 800f256:	d124      	bne.n	800f2a2 <USB_EPStartXfer+0xc46>
 800f258:	683b      	ldr	r3, [r7, #0]
 800f25a:	781b      	ldrb	r3, [r3, #0]
 800f25c:	00db      	lsls	r3, r3, #3
 800f25e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f262:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f266:	681a      	ldr	r2, [r3, #0]
 800f268:	683b      	ldr	r3, [r7, #0]
 800f26a:	781b      	ldrb	r3, [r3, #0]
 800f26c:	00db      	lsls	r3, r3, #3
 800f26e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f272:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f276:	b292      	uxth	r2, r2
 800f278:	601a      	str	r2, [r3, #0]
 800f27a:	683b      	ldr	r3, [r7, #0]
 800f27c:	781b      	ldrb	r3, [r3, #0]
 800f27e:	00db      	lsls	r3, r3, #3
 800f280:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f284:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f288:	6819      	ldr	r1, [r3, #0]
 800f28a:	683b      	ldr	r3, [r7, #0]
 800f28c:	691b      	ldr	r3, [r3, #16]
 800f28e:	041a      	lsls	r2, r3, #16
 800f290:	683b      	ldr	r3, [r7, #0]
 800f292:	781b      	ldrb	r3, [r3, #0]
 800f294:	00db      	lsls	r3, r3, #3
 800f296:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f29a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f29e:	430a      	orrs	r2, r1
 800f2a0:	601a      	str	r2, [r3, #0]
 800f2a2:	683b      	ldr	r3, [r7, #0]
 800f2a4:	785b      	ldrb	r3, [r3, #1]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d170      	bne.n	800f38c <USB_EPStartXfer+0xd30>
 800f2aa:	683b      	ldr	r3, [r7, #0]
 800f2ac:	781b      	ldrb	r3, [r3, #0]
 800f2ae:	00db      	lsls	r3, r3, #3
 800f2b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f2b4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f2b8:	685a      	ldr	r2, [r3, #4]
 800f2ba:	683b      	ldr	r3, [r7, #0]
 800f2bc:	781b      	ldrb	r3, [r3, #0]
 800f2be:	00db      	lsls	r3, r3, #3
 800f2c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f2c4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f2c8:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800f2cc:	605a      	str	r2, [r3, #4]
 800f2ce:	683b      	ldr	r3, [r7, #0]
 800f2d0:	691b      	ldr	r3, [r3, #16]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d112      	bne.n	800f2fc <USB_EPStartXfer+0xca0>
 800f2d6:	683b      	ldr	r3, [r7, #0]
 800f2d8:	781b      	ldrb	r3, [r3, #0]
 800f2da:	00db      	lsls	r3, r3, #3
 800f2dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f2e0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f2e4:	685a      	ldr	r2, [r3, #4]
 800f2e6:	683b      	ldr	r3, [r7, #0]
 800f2e8:	781b      	ldrb	r3, [r3, #0]
 800f2ea:	00db      	lsls	r3, r3, #3
 800f2ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f2f0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f2f4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f2f8:	605a      	str	r2, [r3, #4]
 800f2fa:	e070      	b.n	800f3de <USB_EPStartXfer+0xd82>
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	691b      	ldr	r3, [r3, #16]
 800f300:	2b3e      	cmp	r3, #62	@ 0x3e
 800f302:	d820      	bhi.n	800f346 <USB_EPStartXfer+0xcea>
 800f304:	683b      	ldr	r3, [r7, #0]
 800f306:	691b      	ldr	r3, [r3, #16]
 800f308:	085b      	lsrs	r3, r3, #1
 800f30a:	633b      	str	r3, [r7, #48]	@ 0x30
 800f30c:	683b      	ldr	r3, [r7, #0]
 800f30e:	691b      	ldr	r3, [r3, #16]
 800f310:	f003 0301 	and.w	r3, r3, #1
 800f314:	2b00      	cmp	r3, #0
 800f316:	d002      	beq.n	800f31e <USB_EPStartXfer+0xcc2>
 800f318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f31a:	3301      	adds	r3, #1
 800f31c:	633b      	str	r3, [r7, #48]	@ 0x30
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	781b      	ldrb	r3, [r3, #0]
 800f322:	00db      	lsls	r3, r3, #3
 800f324:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f328:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f32c:	6859      	ldr	r1, [r3, #4]
 800f32e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f330:	069a      	lsls	r2, r3, #26
 800f332:	683b      	ldr	r3, [r7, #0]
 800f334:	781b      	ldrb	r3, [r3, #0]
 800f336:	00db      	lsls	r3, r3, #3
 800f338:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f33c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f340:	430a      	orrs	r2, r1
 800f342:	605a      	str	r2, [r3, #4]
 800f344:	e04b      	b.n	800f3de <USB_EPStartXfer+0xd82>
 800f346:	683b      	ldr	r3, [r7, #0]
 800f348:	691b      	ldr	r3, [r3, #16]
 800f34a:	095b      	lsrs	r3, r3, #5
 800f34c:	633b      	str	r3, [r7, #48]	@ 0x30
 800f34e:	683b      	ldr	r3, [r7, #0]
 800f350:	691b      	ldr	r3, [r3, #16]
 800f352:	f003 031f 	and.w	r3, r3, #31
 800f356:	2b00      	cmp	r3, #0
 800f358:	d102      	bne.n	800f360 <USB_EPStartXfer+0xd04>
 800f35a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f35c:	3b01      	subs	r3, #1
 800f35e:	633b      	str	r3, [r7, #48]	@ 0x30
 800f360:	683b      	ldr	r3, [r7, #0]
 800f362:	781b      	ldrb	r3, [r3, #0]
 800f364:	00db      	lsls	r3, r3, #3
 800f366:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f36a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f36e:	685a      	ldr	r2, [r3, #4]
 800f370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f372:	069b      	lsls	r3, r3, #26
 800f374:	431a      	orrs	r2, r3
 800f376:	683b      	ldr	r3, [r7, #0]
 800f378:	781b      	ldrb	r3, [r3, #0]
 800f37a:	00db      	lsls	r3, r3, #3
 800f37c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f380:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f384:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f388:	605a      	str	r2, [r3, #4]
 800f38a:	e028      	b.n	800f3de <USB_EPStartXfer+0xd82>
 800f38c:	683b      	ldr	r3, [r7, #0]
 800f38e:	785b      	ldrb	r3, [r3, #1]
 800f390:	2b01      	cmp	r3, #1
 800f392:	d124      	bne.n	800f3de <USB_EPStartXfer+0xd82>
 800f394:	683b      	ldr	r3, [r7, #0]
 800f396:	781b      	ldrb	r3, [r3, #0]
 800f398:	00db      	lsls	r3, r3, #3
 800f39a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f39e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f3a2:	685a      	ldr	r2, [r3, #4]
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	781b      	ldrb	r3, [r3, #0]
 800f3a8:	00db      	lsls	r3, r3, #3
 800f3aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f3ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f3b2:	b292      	uxth	r2, r2
 800f3b4:	605a      	str	r2, [r3, #4]
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	781b      	ldrb	r3, [r3, #0]
 800f3ba:	00db      	lsls	r3, r3, #3
 800f3bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f3c0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f3c4:	6859      	ldr	r1, [r3, #4]
 800f3c6:	683b      	ldr	r3, [r7, #0]
 800f3c8:	691b      	ldr	r3, [r3, #16]
 800f3ca:	041a      	lsls	r2, r3, #16
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	781b      	ldrb	r3, [r3, #0]
 800f3d0:	00db      	lsls	r3, r3, #3
 800f3d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f3d6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f3da:	430a      	orrs	r2, r1
 800f3dc:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800f3de:	683b      	ldr	r3, [r7, #0]
 800f3e0:	69db      	ldr	r3, [r3, #28]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	f000 8181 	beq.w	800f6ea <USB_EPStartXfer+0x108e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 800f3e8:	687a      	ldr	r2, [r7, #4]
 800f3ea:	683b      	ldr	r3, [r7, #0]
 800f3ec:	781b      	ldrb	r3, [r3, #0]
 800f3ee:	009b      	lsls	r3, r3, #2
 800f3f0:	4413      	add	r3, r2
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	84fb      	strh	r3, [r7, #38]	@ 0x26

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800f3f6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f3f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d004      	beq.n	800f40a <USB_EPStartXfer+0xdae>
 800f400:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f402:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f406:	2b00      	cmp	r3, #0
 800f408:	d10b      	bne.n	800f422 <USB_EPStartXfer+0xdc6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800f40a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f40c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800f410:	2b00      	cmp	r3, #0
 800f412:	f040 816a 	bne.w	800f6ea <USB_EPStartXfer+0x108e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800f416:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	f040 8164 	bne.w	800f6ea <USB_EPStartXfer+0x108e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800f422:	687a      	ldr	r2, [r7, #4]
 800f424:	683b      	ldr	r3, [r7, #0]
 800f426:	781b      	ldrb	r3, [r3, #0]
 800f428:	009b      	lsls	r3, r3, #2
 800f42a:	4413      	add	r3, r2
 800f42c:	681a      	ldr	r2, [r3, #0]
 800f42e:	4b98      	ldr	r3, [pc, #608]	@ (800f690 <USB_EPStartXfer+0x1034>)
 800f430:	4013      	ands	r3, r2
 800f432:	623b      	str	r3, [r7, #32]
 800f434:	687a      	ldr	r2, [r7, #4]
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	781b      	ldrb	r3, [r3, #0]
 800f43a:	009b      	lsls	r3, r3, #2
 800f43c:	441a      	add	r2, r3
 800f43e:	6a3b      	ldr	r3, [r7, #32]
 800f440:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f444:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800f448:	6013      	str	r3, [r2, #0]
 800f44a:	e14e      	b.n	800f6ea <USB_EPStartXfer+0x108e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800f44c:	683b      	ldr	r3, [r7, #0]
 800f44e:	78db      	ldrb	r3, [r3, #3]
 800f450:	2b01      	cmp	r3, #1
 800f452:	f040 8148 	bne.w	800f6e6 <USB_EPStartXfer+0x108a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800f456:	683b      	ldr	r3, [r7, #0]
 800f458:	699a      	ldr	r2, [r3, #24]
 800f45a:	683b      	ldr	r3, [r7, #0]
 800f45c:	691b      	ldr	r3, [r3, #16]
 800f45e:	429a      	cmp	r2, r3
 800f460:	d909      	bls.n	800f476 <USB_EPStartXfer+0xe1a>
        {
          len = ep->maxpacket;
 800f462:	683b      	ldr	r3, [r7, #0]
 800f464:	691b      	ldr	r3, [r3, #16]
 800f466:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	699a      	ldr	r2, [r3, #24]
 800f46c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f46e:	1ad2      	subs	r2, r2, r3
 800f470:	683b      	ldr	r3, [r7, #0]
 800f472:	619a      	str	r2, [r3, #24]
 800f474:	e005      	b.n	800f482 <USB_EPStartXfer+0xe26>
        }
        else
        {
          len = ep->xfer_len;
 800f476:	683b      	ldr	r3, [r7, #0]
 800f478:	699b      	ldr	r3, [r3, #24]
 800f47a:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	2200      	movs	r2, #0
 800f480:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800f482:	683b      	ldr	r3, [r7, #0]
 800f484:	785b      	ldrb	r3, [r3, #1]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d16a      	bne.n	800f560 <USB_EPStartXfer+0xf04>
 800f48a:	683b      	ldr	r3, [r7, #0]
 800f48c:	781b      	ldrb	r3, [r3, #0]
 800f48e:	00db      	lsls	r3, r3, #3
 800f490:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f494:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f498:	681a      	ldr	r2, [r3, #0]
 800f49a:	683b      	ldr	r3, [r7, #0]
 800f49c:	781b      	ldrb	r3, [r3, #0]
 800f49e:	00db      	lsls	r3, r3, #3
 800f4a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f4a4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f4a8:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800f4ac:	601a      	str	r2, [r3, #0]
 800f4ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d112      	bne.n	800f4da <USB_EPStartXfer+0xe7e>
 800f4b4:	683b      	ldr	r3, [r7, #0]
 800f4b6:	781b      	ldrb	r3, [r3, #0]
 800f4b8:	00db      	lsls	r3, r3, #3
 800f4ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f4be:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f4c2:	681a      	ldr	r2, [r3, #0]
 800f4c4:	683b      	ldr	r3, [r7, #0]
 800f4c6:	781b      	ldrb	r3, [r3, #0]
 800f4c8:	00db      	lsls	r3, r3, #3
 800f4ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f4ce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f4d2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f4d6:	601a      	str	r2, [r3, #0]
 800f4d8:	e06a      	b.n	800f5b0 <USB_EPStartXfer+0xf54>
 800f4da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f4dc:	2b3e      	cmp	r3, #62	@ 0x3e
 800f4de:	d81e      	bhi.n	800f51e <USB_EPStartXfer+0xec2>
 800f4e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f4e2:	085b      	lsrs	r3, r3, #1
 800f4e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f4e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f4e8:	f003 0301 	and.w	r3, r3, #1
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d002      	beq.n	800f4f6 <USB_EPStartXfer+0xe9a>
 800f4f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4f2:	3301      	adds	r3, #1
 800f4f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f4f6:	683b      	ldr	r3, [r7, #0]
 800f4f8:	781b      	ldrb	r3, [r3, #0]
 800f4fa:	00db      	lsls	r3, r3, #3
 800f4fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f500:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f504:	6819      	ldr	r1, [r3, #0]
 800f506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f508:	069a      	lsls	r2, r3, #26
 800f50a:	683b      	ldr	r3, [r7, #0]
 800f50c:	781b      	ldrb	r3, [r3, #0]
 800f50e:	00db      	lsls	r3, r3, #3
 800f510:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f514:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f518:	430a      	orrs	r2, r1
 800f51a:	601a      	str	r2, [r3, #0]
 800f51c:	e048      	b.n	800f5b0 <USB_EPStartXfer+0xf54>
 800f51e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f520:	095b      	lsrs	r3, r3, #5
 800f522:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f524:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f526:	f003 031f 	and.w	r3, r3, #31
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d102      	bne.n	800f534 <USB_EPStartXfer+0xed8>
 800f52e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f530:	3b01      	subs	r3, #1
 800f532:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f534:	683b      	ldr	r3, [r7, #0]
 800f536:	781b      	ldrb	r3, [r3, #0]
 800f538:	00db      	lsls	r3, r3, #3
 800f53a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f53e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f542:	681a      	ldr	r2, [r3, #0]
 800f544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f546:	069b      	lsls	r3, r3, #26
 800f548:	431a      	orrs	r2, r3
 800f54a:	683b      	ldr	r3, [r7, #0]
 800f54c:	781b      	ldrb	r3, [r3, #0]
 800f54e:	00db      	lsls	r3, r3, #3
 800f550:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f554:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f558:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f55c:	601a      	str	r2, [r3, #0]
 800f55e:	e027      	b.n	800f5b0 <USB_EPStartXfer+0xf54>
 800f560:	683b      	ldr	r3, [r7, #0]
 800f562:	785b      	ldrb	r3, [r3, #1]
 800f564:	2b01      	cmp	r3, #1
 800f566:	d123      	bne.n	800f5b0 <USB_EPStartXfer+0xf54>
 800f568:	683b      	ldr	r3, [r7, #0]
 800f56a:	781b      	ldrb	r3, [r3, #0]
 800f56c:	00db      	lsls	r3, r3, #3
 800f56e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f572:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f576:	681a      	ldr	r2, [r3, #0]
 800f578:	683b      	ldr	r3, [r7, #0]
 800f57a:	781b      	ldrb	r3, [r3, #0]
 800f57c:	00db      	lsls	r3, r3, #3
 800f57e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f582:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f586:	b292      	uxth	r2, r2
 800f588:	601a      	str	r2, [r3, #0]
 800f58a:	683b      	ldr	r3, [r7, #0]
 800f58c:	781b      	ldrb	r3, [r3, #0]
 800f58e:	00db      	lsls	r3, r3, #3
 800f590:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f594:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f598:	6819      	ldr	r1, [r3, #0]
 800f59a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f59c:	041a      	lsls	r2, r3, #16
 800f59e:	683b      	ldr	r3, [r7, #0]
 800f5a0:	781b      	ldrb	r3, [r3, #0]
 800f5a2:	00db      	lsls	r3, r3, #3
 800f5a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f5a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f5ac:	430a      	orrs	r2, r1
 800f5ae:	601a      	str	r2, [r3, #0]
 800f5b0:	683b      	ldr	r3, [r7, #0]
 800f5b2:	785b      	ldrb	r3, [r3, #1]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d16d      	bne.n	800f694 <USB_EPStartXfer+0x1038>
 800f5b8:	683b      	ldr	r3, [r7, #0]
 800f5ba:	781b      	ldrb	r3, [r3, #0]
 800f5bc:	00db      	lsls	r3, r3, #3
 800f5be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f5c2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f5c6:	685a      	ldr	r2, [r3, #4]
 800f5c8:	683b      	ldr	r3, [r7, #0]
 800f5ca:	781b      	ldrb	r3, [r3, #0]
 800f5cc:	00db      	lsls	r3, r3, #3
 800f5ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f5d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f5d6:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800f5da:	605a      	str	r2, [r3, #4]
 800f5dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d112      	bne.n	800f608 <USB_EPStartXfer+0xfac>
 800f5e2:	683b      	ldr	r3, [r7, #0]
 800f5e4:	781b      	ldrb	r3, [r3, #0]
 800f5e6:	00db      	lsls	r3, r3, #3
 800f5e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f5ec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f5f0:	685a      	ldr	r2, [r3, #4]
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	781b      	ldrb	r3, [r3, #0]
 800f5f6:	00db      	lsls	r3, r3, #3
 800f5f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f5fc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f600:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f604:	605a      	str	r2, [r3, #4]
 800f606:	e070      	b.n	800f6ea <USB_EPStartXfer+0x108e>
 800f608:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f60a:	2b3e      	cmp	r3, #62	@ 0x3e
 800f60c:	d81e      	bhi.n	800f64c <USB_EPStartXfer+0xff0>
 800f60e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f610:	085b      	lsrs	r3, r3, #1
 800f612:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f614:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f616:	f003 0301 	and.w	r3, r3, #1
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d002      	beq.n	800f624 <USB_EPStartXfer+0xfc8>
 800f61e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f620:	3301      	adds	r3, #1
 800f622:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f624:	683b      	ldr	r3, [r7, #0]
 800f626:	781b      	ldrb	r3, [r3, #0]
 800f628:	00db      	lsls	r3, r3, #3
 800f62a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f62e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f632:	6859      	ldr	r1, [r3, #4]
 800f634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f636:	069a      	lsls	r2, r3, #26
 800f638:	683b      	ldr	r3, [r7, #0]
 800f63a:	781b      	ldrb	r3, [r3, #0]
 800f63c:	00db      	lsls	r3, r3, #3
 800f63e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f642:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f646:	430a      	orrs	r2, r1
 800f648:	605a      	str	r2, [r3, #4]
 800f64a:	e04e      	b.n	800f6ea <USB_EPStartXfer+0x108e>
 800f64c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f64e:	095b      	lsrs	r3, r3, #5
 800f650:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f652:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f654:	f003 031f 	and.w	r3, r3, #31
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d102      	bne.n	800f662 <USB_EPStartXfer+0x1006>
 800f65c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f65e:	3b01      	subs	r3, #1
 800f660:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f662:	683b      	ldr	r3, [r7, #0]
 800f664:	781b      	ldrb	r3, [r3, #0]
 800f666:	00db      	lsls	r3, r3, #3
 800f668:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f66c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f670:	685a      	ldr	r2, [r3, #4]
 800f672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f674:	069b      	lsls	r3, r3, #26
 800f676:	431a      	orrs	r2, r3
 800f678:	683b      	ldr	r3, [r7, #0]
 800f67a:	781b      	ldrb	r3, [r3, #0]
 800f67c:	00db      	lsls	r3, r3, #3
 800f67e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f682:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f686:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f68a:	605a      	str	r2, [r3, #4]
 800f68c:	e02d      	b.n	800f6ea <USB_EPStartXfer+0x108e>
 800f68e:	bf00      	nop
 800f690:	07ff8f8f 	.word	0x07ff8f8f
 800f694:	683b      	ldr	r3, [r7, #0]
 800f696:	785b      	ldrb	r3, [r3, #1]
 800f698:	2b01      	cmp	r3, #1
 800f69a:	d126      	bne.n	800f6ea <USB_EPStartXfer+0x108e>
 800f69c:	683b      	ldr	r3, [r7, #0]
 800f69e:	781b      	ldrb	r3, [r3, #0]
 800f6a0:	00db      	lsls	r3, r3, #3
 800f6a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f6a6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f6aa:	685a      	ldr	r2, [r3, #4]
 800f6ac:	683b      	ldr	r3, [r7, #0]
 800f6ae:	781b      	ldrb	r3, [r3, #0]
 800f6b0:	00db      	lsls	r3, r3, #3
 800f6b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f6b6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f6ba:	b292      	uxth	r2, r2
 800f6bc:	605a      	str	r2, [r3, #4]
 800f6be:	683b      	ldr	r3, [r7, #0]
 800f6c0:	781b      	ldrb	r3, [r3, #0]
 800f6c2:	00db      	lsls	r3, r3, #3
 800f6c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f6c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f6cc:	6859      	ldr	r1, [r3, #4]
 800f6ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f6d0:	041a      	lsls	r2, r3, #16
 800f6d2:	683b      	ldr	r3, [r7, #0]
 800f6d4:	781b      	ldrb	r3, [r3, #0]
 800f6d6:	00db      	lsls	r3, r3, #3
 800f6d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f6dc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f6e0:	430a      	orrs	r2, r1
 800f6e2:	605a      	str	r2, [r3, #4]
 800f6e4:	e001      	b.n	800f6ea <USB_EPStartXfer+0x108e>
      }
      else
      {
        return HAL_ERROR;
 800f6e6:	2301      	movs	r3, #1
 800f6e8:	e01c      	b.n	800f724 <USB_EPStartXfer+0x10c8>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f6ea:	687a      	ldr	r2, [r7, #4]
 800f6ec:	683b      	ldr	r3, [r7, #0]
 800f6ee:	781b      	ldrb	r3, [r3, #0]
 800f6f0:	009b      	lsls	r3, r3, #2
 800f6f2:	4413      	add	r3, r2
 800f6f4:	681a      	ldr	r2, [r3, #0]
 800f6f6:	4b0d      	ldr	r3, [pc, #52]	@ (800f72c <USB_EPStartXfer+0x10d0>)
 800f6f8:	4013      	ands	r3, r2
 800f6fa:	61fb      	str	r3, [r7, #28]
 800f6fc:	69fb      	ldr	r3, [r7, #28]
 800f6fe:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800f702:	61fb      	str	r3, [r7, #28]
 800f704:	69fb      	ldr	r3, [r7, #28]
 800f706:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800f70a:	61fb      	str	r3, [r7, #28]
 800f70c:	687a      	ldr	r2, [r7, #4]
 800f70e:	683b      	ldr	r3, [r7, #0]
 800f710:	781b      	ldrb	r3, [r3, #0]
 800f712:	009b      	lsls	r3, r3, #2
 800f714:	441a      	add	r2, r3
 800f716:	69fb      	ldr	r3, [r7, #28]
 800f718:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f71c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f720:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f722:	2300      	movs	r3, #0
}
 800f724:	4618      	mov	r0, r3
 800f726:	3758      	adds	r7, #88	@ 0x58
 800f728:	46bd      	mov	sp, r7
 800f72a:	bd80      	pop	{r7, pc}
 800f72c:	07ffbf8f 	.word	0x07ffbf8f

0800f730 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800f730:	b480      	push	{r7}
 800f732:	b085      	sub	sp, #20
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
 800f738:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800f73a:	683b      	ldr	r3, [r7, #0]
 800f73c:	785b      	ldrb	r3, [r3, #1]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d018      	beq.n	800f774 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800f742:	687a      	ldr	r2, [r7, #4]
 800f744:	683b      	ldr	r3, [r7, #0]
 800f746:	781b      	ldrb	r3, [r3, #0]
 800f748:	009b      	lsls	r3, r3, #2
 800f74a:	4413      	add	r3, r2
 800f74c:	681a      	ldr	r2, [r3, #0]
 800f74e:	4b19      	ldr	r3, [pc, #100]	@ (800f7b4 <USB_EPSetStall+0x84>)
 800f750:	4013      	ands	r3, r2
 800f752:	60bb      	str	r3, [r7, #8]
 800f754:	68bb      	ldr	r3, [r7, #8]
 800f756:	f083 0310 	eor.w	r3, r3, #16
 800f75a:	60bb      	str	r3, [r7, #8]
 800f75c:	687a      	ldr	r2, [r7, #4]
 800f75e:	683b      	ldr	r3, [r7, #0]
 800f760:	781b      	ldrb	r3, [r3, #0]
 800f762:	009b      	lsls	r3, r3, #2
 800f764:	441a      	add	r2, r3
 800f766:	68bb      	ldr	r3, [r7, #8]
 800f768:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f76c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f770:	6013      	str	r3, [r2, #0]
 800f772:	e017      	b.n	800f7a4 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800f774:	687a      	ldr	r2, [r7, #4]
 800f776:	683b      	ldr	r3, [r7, #0]
 800f778:	781b      	ldrb	r3, [r3, #0]
 800f77a:	009b      	lsls	r3, r3, #2
 800f77c:	4413      	add	r3, r2
 800f77e:	681a      	ldr	r2, [r3, #0]
 800f780:	4b0d      	ldr	r3, [pc, #52]	@ (800f7b8 <USB_EPSetStall+0x88>)
 800f782:	4013      	ands	r3, r2
 800f784:	60fb      	str	r3, [r7, #12]
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800f78c:	60fb      	str	r3, [r7, #12]
 800f78e:	687a      	ldr	r2, [r7, #4]
 800f790:	683b      	ldr	r3, [r7, #0]
 800f792:	781b      	ldrb	r3, [r3, #0]
 800f794:	009b      	lsls	r3, r3, #2
 800f796:	441a      	add	r2, r3
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f79e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f7a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f7a4:	2300      	movs	r3, #0
}
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	3714      	adds	r7, #20
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b0:	4770      	bx	lr
 800f7b2:	bf00      	nop
 800f7b4:	07ff8fbf 	.word	0x07ff8fbf
 800f7b8:	07ffbf8f 	.word	0x07ffbf8f

0800f7bc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800f7bc:	b480      	push	{r7}
 800f7be:	b089      	sub	sp, #36	@ 0x24
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	6078      	str	r0, [r7, #4]
 800f7c4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800f7c6:	683b      	ldr	r3, [r7, #0]
 800f7c8:	7b1b      	ldrb	r3, [r3, #12]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d17c      	bne.n	800f8c8 <USB_EPClearStall+0x10c>
  {
    if (ep->is_in != 0U)
 800f7ce:	683b      	ldr	r3, [r7, #0]
 800f7d0:	785b      	ldrb	r3, [r3, #1]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d03c      	beq.n	800f850 <USB_EPClearStall+0x94>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f7d6:	687a      	ldr	r2, [r7, #4]
 800f7d8:	683b      	ldr	r3, [r7, #0]
 800f7da:	781b      	ldrb	r3, [r3, #0]
 800f7dc:	009b      	lsls	r3, r3, #2
 800f7de:	4413      	add	r3, r2
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	613b      	str	r3, [r7, #16]
 800f7e4:	693b      	ldr	r3, [r7, #16]
 800f7e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d013      	beq.n	800f816 <USB_EPClearStall+0x5a>
 800f7ee:	687a      	ldr	r2, [r7, #4]
 800f7f0:	683b      	ldr	r3, [r7, #0]
 800f7f2:	781b      	ldrb	r3, [r3, #0]
 800f7f4:	009b      	lsls	r3, r3, #2
 800f7f6:	4413      	add	r3, r2
 800f7f8:	681a      	ldr	r2, [r3, #0]
 800f7fa:	4b37      	ldr	r3, [pc, #220]	@ (800f8d8 <USB_EPClearStall+0x11c>)
 800f7fc:	4013      	ands	r3, r2
 800f7fe:	60fb      	str	r3, [r7, #12]
 800f800:	687a      	ldr	r2, [r7, #4]
 800f802:	683b      	ldr	r3, [r7, #0]
 800f804:	781b      	ldrb	r3, [r3, #0]
 800f806:	009b      	lsls	r3, r3, #2
 800f808:	441a      	add	r2, r3
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f810:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800f814:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f816:	683b      	ldr	r3, [r7, #0]
 800f818:	78db      	ldrb	r3, [r3, #3]
 800f81a:	2b01      	cmp	r3, #1
 800f81c:	d054      	beq.n	800f8c8 <USB_EPClearStall+0x10c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f81e:	687a      	ldr	r2, [r7, #4]
 800f820:	683b      	ldr	r3, [r7, #0]
 800f822:	781b      	ldrb	r3, [r3, #0]
 800f824:	009b      	lsls	r3, r3, #2
 800f826:	4413      	add	r3, r2
 800f828:	681a      	ldr	r2, [r3, #0]
 800f82a:	4b2c      	ldr	r3, [pc, #176]	@ (800f8dc <USB_EPClearStall+0x120>)
 800f82c:	4013      	ands	r3, r2
 800f82e:	60bb      	str	r3, [r7, #8]
 800f830:	68bb      	ldr	r3, [r7, #8]
 800f832:	f083 0320 	eor.w	r3, r3, #32
 800f836:	60bb      	str	r3, [r7, #8]
 800f838:	687a      	ldr	r2, [r7, #4]
 800f83a:	683b      	ldr	r3, [r7, #0]
 800f83c:	781b      	ldrb	r3, [r3, #0]
 800f83e:	009b      	lsls	r3, r3, #2
 800f840:	441a      	add	r2, r3
 800f842:	68bb      	ldr	r3, [r7, #8]
 800f844:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f848:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f84c:	6013      	str	r3, [r2, #0]
 800f84e:	e03b      	b.n	800f8c8 <USB_EPClearStall+0x10c>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f850:	687a      	ldr	r2, [r7, #4]
 800f852:	683b      	ldr	r3, [r7, #0]
 800f854:	781b      	ldrb	r3, [r3, #0]
 800f856:	009b      	lsls	r3, r3, #2
 800f858:	4413      	add	r3, r2
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	61fb      	str	r3, [r7, #28]
 800f85e:	69fb      	ldr	r3, [r7, #28]
 800f860:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f864:	2b00      	cmp	r3, #0
 800f866:	d013      	beq.n	800f890 <USB_EPClearStall+0xd4>
 800f868:	687a      	ldr	r2, [r7, #4]
 800f86a:	683b      	ldr	r3, [r7, #0]
 800f86c:	781b      	ldrb	r3, [r3, #0]
 800f86e:	009b      	lsls	r3, r3, #2
 800f870:	4413      	add	r3, r2
 800f872:	681a      	ldr	r2, [r3, #0]
 800f874:	4b18      	ldr	r3, [pc, #96]	@ (800f8d8 <USB_EPClearStall+0x11c>)
 800f876:	4013      	ands	r3, r2
 800f878:	61bb      	str	r3, [r7, #24]
 800f87a:	687a      	ldr	r2, [r7, #4]
 800f87c:	683b      	ldr	r3, [r7, #0]
 800f87e:	781b      	ldrb	r3, [r3, #0]
 800f880:	009b      	lsls	r3, r3, #2
 800f882:	441a      	add	r2, r3
 800f884:	69bb      	ldr	r3, [r7, #24]
 800f886:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800f88a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f88e:	6013      	str	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f890:	687a      	ldr	r2, [r7, #4]
 800f892:	683b      	ldr	r3, [r7, #0]
 800f894:	781b      	ldrb	r3, [r3, #0]
 800f896:	009b      	lsls	r3, r3, #2
 800f898:	4413      	add	r3, r2
 800f89a:	681a      	ldr	r2, [r3, #0]
 800f89c:	4b10      	ldr	r3, [pc, #64]	@ (800f8e0 <USB_EPClearStall+0x124>)
 800f89e:	4013      	ands	r3, r2
 800f8a0:	617b      	str	r3, [r7, #20]
 800f8a2:	697b      	ldr	r3, [r7, #20]
 800f8a4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800f8a8:	617b      	str	r3, [r7, #20]
 800f8aa:	697b      	ldr	r3, [r7, #20]
 800f8ac:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800f8b0:	617b      	str	r3, [r7, #20]
 800f8b2:	687a      	ldr	r2, [r7, #4]
 800f8b4:	683b      	ldr	r3, [r7, #0]
 800f8b6:	781b      	ldrb	r3, [r3, #0]
 800f8b8:	009b      	lsls	r3, r3, #2
 800f8ba:	441a      	add	r2, r3
 800f8bc:	697b      	ldr	r3, [r7, #20]
 800f8be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f8c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f8c6:	6013      	str	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800f8c8:	2300      	movs	r3, #0
}
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	3724      	adds	r7, #36	@ 0x24
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d4:	4770      	bx	lr
 800f8d6:	bf00      	nop
 800f8d8:	07ff8f8f 	.word	0x07ff8f8f
 800f8dc:	07ff8fbf 	.word	0x07ff8fbf
 800f8e0:	07ffbf8f 	.word	0x07ffbf8f

0800f8e4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 800f8e4:	b480      	push	{r7}
 800f8e6:	b083      	sub	sp, #12
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
 800f8ec:	460b      	mov	r3, r1
 800f8ee:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800f8f0:	78fb      	ldrb	r3, [r7, #3]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d102      	bne.n	800f8fc <USB_SetDevAddress+0x18>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	2280      	movs	r2, #128	@ 0x80
 800f8fa:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800f8fc:	2300      	movs	r3, #0
}
 800f8fe:	4618      	mov	r0, r3
 800f900:	370c      	adds	r7, #12
 800f902:	46bd      	mov	sp, r7
 800f904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f908:	4770      	bx	lr

0800f90a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 800f90a:	b480      	push	{r7}
 800f90c:	b083      	sub	sp, #12
 800f90e:	af00      	add	r7, sp, #0
 800f910:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f916:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800f91e:	2300      	movs	r3, #0
}
 800f920:	4618      	mov	r0, r3
 800f922:	370c      	adds	r7, #12
 800f924:	46bd      	mov	sp, r7
 800f926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92a:	4770      	bx	lr

0800f92c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 800f92c:	b480      	push	{r7}
 800f92e:	b083      	sub	sp, #12
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f938:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800f940:	2300      	movs	r3, #0
}
 800f942:	4618      	mov	r0, r3
 800f944:	370c      	adds	r7, #12
 800f946:	46bd      	mov	sp, r7
 800f948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94c:	4770      	bx	lr

0800f94e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 800f94e:	b480      	push	{r7}
 800f950:	b085      	sub	sp, #20
 800f952:	af00      	add	r7, sp, #0
 800f954:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f95a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800f95c:	68fb      	ldr	r3, [r7, #12]
}
 800f95e:	4618      	mov	r0, r3
 800f960:	3714      	adds	r7, #20
 800f962:	46bd      	mov	sp, r7
 800f964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f968:	4770      	bx	lr

0800f96a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800f96a:	b480      	push	{r7}
 800f96c:	b08b      	sub	sp, #44	@ 0x2c
 800f96e:	af00      	add	r7, sp, #0
 800f970:	60f8      	str	r0, [r7, #12]
 800f972:	60b9      	str	r1, [r7, #8]
 800f974:	4611      	mov	r1, r2
 800f976:	461a      	mov	r2, r3
 800f978:	460b      	mov	r3, r1
 800f97a:	80fb      	strh	r3, [r7, #6]
 800f97c:	4613      	mov	r3, r2
 800f97e:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800f980:	88bb      	ldrh	r3, [r7, #4]
 800f982:	3303      	adds	r3, #3
 800f984:	089b      	lsrs	r3, r3, #2
 800f986:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800f988:	88bb      	ldrh	r3, [r7, #4]
 800f98a:	f003 0303 	and.w	r3, r3, #3
 800f98e:	82fb      	strh	r3, [r7, #22]
  uint8_t *pBuf = pbUsrBuf;
 800f990:	68bb      	ldr	r3, [r7, #8]
 800f992:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 800f994:	8afb      	ldrh	r3, [r7, #22]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d002      	beq.n	800f9a0 <USB_WritePMA+0x36>
  {
    NbWords--;
 800f99a:	69bb      	ldr	r3, [r7, #24]
 800f99c:	3b01      	subs	r3, #1
 800f99e:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800f9a0:	88fb      	ldrh	r3, [r7, #6]
 800f9a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f9a6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f9aa:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 800f9ac:	69bb      	ldr	r3, [r7, #24]
 800f9ae:	623b      	str	r3, [r7, #32]
 800f9b0:	e015      	b.n	800f9de <USB_WritePMA+0x74>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 800f9b2:	693b      	ldr	r3, [r7, #16]
 800f9b4:	681a      	ldr	r2, [r3, #0]
 800f9b6:	69fb      	ldr	r3, [r7, #28]
 800f9b8:	601a      	str	r2, [r3, #0]
    pdwVal++;
 800f9ba:	69fb      	ldr	r3, [r7, #28]
 800f9bc:	3304      	adds	r3, #4
 800f9be:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 800f9c0:	693b      	ldr	r3, [r7, #16]
 800f9c2:	3301      	adds	r3, #1
 800f9c4:	613b      	str	r3, [r7, #16]
    pBuf++;
 800f9c6:	693b      	ldr	r3, [r7, #16]
 800f9c8:	3301      	adds	r3, #1
 800f9ca:	613b      	str	r3, [r7, #16]
    pBuf++;
 800f9cc:	693b      	ldr	r3, [r7, #16]
 800f9ce:	3301      	adds	r3, #1
 800f9d0:	613b      	str	r3, [r7, #16]
    pBuf++;
 800f9d2:	693b      	ldr	r3, [r7, #16]
 800f9d4:	3301      	adds	r3, #1
 800f9d6:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 800f9d8:	6a3b      	ldr	r3, [r7, #32]
 800f9da:	3b01      	subs	r3, #1
 800f9dc:	623b      	str	r3, [r7, #32]
 800f9de:	6a3b      	ldr	r3, [r7, #32]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d1e6      	bne.n	800f9b2 <USB_WritePMA+0x48>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 800f9e4:	8afb      	ldrh	r3, [r7, #22]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d01a      	beq.n	800fa20 <USB_WritePMA+0xb6>
  {
    WrVal = 0U;
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800f9ee:	693b      	ldr	r3, [r7, #16]
 800f9f0:	781b      	ldrb	r3, [r3, #0]
 800f9f2:	461a      	mov	r2, r3
 800f9f4:	6a3b      	ldr	r3, [r7, #32]
 800f9f6:	00db      	lsls	r3, r3, #3
 800f9f8:	fa02 f303 	lsl.w	r3, r2, r3
 800f9fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f9fe:	4313      	orrs	r3, r2
 800fa00:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 800fa02:	6a3b      	ldr	r3, [r7, #32]
 800fa04:	3301      	adds	r3, #1
 800fa06:	623b      	str	r3, [r7, #32]
      pBuf++;
 800fa08:	693b      	ldr	r3, [r7, #16]
 800fa0a:	3301      	adds	r3, #1
 800fa0c:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 800fa0e:	8afb      	ldrh	r3, [r7, #22]
 800fa10:	3b01      	subs	r3, #1
 800fa12:	82fb      	strh	r3, [r7, #22]
    } while (remaining_bytes != 0U);
 800fa14:	8afb      	ldrh	r3, [r7, #22]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d1e9      	bne.n	800f9ee <USB_WritePMA+0x84>

    *pdwVal = WrVal;
 800fa1a:	69fb      	ldr	r3, [r7, #28]
 800fa1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa1e:	601a      	str	r2, [r3, #0]
  }
}
 800fa20:	bf00      	nop
 800fa22:	372c      	adds	r7, #44	@ 0x2c
 800fa24:	46bd      	mov	sp, r7
 800fa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2a:	4770      	bx	lr

0800fa2c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800fa2c:	b480      	push	{r7}
 800fa2e:	b08b      	sub	sp, #44	@ 0x2c
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	60f8      	str	r0, [r7, #12]
 800fa34:	60b9      	str	r1, [r7, #8]
 800fa36:	4611      	mov	r1, r2
 800fa38:	461a      	mov	r2, r3
 800fa3a:	460b      	mov	r3, r1
 800fa3c:	80fb      	strh	r3, [r7, #6]
 800fa3e:	4613      	mov	r3, r2
 800fa40:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800fa42:	88bb      	ldrh	r3, [r7, #4]
 800fa44:	3303      	adds	r3, #3
 800fa46:	089b      	lsrs	r3, r3, #2
 800fa48:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800fa4a:	88bb      	ldrh	r3, [r7, #4]
 800fa4c:	f003 0303 	and.w	r3, r3, #3
 800fa50:	837b      	strh	r3, [r7, #26]
  uint8_t *pBuf = pbUsrBuf;
 800fa52:	68bb      	ldr	r3, [r7, #8]
 800fa54:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800fa56:	88fb      	ldrh	r3, [r7, #6]
 800fa58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fa5c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800fa60:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 800fa62:	8b7b      	ldrh	r3, [r7, #26]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d002      	beq.n	800fa6e <USB_ReadPMA+0x42>
  {
    NbWords--;
 800fa68:	69fb      	ldr	r3, [r7, #28]
 800fa6a:	3b01      	subs	r3, #1
 800fa6c:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 800fa6e:	69fb      	ldr	r3, [r7, #28]
 800fa70:	627b      	str	r3, [r7, #36]	@ 0x24
 800fa72:	e015      	b.n	800faa0 <USB_ReadPMA+0x74>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 800fa74:	6a3b      	ldr	r3, [r7, #32]
 800fa76:	681a      	ldr	r2, [r3, #0]
 800fa78:	697b      	ldr	r3, [r7, #20]
 800fa7a:	601a      	str	r2, [r3, #0]

    pdwVal++;
 800fa7c:	6a3b      	ldr	r3, [r7, #32]
 800fa7e:	3304      	adds	r3, #4
 800fa80:	623b      	str	r3, [r7, #32]
    pBuf++;
 800fa82:	697b      	ldr	r3, [r7, #20]
 800fa84:	3301      	adds	r3, #1
 800fa86:	617b      	str	r3, [r7, #20]
    pBuf++;
 800fa88:	697b      	ldr	r3, [r7, #20]
 800fa8a:	3301      	adds	r3, #1
 800fa8c:	617b      	str	r3, [r7, #20]
    pBuf++;
 800fa8e:	697b      	ldr	r3, [r7, #20]
 800fa90:	3301      	adds	r3, #1
 800fa92:	617b      	str	r3, [r7, #20]
    pBuf++;
 800fa94:	697b      	ldr	r3, [r7, #20]
 800fa96:	3301      	adds	r3, #1
 800fa98:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 800fa9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa9c:	3b01      	subs	r3, #1
 800fa9e:	627b      	str	r3, [r7, #36]	@ 0x24
 800faa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d1e6      	bne.n	800fa74 <USB_ReadPMA+0x48>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 800faa6:	8b7b      	ldrh	r3, [r7, #26]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d017      	beq.n	800fadc <USB_ReadPMA+0xb0>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 800faac:	6a3b      	ldr	r3, [r7, #32]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 800fab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fab4:	b2db      	uxtb	r3, r3
 800fab6:	00db      	lsls	r3, r3, #3
 800fab8:	693a      	ldr	r2, [r7, #16]
 800faba:	fa22 f303 	lsr.w	r3, r2, r3
 800fabe:	b2da      	uxtb	r2, r3
 800fac0:	697b      	ldr	r3, [r7, #20]
 800fac2:	701a      	strb	r2, [r3, #0]
      count++;
 800fac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fac6:	3301      	adds	r3, #1
 800fac8:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 800faca:	697b      	ldr	r3, [r7, #20]
 800facc:	3301      	adds	r3, #1
 800face:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 800fad0:	8b7b      	ldrh	r3, [r7, #26]
 800fad2:	3b01      	subs	r3, #1
 800fad4:	837b      	strh	r3, [r7, #26]
    } while (remaining_bytes != 0U);
 800fad6:	8b7b      	ldrh	r3, [r7, #26]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d1ea      	bne.n	800fab2 <USB_ReadPMA+0x86>
  }
}
 800fadc:	bf00      	nop
 800fade:	372c      	adds	r7, #44	@ 0x2c
 800fae0:	46bd      	mov	sp, r7
 800fae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae6:	4770      	bx	lr

0800fae8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fae8:	b580      	push	{r7, lr}
 800faea:	b084      	sub	sp, #16
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
 800faf0:	460b      	mov	r3, r1
 800faf2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800faf4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800faf8:	f000 fff0 	bl	8010adc <USBD_static_malloc>
 800fafc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d109      	bne.n	800fb18 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	32b0      	adds	r2, #176	@ 0xb0
 800fb0e:	2100      	movs	r1, #0
 800fb10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800fb14:	2302      	movs	r3, #2
 800fb16:	e0d4      	b.n	800fcc2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800fb18:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800fb1c:	2100      	movs	r1, #0
 800fb1e:	68f8      	ldr	r0, [r7, #12]
 800fb20:	f002 fd90 	bl	8012644 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	32b0      	adds	r2, #176	@ 0xb0
 800fb2e:	68f9      	ldr	r1, [r7, #12]
 800fb30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	32b0      	adds	r2, #176	@ 0xb0
 800fb3e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	7c1b      	ldrb	r3, [r3, #16]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d138      	bne.n	800fbc2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800fb50:	4b5e      	ldr	r3, [pc, #376]	@ (800fccc <USBD_CDC_Init+0x1e4>)
 800fb52:	7819      	ldrb	r1, [r3, #0]
 800fb54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fb58:	2202      	movs	r2, #2
 800fb5a:	6878      	ldr	r0, [r7, #4]
 800fb5c:	f000 fec5 	bl	80108ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800fb60:	4b5a      	ldr	r3, [pc, #360]	@ (800fccc <USBD_CDC_Init+0x1e4>)
 800fb62:	781b      	ldrb	r3, [r3, #0]
 800fb64:	f003 020f 	and.w	r2, r3, #15
 800fb68:	6879      	ldr	r1, [r7, #4]
 800fb6a:	4613      	mov	r3, r2
 800fb6c:	009b      	lsls	r3, r3, #2
 800fb6e:	4413      	add	r3, r2
 800fb70:	009b      	lsls	r3, r3, #2
 800fb72:	440b      	add	r3, r1
 800fb74:	3324      	adds	r3, #36	@ 0x24
 800fb76:	2201      	movs	r2, #1
 800fb78:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800fb7a:	4b55      	ldr	r3, [pc, #340]	@ (800fcd0 <USBD_CDC_Init+0x1e8>)
 800fb7c:	7819      	ldrb	r1, [r3, #0]
 800fb7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fb82:	2202      	movs	r2, #2
 800fb84:	6878      	ldr	r0, [r7, #4]
 800fb86:	f000 feb0 	bl	80108ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800fb8a:	4b51      	ldr	r3, [pc, #324]	@ (800fcd0 <USBD_CDC_Init+0x1e8>)
 800fb8c:	781b      	ldrb	r3, [r3, #0]
 800fb8e:	f003 020f 	and.w	r2, r3, #15
 800fb92:	6879      	ldr	r1, [r7, #4]
 800fb94:	4613      	mov	r3, r2
 800fb96:	009b      	lsls	r3, r3, #2
 800fb98:	4413      	add	r3, r2
 800fb9a:	009b      	lsls	r3, r3, #2
 800fb9c:	440b      	add	r3, r1
 800fb9e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fba2:	2201      	movs	r2, #1
 800fba4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800fba6:	4b4b      	ldr	r3, [pc, #300]	@ (800fcd4 <USBD_CDC_Init+0x1ec>)
 800fba8:	781b      	ldrb	r3, [r3, #0]
 800fbaa:	f003 020f 	and.w	r2, r3, #15
 800fbae:	6879      	ldr	r1, [r7, #4]
 800fbb0:	4613      	mov	r3, r2
 800fbb2:	009b      	lsls	r3, r3, #2
 800fbb4:	4413      	add	r3, r2
 800fbb6:	009b      	lsls	r3, r3, #2
 800fbb8:	440b      	add	r3, r1
 800fbba:	3326      	adds	r3, #38	@ 0x26
 800fbbc:	2210      	movs	r2, #16
 800fbbe:	801a      	strh	r2, [r3, #0]
 800fbc0:	e035      	b.n	800fc2e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800fbc2:	4b42      	ldr	r3, [pc, #264]	@ (800fccc <USBD_CDC_Init+0x1e4>)
 800fbc4:	7819      	ldrb	r1, [r3, #0]
 800fbc6:	2340      	movs	r3, #64	@ 0x40
 800fbc8:	2202      	movs	r2, #2
 800fbca:	6878      	ldr	r0, [r7, #4]
 800fbcc:	f000 fe8d 	bl	80108ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800fbd0:	4b3e      	ldr	r3, [pc, #248]	@ (800fccc <USBD_CDC_Init+0x1e4>)
 800fbd2:	781b      	ldrb	r3, [r3, #0]
 800fbd4:	f003 020f 	and.w	r2, r3, #15
 800fbd8:	6879      	ldr	r1, [r7, #4]
 800fbda:	4613      	mov	r3, r2
 800fbdc:	009b      	lsls	r3, r3, #2
 800fbde:	4413      	add	r3, r2
 800fbe0:	009b      	lsls	r3, r3, #2
 800fbe2:	440b      	add	r3, r1
 800fbe4:	3324      	adds	r3, #36	@ 0x24
 800fbe6:	2201      	movs	r2, #1
 800fbe8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800fbea:	4b39      	ldr	r3, [pc, #228]	@ (800fcd0 <USBD_CDC_Init+0x1e8>)
 800fbec:	7819      	ldrb	r1, [r3, #0]
 800fbee:	2340      	movs	r3, #64	@ 0x40
 800fbf0:	2202      	movs	r2, #2
 800fbf2:	6878      	ldr	r0, [r7, #4]
 800fbf4:	f000 fe79 	bl	80108ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800fbf8:	4b35      	ldr	r3, [pc, #212]	@ (800fcd0 <USBD_CDC_Init+0x1e8>)
 800fbfa:	781b      	ldrb	r3, [r3, #0]
 800fbfc:	f003 020f 	and.w	r2, r3, #15
 800fc00:	6879      	ldr	r1, [r7, #4]
 800fc02:	4613      	mov	r3, r2
 800fc04:	009b      	lsls	r3, r3, #2
 800fc06:	4413      	add	r3, r2
 800fc08:	009b      	lsls	r3, r3, #2
 800fc0a:	440b      	add	r3, r1
 800fc0c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fc10:	2201      	movs	r2, #1
 800fc12:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800fc14:	4b2f      	ldr	r3, [pc, #188]	@ (800fcd4 <USBD_CDC_Init+0x1ec>)
 800fc16:	781b      	ldrb	r3, [r3, #0]
 800fc18:	f003 020f 	and.w	r2, r3, #15
 800fc1c:	6879      	ldr	r1, [r7, #4]
 800fc1e:	4613      	mov	r3, r2
 800fc20:	009b      	lsls	r3, r3, #2
 800fc22:	4413      	add	r3, r2
 800fc24:	009b      	lsls	r3, r3, #2
 800fc26:	440b      	add	r3, r1
 800fc28:	3326      	adds	r3, #38	@ 0x26
 800fc2a:	2210      	movs	r2, #16
 800fc2c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800fc2e:	4b29      	ldr	r3, [pc, #164]	@ (800fcd4 <USBD_CDC_Init+0x1ec>)
 800fc30:	7819      	ldrb	r1, [r3, #0]
 800fc32:	2308      	movs	r3, #8
 800fc34:	2203      	movs	r2, #3
 800fc36:	6878      	ldr	r0, [r7, #4]
 800fc38:	f000 fe57 	bl	80108ea <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800fc3c:	4b25      	ldr	r3, [pc, #148]	@ (800fcd4 <USBD_CDC_Init+0x1ec>)
 800fc3e:	781b      	ldrb	r3, [r3, #0]
 800fc40:	f003 020f 	and.w	r2, r3, #15
 800fc44:	6879      	ldr	r1, [r7, #4]
 800fc46:	4613      	mov	r3, r2
 800fc48:	009b      	lsls	r3, r3, #2
 800fc4a:	4413      	add	r3, r2
 800fc4c:	009b      	lsls	r3, r3, #2
 800fc4e:	440b      	add	r3, r1
 800fc50:	3324      	adds	r3, #36	@ 0x24
 800fc52:	2201      	movs	r2, #1
 800fc54:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	2200      	movs	r2, #0
 800fc5a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fc64:	687a      	ldr	r2, [r7, #4]
 800fc66:	33b0      	adds	r3, #176	@ 0xb0
 800fc68:	009b      	lsls	r3, r3, #2
 800fc6a:	4413      	add	r3, r2
 800fc6c:	685b      	ldr	r3, [r3, #4]
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	2200      	movs	r2, #0
 800fc76:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	2200      	movs	r2, #0
 800fc7e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d101      	bne.n	800fc90 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800fc8c:	2302      	movs	r3, #2
 800fc8e:	e018      	b.n	800fcc2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	7c1b      	ldrb	r3, [r3, #16]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d10a      	bne.n	800fcae <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fc98:	4b0d      	ldr	r3, [pc, #52]	@ (800fcd0 <USBD_CDC_Init+0x1e8>)
 800fc9a:	7819      	ldrb	r1, [r3, #0]
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800fca2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fca6:	6878      	ldr	r0, [r7, #4]
 800fca8:	f000 feea 	bl	8010a80 <USBD_LL_PrepareReceive>
 800fcac:	e008      	b.n	800fcc0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fcae:	4b08      	ldr	r3, [pc, #32]	@ (800fcd0 <USBD_CDC_Init+0x1e8>)
 800fcb0:	7819      	ldrb	r1, [r3, #0]
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800fcb8:	2340      	movs	r3, #64	@ 0x40
 800fcba:	6878      	ldr	r0, [r7, #4]
 800fcbc:	f000 fee0 	bl	8010a80 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800fcc0:	2300      	movs	r3, #0
}
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	3710      	adds	r7, #16
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	bd80      	pop	{r7, pc}
 800fcca:	bf00      	nop
 800fccc:	200000b3 	.word	0x200000b3
 800fcd0:	200000b4 	.word	0x200000b4
 800fcd4:	200000b5 	.word	0x200000b5

0800fcd8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b082      	sub	sp, #8
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
 800fce0:	460b      	mov	r3, r1
 800fce2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800fce4:	4b3a      	ldr	r3, [pc, #232]	@ (800fdd0 <USBD_CDC_DeInit+0xf8>)
 800fce6:	781b      	ldrb	r3, [r3, #0]
 800fce8:	4619      	mov	r1, r3
 800fcea:	6878      	ldr	r0, [r7, #4]
 800fcec:	f000 fe1d 	bl	801092a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800fcf0:	4b37      	ldr	r3, [pc, #220]	@ (800fdd0 <USBD_CDC_DeInit+0xf8>)
 800fcf2:	781b      	ldrb	r3, [r3, #0]
 800fcf4:	f003 020f 	and.w	r2, r3, #15
 800fcf8:	6879      	ldr	r1, [r7, #4]
 800fcfa:	4613      	mov	r3, r2
 800fcfc:	009b      	lsls	r3, r3, #2
 800fcfe:	4413      	add	r3, r2
 800fd00:	009b      	lsls	r3, r3, #2
 800fd02:	440b      	add	r3, r1
 800fd04:	3324      	adds	r3, #36	@ 0x24
 800fd06:	2200      	movs	r2, #0
 800fd08:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800fd0a:	4b32      	ldr	r3, [pc, #200]	@ (800fdd4 <USBD_CDC_DeInit+0xfc>)
 800fd0c:	781b      	ldrb	r3, [r3, #0]
 800fd0e:	4619      	mov	r1, r3
 800fd10:	6878      	ldr	r0, [r7, #4]
 800fd12:	f000 fe0a 	bl	801092a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800fd16:	4b2f      	ldr	r3, [pc, #188]	@ (800fdd4 <USBD_CDC_DeInit+0xfc>)
 800fd18:	781b      	ldrb	r3, [r3, #0]
 800fd1a:	f003 020f 	and.w	r2, r3, #15
 800fd1e:	6879      	ldr	r1, [r7, #4]
 800fd20:	4613      	mov	r3, r2
 800fd22:	009b      	lsls	r3, r3, #2
 800fd24:	4413      	add	r3, r2
 800fd26:	009b      	lsls	r3, r3, #2
 800fd28:	440b      	add	r3, r1
 800fd2a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fd2e:	2200      	movs	r2, #0
 800fd30:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800fd32:	4b29      	ldr	r3, [pc, #164]	@ (800fdd8 <USBD_CDC_DeInit+0x100>)
 800fd34:	781b      	ldrb	r3, [r3, #0]
 800fd36:	4619      	mov	r1, r3
 800fd38:	6878      	ldr	r0, [r7, #4]
 800fd3a:	f000 fdf6 	bl	801092a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800fd3e:	4b26      	ldr	r3, [pc, #152]	@ (800fdd8 <USBD_CDC_DeInit+0x100>)
 800fd40:	781b      	ldrb	r3, [r3, #0]
 800fd42:	f003 020f 	and.w	r2, r3, #15
 800fd46:	6879      	ldr	r1, [r7, #4]
 800fd48:	4613      	mov	r3, r2
 800fd4a:	009b      	lsls	r3, r3, #2
 800fd4c:	4413      	add	r3, r2
 800fd4e:	009b      	lsls	r3, r3, #2
 800fd50:	440b      	add	r3, r1
 800fd52:	3324      	adds	r3, #36	@ 0x24
 800fd54:	2200      	movs	r2, #0
 800fd56:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800fd58:	4b1f      	ldr	r3, [pc, #124]	@ (800fdd8 <USBD_CDC_DeInit+0x100>)
 800fd5a:	781b      	ldrb	r3, [r3, #0]
 800fd5c:	f003 020f 	and.w	r2, r3, #15
 800fd60:	6879      	ldr	r1, [r7, #4]
 800fd62:	4613      	mov	r3, r2
 800fd64:	009b      	lsls	r3, r3, #2
 800fd66:	4413      	add	r3, r2
 800fd68:	009b      	lsls	r3, r3, #2
 800fd6a:	440b      	add	r3, r1
 800fd6c:	3326      	adds	r3, #38	@ 0x26
 800fd6e:	2200      	movs	r2, #0
 800fd70:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	32b0      	adds	r2, #176	@ 0xb0
 800fd7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d01f      	beq.n	800fdc4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fd8a:	687a      	ldr	r2, [r7, #4]
 800fd8c:	33b0      	adds	r3, #176	@ 0xb0
 800fd8e:	009b      	lsls	r3, r3, #2
 800fd90:	4413      	add	r3, r2
 800fd92:	685b      	ldr	r3, [r3, #4]
 800fd94:	685b      	ldr	r3, [r3, #4]
 800fd96:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	32b0      	adds	r2, #176	@ 0xb0
 800fda2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fda6:	4618      	mov	r0, r3
 800fda8:	f000 fea6 	bl	8010af8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	32b0      	adds	r2, #176	@ 0xb0
 800fdb6:	2100      	movs	r1, #0
 800fdb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	2200      	movs	r2, #0
 800fdc0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800fdc4:	2300      	movs	r3, #0
}
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	3708      	adds	r7, #8
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	bd80      	pop	{r7, pc}
 800fdce:	bf00      	nop
 800fdd0:	200000b3 	.word	0x200000b3
 800fdd4:	200000b4 	.word	0x200000b4
 800fdd8:	200000b5 	.word	0x200000b5

0800fddc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800fddc:	b580      	push	{r7, lr}
 800fdde:	b086      	sub	sp, #24
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	6078      	str	r0, [r7, #4]
 800fde4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	32b0      	adds	r2, #176	@ 0xb0
 800fdf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdf4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800fdfe:	2300      	movs	r3, #0
 800fe00:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800fe02:	693b      	ldr	r3, [r7, #16]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d101      	bne.n	800fe0c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800fe08:	2303      	movs	r3, #3
 800fe0a:	e0bf      	b.n	800ff8c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fe0c:	683b      	ldr	r3, [r7, #0]
 800fe0e:	781b      	ldrb	r3, [r3, #0]
 800fe10:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d050      	beq.n	800feba <USBD_CDC_Setup+0xde>
 800fe18:	2b20      	cmp	r3, #32
 800fe1a:	f040 80af 	bne.w	800ff7c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800fe1e:	683b      	ldr	r3, [r7, #0]
 800fe20:	88db      	ldrh	r3, [r3, #6]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d03a      	beq.n	800fe9c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800fe26:	683b      	ldr	r3, [r7, #0]
 800fe28:	781b      	ldrb	r3, [r3, #0]
 800fe2a:	b25b      	sxtb	r3, r3
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	da1b      	bge.n	800fe68 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fe36:	687a      	ldr	r2, [r7, #4]
 800fe38:	33b0      	adds	r3, #176	@ 0xb0
 800fe3a:	009b      	lsls	r3, r3, #2
 800fe3c:	4413      	add	r3, r2
 800fe3e:	685b      	ldr	r3, [r3, #4]
 800fe40:	689b      	ldr	r3, [r3, #8]
 800fe42:	683a      	ldr	r2, [r7, #0]
 800fe44:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800fe46:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800fe48:	683a      	ldr	r2, [r7, #0]
 800fe4a:	88d2      	ldrh	r2, [r2, #6]
 800fe4c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800fe4e:	683b      	ldr	r3, [r7, #0]
 800fe50:	88db      	ldrh	r3, [r3, #6]
 800fe52:	2b07      	cmp	r3, #7
 800fe54:	bf28      	it	cs
 800fe56:	2307      	movcs	r3, #7
 800fe58:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800fe5a:	693b      	ldr	r3, [r7, #16]
 800fe5c:	89fa      	ldrh	r2, [r7, #14]
 800fe5e:	4619      	mov	r1, r3
 800fe60:	6878      	ldr	r0, [r7, #4]
 800fe62:	f002 f93c 	bl	80120de <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800fe66:	e090      	b.n	800ff8a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800fe68:	683b      	ldr	r3, [r7, #0]
 800fe6a:	785a      	ldrb	r2, [r3, #1]
 800fe6c:	693b      	ldr	r3, [r7, #16]
 800fe6e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800fe72:	683b      	ldr	r3, [r7, #0]
 800fe74:	88db      	ldrh	r3, [r3, #6]
 800fe76:	2b3f      	cmp	r3, #63	@ 0x3f
 800fe78:	d803      	bhi.n	800fe82 <USBD_CDC_Setup+0xa6>
 800fe7a:	683b      	ldr	r3, [r7, #0]
 800fe7c:	88db      	ldrh	r3, [r3, #6]
 800fe7e:	b2da      	uxtb	r2, r3
 800fe80:	e000      	b.n	800fe84 <USBD_CDC_Setup+0xa8>
 800fe82:	2240      	movs	r2, #64	@ 0x40
 800fe84:	693b      	ldr	r3, [r7, #16]
 800fe86:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800fe8a:	6939      	ldr	r1, [r7, #16]
 800fe8c:	693b      	ldr	r3, [r7, #16]
 800fe8e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800fe92:	461a      	mov	r2, r3
 800fe94:	6878      	ldr	r0, [r7, #4]
 800fe96:	f002 f94e 	bl	8012136 <USBD_CtlPrepareRx>
      break;
 800fe9a:	e076      	b.n	800ff8a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fea2:	687a      	ldr	r2, [r7, #4]
 800fea4:	33b0      	adds	r3, #176	@ 0xb0
 800fea6:	009b      	lsls	r3, r3, #2
 800fea8:	4413      	add	r3, r2
 800feaa:	685b      	ldr	r3, [r3, #4]
 800feac:	689b      	ldr	r3, [r3, #8]
 800feae:	683a      	ldr	r2, [r7, #0]
 800feb0:	7850      	ldrb	r0, [r2, #1]
 800feb2:	2200      	movs	r2, #0
 800feb4:	6839      	ldr	r1, [r7, #0]
 800feb6:	4798      	blx	r3
      break;
 800feb8:	e067      	b.n	800ff8a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800feba:	683b      	ldr	r3, [r7, #0]
 800febc:	785b      	ldrb	r3, [r3, #1]
 800febe:	2b0b      	cmp	r3, #11
 800fec0:	d851      	bhi.n	800ff66 <USBD_CDC_Setup+0x18a>
 800fec2:	a201      	add	r2, pc, #4	@ (adr r2, 800fec8 <USBD_CDC_Setup+0xec>)
 800fec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fec8:	0800fef9 	.word	0x0800fef9
 800fecc:	0800ff75 	.word	0x0800ff75
 800fed0:	0800ff67 	.word	0x0800ff67
 800fed4:	0800ff67 	.word	0x0800ff67
 800fed8:	0800ff67 	.word	0x0800ff67
 800fedc:	0800ff67 	.word	0x0800ff67
 800fee0:	0800ff67 	.word	0x0800ff67
 800fee4:	0800ff67 	.word	0x0800ff67
 800fee8:	0800ff67 	.word	0x0800ff67
 800feec:	0800ff67 	.word	0x0800ff67
 800fef0:	0800ff23 	.word	0x0800ff23
 800fef4:	0800ff4d 	.word	0x0800ff4d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fefe:	b2db      	uxtb	r3, r3
 800ff00:	2b03      	cmp	r3, #3
 800ff02:	d107      	bne.n	800ff14 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ff04:	f107 030a 	add.w	r3, r7, #10
 800ff08:	2202      	movs	r2, #2
 800ff0a:	4619      	mov	r1, r3
 800ff0c:	6878      	ldr	r0, [r7, #4]
 800ff0e:	f002 f8e6 	bl	80120de <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ff12:	e032      	b.n	800ff7a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ff14:	6839      	ldr	r1, [r7, #0]
 800ff16:	6878      	ldr	r0, [r7, #4]
 800ff18:	f001 ff63 	bl	8011de2 <USBD_CtlError>
            ret = USBD_FAIL;
 800ff1c:	2303      	movs	r3, #3
 800ff1e:	75fb      	strb	r3, [r7, #23]
          break;
 800ff20:	e02b      	b.n	800ff7a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ff28:	b2db      	uxtb	r3, r3
 800ff2a:	2b03      	cmp	r3, #3
 800ff2c:	d107      	bne.n	800ff3e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ff2e:	f107 030d 	add.w	r3, r7, #13
 800ff32:	2201      	movs	r2, #1
 800ff34:	4619      	mov	r1, r3
 800ff36:	6878      	ldr	r0, [r7, #4]
 800ff38:	f002 f8d1 	bl	80120de <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ff3c:	e01d      	b.n	800ff7a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ff3e:	6839      	ldr	r1, [r7, #0]
 800ff40:	6878      	ldr	r0, [r7, #4]
 800ff42:	f001 ff4e 	bl	8011de2 <USBD_CtlError>
            ret = USBD_FAIL;
 800ff46:	2303      	movs	r3, #3
 800ff48:	75fb      	strb	r3, [r7, #23]
          break;
 800ff4a:	e016      	b.n	800ff7a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ff52:	b2db      	uxtb	r3, r3
 800ff54:	2b03      	cmp	r3, #3
 800ff56:	d00f      	beq.n	800ff78 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ff58:	6839      	ldr	r1, [r7, #0]
 800ff5a:	6878      	ldr	r0, [r7, #4]
 800ff5c:	f001 ff41 	bl	8011de2 <USBD_CtlError>
            ret = USBD_FAIL;
 800ff60:	2303      	movs	r3, #3
 800ff62:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ff64:	e008      	b.n	800ff78 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ff66:	6839      	ldr	r1, [r7, #0]
 800ff68:	6878      	ldr	r0, [r7, #4]
 800ff6a:	f001 ff3a 	bl	8011de2 <USBD_CtlError>
          ret = USBD_FAIL;
 800ff6e:	2303      	movs	r3, #3
 800ff70:	75fb      	strb	r3, [r7, #23]
          break;
 800ff72:	e002      	b.n	800ff7a <USBD_CDC_Setup+0x19e>
          break;
 800ff74:	bf00      	nop
 800ff76:	e008      	b.n	800ff8a <USBD_CDC_Setup+0x1ae>
          break;
 800ff78:	bf00      	nop
      }
      break;
 800ff7a:	e006      	b.n	800ff8a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ff7c:	6839      	ldr	r1, [r7, #0]
 800ff7e:	6878      	ldr	r0, [r7, #4]
 800ff80:	f001 ff2f 	bl	8011de2 <USBD_CtlError>
      ret = USBD_FAIL;
 800ff84:	2303      	movs	r3, #3
 800ff86:	75fb      	strb	r3, [r7, #23]
      break;
 800ff88:	bf00      	nop
  }

  return (uint8_t)ret;
 800ff8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	3718      	adds	r7, #24
 800ff90:	46bd      	mov	sp, r7
 800ff92:	bd80      	pop	{r7, pc}

0800ff94 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b084      	sub	sp, #16
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
 800ff9c:	460b      	mov	r3, r1
 800ff9e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ffa6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	32b0      	adds	r2, #176	@ 0xb0
 800ffb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d101      	bne.n	800ffbe <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ffba:	2303      	movs	r3, #3
 800ffbc:	e065      	b.n	801008a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	32b0      	adds	r2, #176	@ 0xb0
 800ffc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffcc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ffce:	78fb      	ldrb	r3, [r7, #3]
 800ffd0:	f003 020f 	and.w	r2, r3, #15
 800ffd4:	6879      	ldr	r1, [r7, #4]
 800ffd6:	4613      	mov	r3, r2
 800ffd8:	009b      	lsls	r3, r3, #2
 800ffda:	4413      	add	r3, r2
 800ffdc:	009b      	lsls	r3, r3, #2
 800ffde:	440b      	add	r3, r1
 800ffe0:	3318      	adds	r3, #24
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d02f      	beq.n	8010048 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ffe8:	78fb      	ldrb	r3, [r7, #3]
 800ffea:	f003 020f 	and.w	r2, r3, #15
 800ffee:	6879      	ldr	r1, [r7, #4]
 800fff0:	4613      	mov	r3, r2
 800fff2:	009b      	lsls	r3, r3, #2
 800fff4:	4413      	add	r3, r2
 800fff6:	009b      	lsls	r3, r3, #2
 800fff8:	440b      	add	r3, r1
 800fffa:	3318      	adds	r3, #24
 800fffc:	681a      	ldr	r2, [r3, #0]
 800fffe:	78fb      	ldrb	r3, [r7, #3]
 8010000:	f003 010f 	and.w	r1, r3, #15
 8010004:	68f8      	ldr	r0, [r7, #12]
 8010006:	460b      	mov	r3, r1
 8010008:	009b      	lsls	r3, r3, #2
 801000a:	440b      	add	r3, r1
 801000c:	00db      	lsls	r3, r3, #3
 801000e:	4403      	add	r3, r0
 8010010:	3324      	adds	r3, #36	@ 0x24
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	fbb2 f1f3 	udiv	r1, r2, r3
 8010018:	fb01 f303 	mul.w	r3, r1, r3
 801001c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801001e:	2b00      	cmp	r3, #0
 8010020:	d112      	bne.n	8010048 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8010022:	78fb      	ldrb	r3, [r7, #3]
 8010024:	f003 020f 	and.w	r2, r3, #15
 8010028:	6879      	ldr	r1, [r7, #4]
 801002a:	4613      	mov	r3, r2
 801002c:	009b      	lsls	r3, r3, #2
 801002e:	4413      	add	r3, r2
 8010030:	009b      	lsls	r3, r3, #2
 8010032:	440b      	add	r3, r1
 8010034:	3318      	adds	r3, #24
 8010036:	2200      	movs	r2, #0
 8010038:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801003a:	78f9      	ldrb	r1, [r7, #3]
 801003c:	2300      	movs	r3, #0
 801003e:	2200      	movs	r2, #0
 8010040:	6878      	ldr	r0, [r7, #4]
 8010042:	f000 fd02 	bl	8010a4a <USBD_LL_Transmit>
 8010046:	e01f      	b.n	8010088 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8010048:	68bb      	ldr	r3, [r7, #8]
 801004a:	2200      	movs	r2, #0
 801004c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010056:	687a      	ldr	r2, [r7, #4]
 8010058:	33b0      	adds	r3, #176	@ 0xb0
 801005a:	009b      	lsls	r3, r3, #2
 801005c:	4413      	add	r3, r2
 801005e:	685b      	ldr	r3, [r3, #4]
 8010060:	691b      	ldr	r3, [r3, #16]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d010      	beq.n	8010088 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801006c:	687a      	ldr	r2, [r7, #4]
 801006e:	33b0      	adds	r3, #176	@ 0xb0
 8010070:	009b      	lsls	r3, r3, #2
 8010072:	4413      	add	r3, r2
 8010074:	685b      	ldr	r3, [r3, #4]
 8010076:	691b      	ldr	r3, [r3, #16]
 8010078:	68ba      	ldr	r2, [r7, #8]
 801007a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 801007e:	68ba      	ldr	r2, [r7, #8]
 8010080:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8010084:	78fa      	ldrb	r2, [r7, #3]
 8010086:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8010088:	2300      	movs	r3, #0
}
 801008a:	4618      	mov	r0, r3
 801008c:	3710      	adds	r7, #16
 801008e:	46bd      	mov	sp, r7
 8010090:	bd80      	pop	{r7, pc}

08010092 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010092:	b580      	push	{r7, lr}
 8010094:	b084      	sub	sp, #16
 8010096:	af00      	add	r7, sp, #0
 8010098:	6078      	str	r0, [r7, #4]
 801009a:	460b      	mov	r3, r1
 801009c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	32b0      	adds	r2, #176	@ 0xb0
 80100a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100ac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	32b0      	adds	r2, #176	@ 0xb0
 80100b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d101      	bne.n	80100c4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80100c0:	2303      	movs	r3, #3
 80100c2:	e01a      	b.n	80100fa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80100c4:	78fb      	ldrb	r3, [r7, #3]
 80100c6:	4619      	mov	r1, r3
 80100c8:	6878      	ldr	r0, [r7, #4]
 80100ca:	f000 fcf4 	bl	8010ab6 <USBD_LL_GetRxDataSize>
 80100ce:	4602      	mov	r2, r0
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80100dc:	687a      	ldr	r2, [r7, #4]
 80100de:	33b0      	adds	r3, #176	@ 0xb0
 80100e0:	009b      	lsls	r3, r3, #2
 80100e2:	4413      	add	r3, r2
 80100e4:	685b      	ldr	r3, [r3, #4]
 80100e6:	68db      	ldr	r3, [r3, #12]
 80100e8:	68fa      	ldr	r2, [r7, #12]
 80100ea:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80100ee:	68fa      	ldr	r2, [r7, #12]
 80100f0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80100f4:	4611      	mov	r1, r2
 80100f6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80100f8:	2300      	movs	r3, #0
}
 80100fa:	4618      	mov	r0, r3
 80100fc:	3710      	adds	r7, #16
 80100fe:	46bd      	mov	sp, r7
 8010100:	bd80      	pop	{r7, pc}

08010102 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010102:	b580      	push	{r7, lr}
 8010104:	b084      	sub	sp, #16
 8010106:	af00      	add	r7, sp, #0
 8010108:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	32b0      	adds	r2, #176	@ 0xb0
 8010114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010118:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d101      	bne.n	8010124 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010120:	2303      	movs	r3, #3
 8010122:	e024      	b.n	801016e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801012a:	687a      	ldr	r2, [r7, #4]
 801012c:	33b0      	adds	r3, #176	@ 0xb0
 801012e:	009b      	lsls	r3, r3, #2
 8010130:	4413      	add	r3, r2
 8010132:	685b      	ldr	r3, [r3, #4]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d019      	beq.n	801016c <USBD_CDC_EP0_RxReady+0x6a>
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 801013e:	2bff      	cmp	r3, #255	@ 0xff
 8010140:	d014      	beq.n	801016c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010148:	687a      	ldr	r2, [r7, #4]
 801014a:	33b0      	adds	r3, #176	@ 0xb0
 801014c:	009b      	lsls	r3, r3, #2
 801014e:	4413      	add	r3, r2
 8010150:	685b      	ldr	r3, [r3, #4]
 8010152:	689b      	ldr	r3, [r3, #8]
 8010154:	68fa      	ldr	r2, [r7, #12]
 8010156:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 801015a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 801015c:	68fa      	ldr	r2, [r7, #12]
 801015e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8010162:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	22ff      	movs	r2, #255	@ 0xff
 8010168:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 801016c:	2300      	movs	r3, #0
}
 801016e:	4618      	mov	r0, r3
 8010170:	3710      	adds	r7, #16
 8010172:	46bd      	mov	sp, r7
 8010174:	bd80      	pop	{r7, pc}
	...

08010178 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010178:	b580      	push	{r7, lr}
 801017a:	b086      	sub	sp, #24
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010180:	2182      	movs	r1, #130	@ 0x82
 8010182:	4818      	ldr	r0, [pc, #96]	@ (80101e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010184:	f000 fff7 	bl	8011176 <USBD_GetEpDesc>
 8010188:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801018a:	2101      	movs	r1, #1
 801018c:	4815      	ldr	r0, [pc, #84]	@ (80101e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801018e:	f000 fff2 	bl	8011176 <USBD_GetEpDesc>
 8010192:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010194:	2181      	movs	r1, #129	@ 0x81
 8010196:	4813      	ldr	r0, [pc, #76]	@ (80101e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010198:	f000 ffed 	bl	8011176 <USBD_GetEpDesc>
 801019c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801019e:	697b      	ldr	r3, [r7, #20]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d002      	beq.n	80101aa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80101a4:	697b      	ldr	r3, [r7, #20]
 80101a6:	2210      	movs	r2, #16
 80101a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80101aa:	693b      	ldr	r3, [r7, #16]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d006      	beq.n	80101be <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80101b0:	693b      	ldr	r3, [r7, #16]
 80101b2:	2200      	movs	r2, #0
 80101b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80101b8:	711a      	strb	r2, [r3, #4]
 80101ba:	2200      	movs	r2, #0
 80101bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d006      	beq.n	80101d2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	2200      	movs	r2, #0
 80101c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80101cc:	711a      	strb	r2, [r3, #4]
 80101ce:	2200      	movs	r2, #0
 80101d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	2243      	movs	r2, #67	@ 0x43
 80101d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80101d8:	4b02      	ldr	r3, [pc, #8]	@ (80101e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80101da:	4618      	mov	r0, r3
 80101dc:	3718      	adds	r7, #24
 80101de:	46bd      	mov	sp, r7
 80101e0:	bd80      	pop	{r7, pc}
 80101e2:	bf00      	nop
 80101e4:	20000070 	.word	0x20000070

080101e8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b086      	sub	sp, #24
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80101f0:	2182      	movs	r1, #130	@ 0x82
 80101f2:	4818      	ldr	r0, [pc, #96]	@ (8010254 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80101f4:	f000 ffbf 	bl	8011176 <USBD_GetEpDesc>
 80101f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80101fa:	2101      	movs	r1, #1
 80101fc:	4815      	ldr	r0, [pc, #84]	@ (8010254 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80101fe:	f000 ffba 	bl	8011176 <USBD_GetEpDesc>
 8010202:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010204:	2181      	movs	r1, #129	@ 0x81
 8010206:	4813      	ldr	r0, [pc, #76]	@ (8010254 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010208:	f000 ffb5 	bl	8011176 <USBD_GetEpDesc>
 801020c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801020e:	697b      	ldr	r3, [r7, #20]
 8010210:	2b00      	cmp	r3, #0
 8010212:	d002      	beq.n	801021a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8010214:	697b      	ldr	r3, [r7, #20]
 8010216:	2210      	movs	r2, #16
 8010218:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801021a:	693b      	ldr	r3, [r7, #16]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d006      	beq.n	801022e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010220:	693b      	ldr	r3, [r7, #16]
 8010222:	2200      	movs	r2, #0
 8010224:	711a      	strb	r2, [r3, #4]
 8010226:	2200      	movs	r2, #0
 8010228:	f042 0202 	orr.w	r2, r2, #2
 801022c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d006      	beq.n	8010242 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	2200      	movs	r2, #0
 8010238:	711a      	strb	r2, [r3, #4]
 801023a:	2200      	movs	r2, #0
 801023c:	f042 0202 	orr.w	r2, r2, #2
 8010240:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	2243      	movs	r2, #67	@ 0x43
 8010246:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010248:	4b02      	ldr	r3, [pc, #8]	@ (8010254 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801024a:	4618      	mov	r0, r3
 801024c:	3718      	adds	r7, #24
 801024e:	46bd      	mov	sp, r7
 8010250:	bd80      	pop	{r7, pc}
 8010252:	bf00      	nop
 8010254:	20000070 	.word	0x20000070

08010258 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010258:	b580      	push	{r7, lr}
 801025a:	b086      	sub	sp, #24
 801025c:	af00      	add	r7, sp, #0
 801025e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010260:	2182      	movs	r1, #130	@ 0x82
 8010262:	4818      	ldr	r0, [pc, #96]	@ (80102c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010264:	f000 ff87 	bl	8011176 <USBD_GetEpDesc>
 8010268:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801026a:	2101      	movs	r1, #1
 801026c:	4815      	ldr	r0, [pc, #84]	@ (80102c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801026e:	f000 ff82 	bl	8011176 <USBD_GetEpDesc>
 8010272:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010274:	2181      	movs	r1, #129	@ 0x81
 8010276:	4813      	ldr	r0, [pc, #76]	@ (80102c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010278:	f000 ff7d 	bl	8011176 <USBD_GetEpDesc>
 801027c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801027e:	697b      	ldr	r3, [r7, #20]
 8010280:	2b00      	cmp	r3, #0
 8010282:	d002      	beq.n	801028a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010284:	697b      	ldr	r3, [r7, #20]
 8010286:	2210      	movs	r2, #16
 8010288:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801028a:	693b      	ldr	r3, [r7, #16]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d006      	beq.n	801029e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010290:	693b      	ldr	r3, [r7, #16]
 8010292:	2200      	movs	r2, #0
 8010294:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010298:	711a      	strb	r2, [r3, #4]
 801029a:	2200      	movs	r2, #0
 801029c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d006      	beq.n	80102b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	2200      	movs	r2, #0
 80102a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80102ac:	711a      	strb	r2, [r3, #4]
 80102ae:	2200      	movs	r2, #0
 80102b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	2243      	movs	r2, #67	@ 0x43
 80102b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80102b8:	4b02      	ldr	r3, [pc, #8]	@ (80102c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80102ba:	4618      	mov	r0, r3
 80102bc:	3718      	adds	r7, #24
 80102be:	46bd      	mov	sp, r7
 80102c0:	bd80      	pop	{r7, pc}
 80102c2:	bf00      	nop
 80102c4:	20000070 	.word	0x20000070

080102c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80102c8:	b480      	push	{r7}
 80102ca:	b083      	sub	sp, #12
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	220a      	movs	r2, #10
 80102d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80102d6:	4b03      	ldr	r3, [pc, #12]	@ (80102e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80102d8:	4618      	mov	r0, r3
 80102da:	370c      	adds	r7, #12
 80102dc:	46bd      	mov	sp, r7
 80102de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e2:	4770      	bx	lr
 80102e4:	2000002c 	.word	0x2000002c

080102e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80102e8:	b480      	push	{r7}
 80102ea:	b083      	sub	sp, #12
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
 80102f0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80102f2:	683b      	ldr	r3, [r7, #0]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d101      	bne.n	80102fc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80102f8:	2303      	movs	r3, #3
 80102fa:	e009      	b.n	8010310 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010302:	687a      	ldr	r2, [r7, #4]
 8010304:	33b0      	adds	r3, #176	@ 0xb0
 8010306:	009b      	lsls	r3, r3, #2
 8010308:	4413      	add	r3, r2
 801030a:	683a      	ldr	r2, [r7, #0]
 801030c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801030e:	2300      	movs	r3, #0
}
 8010310:	4618      	mov	r0, r3
 8010312:	370c      	adds	r7, #12
 8010314:	46bd      	mov	sp, r7
 8010316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801031a:	4770      	bx	lr

0801031c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801031c:	b480      	push	{r7}
 801031e:	b087      	sub	sp, #28
 8010320:	af00      	add	r7, sp, #0
 8010322:	60f8      	str	r0, [r7, #12]
 8010324:	60b9      	str	r1, [r7, #8]
 8010326:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	32b0      	adds	r2, #176	@ 0xb0
 8010332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010336:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8010338:	697b      	ldr	r3, [r7, #20]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d101      	bne.n	8010342 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801033e:	2303      	movs	r3, #3
 8010340:	e008      	b.n	8010354 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8010342:	697b      	ldr	r3, [r7, #20]
 8010344:	68ba      	ldr	r2, [r7, #8]
 8010346:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 801034a:	697b      	ldr	r3, [r7, #20]
 801034c:	687a      	ldr	r2, [r7, #4]
 801034e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8010352:	2300      	movs	r3, #0
}
 8010354:	4618      	mov	r0, r3
 8010356:	371c      	adds	r7, #28
 8010358:	46bd      	mov	sp, r7
 801035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801035e:	4770      	bx	lr

08010360 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8010360:	b480      	push	{r7}
 8010362:	b085      	sub	sp, #20
 8010364:	af00      	add	r7, sp, #0
 8010366:	6078      	str	r0, [r7, #4]
 8010368:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	32b0      	adds	r2, #176	@ 0xb0
 8010374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010378:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d101      	bne.n	8010384 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8010380:	2303      	movs	r3, #3
 8010382:	e004      	b.n	801038e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	683a      	ldr	r2, [r7, #0]
 8010388:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 801038c:	2300      	movs	r3, #0
}
 801038e:	4618      	mov	r0, r3
 8010390:	3714      	adds	r7, #20
 8010392:	46bd      	mov	sp, r7
 8010394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010398:	4770      	bx	lr
	...

0801039c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801039c:	b580      	push	{r7, lr}
 801039e:	b084      	sub	sp, #16
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	32b0      	adds	r2, #176	@ 0xb0
 80103ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103b2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	32b0      	adds	r2, #176	@ 0xb0
 80103be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d101      	bne.n	80103ca <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80103c6:	2303      	movs	r3, #3
 80103c8:	e018      	b.n	80103fc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	7c1b      	ldrb	r3, [r3, #16]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d10a      	bne.n	80103e8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80103d2:	4b0c      	ldr	r3, [pc, #48]	@ (8010404 <USBD_CDC_ReceivePacket+0x68>)
 80103d4:	7819      	ldrb	r1, [r3, #0]
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80103dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80103e0:	6878      	ldr	r0, [r7, #4]
 80103e2:	f000 fb4d 	bl	8010a80 <USBD_LL_PrepareReceive>
 80103e6:	e008      	b.n	80103fa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80103e8:	4b06      	ldr	r3, [pc, #24]	@ (8010404 <USBD_CDC_ReceivePacket+0x68>)
 80103ea:	7819      	ldrb	r1, [r3, #0]
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80103f2:	2340      	movs	r3, #64	@ 0x40
 80103f4:	6878      	ldr	r0, [r7, #4]
 80103f6:	f000 fb43 	bl	8010a80 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80103fa:	2300      	movs	r3, #0
}
 80103fc:	4618      	mov	r0, r3
 80103fe:	3710      	adds	r7, #16
 8010400:	46bd      	mov	sp, r7
 8010402:	bd80      	pop	{r7, pc}
 8010404:	200000b4 	.word	0x200000b4

08010408 <TEMPLATE_Init>:
  *         Initializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Init(void)
{
 8010408:	b580      	push	{r7, lr}
 801040a:	af00      	add	r7, sp, #0
      USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801040c:	2200      	movs	r2, #0
 801040e:	4905      	ldr	r1, [pc, #20]	@ (8010424 <TEMPLATE_Init+0x1c>)
 8010410:	4805      	ldr	r0, [pc, #20]	@ (8010428 <TEMPLATE_Init+0x20>)
 8010412:	f7ff ff83 	bl	801031c <USBD_CDC_SetTxBuffer>
      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010416:	4905      	ldr	r1, [pc, #20]	@ (801042c <TEMPLATE_Init+0x24>)
 8010418:	4803      	ldr	r0, [pc, #12]	@ (8010428 <TEMPLATE_Init+0x20>)
 801041a:	f7ff ffa1 	bl	8010360 <USBD_CDC_SetRxBuffer>
      return (0);
 801041e:	2300      	movs	r3, #0
}
 8010420:	4618      	mov	r0, r3
 8010422:	bd80      	pop	{r7, pc}
 8010424:	20000ca8 	.word	0x20000ca8
 8010428:	20000720 	.word	0x20000720
 801042c:	20000aa8 	.word	0x20000aa8

08010430 <TEMPLATE_DeInit>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_DeInit(void)
{
 8010430:	b480      	push	{r7}
 8010432:	af00      	add	r7, sp, #0
  /*
     Add your deinitialization code here
  */
  return (0);
 8010434:	2300      	movs	r3, #0
}
 8010436:	4618      	mov	r0, r3
 8010438:	46bd      	mov	sp, r7
 801043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801043e:	4770      	bx	lr

08010440 <TEMPLATE_Control>:
  * @param  Buf: Buffer containing command data (request parameters)
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Control(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 8010440:	b480      	push	{r7}
 8010442:	b083      	sub	sp, #12
 8010444:	af00      	add	r7, sp, #0
 8010446:	4603      	mov	r3, r0
 8010448:	6039      	str	r1, [r7, #0]
 801044a:	71fb      	strb	r3, [r7, #7]
 801044c:	4613      	mov	r3, r2
 801044e:	80bb      	strh	r3, [r7, #4]
  UNUSED(length);

  switch (cmd)
 8010450:	79fb      	ldrb	r3, [r7, #7]
 8010452:	2b23      	cmp	r3, #35	@ 0x23
 8010454:	f200 8098 	bhi.w	8010588 <TEMPLATE_Control+0x148>
 8010458:	a201      	add	r2, pc, #4	@ (adr r2, 8010460 <TEMPLATE_Control+0x20>)
 801045a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801045e:	bf00      	nop
 8010460:	08010589 	.word	0x08010589
 8010464:	08010589 	.word	0x08010589
 8010468:	08010589 	.word	0x08010589
 801046c:	08010589 	.word	0x08010589
 8010470:	08010589 	.word	0x08010589
 8010474:	08010589 	.word	0x08010589
 8010478:	08010589 	.word	0x08010589
 801047c:	08010589 	.word	0x08010589
 8010480:	08010589 	.word	0x08010589
 8010484:	08010589 	.word	0x08010589
 8010488:	08010589 	.word	0x08010589
 801048c:	08010589 	.word	0x08010589
 8010490:	08010589 	.word	0x08010589
 8010494:	08010589 	.word	0x08010589
 8010498:	08010589 	.word	0x08010589
 801049c:	08010589 	.word	0x08010589
 80104a0:	08010589 	.word	0x08010589
 80104a4:	08010589 	.word	0x08010589
 80104a8:	08010589 	.word	0x08010589
 80104ac:	08010589 	.word	0x08010589
 80104b0:	08010589 	.word	0x08010589
 80104b4:	08010589 	.word	0x08010589
 80104b8:	08010589 	.word	0x08010589
 80104bc:	08010589 	.word	0x08010589
 80104c0:	08010589 	.word	0x08010589
 80104c4:	08010589 	.word	0x08010589
 80104c8:	08010589 	.word	0x08010589
 80104cc:	08010589 	.word	0x08010589
 80104d0:	08010589 	.word	0x08010589
 80104d4:	08010589 	.word	0x08010589
 80104d8:	08010589 	.word	0x08010589
 80104dc:	08010589 	.word	0x08010589
 80104e0:	080104f1 	.word	0x080104f1
 80104e4:	08010535 	.word	0x08010535
 80104e8:	08010589 	.word	0x08010589
 80104ec:	08010589 	.word	0x08010589
    case CDC_CLEAR_COMM_FEATURE:
      /* Add your code here */
      break;

    case CDC_SET_LINE_CODING:
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 80104f0:	683b      	ldr	r3, [r7, #0]
 80104f2:	781b      	ldrb	r3, [r3, #0]
 80104f4:	461a      	mov	r2, r3
 80104f6:	683b      	ldr	r3, [r7, #0]
 80104f8:	3301      	adds	r3, #1
 80104fa:	781b      	ldrb	r3, [r3, #0]
 80104fc:	021b      	lsls	r3, r3, #8
 80104fe:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 8010500:	683b      	ldr	r3, [r7, #0]
 8010502:	3302      	adds	r3, #2
 8010504:	781b      	ldrb	r3, [r3, #0]
 8010506:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 8010508:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 801050a:	683b      	ldr	r3, [r7, #0]
 801050c:	3303      	adds	r3, #3
 801050e:	781b      	ldrb	r3, [r3, #0]
 8010510:	061b      	lsls	r3, r3, #24
 8010512:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 8010514:	461a      	mov	r2, r3
 8010516:	4b20      	ldr	r3, [pc, #128]	@ (8010598 <TEMPLATE_Control+0x158>)
 8010518:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 801051a:	683b      	ldr	r3, [r7, #0]
 801051c:	791a      	ldrb	r2, [r3, #4]
 801051e:	4b1e      	ldr	r3, [pc, #120]	@ (8010598 <TEMPLATE_Control+0x158>)
 8010520:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 8010522:	683b      	ldr	r3, [r7, #0]
 8010524:	795a      	ldrb	r2, [r3, #5]
 8010526:	4b1c      	ldr	r3, [pc, #112]	@ (8010598 <TEMPLATE_Control+0x158>)
 8010528:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 801052a:	683b      	ldr	r3, [r7, #0]
 801052c:	799a      	ldrb	r2, [r3, #6]
 801052e:	4b1a      	ldr	r3, [pc, #104]	@ (8010598 <TEMPLATE_Control+0x158>)
 8010530:	719a      	strb	r2, [r3, #6]

      /* Add your code here */
      break;
 8010532:	e02a      	b.n	801058a <TEMPLATE_Control+0x14a>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 8010534:	4b18      	ldr	r3, [pc, #96]	@ (8010598 <TEMPLATE_Control+0x158>)
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	b2da      	uxtb	r2, r3
 801053a:	683b      	ldr	r3, [r7, #0]
 801053c:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 801053e:	4b16      	ldr	r3, [pc, #88]	@ (8010598 <TEMPLATE_Control+0x158>)
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	0a1a      	lsrs	r2, r3, #8
 8010544:	683b      	ldr	r3, [r7, #0]
 8010546:	3301      	adds	r3, #1
 8010548:	b2d2      	uxtb	r2, r2
 801054a:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 801054c:	4b12      	ldr	r3, [pc, #72]	@ (8010598 <TEMPLATE_Control+0x158>)
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	0c1a      	lsrs	r2, r3, #16
 8010552:	683b      	ldr	r3, [r7, #0]
 8010554:	3302      	adds	r3, #2
 8010556:	b2d2      	uxtb	r2, r2
 8010558:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 801055a:	4b0f      	ldr	r3, [pc, #60]	@ (8010598 <TEMPLATE_Control+0x158>)
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	0e1a      	lsrs	r2, r3, #24
 8010560:	683b      	ldr	r3, [r7, #0]
 8010562:	3303      	adds	r3, #3
 8010564:	b2d2      	uxtb	r2, r2
 8010566:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 8010568:	683b      	ldr	r3, [r7, #0]
 801056a:	3304      	adds	r3, #4
 801056c:	4a0a      	ldr	r2, [pc, #40]	@ (8010598 <TEMPLATE_Control+0x158>)
 801056e:	7912      	ldrb	r2, [r2, #4]
 8010570:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 8010572:	683b      	ldr	r3, [r7, #0]
 8010574:	3305      	adds	r3, #5
 8010576:	4a08      	ldr	r2, [pc, #32]	@ (8010598 <TEMPLATE_Control+0x158>)
 8010578:	7952      	ldrb	r2, [r2, #5]
 801057a:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 801057c:	683b      	ldr	r3, [r7, #0]
 801057e:	3306      	adds	r3, #6
 8010580:	4a05      	ldr	r2, [pc, #20]	@ (8010598 <TEMPLATE_Control+0x158>)
 8010582:	7992      	ldrb	r2, [r2, #6]
 8010584:	701a      	strb	r2, [r3, #0]

      /* Add your code here */
      break;
 8010586:	e000      	b.n	801058a <TEMPLATE_Control+0x14a>
    case CDC_SEND_BREAK:
      /* Add your code here */
      break;

    default:
      break;
 8010588:	bf00      	nop
  }

  return (0);
 801058a:	2300      	movs	r3, #0
}
 801058c:	4618      	mov	r0, r3
 801058e:	370c      	adds	r7, #12
 8010590:	46bd      	mov	sp, r7
 8010592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010596:	4770      	bx	lr
 8010598:	200000cc 	.word	0x200000cc

0801059c <TEMPLATE_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Receive(uint8_t *Buf, uint32_t *Len)
{
 801059c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80105a0:	b08b      	sub	sp, #44	@ 0x2c
 80105a2:	af00      	add	r7, sp, #0
 80105a4:	6078      	str	r0, [r7, #4]
 80105a6:	6039      	str	r1, [r7, #0]
 80105a8:	466b      	mov	r3, sp
 80105aa:	461e      	mov	r6, r3
    const uint32_t bytesPerLine = 16;
 80105ac:	2310      	movs	r3, #16
 80105ae:	61bb      	str	r3, [r7, #24]
    char hexLine[bytesPerLine * 3 + 1]; // 2 hex chars + 1 space per byte
 80105b0:	69ba      	ldr	r2, [r7, #24]
 80105b2:	4613      	mov	r3, r2
 80105b4:	005b      	lsls	r3, r3, #1
 80105b6:	4413      	add	r3, r2
 80105b8:	617b      	str	r3, [r7, #20]
 80105ba:	69ba      	ldr	r2, [r7, #24]
 80105bc:	4613      	mov	r3, r2
 80105be:	005b      	lsls	r3, r3, #1
 80105c0:	4413      	add	r3, r2
 80105c2:	3301      	adds	r3, #1
 80105c4:	2200      	movs	r2, #0
 80105c6:	4698      	mov	r8, r3
 80105c8:	4691      	mov	r9, r2
 80105ca:	f04f 0200 	mov.w	r2, #0
 80105ce:	f04f 0300 	mov.w	r3, #0
 80105d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80105d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80105da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80105de:	69ba      	ldr	r2, [r7, #24]
 80105e0:	4613      	mov	r3, r2
 80105e2:	005b      	lsls	r3, r3, #1
 80105e4:	4413      	add	r3, r2
 80105e6:	3301      	adds	r3, #1
 80105e8:	2200      	movs	r2, #0
 80105ea:	461c      	mov	r4, r3
 80105ec:	4615      	mov	r5, r2
 80105ee:	f04f 0200 	mov.w	r2, #0
 80105f2:	f04f 0300 	mov.w	r3, #0
 80105f6:	00eb      	lsls	r3, r5, #3
 80105f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80105fc:	00e2      	lsls	r2, r4, #3
 80105fe:	69ba      	ldr	r2, [r7, #24]
 8010600:	4613      	mov	r3, r2
 8010602:	005b      	lsls	r3, r3, #1
 8010604:	4413      	add	r3, r2
 8010606:	3301      	adds	r3, #1
 8010608:	3307      	adds	r3, #7
 801060a:	08db      	lsrs	r3, r3, #3
 801060c:	00db      	lsls	r3, r3, #3
 801060e:	ebad 0d03 	sub.w	sp, sp, r3
 8010612:	466b      	mov	r3, sp
 8010614:	3300      	adds	r3, #0
 8010616:	613b      	str	r3, [r7, #16]
    uint32_t totalLen = *Len;
 8010618:	683b      	ldr	r3, [r7, #0]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	60fb      	str	r3, [r7, #12]
    uint32_t printed = 0;
 801061e:	2300      	movs	r3, #0
 8010620:	627b      	str	r3, [r7, #36]	@ 0x24

    if (*Len > CDC_DATA_FS_MAX_PACKET_SIZE) {
 8010622:	683b      	ldr	r3, [r7, #0]
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	2b40      	cmp	r3, #64	@ 0x40
 8010628:	d944      	bls.n	80106b4 <TEMPLATE_Receive+0x118>
        *Len = CDC_DATA_FS_MAX_PACKET_SIZE;
 801062a:	683b      	ldr	r3, [r7, #0]
 801062c:	2240      	movs	r2, #64	@ 0x40
 801062e:	601a      	str	r2, [r3, #0]
    }

    while (printed < *Len)
 8010630:	e040      	b.n	80106b4 <TEMPLATE_Receive+0x118>
    {
        uint32_t lineLen = ((*Len - printed) > bytesPerLine) ? bytesPerLine : (*Len - printed);
 8010632:	683b      	ldr	r3, [r7, #0]
 8010634:	681a      	ldr	r2, [r3, #0]
 8010636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010638:	1ad3      	subs	r3, r2, r3
 801063a:	69ba      	ldr	r2, [r7, #24]
 801063c:	4293      	cmp	r3, r2
 801063e:	bf28      	it	cs
 8010640:	4613      	movcs	r3, r2
 8010642:	60bb      	str	r3, [r7, #8]
    char hexLine[bytesPerLine * 3 + 1]; // 2 hex chars + 1 space per byte
 8010644:	69ba      	ldr	r2, [r7, #24]
 8010646:	4613      	mov	r3, r2
 8010648:	005b      	lsls	r3, r3, #1
 801064a:	4413      	add	r3, r2
        memset(hexLine, 0, sizeof(hexLine));
 801064c:	3301      	adds	r3, #1
 801064e:	461a      	mov	r2, r3
 8010650:	2100      	movs	r1, #0
 8010652:	6938      	ldr	r0, [r7, #16]
 8010654:	f001 fff6 	bl	8012644 <memset>
        char *ptr = hexLine;
 8010658:	693b      	ldr	r3, [r7, #16]
 801065a:	623b      	str	r3, [r7, #32]

        for (uint32_t i = 0; i < lineLen; ++i)
 801065c:	2300      	movs	r3, #0
 801065e:	61fb      	str	r3, [r7, #28]
 8010660:	e012      	b.n	8010688 <TEMPLATE_Receive+0xec>
        {
            ptr += snprintf(ptr, 4, "%02X ", Buf[printed + i]);
 8010662:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010664:	69fb      	ldr	r3, [r7, #28]
 8010666:	4413      	add	r3, r2
 8010668:	687a      	ldr	r2, [r7, #4]
 801066a:	4413      	add	r3, r2
 801066c:	781b      	ldrb	r3, [r3, #0]
 801066e:	4a2d      	ldr	r2, [pc, #180]	@ (8010724 <TEMPLATE_Receive+0x188>)
 8010670:	2104      	movs	r1, #4
 8010672:	6a38      	ldr	r0, [r7, #32]
 8010674:	f001 ff36 	bl	80124e4 <sniprintf>
 8010678:	4603      	mov	r3, r0
 801067a:	461a      	mov	r2, r3
 801067c:	6a3b      	ldr	r3, [r7, #32]
 801067e:	4413      	add	r3, r2
 8010680:	623b      	str	r3, [r7, #32]
        for (uint32_t i = 0; i < lineLen; ++i)
 8010682:	69fb      	ldr	r3, [r7, #28]
 8010684:	3301      	adds	r3, #1
 8010686:	61fb      	str	r3, [r7, #28]
 8010688:	69fa      	ldr	r2, [r7, #28]
 801068a:	68bb      	ldr	r3, [r7, #8]
 801068c:	429a      	cmp	r2, r3
 801068e:	d3e8      	bcc.n	8010662 <TEMPLATE_Receive+0xc6>
        }

        if (printed == 0)
 8010690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010692:	2b00      	cmp	r3, #0
 8010694:	d105      	bne.n	80106a2 <TEMPLATE_Receive+0x106>
        {
            // First line includes logger message
            log_info("USB Rx [%lu bytes]: %s", totalLen, hexLine);
 8010696:	693a      	ldr	r2, [r7, #16]
 8010698:	68f9      	ldr	r1, [r7, #12]
 801069a:	4823      	ldr	r0, [pc, #140]	@ (8010728 <TEMPLATE_Receive+0x18c>)
 801069c:	f7f0 fb68 	bl	8000d70 <log_info>
 80106a0:	e004      	b.n	80106ac <TEMPLATE_Receive+0x110>
        }
        else
        {
            // Subsequent lines have 26-space indent
            log_info("%19s%s", "", hexLine);
 80106a2:	693a      	ldr	r2, [r7, #16]
 80106a4:	4921      	ldr	r1, [pc, #132]	@ (801072c <TEMPLATE_Receive+0x190>)
 80106a6:	4822      	ldr	r0, [pc, #136]	@ (8010730 <TEMPLATE_Receive+0x194>)
 80106a8:	f7f0 fb62 	bl	8000d70 <log_info>
        }

        printed += lineLen;
 80106ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80106ae:	68bb      	ldr	r3, [r7, #8]
 80106b0:	4413      	add	r3, r2
 80106b2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (printed < *Len)
 80106b4:	683b      	ldr	r3, [r7, #0]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80106ba:	429a      	cmp	r2, r3
 80106bc:	d3b9      	bcc.n	8010632 <TEMPLATE_Receive+0x96>
    }

    // Copy to usb_rx_buffer if space permits
    if ((usb_rx_index + *Len) < MAX_USB_DATA_SIZE)
 80106be:	683b      	ldr	r3, [r7, #0]
 80106c0:	681a      	ldr	r2, [r3, #0]
 80106c2:	4b1c      	ldr	r3, [pc, #112]	@ (8010734 <TEMPLATE_Receive+0x198>)
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	4413      	add	r3, r2
 80106c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80106cc:	d215      	bcs.n	80106fa <TEMPLATE_Receive+0x15e>
    {
        memcpy(&usb_rx_buffer[usb_rx_index], Buf, *Len);
 80106ce:	4b19      	ldr	r3, [pc, #100]	@ (8010734 <TEMPLATE_Receive+0x198>)
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	4a19      	ldr	r2, [pc, #100]	@ (8010738 <TEMPLATE_Receive+0x19c>)
 80106d4:	1898      	adds	r0, r3, r2
 80106d6:	683b      	ldr	r3, [r7, #0]
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	461a      	mov	r2, r3
 80106dc:	6879      	ldr	r1, [r7, #4]
 80106de:	f002 f83c 	bl	801275a <memcpy>
        usb_rx_index += *Len;
 80106e2:	683b      	ldr	r3, [r7, #0]
 80106e4:	681a      	ldr	r2, [r3, #0]
 80106e6:	4b13      	ldr	r3, [pc, #76]	@ (8010734 <TEMPLATE_Receive+0x198>)
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	4413      	add	r3, r2
 80106ec:	4a11      	ldr	r2, [pc, #68]	@ (8010734 <TEMPLATE_Receive+0x198>)
 80106ee:	6013      	str	r3, [r2, #0]
        log_error("USB buffer overflow");
        return USBD_FAIL;
    }

    // If this was the last packet
    if (*Len < CDC_DATA_FS_MAX_PACKET_SIZE)
 80106f0:	683b      	ldr	r3, [r7, #0]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	2b3f      	cmp	r3, #63	@ 0x3f
 80106f6:	d80b      	bhi.n	8010710 <TEMPLATE_Receive+0x174>
 80106f8:	e007      	b.n	801070a <TEMPLATE_Receive+0x16e>
        usb_rx_index = 0;
 80106fa:	4b0e      	ldr	r3, [pc, #56]	@ (8010734 <TEMPLATE_Receive+0x198>)
 80106fc:	2200      	movs	r2, #0
 80106fe:	601a      	str	r2, [r3, #0]
        log_error("USB buffer overflow");
 8010700:	480e      	ldr	r0, [pc, #56]	@ (801073c <TEMPLATE_Receive+0x1a0>)
 8010702:	f7f0 fb4f 	bl	8000da4 <log_error>
        return USBD_FAIL;
 8010706:	2303      	movs	r3, #3
 8010708:	e006      	b.n	8010718 <TEMPLATE_Receive+0x17c>
    {
        usb_rx_complete = true;
 801070a:	4b0d      	ldr	r3, [pc, #52]	@ (8010740 <TEMPLATE_Receive+0x1a4>)
 801070c:	2201      	movs	r2, #1
 801070e:	701a      	strb	r2, [r3, #0]
    }

    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010710:	480c      	ldr	r0, [pc, #48]	@ (8010744 <TEMPLATE_Receive+0x1a8>)
 8010712:	f7ff fe43 	bl	801039c <USBD_CDC_ReceivePacket>
    return USBD_OK;
 8010716:	2300      	movs	r3, #0
 8010718:	46b5      	mov	sp, r6
}
 801071a:	4618      	mov	r0, r3
 801071c:	372c      	adds	r7, #44	@ 0x2c
 801071e:	46bd      	mov	sp, r7
 8010720:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010724:	08013590 	.word	0x08013590
 8010728:	080135cc 	.word	0x080135cc
 801072c:	080135b0 	.word	0x080135b0
 8010730:	080135b4 	.word	0x080135b4
 8010734:	20010ea8 	.word	0x20010ea8
 8010738:	20000ea8 	.word	0x20000ea8
 801073c:	080135e4 	.word	0x080135e4
 8010740:	20010eac 	.word	0x20010eac
 8010744:	20000720 	.word	0x20000720

08010748 <TEMPLATE_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_TransmitCplt(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010748:	b480      	push	{r7}
 801074a:	b085      	sub	sp, #20
 801074c:	af00      	add	r7, sp, #0
 801074e:	60f8      	str	r0, [r7, #12]
 8010750:	60b9      	str	r1, [r7, #8]
 8010752:	4613      	mov	r3, r2
 8010754:	71fb      	strb	r3, [r7, #7]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);

  return 0;
 8010756:	2300      	movs	r3, #0

}
 8010758:	4618      	mov	r0, r3
 801075a:	3714      	adds	r7, #20
 801075c:	46bd      	mov	sp, r7
 801075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010762:	4770      	bx	lr

08010764 <HAL_PCD_SetupStageCallback>:
extern PCD_HandleTypeDef hpcd_USB_DRD_FS;
/* Private function prototypes -----------------------------------------------*/
static USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status);
/* Private functions ---------------------------------------------------------*/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8010764:	b580      	push	{r7, lr}
 8010766:	b082      	sub	sp, #8
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8010778:	4619      	mov	r1, r3
 801077a:	4610      	mov	r0, r2
 801077c:	f000 faa5 	bl	8010cca <USBD_LL_SetupStage>
}
 8010780:	bf00      	nop
 8010782:	3708      	adds	r7, #8
 8010784:	46bd      	mov	sp, r7
 8010786:	bd80      	pop	{r7, pc}

08010788 <HAL_PCD_DataOutStageCallback>:

void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8010788:	b580      	push	{r7, lr}
 801078a:	b082      	sub	sp, #8
 801078c:	af00      	add	r7, sp, #0
 801078e:	6078      	str	r0, [r7, #4]
 8010790:	460b      	mov	r3, r1
 8010792:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 801079a:	78fa      	ldrb	r2, [r7, #3]
 801079c:	6879      	ldr	r1, [r7, #4]
 801079e:	4613      	mov	r3, r2
 80107a0:	009b      	lsls	r3, r3, #2
 80107a2:	4413      	add	r3, r2
 80107a4:	00db      	lsls	r3, r3, #3
 80107a6:	440b      	add	r3, r1
 80107a8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80107ac:	681a      	ldr	r2, [r3, #0]
 80107ae:	78fb      	ldrb	r3, [r7, #3]
 80107b0:	4619      	mov	r1, r3
 80107b2:	f000 fadf 	bl	8010d74 <USBD_LL_DataOutStage>
}
 80107b6:	bf00      	nop
 80107b8:	3708      	adds	r7, #8
 80107ba:	46bd      	mov	sp, r7
 80107bc:	bd80      	pop	{r7, pc}

080107be <HAL_PCD_DataInStageCallback>:

void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80107be:	b580      	push	{r7, lr}
 80107c0:	b082      	sub	sp, #8
 80107c2:	af00      	add	r7, sp, #0
 80107c4:	6078      	str	r0, [r7, #4]
 80107c6:	460b      	mov	r3, r1
 80107c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 80107d0:	78fa      	ldrb	r2, [r7, #3]
 80107d2:	6879      	ldr	r1, [r7, #4]
 80107d4:	4613      	mov	r3, r2
 80107d6:	009b      	lsls	r3, r3, #2
 80107d8:	4413      	add	r3, r2
 80107da:	00db      	lsls	r3, r3, #3
 80107dc:	440b      	add	r3, r1
 80107de:	3328      	adds	r3, #40	@ 0x28
 80107e0:	681a      	ldr	r2, [r3, #0]
 80107e2:	78fb      	ldrb	r3, [r7, #3]
 80107e4:	4619      	mov	r1, r3
 80107e6:	f000 fb78 	bl	8010eda <USBD_LL_DataInStage>
}
 80107ea:	bf00      	nop
 80107ec:	3708      	adds	r7, #8
 80107ee:	46bd      	mov	sp, r7
 80107f0:	bd80      	pop	{r7, pc}

080107f2 <HAL_PCD_SOFCallback>:

void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 80107f2:	b580      	push	{r7, lr}
 80107f4:	b082      	sub	sp, #8
 80107f6:	af00      	add	r7, sp, #0
 80107f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8010800:	4618      	mov	r0, r3
 8010802:	f000 fc7e 	bl	8011102 <USBD_LL_SOF>
}
 8010806:	bf00      	nop
 8010808:	3708      	adds	r7, #8
 801080a:	46bd      	mov	sp, r7
 801080c:	bd80      	pop	{r7, pc}

0801080e <HAL_PCD_ResetCallback>:

void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 801080e:	b580      	push	{r7, lr}
 8010810:	b084      	sub	sp, #16
 8010812:	af00      	add	r7, sp, #0
 8010814:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010816:	2301      	movs	r3, #1
 8010818:	73fb      	strb	r3, [r7, #15]
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	79db      	ldrb	r3, [r3, #7]
 801081e:	2b02      	cmp	r3, #2
 8010820:	d001      	beq.n	8010826 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010822:	f7f0 fff5 	bl	8001810 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 801082c:	7bfa      	ldrb	r2, [r7, #15]
 801082e:	4611      	mov	r1, r2
 8010830:	4618      	mov	r0, r3
 8010832:	f000 fc56 	bl	80110e2 <USBD_LL_SetSpeed>
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 801083c:	4618      	mov	r0, r3
 801083e:	f000 fbfe 	bl	801103e <USBD_LL_Reset>
}
 8010842:	bf00      	nop
 8010844:	3710      	adds	r7, #16
 8010846:	46bd      	mov	sp, r7
 8010848:	bd80      	pop	{r7, pc}
	...

0801084c <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801084c:	b580      	push	{r7, lr}
 801084e:	b082      	sub	sp, #8
 8010850:	af00      	add	r7, sp, #0
 8010852:	6078      	str	r0, [r7, #4]
      pdev->pData  = &hpcd_USB_DRD_FS;
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	4a19      	ldr	r2, [pc, #100]	@ (80108bc <USBD_LL_Init+0x70>)
 8010858:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x40);
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010862:	2340      	movs	r3, #64	@ 0x40
 8010864:	2200      	movs	r2, #0
 8010866:	2100      	movs	r1, #0
 8010868:	f7f5 f894 	bl	8005994 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x80);
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010872:	2380      	movs	r3, #128	@ 0x80
 8010874:	2200      	movs	r2, #0
 8010876:	2180      	movs	r1, #128	@ 0x80
 8010878:	f7f5 f88c 	bl	8005994 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0xC0);
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010882:	23c0      	movs	r3, #192	@ 0xc0
 8010884:	2200      	movs	r2, #0
 8010886:	2181      	movs	r1, #129	@ 0x81
 8010888:	f7f5 f884 	bl	8005994 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0x100);
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010892:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010896:	2200      	movs	r2, #0
 8010898:	2101      	movs	r1, #1
 801089a:	f7f5 f87b 	bl	8005994 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x140);
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80108a4:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80108a8:	2200      	movs	r2, #0
 80108aa:	2182      	movs	r1, #130	@ 0x82
 80108ac:	f7f5 f872 	bl	8005994 <HAL_PCDEx_PMAConfig>
      return USBD_OK;
 80108b0:	2300      	movs	r3, #0
}
 80108b2:	4618      	mov	r0, r3
 80108b4:	3708      	adds	r7, #8
 80108b6:	46bd      	mov	sp, r7
 80108b8:	bd80      	pop	{r7, pc}
 80108ba:	bf00      	nop
 80108bc:	2000043c 	.word	0x2000043c

080108c0 <USBD_LL_Start>:
      hal_status = HAL_PCD_DeInit(pdev->pData);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b084      	sub	sp, #16
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_Start(pdev->pData);
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80108ce:	4618      	mov	r0, r3
 80108d0:	f7f3 fd44 	bl	800435c <HAL_PCD_Start>
 80108d4:	4603      	mov	r3, r0
 80108d6:	73fb      	strb	r3, [r7, #15]
      return  USBD_Get_USB_Status(hal_status);
 80108d8:	7bfb      	ldrb	r3, [r7, #15]
 80108da:	4618      	mov	r0, r3
 80108dc:	f000 f916 	bl	8010b0c <USBD_Get_USB_Status>
 80108e0:	4603      	mov	r3, r0
}
 80108e2:	4618      	mov	r0, r3
 80108e4:	3710      	adds	r7, #16
 80108e6:	46bd      	mov	sp, r7
 80108e8:	bd80      	pop	{r7, pc}

080108ea <USBD_LL_OpenEP>:
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t ep_type, uint16_t ep_mps)
{
 80108ea:	b580      	push	{r7, lr}
 80108ec:	b084      	sub	sp, #16
 80108ee:	af00      	add	r7, sp, #0
 80108f0:	6078      	str	r0, [r7, #4]
 80108f2:	4608      	mov	r0, r1
 80108f4:	4611      	mov	r1, r2
 80108f6:	461a      	mov	r2, r3
 80108f8:	4603      	mov	r3, r0
 80108fa:	70fb      	strb	r3, [r7, #3]
 80108fc:	460b      	mov	r3, r1
 80108fe:	70bb      	strb	r3, [r7, #2]
 8010900:	4613      	mov	r3, r2
 8010902:	803b      	strh	r3, [r7, #0]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801090a:	78bb      	ldrb	r3, [r7, #2]
 801090c:	883a      	ldrh	r2, [r7, #0]
 801090e:	78f9      	ldrb	r1, [r7, #3]
 8010910:	f7f3 fe73 	bl	80045fa <HAL_PCD_EP_Open>
 8010914:	4603      	mov	r3, r0
 8010916:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 8010918:	7bfb      	ldrb	r3, [r7, #15]
 801091a:	4618      	mov	r0, r3
 801091c:	f000 f8f6 	bl	8010b0c <USBD_Get_USB_Status>
 8010920:	4603      	mov	r3, r0
}
 8010922:	4618      	mov	r0, r3
 8010924:	3710      	adds	r7, #16
 8010926:	46bd      	mov	sp, r7
 8010928:	bd80      	pop	{r7, pc}

0801092a <USBD_LL_CloseEP>:

USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801092a:	b580      	push	{r7, lr}
 801092c:	b084      	sub	sp, #16
 801092e:	af00      	add	r7, sp, #0
 8010930:	6078      	str	r0, [r7, #4]
 8010932:	460b      	mov	r3, r1
 8010934:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801093c:	78fa      	ldrb	r2, [r7, #3]
 801093e:	4611      	mov	r1, r2
 8010940:	4618      	mov	r0, r3
 8010942:	f7f3 febb 	bl	80046bc <HAL_PCD_EP_Close>
 8010946:	4603      	mov	r3, r0
 8010948:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 801094a:	7bfb      	ldrb	r3, [r7, #15]
 801094c:	4618      	mov	r0, r3
 801094e:	f000 f8dd 	bl	8010b0c <USBD_Get_USB_Status>
 8010952:	4603      	mov	r3, r0
}
 8010954:	4618      	mov	r0, r3
 8010956:	3710      	adds	r7, #16
 8010958:	46bd      	mov	sp, r7
 801095a:	bd80      	pop	{r7, pc}

0801095c <USBD_LL_StallEP>:
      hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801095c:	b580      	push	{r7, lr}
 801095e:	b084      	sub	sp, #16
 8010960:	af00      	add	r7, sp, #0
 8010962:	6078      	str	r0, [r7, #4]
 8010964:	460b      	mov	r3, r1
 8010966:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801096e:	78fa      	ldrb	r2, [r7, #3]
 8010970:	4611      	mov	r1, r2
 8010972:	4618      	mov	r0, r3
 8010974:	f7f3 ff6e 	bl	8004854 <HAL_PCD_EP_SetStall>
 8010978:	4603      	mov	r3, r0
 801097a:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 801097c:	7bfb      	ldrb	r3, [r7, #15]
 801097e:	4618      	mov	r0, r3
 8010980:	f000 f8c4 	bl	8010b0c <USBD_Get_USB_Status>
 8010984:	4603      	mov	r3, r0
}
 8010986:	4618      	mov	r0, r3
 8010988:	3710      	adds	r7, #16
 801098a:	46bd      	mov	sp, r7
 801098c:	bd80      	pop	{r7, pc}

0801098e <USBD_LL_ClearStallEP>:

USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr)
{
 801098e:	b580      	push	{r7, lr}
 8010990:	b084      	sub	sp, #16
 8010992:	af00      	add	r7, sp, #0
 8010994:	6078      	str	r0, [r7, #4]
 8010996:	460b      	mov	r3, r1
 8010998:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80109a0:	78fa      	ldrb	r2, [r7, #3]
 80109a2:	4611      	mov	r1, r2
 80109a4:	4618      	mov	r0, r3
 80109a6:	f7f3 ffa9 	bl	80048fc <HAL_PCD_EP_ClrStall>
 80109aa:	4603      	mov	r3, r0
 80109ac:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 80109ae:	7bfb      	ldrb	r3, [r7, #15]
 80109b0:	4618      	mov	r0, r3
 80109b2:	f000 f8ab 	bl	8010b0c <USBD_Get_USB_Status>
 80109b6:	4603      	mov	r3, r0
}
 80109b8:	4618      	mov	r0, r3
 80109ba:	3710      	adds	r7, #16
 80109bc:	46bd      	mov	sp, r7
 80109be:	bd80      	pop	{r7, pc}

080109c0 <USBD_LL_IsStallEP>:

uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80109c0:	b480      	push	{r7}
 80109c2:	b085      	sub	sp, #20
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	6078      	str	r0, [r7, #4]
 80109c8:	460b      	mov	r3, r1
 80109ca:	70fb      	strb	r3, [r7, #3]
      PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80109d2:	60fb      	str	r3, [r7, #12]
      if((ep_addr & 0x80) == 0x80)
 80109d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	da0b      	bge.n	80109f4 <USBD_LL_IsStallEP+0x34>
      {
             return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80109dc:	78fb      	ldrb	r3, [r7, #3]
 80109de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80109e2:	68f9      	ldr	r1, [r7, #12]
 80109e4:	4613      	mov	r3, r2
 80109e6:	009b      	lsls	r3, r3, #2
 80109e8:	4413      	add	r3, r2
 80109ea:	00db      	lsls	r3, r3, #3
 80109ec:	440b      	add	r3, r1
 80109ee:	3316      	adds	r3, #22
 80109f0:	781b      	ldrb	r3, [r3, #0]
 80109f2:	e00b      	b.n	8010a0c <USBD_LL_IsStallEP+0x4c>
      }
      else
      {
             return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80109f4:	78fb      	ldrb	r3, [r7, #3]
 80109f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80109fa:	68f9      	ldr	r1, [r7, #12]
 80109fc:	4613      	mov	r3, r2
 80109fe:	009b      	lsls	r3, r3, #2
 8010a00:	4413      	add	r3, r2
 8010a02:	00db      	lsls	r3, r3, #3
 8010a04:	440b      	add	r3, r1
 8010a06:	f503 73ab 	add.w	r3, r3, #342	@ 0x156
 8010a0a:	781b      	ldrb	r3, [r3, #0]
      }
}
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	3714      	adds	r7, #20
 8010a10:	46bd      	mov	sp, r7
 8010a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a16:	4770      	bx	lr

08010a18 <USBD_LL_SetUSBAddress>:

USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev,
             uint8_t dev_addr)
{
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	b084      	sub	sp, #16
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	6078      	str	r0, [r7, #4]
 8010a20:	460b      	mov	r3, r1
 8010a22:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010a2a:	78fa      	ldrb	r2, [r7, #3]
 8010a2c:	4611      	mov	r1, r2
 8010a2e:	4618      	mov	r0, r3
 8010a30:	f7f3 fdbf 	bl	80045b2 <HAL_PCD_SetAddress>
 8010a34:	4603      	mov	r3, r0
 8010a36:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 8010a38:	7bfb      	ldrb	r3, [r7, #15]
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	f000 f866 	bl	8010b0c <USBD_Get_USB_Status>
 8010a40:	4603      	mov	r3, r0
}
 8010a42:	4618      	mov	r0, r3
 8010a44:	3710      	adds	r7, #16
 8010a46:	46bd      	mov	sp, r7
 8010a48:	bd80      	pop	{r7, pc}

08010a4a <USBD_LL_Transmit>:

USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t *pbuf, uint32_t size)
{
 8010a4a:	b580      	push	{r7, lr}
 8010a4c:	b086      	sub	sp, #24
 8010a4e:	af00      	add	r7, sp, #0
 8010a50:	60f8      	str	r0, [r7, #12]
 8010a52:	607a      	str	r2, [r7, #4]
 8010a54:	603b      	str	r3, [r7, #0]
 8010a56:	460b      	mov	r3, r1
 8010a58:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010a60:	7af9      	ldrb	r1, [r7, #11]
 8010a62:	683b      	ldr	r3, [r7, #0]
 8010a64:	687a      	ldr	r2, [r7, #4]
 8010a66:	f7f3 febd 	bl	80047e4 <HAL_PCD_EP_Transmit>
 8010a6a:	4603      	mov	r3, r0
 8010a6c:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 8010a6e:	7dfb      	ldrb	r3, [r7, #23]
 8010a70:	4618      	mov	r0, r3
 8010a72:	f000 f84b 	bl	8010b0c <USBD_Get_USB_Status>
 8010a76:	4603      	mov	r3, r0
}
 8010a78:	4618      	mov	r0, r3
 8010a7a:	3718      	adds	r7, #24
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	bd80      	pop	{r7, pc}

08010a80 <USBD_LL_PrepareReceive>:

USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr, uint8_t *pbuf,
             uint32_t size)
{
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b086      	sub	sp, #24
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	60f8      	str	r0, [r7, #12]
 8010a88:	607a      	str	r2, [r7, #4]
 8010a8a:	603b      	str	r3, [r7, #0]
 8010a8c:	460b      	mov	r3, r1
 8010a8e:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010a96:	7af9      	ldrb	r1, [r7, #11]
 8010a98:	683b      	ldr	r3, [r7, #0]
 8010a9a:	687a      	ldr	r2, [r7, #4]
 8010a9c:	f7f3 fe58 	bl	8004750 <HAL_PCD_EP_Receive>
 8010aa0:	4603      	mov	r3, r0
 8010aa2:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 8010aa4:	7dfb      	ldrb	r3, [r7, #23]
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	f000 f830 	bl	8010b0c <USBD_Get_USB_Status>
 8010aac:	4603      	mov	r3, r0
}
 8010aae:	4618      	mov	r0, r3
 8010ab0:	3718      	adds	r7, #24
 8010ab2:	46bd      	mov	sp, r7
 8010ab4:	bd80      	pop	{r7, pc}

08010ab6 <USBD_LL_GetRxDataSize>:

uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010ab6:	b580      	push	{r7, lr}
 8010ab8:	b082      	sub	sp, #8
 8010aba:	af00      	add	r7, sp, #0
 8010abc:	6078      	str	r0, [r7, #4]
 8010abe:	460b      	mov	r3, r1
 8010ac0:	70fb      	strb	r3, [r7, #3]
      return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010ac8:	78fa      	ldrb	r2, [r7, #3]
 8010aca:	4611      	mov	r1, r2
 8010acc:	4618      	mov	r0, r3
 8010ace:	f7f3 fe71 	bl	80047b4 <HAL_PCD_EP_GetRxCount>
 8010ad2:	4603      	mov	r3, r0
}
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	3708      	adds	r7, #8
 8010ad8:	46bd      	mov	sp, r7
 8010ada:	bd80      	pop	{r7, pc}

08010adc <USBD_static_malloc>:

void *USBD_static_malloc(uint32_t size)
{
 8010adc:	b480      	push	{r7}
 8010ade:	b083      	sub	sp, #12
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	6078      	str	r0, [r7, #4]
      UNUSED(size);
      static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef) / 4) + 1]; /* On 32-bit boundary */
      return mem;
 8010ae4:	4b03      	ldr	r3, [pc, #12]	@ (8010af4 <USBD_static_malloc+0x18>)
}
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	370c      	adds	r7, #12
 8010aea:	46bd      	mov	sp, r7
 8010aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af0:	4770      	bx	lr
 8010af2:	bf00      	nop
 8010af4:	20010eb0 	.word	0x20010eb0

08010af8 <USBD_static_free>:

void USBD_static_free(void *p)
{
 8010af8:	b480      	push	{r7}
 8010afa:	b083      	sub	sp, #12
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
      UNUSED(p);
}
 8010b00:	bf00      	nop
 8010b02:	370c      	adds	r7, #12
 8010b04:	46bd      	mov	sp, r7
 8010b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b0a:	4770      	bx	lr

08010b0c <USBD_Get_USB_Status>:
{
      HAL_Delay(Delay);
}

USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010b0c:	b480      	push	{r7}
 8010b0e:	b085      	sub	sp, #20
 8010b10:	af00      	add	r7, sp, #0
 8010b12:	4603      	mov	r3, r0
 8010b14:	71fb      	strb	r3, [r7, #7]
      USBD_StatusTypeDef usb_status = USBD_OK;
 8010b16:	2300      	movs	r3, #0
 8010b18:	73fb      	strb	r3, [r7, #15]
      switch (hal_status)
 8010b1a:	79fb      	ldrb	r3, [r7, #7]
 8010b1c:	2b03      	cmp	r3, #3
 8010b1e:	d817      	bhi.n	8010b50 <USBD_Get_USB_Status+0x44>
 8010b20:	a201      	add	r2, pc, #4	@ (adr r2, 8010b28 <USBD_Get_USB_Status+0x1c>)
 8010b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b26:	bf00      	nop
 8010b28:	08010b39 	.word	0x08010b39
 8010b2c:	08010b3f 	.word	0x08010b3f
 8010b30:	08010b45 	.word	0x08010b45
 8010b34:	08010b4b 	.word	0x08010b4b
      {
      case HAL_OK :
             usb_status = USBD_OK;
 8010b38:	2300      	movs	r3, #0
 8010b3a:	73fb      	strb	r3, [r7, #15]
             break;
 8010b3c:	e00b      	b.n	8010b56 <USBD_Get_USB_Status+0x4a>
      case HAL_ERROR :
             usb_status = USBD_FAIL;
 8010b3e:	2303      	movs	r3, #3
 8010b40:	73fb      	strb	r3, [r7, #15]
             break;
 8010b42:	e008      	b.n	8010b56 <USBD_Get_USB_Status+0x4a>
      case HAL_BUSY :
             usb_status = USBD_BUSY;
 8010b44:	2301      	movs	r3, #1
 8010b46:	73fb      	strb	r3, [r7, #15]
             break;
 8010b48:	e005      	b.n	8010b56 <USBD_Get_USB_Status+0x4a>
      case HAL_TIMEOUT :
             usb_status = USBD_FAIL;
 8010b4a:	2303      	movs	r3, #3
 8010b4c:	73fb      	strb	r3, [r7, #15]
             break;
 8010b4e:	e002      	b.n	8010b56 <USBD_Get_USB_Status+0x4a>
      default :
             usb_status = USBD_FAIL;
 8010b50:	2303      	movs	r3, #3
 8010b52:	73fb      	strb	r3, [r7, #15]
             break;
 8010b54:	bf00      	nop
      }
      return usb_status;
 8010b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b58:	4618      	mov	r0, r3
 8010b5a:	3714      	adds	r7, #20
 8010b5c:	46bd      	mov	sp, r7
 8010b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b62:	4770      	bx	lr

08010b64 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010b64:	b580      	push	{r7, lr}
 8010b66:	b086      	sub	sp, #24
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	60f8      	str	r0, [r7, #12]
 8010b6c:	60b9      	str	r1, [r7, #8]
 8010b6e:	4613      	mov	r3, r2
 8010b70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d101      	bne.n	8010b7c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8010b78:	2303      	movs	r3, #3
 8010b7a:	e01f      	b.n	8010bbc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	2200      	movs	r2, #0
 8010b80:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	2200      	movs	r2, #0
 8010b88:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	2200      	movs	r2, #0
 8010b90:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010b94:	68bb      	ldr	r3, [r7, #8]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d003      	beq.n	8010ba2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	68ba      	ldr	r2, [r7, #8]
 8010b9e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	2201      	movs	r2, #1
 8010ba6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	79fa      	ldrb	r2, [r7, #7]
 8010bae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8010bb0:	68f8      	ldr	r0, [r7, #12]
 8010bb2:	f7ff fe4b 	bl	801084c <USBD_LL_Init>
 8010bb6:	4603      	mov	r3, r0
 8010bb8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8010bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	3718      	adds	r7, #24
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	bd80      	pop	{r7, pc}

08010bc4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010bc4:	b580      	push	{r7, lr}
 8010bc6:	b084      	sub	sp, #16
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	6078      	str	r0, [r7, #4]
 8010bcc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010bce:	2300      	movs	r3, #0
 8010bd0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8010bd2:	683b      	ldr	r3, [r7, #0]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d101      	bne.n	8010bdc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8010bd8:	2303      	movs	r3, #3
 8010bda:	e025      	b.n	8010c28 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	683a      	ldr	r2, [r7, #0]
 8010be0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	32ae      	adds	r2, #174	@ 0xae
 8010bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d00f      	beq.n	8010c18 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	32ae      	adds	r2, #174	@ 0xae
 8010c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c08:	f107 020e 	add.w	r2, r7, #14
 8010c0c:	4610      	mov	r0, r2
 8010c0e:	4798      	blx	r3
 8010c10:	4602      	mov	r2, r0
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010c1e:	1c5a      	adds	r2, r3, #1
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8010c26:	2300      	movs	r3, #0
}
 8010c28:	4618      	mov	r0, r3
 8010c2a:	3710      	adds	r7, #16
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	bd80      	pop	{r7, pc}

08010c30 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010c30:	b580      	push	{r7, lr}
 8010c32:	b082      	sub	sp, #8
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010c38:	6878      	ldr	r0, [r7, #4]
 8010c3a:	f7ff fe41 	bl	80108c0 <USBD_LL_Start>
 8010c3e:	4603      	mov	r3, r0
}
 8010c40:	4618      	mov	r0, r3
 8010c42:	3708      	adds	r7, #8
 8010c44:	46bd      	mov	sp, r7
 8010c46:	bd80      	pop	{r7, pc}

08010c48 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8010c48:	b480      	push	{r7}
 8010c4a:	b083      	sub	sp, #12
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010c50:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8010c52:	4618      	mov	r0, r3
 8010c54:	370c      	adds	r7, #12
 8010c56:	46bd      	mov	sp, r7
 8010c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c5c:	4770      	bx	lr

08010c5e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010c5e:	b580      	push	{r7, lr}
 8010c60:	b084      	sub	sp, #16
 8010c62:	af00      	add	r7, sp, #0
 8010c64:	6078      	str	r0, [r7, #4]
 8010c66:	460b      	mov	r3, r1
 8010c68:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d009      	beq.n	8010c8c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	78fa      	ldrb	r2, [r7, #3]
 8010c82:	4611      	mov	r1, r2
 8010c84:	6878      	ldr	r0, [r7, #4]
 8010c86:	4798      	blx	r3
 8010c88:	4603      	mov	r3, r0
 8010c8a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c8e:	4618      	mov	r0, r3
 8010c90:	3710      	adds	r7, #16
 8010c92:	46bd      	mov	sp, r7
 8010c94:	bd80      	pop	{r7, pc}

08010c96 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010c96:	b580      	push	{r7, lr}
 8010c98:	b084      	sub	sp, #16
 8010c9a:	af00      	add	r7, sp, #0
 8010c9c:	6078      	str	r0, [r7, #4]
 8010c9e:	460b      	mov	r3, r1
 8010ca0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010cac:	685b      	ldr	r3, [r3, #4]
 8010cae:	78fa      	ldrb	r2, [r7, #3]
 8010cb0:	4611      	mov	r1, r2
 8010cb2:	6878      	ldr	r0, [r7, #4]
 8010cb4:	4798      	blx	r3
 8010cb6:	4603      	mov	r3, r0
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d001      	beq.n	8010cc0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8010cbc:	2303      	movs	r3, #3
 8010cbe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	3710      	adds	r7, #16
 8010cc6:	46bd      	mov	sp, r7
 8010cc8:	bd80      	pop	{r7, pc}

08010cca <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010cca:	b580      	push	{r7, lr}
 8010ccc:	b084      	sub	sp, #16
 8010cce:	af00      	add	r7, sp, #0
 8010cd0:	6078      	str	r0, [r7, #4]
 8010cd2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010cda:	6839      	ldr	r1, [r7, #0]
 8010cdc:	4618      	mov	r0, r3
 8010cde:	f001 f846 	bl	8011d6e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	2201      	movs	r2, #1
 8010ce6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8010cf0:	461a      	mov	r2, r3
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8010cfe:	f003 031f 	and.w	r3, r3, #31
 8010d02:	2b02      	cmp	r3, #2
 8010d04:	d01a      	beq.n	8010d3c <USBD_LL_SetupStage+0x72>
 8010d06:	2b02      	cmp	r3, #2
 8010d08:	d822      	bhi.n	8010d50 <USBD_LL_SetupStage+0x86>
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d002      	beq.n	8010d14 <USBD_LL_SetupStage+0x4a>
 8010d0e:	2b01      	cmp	r3, #1
 8010d10:	d00a      	beq.n	8010d28 <USBD_LL_SetupStage+0x5e>
 8010d12:	e01d      	b.n	8010d50 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010d1a:	4619      	mov	r1, r3
 8010d1c:	6878      	ldr	r0, [r7, #4]
 8010d1e:	f000 fa9d 	bl	801125c <USBD_StdDevReq>
 8010d22:	4603      	mov	r3, r0
 8010d24:	73fb      	strb	r3, [r7, #15]
      break;
 8010d26:	e020      	b.n	8010d6a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010d2e:	4619      	mov	r1, r3
 8010d30:	6878      	ldr	r0, [r7, #4]
 8010d32:	f000 fb05 	bl	8011340 <USBD_StdItfReq>
 8010d36:	4603      	mov	r3, r0
 8010d38:	73fb      	strb	r3, [r7, #15]
      break;
 8010d3a:	e016      	b.n	8010d6a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010d42:	4619      	mov	r1, r3
 8010d44:	6878      	ldr	r0, [r7, #4]
 8010d46:	f000 fb67 	bl	8011418 <USBD_StdEPReq>
 8010d4a:	4603      	mov	r3, r0
 8010d4c:	73fb      	strb	r3, [r7, #15]
      break;
 8010d4e:	e00c      	b.n	8010d6a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8010d56:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8010d5a:	b2db      	uxtb	r3, r3
 8010d5c:	4619      	mov	r1, r3
 8010d5e:	6878      	ldr	r0, [r7, #4]
 8010d60:	f7ff fdfc 	bl	801095c <USBD_LL_StallEP>
 8010d64:	4603      	mov	r3, r0
 8010d66:	73fb      	strb	r3, [r7, #15]
      break;
 8010d68:	bf00      	nop
  }

  return ret;
 8010d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	3710      	adds	r7, #16
 8010d70:	46bd      	mov	sp, r7
 8010d72:	bd80      	pop	{r7, pc}

08010d74 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010d74:	b580      	push	{r7, lr}
 8010d76:	b086      	sub	sp, #24
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	60f8      	str	r0, [r7, #12]
 8010d7c:	460b      	mov	r3, r1
 8010d7e:	607a      	str	r2, [r7, #4]
 8010d80:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8010d82:	2300      	movs	r3, #0
 8010d84:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8010d86:	7afb      	ldrb	r3, [r7, #11]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d16e      	bne.n	8010e6a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8010d92:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8010d9a:	2b03      	cmp	r3, #3
 8010d9c:	f040 8098 	bne.w	8010ed0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8010da0:	693b      	ldr	r3, [r7, #16]
 8010da2:	689a      	ldr	r2, [r3, #8]
 8010da4:	693b      	ldr	r3, [r7, #16]
 8010da6:	68db      	ldr	r3, [r3, #12]
 8010da8:	429a      	cmp	r2, r3
 8010daa:	d913      	bls.n	8010dd4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8010dac:	693b      	ldr	r3, [r7, #16]
 8010dae:	689a      	ldr	r2, [r3, #8]
 8010db0:	693b      	ldr	r3, [r7, #16]
 8010db2:	68db      	ldr	r3, [r3, #12]
 8010db4:	1ad2      	subs	r2, r2, r3
 8010db6:	693b      	ldr	r3, [r7, #16]
 8010db8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8010dba:	693b      	ldr	r3, [r7, #16]
 8010dbc:	68da      	ldr	r2, [r3, #12]
 8010dbe:	693b      	ldr	r3, [r7, #16]
 8010dc0:	689b      	ldr	r3, [r3, #8]
 8010dc2:	4293      	cmp	r3, r2
 8010dc4:	bf28      	it	cs
 8010dc6:	4613      	movcs	r3, r2
 8010dc8:	461a      	mov	r2, r3
 8010dca:	6879      	ldr	r1, [r7, #4]
 8010dcc:	68f8      	ldr	r0, [r7, #12]
 8010dce:	f001 f9cf 	bl	8012170 <USBD_CtlContinueRx>
 8010dd2:	e07d      	b.n	8010ed0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8010dda:	f003 031f 	and.w	r3, r3, #31
 8010dde:	2b02      	cmp	r3, #2
 8010de0:	d014      	beq.n	8010e0c <USBD_LL_DataOutStage+0x98>
 8010de2:	2b02      	cmp	r3, #2
 8010de4:	d81d      	bhi.n	8010e22 <USBD_LL_DataOutStage+0xae>
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d002      	beq.n	8010df0 <USBD_LL_DataOutStage+0x7c>
 8010dea:	2b01      	cmp	r3, #1
 8010dec:	d003      	beq.n	8010df6 <USBD_LL_DataOutStage+0x82>
 8010dee:	e018      	b.n	8010e22 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8010df0:	2300      	movs	r3, #0
 8010df2:	75bb      	strb	r3, [r7, #22]
            break;
 8010df4:	e018      	b.n	8010e28 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8010dfc:	b2db      	uxtb	r3, r3
 8010dfe:	4619      	mov	r1, r3
 8010e00:	68f8      	ldr	r0, [r7, #12]
 8010e02:	f000 f99e 	bl	8011142 <USBD_CoreFindIF>
 8010e06:	4603      	mov	r3, r0
 8010e08:	75bb      	strb	r3, [r7, #22]
            break;
 8010e0a:	e00d      	b.n	8010e28 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8010e12:	b2db      	uxtb	r3, r3
 8010e14:	4619      	mov	r1, r3
 8010e16:	68f8      	ldr	r0, [r7, #12]
 8010e18:	f000 f9a0 	bl	801115c <USBD_CoreFindEP>
 8010e1c:	4603      	mov	r3, r0
 8010e1e:	75bb      	strb	r3, [r7, #22]
            break;
 8010e20:	e002      	b.n	8010e28 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8010e22:	2300      	movs	r3, #0
 8010e24:	75bb      	strb	r3, [r7, #22]
            break;
 8010e26:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8010e28:	7dbb      	ldrb	r3, [r7, #22]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d119      	bne.n	8010e62 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010e34:	b2db      	uxtb	r3, r3
 8010e36:	2b03      	cmp	r3, #3
 8010e38:	d113      	bne.n	8010e62 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8010e3a:	7dba      	ldrb	r2, [r7, #22]
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	32ae      	adds	r2, #174	@ 0xae
 8010e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e44:	691b      	ldr	r3, [r3, #16]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d00b      	beq.n	8010e62 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8010e4a:	7dba      	ldrb	r2, [r7, #22]
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8010e52:	7dba      	ldrb	r2, [r7, #22]
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	32ae      	adds	r2, #174	@ 0xae
 8010e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e5c:	691b      	ldr	r3, [r3, #16]
 8010e5e:	68f8      	ldr	r0, [r7, #12]
 8010e60:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8010e62:	68f8      	ldr	r0, [r7, #12]
 8010e64:	f001 f995 	bl	8012192 <USBD_CtlSendStatus>
 8010e68:	e032      	b.n	8010ed0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8010e6a:	7afb      	ldrb	r3, [r7, #11]
 8010e6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010e70:	b2db      	uxtb	r3, r3
 8010e72:	4619      	mov	r1, r3
 8010e74:	68f8      	ldr	r0, [r7, #12]
 8010e76:	f000 f971 	bl	801115c <USBD_CoreFindEP>
 8010e7a:	4603      	mov	r3, r0
 8010e7c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010e7e:	7dbb      	ldrb	r3, [r7, #22]
 8010e80:	2bff      	cmp	r3, #255	@ 0xff
 8010e82:	d025      	beq.n	8010ed0 <USBD_LL_DataOutStage+0x15c>
 8010e84:	7dbb      	ldrb	r3, [r7, #22]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d122      	bne.n	8010ed0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010e90:	b2db      	uxtb	r3, r3
 8010e92:	2b03      	cmp	r3, #3
 8010e94:	d117      	bne.n	8010ec6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8010e96:	7dba      	ldrb	r2, [r7, #22]
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	32ae      	adds	r2, #174	@ 0xae
 8010e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ea0:	699b      	ldr	r3, [r3, #24]
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d00f      	beq.n	8010ec6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8010ea6:	7dba      	ldrb	r2, [r7, #22]
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8010eae:	7dba      	ldrb	r2, [r7, #22]
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	32ae      	adds	r2, #174	@ 0xae
 8010eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010eb8:	699b      	ldr	r3, [r3, #24]
 8010eba:	7afa      	ldrb	r2, [r7, #11]
 8010ebc:	4611      	mov	r1, r2
 8010ebe:	68f8      	ldr	r0, [r7, #12]
 8010ec0:	4798      	blx	r3
 8010ec2:	4603      	mov	r3, r0
 8010ec4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8010ec6:	7dfb      	ldrb	r3, [r7, #23]
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d001      	beq.n	8010ed0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8010ecc:	7dfb      	ldrb	r3, [r7, #23]
 8010ece:	e000      	b.n	8010ed2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8010ed0:	2300      	movs	r3, #0
}
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	3718      	adds	r7, #24
 8010ed6:	46bd      	mov	sp, r7
 8010ed8:	bd80      	pop	{r7, pc}

08010eda <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8010eda:	b580      	push	{r7, lr}
 8010edc:	b086      	sub	sp, #24
 8010ede:	af00      	add	r7, sp, #0
 8010ee0:	60f8      	str	r0, [r7, #12]
 8010ee2:	460b      	mov	r3, r1
 8010ee4:	607a      	str	r2, [r7, #4]
 8010ee6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8010ee8:	7afb      	ldrb	r3, [r7, #11]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d16f      	bne.n	8010fce <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	3314      	adds	r3, #20
 8010ef2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8010efa:	2b02      	cmp	r3, #2
 8010efc:	d15a      	bne.n	8010fb4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8010efe:	693b      	ldr	r3, [r7, #16]
 8010f00:	689a      	ldr	r2, [r3, #8]
 8010f02:	693b      	ldr	r3, [r7, #16]
 8010f04:	68db      	ldr	r3, [r3, #12]
 8010f06:	429a      	cmp	r2, r3
 8010f08:	d914      	bls.n	8010f34 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010f0a:	693b      	ldr	r3, [r7, #16]
 8010f0c:	689a      	ldr	r2, [r3, #8]
 8010f0e:	693b      	ldr	r3, [r7, #16]
 8010f10:	68db      	ldr	r3, [r3, #12]
 8010f12:	1ad2      	subs	r2, r2, r3
 8010f14:	693b      	ldr	r3, [r7, #16]
 8010f16:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010f18:	693b      	ldr	r3, [r7, #16]
 8010f1a:	689b      	ldr	r3, [r3, #8]
 8010f1c:	461a      	mov	r2, r3
 8010f1e:	6879      	ldr	r1, [r7, #4]
 8010f20:	68f8      	ldr	r0, [r7, #12]
 8010f22:	f001 f8f7 	bl	8012114 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010f26:	2300      	movs	r3, #0
 8010f28:	2200      	movs	r2, #0
 8010f2a:	2100      	movs	r1, #0
 8010f2c:	68f8      	ldr	r0, [r7, #12]
 8010f2e:	f7ff fda7 	bl	8010a80 <USBD_LL_PrepareReceive>
 8010f32:	e03f      	b.n	8010fb4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010f34:	693b      	ldr	r3, [r7, #16]
 8010f36:	68da      	ldr	r2, [r3, #12]
 8010f38:	693b      	ldr	r3, [r7, #16]
 8010f3a:	689b      	ldr	r3, [r3, #8]
 8010f3c:	429a      	cmp	r2, r3
 8010f3e:	d11c      	bne.n	8010f7a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010f40:	693b      	ldr	r3, [r7, #16]
 8010f42:	685a      	ldr	r2, [r3, #4]
 8010f44:	693b      	ldr	r3, [r7, #16]
 8010f46:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010f48:	429a      	cmp	r2, r3
 8010f4a:	d316      	bcc.n	8010f7a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8010f4c:	693b      	ldr	r3, [r7, #16]
 8010f4e:	685a      	ldr	r2, [r3, #4]
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010f56:	429a      	cmp	r2, r3
 8010f58:	d20f      	bcs.n	8010f7a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010f5a:	2200      	movs	r2, #0
 8010f5c:	2100      	movs	r1, #0
 8010f5e:	68f8      	ldr	r0, [r7, #12]
 8010f60:	f001 f8d8 	bl	8012114 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	2200      	movs	r2, #0
 8010f68:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	2200      	movs	r2, #0
 8010f70:	2100      	movs	r1, #0
 8010f72:	68f8      	ldr	r0, [r7, #12]
 8010f74:	f7ff fd84 	bl	8010a80 <USBD_LL_PrepareReceive>
 8010f78:	e01c      	b.n	8010fb4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010f80:	b2db      	uxtb	r3, r3
 8010f82:	2b03      	cmp	r3, #3
 8010f84:	d10f      	bne.n	8010fa6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010f8c:	68db      	ldr	r3, [r3, #12]
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d009      	beq.n	8010fa6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	2200      	movs	r2, #0
 8010f96:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010fa0:	68db      	ldr	r3, [r3, #12]
 8010fa2:	68f8      	ldr	r0, [r7, #12]
 8010fa4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010fa6:	2180      	movs	r1, #128	@ 0x80
 8010fa8:	68f8      	ldr	r0, [r7, #12]
 8010faa:	f7ff fcd7 	bl	801095c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8010fae:	68f8      	ldr	r0, [r7, #12]
 8010fb0:	f001 f902 	bl	80121b8 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d03a      	beq.n	8011034 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8010fbe:	68f8      	ldr	r0, [r7, #12]
 8010fc0:	f7ff fe42 	bl	8010c48 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	2200      	movs	r2, #0
 8010fc8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8010fcc:	e032      	b.n	8011034 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8010fce:	7afb      	ldrb	r3, [r7, #11]
 8010fd0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010fd4:	b2db      	uxtb	r3, r3
 8010fd6:	4619      	mov	r1, r3
 8010fd8:	68f8      	ldr	r0, [r7, #12]
 8010fda:	f000 f8bf 	bl	801115c <USBD_CoreFindEP>
 8010fde:	4603      	mov	r3, r0
 8010fe0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010fe2:	7dfb      	ldrb	r3, [r7, #23]
 8010fe4:	2bff      	cmp	r3, #255	@ 0xff
 8010fe6:	d025      	beq.n	8011034 <USBD_LL_DataInStage+0x15a>
 8010fe8:	7dfb      	ldrb	r3, [r7, #23]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d122      	bne.n	8011034 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010ff4:	b2db      	uxtb	r3, r3
 8010ff6:	2b03      	cmp	r3, #3
 8010ff8:	d11c      	bne.n	8011034 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8010ffa:	7dfa      	ldrb	r2, [r7, #23]
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	32ae      	adds	r2, #174	@ 0xae
 8011000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011004:	695b      	ldr	r3, [r3, #20]
 8011006:	2b00      	cmp	r3, #0
 8011008:	d014      	beq.n	8011034 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801100a:	7dfa      	ldrb	r2, [r7, #23]
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8011012:	7dfa      	ldrb	r2, [r7, #23]
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	32ae      	adds	r2, #174	@ 0xae
 8011018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801101c:	695b      	ldr	r3, [r3, #20]
 801101e:	7afa      	ldrb	r2, [r7, #11]
 8011020:	4611      	mov	r1, r2
 8011022:	68f8      	ldr	r0, [r7, #12]
 8011024:	4798      	blx	r3
 8011026:	4603      	mov	r3, r0
 8011028:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801102a:	7dbb      	ldrb	r3, [r7, #22]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d001      	beq.n	8011034 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8011030:	7dbb      	ldrb	r3, [r7, #22]
 8011032:	e000      	b.n	8011036 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8011034:	2300      	movs	r3, #0
}
 8011036:	4618      	mov	r0, r3
 8011038:	3718      	adds	r7, #24
 801103a:	46bd      	mov	sp, r7
 801103c:	bd80      	pop	{r7, pc}

0801103e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801103e:	b580      	push	{r7, lr}
 8011040:	b084      	sub	sp, #16
 8011042:	af00      	add	r7, sp, #0
 8011044:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8011046:	2300      	movs	r3, #0
 8011048:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	2201      	movs	r2, #1
 801104e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	2200      	movs	r2, #0
 8011056:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	2200      	movs	r2, #0
 801105e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	2200      	movs	r2, #0
 8011064:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	2200      	movs	r2, #0
 801106c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011076:	2b00      	cmp	r3, #0
 8011078:	d014      	beq.n	80110a4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011080:	685b      	ldr	r3, [r3, #4]
 8011082:	2b00      	cmp	r3, #0
 8011084:	d00e      	beq.n	80110a4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801108c:	685b      	ldr	r3, [r3, #4]
 801108e:	687a      	ldr	r2, [r7, #4]
 8011090:	6852      	ldr	r2, [r2, #4]
 8011092:	b2d2      	uxtb	r2, r2
 8011094:	4611      	mov	r1, r2
 8011096:	6878      	ldr	r0, [r7, #4]
 8011098:	4798      	blx	r3
 801109a:	4603      	mov	r3, r0
 801109c:	2b00      	cmp	r3, #0
 801109e:	d001      	beq.n	80110a4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80110a0:	2303      	movs	r3, #3
 80110a2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80110a4:	2340      	movs	r3, #64	@ 0x40
 80110a6:	2200      	movs	r2, #0
 80110a8:	2100      	movs	r1, #0
 80110aa:	6878      	ldr	r0, [r7, #4]
 80110ac:	f7ff fc1d 	bl	80108ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	2201      	movs	r2, #1
 80110b4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	2240      	movs	r2, #64	@ 0x40
 80110bc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80110c0:	2340      	movs	r3, #64	@ 0x40
 80110c2:	2200      	movs	r2, #0
 80110c4:	2180      	movs	r1, #128	@ 0x80
 80110c6:	6878      	ldr	r0, [r7, #4]
 80110c8:	f7ff fc0f 	bl	80108ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	2201      	movs	r2, #1
 80110d0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	2240      	movs	r2, #64	@ 0x40
 80110d6:	621a      	str	r2, [r3, #32]

  return ret;
 80110d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80110da:	4618      	mov	r0, r3
 80110dc:	3710      	adds	r7, #16
 80110de:	46bd      	mov	sp, r7
 80110e0:	bd80      	pop	{r7, pc}

080110e2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80110e2:	b480      	push	{r7}
 80110e4:	b083      	sub	sp, #12
 80110e6:	af00      	add	r7, sp, #0
 80110e8:	6078      	str	r0, [r7, #4]
 80110ea:	460b      	mov	r3, r1
 80110ec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	78fa      	ldrb	r2, [r7, #3]
 80110f2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80110f4:	2300      	movs	r3, #0
}
 80110f6:	4618      	mov	r0, r3
 80110f8:	370c      	adds	r7, #12
 80110fa:	46bd      	mov	sp, r7
 80110fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011100:	4770      	bx	lr

08011102 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011102:	b580      	push	{r7, lr}
 8011104:	b082      	sub	sp, #8
 8011106:	af00      	add	r7, sp, #0
 8011108:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011110:	b2db      	uxtb	r3, r3
 8011112:	2b03      	cmp	r3, #3
 8011114:	d110      	bne.n	8011138 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801111c:	2b00      	cmp	r3, #0
 801111e:	d00b      	beq.n	8011138 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011126:	69db      	ldr	r3, [r3, #28]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d005      	beq.n	8011138 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011132:	69db      	ldr	r3, [r3, #28]
 8011134:	6878      	ldr	r0, [r7, #4]
 8011136:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8011138:	2300      	movs	r3, #0
}
 801113a:	4618      	mov	r0, r3
 801113c:	3708      	adds	r7, #8
 801113e:	46bd      	mov	sp, r7
 8011140:	bd80      	pop	{r7, pc}

08011142 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8011142:	b480      	push	{r7}
 8011144:	b083      	sub	sp, #12
 8011146:	af00      	add	r7, sp, #0
 8011148:	6078      	str	r0, [r7, #4]
 801114a:	460b      	mov	r3, r1
 801114c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801114e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011150:	4618      	mov	r0, r3
 8011152:	370c      	adds	r7, #12
 8011154:	46bd      	mov	sp, r7
 8011156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801115a:	4770      	bx	lr

0801115c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801115c:	b480      	push	{r7}
 801115e:	b083      	sub	sp, #12
 8011160:	af00      	add	r7, sp, #0
 8011162:	6078      	str	r0, [r7, #4]
 8011164:	460b      	mov	r3, r1
 8011166:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011168:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801116a:	4618      	mov	r0, r3
 801116c:	370c      	adds	r7, #12
 801116e:	46bd      	mov	sp, r7
 8011170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011174:	4770      	bx	lr

08011176 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8011176:	b580      	push	{r7, lr}
 8011178:	b086      	sub	sp, #24
 801117a:	af00      	add	r7, sp, #0
 801117c:	6078      	str	r0, [r7, #4]
 801117e:	460b      	mov	r3, r1
 8011180:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801118a:	2300      	movs	r3, #0
 801118c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	885b      	ldrh	r3, [r3, #2]
 8011192:	b29b      	uxth	r3, r3
 8011194:	68fa      	ldr	r2, [r7, #12]
 8011196:	7812      	ldrb	r2, [r2, #0]
 8011198:	4293      	cmp	r3, r2
 801119a:	d91f      	bls.n	80111dc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	781b      	ldrb	r3, [r3, #0]
 80111a0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80111a2:	e013      	b.n	80111cc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80111a4:	f107 030a 	add.w	r3, r7, #10
 80111a8:	4619      	mov	r1, r3
 80111aa:	6978      	ldr	r0, [r7, #20]
 80111ac:	f000 f81b 	bl	80111e6 <USBD_GetNextDesc>
 80111b0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80111b2:	697b      	ldr	r3, [r7, #20]
 80111b4:	785b      	ldrb	r3, [r3, #1]
 80111b6:	2b05      	cmp	r3, #5
 80111b8:	d108      	bne.n	80111cc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80111ba:	697b      	ldr	r3, [r7, #20]
 80111bc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80111be:	693b      	ldr	r3, [r7, #16]
 80111c0:	789b      	ldrb	r3, [r3, #2]
 80111c2:	78fa      	ldrb	r2, [r7, #3]
 80111c4:	429a      	cmp	r2, r3
 80111c6:	d008      	beq.n	80111da <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80111c8:	2300      	movs	r3, #0
 80111ca:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	885b      	ldrh	r3, [r3, #2]
 80111d0:	b29a      	uxth	r2, r3
 80111d2:	897b      	ldrh	r3, [r7, #10]
 80111d4:	429a      	cmp	r2, r3
 80111d6:	d8e5      	bhi.n	80111a4 <USBD_GetEpDesc+0x2e>
 80111d8:	e000      	b.n	80111dc <USBD_GetEpDesc+0x66>
          break;
 80111da:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80111dc:	693b      	ldr	r3, [r7, #16]
}
 80111de:	4618      	mov	r0, r3
 80111e0:	3718      	adds	r7, #24
 80111e2:	46bd      	mov	sp, r7
 80111e4:	bd80      	pop	{r7, pc}

080111e6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80111e6:	b480      	push	{r7}
 80111e8:	b085      	sub	sp, #20
 80111ea:	af00      	add	r7, sp, #0
 80111ec:	6078      	str	r0, [r7, #4]
 80111ee:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80111f4:	683b      	ldr	r3, [r7, #0]
 80111f6:	881b      	ldrh	r3, [r3, #0]
 80111f8:	68fa      	ldr	r2, [r7, #12]
 80111fa:	7812      	ldrb	r2, [r2, #0]
 80111fc:	4413      	add	r3, r2
 80111fe:	b29a      	uxth	r2, r3
 8011200:	683b      	ldr	r3, [r7, #0]
 8011202:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	781b      	ldrb	r3, [r3, #0]
 8011208:	461a      	mov	r2, r3
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	4413      	add	r3, r2
 801120e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8011210:	68fb      	ldr	r3, [r7, #12]
}
 8011212:	4618      	mov	r0, r3
 8011214:	3714      	adds	r7, #20
 8011216:	46bd      	mov	sp, r7
 8011218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121c:	4770      	bx	lr

0801121e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801121e:	b480      	push	{r7}
 8011220:	b087      	sub	sp, #28
 8011222:	af00      	add	r7, sp, #0
 8011224:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801122a:	697b      	ldr	r3, [r7, #20]
 801122c:	781b      	ldrb	r3, [r3, #0]
 801122e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011230:	697b      	ldr	r3, [r7, #20]
 8011232:	3301      	adds	r3, #1
 8011234:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011236:	697b      	ldr	r3, [r7, #20]
 8011238:	781b      	ldrb	r3, [r3, #0]
 801123a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801123c:	8a3b      	ldrh	r3, [r7, #16]
 801123e:	021b      	lsls	r3, r3, #8
 8011240:	b21a      	sxth	r2, r3
 8011242:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011246:	4313      	orrs	r3, r2
 8011248:	b21b      	sxth	r3, r3
 801124a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801124c:	89fb      	ldrh	r3, [r7, #14]
}
 801124e:	4618      	mov	r0, r3
 8011250:	371c      	adds	r7, #28
 8011252:	46bd      	mov	sp, r7
 8011254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011258:	4770      	bx	lr
	...

0801125c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801125c:	b580      	push	{r7, lr}
 801125e:	b084      	sub	sp, #16
 8011260:	af00      	add	r7, sp, #0
 8011262:	6078      	str	r0, [r7, #4]
 8011264:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011266:	2300      	movs	r3, #0
 8011268:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801126a:	683b      	ldr	r3, [r7, #0]
 801126c:	781b      	ldrb	r3, [r3, #0]
 801126e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011272:	2b40      	cmp	r3, #64	@ 0x40
 8011274:	d005      	beq.n	8011282 <USBD_StdDevReq+0x26>
 8011276:	2b40      	cmp	r3, #64	@ 0x40
 8011278:	d857      	bhi.n	801132a <USBD_StdDevReq+0xce>
 801127a:	2b00      	cmp	r3, #0
 801127c:	d00f      	beq.n	801129e <USBD_StdDevReq+0x42>
 801127e:	2b20      	cmp	r3, #32
 8011280:	d153      	bne.n	801132a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	32ae      	adds	r2, #174	@ 0xae
 801128c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011290:	689b      	ldr	r3, [r3, #8]
 8011292:	6839      	ldr	r1, [r7, #0]
 8011294:	6878      	ldr	r0, [r7, #4]
 8011296:	4798      	blx	r3
 8011298:	4603      	mov	r3, r0
 801129a:	73fb      	strb	r3, [r7, #15]
      break;
 801129c:	e04a      	b.n	8011334 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801129e:	683b      	ldr	r3, [r7, #0]
 80112a0:	785b      	ldrb	r3, [r3, #1]
 80112a2:	2b09      	cmp	r3, #9
 80112a4:	d83b      	bhi.n	801131e <USBD_StdDevReq+0xc2>
 80112a6:	a201      	add	r2, pc, #4	@ (adr r2, 80112ac <USBD_StdDevReq+0x50>)
 80112a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112ac:	08011301 	.word	0x08011301
 80112b0:	08011315 	.word	0x08011315
 80112b4:	0801131f 	.word	0x0801131f
 80112b8:	0801130b 	.word	0x0801130b
 80112bc:	0801131f 	.word	0x0801131f
 80112c0:	080112df 	.word	0x080112df
 80112c4:	080112d5 	.word	0x080112d5
 80112c8:	0801131f 	.word	0x0801131f
 80112cc:	080112f7 	.word	0x080112f7
 80112d0:	080112e9 	.word	0x080112e9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80112d4:	6839      	ldr	r1, [r7, #0]
 80112d6:	6878      	ldr	r0, [r7, #4]
 80112d8:	f000 fa3c 	bl	8011754 <USBD_GetDescriptor>
          break;
 80112dc:	e024      	b.n	8011328 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80112de:	6839      	ldr	r1, [r7, #0]
 80112e0:	6878      	ldr	r0, [r7, #4]
 80112e2:	f000 fba1 	bl	8011a28 <USBD_SetAddress>
          break;
 80112e6:	e01f      	b.n	8011328 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80112e8:	6839      	ldr	r1, [r7, #0]
 80112ea:	6878      	ldr	r0, [r7, #4]
 80112ec:	f000 fbe0 	bl	8011ab0 <USBD_SetConfig>
 80112f0:	4603      	mov	r3, r0
 80112f2:	73fb      	strb	r3, [r7, #15]
          break;
 80112f4:	e018      	b.n	8011328 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80112f6:	6839      	ldr	r1, [r7, #0]
 80112f8:	6878      	ldr	r0, [r7, #4]
 80112fa:	f000 fc83 	bl	8011c04 <USBD_GetConfig>
          break;
 80112fe:	e013      	b.n	8011328 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011300:	6839      	ldr	r1, [r7, #0]
 8011302:	6878      	ldr	r0, [r7, #4]
 8011304:	f000 fcb4 	bl	8011c70 <USBD_GetStatus>
          break;
 8011308:	e00e      	b.n	8011328 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801130a:	6839      	ldr	r1, [r7, #0]
 801130c:	6878      	ldr	r0, [r7, #4]
 801130e:	f000 fce3 	bl	8011cd8 <USBD_SetFeature>
          break;
 8011312:	e009      	b.n	8011328 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8011314:	6839      	ldr	r1, [r7, #0]
 8011316:	6878      	ldr	r0, [r7, #4]
 8011318:	f000 fd07 	bl	8011d2a <USBD_ClrFeature>
          break;
 801131c:	e004      	b.n	8011328 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801131e:	6839      	ldr	r1, [r7, #0]
 8011320:	6878      	ldr	r0, [r7, #4]
 8011322:	f000 fd5e 	bl	8011de2 <USBD_CtlError>
          break;
 8011326:	bf00      	nop
      }
      break;
 8011328:	e004      	b.n	8011334 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801132a:	6839      	ldr	r1, [r7, #0]
 801132c:	6878      	ldr	r0, [r7, #4]
 801132e:	f000 fd58 	bl	8011de2 <USBD_CtlError>
      break;
 8011332:	bf00      	nop
  }

  return ret;
 8011334:	7bfb      	ldrb	r3, [r7, #15]
}
 8011336:	4618      	mov	r0, r3
 8011338:	3710      	adds	r7, #16
 801133a:	46bd      	mov	sp, r7
 801133c:	bd80      	pop	{r7, pc}
 801133e:	bf00      	nop

08011340 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011340:	b580      	push	{r7, lr}
 8011342:	b084      	sub	sp, #16
 8011344:	af00      	add	r7, sp, #0
 8011346:	6078      	str	r0, [r7, #4]
 8011348:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801134a:	2300      	movs	r3, #0
 801134c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801134e:	683b      	ldr	r3, [r7, #0]
 8011350:	781b      	ldrb	r3, [r3, #0]
 8011352:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011356:	2b40      	cmp	r3, #64	@ 0x40
 8011358:	d005      	beq.n	8011366 <USBD_StdItfReq+0x26>
 801135a:	2b40      	cmp	r3, #64	@ 0x40
 801135c:	d852      	bhi.n	8011404 <USBD_StdItfReq+0xc4>
 801135e:	2b00      	cmp	r3, #0
 8011360:	d001      	beq.n	8011366 <USBD_StdItfReq+0x26>
 8011362:	2b20      	cmp	r3, #32
 8011364:	d14e      	bne.n	8011404 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801136c:	b2db      	uxtb	r3, r3
 801136e:	3b01      	subs	r3, #1
 8011370:	2b02      	cmp	r3, #2
 8011372:	d840      	bhi.n	80113f6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011374:	683b      	ldr	r3, [r7, #0]
 8011376:	889b      	ldrh	r3, [r3, #4]
 8011378:	b2db      	uxtb	r3, r3
 801137a:	2b01      	cmp	r3, #1
 801137c:	d836      	bhi.n	80113ec <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801137e:	683b      	ldr	r3, [r7, #0]
 8011380:	889b      	ldrh	r3, [r3, #4]
 8011382:	b2db      	uxtb	r3, r3
 8011384:	4619      	mov	r1, r3
 8011386:	6878      	ldr	r0, [r7, #4]
 8011388:	f7ff fedb 	bl	8011142 <USBD_CoreFindIF>
 801138c:	4603      	mov	r3, r0
 801138e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011390:	7bbb      	ldrb	r3, [r7, #14]
 8011392:	2bff      	cmp	r3, #255	@ 0xff
 8011394:	d01d      	beq.n	80113d2 <USBD_StdItfReq+0x92>
 8011396:	7bbb      	ldrb	r3, [r7, #14]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d11a      	bne.n	80113d2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 801139c:	7bba      	ldrb	r2, [r7, #14]
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	32ae      	adds	r2, #174	@ 0xae
 80113a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80113a6:	689b      	ldr	r3, [r3, #8]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d00f      	beq.n	80113cc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80113ac:	7bba      	ldrb	r2, [r7, #14]
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80113b4:	7bba      	ldrb	r2, [r7, #14]
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	32ae      	adds	r2, #174	@ 0xae
 80113ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80113be:	689b      	ldr	r3, [r3, #8]
 80113c0:	6839      	ldr	r1, [r7, #0]
 80113c2:	6878      	ldr	r0, [r7, #4]
 80113c4:	4798      	blx	r3
 80113c6:	4603      	mov	r3, r0
 80113c8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80113ca:	e004      	b.n	80113d6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80113cc:	2303      	movs	r3, #3
 80113ce:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80113d0:	e001      	b.n	80113d6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80113d2:	2303      	movs	r3, #3
 80113d4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80113d6:	683b      	ldr	r3, [r7, #0]
 80113d8:	88db      	ldrh	r3, [r3, #6]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d110      	bne.n	8011400 <USBD_StdItfReq+0xc0>
 80113de:	7bfb      	ldrb	r3, [r7, #15]
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d10d      	bne.n	8011400 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80113e4:	6878      	ldr	r0, [r7, #4]
 80113e6:	f000 fed4 	bl	8012192 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80113ea:	e009      	b.n	8011400 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80113ec:	6839      	ldr	r1, [r7, #0]
 80113ee:	6878      	ldr	r0, [r7, #4]
 80113f0:	f000 fcf7 	bl	8011de2 <USBD_CtlError>
          break;
 80113f4:	e004      	b.n	8011400 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80113f6:	6839      	ldr	r1, [r7, #0]
 80113f8:	6878      	ldr	r0, [r7, #4]
 80113fa:	f000 fcf2 	bl	8011de2 <USBD_CtlError>
          break;
 80113fe:	e000      	b.n	8011402 <USBD_StdItfReq+0xc2>
          break;
 8011400:	bf00      	nop
      }
      break;
 8011402:	e004      	b.n	801140e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8011404:	6839      	ldr	r1, [r7, #0]
 8011406:	6878      	ldr	r0, [r7, #4]
 8011408:	f000 fceb 	bl	8011de2 <USBD_CtlError>
      break;
 801140c:	bf00      	nop
  }

  return ret;
 801140e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011410:	4618      	mov	r0, r3
 8011412:	3710      	adds	r7, #16
 8011414:	46bd      	mov	sp, r7
 8011416:	bd80      	pop	{r7, pc}

08011418 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011418:	b580      	push	{r7, lr}
 801141a:	b084      	sub	sp, #16
 801141c:	af00      	add	r7, sp, #0
 801141e:	6078      	str	r0, [r7, #4]
 8011420:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8011422:	2300      	movs	r3, #0
 8011424:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8011426:	683b      	ldr	r3, [r7, #0]
 8011428:	889b      	ldrh	r3, [r3, #4]
 801142a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801142c:	683b      	ldr	r3, [r7, #0]
 801142e:	781b      	ldrb	r3, [r3, #0]
 8011430:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011434:	2b40      	cmp	r3, #64	@ 0x40
 8011436:	d007      	beq.n	8011448 <USBD_StdEPReq+0x30>
 8011438:	2b40      	cmp	r3, #64	@ 0x40
 801143a:	f200 817f 	bhi.w	801173c <USBD_StdEPReq+0x324>
 801143e:	2b00      	cmp	r3, #0
 8011440:	d02a      	beq.n	8011498 <USBD_StdEPReq+0x80>
 8011442:	2b20      	cmp	r3, #32
 8011444:	f040 817a 	bne.w	801173c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8011448:	7bbb      	ldrb	r3, [r7, #14]
 801144a:	4619      	mov	r1, r3
 801144c:	6878      	ldr	r0, [r7, #4]
 801144e:	f7ff fe85 	bl	801115c <USBD_CoreFindEP>
 8011452:	4603      	mov	r3, r0
 8011454:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011456:	7b7b      	ldrb	r3, [r7, #13]
 8011458:	2bff      	cmp	r3, #255	@ 0xff
 801145a:	f000 8174 	beq.w	8011746 <USBD_StdEPReq+0x32e>
 801145e:	7b7b      	ldrb	r3, [r7, #13]
 8011460:	2b00      	cmp	r3, #0
 8011462:	f040 8170 	bne.w	8011746 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8011466:	7b7a      	ldrb	r2, [r7, #13]
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801146e:	7b7a      	ldrb	r2, [r7, #13]
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	32ae      	adds	r2, #174	@ 0xae
 8011474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011478:	689b      	ldr	r3, [r3, #8]
 801147a:	2b00      	cmp	r3, #0
 801147c:	f000 8163 	beq.w	8011746 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8011480:	7b7a      	ldrb	r2, [r7, #13]
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	32ae      	adds	r2, #174	@ 0xae
 8011486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801148a:	689b      	ldr	r3, [r3, #8]
 801148c:	6839      	ldr	r1, [r7, #0]
 801148e:	6878      	ldr	r0, [r7, #4]
 8011490:	4798      	blx	r3
 8011492:	4603      	mov	r3, r0
 8011494:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8011496:	e156      	b.n	8011746 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011498:	683b      	ldr	r3, [r7, #0]
 801149a:	785b      	ldrb	r3, [r3, #1]
 801149c:	2b03      	cmp	r3, #3
 801149e:	d008      	beq.n	80114b2 <USBD_StdEPReq+0x9a>
 80114a0:	2b03      	cmp	r3, #3
 80114a2:	f300 8145 	bgt.w	8011730 <USBD_StdEPReq+0x318>
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	f000 809b 	beq.w	80115e2 <USBD_StdEPReq+0x1ca>
 80114ac:	2b01      	cmp	r3, #1
 80114ae:	d03c      	beq.n	801152a <USBD_StdEPReq+0x112>
 80114b0:	e13e      	b.n	8011730 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80114b8:	b2db      	uxtb	r3, r3
 80114ba:	2b02      	cmp	r3, #2
 80114bc:	d002      	beq.n	80114c4 <USBD_StdEPReq+0xac>
 80114be:	2b03      	cmp	r3, #3
 80114c0:	d016      	beq.n	80114f0 <USBD_StdEPReq+0xd8>
 80114c2:	e02c      	b.n	801151e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80114c4:	7bbb      	ldrb	r3, [r7, #14]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d00d      	beq.n	80114e6 <USBD_StdEPReq+0xce>
 80114ca:	7bbb      	ldrb	r3, [r7, #14]
 80114cc:	2b80      	cmp	r3, #128	@ 0x80
 80114ce:	d00a      	beq.n	80114e6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80114d0:	7bbb      	ldrb	r3, [r7, #14]
 80114d2:	4619      	mov	r1, r3
 80114d4:	6878      	ldr	r0, [r7, #4]
 80114d6:	f7ff fa41 	bl	801095c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80114da:	2180      	movs	r1, #128	@ 0x80
 80114dc:	6878      	ldr	r0, [r7, #4]
 80114de:	f7ff fa3d 	bl	801095c <USBD_LL_StallEP>
 80114e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80114e4:	e020      	b.n	8011528 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80114e6:	6839      	ldr	r1, [r7, #0]
 80114e8:	6878      	ldr	r0, [r7, #4]
 80114ea:	f000 fc7a 	bl	8011de2 <USBD_CtlError>
              break;
 80114ee:	e01b      	b.n	8011528 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80114f0:	683b      	ldr	r3, [r7, #0]
 80114f2:	885b      	ldrh	r3, [r3, #2]
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d10e      	bne.n	8011516 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80114f8:	7bbb      	ldrb	r3, [r7, #14]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d00b      	beq.n	8011516 <USBD_StdEPReq+0xfe>
 80114fe:	7bbb      	ldrb	r3, [r7, #14]
 8011500:	2b80      	cmp	r3, #128	@ 0x80
 8011502:	d008      	beq.n	8011516 <USBD_StdEPReq+0xfe>
 8011504:	683b      	ldr	r3, [r7, #0]
 8011506:	88db      	ldrh	r3, [r3, #6]
 8011508:	2b00      	cmp	r3, #0
 801150a:	d104      	bne.n	8011516 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801150c:	7bbb      	ldrb	r3, [r7, #14]
 801150e:	4619      	mov	r1, r3
 8011510:	6878      	ldr	r0, [r7, #4]
 8011512:	f7ff fa23 	bl	801095c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8011516:	6878      	ldr	r0, [r7, #4]
 8011518:	f000 fe3b 	bl	8012192 <USBD_CtlSendStatus>

              break;
 801151c:	e004      	b.n	8011528 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801151e:	6839      	ldr	r1, [r7, #0]
 8011520:	6878      	ldr	r0, [r7, #4]
 8011522:	f000 fc5e 	bl	8011de2 <USBD_CtlError>
              break;
 8011526:	bf00      	nop
          }
          break;
 8011528:	e107      	b.n	801173a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011530:	b2db      	uxtb	r3, r3
 8011532:	2b02      	cmp	r3, #2
 8011534:	d002      	beq.n	801153c <USBD_StdEPReq+0x124>
 8011536:	2b03      	cmp	r3, #3
 8011538:	d016      	beq.n	8011568 <USBD_StdEPReq+0x150>
 801153a:	e04b      	b.n	80115d4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801153c:	7bbb      	ldrb	r3, [r7, #14]
 801153e:	2b00      	cmp	r3, #0
 8011540:	d00d      	beq.n	801155e <USBD_StdEPReq+0x146>
 8011542:	7bbb      	ldrb	r3, [r7, #14]
 8011544:	2b80      	cmp	r3, #128	@ 0x80
 8011546:	d00a      	beq.n	801155e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011548:	7bbb      	ldrb	r3, [r7, #14]
 801154a:	4619      	mov	r1, r3
 801154c:	6878      	ldr	r0, [r7, #4]
 801154e:	f7ff fa05 	bl	801095c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011552:	2180      	movs	r1, #128	@ 0x80
 8011554:	6878      	ldr	r0, [r7, #4]
 8011556:	f7ff fa01 	bl	801095c <USBD_LL_StallEP>
 801155a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801155c:	e040      	b.n	80115e0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801155e:	6839      	ldr	r1, [r7, #0]
 8011560:	6878      	ldr	r0, [r7, #4]
 8011562:	f000 fc3e 	bl	8011de2 <USBD_CtlError>
              break;
 8011566:	e03b      	b.n	80115e0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011568:	683b      	ldr	r3, [r7, #0]
 801156a:	885b      	ldrh	r3, [r3, #2]
 801156c:	2b00      	cmp	r3, #0
 801156e:	d136      	bne.n	80115de <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011570:	7bbb      	ldrb	r3, [r7, #14]
 8011572:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011576:	2b00      	cmp	r3, #0
 8011578:	d004      	beq.n	8011584 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801157a:	7bbb      	ldrb	r3, [r7, #14]
 801157c:	4619      	mov	r1, r3
 801157e:	6878      	ldr	r0, [r7, #4]
 8011580:	f7ff fa05 	bl	801098e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8011584:	6878      	ldr	r0, [r7, #4]
 8011586:	f000 fe04 	bl	8012192 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801158a:	7bbb      	ldrb	r3, [r7, #14]
 801158c:	4619      	mov	r1, r3
 801158e:	6878      	ldr	r0, [r7, #4]
 8011590:	f7ff fde4 	bl	801115c <USBD_CoreFindEP>
 8011594:	4603      	mov	r3, r0
 8011596:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011598:	7b7b      	ldrb	r3, [r7, #13]
 801159a:	2bff      	cmp	r3, #255	@ 0xff
 801159c:	d01f      	beq.n	80115de <USBD_StdEPReq+0x1c6>
 801159e:	7b7b      	ldrb	r3, [r7, #13]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d11c      	bne.n	80115de <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80115a4:	7b7a      	ldrb	r2, [r7, #13]
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80115ac:	7b7a      	ldrb	r2, [r7, #13]
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	32ae      	adds	r2, #174	@ 0xae
 80115b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115b6:	689b      	ldr	r3, [r3, #8]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d010      	beq.n	80115de <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80115bc:	7b7a      	ldrb	r2, [r7, #13]
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	32ae      	adds	r2, #174	@ 0xae
 80115c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115c6:	689b      	ldr	r3, [r3, #8]
 80115c8:	6839      	ldr	r1, [r7, #0]
 80115ca:	6878      	ldr	r0, [r7, #4]
 80115cc:	4798      	blx	r3
 80115ce:	4603      	mov	r3, r0
 80115d0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80115d2:	e004      	b.n	80115de <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80115d4:	6839      	ldr	r1, [r7, #0]
 80115d6:	6878      	ldr	r0, [r7, #4]
 80115d8:	f000 fc03 	bl	8011de2 <USBD_CtlError>
              break;
 80115dc:	e000      	b.n	80115e0 <USBD_StdEPReq+0x1c8>
              break;
 80115de:	bf00      	nop
          }
          break;
 80115e0:	e0ab      	b.n	801173a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80115e8:	b2db      	uxtb	r3, r3
 80115ea:	2b02      	cmp	r3, #2
 80115ec:	d002      	beq.n	80115f4 <USBD_StdEPReq+0x1dc>
 80115ee:	2b03      	cmp	r3, #3
 80115f0:	d032      	beq.n	8011658 <USBD_StdEPReq+0x240>
 80115f2:	e097      	b.n	8011724 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80115f4:	7bbb      	ldrb	r3, [r7, #14]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d007      	beq.n	801160a <USBD_StdEPReq+0x1f2>
 80115fa:	7bbb      	ldrb	r3, [r7, #14]
 80115fc:	2b80      	cmp	r3, #128	@ 0x80
 80115fe:	d004      	beq.n	801160a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8011600:	6839      	ldr	r1, [r7, #0]
 8011602:	6878      	ldr	r0, [r7, #4]
 8011604:	f000 fbed 	bl	8011de2 <USBD_CtlError>
                break;
 8011608:	e091      	b.n	801172e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801160a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801160e:	2b00      	cmp	r3, #0
 8011610:	da0b      	bge.n	801162a <USBD_StdEPReq+0x212>
 8011612:	7bbb      	ldrb	r3, [r7, #14]
 8011614:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011618:	4613      	mov	r3, r2
 801161a:	009b      	lsls	r3, r3, #2
 801161c:	4413      	add	r3, r2
 801161e:	009b      	lsls	r3, r3, #2
 8011620:	3310      	adds	r3, #16
 8011622:	687a      	ldr	r2, [r7, #4]
 8011624:	4413      	add	r3, r2
 8011626:	3304      	adds	r3, #4
 8011628:	e00b      	b.n	8011642 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801162a:	7bbb      	ldrb	r3, [r7, #14]
 801162c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011630:	4613      	mov	r3, r2
 8011632:	009b      	lsls	r3, r3, #2
 8011634:	4413      	add	r3, r2
 8011636:	009b      	lsls	r3, r3, #2
 8011638:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801163c:	687a      	ldr	r2, [r7, #4]
 801163e:	4413      	add	r3, r2
 8011640:	3304      	adds	r3, #4
 8011642:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8011644:	68bb      	ldr	r3, [r7, #8]
 8011646:	2200      	movs	r2, #0
 8011648:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801164a:	68bb      	ldr	r3, [r7, #8]
 801164c:	2202      	movs	r2, #2
 801164e:	4619      	mov	r1, r3
 8011650:	6878      	ldr	r0, [r7, #4]
 8011652:	f000 fd44 	bl	80120de <USBD_CtlSendData>
              break;
 8011656:	e06a      	b.n	801172e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8011658:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801165c:	2b00      	cmp	r3, #0
 801165e:	da11      	bge.n	8011684 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011660:	7bbb      	ldrb	r3, [r7, #14]
 8011662:	f003 020f 	and.w	r2, r3, #15
 8011666:	6879      	ldr	r1, [r7, #4]
 8011668:	4613      	mov	r3, r2
 801166a:	009b      	lsls	r3, r3, #2
 801166c:	4413      	add	r3, r2
 801166e:	009b      	lsls	r3, r3, #2
 8011670:	440b      	add	r3, r1
 8011672:	3324      	adds	r3, #36	@ 0x24
 8011674:	881b      	ldrh	r3, [r3, #0]
 8011676:	2b00      	cmp	r3, #0
 8011678:	d117      	bne.n	80116aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801167a:	6839      	ldr	r1, [r7, #0]
 801167c:	6878      	ldr	r0, [r7, #4]
 801167e:	f000 fbb0 	bl	8011de2 <USBD_CtlError>
                  break;
 8011682:	e054      	b.n	801172e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011684:	7bbb      	ldrb	r3, [r7, #14]
 8011686:	f003 020f 	and.w	r2, r3, #15
 801168a:	6879      	ldr	r1, [r7, #4]
 801168c:	4613      	mov	r3, r2
 801168e:	009b      	lsls	r3, r3, #2
 8011690:	4413      	add	r3, r2
 8011692:	009b      	lsls	r3, r3, #2
 8011694:	440b      	add	r3, r1
 8011696:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801169a:	881b      	ldrh	r3, [r3, #0]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d104      	bne.n	80116aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80116a0:	6839      	ldr	r1, [r7, #0]
 80116a2:	6878      	ldr	r0, [r7, #4]
 80116a4:	f000 fb9d 	bl	8011de2 <USBD_CtlError>
                  break;
 80116a8:	e041      	b.n	801172e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80116aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	da0b      	bge.n	80116ca <USBD_StdEPReq+0x2b2>
 80116b2:	7bbb      	ldrb	r3, [r7, #14]
 80116b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80116b8:	4613      	mov	r3, r2
 80116ba:	009b      	lsls	r3, r3, #2
 80116bc:	4413      	add	r3, r2
 80116be:	009b      	lsls	r3, r3, #2
 80116c0:	3310      	adds	r3, #16
 80116c2:	687a      	ldr	r2, [r7, #4]
 80116c4:	4413      	add	r3, r2
 80116c6:	3304      	adds	r3, #4
 80116c8:	e00b      	b.n	80116e2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80116ca:	7bbb      	ldrb	r3, [r7, #14]
 80116cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80116d0:	4613      	mov	r3, r2
 80116d2:	009b      	lsls	r3, r3, #2
 80116d4:	4413      	add	r3, r2
 80116d6:	009b      	lsls	r3, r3, #2
 80116d8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80116dc:	687a      	ldr	r2, [r7, #4]
 80116de:	4413      	add	r3, r2
 80116e0:	3304      	adds	r3, #4
 80116e2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80116e4:	7bbb      	ldrb	r3, [r7, #14]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d002      	beq.n	80116f0 <USBD_StdEPReq+0x2d8>
 80116ea:	7bbb      	ldrb	r3, [r7, #14]
 80116ec:	2b80      	cmp	r3, #128	@ 0x80
 80116ee:	d103      	bne.n	80116f8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80116f0:	68bb      	ldr	r3, [r7, #8]
 80116f2:	2200      	movs	r2, #0
 80116f4:	601a      	str	r2, [r3, #0]
 80116f6:	e00e      	b.n	8011716 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80116f8:	7bbb      	ldrb	r3, [r7, #14]
 80116fa:	4619      	mov	r1, r3
 80116fc:	6878      	ldr	r0, [r7, #4]
 80116fe:	f7ff f95f 	bl	80109c0 <USBD_LL_IsStallEP>
 8011702:	4603      	mov	r3, r0
 8011704:	2b00      	cmp	r3, #0
 8011706:	d003      	beq.n	8011710 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8011708:	68bb      	ldr	r3, [r7, #8]
 801170a:	2201      	movs	r2, #1
 801170c:	601a      	str	r2, [r3, #0]
 801170e:	e002      	b.n	8011716 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8011710:	68bb      	ldr	r3, [r7, #8]
 8011712:	2200      	movs	r2, #0
 8011714:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011716:	68bb      	ldr	r3, [r7, #8]
 8011718:	2202      	movs	r2, #2
 801171a:	4619      	mov	r1, r3
 801171c:	6878      	ldr	r0, [r7, #4]
 801171e:	f000 fcde 	bl	80120de <USBD_CtlSendData>
              break;
 8011722:	e004      	b.n	801172e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8011724:	6839      	ldr	r1, [r7, #0]
 8011726:	6878      	ldr	r0, [r7, #4]
 8011728:	f000 fb5b 	bl	8011de2 <USBD_CtlError>
              break;
 801172c:	bf00      	nop
          }
          break;
 801172e:	e004      	b.n	801173a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8011730:	6839      	ldr	r1, [r7, #0]
 8011732:	6878      	ldr	r0, [r7, #4]
 8011734:	f000 fb55 	bl	8011de2 <USBD_CtlError>
          break;
 8011738:	bf00      	nop
      }
      break;
 801173a:	e005      	b.n	8011748 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 801173c:	6839      	ldr	r1, [r7, #0]
 801173e:	6878      	ldr	r0, [r7, #4]
 8011740:	f000 fb4f 	bl	8011de2 <USBD_CtlError>
      break;
 8011744:	e000      	b.n	8011748 <USBD_StdEPReq+0x330>
      break;
 8011746:	bf00      	nop
  }

  return ret;
 8011748:	7bfb      	ldrb	r3, [r7, #15]
}
 801174a:	4618      	mov	r0, r3
 801174c:	3710      	adds	r7, #16
 801174e:	46bd      	mov	sp, r7
 8011750:	bd80      	pop	{r7, pc}
	...

08011754 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011754:	b580      	push	{r7, lr}
 8011756:	b084      	sub	sp, #16
 8011758:	af00      	add	r7, sp, #0
 801175a:	6078      	str	r0, [r7, #4]
 801175c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801175e:	2300      	movs	r3, #0
 8011760:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011762:	2300      	movs	r3, #0
 8011764:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011766:	2300      	movs	r3, #0
 8011768:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801176a:	683b      	ldr	r3, [r7, #0]
 801176c:	885b      	ldrh	r3, [r3, #2]
 801176e:	0a1b      	lsrs	r3, r3, #8
 8011770:	b29b      	uxth	r3, r3
 8011772:	3b01      	subs	r3, #1
 8011774:	2b06      	cmp	r3, #6
 8011776:	f200 8128 	bhi.w	80119ca <USBD_GetDescriptor+0x276>
 801177a:	a201      	add	r2, pc, #4	@ (adr r2, 8011780 <USBD_GetDescriptor+0x2c>)
 801177c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011780:	0801179d 	.word	0x0801179d
 8011784:	080117b5 	.word	0x080117b5
 8011788:	080117f5 	.word	0x080117f5
 801178c:	080119cb 	.word	0x080119cb
 8011790:	080119cb 	.word	0x080119cb
 8011794:	0801196b 	.word	0x0801196b
 8011798:	08011997 	.word	0x08011997
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	687a      	ldr	r2, [r7, #4]
 80117a6:	7c12      	ldrb	r2, [r2, #16]
 80117a8:	f107 0108 	add.w	r1, r7, #8
 80117ac:	4610      	mov	r0, r2
 80117ae:	4798      	blx	r3
 80117b0:	60f8      	str	r0, [r7, #12]
      break;
 80117b2:	e112      	b.n	80119da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	7c1b      	ldrb	r3, [r3, #16]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d10d      	bne.n	80117d8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80117c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80117c4:	f107 0208 	add.w	r2, r7, #8
 80117c8:	4610      	mov	r0, r2
 80117ca:	4798      	blx	r3
 80117cc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	3301      	adds	r3, #1
 80117d2:	2202      	movs	r2, #2
 80117d4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80117d6:	e100      	b.n	80119da <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80117de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117e0:	f107 0208 	add.w	r2, r7, #8
 80117e4:	4610      	mov	r0, r2
 80117e6:	4798      	blx	r3
 80117e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	3301      	adds	r3, #1
 80117ee:	2202      	movs	r2, #2
 80117f0:	701a      	strb	r2, [r3, #0]
      break;
 80117f2:	e0f2      	b.n	80119da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80117f4:	683b      	ldr	r3, [r7, #0]
 80117f6:	885b      	ldrh	r3, [r3, #2]
 80117f8:	b2db      	uxtb	r3, r3
 80117fa:	2b05      	cmp	r3, #5
 80117fc:	f200 80ac 	bhi.w	8011958 <USBD_GetDescriptor+0x204>
 8011800:	a201      	add	r2, pc, #4	@ (adr r2, 8011808 <USBD_GetDescriptor+0xb4>)
 8011802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011806:	bf00      	nop
 8011808:	08011821 	.word	0x08011821
 801180c:	08011855 	.word	0x08011855
 8011810:	08011889 	.word	0x08011889
 8011814:	080118bd 	.word	0x080118bd
 8011818:	080118f1 	.word	0x080118f1
 801181c:	08011925 	.word	0x08011925
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011826:	685b      	ldr	r3, [r3, #4]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d00b      	beq.n	8011844 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011832:	685b      	ldr	r3, [r3, #4]
 8011834:	687a      	ldr	r2, [r7, #4]
 8011836:	7c12      	ldrb	r2, [r2, #16]
 8011838:	f107 0108 	add.w	r1, r7, #8
 801183c:	4610      	mov	r0, r2
 801183e:	4798      	blx	r3
 8011840:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011842:	e091      	b.n	8011968 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011844:	6839      	ldr	r1, [r7, #0]
 8011846:	6878      	ldr	r0, [r7, #4]
 8011848:	f000 facb 	bl	8011de2 <USBD_CtlError>
            err++;
 801184c:	7afb      	ldrb	r3, [r7, #11]
 801184e:	3301      	adds	r3, #1
 8011850:	72fb      	strb	r3, [r7, #11]
          break;
 8011852:	e089      	b.n	8011968 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801185a:	689b      	ldr	r3, [r3, #8]
 801185c:	2b00      	cmp	r3, #0
 801185e:	d00b      	beq.n	8011878 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011866:	689b      	ldr	r3, [r3, #8]
 8011868:	687a      	ldr	r2, [r7, #4]
 801186a:	7c12      	ldrb	r2, [r2, #16]
 801186c:	f107 0108 	add.w	r1, r7, #8
 8011870:	4610      	mov	r0, r2
 8011872:	4798      	blx	r3
 8011874:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011876:	e077      	b.n	8011968 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011878:	6839      	ldr	r1, [r7, #0]
 801187a:	6878      	ldr	r0, [r7, #4]
 801187c:	f000 fab1 	bl	8011de2 <USBD_CtlError>
            err++;
 8011880:	7afb      	ldrb	r3, [r7, #11]
 8011882:	3301      	adds	r3, #1
 8011884:	72fb      	strb	r3, [r7, #11]
          break;
 8011886:	e06f      	b.n	8011968 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801188e:	68db      	ldr	r3, [r3, #12]
 8011890:	2b00      	cmp	r3, #0
 8011892:	d00b      	beq.n	80118ac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801189a:	68db      	ldr	r3, [r3, #12]
 801189c:	687a      	ldr	r2, [r7, #4]
 801189e:	7c12      	ldrb	r2, [r2, #16]
 80118a0:	f107 0108 	add.w	r1, r7, #8
 80118a4:	4610      	mov	r0, r2
 80118a6:	4798      	blx	r3
 80118a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80118aa:	e05d      	b.n	8011968 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80118ac:	6839      	ldr	r1, [r7, #0]
 80118ae:	6878      	ldr	r0, [r7, #4]
 80118b0:	f000 fa97 	bl	8011de2 <USBD_CtlError>
            err++;
 80118b4:	7afb      	ldrb	r3, [r7, #11]
 80118b6:	3301      	adds	r3, #1
 80118b8:	72fb      	strb	r3, [r7, #11]
          break;
 80118ba:	e055      	b.n	8011968 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80118c2:	691b      	ldr	r3, [r3, #16]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d00b      	beq.n	80118e0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80118ce:	691b      	ldr	r3, [r3, #16]
 80118d0:	687a      	ldr	r2, [r7, #4]
 80118d2:	7c12      	ldrb	r2, [r2, #16]
 80118d4:	f107 0108 	add.w	r1, r7, #8
 80118d8:	4610      	mov	r0, r2
 80118da:	4798      	blx	r3
 80118dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80118de:	e043      	b.n	8011968 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80118e0:	6839      	ldr	r1, [r7, #0]
 80118e2:	6878      	ldr	r0, [r7, #4]
 80118e4:	f000 fa7d 	bl	8011de2 <USBD_CtlError>
            err++;
 80118e8:	7afb      	ldrb	r3, [r7, #11]
 80118ea:	3301      	adds	r3, #1
 80118ec:	72fb      	strb	r3, [r7, #11]
          break;
 80118ee:	e03b      	b.n	8011968 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80118f6:	695b      	ldr	r3, [r3, #20]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d00b      	beq.n	8011914 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011902:	695b      	ldr	r3, [r3, #20]
 8011904:	687a      	ldr	r2, [r7, #4]
 8011906:	7c12      	ldrb	r2, [r2, #16]
 8011908:	f107 0108 	add.w	r1, r7, #8
 801190c:	4610      	mov	r0, r2
 801190e:	4798      	blx	r3
 8011910:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011912:	e029      	b.n	8011968 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011914:	6839      	ldr	r1, [r7, #0]
 8011916:	6878      	ldr	r0, [r7, #4]
 8011918:	f000 fa63 	bl	8011de2 <USBD_CtlError>
            err++;
 801191c:	7afb      	ldrb	r3, [r7, #11]
 801191e:	3301      	adds	r3, #1
 8011920:	72fb      	strb	r3, [r7, #11]
          break;
 8011922:	e021      	b.n	8011968 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801192a:	699b      	ldr	r3, [r3, #24]
 801192c:	2b00      	cmp	r3, #0
 801192e:	d00b      	beq.n	8011948 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011936:	699b      	ldr	r3, [r3, #24]
 8011938:	687a      	ldr	r2, [r7, #4]
 801193a:	7c12      	ldrb	r2, [r2, #16]
 801193c:	f107 0108 	add.w	r1, r7, #8
 8011940:	4610      	mov	r0, r2
 8011942:	4798      	blx	r3
 8011944:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011946:	e00f      	b.n	8011968 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011948:	6839      	ldr	r1, [r7, #0]
 801194a:	6878      	ldr	r0, [r7, #4]
 801194c:	f000 fa49 	bl	8011de2 <USBD_CtlError>
            err++;
 8011950:	7afb      	ldrb	r3, [r7, #11]
 8011952:	3301      	adds	r3, #1
 8011954:	72fb      	strb	r3, [r7, #11]
          break;
 8011956:	e007      	b.n	8011968 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8011958:	6839      	ldr	r1, [r7, #0]
 801195a:	6878      	ldr	r0, [r7, #4]
 801195c:	f000 fa41 	bl	8011de2 <USBD_CtlError>
          err++;
 8011960:	7afb      	ldrb	r3, [r7, #11]
 8011962:	3301      	adds	r3, #1
 8011964:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8011966:	bf00      	nop
      }
      break;
 8011968:	e037      	b.n	80119da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	7c1b      	ldrb	r3, [r3, #16]
 801196e:	2b00      	cmp	r3, #0
 8011970:	d109      	bne.n	8011986 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011978:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801197a:	f107 0208 	add.w	r2, r7, #8
 801197e:	4610      	mov	r0, r2
 8011980:	4798      	blx	r3
 8011982:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011984:	e029      	b.n	80119da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8011986:	6839      	ldr	r1, [r7, #0]
 8011988:	6878      	ldr	r0, [r7, #4]
 801198a:	f000 fa2a 	bl	8011de2 <USBD_CtlError>
        err++;
 801198e:	7afb      	ldrb	r3, [r7, #11]
 8011990:	3301      	adds	r3, #1
 8011992:	72fb      	strb	r3, [r7, #11]
      break;
 8011994:	e021      	b.n	80119da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	7c1b      	ldrb	r3, [r3, #16]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d10d      	bne.n	80119ba <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80119a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80119a6:	f107 0208 	add.w	r2, r7, #8
 80119aa:	4610      	mov	r0, r2
 80119ac:	4798      	blx	r3
 80119ae:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	3301      	adds	r3, #1
 80119b4:	2207      	movs	r2, #7
 80119b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80119b8:	e00f      	b.n	80119da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80119ba:	6839      	ldr	r1, [r7, #0]
 80119bc:	6878      	ldr	r0, [r7, #4]
 80119be:	f000 fa10 	bl	8011de2 <USBD_CtlError>
        err++;
 80119c2:	7afb      	ldrb	r3, [r7, #11]
 80119c4:	3301      	adds	r3, #1
 80119c6:	72fb      	strb	r3, [r7, #11]
      break;
 80119c8:	e007      	b.n	80119da <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80119ca:	6839      	ldr	r1, [r7, #0]
 80119cc:	6878      	ldr	r0, [r7, #4]
 80119ce:	f000 fa08 	bl	8011de2 <USBD_CtlError>
      err++;
 80119d2:	7afb      	ldrb	r3, [r7, #11]
 80119d4:	3301      	adds	r3, #1
 80119d6:	72fb      	strb	r3, [r7, #11]
      break;
 80119d8:	bf00      	nop
  }

  if (err != 0U)
 80119da:	7afb      	ldrb	r3, [r7, #11]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d11e      	bne.n	8011a1e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80119e0:	683b      	ldr	r3, [r7, #0]
 80119e2:	88db      	ldrh	r3, [r3, #6]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d016      	beq.n	8011a16 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80119e8:	893b      	ldrh	r3, [r7, #8]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d00e      	beq.n	8011a0c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80119ee:	683b      	ldr	r3, [r7, #0]
 80119f0:	88da      	ldrh	r2, [r3, #6]
 80119f2:	893b      	ldrh	r3, [r7, #8]
 80119f4:	4293      	cmp	r3, r2
 80119f6:	bf28      	it	cs
 80119f8:	4613      	movcs	r3, r2
 80119fa:	b29b      	uxth	r3, r3
 80119fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80119fe:	893b      	ldrh	r3, [r7, #8]
 8011a00:	461a      	mov	r2, r3
 8011a02:	68f9      	ldr	r1, [r7, #12]
 8011a04:	6878      	ldr	r0, [r7, #4]
 8011a06:	f000 fb6a 	bl	80120de <USBD_CtlSendData>
 8011a0a:	e009      	b.n	8011a20 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8011a0c:	6839      	ldr	r1, [r7, #0]
 8011a0e:	6878      	ldr	r0, [r7, #4]
 8011a10:	f000 f9e7 	bl	8011de2 <USBD_CtlError>
 8011a14:	e004      	b.n	8011a20 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8011a16:	6878      	ldr	r0, [r7, #4]
 8011a18:	f000 fbbb 	bl	8012192 <USBD_CtlSendStatus>
 8011a1c:	e000      	b.n	8011a20 <USBD_GetDescriptor+0x2cc>
    return;
 8011a1e:	bf00      	nop
  }
}
 8011a20:	3710      	adds	r7, #16
 8011a22:	46bd      	mov	sp, r7
 8011a24:	bd80      	pop	{r7, pc}
 8011a26:	bf00      	nop

08011a28 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011a28:	b580      	push	{r7, lr}
 8011a2a:	b084      	sub	sp, #16
 8011a2c:	af00      	add	r7, sp, #0
 8011a2e:	6078      	str	r0, [r7, #4]
 8011a30:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011a32:	683b      	ldr	r3, [r7, #0]
 8011a34:	889b      	ldrh	r3, [r3, #4]
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d131      	bne.n	8011a9e <USBD_SetAddress+0x76>
 8011a3a:	683b      	ldr	r3, [r7, #0]
 8011a3c:	88db      	ldrh	r3, [r3, #6]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d12d      	bne.n	8011a9e <USBD_SetAddress+0x76>
 8011a42:	683b      	ldr	r3, [r7, #0]
 8011a44:	885b      	ldrh	r3, [r3, #2]
 8011a46:	2b7f      	cmp	r3, #127	@ 0x7f
 8011a48:	d829      	bhi.n	8011a9e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011a4a:	683b      	ldr	r3, [r7, #0]
 8011a4c:	885b      	ldrh	r3, [r3, #2]
 8011a4e:	b2db      	uxtb	r3, r3
 8011a50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011a54:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011a5c:	b2db      	uxtb	r3, r3
 8011a5e:	2b03      	cmp	r3, #3
 8011a60:	d104      	bne.n	8011a6c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8011a62:	6839      	ldr	r1, [r7, #0]
 8011a64:	6878      	ldr	r0, [r7, #4]
 8011a66:	f000 f9bc 	bl	8011de2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011a6a:	e01d      	b.n	8011aa8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	7bfa      	ldrb	r2, [r7, #15]
 8011a70:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011a74:	7bfb      	ldrb	r3, [r7, #15]
 8011a76:	4619      	mov	r1, r3
 8011a78:	6878      	ldr	r0, [r7, #4]
 8011a7a:	f7fe ffcd 	bl	8010a18 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011a7e:	6878      	ldr	r0, [r7, #4]
 8011a80:	f000 fb87 	bl	8012192 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011a84:	7bfb      	ldrb	r3, [r7, #15]
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d004      	beq.n	8011a94 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	2202      	movs	r2, #2
 8011a8e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011a92:	e009      	b.n	8011aa8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	2201      	movs	r2, #1
 8011a98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011a9c:	e004      	b.n	8011aa8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011a9e:	6839      	ldr	r1, [r7, #0]
 8011aa0:	6878      	ldr	r0, [r7, #4]
 8011aa2:	f000 f99e 	bl	8011de2 <USBD_CtlError>
  }
}
 8011aa6:	bf00      	nop
 8011aa8:	bf00      	nop
 8011aaa:	3710      	adds	r7, #16
 8011aac:	46bd      	mov	sp, r7
 8011aae:	bd80      	pop	{r7, pc}

08011ab0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011ab0:	b580      	push	{r7, lr}
 8011ab2:	b084      	sub	sp, #16
 8011ab4:	af00      	add	r7, sp, #0
 8011ab6:	6078      	str	r0, [r7, #4]
 8011ab8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011aba:	2300      	movs	r3, #0
 8011abc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011abe:	683b      	ldr	r3, [r7, #0]
 8011ac0:	885b      	ldrh	r3, [r3, #2]
 8011ac2:	b2da      	uxtb	r2, r3
 8011ac4:	4b4e      	ldr	r3, [pc, #312]	@ (8011c00 <USBD_SetConfig+0x150>)
 8011ac6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011ac8:	4b4d      	ldr	r3, [pc, #308]	@ (8011c00 <USBD_SetConfig+0x150>)
 8011aca:	781b      	ldrb	r3, [r3, #0]
 8011acc:	2b01      	cmp	r3, #1
 8011ace:	d905      	bls.n	8011adc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011ad0:	6839      	ldr	r1, [r7, #0]
 8011ad2:	6878      	ldr	r0, [r7, #4]
 8011ad4:	f000 f985 	bl	8011de2 <USBD_CtlError>
    return USBD_FAIL;
 8011ad8:	2303      	movs	r3, #3
 8011ada:	e08c      	b.n	8011bf6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011ae2:	b2db      	uxtb	r3, r3
 8011ae4:	2b02      	cmp	r3, #2
 8011ae6:	d002      	beq.n	8011aee <USBD_SetConfig+0x3e>
 8011ae8:	2b03      	cmp	r3, #3
 8011aea:	d029      	beq.n	8011b40 <USBD_SetConfig+0x90>
 8011aec:	e075      	b.n	8011bda <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8011aee:	4b44      	ldr	r3, [pc, #272]	@ (8011c00 <USBD_SetConfig+0x150>)
 8011af0:	781b      	ldrb	r3, [r3, #0]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d020      	beq.n	8011b38 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8011af6:	4b42      	ldr	r3, [pc, #264]	@ (8011c00 <USBD_SetConfig+0x150>)
 8011af8:	781b      	ldrb	r3, [r3, #0]
 8011afa:	461a      	mov	r2, r3
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011b00:	4b3f      	ldr	r3, [pc, #252]	@ (8011c00 <USBD_SetConfig+0x150>)
 8011b02:	781b      	ldrb	r3, [r3, #0]
 8011b04:	4619      	mov	r1, r3
 8011b06:	6878      	ldr	r0, [r7, #4]
 8011b08:	f7ff f8a9 	bl	8010c5e <USBD_SetClassConfig>
 8011b0c:	4603      	mov	r3, r0
 8011b0e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8011b10:	7bfb      	ldrb	r3, [r7, #15]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d008      	beq.n	8011b28 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8011b16:	6839      	ldr	r1, [r7, #0]
 8011b18:	6878      	ldr	r0, [r7, #4]
 8011b1a:	f000 f962 	bl	8011de2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	2202      	movs	r2, #2
 8011b22:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011b26:	e065      	b.n	8011bf4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8011b28:	6878      	ldr	r0, [r7, #4]
 8011b2a:	f000 fb32 	bl	8012192 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	2203      	movs	r2, #3
 8011b32:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8011b36:	e05d      	b.n	8011bf4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8011b38:	6878      	ldr	r0, [r7, #4]
 8011b3a:	f000 fb2a 	bl	8012192 <USBD_CtlSendStatus>
      break;
 8011b3e:	e059      	b.n	8011bf4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8011b40:	4b2f      	ldr	r3, [pc, #188]	@ (8011c00 <USBD_SetConfig+0x150>)
 8011b42:	781b      	ldrb	r3, [r3, #0]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d112      	bne.n	8011b6e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	2202      	movs	r2, #2
 8011b4c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8011b50:	4b2b      	ldr	r3, [pc, #172]	@ (8011c00 <USBD_SetConfig+0x150>)
 8011b52:	781b      	ldrb	r3, [r3, #0]
 8011b54:	461a      	mov	r2, r3
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011b5a:	4b29      	ldr	r3, [pc, #164]	@ (8011c00 <USBD_SetConfig+0x150>)
 8011b5c:	781b      	ldrb	r3, [r3, #0]
 8011b5e:	4619      	mov	r1, r3
 8011b60:	6878      	ldr	r0, [r7, #4]
 8011b62:	f7ff f898 	bl	8010c96 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8011b66:	6878      	ldr	r0, [r7, #4]
 8011b68:	f000 fb13 	bl	8012192 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011b6c:	e042      	b.n	8011bf4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8011b6e:	4b24      	ldr	r3, [pc, #144]	@ (8011c00 <USBD_SetConfig+0x150>)
 8011b70:	781b      	ldrb	r3, [r3, #0]
 8011b72:	461a      	mov	r2, r3
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	685b      	ldr	r3, [r3, #4]
 8011b78:	429a      	cmp	r2, r3
 8011b7a:	d02a      	beq.n	8011bd2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	685b      	ldr	r3, [r3, #4]
 8011b80:	b2db      	uxtb	r3, r3
 8011b82:	4619      	mov	r1, r3
 8011b84:	6878      	ldr	r0, [r7, #4]
 8011b86:	f7ff f886 	bl	8010c96 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8011b8a:	4b1d      	ldr	r3, [pc, #116]	@ (8011c00 <USBD_SetConfig+0x150>)
 8011b8c:	781b      	ldrb	r3, [r3, #0]
 8011b8e:	461a      	mov	r2, r3
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011b94:	4b1a      	ldr	r3, [pc, #104]	@ (8011c00 <USBD_SetConfig+0x150>)
 8011b96:	781b      	ldrb	r3, [r3, #0]
 8011b98:	4619      	mov	r1, r3
 8011b9a:	6878      	ldr	r0, [r7, #4]
 8011b9c:	f7ff f85f 	bl	8010c5e <USBD_SetClassConfig>
 8011ba0:	4603      	mov	r3, r0
 8011ba2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8011ba4:	7bfb      	ldrb	r3, [r7, #15]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d00f      	beq.n	8011bca <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8011baa:	6839      	ldr	r1, [r7, #0]
 8011bac:	6878      	ldr	r0, [r7, #4]
 8011bae:	f000 f918 	bl	8011de2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	685b      	ldr	r3, [r3, #4]
 8011bb6:	b2db      	uxtb	r3, r3
 8011bb8:	4619      	mov	r1, r3
 8011bba:	6878      	ldr	r0, [r7, #4]
 8011bbc:	f7ff f86b 	bl	8010c96 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	2202      	movs	r2, #2
 8011bc4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8011bc8:	e014      	b.n	8011bf4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8011bca:	6878      	ldr	r0, [r7, #4]
 8011bcc:	f000 fae1 	bl	8012192 <USBD_CtlSendStatus>
      break;
 8011bd0:	e010      	b.n	8011bf4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8011bd2:	6878      	ldr	r0, [r7, #4]
 8011bd4:	f000 fadd 	bl	8012192 <USBD_CtlSendStatus>
      break;
 8011bd8:	e00c      	b.n	8011bf4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8011bda:	6839      	ldr	r1, [r7, #0]
 8011bdc:	6878      	ldr	r0, [r7, #4]
 8011bde:	f000 f900 	bl	8011de2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011be2:	4b07      	ldr	r3, [pc, #28]	@ (8011c00 <USBD_SetConfig+0x150>)
 8011be4:	781b      	ldrb	r3, [r3, #0]
 8011be6:	4619      	mov	r1, r3
 8011be8:	6878      	ldr	r0, [r7, #4]
 8011bea:	f7ff f854 	bl	8010c96 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8011bee:	2303      	movs	r3, #3
 8011bf0:	73fb      	strb	r3, [r7, #15]
      break;
 8011bf2:	bf00      	nop
  }

  return ret;
 8011bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	3710      	adds	r7, #16
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	bd80      	pop	{r7, pc}
 8011bfe:	bf00      	nop
 8011c00:	200110d0 	.word	0x200110d0

08011c04 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011c04:	b580      	push	{r7, lr}
 8011c06:	b082      	sub	sp, #8
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	6078      	str	r0, [r7, #4]
 8011c0c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8011c0e:	683b      	ldr	r3, [r7, #0]
 8011c10:	88db      	ldrh	r3, [r3, #6]
 8011c12:	2b01      	cmp	r3, #1
 8011c14:	d004      	beq.n	8011c20 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011c16:	6839      	ldr	r1, [r7, #0]
 8011c18:	6878      	ldr	r0, [r7, #4]
 8011c1a:	f000 f8e2 	bl	8011de2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8011c1e:	e023      	b.n	8011c68 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011c26:	b2db      	uxtb	r3, r3
 8011c28:	2b02      	cmp	r3, #2
 8011c2a:	dc02      	bgt.n	8011c32 <USBD_GetConfig+0x2e>
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	dc03      	bgt.n	8011c38 <USBD_GetConfig+0x34>
 8011c30:	e015      	b.n	8011c5e <USBD_GetConfig+0x5a>
 8011c32:	2b03      	cmp	r3, #3
 8011c34:	d00b      	beq.n	8011c4e <USBD_GetConfig+0x4a>
 8011c36:	e012      	b.n	8011c5e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	2200      	movs	r2, #0
 8011c3c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	3308      	adds	r3, #8
 8011c42:	2201      	movs	r2, #1
 8011c44:	4619      	mov	r1, r3
 8011c46:	6878      	ldr	r0, [r7, #4]
 8011c48:	f000 fa49 	bl	80120de <USBD_CtlSendData>
        break;
 8011c4c:	e00c      	b.n	8011c68 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	3304      	adds	r3, #4
 8011c52:	2201      	movs	r2, #1
 8011c54:	4619      	mov	r1, r3
 8011c56:	6878      	ldr	r0, [r7, #4]
 8011c58:	f000 fa41 	bl	80120de <USBD_CtlSendData>
        break;
 8011c5c:	e004      	b.n	8011c68 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8011c5e:	6839      	ldr	r1, [r7, #0]
 8011c60:	6878      	ldr	r0, [r7, #4]
 8011c62:	f000 f8be 	bl	8011de2 <USBD_CtlError>
        break;
 8011c66:	bf00      	nop
}
 8011c68:	bf00      	nop
 8011c6a:	3708      	adds	r7, #8
 8011c6c:	46bd      	mov	sp, r7
 8011c6e:	bd80      	pop	{r7, pc}

08011c70 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011c70:	b580      	push	{r7, lr}
 8011c72:	b082      	sub	sp, #8
 8011c74:	af00      	add	r7, sp, #0
 8011c76:	6078      	str	r0, [r7, #4]
 8011c78:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011c80:	b2db      	uxtb	r3, r3
 8011c82:	3b01      	subs	r3, #1
 8011c84:	2b02      	cmp	r3, #2
 8011c86:	d81e      	bhi.n	8011cc6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011c88:	683b      	ldr	r3, [r7, #0]
 8011c8a:	88db      	ldrh	r3, [r3, #6]
 8011c8c:	2b02      	cmp	r3, #2
 8011c8e:	d004      	beq.n	8011c9a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8011c90:	6839      	ldr	r1, [r7, #0]
 8011c92:	6878      	ldr	r0, [r7, #4]
 8011c94:	f000 f8a5 	bl	8011de2 <USBD_CtlError>
        break;
 8011c98:	e01a      	b.n	8011cd0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	2201      	movs	r2, #1
 8011c9e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d005      	beq.n	8011cb6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	68db      	ldr	r3, [r3, #12]
 8011cae:	f043 0202 	orr.w	r2, r3, #2
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	330c      	adds	r3, #12
 8011cba:	2202      	movs	r2, #2
 8011cbc:	4619      	mov	r1, r3
 8011cbe:	6878      	ldr	r0, [r7, #4]
 8011cc0:	f000 fa0d 	bl	80120de <USBD_CtlSendData>
      break;
 8011cc4:	e004      	b.n	8011cd0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8011cc6:	6839      	ldr	r1, [r7, #0]
 8011cc8:	6878      	ldr	r0, [r7, #4]
 8011cca:	f000 f88a 	bl	8011de2 <USBD_CtlError>
      break;
 8011cce:	bf00      	nop
  }
}
 8011cd0:	bf00      	nop
 8011cd2:	3708      	adds	r7, #8
 8011cd4:	46bd      	mov	sp, r7
 8011cd6:	bd80      	pop	{r7, pc}

08011cd8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011cd8:	b580      	push	{r7, lr}
 8011cda:	b082      	sub	sp, #8
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
 8011ce0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011ce2:	683b      	ldr	r3, [r7, #0]
 8011ce4:	885b      	ldrh	r3, [r3, #2]
 8011ce6:	2b01      	cmp	r3, #1
 8011ce8:	d107      	bne.n	8011cfa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	2201      	movs	r2, #1
 8011cee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8011cf2:	6878      	ldr	r0, [r7, #4]
 8011cf4:	f000 fa4d 	bl	8012192 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8011cf8:	e013      	b.n	8011d22 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8011cfa:	683b      	ldr	r3, [r7, #0]
 8011cfc:	885b      	ldrh	r3, [r3, #2]
 8011cfe:	2b02      	cmp	r3, #2
 8011d00:	d10b      	bne.n	8011d1a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8011d02:	683b      	ldr	r3, [r7, #0]
 8011d04:	889b      	ldrh	r3, [r3, #4]
 8011d06:	0a1b      	lsrs	r3, r3, #8
 8011d08:	b29b      	uxth	r3, r3
 8011d0a:	b2da      	uxtb	r2, r3
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8011d12:	6878      	ldr	r0, [r7, #4]
 8011d14:	f000 fa3d 	bl	8012192 <USBD_CtlSendStatus>
}
 8011d18:	e003      	b.n	8011d22 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8011d1a:	6839      	ldr	r1, [r7, #0]
 8011d1c:	6878      	ldr	r0, [r7, #4]
 8011d1e:	f000 f860 	bl	8011de2 <USBD_CtlError>
}
 8011d22:	bf00      	nop
 8011d24:	3708      	adds	r7, #8
 8011d26:	46bd      	mov	sp, r7
 8011d28:	bd80      	pop	{r7, pc}

08011d2a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011d2a:	b580      	push	{r7, lr}
 8011d2c:	b082      	sub	sp, #8
 8011d2e:	af00      	add	r7, sp, #0
 8011d30:	6078      	str	r0, [r7, #4]
 8011d32:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011d3a:	b2db      	uxtb	r3, r3
 8011d3c:	3b01      	subs	r3, #1
 8011d3e:	2b02      	cmp	r3, #2
 8011d40:	d80b      	bhi.n	8011d5a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011d42:	683b      	ldr	r3, [r7, #0]
 8011d44:	885b      	ldrh	r3, [r3, #2]
 8011d46:	2b01      	cmp	r3, #1
 8011d48:	d10c      	bne.n	8011d64 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	2200      	movs	r2, #0
 8011d4e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8011d52:	6878      	ldr	r0, [r7, #4]
 8011d54:	f000 fa1d 	bl	8012192 <USBD_CtlSendStatus>
      }
      break;
 8011d58:	e004      	b.n	8011d64 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8011d5a:	6839      	ldr	r1, [r7, #0]
 8011d5c:	6878      	ldr	r0, [r7, #4]
 8011d5e:	f000 f840 	bl	8011de2 <USBD_CtlError>
      break;
 8011d62:	e000      	b.n	8011d66 <USBD_ClrFeature+0x3c>
      break;
 8011d64:	bf00      	nop
  }
}
 8011d66:	bf00      	nop
 8011d68:	3708      	adds	r7, #8
 8011d6a:	46bd      	mov	sp, r7
 8011d6c:	bd80      	pop	{r7, pc}

08011d6e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011d6e:	b580      	push	{r7, lr}
 8011d70:	b084      	sub	sp, #16
 8011d72:	af00      	add	r7, sp, #0
 8011d74:	6078      	str	r0, [r7, #4]
 8011d76:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8011d78:	683b      	ldr	r3, [r7, #0]
 8011d7a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	781a      	ldrb	r2, [r3, #0]
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	3301      	adds	r3, #1
 8011d88:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	781a      	ldrb	r2, [r3, #0]
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	3301      	adds	r3, #1
 8011d96:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8011d98:	68f8      	ldr	r0, [r7, #12]
 8011d9a:	f7ff fa40 	bl	801121e <SWAPBYTE>
 8011d9e:	4603      	mov	r3, r0
 8011da0:	461a      	mov	r2, r3
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	3301      	adds	r3, #1
 8011daa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	3301      	adds	r3, #1
 8011db0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8011db2:	68f8      	ldr	r0, [r7, #12]
 8011db4:	f7ff fa33 	bl	801121e <SWAPBYTE>
 8011db8:	4603      	mov	r3, r0
 8011dba:	461a      	mov	r2, r3
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	3301      	adds	r3, #1
 8011dc4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	3301      	adds	r3, #1
 8011dca:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011dcc:	68f8      	ldr	r0, [r7, #12]
 8011dce:	f7ff fa26 	bl	801121e <SWAPBYTE>
 8011dd2:	4603      	mov	r3, r0
 8011dd4:	461a      	mov	r2, r3
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	80da      	strh	r2, [r3, #6]
}
 8011dda:	bf00      	nop
 8011ddc:	3710      	adds	r7, #16
 8011dde:	46bd      	mov	sp, r7
 8011de0:	bd80      	pop	{r7, pc}

08011de2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011de2:	b580      	push	{r7, lr}
 8011de4:	b082      	sub	sp, #8
 8011de6:	af00      	add	r7, sp, #0
 8011de8:	6078      	str	r0, [r7, #4]
 8011dea:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011dec:	2180      	movs	r1, #128	@ 0x80
 8011dee:	6878      	ldr	r0, [r7, #4]
 8011df0:	f7fe fdb4 	bl	801095c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011df4:	2100      	movs	r1, #0
 8011df6:	6878      	ldr	r0, [r7, #4]
 8011df8:	f7fe fdb0 	bl	801095c <USBD_LL_StallEP>
}
 8011dfc:	bf00      	nop
 8011dfe:	3708      	adds	r7, #8
 8011e00:	46bd      	mov	sp, r7
 8011e02:	bd80      	pop	{r7, pc}

08011e04 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011e04:	b580      	push	{r7, lr}
 8011e06:	b086      	sub	sp, #24
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	60f8      	str	r0, [r7, #12]
 8011e0c:	60b9      	str	r1, [r7, #8]
 8011e0e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011e10:	2300      	movs	r3, #0
 8011e12:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d036      	beq.n	8011e88 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8011e1e:	6938      	ldr	r0, [r7, #16]
 8011e20:	f000 f836 	bl	8011e90 <USBD_GetLen>
 8011e24:	4603      	mov	r3, r0
 8011e26:	3301      	adds	r3, #1
 8011e28:	b29b      	uxth	r3, r3
 8011e2a:	005b      	lsls	r3, r3, #1
 8011e2c:	b29a      	uxth	r2, r3
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8011e32:	7dfb      	ldrb	r3, [r7, #23]
 8011e34:	68ba      	ldr	r2, [r7, #8]
 8011e36:	4413      	add	r3, r2
 8011e38:	687a      	ldr	r2, [r7, #4]
 8011e3a:	7812      	ldrb	r2, [r2, #0]
 8011e3c:	701a      	strb	r2, [r3, #0]
  idx++;
 8011e3e:	7dfb      	ldrb	r3, [r7, #23]
 8011e40:	3301      	adds	r3, #1
 8011e42:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011e44:	7dfb      	ldrb	r3, [r7, #23]
 8011e46:	68ba      	ldr	r2, [r7, #8]
 8011e48:	4413      	add	r3, r2
 8011e4a:	2203      	movs	r2, #3
 8011e4c:	701a      	strb	r2, [r3, #0]
  idx++;
 8011e4e:	7dfb      	ldrb	r3, [r7, #23]
 8011e50:	3301      	adds	r3, #1
 8011e52:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8011e54:	e013      	b.n	8011e7e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8011e56:	7dfb      	ldrb	r3, [r7, #23]
 8011e58:	68ba      	ldr	r2, [r7, #8]
 8011e5a:	4413      	add	r3, r2
 8011e5c:	693a      	ldr	r2, [r7, #16]
 8011e5e:	7812      	ldrb	r2, [r2, #0]
 8011e60:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8011e62:	693b      	ldr	r3, [r7, #16]
 8011e64:	3301      	adds	r3, #1
 8011e66:	613b      	str	r3, [r7, #16]
    idx++;
 8011e68:	7dfb      	ldrb	r3, [r7, #23]
 8011e6a:	3301      	adds	r3, #1
 8011e6c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8011e6e:	7dfb      	ldrb	r3, [r7, #23]
 8011e70:	68ba      	ldr	r2, [r7, #8]
 8011e72:	4413      	add	r3, r2
 8011e74:	2200      	movs	r2, #0
 8011e76:	701a      	strb	r2, [r3, #0]
    idx++;
 8011e78:	7dfb      	ldrb	r3, [r7, #23]
 8011e7a:	3301      	adds	r3, #1
 8011e7c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8011e7e:	693b      	ldr	r3, [r7, #16]
 8011e80:	781b      	ldrb	r3, [r3, #0]
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d1e7      	bne.n	8011e56 <USBD_GetString+0x52>
 8011e86:	e000      	b.n	8011e8a <USBD_GetString+0x86>
    return;
 8011e88:	bf00      	nop
  }
}
 8011e8a:	3718      	adds	r7, #24
 8011e8c:	46bd      	mov	sp, r7
 8011e8e:	bd80      	pop	{r7, pc}

08011e90 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011e90:	b480      	push	{r7}
 8011e92:	b085      	sub	sp, #20
 8011e94:	af00      	add	r7, sp, #0
 8011e96:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011e98:	2300      	movs	r3, #0
 8011e9a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011ea0:	e005      	b.n	8011eae <USBD_GetLen+0x1e>
  {
    len++;
 8011ea2:	7bfb      	ldrb	r3, [r7, #15]
 8011ea4:	3301      	adds	r3, #1
 8011ea6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011ea8:	68bb      	ldr	r3, [r7, #8]
 8011eaa:	3301      	adds	r3, #1
 8011eac:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011eae:	68bb      	ldr	r3, [r7, #8]
 8011eb0:	781b      	ldrb	r3, [r3, #0]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d1f5      	bne.n	8011ea2 <USBD_GetLen+0x12>
  }

  return len;
 8011eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8011eb8:	4618      	mov	r0, r3
 8011eba:	3714      	adds	r7, #20
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec2:	4770      	bx	lr

08011ec4 <USBD_Class_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011ec4:	b480      	push	{r7}
 8011ec6:	b083      	sub	sp, #12
 8011ec8:	af00      	add	r7, sp, #0
 8011eca:	4603      	mov	r3, r0
 8011ecc:	6039      	str	r1, [r7, #0]
 8011ece:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_DeviceDesc);
 8011ed0:	683b      	ldr	r3, [r7, #0]
 8011ed2:	2212      	movs	r2, #18
 8011ed4:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_DeviceDesc;
 8011ed6:	4b03      	ldr	r3, [pc, #12]	@ (8011ee4 <USBD_Class_DeviceDescriptor+0x20>)
}
 8011ed8:	4618      	mov	r0, r3
 8011eda:	370c      	adds	r7, #12
 8011edc:	46bd      	mov	sp, r7
 8011ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee2:	4770      	bx	lr
 8011ee4:	200000f0 	.word	0x200000f0

08011ee8 <USBD_Class_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011ee8:	b480      	push	{r7}
 8011eea:	b083      	sub	sp, #12
 8011eec:	af00      	add	r7, sp, #0
 8011eee:	4603      	mov	r3, r0
 8011ef0:	6039      	str	r1, [r7, #0]
 8011ef2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_LangIDDesc);
 8011ef4:	683b      	ldr	r3, [r7, #0]
 8011ef6:	2204      	movs	r2, #4
 8011ef8:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_LangIDDesc;
 8011efa:	4b03      	ldr	r3, [pc, #12]	@ (8011f08 <USBD_Class_LangIDStrDescriptor+0x20>)
}
 8011efc:	4618      	mov	r0, r3
 8011efe:	370c      	adds	r7, #12
 8011f00:	46bd      	mov	sp, r7
 8011f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f06:	4770      	bx	lr
 8011f08:	20000104 	.word	0x20000104

08011f0c <USBD_Class_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011f0c:	b580      	push	{r7, lr}
 8011f0e:	b082      	sub	sp, #8
 8011f10:	af00      	add	r7, sp, #0
 8011f12:	4603      	mov	r3, r0
 8011f14:	6039      	str	r1, [r7, #0]
 8011f16:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 8011f18:	79fb      	ldrb	r3, [r7, #7]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d105      	bne.n	8011f2a <USBD_Class_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 8011f1e:	683a      	ldr	r2, [r7, #0]
 8011f20:	4907      	ldr	r1, [pc, #28]	@ (8011f40 <USBD_Class_ProductStrDescriptor+0x34>)
 8011f22:	4808      	ldr	r0, [pc, #32]	@ (8011f44 <USBD_Class_ProductStrDescriptor+0x38>)
 8011f24:	f7ff ff6e 	bl	8011e04 <USBD_GetString>
 8011f28:	e004      	b.n	8011f34 <USBD_Class_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 8011f2a:	683a      	ldr	r2, [r7, #0]
 8011f2c:	4904      	ldr	r1, [pc, #16]	@ (8011f40 <USBD_Class_ProductStrDescriptor+0x34>)
 8011f2e:	4805      	ldr	r0, [pc, #20]	@ (8011f44 <USBD_Class_ProductStrDescriptor+0x38>)
 8011f30:	f7ff ff68 	bl	8011e04 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011f34:	4b02      	ldr	r3, [pc, #8]	@ (8011f40 <USBD_Class_ProductStrDescriptor+0x34>)
}
 8011f36:	4618      	mov	r0, r3
 8011f38:	3708      	adds	r7, #8
 8011f3a:	46bd      	mov	sp, r7
 8011f3c:	bd80      	pop	{r7, pc}
 8011f3e:	bf00      	nop
 8011f40:	200110d4 	.word	0x200110d4
 8011f44:	080135f8 	.word	0x080135f8

08011f48 <USBD_Class_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011f48:	b580      	push	{r7, lr}
 8011f4a:	b082      	sub	sp, #8
 8011f4c:	af00      	add	r7, sp, #0
 8011f4e:	4603      	mov	r3, r0
 8011f50:	6039      	str	r1, [r7, #0]
 8011f52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011f54:	683a      	ldr	r2, [r7, #0]
 8011f56:	4904      	ldr	r1, [pc, #16]	@ (8011f68 <USBD_Class_ManufacturerStrDescriptor+0x20>)
 8011f58:	4804      	ldr	r0, [pc, #16]	@ (8011f6c <USBD_Class_ManufacturerStrDescriptor+0x24>)
 8011f5a:	f7ff ff53 	bl	8011e04 <USBD_GetString>
  return USBD_StrDesc;
 8011f5e:	4b02      	ldr	r3, [pc, #8]	@ (8011f68 <USBD_Class_ManufacturerStrDescriptor+0x20>)
}
 8011f60:	4618      	mov	r0, r3
 8011f62:	3708      	adds	r7, #8
 8011f64:	46bd      	mov	sp, r7
 8011f66:	bd80      	pop	{r7, pc}
 8011f68:	200110d4 	.word	0x200110d4
 8011f6c:	08013610 	.word	0x08013610

08011f70 <USBD_Class_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011f70:	b580      	push	{r7, lr}
 8011f72:	b082      	sub	sp, #8
 8011f74:	af00      	add	r7, sp, #0
 8011f76:	4603      	mov	r3, r0
 8011f78:	6039      	str	r1, [r7, #0]
 8011f7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = USB_SIZ_STRING_SERIAL;
 8011f7c:	683b      	ldr	r3, [r7, #0]
 8011f7e:	221a      	movs	r2, #26
 8011f80:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 8011f82:	f000 f843 	bl	801200c <Get_SerialNum>

  return (uint8_t *)USBD_StringSerial;
 8011f86:	4b02      	ldr	r3, [pc, #8]	@ (8011f90 <USBD_Class_SerialStrDescriptor+0x20>)
}
 8011f88:	4618      	mov	r0, r3
 8011f8a:	3708      	adds	r7, #8
 8011f8c:	46bd      	mov	sp, r7
 8011f8e:	bd80      	pop	{r7, pc}
 8011f90:	20000108 	.word	0x20000108

08011f94 <USBD_Class_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011f94:	b580      	push	{r7, lr}
 8011f96:	b082      	sub	sp, #8
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	4603      	mov	r3, r0
 8011f9c:	6039      	str	r1, [r7, #0]
 8011f9e:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 8011fa0:	79fb      	ldrb	r3, [r7, #7]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d105      	bne.n	8011fb2 <USBD_Class_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 8011fa6:	683a      	ldr	r2, [r7, #0]
 8011fa8:	4907      	ldr	r1, [pc, #28]	@ (8011fc8 <USBD_Class_ConfigStrDescriptor+0x34>)
 8011faa:	4808      	ldr	r0, [pc, #32]	@ (8011fcc <USBD_Class_ConfigStrDescriptor+0x38>)
 8011fac:	f7ff ff2a 	bl	8011e04 <USBD_GetString>
 8011fb0:	e004      	b.n	8011fbc <USBD_Class_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 8011fb2:	683a      	ldr	r2, [r7, #0]
 8011fb4:	4904      	ldr	r1, [pc, #16]	@ (8011fc8 <USBD_Class_ConfigStrDescriptor+0x34>)
 8011fb6:	4805      	ldr	r0, [pc, #20]	@ (8011fcc <USBD_Class_ConfigStrDescriptor+0x38>)
 8011fb8:	f7ff ff24 	bl	8011e04 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011fbc:	4b02      	ldr	r3, [pc, #8]	@ (8011fc8 <USBD_Class_ConfigStrDescriptor+0x34>)
}
 8011fbe:	4618      	mov	r0, r3
 8011fc0:	3708      	adds	r7, #8
 8011fc2:	46bd      	mov	sp, r7
 8011fc4:	bd80      	pop	{r7, pc}
 8011fc6:	bf00      	nop
 8011fc8:	200110d4 	.word	0x200110d4
 8011fcc:	08013624 	.word	0x08013624

08011fd0 <USBD_Class_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011fd0:	b580      	push	{r7, lr}
 8011fd2:	b082      	sub	sp, #8
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	4603      	mov	r3, r0
 8011fd8:	6039      	str	r1, [r7, #0]
 8011fda:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 8011fdc:	79fb      	ldrb	r3, [r7, #7]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d105      	bne.n	8011fee <USBD_Class_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 8011fe2:	683a      	ldr	r2, [r7, #0]
 8011fe4:	4907      	ldr	r1, [pc, #28]	@ (8012004 <USBD_Class_InterfaceStrDescriptor+0x34>)
 8011fe6:	4808      	ldr	r0, [pc, #32]	@ (8012008 <USBD_Class_InterfaceStrDescriptor+0x38>)
 8011fe8:	f7ff ff0c 	bl	8011e04 <USBD_GetString>
 8011fec:	e004      	b.n	8011ff8 <USBD_Class_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 8011fee:	683a      	ldr	r2, [r7, #0]
 8011ff0:	4904      	ldr	r1, [pc, #16]	@ (8012004 <USBD_Class_InterfaceStrDescriptor+0x34>)
 8011ff2:	4805      	ldr	r0, [pc, #20]	@ (8012008 <USBD_Class_InterfaceStrDescriptor+0x38>)
 8011ff4:	f7ff ff06 	bl	8011e04 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011ff8:	4b02      	ldr	r3, [pc, #8]	@ (8012004 <USBD_Class_InterfaceStrDescriptor+0x34>)
}
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	3708      	adds	r7, #8
 8011ffe:	46bd      	mov	sp, r7
 8012000:	bd80      	pop	{r7, pc}
 8012002:	bf00      	nop
 8012004:	200110d4 	.word	0x200110d4
 8012008:	08013630 	.word	0x08013630

0801200c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801200c:	b580      	push	{r7, lr}
 801200e:	b084      	sub	sp, #16
 8012010:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *)DEVICE_ID1;
 8012012:	4b0f      	ldr	r3, [pc, #60]	@ (8012050 <Get_SerialNum+0x44>)
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *)DEVICE_ID2;
 8012018:	4b0e      	ldr	r3, [pc, #56]	@ (8012054 <Get_SerialNum+0x48>)
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *)DEVICE_ID3;
 801201e:	4b0e      	ldr	r3, [pc, #56]	@ (8012058 <Get_SerialNum+0x4c>)
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012024:	68fa      	ldr	r2, [r7, #12]
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	4413      	add	r3, r2
 801202a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0U)
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d009      	beq.n	8012046 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8U);
 8012032:	2208      	movs	r2, #8
 8012034:	4909      	ldr	r1, [pc, #36]	@ (801205c <Get_SerialNum+0x50>)
 8012036:	68f8      	ldr	r0, [r7, #12]
 8012038:	f000 f814 	bl	8012064 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4U);
 801203c:	2204      	movs	r2, #4
 801203e:	4908      	ldr	r1, [pc, #32]	@ (8012060 <Get_SerialNum+0x54>)
 8012040:	68b8      	ldr	r0, [r7, #8]
 8012042:	f000 f80f 	bl	8012064 <IntToUnicode>
  }
}
 8012046:	bf00      	nop
 8012048:	3710      	adds	r7, #16
 801204a:	46bd      	mov	sp, r7
 801204c:	bd80      	pop	{r7, pc}
 801204e:	bf00      	nop
 8012050:	08fff800 	.word	0x08fff800
 8012054:	08fff804 	.word	0x08fff804
 8012058:	08fff808 	.word	0x08fff808
 801205c:	2000010a 	.word	0x2000010a
 8012060:	2000011a 	.word	0x2000011a

08012064 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len)
{
 8012064:	b480      	push	{r7}
 8012066:	b087      	sub	sp, #28
 8012068:	af00      	add	r7, sp, #0
 801206a:	60f8      	str	r0, [r7, #12]
 801206c:	60b9      	str	r1, [r7, #8]
 801206e:	4613      	mov	r3, r2
 8012070:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0U;
 8012072:	2300      	movs	r3, #0
 8012074:	75fb      	strb	r3, [r7, #23]

  for (idx = 0U ; idx < len ; idx ++)
 8012076:	2300      	movs	r3, #0
 8012078:	75fb      	strb	r3, [r7, #23]
 801207a:	e025      	b.n	80120c8 <IntToUnicode+0x64>
  {
    if (((value >> 28)) < 0xAU)
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	0f1b      	lsrs	r3, r3, #28
 8012080:	2b09      	cmp	r3, #9
 8012082:	d80a      	bhi.n	801209a <IntToUnicode+0x36>
    {
      pbuf[ 2U * idx] = (value >> 28) + '0';
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	0f1b      	lsrs	r3, r3, #28
 8012088:	b2da      	uxtb	r2, r3
 801208a:	7dfb      	ldrb	r3, [r7, #23]
 801208c:	005b      	lsls	r3, r3, #1
 801208e:	68b9      	ldr	r1, [r7, #8]
 8012090:	440b      	add	r3, r1
 8012092:	3230      	adds	r2, #48	@ 0x30
 8012094:	b2d2      	uxtb	r2, r2
 8012096:	701a      	strb	r2, [r3, #0]
 8012098:	e009      	b.n	80120ae <IntToUnicode+0x4a>
    }
    else
    {
      pbuf[2U * idx] = (value >> 28) + 'A' - 10U;
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	0f1b      	lsrs	r3, r3, #28
 801209e:	b2da      	uxtb	r2, r3
 80120a0:	7dfb      	ldrb	r3, [r7, #23]
 80120a2:	005b      	lsls	r3, r3, #1
 80120a4:	68b9      	ldr	r1, [r7, #8]
 80120a6:	440b      	add	r3, r1
 80120a8:	3237      	adds	r2, #55	@ 0x37
 80120aa:	b2d2      	uxtb	r2, r2
 80120ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	011b      	lsls	r3, r3, #4
 80120b2:	60fb      	str	r3, [r7, #12]

    pbuf[2U * idx + 1] = 0U;
 80120b4:	7dfb      	ldrb	r3, [r7, #23]
 80120b6:	005b      	lsls	r3, r3, #1
 80120b8:	3301      	adds	r3, #1
 80120ba:	68ba      	ldr	r2, [r7, #8]
 80120bc:	4413      	add	r3, r2
 80120be:	2200      	movs	r2, #0
 80120c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0U ; idx < len ; idx ++)
 80120c2:	7dfb      	ldrb	r3, [r7, #23]
 80120c4:	3301      	adds	r3, #1
 80120c6:	75fb      	strb	r3, [r7, #23]
 80120c8:	7dfa      	ldrb	r2, [r7, #23]
 80120ca:	79fb      	ldrb	r3, [r7, #7]
 80120cc:	429a      	cmp	r2, r3
 80120ce:	d3d5      	bcc.n	801207c <IntToUnicode+0x18>
  }
}
 80120d0:	bf00      	nop
 80120d2:	bf00      	nop
 80120d4:	371c      	adds	r7, #28
 80120d6:	46bd      	mov	sp, r7
 80120d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120dc:	4770      	bx	lr

080120de <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80120de:	b580      	push	{r7, lr}
 80120e0:	b084      	sub	sp, #16
 80120e2:	af00      	add	r7, sp, #0
 80120e4:	60f8      	str	r0, [r7, #12]
 80120e6:	60b9      	str	r1, [r7, #8]
 80120e8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	2202      	movs	r2, #2
 80120ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	687a      	ldr	r2, [r7, #4]
 80120f6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	687a      	ldr	r2, [r7, #4]
 80120fc:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	68ba      	ldr	r2, [r7, #8]
 8012102:	2100      	movs	r1, #0
 8012104:	68f8      	ldr	r0, [r7, #12]
 8012106:	f7fe fca0 	bl	8010a4a <USBD_LL_Transmit>

  return USBD_OK;
 801210a:	2300      	movs	r3, #0
}
 801210c:	4618      	mov	r0, r3
 801210e:	3710      	adds	r7, #16
 8012110:	46bd      	mov	sp, r7
 8012112:	bd80      	pop	{r7, pc}

08012114 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012114:	b580      	push	{r7, lr}
 8012116:	b084      	sub	sp, #16
 8012118:	af00      	add	r7, sp, #0
 801211a:	60f8      	str	r0, [r7, #12]
 801211c:	60b9      	str	r1, [r7, #8]
 801211e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	68ba      	ldr	r2, [r7, #8]
 8012124:	2100      	movs	r1, #0
 8012126:	68f8      	ldr	r0, [r7, #12]
 8012128:	f7fe fc8f 	bl	8010a4a <USBD_LL_Transmit>

  return USBD_OK;
 801212c:	2300      	movs	r3, #0
}
 801212e:	4618      	mov	r0, r3
 8012130:	3710      	adds	r7, #16
 8012132:	46bd      	mov	sp, r7
 8012134:	bd80      	pop	{r7, pc}

08012136 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012136:	b580      	push	{r7, lr}
 8012138:	b084      	sub	sp, #16
 801213a:	af00      	add	r7, sp, #0
 801213c:	60f8      	str	r0, [r7, #12]
 801213e:	60b9      	str	r1, [r7, #8]
 8012140:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	2203      	movs	r2, #3
 8012146:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	687a      	ldr	r2, [r7, #4]
 801214e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	687a      	ldr	r2, [r7, #4]
 8012156:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	68ba      	ldr	r2, [r7, #8]
 801215e:	2100      	movs	r1, #0
 8012160:	68f8      	ldr	r0, [r7, #12]
 8012162:	f7fe fc8d 	bl	8010a80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012166:	2300      	movs	r3, #0
}
 8012168:	4618      	mov	r0, r3
 801216a:	3710      	adds	r7, #16
 801216c:	46bd      	mov	sp, r7
 801216e:	bd80      	pop	{r7, pc}

08012170 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012170:	b580      	push	{r7, lr}
 8012172:	b084      	sub	sp, #16
 8012174:	af00      	add	r7, sp, #0
 8012176:	60f8      	str	r0, [r7, #12]
 8012178:	60b9      	str	r1, [r7, #8]
 801217a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	68ba      	ldr	r2, [r7, #8]
 8012180:	2100      	movs	r1, #0
 8012182:	68f8      	ldr	r0, [r7, #12]
 8012184:	f7fe fc7c 	bl	8010a80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012188:	2300      	movs	r3, #0
}
 801218a:	4618      	mov	r0, r3
 801218c:	3710      	adds	r7, #16
 801218e:	46bd      	mov	sp, r7
 8012190:	bd80      	pop	{r7, pc}

08012192 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012192:	b580      	push	{r7, lr}
 8012194:	b082      	sub	sp, #8
 8012196:	af00      	add	r7, sp, #0
 8012198:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	2204      	movs	r2, #4
 801219e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80121a2:	2300      	movs	r3, #0
 80121a4:	2200      	movs	r2, #0
 80121a6:	2100      	movs	r1, #0
 80121a8:	6878      	ldr	r0, [r7, #4]
 80121aa:	f7fe fc4e 	bl	8010a4a <USBD_LL_Transmit>

  return USBD_OK;
 80121ae:	2300      	movs	r3, #0
}
 80121b0:	4618      	mov	r0, r3
 80121b2:	3708      	adds	r7, #8
 80121b4:	46bd      	mov	sp, r7
 80121b6:	bd80      	pop	{r7, pc}

080121b8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80121b8:	b580      	push	{r7, lr}
 80121ba:	b082      	sub	sp, #8
 80121bc:	af00      	add	r7, sp, #0
 80121be:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	2205      	movs	r2, #5
 80121c4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80121c8:	2300      	movs	r3, #0
 80121ca:	2200      	movs	r2, #0
 80121cc:	2100      	movs	r1, #0
 80121ce:	6878      	ldr	r0, [r7, #4]
 80121d0:	f7fe fc56 	bl	8010a80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80121d4:	2300      	movs	r3, #0
}
 80121d6:	4618      	mov	r0, r3
 80121d8:	3708      	adds	r7, #8
 80121da:	46bd      	mov	sp, r7
 80121dc:	bd80      	pop	{r7, pc}
	...

080121e0 <sbrk_aligned>:
 80121e0:	b570      	push	{r4, r5, r6, lr}
 80121e2:	4e0f      	ldr	r6, [pc, #60]	@ (8012220 <sbrk_aligned+0x40>)
 80121e4:	460c      	mov	r4, r1
 80121e6:	4605      	mov	r5, r0
 80121e8:	6831      	ldr	r1, [r6, #0]
 80121ea:	b911      	cbnz	r1, 80121f2 <sbrk_aligned+0x12>
 80121ec:	f000 fa66 	bl	80126bc <_sbrk_r>
 80121f0:	6030      	str	r0, [r6, #0]
 80121f2:	4621      	mov	r1, r4
 80121f4:	4628      	mov	r0, r5
 80121f6:	f000 fa61 	bl	80126bc <_sbrk_r>
 80121fa:	1c43      	adds	r3, r0, #1
 80121fc:	d103      	bne.n	8012206 <sbrk_aligned+0x26>
 80121fe:	f04f 34ff 	mov.w	r4, #4294967295
 8012202:	4620      	mov	r0, r4
 8012204:	bd70      	pop	{r4, r5, r6, pc}
 8012206:	1cc4      	adds	r4, r0, #3
 8012208:	f024 0403 	bic.w	r4, r4, #3
 801220c:	42a0      	cmp	r0, r4
 801220e:	d0f8      	beq.n	8012202 <sbrk_aligned+0x22>
 8012210:	1a21      	subs	r1, r4, r0
 8012212:	4628      	mov	r0, r5
 8012214:	f000 fa52 	bl	80126bc <_sbrk_r>
 8012218:	3001      	adds	r0, #1
 801221a:	d1f2      	bne.n	8012202 <sbrk_aligned+0x22>
 801221c:	e7ef      	b.n	80121fe <sbrk_aligned+0x1e>
 801221e:	bf00      	nop
 8012220:	200111d4 	.word	0x200111d4

08012224 <_malloc_r>:
 8012224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012228:	1ccd      	adds	r5, r1, #3
 801222a:	4606      	mov	r6, r0
 801222c:	f025 0503 	bic.w	r5, r5, #3
 8012230:	3508      	adds	r5, #8
 8012232:	2d0c      	cmp	r5, #12
 8012234:	bf38      	it	cc
 8012236:	250c      	movcc	r5, #12
 8012238:	2d00      	cmp	r5, #0
 801223a:	db01      	blt.n	8012240 <_malloc_r+0x1c>
 801223c:	42a9      	cmp	r1, r5
 801223e:	d904      	bls.n	801224a <_malloc_r+0x26>
 8012240:	230c      	movs	r3, #12
 8012242:	6033      	str	r3, [r6, #0]
 8012244:	2000      	movs	r0, #0
 8012246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801224a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012320 <_malloc_r+0xfc>
 801224e:	f000 f869 	bl	8012324 <__malloc_lock>
 8012252:	f8d8 3000 	ldr.w	r3, [r8]
 8012256:	461c      	mov	r4, r3
 8012258:	bb44      	cbnz	r4, 80122ac <_malloc_r+0x88>
 801225a:	4629      	mov	r1, r5
 801225c:	4630      	mov	r0, r6
 801225e:	f7ff ffbf 	bl	80121e0 <sbrk_aligned>
 8012262:	1c43      	adds	r3, r0, #1
 8012264:	4604      	mov	r4, r0
 8012266:	d158      	bne.n	801231a <_malloc_r+0xf6>
 8012268:	f8d8 4000 	ldr.w	r4, [r8]
 801226c:	4627      	mov	r7, r4
 801226e:	2f00      	cmp	r7, #0
 8012270:	d143      	bne.n	80122fa <_malloc_r+0xd6>
 8012272:	2c00      	cmp	r4, #0
 8012274:	d04b      	beq.n	801230e <_malloc_r+0xea>
 8012276:	6823      	ldr	r3, [r4, #0]
 8012278:	4639      	mov	r1, r7
 801227a:	4630      	mov	r0, r6
 801227c:	eb04 0903 	add.w	r9, r4, r3
 8012280:	f000 fa1c 	bl	80126bc <_sbrk_r>
 8012284:	4581      	cmp	r9, r0
 8012286:	d142      	bne.n	801230e <_malloc_r+0xea>
 8012288:	6821      	ldr	r1, [r4, #0]
 801228a:	4630      	mov	r0, r6
 801228c:	1a6d      	subs	r5, r5, r1
 801228e:	4629      	mov	r1, r5
 8012290:	f7ff ffa6 	bl	80121e0 <sbrk_aligned>
 8012294:	3001      	adds	r0, #1
 8012296:	d03a      	beq.n	801230e <_malloc_r+0xea>
 8012298:	6823      	ldr	r3, [r4, #0]
 801229a:	442b      	add	r3, r5
 801229c:	6023      	str	r3, [r4, #0]
 801229e:	f8d8 3000 	ldr.w	r3, [r8]
 80122a2:	685a      	ldr	r2, [r3, #4]
 80122a4:	bb62      	cbnz	r2, 8012300 <_malloc_r+0xdc>
 80122a6:	f8c8 7000 	str.w	r7, [r8]
 80122aa:	e00f      	b.n	80122cc <_malloc_r+0xa8>
 80122ac:	6822      	ldr	r2, [r4, #0]
 80122ae:	1b52      	subs	r2, r2, r5
 80122b0:	d420      	bmi.n	80122f4 <_malloc_r+0xd0>
 80122b2:	2a0b      	cmp	r2, #11
 80122b4:	d917      	bls.n	80122e6 <_malloc_r+0xc2>
 80122b6:	1961      	adds	r1, r4, r5
 80122b8:	42a3      	cmp	r3, r4
 80122ba:	6025      	str	r5, [r4, #0]
 80122bc:	bf18      	it	ne
 80122be:	6059      	strne	r1, [r3, #4]
 80122c0:	6863      	ldr	r3, [r4, #4]
 80122c2:	bf08      	it	eq
 80122c4:	f8c8 1000 	streq.w	r1, [r8]
 80122c8:	5162      	str	r2, [r4, r5]
 80122ca:	604b      	str	r3, [r1, #4]
 80122cc:	4630      	mov	r0, r6
 80122ce:	f000 f82f 	bl	8012330 <__malloc_unlock>
 80122d2:	f104 000b 	add.w	r0, r4, #11
 80122d6:	1d23      	adds	r3, r4, #4
 80122d8:	f020 0007 	bic.w	r0, r0, #7
 80122dc:	1ac2      	subs	r2, r0, r3
 80122de:	bf1c      	itt	ne
 80122e0:	1a1b      	subne	r3, r3, r0
 80122e2:	50a3      	strne	r3, [r4, r2]
 80122e4:	e7af      	b.n	8012246 <_malloc_r+0x22>
 80122e6:	6862      	ldr	r2, [r4, #4]
 80122e8:	42a3      	cmp	r3, r4
 80122ea:	bf0c      	ite	eq
 80122ec:	f8c8 2000 	streq.w	r2, [r8]
 80122f0:	605a      	strne	r2, [r3, #4]
 80122f2:	e7eb      	b.n	80122cc <_malloc_r+0xa8>
 80122f4:	4623      	mov	r3, r4
 80122f6:	6864      	ldr	r4, [r4, #4]
 80122f8:	e7ae      	b.n	8012258 <_malloc_r+0x34>
 80122fa:	463c      	mov	r4, r7
 80122fc:	687f      	ldr	r7, [r7, #4]
 80122fe:	e7b6      	b.n	801226e <_malloc_r+0x4a>
 8012300:	461a      	mov	r2, r3
 8012302:	685b      	ldr	r3, [r3, #4]
 8012304:	42a3      	cmp	r3, r4
 8012306:	d1fb      	bne.n	8012300 <_malloc_r+0xdc>
 8012308:	2300      	movs	r3, #0
 801230a:	6053      	str	r3, [r2, #4]
 801230c:	e7de      	b.n	80122cc <_malloc_r+0xa8>
 801230e:	230c      	movs	r3, #12
 8012310:	4630      	mov	r0, r6
 8012312:	6033      	str	r3, [r6, #0]
 8012314:	f000 f80c 	bl	8012330 <__malloc_unlock>
 8012318:	e794      	b.n	8012244 <_malloc_r+0x20>
 801231a:	6005      	str	r5, [r0, #0]
 801231c:	e7d6      	b.n	80122cc <_malloc_r+0xa8>
 801231e:	bf00      	nop
 8012320:	200111d8 	.word	0x200111d8

08012324 <__malloc_lock>:
 8012324:	4801      	ldr	r0, [pc, #4]	@ (801232c <__malloc_lock+0x8>)
 8012326:	f000 ba16 	b.w	8012756 <__retarget_lock_acquire_recursive>
 801232a:	bf00      	nop
 801232c:	2001131c 	.word	0x2001131c

08012330 <__malloc_unlock>:
 8012330:	4801      	ldr	r0, [pc, #4]	@ (8012338 <__malloc_unlock+0x8>)
 8012332:	f000 ba11 	b.w	8012758 <__retarget_lock_release_recursive>
 8012336:	bf00      	nop
 8012338:	2001131c 	.word	0x2001131c

0801233c <std>:
 801233c:	2300      	movs	r3, #0
 801233e:	b510      	push	{r4, lr}
 8012340:	4604      	mov	r4, r0
 8012342:	6083      	str	r3, [r0, #8]
 8012344:	8181      	strh	r1, [r0, #12]
 8012346:	4619      	mov	r1, r3
 8012348:	6643      	str	r3, [r0, #100]	@ 0x64
 801234a:	81c2      	strh	r2, [r0, #14]
 801234c:	2208      	movs	r2, #8
 801234e:	6183      	str	r3, [r0, #24]
 8012350:	e9c0 3300 	strd	r3, r3, [r0]
 8012354:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012358:	305c      	adds	r0, #92	@ 0x5c
 801235a:	f000 f973 	bl	8012644 <memset>
 801235e:	4b0d      	ldr	r3, [pc, #52]	@ (8012394 <std+0x58>)
 8012360:	6224      	str	r4, [r4, #32]
 8012362:	6263      	str	r3, [r4, #36]	@ 0x24
 8012364:	4b0c      	ldr	r3, [pc, #48]	@ (8012398 <std+0x5c>)
 8012366:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012368:	4b0c      	ldr	r3, [pc, #48]	@ (801239c <std+0x60>)
 801236a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801236c:	4b0c      	ldr	r3, [pc, #48]	@ (80123a0 <std+0x64>)
 801236e:	6323      	str	r3, [r4, #48]	@ 0x30
 8012370:	4b0c      	ldr	r3, [pc, #48]	@ (80123a4 <std+0x68>)
 8012372:	429c      	cmp	r4, r3
 8012374:	d006      	beq.n	8012384 <std+0x48>
 8012376:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801237a:	4294      	cmp	r4, r2
 801237c:	d002      	beq.n	8012384 <std+0x48>
 801237e:	33d0      	adds	r3, #208	@ 0xd0
 8012380:	429c      	cmp	r4, r3
 8012382:	d105      	bne.n	8012390 <std+0x54>
 8012384:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801238c:	f000 b9e2 	b.w	8012754 <__retarget_lock_init_recursive>
 8012390:	bd10      	pop	{r4, pc}
 8012392:	bf00      	nop
 8012394:	0801254d 	.word	0x0801254d
 8012398:	0801256f 	.word	0x0801256f
 801239c:	080125a7 	.word	0x080125a7
 80123a0:	080125cb 	.word	0x080125cb
 80123a4:	200111dc 	.word	0x200111dc

080123a8 <stdio_exit_handler>:
 80123a8:	4a02      	ldr	r2, [pc, #8]	@ (80123b4 <stdio_exit_handler+0xc>)
 80123aa:	4903      	ldr	r1, [pc, #12]	@ (80123b8 <stdio_exit_handler+0x10>)
 80123ac:	4803      	ldr	r0, [pc, #12]	@ (80123bc <stdio_exit_handler+0x14>)
 80123ae:	f000 b869 	b.w	8012484 <_fwalk_sglue>
 80123b2:	bf00      	nop
 80123b4:	20000124 	.word	0x20000124
 80123b8:	08013169 	.word	0x08013169
 80123bc:	20000134 	.word	0x20000134

080123c0 <cleanup_stdio>:
 80123c0:	6841      	ldr	r1, [r0, #4]
 80123c2:	4b0c      	ldr	r3, [pc, #48]	@ (80123f4 <cleanup_stdio+0x34>)
 80123c4:	4299      	cmp	r1, r3
 80123c6:	b510      	push	{r4, lr}
 80123c8:	4604      	mov	r4, r0
 80123ca:	d001      	beq.n	80123d0 <cleanup_stdio+0x10>
 80123cc:	f000 fecc 	bl	8013168 <_fflush_r>
 80123d0:	68a1      	ldr	r1, [r4, #8]
 80123d2:	4b09      	ldr	r3, [pc, #36]	@ (80123f8 <cleanup_stdio+0x38>)
 80123d4:	4299      	cmp	r1, r3
 80123d6:	d002      	beq.n	80123de <cleanup_stdio+0x1e>
 80123d8:	4620      	mov	r0, r4
 80123da:	f000 fec5 	bl	8013168 <_fflush_r>
 80123de:	68e1      	ldr	r1, [r4, #12]
 80123e0:	4b06      	ldr	r3, [pc, #24]	@ (80123fc <cleanup_stdio+0x3c>)
 80123e2:	4299      	cmp	r1, r3
 80123e4:	d004      	beq.n	80123f0 <cleanup_stdio+0x30>
 80123e6:	4620      	mov	r0, r4
 80123e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80123ec:	f000 bebc 	b.w	8013168 <_fflush_r>
 80123f0:	bd10      	pop	{r4, pc}
 80123f2:	bf00      	nop
 80123f4:	200111dc 	.word	0x200111dc
 80123f8:	20011244 	.word	0x20011244
 80123fc:	200112ac 	.word	0x200112ac

08012400 <global_stdio_init.part.0>:
 8012400:	b510      	push	{r4, lr}
 8012402:	4b0b      	ldr	r3, [pc, #44]	@ (8012430 <global_stdio_init.part.0+0x30>)
 8012404:	2104      	movs	r1, #4
 8012406:	4c0b      	ldr	r4, [pc, #44]	@ (8012434 <global_stdio_init.part.0+0x34>)
 8012408:	4a0b      	ldr	r2, [pc, #44]	@ (8012438 <global_stdio_init.part.0+0x38>)
 801240a:	4620      	mov	r0, r4
 801240c:	601a      	str	r2, [r3, #0]
 801240e:	2200      	movs	r2, #0
 8012410:	f7ff ff94 	bl	801233c <std>
 8012414:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012418:	2201      	movs	r2, #1
 801241a:	2109      	movs	r1, #9
 801241c:	f7ff ff8e 	bl	801233c <std>
 8012420:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012424:	2202      	movs	r2, #2
 8012426:	2112      	movs	r1, #18
 8012428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801242c:	f7ff bf86 	b.w	801233c <std>
 8012430:	20011314 	.word	0x20011314
 8012434:	200111dc 	.word	0x200111dc
 8012438:	080123a9 	.word	0x080123a9

0801243c <__sfp_lock_acquire>:
 801243c:	4801      	ldr	r0, [pc, #4]	@ (8012444 <__sfp_lock_acquire+0x8>)
 801243e:	f000 b98a 	b.w	8012756 <__retarget_lock_acquire_recursive>
 8012442:	bf00      	nop
 8012444:	2001131d 	.word	0x2001131d

08012448 <__sfp_lock_release>:
 8012448:	4801      	ldr	r0, [pc, #4]	@ (8012450 <__sfp_lock_release+0x8>)
 801244a:	f000 b985 	b.w	8012758 <__retarget_lock_release_recursive>
 801244e:	bf00      	nop
 8012450:	2001131d 	.word	0x2001131d

08012454 <__sinit>:
 8012454:	b510      	push	{r4, lr}
 8012456:	4604      	mov	r4, r0
 8012458:	f7ff fff0 	bl	801243c <__sfp_lock_acquire>
 801245c:	6a23      	ldr	r3, [r4, #32]
 801245e:	b11b      	cbz	r3, 8012468 <__sinit+0x14>
 8012460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012464:	f7ff bff0 	b.w	8012448 <__sfp_lock_release>
 8012468:	4b04      	ldr	r3, [pc, #16]	@ (801247c <__sinit+0x28>)
 801246a:	6223      	str	r3, [r4, #32]
 801246c:	4b04      	ldr	r3, [pc, #16]	@ (8012480 <__sinit+0x2c>)
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	2b00      	cmp	r3, #0
 8012472:	d1f5      	bne.n	8012460 <__sinit+0xc>
 8012474:	f7ff ffc4 	bl	8012400 <global_stdio_init.part.0>
 8012478:	e7f2      	b.n	8012460 <__sinit+0xc>
 801247a:	bf00      	nop
 801247c:	080123c1 	.word	0x080123c1
 8012480:	20011314 	.word	0x20011314

08012484 <_fwalk_sglue>:
 8012484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012488:	4607      	mov	r7, r0
 801248a:	4688      	mov	r8, r1
 801248c:	4614      	mov	r4, r2
 801248e:	2600      	movs	r6, #0
 8012490:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012494:	f1b9 0901 	subs.w	r9, r9, #1
 8012498:	d505      	bpl.n	80124a6 <_fwalk_sglue+0x22>
 801249a:	6824      	ldr	r4, [r4, #0]
 801249c:	2c00      	cmp	r4, #0
 801249e:	d1f7      	bne.n	8012490 <_fwalk_sglue+0xc>
 80124a0:	4630      	mov	r0, r6
 80124a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124a6:	89ab      	ldrh	r3, [r5, #12]
 80124a8:	2b01      	cmp	r3, #1
 80124aa:	d907      	bls.n	80124bc <_fwalk_sglue+0x38>
 80124ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80124b0:	3301      	adds	r3, #1
 80124b2:	d003      	beq.n	80124bc <_fwalk_sglue+0x38>
 80124b4:	4629      	mov	r1, r5
 80124b6:	4638      	mov	r0, r7
 80124b8:	47c0      	blx	r8
 80124ba:	4306      	orrs	r6, r0
 80124bc:	3568      	adds	r5, #104	@ 0x68
 80124be:	e7e9      	b.n	8012494 <_fwalk_sglue+0x10>

080124c0 <iprintf>:
 80124c0:	b40f      	push	{r0, r1, r2, r3}
 80124c2:	b507      	push	{r0, r1, r2, lr}
 80124c4:	4906      	ldr	r1, [pc, #24]	@ (80124e0 <iprintf+0x20>)
 80124c6:	ab04      	add	r3, sp, #16
 80124c8:	6808      	ldr	r0, [r1, #0]
 80124ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80124ce:	6881      	ldr	r1, [r0, #8]
 80124d0:	9301      	str	r3, [sp, #4]
 80124d2:	f000 fb1b 	bl	8012b0c <_vfiprintf_r>
 80124d6:	b003      	add	sp, #12
 80124d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80124dc:	b004      	add	sp, #16
 80124de:	4770      	bx	lr
 80124e0:	20000130 	.word	0x20000130

080124e4 <sniprintf>:
 80124e4:	b40c      	push	{r2, r3}
 80124e6:	4b18      	ldr	r3, [pc, #96]	@ (8012548 <sniprintf+0x64>)
 80124e8:	b530      	push	{r4, r5, lr}
 80124ea:	1e0c      	subs	r4, r1, #0
 80124ec:	b09d      	sub	sp, #116	@ 0x74
 80124ee:	681d      	ldr	r5, [r3, #0]
 80124f0:	da08      	bge.n	8012504 <sniprintf+0x20>
 80124f2:	238b      	movs	r3, #139	@ 0x8b
 80124f4:	f04f 30ff 	mov.w	r0, #4294967295
 80124f8:	602b      	str	r3, [r5, #0]
 80124fa:	b01d      	add	sp, #116	@ 0x74
 80124fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012500:	b002      	add	sp, #8
 8012502:	4770      	bx	lr
 8012504:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8012508:	9002      	str	r0, [sp, #8]
 801250a:	9006      	str	r0, [sp, #24]
 801250c:	a902      	add	r1, sp, #8
 801250e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012512:	bf14      	ite	ne
 8012514:	f104 33ff 	addne.w	r3, r4, #4294967295
 8012518:	4623      	moveq	r3, r4
 801251a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801251c:	4628      	mov	r0, r5
 801251e:	9304      	str	r3, [sp, #16]
 8012520:	9307      	str	r3, [sp, #28]
 8012522:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012526:	f8ad 3016 	strh.w	r3, [sp, #22]
 801252a:	ab21      	add	r3, sp, #132	@ 0x84
 801252c:	9301      	str	r3, [sp, #4]
 801252e:	f000 f9c7 	bl	80128c0 <_svfiprintf_r>
 8012532:	1c43      	adds	r3, r0, #1
 8012534:	bfbc      	itt	lt
 8012536:	238b      	movlt	r3, #139	@ 0x8b
 8012538:	602b      	strlt	r3, [r5, #0]
 801253a:	2c00      	cmp	r4, #0
 801253c:	d0dd      	beq.n	80124fa <sniprintf+0x16>
 801253e:	9b02      	ldr	r3, [sp, #8]
 8012540:	2200      	movs	r2, #0
 8012542:	701a      	strb	r2, [r3, #0]
 8012544:	e7d9      	b.n	80124fa <sniprintf+0x16>
 8012546:	bf00      	nop
 8012548:	20000130 	.word	0x20000130

0801254c <__sread>:
 801254c:	b510      	push	{r4, lr}
 801254e:	460c      	mov	r4, r1
 8012550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012554:	f000 f8a0 	bl	8012698 <_read_r>
 8012558:	2800      	cmp	r0, #0
 801255a:	bfab      	itete	ge
 801255c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801255e:	89a3      	ldrhlt	r3, [r4, #12]
 8012560:	181b      	addge	r3, r3, r0
 8012562:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012566:	bfac      	ite	ge
 8012568:	6563      	strge	r3, [r4, #84]	@ 0x54
 801256a:	81a3      	strhlt	r3, [r4, #12]
 801256c:	bd10      	pop	{r4, pc}

0801256e <__swrite>:
 801256e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012572:	461f      	mov	r7, r3
 8012574:	898b      	ldrh	r3, [r1, #12]
 8012576:	4605      	mov	r5, r0
 8012578:	460c      	mov	r4, r1
 801257a:	05db      	lsls	r3, r3, #23
 801257c:	4616      	mov	r6, r2
 801257e:	d505      	bpl.n	801258c <__swrite+0x1e>
 8012580:	2302      	movs	r3, #2
 8012582:	2200      	movs	r2, #0
 8012584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012588:	f000 f874 	bl	8012674 <_lseek_r>
 801258c:	89a3      	ldrh	r3, [r4, #12]
 801258e:	4632      	mov	r2, r6
 8012590:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012594:	4628      	mov	r0, r5
 8012596:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801259a:	81a3      	strh	r3, [r4, #12]
 801259c:	463b      	mov	r3, r7
 801259e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80125a2:	f000 b89b 	b.w	80126dc <_write_r>

080125a6 <__sseek>:
 80125a6:	b510      	push	{r4, lr}
 80125a8:	460c      	mov	r4, r1
 80125aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80125ae:	f000 f861 	bl	8012674 <_lseek_r>
 80125b2:	1c43      	adds	r3, r0, #1
 80125b4:	89a3      	ldrh	r3, [r4, #12]
 80125b6:	bf15      	itete	ne
 80125b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80125ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80125be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80125c2:	81a3      	strheq	r3, [r4, #12]
 80125c4:	bf18      	it	ne
 80125c6:	81a3      	strhne	r3, [r4, #12]
 80125c8:	bd10      	pop	{r4, pc}

080125ca <__sclose>:
 80125ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80125ce:	f000 b841 	b.w	8012654 <_close_r>

080125d2 <_vsniprintf_r>:
 80125d2:	b530      	push	{r4, r5, lr}
 80125d4:	4614      	mov	r4, r2
 80125d6:	b09b      	sub	sp, #108	@ 0x6c
 80125d8:	4605      	mov	r5, r0
 80125da:	461a      	mov	r2, r3
 80125dc:	2c00      	cmp	r4, #0
 80125de:	da05      	bge.n	80125ec <_vsniprintf_r+0x1a>
 80125e0:	238b      	movs	r3, #139	@ 0x8b
 80125e2:	6003      	str	r3, [r0, #0]
 80125e4:	f04f 30ff 	mov.w	r0, #4294967295
 80125e8:	b01b      	add	sp, #108	@ 0x6c
 80125ea:	bd30      	pop	{r4, r5, pc}
 80125ec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80125f0:	9100      	str	r1, [sp, #0]
 80125f2:	9104      	str	r1, [sp, #16]
 80125f4:	4669      	mov	r1, sp
 80125f6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80125fa:	bf14      	ite	ne
 80125fc:	f104 33ff 	addne.w	r3, r4, #4294967295
 8012600:	4623      	moveq	r3, r4
 8012602:	9302      	str	r3, [sp, #8]
 8012604:	9305      	str	r3, [sp, #20]
 8012606:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801260a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801260e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8012610:	f000 f956 	bl	80128c0 <_svfiprintf_r>
 8012614:	1c43      	adds	r3, r0, #1
 8012616:	bfbc      	itt	lt
 8012618:	238b      	movlt	r3, #139	@ 0x8b
 801261a:	602b      	strlt	r3, [r5, #0]
 801261c:	2c00      	cmp	r4, #0
 801261e:	d0e3      	beq.n	80125e8 <_vsniprintf_r+0x16>
 8012620:	9b00      	ldr	r3, [sp, #0]
 8012622:	2200      	movs	r2, #0
 8012624:	701a      	strb	r2, [r3, #0]
 8012626:	e7df      	b.n	80125e8 <_vsniprintf_r+0x16>

08012628 <vsniprintf>:
 8012628:	b507      	push	{r0, r1, r2, lr}
 801262a:	9300      	str	r3, [sp, #0]
 801262c:	4613      	mov	r3, r2
 801262e:	460a      	mov	r2, r1
 8012630:	4601      	mov	r1, r0
 8012632:	4803      	ldr	r0, [pc, #12]	@ (8012640 <vsniprintf+0x18>)
 8012634:	6800      	ldr	r0, [r0, #0]
 8012636:	f7ff ffcc 	bl	80125d2 <_vsniprintf_r>
 801263a:	b003      	add	sp, #12
 801263c:	f85d fb04 	ldr.w	pc, [sp], #4
 8012640:	20000130 	.word	0x20000130

08012644 <memset>:
 8012644:	4402      	add	r2, r0
 8012646:	4603      	mov	r3, r0
 8012648:	4293      	cmp	r3, r2
 801264a:	d100      	bne.n	801264e <memset+0xa>
 801264c:	4770      	bx	lr
 801264e:	f803 1b01 	strb.w	r1, [r3], #1
 8012652:	e7f9      	b.n	8012648 <memset+0x4>

08012654 <_close_r>:
 8012654:	b538      	push	{r3, r4, r5, lr}
 8012656:	2300      	movs	r3, #0
 8012658:	4d05      	ldr	r5, [pc, #20]	@ (8012670 <_close_r+0x1c>)
 801265a:	4604      	mov	r4, r0
 801265c:	4608      	mov	r0, r1
 801265e:	602b      	str	r3, [r5, #0]
 8012660:	f7ef fd43 	bl	80020ea <_close>
 8012664:	1c43      	adds	r3, r0, #1
 8012666:	d102      	bne.n	801266e <_close_r+0x1a>
 8012668:	682b      	ldr	r3, [r5, #0]
 801266a:	b103      	cbz	r3, 801266e <_close_r+0x1a>
 801266c:	6023      	str	r3, [r4, #0]
 801266e:	bd38      	pop	{r3, r4, r5, pc}
 8012670:	20011318 	.word	0x20011318

08012674 <_lseek_r>:
 8012674:	b538      	push	{r3, r4, r5, lr}
 8012676:	4604      	mov	r4, r0
 8012678:	4d06      	ldr	r5, [pc, #24]	@ (8012694 <_lseek_r+0x20>)
 801267a:	4608      	mov	r0, r1
 801267c:	4611      	mov	r1, r2
 801267e:	2200      	movs	r2, #0
 8012680:	602a      	str	r2, [r5, #0]
 8012682:	461a      	mov	r2, r3
 8012684:	f7ef fd58 	bl	8002138 <_lseek>
 8012688:	1c43      	adds	r3, r0, #1
 801268a:	d102      	bne.n	8012692 <_lseek_r+0x1e>
 801268c:	682b      	ldr	r3, [r5, #0]
 801268e:	b103      	cbz	r3, 8012692 <_lseek_r+0x1e>
 8012690:	6023      	str	r3, [r4, #0]
 8012692:	bd38      	pop	{r3, r4, r5, pc}
 8012694:	20011318 	.word	0x20011318

08012698 <_read_r>:
 8012698:	b538      	push	{r3, r4, r5, lr}
 801269a:	4604      	mov	r4, r0
 801269c:	4d06      	ldr	r5, [pc, #24]	@ (80126b8 <_read_r+0x20>)
 801269e:	4608      	mov	r0, r1
 80126a0:	4611      	mov	r1, r2
 80126a2:	2200      	movs	r2, #0
 80126a4:	602a      	str	r2, [r5, #0]
 80126a6:	461a      	mov	r2, r3
 80126a8:	f7ef fce6 	bl	8002078 <_read>
 80126ac:	1c43      	adds	r3, r0, #1
 80126ae:	d102      	bne.n	80126b6 <_read_r+0x1e>
 80126b0:	682b      	ldr	r3, [r5, #0]
 80126b2:	b103      	cbz	r3, 80126b6 <_read_r+0x1e>
 80126b4:	6023      	str	r3, [r4, #0]
 80126b6:	bd38      	pop	{r3, r4, r5, pc}
 80126b8:	20011318 	.word	0x20011318

080126bc <_sbrk_r>:
 80126bc:	b538      	push	{r3, r4, r5, lr}
 80126be:	2300      	movs	r3, #0
 80126c0:	4d05      	ldr	r5, [pc, #20]	@ (80126d8 <_sbrk_r+0x1c>)
 80126c2:	4604      	mov	r4, r0
 80126c4:	4608      	mov	r0, r1
 80126c6:	602b      	str	r3, [r5, #0]
 80126c8:	f7ef fd44 	bl	8002154 <_sbrk>
 80126cc:	1c43      	adds	r3, r0, #1
 80126ce:	d102      	bne.n	80126d6 <_sbrk_r+0x1a>
 80126d0:	682b      	ldr	r3, [r5, #0]
 80126d2:	b103      	cbz	r3, 80126d6 <_sbrk_r+0x1a>
 80126d4:	6023      	str	r3, [r4, #0]
 80126d6:	bd38      	pop	{r3, r4, r5, pc}
 80126d8:	20011318 	.word	0x20011318

080126dc <_write_r>:
 80126dc:	b538      	push	{r3, r4, r5, lr}
 80126de:	4604      	mov	r4, r0
 80126e0:	4d06      	ldr	r5, [pc, #24]	@ (80126fc <_write_r+0x20>)
 80126e2:	4608      	mov	r0, r1
 80126e4:	4611      	mov	r1, r2
 80126e6:	2200      	movs	r2, #0
 80126e8:	602a      	str	r2, [r5, #0]
 80126ea:	461a      	mov	r2, r3
 80126ec:	f7ef fce1 	bl	80020b2 <_write>
 80126f0:	1c43      	adds	r3, r0, #1
 80126f2:	d102      	bne.n	80126fa <_write_r+0x1e>
 80126f4:	682b      	ldr	r3, [r5, #0]
 80126f6:	b103      	cbz	r3, 80126fa <_write_r+0x1e>
 80126f8:	6023      	str	r3, [r4, #0]
 80126fa:	bd38      	pop	{r3, r4, r5, pc}
 80126fc:	20011318 	.word	0x20011318

08012700 <__errno>:
 8012700:	4b01      	ldr	r3, [pc, #4]	@ (8012708 <__errno+0x8>)
 8012702:	6818      	ldr	r0, [r3, #0]
 8012704:	4770      	bx	lr
 8012706:	bf00      	nop
 8012708:	20000130 	.word	0x20000130

0801270c <__libc_init_array>:
 801270c:	b570      	push	{r4, r5, r6, lr}
 801270e:	4d0d      	ldr	r5, [pc, #52]	@ (8012744 <__libc_init_array+0x38>)
 8012710:	2600      	movs	r6, #0
 8012712:	4c0d      	ldr	r4, [pc, #52]	@ (8012748 <__libc_init_array+0x3c>)
 8012714:	1b64      	subs	r4, r4, r5
 8012716:	10a4      	asrs	r4, r4, #2
 8012718:	42a6      	cmp	r6, r4
 801271a:	d109      	bne.n	8012730 <__libc_init_array+0x24>
 801271c:	4d0b      	ldr	r5, [pc, #44]	@ (801274c <__libc_init_array+0x40>)
 801271e:	2600      	movs	r6, #0
 8012720:	4c0b      	ldr	r4, [pc, #44]	@ (8012750 <__libc_init_array+0x44>)
 8012722:	f000 febf 	bl	80134a4 <_init>
 8012726:	1b64      	subs	r4, r4, r5
 8012728:	10a4      	asrs	r4, r4, #2
 801272a:	42a6      	cmp	r6, r4
 801272c:	d105      	bne.n	801273a <__libc_init_array+0x2e>
 801272e:	bd70      	pop	{r4, r5, r6, pc}
 8012730:	f855 3b04 	ldr.w	r3, [r5], #4
 8012734:	3601      	adds	r6, #1
 8012736:	4798      	blx	r3
 8012738:	e7ee      	b.n	8012718 <__libc_init_array+0xc>
 801273a:	f855 3b04 	ldr.w	r3, [r5], #4
 801273e:	3601      	adds	r6, #1
 8012740:	4798      	blx	r3
 8012742:	e7f2      	b.n	801272a <__libc_init_array+0x1e>
 8012744:	080136cc 	.word	0x080136cc
 8012748:	080136cc 	.word	0x080136cc
 801274c:	080136cc 	.word	0x080136cc
 8012750:	080136d0 	.word	0x080136d0

08012754 <__retarget_lock_init_recursive>:
 8012754:	4770      	bx	lr

08012756 <__retarget_lock_acquire_recursive>:
 8012756:	4770      	bx	lr

08012758 <__retarget_lock_release_recursive>:
 8012758:	4770      	bx	lr

0801275a <memcpy>:
 801275a:	440a      	add	r2, r1
 801275c:	1e43      	subs	r3, r0, #1
 801275e:	4291      	cmp	r1, r2
 8012760:	d100      	bne.n	8012764 <memcpy+0xa>
 8012762:	4770      	bx	lr
 8012764:	b510      	push	{r4, lr}
 8012766:	f811 4b01 	ldrb.w	r4, [r1], #1
 801276a:	4291      	cmp	r1, r2
 801276c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012770:	d1f9      	bne.n	8012766 <memcpy+0xc>
 8012772:	bd10      	pop	{r4, pc}

08012774 <_free_r>:
 8012774:	b538      	push	{r3, r4, r5, lr}
 8012776:	4605      	mov	r5, r0
 8012778:	2900      	cmp	r1, #0
 801277a:	d041      	beq.n	8012800 <_free_r+0x8c>
 801277c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012780:	1f0c      	subs	r4, r1, #4
 8012782:	2b00      	cmp	r3, #0
 8012784:	bfb8      	it	lt
 8012786:	18e4      	addlt	r4, r4, r3
 8012788:	f7ff fdcc 	bl	8012324 <__malloc_lock>
 801278c:	4a1d      	ldr	r2, [pc, #116]	@ (8012804 <_free_r+0x90>)
 801278e:	6813      	ldr	r3, [r2, #0]
 8012790:	b933      	cbnz	r3, 80127a0 <_free_r+0x2c>
 8012792:	6063      	str	r3, [r4, #4]
 8012794:	6014      	str	r4, [r2, #0]
 8012796:	4628      	mov	r0, r5
 8012798:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801279c:	f7ff bdc8 	b.w	8012330 <__malloc_unlock>
 80127a0:	42a3      	cmp	r3, r4
 80127a2:	d908      	bls.n	80127b6 <_free_r+0x42>
 80127a4:	6820      	ldr	r0, [r4, #0]
 80127a6:	1821      	adds	r1, r4, r0
 80127a8:	428b      	cmp	r3, r1
 80127aa:	bf01      	itttt	eq
 80127ac:	6819      	ldreq	r1, [r3, #0]
 80127ae:	685b      	ldreq	r3, [r3, #4]
 80127b0:	1809      	addeq	r1, r1, r0
 80127b2:	6021      	streq	r1, [r4, #0]
 80127b4:	e7ed      	b.n	8012792 <_free_r+0x1e>
 80127b6:	461a      	mov	r2, r3
 80127b8:	685b      	ldr	r3, [r3, #4]
 80127ba:	b10b      	cbz	r3, 80127c0 <_free_r+0x4c>
 80127bc:	42a3      	cmp	r3, r4
 80127be:	d9fa      	bls.n	80127b6 <_free_r+0x42>
 80127c0:	6811      	ldr	r1, [r2, #0]
 80127c2:	1850      	adds	r0, r2, r1
 80127c4:	42a0      	cmp	r0, r4
 80127c6:	d10b      	bne.n	80127e0 <_free_r+0x6c>
 80127c8:	6820      	ldr	r0, [r4, #0]
 80127ca:	4401      	add	r1, r0
 80127cc:	1850      	adds	r0, r2, r1
 80127ce:	6011      	str	r1, [r2, #0]
 80127d0:	4283      	cmp	r3, r0
 80127d2:	d1e0      	bne.n	8012796 <_free_r+0x22>
 80127d4:	6818      	ldr	r0, [r3, #0]
 80127d6:	685b      	ldr	r3, [r3, #4]
 80127d8:	4408      	add	r0, r1
 80127da:	6053      	str	r3, [r2, #4]
 80127dc:	6010      	str	r0, [r2, #0]
 80127de:	e7da      	b.n	8012796 <_free_r+0x22>
 80127e0:	d902      	bls.n	80127e8 <_free_r+0x74>
 80127e2:	230c      	movs	r3, #12
 80127e4:	602b      	str	r3, [r5, #0]
 80127e6:	e7d6      	b.n	8012796 <_free_r+0x22>
 80127e8:	6820      	ldr	r0, [r4, #0]
 80127ea:	1821      	adds	r1, r4, r0
 80127ec:	428b      	cmp	r3, r1
 80127ee:	bf02      	ittt	eq
 80127f0:	6819      	ldreq	r1, [r3, #0]
 80127f2:	685b      	ldreq	r3, [r3, #4]
 80127f4:	1809      	addeq	r1, r1, r0
 80127f6:	6063      	str	r3, [r4, #4]
 80127f8:	bf08      	it	eq
 80127fa:	6021      	streq	r1, [r4, #0]
 80127fc:	6054      	str	r4, [r2, #4]
 80127fe:	e7ca      	b.n	8012796 <_free_r+0x22>
 8012800:	bd38      	pop	{r3, r4, r5, pc}
 8012802:	bf00      	nop
 8012804:	200111d8 	.word	0x200111d8

08012808 <__ssputs_r>:
 8012808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801280c:	461f      	mov	r7, r3
 801280e:	688e      	ldr	r6, [r1, #8]
 8012810:	4682      	mov	sl, r0
 8012812:	460c      	mov	r4, r1
 8012814:	42be      	cmp	r6, r7
 8012816:	4690      	mov	r8, r2
 8012818:	680b      	ldr	r3, [r1, #0]
 801281a:	d82d      	bhi.n	8012878 <__ssputs_r+0x70>
 801281c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012820:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012824:	d026      	beq.n	8012874 <__ssputs_r+0x6c>
 8012826:	6965      	ldr	r5, [r4, #20]
 8012828:	6909      	ldr	r1, [r1, #16]
 801282a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801282e:	eba3 0901 	sub.w	r9, r3, r1
 8012832:	1c7b      	adds	r3, r7, #1
 8012834:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012838:	444b      	add	r3, r9
 801283a:	106d      	asrs	r5, r5, #1
 801283c:	429d      	cmp	r5, r3
 801283e:	bf38      	it	cc
 8012840:	461d      	movcc	r5, r3
 8012842:	0553      	lsls	r3, r2, #21
 8012844:	d527      	bpl.n	8012896 <__ssputs_r+0x8e>
 8012846:	4629      	mov	r1, r5
 8012848:	f7ff fcec 	bl	8012224 <_malloc_r>
 801284c:	4606      	mov	r6, r0
 801284e:	b360      	cbz	r0, 80128aa <__ssputs_r+0xa2>
 8012850:	464a      	mov	r2, r9
 8012852:	6921      	ldr	r1, [r4, #16]
 8012854:	f7ff ff81 	bl	801275a <memcpy>
 8012858:	89a3      	ldrh	r3, [r4, #12]
 801285a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801285e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012862:	81a3      	strh	r3, [r4, #12]
 8012864:	6126      	str	r6, [r4, #16]
 8012866:	444e      	add	r6, r9
 8012868:	6165      	str	r5, [r4, #20]
 801286a:	eba5 0509 	sub.w	r5, r5, r9
 801286e:	6026      	str	r6, [r4, #0]
 8012870:	463e      	mov	r6, r7
 8012872:	60a5      	str	r5, [r4, #8]
 8012874:	42be      	cmp	r6, r7
 8012876:	d900      	bls.n	801287a <__ssputs_r+0x72>
 8012878:	463e      	mov	r6, r7
 801287a:	4632      	mov	r2, r6
 801287c:	4641      	mov	r1, r8
 801287e:	6820      	ldr	r0, [r4, #0]
 8012880:	f000 fd2e 	bl	80132e0 <memmove>
 8012884:	68a3      	ldr	r3, [r4, #8]
 8012886:	2000      	movs	r0, #0
 8012888:	1b9b      	subs	r3, r3, r6
 801288a:	60a3      	str	r3, [r4, #8]
 801288c:	6823      	ldr	r3, [r4, #0]
 801288e:	4433      	add	r3, r6
 8012890:	6023      	str	r3, [r4, #0]
 8012892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012896:	462a      	mov	r2, r5
 8012898:	f000 fd4a 	bl	8013330 <_realloc_r>
 801289c:	4606      	mov	r6, r0
 801289e:	2800      	cmp	r0, #0
 80128a0:	d1e0      	bne.n	8012864 <__ssputs_r+0x5c>
 80128a2:	6921      	ldr	r1, [r4, #16]
 80128a4:	4650      	mov	r0, sl
 80128a6:	f7ff ff65 	bl	8012774 <_free_r>
 80128aa:	230c      	movs	r3, #12
 80128ac:	f04f 30ff 	mov.w	r0, #4294967295
 80128b0:	f8ca 3000 	str.w	r3, [sl]
 80128b4:	89a3      	ldrh	r3, [r4, #12]
 80128b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80128ba:	81a3      	strh	r3, [r4, #12]
 80128bc:	e7e9      	b.n	8012892 <__ssputs_r+0x8a>
	...

080128c0 <_svfiprintf_r>:
 80128c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128c4:	4698      	mov	r8, r3
 80128c6:	898b      	ldrh	r3, [r1, #12]
 80128c8:	b09d      	sub	sp, #116	@ 0x74
 80128ca:	4607      	mov	r7, r0
 80128cc:	061b      	lsls	r3, r3, #24
 80128ce:	460d      	mov	r5, r1
 80128d0:	4614      	mov	r4, r2
 80128d2:	d510      	bpl.n	80128f6 <_svfiprintf_r+0x36>
 80128d4:	690b      	ldr	r3, [r1, #16]
 80128d6:	b973      	cbnz	r3, 80128f6 <_svfiprintf_r+0x36>
 80128d8:	2140      	movs	r1, #64	@ 0x40
 80128da:	f7ff fca3 	bl	8012224 <_malloc_r>
 80128de:	6028      	str	r0, [r5, #0]
 80128e0:	6128      	str	r0, [r5, #16]
 80128e2:	b930      	cbnz	r0, 80128f2 <_svfiprintf_r+0x32>
 80128e4:	230c      	movs	r3, #12
 80128e6:	603b      	str	r3, [r7, #0]
 80128e8:	f04f 30ff 	mov.w	r0, #4294967295
 80128ec:	b01d      	add	sp, #116	@ 0x74
 80128ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128f2:	2340      	movs	r3, #64	@ 0x40
 80128f4:	616b      	str	r3, [r5, #20]
 80128f6:	2300      	movs	r3, #0
 80128f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80128fc:	f04f 0901 	mov.w	r9, #1
 8012900:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8012aa4 <_svfiprintf_r+0x1e4>
 8012904:	9309      	str	r3, [sp, #36]	@ 0x24
 8012906:	2320      	movs	r3, #32
 8012908:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801290c:	2330      	movs	r3, #48	@ 0x30
 801290e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012912:	4623      	mov	r3, r4
 8012914:	469a      	mov	sl, r3
 8012916:	f813 2b01 	ldrb.w	r2, [r3], #1
 801291a:	b10a      	cbz	r2, 8012920 <_svfiprintf_r+0x60>
 801291c:	2a25      	cmp	r2, #37	@ 0x25
 801291e:	d1f9      	bne.n	8012914 <_svfiprintf_r+0x54>
 8012920:	ebba 0b04 	subs.w	fp, sl, r4
 8012924:	d00b      	beq.n	801293e <_svfiprintf_r+0x7e>
 8012926:	465b      	mov	r3, fp
 8012928:	4622      	mov	r2, r4
 801292a:	4629      	mov	r1, r5
 801292c:	4638      	mov	r0, r7
 801292e:	f7ff ff6b 	bl	8012808 <__ssputs_r>
 8012932:	3001      	adds	r0, #1
 8012934:	f000 80a7 	beq.w	8012a86 <_svfiprintf_r+0x1c6>
 8012938:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801293a:	445a      	add	r2, fp
 801293c:	9209      	str	r2, [sp, #36]	@ 0x24
 801293e:	f89a 3000 	ldrb.w	r3, [sl]
 8012942:	2b00      	cmp	r3, #0
 8012944:	f000 809f 	beq.w	8012a86 <_svfiprintf_r+0x1c6>
 8012948:	2300      	movs	r3, #0
 801294a:	f04f 32ff 	mov.w	r2, #4294967295
 801294e:	f10a 0a01 	add.w	sl, sl, #1
 8012952:	9304      	str	r3, [sp, #16]
 8012954:	9307      	str	r3, [sp, #28]
 8012956:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801295a:	931a      	str	r3, [sp, #104]	@ 0x68
 801295c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012960:	4654      	mov	r4, sl
 8012962:	2205      	movs	r2, #5
 8012964:	484f      	ldr	r0, [pc, #316]	@ (8012aa4 <_svfiprintf_r+0x1e4>)
 8012966:	f814 1b01 	ldrb.w	r1, [r4], #1
 801296a:	f000 fcd3 	bl	8013314 <memchr>
 801296e:	9a04      	ldr	r2, [sp, #16]
 8012970:	b9d8      	cbnz	r0, 80129aa <_svfiprintf_r+0xea>
 8012972:	06d0      	lsls	r0, r2, #27
 8012974:	bf44      	itt	mi
 8012976:	2320      	movmi	r3, #32
 8012978:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801297c:	0711      	lsls	r1, r2, #28
 801297e:	bf44      	itt	mi
 8012980:	232b      	movmi	r3, #43	@ 0x2b
 8012982:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012986:	f89a 3000 	ldrb.w	r3, [sl]
 801298a:	2b2a      	cmp	r3, #42	@ 0x2a
 801298c:	d015      	beq.n	80129ba <_svfiprintf_r+0xfa>
 801298e:	9a07      	ldr	r2, [sp, #28]
 8012990:	4654      	mov	r4, sl
 8012992:	2000      	movs	r0, #0
 8012994:	f04f 0c0a 	mov.w	ip, #10
 8012998:	4621      	mov	r1, r4
 801299a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801299e:	3b30      	subs	r3, #48	@ 0x30
 80129a0:	2b09      	cmp	r3, #9
 80129a2:	d94b      	bls.n	8012a3c <_svfiprintf_r+0x17c>
 80129a4:	b1b0      	cbz	r0, 80129d4 <_svfiprintf_r+0x114>
 80129a6:	9207      	str	r2, [sp, #28]
 80129a8:	e014      	b.n	80129d4 <_svfiprintf_r+0x114>
 80129aa:	eba0 0308 	sub.w	r3, r0, r8
 80129ae:	46a2      	mov	sl, r4
 80129b0:	fa09 f303 	lsl.w	r3, r9, r3
 80129b4:	4313      	orrs	r3, r2
 80129b6:	9304      	str	r3, [sp, #16]
 80129b8:	e7d2      	b.n	8012960 <_svfiprintf_r+0xa0>
 80129ba:	9b03      	ldr	r3, [sp, #12]
 80129bc:	1d19      	adds	r1, r3, #4
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	9103      	str	r1, [sp, #12]
 80129c4:	bfbb      	ittet	lt
 80129c6:	425b      	neglt	r3, r3
 80129c8:	f042 0202 	orrlt.w	r2, r2, #2
 80129cc:	9307      	strge	r3, [sp, #28]
 80129ce:	9307      	strlt	r3, [sp, #28]
 80129d0:	bfb8      	it	lt
 80129d2:	9204      	strlt	r2, [sp, #16]
 80129d4:	7823      	ldrb	r3, [r4, #0]
 80129d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80129d8:	d10a      	bne.n	80129f0 <_svfiprintf_r+0x130>
 80129da:	7863      	ldrb	r3, [r4, #1]
 80129dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80129de:	d132      	bne.n	8012a46 <_svfiprintf_r+0x186>
 80129e0:	9b03      	ldr	r3, [sp, #12]
 80129e2:	3402      	adds	r4, #2
 80129e4:	1d1a      	adds	r2, r3, #4
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80129ec:	9203      	str	r2, [sp, #12]
 80129ee:	9305      	str	r3, [sp, #20]
 80129f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012ab4 <_svfiprintf_r+0x1f4>
 80129f4:	2203      	movs	r2, #3
 80129f6:	7821      	ldrb	r1, [r4, #0]
 80129f8:	4650      	mov	r0, sl
 80129fa:	f000 fc8b 	bl	8013314 <memchr>
 80129fe:	b138      	cbz	r0, 8012a10 <_svfiprintf_r+0x150>
 8012a00:	eba0 000a 	sub.w	r0, r0, sl
 8012a04:	2240      	movs	r2, #64	@ 0x40
 8012a06:	9b04      	ldr	r3, [sp, #16]
 8012a08:	3401      	adds	r4, #1
 8012a0a:	4082      	lsls	r2, r0
 8012a0c:	4313      	orrs	r3, r2
 8012a0e:	9304      	str	r3, [sp, #16]
 8012a10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a14:	2206      	movs	r2, #6
 8012a16:	4824      	ldr	r0, [pc, #144]	@ (8012aa8 <_svfiprintf_r+0x1e8>)
 8012a18:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012a1c:	f000 fc7a 	bl	8013314 <memchr>
 8012a20:	2800      	cmp	r0, #0
 8012a22:	d036      	beq.n	8012a92 <_svfiprintf_r+0x1d2>
 8012a24:	4b21      	ldr	r3, [pc, #132]	@ (8012aac <_svfiprintf_r+0x1ec>)
 8012a26:	bb1b      	cbnz	r3, 8012a70 <_svfiprintf_r+0x1b0>
 8012a28:	9b03      	ldr	r3, [sp, #12]
 8012a2a:	3307      	adds	r3, #7
 8012a2c:	f023 0307 	bic.w	r3, r3, #7
 8012a30:	3308      	adds	r3, #8
 8012a32:	9303      	str	r3, [sp, #12]
 8012a34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a36:	4433      	add	r3, r6
 8012a38:	9309      	str	r3, [sp, #36]	@ 0x24
 8012a3a:	e76a      	b.n	8012912 <_svfiprintf_r+0x52>
 8012a3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012a40:	460c      	mov	r4, r1
 8012a42:	2001      	movs	r0, #1
 8012a44:	e7a8      	b.n	8012998 <_svfiprintf_r+0xd8>
 8012a46:	2300      	movs	r3, #0
 8012a48:	3401      	adds	r4, #1
 8012a4a:	f04f 0c0a 	mov.w	ip, #10
 8012a4e:	4619      	mov	r1, r3
 8012a50:	9305      	str	r3, [sp, #20]
 8012a52:	4620      	mov	r0, r4
 8012a54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012a58:	3a30      	subs	r2, #48	@ 0x30
 8012a5a:	2a09      	cmp	r2, #9
 8012a5c:	d903      	bls.n	8012a66 <_svfiprintf_r+0x1a6>
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d0c6      	beq.n	80129f0 <_svfiprintf_r+0x130>
 8012a62:	9105      	str	r1, [sp, #20]
 8012a64:	e7c4      	b.n	80129f0 <_svfiprintf_r+0x130>
 8012a66:	fb0c 2101 	mla	r1, ip, r1, r2
 8012a6a:	4604      	mov	r4, r0
 8012a6c:	2301      	movs	r3, #1
 8012a6e:	e7f0      	b.n	8012a52 <_svfiprintf_r+0x192>
 8012a70:	ab03      	add	r3, sp, #12
 8012a72:	462a      	mov	r2, r5
 8012a74:	a904      	add	r1, sp, #16
 8012a76:	4638      	mov	r0, r7
 8012a78:	9300      	str	r3, [sp, #0]
 8012a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8012ab0 <_svfiprintf_r+0x1f0>)
 8012a7c:	f3af 8000 	nop.w
 8012a80:	1c42      	adds	r2, r0, #1
 8012a82:	4606      	mov	r6, r0
 8012a84:	d1d6      	bne.n	8012a34 <_svfiprintf_r+0x174>
 8012a86:	89ab      	ldrh	r3, [r5, #12]
 8012a88:	065b      	lsls	r3, r3, #25
 8012a8a:	f53f af2d 	bmi.w	80128e8 <_svfiprintf_r+0x28>
 8012a8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012a90:	e72c      	b.n	80128ec <_svfiprintf_r+0x2c>
 8012a92:	ab03      	add	r3, sp, #12
 8012a94:	462a      	mov	r2, r5
 8012a96:	a904      	add	r1, sp, #16
 8012a98:	4638      	mov	r0, r7
 8012a9a:	9300      	str	r3, [sp, #0]
 8012a9c:	4b04      	ldr	r3, [pc, #16]	@ (8012ab0 <_svfiprintf_r+0x1f0>)
 8012a9e:	f000 f9bf 	bl	8012e20 <_printf_i>
 8012aa2:	e7ed      	b.n	8012a80 <_svfiprintf_r+0x1c0>
 8012aa4:	08013690 	.word	0x08013690
 8012aa8:	0801369a 	.word	0x0801369a
 8012aac:	00000000 	.word	0x00000000
 8012ab0:	08012809 	.word	0x08012809
 8012ab4:	08013696 	.word	0x08013696

08012ab8 <__sfputc_r>:
 8012ab8:	6893      	ldr	r3, [r2, #8]
 8012aba:	3b01      	subs	r3, #1
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	6093      	str	r3, [r2, #8]
 8012ac0:	b410      	push	{r4}
 8012ac2:	da08      	bge.n	8012ad6 <__sfputc_r+0x1e>
 8012ac4:	6994      	ldr	r4, [r2, #24]
 8012ac6:	42a3      	cmp	r3, r4
 8012ac8:	db01      	blt.n	8012ace <__sfputc_r+0x16>
 8012aca:	290a      	cmp	r1, #10
 8012acc:	d103      	bne.n	8012ad6 <__sfputc_r+0x1e>
 8012ace:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012ad2:	f000 bb71 	b.w	80131b8 <__swbuf_r>
 8012ad6:	6813      	ldr	r3, [r2, #0]
 8012ad8:	1c58      	adds	r0, r3, #1
 8012ada:	6010      	str	r0, [r2, #0]
 8012adc:	4608      	mov	r0, r1
 8012ade:	7019      	strb	r1, [r3, #0]
 8012ae0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012ae4:	4770      	bx	lr

08012ae6 <__sfputs_r>:
 8012ae6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ae8:	4606      	mov	r6, r0
 8012aea:	460f      	mov	r7, r1
 8012aec:	4614      	mov	r4, r2
 8012aee:	18d5      	adds	r5, r2, r3
 8012af0:	42ac      	cmp	r4, r5
 8012af2:	d101      	bne.n	8012af8 <__sfputs_r+0x12>
 8012af4:	2000      	movs	r0, #0
 8012af6:	e007      	b.n	8012b08 <__sfputs_r+0x22>
 8012af8:	463a      	mov	r2, r7
 8012afa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012afe:	4630      	mov	r0, r6
 8012b00:	f7ff ffda 	bl	8012ab8 <__sfputc_r>
 8012b04:	1c43      	adds	r3, r0, #1
 8012b06:	d1f3      	bne.n	8012af0 <__sfputs_r+0xa>
 8012b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012b0c <_vfiprintf_r>:
 8012b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b10:	460d      	mov	r5, r1
 8012b12:	b09d      	sub	sp, #116	@ 0x74
 8012b14:	4614      	mov	r4, r2
 8012b16:	4698      	mov	r8, r3
 8012b18:	4606      	mov	r6, r0
 8012b1a:	b118      	cbz	r0, 8012b24 <_vfiprintf_r+0x18>
 8012b1c:	6a03      	ldr	r3, [r0, #32]
 8012b1e:	b90b      	cbnz	r3, 8012b24 <_vfiprintf_r+0x18>
 8012b20:	f7ff fc98 	bl	8012454 <__sinit>
 8012b24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012b26:	07d9      	lsls	r1, r3, #31
 8012b28:	d405      	bmi.n	8012b36 <_vfiprintf_r+0x2a>
 8012b2a:	89ab      	ldrh	r3, [r5, #12]
 8012b2c:	059a      	lsls	r2, r3, #22
 8012b2e:	d402      	bmi.n	8012b36 <_vfiprintf_r+0x2a>
 8012b30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012b32:	f7ff fe10 	bl	8012756 <__retarget_lock_acquire_recursive>
 8012b36:	89ab      	ldrh	r3, [r5, #12]
 8012b38:	071b      	lsls	r3, r3, #28
 8012b3a:	d501      	bpl.n	8012b40 <_vfiprintf_r+0x34>
 8012b3c:	692b      	ldr	r3, [r5, #16]
 8012b3e:	b99b      	cbnz	r3, 8012b68 <_vfiprintf_r+0x5c>
 8012b40:	4629      	mov	r1, r5
 8012b42:	4630      	mov	r0, r6
 8012b44:	f000 fb76 	bl	8013234 <__swsetup_r>
 8012b48:	b170      	cbz	r0, 8012b68 <_vfiprintf_r+0x5c>
 8012b4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012b4c:	07dc      	lsls	r4, r3, #31
 8012b4e:	d504      	bpl.n	8012b5a <_vfiprintf_r+0x4e>
 8012b50:	f04f 30ff 	mov.w	r0, #4294967295
 8012b54:	b01d      	add	sp, #116	@ 0x74
 8012b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b5a:	89ab      	ldrh	r3, [r5, #12]
 8012b5c:	0598      	lsls	r0, r3, #22
 8012b5e:	d4f7      	bmi.n	8012b50 <_vfiprintf_r+0x44>
 8012b60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012b62:	f7ff fdf9 	bl	8012758 <__retarget_lock_release_recursive>
 8012b66:	e7f3      	b.n	8012b50 <_vfiprintf_r+0x44>
 8012b68:	2300      	movs	r3, #0
 8012b6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8012b6e:	f04f 0901 	mov.w	r9, #1
 8012b72:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8012d28 <_vfiprintf_r+0x21c>
 8012b76:	9309      	str	r3, [sp, #36]	@ 0x24
 8012b78:	2320      	movs	r3, #32
 8012b7a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012b7e:	2330      	movs	r3, #48	@ 0x30
 8012b80:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012b84:	4623      	mov	r3, r4
 8012b86:	469a      	mov	sl, r3
 8012b88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012b8c:	b10a      	cbz	r2, 8012b92 <_vfiprintf_r+0x86>
 8012b8e:	2a25      	cmp	r2, #37	@ 0x25
 8012b90:	d1f9      	bne.n	8012b86 <_vfiprintf_r+0x7a>
 8012b92:	ebba 0b04 	subs.w	fp, sl, r4
 8012b96:	d00b      	beq.n	8012bb0 <_vfiprintf_r+0xa4>
 8012b98:	465b      	mov	r3, fp
 8012b9a:	4622      	mov	r2, r4
 8012b9c:	4629      	mov	r1, r5
 8012b9e:	4630      	mov	r0, r6
 8012ba0:	f7ff ffa1 	bl	8012ae6 <__sfputs_r>
 8012ba4:	3001      	adds	r0, #1
 8012ba6:	f000 80a7 	beq.w	8012cf8 <_vfiprintf_r+0x1ec>
 8012baa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012bac:	445a      	add	r2, fp
 8012bae:	9209      	str	r2, [sp, #36]	@ 0x24
 8012bb0:	f89a 3000 	ldrb.w	r3, [sl]
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	f000 809f 	beq.w	8012cf8 <_vfiprintf_r+0x1ec>
 8012bba:	2300      	movs	r3, #0
 8012bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8012bc0:	f10a 0a01 	add.w	sl, sl, #1
 8012bc4:	9304      	str	r3, [sp, #16]
 8012bc6:	9307      	str	r3, [sp, #28]
 8012bc8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012bcc:	931a      	str	r3, [sp, #104]	@ 0x68
 8012bce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012bd2:	4654      	mov	r4, sl
 8012bd4:	2205      	movs	r2, #5
 8012bd6:	4854      	ldr	r0, [pc, #336]	@ (8012d28 <_vfiprintf_r+0x21c>)
 8012bd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012bdc:	f000 fb9a 	bl	8013314 <memchr>
 8012be0:	9a04      	ldr	r2, [sp, #16]
 8012be2:	b9d8      	cbnz	r0, 8012c1c <_vfiprintf_r+0x110>
 8012be4:	06d1      	lsls	r1, r2, #27
 8012be6:	bf44      	itt	mi
 8012be8:	2320      	movmi	r3, #32
 8012bea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012bee:	0713      	lsls	r3, r2, #28
 8012bf0:	bf44      	itt	mi
 8012bf2:	232b      	movmi	r3, #43	@ 0x2b
 8012bf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012bf8:	f89a 3000 	ldrb.w	r3, [sl]
 8012bfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8012bfe:	d015      	beq.n	8012c2c <_vfiprintf_r+0x120>
 8012c00:	9a07      	ldr	r2, [sp, #28]
 8012c02:	4654      	mov	r4, sl
 8012c04:	2000      	movs	r0, #0
 8012c06:	f04f 0c0a 	mov.w	ip, #10
 8012c0a:	4621      	mov	r1, r4
 8012c0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012c10:	3b30      	subs	r3, #48	@ 0x30
 8012c12:	2b09      	cmp	r3, #9
 8012c14:	d94b      	bls.n	8012cae <_vfiprintf_r+0x1a2>
 8012c16:	b1b0      	cbz	r0, 8012c46 <_vfiprintf_r+0x13a>
 8012c18:	9207      	str	r2, [sp, #28]
 8012c1a:	e014      	b.n	8012c46 <_vfiprintf_r+0x13a>
 8012c1c:	eba0 0308 	sub.w	r3, r0, r8
 8012c20:	46a2      	mov	sl, r4
 8012c22:	fa09 f303 	lsl.w	r3, r9, r3
 8012c26:	4313      	orrs	r3, r2
 8012c28:	9304      	str	r3, [sp, #16]
 8012c2a:	e7d2      	b.n	8012bd2 <_vfiprintf_r+0xc6>
 8012c2c:	9b03      	ldr	r3, [sp, #12]
 8012c2e:	1d19      	adds	r1, r3, #4
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	9103      	str	r1, [sp, #12]
 8012c36:	bfbb      	ittet	lt
 8012c38:	425b      	neglt	r3, r3
 8012c3a:	f042 0202 	orrlt.w	r2, r2, #2
 8012c3e:	9307      	strge	r3, [sp, #28]
 8012c40:	9307      	strlt	r3, [sp, #28]
 8012c42:	bfb8      	it	lt
 8012c44:	9204      	strlt	r2, [sp, #16]
 8012c46:	7823      	ldrb	r3, [r4, #0]
 8012c48:	2b2e      	cmp	r3, #46	@ 0x2e
 8012c4a:	d10a      	bne.n	8012c62 <_vfiprintf_r+0x156>
 8012c4c:	7863      	ldrb	r3, [r4, #1]
 8012c4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012c50:	d132      	bne.n	8012cb8 <_vfiprintf_r+0x1ac>
 8012c52:	9b03      	ldr	r3, [sp, #12]
 8012c54:	3402      	adds	r4, #2
 8012c56:	1d1a      	adds	r2, r3, #4
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012c5e:	9203      	str	r2, [sp, #12]
 8012c60:	9305      	str	r3, [sp, #20]
 8012c62:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012d38 <_vfiprintf_r+0x22c>
 8012c66:	2203      	movs	r2, #3
 8012c68:	7821      	ldrb	r1, [r4, #0]
 8012c6a:	4650      	mov	r0, sl
 8012c6c:	f000 fb52 	bl	8013314 <memchr>
 8012c70:	b138      	cbz	r0, 8012c82 <_vfiprintf_r+0x176>
 8012c72:	eba0 000a 	sub.w	r0, r0, sl
 8012c76:	2240      	movs	r2, #64	@ 0x40
 8012c78:	9b04      	ldr	r3, [sp, #16]
 8012c7a:	3401      	adds	r4, #1
 8012c7c:	4082      	lsls	r2, r0
 8012c7e:	4313      	orrs	r3, r2
 8012c80:	9304      	str	r3, [sp, #16]
 8012c82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c86:	2206      	movs	r2, #6
 8012c88:	4828      	ldr	r0, [pc, #160]	@ (8012d2c <_vfiprintf_r+0x220>)
 8012c8a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012c8e:	f000 fb41 	bl	8013314 <memchr>
 8012c92:	2800      	cmp	r0, #0
 8012c94:	d03f      	beq.n	8012d16 <_vfiprintf_r+0x20a>
 8012c96:	4b26      	ldr	r3, [pc, #152]	@ (8012d30 <_vfiprintf_r+0x224>)
 8012c98:	bb1b      	cbnz	r3, 8012ce2 <_vfiprintf_r+0x1d6>
 8012c9a:	9b03      	ldr	r3, [sp, #12]
 8012c9c:	3307      	adds	r3, #7
 8012c9e:	f023 0307 	bic.w	r3, r3, #7
 8012ca2:	3308      	adds	r3, #8
 8012ca4:	9303      	str	r3, [sp, #12]
 8012ca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ca8:	443b      	add	r3, r7
 8012caa:	9309      	str	r3, [sp, #36]	@ 0x24
 8012cac:	e76a      	b.n	8012b84 <_vfiprintf_r+0x78>
 8012cae:	fb0c 3202 	mla	r2, ip, r2, r3
 8012cb2:	460c      	mov	r4, r1
 8012cb4:	2001      	movs	r0, #1
 8012cb6:	e7a8      	b.n	8012c0a <_vfiprintf_r+0xfe>
 8012cb8:	2300      	movs	r3, #0
 8012cba:	3401      	adds	r4, #1
 8012cbc:	f04f 0c0a 	mov.w	ip, #10
 8012cc0:	4619      	mov	r1, r3
 8012cc2:	9305      	str	r3, [sp, #20]
 8012cc4:	4620      	mov	r0, r4
 8012cc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012cca:	3a30      	subs	r2, #48	@ 0x30
 8012ccc:	2a09      	cmp	r2, #9
 8012cce:	d903      	bls.n	8012cd8 <_vfiprintf_r+0x1cc>
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d0c6      	beq.n	8012c62 <_vfiprintf_r+0x156>
 8012cd4:	9105      	str	r1, [sp, #20]
 8012cd6:	e7c4      	b.n	8012c62 <_vfiprintf_r+0x156>
 8012cd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8012cdc:	4604      	mov	r4, r0
 8012cde:	2301      	movs	r3, #1
 8012ce0:	e7f0      	b.n	8012cc4 <_vfiprintf_r+0x1b8>
 8012ce2:	ab03      	add	r3, sp, #12
 8012ce4:	462a      	mov	r2, r5
 8012ce6:	a904      	add	r1, sp, #16
 8012ce8:	4630      	mov	r0, r6
 8012cea:	9300      	str	r3, [sp, #0]
 8012cec:	4b11      	ldr	r3, [pc, #68]	@ (8012d34 <_vfiprintf_r+0x228>)
 8012cee:	f3af 8000 	nop.w
 8012cf2:	4607      	mov	r7, r0
 8012cf4:	1c78      	adds	r0, r7, #1
 8012cf6:	d1d6      	bne.n	8012ca6 <_vfiprintf_r+0x19a>
 8012cf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012cfa:	07d9      	lsls	r1, r3, #31
 8012cfc:	d405      	bmi.n	8012d0a <_vfiprintf_r+0x1fe>
 8012cfe:	89ab      	ldrh	r3, [r5, #12]
 8012d00:	059a      	lsls	r2, r3, #22
 8012d02:	d402      	bmi.n	8012d0a <_vfiprintf_r+0x1fe>
 8012d04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012d06:	f7ff fd27 	bl	8012758 <__retarget_lock_release_recursive>
 8012d0a:	89ab      	ldrh	r3, [r5, #12]
 8012d0c:	065b      	lsls	r3, r3, #25
 8012d0e:	f53f af1f 	bmi.w	8012b50 <_vfiprintf_r+0x44>
 8012d12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012d14:	e71e      	b.n	8012b54 <_vfiprintf_r+0x48>
 8012d16:	ab03      	add	r3, sp, #12
 8012d18:	462a      	mov	r2, r5
 8012d1a:	a904      	add	r1, sp, #16
 8012d1c:	4630      	mov	r0, r6
 8012d1e:	9300      	str	r3, [sp, #0]
 8012d20:	4b04      	ldr	r3, [pc, #16]	@ (8012d34 <_vfiprintf_r+0x228>)
 8012d22:	f000 f87d 	bl	8012e20 <_printf_i>
 8012d26:	e7e4      	b.n	8012cf2 <_vfiprintf_r+0x1e6>
 8012d28:	08013690 	.word	0x08013690
 8012d2c:	0801369a 	.word	0x0801369a
 8012d30:	00000000 	.word	0x00000000
 8012d34:	08012ae7 	.word	0x08012ae7
 8012d38:	08013696 	.word	0x08013696

08012d3c <_printf_common>:
 8012d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d40:	4616      	mov	r6, r2
 8012d42:	4698      	mov	r8, r3
 8012d44:	688a      	ldr	r2, [r1, #8]
 8012d46:	4607      	mov	r7, r0
 8012d48:	690b      	ldr	r3, [r1, #16]
 8012d4a:	460c      	mov	r4, r1
 8012d4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012d50:	4293      	cmp	r3, r2
 8012d52:	bfb8      	it	lt
 8012d54:	4613      	movlt	r3, r2
 8012d56:	6033      	str	r3, [r6, #0]
 8012d58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012d5c:	b10a      	cbz	r2, 8012d62 <_printf_common+0x26>
 8012d5e:	3301      	adds	r3, #1
 8012d60:	6033      	str	r3, [r6, #0]
 8012d62:	6823      	ldr	r3, [r4, #0]
 8012d64:	0699      	lsls	r1, r3, #26
 8012d66:	bf42      	ittt	mi
 8012d68:	6833      	ldrmi	r3, [r6, #0]
 8012d6a:	3302      	addmi	r3, #2
 8012d6c:	6033      	strmi	r3, [r6, #0]
 8012d6e:	6825      	ldr	r5, [r4, #0]
 8012d70:	f015 0506 	ands.w	r5, r5, #6
 8012d74:	d106      	bne.n	8012d84 <_printf_common+0x48>
 8012d76:	f104 0a19 	add.w	sl, r4, #25
 8012d7a:	68e3      	ldr	r3, [r4, #12]
 8012d7c:	6832      	ldr	r2, [r6, #0]
 8012d7e:	1a9b      	subs	r3, r3, r2
 8012d80:	42ab      	cmp	r3, r5
 8012d82:	dc2b      	bgt.n	8012ddc <_printf_common+0xa0>
 8012d84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012d88:	6822      	ldr	r2, [r4, #0]
 8012d8a:	3b00      	subs	r3, #0
 8012d8c:	bf18      	it	ne
 8012d8e:	2301      	movne	r3, #1
 8012d90:	0692      	lsls	r2, r2, #26
 8012d92:	d430      	bmi.n	8012df6 <_printf_common+0xba>
 8012d94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012d98:	4641      	mov	r1, r8
 8012d9a:	4638      	mov	r0, r7
 8012d9c:	47c8      	blx	r9
 8012d9e:	3001      	adds	r0, #1
 8012da0:	d023      	beq.n	8012dea <_printf_common+0xae>
 8012da2:	6823      	ldr	r3, [r4, #0]
 8012da4:	341a      	adds	r4, #26
 8012da6:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8012daa:	f003 0306 	and.w	r3, r3, #6
 8012dae:	2b04      	cmp	r3, #4
 8012db0:	bf0a      	itet	eq
 8012db2:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8012db6:	2500      	movne	r5, #0
 8012db8:	6833      	ldreq	r3, [r6, #0]
 8012dba:	f04f 0600 	mov.w	r6, #0
 8012dbe:	bf08      	it	eq
 8012dc0:	1aed      	subeq	r5, r5, r3
 8012dc2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8012dc6:	bf08      	it	eq
 8012dc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012dcc:	4293      	cmp	r3, r2
 8012dce:	bfc4      	itt	gt
 8012dd0:	1a9b      	subgt	r3, r3, r2
 8012dd2:	18ed      	addgt	r5, r5, r3
 8012dd4:	42b5      	cmp	r5, r6
 8012dd6:	d11a      	bne.n	8012e0e <_printf_common+0xd2>
 8012dd8:	2000      	movs	r0, #0
 8012dda:	e008      	b.n	8012dee <_printf_common+0xb2>
 8012ddc:	2301      	movs	r3, #1
 8012dde:	4652      	mov	r2, sl
 8012de0:	4641      	mov	r1, r8
 8012de2:	4638      	mov	r0, r7
 8012de4:	47c8      	blx	r9
 8012de6:	3001      	adds	r0, #1
 8012de8:	d103      	bne.n	8012df2 <_printf_common+0xb6>
 8012dea:	f04f 30ff 	mov.w	r0, #4294967295
 8012dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012df2:	3501      	adds	r5, #1
 8012df4:	e7c1      	b.n	8012d7a <_printf_common+0x3e>
 8012df6:	18e1      	adds	r1, r4, r3
 8012df8:	1c5a      	adds	r2, r3, #1
 8012dfa:	2030      	movs	r0, #48	@ 0x30
 8012dfc:	3302      	adds	r3, #2
 8012dfe:	4422      	add	r2, r4
 8012e00:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012e04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012e08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012e0c:	e7c2      	b.n	8012d94 <_printf_common+0x58>
 8012e0e:	2301      	movs	r3, #1
 8012e10:	4622      	mov	r2, r4
 8012e12:	4641      	mov	r1, r8
 8012e14:	4638      	mov	r0, r7
 8012e16:	47c8      	blx	r9
 8012e18:	3001      	adds	r0, #1
 8012e1a:	d0e6      	beq.n	8012dea <_printf_common+0xae>
 8012e1c:	3601      	adds	r6, #1
 8012e1e:	e7d9      	b.n	8012dd4 <_printf_common+0x98>

08012e20 <_printf_i>:
 8012e20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012e24:	7e0f      	ldrb	r7, [r1, #24]
 8012e26:	4691      	mov	r9, r2
 8012e28:	4680      	mov	r8, r0
 8012e2a:	460c      	mov	r4, r1
 8012e2c:	2f78      	cmp	r7, #120	@ 0x78
 8012e2e:	469a      	mov	sl, r3
 8012e30:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012e32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012e36:	d807      	bhi.n	8012e48 <_printf_i+0x28>
 8012e38:	2f62      	cmp	r7, #98	@ 0x62
 8012e3a:	d80a      	bhi.n	8012e52 <_printf_i+0x32>
 8012e3c:	2f00      	cmp	r7, #0
 8012e3e:	f000 80d2 	beq.w	8012fe6 <_printf_i+0x1c6>
 8012e42:	2f58      	cmp	r7, #88	@ 0x58
 8012e44:	f000 80b9 	beq.w	8012fba <_printf_i+0x19a>
 8012e48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012e4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012e50:	e03a      	b.n	8012ec8 <_printf_i+0xa8>
 8012e52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012e56:	2b15      	cmp	r3, #21
 8012e58:	d8f6      	bhi.n	8012e48 <_printf_i+0x28>
 8012e5a:	a101      	add	r1, pc, #4	@ (adr r1, 8012e60 <_printf_i+0x40>)
 8012e5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012e60:	08012eb9 	.word	0x08012eb9
 8012e64:	08012ecd 	.word	0x08012ecd
 8012e68:	08012e49 	.word	0x08012e49
 8012e6c:	08012e49 	.word	0x08012e49
 8012e70:	08012e49 	.word	0x08012e49
 8012e74:	08012e49 	.word	0x08012e49
 8012e78:	08012ecd 	.word	0x08012ecd
 8012e7c:	08012e49 	.word	0x08012e49
 8012e80:	08012e49 	.word	0x08012e49
 8012e84:	08012e49 	.word	0x08012e49
 8012e88:	08012e49 	.word	0x08012e49
 8012e8c:	08012fcd 	.word	0x08012fcd
 8012e90:	08012ef7 	.word	0x08012ef7
 8012e94:	08012f87 	.word	0x08012f87
 8012e98:	08012e49 	.word	0x08012e49
 8012e9c:	08012e49 	.word	0x08012e49
 8012ea0:	08012fef 	.word	0x08012fef
 8012ea4:	08012e49 	.word	0x08012e49
 8012ea8:	08012ef7 	.word	0x08012ef7
 8012eac:	08012e49 	.word	0x08012e49
 8012eb0:	08012e49 	.word	0x08012e49
 8012eb4:	08012f8f 	.word	0x08012f8f
 8012eb8:	6833      	ldr	r3, [r6, #0]
 8012eba:	1d1a      	adds	r2, r3, #4
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	6032      	str	r2, [r6, #0]
 8012ec0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012ec4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012ec8:	2301      	movs	r3, #1
 8012eca:	e09d      	b.n	8013008 <_printf_i+0x1e8>
 8012ecc:	6833      	ldr	r3, [r6, #0]
 8012ece:	6820      	ldr	r0, [r4, #0]
 8012ed0:	1d19      	adds	r1, r3, #4
 8012ed2:	6031      	str	r1, [r6, #0]
 8012ed4:	0606      	lsls	r6, r0, #24
 8012ed6:	d501      	bpl.n	8012edc <_printf_i+0xbc>
 8012ed8:	681d      	ldr	r5, [r3, #0]
 8012eda:	e003      	b.n	8012ee4 <_printf_i+0xc4>
 8012edc:	0645      	lsls	r5, r0, #25
 8012ede:	d5fb      	bpl.n	8012ed8 <_printf_i+0xb8>
 8012ee0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012ee4:	2d00      	cmp	r5, #0
 8012ee6:	da03      	bge.n	8012ef0 <_printf_i+0xd0>
 8012ee8:	232d      	movs	r3, #45	@ 0x2d
 8012eea:	426d      	negs	r5, r5
 8012eec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012ef0:	4859      	ldr	r0, [pc, #356]	@ (8013058 <_printf_i+0x238>)
 8012ef2:	230a      	movs	r3, #10
 8012ef4:	e011      	b.n	8012f1a <_printf_i+0xfa>
 8012ef6:	6821      	ldr	r1, [r4, #0]
 8012ef8:	6833      	ldr	r3, [r6, #0]
 8012efa:	0608      	lsls	r0, r1, #24
 8012efc:	f853 5b04 	ldr.w	r5, [r3], #4
 8012f00:	d402      	bmi.n	8012f08 <_printf_i+0xe8>
 8012f02:	0649      	lsls	r1, r1, #25
 8012f04:	bf48      	it	mi
 8012f06:	b2ad      	uxthmi	r5, r5
 8012f08:	2f6f      	cmp	r7, #111	@ 0x6f
 8012f0a:	6033      	str	r3, [r6, #0]
 8012f0c:	4852      	ldr	r0, [pc, #328]	@ (8013058 <_printf_i+0x238>)
 8012f0e:	bf14      	ite	ne
 8012f10:	230a      	movne	r3, #10
 8012f12:	2308      	moveq	r3, #8
 8012f14:	2100      	movs	r1, #0
 8012f16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012f1a:	6866      	ldr	r6, [r4, #4]
 8012f1c:	2e00      	cmp	r6, #0
 8012f1e:	60a6      	str	r6, [r4, #8]
 8012f20:	bfa2      	ittt	ge
 8012f22:	6821      	ldrge	r1, [r4, #0]
 8012f24:	f021 0104 	bicge.w	r1, r1, #4
 8012f28:	6021      	strge	r1, [r4, #0]
 8012f2a:	b90d      	cbnz	r5, 8012f30 <_printf_i+0x110>
 8012f2c:	2e00      	cmp	r6, #0
 8012f2e:	d04b      	beq.n	8012fc8 <_printf_i+0x1a8>
 8012f30:	4616      	mov	r6, r2
 8012f32:	fbb5 f1f3 	udiv	r1, r5, r3
 8012f36:	fb03 5711 	mls	r7, r3, r1, r5
 8012f3a:	5dc7      	ldrb	r7, [r0, r7]
 8012f3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012f40:	462f      	mov	r7, r5
 8012f42:	460d      	mov	r5, r1
 8012f44:	42bb      	cmp	r3, r7
 8012f46:	d9f4      	bls.n	8012f32 <_printf_i+0x112>
 8012f48:	2b08      	cmp	r3, #8
 8012f4a:	d10b      	bne.n	8012f64 <_printf_i+0x144>
 8012f4c:	6823      	ldr	r3, [r4, #0]
 8012f4e:	07df      	lsls	r7, r3, #31
 8012f50:	d508      	bpl.n	8012f64 <_printf_i+0x144>
 8012f52:	6923      	ldr	r3, [r4, #16]
 8012f54:	6861      	ldr	r1, [r4, #4]
 8012f56:	4299      	cmp	r1, r3
 8012f58:	bfde      	ittt	le
 8012f5a:	2330      	movle	r3, #48	@ 0x30
 8012f5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012f60:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012f64:	1b92      	subs	r2, r2, r6
 8012f66:	6122      	str	r2, [r4, #16]
 8012f68:	464b      	mov	r3, r9
 8012f6a:	aa03      	add	r2, sp, #12
 8012f6c:	4621      	mov	r1, r4
 8012f6e:	4640      	mov	r0, r8
 8012f70:	f8cd a000 	str.w	sl, [sp]
 8012f74:	f7ff fee2 	bl	8012d3c <_printf_common>
 8012f78:	3001      	adds	r0, #1
 8012f7a:	d14a      	bne.n	8013012 <_printf_i+0x1f2>
 8012f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8012f80:	b004      	add	sp, #16
 8012f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f86:	6823      	ldr	r3, [r4, #0]
 8012f88:	f043 0320 	orr.w	r3, r3, #32
 8012f8c:	6023      	str	r3, [r4, #0]
 8012f8e:	2778      	movs	r7, #120	@ 0x78
 8012f90:	4832      	ldr	r0, [pc, #200]	@ (801305c <_printf_i+0x23c>)
 8012f92:	6823      	ldr	r3, [r4, #0]
 8012f94:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012f98:	061f      	lsls	r7, r3, #24
 8012f9a:	6831      	ldr	r1, [r6, #0]
 8012f9c:	f851 5b04 	ldr.w	r5, [r1], #4
 8012fa0:	d402      	bmi.n	8012fa8 <_printf_i+0x188>
 8012fa2:	065f      	lsls	r7, r3, #25
 8012fa4:	bf48      	it	mi
 8012fa6:	b2ad      	uxthmi	r5, r5
 8012fa8:	6031      	str	r1, [r6, #0]
 8012faa:	07d9      	lsls	r1, r3, #31
 8012fac:	bf44      	itt	mi
 8012fae:	f043 0320 	orrmi.w	r3, r3, #32
 8012fb2:	6023      	strmi	r3, [r4, #0]
 8012fb4:	b11d      	cbz	r5, 8012fbe <_printf_i+0x19e>
 8012fb6:	2310      	movs	r3, #16
 8012fb8:	e7ac      	b.n	8012f14 <_printf_i+0xf4>
 8012fba:	4827      	ldr	r0, [pc, #156]	@ (8013058 <_printf_i+0x238>)
 8012fbc:	e7e9      	b.n	8012f92 <_printf_i+0x172>
 8012fbe:	6823      	ldr	r3, [r4, #0]
 8012fc0:	f023 0320 	bic.w	r3, r3, #32
 8012fc4:	6023      	str	r3, [r4, #0]
 8012fc6:	e7f6      	b.n	8012fb6 <_printf_i+0x196>
 8012fc8:	4616      	mov	r6, r2
 8012fca:	e7bd      	b.n	8012f48 <_printf_i+0x128>
 8012fcc:	6833      	ldr	r3, [r6, #0]
 8012fce:	6825      	ldr	r5, [r4, #0]
 8012fd0:	1d18      	adds	r0, r3, #4
 8012fd2:	6961      	ldr	r1, [r4, #20]
 8012fd4:	6030      	str	r0, [r6, #0]
 8012fd6:	062e      	lsls	r6, r5, #24
 8012fd8:	681b      	ldr	r3, [r3, #0]
 8012fda:	d501      	bpl.n	8012fe0 <_printf_i+0x1c0>
 8012fdc:	6019      	str	r1, [r3, #0]
 8012fde:	e002      	b.n	8012fe6 <_printf_i+0x1c6>
 8012fe0:	0668      	lsls	r0, r5, #25
 8012fe2:	d5fb      	bpl.n	8012fdc <_printf_i+0x1bc>
 8012fe4:	8019      	strh	r1, [r3, #0]
 8012fe6:	2300      	movs	r3, #0
 8012fe8:	4616      	mov	r6, r2
 8012fea:	6123      	str	r3, [r4, #16]
 8012fec:	e7bc      	b.n	8012f68 <_printf_i+0x148>
 8012fee:	6833      	ldr	r3, [r6, #0]
 8012ff0:	2100      	movs	r1, #0
 8012ff2:	1d1a      	adds	r2, r3, #4
 8012ff4:	6032      	str	r2, [r6, #0]
 8012ff6:	681e      	ldr	r6, [r3, #0]
 8012ff8:	6862      	ldr	r2, [r4, #4]
 8012ffa:	4630      	mov	r0, r6
 8012ffc:	f000 f98a 	bl	8013314 <memchr>
 8013000:	b108      	cbz	r0, 8013006 <_printf_i+0x1e6>
 8013002:	1b80      	subs	r0, r0, r6
 8013004:	6060      	str	r0, [r4, #4]
 8013006:	6863      	ldr	r3, [r4, #4]
 8013008:	6123      	str	r3, [r4, #16]
 801300a:	2300      	movs	r3, #0
 801300c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013010:	e7aa      	b.n	8012f68 <_printf_i+0x148>
 8013012:	6923      	ldr	r3, [r4, #16]
 8013014:	4632      	mov	r2, r6
 8013016:	4649      	mov	r1, r9
 8013018:	4640      	mov	r0, r8
 801301a:	47d0      	blx	sl
 801301c:	3001      	adds	r0, #1
 801301e:	d0ad      	beq.n	8012f7c <_printf_i+0x15c>
 8013020:	6823      	ldr	r3, [r4, #0]
 8013022:	079b      	lsls	r3, r3, #30
 8013024:	d413      	bmi.n	801304e <_printf_i+0x22e>
 8013026:	68e0      	ldr	r0, [r4, #12]
 8013028:	9b03      	ldr	r3, [sp, #12]
 801302a:	4298      	cmp	r0, r3
 801302c:	bfb8      	it	lt
 801302e:	4618      	movlt	r0, r3
 8013030:	e7a6      	b.n	8012f80 <_printf_i+0x160>
 8013032:	2301      	movs	r3, #1
 8013034:	4632      	mov	r2, r6
 8013036:	4649      	mov	r1, r9
 8013038:	4640      	mov	r0, r8
 801303a:	47d0      	blx	sl
 801303c:	3001      	adds	r0, #1
 801303e:	d09d      	beq.n	8012f7c <_printf_i+0x15c>
 8013040:	3501      	adds	r5, #1
 8013042:	68e3      	ldr	r3, [r4, #12]
 8013044:	9903      	ldr	r1, [sp, #12]
 8013046:	1a5b      	subs	r3, r3, r1
 8013048:	42ab      	cmp	r3, r5
 801304a:	dcf2      	bgt.n	8013032 <_printf_i+0x212>
 801304c:	e7eb      	b.n	8013026 <_printf_i+0x206>
 801304e:	2500      	movs	r5, #0
 8013050:	f104 0619 	add.w	r6, r4, #25
 8013054:	e7f5      	b.n	8013042 <_printf_i+0x222>
 8013056:	bf00      	nop
 8013058:	080136a1 	.word	0x080136a1
 801305c:	080136b2 	.word	0x080136b2

08013060 <__sflush_r>:
 8013060:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013068:	0716      	lsls	r6, r2, #28
 801306a:	4605      	mov	r5, r0
 801306c:	460c      	mov	r4, r1
 801306e:	d454      	bmi.n	801311a <__sflush_r+0xba>
 8013070:	684b      	ldr	r3, [r1, #4]
 8013072:	2b00      	cmp	r3, #0
 8013074:	dc02      	bgt.n	801307c <__sflush_r+0x1c>
 8013076:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013078:	2b00      	cmp	r3, #0
 801307a:	dd48      	ble.n	801310e <__sflush_r+0xae>
 801307c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801307e:	2e00      	cmp	r6, #0
 8013080:	d045      	beq.n	801310e <__sflush_r+0xae>
 8013082:	2300      	movs	r3, #0
 8013084:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013088:	682f      	ldr	r7, [r5, #0]
 801308a:	6a21      	ldr	r1, [r4, #32]
 801308c:	602b      	str	r3, [r5, #0]
 801308e:	d030      	beq.n	80130f2 <__sflush_r+0x92>
 8013090:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013092:	89a3      	ldrh	r3, [r4, #12]
 8013094:	0759      	lsls	r1, r3, #29
 8013096:	d505      	bpl.n	80130a4 <__sflush_r+0x44>
 8013098:	6863      	ldr	r3, [r4, #4]
 801309a:	1ad2      	subs	r2, r2, r3
 801309c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801309e:	b10b      	cbz	r3, 80130a4 <__sflush_r+0x44>
 80130a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80130a2:	1ad2      	subs	r2, r2, r3
 80130a4:	2300      	movs	r3, #0
 80130a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80130a8:	6a21      	ldr	r1, [r4, #32]
 80130aa:	4628      	mov	r0, r5
 80130ac:	47b0      	blx	r6
 80130ae:	1c43      	adds	r3, r0, #1
 80130b0:	89a3      	ldrh	r3, [r4, #12]
 80130b2:	d106      	bne.n	80130c2 <__sflush_r+0x62>
 80130b4:	6829      	ldr	r1, [r5, #0]
 80130b6:	291d      	cmp	r1, #29
 80130b8:	d82b      	bhi.n	8013112 <__sflush_r+0xb2>
 80130ba:	4a2a      	ldr	r2, [pc, #168]	@ (8013164 <__sflush_r+0x104>)
 80130bc:	410a      	asrs	r2, r1
 80130be:	07d6      	lsls	r6, r2, #31
 80130c0:	d427      	bmi.n	8013112 <__sflush_r+0xb2>
 80130c2:	2200      	movs	r2, #0
 80130c4:	04d9      	lsls	r1, r3, #19
 80130c6:	6062      	str	r2, [r4, #4]
 80130c8:	6922      	ldr	r2, [r4, #16]
 80130ca:	6022      	str	r2, [r4, #0]
 80130cc:	d504      	bpl.n	80130d8 <__sflush_r+0x78>
 80130ce:	1c42      	adds	r2, r0, #1
 80130d0:	d101      	bne.n	80130d6 <__sflush_r+0x76>
 80130d2:	682b      	ldr	r3, [r5, #0]
 80130d4:	b903      	cbnz	r3, 80130d8 <__sflush_r+0x78>
 80130d6:	6560      	str	r0, [r4, #84]	@ 0x54
 80130d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80130da:	602f      	str	r7, [r5, #0]
 80130dc:	b1b9      	cbz	r1, 801310e <__sflush_r+0xae>
 80130de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80130e2:	4299      	cmp	r1, r3
 80130e4:	d002      	beq.n	80130ec <__sflush_r+0x8c>
 80130e6:	4628      	mov	r0, r5
 80130e8:	f7ff fb44 	bl	8012774 <_free_r>
 80130ec:	2300      	movs	r3, #0
 80130ee:	6363      	str	r3, [r4, #52]	@ 0x34
 80130f0:	e00d      	b.n	801310e <__sflush_r+0xae>
 80130f2:	2301      	movs	r3, #1
 80130f4:	4628      	mov	r0, r5
 80130f6:	47b0      	blx	r6
 80130f8:	4602      	mov	r2, r0
 80130fa:	1c50      	adds	r0, r2, #1
 80130fc:	d1c9      	bne.n	8013092 <__sflush_r+0x32>
 80130fe:	682b      	ldr	r3, [r5, #0]
 8013100:	2b00      	cmp	r3, #0
 8013102:	d0c6      	beq.n	8013092 <__sflush_r+0x32>
 8013104:	2b1d      	cmp	r3, #29
 8013106:	d001      	beq.n	801310c <__sflush_r+0xac>
 8013108:	2b16      	cmp	r3, #22
 801310a:	d11d      	bne.n	8013148 <__sflush_r+0xe8>
 801310c:	602f      	str	r7, [r5, #0]
 801310e:	2000      	movs	r0, #0
 8013110:	e021      	b.n	8013156 <__sflush_r+0xf6>
 8013112:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013116:	b21b      	sxth	r3, r3
 8013118:	e01a      	b.n	8013150 <__sflush_r+0xf0>
 801311a:	690f      	ldr	r7, [r1, #16]
 801311c:	2f00      	cmp	r7, #0
 801311e:	d0f6      	beq.n	801310e <__sflush_r+0xae>
 8013120:	0793      	lsls	r3, r2, #30
 8013122:	680e      	ldr	r6, [r1, #0]
 8013124:	600f      	str	r7, [r1, #0]
 8013126:	bf0c      	ite	eq
 8013128:	694b      	ldreq	r3, [r1, #20]
 801312a:	2300      	movne	r3, #0
 801312c:	eba6 0807 	sub.w	r8, r6, r7
 8013130:	608b      	str	r3, [r1, #8]
 8013132:	f1b8 0f00 	cmp.w	r8, #0
 8013136:	ddea      	ble.n	801310e <__sflush_r+0xae>
 8013138:	4643      	mov	r3, r8
 801313a:	463a      	mov	r2, r7
 801313c:	6a21      	ldr	r1, [r4, #32]
 801313e:	4628      	mov	r0, r5
 8013140:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013142:	47b0      	blx	r6
 8013144:	2800      	cmp	r0, #0
 8013146:	dc08      	bgt.n	801315a <__sflush_r+0xfa>
 8013148:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801314c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013150:	f04f 30ff 	mov.w	r0, #4294967295
 8013154:	81a3      	strh	r3, [r4, #12]
 8013156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801315a:	4407      	add	r7, r0
 801315c:	eba8 0800 	sub.w	r8, r8, r0
 8013160:	e7e7      	b.n	8013132 <__sflush_r+0xd2>
 8013162:	bf00      	nop
 8013164:	dfbffffe 	.word	0xdfbffffe

08013168 <_fflush_r>:
 8013168:	b538      	push	{r3, r4, r5, lr}
 801316a:	690b      	ldr	r3, [r1, #16]
 801316c:	4605      	mov	r5, r0
 801316e:	460c      	mov	r4, r1
 8013170:	b913      	cbnz	r3, 8013178 <_fflush_r+0x10>
 8013172:	2500      	movs	r5, #0
 8013174:	4628      	mov	r0, r5
 8013176:	bd38      	pop	{r3, r4, r5, pc}
 8013178:	b118      	cbz	r0, 8013182 <_fflush_r+0x1a>
 801317a:	6a03      	ldr	r3, [r0, #32]
 801317c:	b90b      	cbnz	r3, 8013182 <_fflush_r+0x1a>
 801317e:	f7ff f969 	bl	8012454 <__sinit>
 8013182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013186:	2b00      	cmp	r3, #0
 8013188:	d0f3      	beq.n	8013172 <_fflush_r+0xa>
 801318a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801318c:	07d0      	lsls	r0, r2, #31
 801318e:	d404      	bmi.n	801319a <_fflush_r+0x32>
 8013190:	0599      	lsls	r1, r3, #22
 8013192:	d402      	bmi.n	801319a <_fflush_r+0x32>
 8013194:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013196:	f7ff fade 	bl	8012756 <__retarget_lock_acquire_recursive>
 801319a:	4628      	mov	r0, r5
 801319c:	4621      	mov	r1, r4
 801319e:	f7ff ff5f 	bl	8013060 <__sflush_r>
 80131a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80131a4:	4605      	mov	r5, r0
 80131a6:	07da      	lsls	r2, r3, #31
 80131a8:	d4e4      	bmi.n	8013174 <_fflush_r+0xc>
 80131aa:	89a3      	ldrh	r3, [r4, #12]
 80131ac:	059b      	lsls	r3, r3, #22
 80131ae:	d4e1      	bmi.n	8013174 <_fflush_r+0xc>
 80131b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80131b2:	f7ff fad1 	bl	8012758 <__retarget_lock_release_recursive>
 80131b6:	e7dd      	b.n	8013174 <_fflush_r+0xc>

080131b8 <__swbuf_r>:
 80131b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131ba:	460e      	mov	r6, r1
 80131bc:	4614      	mov	r4, r2
 80131be:	4605      	mov	r5, r0
 80131c0:	b118      	cbz	r0, 80131ca <__swbuf_r+0x12>
 80131c2:	6a03      	ldr	r3, [r0, #32]
 80131c4:	b90b      	cbnz	r3, 80131ca <__swbuf_r+0x12>
 80131c6:	f7ff f945 	bl	8012454 <__sinit>
 80131ca:	69a3      	ldr	r3, [r4, #24]
 80131cc:	60a3      	str	r3, [r4, #8]
 80131ce:	89a3      	ldrh	r3, [r4, #12]
 80131d0:	071a      	lsls	r2, r3, #28
 80131d2:	d501      	bpl.n	80131d8 <__swbuf_r+0x20>
 80131d4:	6923      	ldr	r3, [r4, #16]
 80131d6:	b943      	cbnz	r3, 80131ea <__swbuf_r+0x32>
 80131d8:	4621      	mov	r1, r4
 80131da:	4628      	mov	r0, r5
 80131dc:	f000 f82a 	bl	8013234 <__swsetup_r>
 80131e0:	b118      	cbz	r0, 80131ea <__swbuf_r+0x32>
 80131e2:	f04f 37ff 	mov.w	r7, #4294967295
 80131e6:	4638      	mov	r0, r7
 80131e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131ea:	6823      	ldr	r3, [r4, #0]
 80131ec:	b2f6      	uxtb	r6, r6
 80131ee:	6922      	ldr	r2, [r4, #16]
 80131f0:	4637      	mov	r7, r6
 80131f2:	1a98      	subs	r0, r3, r2
 80131f4:	6963      	ldr	r3, [r4, #20]
 80131f6:	4283      	cmp	r3, r0
 80131f8:	dc05      	bgt.n	8013206 <__swbuf_r+0x4e>
 80131fa:	4621      	mov	r1, r4
 80131fc:	4628      	mov	r0, r5
 80131fe:	f7ff ffb3 	bl	8013168 <_fflush_r>
 8013202:	2800      	cmp	r0, #0
 8013204:	d1ed      	bne.n	80131e2 <__swbuf_r+0x2a>
 8013206:	68a3      	ldr	r3, [r4, #8]
 8013208:	3b01      	subs	r3, #1
 801320a:	60a3      	str	r3, [r4, #8]
 801320c:	6823      	ldr	r3, [r4, #0]
 801320e:	1c5a      	adds	r2, r3, #1
 8013210:	6022      	str	r2, [r4, #0]
 8013212:	701e      	strb	r6, [r3, #0]
 8013214:	1c43      	adds	r3, r0, #1
 8013216:	6962      	ldr	r2, [r4, #20]
 8013218:	429a      	cmp	r2, r3
 801321a:	d004      	beq.n	8013226 <__swbuf_r+0x6e>
 801321c:	89a3      	ldrh	r3, [r4, #12]
 801321e:	07db      	lsls	r3, r3, #31
 8013220:	d5e1      	bpl.n	80131e6 <__swbuf_r+0x2e>
 8013222:	2e0a      	cmp	r6, #10
 8013224:	d1df      	bne.n	80131e6 <__swbuf_r+0x2e>
 8013226:	4621      	mov	r1, r4
 8013228:	4628      	mov	r0, r5
 801322a:	f7ff ff9d 	bl	8013168 <_fflush_r>
 801322e:	2800      	cmp	r0, #0
 8013230:	d0d9      	beq.n	80131e6 <__swbuf_r+0x2e>
 8013232:	e7d6      	b.n	80131e2 <__swbuf_r+0x2a>

08013234 <__swsetup_r>:
 8013234:	b538      	push	{r3, r4, r5, lr}
 8013236:	4b29      	ldr	r3, [pc, #164]	@ (80132dc <__swsetup_r+0xa8>)
 8013238:	4605      	mov	r5, r0
 801323a:	460c      	mov	r4, r1
 801323c:	6818      	ldr	r0, [r3, #0]
 801323e:	b118      	cbz	r0, 8013248 <__swsetup_r+0x14>
 8013240:	6a03      	ldr	r3, [r0, #32]
 8013242:	b90b      	cbnz	r3, 8013248 <__swsetup_r+0x14>
 8013244:	f7ff f906 	bl	8012454 <__sinit>
 8013248:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801324c:	0719      	lsls	r1, r3, #28
 801324e:	d422      	bmi.n	8013296 <__swsetup_r+0x62>
 8013250:	06da      	lsls	r2, r3, #27
 8013252:	d407      	bmi.n	8013264 <__swsetup_r+0x30>
 8013254:	2209      	movs	r2, #9
 8013256:	602a      	str	r2, [r5, #0]
 8013258:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801325c:	f04f 30ff 	mov.w	r0, #4294967295
 8013260:	81a3      	strh	r3, [r4, #12]
 8013262:	e033      	b.n	80132cc <__swsetup_r+0x98>
 8013264:	0758      	lsls	r0, r3, #29
 8013266:	d512      	bpl.n	801328e <__swsetup_r+0x5a>
 8013268:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801326a:	b141      	cbz	r1, 801327e <__swsetup_r+0x4a>
 801326c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013270:	4299      	cmp	r1, r3
 8013272:	d002      	beq.n	801327a <__swsetup_r+0x46>
 8013274:	4628      	mov	r0, r5
 8013276:	f7ff fa7d 	bl	8012774 <_free_r>
 801327a:	2300      	movs	r3, #0
 801327c:	6363      	str	r3, [r4, #52]	@ 0x34
 801327e:	89a3      	ldrh	r3, [r4, #12]
 8013280:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013284:	81a3      	strh	r3, [r4, #12]
 8013286:	2300      	movs	r3, #0
 8013288:	6063      	str	r3, [r4, #4]
 801328a:	6923      	ldr	r3, [r4, #16]
 801328c:	6023      	str	r3, [r4, #0]
 801328e:	89a3      	ldrh	r3, [r4, #12]
 8013290:	f043 0308 	orr.w	r3, r3, #8
 8013294:	81a3      	strh	r3, [r4, #12]
 8013296:	6923      	ldr	r3, [r4, #16]
 8013298:	b94b      	cbnz	r3, 80132ae <__swsetup_r+0x7a>
 801329a:	89a3      	ldrh	r3, [r4, #12]
 801329c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80132a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80132a4:	d003      	beq.n	80132ae <__swsetup_r+0x7a>
 80132a6:	4621      	mov	r1, r4
 80132a8:	4628      	mov	r0, r5
 80132aa:	f000 f894 	bl	80133d6 <__smakebuf_r>
 80132ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80132b2:	f013 0201 	ands.w	r2, r3, #1
 80132b6:	d00a      	beq.n	80132ce <__swsetup_r+0x9a>
 80132b8:	2200      	movs	r2, #0
 80132ba:	60a2      	str	r2, [r4, #8]
 80132bc:	6962      	ldr	r2, [r4, #20]
 80132be:	4252      	negs	r2, r2
 80132c0:	61a2      	str	r2, [r4, #24]
 80132c2:	6922      	ldr	r2, [r4, #16]
 80132c4:	b942      	cbnz	r2, 80132d8 <__swsetup_r+0xa4>
 80132c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80132ca:	d1c5      	bne.n	8013258 <__swsetup_r+0x24>
 80132cc:	bd38      	pop	{r3, r4, r5, pc}
 80132ce:	0799      	lsls	r1, r3, #30
 80132d0:	bf58      	it	pl
 80132d2:	6962      	ldrpl	r2, [r4, #20]
 80132d4:	60a2      	str	r2, [r4, #8]
 80132d6:	e7f4      	b.n	80132c2 <__swsetup_r+0x8e>
 80132d8:	2000      	movs	r0, #0
 80132da:	e7f7      	b.n	80132cc <__swsetup_r+0x98>
 80132dc:	20000130 	.word	0x20000130

080132e0 <memmove>:
 80132e0:	4288      	cmp	r0, r1
 80132e2:	b510      	push	{r4, lr}
 80132e4:	eb01 0402 	add.w	r4, r1, r2
 80132e8:	d902      	bls.n	80132f0 <memmove+0x10>
 80132ea:	4284      	cmp	r4, r0
 80132ec:	4623      	mov	r3, r4
 80132ee:	d807      	bhi.n	8013300 <memmove+0x20>
 80132f0:	1e43      	subs	r3, r0, #1
 80132f2:	42a1      	cmp	r1, r4
 80132f4:	d008      	beq.n	8013308 <memmove+0x28>
 80132f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80132fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80132fe:	e7f8      	b.n	80132f2 <memmove+0x12>
 8013300:	4402      	add	r2, r0
 8013302:	4601      	mov	r1, r0
 8013304:	428a      	cmp	r2, r1
 8013306:	d100      	bne.n	801330a <memmove+0x2a>
 8013308:	bd10      	pop	{r4, pc}
 801330a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801330e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013312:	e7f7      	b.n	8013304 <memmove+0x24>

08013314 <memchr>:
 8013314:	b2c9      	uxtb	r1, r1
 8013316:	4603      	mov	r3, r0
 8013318:	4402      	add	r2, r0
 801331a:	b510      	push	{r4, lr}
 801331c:	4293      	cmp	r3, r2
 801331e:	4618      	mov	r0, r3
 8013320:	d101      	bne.n	8013326 <memchr+0x12>
 8013322:	2000      	movs	r0, #0
 8013324:	e003      	b.n	801332e <memchr+0x1a>
 8013326:	7804      	ldrb	r4, [r0, #0]
 8013328:	3301      	adds	r3, #1
 801332a:	428c      	cmp	r4, r1
 801332c:	d1f6      	bne.n	801331c <memchr+0x8>
 801332e:	bd10      	pop	{r4, pc}

08013330 <_realloc_r>:
 8013330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013334:	4680      	mov	r8, r0
 8013336:	4615      	mov	r5, r2
 8013338:	460c      	mov	r4, r1
 801333a:	b921      	cbnz	r1, 8013346 <_realloc_r+0x16>
 801333c:	4611      	mov	r1, r2
 801333e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013342:	f7fe bf6f 	b.w	8012224 <_malloc_r>
 8013346:	b92a      	cbnz	r2, 8013354 <_realloc_r+0x24>
 8013348:	f7ff fa14 	bl	8012774 <_free_r>
 801334c:	2400      	movs	r4, #0
 801334e:	4620      	mov	r0, r4
 8013350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013354:	f000 f89e 	bl	8013494 <_malloc_usable_size_r>
 8013358:	4285      	cmp	r5, r0
 801335a:	4606      	mov	r6, r0
 801335c:	d802      	bhi.n	8013364 <_realloc_r+0x34>
 801335e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8013362:	d8f4      	bhi.n	801334e <_realloc_r+0x1e>
 8013364:	4629      	mov	r1, r5
 8013366:	4640      	mov	r0, r8
 8013368:	f7fe ff5c 	bl	8012224 <_malloc_r>
 801336c:	4607      	mov	r7, r0
 801336e:	2800      	cmp	r0, #0
 8013370:	d0ec      	beq.n	801334c <_realloc_r+0x1c>
 8013372:	42b5      	cmp	r5, r6
 8013374:	462a      	mov	r2, r5
 8013376:	4621      	mov	r1, r4
 8013378:	bf28      	it	cs
 801337a:	4632      	movcs	r2, r6
 801337c:	f7ff f9ed 	bl	801275a <memcpy>
 8013380:	4621      	mov	r1, r4
 8013382:	4640      	mov	r0, r8
 8013384:	463c      	mov	r4, r7
 8013386:	f7ff f9f5 	bl	8012774 <_free_r>
 801338a:	e7e0      	b.n	801334e <_realloc_r+0x1e>

0801338c <__swhatbuf_r>:
 801338c:	b570      	push	{r4, r5, r6, lr}
 801338e:	460c      	mov	r4, r1
 8013390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013394:	b096      	sub	sp, #88	@ 0x58
 8013396:	4615      	mov	r5, r2
 8013398:	2900      	cmp	r1, #0
 801339a:	461e      	mov	r6, r3
 801339c:	da0c      	bge.n	80133b8 <__swhatbuf_r+0x2c>
 801339e:	89a3      	ldrh	r3, [r4, #12]
 80133a0:	2100      	movs	r1, #0
 80133a2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80133a6:	bf14      	ite	ne
 80133a8:	2340      	movne	r3, #64	@ 0x40
 80133aa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80133ae:	2000      	movs	r0, #0
 80133b0:	6031      	str	r1, [r6, #0]
 80133b2:	602b      	str	r3, [r5, #0]
 80133b4:	b016      	add	sp, #88	@ 0x58
 80133b6:	bd70      	pop	{r4, r5, r6, pc}
 80133b8:	466a      	mov	r2, sp
 80133ba:	f000 f849 	bl	8013450 <_fstat_r>
 80133be:	2800      	cmp	r0, #0
 80133c0:	dbed      	blt.n	801339e <__swhatbuf_r+0x12>
 80133c2:	9901      	ldr	r1, [sp, #4]
 80133c4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80133c8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80133cc:	4259      	negs	r1, r3
 80133ce:	4159      	adcs	r1, r3
 80133d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80133d4:	e7eb      	b.n	80133ae <__swhatbuf_r+0x22>

080133d6 <__smakebuf_r>:
 80133d6:	898b      	ldrh	r3, [r1, #12]
 80133d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80133da:	079d      	lsls	r5, r3, #30
 80133dc:	4606      	mov	r6, r0
 80133de:	460c      	mov	r4, r1
 80133e0:	d507      	bpl.n	80133f2 <__smakebuf_r+0x1c>
 80133e2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80133e6:	6023      	str	r3, [r4, #0]
 80133e8:	6123      	str	r3, [r4, #16]
 80133ea:	2301      	movs	r3, #1
 80133ec:	6163      	str	r3, [r4, #20]
 80133ee:	b003      	add	sp, #12
 80133f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80133f2:	ab01      	add	r3, sp, #4
 80133f4:	466a      	mov	r2, sp
 80133f6:	f7ff ffc9 	bl	801338c <__swhatbuf_r>
 80133fa:	9f00      	ldr	r7, [sp, #0]
 80133fc:	4605      	mov	r5, r0
 80133fe:	4630      	mov	r0, r6
 8013400:	4639      	mov	r1, r7
 8013402:	f7fe ff0f 	bl	8012224 <_malloc_r>
 8013406:	b948      	cbnz	r0, 801341c <__smakebuf_r+0x46>
 8013408:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801340c:	059a      	lsls	r2, r3, #22
 801340e:	d4ee      	bmi.n	80133ee <__smakebuf_r+0x18>
 8013410:	f023 0303 	bic.w	r3, r3, #3
 8013414:	f043 0302 	orr.w	r3, r3, #2
 8013418:	81a3      	strh	r3, [r4, #12]
 801341a:	e7e2      	b.n	80133e2 <__smakebuf_r+0xc>
 801341c:	89a3      	ldrh	r3, [r4, #12]
 801341e:	6020      	str	r0, [r4, #0]
 8013420:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013424:	81a3      	strh	r3, [r4, #12]
 8013426:	9b01      	ldr	r3, [sp, #4]
 8013428:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801342c:	b15b      	cbz	r3, 8013446 <__smakebuf_r+0x70>
 801342e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013432:	4630      	mov	r0, r6
 8013434:	f000 f81e 	bl	8013474 <_isatty_r>
 8013438:	b128      	cbz	r0, 8013446 <__smakebuf_r+0x70>
 801343a:	89a3      	ldrh	r3, [r4, #12]
 801343c:	f023 0303 	bic.w	r3, r3, #3
 8013440:	f043 0301 	orr.w	r3, r3, #1
 8013444:	81a3      	strh	r3, [r4, #12]
 8013446:	89a3      	ldrh	r3, [r4, #12]
 8013448:	431d      	orrs	r5, r3
 801344a:	81a5      	strh	r5, [r4, #12]
 801344c:	e7cf      	b.n	80133ee <__smakebuf_r+0x18>
	...

08013450 <_fstat_r>:
 8013450:	b538      	push	{r3, r4, r5, lr}
 8013452:	2300      	movs	r3, #0
 8013454:	4d06      	ldr	r5, [pc, #24]	@ (8013470 <_fstat_r+0x20>)
 8013456:	4604      	mov	r4, r0
 8013458:	4608      	mov	r0, r1
 801345a:	4611      	mov	r1, r2
 801345c:	602b      	str	r3, [r5, #0]
 801345e:	f7ee fe50 	bl	8002102 <_fstat>
 8013462:	1c43      	adds	r3, r0, #1
 8013464:	d102      	bne.n	801346c <_fstat_r+0x1c>
 8013466:	682b      	ldr	r3, [r5, #0]
 8013468:	b103      	cbz	r3, 801346c <_fstat_r+0x1c>
 801346a:	6023      	str	r3, [r4, #0]
 801346c:	bd38      	pop	{r3, r4, r5, pc}
 801346e:	bf00      	nop
 8013470:	20011318 	.word	0x20011318

08013474 <_isatty_r>:
 8013474:	b538      	push	{r3, r4, r5, lr}
 8013476:	2300      	movs	r3, #0
 8013478:	4d05      	ldr	r5, [pc, #20]	@ (8013490 <_isatty_r+0x1c>)
 801347a:	4604      	mov	r4, r0
 801347c:	4608      	mov	r0, r1
 801347e:	602b      	str	r3, [r5, #0]
 8013480:	f7ee fe4f 	bl	8002122 <_isatty>
 8013484:	1c43      	adds	r3, r0, #1
 8013486:	d102      	bne.n	801348e <_isatty_r+0x1a>
 8013488:	682b      	ldr	r3, [r5, #0]
 801348a:	b103      	cbz	r3, 801348e <_isatty_r+0x1a>
 801348c:	6023      	str	r3, [r4, #0]
 801348e:	bd38      	pop	{r3, r4, r5, pc}
 8013490:	20011318 	.word	0x20011318

08013494 <_malloc_usable_size_r>:
 8013494:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013498:	1f18      	subs	r0, r3, #4
 801349a:	2b00      	cmp	r3, #0
 801349c:	bfbc      	itt	lt
 801349e:	580b      	ldrlt	r3, [r1, r0]
 80134a0:	18c0      	addlt	r0, r0, r3
 80134a2:	4770      	bx	lr

080134a4 <_init>:
 80134a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134a6:	bf00      	nop
 80134a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80134aa:	bc08      	pop	{r3}
 80134ac:	469e      	mov	lr, r3
 80134ae:	4770      	bx	lr

080134b0 <_fini>:
 80134b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134b2:	bf00      	nop
 80134b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80134b6:	bc08      	pop	{r3}
 80134b8:	469e      	mov	lr, r3
 80134ba:	4770      	bx	lr
