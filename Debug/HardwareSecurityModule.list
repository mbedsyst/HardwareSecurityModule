
HardwareSecurityModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001327c  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cf8  080134c8  080134c8  000144c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080141c0  080141c0  00016180  2**0
                  CONTENTS
  4 .ARM          00000008  080141c0  080141c0  000151c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080141c8  080141c8  00016180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080141c8  080141c8  000151c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080141cc  080141cc  000151cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000180  20000000  080141d0  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000111e0  20000180  08014350  00016180  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  20011360  08014350  00016360  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00016180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002868c  00000000  00000000  000161b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000583b  00000000  00000000  0003e842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ee0  00000000  00000000  00044080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001791  00000000  00000000  00045f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039874  00000000  00000000  000476f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f424  00000000  00000000  00080f65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014c231  00000000  00000000  000b0389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001fc5ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b88  00000000  00000000  001fc600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00205188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000180 	.word	0x20000180
 8000268:	00000000 	.word	0x00000000
 800026c:	080134b0 	.word	0x080134b0

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000184 	.word	0x20000184
 8000288:	080134b0 	.word	0x080134b0

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295
 800029c:	f04f 30ff 	movne.w	r0, #4294967295
 80002a0:	f000 b97e 	b.w	80005a0 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002c2:	460c      	mov	r4, r1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d14d      	bne.n	8000364 <__udivmoddi4+0xa8>
 80002c8:	428a      	cmp	r2, r1
 80002ca:	460f      	mov	r7, r1
 80002cc:	4684      	mov	ip, r0
 80002ce:	4696      	mov	lr, r2
 80002d0:	fab2 f382 	clz	r3, r2
 80002d4:	d960      	bls.n	8000398 <__udivmoddi4+0xdc>
 80002d6:	b14b      	cbz	r3, 80002ec <__udivmoddi4+0x30>
 80002d8:	fa02 fe03 	lsl.w	lr, r2, r3
 80002dc:	f1c3 0220 	rsb	r2, r3, #32
 80002e0:	409f      	lsls	r7, r3
 80002e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002f0:	fa1f f48e 	uxth.w	r4, lr
 80002f4:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002f8:	fbb7 f1f6 	udiv	r1, r7, r6
 80002fc:	fb06 7711 	mls	r7, r6, r1, r7
 8000300:	fb01 f004 	mul.w	r0, r1, r4
 8000304:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000308:	4290      	cmp	r0, r2
 800030a:	d908      	bls.n	800031e <__udivmoddi4+0x62>
 800030c:	eb1e 0202 	adds.w	r2, lr, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x60>
 8000316:	4290      	cmp	r0, r2
 8000318:	f200 812d 	bhi.w	8000576 <__udivmoddi4+0x2ba>
 800031c:	4639      	mov	r1, r7
 800031e:	1a12      	subs	r2, r2, r0
 8000320:	fa1f fc8c 	uxth.w	ip, ip
 8000324:	fbb2 f0f6 	udiv	r0, r2, r6
 8000328:	fb06 2210 	mls	r2, r6, r0, r2
 800032c:	fb00 f404 	mul.w	r4, r0, r4
 8000330:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000334:	4564      	cmp	r4, ip
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x8e>
 8000338:	eb1e 0c0c 	adds.w	ip, lr, ip
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x8c>
 8000342:	4564      	cmp	r4, ip
 8000344:	f200 811a 	bhi.w	800057c <__udivmoddi4+0x2c0>
 8000348:	4610      	mov	r0, r2
 800034a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034e:	ebac 0c04 	sub.w	ip, ip, r4
 8000352:	2100      	movs	r1, #0
 8000354:	b125      	cbz	r5, 8000360 <__udivmoddi4+0xa4>
 8000356:	fa2c f303 	lsr.w	r3, ip, r3
 800035a:	2200      	movs	r2, #0
 800035c:	e9c5 3200 	strd	r3, r2, [r5]
 8000360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d905      	bls.n	8000374 <__udivmoddi4+0xb8>
 8000368:	b10d      	cbz	r5, 800036e <__udivmoddi4+0xb2>
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	2100      	movs	r1, #0
 8000370:	4608      	mov	r0, r1
 8000372:	e7f5      	b.n	8000360 <__udivmoddi4+0xa4>
 8000374:	fab3 f183 	clz	r1, r3
 8000378:	2900      	cmp	r1, #0
 800037a:	d14d      	bne.n	8000418 <__udivmoddi4+0x15c>
 800037c:	42a3      	cmp	r3, r4
 800037e:	f0c0 80f2 	bcc.w	8000566 <__udivmoddi4+0x2aa>
 8000382:	4290      	cmp	r0, r2
 8000384:	f080 80ef 	bcs.w	8000566 <__udivmoddi4+0x2aa>
 8000388:	4606      	mov	r6, r0
 800038a:	4623      	mov	r3, r4
 800038c:	4608      	mov	r0, r1
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e6      	beq.n	8000360 <__udivmoddi4+0xa4>
 8000392:	e9c5 6300 	strd	r6, r3, [r5]
 8000396:	e7e3      	b.n	8000360 <__udivmoddi4+0xa4>
 8000398:	2b00      	cmp	r3, #0
 800039a:	f040 80a2 	bne.w	80004e2 <__udivmoddi4+0x226>
 800039e:	1a8a      	subs	r2, r1, r2
 80003a0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003a4:	fa1f f68e 	uxth.w	r6, lr
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 f4f7 	udiv	r4, r2, r7
 80003ae:	fb07 2014 	mls	r0, r7, r4, r2
 80003b2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb06 f004 	mul.w	r0, r6, r4
 80003be:	4290      	cmp	r0, r2
 80003c0:	d90f      	bls.n	80003e2 <__udivmoddi4+0x126>
 80003c2:	eb1e 0202 	adds.w	r2, lr, r2
 80003c6:	f104 38ff 	add.w	r8, r4, #4294967295
 80003ca:	bf2c      	ite	cs
 80003cc:	f04f 0901 	movcs.w	r9, #1
 80003d0:	f04f 0900 	movcc.w	r9, #0
 80003d4:	4290      	cmp	r0, r2
 80003d6:	d903      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003d8:	f1b9 0f00 	cmp.w	r9, #0
 80003dc:	f000 80c8 	beq.w	8000570 <__udivmoddi4+0x2b4>
 80003e0:	4644      	mov	r4, r8
 80003e2:	1a12      	subs	r2, r2, r0
 80003e4:	fa1f fc8c 	uxth.w	ip, ip
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	fb00 f606 	mul.w	r6, r0, r6
 80003f4:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003f8:	4566      	cmp	r6, ip
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x152>
 80003fc:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x150>
 8000406:	4566      	cmp	r6, ip
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c6>
 800040c:	4610      	mov	r0, r2
 800040e:	ebac 0c06 	sub.w	ip, ip, r6
 8000412:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000416:	e79d      	b.n	8000354 <__udivmoddi4+0x98>
 8000418:	f1c1 0620 	rsb	r6, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	fa20 fc06 	lsr.w	ip, r0, r6
 800042a:	40f4      	lsrs	r4, r6
 800042c:	408a      	lsls	r2, r1
 800042e:	431f      	orrs	r7, r3
 8000430:	ea4e 030c 	orr.w	r3, lr, ip
 8000434:	fa00 fe01 	lsl.w	lr, r0, r1
 8000438:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800043c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000440:	fa1f fc87 	uxth.w	ip, r7
 8000444:	fbb4 f0f8 	udiv	r0, r4, r8
 8000448:	fb08 4410 	mls	r4, r8, r0, r4
 800044c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000450:	fb00 f90c 	mul.w	r9, r0, ip
 8000454:	45a1      	cmp	r9, r4
 8000456:	d90e      	bls.n	8000476 <__udivmoddi4+0x1ba>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f100 3aff 	add.w	sl, r0, #4294967295
 800045e:	bf2c      	ite	cs
 8000460:	f04f 0b01 	movcs.w	fp, #1
 8000464:	f04f 0b00 	movcc.w	fp, #0
 8000468:	45a1      	cmp	r9, r4
 800046a:	d903      	bls.n	8000474 <__udivmoddi4+0x1b8>
 800046c:	f1bb 0f00 	cmp.w	fp, #0
 8000470:	f000 8093 	beq.w	800059a <__udivmoddi4+0x2de>
 8000474:	4650      	mov	r0, sl
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000482:	fb08 4413 	mls	r4, r8, r3, r4
 8000486:	fb03 fc0c 	mul.w	ip, r3, ip
 800048a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048e:	45a4      	cmp	ip, r4
 8000490:	d906      	bls.n	80004a0 <__udivmoddi4+0x1e4>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 38ff 	add.w	r8, r3, #4294967295
 8000498:	d201      	bcs.n	800049e <__udivmoddi4+0x1e2>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d87a      	bhi.n	8000594 <__udivmoddi4+0x2d8>
 800049e:	4643      	mov	r3, r8
 80004a0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a4:	eba4 040c 	sub.w	r4, r4, ip
 80004a8:	fba0 9802 	umull	r9, r8, r0, r2
 80004ac:	4544      	cmp	r4, r8
 80004ae:	46cc      	mov	ip, r9
 80004b0:	4643      	mov	r3, r8
 80004b2:	d302      	bcc.n	80004ba <__udivmoddi4+0x1fe>
 80004b4:	d106      	bne.n	80004c4 <__udivmoddi4+0x208>
 80004b6:	45ce      	cmp	lr, r9
 80004b8:	d204      	bcs.n	80004c4 <__udivmoddi4+0x208>
 80004ba:	3801      	subs	r0, #1
 80004bc:	ebb9 0c02 	subs.w	ip, r9, r2
 80004c0:	eb68 0307 	sbc.w	r3, r8, r7
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x222>
 80004c6:	ebbe 020c 	subs.w	r2, lr, ip
 80004ca:	eb64 0403 	sbc.w	r4, r4, r3
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	40cc      	lsrs	r4, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e73e      	b.n	8000360 <__udivmoddi4+0xa4>
 80004e2:	fa02 fe03 	lsl.w	lr, r2, r3
 80004e6:	f1c3 0120 	rsb	r1, r3, #32
 80004ea:	fa04 f203 	lsl.w	r2, r4, r3
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	40cc      	lsrs	r4, r1
 80004f4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004f8:	fa20 f101 	lsr.w	r1, r0, r1
 80004fc:	fa1f f68e 	uxth.w	r6, lr
 8000500:	fbb4 f0f7 	udiv	r0, r4, r7
 8000504:	430a      	orrs	r2, r1
 8000506:	fb07 4410 	mls	r4, r7, r0, r4
 800050a:	0c11      	lsrs	r1, r2, #16
 800050c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000510:	fb00 f406 	mul.w	r4, r0, r6
 8000514:	428c      	cmp	r4, r1
 8000516:	d90e      	bls.n	8000536 <__udivmoddi4+0x27a>
 8000518:	eb1e 0101 	adds.w	r1, lr, r1
 800051c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000520:	bf2c      	ite	cs
 8000522:	f04f 0901 	movcs.w	r9, #1
 8000526:	f04f 0900 	movcc.w	r9, #0
 800052a:	428c      	cmp	r4, r1
 800052c:	d902      	bls.n	8000534 <__udivmoddi4+0x278>
 800052e:	f1b9 0f00 	cmp.w	r9, #0
 8000532:	d02c      	beq.n	800058e <__udivmoddi4+0x2d2>
 8000534:	4640      	mov	r0, r8
 8000536:	1b09      	subs	r1, r1, r4
 8000538:	b292      	uxth	r2, r2
 800053a:	fbb1 f4f7 	udiv	r4, r1, r7
 800053e:	fb07 1114 	mls	r1, r7, r4, r1
 8000542:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000546:	fb04 f106 	mul.w	r1, r4, r6
 800054a:	4291      	cmp	r1, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x2a2>
 800054e:	eb1e 0202 	adds.w	r2, lr, r2
 8000552:	f104 38ff 	add.w	r8, r4, #4294967295
 8000556:	d201      	bcs.n	800055c <__udivmoddi4+0x2a0>
 8000558:	4291      	cmp	r1, r2
 800055a:	d815      	bhi.n	8000588 <__udivmoddi4+0x2cc>
 800055c:	4644      	mov	r4, r8
 800055e:	1a52      	subs	r2, r2, r1
 8000560:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000564:	e721      	b.n	80003aa <__udivmoddi4+0xee>
 8000566:	1a86      	subs	r6, r0, r2
 8000568:	eb64 0303 	sbc.w	r3, r4, r3
 800056c:	2001      	movs	r0, #1
 800056e:	e70e      	b.n	800038e <__udivmoddi4+0xd2>
 8000570:	3c02      	subs	r4, #2
 8000572:	4472      	add	r2, lr
 8000574:	e735      	b.n	80003e2 <__udivmoddi4+0x126>
 8000576:	3902      	subs	r1, #2
 8000578:	4472      	add	r2, lr
 800057a:	e6d0      	b.n	800031e <__udivmoddi4+0x62>
 800057c:	44f4      	add	ip, lr
 800057e:	3802      	subs	r0, #2
 8000580:	e6e3      	b.n	800034a <__udivmoddi4+0x8e>
 8000582:	44f4      	add	ip, lr
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x152>
 8000588:	3c02      	subs	r4, #2
 800058a:	4472      	add	r2, lr
 800058c:	e7e7      	b.n	800055e <__udivmoddi4+0x2a2>
 800058e:	3802      	subs	r0, #2
 8000590:	4471      	add	r1, lr
 8000592:	e7d0      	b.n	8000536 <__udivmoddi4+0x27a>
 8000594:	3b02      	subs	r3, #2
 8000596:	443c      	add	r4, r7
 8000598:	e782      	b.n	80004a0 <__udivmoddi4+0x1e4>
 800059a:	3802      	subs	r0, #2
 800059c:	443c      	add	r4, r7
 800059e:	e76a      	b.n	8000476 <__udivmoddi4+0x1ba>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <GetCommandName>:

#include <stdio.h>
#include <stdint.h>

static const char* GetCommandName(uint8_t cmd)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
    switch (cmd)
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	3b01      	subs	r3, #1
 80005b2:	2b0e      	cmp	r3, #14
 80005b4:	d830      	bhi.n	8000618 <GetCommandName+0x74>
 80005b6:	a201      	add	r2, pc, #4	@ (adr r2, 80005bc <GetCommandName+0x18>)
 80005b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005bc:	080005f9 	.word	0x080005f9
 80005c0:	080005fd 	.word	0x080005fd
 80005c4:	08000601 	.word	0x08000601
 80005c8:	08000605 	.word	0x08000605
 80005cc:	08000609 	.word	0x08000609
 80005d0:	0800060d 	.word	0x0800060d
 80005d4:	08000611 	.word	0x08000611
 80005d8:	08000619 	.word	0x08000619
 80005dc:	08000619 	.word	0x08000619
 80005e0:	08000619 	.word	0x08000619
 80005e4:	08000619 	.word	0x08000619
 80005e8:	08000619 	.word	0x08000619
 80005ec:	08000619 	.word	0x08000619
 80005f0:	08000619 	.word	0x08000619
 80005f4:	08000615 	.word	0x08000615
    {
        case CMD_ENCRYPT:   	return "Encrypt Operation";
 80005f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000628 <GetCommandName+0x84>)
 80005fa:	e00e      	b.n	800061a <GetCommandName+0x76>
        case CMD_DECRYPT:   	return "Decrypt Operation";
 80005fc:	4b0b      	ldr	r3, [pc, #44]	@ (800062c <GetCommandName+0x88>)
 80005fe:	e00c      	b.n	800061a <GetCommandName+0x76>
        case CMD_HASH:      	return "Hash Operation";
 8000600:	4b0b      	ldr	r3, [pc, #44]	@ (8000630 <GetCommandName+0x8c>)
 8000602:	e00a      	b.n	800061a <GetCommandName+0x76>
        case CMD_RANDOM:   		return "RNG Operation";
 8000604:	4b0b      	ldr	r3, [pc, #44]	@ (8000634 <GetCommandName+0x90>)
 8000606:	e008      	b.n	800061a <GetCommandName+0x76>
        case CMD_KEY_STORE:   	return "Key Storage Operation";
 8000608:	4b0b      	ldr	r3, [pc, #44]	@ (8000638 <GetCommandName+0x94>)
 800060a:	e006      	b.n	800061a <GetCommandName+0x76>
        case CMD_KEY_RETRIEVE:  return "Key Retrieve Operation";
 800060c:	4b0b      	ldr	r3, [pc, #44]	@ (800063c <GetCommandName+0x98>)
 800060e:	e004      	b.n	800061a <GetCommandName+0x76>
        case CMD_KEY_ERASE:   	return "Key Erase Operation";
 8000610:	4b0b      	ldr	r3, [pc, #44]	@ (8000640 <GetCommandName+0x9c>)
 8000612:	e002      	b.n	800061a <GetCommandName+0x76>
        case CMD_PING:   		return "Device Ping Operation";
 8000614:	4b0b      	ldr	r3, [pc, #44]	@ (8000644 <GetCommandName+0xa0>)
 8000616:	e000      	b.n	800061a <GetCommandName+0x76>
        default:            	return "Unknown Command";
 8000618:	4b0b      	ldr	r3, [pc, #44]	@ (8000648 <GetCommandName+0xa4>)
    }
}
 800061a:	4618      	mov	r0, r3
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	080134c8 	.word	0x080134c8
 800062c:	080134dc 	.word	0x080134dc
 8000630:	080134f0 	.word	0x080134f0
 8000634:	08013500 	.word	0x08013500
 8000638:	08013510 	.word	0x08013510
 800063c:	08013528 	.word	0x08013528
 8000640:	08013540 	.word	0x08013540
 8000644:	08013554 	.word	0x08013554
 8000648:	0801356c 	.word	0x0801356c

0800064c <GetOptionName>:

static const char* GetOptionName(uint8_t option)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
    switch (option)
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	3b01      	subs	r3, #1
 800065a:	2b3a      	cmp	r3, #58	@ 0x3a
 800065c:	f200 80a4 	bhi.w	80007a8 <GetOptionName+0x15c>
 8000660:	a201      	add	r2, pc, #4	@ (adr r2, 8000668 <GetOptionName+0x1c>)
 8000662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000666:	bf00      	nop
 8000668:	08000755 	.word	0x08000755
 800066c:	08000759 	.word	0x08000759
 8000670:	080007a9 	.word	0x080007a9
 8000674:	080007a9 	.word	0x080007a9
 8000678:	080007a9 	.word	0x080007a9
 800067c:	080007a9 	.word	0x080007a9
 8000680:	080007a9 	.word	0x080007a9
 8000684:	080007a9 	.word	0x080007a9
 8000688:	080007a9 	.word	0x080007a9
 800068c:	080007a9 	.word	0x080007a9
 8000690:	080007a9 	.word	0x080007a9
 8000694:	080007a9 	.word	0x080007a9
 8000698:	080007a9 	.word	0x080007a9
 800069c:	080007a9 	.word	0x080007a9
 80006a0:	080007a9 	.word	0x080007a9
 80006a4:	080007a9 	.word	0x080007a9
 80006a8:	0800075d 	.word	0x0800075d
 80006ac:	08000761 	.word	0x08000761
 80006b0:	080007a9 	.word	0x080007a9
 80006b4:	080007a9 	.word	0x080007a9
 80006b8:	080007a9 	.word	0x080007a9
 80006bc:	080007a9 	.word	0x080007a9
 80006c0:	080007a9 	.word	0x080007a9
 80006c4:	080007a9 	.word	0x080007a9
 80006c8:	080007a9 	.word	0x080007a9
 80006cc:	080007a9 	.word	0x080007a9
 80006d0:	080007a9 	.word	0x080007a9
 80006d4:	080007a9 	.word	0x080007a9
 80006d8:	080007a9 	.word	0x080007a9
 80006dc:	080007a9 	.word	0x080007a9
 80006e0:	080007a9 	.word	0x080007a9
 80006e4:	080007a9 	.word	0x080007a9
 80006e8:	08000765 	.word	0x08000765
 80006ec:	08000769 	.word	0x08000769
 80006f0:	0800076d 	.word	0x0800076d
 80006f4:	08000771 	.word	0x08000771
 80006f8:	08000775 	.word	0x08000775
 80006fc:	08000779 	.word	0x08000779
 8000700:	080007a9 	.word	0x080007a9
 8000704:	080007a9 	.word	0x080007a9
 8000708:	080007a9 	.word	0x080007a9
 800070c:	080007a9 	.word	0x080007a9
 8000710:	080007a9 	.word	0x080007a9
 8000714:	080007a9 	.word	0x080007a9
 8000718:	080007a9 	.word	0x080007a9
 800071c:	080007a9 	.word	0x080007a9
 8000720:	080007a9 	.word	0x080007a9
 8000724:	080007a9 	.word	0x080007a9
 8000728:	0800077d 	.word	0x0800077d
 800072c:	08000781 	.word	0x08000781
 8000730:	08000785 	.word	0x08000785
 8000734:	08000789 	.word	0x08000789
 8000738:	0800078d 	.word	0x0800078d
 800073c:	08000791 	.word	0x08000791
 8000740:	08000795 	.word	0x08000795
 8000744:	08000799 	.word	0x08000799
 8000748:	0800079d 	.word	0x0800079d
 800074c:	080007a1 	.word	0x080007a1
 8000750:	080007a5 	.word	0x080007a5
    {
    	case OPTION_ENCRYP_KEY128:	return "128-bit Encryption";
 8000754:	4b18      	ldr	r3, [pc, #96]	@ (80007b8 <GetOptionName+0x16c>)
 8000756:	e028      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_ENCRYP_KEY256:	return "256-bit Encryption";
 8000758:	4b18      	ldr	r3, [pc, #96]	@ (80007bc <GetOptionName+0x170>)
 800075a:	e026      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_DECRYP_KEY128:	return "128-bit Decryption";
 800075c:	4b18      	ldr	r3, [pc, #96]	@ (80007c0 <GetOptionName+0x174>)
 800075e:	e024      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_DECRYP_KEY256:	return "256-bit Decryption";
 8000760:	4b18      	ldr	r3, [pc, #96]	@ (80007c4 <GetOptionName+0x178>)
 8000762:	e022      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_HASH_SHA224:	return "SHA224 Hashing Algorithm";
 8000764:	4b18      	ldr	r3, [pc, #96]	@ (80007c8 <GetOptionName+0x17c>)
 8000766:	e020      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_HASH_SHA256:	return "SHA256 Hashing Algorithm";
 8000768:	4b18      	ldr	r3, [pc, #96]	@ (80007cc <GetOptionName+0x180>)
 800076a:	e01e      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_HASH_SHA384:	return "SHA384 Hashing Algorithm";
 800076c:	4b18      	ldr	r3, [pc, #96]	@ (80007d0 <GetOptionName+0x184>)
 800076e:	e01c      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_HASH_SHA512:	return "SHA512 Hashing Algorithm";
 8000770:	4b18      	ldr	r3, [pc, #96]	@ (80007d4 <GetOptionName+0x188>)
 8000772:	e01a      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_HMAC_SHA224:	return "SHA224 HMAC Algorithm";
 8000774:	4b18      	ldr	r3, [pc, #96]	@ (80007d8 <GetOptionName+0x18c>)
 8000776:	e018      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_HMAC_SHA256:	return "SHA256 HMAC Algorithm";
 8000778:	4b18      	ldr	r3, [pc, #96]	@ (80007dc <GetOptionName+0x190>)
 800077a:	e016      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_RNG_0004:		return "4-byte Random Number Generation";
 800077c:	4b18      	ldr	r3, [pc, #96]	@ (80007e0 <GetOptionName+0x194>)
 800077e:	e014      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_RNG_0008:		return "8-byte Random Number Generation";
 8000780:	4b18      	ldr	r3, [pc, #96]	@ (80007e4 <GetOptionName+0x198>)
 8000782:	e012      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_RNG_0016:		return "16-byte Random Number Generation";
 8000784:	4b18      	ldr	r3, [pc, #96]	@ (80007e8 <GetOptionName+0x19c>)
 8000786:	e010      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_RNG_0032:		return "32-byte Random Number Generation";
 8000788:	4b18      	ldr	r3, [pc, #96]	@ (80007ec <GetOptionName+0x1a0>)
 800078a:	e00e      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_RNG_0064:		return "64-byte Random Number Generation";
 800078c:	4b18      	ldr	r3, [pc, #96]	@ (80007f0 <GetOptionName+0x1a4>)
 800078e:	e00c      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_RNG_0128:		return "128-byte Random Number Generation";
 8000790:	4b18      	ldr	r3, [pc, #96]	@ (80007f4 <GetOptionName+0x1a8>)
 8000792:	e00a      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_RNG_0256:		return "256-byte Random Number Generation";
 8000794:	4b18      	ldr	r3, [pc, #96]	@ (80007f8 <GetOptionName+0x1ac>)
 8000796:	e008      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_RNG_0512:		return "512-byte Random Number Generation";
 8000798:	4b18      	ldr	r3, [pc, #96]	@ (80007fc <GetOptionName+0x1b0>)
 800079a:	e006      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_RNG_1024:		return "1024-byte Random Number Generation";
 800079c:	4b18      	ldr	r3, [pc, #96]	@ (8000800 <GetOptionName+0x1b4>)
 800079e:	e004      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_RNG_2048:		return "2048-byte Random Number Generation";
 80007a0:	4b18      	ldr	r3, [pc, #96]	@ (8000804 <GetOptionName+0x1b8>)
 80007a2:	e002      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_RNG_4096:		return "4096-byte Random Number Generation";
 80007a4:	4b18      	ldr	r3, [pc, #96]	@ (8000808 <GetOptionName+0x1bc>)
 80007a6:	e000      	b.n	80007aa <GetOptionName+0x15e>
		default:					return "Unknown Command"; 	break;
 80007a8:	4b18      	ldr	r3, [pc, #96]	@ (800080c <GetOptionName+0x1c0>)
    }
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	0801357c 	.word	0x0801357c
 80007bc:	08013590 	.word	0x08013590
 80007c0:	080135a4 	.word	0x080135a4
 80007c4:	080135b8 	.word	0x080135b8
 80007c8:	080135cc 	.word	0x080135cc
 80007cc:	080135e8 	.word	0x080135e8
 80007d0:	08013604 	.word	0x08013604
 80007d4:	08013620 	.word	0x08013620
 80007d8:	0801363c 	.word	0x0801363c
 80007dc:	08013654 	.word	0x08013654
 80007e0:	0801366c 	.word	0x0801366c
 80007e4:	0801368c 	.word	0x0801368c
 80007e8:	080136ac 	.word	0x080136ac
 80007ec:	080136d0 	.word	0x080136d0
 80007f0:	080136f4 	.word	0x080136f4
 80007f4:	08013718 	.word	0x08013718
 80007f8:	0801373c 	.word	0x0801373c
 80007fc:	08013760 	.word	0x08013760
 8000800:	08013784 	.word	0x08013784
 8000804:	080137a8 	.word	0x080137a8
 8000808:	080137cc 	.word	0x080137cc
 800080c:	0801356c 	.word	0x0801356c

08000810 <LogParsedPacket>:

static void LogParsedPacket(const ParsedPacket_t* packet)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b094      	sub	sp, #80	@ 0x50
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
    if (!packet)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d103      	bne.n	8000826 <LogParsedPacket+0x16>
    {
        log_error("ParsedPacket is NULL");
 800081e:	4841      	ldr	r0, [pc, #260]	@ (8000924 <LogParsedPacket+0x114>)
 8000820:	f000 feae 	bl	8001580 <log_error>
        return;
 8000824:	e07b      	b.n	800091e <LogParsedPacket+0x10e>
    }

    log_debug("PARSED PACKET:");
 8000826:	4840      	ldr	r0, [pc, #256]	@ (8000928 <LogParsedPacket+0x118>)
 8000828:	f000 fe5c 	bl	80014e4 <log_debug>
    log_debug("TXID       : %u", packet->transactionID);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4619      	mov	r1, r3
 8000832:	483e      	ldr	r0, [pc, #248]	@ (800092c <LogParsedPacket+0x11c>)
 8000834:	f000 fe56 	bl	80014e4 <log_debug>
    log_debug("CMD        : %s", GetCommandName(packet->cmd));
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	791b      	ldrb	r3, [r3, #4]
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff feb1 	bl	80005a4 <GetCommandName>
 8000842:	4603      	mov	r3, r0
 8000844:	4619      	mov	r1, r3
 8000846:	483a      	ldr	r0, [pc, #232]	@ (8000930 <LogParsedPacket+0x120>)
 8000848:	f000 fe4c 	bl	80014e4 <log_debug>
    log_debug("OPTION     : %s", GetOptionName(packet->option));
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	795b      	ldrb	r3, [r3, #5]
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff fefb 	bl	800064c <GetOptionName>
 8000856:	4603      	mov	r3, r0
 8000858:	4619      	mov	r1, r3
 800085a:	4836      	ldr	r0, [pc, #216]	@ (8000934 <LogParsedPacket+0x124>)
 800085c:	f000 fe42 	bl	80014e4 <log_debug>
    log_debug("INPUT SIZE : %hu bytes", packet->inputSize);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	88db      	ldrh	r3, [r3, #6]
 8000864:	4619      	mov	r1, r3
 8000866:	4834      	ldr	r0, [pc, #208]	@ (8000938 <LogParsedPacket+0x128>)
 8000868:	f000 fe3c 	bl	80014e4 <log_debug>

    const uint8_t* data = packet->inputData;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3308      	adds	r3, #8
 8000870:	643b      	str	r3, [r7, #64]	@ 0x40
    uint16_t size = packet->inputSize;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	88db      	ldrh	r3, [r3, #6]
 8000876:	87fb      	strh	r3, [r7, #62]	@ 0x3e

    for (uint16_t i = 0; i < size; i += bytesPerLine)
 8000878:	2300      	movs	r3, #0
 800087a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800087e:	e049      	b.n	8000914 <LogParsedPacket+0x104>
    {
        char line[bytesPerLine * 3 + 1] = {0};
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	f107 0310 	add.w	r3, r7, #16
 8000888:	222d      	movs	r2, #45	@ 0x2d
 800088a:	2100      	movs	r1, #0
 800088c:	4618      	mov	r0, r3
 800088e:	f011 fe31 	bl	80124f4 <memset>
        char* ptr = line;
 8000892:	f107 030c 	add.w	r3, r7, #12
 8000896:	64bb      	str	r3, [r7, #72]	@ 0x48

        for (uint16_t j = 0; j < bytesPerLine && (i + j) < size; ++j)
 8000898:	2300      	movs	r3, #0
 800089a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800089e:	e017      	b.n	80008d0 <LogParsedPacket+0xc0>
        {
            ptr += sprintf(ptr, "%02X ", data[i + j]);
 80008a0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80008a4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80008a8:	4413      	add	r3, r2
 80008aa:	461a      	mov	r2, r3
 80008ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80008ae:	4413      	add	r3, r2
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	461a      	mov	r2, r3
 80008b4:	4921      	ldr	r1, [pc, #132]	@ (800093c <LogParsedPacket+0x12c>)
 80008b6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80008b8:	f011 fd80 	bl	80123bc <siprintf>
 80008bc:	4603      	mov	r3, r0
 80008be:	461a      	mov	r2, r3
 80008c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80008c2:	4413      	add	r3, r2
 80008c4:	64bb      	str	r3, [r7, #72]	@ 0x48
        for (uint16_t j = 0; j < bytesPerLine && (i + j) < size; ++j)
 80008c6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80008ca:	3301      	adds	r3, #1
 80008cc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80008d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80008d4:	2b0f      	cmp	r3, #15
 80008d6:	d807      	bhi.n	80008e8 <LogParsedPacket+0xd8>
 80008d8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80008dc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80008e0:	441a      	add	r2, r3
 80008e2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80008e4:	429a      	cmp	r2, r3
 80008e6:	dbdb      	blt.n	80008a0 <LogParsedPacket+0x90>
        }

        if (i == 0)
 80008e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d106      	bne.n	80008fe <LogParsedPacket+0xee>
        {
        	log_debug("INPUT DATA : %s", line);
 80008f0:	f107 030c 	add.w	r3, r7, #12
 80008f4:	4619      	mov	r1, r3
 80008f6:	4812      	ldr	r0, [pc, #72]	@ (8000940 <LogParsedPacket+0x130>)
 80008f8:	f000 fdf4 	bl	80014e4 <log_debug>
 80008fc:	e005      	b.n	800090a <LogParsedPacket+0xfa>
        }
        else
        {
        	log_debug("             %s", line);
 80008fe:	f107 030c 	add.w	r3, r7, #12
 8000902:	4619      	mov	r1, r3
 8000904:	480f      	ldr	r0, [pc, #60]	@ (8000944 <LogParsedPacket+0x134>)
 8000906:	f000 fded 	bl	80014e4 <log_debug>
    for (uint16_t i = 0; i < size; i += bytesPerLine)
 800090a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800090e:	3310      	adds	r3, #16
 8000910:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8000914:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8000918:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800091a:	429a      	cmp	r2, r3
 800091c:	d3b0      	bcc.n	8000880 <LogParsedPacket+0x70>
        }
    }
    // log_debug("EOD FLAG    : %04X", packet->out_eod_flag);
}
 800091e:	3750      	adds	r7, #80	@ 0x50
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	080137f0 	.word	0x080137f0
 8000928:	08013808 	.word	0x08013808
 800092c:	08013818 	.word	0x08013818
 8000930:	08013828 	.word	0x08013828
 8000934:	08013838 	.word	0x08013838
 8000938:	08013848 	.word	0x08013848
 800093c:	08013860 	.word	0x08013860
 8000940:	08013868 	.word	0x08013868
 8000944:	08013878 	.word	0x08013878

08000948 <LogResponsePacket>:

static void LogResponsePacket(const ResponsePacket_t* packet)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b094      	sub	sp, #80	@ 0x50
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
    if (!packet)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d103      	bne.n	800095e <LogResponsePacket+0x16>
    {
        log_error("ResponsePacket is NULL");
 8000956:	483b      	ldr	r0, [pc, #236]	@ (8000a44 <LogResponsePacket+0xfc>)
 8000958:	f000 fe12 	bl	8001580 <log_error>
        return;
 800095c:	e06f      	b.n	8000a3e <LogResponsePacket+0xf6>
    }

    log_debug("RESPONSE PACKET");
 800095e:	483a      	ldr	r0, [pc, #232]	@ (8000a48 <LogResponsePacket+0x100>)
 8000960:	f000 fdc0 	bl	80014e4 <log_debug>
    log_debug("TXID        : %u", packet->transactionID);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4619      	mov	r1, r3
 800096a:	4838      	ldr	r0, [pc, #224]	@ (8000a4c <LogResponsePacket+0x104>)
 800096c:	f000 fdba 	bl	80014e4 <log_debug>
    log_debug("OUTPUT SIZE : %u bytes", packet->outputSize);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	889b      	ldrh	r3, [r3, #4]
 8000974:	4619      	mov	r1, r3
 8000976:	4836      	ldr	r0, [pc, #216]	@ (8000a50 <LogResponsePacket+0x108>)
 8000978:	f000 fdb4 	bl	80014e4 <log_debug>

    const uint8_t* data = packet->outputData;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	3306      	adds	r3, #6
 8000980:	643b      	str	r3, [r7, #64]	@ 0x40
    uint16_t size = packet->outputSize;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	889b      	ldrh	r3, [r3, #4]
 8000986:	87fb      	strh	r3, [r7, #62]	@ 0x3e

    for (uint16_t i = 0; i < size; i += bytesPerLine)
 8000988:	2300      	movs	r3, #0
 800098a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800098e:	e049      	b.n	8000a24 <LogResponsePacket+0xdc>
    {
        char line[bytesPerLine * 3 + 1] = {0};
 8000990:	2300      	movs	r3, #0
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	f107 0310 	add.w	r3, r7, #16
 8000998:	222d      	movs	r2, #45	@ 0x2d
 800099a:	2100      	movs	r1, #0
 800099c:	4618      	mov	r0, r3
 800099e:	f011 fda9 	bl	80124f4 <memset>
        char* ptr = line;
 80009a2:	f107 030c 	add.w	r3, r7, #12
 80009a6:	64bb      	str	r3, [r7, #72]	@ 0x48

        for (uint16_t j = 0; j < bytesPerLine && (i + j) < size; ++j)
 80009a8:	2300      	movs	r3, #0
 80009aa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80009ae:	e017      	b.n	80009e0 <LogResponsePacket+0x98>
        {
            ptr += sprintf(ptr, "%02X ", data[i + j]);
 80009b0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80009b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80009b8:	4413      	add	r3, r2
 80009ba:	461a      	mov	r2, r3
 80009bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80009be:	4413      	add	r3, r2
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	461a      	mov	r2, r3
 80009c4:	4923      	ldr	r1, [pc, #140]	@ (8000a54 <LogResponsePacket+0x10c>)
 80009c6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80009c8:	f011 fcf8 	bl	80123bc <siprintf>
 80009cc:	4603      	mov	r3, r0
 80009ce:	461a      	mov	r2, r3
 80009d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80009d2:	4413      	add	r3, r2
 80009d4:	64bb      	str	r3, [r7, #72]	@ 0x48
        for (uint16_t j = 0; j < bytesPerLine && (i + j) < size; ++j)
 80009d6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80009da:	3301      	adds	r3, #1
 80009dc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80009e0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80009e4:	2b0f      	cmp	r3, #15
 80009e6:	d807      	bhi.n	80009f8 <LogResponsePacket+0xb0>
 80009e8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80009ec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80009f0:	441a      	add	r2, r3
 80009f2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80009f4:	429a      	cmp	r2, r3
 80009f6:	dbdb      	blt.n	80009b0 <LogResponsePacket+0x68>
        }

        if (i == 0)
 80009f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d106      	bne.n	8000a0e <LogResponsePacket+0xc6>
            log_debug("OUTPUT DATA : %s", line);
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	4619      	mov	r1, r3
 8000a06:	4814      	ldr	r0, [pc, #80]	@ (8000a58 <LogResponsePacket+0x110>)
 8000a08:	f000 fd6c 	bl	80014e4 <log_debug>
 8000a0c:	e005      	b.n	8000a1a <LogResponsePacket+0xd2>
        else
            log_debug("              %s", line);
 8000a0e:	f107 030c 	add.w	r3, r7, #12
 8000a12:	4619      	mov	r1, r3
 8000a14:	4811      	ldr	r0, [pc, #68]	@ (8000a5c <LogResponsePacket+0x114>)
 8000a16:	f000 fd65 	bl	80014e4 <log_debug>
    for (uint16_t i = 0; i < size; i += bytesPerLine)
 8000a1a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000a1e:	3310      	adds	r3, #16
 8000a20:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8000a24:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8000a28:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	d3b0      	bcc.n	8000990 <LogResponsePacket+0x48>
    }
    log_debug("EOD FLAG    : %04X", packet->out_eod_flag);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a34:	689b      	ldr	r3, [r3, #8]
 8000a36:	4619      	mov	r1, r3
 8000a38:	4809      	ldr	r0, [pc, #36]	@ (8000a60 <LogResponsePacket+0x118>)
 8000a3a:	f000 fd53 	bl	80014e4 <log_debug>
}
 8000a3e:	3750      	adds	r7, #80	@ 0x50
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	08013888 	.word	0x08013888
 8000a48:	080138a0 	.word	0x080138a0
 8000a4c:	080138b0 	.word	0x080138b0
 8000a50:	080138c4 	.word	0x080138c4
 8000a54:	08013860 	.word	0x08013860
 8000a58:	080138dc 	.word	0x080138dc
 8000a5c:	080138f0 	.word	0x080138f0
 8000a60:	08013904 	.word	0x08013904

08000a64 <LogTransmitBuffer>:

static void LogTransmitBuffer(const uint8_t* usb_tx_buffer, uint32_t usb_tx_index)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b092      	sub	sp, #72	@ 0x48
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
    if (!usb_tx_buffer || usb_tx_index == 0)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d002      	beq.n	8000a7a <LogTransmitBuffer+0x16>
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d103      	bne.n	8000a82 <LogTransmitBuffer+0x1e>
    {
        log_debug("USB TX buffer is empty or NULL.");
 8000a7a:	4826      	ldr	r0, [pc, #152]	@ (8000b14 <LogTransmitBuffer+0xb0>)
 8000a7c:	f000 fd32 	bl	80014e4 <log_debug>
        return;
 8000a80:	e045      	b.n	8000b0e <LogTransmitBuffer+0xaa>
    }


    for (uint32_t i = 0; i < usb_tx_index; i += bytesPerLine)
 8000a82:	2300      	movs	r3, #0
 8000a84:	647b      	str	r3, [r7, #68]	@ 0x44
 8000a86:	e03e      	b.n	8000b06 <LogTransmitBuffer+0xa2>
    {
        char line[bytesPerLine * 3 + 1] = {0};
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	f107 030c 	add.w	r3, r7, #12
 8000a90:	222d      	movs	r2, #45	@ 0x2d
 8000a92:	2100      	movs	r1, #0
 8000a94:	4618      	mov	r0, r3
 8000a96:	f011 fd2d 	bl	80124f4 <memset>
        char* ptr = line;
 8000a9a:	f107 0308 	add.w	r3, r7, #8
 8000a9e:	643b      	str	r3, [r7, #64]	@ 0x40

        for (uint32_t j = 0; j < bytesPerLine && (i + j) < usb_tx_index; ++j)
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000aa4:	e012      	b.n	8000acc <LogTransmitBuffer+0x68>
        {
            ptr += sprintf(ptr, "%02X ", usb_tx_buffer[i + j]);
 8000aa6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000aa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000aaa:	4413      	add	r3, r2
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	4413      	add	r3, r2
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	4918      	ldr	r1, [pc, #96]	@ (8000b18 <LogTransmitBuffer+0xb4>)
 8000ab6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000ab8:	f011 fc80 	bl	80123bc <siprintf>
 8000abc:	4603      	mov	r3, r0
 8000abe:	461a      	mov	r2, r3
 8000ac0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ac2:	4413      	add	r3, r2
 8000ac4:	643b      	str	r3, [r7, #64]	@ 0x40
        for (uint32_t j = 0; j < bytesPerLine && (i + j) < usb_tx_index; ++j)
 8000ac6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ac8:	3301      	adds	r3, #1
 8000aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000acc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ace:	2b0f      	cmp	r3, #15
 8000ad0:	d805      	bhi.n	8000ade <LogTransmitBuffer+0x7a>
 8000ad2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000ad4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ad6:	4413      	add	r3, r2
 8000ad8:	683a      	ldr	r2, [r7, #0]
 8000ada:	429a      	cmp	r2, r3
 8000adc:	d8e3      	bhi.n	8000aa6 <LogTransmitBuffer+0x42>
        }

        if (i == 0)
 8000ade:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d107      	bne.n	8000af4 <LogTransmitBuffer+0x90>
            log_debug("USB Tx [%lu bytes]: %s", usb_tx_index, line);
 8000ae4:	f107 0308 	add.w	r3, r7, #8
 8000ae8:	461a      	mov	r2, r3
 8000aea:	6839      	ldr	r1, [r7, #0]
 8000aec:	480b      	ldr	r0, [pc, #44]	@ (8000b1c <LogTransmitBuffer+0xb8>)
 8000aee:	f000 fcf9 	bl	80014e4 <log_debug>
 8000af2:	e005      	b.n	8000b00 <LogTransmitBuffer+0x9c>
        else
            log_debug("                   %s", line);  // 17-character indent to align with line 1
 8000af4:	f107 0308 	add.w	r3, r7, #8
 8000af8:	4619      	mov	r1, r3
 8000afa:	4809      	ldr	r0, [pc, #36]	@ (8000b20 <LogTransmitBuffer+0xbc>)
 8000afc:	f000 fcf2 	bl	80014e4 <log_debug>
    for (uint32_t i = 0; i < usb_tx_index; i += bytesPerLine)
 8000b00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b02:	3310      	adds	r3, #16
 8000b04:	647b      	str	r3, [r7, #68]	@ 0x44
 8000b06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	d3bc      	bcc.n	8000a88 <LogTransmitBuffer+0x24>
    }
}
 8000b0e:	3748      	adds	r7, #72	@ 0x48
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	08013918 	.word	0x08013918
 8000b18:	08013860 	.word	0x08013860
 8000b1c:	08013938 	.word	0x08013938
 8000b20:	08013950 	.word	0x08013950

08000b24 <HSMManager_Init>:

void HSMManager_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0

  log_init(LOG_LEVEL_DEBUG);
 8000b28:	2000      	movs	r0, #0
 8000b2a:	f000 fc7f 	bl	800142c <log_init>
  log_info("HSM Initialized.");
 8000b2e:	4834      	ldr	r0, [pc, #208]	@ (8000c00 <HSMManager_Init+0xdc>)
 8000b30:	f000 fcf2 	bl	8001518 <log_info>
  HAL_Delay(1000);
 8000b34:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b38:	f002 f98a 	bl	8002e50 <HAL_Delay>
  log_info("Turning LED ON.");
 8000b3c:	4831      	ldr	r0, [pc, #196]	@ (8000c04 <HSMManager_Init+0xe0>)
 8000b3e:	f000 fceb 	bl	8001518 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000b42:	2000      	movs	r0, #0
 8000b44:	f001 ff22 	bl	800298c <BSP_LED_Toggle>
 8000b48:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b4c:	f002 f980 	bl	8002e50 <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000b50:	2002      	movs	r0, #2
 8000b52:	f001 ff1b 	bl	800298c <BSP_LED_Toggle>
 8000b56:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b5a:	f002 f979 	bl	8002e50 <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000b5e:	2001      	movs	r0, #1
 8000b60:	f001 ff14 	bl	800298c <BSP_LED_Toggle>
 8000b64:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b68:	f002 f972 	bl	8002e50 <HAL_Delay>
  log_info("Turning LED OFF.");
 8000b6c:	4826      	ldr	r0, [pc, #152]	@ (8000c08 <HSMManager_Init+0xe4>)
 8000b6e:	f000 fcd3 	bl	8001518 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000b72:	2000      	movs	r0, #0
 8000b74:	f001 ff0a 	bl	800298c <BSP_LED_Toggle>
 8000b78:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b7c:	f002 f968 	bl	8002e50 <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000b80:	2002      	movs	r0, #2
 8000b82:	f001 ff03 	bl	800298c <BSP_LED_Toggle>
 8000b86:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b8a:	f002 f961 	bl	8002e50 <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000b8e:	2001      	movs	r0, #1
 8000b90:	f001 fefc 	bl	800298c <BSP_LED_Toggle>
 8000b94:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b98:	f002 f95a 	bl	8002e50 <HAL_Delay>
  log_info("Turning LED ON.");
 8000b9c:	4819      	ldr	r0, [pc, #100]	@ (8000c04 <HSMManager_Init+0xe0>)
 8000b9e:	f000 fcbb 	bl	8001518 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f001 fef2 	bl	800298c <BSP_LED_Toggle>
 8000ba8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bac:	f002 f950 	bl	8002e50 <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000bb0:	2002      	movs	r0, #2
 8000bb2:	f001 feeb 	bl	800298c <BSP_LED_Toggle>
 8000bb6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bba:	f002 f949 	bl	8002e50 <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	f001 fee4 	bl	800298c <BSP_LED_Toggle>
 8000bc4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bc8:	f002 f942 	bl	8002e50 <HAL_Delay>
  log_info("Turning LED OFF.");
 8000bcc:	480e      	ldr	r0, [pc, #56]	@ (8000c08 <HSMManager_Init+0xe4>)
 8000bce:	f000 fca3 	bl	8001518 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	f001 feda 	bl	800298c <BSP_LED_Toggle>
 8000bd8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bdc:	f002 f938 	bl	8002e50 <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000be0:	2002      	movs	r0, #2
 8000be2:	f001 fed3 	bl	800298c <BSP_LED_Toggle>
 8000be6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bea:	f002 f931 	bl	8002e50 <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000bee:	2001      	movs	r0, #1
 8000bf0:	f001 fecc 	bl	800298c <BSP_LED_Toggle>
 8000bf4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bf8:	f002 f92a 	bl	8002e50 <HAL_Delay>
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	08013968 	.word	0x08013968
 8000c04:	0801397c 	.word	0x0801397c
 8000c08:	0801398c 	.word	0x0801398c

08000c0c <HSMManager_ProcessCommand>:


OperationStatus_t HSMManager_ProcessCommand(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	f5ad 3d90 	sub.w	sp, sp, #73728	@ 0x12000
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
	 if (usb_rx_complete)
 8000c16:	4b48      	ldr	r3, [pc, #288]	@ (8000d38 <HSMManager_ProcessCommand+0x12c>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	f000 8084 	beq.w	8000d2a <HSMManager_ProcessCommand+0x11e>
	 {
		 ParsedPacket_t request;
		 ResponsePacket_t response;
		 uint8_t usb_tx_buffer[MAX_USB_DATA_SIZE];
		 uint16_t usb_tx_index;
		 ParseStatus_t status = PacketParser_Parse(usb_rx_buffer, usb_rx_index, &request);
 8000c22:	4b46      	ldr	r3, [pc, #280]	@ (8000d3c <HSMManager_ProcessCommand+0x130>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	b299      	uxth	r1, r3
 8000c28:	f107 0318 	add.w	r3, r7, #24
 8000c2c:	3b18      	subs	r3, #24
 8000c2e:	461a      	mov	r2, r3
 8000c30:	4843      	ldr	r0, [pc, #268]	@ (8000d40 <HSMManager_ProcessCommand+0x134>)
 8000c32:	f000 fb21 	bl	8001278 <PacketParser_Parse>
 8000c36:	4603      	mov	r3, r0
 8000c38:	f507 3290 	add.w	r2, r7, #73728	@ 0x12000
 8000c3c:	f102 0217 	add.w	r2, r2, #23
 8000c40:	7013      	strb	r3, [r2, #0]

		 if (status == PARSE_SUCCESS)
 8000c42:	f507 3390 	add.w	r3, r7, #73728	@ 0x12000
 8000c46:	f103 0317 	add.w	r3, r3, #23
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d163      	bne.n	8000d18 <HSMManager_ProcessCommand+0x10c>
		 {
			 log_debug("Packet Parsed Successfully:");
 8000c50:	483c      	ldr	r0, [pc, #240]	@ (8000d44 <HSMManager_ProcessCommand+0x138>)
 8000c52:	f000 fc47 	bl	80014e4 <log_debug>
			 LogParsedPacket(&request);
 8000c56:	f107 0318 	add.w	r3, r7, #24
 8000c5a:	3b18      	subs	r3, #24
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fdd7 	bl	8000810 <LogParsedPacket>
			 OperationDispatcher_Dispatch(&request, &response);
 8000c62:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000c66:	f102 0218 	add.w	r2, r2, #24
 8000c6a:	3a10      	subs	r2, #16
 8000c6c:	f107 0318 	add.w	r3, r7, #24
 8000c70:	3b18      	subs	r3, #24
 8000c72:	4611      	mov	r1, r2
 8000c74:	4618      	mov	r0, r3
 8000c76:	f000 f869 	bl	8000d4c <OperationDispatcher_Dispatch>
			 response.transactionID = request.transactionID;
 8000c7a:	f107 0318 	add.w	r3, r7, #24
 8000c7e:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8000c82:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000c86:	f102 0218 	add.w	r2, r2, #24
 8000c8a:	f842 3c10 	str.w	r3, [r2, #-16]
			 LogResponsePacket(&response);
 8000c8e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000c92:	f103 0318 	add.w	r3, r3, #24
 8000c96:	3b10      	subs	r3, #16
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fe55 	bl	8000948 <LogResponsePacket>
			 usb_tx_index = response.outputSize + 10;
 8000c9e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000ca2:	f103 0318 	add.w	r3, r3, #24
 8000ca6:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8000caa:	330a      	adds	r3, #10
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	f507 3290 	add.w	r2, r7, #73728	@ 0x12000
 8000cb2:	f102 0214 	add.w	r2, r2, #20
 8000cb6:	8013      	strh	r3, [r2, #0]
			 PacketBuilder_Build(&response, usb_tx_buffer, &usb_tx_index);
 8000cb8:	f507 3290 	add.w	r2, r7, #73728	@ 0x12000
 8000cbc:	f102 0214 	add.w	r2, r2, #20
 8000cc0:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 8000cc4:	f101 0118 	add.w	r1, r1, #24
 8000cc8:	3904      	subs	r1, #4
 8000cca:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000cce:	f103 0318 	add.w	r3, r3, #24
 8000cd2:	3b10      	subs	r3, #16
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f000 fa1f 	bl	8001118 <PacketBuilder_Build>
			 LogTransmitBuffer(usb_tx_buffer, usb_tx_index);
 8000cda:	f507 3390 	add.w	r3, r7, #73728	@ 0x12000
 8000cde:	f103 0314 	add.w	r3, r3, #20
 8000ce2:	881b      	ldrh	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8000cea:	f103 0318 	add.w	r3, r3, #24
 8000cee:	3b04      	subs	r3, #4
 8000cf0:	4611      	mov	r1, r2
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff feb6 	bl	8000a64 <LogTransmitBuffer>
			 USB_Transmit(usb_tx_buffer, usb_tx_index);
 8000cf8:	f507 3390 	add.w	r3, r7, #73728	@ 0x12000
 8000cfc:	f103 0314 	add.w	r3, r3, #20
 8000d00:	881b      	ldrh	r3, [r3, #0]
 8000d02:	461a      	mov	r2, r3
 8000d04:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8000d08:	f103 0318 	add.w	r3, r3, #24
 8000d0c:	3b04      	subs	r3, #4
 8000d0e:	4611      	mov	r1, r2
 8000d10:	4618      	mov	r0, r3
 8000d12:	f00f fab1 	bl	8010278 <USB_Transmit>
 8000d16:	e008      	b.n	8000d2a <HSMManager_ProcessCommand+0x11e>
		 }
		 else
		 {
			 log_error("Parsing failed with status code: %d", status);
 8000d18:	f507 3390 	add.w	r3, r7, #73728	@ 0x12000
 8000d1c:	f103 0317 	add.w	r3, r3, #23
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	4619      	mov	r1, r3
 8000d24:	4808      	ldr	r0, [pc, #32]	@ (8000d48 <HSMManager_ProcessCommand+0x13c>)
 8000d26:	f000 fc2b 	bl	8001580 <log_error>
		 }
	 }
	 return 0;
 8000d2a:	2300      	movs	r3, #0
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f507 3790 	add.w	r7, r7, #73728	@ 0x12000
 8000d32:	3718      	adds	r7, #24
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20010eec 	.word	0x20010eec
 8000d3c:	20010ee8 	.word	0x20010ee8
 8000d40:	20000ee8 	.word	0x20000ee8
 8000d44:	080139a0 	.word	0x080139a0
 8000d48:	080139bc 	.word	0x080139bc

08000d4c <OperationDispatcher_Dispatch>:
#include "constants.h"
#include "types.h"
#include "Logger.h"

OperationStatus_t OperationDispatcher_Dispatch(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
    log_info("Dispatching Command.");
 8000d56:	4833      	ldr	r0, [pc, #204]	@ (8000e24 <OperationDispatcher_Dispatch+0xd8>)
 8000d58:	f000 fbde 	bl	8001518 <log_info>

    switch (request->cmd)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	791b      	ldrb	r3, [r3, #4]
 8000d60:	3b01      	subs	r3, #1
 8000d62:	2b0e      	cmp	r3, #14
 8000d64:	d852      	bhi.n	8000e0c <OperationDispatcher_Dispatch+0xc0>
 8000d66:	a201      	add	r2, pc, #4	@ (adr r2, 8000d6c <OperationDispatcher_Dispatch+0x20>)
 8000d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d6c:	08000da9 	.word	0x08000da9
 8000d70:	08000db9 	.word	0x08000db9
 8000d74:	08000dc9 	.word	0x08000dc9
 8000d78:	08000ddb 	.word	0x08000ddb
 8000d7c:	08000ded 	.word	0x08000ded
 8000d80:	08000ded 	.word	0x08000ded
 8000d84:	08000ded 	.word	0x08000ded
 8000d88:	08000e0d 	.word	0x08000e0d
 8000d8c:	08000e0d 	.word	0x08000e0d
 8000d90:	08000e0d 	.word	0x08000e0d
 8000d94:	08000e0d 	.word	0x08000e0d
 8000d98:	08000e0d 	.word	0x08000e0d
 8000d9c:	08000e0d 	.word	0x08000e0d
 8000da0:	08000e0d 	.word	0x08000e0d
 8000da4:	08000dfd 	.word	0x08000dfd
    {
        case CMD_ENCRYPT:
        	log_info("Calling Encryption Operation.");
 8000da8:	481f      	ldr	r0, [pc, #124]	@ (8000e28 <OperationDispatcher_Dispatch+0xdc>)
 8000daa:	f000 fbb5 	bl	8001518 <log_info>
        	log_warn("Encryption Operation not supported");
 8000dae:	481f      	ldr	r0, [pc, #124]	@ (8000e2c <OperationDispatcher_Dispatch+0xe0>)
 8000db0:	f000 fbcc 	bl	800154c <log_warn>
            return OPERATION_UNKNOWN_ERROR;
 8000db4:	230b      	movs	r3, #11
 8000db6:	e030      	b.n	8000e1a <OperationDispatcher_Dispatch+0xce>

        case CMD_DECRYPT:
        	log_info("Calling Decryption Operation.");
 8000db8:	481d      	ldr	r0, [pc, #116]	@ (8000e30 <OperationDispatcher_Dispatch+0xe4>)
 8000dba:	f000 fbad 	bl	8001518 <log_info>
        	log_warn("Decryption Operation not supported");
 8000dbe:	481d      	ldr	r0, [pc, #116]	@ (8000e34 <OperationDispatcher_Dispatch+0xe8>)
 8000dc0:	f000 fbc4 	bl	800154c <log_warn>
            return OPERATION_UNKNOWN_ERROR;
 8000dc4:	230b      	movs	r3, #11
 8000dc6:	e028      	b.n	8000e1a <OperationDispatcher_Dispatch+0xce>

        case CMD_HASH:
        	log_info("Calling Hashing Operation.");
 8000dc8:	481b      	ldr	r0, [pc, #108]	@ (8000e38 <OperationDispatcher_Dispatch+0xec>)
 8000dca:	f000 fba5 	bl	8001518 <log_info>
            return HashingHandler_Handle(request, response);
 8000dce:	6839      	ldr	r1, [r7, #0]
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f000 f841 	bl	8000e58 <HashingHandler_Handle>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	e01f      	b.n	8000e1a <OperationDispatcher_Dispatch+0xce>

        case CMD_RANDOM:
        	log_info("Calling RNG Operation.");
 8000dda:	4818      	ldr	r0, [pc, #96]	@ (8000e3c <OperationDispatcher_Dispatch+0xf0>)
 8000ddc:	f000 fb9c 	bl	8001518 <log_info>
            return RandomHandler_Handle(request, response);
 8000de0:	6839      	ldr	r1, [r7, #0]
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f000 f93a 	bl	800105c <RandomHandler_Handle>
 8000de8:	4603      	mov	r3, r0
 8000dea:	e016      	b.n	8000e1a <OperationDispatcher_Dispatch+0xce>

        case CMD_KEY_STORE:
        case CMD_KEY_RETRIEVE:
        case CMD_KEY_ERASE:
        	log_info("Calling Key Management.");
 8000dec:	4814      	ldr	r0, [pc, #80]	@ (8000e40 <OperationDispatcher_Dispatch+0xf4>)
 8000dee:	f000 fb93 	bl	8001518 <log_info>
        	log_warn("Key Management Operation not supported");
 8000df2:	4814      	ldr	r0, [pc, #80]	@ (8000e44 <OperationDispatcher_Dispatch+0xf8>)
 8000df4:	f000 fbaa 	bl	800154c <log_warn>
            return OPERATION_UNKNOWN_ERROR;
 8000df8:	230b      	movs	r3, #11
 8000dfa:	e00e      	b.n	8000e1a <OperationDispatcher_Dispatch+0xce>

        case CMD_PING:
        	log_info("Calling Ping Operation.");
 8000dfc:	4812      	ldr	r0, [pc, #72]	@ (8000e48 <OperationDispatcher_Dispatch+0xfc>)
 8000dfe:	f000 fb8b 	bl	8001518 <log_info>
        	log_warn("Ping Operation not supported");
 8000e02:	4812      	ldr	r0, [pc, #72]	@ (8000e4c <OperationDispatcher_Dispatch+0x100>)
 8000e04:	f000 fba2 	bl	800154c <log_warn>
            return OPERATION_UNKNOWN_ERROR;
 8000e08:	230b      	movs	r3, #11
 8000e0a:	e006      	b.n	8000e1a <OperationDispatcher_Dispatch+0xce>

        default:
            log_error("Invalid Command code received");
 8000e0c:	4810      	ldr	r0, [pc, #64]	@ (8000e50 <OperationDispatcher_Dispatch+0x104>)
 8000e0e:	f000 fbb7 	bl	8001580 <log_error>
            log_error("Returning Failure Status code");
 8000e12:	4810      	ldr	r0, [pc, #64]	@ (8000e54 <OperationDispatcher_Dispatch+0x108>)
 8000e14:	f000 fbb4 	bl	8001580 <log_error>
            return OPERATION_INVALID_CMD;
 8000e18:	2301      	movs	r3, #1
    }
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	080139e0 	.word	0x080139e0
 8000e28:	080139f8 	.word	0x080139f8
 8000e2c:	08013a18 	.word	0x08013a18
 8000e30:	08013a3c 	.word	0x08013a3c
 8000e34:	08013a5c 	.word	0x08013a5c
 8000e38:	08013a80 	.word	0x08013a80
 8000e3c:	08013a9c 	.word	0x08013a9c
 8000e40:	08013ab4 	.word	0x08013ab4
 8000e44:	08013acc 	.word	0x08013acc
 8000e48:	08013af4 	.word	0x08013af4
 8000e4c:	08013b0c 	.word	0x08013b0c
 8000e50:	08013b2c 	.word	0x08013b2c
 8000e54:	08013b4c 	.word	0x08013b4c

08000e58 <HashingHandler_Handle>:

extern HASH_HandleTypeDef hhash;
extern void Error_Handler(void);

OperationStatus_t HashingHandler_Handle(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
	log_info("Handling Hashing operation.");
 8000e62:	4849      	ldr	r0, [pc, #292]	@ (8000f88 <HashingHandler_Handle+0x130>)
 8000e64:	f000 fb58 	bl	8001518 <log_info>
	// Check if either Request or Response Packet is NULL
    if (!request )
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d101      	bne.n	8000e72 <HashingHandler_Handle+0x1a>
    {
        return OPERATION_INVALID_DATA;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	e085      	b.n	8000f7e <HashingHandler_Handle+0x126>
    }
    uint32_t AlgorithmSelected;
    // Declare status as Negative for Early Exit Pattern
    OperationStatus_t status = OPERATION_INVALID_OPTION;
 8000e72:	2302      	movs	r3, #2
 8000e74:	72fb      	strb	r3, [r7, #11]
    // Declare a static byte array of 64 elements
    static uint8_t digest[64] = {0};
    // Check the Request Packet's option member
    switch (request->option)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	795b      	ldrb	r3, [r3, #5]
 8000e7a:	3b21      	subs	r3, #33	@ 0x21
 8000e7c:	2b03      	cmp	r3, #3
 8000e7e:	d833      	bhi.n	8000ee8 <HashingHandler_Handle+0x90>
 8000e80:	a201      	add	r2, pc, #4	@ (adr r2, 8000e88 <HashingHandler_Handle+0x30>)
 8000e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e86:	bf00      	nop
 8000e88:	08000e99 	.word	0x08000e99
 8000e8c:	08000ead 	.word	0x08000ead
 8000e90:	08000ec1 	.word	0x08000ec1
 8000e94:	08000ed5 	.word	0x08000ed5
    {
    	// SHA224 Hashing Algorithm Selected.
        case OPTION_HASH_SHA224:
        	log_info("SHA224 Hashing Algorithm Selected.");
 8000e98:	483c      	ldr	r0, [pc, #240]	@ (8000f8c <HashingHandler_Handle+0x134>)
 8000e9a:	f000 fb3d 	bl	8001518 <log_info>
        	response->outputSize = 28;
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	221c      	movs	r2, #28
 8000ea2:	809a      	strh	r2, [r3, #4]
        	AlgorithmSelected = HASH_ALGOSELECTION_SHA224;
 8000ea4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000ea8:	60fb      	str	r3, [r7, #12]
            break;
 8000eaa:	e01f      	b.n	8000eec <HashingHandler_Handle+0x94>

        // SHA256 Hashing Algorithm Selected.
        case OPTION_HASH_SHA256:
        	log_info("SHA256 Hashing Algorithm Selected.");
 8000eac:	4838      	ldr	r0, [pc, #224]	@ (8000f90 <HashingHandler_Handle+0x138>)
 8000eae:	f000 fb33 	bl	8001518 <log_info>
        	response->outputSize = 32;
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	2220      	movs	r2, #32
 8000eb6:	809a      	strh	r2, [r3, #4]
        	AlgorithmSelected = HASH_ALGOSELECTION_SHA256;
 8000eb8:	f44f 23c0 	mov.w	r3, #393216	@ 0x60000
 8000ebc:	60fb      	str	r3, [r7, #12]
            break;
 8000ebe:	e015      	b.n	8000eec <HashingHandler_Handle+0x94>

        // SHA384 Hashing Algorithm Selected.
        case OPTION_HASH_SHA384:
        	log_info("SHA384 Hashing Algorithm Selected.");
 8000ec0:	4834      	ldr	r0, [pc, #208]	@ (8000f94 <HashingHandler_Handle+0x13c>)
 8000ec2:	f000 fb29 	bl	8001518 <log_info>
        	response->outputSize = 48;
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	2230      	movs	r2, #48	@ 0x30
 8000eca:	809a      	strh	r2, [r3, #4]
        	AlgorithmSelected = HASH_ALGOSELECTION_SHA384;
 8000ecc:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 8000ed0:	60fb      	str	r3, [r7, #12]
            break;
 8000ed2:	e00b      	b.n	8000eec <HashingHandler_Handle+0x94>

        // SHA512 Hashing Algorithm Selected.
        case OPTION_HASH_SHA512:
        	log_info("SHA512 Hashing Algorithm Selected.");
 8000ed4:	4830      	ldr	r0, [pc, #192]	@ (8000f98 <HashingHandler_Handle+0x140>)
 8000ed6:	f000 fb1f 	bl	8001518 <log_info>
        	response->outputSize = 64;
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	2240      	movs	r2, #64	@ 0x40
 8000ede:	809a      	strh	r2, [r3, #4]
        	AlgorithmSelected = HASH_ALGOSELECTION_SHA512;
 8000ee0:	f44f 13f0 	mov.w	r3, #1966080	@ 0x1e0000
 8000ee4:	60fb      	str	r3, [r7, #12]
            break;
 8000ee6:	e001      	b.n	8000eec <HashingHandler_Handle+0x94>

        // Default switch case
        default:
            return OPERATION_INVALID_OPTION;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	e048      	b.n	8000f7e <HashingHandler_Handle+0x126>
    }

    status = OPERATION_SUCCESS;
 8000eec:	2300      	movs	r3, #0
 8000eee:	72fb      	strb	r3, [r7, #11]
    HAL_HASH_DeInit(&hhash);
 8000ef0:	482a      	ldr	r0, [pc, #168]	@ (8000f9c <HashingHandler_Handle+0x144>)
 8000ef2:	f002 fbd7 	bl	80036a4 <HAL_HASH_DeInit>

    log_info("De-Initialized HASH Peripheral.");
 8000ef6:	482a      	ldr	r0, [pc, #168]	@ (8000fa0 <HashingHandler_Handle+0x148>)
 8000ef8:	f000 fb0e 	bl	8001518 <log_info>

    hhash.Instance = HASH;
 8000efc:	4b27      	ldr	r3, [pc, #156]	@ (8000f9c <HashingHandler_Handle+0x144>)
 8000efe:	4a29      	ldr	r2, [pc, #164]	@ (8000fa4 <HashingHandler_Handle+0x14c>)
 8000f00:	601a      	str	r2, [r3, #0]
    hhash.Init.DataType = HASH_BYTE_SWAP;
 8000f02:	4b26      	ldr	r3, [pc, #152]	@ (8000f9c <HashingHandler_Handle+0x144>)
 8000f04:	2220      	movs	r2, #32
 8000f06:	605a      	str	r2, [r3, #4]
    hhash.Init.Algorithm = AlgorithmSelected;
 8000f08:	4a24      	ldr	r2, [pc, #144]	@ (8000f9c <HashingHandler_Handle+0x144>)
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	6113      	str	r3, [r2, #16]
    if (HAL_HASH_Init(&hhash) != HAL_OK)
 8000f0e:	4823      	ldr	r0, [pc, #140]	@ (8000f9c <HashingHandler_Handle+0x144>)
 8000f10:	f002 fb90 	bl	8003634 <HAL_HASH_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <HashingHandler_Handle+0xc6>
    {
    	status = OPERATION_FAILURE;
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	72fb      	strb	r3, [r7, #11]
    }

    log_info("Re-initialized HASH Peripheral.");
 8000f1e:	4822      	ldr	r0, [pc, #136]	@ (8000fa8 <HashingHandler_Handle+0x150>)
 8000f20:	f000 fafa 	bl	8001518 <log_info>

    if (HAL_HASH_Start_IT(&hhash, (uint8_t*)request->inputData, (uint32_t)request->inputSize, digest) != HAL_OK)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f103 0108 	add.w	r1, r3, #8
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	88db      	ldrh	r3, [r3, #6]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	4b1e      	ldr	r3, [pc, #120]	@ (8000fac <HashingHandler_Handle+0x154>)
 8000f32:	481a      	ldr	r0, [pc, #104]	@ (8000f9c <HashingHandler_Handle+0x144>)
 8000f34:	f002 fbd9 	bl	80036ea <HAL_HASH_Start_IT>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <HashingHandler_Handle+0xea>
    {
      Error_Handler();
 8000f3e:	f000 ff4b 	bl	8001dd8 <Error_Handler>
    }
    while (HAL_HASH_GetState(&hhash) != HAL_HASH_STATE_READY);
 8000f42:	bf00      	nop
 8000f44:	4815      	ldr	r0, [pc, #84]	@ (8000f9c <HashingHandler_Handle+0x144>)
 8000f46:	f002 fce8 	bl	800391a <HAL_HASH_GetState>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d1f9      	bne.n	8000f44 <HashingHandler_Handle+0xec>

    log_info("Generated Hash Digest successfully.");
 8000f50:	4817      	ldr	r0, [pc, #92]	@ (8000fb0 <HashingHandler_Handle+0x158>)
 8000f52:	f000 fae1 	bl	8001518 <log_info>
    // Check if operation status is Success
    if (status != OPERATION_SUCCESS)
 8000f56:	7afb      	ldrb	r3, [r7, #11]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <HashingHandler_Handle+0x108>
    {
        return status;
 8000f5c:	7afb      	ldrb	r3, [r7, #11]
 8000f5e:	e00e      	b.n	8000f7e <HashingHandler_Handle+0x126>
    }
    log_info("Copying Hash Digest into Response Packet.");
 8000f60:	4814      	ldr	r0, [pc, #80]	@ (8000fb4 <HashingHandler_Handle+0x15c>)
 8000f62:	f000 fad9 	bl	8001518 <log_info>
    // Copy digest value to Response Packet structure
    memcpy(response->outputData, digest, response->outputSize);
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	1d98      	adds	r0, r3, #6
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	889b      	ldrh	r3, [r3, #4]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	490e      	ldr	r1, [pc, #56]	@ (8000fac <HashingHandler_Handle+0x154>)
 8000f72:	f011 fb3a 	bl	80125ea <memcpy>
    log_info("Hash operation complete.");
 8000f76:	4810      	ldr	r0, [pc, #64]	@ (8000fb8 <HashingHandler_Handle+0x160>)
 8000f78:	f000 face 	bl	8001518 <log_info>
    // Return Success
    return OPERATION_SUCCESS;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	08013b6c 	.word	0x08013b6c
 8000f8c:	08013b88 	.word	0x08013b88
 8000f90:	08013bac 	.word	0x08013bac
 8000f94:	08013bd0 	.word	0x08013bd0
 8000f98:	08013bf4 	.word	0x08013bf4
 8000f9c:	200001ec 	.word	0x200001ec
 8000fa0:	08013c18 	.word	0x08013c18
 8000fa4:	420c0400 	.word	0x420c0400
 8000fa8:	08013c38 	.word	0x08013c38
 8000fac:	2000019c 	.word	0x2000019c
 8000fb0:	08013c58 	.word	0x08013c58
 8000fb4:	08013c7c 	.word	0x08013c7c
 8000fb8:	08013ca8 	.word	0x08013ca8

08000fbc <CalculateByteSize>:
#define MAX_RANDOM_BYTES 4096
// Externally link RNG Instance
extern RNG_HandleTypeDef hrng;

uint16_t CalculateByteSize(uint8_t option_member)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
	uint16_t byteSize;
	switch(option_member)
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	3b31      	subs	r3, #49	@ 0x31
 8000fca:	2b0a      	cmp	r3, #10
 8000fcc:	d83e      	bhi.n	800104c <CalculateByteSize+0x90>
 8000fce:	a201      	add	r2, pc, #4	@ (adr r2, 8000fd4 <CalculateByteSize+0x18>)
 8000fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fd4:	08001001 	.word	0x08001001
 8000fd8:	08001007 	.word	0x08001007
 8000fdc:	0800100d 	.word	0x0800100d
 8000fe0:	08001013 	.word	0x08001013
 8000fe4:	08001019 	.word	0x08001019
 8000fe8:	0800101f 	.word	0x0800101f
 8000fec:	08001025 	.word	0x08001025
 8000ff0:	0800102d 	.word	0x0800102d
 8000ff4:	08001035 	.word	0x08001035
 8000ff8:	0800103d 	.word	0x0800103d
 8000ffc:	08001045 	.word	0x08001045
	{
		case OPTION_RNG_0004: byteSize = 4; break;
 8001000:	2304      	movs	r3, #4
 8001002:	81fb      	strh	r3, [r7, #14]
 8001004:	e023      	b.n	800104e <CalculateByteSize+0x92>
		case OPTION_RNG_0008: byteSize = 8; break;
 8001006:	2308      	movs	r3, #8
 8001008:	81fb      	strh	r3, [r7, #14]
 800100a:	e020      	b.n	800104e <CalculateByteSize+0x92>
		case OPTION_RNG_0016: byteSize = 16; break;
 800100c:	2310      	movs	r3, #16
 800100e:	81fb      	strh	r3, [r7, #14]
 8001010:	e01d      	b.n	800104e <CalculateByteSize+0x92>
		case OPTION_RNG_0032: byteSize = 32; break;
 8001012:	2320      	movs	r3, #32
 8001014:	81fb      	strh	r3, [r7, #14]
 8001016:	e01a      	b.n	800104e <CalculateByteSize+0x92>
		case OPTION_RNG_0064: byteSize = 64; break;
 8001018:	2340      	movs	r3, #64	@ 0x40
 800101a:	81fb      	strh	r3, [r7, #14]
 800101c:	e017      	b.n	800104e <CalculateByteSize+0x92>
		case OPTION_RNG_0128: byteSize = 128; break;
 800101e:	2380      	movs	r3, #128	@ 0x80
 8001020:	81fb      	strh	r3, [r7, #14]
 8001022:	e014      	b.n	800104e <CalculateByteSize+0x92>
		case OPTION_RNG_0256: byteSize = 256; break;
 8001024:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001028:	81fb      	strh	r3, [r7, #14]
 800102a:	e010      	b.n	800104e <CalculateByteSize+0x92>
		case OPTION_RNG_0512: byteSize = 512; break;
 800102c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001030:	81fb      	strh	r3, [r7, #14]
 8001032:	e00c      	b.n	800104e <CalculateByteSize+0x92>
		case OPTION_RNG_1024: byteSize = 1024; break;
 8001034:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001038:	81fb      	strh	r3, [r7, #14]
 800103a:	e008      	b.n	800104e <CalculateByteSize+0x92>
		case OPTION_RNG_2048: byteSize = 2048; break;
 800103c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001040:	81fb      	strh	r3, [r7, #14]
 8001042:	e004      	b.n	800104e <CalculateByteSize+0x92>
		case OPTION_RNG_4096: byteSize = 4096; break;
 8001044:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001048:	81fb      	strh	r3, [r7, #14]
 800104a:	e000      	b.n	800104e <CalculateByteSize+0x92>
		default: break;
 800104c:	bf00      	nop
	}
	return byteSize;
 800104e:	89fb      	ldrh	r3, [r7, #14]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <RandomHandler_Handle>:

OperationStatus_t RandomHandler_Handle(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
    log_info("Handling Random Number Generation operation.");
 8001066:	4826      	ldr	r0, [pc, #152]	@ (8001100 <RandomHandler_Handle+0xa4>)
 8001068:	f000 fa56 	bl	8001518 <log_info>
    // Retrieve requested OPTION half-word from Request Packet
    uint8_t option_val = (request->option);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	795b      	ldrb	r3, [r3, #5]
 8001070:	75bb      	strb	r3, [r7, #22]
    // Set the requested Random Number size
    uint16_t numBytes = CalculateByteSize(option_val);
 8001072:	7dbb      	ldrb	r3, [r7, #22]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ffa1 	bl	8000fbc <CalculateByteSize>
 800107a:	4603      	mov	r3, r0
 800107c:	82bb      	strh	r3, [r7, #20]
    log_info("Generating %d bytes of Random Number", numBytes);
 800107e:	8abb      	ldrh	r3, [r7, #20]
 8001080:	4619      	mov	r1, r3
 8001082:	4820      	ldr	r0, [pc, #128]	@ (8001104 <RandomHandler_Handle+0xa8>)
 8001084:	f000 fa48 	bl	8001518 <log_info>
    // Check if the requested size is within the limits
    if (numBytes == 0 || numBytes > MAX_RANDOM_BYTES)
 8001088:	8abb      	ldrh	r3, [r7, #20]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <RandomHandler_Handle+0x3a>
 800108e:	8abb      	ldrh	r3, [r7, #20]
 8001090:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001094:	d904      	bls.n	80010a0 <RandomHandler_Handle+0x44>
    {
        log_error("Requested random byte count is invalid.");
 8001096:	481c      	ldr	r0, [pc, #112]	@ (8001108 <RandomHandler_Handle+0xac>)
 8001098:	f000 fa72 	bl	8001580 <log_error>
        return OPERATION_INVALID_OPTION;
 800109c:	2302      	movs	r3, #2
 800109e:	e02a      	b.n	80010f6 <RandomHandler_Handle+0x9a>
    // Declare a status handler for RNG calls
    HAL_StatusTypeDef hal_status;
    // Declare a 32-bit variable to store generated word
    uint32_t randomValue;
    // Iterate through loop till required number of random words are filled
    for (uint8_t i = 0; i < numBytes/4; ++i)
 80010a0:	2300      	movs	r3, #0
 80010a2:	75fb      	strb	r3, [r7, #23]
 80010a4:	e019      	b.n	80010da <RandomHandler_Handle+0x7e>
    {
    	// Call HAL API to generate 32-bit random word
    	hal_status = HAL_RNG_GenerateRandomNumber(&hrng, &randomValue);
 80010a6:	f107 030c 	add.w	r3, r7, #12
 80010aa:	4619      	mov	r1, r3
 80010ac:	4817      	ldr	r0, [pc, #92]	@ (800110c <RandomHandler_Handle+0xb0>)
 80010ae:	f00b f8ff 	bl	800c2b0 <HAL_RNG_GenerateRandomNumber>
 80010b2:	4603      	mov	r3, r0
 80010b4:	74fb      	strb	r3, [r7, #19]
    	// Check if API call returned successfully
	    if (hal_status != HAL_OK)
 80010b6:	7cfb      	ldrb	r3, [r7, #19]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d004      	beq.n	80010c6 <RandomHandler_Handle+0x6a>
	    {
	    	log_error("Failed to generate random number from RNG peripheral.");
 80010bc:	4814      	ldr	r0, [pc, #80]	@ (8001110 <RandomHandler_Handle+0xb4>)
 80010be:	f000 fa5f 	bl	8001580 <log_error>
		    return OPERATION_RANDOM_GEN_FAIL;
 80010c2:	2306      	movs	r3, #6
 80010c4:	e017      	b.n	80010f6 <RandomHandler_Handle+0x9a>
	    }
	    // Append generated random word to response packet
        response->outputData[i] = (uint8_t)(randomValue & 0xFF);
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	7dfb      	ldrb	r3, [r7, #23]
 80010ca:	b2d1      	uxtb	r1, r2
 80010cc:	683a      	ldr	r2, [r7, #0]
 80010ce:	4413      	add	r3, r2
 80010d0:	460a      	mov	r2, r1
 80010d2:	719a      	strb	r2, [r3, #6]
    for (uint8_t i = 0; i < numBytes/4; ++i)
 80010d4:	7dfb      	ldrb	r3, [r7, #23]
 80010d6:	3301      	adds	r3, #1
 80010d8:	75fb      	strb	r3, [r7, #23]
 80010da:	7dfb      	ldrb	r3, [r7, #23]
 80010dc:	b29a      	uxth	r2, r3
 80010de:	8abb      	ldrh	r3, [r7, #20]
 80010e0:	089b      	lsrs	r3, r3, #2
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d3de      	bcc.n	80010a6 <RandomHandler_Handle+0x4a>
    }
    // Set the Output Size to number of randomly generated bytes
    response->outputSize = numBytes;
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	8aba      	ldrh	r2, [r7, #20]
 80010ec:	809a      	strh	r2, [r3, #4]
    log_info("RNG Operation complete.");
 80010ee:	4809      	ldr	r0, [pc, #36]	@ (8001114 <RandomHandler_Handle+0xb8>)
 80010f0:	f000 fa12 	bl	8001518 <log_info>
    return OPERATION_SUCCESS;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3718      	adds	r7, #24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	08013cc4 	.word	0x08013cc4
 8001104:	08013cf4 	.word	0x08013cf4
 8001108:	08013d1c 	.word	0x08013d1c
 800110c:	20000280 	.word	0x20000280
 8001110:	08013d44 	.word	0x08013d44
 8001114:	08013d7c 	.word	0x08013d7c

08001118 <PacketBuilder_Build>:
#include "Logger.h"
#include <string.h>


BuildStatus_t PacketBuilder_Build(const ResponsePacket_t* responsePacket, uint8_t* outBuffer, uint16_t* outLength)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
	log_debug("Checking if Response Packet is NULL");
 8001124:	484e      	ldr	r0, [pc, #312]	@ (8001260 <PacketBuilder_Build+0x148>)
 8001126:	f000 f9dd 	bl	80014e4 <log_debug>
	// Check if Response, Output and Output Size are NULL
    if (!responsePacket || !outBuffer || !outLength)
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d005      	beq.n	800113c <PacketBuilder_Build+0x24>
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d002      	beq.n	800113c <PacketBuilder_Build+0x24>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d101      	bne.n	8001140 <PacketBuilder_Build+0x28>
    {
    	return BUILD_NULL_POINTER;
 800113c:	2301      	movs	r3, #1
 800113e:	e08b      	b.n	8001258 <PacketBuilder_Build+0x140>
    }
    log_debug("Checking if Output Size is under limits");
 8001140:	4848      	ldr	r0, [pc, #288]	@ (8001264 <PacketBuilder_Build+0x14c>)
 8001142:	f000 f9cf 	bl	80014e4 <log_debug>
    // Check if Output Size is under the specified limits
    if (responsePacket->outputSize > MAX_OUTPUT_DATA_SIZE)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	889b      	ldrh	r3, [r3, #4]
 800114a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800114e:	d901      	bls.n	8001154 <PacketBuilder_Build+0x3c>
    {
    	return BUILD_OUTPUT_TOO_LARGE;
 8001150:	2302      	movs	r3, #2
 8001152:	e081      	b.n	8001258 <PacketBuilder_Build+0x140>
    }
    // Set Index to start of Data Stream
    uint16_t index = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	82fb      	strh	r3, [r7, #22]
    log_debug("Adding Transaction ID to Out Buffer");
 8001158:	4843      	ldr	r0, [pc, #268]	@ (8001268 <PacketBuilder_Build+0x150>)
 800115a:	f000 f9c3 	bl	80014e4 <log_debug>
    // Fill Data Stream with the corresponding Transaction ID
    outBuffer[index++] = (responsePacket->transactionID >> 24) & 0xFF;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	0e1a      	lsrs	r2, r3, #24
 8001164:	8afb      	ldrh	r3, [r7, #22]
 8001166:	1c59      	adds	r1, r3, #1
 8001168:	82f9      	strh	r1, [r7, #22]
 800116a:	4619      	mov	r1, r3
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	440b      	add	r3, r1
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (responsePacket->transactionID >> 16) & 0xFF;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	0c1a      	lsrs	r2, r3, #16
 800117a:	8afb      	ldrh	r3, [r7, #22]
 800117c:	1c59      	adds	r1, r3, #1
 800117e:	82f9      	strh	r1, [r7, #22]
 8001180:	4619      	mov	r1, r3
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	440b      	add	r3, r1
 8001186:	b2d2      	uxtb	r2, r2
 8001188:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (responsePacket->transactionID >> 8)  & 0xFF;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	0a1a      	lsrs	r2, r3, #8
 8001190:	8afb      	ldrh	r3, [r7, #22]
 8001192:	1c59      	adds	r1, r3, #1
 8001194:	82f9      	strh	r1, [r7, #22]
 8001196:	4619      	mov	r1, r3
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	440b      	add	r3, r1
 800119c:	b2d2      	uxtb	r2, r2
 800119e:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (responsePacket->transactionID)       & 0xFF;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	8afb      	ldrh	r3, [r7, #22]
 80011a6:	1c59      	adds	r1, r3, #1
 80011a8:	82f9      	strh	r1, [r7, #22]
 80011aa:	4619      	mov	r1, r3
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	440b      	add	r3, r1
 80011b0:	b2d2      	uxtb	r2, r2
 80011b2:	701a      	strb	r2, [r3, #0]
    log_debug("Adding Output Data Size to Out Buffer");
 80011b4:	482d      	ldr	r0, [pc, #180]	@ (800126c <PacketBuilder_Build+0x154>)
 80011b6:	f000 f995 	bl	80014e4 <log_debug>
    // Fill Data Stream with the Output Data Size
    outBuffer[index++] = (responsePacket->outputSize >> 8) & 0xFF;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	889b      	ldrh	r3, [r3, #4]
 80011be:	0a1b      	lsrs	r3, r3, #8
 80011c0:	b29a      	uxth	r2, r3
 80011c2:	8afb      	ldrh	r3, [r7, #22]
 80011c4:	1c59      	adds	r1, r3, #1
 80011c6:	82f9      	strh	r1, [r7, #22]
 80011c8:	4619      	mov	r1, r3
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	440b      	add	r3, r1
 80011ce:	b2d2      	uxtb	r2, r2
 80011d0:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (responsePacket->outputSize)      & 0xFF;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	889a      	ldrh	r2, [r3, #4]
 80011d6:	8afb      	ldrh	r3, [r7, #22]
 80011d8:	1c59      	adds	r1, r3, #1
 80011da:	82f9      	strh	r1, [r7, #22]
 80011dc:	4619      	mov	r1, r3
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	440b      	add	r3, r1
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	701a      	strb	r2, [r3, #0]
    // Copy Output Data contents to Data Stream
    log_debug("Copying Output Data to Out Buffer");
 80011e6:	4822      	ldr	r0, [pc, #136]	@ (8001270 <PacketBuilder_Build+0x158>)
 80011e8:	f000 f97c 	bl	80014e4 <log_debug>
    memcpy(&outBuffer[index], responsePacket->outputData, responsePacket->outputSize);
 80011ec:	8afb      	ldrh	r3, [r7, #22]
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	18d0      	adds	r0, r2, r3
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	1d99      	adds	r1, r3, #6
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	889b      	ldrh	r3, [r3, #4]
 80011fa:	461a      	mov	r2, r3
 80011fc:	f011 f9f5 	bl	80125ea <memcpy>
    // Set Index to point to EOD Flag
    index += responsePacket->outputSize;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	889a      	ldrh	r2, [r3, #4]
 8001204:	8afb      	ldrh	r3, [r7, #22]
 8001206:	4413      	add	r3, r2
 8001208:	82fb      	strh	r3, [r7, #22]
    log_debug("Adding Outward EOD Flag to Out Buffer");
 800120a:	481a      	ldr	r0, [pc, #104]	@ (8001274 <PacketBuilder_Build+0x15c>)
 800120c:	f000 f96a 	bl	80014e4 <log_debug>
    // Add EOD Flag to Data Stream
    outBuffer[index++] = (OUT_EOD_FLAG >> 24) & 0xFF;
 8001210:	8afb      	ldrh	r3, [r7, #22]
 8001212:	1c5a      	adds	r2, r3, #1
 8001214:	82fa      	strh	r2, [r7, #22]
 8001216:	461a      	mov	r2, r3
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	4413      	add	r3, r2
 800121c:	22ca      	movs	r2, #202	@ 0xca
 800121e:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (OUT_EOD_FLAG >> 16) & 0xFF;
 8001220:	8afb      	ldrh	r3, [r7, #22]
 8001222:	1c5a      	adds	r2, r3, #1
 8001224:	82fa      	strh	r2, [r7, #22]
 8001226:	461a      	mov	r2, r3
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	4413      	add	r3, r2
 800122c:	22fe      	movs	r2, #254	@ 0xfe
 800122e:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (OUT_EOD_FLAG >> 8)  & 0xFF;
 8001230:	8afb      	ldrh	r3, [r7, #22]
 8001232:	1c5a      	adds	r2, r3, #1
 8001234:	82fa      	strh	r2, [r7, #22]
 8001236:	461a      	mov	r2, r3
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	4413      	add	r3, r2
 800123c:	22ba      	movs	r2, #186	@ 0xba
 800123e:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (OUT_EOD_FLAG)       & 0xFF;
 8001240:	8afb      	ldrh	r3, [r7, #22]
 8001242:	1c5a      	adds	r2, r3, #1
 8001244:	82fa      	strh	r2, [r7, #22]
 8001246:	461a      	mov	r2, r3
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	4413      	add	r3, r2
 800124c:	22be      	movs	r2, #190	@ 0xbe
 800124e:	701a      	strb	r2, [r3, #0]
    // Set Index to point to End of Data Stream
    *outLength = index;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	8afa      	ldrh	r2, [r7, #22]
 8001254:	801a      	strh	r2, [r3, #0]
    // Return to indicate successful Packet Build
    return BUILD_SUCCESS;
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	3718      	adds	r7, #24
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	08013d94 	.word	0x08013d94
 8001264:	08013db8 	.word	0x08013db8
 8001268:	08013de0 	.word	0x08013de0
 800126c:	08013e04 	.word	0x08013e04
 8001270:	08013e2c 	.word	0x08013e2c
 8001274:	08013e50 	.word	0x08013e50

08001278 <PacketParser_Parse>:
#include "constants.h"
#include "Logger.h"
#include <string.h>

ParseStatus_t PacketParser_Parse(const uint8_t* rawData, uint16_t rawLength, ParsedPacket_t* parsedPacket)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	460b      	mov	r3, r1
 8001282:	607a      	str	r2, [r7, #4]
 8001284:	817b      	strh	r3, [r7, #10]
	log_debug("Checking if Data Stream or Packet Structure is NULL.");
 8001286:	485d      	ldr	r0, [pc, #372]	@ (80013fc <PacketParser_Parse+0x184>)
 8001288:	f000 f92c 	bl	80014e4 <log_debug>
	// Check if Data Stream or Packet structure is NULL
	if (!rawData || !parsedPacket)
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d002      	beq.n	8001298 <PacketParser_Parse+0x20>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d104      	bne.n	80012a2 <PacketParser_Parse+0x2a>
    {
		log_error("Data Stream or Packet Structure is NULL");
 8001298:	4859      	ldr	r0, [pc, #356]	@ (8001400 <PacketParser_Parse+0x188>)
 800129a:	f000 f971 	bl	8001580 <log_error>
    	return PARSE_NULL_POINTER;
 800129e:	2303      	movs	r3, #3
 80012a0:	e0a7      	b.n	80013f2 <PacketParser_Parse+0x17a>
    }
	log_debug("Checking if Data Stream contains less than 12 bytes.");
 80012a2:	4858      	ldr	r0, [pc, #352]	@ (8001404 <PacketParser_Parse+0x18c>)
 80012a4:	f000 f91e 	bl	80014e4 <log_debug>
    // Check if Data Stream contains Data of valid length
    if (rawLength < 12)
 80012a8:	897b      	ldrh	r3, [r7, #10]
 80012aa:	2b0b      	cmp	r3, #11
 80012ac:	d804      	bhi.n	80012b8 <PacketParser_Parse+0x40>
    {
    	log_error("Data stream contain less than 12 bytes");
 80012ae:	4856      	ldr	r0, [pc, #344]	@ (8001408 <PacketParser_Parse+0x190>)
 80012b0:	f000 f966 	bl	8001580 <log_error>
    	return PARSE_INVALID_LENGTH;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e09c      	b.n	80013f2 <PacketParser_Parse+0x17a>
    }
    // Set Index to start of Data Stream
    uint16_t index = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	82fb      	strh	r3, [r7, #22]
    log_debug("Filling up Transaction ID.");
 80012bc:	4853      	ldr	r0, [pc, #332]	@ (800140c <PacketParser_Parse+0x194>)
 80012be:	f000 f911 	bl	80014e4 <log_debug>
    // Retrieve Transaction ID from Data Stream
    parsedPacket->transactionID = (rawData[index]     << 24) |
 80012c2:	8afb      	ldrh	r3, [r7, #22]
 80012c4:	68fa      	ldr	r2, [r7, #12]
 80012c6:	4413      	add	r3, r2
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	061a      	lsls	r2, r3, #24
                                  (rawData[index + 1] << 16) |
 80012cc:	8afb      	ldrh	r3, [r7, #22]
 80012ce:	3301      	adds	r3, #1
 80012d0:	68f9      	ldr	r1, [r7, #12]
 80012d2:	440b      	add	r3, r1
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	041b      	lsls	r3, r3, #16
    parsedPacket->transactionID = (rawData[index]     << 24) |
 80012d8:	431a      	orrs	r2, r3
                                  (rawData[index + 2] << 8)  |
 80012da:	8afb      	ldrh	r3, [r7, #22]
 80012dc:	3302      	adds	r3, #2
 80012de:	68f9      	ldr	r1, [r7, #12]
 80012e0:	440b      	add	r3, r1
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	021b      	lsls	r3, r3, #8
                                  (rawData[index + 1] << 16) |
 80012e6:	4313      	orrs	r3, r2
                                  (rawData[index + 3]);
 80012e8:	8afa      	ldrh	r2, [r7, #22]
 80012ea:	3203      	adds	r2, #3
 80012ec:	68f9      	ldr	r1, [r7, #12]
 80012ee:	440a      	add	r2, r1
 80012f0:	7812      	ldrb	r2, [r2, #0]
                                  (rawData[index + 2] << 8)  |
 80012f2:	4313      	orrs	r3, r2
 80012f4:	461a      	mov	r2, r3
    parsedPacket->transactionID = (rawData[index]     << 24) |
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	601a      	str	r2, [r3, #0]
    // Set Index to point CMD byte
    index += 4;
 80012fa:	8afb      	ldrh	r3, [r7, #22]
 80012fc:	3304      	adds	r3, #4
 80012fe:	82fb      	strh	r3, [r7, #22]
    log_debug("Filling up CMD, OPTION and INPUT_SIZE fields.");
 8001300:	4843      	ldr	r0, [pc, #268]	@ (8001410 <PacketParser_Parse+0x198>)
 8001302:	f000 f8ef 	bl	80014e4 <log_debug>
    // Retrieve CMD byte from Data Stream
    parsedPacket->cmd = rawData[index++];
 8001306:	8afb      	ldrh	r3, [r7, #22]
 8001308:	1c5a      	adds	r2, r3, #1
 800130a:	82fa      	strh	r2, [r7, #22]
 800130c:	461a      	mov	r2, r3
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	4413      	add	r3, r2
 8001312:	781a      	ldrb	r2, [r3, #0]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	711a      	strb	r2, [r3, #4]
    // Retrieve OPTION byte from Data Stream
    parsedPacket->option = rawData[index++];
 8001318:	8afb      	ldrh	r3, [r7, #22]
 800131a:	1c5a      	adds	r2, r3, #1
 800131c:	82fa      	strh	r2, [r7, #22]
 800131e:	461a      	mov	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4413      	add	r3, r2
 8001324:	781a      	ldrb	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	715a      	strb	r2, [r3, #5]
    // Retrieve INPUT_SIZE half-word from Data Stream
    parsedPacket->inputSize = (rawData[index] << 8) | rawData[index + 1];
 800132a:	8afb      	ldrh	r3, [r7, #22]
 800132c:	68fa      	ldr	r2, [r7, #12]
 800132e:	4413      	add	r3, r2
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	021b      	lsls	r3, r3, #8
 8001334:	b21a      	sxth	r2, r3
 8001336:	8afb      	ldrh	r3, [r7, #22]
 8001338:	3301      	adds	r3, #1
 800133a:	68f9      	ldr	r1, [r7, #12]
 800133c:	440b      	add	r3, r1
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	b21b      	sxth	r3, r3
 8001342:	4313      	orrs	r3, r2
 8001344:	b21b      	sxth	r3, r3
 8001346:	b29a      	uxth	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	80da      	strh	r2, [r3, #6]
    // Set Index to point INPUT_DATA
    index += 2;
 800134c:	8afb      	ldrh	r3, [r7, #22]
 800134e:	3302      	adds	r3, #2
 8001350:	82fb      	strh	r3, [r7, #22]
    log_debug("Checking if INPUT_SIZE is within the limits.");
 8001352:	4830      	ldr	r0, [pc, #192]	@ (8001414 <PacketParser_Parse+0x19c>)
 8001354:	f000 f8c6 	bl	80014e4 <log_debug>
    // Check if INPUT_SIZE is under the prescribed limit
    if (parsedPacket->inputSize > MAX_INPUT_DATA_SIZE || ((index - 1) + parsedPacket->inputSize + 4) > rawLength)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	88db      	ldrh	r3, [r3, #6]
 800135c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001360:	d808      	bhi.n	8001374 <PacketParser_Parse+0xfc>
 8001362:	8afb      	ldrh	r3, [r7, #22]
 8001364:	3b01      	subs	r3, #1
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	88d2      	ldrh	r2, [r2, #6]
 800136a:	4413      	add	r3, r2
 800136c:	1cda      	adds	r2, r3, #3
 800136e:	897b      	ldrh	r3, [r7, #10]
 8001370:	429a      	cmp	r2, r3
 8001372:	db04      	blt.n	800137e <PacketParser_Parse+0x106>
    {
    	log_error("Input Data Size is too big.");
 8001374:	4828      	ldr	r0, [pc, #160]	@ (8001418 <PacketParser_Parse+0x1a0>)
 8001376:	f000 f903 	bl	8001580 <log_error>
        return PARSE_INPUT_TOO_LARGE;
 800137a:	2304      	movs	r3, #4
 800137c:	e039      	b.n	80013f2 <PacketParser_Parse+0x17a>
    }
    log_debug("Copying INPUT DATA to Packet Structure.");
 800137e:	4827      	ldr	r0, [pc, #156]	@ (800141c <PacketParser_Parse+0x1a4>)
 8001380:	f000 f8b0 	bl	80014e4 <log_debug>
    // Copy INPUT_DATA array from Data Stream to Packet structure
    memcpy(parsedPacket->inputData, &rawData[index], parsedPacket->inputSize);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f103 0008 	add.w	r0, r3, #8
 800138a:	8afb      	ldrh	r3, [r7, #22]
 800138c:	68fa      	ldr	r2, [r7, #12]
 800138e:	18d1      	adds	r1, r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	88db      	ldrh	r3, [r3, #6]
 8001394:	461a      	mov	r2, r3
 8001396:	f011 f928 	bl	80125ea <memcpy>
    // Set Index to point EOD Flag
    index += parsedPacket->inputSize;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	88da      	ldrh	r2, [r3, #6]
 800139e:	8afb      	ldrh	r3, [r7, #22]
 80013a0:	4413      	add	r3, r2
 80013a2:	82fb      	strh	r3, [r7, #22]
    log_debug("Checking the Received EOD word.");
 80013a4:	481e      	ldr	r0, [pc, #120]	@ (8001420 <PacketParser_Parse+0x1a8>)
 80013a6:	f000 f89d 	bl	80014e4 <log_debug>
    // Retrieve EOD Flag from Data Stream
    uint32_t received_IN_EOD = (rawData[index]     << 24) |
 80013aa:	8afb      	ldrh	r3, [r7, #22]
 80013ac:	68fa      	ldr	r2, [r7, #12]
 80013ae:	4413      	add	r3, r2
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	061a      	lsls	r2, r3, #24
                           	   (rawData[index + 1] << 16) |
 80013b4:	8afb      	ldrh	r3, [r7, #22]
 80013b6:	3301      	adds	r3, #1
 80013b8:	68f9      	ldr	r1, [r7, #12]
 80013ba:	440b      	add	r3, r1
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	041b      	lsls	r3, r3, #16
    uint32_t received_IN_EOD = (rawData[index]     << 24) |
 80013c0:	431a      	orrs	r2, r3
							   (rawData[index + 2] << 8)  |
 80013c2:	8afb      	ldrh	r3, [r7, #22]
 80013c4:	3302      	adds	r3, #2
 80013c6:	68f9      	ldr	r1, [r7, #12]
 80013c8:	440b      	add	r3, r1
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	021b      	lsls	r3, r3, #8
                           	   (rawData[index + 1] << 16) |
 80013ce:	4313      	orrs	r3, r2
							   (rawData[index + 3]);
 80013d0:	8afa      	ldrh	r2, [r7, #22]
 80013d2:	3203      	adds	r2, #3
 80013d4:	68f9      	ldr	r1, [r7, #12]
 80013d6:	440a      	add	r2, r1
 80013d8:	7812      	ldrb	r2, [r2, #0]
							   (rawData[index + 2] << 8)  |
 80013da:	4313      	orrs	r3, r2
    uint32_t received_IN_EOD = (rawData[index]     << 24) |
 80013dc:	613b      	str	r3, [r7, #16]
    // Check if EOD Flag is valid
    if (received_IN_EOD != IN_EOD_FLAG)
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	4a10      	ldr	r2, [pc, #64]	@ (8001424 <PacketParser_Parse+0x1ac>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d004      	beq.n	80013f0 <PacketParser_Parse+0x178>
    {
    	log_error("Received EOD Flag is Invalid");
 80013e6:	4810      	ldr	r0, [pc, #64]	@ (8001428 <PacketParser_Parse+0x1b0>)
 80013e8:	f000 f8ca 	bl	8001580 <log_error>
        return PARSE_EOD_MISMATCH;
 80013ec:	2302      	movs	r3, #2
 80013ee:	e000      	b.n	80013f2 <PacketParser_Parse+0x17a>
    }
    // Return to Indicate successful parsing
    return PARSE_SUCCESS;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	08013e78 	.word	0x08013e78
 8001400:	08013eb0 	.word	0x08013eb0
 8001404:	08013ed8 	.word	0x08013ed8
 8001408:	08013f10 	.word	0x08013f10
 800140c:	08013f38 	.word	0x08013f38
 8001410:	08013f54 	.word	0x08013f54
 8001414:	08013f84 	.word	0x08013f84
 8001418:	08013fb4 	.word	0x08013fb4
 800141c:	08013fd0 	.word	0x08013fd0
 8001420:	08013ff8 	.word	0x08013ff8
 8001424:	deadbeef 	.word	0xdeadbeef
 8001428:	08014018 	.word	0x08014018

0800142c <log_init>:
#define LOG_BUFFER_SIZE 256

static LogLevel current_level = LOG_LEVEL_INFO;

void log_init(LogLevel level)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
    current_level = level;
 8001436:	4a04      	ldr	r2, [pc, #16]	@ (8001448 <log_init+0x1c>)
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	7013      	strb	r3, [r2, #0]
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	20000000 	.word	0x20000000

0800144c <log_generic>:

static void log_generic(LogLevel level, const char *prefix, const char *color, const char *fmt, va_list args)
{
 800144c:	b590      	push	{r4, r7, lr}
 800144e:	b0c7      	sub	sp, #284	@ 0x11c
 8001450:	af02      	add	r7, sp, #8
 8001452:	4604      	mov	r4, r0
 8001454:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8001458:	f5a0 7084 	sub.w	r0, r0, #264	@ 0x108
 800145c:	6001      	str	r1, [r0, #0]
 800145e:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001462:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8001466:	600a      	str	r2, [r1, #0]
 8001468:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800146c:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001476:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800147a:	4622      	mov	r2, r4
 800147c:	701a      	strb	r2, [r3, #0]
    if (level < current_level)
 800147e:	4b16      	ldr	r3, [pc, #88]	@ (80014d8 <log_generic+0x8c>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001486:	f2a2 1201 	subw	r2, r2, #257	@ 0x101
 800148a:	7812      	ldrb	r2, [r2, #0]
 800148c:	429a      	cmp	r2, r3
 800148e:	d31e      	bcc.n	80014ce <log_generic+0x82>
        return;

    char buffer[LOG_BUFFER_SIZE];
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 8001490:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001494:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 8001498:	f107 0010 	add.w	r0, r7, #16
 800149c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80014a0:	6812      	ldr	r2, [r2, #0]
 80014a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014a6:	f011 f817 	bl	80124d8 <vsniprintf>

    // Print directly using printf(), assumes it's redirected to VCOM via BSP
    printf("%s[%s] %s%s\r\n", color, prefix, buffer, COLOR_RESET);
 80014aa:	f107 0310 	add.w	r3, r7, #16
 80014ae:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80014b2:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80014b6:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80014ba:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 80014be:	4807      	ldr	r0, [pc, #28]	@ (80014dc <log_generic+0x90>)
 80014c0:	9000      	str	r0, [sp, #0]
 80014c2:	6812      	ldr	r2, [r2, #0]
 80014c4:	6809      	ldr	r1, [r1, #0]
 80014c6:	4806      	ldr	r0, [pc, #24]	@ (80014e0 <log_generic+0x94>)
 80014c8:	f010 ff32 	bl	8012330 <iprintf>
 80014cc:	e000      	b.n	80014d0 <log_generic+0x84>
        return;
 80014ce:	bf00      	nop
}
 80014d0:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd90      	pop	{r4, r7, pc}
 80014d8:	20000000 	.word	0x20000000
 80014dc:	08014048 	.word	0x08014048
 80014e0:	08014038 	.word	0x08014038

080014e4 <log_debug>:

void log_debug(const char *fmt, ...)
{
 80014e4:	b40f      	push	{r0, r1, r2, r3}
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b084      	sub	sp, #16
 80014ea:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_DEBUG, "DEBUG", COLOR_DEBUG, fmt, args);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	4a05      	ldr	r2, [pc, #20]	@ (8001510 <log_debug+0x2c>)
 80014fa:	4906      	ldr	r1, [pc, #24]	@ (8001514 <log_debug+0x30>)
 80014fc:	2000      	movs	r0, #0
 80014fe:	f7ff ffa5 	bl	800144c <log_generic>
    va_end(args);
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800150c:	b004      	add	sp, #16
 800150e:	4770      	bx	lr
 8001510:	08014050 	.word	0x08014050
 8001514:	08014058 	.word	0x08014058

08001518 <log_info>:

void log_info(const char *fmt, ...)
{
 8001518:	b40f      	push	{r0, r1, r2, r3}
 800151a:	b580      	push	{r7, lr}
 800151c:	b084      	sub	sp, #16
 800151e:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_INFO, "INFO", COLOR_INFO, fmt, args);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	4a05      	ldr	r2, [pc, #20]	@ (8001544 <log_info+0x2c>)
 800152e:	4906      	ldr	r1, [pc, #24]	@ (8001548 <log_info+0x30>)
 8001530:	2001      	movs	r0, #1
 8001532:	f7ff ff8b 	bl	800144c <log_generic>
    va_end(args);
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001540:	b004      	add	sp, #16
 8001542:	4770      	bx	lr
 8001544:	08014060 	.word	0x08014060
 8001548:	08014068 	.word	0x08014068

0800154c <log_warn>:

void log_warn(const char *fmt, ...)
{
 800154c:	b40f      	push	{r0, r1, r2, r3}
 800154e:	b580      	push	{r7, lr}
 8001550:	b084      	sub	sp, #16
 8001552:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_WARN, "WARN", COLOR_WARN, fmt, args);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	4a05      	ldr	r2, [pc, #20]	@ (8001578 <log_warn+0x2c>)
 8001562:	4906      	ldr	r1, [pc, #24]	@ (800157c <log_warn+0x30>)
 8001564:	2002      	movs	r0, #2
 8001566:	f7ff ff71 	bl	800144c <log_generic>
    va_end(args);
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001574:	b004      	add	sp, #16
 8001576:	4770      	bx	lr
 8001578:	08014070 	.word	0x08014070
 800157c:	08014078 	.word	0x08014078

08001580 <log_error>:

void log_error(const char *fmt, ...)
{
 8001580:	b40f      	push	{r0, r1, r2, r3}
 8001582:	b580      	push	{r7, lr}
 8001584:	b084      	sub	sp, #16
 8001586:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_ERROR, "ERROR", COLOR_ERROR, fmt, args);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	4a05      	ldr	r2, [pc, #20]	@ (80015ac <log_error+0x2c>)
 8001596:	4906      	ldr	r1, [pc, #24]	@ (80015b0 <log_error+0x30>)
 8001598:	2003      	movs	r0, #3
 800159a:	f7ff ff57 	bl	800144c <log_generic>
    va_end(args);
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80015a8:	b004      	add	sp, #16
 80015aa:	4770      	bx	lr
 80015ac:	08014080 	.word	0x08014080
 80015b0:	08014088 	.word	0x08014088

080015b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015b8:	f001 fb8c 	bl	8002cd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015bc:	f000 f848 	bl	8001650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015c0:	f000 fafe 	bl	8001bc0 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 80015c4:	f000 fa9a 	bl	8001afc <MX_USB_PCD_Init>
  MX_USART2_UART_Init();
 80015c8:	f000 fa00 	bl	80019cc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80015cc:	f000 f8d0 	bl	8001770 <MX_I2C1_Init>
  MX_SPI1_Init();
 80015d0:	f000 f9a6 	bl	8001920 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 80015d4:	f000 fa46 	bl	8001a64 <MX_USART6_UART_Init>
  MX_RTC_Init();
 80015d8:	f000 f920 	bl	800181c <MX_RTC_Init>
  MX_RNG_Init();
 80015dc:	f000 f908 	bl	80017f0 <MX_RNG_Init>
  MX_HASH_Init();
 80015e0:	f000 f8ac 	bl	800173c <MX_HASH_Init>
  /* USER CODE BEGIN 2 */
  while(hUsbDeviceFS.pClassData == NULL);
 80015e4:	bf00      	nop
 80015e6:	4b18      	ldr	r3, [pc, #96]	@ (8001648 <main+0x94>)
 80015e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0fa      	beq.n	80015e6 <main+0x32>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80015f0:	2000      	movs	r0, #0
 80015f2:	f001 f955 	bl	80028a0 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80015f6:	2001      	movs	r0, #1
 80015f8:	f001 f952 	bl	80028a0 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80015fc:	2002      	movs	r0, #2
 80015fe:	f001 f94f 	bl	80028a0 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8001602:	2101      	movs	r1, #1
 8001604:	2000      	movs	r0, #0
 8001606:	f001 f9eb 	bl	80029e0 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800160a:	4b10      	ldr	r3, [pc, #64]	@ (800164c <main+0x98>)
 800160c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001610:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8001612:	4b0e      	ldr	r3, [pc, #56]	@ (800164c <main+0x98>)
 8001614:	2200      	movs	r2, #0
 8001616:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8001618:	4b0c      	ldr	r3, [pc, #48]	@ (800164c <main+0x98>)
 800161a:	2200      	movs	r2, #0
 800161c:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800161e:	4b0b      	ldr	r3, [pc, #44]	@ (800164c <main+0x98>)
 8001620:	2200      	movs	r2, #0
 8001622:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8001624:	4b09      	ldr	r3, [pc, #36]	@ (800164c <main+0x98>)
 8001626:	2200      	movs	r2, #0
 8001628:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800162a:	4908      	ldr	r1, [pc, #32]	@ (800164c <main+0x98>)
 800162c:	2000      	movs	r0, #0
 800162e:	f001 fa71 	bl	8002b14 <BSP_COM_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <main+0x88>
  {
    Error_Handler();
 8001638:	f000 fbce 	bl	8001dd8 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HSMManager_Init();
 800163c:	f7ff fa72 	bl	8000b24 <HSMManager_Init>

  HSMManager_ProcessCommand();
 8001640:	f7ff fae4 	bl	8000c0c <HSMManager_ProcessCommand>
  while (1)
 8001644:	bf00      	nop
 8001646:	e7fd      	b.n	8001644 <main+0x90>
 8001648:	20000760 	.word	0x20000760
 800164c:	200001dc 	.word	0x200001dc

08001650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b09c      	sub	sp, #112	@ 0x70
 8001654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001656:	f107 0320 	add.w	r3, r7, #32
 800165a:	2250      	movs	r2, #80	@ 0x50
 800165c:	2100      	movs	r1, #0
 800165e:	4618      	mov	r0, r3
 8001660:	f010 ff48 	bl	80124f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001664:	f107 0308 	add.w	r3, r7, #8
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
 8001674:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001676:	4b2f      	ldr	r3, [pc, #188]	@ (8001734 <SystemClock_Config+0xe4>)
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	4a2e      	ldr	r2, [pc, #184]	@ (8001734 <SystemClock_Config+0xe4>)
 800167c:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001680:	6113      	str	r3, [r2, #16]
 8001682:	4b2c      	ldr	r3, [pc, #176]	@ (8001734 <SystemClock_Config+0xe4>)
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800168e:	bf00      	nop
 8001690:	4b28      	ldr	r3, [pc, #160]	@ (8001734 <SystemClock_Config+0xe4>)
 8001692:	695b      	ldr	r3, [r3, #20]
 8001694:	f003 0308 	and.w	r3, r3, #8
 8001698:	2b08      	cmp	r3, #8
 800169a:	d1f9      	bne.n	8001690 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 800169c:	2329      	movs	r3, #41	@ 0x29
 800169e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80016a0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80016a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80016a6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80016aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80016ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016b0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016b2:	2302      	movs	r3, #2
 80016b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 80016b6:	2303      	movs	r3, #3
 80016b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016ba:	2304      	movs	r3, #4
 80016bc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 80016be:	23fa      	movs	r3, #250	@ 0xfa
 80016c0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80016c2:	2302      	movs	r3, #2
 80016c4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80016c6:	2302      	movs	r3, #2
 80016c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016ca:	2302      	movs	r3, #2
 80016cc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 80016ce:	2304      	movs	r3, #4
 80016d0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80016d2:	2300      	movs	r3, #0
 80016d4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80016d6:	2300      	movs	r3, #0
 80016d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016da:	f107 0320 	add.w	r3, r7, #32
 80016de:	4618      	mov	r0, r3
 80016e0:	f004 fd76 	bl	80061d0 <HAL_RCC_OscConfig>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80016ea:	f000 fb75 	bl	8001dd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ee:	231f      	movs	r3, #31
 80016f0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f2:	2303      	movs	r3, #3
 80016f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016f6:	2300      	movs	r3, #0
 80016f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016fa:	2300      	movs	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016fe:	2300      	movs	r3, #0
 8001700:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001706:	f107 0308 	add.w	r3, r7, #8
 800170a:	2105      	movs	r1, #5
 800170c:	4618      	mov	r0, r3
 800170e:	f005 f997 	bl	8006a40 <HAL_RCC_ClockConfig>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001718:	f000 fb5e 	bl	8001dd8 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 800171c:	4b06      	ldr	r3, [pc, #24]	@ (8001738 <SystemClock_Config+0xe8>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001724:	4a04      	ldr	r2, [pc, #16]	@ (8001738 <SystemClock_Config+0xe8>)
 8001726:	f043 0320 	orr.w	r3, r3, #32
 800172a:	6013      	str	r3, [r2, #0]
}
 800172c:	bf00      	nop
 800172e:	3770      	adds	r7, #112	@ 0x70
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	44020800 	.word	0x44020800
 8001738:	40022000 	.word	0x40022000

0800173c <MX_HASH_Init>:
  * @brief HASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_HASH_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE END HASH_Init 0 */

  /* USER CODE BEGIN HASH_Init 1 */

  /* USER CODE END HASH_Init 1 */
  hhash.Instance = HASH;
 8001740:	4b09      	ldr	r3, [pc, #36]	@ (8001768 <MX_HASH_Init+0x2c>)
 8001742:	4a0a      	ldr	r2, [pc, #40]	@ (800176c <MX_HASH_Init+0x30>)
 8001744:	601a      	str	r2, [r3, #0]
  hhash.Init.DataType = HASH_BYTE_SWAP;
 8001746:	4b08      	ldr	r3, [pc, #32]	@ (8001768 <MX_HASH_Init+0x2c>)
 8001748:	2220      	movs	r2, #32
 800174a:	605a      	str	r2, [r3, #4]
  hhash.Init.Algorithm = HASH_ALGOSELECTION_SHA256;
 800174c:	4b06      	ldr	r3, [pc, #24]	@ (8001768 <MX_HASH_Init+0x2c>)
 800174e:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 8001752:	611a      	str	r2, [r3, #16]
  if (HAL_HASH_Init(&hhash) != HAL_OK)
 8001754:	4804      	ldr	r0, [pc, #16]	@ (8001768 <MX_HASH_Init+0x2c>)
 8001756:	f001 ff6d 	bl	8003634 <HAL_HASH_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_HASH_Init+0x28>
  {
    Error_Handler();
 8001760:	f000 fb3a 	bl	8001dd8 <Error_Handler>
  }
  /* USER CODE BEGIN HASH_Init 2 */

  /* USER CODE END HASH_Init 2 */

}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}
 8001768:	200001ec 	.word	0x200001ec
 800176c:	420c0400 	.word	0x420c0400

08001770 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001774:	4b1b      	ldr	r3, [pc, #108]	@ (80017e4 <MX_I2C1_Init+0x74>)
 8001776:	4a1c      	ldr	r2, [pc, #112]	@ (80017e8 <MX_I2C1_Init+0x78>)
 8001778:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C043E5;
 800177a:	4b1a      	ldr	r3, [pc, #104]	@ (80017e4 <MX_I2C1_Init+0x74>)
 800177c:	4a1b      	ldr	r2, [pc, #108]	@ (80017ec <MX_I2C1_Init+0x7c>)
 800177e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001780:	4b18      	ldr	r3, [pc, #96]	@ (80017e4 <MX_I2C1_Init+0x74>)
 8001782:	2200      	movs	r2, #0
 8001784:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001786:	4b17      	ldr	r3, [pc, #92]	@ (80017e4 <MX_I2C1_Init+0x74>)
 8001788:	2201      	movs	r2, #1
 800178a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800178c:	4b15      	ldr	r3, [pc, #84]	@ (80017e4 <MX_I2C1_Init+0x74>)
 800178e:	2200      	movs	r2, #0
 8001790:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001792:	4b14      	ldr	r3, [pc, #80]	@ (80017e4 <MX_I2C1_Init+0x74>)
 8001794:	2200      	movs	r2, #0
 8001796:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001798:	4b12      	ldr	r3, [pc, #72]	@ (80017e4 <MX_I2C1_Init+0x74>)
 800179a:	2200      	movs	r2, #0
 800179c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800179e:	4b11      	ldr	r3, [pc, #68]	@ (80017e4 <MX_I2C1_Init+0x74>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017a4:	4b0f      	ldr	r3, [pc, #60]	@ (80017e4 <MX_I2C1_Init+0x74>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017aa:	480e      	ldr	r0, [pc, #56]	@ (80017e4 <MX_I2C1_Init+0x74>)
 80017ac:	f002 feda 	bl	8004564 <HAL_I2C_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80017b6:	f000 fb0f 	bl	8001dd8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017ba:	2100      	movs	r1, #0
 80017bc:	4809      	ldr	r0, [pc, #36]	@ (80017e4 <MX_I2C1_Init+0x74>)
 80017be:	f002 ff6c 	bl	800469a <HAL_I2CEx_ConfigAnalogFilter>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80017c8:	f000 fb06 	bl	8001dd8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80017cc:	2100      	movs	r1, #0
 80017ce:	4805      	ldr	r0, [pc, #20]	@ (80017e4 <MX_I2C1_Init+0x74>)
 80017d0:	f002 ffae 	bl	8004730 <HAL_I2CEx_ConfigDigitalFilter>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80017da:	f000 fafd 	bl	8001dd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	2000022c 	.word	0x2000022c
 80017e8:	40005400 	.word	0x40005400
 80017ec:	10c043e5 	.word	0x10c043e5

080017f0 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80017f4:	4b07      	ldr	r3, [pc, #28]	@ (8001814 <MX_RNG_Init+0x24>)
 80017f6:	4a08      	ldr	r2, [pc, #32]	@ (8001818 <MX_RNG_Init+0x28>)
 80017f8:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80017fa:	4b06      	ldr	r3, [pc, #24]	@ (8001814 <MX_RNG_Init+0x24>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001800:	4804      	ldr	r0, [pc, #16]	@ (8001814 <MX_RNG_Init+0x24>)
 8001802:	f00a fcb7 	bl	800c174 <HAL_RNG_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 800180c:	f000 fae4 	bl	8001dd8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20000280 	.word	0x20000280
 8001818:	420c0800 	.word	0x420c0800

0800181c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08e      	sub	sp, #56	@ 0x38
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8001822:	f107 031c 	add.w	r3, r7, #28
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	60da      	str	r2, [r3, #12]
 8001830:	611a      	str	r2, [r3, #16]
 8001832:	615a      	str	r2, [r3, #20]
 8001834:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 8001836:	f107 0308 	add.w	r3, r7, #8
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]
 8001844:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001846:	2300      	movs	r3, #0
 8001848:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800184a:	4b33      	ldr	r3, [pc, #204]	@ (8001918 <MX_RTC_Init+0xfc>)
 800184c:	4a33      	ldr	r2, [pc, #204]	@ (800191c <MX_RTC_Init+0x100>)
 800184e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001850:	4b31      	ldr	r3, [pc, #196]	@ (8001918 <MX_RTC_Init+0xfc>)
 8001852:	2200      	movs	r2, #0
 8001854:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001856:	4b30      	ldr	r3, [pc, #192]	@ (8001918 <MX_RTC_Init+0xfc>)
 8001858:	227f      	movs	r2, #127	@ 0x7f
 800185a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800185c:	4b2e      	ldr	r3, [pc, #184]	@ (8001918 <MX_RTC_Init+0xfc>)
 800185e:	22ff      	movs	r2, #255	@ 0xff
 8001860:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001862:	4b2d      	ldr	r3, [pc, #180]	@ (8001918 <MX_RTC_Init+0xfc>)
 8001864:	2200      	movs	r2, #0
 8001866:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001868:	4b2b      	ldr	r3, [pc, #172]	@ (8001918 <MX_RTC_Init+0xfc>)
 800186a:	2200      	movs	r2, #0
 800186c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800186e:	4b2a      	ldr	r3, [pc, #168]	@ (8001918 <MX_RTC_Init+0xfc>)
 8001870:	2200      	movs	r2, #0
 8001872:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001874:	4b28      	ldr	r3, [pc, #160]	@ (8001918 <MX_RTC_Init+0xfc>)
 8001876:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800187a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800187c:	4b26      	ldr	r3, [pc, #152]	@ (8001918 <MX_RTC_Init+0xfc>)
 800187e:	2200      	movs	r2, #0
 8001880:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001882:	4b25      	ldr	r3, [pc, #148]	@ (8001918 <MX_RTC_Init+0xfc>)
 8001884:	2200      	movs	r2, #0
 8001886:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001888:	4823      	ldr	r0, [pc, #140]	@ (8001918 <MX_RTC_Init+0xfc>)
 800188a:	f00a fe17 	bl	800c4bc <HAL_RTC_Init>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001894:	f000 faa0 	bl	8001dd8 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8001898:	2300      	movs	r3, #0
 800189a:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 800189c:	2300      	movs	r3, #0
 800189e:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80018a8:	f107 031c 	add.w	r3, r7, #28
 80018ac:	4619      	mov	r1, r3
 80018ae:	481a      	ldr	r0, [pc, #104]	@ (8001918 <MX_RTC_Init+0xfc>)
 80018b0:	f00b f86a 	bl	800c988 <HAL_RTCEx_PrivilegeModeSet>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80018ba:	f000 fa8d 	bl	8001dd8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80018be:	2300      	movs	r3, #0
 80018c0:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 80018c6:	2300      	movs	r3, #0
 80018c8:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80018ca:	2300      	movs	r3, #0
 80018cc:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80018d2:	f107 0308 	add.w	r3, r7, #8
 80018d6:	2201      	movs	r2, #1
 80018d8:	4619      	mov	r1, r3
 80018da:	480f      	ldr	r0, [pc, #60]	@ (8001918 <MX_RTC_Init+0xfc>)
 80018dc:	f00a fe70 	bl	800c5c0 <HAL_RTC_SetTime>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_RTC_Init+0xce>
  {
    Error_Handler();
 80018e6:	f000 fa77 	bl	8001dd8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80018ea:	2301      	movs	r3, #1
 80018ec:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 80018ee:	2301      	movs	r3, #1
 80018f0:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 80018f2:	2301      	movs	r3, #1
 80018f4:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	2201      	movs	r2, #1
 80018fe:	4619      	mov	r1, r3
 8001900:	4805      	ldr	r0, [pc, #20]	@ (8001918 <MX_RTC_Init+0xfc>)
 8001902:	f00a feef 	bl	800c6e4 <HAL_RTC_SetDate>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 800190c:	f000 fa64 	bl	8001dd8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001910:	bf00      	nop
 8001912:	3738      	adds	r7, #56	@ 0x38
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20000294 	.word	0x20000294
 800191c:	44007800 	.word	0x44007800

08001920 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001924:	4b27      	ldr	r3, [pc, #156]	@ (80019c4 <MX_SPI1_Init+0xa4>)
 8001926:	4a28      	ldr	r2, [pc, #160]	@ (80019c8 <MX_SPI1_Init+0xa8>)
 8001928:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800192a:	4b26      	ldr	r3, [pc, #152]	@ (80019c4 <MX_SPI1_Init+0xa4>)
 800192c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001930:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001932:	4b24      	ldr	r3, [pc, #144]	@ (80019c4 <MX_SPI1_Init+0xa4>)
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001938:	4b22      	ldr	r3, [pc, #136]	@ (80019c4 <MX_SPI1_Init+0xa4>)
 800193a:	2207      	movs	r2, #7
 800193c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800193e:	4b21      	ldr	r3, [pc, #132]	@ (80019c4 <MX_SPI1_Init+0xa4>)
 8001940:	2200      	movs	r2, #0
 8001942:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001944:	4b1f      	ldr	r3, [pc, #124]	@ (80019c4 <MX_SPI1_Init+0xa4>)
 8001946:	2200      	movs	r2, #0
 8001948:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800194a:	4b1e      	ldr	r3, [pc, #120]	@ (80019c4 <MX_SPI1_Init+0xa4>)
 800194c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001950:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001952:	4b1c      	ldr	r3, [pc, #112]	@ (80019c4 <MX_SPI1_Init+0xa4>)
 8001954:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8001958:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800195a:	4b1a      	ldr	r3, [pc, #104]	@ (80019c4 <MX_SPI1_Init+0xa4>)
 800195c:	2200      	movs	r2, #0
 800195e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001960:	4b18      	ldr	r3, [pc, #96]	@ (80019c4 <MX_SPI1_Init+0xa4>)
 8001962:	2200      	movs	r2, #0
 8001964:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001966:	4b17      	ldr	r3, [pc, #92]	@ (80019c4 <MX_SPI1_Init+0xa4>)
 8001968:	2200      	movs	r2, #0
 800196a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 800196c:	4b15      	ldr	r3, [pc, #84]	@ (80019c4 <MX_SPI1_Init+0xa4>)
 800196e:	2207      	movs	r2, #7
 8001970:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001972:	4b14      	ldr	r3, [pc, #80]	@ (80019c4 <MX_SPI1_Init+0xa4>)
 8001974:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001978:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800197a:	4b12      	ldr	r3, [pc, #72]	@ (80019c4 <MX_SPI1_Init+0xa4>)
 800197c:	2200      	movs	r2, #0
 800197e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001980:	4b10      	ldr	r3, [pc, #64]	@ (80019c4 <MX_SPI1_Init+0xa4>)
 8001982:	2200      	movs	r2, #0
 8001984:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001986:	4b0f      	ldr	r3, [pc, #60]	@ (80019c4 <MX_SPI1_Init+0xa4>)
 8001988:	2200      	movs	r2, #0
 800198a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800198c:	4b0d      	ldr	r3, [pc, #52]	@ (80019c4 <MX_SPI1_Init+0xa4>)
 800198e:	2200      	movs	r2, #0
 8001990:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001992:	4b0c      	ldr	r3, [pc, #48]	@ (80019c4 <MX_SPI1_Init+0xa4>)
 8001994:	2200      	movs	r2, #0
 8001996:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001998:	4b0a      	ldr	r3, [pc, #40]	@ (80019c4 <MX_SPI1_Init+0xa4>)
 800199a:	2200      	movs	r2, #0
 800199c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800199e:	4b09      	ldr	r3, [pc, #36]	@ (80019c4 <MX_SPI1_Init+0xa4>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80019a4:	4b07      	ldr	r3, [pc, #28]	@ (80019c4 <MX_SPI1_Init+0xa4>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80019aa:	4b06      	ldr	r3, [pc, #24]	@ (80019c4 <MX_SPI1_Init+0xa4>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019b0:	4804      	ldr	r0, [pc, #16]	@ (80019c4 <MX_SPI1_Init+0xa4>)
 80019b2:	f00b f817 	bl	800c9e4 <HAL_SPI_Init>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80019bc:	f000 fa0c 	bl	8001dd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019c0:	bf00      	nop
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	200002c4 	.word	0x200002c4
 80019c8:	40013000 	.word	0x40013000

080019cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019d0:	4b22      	ldr	r3, [pc, #136]	@ (8001a5c <MX_USART2_UART_Init+0x90>)
 80019d2:	4a23      	ldr	r2, [pc, #140]	@ (8001a60 <MX_USART2_UART_Init+0x94>)
 80019d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019d6:	4b21      	ldr	r3, [pc, #132]	@ (8001a5c <MX_USART2_UART_Init+0x90>)
 80019d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019de:	4b1f      	ldr	r3, [pc, #124]	@ (8001a5c <MX_USART2_UART_Init+0x90>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019e4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a5c <MX_USART2_UART_Init+0x90>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019ea:	4b1c      	ldr	r3, [pc, #112]	@ (8001a5c <MX_USART2_UART_Init+0x90>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019f0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a5c <MX_USART2_UART_Init+0x90>)
 80019f2:	220c      	movs	r2, #12
 80019f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019f6:	4b19      	ldr	r3, [pc, #100]	@ (8001a5c <MX_USART2_UART_Init+0x90>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019fc:	4b17      	ldr	r3, [pc, #92]	@ (8001a5c <MX_USART2_UART_Init+0x90>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a02:	4b16      	ldr	r3, [pc, #88]	@ (8001a5c <MX_USART2_UART_Init+0x90>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a08:	4b14      	ldr	r3, [pc, #80]	@ (8001a5c <MX_USART2_UART_Init+0x90>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a0e:	4b13      	ldr	r3, [pc, #76]	@ (8001a5c <MX_USART2_UART_Init+0x90>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a14:	4811      	ldr	r0, [pc, #68]	@ (8001a5c <MX_USART2_UART_Init+0x90>)
 8001a16:	f00b f970 	bl	800ccfa <HAL_UART_Init>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001a20:	f000 f9da 	bl	8001dd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a24:	2100      	movs	r1, #0
 8001a26:	480d      	ldr	r0, [pc, #52]	@ (8001a5c <MX_USART2_UART_Init+0x90>)
 8001a28:	f00b fe9c 	bl	800d764 <HAL_UARTEx_SetTxFifoThreshold>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001a32:	f000 f9d1 	bl	8001dd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a36:	2100      	movs	r1, #0
 8001a38:	4808      	ldr	r0, [pc, #32]	@ (8001a5c <MX_USART2_UART_Init+0x90>)
 8001a3a:	f00b fed1 	bl	800d7e0 <HAL_UARTEx_SetRxFifoThreshold>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001a44:	f000 f9c8 	bl	8001dd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001a48:	4804      	ldr	r0, [pc, #16]	@ (8001a5c <MX_USART2_UART_Init+0x90>)
 8001a4a:	f00b fe52 	bl	800d6f2 <HAL_UARTEx_DisableFifoMode>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001a54:	f000 f9c0 	bl	8001dd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a58:	bf00      	nop
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20000354 	.word	0x20000354
 8001a60:	40004400 	.word	0x40004400

08001a64 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001a68:	4b22      	ldr	r3, [pc, #136]	@ (8001af4 <MX_USART6_UART_Init+0x90>)
 8001a6a:	4a23      	ldr	r2, [pc, #140]	@ (8001af8 <MX_USART6_UART_Init+0x94>)
 8001a6c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001a6e:	4b21      	ldr	r3, [pc, #132]	@ (8001af4 <MX_USART6_UART_Init+0x90>)
 8001a70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a74:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001a76:	4b1f      	ldr	r3, [pc, #124]	@ (8001af4 <MX_USART6_UART_Init+0x90>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001a7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001af4 <MX_USART6_UART_Init+0x90>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001a82:	4b1c      	ldr	r3, [pc, #112]	@ (8001af4 <MX_USART6_UART_Init+0x90>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001a88:	4b1a      	ldr	r3, [pc, #104]	@ (8001af4 <MX_USART6_UART_Init+0x90>)
 8001a8a:	220c      	movs	r2, #12
 8001a8c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a8e:	4b19      	ldr	r3, [pc, #100]	@ (8001af4 <MX_USART6_UART_Init+0x90>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a94:	4b17      	ldr	r3, [pc, #92]	@ (8001af4 <MX_USART6_UART_Init+0x90>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a9a:	4b16      	ldr	r3, [pc, #88]	@ (8001af4 <MX_USART6_UART_Init+0x90>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001aa0:	4b14      	ldr	r3, [pc, #80]	@ (8001af4 <MX_USART6_UART_Init+0x90>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aa6:	4b13      	ldr	r3, [pc, #76]	@ (8001af4 <MX_USART6_UART_Init+0x90>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001aac:	4811      	ldr	r0, [pc, #68]	@ (8001af4 <MX_USART6_UART_Init+0x90>)
 8001aae:	f00b f924 	bl	800ccfa <HAL_UART_Init>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8001ab8:	f000 f98e 	bl	8001dd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001abc:	2100      	movs	r1, #0
 8001abe:	480d      	ldr	r0, [pc, #52]	@ (8001af4 <MX_USART6_UART_Init+0x90>)
 8001ac0:	f00b fe50 	bl	800d764 <HAL_UARTEx_SetTxFifoThreshold>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8001aca:	f000 f985 	bl	8001dd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ace:	2100      	movs	r1, #0
 8001ad0:	4808      	ldr	r0, [pc, #32]	@ (8001af4 <MX_USART6_UART_Init+0x90>)
 8001ad2:	f00b fe85 	bl	800d7e0 <HAL_UARTEx_SetRxFifoThreshold>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8001adc:	f000 f97c 	bl	8001dd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8001ae0:	4804      	ldr	r0, [pc, #16]	@ (8001af4 <MX_USART6_UART_Init+0x90>)
 8001ae2:	f00b fe06 	bl	800d6f2 <HAL_UARTEx_DisableFifoMode>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8001aec:	f000 f974 	bl	8001dd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001af0:	bf00      	nop
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	200003e8 	.word	0x200003e8
 8001af8:	40006400 	.word	0x40006400

08001afc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USB_Init 0 */
  hpcd_USB_DRD_FS.pData = &hUsbDeviceFS;
 8001b00:	4b29      	ldr	r3, [pc, #164]	@ (8001ba8 <MX_USB_PCD_Init+0xac>)
 8001b02:	4a2a      	ldr	r2, [pc, #168]	@ (8001bac <MX_USB_PCD_Init+0xb0>)
 8001b04:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8001b08:	4b27      	ldr	r3, [pc, #156]	@ (8001ba8 <MX_USB_PCD_Init+0xac>)
 8001b0a:	4a29      	ldr	r2, [pc, #164]	@ (8001bb0 <MX_USB_PCD_Init+0xb4>)
 8001b0c:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8001b0e:	4b26      	ldr	r3, [pc, #152]	@ (8001ba8 <MX_USB_PCD_Init+0xac>)
 8001b10:	2208      	movs	r2, #8
 8001b12:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8001b14:	4b24      	ldr	r3, [pc, #144]	@ (8001ba8 <MX_USB_PCD_Init+0xac>)
 8001b16:	2202      	movs	r2, #2
 8001b18:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001b1a:	4b23      	ldr	r3, [pc, #140]	@ (8001ba8 <MX_USB_PCD_Init+0xac>)
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8001b20:	4b21      	ldr	r3, [pc, #132]	@ (8001ba8 <MX_USB_PCD_Init+0xac>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8001b26:	4b20      	ldr	r3, [pc, #128]	@ (8001ba8 <MX_USB_PCD_Init+0xac>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8001b2c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ba8 <MX_USB_PCD_Init+0xac>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8001b32:	4b1d      	ldr	r3, [pc, #116]	@ (8001ba8 <MX_USB_PCD_Init+0xac>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8001b38:	4b1b      	ldr	r3, [pc, #108]	@ (8001ba8 <MX_USB_PCD_Init+0xac>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8001b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ba8 <MX_USB_PCD_Init+0xac>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8001b44:	4b18      	ldr	r3, [pc, #96]	@ (8001ba8 <MX_USB_PCD_Init+0xac>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8001b4a:	4817      	ldr	r0, [pc, #92]	@ (8001ba8 <MX_USB_PCD_Init+0xac>)
 8001b4c:	f002 fe9f 	bl	800488e <HAL_PCD_Init>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_USB_PCD_Init+0x5e>
  {
    Error_Handler();
 8001b56:	f000 f93f 	bl	8001dd8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */
  if(USBD_Init(&hUsbDeviceFS, &Class_Desc, 0) != USBD_OK)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	4915      	ldr	r1, [pc, #84]	@ (8001bb4 <MX_USB_PCD_Init+0xb8>)
 8001b5e:	4813      	ldr	r0, [pc, #76]	@ (8001bac <MX_USB_PCD_Init+0xb0>)
 8001b60:	f00e ffe6 	bl	8010b30 <USBD_Init>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_USB_PCD_Init+0x72>
        Error_Handler();
 8001b6a:	f000 f935 	bl	8001dd8 <Error_Handler>

  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8001b6e:	4912      	ldr	r1, [pc, #72]	@ (8001bb8 <MX_USB_PCD_Init+0xbc>)
 8001b70:	480e      	ldr	r0, [pc, #56]	@ (8001bac <MX_USB_PCD_Init+0xb0>)
 8001b72:	f00f f80d 	bl	8010b90 <USBD_RegisterClass>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_USB_PCD_Init+0x84>
        Error_Handler();
 8001b7c:	f000 f92c 	bl	8001dd8 <Error_Handler>

  if(USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_CDC_Template_fops) != USBD_OK)
 8001b80:	490e      	ldr	r1, [pc, #56]	@ (8001bbc <MX_USB_PCD_Init+0xc0>)
 8001b82:	480a      	ldr	r0, [pc, #40]	@ (8001bac <MX_USB_PCD_Init+0xb0>)
 8001b84:	f00e fa8c 	bl	80100a0 <USBD_CDC_RegisterInterface>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_USB_PCD_Init+0x96>
        Error_Handler();
 8001b8e:	f000 f923 	bl	8001dd8 <Error_Handler>

  if(USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8001b92:	4806      	ldr	r0, [pc, #24]	@ (8001bac <MX_USB_PCD_Init+0xb0>)
 8001b94:	f00f f832 	bl	8010bfc <USBD_Start>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_USB_PCD_Init+0xa6>
        Error_Handler();
 8001b9e:	f000 f91b 	bl	8001dd8 <Error_Handler>
  /* USER CODE END USB_Init 2 */

}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	2000047c 	.word	0x2000047c
 8001bac:	20000760 	.word	0x20000760
 8001bb0:	40016000 	.word	0x40016000
 8001bb4:	200000d4 	.word	0x200000d4
 8001bb8:	20000038 	.word	0x20000038
 8001bbc:	200000b8 	.word	0x200000b8

08001bc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08c      	sub	sp, #48	@ 0x30
 8001bc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc6:	f107 031c 	add.w	r3, r7, #28
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]
 8001bd0:	609a      	str	r2, [r3, #8]
 8001bd2:	60da      	str	r2, [r3, #12]
 8001bd4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bd6:	4b7a      	ldr	r3, [pc, #488]	@ (8001dc0 <MX_GPIO_Init+0x200>)
 8001bd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bdc:	4a78      	ldr	r2, [pc, #480]	@ (8001dc0 <MX_GPIO_Init+0x200>)
 8001bde:	f043 0310 	orr.w	r3, r3, #16
 8001be2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001be6:	4b76      	ldr	r3, [pc, #472]	@ (8001dc0 <MX_GPIO_Init+0x200>)
 8001be8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bec:	f003 0310 	and.w	r3, r3, #16
 8001bf0:	61bb      	str	r3, [r7, #24]
 8001bf2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bf4:	4b72      	ldr	r3, [pc, #456]	@ (8001dc0 <MX_GPIO_Init+0x200>)
 8001bf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bfa:	4a71      	ldr	r2, [pc, #452]	@ (8001dc0 <MX_GPIO_Init+0x200>)
 8001bfc:	f043 0304 	orr.w	r3, r3, #4
 8001c00:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c04:	4b6e      	ldr	r3, [pc, #440]	@ (8001dc0 <MX_GPIO_Init+0x200>)
 8001c06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c0a:	f003 0304 	and.w	r3, r3, #4
 8001c0e:	617b      	str	r3, [r7, #20]
 8001c10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c12:	4b6b      	ldr	r3, [pc, #428]	@ (8001dc0 <MX_GPIO_Init+0x200>)
 8001c14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c18:	4a69      	ldr	r2, [pc, #420]	@ (8001dc0 <MX_GPIO_Init+0x200>)
 8001c1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c1e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c22:	4b67      	ldr	r3, [pc, #412]	@ (8001dc0 <MX_GPIO_Init+0x200>)
 8001c24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c2c:	613b      	str	r3, [r7, #16]
 8001c2e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c30:	4b63      	ldr	r3, [pc, #396]	@ (8001dc0 <MX_GPIO_Init+0x200>)
 8001c32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c36:	4a62      	ldr	r2, [pc, #392]	@ (8001dc0 <MX_GPIO_Init+0x200>)
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c40:	4b5f      	ldr	r3, [pc, #380]	@ (8001dc0 <MX_GPIO_Init+0x200>)
 8001c42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c4e:	4b5c      	ldr	r3, [pc, #368]	@ (8001dc0 <MX_GPIO_Init+0x200>)
 8001c50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c54:	4a5a      	ldr	r2, [pc, #360]	@ (8001dc0 <MX_GPIO_Init+0x200>)
 8001c56:	f043 0302 	orr.w	r3, r3, #2
 8001c5a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c5e:	4b58      	ldr	r3, [pc, #352]	@ (8001dc0 <MX_GPIO_Init+0x200>)
 8001c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	60bb      	str	r3, [r7, #8]
 8001c6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c6c:	4b54      	ldr	r3, [pc, #336]	@ (8001dc0 <MX_GPIO_Init+0x200>)
 8001c6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c72:	4a53      	ldr	r2, [pc, #332]	@ (8001dc0 <MX_GPIO_Init+0x200>)
 8001c74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c78:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c7c:	4b50      	ldr	r3, [pc, #320]	@ (8001dc0 <MX_GPIO_Init+0x200>)
 8001c7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c86:	607b      	str	r3, [r7, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c8a:	4b4d      	ldr	r3, [pc, #308]	@ (8001dc0 <MX_GPIO_Init+0x200>)
 8001c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c90:	4a4b      	ldr	r2, [pc, #300]	@ (8001dc0 <MX_GPIO_Init+0x200>)
 8001c92:	f043 0308 	orr.w	r3, r3, #8
 8001c96:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c9a:	4b49      	ldr	r3, [pc, #292]	@ (8001dc0 <MX_GPIO_Init+0x200>)
 8001c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ca0:	f003 0308 	and.w	r3, r3, #8
 8001ca4:	603b      	str	r3, [r7, #0]
 8001ca6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001ca8:	2332      	movs	r3, #50	@ 0x32
 8001caa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cac:	2302      	movs	r3, #2
 8001cae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cb8:	230b      	movs	r3, #11
 8001cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cbc:	f107 031c 	add.w	r3, r7, #28
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4840      	ldr	r0, [pc, #256]	@ (8001dc4 <MX_GPIO_Init+0x204>)
 8001cc4:	f001 fb32 	bl	800332c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001cc8:	2384      	movs	r3, #132	@ 0x84
 8001cca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cd8:	230b      	movs	r3, #11
 8001cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cdc:	f107 031c 	add.w	r3, r7, #28
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4839      	ldr	r0, [pc, #228]	@ (8001dc8 <MX_GPIO_Init+0x208>)
 8001ce4:	f001 fb22 	bl	800332c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8001ce8:	2310      	movs	r3, #16
 8001cea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cec:	2303      	movs	r3, #3
 8001cee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001cf4:	f107 031c 	add.w	r3, r7, #28
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4833      	ldr	r0, [pc, #204]	@ (8001dc8 <MX_GPIO_Init+0x208>)
 8001cfc:	f001 fb16 	bl	800332c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d06:	2302      	movs	r3, #2
 8001d08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d12:	2307      	movs	r3, #7
 8001d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d16:	f107 031c 	add.w	r3, r7, #28
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	482b      	ldr	r0, [pc, #172]	@ (8001dcc <MX_GPIO_Init+0x20c>)
 8001d1e:	f001 fb05 	bl	800332c <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_CC1_Pin UCPD_CC2_Pin */
  GPIO_InitStruct.Pin = UCPD_CC1_Pin|UCPD_CC2_Pin;
 8001d22:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001d26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d30:	f107 031c 	add.w	r3, r7, #28
 8001d34:	4619      	mov	r1, r3
 8001d36:	4825      	ldr	r0, [pc, #148]	@ (8001dcc <MX_GPIO_Init+0x20c>)
 8001d38:	f001 faf8 	bl	800332c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001d3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d42:	2302      	movs	r3, #2
 8001d44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d4e:	230b      	movs	r3, #11
 8001d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001d52:	f107 031c 	add.w	r3, r7, #28
 8001d56:	4619      	mov	r1, r3
 8001d58:	481c      	ldr	r0, [pc, #112]	@ (8001dcc <MX_GPIO_Init+0x20c>)
 8001d5a:	f001 fae7 	bl	800332c <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8001d5e:	2380      	movs	r3, #128	@ 0x80
 8001d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d62:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd0 <MX_GPIO_Init+0x210>)
 8001d64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d66:	2300      	movs	r3, #0
 8001d68:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8001d6a:	f107 031c 	add.w	r3, r7, #28
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4818      	ldr	r0, [pc, #96]	@ (8001dd4 <MX_GPIO_Init+0x214>)
 8001d72:	f001 fadb 	bl	800332c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXT_EN_Pin RMI_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TXT_EN_Pin|RMI_TXD0_Pin;
 8001d76:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001d7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d84:	2302      	movs	r3, #2
 8001d86:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d88:	230b      	movs	r3, #11
 8001d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d8c:	f107 031c 	add.w	r3, r7, #28
 8001d90:	4619      	mov	r1, r3
 8001d92:	4810      	ldr	r0, [pc, #64]	@ (8001dd4 <MX_GPIO_Init+0x214>)
 8001d94:	f001 faca 	bl	800332c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_TX_Pin ARD_D0_RX_Pin */
  GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 8001d98:	23c0      	movs	r3, #192	@ 0xc0
 8001d9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da4:	2300      	movs	r3, #0
 8001da6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001da8:	2308      	movs	r3, #8
 8001daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dac:	f107 031c 	add.w	r3, r7, #28
 8001db0:	4619      	mov	r1, r3
 8001db2:	4806      	ldr	r0, [pc, #24]	@ (8001dcc <MX_GPIO_Init+0x20c>)
 8001db4:	f001 faba 	bl	800332c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001db8:	bf00      	nop
 8001dba:	3730      	adds	r7, #48	@ 0x30
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	44020c00 	.word	0x44020c00
 8001dc4:	42020800 	.word	0x42020800
 8001dc8:	42020000 	.word	0x42020000
 8001dcc:	42020400 	.word	0x42020400
 8001dd0:	10110000 	.word	0x10110000
 8001dd4:	42021800 	.word	0x42021800

08001dd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ddc:	b672      	cpsid	i
}
 8001dde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001de0:	bf00      	nop
 8001de2:	e7fd      	b.n	8001de0 <Error_Handler+0x8>

08001de4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
	...

08001df4 <HAL_HASH_MspInit>:
* This function configures the hardware resources used in this example
* @param hhash: HASH handle pointer
* @retval None
*/
void HAL_HASH_MspInit(HASH_HandleTypeDef* hhash)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HASH_MspInit 0 */

  /* USER CODE END HASH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HASH_CLK_ENABLE();
 8001dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8001e34 <HAL_HASH_MspInit+0x40>)
 8001dfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e02:	4a0c      	ldr	r2, [pc, #48]	@ (8001e34 <HAL_HASH_MspInit+0x40>)
 8001e04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e08:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e0c:	4b09      	ldr	r3, [pc, #36]	@ (8001e34 <HAL_HASH_MspInit+0x40>)
 8001e0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]
    /* HASH interrupt Init */
    HAL_NVIC_SetPriority(HASH_IRQn, 0, 0);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	2075      	movs	r0, #117	@ 0x75
 8001e20:	f001 f916 	bl	8003050 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_IRQn);
 8001e24:	2075      	movs	r0, #117	@ 0x75
 8001e26:	f001 f92d 	bl	8003084 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HASH_MspInit 1 */

  /* USER CODE END HASH_MspInit 1 */

}
 8001e2a:	bf00      	nop
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	44020c00 	.word	0x44020c00

08001e38 <HAL_HASH_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hhash: HASH handle pointer
* @retval None
*/
void HAL_HASH_MspDeInit(HASH_HandleTypeDef* hhash)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HASH_MspDeInit 0 */

  /* USER CODE END HASH_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_HASH_CLK_DISABLE();
 8001e40:	4b07      	ldr	r3, [pc, #28]	@ (8001e60 <HAL_HASH_MspDeInit+0x28>)
 8001e42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e46:	4a06      	ldr	r2, [pc, #24]	@ (8001e60 <HAL_HASH_MspDeInit+0x28>)
 8001e48:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8001e4c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

    /* HASH interrupt DeInit */
    HAL_NVIC_DisableIRQ(HASH_IRQn);
 8001e50:	2075      	movs	r0, #117	@ 0x75
 8001e52:	f001 f925 	bl	80030a0 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN HASH_MspDeInit 1 */

  /* USER CODE END HASH_MspDeInit 1 */

}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	44020c00 	.word	0x44020c00

08001e64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b0cc      	sub	sp, #304	@ 0x130
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001e6e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001e72:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e74:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e84:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001e88:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001e92:	461a      	mov	r2, r3
 8001e94:	2100      	movs	r1, #0
 8001e96:	f010 fb2d 	bl	80124f4 <memset>
  if(hi2c->Instance==I2C1)
 8001e9a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001e9e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a33      	ldr	r2, [pc, #204]	@ (8001f74 <HAL_I2C_MspInit+0x110>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d15e      	bne.n	8001f6a <HAL_I2C_MspInit+0x106>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001eac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001eb0:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001eb4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001eb8:	f04f 0300 	mov.w	r3, #0
 8001ebc:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ec0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001ec4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ece:	f107 0310 	add.w	r3, r7, #16
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f005 f8f6 	bl	80070c4 <HAL_RCCEx_PeriphCLKConfig>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 8001ede:	f7ff ff7b 	bl	8001dd8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee2:	4b25      	ldr	r3, [pc, #148]	@ (8001f78 <HAL_I2C_MspInit+0x114>)
 8001ee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ee8:	4a23      	ldr	r2, [pc, #140]	@ (8001f78 <HAL_I2C_MspInit+0x114>)
 8001eea:	f043 0302 	orr.w	r3, r3, #2
 8001eee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ef2:	4b21      	ldr	r3, [pc, #132]	@ (8001f78 <HAL_I2C_MspInit+0x114>)
 8001ef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ef8:	f003 0202 	and.w	r2, r3, #2
 8001efc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001f00:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001f0a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001f0e:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f10:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f14:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f18:	2312      	movs	r3, #18
 8001f1a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f24:	2300      	movs	r3, #0
 8001f26:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f2a:	2304      	movs	r3, #4
 8001f2c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f30:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001f34:	4619      	mov	r1, r3
 8001f36:	4811      	ldr	r0, [pc, #68]	@ (8001f7c <HAL_I2C_MspInit+0x118>)
 8001f38:	f001 f9f8 	bl	800332c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f78 <HAL_I2C_MspInit+0x114>)
 8001f3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001f42:	4a0d      	ldr	r2, [pc, #52]	@ (8001f78 <HAL_I2C_MspInit+0x114>)
 8001f44:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f48:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f78 <HAL_I2C_MspInit+0x114>)
 8001f4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001f52:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001f56:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001f5a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001f64:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001f68:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001f6a:	bf00      	nop
 8001f6c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40005400 	.word	0x40005400
 8001f78:	44020c00 	.word	0x44020c00
 8001f7c:	42020400 	.word	0x42020400

08001f80 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b0c6      	sub	sp, #280	@ 0x118
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f8a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f8e:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f90:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001f94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	f010 faa7 	bl	80124f4 <memset>
  if(hrng->Instance==RNG)
 8001fa6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001faa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a1d      	ldr	r2, [pc, #116]	@ (8002028 <HAL_RNG_MspInit+0xa8>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d131      	bne.n	800201c <HAL_RNG_MspInit+0x9c>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001fb8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001fbc:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8001fc0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001fc4:	f04f 0300 	mov.w	r3, #0
 8001fc8:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8001fcc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001fd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fda:	f107 0310 	add.w	r3, r7, #16
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f005 f870 	bl	80070c4 <HAL_RCCEx_PeriphCLKConfig>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <HAL_RNG_MspInit+0x6e>
    {
      Error_Handler();
 8001fea:	f7ff fef5 	bl	8001dd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001fee:	4b0f      	ldr	r3, [pc, #60]	@ (800202c <HAL_RNG_MspInit+0xac>)
 8001ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ff4:	4a0d      	ldr	r2, [pc, #52]	@ (800202c <HAL_RNG_MspInit+0xac>)
 8001ff6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ffa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800202c <HAL_RNG_MspInit+0xac>)
 8002000:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002004:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 8002008:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800200c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002016:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800201a:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 800201c:	bf00      	nop
 800201e:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	420c0800 	.word	0x420c0800
 800202c:	44020c00 	.word	0x44020c00

08002030 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b0c6      	sub	sp, #280	@ 0x118
 8002034:	af00      	add	r7, sp, #0
 8002036:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800203a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800203e:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002040:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002044:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002048:	4618      	mov	r0, r3
 800204a:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800204e:	461a      	mov	r2, r3
 8002050:	2100      	movs	r1, #0
 8002052:	f010 fa4f 	bl	80124f4 <memset>
  if(hrtc->Instance==RTC)
 8002056:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800205a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a21      	ldr	r2, [pc, #132]	@ (80020e8 <HAL_RTC_MspInit+0xb8>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d13a      	bne.n	80020de <HAL_RTC_MspInit+0xae>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002068:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800206c:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8002070:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002074:	f04f 0300 	mov.w	r3, #0
 8002078:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800207c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002080:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002084:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002088:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800208c:	f107 0310 	add.w	r3, r7, #16
 8002090:	4618      	mov	r0, r3
 8002092:	f005 f817 	bl	80070c4 <HAL_RCCEx_PeriphCLKConfig>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <HAL_RTC_MspInit+0x70>
    {
      Error_Handler();
 800209c:	f7ff fe9c 	bl	8001dd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80020a0:	4b12      	ldr	r3, [pc, #72]	@ (80020ec <HAL_RTC_MspInit+0xbc>)
 80020a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020a6:	4a11      	ldr	r2, [pc, #68]	@ (80020ec <HAL_RTC_MspInit+0xbc>)
 80020a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020ac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80020b0:	4b0e      	ldr	r3, [pc, #56]	@ (80020ec <HAL_RTC_MspInit+0xbc>)
 80020b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80020b6:	4a0d      	ldr	r2, [pc, #52]	@ (80020ec <HAL_RTC_MspInit+0xbc>)
 80020b8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80020bc:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 80020c0:	4b0a      	ldr	r3, [pc, #40]	@ (80020ec <HAL_RTC_MspInit+0xbc>)
 80020c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80020c6:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80020ca:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80020ce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80020d8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80020dc:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80020de:	bf00      	nop
 80020e0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	44007800 	.word	0x44007800
 80020ec:	44020c00 	.word	0x44020c00

080020f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b0ce      	sub	sp, #312	@ 0x138
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80020fa:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80020fe:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002100:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	609a      	str	r2, [r3, #8]
 800210c:	60da      	str	r2, [r3, #12]
 800210e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002110:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002114:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002118:	4618      	mov	r0, r3
 800211a:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800211e:	461a      	mov	r2, r3
 8002120:	2100      	movs	r1, #0
 8002122:	f010 f9e7 	bl	80124f4 <memset>
  if(hspi->Instance==SPI1)
 8002126:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800212a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a49      	ldr	r2, [pc, #292]	@ (8002258 <HAL_SPI_MspInit+0x168>)
 8002134:	4293      	cmp	r3, r2
 8002136:	f040 808a 	bne.w	800224e <HAL_SPI_MspInit+0x15e>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800213a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800213e:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8002142:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002146:	f04f 0300 	mov.w	r3, #0
 800214a:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 800214e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002152:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002156:	2200      	movs	r2, #0
 8002158:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800215c:	f107 0318 	add.w	r3, r7, #24
 8002160:	4618      	mov	r0, r3
 8002162:	f004 ffaf 	bl	80070c4 <HAL_RCCEx_PeriphCLKConfig>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <HAL_SPI_MspInit+0x80>
    {
      Error_Handler();
 800216c:	f7ff fe34 	bl	8001dd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002170:	4b3a      	ldr	r3, [pc, #232]	@ (800225c <HAL_SPI_MspInit+0x16c>)
 8002172:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002176:	4a39      	ldr	r2, [pc, #228]	@ (800225c <HAL_SPI_MspInit+0x16c>)
 8002178:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800217c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002180:	4b36      	ldr	r3, [pc, #216]	@ (800225c <HAL_SPI_MspInit+0x16c>)
 8002182:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002186:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800218a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800218e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002198:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800219c:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219e:	4b2f      	ldr	r3, [pc, #188]	@ (800225c <HAL_SPI_MspInit+0x16c>)
 80021a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021a4:	4a2d      	ldr	r2, [pc, #180]	@ (800225c <HAL_SPI_MspInit+0x16c>)
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80021ae:	4b2b      	ldr	r3, [pc, #172]	@ (800225c <HAL_SPI_MspInit+0x16c>)
 80021b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021b4:	f003 0201 	and.w	r2, r3, #1
 80021b8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80021bc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80021c6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80021ca:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021cc:	4b23      	ldr	r3, [pc, #140]	@ (800225c <HAL_SPI_MspInit+0x16c>)
 80021ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021d2:	4a22      	ldr	r2, [pc, #136]	@ (800225c <HAL_SPI_MspInit+0x16c>)
 80021d4:	f043 0308 	orr.w	r3, r3, #8
 80021d8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80021dc:	4b1f      	ldr	r3, [pc, #124]	@ (800225c <HAL_SPI_MspInit+0x16c>)
 80021de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021e2:	f003 0208 	and.w	r2, r3, #8
 80021e6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80021ea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80021f4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80021f8:	681b      	ldr	r3, [r3, #0]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80021fa:	2360      	movs	r3, #96	@ 0x60
 80021fc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002200:	2302      	movs	r3, #2
 8002202:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002206:	2300      	movs	r3, #0
 8002208:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220c:	2300      	movs	r3, #0
 800220e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002212:	2305      	movs	r3, #5
 8002214:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002218:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 800221c:	4619      	mov	r1, r3
 800221e:	4810      	ldr	r0, [pc, #64]	@ (8002260 <HAL_SPI_MspInit+0x170>)
 8002220:	f001 f884 	bl	800332c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002224:	2380      	movs	r3, #128	@ 0x80
 8002226:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222a:	2302      	movs	r3, #2
 800222c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002236:	2300      	movs	r3, #0
 8002238:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800223c:	2305      	movs	r3, #5
 800223e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002242:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8002246:	4619      	mov	r1, r3
 8002248:	4806      	ldr	r0, [pc, #24]	@ (8002264 <HAL_SPI_MspInit+0x174>)
 800224a:	f001 f86f 	bl	800332c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800224e:	bf00      	nop
 8002250:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40013000 	.word	0x40013000
 800225c:	44020c00 	.word	0x44020c00
 8002260:	42020000 	.word	0x42020000
 8002264:	42020c00 	.word	0x42020c00

08002268 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b0d0      	sub	sp, #320	@ 0x140
 800226c:	af00      	add	r7, sp, #0
 800226e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002272:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002276:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002278:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	60da      	str	r2, [r3, #12]
 8002286:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002288:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800228c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002290:	4618      	mov	r0, r3
 8002292:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8002296:	461a      	mov	r2, r3
 8002298:	2100      	movs	r1, #0
 800229a:	f010 f92b 	bl	80124f4 <memset>
  if(huart->Instance==USART2)
 800229e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80022a2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a7c      	ldr	r2, [pc, #496]	@ (800249c <HAL_UART_MspInit+0x234>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	f040 808a 	bne.w	80023c6 <HAL_UART_MspInit+0x15e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80022b2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80022b6:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80022ba:	f04f 0202 	mov.w	r2, #2
 80022be:	f04f 0300 	mov.w	r3, #0
 80022c2:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80022c6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80022ca:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80022ce:	2200      	movs	r2, #0
 80022d0:	661a      	str	r2, [r3, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022d2:	f107 0320 	add.w	r3, r7, #32
 80022d6:	4618      	mov	r0, r3
 80022d8:	f004 fef4 	bl	80070c4 <HAL_RCCEx_PeriphCLKConfig>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 80022e2:	f7ff fd79 	bl	8001dd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022e6:	4b6e      	ldr	r3, [pc, #440]	@ (80024a0 <HAL_UART_MspInit+0x238>)
 80022e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022ec:	4a6c      	ldr	r2, [pc, #432]	@ (80024a0 <HAL_UART_MspInit+0x238>)
 80022ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022f2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80022f6:	4b6a      	ldr	r3, [pc, #424]	@ (80024a0 <HAL_UART_MspInit+0x238>)
 80022f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022fc:	f403 3200 	and.w	r2, r3, #131072	@ 0x20000
 8002300:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002304:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800230e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002312:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002314:	4b62      	ldr	r3, [pc, #392]	@ (80024a0 <HAL_UART_MspInit+0x238>)
 8002316:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800231a:	4a61      	ldr	r2, [pc, #388]	@ (80024a0 <HAL_UART_MspInit+0x238>)
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002324:	4b5e      	ldr	r3, [pc, #376]	@ (80024a0 <HAL_UART_MspInit+0x238>)
 8002326:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800232a:	f003 0201 	and.w	r2, r3, #1
 800232e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002332:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800233c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002340:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002342:	4b57      	ldr	r3, [pc, #348]	@ (80024a0 <HAL_UART_MspInit+0x238>)
 8002344:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002348:	4a55      	ldr	r2, [pc, #340]	@ (80024a0 <HAL_UART_MspInit+0x238>)
 800234a:	f043 0308 	orr.w	r3, r3, #8
 800234e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002352:	4b53      	ldr	r3, [pc, #332]	@ (80024a0 <HAL_UART_MspInit+0x238>)
 8002354:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002358:	f003 0208 	and.w	r2, r3, #8
 800235c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002360:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800236a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800236e:	681b      	ldr	r3, [r3, #0]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002370:	2308      	movs	r3, #8
 8002372:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002376:	2302      	movs	r3, #2
 8002378:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237c:	2300      	movs	r3, #0
 800237e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002382:	2300      	movs	r3, #0
 8002384:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002388:	2307      	movs	r3, #7
 800238a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238e:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8002392:	4619      	mov	r1, r3
 8002394:	4843      	ldr	r0, [pc, #268]	@ (80024a4 <HAL_UART_MspInit+0x23c>)
 8002396:	f000 ffc9 	bl	800332c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800239a:	2320      	movs	r3, #32
 800239c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a0:	2302      	movs	r3, #2
 80023a2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ac:	2300      	movs	r3, #0
 80023ae:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023b2:	2307      	movs	r3, #7
 80023b4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023b8:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80023bc:	4619      	mov	r1, r3
 80023be:	483a      	ldr	r0, [pc, #232]	@ (80024a8 <HAL_UART_MspInit+0x240>)
 80023c0:	f000 ffb4 	bl	800332c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80023c4:	e065      	b.n	8002492 <HAL_UART_MspInit+0x22a>
  else if(huart->Instance==USART6)
 80023c6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80023ca:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a36      	ldr	r2, [pc, #216]	@ (80024ac <HAL_UART_MspInit+0x244>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d15c      	bne.n	8002492 <HAL_UART_MspInit+0x22a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80023d8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80023dc:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80023e0:	f04f 0220 	mov.w	r2, #32
 80023e4:	f04f 0300 	mov.w	r3, #0
 80023e8:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 80023ec:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80023f0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80023f4:	2200      	movs	r2, #0
 80023f6:	671a      	str	r2, [r3, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023f8:	f107 0320 	add.w	r3, r7, #32
 80023fc:	4618      	mov	r0, r3
 80023fe:	f004 fe61 	bl	80070c4 <HAL_RCCEx_PeriphCLKConfig>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 8002408:	f7ff fce6 	bl	8001dd8 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800240c:	4b24      	ldr	r3, [pc, #144]	@ (80024a0 <HAL_UART_MspInit+0x238>)
 800240e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002412:	4a23      	ldr	r2, [pc, #140]	@ (80024a0 <HAL_UART_MspInit+0x238>)
 8002414:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002418:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800241c:	4b20      	ldr	r3, [pc, #128]	@ (80024a0 <HAL_UART_MspInit+0x238>)
 800241e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002422:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 8002426:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800242a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002434:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002438:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800243a:	4b19      	ldr	r3, [pc, #100]	@ (80024a0 <HAL_UART_MspInit+0x238>)
 800243c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002440:	4a17      	ldr	r2, [pc, #92]	@ (80024a0 <HAL_UART_MspInit+0x238>)
 8002442:	f043 0304 	orr.w	r3, r3, #4
 8002446:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800244a:	4b15      	ldr	r3, [pc, #84]	@ (80024a0 <HAL_UART_MspInit+0x238>)
 800244c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002450:	f003 0204 	and.w	r2, r3, #4
 8002454:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002458:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002462:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002466:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002468:	23c0      	movs	r3, #192	@ 0xc0
 800246a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246e:	2302      	movs	r3, #2
 8002470:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002474:	2300      	movs	r3, #0
 8002476:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247a:	2300      	movs	r3, #0
 800247c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8002480:	2307      	movs	r3, #7
 8002482:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002486:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800248a:	4619      	mov	r1, r3
 800248c:	4808      	ldr	r0, [pc, #32]	@ (80024b0 <HAL_UART_MspInit+0x248>)
 800248e:	f000 ff4d 	bl	800332c <HAL_GPIO_Init>
}
 8002492:	bf00      	nop
 8002494:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40004400 	.word	0x40004400
 80024a0:	44020c00 	.word	0x44020c00
 80024a4:	42020000 	.word	0x42020000
 80024a8:	42020c00 	.word	0x42020c00
 80024ac:	40006400 	.word	0x40006400
 80024b0:	42020800 	.word	0x42020800

080024b4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b0c6      	sub	sp, #280	@ 0x118
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80024be:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80024c2:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024c4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80024c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80024cc:	4618      	mov	r0, r3
 80024ce:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80024d2:	461a      	mov	r2, r3
 80024d4:	2100      	movs	r1, #0
 80024d6:	f010 f80d 	bl	80124f4 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 80024da:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80024de:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a22      	ldr	r2, [pc, #136]	@ (8002570 <HAL_PCD_MspInit+0xbc>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d13b      	bne.n	8002564 <HAL_PCD_MspInit+0xb0>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80024ec:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80024f0:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 80024f4:	f04f 0200 	mov.w	r2, #0
 80024f8:	f04f 0310 	mov.w	r3, #16
 80024fc:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002500:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002504:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002508:	2230      	movs	r2, #48	@ 0x30
 800250a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800250e:	f107 0310 	add.w	r3, r7, #16
 8002512:	4618      	mov	r0, r3
 8002514:	f004 fdd6 	bl	80070c4 <HAL_RCCEx_PeriphCLKConfig>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <HAL_PCD_MspInit+0x6e>
    {
      Error_Handler();
 800251e:	f7ff fc5b 	bl	8001dd8 <Error_Handler>
    }

    /* Enable VDDUSB */
    HAL_PWREx_EnableVddUSB();
 8002522:	f003 fe45 	bl	80061b0 <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002526:	4b13      	ldr	r3, [pc, #76]	@ (8002574 <HAL_PCD_MspInit+0xc0>)
 8002528:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800252c:	4a11      	ldr	r2, [pc, #68]	@ (8002574 <HAL_PCD_MspInit+0xc0>)
 800252e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002532:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002536:	4b0f      	ldr	r3, [pc, #60]	@ (8002574 <HAL_PCD_MspInit+0xc0>)
 8002538:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800253c:	f003 7280 	and.w	r2, r3, #16777216	@ 0x1000000
 8002540:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002544:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800254e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002552:	681b      	ldr	r3, [r3, #0]
    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 8002554:	2200      	movs	r2, #0
 8002556:	2100      	movs	r1, #0
 8002558:	204a      	movs	r0, #74	@ 0x4a
 800255a:	f000 fd79 	bl	8003050 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_DRD_FS_IRQn);
 800255e:	204a      	movs	r0, #74	@ 0x4a
 8002560:	f000 fd90 	bl	8003084 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 8002564:	bf00      	nop
 8002566:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40016000 	.word	0x40016000
 8002574:	44020c00 	.word	0x44020c00

08002578 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800257c:	bf00      	nop
 800257e:	e7fd      	b.n	800257c <NMI_Handler+0x4>

08002580 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002584:	bf00      	nop
 8002586:	e7fd      	b.n	8002584 <HardFault_Handler+0x4>

08002588 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800258c:	bf00      	nop
 800258e:	e7fd      	b.n	800258c <MemManage_Handler+0x4>

08002590 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002594:	bf00      	nop
 8002596:	e7fd      	b.n	8002594 <BusFault_Handler+0x4>

08002598 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800259c:	bf00      	nop
 800259e:	e7fd      	b.n	800259c <UsageFault_Handler+0x4>

080025a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025a4:	bf00      	nop
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025ae:	b480      	push	{r7}
 80025b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025b2:	bf00      	nop
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025c0:	bf00      	nop
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr

080025ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025ce:	f000 fc1f 	bl	8002e10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80025da:	2000      	movs	r0, #0
 80025dc:	f000 fa78 	bl	8002ad0 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80025e0:	bf00      	nop
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <USB_DRD_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt.
  */
void USB_DRD_FS_IRQHandler(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DRD_FS_IRQn 0 */

  /* USER CODE END USB_DRD_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 80025e8:	4802      	ldr	r0, [pc, #8]	@ (80025f4 <USB_DRD_FS_IRQHandler+0x10>)
 80025ea:	f002 fa73 	bl	8004ad4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_DRD_FS_IRQn 1 */

  /* USER CODE END USB_DRD_FS_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	2000047c 	.word	0x2000047c

080025f8 <HASH_IRQHandler>:

/**
  * @brief This function handles HASH global interrupt.
  */
void HASH_IRQHandler(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_IRQn 0 */

  /* USER CODE END HASH_IRQn 0 */
  HAL_HASH_IRQHandler(&hhash);
 80025fc:	4802      	ldr	r0, [pc, #8]	@ (8002608 <HASH_IRQHandler+0x10>)
 80025fe:	f001 f8e1 	bl	80037c4 <HAL_HASH_IRQHandler>
  /* USER CODE BEGIN HASH_IRQn 1 */

  /* USER CODE END HASH_IRQn 1 */
}
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	200001ec 	.word	0x200001ec

0800260c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002618:	2300      	movs	r3, #0
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	e00a      	b.n	8002634 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800261e:	f3af 8000 	nop.w
 8002622:	4601      	mov	r1, r0
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	1c5a      	adds	r2, r3, #1
 8002628:	60ba      	str	r2, [r7, #8]
 800262a:	b2ca      	uxtb	r2, r1
 800262c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	3301      	adds	r3, #1
 8002632:	617b      	str	r3, [r7, #20]
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	429a      	cmp	r2, r3
 800263a:	dbf0      	blt.n	800261e <_read+0x12>
  }

  return len;
 800263c:	687b      	ldr	r3, [r7, #4]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b086      	sub	sp, #24
 800264a:	af00      	add	r7, sp, #0
 800264c:	60f8      	str	r0, [r7, #12]
 800264e:	60b9      	str	r1, [r7, #8]
 8002650:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002652:	2300      	movs	r3, #0
 8002654:	617b      	str	r3, [r7, #20]
 8002656:	e009      	b.n	800266c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	1c5a      	adds	r2, r3, #1
 800265c:	60ba      	str	r2, [r7, #8]
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	4618      	mov	r0, r3
 8002662:	f000 fabb 	bl	8002bdc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	3301      	adds	r3, #1
 800266a:	617b      	str	r3, [r7, #20]
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	429a      	cmp	r2, r3
 8002672:	dbf1      	blt.n	8002658 <_write+0x12>
  }
  return len;
 8002674:	687b      	ldr	r3, [r7, #4]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <_close>:

int _close(int file)
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002686:	f04f 33ff 	mov.w	r3, #4294967295
}
 800268a:	4618      	mov	r0, r3
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002696:	b480      	push	{r7}
 8002698:	b083      	sub	sp, #12
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
 800269e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026a6:	605a      	str	r2, [r3, #4]
  return 0;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <_isatty>:

int _isatty(int file)
{
 80026b6:	b480      	push	{r7}
 80026b8:	b083      	sub	sp, #12
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026be:	2301      	movs	r3, #1
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3714      	adds	r7, #20
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
	...

080026e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026f0:	4a14      	ldr	r2, [pc, #80]	@ (8002744 <_sbrk+0x5c>)
 80026f2:	4b15      	ldr	r3, [pc, #84]	@ (8002748 <_sbrk+0x60>)
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026fc:	4b13      	ldr	r3, [pc, #76]	@ (800274c <_sbrk+0x64>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d102      	bne.n	800270a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002704:	4b11      	ldr	r3, [pc, #68]	@ (800274c <_sbrk+0x64>)
 8002706:	4a12      	ldr	r2, [pc, #72]	@ (8002750 <_sbrk+0x68>)
 8002708:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800270a:	4b10      	ldr	r3, [pc, #64]	@ (800274c <_sbrk+0x64>)
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4413      	add	r3, r2
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	429a      	cmp	r2, r3
 8002716:	d207      	bcs.n	8002728 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002718:	f00f ff3a 	bl	8012590 <__errno>
 800271c:	4603      	mov	r3, r0
 800271e:	220c      	movs	r2, #12
 8002720:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002722:	f04f 33ff 	mov.w	r3, #4294967295
 8002726:	e009      	b.n	800273c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002728:	4b08      	ldr	r3, [pc, #32]	@ (800274c <_sbrk+0x64>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800272e:	4b07      	ldr	r3, [pc, #28]	@ (800274c <_sbrk+0x64>)
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4413      	add	r3, r2
 8002736:	4a05      	ldr	r2, [pc, #20]	@ (800274c <_sbrk+0x64>)
 8002738:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800273a:	68fb      	ldr	r3, [r7, #12]
}
 800273c:	4618      	mov	r0, r3
 800273e:	3718      	adds	r7, #24
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	200a0000 	.word	0x200a0000
 8002748:	00000500 	.word	0x00000500
 800274c:	20000a3c 	.word	0x20000a3c
 8002750:	20011360 	.word	0x20011360

08002754 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800275a:	4b35      	ldr	r3, [pc, #212]	@ (8002830 <SystemInit+0xdc>)
 800275c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002760:	4a33      	ldr	r2, [pc, #204]	@ (8002830 <SystemInit+0xdc>)
 8002762:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002766:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800276a:	4b32      	ldr	r3, [pc, #200]	@ (8002834 <SystemInit+0xe0>)
 800276c:	2201      	movs	r2, #1
 800276e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002770:	4b30      	ldr	r3, [pc, #192]	@ (8002834 <SystemInit+0xe0>)
 8002772:	2200      	movs	r2, #0
 8002774:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002776:	4b2f      	ldr	r3, [pc, #188]	@ (8002834 <SystemInit+0xe0>)
 8002778:	2200      	movs	r2, #0
 800277a:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 800277c:	4b2d      	ldr	r3, [pc, #180]	@ (8002834 <SystemInit+0xe0>)
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	492c      	ldr	r1, [pc, #176]	@ (8002834 <SystemInit+0xe0>)
 8002782:	4b2d      	ldr	r3, [pc, #180]	@ (8002838 <SystemInit+0xe4>)
 8002784:	4013      	ands	r3, r2
 8002786:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8002788:	4b2a      	ldr	r3, [pc, #168]	@ (8002834 <SystemInit+0xe0>)
 800278a:	2200      	movs	r2, #0
 800278c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 800278e:	4b29      	ldr	r3, [pc, #164]	@ (8002834 <SystemInit+0xe0>)
 8002790:	2200      	movs	r2, #0
 8002792:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8002794:	4b27      	ldr	r3, [pc, #156]	@ (8002834 <SystemInit+0xe0>)
 8002796:	2200      	movs	r2, #0
 8002798:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800279a:	4b26      	ldr	r3, [pc, #152]	@ (8002834 <SystemInit+0xe0>)
 800279c:	4a27      	ldr	r2, [pc, #156]	@ (800283c <SystemInit+0xe8>)
 800279e:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80027a0:	4b24      	ldr	r3, [pc, #144]	@ (8002834 <SystemInit+0xe0>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80027a6:	4b23      	ldr	r3, [pc, #140]	@ (8002834 <SystemInit+0xe0>)
 80027a8:	4a24      	ldr	r2, [pc, #144]	@ (800283c <SystemInit+0xe8>)
 80027aa:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80027ac:	4b21      	ldr	r3, [pc, #132]	@ (8002834 <SystemInit+0xe0>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 80027b2:	4b20      	ldr	r3, [pc, #128]	@ (8002834 <SystemInit+0xe0>)
 80027b4:	4a21      	ldr	r2, [pc, #132]	@ (800283c <SystemInit+0xe8>)
 80027b6:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 80027b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002834 <SystemInit+0xe0>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80027be:	4b1d      	ldr	r3, [pc, #116]	@ (8002834 <SystemInit+0xe0>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a1c      	ldr	r2, [pc, #112]	@ (8002834 <SystemInit+0xe0>)
 80027c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027c8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80027ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002834 <SystemInit+0xe0>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80027d0:	4b17      	ldr	r3, [pc, #92]	@ (8002830 <SystemInit+0xdc>)
 80027d2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80027d6:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80027d8:	4b19      	ldr	r3, [pc, #100]	@ (8002840 <SystemInit+0xec>)
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 80027e0:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 80027e8:	d003      	beq.n	80027f2 <SystemInit+0x9e>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80027f0:	d117      	bne.n	8002822 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80027f2:	4b13      	ldr	r3, [pc, #76]	@ (8002840 <SystemInit+0xec>)
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d005      	beq.n	800280a <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80027fe:	4b10      	ldr	r3, [pc, #64]	@ (8002840 <SystemInit+0xec>)
 8002800:	4a10      	ldr	r2, [pc, #64]	@ (8002844 <SystemInit+0xf0>)
 8002802:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8002804:	4b0e      	ldr	r3, [pc, #56]	@ (8002840 <SystemInit+0xec>)
 8002806:	4a10      	ldr	r2, [pc, #64]	@ (8002848 <SystemInit+0xf4>)
 8002808:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800280a:	4b0d      	ldr	r3, [pc, #52]	@ (8002840 <SystemInit+0xec>)
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	4a0c      	ldr	r2, [pc, #48]	@ (8002840 <SystemInit+0xec>)
 8002810:	f043 0302 	orr.w	r3, r3, #2
 8002814:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8002816:	4b0a      	ldr	r3, [pc, #40]	@ (8002840 <SystemInit+0xec>)
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	4a09      	ldr	r2, [pc, #36]	@ (8002840 <SystemInit+0xec>)
 800281c:	f043 0301 	orr.w	r3, r3, #1
 8002820:	61d3      	str	r3, [r2, #28]
  }
}
 8002822:	bf00      	nop
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	e000ed00 	.word	0xe000ed00
 8002834:	44020c00 	.word	0x44020c00
 8002838:	eae2eae3 	.word	0xeae2eae3
 800283c:	01010280 	.word	0x01010280
 8002840:	40022000 	.word	0x40022000
 8002844:	08192a3b 	.word	0x08192a3b
 8002848:	4c5d6e7f 	.word	0x4c5d6e7f

0800284c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800284c:	480d      	ldr	r0, [pc, #52]	@ (8002884 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800284e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002850:	f7ff ff80 	bl	8002754 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002854:	480c      	ldr	r0, [pc, #48]	@ (8002888 <LoopForever+0x6>)
  ldr r1, =_edata
 8002856:	490d      	ldr	r1, [pc, #52]	@ (800288c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002858:	4a0d      	ldr	r2, [pc, #52]	@ (8002890 <LoopForever+0xe>)
  movs r3, #0
 800285a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800285c:	e002      	b.n	8002864 <LoopCopyDataInit>

0800285e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800285e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002862:	3304      	adds	r3, #4

08002864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002868:	d3f9      	bcc.n	800285e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800286a:	4a0a      	ldr	r2, [pc, #40]	@ (8002894 <LoopForever+0x12>)
  ldr r4, =_ebss
 800286c:	4c0a      	ldr	r4, [pc, #40]	@ (8002898 <LoopForever+0x16>)
  movs r3, #0
 800286e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002870:	e001      	b.n	8002876 <LoopFillZerobss>

08002872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002874:	3204      	adds	r2, #4

08002876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002878:	d3fb      	bcc.n	8002872 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800287a:	f00f fe8f 	bl	801259c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800287e:	f7fe fe99 	bl	80015b4 <main>

08002882 <LoopForever>:

LoopForever:
    b LoopForever
 8002882:	e7fe      	b.n	8002882 <LoopForever>
  ldr   r0, =_estack
 8002884:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002888:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800288c:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8002890:	080141d0 	.word	0x080141d0
  ldr r2, =_sbss
 8002894:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8002898:	20011360 	.word	0x20011360

0800289c <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800289c:	e7fe      	b.n	800289c <ADC1_IRQHandler>
	...

080028a0 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b08c      	sub	sp, #48	@ 0x30
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80028aa:	2300      	movs	r3, #0
 80028ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if ((Led != LED2)
 80028ae:	79fb      	ldrb	r3, [r7, #7]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d009      	beq.n	80028c8 <BSP_LED_Init+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 80028b4:	79fb      	ldrb	r3, [r7, #7]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d006      	beq.n	80028c8 <BSP_LED_Init+0x28>
 80028ba:	79fb      	ldrb	r3, [r7, #7]
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d003      	beq.n	80028c8 <BSP_LED_Init+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80028c0:	f06f 0301 	mvn.w	r3, #1
 80028c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028c6:	e055      	b.n	8002974 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 80028c8:	79fb      	ldrb	r3, [r7, #7]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d10f      	bne.n	80028ee <BSP_LED_Init+0x4e>
    {
      LED2_GPIO_CLK_ENABLE();
 80028ce:	4b2c      	ldr	r3, [pc, #176]	@ (8002980 <BSP_LED_Init+0xe0>)
 80028d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028d4:	4a2a      	ldr	r2, [pc, #168]	@ (8002980 <BSP_LED_Init+0xe0>)
 80028d6:	f043 0320 	orr.w	r3, r3, #32
 80028da:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80028de:	4b28      	ldr	r3, [pc, #160]	@ (8002980 <BSP_LED_Init+0xe0>)
 80028e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028e4:	f003 0320 	and.w	r3, r3, #32
 80028e8:	617b      	str	r3, [r7, #20]
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	e021      	b.n	8002932 <BSP_LED_Init+0x92>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10f      	bne.n	8002914 <BSP_LED_Init+0x74>
    {
      LED1_GPIO_CLK_ENABLE();
 80028f4:	4b22      	ldr	r3, [pc, #136]	@ (8002980 <BSP_LED_Init+0xe0>)
 80028f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028fa:	4a21      	ldr	r2, [pc, #132]	@ (8002980 <BSP_LED_Init+0xe0>)
 80028fc:	f043 0302 	orr.w	r3, r3, #2
 8002900:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002904:	4b1e      	ldr	r3, [pc, #120]	@ (8002980 <BSP_LED_Init+0xe0>)
 8002906:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	613b      	str	r3, [r7, #16]
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	e00e      	b.n	8002932 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8002914:	4b1a      	ldr	r3, [pc, #104]	@ (8002980 <BSP_LED_Init+0xe0>)
 8002916:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800291a:	4a19      	ldr	r2, [pc, #100]	@ (8002980 <BSP_LED_Init+0xe0>)
 800291c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002920:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002924:	4b16      	ldr	r3, [pc, #88]	@ (8002980 <BSP_LED_Init+0xe0>)
 8002926:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800292a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8002932:	79fb      	ldrb	r3, [r7, #7]
 8002934:	4a13      	ldr	r2, [pc, #76]	@ (8002984 <BSP_LED_Init+0xe4>)
 8002936:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800293a:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800293c:	2301      	movs	r3, #1
 800293e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8002940:	2300      	movs	r3, #0
 8002942:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002944:	2303      	movs	r3, #3
 8002946:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8002948:	79fb      	ldrb	r3, [r7, #7]
 800294a:	4a0f      	ldr	r2, [pc, #60]	@ (8002988 <BSP_LED_Init+0xe8>)
 800294c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002950:	f107 0218 	add.w	r2, r7, #24
 8002954:	4611      	mov	r1, r2
 8002956:	4618      	mov	r0, r3
 8002958:	f000 fce8 	bl	800332c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800295c:	79fb      	ldrb	r3, [r7, #7]
 800295e:	4a0a      	ldr	r2, [pc, #40]	@ (8002988 <BSP_LED_Init+0xe8>)
 8002960:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002964:	79fb      	ldrb	r3, [r7, #7]
 8002966:	4a07      	ldr	r2, [pc, #28]	@ (8002984 <BSP_LED_Init+0xe4>)
 8002968:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800296c:	2200      	movs	r2, #0
 800296e:	4619      	mov	r1, r3
 8002970:	f000 fe2e 	bl	80035d0 <HAL_GPIO_WritePin>
  }

  return ret;
 8002974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002976:	4618      	mov	r0, r3
 8002978:	3730      	adds	r7, #48	@ 0x30
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	44020c00 	.word	0x44020c00
 8002984:	08014158 	.word	0x08014158
 8002988:	2000000c 	.word	0x2000000c

0800298c <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	4603      	mov	r3, r0
 8002994:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002996:	2300      	movs	r3, #0
 8002998:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 800299a:	79fb      	ldrb	r3, [r7, #7]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d009      	beq.n	80029b4 <BSP_LED_Toggle+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 80029a0:	79fb      	ldrb	r3, [r7, #7]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d006      	beq.n	80029b4 <BSP_LED_Toggle+0x28>
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d003      	beq.n	80029b4 <BSP_LED_Toggle+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80029ac:	f06f 0301 	mvn.w	r3, #1
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	e00b      	b.n	80029cc <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80029b4:	79fb      	ldrb	r3, [r7, #7]
 80029b6:	4a08      	ldr	r2, [pc, #32]	@ (80029d8 <BSP_LED_Toggle+0x4c>)
 80029b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80029bc:	79fb      	ldrb	r3, [r7, #7]
 80029be:	4907      	ldr	r1, [pc, #28]	@ (80029dc <BSP_LED_Toggle+0x50>)
 80029c0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80029c4:	4619      	mov	r1, r3
 80029c6:	4610      	mov	r0, r2
 80029c8:	f000 fe1a 	bl	8003600 <HAL_GPIO_TogglePin>
  }

  return ret;
 80029cc:	68fb      	ldr	r3, [r7, #12]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	2000000c 	.word	0x2000000c
 80029dc:	08014158 	.word	0x08014158

080029e0 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b088      	sub	sp, #32
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4603      	mov	r3, r0
 80029e8:	460a      	mov	r2, r1
 80029ea:	71fb      	strb	r3, [r7, #7]
 80029ec:	4613      	mov	r3, r2
 80029ee:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80029f0:	4b30      	ldr	r3, [pc, #192]	@ (8002ab4 <BSP_PB_Init+0xd4>)
 80029f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029f6:	4a2f      	ldr	r2, [pc, #188]	@ (8002ab4 <BSP_PB_Init+0xd4>)
 80029f8:	f043 0304 	orr.w	r3, r3, #4
 80029fc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a00:	4b2c      	ldr	r3, [pc, #176]	@ (8002ab4 <BSP_PB_Init+0xd4>)
 8002a02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a06:	f003 0304 	and.w	r3, r3, #4
 8002a0a:	60bb      	str	r3, [r7, #8]
 8002a0c:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8002a0e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a12:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002a14:	2302      	movs	r3, #2
 8002a16:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8002a1c:	79bb      	ldrb	r3, [r7, #6]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10c      	bne.n	8002a3c <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002a22:	2300      	movs	r3, #0
 8002a24:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8002a26:	79fb      	ldrb	r3, [r7, #7]
 8002a28:	4a23      	ldr	r2, [pc, #140]	@ (8002ab8 <BSP_PB_Init+0xd8>)
 8002a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a2e:	f107 020c 	add.w	r2, r7, #12
 8002a32:	4611      	mov	r1, r2
 8002a34:	4618      	mov	r0, r3
 8002a36:	f000 fc79 	bl	800332c <HAL_GPIO_Init>
 8002a3a:	e036      	b.n	8002aaa <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002a3c:	4b1f      	ldr	r3, [pc, #124]	@ (8002abc <BSP_PB_Init+0xdc>)
 8002a3e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002a40:	79fb      	ldrb	r3, [r7, #7]
 8002a42:	4a1d      	ldr	r2, [pc, #116]	@ (8002ab8 <BSP_PB_Init+0xd8>)
 8002a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a48:	f107 020c 	add.w	r2, r7, #12
 8002a4c:	4611      	mov	r1, r2
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 fc6c 	bl	800332c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8002a54:	79fa      	ldrb	r2, [r7, #7]
 8002a56:	4613      	mov	r3, r2
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	4413      	add	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4a18      	ldr	r2, [pc, #96]	@ (8002ac0 <BSP_PB_Init+0xe0>)
 8002a60:	441a      	add	r2, r3
 8002a62:	79fb      	ldrb	r3, [r7, #7]
 8002a64:	4917      	ldr	r1, [pc, #92]	@ (8002ac4 <BSP_PB_Init+0xe4>)
 8002a66:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4610      	mov	r0, r2
 8002a6e:	f000 fc01 	bl	8003274 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8002a72:	79fa      	ldrb	r2, [r7, #7]
 8002a74:	4613      	mov	r3, r2
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	4413      	add	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4a10      	ldr	r2, [pc, #64]	@ (8002ac0 <BSP_PB_Init+0xe0>)
 8002a7e:	1898      	adds	r0, r3, r2
 8002a80:	79fb      	ldrb	r3, [r7, #7]
 8002a82:	4a11      	ldr	r2, [pc, #68]	@ (8002ac8 <BSP_PB_Init+0xe8>)
 8002a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a88:	461a      	mov	r2, r3
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	f000 fbc6 	bl	800321c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8002a90:	2018      	movs	r0, #24
 8002a92:	79fb      	ldrb	r3, [r7, #7]
 8002a94:	4a0d      	ldr	r2, [pc, #52]	@ (8002acc <BSP_PB_Init+0xec>)
 8002a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	f000 fad7 	bl	8003050 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002aa2:	2318      	movs	r3, #24
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f000 faed 	bl	8003084 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3720      	adds	r7, #32
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	44020c00 	.word	0x44020c00
 8002ab8:	20000018 	.word	0x20000018
 8002abc:	10110000 	.word	0x10110000
 8002ac0:	20000a40 	.word	0x20000a40
 8002ac4:	08014160 	.word	0x08014160
 8002ac8:	2000001c 	.word	0x2000001c
 8002acc:	20000020 	.word	0x20000020

08002ad0 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8002ada:	79fa      	ldrb	r2, [r7, #7]
 8002adc:	4613      	mov	r3, r2
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	4413      	add	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4a04      	ldr	r2, [pc, #16]	@ (8002af8 <BSP_PB_IRQHandler+0x28>)
 8002ae6:	4413      	add	r3, r2
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f000 fbd7 	bl	800329c <HAL_EXTI_IRQHandler>
}
 8002aee:	bf00      	nop
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20000a40 	.word	0x20000a40

08002afc <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	4603      	mov	r3, r0
 8002b04:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
	...

08002b14 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	6039      	str	r1, [r7, #0]
 8002b1e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002b20:	2300      	movs	r3, #0
 8002b22:	60fb      	str	r3, [r7, #12]

  if (COM >= COM_NBR)
 8002b24:	79fb      	ldrb	r3, [r7, #7]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002b2a:	f06f 0301 	mvn.w	r3, #1
 8002b2e:	60fb      	str	r3, [r7, #12]
 8002b30:	e018      	b.n	8002b64 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8002b32:	79fb      	ldrb	r3, [r7, #7]
 8002b34:	2294      	movs	r2, #148	@ 0x94
 8002b36:	fb02 f303 	mul.w	r3, r2, r3
 8002b3a:	4a0d      	ldr	r2, [pc, #52]	@ (8002b70 <BSP_COM_Init+0x5c>)
 8002b3c:	4413      	add	r3, r2
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f000 f870 	bl	8002c24 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8002b44:	79fb      	ldrb	r3, [r7, #7]
 8002b46:	2294      	movs	r2, #148	@ 0x94
 8002b48:	fb02 f303 	mul.w	r3, r2, r3
 8002b4c:	4a08      	ldr	r2, [pc, #32]	@ (8002b70 <BSP_COM_Init+0x5c>)
 8002b4e:	4413      	add	r3, r2
 8002b50:	6839      	ldr	r1, [r7, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 f80e 	bl	8002b74 <MX_USART_Init>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d002      	beq.n	8002b64 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002b5e:	f06f 0303 	mvn.w	r3, #3
 8002b62:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002b64:	68fb      	ldr	r3, [r7, #12]
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	20000a4c 	.word	0x20000a4c

08002b74 <MX_USART_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8002b7e:	4b16      	ldr	r3, [pc, #88]	@ (8002bd8 <MX_USART_Init+0x64>)
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	220c      	movs	r2, #12
 8002b92:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	895b      	ldrh	r3, [r3, #10]
 8002b98:	461a      	mov	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	891b      	ldrh	r3, [r3, #8]
 8002baa:	461a      	mov	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	899b      	ldrh	r3, [r3, #12]
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002bc0:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f00a f896 	bl	800ccfa <HAL_UART_Init>
 8002bce:	4603      	mov	r3, r0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	20000008 	.word	0x20000008

08002bdc <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8002be4:	4b09      	ldr	r3, [pc, #36]	@ (8002c0c <__io_putchar+0x30>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	461a      	mov	r2, r3
 8002bea:	2394      	movs	r3, #148	@ 0x94
 8002bec:	fb02 f303 	mul.w	r3, r2, r3
 8002bf0:	4a07      	ldr	r2, [pc, #28]	@ (8002c10 <__io_putchar+0x34>)
 8002bf2:	1898      	adds	r0, r3, r2
 8002bf4:	1d39      	adds	r1, r7, #4
 8002bf6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f00a f8cd 	bl	800cd9a <HAL_UART_Transmit>
  return ch;
 8002c00:	687b      	ldr	r3, [r7, #4]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	20000ae0 	.word	0x20000ae0
 8002c10:	20000a4c 	.word	0x20000a4c

08002c14 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002c18:	2000      	movs	r0, #0
 8002c1a:	f7ff ff6f 	bl	8002afc <BSP_PB_Callback>
}
 8002c1e:	bf00      	nop
 8002c20:	bd80      	pop	{r7, pc}
	...

08002c24 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b08a      	sub	sp, #40	@ 0x28
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8002c2c:	4b27      	ldr	r3, [pc, #156]	@ (8002ccc <COM1_MspInit+0xa8>)
 8002c2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c32:	4a26      	ldr	r2, [pc, #152]	@ (8002ccc <COM1_MspInit+0xa8>)
 8002c34:	f043 0308 	orr.w	r3, r3, #8
 8002c38:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002c3c:	4b23      	ldr	r3, [pc, #140]	@ (8002ccc <COM1_MspInit+0xa8>)
 8002c3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c42:	f003 0308 	and.w	r3, r3, #8
 8002c46:	613b      	str	r3, [r7, #16]
 8002c48:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8002c4a:	4b20      	ldr	r3, [pc, #128]	@ (8002ccc <COM1_MspInit+0xa8>)
 8002c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c50:	4a1e      	ldr	r2, [pc, #120]	@ (8002ccc <COM1_MspInit+0xa8>)
 8002c52:	f043 0308 	orr.w	r3, r3, #8
 8002c56:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002c5a:	4b1c      	ldr	r3, [pc, #112]	@ (8002ccc <COM1_MspInit+0xa8>)
 8002c5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c60:	f003 0308 	and.w	r3, r3, #8
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8002c68:	4b18      	ldr	r3, [pc, #96]	@ (8002ccc <COM1_MspInit+0xa8>)
 8002c6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002c6e:	4a17      	ldr	r2, [pc, #92]	@ (8002ccc <COM1_MspInit+0xa8>)
 8002c70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c74:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002c78:	4b14      	ldr	r3, [pc, #80]	@ (8002ccc <COM1_MspInit+0xa8>)
 8002c7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002c7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c82:	60bb      	str	r3, [r7, #8]
 8002c84:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8002c86:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c8a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002c90:	2302      	movs	r3, #2
 8002c92:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002c94:	2301      	movs	r3, #1
 8002c96:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8002c98:	2307      	movs	r3, #7
 8002c9a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8002c9c:	f107 0314 	add.w	r3, r7, #20
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	480b      	ldr	r0, [pc, #44]	@ (8002cd0 <COM1_MspInit+0xac>)
 8002ca4:	f000 fb42 	bl	800332c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8002ca8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002cac:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002cae:	2302      	movs	r3, #2
 8002cb0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8002cb2:	2307      	movs	r3, #7
 8002cb4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8002cb6:	f107 0314 	add.w	r3, r7, #20
 8002cba:	4619      	mov	r1, r3
 8002cbc:	4804      	ldr	r0, [pc, #16]	@ (8002cd0 <COM1_MspInit+0xac>)
 8002cbe:	f000 fb35 	bl	800332c <HAL_GPIO_Init>
}
 8002cc2:	bf00      	nop
 8002cc4:	3728      	adds	r7, #40	@ 0x28
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	44020c00 	.word	0x44020c00
 8002cd0:	42020c00 	.word	0x42020c00

08002cd4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cd8:	2003      	movs	r0, #3
 8002cda:	f000 f9ae 	bl	800303a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002cde:	f004 f867 	bl	8006db0 <HAL_RCC_GetSysClockFreq>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8002d18 <HAL_Init+0x44>)
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	f003 030f 	and.w	r3, r3, #15
 8002cec:	490b      	ldr	r1, [pc, #44]	@ (8002d1c <HAL_Init+0x48>)
 8002cee:	5ccb      	ldrb	r3, [r1, r3]
 8002cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8002cf4:	4a0a      	ldr	r2, [pc, #40]	@ (8002d20 <HAL_Init+0x4c>)
 8002cf6:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002cf8:	2004      	movs	r0, #4
 8002cfa:	f000 fa01 	bl	8003100 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cfe:	200f      	movs	r0, #15
 8002d00:	f000 f810 	bl	8002d24 <HAL_InitTick>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e002      	b.n	8002d14 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002d0e:	f7ff f869 	bl	8001de4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	44020c00 	.word	0x44020c00
 8002d1c:	08014140 	.word	0x08014140
 8002d20:	20000004 	.word	0x20000004

08002d24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002d30:	4b33      	ldr	r3, [pc, #204]	@ (8002e00 <HAL_InitTick+0xdc>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e05c      	b.n	8002df6 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002d3c:	4b31      	ldr	r3, [pc, #196]	@ (8002e04 <HAL_InitTick+0xe0>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	2b04      	cmp	r3, #4
 8002d46:	d10c      	bne.n	8002d62 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002d48:	4b2f      	ldr	r3, [pc, #188]	@ (8002e08 <HAL_InitTick+0xe4>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	4b2c      	ldr	r3, [pc, #176]	@ (8002e00 <HAL_InitTick+0xdc>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	4619      	mov	r1, r3
 8002d52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	e037      	b.n	8002dd2 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8002d62:	f000 fa25 	bl	80031b0 <HAL_SYSTICK_GetCLKSourceConfig>
 8002d66:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d023      	beq.n	8002db6 <HAL_InitTick+0x92>
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d82d      	bhi.n	8002dd0 <HAL_InitTick+0xac>
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_InitTick+0x5e>
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d00d      	beq.n	8002d9c <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002d80:	e026      	b.n	8002dd0 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8002d82:	4b21      	ldr	r3, [pc, #132]	@ (8002e08 <HAL_InitTick+0xe4>)
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	4b1e      	ldr	r3, [pc, #120]	@ (8002e00 <HAL_InitTick+0xdc>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002d90:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d98:	60fb      	str	r3, [r7, #12]
        break;
 8002d9a:	e01a      	b.n	8002dd2 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002d9c:	4b18      	ldr	r3, [pc, #96]	@ (8002e00 <HAL_InitTick+0xdc>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	461a      	mov	r2, r3
 8002da2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002da6:	fbb3 f3f2 	udiv	r3, r3, r2
 8002daa:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db2:	60fb      	str	r3, [r7, #12]
        break;
 8002db4:	e00d      	b.n	8002dd2 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002db6:	4b12      	ldr	r3, [pc, #72]	@ (8002e00 <HAL_InitTick+0xdc>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	461a      	mov	r2, r3
 8002dbc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002dc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002dc4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dcc:	60fb      	str	r3, [r7, #12]
        break;
 8002dce:	e000      	b.n	8002dd2 <HAL_InitTick+0xae>
        break;
 8002dd0:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 f972 	bl	80030bc <HAL_SYSTICK_Config>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e009      	b.n	8002df6 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002de2:	2200      	movs	r2, #0
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	f04f 30ff 	mov.w	r0, #4294967295
 8002dea:	f000 f931 	bl	8003050 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002dee:	4a07      	ldr	r2, [pc, #28]	@ (8002e0c <HAL_InitTick+0xe8>)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	20000028 	.word	0x20000028
 8002e04:	e000e010 	.word	0xe000e010
 8002e08:	20000004 	.word	0x20000004
 8002e0c:	20000024 	.word	0x20000024

08002e10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e14:	4b06      	ldr	r3, [pc, #24]	@ (8002e30 <HAL_IncTick+0x20>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	461a      	mov	r2, r3
 8002e1a:	4b06      	ldr	r3, [pc, #24]	@ (8002e34 <HAL_IncTick+0x24>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4413      	add	r3, r2
 8002e20:	4a04      	ldr	r2, [pc, #16]	@ (8002e34 <HAL_IncTick+0x24>)
 8002e22:	6013      	str	r3, [r2, #0]
}
 8002e24:	bf00      	nop
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	20000028 	.word	0x20000028
 8002e34:	20000ae4 	.word	0x20000ae4

08002e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e3c:	4b03      	ldr	r3, [pc, #12]	@ (8002e4c <HAL_GetTick+0x14>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	20000ae4 	.word	0x20000ae4

08002e50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e58:	f7ff ffee 	bl	8002e38 <HAL_GetTick>
 8002e5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e68:	d005      	beq.n	8002e76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e94 <HAL_Delay+0x44>)
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4413      	add	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e76:	bf00      	nop
 8002e78:	f7ff ffde 	bl	8002e38 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d8f7      	bhi.n	8002e78 <HAL_Delay+0x28>
  {
  }
}
 8002e88:	bf00      	nop
 8002e8a:	bf00      	nop
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	20000028 	.word	0x20000028

08002e98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8002edc <__NVIC_SetPriorityGrouping+0x44>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ec0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ec4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ec8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eca:	4a04      	ldr	r2, [pc, #16]	@ (8002edc <__NVIC_SetPriorityGrouping+0x44>)
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	60d3      	str	r3, [r2, #12]
}
 8002ed0:	bf00      	nop
 8002ed2:	3714      	adds	r7, #20
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	e000ed00 	.word	0xe000ed00

08002ee0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ee4:	4b04      	ldr	r3, [pc, #16]	@ (8002ef8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	0a1b      	lsrs	r3, r3, #8
 8002eea:	f003 0307 	and.w	r3, r3, #7
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	e000ed00 	.word	0xe000ed00

08002efc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	4603      	mov	r3, r0
 8002f04:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	db0b      	blt.n	8002f26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f0e:	88fb      	ldrh	r3, [r7, #6]
 8002f10:	f003 021f 	and.w	r2, r3, #31
 8002f14:	4907      	ldr	r1, [pc, #28]	@ (8002f34 <__NVIC_EnableIRQ+0x38>)
 8002f16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f1a:	095b      	lsrs	r3, r3, #5
 8002f1c:	2001      	movs	r0, #1
 8002f1e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	e000e100 	.word	0xe000e100

08002f38 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	4603      	mov	r3, r0
 8002f40:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	db12      	blt.n	8002f70 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f4a:	88fb      	ldrh	r3, [r7, #6]
 8002f4c:	f003 021f 	and.w	r2, r3, #31
 8002f50:	490a      	ldr	r1, [pc, #40]	@ (8002f7c <__NVIC_DisableIRQ+0x44>)
 8002f52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f56:	095b      	lsrs	r3, r3, #5
 8002f58:	2001      	movs	r0, #1
 8002f5a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f5e:	3320      	adds	r3, #32
 8002f60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002f64:	f3bf 8f4f 	dsb	sy
}
 8002f68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002f6a:	f3bf 8f6f 	isb	sy
}
 8002f6e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	e000e100 	.word	0xe000e100

08002f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	6039      	str	r1, [r7, #0]
 8002f8a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	db0a      	blt.n	8002faa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	490c      	ldr	r1, [pc, #48]	@ (8002fcc <__NVIC_SetPriority+0x4c>)
 8002f9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f9e:	0112      	lsls	r2, r2, #4
 8002fa0:	b2d2      	uxtb	r2, r2
 8002fa2:	440b      	add	r3, r1
 8002fa4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fa8:	e00a      	b.n	8002fc0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	4908      	ldr	r1, [pc, #32]	@ (8002fd0 <__NVIC_SetPriority+0x50>)
 8002fb0:	88fb      	ldrh	r3, [r7, #6]
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	3b04      	subs	r3, #4
 8002fb8:	0112      	lsls	r2, r2, #4
 8002fba:	b2d2      	uxtb	r2, r2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	761a      	strb	r2, [r3, #24]
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	e000e100 	.word	0xe000e100
 8002fd0:	e000ed00 	.word	0xe000ed00

08002fd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b089      	sub	sp, #36	@ 0x24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	f1c3 0307 	rsb	r3, r3, #7
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	bf28      	it	cs
 8002ff2:	2304      	movcs	r3, #4
 8002ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	2b06      	cmp	r3, #6
 8002ffc:	d902      	bls.n	8003004 <NVIC_EncodePriority+0x30>
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	3b03      	subs	r3, #3
 8003002:	e000      	b.n	8003006 <NVIC_EncodePriority+0x32>
 8003004:	2300      	movs	r3, #0
 8003006:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003008:	f04f 32ff 	mov.w	r2, #4294967295
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	43da      	mvns	r2, r3
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	401a      	ands	r2, r3
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800301c:	f04f 31ff 	mov.w	r1, #4294967295
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	fa01 f303 	lsl.w	r3, r1, r3
 8003026:	43d9      	mvns	r1, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800302c:	4313      	orrs	r3, r2
         );
}
 800302e:	4618      	mov	r0, r3
 8003030:	3724      	adds	r7, #36	@ 0x24
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b082      	sub	sp, #8
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7ff ff28 	bl	8002e98 <__NVIC_SetPriorityGrouping>
}
 8003048:	bf00      	nop
 800304a:	3708      	adds	r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	4603      	mov	r3, r0
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
 800305c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800305e:	f7ff ff3f 	bl	8002ee0 <__NVIC_GetPriorityGrouping>
 8003062:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	68b9      	ldr	r1, [r7, #8]
 8003068:	6978      	ldr	r0, [r7, #20]
 800306a:	f7ff ffb3 	bl	8002fd4 <NVIC_EncodePriority>
 800306e:	4602      	mov	r2, r0
 8003070:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003074:	4611      	mov	r1, r2
 8003076:	4618      	mov	r0, r3
 8003078:	f7ff ff82 	bl	8002f80 <__NVIC_SetPriority>
}
 800307c:	bf00      	nop
 800307e:	3718      	adds	r7, #24
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	4603      	mov	r3, r0
 800308c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800308e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003092:	4618      	mov	r0, r3
 8003094:	f7ff ff32 	bl	8002efc <__NVIC_EnableIRQ>
}
 8003098:	bf00      	nop
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	4603      	mov	r3, r0
 80030a8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80030aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff ff42 	bl	8002f38 <__NVIC_DisableIRQ>
}
 80030b4:	bf00      	nop
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	3b01      	subs	r3, #1
 80030c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030cc:	d301      	bcc.n	80030d2 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80030ce:	2301      	movs	r3, #1
 80030d0:	e00d      	b.n	80030ee <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80030d2:	4a0a      	ldr	r2, [pc, #40]	@ (80030fc <HAL_SYSTICK_Config+0x40>)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3b01      	subs	r3, #1
 80030d8:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80030da:	4b08      	ldr	r3, [pc, #32]	@ (80030fc <HAL_SYSTICK_Config+0x40>)
 80030dc:	2200      	movs	r2, #0
 80030de:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80030e0:	4b06      	ldr	r3, [pc, #24]	@ (80030fc <HAL_SYSTICK_Config+0x40>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a05      	ldr	r2, [pc, #20]	@ (80030fc <HAL_SYSTICK_Config+0x40>)
 80030e6:	f043 0303 	orr.w	r3, r3, #3
 80030ea:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	e000e010 	.word	0xe000e010

08003100 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b04      	cmp	r3, #4
 800310c:	d844      	bhi.n	8003198 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800310e:	a201      	add	r2, pc, #4	@ (adr r2, 8003114 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8003110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003114:	08003137 	.word	0x08003137
 8003118:	08003155 	.word	0x08003155
 800311c:	08003177 	.word	0x08003177
 8003120:	08003199 	.word	0x08003199
 8003124:	08003129 	.word	0x08003129
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003128:	4b1f      	ldr	r3, [pc, #124]	@ (80031a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a1e      	ldr	r2, [pc, #120]	@ (80031a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800312e:	f043 0304 	orr.w	r3, r3, #4
 8003132:	6013      	str	r3, [r2, #0]
      break;
 8003134:	e031      	b.n	800319a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003136:	4b1c      	ldr	r3, [pc, #112]	@ (80031a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a1b      	ldr	r2, [pc, #108]	@ (80031a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800313c:	f023 0304 	bic.w	r3, r3, #4
 8003140:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8003142:	4b1a      	ldr	r3, [pc, #104]	@ (80031ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003144:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003148:	4a18      	ldr	r2, [pc, #96]	@ (80031ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800314a:	f023 030c 	bic.w	r3, r3, #12
 800314e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003152:	e022      	b.n	800319a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003154:	4b14      	ldr	r3, [pc, #80]	@ (80031a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a13      	ldr	r2, [pc, #76]	@ (80031a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800315a:	f023 0304 	bic.w	r3, r3, #4
 800315e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8003160:	4b12      	ldr	r3, [pc, #72]	@ (80031ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003162:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003166:	f023 030c 	bic.w	r3, r3, #12
 800316a:	4a10      	ldr	r2, [pc, #64]	@ (80031ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800316c:	f043 0304 	orr.w	r3, r3, #4
 8003170:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003174:	e011      	b.n	800319a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003176:	4b0c      	ldr	r3, [pc, #48]	@ (80031a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a0b      	ldr	r2, [pc, #44]	@ (80031a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800317c:	f023 0304 	bic.w	r3, r3, #4
 8003180:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8003182:	4b0a      	ldr	r3, [pc, #40]	@ (80031ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003184:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003188:	f023 030c 	bic.w	r3, r3, #12
 800318c:	4a07      	ldr	r2, [pc, #28]	@ (80031ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800318e:	f043 0308 	orr.w	r3, r3, #8
 8003192:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003196:	e000      	b.n	800319a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8003198:	bf00      	nop
  }
}
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	e000e010 	.word	0xe000e010
 80031ac:	44020c00 	.word	0x44020c00

080031b0 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80031b6:	4b17      	ldr	r3, [pc, #92]	@ (8003214 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0304 	and.w	r3, r3, #4
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d002      	beq.n	80031c8 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80031c2:	2304      	movs	r3, #4
 80031c4:	607b      	str	r3, [r7, #4]
 80031c6:	e01e      	b.n	8003206 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 80031c8:	4b13      	ldr	r3, [pc, #76]	@ (8003218 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 80031ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80031ce:	f003 030c 	and.w	r3, r3, #12
 80031d2:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	2b08      	cmp	r3, #8
 80031d8:	d00f      	beq.n	80031fa <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	2b08      	cmp	r3, #8
 80031de:	d80f      	bhi.n	8003200 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	2b04      	cmp	r3, #4
 80031ea:	d003      	beq.n	80031f4 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80031ec:	e008      	b.n	8003200 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80031ee:	2300      	movs	r3, #0
 80031f0:	607b      	str	r3, [r7, #4]
        break;
 80031f2:	e008      	b.n	8003206 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80031f4:	2301      	movs	r3, #1
 80031f6:	607b      	str	r3, [r7, #4]
        break;
 80031f8:	e005      	b.n	8003206 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80031fa:	2302      	movs	r3, #2
 80031fc:	607b      	str	r3, [r7, #4]
        break;
 80031fe:	e002      	b.n	8003206 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8003200:	2300      	movs	r3, #0
 8003202:	607b      	str	r3, [r7, #4]
        break;
 8003204:	bf00      	nop
    }
  }
  return systick_source;
 8003206:	687b      	ldr	r3, [r7, #4]
}
 8003208:	4618      	mov	r0, r3
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr
 8003214:	e000e010 	.word	0xe000e010
 8003218:	44020c00 	.word	0x44020c00

0800321c <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 800321c:	b480      	push	{r7}
 800321e:	b087      	sub	sp, #28
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	460b      	mov	r3, r1
 8003226:	607a      	str	r2, [r7, #4]
 8003228:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800322a:	2300      	movs	r3, #0
 800322c:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800322e:	7afb      	ldrb	r3, [r7, #11]
 8003230:	2b02      	cmp	r3, #2
 8003232:	d011      	beq.n	8003258 <HAL_EXTI_RegisterCallback+0x3c>
 8003234:	2b02      	cmp	r3, #2
 8003236:	dc13      	bgt.n	8003260 <HAL_EXTI_RegisterCallback+0x44>
 8003238:	2b00      	cmp	r3, #0
 800323a:	d002      	beq.n	8003242 <HAL_EXTI_RegisterCallback+0x26>
 800323c:	2b01      	cmp	r3, #1
 800323e:	d007      	beq.n	8003250 <HAL_EXTI_RegisterCallback+0x34>
 8003240:	e00e      	b.n	8003260 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	609a      	str	r2, [r3, #8]
      break;
 800324e:	e00a      	b.n	8003266 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	605a      	str	r2, [r3, #4]
      break;
 8003256:	e006      	b.n	8003266 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	609a      	str	r2, [r3, #8]
      break;
 800325e:	e002      	b.n	8003266 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	75fb      	strb	r3, [r7, #23]
      break;
 8003264:	bf00      	nop
  }

  return status;
 8003266:	7dfb      	ldrb	r3, [r7, #23]
}
 8003268:	4618      	mov	r0, r3
 800326a:	371c      	adds	r7, #28
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e003      	b.n	8003290 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800328e:	2300      	movs	r3, #0
  }
}
 8003290:	4618      	mov	r0, r3
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	0c1b      	lsrs	r3, r3, #16
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 031f 	and.w	r3, r3, #31
 80032b8:	2201      	movs	r2, #1
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	015a      	lsls	r2, r3, #5
 80032c4:	4b17      	ldr	r3, [pc, #92]	@ (8003324 <HAL_EXTI_IRQHandler+0x88>)
 80032c6:	4413      	add	r3, r2
 80032c8:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	4013      	ands	r3, r2
 80032d2:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d009      	beq.n	80032ee <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d002      	beq.n	80032ee <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	015a      	lsls	r2, r3, #5
 80032f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003328 <HAL_EXTI_IRQHandler+0x8c>)
 80032f4:	4413      	add	r3, r2
 80032f6:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	4013      	ands	r3, r2
 8003300:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d009      	beq.n	800331c <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d002      	beq.n	800331c <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	4798      	blx	r3
    }
  }
}
 800331c:	bf00      	nop
 800331e:	3718      	adds	r7, #24
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	4402200c 	.word	0x4402200c
 8003328:	44022010 	.word	0x44022010

0800332c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800332c:	b480      	push	{r7}
 800332e:	b087      	sub	sp, #28
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8003336:	2300      	movs	r3, #0
 8003338:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800333a:	e136      	b.n	80035aa <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	2101      	movs	r1, #1
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	fa01 f303 	lsl.w	r3, r1, r3
 8003348:	4013      	ands	r3, r2
 800334a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2b00      	cmp	r3, #0
 8003350:	f000 8128 	beq.w	80035a4 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	2b02      	cmp	r3, #2
 800335a:	d003      	beq.n	8003364 <HAL_GPIO_Init+0x38>
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	2b12      	cmp	r3, #18
 8003362:	d125      	bne.n	80033b0 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	08da      	lsrs	r2, r3, #3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3208      	adds	r2, #8
 800336c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003370:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	f003 0307 	and.w	r3, r3, #7
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	220f      	movs	r2, #15
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	43db      	mvns	r3, r3
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	4013      	ands	r3, r2
 8003386:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	f003 020f 	and.w	r2, r3, #15
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	f003 0307 	and.w	r3, r3, #7
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	4313      	orrs	r3, r2
 80033a0:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	08da      	lsrs	r2, r3, #3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	3208      	adds	r2, #8
 80033aa:	6979      	ldr	r1, [r7, #20]
 80033ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	2203      	movs	r2, #3
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	43db      	mvns	r3, r3
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4013      	ands	r3, r2
 80033c6:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f003 0203 	and.w	r2, r3, #3
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	4313      	orrs	r3, r2
 80033dc:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d00b      	beq.n	8003404 <HAL_GPIO_Init+0xd8>
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d007      	beq.n	8003404 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033f8:	2b11      	cmp	r3, #17
 80033fa:	d003      	beq.n	8003404 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	2b12      	cmp	r3, #18
 8003402:	d130      	bne.n	8003466 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	2203      	movs	r2, #3
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	43db      	mvns	r3, r3
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	4013      	ands	r3, r2
 800341a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	68da      	ldr	r2, [r3, #12]
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	4313      	orrs	r3, r2
 800342c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800343a:	2201      	movs	r2, #1
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	43db      	mvns	r3, r3
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	4013      	ands	r3, r2
 8003448:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	091b      	lsrs	r3, r3, #4
 8003450:	f003 0201 	and.w	r2, r3, #1
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	fa02 f303 	lsl.w	r3, r2, r3
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	4313      	orrs	r3, r2
 800345e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	2b03      	cmp	r3, #3
 800346c:	d017      	beq.n	800349e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	2203      	movs	r2, #3
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	43db      	mvns	r3, r3
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	4013      	ands	r3, r2
 8003484:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	689a      	ldr	r2, [r3, #8]
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	4313      	orrs	r3, r2
 8003496:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d07c      	beq.n	80035a4 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80034aa:	4a47      	ldr	r2, [pc, #284]	@ (80035c8 <HAL_GPIO_Init+0x29c>)
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	089b      	lsrs	r3, r3, #2
 80034b0:	3318      	adds	r3, #24
 80034b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034b6:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	f003 0303 	and.w	r3, r3, #3
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	220f      	movs	r2, #15
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	43db      	mvns	r3, r3
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	4013      	ands	r3, r2
 80034cc:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	0a9a      	lsrs	r2, r3, #10
 80034d2:	4b3e      	ldr	r3, [pc, #248]	@ (80035cc <HAL_GPIO_Init+0x2a0>)
 80034d4:	4013      	ands	r3, r2
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	f002 0203 	and.w	r2, r2, #3
 80034dc:	00d2      	lsls	r2, r2, #3
 80034de:	4093      	lsls	r3, r2
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80034e6:	4938      	ldr	r1, [pc, #224]	@ (80035c8 <HAL_GPIO_Init+0x29c>)
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	089b      	lsrs	r3, r3, #2
 80034ec:	3318      	adds	r3, #24
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80034f4:	4b34      	ldr	r3, [pc, #208]	@ (80035c8 <HAL_GPIO_Init+0x29c>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	43db      	mvns	r3, r3
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	4013      	ands	r3, r2
 8003502:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d003      	beq.n	8003518 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	4313      	orrs	r3, r2
 8003516:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8003518:	4a2b      	ldr	r2, [pc, #172]	@ (80035c8 <HAL_GPIO_Init+0x29c>)
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800351e:	4b2a      	ldr	r3, [pc, #168]	@ (80035c8 <HAL_GPIO_Init+0x29c>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	43db      	mvns	r3, r3
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	4013      	ands	r3, r2
 800352c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4313      	orrs	r3, r2
 8003540:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8003542:	4a21      	ldr	r2, [pc, #132]	@ (80035c8 <HAL_GPIO_Init+0x29c>)
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003548:	4b1f      	ldr	r3, [pc, #124]	@ (80035c8 <HAL_GPIO_Init+0x29c>)
 800354a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800354e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	43db      	mvns	r3, r3
 8003554:	697a      	ldr	r2, [r7, #20]
 8003556:	4013      	ands	r3, r2
 8003558:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4313      	orrs	r3, r2
 800356c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800356e:	4a16      	ldr	r2, [pc, #88]	@ (80035c8 <HAL_GPIO_Init+0x29c>)
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8003576:	4b14      	ldr	r3, [pc, #80]	@ (80035c8 <HAL_GPIO_Init+0x29c>)
 8003578:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800357c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	43db      	mvns	r3, r3
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	4013      	ands	r3, r2
 8003586:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d003      	beq.n	800359c <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	4313      	orrs	r3, r2
 800359a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 800359c:	4a0a      	ldr	r2, [pc, #40]	@ (80035c8 <HAL_GPIO_Init+0x29c>)
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	3301      	adds	r3, #1
 80035a8:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	fa22 f303 	lsr.w	r3, r2, r3
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f47f aec1 	bne.w	800333c <HAL_GPIO_Init+0x10>
  }
}
 80035ba:	bf00      	nop
 80035bc:	bf00      	nop
 80035be:	371c      	adds	r7, #28
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	44022000 	.word	0x44022000
 80035cc:	002f7f7f 	.word	0x002f7f7f

080035d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	460b      	mov	r3, r1
 80035da:	807b      	strh	r3, [r7, #2]
 80035dc:	4613      	mov	r3, r2
 80035de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035e0:	787b      	ldrb	r3, [r7, #1]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035e6:	887a      	ldrh	r2, [r7, #2]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035ec:	e002      	b.n	80035f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035ee:	887a      	ldrh	r2, [r7, #2]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	460b      	mov	r3, r1
 800360a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003612:	887a      	ldrh	r2, [r7, #2]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	4013      	ands	r3, r2
 8003618:	041a      	lsls	r2, r3, #16
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	43d9      	mvns	r1, r3
 800361e:	887b      	ldrh	r3, [r7, #2]
 8003620:	400b      	ands	r3, r1
 8003622:	431a      	orrs	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	619a      	str	r2, [r3, #24]
}
 8003628:	bf00      	nop
 800362a:	3714      	adds	r7, #20
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <HAL_HASH_Init>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_Init(HASH_HandleTypeDef *hhash)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t cr_value;

  /* Check the hash handle allocation */
  if (hhash == NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_HASH_Init+0x12>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e02a      	b.n	800369c <HAL_HASH_Init+0x68>

    /* Init the low level hardware */
    hhash->MspInitCallback(hhash);
  }
#else
  if (hhash->State == HAL_HASH_STATE_RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d106      	bne.n	8003660 <HAL_HASH_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhash->Lock = HAL_UNLOCKED;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Init the low level hardware */
    HAL_HASH_MspInit(hhash);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7fe fbca 	bl	8001df4 <HAL_HASH_MspInit>
  }
#endif /* (USE_HAL_HASH_REGISTER_CALLBACKS) */

  /* Set the key size, data type and Algorithm */
  cr_value = (uint32_t)(hhash->Init.DataType | hhash->Init.Algorithm);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	4313      	orrs	r3, r2
 800366a:	60fb      	str	r3, [r7, #12]
  /* Set the key size, data type, algorithm and mode */
  MODIFY_REG(hhash->Instance->CR, HASH_CR_DATATYPE | HASH_CR_ALGO | HASH_CR_INIT, cr_value);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f423 13f0 	bic.w	r3, r3, #1966080	@ 0x1e0000
 8003676:	f023 0334 	bic.w	r3, r3, #52	@ 0x34
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6812      	ldr	r2, [r2, #0]
 800367e:	68f9      	ldr	r1, [r7, #12]
 8003680:	430b      	orrs	r3, r1
 8003682:	6013      	str	r3, [r2, #0]

  /* Change HASH phase to Ready */
  hhash->Phase = HAL_HASH_PHASE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  /* Change HASH state to Ready */
  hhash->State = HAL_HASH_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Reset error code field */
  hhash->ErrorCode = HAL_HASH_ERROR_NONE;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_HASH_SUSPEND_RESUME == 1U)
  /* Reset suspension request flag */
  hhash->SuspendRequest = HAL_HASH_SUSPEND_NONE;
#endif /* (USE_HAL_HASH_SUSPEND_RESUME) */
  /* Return function status */
  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <HAL_HASH_DeInit>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_DeInit(HASH_HandleTypeDef *hhash)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Check the HASH handle allocation */
  if (hhash == NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_HASH_DeInit+0x12>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e015      	b.n	80036e2 <HAL_HASH_DeInit+0x3e>
  }

  /* Change the default HASH phase */
  hhash->Phase = HAL_HASH_PHASE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  /* Reset HashInCount */
  hhash->HashInCount = 0U;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	61da      	str	r2, [r3, #28]

  /* Reset multi buffers accumulation flag */
  hhash->Accumulation = 0U;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DeInit the low level hardware */
  hhash->MspDeInitCallback(hhash);
#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_HASH_MspDeInit(hhash);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7fe fbb4 	bl	8001e38 <HAL_HASH_MspDeInit>
#endif /* (USE_HAL_HASH_REGISTER_CALLBACKS) */

  /* Set the HASH state to Ready */
  hhash->State = HAL_HASH_STATE_RESET;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  __HAL_UNLOCK(hhash);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <HAL_HASH_Start_IT>:
  * @param  pOutBuffer pointer to the computed digest.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_Start_IT(HASH_HandleTypeDef *hhash, const uint8_t *const pInBuffer, uint32_t Size,
                                    uint8_t *const pOutBuffer)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b086      	sub	sp, #24
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	60f8      	str	r0, [r7, #12]
 80036f2:	60b9      	str	r1, [r7, #8]
 80036f4:	607a      	str	r2, [r7, #4]
 80036f6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  HAL_HASH_StateTypeDef temp_state;

  /* Check the hash handle allocation */
  if (hhash == NULL)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_HASH_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e05c      	b.n	80037bc <HAL_HASH_Start_IT+0xd2>
  }

  /* Check if peripheral is ready to start process or suspended */
  temp_state = hhash->State;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003708:	75bb      	strb	r3, [r7, #22]
  if ((temp_state == HAL_HASH_STATE_READY) || (temp_state == HAL_HASH_STATE_SUSPENDED))
 800370a:	7dbb      	ldrb	r3, [r7, #22]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d002      	beq.n	8003716 <HAL_HASH_Start_IT+0x2c>
 8003710:	7dbb      	ldrb	r3, [r7, #22]
 8003712:	2b03      	cmp	r3, #3
 8003714:	d14f      	bne.n	80037b6 <HAL_HASH_Start_IT+0xcc>
  {
    /* Process Locked */
    __HAL_LOCK(hhash);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800371c:	2b01      	cmp	r3, #1
 800371e:	d101      	bne.n	8003724 <HAL_HASH_Start_IT+0x3a>
 8003720:	2302      	movs	r3, #2
 8003722:	e04b      	b.n	80037bc <HAL_HASH_Start_IT+0xd2>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    if (hhash->State == HAL_HASH_STATE_READY)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b01      	cmp	r3, #1
 8003736:	d128      	bne.n	800378a <HAL_HASH_Start_IT+0xa0>
    {
      /* Reset HashInCount and Initialize Size, pHashInBuffPtr and pHashOutBuffPtr parameters */
      hhash->HashInCount =  0U;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	61da      	str	r2, [r3, #28]
      hhash->pHashInBuffPtr = pInBuffer;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	615a      	str	r2, [r3, #20]
      hhash->pHashOutBuffPtr = pOutBuffer;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	619a      	str	r2, [r3, #24]
      hhash->Size = Size;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	621a      	str	r2, [r3, #32]

      /* Set HASH mode */
      CLEAR_BIT(hhash->Instance->CR, HASH_CR_MODE);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800375e:	601a      	str	r2, [r3, #0]
      /* Reset the HASH processor core */
      MODIFY_REG(hhash->Instance->CR, HASH_CR_INIT, HASH_CR_INIT);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f042 0204 	orr.w	r2, r2, #4
 800376e:	601a      	str	r2, [r3, #0]

      /* Configure the number of valid bits in last word of the message */
      MODIFY_REG(hhash->Instance->STR, HASH_STR_NBLW, 8U * (Size % 4U));
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f023 011f 	bic.w	r1, r3, #31
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f003 0303 	and.w	r3, r3, #3
 8003780:	00da      	lsls	r2, r3, #3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	609a      	str	r2, [r3, #8]
    }
    /* Change the HASH state */
    hhash->State = HAL_HASH_STATE_BUSY;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2202      	movs	r2, #2
 800378e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Set the phase */
    hhash->Phase = HAL_HASH_PHASE_PROCESS;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2202      	movs	r2, #2
 8003796:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    /* Enable the specified HASH interrupt*/
    __HAL_HASH_ENABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	6a1a      	ldr	r2, [r3, #32]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f042 0203 	orr.w	r2, r2, #3
 80037a8:	621a      	str	r2, [r3, #32]

    status = HASH_WriteData_IT(hhash);
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 f8c3 	bl	8003936 <HASH_WriteData_IT>
 80037b0:	4603      	mov	r3, r0
 80037b2:	75fb      	strb	r3, [r7, #23]
 80037b4:	e001      	b.n	80037ba <HAL_HASH_Start_IT+0xd0>
  }
  else
  {
    status =  HAL_BUSY;
 80037b6:	2302      	movs	r3, #2
 80037b8:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 80037ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3718      	adds	r7, #24
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HAL_HASH_IRQHandler>:
  * @param hhash HASH handle.
  * @note  HAL_HASH_IRQHandler() handles interrupts in HMAC processing as well.
  * @retval None
  */
void HAL_HASH_IRQHandler(HASH_HandleTypeDef *hhash)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t itsource = hhash->Instance->IMR;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	617b      	str	r3, [r7, #20]
  uint32_t itflag   = hhash->Instance->SR;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037da:	613b      	str	r3, [r7, #16]

  /* If digest is ready */
  if ((itflag & HASH_FLAG_DCIS) == HASH_FLAG_DCIS)
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d062      	beq.n	80038ac <HAL_HASH_IRQHandler+0xe8>
  {
    /* Read the digest */
    HASH_GetDigest(hhash, hhash->pHashOutBuffPtr, HASH_DIGEST_LENGTH(hhash));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6999      	ldr	r1, [r3, #24]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d03d      	beq.n	8003874 <HAL_HASH_IRQHandler+0xb0>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003802:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003806:	d033      	beq.n	8003870 <HAL_HASH_IRQHandler+0xac>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003812:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8003816:	d029      	beq.n	800386c <HAL_HASH_IRQHandler+0xa8>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003822:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003826:	d01f      	beq.n	8003868 <HAL_HASH_IRQHandler+0xa4>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003832:	f5b3 1fd0 	cmp.w	r3, #1703936	@ 0x1a0000
 8003836:	d015      	beq.n	8003864 <HAL_HASH_IRQHandler+0xa0>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003842:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003846:	d00b      	beq.n	8003860 <HAL_HASH_IRQHandler+0x9c>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003852:	f5b3 1ff0 	cmp.w	r3, #1966080	@ 0x1e0000
 8003856:	d101      	bne.n	800385c <HAL_HASH_IRQHandler+0x98>
 8003858:	2340      	movs	r3, #64	@ 0x40
 800385a:	e00c      	b.n	8003876 <HAL_HASH_IRQHandler+0xb2>
 800385c:	2314      	movs	r3, #20
 800385e:	e00a      	b.n	8003876 <HAL_HASH_IRQHandler+0xb2>
 8003860:	2320      	movs	r3, #32
 8003862:	e008      	b.n	8003876 <HAL_HASH_IRQHandler+0xb2>
 8003864:	231c      	movs	r3, #28
 8003866:	e006      	b.n	8003876 <HAL_HASH_IRQHandler+0xb2>
 8003868:	2330      	movs	r3, #48	@ 0x30
 800386a:	e004      	b.n	8003876 <HAL_HASH_IRQHandler+0xb2>
 800386c:	2320      	movs	r3, #32
 800386e:	e002      	b.n	8003876 <HAL_HASH_IRQHandler+0xb2>
 8003870:	231c      	movs	r3, #28
 8003872:	e000      	b.n	8003876 <HAL_HASH_IRQHandler+0xb2>
 8003874:	2314      	movs	r3, #20
 8003876:	461a      	mov	r2, r3
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 fb73 	bl	8003f64 <HASH_GetDigest>

    /* Disable Interrupts */
    __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6a1a      	ldr	r2, [r3, #32]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0203 	bic.w	r2, r2, #3
 800388c:	621a      	str	r2, [r3, #32]
    /* Change the HASH state */
    hhash->State = HAL_HASH_STATE_READY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Reset HASH state machine */
    hhash->Phase = HAL_HASH_PHASE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    /* Process Unlocked */
    __HAL_UNLOCK(hhash);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    /* Call digest computation complete call back */
#if (USE_HAL_HASH_REGISTER_CALLBACKS == 1)
    hhash->DgstCpltCallback(hhash);
#else
    HAL_HASH_DgstCpltCallback(hhash);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f823 	bl	80038f2 <HAL_HASH_DgstCpltCallback>
#endif /* USE_HAL_HASH_REGISTER_CALLBACKS */

  }
  /* If Peripheral ready to accept new data */
  if ((itflag & HASH_FLAG_DINIS) == HASH_FLAG_DINIS)
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00f      	beq.n	80038d6 <HAL_HASH_IRQHandler+0x112>
  {
    if ((itsource & HASH_IT_DINI) == HASH_IT_DINI)
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00a      	beq.n	80038d6 <HAL_HASH_IRQHandler+0x112>
    {
      status = HASH_WriteData_IT(hhash);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 f838 	bl	8003936 <HASH_WriteData_IT>
 80038c6:	4603      	mov	r3, r0
 80038c8:	73fb      	strb	r3, [r7, #15]
      if (status != HAL_OK)
 80038ca:	7bfb      	ldrb	r3, [r7, #15]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d002      	beq.n	80038d6 <HAL_HASH_IRQHandler+0x112>
      {
        /* Call error callback */
#if (USE_HAL_HASH_REGISTER_CALLBACKS == 1)
        hhash->ErrorCallback(hhash);
#else
        HAL_HASH_ErrorCallback(hhash);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 f818 	bl	8003906 <HAL_HASH_ErrorCallback>
#endif /* USE_HAL_HASH_REGISTER_CALLBACKS */
      }
    }
  }
}
 80038d6:	bf00      	nop
 80038d8:	3718      	adds	r7, #24
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <HAL_HASH_InCpltCallback>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval None
  */
__weak void HAL_HASH_InCpltCallback(HASH_HandleTypeDef *hhash)
{
 80038de:	b480      	push	{r7}
 80038e0:	b083      	sub	sp, #12
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
  UNUSED(hhash);

  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_HASH_InCpltCallback() can be implemented in the user file.
   */
}
 80038e6:	bf00      	nop
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <HAL_HASH_DgstCpltCallback>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval None
  */
__weak void HAL_HASH_DgstCpltCallback(HASH_HandleTypeDef *hhash)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b083      	sub	sp, #12
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
  UNUSED(hhash);

  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_HASH_DgstCpltCallback() can be implemented in the user file.
   */
}
 80038fa:	bf00      	nop
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr

08003906 <HAL_HASH_ErrorCallback>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval None
  */
__weak void HAL_HASH_ErrorCallback(HASH_HandleTypeDef *hhash)
{
 8003906:	b480      	push	{r7}
 8003908:	b083      	sub	sp, #12
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
  UNUSED(hhash);

  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_HASH_ErrorCallback() can be implemented in the user file.
   */
}
 800390e:	bf00      	nop
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <HAL_HASH_GetState>:
  * @note   The API yields the current state of the handle (BUSY, READY,...).
  * @param  hhash HASH handle.
  * @retval HAL HASH state
  */
HAL_HASH_StateTypeDef HAL_HASH_GetState(const HASH_HandleTypeDef *hhash)
{
 800391a:	b480      	push	{r7}
 800391c:	b083      	sub	sp, #12
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  return hhash->State;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003928:	b2db      	uxtb	r3, r3
}
 800392a:	4618      	mov	r0, r3
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr

08003936 <HASH_WriteData_IT>:
  * @brief  Feed the input buffer to the HASH peripheral in interruption mode.
  * @param  hhash HASH handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef HASH_WriteData_IT(HASH_HandleTypeDef *hhash)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b088      	sub	sp, #32
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  uint32_t buffercounter;
  uint32_t count;
  __IO uint32_t keyaddr = (uint32_t)(hhash->pHashKeyBuffPtr);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003942:	613b      	str	r3, [r7, #16]
  __IO uint32_t inputaddr = (uint32_t)(hhash->pHashInBuffPtr);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	60fb      	str	r3, [r7, #12]
  uint32_t nbbytePartialHash  = (((hhash->Instance->SR) >> 16U) * 4U); /* Nb byte  to enter in HASH fifo to trig
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003950:	0c1b      	lsrs	r3, r3, #16
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	617b      	str	r3, [r7, #20]
                                                                      a partial HASH computation*/

  if (hhash->State == HAL_HASH_STATE_BUSY)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	f040 82ea 	bne.w	8003f38 <HASH_WriteData_IT+0x602>
  {
    if ((hhash->Instance->CR & HASH_CR_MODE) == 0U)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800396e:	2b00      	cmp	r3, #0
 8003970:	f040 80b3 	bne.w	8003ada <HASH_WriteData_IT+0x1a4>
      }
      else
      {
#endif /* USE_HAL_HASH_SUSPEND_RESUME */

        if (((hhash->HashInCount) + nbbytePartialHash) < (hhash->Size))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	69da      	ldr	r2, [r3, #28]
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	441a      	add	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	429a      	cmp	r2, r3
 8003982:	d258      	bcs.n	8003a36 <HASH_WriteData_IT+0x100>
        {
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 8003984:	2300      	movs	r3, #0
 8003986:	61fb      	str	r3, [r7, #28]
 8003988:	e015      	b.n	80039b6 <HASH_WriteData_IT+0x80>
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)inputaddr;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	461a      	mov	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6812      	ldr	r2, [r2, #0]
 8003994:	605a      	str	r2, [r3, #4]
            inputaddr += 4U;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	3304      	adds	r3, #4
 800399a:	60fb      	str	r3, [r7, #12]
            hhash->HashInCount += 4U;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	1d1a      	adds	r2, r3, #4
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	61da      	str	r2, [r3, #28]
            hhash->pHashInBuffPtr += 4U;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	1d1a      	adds	r2, r3, #4
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	615a      	str	r2, [r3, #20]
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	3304      	adds	r3, #4
 80039b4:	61fb      	str	r3, [r7, #28]
 80039b6:	69fa      	ldr	r2, [r7, #28]
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d3e5      	bcc.n	800398a <HASH_WriteData_IT+0x54>
          }
          /* Wait for HASH_IT_DINI flag to be set */
          count = HASH_TIMEOUTVALUE;
 80039be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80039c2:	61bb      	str	r3, [r7, #24]
          do
          {
            count--;
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	3b01      	subs	r3, #1
 80039c8:	61bb      	str	r3, [r7, #24]
            if (count == 0U)
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d117      	bne.n	8003a00 <HASH_WriteData_IT+0xca>
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6a1a      	ldr	r2, [r3, #32]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f022 0203 	bic.w	r2, r2, #3
 80039de:	621a      	str	r2, [r3, #32]

              /* Change state */
              hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039e4:	f043 0204 	orr.w	r2, r3, #4
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	635a      	str	r2, [r3, #52]	@ 0x34
              hhash->State = HAL_HASH_STATE_READY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e2ad      	b.n	8003f5c <HASH_WriteData_IT+0x626>
            }
          } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DINIS));
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d0da      	beq.n	80039c4 <HASH_WriteData_IT+0x8e>
 8003a0e:	e2a4      	b.n	8003f5a <HASH_WriteData_IT+0x624>
        else
        {
          while ((hhash->HashInCount) < hhash->Size)
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)inputaddr;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	461a      	mov	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	6812      	ldr	r2, [r2, #0]
 8003a1a:	605a      	str	r2, [r3, #4]
            inputaddr += 4U;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	3304      	adds	r3, #4
 8003a20:	60fb      	str	r3, [r7, #12]
            hhash->HashInCount += 4U;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	69db      	ldr	r3, [r3, #28]
 8003a26:	1d1a      	adds	r2, r3, #4
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	61da      	str	r2, [r3, #28]
            hhash->pHashInBuffPtr += 4U;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	695b      	ldr	r3, [r3, #20]
 8003a30:	1d1a      	adds	r2, r3, #4
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	615a      	str	r2, [r3, #20]
          while ((hhash->HashInCount) < hhash->Size)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	69da      	ldr	r2, [r3, #28]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d3e6      	bcc.n	8003a10 <HASH_WriteData_IT+0xda>
#if (USE_HAL_HASH_REGISTER_CALLBACKS == 1U)
          /*Call registered Input complete callback*/
          hhash->InCpltCallback(hhash);
#else
          /*Call legacy weak Input complete callback*/
          HAL_HASH_InCpltCallback(hhash);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7ff ff4b 	bl	80038de <HAL_HASH_InCpltCallback>
#endif /* USE_HAL_HASH_REGISTER_CALLBACKS */
          if (hhash->Accumulation == 0U)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d138      	bne.n	8003ac2 <HASH_WriteData_IT+0x18c>
          {
            if (__HAL_HASH_GET_IT_SOURCE(hhash, HASH_IT_DINI))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	f040 827d 	bne.w	8003f5a <HASH_WriteData_IT+0x624>
            {
              /* Start the message padding then the Digest calculation */
              SET_BIT(hhash->Instance->STR, HASH_STR_DCAL);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689a      	ldr	r2, [r3, #8]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a6e:	609a      	str	r2, [r3, #8]

              /* Wait for HASH_FLAG_DCIS flag to be set */
              count = HASH_TIMEOUTVALUE;
 8003a70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a74:	61bb      	str	r3, [r7, #24]
              do
              {
                count--;
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	61bb      	str	r3, [r7, #24]
                if (count == 0U)
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d117      	bne.n	8003ab2 <HASH_WriteData_IT+0x17c>
                {
                  /* Disable Interrupts */
                  __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	6a1a      	ldr	r2, [r3, #32]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 0203 	bic.w	r2, r2, #3
 8003a90:	621a      	str	r2, [r3, #32]

                  /* Change state */
                  hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a96:	f043 0204 	orr.w	r2, r3, #4
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	635a      	str	r2, [r3, #52]	@ 0x34
                  hhash->State = HAL_HASH_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                  __HAL_UNLOCK(hhash);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                  return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e254      	b.n	8003f5c <HASH_WriteData_IT+0x626>
                }
              } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DCIS));
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d0da      	beq.n	8003a76 <HASH_WriteData_IT+0x140>
 8003ac0:	e24b      	b.n	8003f5a <HASH_WriteData_IT+0x624>
            }
          }
          else
          {
            /* Reset multi buffers accumulation flag */
            hhash->Accumulation = 0U;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	63da      	str	r2, [r3, #60]	@ 0x3c
            /* Disable Interrupts */
            __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6a1a      	ldr	r2, [r3, #32]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 0201 	bic.w	r2, r2, #1
 8003ad6:	621a      	str	r2, [r3, #32]
 8003ad8:	e23f      	b.n	8003f5a <HASH_WriteData_IT+0x624>
      }
#endif /* USE_HAL_HASH_SUSPEND_RESUME */
    }
    else /*HMAC */
    {
      if (hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_2) /* loading input*/
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ae0:	2b04      	cmp	r3, #4
 8003ae2:	f040 80df 	bne.w	8003ca4 <HASH_WriteData_IT+0x36e>
          __HAL_UNLOCK(hhash);
        }
        else
        {
#endif /* USE_HAL_HASH_SUSPEND_RESUME */
          if (hhash->Accumulation == 1U)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d108      	bne.n	8003b00 <HASH_WriteData_IT+0x1ca>
          {
            /* Configure the number of valid bits in last word of the message */
            MODIFY_REG(hhash->Instance->STR, HASH_STR_NBLW, 0U);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	689a      	ldr	r2, [r3, #8]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 021f 	bic.w	r2, r2, #31
 8003afc:	609a      	str	r2, [r3, #8]
 8003afe:	e00d      	b.n	8003b1c <HASH_WriteData_IT+0x1e6>
          }
          else
          {
            /* Configure the number of valid bits in last word of the message */
            MODIFY_REG(hhash->Instance->STR, HASH_STR_NBLW, 8U * (hhash->Size % 4U));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f023 011f 	bic.w	r1, r3, #31
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	f003 0303 	and.w	r3, r3, #3
 8003b12:	00da      	lsls	r2, r3, #3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	609a      	str	r2, [r3, #8]
          }
          if (((hhash->HashInCount) + nbbytePartialHash) < (hhash->Size))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	69da      	ldr	r2, [r3, #28]
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	441a      	add	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d258      	bcs.n	8003bde <HASH_WriteData_IT+0x2a8>
          {
            for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	61fb      	str	r3, [r7, #28]
 8003b30:	e015      	b.n	8003b5e <HASH_WriteData_IT+0x228>
            {
              /* Write input data 4 bytes at a time */
              hhash->Instance->DIN = *(uint32_t *)inputaddr;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	461a      	mov	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6812      	ldr	r2, [r2, #0]
 8003b3c:	605a      	str	r2, [r3, #4]
              inputaddr += 4U;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	3304      	adds	r3, #4
 8003b42:	60fb      	str	r3, [r7, #12]
              hhash->HashInCount += 4U;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	1d1a      	adds	r2, r3, #4
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	61da      	str	r2, [r3, #28]
              hhash->pHashInBuffPtr += 4U;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	1d1a      	adds	r2, r3, #4
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	615a      	str	r2, [r3, #20]
            for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	3304      	adds	r3, #4
 8003b5c:	61fb      	str	r3, [r7, #28]
 8003b5e:	69fa      	ldr	r2, [r7, #28]
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d3e5      	bcc.n	8003b32 <HASH_WriteData_IT+0x1fc>
            }
            /* Wait for HASH_IT_DINI flag to be set */
            count = HASH_TIMEOUTVALUE;
 8003b66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b6a:	61bb      	str	r3, [r7, #24]
            do
            {
              count--;
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	61bb      	str	r3, [r7, #24]
              if (count == 0U)
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d117      	bne.n	8003ba8 <HASH_WriteData_IT+0x272>
              {
                /* Disable Interrupts */
                __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6a1a      	ldr	r2, [r3, #32]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 0203 	bic.w	r2, r2, #3
 8003b86:	621a      	str	r2, [r3, #32]

                /* Change state */
                hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b8c:	f043 0204 	orr.w	r2, r3, #4
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	635a      	str	r2, [r3, #52]	@ 0x34
                hhash->State = HAL_HASH_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                __HAL_UNLOCK(hhash);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e1d9      	b.n	8003f5c <HASH_WriteData_IT+0x626>
              }
            } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DINIS));
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d0da      	beq.n	8003b6c <HASH_WriteData_IT+0x236>
 8003bb6:	e1d0      	b.n	8003f5a <HASH_WriteData_IT+0x624>
          else
          {
            while ((hhash->HashInCount) < hhash->Size)
            {
              /* Write input data 4 bytes at a time */
              hhash->Instance->DIN = *(uint32_t *)inputaddr;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6812      	ldr	r2, [r2, #0]
 8003bc2:	605a      	str	r2, [r3, #4]
              inputaddr += 4U;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	3304      	adds	r3, #4
 8003bc8:	60fb      	str	r3, [r7, #12]
              hhash->HashInCount += 4U;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	1d1a      	adds	r2, r3, #4
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	61da      	str	r2, [r3, #28]
              hhash->pHashInBuffPtr += 4U;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	1d1a      	adds	r2, r3, #4
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	615a      	str	r2, [r3, #20]
            while ((hhash->HashInCount) < hhash->Size)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	69da      	ldr	r2, [r3, #28]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d3e6      	bcc.n	8003bb8 <HASH_WriteData_IT+0x282>
#if (USE_HAL_HASH_REGISTER_CALLBACKS == 1U)
            /*Call registered Input complete callback*/
            hhash->InCpltCallback(hhash);
#else
            /*Call legacy weak Input complete callback*/
            HAL_HASH_InCpltCallback(hhash);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7ff fe77 	bl	80038de <HAL_HASH_InCpltCallback>
#endif /* USE_HAL_HASH_REGISTER_CALLBACKS */

            if (hhash->Accumulation == 0U)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d143      	bne.n	8003c80 <HASH_WriteData_IT+0x34a>
            {
              if (__HAL_HASH_GET_IT_SOURCE(hhash, HASH_IT_DINI))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	f040 81a9 	bne.w	8003f5a <HASH_WriteData_IT+0x624>
              {
                /* Start the message padding then the Digest calculation */
                SET_BIT(hhash->Instance->STR, HASH_STR_DCAL);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689a      	ldr	r2, [r3, #8]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c16:	609a      	str	r2, [r3, #8]

                /* Wait for HASH_FLAG_BUSY flag to be set */
                count = HASH_TIMEOUTVALUE;
 8003c18:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c1c:	61bb      	str	r3, [r7, #24]
                do
                {
                  count--;
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	3b01      	subs	r3, #1
 8003c22:	61bb      	str	r3, [r7, #24]
                  if (count == 0U)
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d117      	bne.n	8003c5a <HASH_WriteData_IT+0x324>
                  {
                    /* Disable Interrupts */
                    __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6a1a      	ldr	r2, [r3, #32]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0203 	bic.w	r2, r2, #3
 8003c38:	621a      	str	r2, [r3, #32]

                    /* Change state */
                    hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c3e:	f043 0204 	orr.w	r2, r3, #4
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	635a      	str	r2, [r3, #52]	@ 0x34
                    hhash->State = HAL_HASH_STATE_READY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                    __HAL_UNLOCK(hhash);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e180      	b.n	8003f5c <HASH_WriteData_IT+0x626>
                  }
                } while (HAL_IS_BIT_SET(hhash->Instance->SR, HASH_FLAG_BUSY));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c60:	f003 0308 	and.w	r3, r3, #8
 8003c64:	2b08      	cmp	r3, #8
 8003c66:	d0da      	beq.n	8003c1e <HASH_WriteData_IT+0x2e8>

                hhash->Phase = HAL_HASH_PHASE_HMAC_STEP_3;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2205      	movs	r2, #5
 8003c6c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                hhash->HashInCount = 0U;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	61da      	str	r2, [r3, #28]
                hhash->pHashKeyBuffPtr = hhash->Init.pKey;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68da      	ldr	r2, [r3, #12]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	625a      	str	r2, [r3, #36]	@ 0x24
 8003c7e:	e16c      	b.n	8003f5a <HASH_WriteData_IT+0x624>
            }

            else
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6a1a      	ldr	r2, [r3, #32]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 0203 	bic.w	r2, r2, #3
 8003c8e:	621a      	str	r2, [r3, #32]
              hhash->State = HAL_HASH_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	e15b      	b.n	8003f5c <HASH_WriteData_IT+0x626>
#if (USE_HAL_HASH_SUSPEND_RESUME == 1U)
        }
#endif /* USE_HAL_HASH_SUSPEND_RESUME */
      }

      else if (hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_3)/* loading Key*/
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003caa:	2b05      	cmp	r3, #5
 8003cac:	f040 80a1 	bne.w	8003df2 <HASH_WriteData_IT+0x4bc>
      {

        /* Configure the number of valid bits in last word of the Key */
        MODIFY_REG(hhash->Instance->STR, HASH_STR_NBLW, 8U * ((hhash->Init.KeySize) % 4U));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f023 011f 	bic.w	r1, r3, #31
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 0303 	and.w	r3, r3, #3
 8003cc2:	00da      	lsls	r2, r3, #3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	609a      	str	r2, [r3, #8]

        if (((hhash->HashInCount) + nbbytePartialHash) < (hhash->Init.KeySize))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	69da      	ldr	r2, [r3, #28]
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	441a      	add	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d253      	bcs.n	8003d84 <HASH_WriteData_IT+0x44e>
        {
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 8003cdc:	2300      	movs	r3, #0
 8003cde:	61fb      	str	r3, [r7, #28]
 8003ce0:	e015      	b.n	8003d0e <HASH_WriteData_IT+0x3d8>
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)keyaddr;
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6812      	ldr	r2, [r2, #0]
 8003cec:	605a      	str	r2, [r3, #4]
            keyaddr += 4U;
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	3304      	adds	r3, #4
 8003cf2:	613b      	str	r3, [r7, #16]
            hhash->HashInCount += 4U;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	1d1a      	adds	r2, r3, #4
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	61da      	str	r2, [r3, #28]
            hhash->pHashKeyBuffPtr += 4U;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d02:	1d1a      	adds	r2, r3, #4
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	625a      	str	r2, [r3, #36]	@ 0x24
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	3304      	adds	r3, #4
 8003d0c:	61fb      	str	r3, [r7, #28]
 8003d0e:	69fa      	ldr	r2, [r7, #28]
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d3e5      	bcc.n	8003ce2 <HASH_WriteData_IT+0x3ac>
          }
          /* Wait for HASH_IT_DINI flag to be set */
          count = HASH_TIMEOUTVALUE;
 8003d16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d1a:	61bb      	str	r3, [r7, #24]
          do
          {
            count--;
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	61bb      	str	r3, [r7, #24]
            if (count == 0U)
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d117      	bne.n	8003d58 <HASH_WriteData_IT+0x422>
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6a1a      	ldr	r2, [r3, #32]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 0203 	bic.w	r2, r2, #3
 8003d36:	621a      	str	r2, [r3, #32]

              /* Change state */
              hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d3c:	f043 0204 	orr.w	r2, r3, #4
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	635a      	str	r2, [r3, #52]	@ 0x34
              hhash->State = HAL_HASH_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e101      	b.n	8003f5c <HASH_WriteData_IT+0x626>
            }
          } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DINIS));
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d0da      	beq.n	8003d1c <HASH_WriteData_IT+0x3e6>
 8003d66:	e0f8      	b.n	8003f5a <HASH_WriteData_IT+0x624>
        else
        {
          while ((hhash->HashInCount) < (hhash->Init.KeySize))
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)keyaddr;
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6812      	ldr	r2, [r2, #0]
 8003d72:	605a      	str	r2, [r3, #4]
            keyaddr += 4U;
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	3304      	adds	r3, #4
 8003d78:	613b      	str	r3, [r7, #16]
            hhash->HashInCount += 4U;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	1d1a      	adds	r2, r3, #4
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	61da      	str	r2, [r3, #28]
          while ((hhash->HashInCount) < (hhash->Init.KeySize))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	69da      	ldr	r2, [r3, #28]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d3eb      	bcc.n	8003d68 <HASH_WriteData_IT+0x432>
          }
          /* Start the message padding then the Digest calculation */
          SET_BIT(hhash->Instance->STR, HASH_STR_DCAL);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	689a      	ldr	r2, [r3, #8]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d9e:	609a      	str	r2, [r3, #8]

          /* Wait for HASH_FLAG_DCIS flag to be set */
          count = HASH_TIMEOUTVALUE;
 8003da0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003da4:	61bb      	str	r3, [r7, #24]
          do
          {
            count--;
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	3b01      	subs	r3, #1
 8003daa:	61bb      	str	r3, [r7, #24]
            if (count == 0U)
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d117      	bne.n	8003de2 <HASH_WriteData_IT+0x4ac>
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	6a1a      	ldr	r2, [r3, #32]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0203 	bic.w	r2, r2, #3
 8003dc0:	621a      	str	r2, [r3, #32]

              /* Change state */
              hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dc6:	f043 0204 	orr.w	r2, r3, #4
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	635a      	str	r2, [r3, #52]	@ 0x34
              hhash->State = HAL_HASH_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e0bc      	b.n	8003f5c <HASH_WriteData_IT+0x626>
            }
          } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DCIS));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0da      	beq.n	8003da6 <HASH_WriteData_IT+0x470>
 8003df0:	e0b3      	b.n	8003f5a <HASH_WriteData_IT+0x624>
        }
      }
      else  /*first step , loading key*/
      {

        hhash->Phase = HAL_HASH_PHASE_HMAC_STEP_1;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2203      	movs	r2, #3
 8003df6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

        if (((hhash->HashInCount) + nbbytePartialHash) < (hhash->Init.KeySize))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	69da      	ldr	r2, [r3, #28]
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	441a      	add	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d258      	bcs.n	8003ebc <HASH_WriteData_IT+0x586>
        {
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	61fb      	str	r3, [r7, #28]
 8003e0e:	e015      	b.n	8003e3c <HASH_WriteData_IT+0x506>
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)keyaddr;
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	461a      	mov	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6812      	ldr	r2, [r2, #0]
 8003e1a:	605a      	str	r2, [r3, #4]
            keyaddr += 4U;
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	3304      	adds	r3, #4
 8003e20:	613b      	str	r3, [r7, #16]
            hhash->HashInCount += 4U;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	1d1a      	adds	r2, r3, #4
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	61da      	str	r2, [r3, #28]
            hhash->pHashKeyBuffPtr += 4U;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e30:	1d1a      	adds	r2, r3, #4
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	625a      	str	r2, [r3, #36]	@ 0x24
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	3304      	adds	r3, #4
 8003e3a:	61fb      	str	r3, [r7, #28]
 8003e3c:	69fa      	ldr	r2, [r7, #28]
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d3e5      	bcc.n	8003e10 <HASH_WriteData_IT+0x4da>
          }
          /* Wait for HASH_IT_DINI flag to be set */
          count = HASH_TIMEOUTVALUE;
 8003e44:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e48:	61bb      	str	r3, [r7, #24]
          do
          {
            count--;
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	61bb      	str	r3, [r7, #24]
            if (count == 0U)
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d117      	bne.n	8003e86 <HASH_WriteData_IT+0x550>
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6a1a      	ldr	r2, [r3, #32]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f022 0203 	bic.w	r2, r2, #3
 8003e64:	621a      	str	r2, [r3, #32]

              /* Change state */
              hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e6a:	f043 0204 	orr.w	r2, r3, #4
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	635a      	str	r2, [r3, #52]	@ 0x34
              hhash->State = HAL_HASH_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e06a      	b.n	8003f5c <HASH_WriteData_IT+0x626>
            }
          } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DINIS));
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d0da      	beq.n	8003e4a <HASH_WriteData_IT+0x514>
 8003e94:	e061      	b.n	8003f5a <HASH_WriteData_IT+0x624>
        else
        {
          while ((hhash->HashInCount) < (hhash->Init.KeySize))
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)keyaddr;
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	461a      	mov	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	6812      	ldr	r2, [r2, #0]
 8003ea0:	605a      	str	r2, [r3, #4]
            keyaddr += 4U;
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	3304      	adds	r3, #4
 8003ea6:	613b      	str	r3, [r7, #16]
            hhash->HashInCount += 4U;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	69db      	ldr	r3, [r3, #28]
 8003eac:	1d1a      	adds	r2, r3, #4
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	61da      	str	r2, [r3, #28]
            hhash->pHashKeyBuffPtr += 4U;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb6:	1d1a      	adds	r2, r3, #4
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	625a      	str	r2, [r3, #36]	@ 0x24
          while ((hhash->HashInCount) < (hhash->Init.KeySize))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	69da      	ldr	r2, [r3, #28]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d3e6      	bcc.n	8003e96 <HASH_WriteData_IT+0x560>
          }
          /* Start the message padding then the Digest calculation */
          SET_BIT(hhash->Instance->STR, HASH_STR_DCAL);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689a      	ldr	r2, [r3, #8]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ed6:	609a      	str	r2, [r3, #8]

          /* Wait for HASH_FLAG_BUSY flag to be set */
          count = HASH_TIMEOUTVALUE;
 8003ed8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003edc:	61bb      	str	r3, [r7, #24]
          do
          {
            count--;
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	61bb      	str	r3, [r7, #24]
            if (count == 0U)
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d117      	bne.n	8003f1a <HASH_WriteData_IT+0x5e4>
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	6a1a      	ldr	r2, [r3, #32]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 0203 	bic.w	r2, r2, #3
 8003ef8:	621a      	str	r2, [r3, #32]

              /* Change state */
              hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003efe:	f043 0204 	orr.w	r2, r3, #4
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	635a      	str	r2, [r3, #52]	@ 0x34
              hhash->State = HAL_HASH_STATE_READY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e020      	b.n	8003f5c <HASH_WriteData_IT+0x626>
            }
          } while (HAL_IS_BIT_SET(hhash->Instance->SR, HASH_FLAG_BUSY));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f20:	f003 0308 	and.w	r3, r3, #8
 8003f24:	2b08      	cmp	r3, #8
 8003f26:	d0da      	beq.n	8003ede <HASH_WriteData_IT+0x5a8>
          /*change Phase to step 2*/
          hhash->Phase = HAL_HASH_PHASE_HMAC_STEP_2;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2204      	movs	r2, #4
 8003f2c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
          hhash->HashInCount = 0U;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	61da      	str	r2, [r3, #28]
 8003f36:	e010      	b.n	8003f5a <HASH_WriteData_IT+0x624>
        }
      }
    }
  }
  else if ((hhash->State == HAL_HASH_STATE_SUSPENDED))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	2b03      	cmp	r3, #3
 8003f42:	d101      	bne.n	8003f48 <HASH_WriteData_IT+0x612>
  {
    return HAL_OK;
 8003f44:	2300      	movs	r3, #0
 8003f46:	e009      	b.n	8003f5c <HASH_WriteData_IT+0x626>
  }
  else
  {
    /* Busy error code field */
    hhash->ErrorCode |= HAL_HASH_ERROR_BUSY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f4c:	f043 0201 	orr.w	r2, r3, #1
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_HASH_REGISTER_CALLBACKS == 1U)
    /*Call registered error callback*/
    hhash->ErrorCallback(hhash);
#else
    /*Call legacy weak error callback*/
    HAL_HASH_ErrorCallback(hhash);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f7ff fcd6 	bl	8003906 <HAL_HASH_ErrorCallback>
#endif /* USE_HAL_HASH_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3720      	adds	r7, #32
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <HASH_GetDigest>:
  * @param  pMsgDigest pointer to the computed digest.
  * @param  Size message digest size in bytes.
  * @retval None
  */
static void HASH_GetDigest(const HASH_HandleTypeDef *hhash, const uint8_t *pMsgDigest, uint8_t Size)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b0b7      	sub	sp, #220	@ 0xdc
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	71fb      	strb	r3, [r7, #7]
  uint32_t msgdigest = (uint32_t)pMsgDigest;
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  switch (Size)
 8003f78:	79fb      	ldrb	r3, [r7, #7]
 8003f7a:	2b30      	cmp	r3, #48	@ 0x30
 8003f7c:	dc44      	bgt.n	8004008 <HASH_GetDigest+0xa4>
 8003f7e:	2b14      	cmp	r3, #20
 8003f80:	f2c0 82e7 	blt.w	8004552 <HASH_GetDigest+0x5ee>
 8003f84:	3b14      	subs	r3, #20
 8003f86:	2b1c      	cmp	r3, #28
 8003f88:	f200 82e3 	bhi.w	8004552 <HASH_GetDigest+0x5ee>
 8003f8c:	a201      	add	r2, pc, #4	@ (adr r2, 8003f94 <HASH_GetDigest+0x30>)
 8003f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f92:	bf00      	nop
 8003f94:	08004011 	.word	0x08004011
 8003f98:	08004553 	.word	0x08004553
 8003f9c:	08004553 	.word	0x08004553
 8003fa0:	08004553 	.word	0x08004553
 8003fa4:	08004553 	.word	0x08004553
 8003fa8:	08004553 	.word	0x08004553
 8003fac:	08004553 	.word	0x08004553
 8003fb0:	08004553 	.word	0x08004553
 8003fb4:	080040a9 	.word	0x080040a9
 8003fb8:	08004553 	.word	0x08004553
 8003fbc:	08004553 	.word	0x08004553
 8003fc0:	08004553 	.word	0x08004553
 8003fc4:	0800417d 	.word	0x0800417d
 8003fc8:	08004553 	.word	0x08004553
 8003fcc:	08004553 	.word	0x08004553
 8003fd0:	08004553 	.word	0x08004553
 8003fd4:	08004553 	.word	0x08004553
 8003fd8:	08004553 	.word	0x08004553
 8003fdc:	08004553 	.word	0x08004553
 8003fe0:	08004553 	.word	0x08004553
 8003fe4:	08004553 	.word	0x08004553
 8003fe8:	08004553 	.word	0x08004553
 8003fec:	08004553 	.word	0x08004553
 8003ff0:	08004553 	.word	0x08004553
 8003ff4:	08004553 	.word	0x08004553
 8003ff8:	08004553 	.word	0x08004553
 8003ffc:	08004553 	.word	0x08004553
 8004000:	08004553 	.word	0x08004553
 8004004:	0800426f 	.word	0x0800426f
 8004008:	2b40      	cmp	r3, #64	@ 0x40
 800400a:	f000 81d1 	beq.w	80043b0 <HASH_GetDigest+0x44c>
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[15]);

      break;
#endif /* defined(HASH_ALGOSELECTION_SHA512)*/
    default:
      break;
 800400e:	e2a0      	b.n	8004552 <HASH_GetDigest+0x5ee>
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[0]);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68da      	ldr	r2, [r3, #12]
 8004016:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800401a:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
  return __builtin_bswap32(value);
 800401e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004022:	ba12      	rev	r2, r2
 8004024:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004026:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800402a:	3304      	adds	r3, #4
 800402c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[1]);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	691a      	ldr	r2, [r3, #16]
 8004036:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800403a:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800403e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004042:	ba12      	rev	r2, r2
 8004044:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004046:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800404a:	3304      	adds	r3, #4
 800404c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[2]);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	695a      	ldr	r2, [r3, #20]
 8004056:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800405a:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 800405e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004062:	ba12      	rev	r2, r2
 8004064:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004066:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800406a:	3304      	adds	r3, #4
 800406c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[3]);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	699a      	ldr	r2, [r3, #24]
 8004076:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800407a:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800407e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8004082:	ba12      	rev	r2, r2
 8004084:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004086:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800408a:	3304      	adds	r3, #4
 800408c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[4]);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	69da      	ldr	r2, [r3, #28]
 8004096:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800409a:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 800409e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80040a2:	ba12      	rev	r2, r2
 80040a4:	601a      	str	r2, [r3, #0]
      break;
 80040a6:	e255      	b.n	8004554 <HASH_GetDigest+0x5f0>
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[0]);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68da      	ldr	r2, [r3, #12]
 80040ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040b2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80040b6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80040ba:	ba12      	rev	r2, r2
 80040bc:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80040be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040c2:	3304      	adds	r3, #4
 80040c4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[1]);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	691a      	ldr	r2, [r3, #16]
 80040ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040d2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80040d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80040da:	ba12      	rev	r2, r2
 80040dc:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80040de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040e2:	3304      	adds	r3, #4
 80040e4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[2]);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	695a      	ldr	r2, [r3, #20]
 80040ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040f2:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80040f6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80040fa:	ba12      	rev	r2, r2
 80040fc:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80040fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004102:	3304      	adds	r3, #4
 8004104:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[3]);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	699a      	ldr	r2, [r3, #24]
 800410e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004112:	f8c7 20b0 	str.w	r2, [r7, #176]	@ 0xb0
 8004116:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800411a:	ba12      	rev	r2, r2
 800411c:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800411e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004122:	3304      	adds	r3, #4
 8004124:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[4]);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	69da      	ldr	r2, [r3, #28]
 800412e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004132:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8004136:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800413a:	ba12      	rev	r2, r2
 800413c:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800413e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004142:	3304      	adds	r3, #4
 8004144:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 8004148:	4b98      	ldr	r3, [pc, #608]	@ (80043ac <HASH_GetDigest+0x448>)
 800414a:	695a      	ldr	r2, [r3, #20]
 800414c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004150:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 8004154:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004158:	ba12      	rev	r2, r2
 800415a:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800415c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004160:	3304      	adds	r3, #4
 8004162:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 8004166:	4b91      	ldr	r3, [pc, #580]	@ (80043ac <HASH_GetDigest+0x448>)
 8004168:	699a      	ldr	r2, [r3, #24]
 800416a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800416e:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004172:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8004176:	ba12      	rev	r2, r2
 8004178:	601a      	str	r2, [r3, #0]
      break;
 800417a:	e1eb      	b.n	8004554 <HASH_GetDigest+0x5f0>
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[0]);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68da      	ldr	r2, [r3, #12]
 8004182:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004186:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800418a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800418e:	ba12      	rev	r2, r2
 8004190:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004192:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004196:	3304      	adds	r3, #4
 8004198:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[1]);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	691a      	ldr	r2, [r3, #16]
 80041a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041a6:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80041aa:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80041ae:	ba12      	rev	r2, r2
 80041b0:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80041b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041b6:	3304      	adds	r3, #4
 80041b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[2]);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	695a      	ldr	r2, [r3, #20]
 80041c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041c6:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80041ca:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80041ce:	ba12      	rev	r2, r2
 80041d0:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80041d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041d6:	3304      	adds	r3, #4
 80041d8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[3]);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	699a      	ldr	r2, [r3, #24]
 80041e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041e6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80041ea:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80041ee:	ba12      	rev	r2, r2
 80041f0:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80041f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041f6:	3304      	adds	r3, #4
 80041f8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[4]);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	69da      	ldr	r2, [r3, #28]
 8004202:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004206:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800420a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800420e:	ba12      	rev	r2, r2
 8004210:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004212:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004216:	3304      	adds	r3, #4
 8004218:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 800421c:	4b63      	ldr	r3, [pc, #396]	@ (80043ac <HASH_GetDigest+0x448>)
 800421e:	695a      	ldr	r2, [r3, #20]
 8004220:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004224:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8004228:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800422c:	ba12      	rev	r2, r2
 800422e:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004230:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004234:	3304      	adds	r3, #4
 8004236:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 800423a:	4b5c      	ldr	r3, [pc, #368]	@ (80043ac <HASH_GetDigest+0x448>)
 800423c:	699a      	ldr	r2, [r3, #24]
 800423e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004242:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004246:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800424a:	ba12      	rev	r2, r2
 800424c:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800424e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004252:	3304      	adds	r3, #4
 8004254:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[7]);
 8004258:	4b54      	ldr	r3, [pc, #336]	@ (80043ac <HASH_GetDigest+0x448>)
 800425a:	69da      	ldr	r2, [r3, #28]
 800425c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004260:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8004264:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8004268:	ba12      	rev	r2, r2
 800426a:	601a      	str	r2, [r3, #0]
      break;
 800426c:	e172      	b.n	8004554 <HASH_GetDigest+0x5f0>
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[0]);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68da      	ldr	r2, [r3, #12]
 8004274:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004278:	657a      	str	r2, [r7, #84]	@ 0x54
 800427a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800427c:	ba12      	rev	r2, r2
 800427e:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004280:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004284:	3304      	adds	r3, #4
 8004286:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[1]);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	691a      	ldr	r2, [r3, #16]
 8004290:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004294:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004296:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004298:	ba12      	rev	r2, r2
 800429a:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800429c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042a0:	3304      	adds	r3, #4
 80042a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[2]);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	695a      	ldr	r2, [r3, #20]
 80042ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042b0:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80042b2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80042b4:	ba12      	rev	r2, r2
 80042b6:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80042b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042bc:	3304      	adds	r3, #4
 80042be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[3]);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	699a      	ldr	r2, [r3, #24]
 80042c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042cc:	663a      	str	r2, [r7, #96]	@ 0x60
 80042ce:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80042d0:	ba12      	rev	r2, r2
 80042d2:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80042d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042d8:	3304      	adds	r3, #4
 80042da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[4]);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	69da      	ldr	r2, [r3, #28]
 80042e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042e8:	667a      	str	r2, [r7, #100]	@ 0x64
 80042ea:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80042ec:	ba12      	rev	r2, r2
 80042ee:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80042f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042f4:	3304      	adds	r3, #4
 80042f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 80042fa:	4b2c      	ldr	r3, [pc, #176]	@ (80043ac <HASH_GetDigest+0x448>)
 80042fc:	695a      	ldr	r2, [r3, #20]
 80042fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004302:	66ba      	str	r2, [r7, #104]	@ 0x68
 8004304:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004306:	ba12      	rev	r2, r2
 8004308:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800430a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800430e:	3304      	adds	r3, #4
 8004310:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 8004314:	4b25      	ldr	r3, [pc, #148]	@ (80043ac <HASH_GetDigest+0x448>)
 8004316:	699a      	ldr	r2, [r3, #24]
 8004318:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800431c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800431e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004320:	ba12      	rev	r2, r2
 8004322:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004324:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004328:	3304      	adds	r3, #4
 800432a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[7]);
 800432e:	4b1f      	ldr	r3, [pc, #124]	@ (80043ac <HASH_GetDigest+0x448>)
 8004330:	69da      	ldr	r2, [r3, #28]
 8004332:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004336:	673a      	str	r2, [r7, #112]	@ 0x70
 8004338:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800433a:	ba12      	rev	r2, r2
 800433c:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800433e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004342:	3304      	adds	r3, #4
 8004344:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[8]);
 8004348:	4b18      	ldr	r3, [pc, #96]	@ (80043ac <HASH_GetDigest+0x448>)
 800434a:	6a1a      	ldr	r2, [r3, #32]
 800434c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004350:	677a      	str	r2, [r7, #116]	@ 0x74
 8004352:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004354:	ba12      	rev	r2, r2
 8004356:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004358:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800435c:	3304      	adds	r3, #4
 800435e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[9]);
 8004362:	4b12      	ldr	r3, [pc, #72]	@ (80043ac <HASH_GetDigest+0x448>)
 8004364:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004366:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800436a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800436c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800436e:	ba12      	rev	r2, r2
 8004370:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004372:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004376:	3304      	adds	r3, #4
 8004378:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[10]);
 800437c:	4b0b      	ldr	r3, [pc, #44]	@ (80043ac <HASH_GetDigest+0x448>)
 800437e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004380:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004384:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004386:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004388:	ba12      	rev	r2, r2
 800438a:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800438c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004390:	3304      	adds	r3, #4
 8004392:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[11]);
 8004396:	4b05      	ldr	r3, [pc, #20]	@ (80043ac <HASH_GetDigest+0x448>)
 8004398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800439a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800439e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80043a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80043a6:	ba12      	rev	r2, r2
 80043a8:	601a      	str	r2, [r3, #0]
      break;
 80043aa:	e0d3      	b.n	8004554 <HASH_GetDigest+0x5f0>
 80043ac:	420c0710 	.word	0x420c0710
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[0]);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68da      	ldr	r2, [r3, #12]
 80043b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043ba:	617a      	str	r2, [r7, #20]
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	ba12      	rev	r2, r2
 80043c0:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80043c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043c6:	3304      	adds	r3, #4
 80043c8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[1]);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	691a      	ldr	r2, [r3, #16]
 80043d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043d6:	61ba      	str	r2, [r7, #24]
 80043d8:	69ba      	ldr	r2, [r7, #24]
 80043da:	ba12      	rev	r2, r2
 80043dc:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80043de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043e2:	3304      	adds	r3, #4
 80043e4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[2]);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	695a      	ldr	r2, [r3, #20]
 80043ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043f2:	61fa      	str	r2, [r7, #28]
 80043f4:	69fa      	ldr	r2, [r7, #28]
 80043f6:	ba12      	rev	r2, r2
 80043f8:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80043fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043fe:	3304      	adds	r3, #4
 8004400:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[3]);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	699a      	ldr	r2, [r3, #24]
 800440a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800440e:	623a      	str	r2, [r7, #32]
 8004410:	6a3a      	ldr	r2, [r7, #32]
 8004412:	ba12      	rev	r2, r2
 8004414:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004416:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800441a:	3304      	adds	r3, #4
 800441c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[4]);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	69da      	ldr	r2, [r3, #28]
 8004426:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800442a:	627a      	str	r2, [r7, #36]	@ 0x24
 800442c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800442e:	ba12      	rev	r2, r2
 8004430:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004432:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004436:	3304      	adds	r3, #4
 8004438:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 800443c:	4b48      	ldr	r3, [pc, #288]	@ (8004560 <HASH_GetDigest+0x5fc>)
 800443e:	695a      	ldr	r2, [r3, #20]
 8004440:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004444:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004446:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004448:	ba12      	rev	r2, r2
 800444a:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800444c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004450:	3304      	adds	r3, #4
 8004452:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 8004456:	4b42      	ldr	r3, [pc, #264]	@ (8004560 <HASH_GetDigest+0x5fc>)
 8004458:	699a      	ldr	r2, [r3, #24]
 800445a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800445e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004460:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004462:	ba12      	rev	r2, r2
 8004464:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004466:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800446a:	3304      	adds	r3, #4
 800446c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[7]);
 8004470:	4b3b      	ldr	r3, [pc, #236]	@ (8004560 <HASH_GetDigest+0x5fc>)
 8004472:	69da      	ldr	r2, [r3, #28]
 8004474:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004478:	633a      	str	r2, [r7, #48]	@ 0x30
 800447a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800447c:	ba12      	rev	r2, r2
 800447e:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004480:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004484:	3304      	adds	r3, #4
 8004486:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[8]);
 800448a:	4b35      	ldr	r3, [pc, #212]	@ (8004560 <HASH_GetDigest+0x5fc>)
 800448c:	6a1a      	ldr	r2, [r3, #32]
 800448e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004492:	637a      	str	r2, [r7, #52]	@ 0x34
 8004494:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004496:	ba12      	rev	r2, r2
 8004498:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800449a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800449e:	3304      	adds	r3, #4
 80044a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[9]);
 80044a4:	4b2e      	ldr	r3, [pc, #184]	@ (8004560 <HASH_GetDigest+0x5fc>)
 80044a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80044a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044ac:	63ba      	str	r2, [r7, #56]	@ 0x38
 80044ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80044b0:	ba12      	rev	r2, r2
 80044b2:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80044b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044b8:	3304      	adds	r3, #4
 80044ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[10]);
 80044be:	4b28      	ldr	r3, [pc, #160]	@ (8004560 <HASH_GetDigest+0x5fc>)
 80044c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80044c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80044c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80044ca:	ba12      	rev	r2, r2
 80044cc:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80044ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044d2:	3304      	adds	r3, #4
 80044d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[11]);
 80044d8:	4b21      	ldr	r3, [pc, #132]	@ (8004560 <HASH_GetDigest+0x5fc>)
 80044da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044e0:	643a      	str	r2, [r7, #64]	@ 0x40
 80044e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044e4:	ba12      	rev	r2, r2
 80044e6:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80044e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044ec:	3304      	adds	r3, #4
 80044ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[12]);
 80044f2:	4b1b      	ldr	r3, [pc, #108]	@ (8004560 <HASH_GetDigest+0x5fc>)
 80044f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044fa:	647a      	str	r2, [r7, #68]	@ 0x44
 80044fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044fe:	ba12      	rev	r2, r2
 8004500:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004502:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004506:	3304      	adds	r3, #4
 8004508:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[13]);
 800450c:	4b14      	ldr	r3, [pc, #80]	@ (8004560 <HASH_GetDigest+0x5fc>)
 800450e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004510:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004514:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004516:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004518:	ba12      	rev	r2, r2
 800451a:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800451c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004520:	3304      	adds	r3, #4
 8004522:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[14]);
 8004526:	4b0e      	ldr	r3, [pc, #56]	@ (8004560 <HASH_GetDigest+0x5fc>)
 8004528:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800452a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800452e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004530:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004532:	ba12      	rev	r2, r2
 8004534:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004536:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800453a:	3304      	adds	r3, #4
 800453c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[15]);
 8004540:	4b07      	ldr	r3, [pc, #28]	@ (8004560 <HASH_GetDigest+0x5fc>)
 8004542:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004544:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004548:	653a      	str	r2, [r7, #80]	@ 0x50
 800454a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800454c:	ba12      	rev	r2, r2
 800454e:	601a      	str	r2, [r3, #0]
      break;
 8004550:	e000      	b.n	8004554 <HASH_GetDigest+0x5f0>
      break;
 8004552:	bf00      	nop
  }
}
 8004554:	bf00      	nop
 8004556:	37dc      	adds	r7, #220	@ 0xdc
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr
 8004560:	420c0710 	.word	0x420c0710

08004564 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e08d      	b.n	8004692 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d106      	bne.n	8004590 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7fd fc6a 	bl	8001e64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2224      	movs	r2, #36	@ 0x24
 8004594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f022 0201 	bic.w	r2, r2, #1
 80045a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80045b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	689a      	ldr	r2, [r3, #8]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80045c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d107      	bne.n	80045de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689a      	ldr	r2, [r3, #8]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80045da:	609a      	str	r2, [r3, #8]
 80045dc:	e006      	b.n	80045ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	689a      	ldr	r2, [r3, #8]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80045ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d108      	bne.n	8004606 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	685a      	ldr	r2, [r3, #4]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004602:	605a      	str	r2, [r3, #4]
 8004604:	e007      	b.n	8004616 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004614:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	6812      	ldr	r2, [r2, #0]
 8004620:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004624:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004628:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68da      	ldr	r2, [r3, #12]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004638:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	691a      	ldr	r2, [r3, #16]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	69d9      	ldr	r1, [r3, #28]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a1a      	ldr	r2, [r3, #32]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	430a      	orrs	r2, r1
 8004662:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f042 0201 	orr.w	r2, r2, #1
 8004672:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2220      	movs	r2, #32
 800467e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3708      	adds	r7, #8
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800469a:	b480      	push	{r7}
 800469c:	b083      	sub	sp, #12
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
 80046a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	2b20      	cmp	r3, #32
 80046ae:	d138      	bne.n	8004722 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d101      	bne.n	80046be <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80046ba:	2302      	movs	r3, #2
 80046bc:	e032      	b.n	8004724 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2224      	movs	r2, #36	@ 0x24
 80046ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 0201 	bic.w	r2, r2, #1
 80046dc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80046ec:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6819      	ldr	r1, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	683a      	ldr	r2, [r7, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f042 0201 	orr.w	r2, r2, #1
 800470c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2220      	movs	r2, #32
 8004712:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800471e:	2300      	movs	r3, #0
 8004720:	e000      	b.n	8004724 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004722:	2302      	movs	r3, #2
  }
}
 8004724:	4618      	mov	r0, r3
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b20      	cmp	r3, #32
 8004744:	d139      	bne.n	80047ba <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800474c:	2b01      	cmp	r3, #1
 800474e:	d101      	bne.n	8004754 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004750:	2302      	movs	r3, #2
 8004752:	e033      	b.n	80047bc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2224      	movs	r2, #36	@ 0x24
 8004760:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f022 0201 	bic.w	r2, r2, #1
 8004772:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004782:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	021b      	lsls	r3, r3, #8
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	4313      	orrs	r3, r2
 800478c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f042 0201 	orr.w	r2, r2, #1
 80047a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2220      	movs	r2, #32
 80047aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80047b6:	2300      	movs	r3, #0
 80047b8:	e000      	b.n	80047bc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80047ba:	2302      	movs	r3, #2
  }
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	460b      	mov	r3, r1
 80047d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 80047d4:	230a      	movs	r3, #10
 80047d6:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 80047d8:	e002      	b.n	80047e0 <PCD_GET_EP_RX_CNT+0x18>
  {
    count--;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	3b01      	subs	r3, #1
 80047de:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1f9      	bne.n	80047da <PCD_GET_EP_RX_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 80047e6:	887b      	ldrh	r3, [r7, #2]
 80047e8:	00db      	lsls	r3, r3, #3
 80047ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80047ee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	0c1b      	lsrs	r3, r3, #16
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047fc:	b29b      	uxth	r3, r3
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 800480a:	b480      	push	{r7}
 800480c:	b085      	sub	sp, #20
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
 8004812:	460b      	mov	r3, r1
 8004814:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8004816:	230a      	movs	r3, #10
 8004818:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800481a:	e002      	b.n	8004822 <PCD_GET_EP_DBUF0_CNT+0x18>
  {
    count--;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	3b01      	subs	r3, #1
 8004820:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1f9      	bne.n	800481c <PCD_GET_EP_DBUF0_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 8004828:	887b      	ldrh	r3, [r7, #2]
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004830:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	0c1b      	lsrs	r3, r3, #16
 8004838:	b29b      	uxth	r3, r3
 800483a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800483e:	b29b      	uxth	r3, r3
}
 8004840:	4618      	mov	r0, r3
 8004842:	3714      	adds	r7, #20
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	460b      	mov	r3, r1
 8004856:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8004858:	230a      	movs	r3, #10
 800485a:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800485c:	e002      	b.n	8004864 <PCD_GET_EP_DBUF1_CNT+0x18>
  {
    count--;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	3b01      	subs	r3, #1
 8004862:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1f9      	bne.n	800485e <PCD_GET_EP_DBUF1_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 800486a:	887b      	ldrh	r3, [r7, #2]
 800486c:	00db      	lsls	r3, r3, #3
 800486e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004872:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	0c1b      	lsrs	r3, r3, #16
 800487a:	b29b      	uxth	r3, r3
 800487c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004880:	b29b      	uxth	r3, r3
}
 8004882:	4618      	mov	r0, r3
 8004884:	3714      	adds	r7, #20
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr

0800488e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b086      	sub	sp, #24
 8004892:	af02      	add	r7, sp, #8
 8004894:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d101      	bne.n	80048a0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e0f3      	b.n	8004a88 <HAL_PCD_Init+0x1fa>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d106      	bne.n	80048ba <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f7fd fdfd 	bl	80024b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2203      	movs	r2, #3
 80048be:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f009 f85f 	bl	800d98a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6818      	ldr	r0, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	7c1a      	ldrb	r2, [r3, #16]
 80048d4:	f88d 2000 	strb.w	r2, [sp]
 80048d8:	3304      	adds	r3, #4
 80048da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048dc:	f009 f823 	bl	800d926 <USB_CoreInit>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d005      	beq.n	80048f2 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2202      	movs	r2, #2
 80048ea:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e0ca      	b.n	8004a88 <HAL_PCD_Init+0x1fa>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2100      	movs	r1, #0
 80048f8:	4618      	mov	r0, r3
 80048fa:	f009 f85b 	bl	800d9b4 <USB_SetCurrentMode>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d005      	beq.n	8004910 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2202      	movs	r2, #2
 8004908:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e0bb      	b.n	8004a88 <HAL_PCD_Init+0x1fa>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004910:	2300      	movs	r3, #0
 8004912:	73fb      	strb	r3, [r7, #15]
 8004914:	e03f      	b.n	8004996 <HAL_PCD_Init+0x108>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004916:	7bfa      	ldrb	r2, [r7, #15]
 8004918:	6879      	ldr	r1, [r7, #4]
 800491a:	4613      	mov	r3, r2
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	4413      	add	r3, r2
 8004920:	00db      	lsls	r3, r3, #3
 8004922:	440b      	add	r3, r1
 8004924:	3315      	adds	r3, #21
 8004926:	2201      	movs	r2, #1
 8004928:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800492a:	7bfa      	ldrb	r2, [r7, #15]
 800492c:	6879      	ldr	r1, [r7, #4]
 800492e:	4613      	mov	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4413      	add	r3, r2
 8004934:	00db      	lsls	r3, r3, #3
 8004936:	440b      	add	r3, r1
 8004938:	3314      	adds	r3, #20
 800493a:	7bfa      	ldrb	r2, [r7, #15]
 800493c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800493e:	7bfa      	ldrb	r2, [r7, #15]
 8004940:	6879      	ldr	r1, [r7, #4]
 8004942:	4613      	mov	r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	4413      	add	r3, r2
 8004948:	00db      	lsls	r3, r3, #3
 800494a:	440b      	add	r3, r1
 800494c:	3317      	adds	r3, #23
 800494e:	2200      	movs	r2, #0
 8004950:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004952:	7bfa      	ldrb	r2, [r7, #15]
 8004954:	6879      	ldr	r1, [r7, #4]
 8004956:	4613      	mov	r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	4413      	add	r3, r2
 800495c:	00db      	lsls	r3, r3, #3
 800495e:	440b      	add	r3, r1
 8004960:	3324      	adds	r3, #36	@ 0x24
 8004962:	2200      	movs	r2, #0
 8004964:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004966:	7bfa      	ldrb	r2, [r7, #15]
 8004968:	6879      	ldr	r1, [r7, #4]
 800496a:	4613      	mov	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4413      	add	r3, r2
 8004970:	00db      	lsls	r3, r3, #3
 8004972:	440b      	add	r3, r1
 8004974:	3328      	adds	r3, #40	@ 0x28
 8004976:	2200      	movs	r2, #0
 8004978:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800497a:	7bfb      	ldrb	r3, [r7, #15]
 800497c:	6879      	ldr	r1, [r7, #4]
 800497e:	1c5a      	adds	r2, r3, #1
 8004980:	4613      	mov	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4413      	add	r3, r2
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	440b      	add	r3, r1
 800498a:	3304      	adds	r3, #4
 800498c:	2200      	movs	r2, #0
 800498e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004990:	7bfb      	ldrb	r3, [r7, #15]
 8004992:	3301      	adds	r3, #1
 8004994:	73fb      	strb	r3, [r7, #15]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	791b      	ldrb	r3, [r3, #4]
 800499a:	7bfa      	ldrb	r2, [r7, #15]
 800499c:	429a      	cmp	r2, r3
 800499e:	d3ba      	bcc.n	8004916 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049a0:	2300      	movs	r3, #0
 80049a2:	73fb      	strb	r3, [r7, #15]
 80049a4:	e044      	b.n	8004a30 <HAL_PCD_Init+0x1a2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80049a6:	7bfa      	ldrb	r2, [r7, #15]
 80049a8:	6879      	ldr	r1, [r7, #4]
 80049aa:	4613      	mov	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4413      	add	r3, r2
 80049b0:	00db      	lsls	r3, r3, #3
 80049b2:	440b      	add	r3, r1
 80049b4:	f203 1355 	addw	r3, r3, #341	@ 0x155
 80049b8:	2200      	movs	r2, #0
 80049ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80049bc:	7bfa      	ldrb	r2, [r7, #15]
 80049be:	6879      	ldr	r1, [r7, #4]
 80049c0:	4613      	mov	r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	4413      	add	r3, r2
 80049c6:	00db      	lsls	r3, r3, #3
 80049c8:	440b      	add	r3, r1
 80049ca:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80049ce:	7bfa      	ldrb	r2, [r7, #15]
 80049d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80049d2:	7bfa      	ldrb	r2, [r7, #15]
 80049d4:	6879      	ldr	r1, [r7, #4]
 80049d6:	4613      	mov	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
 80049dc:	00db      	lsls	r3, r3, #3
 80049de:	440b      	add	r3, r1
 80049e0:	f203 1357 	addw	r3, r3, #343	@ 0x157
 80049e4:	2200      	movs	r2, #0
 80049e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80049e8:	7bfa      	ldrb	r2, [r7, #15]
 80049ea:	6879      	ldr	r1, [r7, #4]
 80049ec:	4613      	mov	r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	4413      	add	r3, r2
 80049f2:	00db      	lsls	r3, r3, #3
 80049f4:	440b      	add	r3, r1
 80049f6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80049fa:	2200      	movs	r2, #0
 80049fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80049fe:	7bfa      	ldrb	r2, [r7, #15]
 8004a00:	6879      	ldr	r1, [r7, #4]
 8004a02:	4613      	mov	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	4413      	add	r3, r2
 8004a08:	00db      	lsls	r3, r3, #3
 8004a0a:	440b      	add	r3, r1
 8004a0c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004a10:	2200      	movs	r2, #0
 8004a12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004a14:	7bfa      	ldrb	r2, [r7, #15]
 8004a16:	6879      	ldr	r1, [r7, #4]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	4413      	add	r3, r2
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	440b      	add	r3, r1
 8004a22:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8004a26:	2200      	movs	r2, #0
 8004a28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a2a:	7bfb      	ldrb	r3, [r7, #15]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	73fb      	strb	r3, [r7, #15]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	791b      	ldrb	r3, [r3, #4]
 8004a34:	7bfa      	ldrb	r2, [r7, #15]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d3b5      	bcc.n	80049a6 <HAL_PCD_Init+0x118>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6818      	ldr	r0, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	7c1a      	ldrb	r2, [r3, #16]
 8004a42:	f88d 2000 	strb.w	r2, [sp]
 8004a46:	3304      	adds	r3, #4
 8004a48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a4a:	f008 ffd6 	bl	800d9fa <USB_DevInit>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d005      	beq.n	8004a60 <HAL_PCD_Init+0x1d2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2202      	movs	r2, #2
 8004a58:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e013      	b.n	8004a88 <HAL_PCD_Init+0x1fa>
  }

  hpcd->USB_Address = 0U;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	7b1b      	ldrb	r3, [r3, #12]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d102      	bne.n	8004a7c <HAL_PCD_Init+0x1ee>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f001 fb6b 	bl	8006152 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4618      	mov	r0, r3
 8004a82:	f00a fe2f 	bl	800f6e4 <USB_DevDisconnect>

  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d101      	bne.n	8004aa6 <HAL_PCD_Start+0x16>
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	e012      	b.n	8004acc <HAL_PCD_Start+0x3c>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f008 ff55 	bl	800d962 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f00a fe00 	bl	800f6c2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3708      	adds	r7, #8
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f00a fe10 	bl	800f706 <USB_ReadInterrupts>
 8004ae6:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d003      	beq.n	8004afa <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 faf2 	bl	80050dc <PCD_EP_ISR_Handler>

    return;
 8004af8:	e0de      	b.n	8004cb8 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d010      	beq.n	8004b26 <HAL_PCD_IRQHandler+0x52>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	f64f 33ff 	movw	r3, #64511	@ 0xfbff
 8004b12:	400b      	ands	r3, r1
 8004b14:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f00b fe5f 	bl	80107da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f8e1 	bl	8004ce6 <HAL_PCD_SetAddress>

    return;
 8004b24:	e0c8      	b.n	8004cb8 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d009      	beq.n	8004b44 <HAL_PCD_IRQHandler+0x70>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	f64b 73ff 	movw	r3, #49151	@ 0xbfff
 8004b3e:	400b      	ands	r3, r1
 8004b40:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8004b42:	e0b9      	b.n	8004cb8 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d009      	beq.n	8004b62 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	f64d 73ff 	movw	r3, #57343	@ 0xdfff
 8004b5c:	400b      	ands	r3, r1
 8004b5e:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8004b60:	e0aa      	b.n	8004cb8 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d029      	beq.n	8004bc0 <HAL_PCD_IRQHandler+0xec>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f022 0204 	bic.w	r2, r2, #4
 8004b7a:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 0208 	bic.w	r2, r2, #8
 8004b8a:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d107      	bne.n	8004ba6 <HAL_PCD_IRQHandler+0xd2>
    {
      hpcd->LPM_State = LPM_L0;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f001 faf8 	bl	8006196 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f893 	bl	8004cd2 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8004bba:	400b      	ands	r3, r1
 8004bbc:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8004bbe:	e07b      	b.n	8004cb8 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d01c      	beq.n	8004c04 <HAL_PCD_IRQHandler+0x130>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f042 0208 	orr.w	r2, r2, #8
 8004bd8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	f24f 73ff 	movw	r3, #63487	@ 0xf7ff
 8004be8:	400b      	ands	r3, r1
 8004bea:	6453      	str	r3, [r2, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f042 0204 	orr.w	r2, r2, #4
 8004bfa:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 f85e 	bl	8004cbe <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004c02:	e059      	b.n	8004cb8 <HAL_PCD_IRQHandler+0x1e4>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d033      	beq.n	8004c76 <HAL_PCD_IRQHandler+0x1a2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 8004c1c:	400b      	ands	r3, r1
 8004c1e:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d121      	bne.n	8004c6e <HAL_PCD_IRQHandler+0x19a>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f042 0204 	orr.w	r2, r2, #4
 8004c38:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f042 0208 	orr.w	r2, r2, #8
 8004c48:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c58:	089b      	lsrs	r3, r3, #2
 8004c5a:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004c64:	2101      	movs	r1, #1
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f001 fa95 	bl	8006196 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004c6c:	e024      	b.n	8004cb8 <HAL_PCD_IRQHandler+0x1e4>
      HAL_PCD_SuspendCallback(hpcd);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f825 	bl	8004cbe <HAL_PCD_SuspendCallback>
    return;
 8004c74:	e020      	b.n	8004cb8 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00c      	beq.n	8004c9a <HAL_PCD_IRQHandler+0x1c6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	f64f 53ff 	movw	r3, #65023	@ 0xfdff
 8004c8e:	400b      	ands	r3, r1
 8004c90:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f00b fd93 	bl	80107be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004c98:	e00e      	b.n	8004cb8 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d009      	beq.n	8004cb8 <HAL_PCD_IRQHandler+0x1e4>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8004cb2:	400b      	ands	r3, r1
 8004cb4:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8004cb6:	bf00      	nop
  }
}
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8004cbe:	b480      	push	{r7}
 8004cc0:	b083      	sub	sp, #12
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8004cc6:	bf00      	nop
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	b083      	sub	sp, #12
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8004cda:	bf00      	nop
 8004cdc:	370c      	adds	r7, #12
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr

08004ce6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b082      	sub	sp, #8
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
 8004cee:	460b      	mov	r3, r1
 8004cf0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d101      	bne.n	8004d00 <HAL_PCD_SetAddress+0x1a>
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	e012      	b.n	8004d26 <HAL_PCD_SetAddress+0x40>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  hpcd->USB_Address = address;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	78fa      	ldrb	r2, [r7, #3]
 8004d0c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	78fa      	ldrb	r2, [r7, #3]
 8004d14:	4611      	mov	r1, r2
 8004d16:	4618      	mov	r0, r3
 8004d18:	f00a fcc0 	bl	800f69c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3708      	adds	r7, #8
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b084      	sub	sp, #16
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
 8004d36:	4608      	mov	r0, r1
 8004d38:	4611      	mov	r1, r2
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	70fb      	strb	r3, [r7, #3]
 8004d40:	460b      	mov	r3, r1
 8004d42:	803b      	strh	r3, [r7, #0]
 8004d44:	4613      	mov	r3, r2
 8004d46:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004d4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	da0f      	bge.n	8004d74 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d54:	78fb      	ldrb	r3, [r7, #3]
 8004d56:	f003 0207 	and.w	r2, r3, #7
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4413      	add	r3, r2
 8004d60:	00db      	lsls	r3, r3, #3
 8004d62:	3310      	adds	r3, #16
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	4413      	add	r3, r2
 8004d68:	3304      	adds	r3, #4
 8004d6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	705a      	strb	r2, [r3, #1]
 8004d72:	e00f      	b.n	8004d94 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d74:	78fb      	ldrb	r3, [r7, #3]
 8004d76:	f003 0207 	and.w	r2, r3, #7
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	4413      	add	r3, r2
 8004d80:	00db      	lsls	r3, r3, #3
 8004d82:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	4413      	add	r3, r2
 8004d8a:	3304      	adds	r3, #4
 8004d8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004d94:	78fb      	ldrb	r3, [r7, #3]
 8004d96:	f003 0307 	and.w	r3, r3, #7
 8004d9a:	b2da      	uxtb	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004da0:	883b      	ldrh	r3, [r7, #0]
 8004da2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	78ba      	ldrb	r2, [r7, #2]
 8004dae:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004db0:	78bb      	ldrb	r3, [r7, #2]
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d102      	bne.n	8004dbc <HAL_PCD_EP_Open+0x8e>
  {
    ep->data_pid_start = 0U;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d101      	bne.n	8004dca <HAL_PCD_EP_Open+0x9c>
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	e00e      	b.n	8004de8 <HAL_PCD_EP_Open+0xba>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68f9      	ldr	r1, [r7, #12]
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f008 fe31 	bl	800da40 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return ret;
 8004de6:	7afb      	ldrb	r3, [r7, #11]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	460b      	mov	r3, r1
 8004dfa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004dfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	da0f      	bge.n	8004e24 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e04:	78fb      	ldrb	r3, [r7, #3]
 8004e06:	f003 0207 	and.w	r2, r3, #7
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	4413      	add	r3, r2
 8004e10:	00db      	lsls	r3, r3, #3
 8004e12:	3310      	adds	r3, #16
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	4413      	add	r3, r2
 8004e18:	3304      	adds	r3, #4
 8004e1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	705a      	strb	r2, [r3, #1]
 8004e22:	e00f      	b.n	8004e44 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e24:	78fb      	ldrb	r3, [r7, #3]
 8004e26:	f003 0207 	and.w	r2, r3, #7
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	4413      	add	r3, r2
 8004e30:	00db      	lsls	r3, r3, #3
 8004e32:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	4413      	add	r3, r2
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e44:	78fb      	ldrb	r3, [r7, #3]
 8004e46:	f003 0307 	and.w	r3, r3, #7
 8004e4a:	b2da      	uxtb	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d101      	bne.n	8004e5e <HAL_PCD_EP_Close+0x6e>
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	e00e      	b.n	8004e7c <HAL_PCD_EP_Close+0x8c>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68f9      	ldr	r1, [r7, #12]
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f009 f947 	bl	800e100 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	607a      	str	r2, [r7, #4]
 8004e8e:	603b      	str	r3, [r7, #0]
 8004e90:	460b      	mov	r3, r1
 8004e92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e94:	7afb      	ldrb	r3, [r7, #11]
 8004e96:	f003 0207 	and.w	r2, r3, #7
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	4413      	add	r3, r2
 8004ea0:	00db      	lsls	r3, r3, #3
 8004ea2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	3304      	adds	r3, #4
 8004eac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	683a      	ldr	r2, [r7, #0]
 8004eb8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ec6:	7afb      	ldrb	r3, [r7, #11]
 8004ec8:	f003 0307 	and.w	r3, r3, #7
 8004ecc:	b2da      	uxtb	r2, r3
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	6979      	ldr	r1, [r7, #20]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f009 fa9b 	bl	800e414 <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3718      	adds	r7, #24
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004ef4:	78fb      	ldrb	r3, [r7, #3]
 8004ef6:	f003 0207 	and.w	r2, r3, #7
 8004efa:	6879      	ldr	r1, [r7, #4]
 8004efc:	4613      	mov	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4413      	add	r3, r2
 8004f02:	00db      	lsls	r3, r3, #3
 8004f04:	440b      	add	r3, r1
 8004f06:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8004f0a:	681b      	ldr	r3, [r3, #0]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b086      	sub	sp, #24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	607a      	str	r2, [r7, #4]
 8004f22:	603b      	str	r3, [r7, #0]
 8004f24:	460b      	mov	r3, r1
 8004f26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f28:	7afb      	ldrb	r3, [r7, #11]
 8004f2a:	f003 0207 	and.w	r2, r3, #7
 8004f2e:	4613      	mov	r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4413      	add	r3, r2
 8004f34:	00db      	lsls	r3, r3, #3
 8004f36:	3310      	adds	r3, #16
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	3304      	adds	r3, #4
 8004f3e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	683a      	ldr	r2, [r7, #0]
 8004f4a:	619a      	str	r2, [r3, #24]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	683a      	ldr	r2, [r7, #0]
 8004f58:	621a      	str	r2, [r3, #32]
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	2201      	movs	r2, #1
 8004f64:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f66:	7afb      	ldrb	r3, [r7, #11]
 8004f68:	f003 0307 	and.w	r3, r3, #7
 8004f6c:	b2da      	uxtb	r2, r3
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	6979      	ldr	r1, [r7, #20]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f009 fa4b 	bl	800e414 <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3718      	adds	r7, #24
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	460b      	mov	r3, r1
 8004f92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004f94:	78fb      	ldrb	r3, [r7, #3]
 8004f96:	f003 0307 	and.w	r3, r3, #7
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	7912      	ldrb	r2, [r2, #4]
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e040      	b.n	8005028 <HAL_PCD_EP_SetStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004fa6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	da0f      	bge.n	8004fce <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fae:	78fb      	ldrb	r3, [r7, #3]
 8004fb0:	f003 0207 	and.w	r2, r3, #7
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	4413      	add	r3, r2
 8004fba:	00db      	lsls	r3, r3, #3
 8004fbc:	3310      	adds	r3, #16
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	3304      	adds	r3, #4
 8004fc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	705a      	strb	r2, [r3, #1]
 8004fcc:	e00d      	b.n	8004fea <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004fce:	78fa      	ldrb	r2, [r7, #3]
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	00db      	lsls	r3, r3, #3
 8004fd8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	4413      	add	r3, r2
 8004fe0:	3304      	adds	r3, #4
 8004fe2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2201      	movs	r2, #1
 8004fee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ff0:	78fb      	ldrb	r3, [r7, #3]
 8004ff2:	f003 0307 	and.w	r3, r3, #7
 8004ff6:	b2da      	uxtb	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8005002:	2b01      	cmp	r3, #1
 8005004:	d101      	bne.n	800500a <HAL_PCD_EP_SetStall+0x82>
 8005006:	2302      	movs	r3, #2
 8005008:	e00e      	b.n	8005028 <HAL_PCD_EP_SetStall+0xa0>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68f9      	ldr	r1, [r7, #12]
 8005018:	4618      	mov	r0, r3
 800501a:	f00a fa65 	bl	800f4e8 <USB_EPSetStall>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	460b      	mov	r3, r1
 800503a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800503c:	78fb      	ldrb	r3, [r7, #3]
 800503e:	f003 030f 	and.w	r3, r3, #15
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	7912      	ldrb	r2, [r2, #4]
 8005046:	4293      	cmp	r3, r2
 8005048:	d901      	bls.n	800504e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e042      	b.n	80050d4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800504e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005052:	2b00      	cmp	r3, #0
 8005054:	da0f      	bge.n	8005076 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005056:	78fb      	ldrb	r3, [r7, #3]
 8005058:	f003 0207 	and.w	r2, r3, #7
 800505c:	4613      	mov	r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4413      	add	r3, r2
 8005062:	00db      	lsls	r3, r3, #3
 8005064:	3310      	adds	r3, #16
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	4413      	add	r3, r2
 800506a:	3304      	adds	r3, #4
 800506c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2201      	movs	r2, #1
 8005072:	705a      	strb	r2, [r3, #1]
 8005074:	e00f      	b.n	8005096 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005076:	78fb      	ldrb	r3, [r7, #3]
 8005078:	f003 0207 	and.w	r2, r3, #7
 800507c:	4613      	mov	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4413      	add	r3, r2
 8005082:	00db      	lsls	r3, r3, #3
 8005084:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	4413      	add	r3, r2
 800508c:	3304      	adds	r3, #4
 800508e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800509c:	78fb      	ldrb	r3, [r7, #3]
 800509e:	f003 0307 	and.w	r3, r3, #7
 80050a2:	b2da      	uxtb	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d101      	bne.n	80050b6 <HAL_PCD_EP_ClrStall+0x86>
 80050b2:	2302      	movs	r3, #2
 80050b4:	e00e      	b.n	80050d4 <HAL_PCD_EP_ClrStall+0xa4>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68f9      	ldr	r1, [r7, #12]
 80050c4:	4618      	mov	r0, r3
 80050c6:	f00a fa55 	bl	800f574 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b08e      	sub	sp, #56	@ 0x38
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80050e4:	e326      	b.n	8005734 <PCD_EP_ISR_Handler+0x658>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ec:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 80050ee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	f003 030f 	and.w	r3, r3, #15
 80050f6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    if (epindex == 0U)
 80050fa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80050fe:	2b00      	cmp	r3, #0
 8005100:	f040 8124 	bne.w	800534c <PCD_EP_ISR_Handler+0x270>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005104:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005106:	f003 0310 	and.w	r3, r3, #16
 800510a:	2b00      	cmp	r3, #0
 800510c:	d13e      	bne.n	800518c <PCD_EP_ISR_Handler+0xb0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	4b89      	ldr	r3, [pc, #548]	@ (800533c <PCD_EP_ISR_Handler+0x260>)
 8005116:	4013      	ands	r3, r2
 8005118:	60bb      	str	r3, [r7, #8]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68ba      	ldr	r2, [r7, #8]
 8005120:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005124:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	3314      	adds	r3, #20
 800512a:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800512c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	00db      	lsls	r3, r3, #3
 8005132:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005136:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	0c1b      	lsrs	r3, r3, #16
 800513e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005144:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005148:	695a      	ldr	r2, [r3, #20]
 800514a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800514c:	69db      	ldr	r3, [r3, #28]
 800514e:	441a      	add	r2, r3
 8005150:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005152:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005154:	2100      	movs	r1, #0
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f00b fb17 	bl	801078a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	7c5b      	ldrb	r3, [r3, #17]
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	f000 82e6 	beq.w	8005734 <PCD_EP_ISR_Handler+0x658>
 8005168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	2b00      	cmp	r3, #0
 800516e:	f040 82e1 	bne.w	8005734 <PCD_EP_ISR_Handler+0x658>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	7c5b      	ldrb	r3, [r3, #17]
 8005176:	b2db      	uxtb	r3, r3
 8005178:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800517c:	b2da      	uxtb	r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	745a      	strb	r2, [r3, #17]
 800518a:	e2d3      	b.n	8005734 <PCD_EP_ISR_Handler+0x658>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005192:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	867b      	strh	r3, [r7, #50]	@ 0x32

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800519c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800519e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d027      	beq.n	80051f6 <PCD_EP_ISR_Handler+0x11a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	4619      	mov	r1, r3
 80051b0:	4610      	mov	r0, r2
 80051b2:	f7ff fb09 	bl	80047c8 <PCD_GET_EP_RX_CNT>
 80051b6:	4603      	mov	r3, r0
 80051b8:	461a      	mov	r2, r3
 80051ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051bc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6818      	ldr	r0, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 80051c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051ca:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80051cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051ce:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	f00a fb07 	bl	800f7e4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	4b58      	ldr	r3, [pc, #352]	@ (8005340 <PCD_EP_ISR_Handler+0x264>)
 80051de:	4013      	ands	r3, r2
 80051e0:	60fb      	str	r3, [r7, #12]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80051ec:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f00b fa9e 	bl	8010730 <HAL_PCD_SetupStageCallback>
 80051f4:	e29e      	b.n	8005734 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 80051f6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f280 829a 	bge.w	8005734 <PCD_EP_ISR_Handler+0x658>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	4b4e      	ldr	r3, [pc, #312]	@ (8005340 <PCD_EP_ISR_Handler+0x264>)
 8005208:	4013      	ands	r3, r2
 800520a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005212:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005216:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	4619      	mov	r1, r3
 8005222:	4610      	mov	r0, r2
 8005224:	f7ff fad0 	bl	80047c8 <PCD_GET_EP_RX_CNT>
 8005228:	4603      	mov	r3, r0
 800522a:	461a      	mov	r2, r3
 800522c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800522e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005232:	69db      	ldr	r3, [r3, #28]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d019      	beq.n	800526c <PCD_EP_ISR_Handler+0x190>
 8005238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d015      	beq.n	800526c <PCD_EP_ISR_Handler+0x190>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6818      	ldr	r0, [r3, #0]
 8005244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005246:	6959      	ldr	r1, [r3, #20]
 8005248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800524a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800524c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800524e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005250:	b29b      	uxth	r3, r3
 8005252:	f00a fac7 	bl	800f7e4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005256:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005258:	695a      	ldr	r2, [r3, #20]
 800525a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800525c:	69db      	ldr	r3, [r3, #28]
 800525e:	441a      	add	r2, r3
 8005260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005262:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005264:	2100      	movs	r1, #0
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f00b fa74 	bl	8010754 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	867b      	strh	r3, [r7, #50]	@ 0x32

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005274:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005276:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800527a:	2b00      	cmp	r3, #0
 800527c:	f040 825a 	bne.w	8005734 <PCD_EP_ISR_Handler+0x658>
 8005280:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005282:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005286:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800528a:	f000 8253 	beq.w	8005734 <PCD_EP_ISR_Handler+0x658>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800528e:	4b2d      	ldr	r3, [pc, #180]	@ (8005344 <PCD_EP_ISR_Handler+0x268>)
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	4a2c      	ldr	r2, [pc, #176]	@ (8005344 <PCD_EP_ISR_Handler+0x268>)
 8005294:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8005298:	6053      	str	r3, [r2, #4]
 800529a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d106      	bne.n	80052b0 <PCD_EP_ISR_Handler+0x1d4>
 80052a2:	4b28      	ldr	r3, [pc, #160]	@ (8005344 <PCD_EP_ISR_Handler+0x268>)
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	4a27      	ldr	r2, [pc, #156]	@ (8005344 <PCD_EP_ISR_Handler+0x268>)
 80052a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80052ac:	6053      	str	r3, [r2, #4]
 80052ae:	e02e      	b.n	800530e <PCD_EP_ISR_Handler+0x232>
 80052b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	2b3e      	cmp	r3, #62	@ 0x3e
 80052b6:	d814      	bhi.n	80052e2 <PCD_EP_ISR_Handler+0x206>
 80052b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	085b      	lsrs	r3, r3, #1
 80052be:	617b      	str	r3, [r7, #20]
 80052c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	f003 0301 	and.w	r3, r3, #1
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d002      	beq.n	80052d2 <PCD_EP_ISR_Handler+0x1f6>
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	3301      	adds	r3, #1
 80052d0:	617b      	str	r3, [r7, #20]
 80052d2:	4b1c      	ldr	r3, [pc, #112]	@ (8005344 <PCD_EP_ISR_Handler+0x268>)
 80052d4:	685a      	ldr	r2, [r3, #4]
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	069b      	lsls	r3, r3, #26
 80052da:	491a      	ldr	r1, [pc, #104]	@ (8005344 <PCD_EP_ISR_Handler+0x268>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	604b      	str	r3, [r1, #4]
 80052e0:	e015      	b.n	800530e <PCD_EP_ISR_Handler+0x232>
 80052e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	095b      	lsrs	r3, r3, #5
 80052e8:	617b      	str	r3, [r7, #20]
 80052ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	f003 031f 	and.w	r3, r3, #31
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d102      	bne.n	80052fc <PCD_EP_ISR_Handler+0x220>
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	3b01      	subs	r3, #1
 80052fa:	617b      	str	r3, [r7, #20]
 80052fc:	4b11      	ldr	r3, [pc, #68]	@ (8005344 <PCD_EP_ISR_Handler+0x268>)
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	069b      	lsls	r3, r3, #26
 8005304:	4313      	orrs	r3, r2
 8005306:	4a0f      	ldr	r2, [pc, #60]	@ (8005344 <PCD_EP_ISR_Handler+0x268>)
 8005308:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800530c:	6053      	str	r3, [r2, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	4b0c      	ldr	r3, [pc, #48]	@ (8005348 <PCD_EP_ISR_Handler+0x26c>)
 8005316:	4013      	ands	r3, r2
 8005318:	613b      	str	r3, [r7, #16]
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005320:	613b      	str	r3, [r7, #16]
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005328:	613b      	str	r3, [r7, #16]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005334:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005338:	6013      	str	r3, [r2, #0]
 800533a:	e1fb      	b.n	8005734 <PCD_EP_ISR_Handler+0x658>
 800533c:	07ff8f0f 	.word	0x07ff8f0f
 8005340:	07ff0f8f 	.word	0x07ff0f8f
 8005344:	40016400 	.word	0x40016400
 8005348:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	461a      	mov	r2, r3
 8005352:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	4413      	add	r3, r2
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	867b      	strh	r3, [r7, #50]	@ 0x32

      if ((wEPVal & USB_EP_VTRX) != 0U)
 800535e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8005362:	2b00      	cmp	r3, #0
 8005364:	f280 80bd 	bge.w	80054e2 <PCD_EP_ISR_Handler+0x406>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	461a      	mov	r2, r3
 800536e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4413      	add	r3, r2
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	4b9e      	ldr	r3, [pc, #632]	@ (80055f4 <PCD_EP_ISR_Handler+0x518>)
 800537a:	4013      	ands	r3, r2
 800537c:	61fb      	str	r3, [r7, #28]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	461a      	mov	r2, r3
 8005384:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	4413      	add	r3, r2
 800538c:	69fa      	ldr	r2, [r7, #28]
 800538e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005392:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005394:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8005398:	4613      	mov	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	4413      	add	r3, r2
 800539e:	00db      	lsls	r3, r3, #3
 80053a0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	4413      	add	r3, r2
 80053a8:	3304      	adds	r3, #4
 80053aa:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80053ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053ae:	7b1b      	ldrb	r3, [r3, #12]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d116      	bne.n	80053e2 <PCD_EP_ISR_Handler+0x306>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	4619      	mov	r1, r3
 80053be:	4610      	mov	r0, r2
 80053c0:	f7ff fa02 	bl	80047c8 <PCD_GET_EP_RX_CNT>
 80053c4:	4603      	mov	r3, r0
 80053c6:	84bb      	strh	r3, [r7, #36]	@ 0x24

          if (count != 0U)
 80053c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d067      	beq.n	800549e <PCD_EP_ISR_Handler+0x3c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6818      	ldr	r0, [r3, #0]
 80053d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053d4:	6959      	ldr	r1, [r3, #20]
 80053d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053d8:	88da      	ldrh	r2, [r3, #6]
 80053da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80053dc:	f00a fa02 	bl	800f7e4 <USB_ReadPMA>
 80053e0:	e05d      	b.n	800549e <PCD_EP_ISR_Handler+0x3c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80053e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053e4:	78db      	ldrb	r3, [r3, #3]
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d108      	bne.n	80053fc <PCD_EP_ISR_Handler+0x320>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80053ea:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80053ec:	461a      	mov	r2, r3
 80053ee:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 f9ad 	bl	8005750 <HAL_PCD_EP_DB_Receive>
 80053f6:	4603      	mov	r3, r0
 80053f8:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80053fa:	e050      	b.n	800549e <PCD_EP_ISR_Handler+0x3c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	461a      	mov	r2, r3
 8005402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	4413      	add	r3, r2
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	4b7a      	ldr	r3, [pc, #488]	@ (80055f8 <PCD_EP_ISR_Handler+0x51c>)
 800540e:	4013      	ands	r3, r2
 8005410:	61bb      	str	r3, [r7, #24]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	461a      	mov	r2, r3
 8005418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	441a      	add	r2, r3
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005426:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800542a:	6013      	str	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	461a      	mov	r2, r3
 8005432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	4413      	add	r3, r2
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d016      	beq.n	8005472 <PCD_EP_ISR_Handler+0x396>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	4619      	mov	r1, r3
 800544e:	4610      	mov	r0, r2
 8005450:	f7ff f9db 	bl	800480a <PCD_GET_EP_DBUF0_CNT>
 8005454:	4603      	mov	r3, r0
 8005456:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8005458:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800545a:	2b00      	cmp	r3, #0
 800545c:	d01f      	beq.n	800549e <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6818      	ldr	r0, [r3, #0]
 8005462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005464:	6959      	ldr	r1, [r3, #20]
 8005466:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005468:	891a      	ldrh	r2, [r3, #8]
 800546a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800546c:	f00a f9ba 	bl	800f7e4 <USB_ReadPMA>
 8005470:	e015      	b.n	800549e <PCD_EP_ISR_Handler+0x3c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	4619      	mov	r1, r3
 800547c:	4610      	mov	r0, r2
 800547e:	f7ff f9e5 	bl	800484c <PCD_GET_EP_DBUF1_CNT>
 8005482:	4603      	mov	r3, r0
 8005484:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8005486:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005488:	2b00      	cmp	r3, #0
 800548a:	d008      	beq.n	800549e <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6818      	ldr	r0, [r3, #0]
 8005490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005492:	6959      	ldr	r1, [r3, #20]
 8005494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005496:	895a      	ldrh	r2, [r3, #10]
 8005498:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800549a:	f00a f9a3 	bl	800f7e4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800549e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054a0:	69da      	ldr	r2, [r3, #28]
 80054a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80054a4:	441a      	add	r2, r3
 80054a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054a8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80054aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054ac:	695a      	ldr	r2, [r3, #20]
 80054ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80054b0:	441a      	add	r2, r3
 80054b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054b4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80054b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d004      	beq.n	80054c8 <PCD_EP_ISR_Handler+0x3ec>
 80054be:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80054c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d206      	bcs.n	80054d6 <PCD_EP_ISR_Handler+0x3fa>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80054c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	4619      	mov	r1, r3
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f00b f940 	bl	8010754 <HAL_PCD_DataOutStageCallback>
 80054d4:	e005      	b.n	80054e2 <PCD_EP_ISR_Handler+0x406>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80054dc:	4618      	mov	r0, r3
 80054de:	f008 ff99 	bl	800e414 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 80054e2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80054e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f000 8123 	beq.w	8005734 <PCD_EP_ISR_Handler+0x658>
      {
        ep = &hpcd->IN_ep[epindex];
 80054ee:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80054f2:	4613      	mov	r3, r2
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	4413      	add	r3, r2
 80054f8:	00db      	lsls	r3, r3, #3
 80054fa:	3310      	adds	r3, #16
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	4413      	add	r3, r2
 8005500:	3304      	adds	r3, #4
 8005502:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	461a      	mov	r2, r3
 800550a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4413      	add	r3, r2
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	4b39      	ldr	r3, [pc, #228]	@ (80055fc <PCD_EP_ISR_Handler+0x520>)
 8005516:	4013      	ands	r3, r2
 8005518:	62bb      	str	r3, [r7, #40]	@ 0x28
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	461a      	mov	r2, r3
 8005520:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	4413      	add	r3, r2
 8005528:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800552a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800552e:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005532:	78db      	ldrb	r3, [r3, #3]
 8005534:	2b01      	cmp	r3, #1
 8005536:	f040 80b8 	bne.w	80056aa <PCD_EP_ISR_Handler+0x5ce>
        {
          ep->xfer_len = 0U;
 800553a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800553c:	2200      	movs	r2, #0
 800553e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005542:	7b1b      	ldrb	r3, [r3, #12]
 8005544:	2b00      	cmp	r3, #0
 8005546:	f000 80a9 	beq.w	800569c <PCD_EP_ISR_Handler+0x5c0>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800554a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800554c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005550:	2b00      	cmp	r3, #0
 8005552:	d055      	beq.n	8005600 <PCD_EP_ISR_Handler+0x524>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005556:	785b      	ldrb	r3, [r3, #1]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d124      	bne.n	80055a6 <PCD_EP_ISR_Handler+0x4ca>
 800555c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	00db      	lsls	r3, r3, #3
 8005562:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005566:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	00db      	lsls	r3, r3, #3
 8005572:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005576:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800557a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800557e:	601a      	str	r2, [r3, #0]
 8005580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	00db      	lsls	r3, r3, #3
 8005586:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800558a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	00db      	lsls	r3, r3, #3
 8005596:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800559a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800559e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80055a2:	601a      	str	r2, [r3, #0]
 80055a4:	e07a      	b.n	800569c <PCD_EP_ISR_Handler+0x5c0>
 80055a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055a8:	785b      	ldrb	r3, [r3, #1]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d176      	bne.n	800569c <PCD_EP_ISR_Handler+0x5c0>
 80055ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	00db      	lsls	r3, r3, #3
 80055b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80055b8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	00db      	lsls	r3, r3, #3
 80055c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80055c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80055cc:	b292      	uxth	r2, r2
 80055ce:	601a      	str	r2, [r3, #0]
 80055d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	00db      	lsls	r3, r3, #3
 80055d6:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80055da:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80055de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80055e8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80055ec:	6812      	ldr	r2, [r2, #0]
 80055ee:	601a      	str	r2, [r3, #0]
 80055f0:	e054      	b.n	800569c <PCD_EP_ISR_Handler+0x5c0>
 80055f2:	bf00      	nop
 80055f4:	07ff0f8f 	.word	0x07ff0f8f
 80055f8:	07ff8f8f 	.word	0x07ff8f8f
 80055fc:	07ff8f0f 	.word	0x07ff8f0f
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005602:	785b      	ldrb	r3, [r3, #1]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d124      	bne.n	8005652 <PCD_EP_ISR_Handler+0x576>
 8005608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	00db      	lsls	r3, r3, #3
 800560e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005612:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	00db      	lsls	r3, r3, #3
 800561e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005622:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005626:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800562a:	605a      	str	r2, [r3, #4]
 800562c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	00db      	lsls	r3, r3, #3
 8005632:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005636:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800563a:	685a      	ldr	r2, [r3, #4]
 800563c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	00db      	lsls	r3, r3, #3
 8005642:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005646:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800564a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800564e:	605a      	str	r2, [r3, #4]
 8005650:	e024      	b.n	800569c <PCD_EP_ISR_Handler+0x5c0>
 8005652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005654:	785b      	ldrb	r3, [r3, #1]
 8005656:	2b01      	cmp	r3, #1
 8005658:	d120      	bne.n	800569c <PCD_EP_ISR_Handler+0x5c0>
 800565a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	00db      	lsls	r3, r3, #3
 8005660:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005664:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005668:	685a      	ldr	r2, [r3, #4]
 800566a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	00db      	lsls	r3, r3, #3
 8005670:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005674:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005678:	b292      	uxth	r2, r2
 800567a:	605a      	str	r2, [r3, #4]
 800567c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	00db      	lsls	r3, r3, #3
 8005682:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8005686:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 800568a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	00db      	lsls	r3, r3, #3
 8005690:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005694:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005698:	6852      	ldr	r2, [r2, #4]
 800569a:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800569c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	4619      	mov	r1, r3
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f00b f871 	bl	801078a <HAL_PCD_DataInStageCallback>
 80056a8:	e044      	b.n	8005734 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80056aa:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80056ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d139      	bne.n	8005728 <PCD_EP_ISR_Handler+0x64c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80056b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	00db      	lsls	r3, r3, #3
 80056ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80056be:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	0c1b      	lsrs	r3, r3, #16
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056cc:	84fb      	strh	r3, [r7, #38]	@ 0x26

            if (ep->xfer_len > TxPctSize)
 80056ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056d0:	699a      	ldr	r2, [r3, #24]
 80056d2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d906      	bls.n	80056e6 <PCD_EP_ISR_Handler+0x60a>
            {
              ep->xfer_len -= TxPctSize;
 80056d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056da:	699a      	ldr	r2, [r3, #24]
 80056dc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80056de:	1ad2      	subs	r2, r2, r3
 80056e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056e2:	619a      	str	r2, [r3, #24]
 80056e4:	e002      	b.n	80056ec <PCD_EP_ISR_Handler+0x610>
            }
            else
            {
              ep->xfer_len = 0U;
 80056e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056e8:	2200      	movs	r2, #0
 80056ea:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80056ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d106      	bne.n	8005702 <PCD_EP_ISR_Handler+0x626>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80056f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	4619      	mov	r1, r3
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f00b f845 	bl	801078a <HAL_PCD_DataInStageCallback>
 8005700:	e018      	b.n	8005734 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005702:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005704:	695a      	ldr	r2, [r3, #20]
 8005706:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005708:	441a      	add	r2, r3
 800570a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800570c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800570e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005710:	69da      	ldr	r2, [r3, #28]
 8005712:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005714:	441a      	add	r2, r3
 8005716:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005718:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005720:	4618      	mov	r0, r3
 8005722:	f008 fe77 	bl	800e414 <USB_EPStartXfer>
 8005726:	e005      	b.n	8005734 <PCD_EP_ISR_Handler+0x658>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005728:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800572a:	461a      	mov	r2, r3
 800572c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 f8e8 	bl	8005904 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800573a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800573e:	2b00      	cmp	r3, #0
 8005740:	f47f acd1 	bne.w	80050e6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3738      	adds	r7, #56	@ 0x38
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop

08005750 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b08a      	sub	sp, #40	@ 0x28
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	4613      	mov	r3, r2
 800575c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800575e:	88fb      	ldrh	r3, [r7, #6]
 8005760:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d062      	beq.n	800582e <HAL_PCD_EP_DB_Receive+0xde>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	4619      	mov	r1, r3
 8005772:	4610      	mov	r0, r2
 8005774:	f7ff f849 	bl	800480a <PCD_GET_EP_DBUF0_CNT>
 8005778:	4603      	mov	r3, r0
 800577a:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	699a      	ldr	r2, [r3, #24]
 8005780:	8bfb      	ldrh	r3, [r7, #30]
 8005782:	429a      	cmp	r2, r3
 8005784:	d306      	bcc.n	8005794 <HAL_PCD_EP_DB_Receive+0x44>
    {
      ep->xfer_len -= count;
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	699a      	ldr	r2, [r3, #24]
 800578a:	8bfb      	ldrh	r3, [r7, #30]
 800578c:	1ad2      	subs	r2, r2, r3
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	619a      	str	r2, [r3, #24]
 8005792:	e002      	b.n	800579a <HAL_PCD_EP_DB_Receive+0x4a>
    }
    else
    {
      ep->xfer_len = 0U;
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	2200      	movs	r2, #0
 8005798:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d11b      	bne.n	80057da <HAL_PCD_EP_DB_Receive+0x8a>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	461a      	mov	r2, r3
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	4413      	add	r3, r2
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	4b52      	ldr	r3, [pc, #328]	@ (80058fc <HAL_PCD_EP_DB_Receive+0x1ac>)
 80057b4:	4013      	ands	r3, r2
 80057b6:	61bb      	str	r3, [r7, #24]
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80057be:	61bb      	str	r3, [r7, #24]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	461a      	mov	r2, r3
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	441a      	add	r2, r3
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057d8:	6013      	str	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80057da:	88fb      	ldrh	r3, [r7, #6]
 80057dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d017      	beq.n	8005814 <HAL_PCD_EP_DB_Receive+0xc4>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	461a      	mov	r2, r3
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	4413      	add	r3, r2
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	4b42      	ldr	r3, [pc, #264]	@ (8005900 <HAL_PCD_EP_DB_Receive+0x1b0>)
 80057f6:	4013      	ands	r3, r2
 80057f8:	617b      	str	r3, [r7, #20]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	461a      	mov	r2, r3
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	441a      	add	r2, r3
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800580e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005812:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 8005814:	8bfb      	ldrh	r3, [r7, #30]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d06b      	beq.n	80058f2 <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6818      	ldr	r0, [r3, #0]
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	6959      	ldr	r1, [r3, #20]
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	891a      	ldrh	r2, [r3, #8]
 8005826:	8bfb      	ldrh	r3, [r7, #30]
 8005828:	f009 ffdc 	bl	800f7e4 <USB_ReadPMA>
 800582c:	e061      	b.n	80058f2 <HAL_PCD_EP_DB_Receive+0x1a2>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	4619      	mov	r1, r3
 8005838:	4610      	mov	r0, r2
 800583a:	f7ff f807 	bl	800484c <PCD_GET_EP_DBUF1_CNT>
 800583e:	4603      	mov	r3, r0
 8005840:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	699a      	ldr	r2, [r3, #24]
 8005846:	8bfb      	ldrh	r3, [r7, #30]
 8005848:	429a      	cmp	r2, r3
 800584a:	d306      	bcc.n	800585a <HAL_PCD_EP_DB_Receive+0x10a>
    {
      ep->xfer_len -= count;
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	699a      	ldr	r2, [r3, #24]
 8005850:	8bfb      	ldrh	r3, [r7, #30]
 8005852:	1ad2      	subs	r2, r2, r3
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	619a      	str	r2, [r3, #24]
 8005858:	e002      	b.n	8005860 <HAL_PCD_EP_DB_Receive+0x110>
    }
    else
    {
      ep->xfer_len = 0U;
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	2200      	movs	r2, #0
 800585e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d11b      	bne.n	80058a0 <HAL_PCD_EP_DB_Receive+0x150>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	461a      	mov	r2, r3
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4413      	add	r3, r2
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	4b20      	ldr	r3, [pc, #128]	@ (80058fc <HAL_PCD_EP_DB_Receive+0x1ac>)
 800587a:	4013      	ands	r3, r2
 800587c:	627b      	str	r3, [r7, #36]	@ 0x24
 800587e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005880:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005884:	627b      	str	r3, [r7, #36]	@ 0x24
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	461a      	mov	r2, r3
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	441a      	add	r2, r3
 8005894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005896:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800589a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800589e:	6013      	str	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80058a0:	88fb      	ldrh	r3, [r7, #6]
 80058a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d117      	bne.n	80058da <HAL_PCD_EP_DB_Receive+0x18a>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	461a      	mov	r2, r3
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	4413      	add	r3, r2
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	4b11      	ldr	r3, [pc, #68]	@ (8005900 <HAL_PCD_EP_DB_Receive+0x1b0>)
 80058bc:	4013      	ands	r3, r2
 80058be:	623b      	str	r3, [r7, #32]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	461a      	mov	r2, r3
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	441a      	add	r2, r3
 80058ce:	6a3b      	ldr	r3, [r7, #32]
 80058d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058d4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80058d8:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 80058da:	8bfb      	ldrh	r3, [r7, #30]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d008      	beq.n	80058f2 <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6818      	ldr	r0, [r3, #0]
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	6959      	ldr	r1, [r3, #20]
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	895a      	ldrh	r2, [r3, #10]
 80058ec:	8bfb      	ldrh	r3, [r7, #30]
 80058ee:	f009 ff79 	bl	800f7e4 <USB_ReadPMA>
    }
  }

  return count;
 80058f2:	8bfb      	ldrh	r3, [r7, #30]
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3728      	adds	r7, #40	@ 0x28
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	07ffbf8f 	.word	0x07ffbf8f
 8005900:	07ff8f8f 	.word	0x07ff8f8f

08005904 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b08e      	sub	sp, #56	@ 0x38
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	4613      	mov	r3, r2
 8005910:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005912:	88fb      	ldrh	r3, [r7, #6]
 8005914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005918:	2b00      	cmp	r3, #0
 800591a:	f000 81d5 	beq.w	8005cc8 <HAL_PCD_EP_DB_Transmit+0x3c4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	4619      	mov	r1, r3
 8005928:	4610      	mov	r0, r2
 800592a:	f7fe ff6e 	bl	800480a <PCD_GET_EP_DBUF0_CNT>
 800592e:	4603      	mov	r3, r0
 8005930:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len > TxPctSize)
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	699a      	ldr	r2, [r3, #24]
 8005936:	8bfb      	ldrh	r3, [r7, #30]
 8005938:	429a      	cmp	r2, r3
 800593a:	d906      	bls.n	800594a <HAL_PCD_EP_DB_Transmit+0x46>
    {
      ep->xfer_len -= TxPctSize;
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	699a      	ldr	r2, [r3, #24]
 8005940:	8bfb      	ldrh	r3, [r7, #30]
 8005942:	1ad2      	subs	r2, r2, r3
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	619a      	str	r2, [r3, #24]
 8005948:	e002      	b.n	8005950 <HAL_PCD_EP_DB_Transmit+0x4c>
    }
    else
    {
      ep->xfer_len = 0U;
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	2200      	movs	r2, #0
 800594e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	2b00      	cmp	r3, #0
 8005956:	f040 80c1 	bne.w	8005adc <HAL_PCD_EP_DB_Transmit+0x1d8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	785b      	ldrb	r3, [r3, #1]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d124      	bne.n	80059ac <HAL_PCD_EP_DB_Transmit+0xa8>
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	00db      	lsls	r3, r3, #3
 8005968:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800596c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	00db      	lsls	r3, r3, #3
 8005978:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800597c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005980:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8005984:	601a      	str	r2, [r3, #0]
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	00db      	lsls	r3, r3, #3
 800598c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005990:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	00db      	lsls	r3, r3, #3
 800599c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80059a0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80059a4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80059a8:	601a      	str	r2, [r3, #0]
 80059aa:	e024      	b.n	80059f6 <HAL_PCD_EP_DB_Transmit+0xf2>
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	785b      	ldrb	r3, [r3, #1]
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d120      	bne.n	80059f6 <HAL_PCD_EP_DB_Transmit+0xf2>
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	00db      	lsls	r3, r3, #3
 80059ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80059be:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	00db      	lsls	r3, r3, #3
 80059ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80059ce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80059d2:	b292      	uxth	r2, r2
 80059d4:	601a      	str	r2, [r3, #0]
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	00db      	lsls	r3, r3, #3
 80059dc:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80059e0:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	00db      	lsls	r3, r3, #3
 80059ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80059ee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80059f2:	6812      	ldr	r2, [r2, #0]
 80059f4:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	785b      	ldrb	r3, [r3, #1]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d124      	bne.n	8005a48 <HAL_PCD_EP_DB_Transmit+0x144>
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	00db      	lsls	r3, r3, #3
 8005a04:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005a08:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005a0c:	685a      	ldr	r2, [r3, #4]
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	00db      	lsls	r3, r3, #3
 8005a14:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005a18:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005a1c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8005a20:	605a      	str	r2, [r3, #4]
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	00db      	lsls	r3, r3, #3
 8005a28:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005a2c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005a30:	685a      	ldr	r2, [r3, #4]
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	00db      	lsls	r3, r3, #3
 8005a38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005a3c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005a40:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005a44:	605a      	str	r2, [r3, #4]
 8005a46:	e024      	b.n	8005a92 <HAL_PCD_EP_DB_Transmit+0x18e>
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	785b      	ldrb	r3, [r3, #1]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d120      	bne.n	8005a92 <HAL_PCD_EP_DB_Transmit+0x18e>
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	00db      	lsls	r3, r3, #3
 8005a56:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005a5a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005a5e:	685a      	ldr	r2, [r3, #4]
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	00db      	lsls	r3, r3, #3
 8005a66:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005a6a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005a6e:	b292      	uxth	r2, r2
 8005a70:	605a      	str	r2, [r3, #4]
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8005a7c:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	00db      	lsls	r3, r3, #3
 8005a86:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005a8a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005a8e:	6852      	ldr	r2, [r2, #4]
 8005a90:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	4619      	mov	r1, r3
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f00a fe76 	bl	801078a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005a9e:	88fb      	ldrh	r3, [r7, #6]
 8005aa0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	f000 82e5 	beq.w	8006074 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	461a      	mov	r2, r3
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	4413      	add	r3, r2
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	4b8e      	ldr	r3, [pc, #568]	@ (8005cf4 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8005abc:	4013      	ands	r3, r2
 8005abe:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	441a      	add	r2, r3
 8005ace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ad0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ad4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ad8:	6013      	str	r3, [r2, #0]
 8005ada:	e2cb      	b.n	8006074 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005adc:	88fb      	ldrh	r3, [r7, #6]
 8005ade:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d017      	beq.n	8005b16 <HAL_PCD_EP_DB_Transmit+0x212>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	461a      	mov	r2, r3
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	4413      	add	r3, r2
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	4b7f      	ldr	r3, [pc, #508]	@ (8005cf4 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8005af8:	4013      	ands	r3, r2
 8005afa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	461a      	mov	r2, r3
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	441a      	add	r2, r3
 8005b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005b10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b14:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	f040 82a9 	bne.w	8006074 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	695a      	ldr	r2, [r3, #20]
 8005b26:	8bfb      	ldrh	r3, [r7, #30]
 8005b28:	441a      	add	r2, r3
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	69da      	ldr	r2, [r3, #28]
 8005b32:	8bfb      	ldrh	r3, [r7, #30]
 8005b34:	441a      	add	r2, r3
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	6a1a      	ldr	r2, [r3, #32]
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d309      	bcc.n	8005b5a <HAL_PCD_EP_DB_Transmit+0x256>
        {
          len = ep->maxpacket;
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	6a1a      	ldr	r2, [r3, #32]
 8005b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b52:	1ad2      	subs	r2, r2, r3
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	621a      	str	r2, [r3, #32]
 8005b58:	e014      	b.n	8005b84 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else if (ep->xfer_len_db == 0U)
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d106      	bne.n	8005b70 <HAL_PCD_EP_DB_Transmit+0x26c>
        {
          len = TxPctSize;
 8005b62:	8bfb      	ldrh	r3, [r7, #30]
 8005b64:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005b6e:	e009      	b.n	8005b84 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	6a1b      	ldr	r3, [r3, #32]
 8005b7c:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	2200      	movs	r2, #0
 8005b82:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	785b      	ldrb	r3, [r3, #1]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d16a      	bne.n	8005c62 <HAL_PCD_EP_DB_Transmit+0x35e>
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	00db      	lsls	r3, r3, #3
 8005b92:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005b96:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	00db      	lsls	r3, r3, #3
 8005ba2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005ba6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005baa:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8005bae:	601a      	str	r2, [r3, #0]
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d112      	bne.n	8005bdc <HAL_PCD_EP_DB_Transmit+0x2d8>
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	00db      	lsls	r3, r3, #3
 8005bbc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005bc0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	00db      	lsls	r3, r3, #3
 8005bcc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005bd0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005bd4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005bd8:	601a      	str	r2, [r3, #0]
 8005bda:	e06a      	b.n	8005cb2 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bde:	2b3e      	cmp	r3, #62	@ 0x3e
 8005be0:	d81e      	bhi.n	8005c20 <HAL_PCD_EP_DB_Transmit+0x31c>
 8005be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be4:	085b      	lsrs	r3, r3, #1
 8005be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bea:	f003 0301 	and.w	r3, r3, #1
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d002      	beq.n	8005bf8 <HAL_PCD_EP_DB_Transmit+0x2f4>
 8005bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	00db      	lsls	r3, r3, #3
 8005bfe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005c02:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005c06:	6819      	ldr	r1, [r3, #0]
 8005c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c0a:	069a      	lsls	r2, r3, #26
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	00db      	lsls	r3, r3, #3
 8005c12:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005c16:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005c1a:	430a      	orrs	r2, r1
 8005c1c:	601a      	str	r2, [r3, #0]
 8005c1e:	e048      	b.n	8005cb2 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8005c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c22:	095b      	lsrs	r3, r3, #5
 8005c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c28:	f003 031f 	and.w	r3, r3, #31
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d102      	bne.n	8005c36 <HAL_PCD_EP_DB_Transmit+0x332>
 8005c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c32:	3b01      	subs	r3, #1
 8005c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	00db      	lsls	r3, r3, #3
 8005c3c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005c40:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c48:	069b      	lsls	r3, r3, #26
 8005c4a:	431a      	orrs	r2, r3
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	00db      	lsls	r3, r3, #3
 8005c52:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005c56:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005c5a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005c5e:	601a      	str	r2, [r3, #0]
 8005c60:	e027      	b.n	8005cb2 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	785b      	ldrb	r3, [r3, #1]
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d123      	bne.n	8005cb2 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	00db      	lsls	r3, r3, #3
 8005c70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005c74:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	00db      	lsls	r3, r3, #3
 8005c80:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005c84:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005c88:	b292      	uxth	r2, r2
 8005c8a:	601a      	str	r2, [r3, #0]
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	00db      	lsls	r3, r3, #3
 8005c92:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005c96:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005c9a:	6819      	ldr	r1, [r3, #0]
 8005c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c9e:	041a      	lsls	r2, r3, #16
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	00db      	lsls	r3, r3, #3
 8005ca6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005caa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005cae:	430a      	orrs	r2, r1
 8005cb0:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6818      	ldr	r0, [r3, #0]
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	6959      	ldr	r1, [r3, #20]
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	891a      	ldrh	r2, [r3, #8]
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	f009 fd2e 	bl	800f722 <USB_WritePMA>
 8005cc6:	e1d5      	b.n	8006074 <HAL_PCD_EP_DB_Transmit+0x770>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	4610      	mov	r0, r2
 8005cd4:	f7fe fdba 	bl	800484c <PCD_GET_EP_DBUF1_CNT>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= TxPctSize)
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	699a      	ldr	r2, [r3, #24]
 8005ce0:	8bfb      	ldrh	r3, [r7, #30]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d308      	bcc.n	8005cf8 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxPctSize;
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	699a      	ldr	r2, [r3, #24]
 8005cea:	8bfb      	ldrh	r3, [r7, #30]
 8005cec:	1ad2      	subs	r2, r2, r3
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	619a      	str	r2, [r3, #24]
 8005cf2:	e004      	b.n	8005cfe <HAL_PCD_EP_DB_Transmit+0x3fa>
 8005cf4:	07ff8f8f 	.word	0x07ff8f8f
    }
    else
    {
      ep->xfer_len = 0U;
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	699b      	ldr	r3, [r3, #24]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f040 80c1 	bne.w	8005e8a <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	785b      	ldrb	r3, [r3, #1]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d124      	bne.n	8005d5a <HAL_PCD_EP_DB_Transmit+0x456>
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	00db      	lsls	r3, r3, #3
 8005d16:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005d1a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	00db      	lsls	r3, r3, #3
 8005d26:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005d2a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005d2e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	00db      	lsls	r3, r3, #3
 8005d3a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005d3e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	00db      	lsls	r3, r3, #3
 8005d4a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005d4e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005d52:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005d56:	601a      	str	r2, [r3, #0]
 8005d58:	e024      	b.n	8005da4 <HAL_PCD_EP_DB_Transmit+0x4a0>
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	785b      	ldrb	r3, [r3, #1]
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d120      	bne.n	8005da4 <HAL_PCD_EP_DB_Transmit+0x4a0>
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	00db      	lsls	r3, r3, #3
 8005d68:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005d6c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	00db      	lsls	r3, r3, #3
 8005d78:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005d7c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005d80:	b292      	uxth	r2, r2
 8005d82:	601a      	str	r2, [r3, #0]
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	00db      	lsls	r3, r3, #3
 8005d8a:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8005d8e:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	00db      	lsls	r3, r3, #3
 8005d98:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005d9c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005da0:	6812      	ldr	r2, [r2, #0]
 8005da2:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	785b      	ldrb	r3, [r3, #1]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d124      	bne.n	8005df6 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	00db      	lsls	r3, r3, #3
 8005db2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005db6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005dba:	685a      	ldr	r2, [r3, #4]
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	00db      	lsls	r3, r3, #3
 8005dc2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005dc6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005dca:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8005dce:	605a      	str	r2, [r3, #4]
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	00db      	lsls	r3, r3, #3
 8005dd6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005dda:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005dde:	685a      	ldr	r2, [r3, #4]
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	00db      	lsls	r3, r3, #3
 8005de6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005dea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005dee:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005df2:	605a      	str	r2, [r3, #4]
 8005df4:	e024      	b.n	8005e40 <HAL_PCD_EP_DB_Transmit+0x53c>
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	785b      	ldrb	r3, [r3, #1]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d120      	bne.n	8005e40 <HAL_PCD_EP_DB_Transmit+0x53c>
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	00db      	lsls	r3, r3, #3
 8005e04:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005e08:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005e0c:	685a      	ldr	r2, [r3, #4]
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	00db      	lsls	r3, r3, #3
 8005e14:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005e18:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005e1c:	b292      	uxth	r2, r2
 8005e1e:	605a      	str	r2, [r3, #4]
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	00db      	lsls	r3, r3, #3
 8005e26:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8005e2a:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	00db      	lsls	r3, r3, #3
 8005e34:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005e38:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005e3c:	6852      	ldr	r2, [r2, #4]
 8005e3e:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	4619      	mov	r1, r3
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	f00a fc9f 	bl	801078a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005e4c:	88fb      	ldrh	r3, [r7, #6]
 8005e4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	f040 810e 	bne.w	8006074 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	4413      	add	r3, r2
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	4b95      	ldr	r3, [pc, #596]	@ (80060c0 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	623b      	str	r3, [r7, #32]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	461a      	mov	r2, r3
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	441a      	add	r2, r3
 8005e7c:	6a3b      	ldr	r3, [r7, #32]
 8005e7e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e86:	6013      	str	r3, [r2, #0]
 8005e88:	e0f4      	b.n	8006074 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005e8a:	88fb      	ldrh	r3, [r7, #6]
 8005e8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d117      	bne.n	8005ec4 <HAL_PCD_EP_DB_Transmit+0x5c0>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	461a      	mov	r2, r3
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	4413      	add	r3, r2
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	4b86      	ldr	r3, [pc, #536]	@ (80060c0 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	617b      	str	r3, [r7, #20]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	461a      	mov	r2, r3
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	441a      	add	r2, r3
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ebe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ec2:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	f040 80d2 	bne.w	8006074 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	695a      	ldr	r2, [r3, #20]
 8005ed4:	8bfb      	ldrh	r3, [r7, #30]
 8005ed6:	441a      	add	r2, r3
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	69da      	ldr	r2, [r3, #28]
 8005ee0:	8bfb      	ldrh	r3, [r7, #30]
 8005ee2:	441a      	add	r2, r3
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	6a1a      	ldr	r2, [r3, #32]
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d309      	bcc.n	8005f08 <HAL_PCD_EP_DB_Transmit+0x604>
        {
          len = ep->maxpacket;
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	6a1a      	ldr	r2, [r3, #32]
 8005efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f00:	1ad2      	subs	r2, r2, r3
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	621a      	str	r2, [r3, #32]
 8005f06:	e014      	b.n	8005f32 <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else if (ep->xfer_len_db == 0U)
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	6a1b      	ldr	r3, [r3, #32]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d106      	bne.n	8005f1e <HAL_PCD_EP_DB_Transmit+0x61a>
        {
          len = TxPctSize;
 8005f10:	8bfb      	ldrh	r3, [r7, #30]
 8005f12:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005f1c:	e009      	b.n	8005f32 <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else
        {
          len = ep->xfer_len_db;
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	6a1b      	ldr	r3, [r3, #32]
 8005f22:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	2200      	movs	r2, #0
 8005f28:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	785b      	ldrb	r3, [r3, #1]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d16a      	bne.n	8006010 <HAL_PCD_EP_DB_Transmit+0x70c>
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	00db      	lsls	r3, r3, #3
 8005f40:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f44:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005f48:	685a      	ldr	r2, [r3, #4]
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	00db      	lsls	r3, r3, #3
 8005f50:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f54:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005f58:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8005f5c:	605a      	str	r2, [r3, #4]
 8005f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d112      	bne.n	8005f8a <HAL_PCD_EP_DB_Transmit+0x686>
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	00db      	lsls	r3, r3, #3
 8005f6a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f6e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005f72:	685a      	ldr	r2, [r3, #4]
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	00db      	lsls	r3, r3, #3
 8005f7a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f7e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005f82:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005f86:	605a      	str	r2, [r3, #4]
 8005f88:	e06a      	b.n	8006060 <HAL_PCD_EP_DB_Transmit+0x75c>
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f8c:	2b3e      	cmp	r3, #62	@ 0x3e
 8005f8e:	d81e      	bhi.n	8005fce <HAL_PCD_EP_DB_Transmit+0x6ca>
 8005f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f92:	085b      	lsrs	r3, r3, #1
 8005f94:	61bb      	str	r3, [r7, #24]
 8005f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f98:	f003 0301 	and.w	r3, r3, #1
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d002      	beq.n	8005fa6 <HAL_PCD_EP_DB_Transmit+0x6a2>
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	61bb      	str	r3, [r7, #24]
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	00db      	lsls	r3, r3, #3
 8005fac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005fb0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005fb4:	6859      	ldr	r1, [r3, #4]
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	069a      	lsls	r2, r3, #26
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	00db      	lsls	r3, r3, #3
 8005fc0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005fc4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005fc8:	430a      	orrs	r2, r1
 8005fca:	605a      	str	r2, [r3, #4]
 8005fcc:	e048      	b.n	8006060 <HAL_PCD_EP_DB_Transmit+0x75c>
 8005fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd0:	095b      	lsrs	r3, r3, #5
 8005fd2:	61bb      	str	r3, [r7, #24]
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd6:	f003 031f 	and.w	r3, r3, #31
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d102      	bne.n	8005fe4 <HAL_PCD_EP_DB_Transmit+0x6e0>
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	61bb      	str	r3, [r7, #24]
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	00db      	lsls	r3, r3, #3
 8005fea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005fee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005ff2:	685a      	ldr	r2, [r3, #4]
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	069b      	lsls	r3, r3, #26
 8005ff8:	431a      	orrs	r2, r3
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	00db      	lsls	r3, r3, #3
 8006000:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006004:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006008:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800600c:	605a      	str	r2, [r3, #4]
 800600e:	e027      	b.n	8006060 <HAL_PCD_EP_DB_Transmit+0x75c>
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	785b      	ldrb	r3, [r3, #1]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d123      	bne.n	8006060 <HAL_PCD_EP_DB_Transmit+0x75c>
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	00db      	lsls	r3, r3, #3
 800601e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006022:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006026:	685a      	ldr	r2, [r3, #4]
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	00db      	lsls	r3, r3, #3
 800602e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006032:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006036:	b292      	uxth	r2, r2
 8006038:	605a      	str	r2, [r3, #4]
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	00db      	lsls	r3, r3, #3
 8006040:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006044:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006048:	6859      	ldr	r1, [r3, #4]
 800604a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800604c:	041a      	lsls	r2, r3, #16
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	00db      	lsls	r3, r3, #3
 8006054:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006058:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800605c:	430a      	orrs	r2, r1
 800605e:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6818      	ldr	r0, [r3, #0]
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	6959      	ldr	r1, [r3, #20]
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	895a      	ldrh	r2, [r3, #10]
 800606c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606e:	b29b      	uxth	r3, r3
 8006070:	f009 fb57 	bl	800f722 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	461a      	mov	r2, r3
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	4413      	add	r3, r2
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	4b0f      	ldr	r3, [pc, #60]	@ (80060c4 <HAL_PCD_EP_DB_Transmit+0x7c0>)
 8006086:	4013      	ands	r3, r2
 8006088:	633b      	str	r3, [r7, #48]	@ 0x30
 800608a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800608c:	f083 0310 	eor.w	r3, r3, #16
 8006090:	633b      	str	r3, [r7, #48]	@ 0x30
 8006092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006094:	f083 0320 	eor.w	r3, r3, #32
 8006098:	633b      	str	r3, [r7, #48]	@ 0x30
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	461a      	mov	r2, r3
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	441a      	add	r2, r3
 80060a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060b2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3738      	adds	r7, #56	@ 0x38
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	07ff8f8f 	.word	0x07ff8f8f
 80060c4:	07ff8fbf 	.word	0x07ff8fbf

080060c8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b087      	sub	sp, #28
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	607b      	str	r3, [r7, #4]
 80060d2:	460b      	mov	r3, r1
 80060d4:	817b      	strh	r3, [r7, #10]
 80060d6:	4613      	mov	r3, r2
 80060d8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80060da:	897b      	ldrh	r3, [r7, #10]
 80060dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00c      	beq.n	8006100 <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060e6:	897b      	ldrh	r3, [r7, #10]
 80060e8:	f003 0207 	and.w	r2, r3, #7
 80060ec:	4613      	mov	r3, r2
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	4413      	add	r3, r2
 80060f2:	00db      	lsls	r3, r3, #3
 80060f4:	3310      	adds	r3, #16
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	4413      	add	r3, r2
 80060fa:	3304      	adds	r3, #4
 80060fc:	617b      	str	r3, [r7, #20]
 80060fe:	e00a      	b.n	8006116 <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006100:	897a      	ldrh	r2, [r7, #10]
 8006102:	4613      	mov	r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	4413      	add	r3, r2
 8006108:	00db      	lsls	r3, r3, #3
 800610a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	4413      	add	r3, r2
 8006112:	3304      	adds	r3, #4
 8006114:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006116:	893b      	ldrh	r3, [r7, #8]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d107      	bne.n	800612c <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	2200      	movs	r2, #0
 8006120:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	b29a      	uxth	r2, r3
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	80da      	strh	r2, [r3, #6]
 800612a:	e00b      	b.n	8006144 <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	2201      	movs	r2, #1
 8006130:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	b29a      	uxth	r2, r3
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	0c1b      	lsrs	r3, r3, #16
 800613e:	b29a      	uxth	r2, r3
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	371c      	adds	r7, #28
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr

08006152 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006152:	b480      	push	{r7}
 8006154:	b085      	sub	sp, #20
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  hpcd->LPM_State = LPM_L0;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006174:	f043 0201 	orr.w	r2, r3, #1
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006180:	f043 0202 	orr.w	r2, r3, #2
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3714      	adds	r7, #20
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr

08006196 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006196:	b480      	push	{r7}
 8006198:	b083      	sub	sp, #12
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
 800619e:	460b      	mov	r3, r1
 80061a0:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80061a2:	bf00      	nop
 80061a4:	370c      	adds	r7, #12
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
	...

080061b0 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80061b0:	b480      	push	{r7}
 80061b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33SV);
 80061b4:	4b05      	ldr	r3, [pc, #20]	@ (80061cc <HAL_PWREx_EnableVddUSB+0x1c>)
 80061b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061b8:	4a04      	ldr	r2, [pc, #16]	@ (80061cc <HAL_PWREx_EnableVddUSB+0x1c>)
 80061ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80061be:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80061c0:	bf00      	nop
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	44020800 	.word	0x44020800

080061d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b088      	sub	sp, #32
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d102      	bne.n	80061e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	f000 bc28 	b.w	8006a34 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061e4:	4b94      	ldr	r3, [pc, #592]	@ (8006438 <HAL_RCC_OscConfig+0x268>)
 80061e6:	69db      	ldr	r3, [r3, #28]
 80061e8:	f003 0318 	and.w	r3, r3, #24
 80061ec:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80061ee:	4b92      	ldr	r3, [pc, #584]	@ (8006438 <HAL_RCC_OscConfig+0x268>)
 80061f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061f2:	f003 0303 	and.w	r3, r3, #3
 80061f6:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 0310 	and.w	r3, r3, #16
 8006200:	2b00      	cmp	r3, #0
 8006202:	d05b      	beq.n	80062bc <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	2b08      	cmp	r3, #8
 8006208:	d005      	beq.n	8006216 <HAL_RCC_OscConfig+0x46>
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	2b18      	cmp	r3, #24
 800620e:	d114      	bne.n	800623a <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	2b02      	cmp	r3, #2
 8006214:	d111      	bne.n	800623a <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	69db      	ldr	r3, [r3, #28]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d102      	bne.n	8006224 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	f000 bc08 	b.w	8006a34 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8006224:	4b84      	ldr	r3, [pc, #528]	@ (8006438 <HAL_RCC_OscConfig+0x268>)
 8006226:	699b      	ldr	r3, [r3, #24]
 8006228:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a1b      	ldr	r3, [r3, #32]
 8006230:	041b      	lsls	r3, r3, #16
 8006232:	4981      	ldr	r1, [pc, #516]	@ (8006438 <HAL_RCC_OscConfig+0x268>)
 8006234:	4313      	orrs	r3, r2
 8006236:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8006238:	e040      	b.n	80062bc <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	69db      	ldr	r3, [r3, #28]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d023      	beq.n	800628a <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006242:	4b7d      	ldr	r3, [pc, #500]	@ (8006438 <HAL_RCC_OscConfig+0x268>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a7c      	ldr	r2, [pc, #496]	@ (8006438 <HAL_RCC_OscConfig+0x268>)
 8006248:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800624c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800624e:	f7fc fdf3 	bl	8002e38 <HAL_GetTick>
 8006252:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8006254:	e008      	b.n	8006268 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8006256:	f7fc fdef 	bl	8002e38 <HAL_GetTick>
 800625a:	4602      	mov	r2, r0
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	2b02      	cmp	r3, #2
 8006262:	d901      	bls.n	8006268 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	e3e5      	b.n	8006a34 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8006268:	4b73      	ldr	r3, [pc, #460]	@ (8006438 <HAL_RCC_OscConfig+0x268>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006270:	2b00      	cmp	r3, #0
 8006272:	d0f0      	beq.n	8006256 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8006274:	4b70      	ldr	r3, [pc, #448]	@ (8006438 <HAL_RCC_OscConfig+0x268>)
 8006276:	699b      	ldr	r3, [r3, #24]
 8006278:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a1b      	ldr	r3, [r3, #32]
 8006280:	041b      	lsls	r3, r3, #16
 8006282:	496d      	ldr	r1, [pc, #436]	@ (8006438 <HAL_RCC_OscConfig+0x268>)
 8006284:	4313      	orrs	r3, r2
 8006286:	618b      	str	r3, [r1, #24]
 8006288:	e018      	b.n	80062bc <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800628a:	4b6b      	ldr	r3, [pc, #428]	@ (8006438 <HAL_RCC_OscConfig+0x268>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a6a      	ldr	r2, [pc, #424]	@ (8006438 <HAL_RCC_OscConfig+0x268>)
 8006290:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006294:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006296:	f7fc fdcf 	bl	8002e38 <HAL_GetTick>
 800629a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800629c:	e008      	b.n	80062b0 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800629e:	f7fc fdcb 	bl	8002e38 <HAL_GetTick>
 80062a2:	4602      	mov	r2, r0
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	1ad3      	subs	r3, r2, r3
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d901      	bls.n	80062b0 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e3c1      	b.n	8006a34 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80062b0:	4b61      	ldr	r3, [pc, #388]	@ (8006438 <HAL_RCC_OscConfig+0x268>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1f0      	bne.n	800629e <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0301 	and.w	r3, r3, #1
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f000 80a0 	beq.w	800640a <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	2b10      	cmp	r3, #16
 80062ce:	d005      	beq.n	80062dc <HAL_RCC_OscConfig+0x10c>
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	2b18      	cmp	r3, #24
 80062d4:	d109      	bne.n	80062ea <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	2b03      	cmp	r3, #3
 80062da:	d106      	bne.n	80062ea <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f040 8092 	bne.w	800640a <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e3a4      	b.n	8006a34 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062f2:	d106      	bne.n	8006302 <HAL_RCC_OscConfig+0x132>
 80062f4:	4b50      	ldr	r3, [pc, #320]	@ (8006438 <HAL_RCC_OscConfig+0x268>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a4f      	ldr	r2, [pc, #316]	@ (8006438 <HAL_RCC_OscConfig+0x268>)
 80062fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062fe:	6013      	str	r3, [r2, #0]
 8006300:	e058      	b.n	80063b4 <HAL_RCC_OscConfig+0x1e4>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d112      	bne.n	8006330 <HAL_RCC_OscConfig+0x160>
 800630a:	4b4b      	ldr	r3, [pc, #300]	@ (8006438 <HAL_RCC_OscConfig+0x268>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a4a      	ldr	r2, [pc, #296]	@ (8006438 <HAL_RCC_OscConfig+0x268>)
 8006310:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006314:	6013      	str	r3, [r2, #0]
 8006316:	4b48      	ldr	r3, [pc, #288]	@ (8006438 <HAL_RCC_OscConfig+0x268>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a47      	ldr	r2, [pc, #284]	@ (8006438 <HAL_RCC_OscConfig+0x268>)
 800631c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006320:	6013      	str	r3, [r2, #0]
 8006322:	4b45      	ldr	r3, [pc, #276]	@ (8006438 <HAL_RCC_OscConfig+0x268>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a44      	ldr	r2, [pc, #272]	@ (8006438 <HAL_RCC_OscConfig+0x268>)
 8006328:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800632c:	6013      	str	r3, [r2, #0]
 800632e:	e041      	b.n	80063b4 <HAL_RCC_OscConfig+0x1e4>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006338:	d112      	bne.n	8006360 <HAL_RCC_OscConfig+0x190>
 800633a:	4b3f      	ldr	r3, [pc, #252]	@ (8006438 <HAL_RCC_OscConfig+0x268>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a3e      	ldr	r2, [pc, #248]	@ (8006438 <HAL_RCC_OscConfig+0x268>)
 8006340:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006344:	6013      	str	r3, [r2, #0]
 8006346:	4b3c      	ldr	r3, [pc, #240]	@ (8006438 <HAL_RCC_OscConfig+0x268>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a3b      	ldr	r2, [pc, #236]	@ (8006438 <HAL_RCC_OscConfig+0x268>)
 800634c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006350:	6013      	str	r3, [r2, #0]
 8006352:	4b39      	ldr	r3, [pc, #228]	@ (8006438 <HAL_RCC_OscConfig+0x268>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a38      	ldr	r2, [pc, #224]	@ (8006438 <HAL_RCC_OscConfig+0x268>)
 8006358:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800635c:	6013      	str	r3, [r2, #0]
 800635e:	e029      	b.n	80063b4 <HAL_RCC_OscConfig+0x1e4>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8006368:	d112      	bne.n	8006390 <HAL_RCC_OscConfig+0x1c0>
 800636a:	4b33      	ldr	r3, [pc, #204]	@ (8006438 <HAL_RCC_OscConfig+0x268>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a32      	ldr	r2, [pc, #200]	@ (8006438 <HAL_RCC_OscConfig+0x268>)
 8006370:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006374:	6013      	str	r3, [r2, #0]
 8006376:	4b30      	ldr	r3, [pc, #192]	@ (8006438 <HAL_RCC_OscConfig+0x268>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a2f      	ldr	r2, [pc, #188]	@ (8006438 <HAL_RCC_OscConfig+0x268>)
 800637c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006380:	6013      	str	r3, [r2, #0]
 8006382:	4b2d      	ldr	r3, [pc, #180]	@ (8006438 <HAL_RCC_OscConfig+0x268>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a2c      	ldr	r2, [pc, #176]	@ (8006438 <HAL_RCC_OscConfig+0x268>)
 8006388:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800638c:	6013      	str	r3, [r2, #0]
 800638e:	e011      	b.n	80063b4 <HAL_RCC_OscConfig+0x1e4>
 8006390:	4b29      	ldr	r3, [pc, #164]	@ (8006438 <HAL_RCC_OscConfig+0x268>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a28      	ldr	r2, [pc, #160]	@ (8006438 <HAL_RCC_OscConfig+0x268>)
 8006396:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800639a:	6013      	str	r3, [r2, #0]
 800639c:	4b26      	ldr	r3, [pc, #152]	@ (8006438 <HAL_RCC_OscConfig+0x268>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a25      	ldr	r2, [pc, #148]	@ (8006438 <HAL_RCC_OscConfig+0x268>)
 80063a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80063a6:	6013      	str	r3, [r2, #0]
 80063a8:	4b23      	ldr	r3, [pc, #140]	@ (8006438 <HAL_RCC_OscConfig+0x268>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a22      	ldr	r2, [pc, #136]	@ (8006438 <HAL_RCC_OscConfig+0x268>)
 80063ae:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80063b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d013      	beq.n	80063e4 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063bc:	f7fc fd3c 	bl	8002e38 <HAL_GetTick>
 80063c0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80063c2:	e008      	b.n	80063d6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80063c4:	f7fc fd38 	bl	8002e38 <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	2b64      	cmp	r3, #100	@ 0x64
 80063d0:	d901      	bls.n	80063d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	e32e      	b.n	8006a34 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80063d6:	4b18      	ldr	r3, [pc, #96]	@ (8006438 <HAL_RCC_OscConfig+0x268>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d0f0      	beq.n	80063c4 <HAL_RCC_OscConfig+0x1f4>
 80063e2:	e012      	b.n	800640a <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063e4:	f7fc fd28 	bl	8002e38 <HAL_GetTick>
 80063e8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80063ea:	e008      	b.n	80063fe <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80063ec:	f7fc fd24 	bl	8002e38 <HAL_GetTick>
 80063f0:	4602      	mov	r2, r0
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	2b64      	cmp	r3, #100	@ 0x64
 80063f8:	d901      	bls.n	80063fe <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	e31a      	b.n	8006a34 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80063fe:	4b0e      	ldr	r3, [pc, #56]	@ (8006438 <HAL_RCC_OscConfig+0x268>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1f0      	bne.n	80063ec <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0302 	and.w	r3, r3, #2
 8006412:	2b00      	cmp	r3, #0
 8006414:	f000 809a 	beq.w	800654c <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d005      	beq.n	800642a <HAL_RCC_OscConfig+0x25a>
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	2b18      	cmp	r3, #24
 8006422:	d149      	bne.n	80064b8 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d146      	bne.n	80064b8 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d104      	bne.n	800643c <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e2fe      	b.n	8006a34 <HAL_RCC_OscConfig+0x864>
 8006436:	bf00      	nop
 8006438:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d11c      	bne.n	800647c <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8006442:	4b9a      	ldr	r3, [pc, #616]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0218 	and.w	r2, r3, #24
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	429a      	cmp	r2, r3
 8006450:	d014      	beq.n	800647c <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8006452:	4b96      	ldr	r3, [pc, #600]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f023 0218 	bic.w	r2, r3, #24
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	4993      	ldr	r1, [pc, #588]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 8006460:	4313      	orrs	r3, r2
 8006462:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8006464:	f000 fdd0 	bl	8007008 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006468:	4b91      	ldr	r3, [pc, #580]	@ (80066b0 <HAL_RCC_OscConfig+0x4e0>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4618      	mov	r0, r3
 800646e:	f7fc fc59 	bl	8002d24 <HAL_InitTick>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d001      	beq.n	800647c <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e2db      	b.n	8006a34 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800647c:	f7fc fcdc 	bl	8002e38 <HAL_GetTick>
 8006480:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006482:	e008      	b.n	8006496 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8006484:	f7fc fcd8 	bl	8002e38 <HAL_GetTick>
 8006488:	4602      	mov	r2, r0
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	2b02      	cmp	r3, #2
 8006490:	d901      	bls.n	8006496 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e2ce      	b.n	8006a34 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006496:	4b85      	ldr	r3, [pc, #532]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0302 	and.w	r3, r3, #2
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d0f0      	beq.n	8006484 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80064a2:	4b82      	ldr	r3, [pc, #520]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	041b      	lsls	r3, r3, #16
 80064b0:	497e      	ldr	r1, [pc, #504]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 80064b2:	4313      	orrs	r3, r2
 80064b4:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80064b6:	e049      	b.n	800654c <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d02c      	beq.n	800651a <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80064c0:	4b7a      	ldr	r3, [pc, #488]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f023 0218 	bic.w	r2, r3, #24
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	4977      	ldr	r1, [pc, #476]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 80064ce:	4313      	orrs	r3, r2
 80064d0:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80064d2:	4b76      	ldr	r3, [pc, #472]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a75      	ldr	r2, [pc, #468]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 80064d8:	f043 0301 	orr.w	r3, r3, #1
 80064dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064de:	f7fc fcab 	bl	8002e38 <HAL_GetTick>
 80064e2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80064e4:	e008      	b.n	80064f8 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80064e6:	f7fc fca7 	bl	8002e38 <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d901      	bls.n	80064f8 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e29d      	b.n	8006a34 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80064f8:	4b6c      	ldr	r3, [pc, #432]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0302 	and.w	r3, r3, #2
 8006500:	2b00      	cmp	r3, #0
 8006502:	d0f0      	beq.n	80064e6 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8006504:	4b69      	ldr	r3, [pc, #420]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	695b      	ldr	r3, [r3, #20]
 8006510:	041b      	lsls	r3, r3, #16
 8006512:	4966      	ldr	r1, [pc, #408]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 8006514:	4313      	orrs	r3, r2
 8006516:	610b      	str	r3, [r1, #16]
 8006518:	e018      	b.n	800654c <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800651a:	4b64      	ldr	r3, [pc, #400]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a63      	ldr	r2, [pc, #396]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 8006520:	f023 0301 	bic.w	r3, r3, #1
 8006524:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006526:	f7fc fc87 	bl	8002e38 <HAL_GetTick>
 800652a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800652c:	e008      	b.n	8006540 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800652e:	f7fc fc83 	bl	8002e38 <HAL_GetTick>
 8006532:	4602      	mov	r2, r0
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	1ad3      	subs	r3, r2, r3
 8006538:	2b02      	cmp	r3, #2
 800653a:	d901      	bls.n	8006540 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	e279      	b.n	8006a34 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006540:	4b5a      	ldr	r3, [pc, #360]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 0302 	and.w	r3, r3, #2
 8006548:	2b00      	cmp	r3, #0
 800654a:	d1f0      	bne.n	800652e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0308 	and.w	r3, r3, #8
 8006554:	2b00      	cmp	r3, #0
 8006556:	d03c      	beq.n	80065d2 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	699b      	ldr	r3, [r3, #24]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d01c      	beq.n	800659a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006560:	4b52      	ldr	r3, [pc, #328]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 8006562:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006566:	4a51      	ldr	r2, [pc, #324]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 8006568:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800656c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006570:	f7fc fc62 	bl	8002e38 <HAL_GetTick>
 8006574:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006576:	e008      	b.n	800658a <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8006578:	f7fc fc5e 	bl	8002e38 <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	2b02      	cmp	r3, #2
 8006584:	d901      	bls.n	800658a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	e254      	b.n	8006a34 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800658a:	4b48      	ldr	r3, [pc, #288]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 800658c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006590:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006594:	2b00      	cmp	r3, #0
 8006596:	d0ef      	beq.n	8006578 <HAL_RCC_OscConfig+0x3a8>
 8006598:	e01b      	b.n	80065d2 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800659a:	4b44      	ldr	r3, [pc, #272]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 800659c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065a0:	4a42      	ldr	r2, [pc, #264]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 80065a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80065a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065aa:	f7fc fc45 	bl	8002e38 <HAL_GetTick>
 80065ae:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80065b0:	e008      	b.n	80065c4 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80065b2:	f7fc fc41 	bl	8002e38 <HAL_GetTick>
 80065b6:	4602      	mov	r2, r0
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d901      	bls.n	80065c4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e237      	b.n	8006a34 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80065c4:	4b39      	ldr	r3, [pc, #228]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 80065c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1ef      	bne.n	80065b2 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0304 	and.w	r3, r3, #4
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f000 80d2 	beq.w	8006784 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80065e0:	4b34      	ldr	r3, [pc, #208]	@ (80066b4 <HAL_RCC_OscConfig+0x4e4>)
 80065e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065e4:	f003 0301 	and.w	r3, r3, #1
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d118      	bne.n	800661e <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80065ec:	4b31      	ldr	r3, [pc, #196]	@ (80066b4 <HAL_RCC_OscConfig+0x4e4>)
 80065ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f0:	4a30      	ldr	r2, [pc, #192]	@ (80066b4 <HAL_RCC_OscConfig+0x4e4>)
 80065f2:	f043 0301 	orr.w	r3, r3, #1
 80065f6:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065f8:	f7fc fc1e 	bl	8002e38 <HAL_GetTick>
 80065fc:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80065fe:	e008      	b.n	8006612 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006600:	f7fc fc1a 	bl	8002e38 <HAL_GetTick>
 8006604:	4602      	mov	r2, r0
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	2b02      	cmp	r3, #2
 800660c:	d901      	bls.n	8006612 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e210      	b.n	8006a34 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006612:	4b28      	ldr	r3, [pc, #160]	@ (80066b4 <HAL_RCC_OscConfig+0x4e4>)
 8006614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006616:	f003 0301 	and.w	r3, r3, #1
 800661a:	2b00      	cmp	r3, #0
 800661c:	d0f0      	beq.n	8006600 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	2b01      	cmp	r3, #1
 8006624:	d108      	bne.n	8006638 <HAL_RCC_OscConfig+0x468>
 8006626:	4b21      	ldr	r3, [pc, #132]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 8006628:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800662c:	4a1f      	ldr	r2, [pc, #124]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 800662e:	f043 0301 	orr.w	r3, r3, #1
 8006632:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006636:	e074      	b.n	8006722 <HAL_RCC_OscConfig+0x552>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d118      	bne.n	8006672 <HAL_RCC_OscConfig+0x4a2>
 8006640:	4b1a      	ldr	r3, [pc, #104]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 8006642:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006646:	4a19      	ldr	r2, [pc, #100]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 8006648:	f023 0301 	bic.w	r3, r3, #1
 800664c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006650:	4b16      	ldr	r3, [pc, #88]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 8006652:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006656:	4a15      	ldr	r2, [pc, #84]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 8006658:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800665c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006660:	4b12      	ldr	r3, [pc, #72]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 8006662:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006666:	4a11      	ldr	r2, [pc, #68]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 8006668:	f023 0304 	bic.w	r3, r3, #4
 800666c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006670:	e057      	b.n	8006722 <HAL_RCC_OscConfig+0x552>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	2b05      	cmp	r3, #5
 8006678:	d11e      	bne.n	80066b8 <HAL_RCC_OscConfig+0x4e8>
 800667a:	4b0c      	ldr	r3, [pc, #48]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 800667c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006680:	4a0a      	ldr	r2, [pc, #40]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 8006682:	f043 0304 	orr.w	r3, r3, #4
 8006686:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800668a:	4b08      	ldr	r3, [pc, #32]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 800668c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006690:	4a06      	ldr	r2, [pc, #24]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 8006692:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006696:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800669a:	4b04      	ldr	r3, [pc, #16]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 800669c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066a0:	4a02      	ldr	r2, [pc, #8]	@ (80066ac <HAL_RCC_OscConfig+0x4dc>)
 80066a2:	f043 0301 	orr.w	r3, r3, #1
 80066a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80066aa:	e03a      	b.n	8006722 <HAL_RCC_OscConfig+0x552>
 80066ac:	44020c00 	.word	0x44020c00
 80066b0:	20000024 	.word	0x20000024
 80066b4:	44020800 	.word	0x44020800
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	2b85      	cmp	r3, #133	@ 0x85
 80066be:	d118      	bne.n	80066f2 <HAL_RCC_OscConfig+0x522>
 80066c0:	4ba2      	ldr	r3, [pc, #648]	@ (800694c <HAL_RCC_OscConfig+0x77c>)
 80066c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066c6:	4aa1      	ldr	r2, [pc, #644]	@ (800694c <HAL_RCC_OscConfig+0x77c>)
 80066c8:	f043 0304 	orr.w	r3, r3, #4
 80066cc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80066d0:	4b9e      	ldr	r3, [pc, #632]	@ (800694c <HAL_RCC_OscConfig+0x77c>)
 80066d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066d6:	4a9d      	ldr	r2, [pc, #628]	@ (800694c <HAL_RCC_OscConfig+0x77c>)
 80066d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066dc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80066e0:	4b9a      	ldr	r3, [pc, #616]	@ (800694c <HAL_RCC_OscConfig+0x77c>)
 80066e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066e6:	4a99      	ldr	r2, [pc, #612]	@ (800694c <HAL_RCC_OscConfig+0x77c>)
 80066e8:	f043 0301 	orr.w	r3, r3, #1
 80066ec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80066f0:	e017      	b.n	8006722 <HAL_RCC_OscConfig+0x552>
 80066f2:	4b96      	ldr	r3, [pc, #600]	@ (800694c <HAL_RCC_OscConfig+0x77c>)
 80066f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066f8:	4a94      	ldr	r2, [pc, #592]	@ (800694c <HAL_RCC_OscConfig+0x77c>)
 80066fa:	f023 0301 	bic.w	r3, r3, #1
 80066fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006702:	4b92      	ldr	r3, [pc, #584]	@ (800694c <HAL_RCC_OscConfig+0x77c>)
 8006704:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006708:	4a90      	ldr	r2, [pc, #576]	@ (800694c <HAL_RCC_OscConfig+0x77c>)
 800670a:	f023 0304 	bic.w	r3, r3, #4
 800670e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006712:	4b8e      	ldr	r3, [pc, #568]	@ (800694c <HAL_RCC_OscConfig+0x77c>)
 8006714:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006718:	4a8c      	ldr	r2, [pc, #560]	@ (800694c <HAL_RCC_OscConfig+0x77c>)
 800671a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800671e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d016      	beq.n	8006758 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800672a:	f7fc fb85 	bl	8002e38 <HAL_GetTick>
 800672e:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006730:	e00a      	b.n	8006748 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006732:	f7fc fb81 	bl	8002e38 <HAL_GetTick>
 8006736:	4602      	mov	r2, r0
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006740:	4293      	cmp	r3, r2
 8006742:	d901      	bls.n	8006748 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e175      	b.n	8006a34 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006748:	4b80      	ldr	r3, [pc, #512]	@ (800694c <HAL_RCC_OscConfig+0x77c>)
 800674a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800674e:	f003 0302 	and.w	r3, r3, #2
 8006752:	2b00      	cmp	r3, #0
 8006754:	d0ed      	beq.n	8006732 <HAL_RCC_OscConfig+0x562>
 8006756:	e015      	b.n	8006784 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006758:	f7fc fb6e 	bl	8002e38 <HAL_GetTick>
 800675c:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800675e:	e00a      	b.n	8006776 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006760:	f7fc fb6a 	bl	8002e38 <HAL_GetTick>
 8006764:	4602      	mov	r2, r0
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800676e:	4293      	cmp	r3, r2
 8006770:	d901      	bls.n	8006776 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8006772:	2303      	movs	r3, #3
 8006774:	e15e      	b.n	8006a34 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006776:	4b75      	ldr	r3, [pc, #468]	@ (800694c <HAL_RCC_OscConfig+0x77c>)
 8006778:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800677c:	f003 0302 	and.w	r3, r3, #2
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1ed      	bne.n	8006760 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 0320 	and.w	r3, r3, #32
 800678c:	2b00      	cmp	r3, #0
 800678e:	d036      	beq.n	80067fe <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006794:	2b00      	cmp	r3, #0
 8006796:	d019      	beq.n	80067cc <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006798:	4b6c      	ldr	r3, [pc, #432]	@ (800694c <HAL_RCC_OscConfig+0x77c>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a6b      	ldr	r2, [pc, #428]	@ (800694c <HAL_RCC_OscConfig+0x77c>)
 800679e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80067a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067a4:	f7fc fb48 	bl	8002e38 <HAL_GetTick>
 80067a8:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80067aa:	e008      	b.n	80067be <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80067ac:	f7fc fb44 	bl	8002e38 <HAL_GetTick>
 80067b0:	4602      	mov	r2, r0
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d901      	bls.n	80067be <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	e13a      	b.n	8006a34 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80067be:	4b63      	ldr	r3, [pc, #396]	@ (800694c <HAL_RCC_OscConfig+0x77c>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d0f0      	beq.n	80067ac <HAL_RCC_OscConfig+0x5dc>
 80067ca:	e018      	b.n	80067fe <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80067cc:	4b5f      	ldr	r3, [pc, #380]	@ (800694c <HAL_RCC_OscConfig+0x77c>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a5e      	ldr	r2, [pc, #376]	@ (800694c <HAL_RCC_OscConfig+0x77c>)
 80067d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067d8:	f7fc fb2e 	bl	8002e38 <HAL_GetTick>
 80067dc:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80067de:	e008      	b.n	80067f2 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80067e0:	f7fc fb2a 	bl	8002e38 <HAL_GetTick>
 80067e4:	4602      	mov	r2, r0
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d901      	bls.n	80067f2 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	e120      	b.n	8006a34 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80067f2:	4b56      	ldr	r3, [pc, #344]	@ (800694c <HAL_RCC_OscConfig+0x77c>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1f0      	bne.n	80067e0 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006802:	2b00      	cmp	r3, #0
 8006804:	f000 8115 	beq.w	8006a32 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	2b18      	cmp	r3, #24
 800680c:	f000 80af 	beq.w	800696e <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006814:	2b02      	cmp	r3, #2
 8006816:	f040 8086 	bne.w	8006926 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800681a:	4b4c      	ldr	r3, [pc, #304]	@ (800694c <HAL_RCC_OscConfig+0x77c>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a4b      	ldr	r2, [pc, #300]	@ (800694c <HAL_RCC_OscConfig+0x77c>)
 8006820:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006824:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006826:	f7fc fb07 	bl	8002e38 <HAL_GetTick>
 800682a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800682c:	e008      	b.n	8006840 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800682e:	f7fc fb03 	bl	8002e38 <HAL_GetTick>
 8006832:	4602      	mov	r2, r0
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	1ad3      	subs	r3, r2, r3
 8006838:	2b02      	cmp	r3, #2
 800683a:	d901      	bls.n	8006840 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 800683c:	2303      	movs	r3, #3
 800683e:	e0f9      	b.n	8006a34 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006840:	4b42      	ldr	r3, [pc, #264]	@ (800694c <HAL_RCC_OscConfig+0x77c>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1f0      	bne.n	800682e <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 800684c:	4b3f      	ldr	r3, [pc, #252]	@ (800694c <HAL_RCC_OscConfig+0x77c>)
 800684e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006850:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006854:	f023 0303 	bic.w	r3, r3, #3
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006860:	0212      	lsls	r2, r2, #8
 8006862:	430a      	orrs	r2, r1
 8006864:	4939      	ldr	r1, [pc, #228]	@ (800694c <HAL_RCC_OscConfig+0x77c>)
 8006866:	4313      	orrs	r3, r2
 8006868:	628b      	str	r3, [r1, #40]	@ 0x28
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800686e:	3b01      	subs	r3, #1
 8006870:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006878:	3b01      	subs	r3, #1
 800687a:	025b      	lsls	r3, r3, #9
 800687c:	b29b      	uxth	r3, r3
 800687e:	431a      	orrs	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006884:	3b01      	subs	r3, #1
 8006886:	041b      	lsls	r3, r3, #16
 8006888:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800688c:	431a      	orrs	r2, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006892:	3b01      	subs	r3, #1
 8006894:	061b      	lsls	r3, r3, #24
 8006896:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800689a:	492c      	ldr	r1, [pc, #176]	@ (800694c <HAL_RCC_OscConfig+0x77c>)
 800689c:	4313      	orrs	r3, r2
 800689e:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80068a0:	4b2a      	ldr	r3, [pc, #168]	@ (800694c <HAL_RCC_OscConfig+0x77c>)
 80068a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068a4:	4a29      	ldr	r2, [pc, #164]	@ (800694c <HAL_RCC_OscConfig+0x77c>)
 80068a6:	f023 0310 	bic.w	r3, r3, #16
 80068aa:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068b0:	4a26      	ldr	r2, [pc, #152]	@ (800694c <HAL_RCC_OscConfig+0x77c>)
 80068b2:	00db      	lsls	r3, r3, #3
 80068b4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80068b6:	4b25      	ldr	r3, [pc, #148]	@ (800694c <HAL_RCC_OscConfig+0x77c>)
 80068b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ba:	4a24      	ldr	r2, [pc, #144]	@ (800694c <HAL_RCC_OscConfig+0x77c>)
 80068bc:	f043 0310 	orr.w	r3, r3, #16
 80068c0:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80068c2:	4b22      	ldr	r3, [pc, #136]	@ (800694c <HAL_RCC_OscConfig+0x77c>)
 80068c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068c6:	f023 020c 	bic.w	r2, r3, #12
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ce:	491f      	ldr	r1, [pc, #124]	@ (800694c <HAL_RCC_OscConfig+0x77c>)
 80068d0:	4313      	orrs	r3, r2
 80068d2:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80068d4:	4b1d      	ldr	r3, [pc, #116]	@ (800694c <HAL_RCC_OscConfig+0x77c>)
 80068d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068d8:	f023 0220 	bic.w	r2, r3, #32
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068e0:	491a      	ldr	r1, [pc, #104]	@ (800694c <HAL_RCC_OscConfig+0x77c>)
 80068e2:	4313      	orrs	r3, r2
 80068e4:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80068e6:	4b19      	ldr	r3, [pc, #100]	@ (800694c <HAL_RCC_OscConfig+0x77c>)
 80068e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ea:	4a18      	ldr	r2, [pc, #96]	@ (800694c <HAL_RCC_OscConfig+0x77c>)
 80068ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068f0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80068f2:	4b16      	ldr	r3, [pc, #88]	@ (800694c <HAL_RCC_OscConfig+0x77c>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a15      	ldr	r2, [pc, #84]	@ (800694c <HAL_RCC_OscConfig+0x77c>)
 80068f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80068fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068fe:	f7fc fa9b 	bl	8002e38 <HAL_GetTick>
 8006902:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006904:	e008      	b.n	8006918 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8006906:	f7fc fa97 	bl	8002e38 <HAL_GetTick>
 800690a:	4602      	mov	r2, r0
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	1ad3      	subs	r3, r2, r3
 8006910:	2b02      	cmp	r3, #2
 8006912:	d901      	bls.n	8006918 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8006914:	2303      	movs	r3, #3
 8006916:	e08d      	b.n	8006a34 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006918:	4b0c      	ldr	r3, [pc, #48]	@ (800694c <HAL_RCC_OscConfig+0x77c>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006920:	2b00      	cmp	r3, #0
 8006922:	d0f0      	beq.n	8006906 <HAL_RCC_OscConfig+0x736>
 8006924:	e085      	b.n	8006a32 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8006926:	4b09      	ldr	r3, [pc, #36]	@ (800694c <HAL_RCC_OscConfig+0x77c>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a08      	ldr	r2, [pc, #32]	@ (800694c <HAL_RCC_OscConfig+0x77c>)
 800692c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006930:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006932:	f7fc fa81 	bl	8002e38 <HAL_GetTick>
 8006936:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006938:	e00a      	b.n	8006950 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800693a:	f7fc fa7d 	bl	8002e38 <HAL_GetTick>
 800693e:	4602      	mov	r2, r0
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	2b02      	cmp	r3, #2
 8006946:	d903      	bls.n	8006950 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8006948:	2303      	movs	r3, #3
 800694a:	e073      	b.n	8006a34 <HAL_RCC_OscConfig+0x864>
 800694c:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006950:	4b3a      	ldr	r3, [pc, #232]	@ (8006a3c <HAL_RCC_OscConfig+0x86c>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1ee      	bne.n	800693a <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800695c:	4b37      	ldr	r3, [pc, #220]	@ (8006a3c <HAL_RCC_OscConfig+0x86c>)
 800695e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006960:	4a36      	ldr	r2, [pc, #216]	@ (8006a3c <HAL_RCC_OscConfig+0x86c>)
 8006962:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006966:	f023 0303 	bic.w	r3, r3, #3
 800696a:	6293      	str	r3, [r2, #40]	@ 0x28
 800696c:	e061      	b.n	8006a32 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800696e:	4b33      	ldr	r3, [pc, #204]	@ (8006a3c <HAL_RCC_OscConfig+0x86c>)
 8006970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006972:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006974:	4b31      	ldr	r3, [pc, #196]	@ (8006a3c <HAL_RCC_OscConfig+0x86c>)
 8006976:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006978:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800697e:	2b01      	cmp	r3, #1
 8006980:	d031      	beq.n	80069e6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	f003 0203 	and.w	r2, r3, #3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800698c:	429a      	cmp	r2, r3
 800698e:	d12a      	bne.n	80069e6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	0a1b      	lsrs	r3, r3, #8
 8006994:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800699c:	429a      	cmp	r2, r3
 800699e:	d122      	bne.n	80069e6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069aa:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d11a      	bne.n	80069e6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	0a5b      	lsrs	r3, r3, #9
 80069b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069bc:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80069be:	429a      	cmp	r2, r3
 80069c0:	d111      	bne.n	80069e6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	0c1b      	lsrs	r3, r3, #16
 80069c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069ce:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d108      	bne.n	80069e6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	0e1b      	lsrs	r3, r3, #24
 80069d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069e0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d001      	beq.n	80069ea <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e024      	b.n	8006a34 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80069ea:	4b14      	ldr	r3, [pc, #80]	@ (8006a3c <HAL_RCC_OscConfig+0x86c>)
 80069ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ee:	08db      	lsrs	r3, r3, #3
 80069f0:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d01a      	beq.n	8006a32 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80069fc:	4b0f      	ldr	r3, [pc, #60]	@ (8006a3c <HAL_RCC_OscConfig+0x86c>)
 80069fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a00:	4a0e      	ldr	r2, [pc, #56]	@ (8006a3c <HAL_RCC_OscConfig+0x86c>)
 8006a02:	f023 0310 	bic.w	r3, r3, #16
 8006a06:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a08:	f7fc fa16 	bl	8002e38 <HAL_GetTick>
 8006a0c:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8006a0e:	bf00      	nop
 8006a10:	f7fc fa12 	bl	8002e38 <HAL_GetTick>
 8006a14:	4602      	mov	r2, r0
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d0f9      	beq.n	8006a10 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a20:	4a06      	ldr	r2, [pc, #24]	@ (8006a3c <HAL_RCC_OscConfig+0x86c>)
 8006a22:	00db      	lsls	r3, r3, #3
 8006a24:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8006a26:	4b05      	ldr	r3, [pc, #20]	@ (8006a3c <HAL_RCC_OscConfig+0x86c>)
 8006a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a2a:	4a04      	ldr	r2, [pc, #16]	@ (8006a3c <HAL_RCC_OscConfig+0x86c>)
 8006a2c:	f043 0310 	orr.w	r3, r3, #16
 8006a30:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3720      	adds	r7, #32
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	44020c00 	.word	0x44020c00

08006a40 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d101      	bne.n	8006a54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	e19e      	b.n	8006d92 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a54:	4b83      	ldr	r3, [pc, #524]	@ (8006c64 <HAL_RCC_ClockConfig+0x224>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 030f 	and.w	r3, r3, #15
 8006a5c:	683a      	ldr	r2, [r7, #0]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d910      	bls.n	8006a84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a62:	4b80      	ldr	r3, [pc, #512]	@ (8006c64 <HAL_RCC_ClockConfig+0x224>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f023 020f 	bic.w	r2, r3, #15
 8006a6a:	497e      	ldr	r1, [pc, #504]	@ (8006c64 <HAL_RCC_ClockConfig+0x224>)
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a72:	4b7c      	ldr	r3, [pc, #496]	@ (8006c64 <HAL_RCC_ClockConfig+0x224>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 030f 	and.w	r3, r3, #15
 8006a7a:	683a      	ldr	r2, [r7, #0]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d001      	beq.n	8006a84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e186      	b.n	8006d92 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 0310 	and.w	r3, r3, #16
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d012      	beq.n	8006ab6 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	695a      	ldr	r2, [r3, #20]
 8006a94:	4b74      	ldr	r3, [pc, #464]	@ (8006c68 <HAL_RCC_ClockConfig+0x228>)
 8006a96:	6a1b      	ldr	r3, [r3, #32]
 8006a98:	0a1b      	lsrs	r3, r3, #8
 8006a9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d909      	bls.n	8006ab6 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8006aa2:	4b71      	ldr	r3, [pc, #452]	@ (8006c68 <HAL_RCC_ClockConfig+0x228>)
 8006aa4:	6a1b      	ldr	r3, [r3, #32]
 8006aa6:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	695b      	ldr	r3, [r3, #20]
 8006aae:	021b      	lsls	r3, r3, #8
 8006ab0:	496d      	ldr	r1, [pc, #436]	@ (8006c68 <HAL_RCC_ClockConfig+0x228>)
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 0308 	and.w	r3, r3, #8
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d012      	beq.n	8006ae8 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	691a      	ldr	r2, [r3, #16]
 8006ac6:	4b68      	ldr	r3, [pc, #416]	@ (8006c68 <HAL_RCC_ClockConfig+0x228>)
 8006ac8:	6a1b      	ldr	r3, [r3, #32]
 8006aca:	091b      	lsrs	r3, r3, #4
 8006acc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d909      	bls.n	8006ae8 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8006ad4:	4b64      	ldr	r3, [pc, #400]	@ (8006c68 <HAL_RCC_ClockConfig+0x228>)
 8006ad6:	6a1b      	ldr	r3, [r3, #32]
 8006ad8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	011b      	lsls	r3, r3, #4
 8006ae2:	4961      	ldr	r1, [pc, #388]	@ (8006c68 <HAL_RCC_ClockConfig+0x228>)
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 0304 	and.w	r3, r3, #4
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d010      	beq.n	8006b16 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	68da      	ldr	r2, [r3, #12]
 8006af8:	4b5b      	ldr	r3, [pc, #364]	@ (8006c68 <HAL_RCC_ClockConfig+0x228>)
 8006afa:	6a1b      	ldr	r3, [r3, #32]
 8006afc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d908      	bls.n	8006b16 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8006b04:	4b58      	ldr	r3, [pc, #352]	@ (8006c68 <HAL_RCC_ClockConfig+0x228>)
 8006b06:	6a1b      	ldr	r3, [r3, #32]
 8006b08:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	4955      	ldr	r1, [pc, #340]	@ (8006c68 <HAL_RCC_ClockConfig+0x228>)
 8006b12:	4313      	orrs	r3, r2
 8006b14:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 0302 	and.w	r3, r3, #2
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d010      	beq.n	8006b44 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	689a      	ldr	r2, [r3, #8]
 8006b26:	4b50      	ldr	r3, [pc, #320]	@ (8006c68 <HAL_RCC_ClockConfig+0x228>)
 8006b28:	6a1b      	ldr	r3, [r3, #32]
 8006b2a:	f003 030f 	and.w	r3, r3, #15
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d908      	bls.n	8006b44 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8006b32:	4b4d      	ldr	r3, [pc, #308]	@ (8006c68 <HAL_RCC_ClockConfig+0x228>)
 8006b34:	6a1b      	ldr	r3, [r3, #32]
 8006b36:	f023 020f 	bic.w	r2, r3, #15
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	494a      	ldr	r1, [pc, #296]	@ (8006c68 <HAL_RCC_ClockConfig+0x228>)
 8006b40:	4313      	orrs	r3, r2
 8006b42:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f003 0301 	and.w	r3, r3, #1
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	f000 8093 	beq.w	8006c78 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	2b03      	cmp	r3, #3
 8006b58:	d107      	bne.n	8006b6a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006b5a:	4b43      	ldr	r3, [pc, #268]	@ (8006c68 <HAL_RCC_ClockConfig+0x228>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d121      	bne.n	8006baa <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	e113      	b.n	8006d92 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d107      	bne.n	8006b82 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b72:	4b3d      	ldr	r3, [pc, #244]	@ (8006c68 <HAL_RCC_ClockConfig+0x228>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d115      	bne.n	8006baa <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e107      	b.n	8006d92 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d107      	bne.n	8006b9a <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8006b8a:	4b37      	ldr	r3, [pc, #220]	@ (8006c68 <HAL_RCC_ClockConfig+0x228>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d109      	bne.n	8006baa <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e0fb      	b.n	8006d92 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b9a:	4b33      	ldr	r3, [pc, #204]	@ (8006c68 <HAL_RCC_ClockConfig+0x228>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 0302 	and.w	r3, r3, #2
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d101      	bne.n	8006baa <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e0f3      	b.n	8006d92 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8006baa:	4b2f      	ldr	r3, [pc, #188]	@ (8006c68 <HAL_RCC_ClockConfig+0x228>)
 8006bac:	69db      	ldr	r3, [r3, #28]
 8006bae:	f023 0203 	bic.w	r2, r3, #3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	492c      	ldr	r1, [pc, #176]	@ (8006c68 <HAL_RCC_ClockConfig+0x228>)
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bbc:	f7fc f93c 	bl	8002e38 <HAL_GetTick>
 8006bc0:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	2b03      	cmp	r3, #3
 8006bc8:	d112      	bne.n	8006bf0 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006bca:	e00a      	b.n	8006be2 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006bcc:	f7fc f934 	bl	8002e38 <HAL_GetTick>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d901      	bls.n	8006be2 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e0d7      	b.n	8006d92 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006be2:	4b21      	ldr	r3, [pc, #132]	@ (8006c68 <HAL_RCC_ClockConfig+0x228>)
 8006be4:	69db      	ldr	r3, [r3, #28]
 8006be6:	f003 0318 	and.w	r3, r3, #24
 8006bea:	2b18      	cmp	r3, #24
 8006bec:	d1ee      	bne.n	8006bcc <HAL_RCC_ClockConfig+0x18c>
 8006bee:	e043      	b.n	8006c78 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	2b02      	cmp	r3, #2
 8006bf6:	d112      	bne.n	8006c1e <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006bf8:	e00a      	b.n	8006c10 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006bfa:	f7fc f91d 	bl	8002e38 <HAL_GetTick>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	1ad3      	subs	r3, r2, r3
 8006c04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d901      	bls.n	8006c10 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e0c0      	b.n	8006d92 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006c10:	4b15      	ldr	r3, [pc, #84]	@ (8006c68 <HAL_RCC_ClockConfig+0x228>)
 8006c12:	69db      	ldr	r3, [r3, #28]
 8006c14:	f003 0318 	and.w	r3, r3, #24
 8006c18:	2b10      	cmp	r3, #16
 8006c1a:	d1ee      	bne.n	8006bfa <HAL_RCC_ClockConfig+0x1ba>
 8006c1c:	e02c      	b.n	8006c78 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d122      	bne.n	8006c6c <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8006c26:	e00a      	b.n	8006c3e <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006c28:	f7fc f906 	bl	8002e38 <HAL_GetTick>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d901      	bls.n	8006c3e <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e0a9      	b.n	8006d92 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8006c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8006c68 <HAL_RCC_ClockConfig+0x228>)
 8006c40:	69db      	ldr	r3, [r3, #28]
 8006c42:	f003 0318 	and.w	r3, r3, #24
 8006c46:	2b08      	cmp	r3, #8
 8006c48:	d1ee      	bne.n	8006c28 <HAL_RCC_ClockConfig+0x1e8>
 8006c4a:	e015      	b.n	8006c78 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006c4c:	f7fc f8f4 	bl	8002e38 <HAL_GetTick>
 8006c50:	4602      	mov	r2, r0
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	1ad3      	subs	r3, r2, r3
 8006c56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d906      	bls.n	8006c6c <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e097      	b.n	8006d92 <HAL_RCC_ClockConfig+0x352>
 8006c62:	bf00      	nop
 8006c64:	40022000 	.word	0x40022000
 8006c68:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006c6c:	4b4b      	ldr	r3, [pc, #300]	@ (8006d9c <HAL_RCC_ClockConfig+0x35c>)
 8006c6e:	69db      	ldr	r3, [r3, #28]
 8006c70:	f003 0318 	and.w	r3, r3, #24
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d1e9      	bne.n	8006c4c <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 0302 	and.w	r3, r3, #2
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d010      	beq.n	8006ca6 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	689a      	ldr	r2, [r3, #8]
 8006c88:	4b44      	ldr	r3, [pc, #272]	@ (8006d9c <HAL_RCC_ClockConfig+0x35c>)
 8006c8a:	6a1b      	ldr	r3, [r3, #32]
 8006c8c:	f003 030f 	and.w	r3, r3, #15
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d208      	bcs.n	8006ca6 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8006c94:	4b41      	ldr	r3, [pc, #260]	@ (8006d9c <HAL_RCC_ClockConfig+0x35c>)
 8006c96:	6a1b      	ldr	r3, [r3, #32]
 8006c98:	f023 020f 	bic.w	r2, r3, #15
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	493e      	ldr	r1, [pc, #248]	@ (8006d9c <HAL_RCC_ClockConfig+0x35c>)
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ca6:	4b3e      	ldr	r3, [pc, #248]	@ (8006da0 <HAL_RCC_ClockConfig+0x360>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f003 030f 	and.w	r3, r3, #15
 8006cae:	683a      	ldr	r2, [r7, #0]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d210      	bcs.n	8006cd6 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cb4:	4b3a      	ldr	r3, [pc, #232]	@ (8006da0 <HAL_RCC_ClockConfig+0x360>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f023 020f 	bic.w	r2, r3, #15
 8006cbc:	4938      	ldr	r1, [pc, #224]	@ (8006da0 <HAL_RCC_ClockConfig+0x360>)
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cc4:	4b36      	ldr	r3, [pc, #216]	@ (8006da0 <HAL_RCC_ClockConfig+0x360>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 030f 	and.w	r3, r3, #15
 8006ccc:	683a      	ldr	r2, [r7, #0]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d001      	beq.n	8006cd6 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e05d      	b.n	8006d92 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 0304 	and.w	r3, r3, #4
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d010      	beq.n	8006d04 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	68da      	ldr	r2, [r3, #12]
 8006ce6:	4b2d      	ldr	r3, [pc, #180]	@ (8006d9c <HAL_RCC_ClockConfig+0x35c>)
 8006ce8:	6a1b      	ldr	r3, [r3, #32]
 8006cea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d208      	bcs.n	8006d04 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8006cf2:	4b2a      	ldr	r3, [pc, #168]	@ (8006d9c <HAL_RCC_ClockConfig+0x35c>)
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
 8006cf6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	4927      	ldr	r1, [pc, #156]	@ (8006d9c <HAL_RCC_ClockConfig+0x35c>)
 8006d00:	4313      	orrs	r3, r2
 8006d02:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 0308 	and.w	r3, r3, #8
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d012      	beq.n	8006d36 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	691a      	ldr	r2, [r3, #16]
 8006d14:	4b21      	ldr	r3, [pc, #132]	@ (8006d9c <HAL_RCC_ClockConfig+0x35c>)
 8006d16:	6a1b      	ldr	r3, [r3, #32]
 8006d18:	091b      	lsrs	r3, r3, #4
 8006d1a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d209      	bcs.n	8006d36 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8006d22:	4b1e      	ldr	r3, [pc, #120]	@ (8006d9c <HAL_RCC_ClockConfig+0x35c>)
 8006d24:	6a1b      	ldr	r3, [r3, #32]
 8006d26:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	011b      	lsls	r3, r3, #4
 8006d30:	491a      	ldr	r1, [pc, #104]	@ (8006d9c <HAL_RCC_ClockConfig+0x35c>)
 8006d32:	4313      	orrs	r3, r2
 8006d34:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 0310 	and.w	r3, r3, #16
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d012      	beq.n	8006d68 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	695a      	ldr	r2, [r3, #20]
 8006d46:	4b15      	ldr	r3, [pc, #84]	@ (8006d9c <HAL_RCC_ClockConfig+0x35c>)
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	0a1b      	lsrs	r3, r3, #8
 8006d4c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d209      	bcs.n	8006d68 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8006d54:	4b11      	ldr	r3, [pc, #68]	@ (8006d9c <HAL_RCC_ClockConfig+0x35c>)
 8006d56:	6a1b      	ldr	r3, [r3, #32]
 8006d58:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	695b      	ldr	r3, [r3, #20]
 8006d60:	021b      	lsls	r3, r3, #8
 8006d62:	490e      	ldr	r1, [pc, #56]	@ (8006d9c <HAL_RCC_ClockConfig+0x35c>)
 8006d64:	4313      	orrs	r3, r2
 8006d66:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006d68:	f000 f822 	bl	8006db0 <HAL_RCC_GetSysClockFreq>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8006d9c <HAL_RCC_ClockConfig+0x35c>)
 8006d70:	6a1b      	ldr	r3, [r3, #32]
 8006d72:	f003 030f 	and.w	r3, r3, #15
 8006d76:	490b      	ldr	r1, [pc, #44]	@ (8006da4 <HAL_RCC_ClockConfig+0x364>)
 8006d78:	5ccb      	ldrb	r3, [r1, r3]
 8006d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8006da8 <HAL_RCC_ClockConfig+0x368>)
 8006d80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006d82:	4b0a      	ldr	r3, [pc, #40]	@ (8006dac <HAL_RCC_ClockConfig+0x36c>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4618      	mov	r0, r3
 8006d88:	f7fb ffcc 	bl	8002d24 <HAL_InitTick>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8006d90:	7afb      	ldrb	r3, [r7, #11]
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	44020c00 	.word	0x44020c00
 8006da0:	40022000 	.word	0x40022000
 8006da4:	08014140 	.word	0x08014140
 8006da8:	20000004 	.word	0x20000004
 8006dac:	20000024 	.word	0x20000024

08006db0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b089      	sub	sp, #36	@ 0x24
 8006db4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8006db6:	4b8c      	ldr	r3, [pc, #560]	@ (8006fe8 <HAL_RCC_GetSysClockFreq+0x238>)
 8006db8:	69db      	ldr	r3, [r3, #28]
 8006dba:	f003 0318 	and.w	r3, r3, #24
 8006dbe:	2b08      	cmp	r3, #8
 8006dc0:	d102      	bne.n	8006dc8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006dc2:	4b8a      	ldr	r3, [pc, #552]	@ (8006fec <HAL_RCC_GetSysClockFreq+0x23c>)
 8006dc4:	61fb      	str	r3, [r7, #28]
 8006dc6:	e107      	b.n	8006fd8 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006dc8:	4b87      	ldr	r3, [pc, #540]	@ (8006fe8 <HAL_RCC_GetSysClockFreq+0x238>)
 8006dca:	69db      	ldr	r3, [r3, #28]
 8006dcc:	f003 0318 	and.w	r3, r3, #24
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d112      	bne.n	8006dfa <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8006dd4:	4b84      	ldr	r3, [pc, #528]	@ (8006fe8 <HAL_RCC_GetSysClockFreq+0x238>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f003 0320 	and.w	r3, r3, #32
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d009      	beq.n	8006df4 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006de0:	4b81      	ldr	r3, [pc, #516]	@ (8006fe8 <HAL_RCC_GetSysClockFreq+0x238>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	08db      	lsrs	r3, r3, #3
 8006de6:	f003 0303 	and.w	r3, r3, #3
 8006dea:	4a81      	ldr	r2, [pc, #516]	@ (8006ff0 <HAL_RCC_GetSysClockFreq+0x240>)
 8006dec:	fa22 f303 	lsr.w	r3, r2, r3
 8006df0:	61fb      	str	r3, [r7, #28]
 8006df2:	e0f1      	b.n	8006fd8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8006df4:	4b7e      	ldr	r3, [pc, #504]	@ (8006ff0 <HAL_RCC_GetSysClockFreq+0x240>)
 8006df6:	61fb      	str	r3, [r7, #28]
 8006df8:	e0ee      	b.n	8006fd8 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006dfa:	4b7b      	ldr	r3, [pc, #492]	@ (8006fe8 <HAL_RCC_GetSysClockFreq+0x238>)
 8006dfc:	69db      	ldr	r3, [r3, #28]
 8006dfe:	f003 0318 	and.w	r3, r3, #24
 8006e02:	2b10      	cmp	r3, #16
 8006e04:	d102      	bne.n	8006e0c <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006e06:	4b7b      	ldr	r3, [pc, #492]	@ (8006ff4 <HAL_RCC_GetSysClockFreq+0x244>)
 8006e08:	61fb      	str	r3, [r7, #28]
 8006e0a:	e0e5      	b.n	8006fd8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006e0c:	4b76      	ldr	r3, [pc, #472]	@ (8006fe8 <HAL_RCC_GetSysClockFreq+0x238>)
 8006e0e:	69db      	ldr	r3, [r3, #28]
 8006e10:	f003 0318 	and.w	r3, r3, #24
 8006e14:	2b18      	cmp	r3, #24
 8006e16:	f040 80dd 	bne.w	8006fd4 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006e1a:	4b73      	ldr	r3, [pc, #460]	@ (8006fe8 <HAL_RCC_GetSysClockFreq+0x238>)
 8006e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e1e:	f003 0303 	and.w	r3, r3, #3
 8006e22:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8006e24:	4b70      	ldr	r3, [pc, #448]	@ (8006fe8 <HAL_RCC_GetSysClockFreq+0x238>)
 8006e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e28:	0a1b      	lsrs	r3, r3, #8
 8006e2a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e2e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006e30:	4b6d      	ldr	r3, [pc, #436]	@ (8006fe8 <HAL_RCC_GetSysClockFreq+0x238>)
 8006e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e34:	091b      	lsrs	r3, r3, #4
 8006e36:	f003 0301 	and.w	r3, r3, #1
 8006e3a:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8006e3c:	4b6a      	ldr	r3, [pc, #424]	@ (8006fe8 <HAL_RCC_GetSysClockFreq+0x238>)
 8006e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8006e40:	08db      	lsrs	r3, r3, #3
 8006e42:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	fb02 f303 	mul.w	r3, r2, r3
 8006e4c:	ee07 3a90 	vmov	s15, r3
 8006e50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e54:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f000 80b7 	beq.w	8006fce <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d003      	beq.n	8006e6e <HAL_RCC_GetSysClockFreq+0xbe>
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	2b03      	cmp	r3, #3
 8006e6a:	d056      	beq.n	8006f1a <HAL_RCC_GetSysClockFreq+0x16a>
 8006e6c:	e077      	b.n	8006f5e <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8006e6e:	4b5e      	ldr	r3, [pc, #376]	@ (8006fe8 <HAL_RCC_GetSysClockFreq+0x238>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 0320 	and.w	r3, r3, #32
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d02d      	beq.n	8006ed6 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e7a:	4b5b      	ldr	r3, [pc, #364]	@ (8006fe8 <HAL_RCC_GetSysClockFreq+0x238>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	08db      	lsrs	r3, r3, #3
 8006e80:	f003 0303 	and.w	r3, r3, #3
 8006e84:	4a5a      	ldr	r2, [pc, #360]	@ (8006ff0 <HAL_RCC_GetSysClockFreq+0x240>)
 8006e86:	fa22 f303 	lsr.w	r3, r2, r3
 8006e8a:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	ee07 3a90 	vmov	s15, r3
 8006e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	ee07 3a90 	vmov	s15, r3
 8006e9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ea0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ea4:	4b50      	ldr	r3, [pc, #320]	@ (8006fe8 <HAL_RCC_GetSysClockFreq+0x238>)
 8006ea6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eac:	ee07 3a90 	vmov	s15, r3
 8006eb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8006eb4:	ed97 6a02 	vldr	s12, [r7, #8]
 8006eb8:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8006ff8 <HAL_RCC_GetSysClockFreq+0x248>
 8006ebc:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006ec0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ec4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ec8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006ecc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ed0:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8006ed4:	e065      	b.n	8006fa2 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	ee07 3a90 	vmov	s15, r3
 8006edc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ee0:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8006ffc <HAL_RCC_GetSysClockFreq+0x24c>
 8006ee4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ee8:	4b3f      	ldr	r3, [pc, #252]	@ (8006fe8 <HAL_RCC_GetSysClockFreq+0x238>)
 8006eea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006eec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ef0:	ee07 3a90 	vmov	s15, r3
 8006ef4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ef8:	ed97 6a02 	vldr	s12, [r7, #8]
 8006efc:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006ff8 <HAL_RCC_GetSysClockFreq+0x248>
 8006f00:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006f04:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f08:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006f10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f14:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8006f18:	e043      	b.n	8006fa2 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	ee07 3a90 	vmov	s15, r3
 8006f20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f24:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8007000 <HAL_RCC_GetSysClockFreq+0x250>
 8006f28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f2c:	4b2e      	ldr	r3, [pc, #184]	@ (8006fe8 <HAL_RCC_GetSysClockFreq+0x238>)
 8006f2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f34:	ee07 3a90 	vmov	s15, r3
 8006f38:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f3c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f40:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8006ff8 <HAL_RCC_GetSysClockFreq+0x248>
 8006f44:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006f48:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f4c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f50:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006f54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f58:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8006f5c:	e021      	b.n	8006fa2 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	ee07 3a90 	vmov	s15, r3
 8006f64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f68:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007004 <HAL_RCC_GetSysClockFreq+0x254>
 8006f6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f70:	4b1d      	ldr	r3, [pc, #116]	@ (8006fe8 <HAL_RCC_GetSysClockFreq+0x238>)
 8006f72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f78:	ee07 3a90 	vmov	s15, r3
 8006f7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f80:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f84:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8006ff8 <HAL_RCC_GetSysClockFreq+0x248>
 8006f88:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006f8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f90:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f94:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006f98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f9c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8006fa0:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8006fa2:	4b11      	ldr	r3, [pc, #68]	@ (8006fe8 <HAL_RCC_GetSysClockFreq+0x238>)
 8006fa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fa6:	0a5b      	lsrs	r3, r3, #9
 8006fa8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fac:	3301      	adds	r3, #1
 8006fae:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	ee07 3a90 	vmov	s15, r3
 8006fb6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006fba:	edd7 6a06 	vldr	s13, [r7, #24]
 8006fbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fc6:	ee17 3a90 	vmov	r3, s15
 8006fca:	61fb      	str	r3, [r7, #28]
 8006fcc:	e004      	b.n	8006fd8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	61fb      	str	r3, [r7, #28]
 8006fd2:	e001      	b.n	8006fd8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8006fd4:	4b06      	ldr	r3, [pc, #24]	@ (8006ff0 <HAL_RCC_GetSysClockFreq+0x240>)
 8006fd6:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8006fd8:	69fb      	ldr	r3, [r7, #28]
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3724      	adds	r7, #36	@ 0x24
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	44020c00 	.word	0x44020c00
 8006fec:	003d0900 	.word	0x003d0900
 8006ff0:	03d09000 	.word	0x03d09000
 8006ff4:	007a1200 	.word	0x007a1200
 8006ff8:	46000000 	.word	0x46000000
 8006ffc:	4c742400 	.word	0x4c742400
 8007000:	4af42400 	.word	0x4af42400
 8007004:	4a742400 	.word	0x4a742400

08007008 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800700c:	f7ff fed0 	bl	8006db0 <HAL_RCC_GetSysClockFreq>
 8007010:	4602      	mov	r2, r0
 8007012:	4b08      	ldr	r3, [pc, #32]	@ (8007034 <HAL_RCC_GetHCLKFreq+0x2c>)
 8007014:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8007016:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800701a:	4907      	ldr	r1, [pc, #28]	@ (8007038 <HAL_RCC_GetHCLKFreq+0x30>)
 800701c:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800701e:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8007022:	fa22 f303 	lsr.w	r3, r2, r3
 8007026:	4a05      	ldr	r2, [pc, #20]	@ (800703c <HAL_RCC_GetHCLKFreq+0x34>)
 8007028:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 800702a:	4b04      	ldr	r3, [pc, #16]	@ (800703c <HAL_RCC_GetHCLKFreq+0x34>)
 800702c:	681b      	ldr	r3, [r3, #0]
}
 800702e:	4618      	mov	r0, r3
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	44020c00 	.word	0x44020c00
 8007038:	08014140 	.word	0x08014140
 800703c:	20000004 	.word	0x20000004

08007040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8007044:	f7ff ffe0 	bl	8007008 <HAL_RCC_GetHCLKFreq>
 8007048:	4602      	mov	r2, r0
 800704a:	4b06      	ldr	r3, [pc, #24]	@ (8007064 <HAL_RCC_GetPCLK1Freq+0x24>)
 800704c:	6a1b      	ldr	r3, [r3, #32]
 800704e:	091b      	lsrs	r3, r3, #4
 8007050:	f003 0307 	and.w	r3, r3, #7
 8007054:	4904      	ldr	r1, [pc, #16]	@ (8007068 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007056:	5ccb      	ldrb	r3, [r1, r3]
 8007058:	f003 031f 	and.w	r3, r3, #31
 800705c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007060:	4618      	mov	r0, r3
 8007062:	bd80      	pop	{r7, pc}
 8007064:	44020c00 	.word	0x44020c00
 8007068:	08014150 	.word	0x08014150

0800706c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8007070:	f7ff ffca 	bl	8007008 <HAL_RCC_GetHCLKFreq>
 8007074:	4602      	mov	r2, r0
 8007076:	4b06      	ldr	r3, [pc, #24]	@ (8007090 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007078:	6a1b      	ldr	r3, [r3, #32]
 800707a:	0a1b      	lsrs	r3, r3, #8
 800707c:	f003 0307 	and.w	r3, r3, #7
 8007080:	4904      	ldr	r1, [pc, #16]	@ (8007094 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007082:	5ccb      	ldrb	r3, [r1, r3]
 8007084:	f003 031f 	and.w	r3, r3, #31
 8007088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800708c:	4618      	mov	r0, r3
 800708e:	bd80      	pop	{r7, pc}
 8007090:	44020c00 	.word	0x44020c00
 8007094:	08014150 	.word	0x08014150

08007098 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 800709c:	f7ff ffb4 	bl	8007008 <HAL_RCC_GetHCLKFreq>
 80070a0:	4602      	mov	r2, r0
 80070a2:	4b06      	ldr	r3, [pc, #24]	@ (80070bc <HAL_RCC_GetPCLK3Freq+0x24>)
 80070a4:	6a1b      	ldr	r3, [r3, #32]
 80070a6:	0b1b      	lsrs	r3, r3, #12
 80070a8:	f003 0307 	and.w	r3, r3, #7
 80070ac:	4904      	ldr	r1, [pc, #16]	@ (80070c0 <HAL_RCC_GetPCLK3Freq+0x28>)
 80070ae:	5ccb      	ldrb	r3, [r1, r3]
 80070b0:	f003 031f 	and.w	r3, r3, #31
 80070b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	44020c00 	.word	0x44020c00
 80070c0:	08014150 	.word	0x08014150

080070c4 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80070c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070c8:	b0d8      	sub	sp, #352	@ 0x160
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80070d0:	2300      	movs	r3, #0
 80070d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80070d6:	2300      	movs	r3, #0
 80070d8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80070dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e4:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 80070e8:	2500      	movs	r5, #0
 80070ea:	ea54 0305 	orrs.w	r3, r4, r5
 80070ee:	d00b      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80070f0:	4bcd      	ldr	r3, [pc, #820]	@ (8007428 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80070f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80070f6:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80070fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007100:	4ac9      	ldr	r2, [pc, #804]	@ (8007428 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007102:	430b      	orrs	r3, r1
 8007104:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007108:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800710c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007110:	f002 0801 	and.w	r8, r2, #1
 8007114:	f04f 0900 	mov.w	r9, #0
 8007118:	ea58 0309 	orrs.w	r3, r8, r9
 800711c:	d042      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 800711e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007124:	2b05      	cmp	r3, #5
 8007126:	d823      	bhi.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8007128:	a201      	add	r2, pc, #4	@ (adr r2, 8007130 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800712a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712e:	bf00      	nop
 8007130:	08007179 	.word	0x08007179
 8007134:	08007149 	.word	0x08007149
 8007138:	0800715d 	.word	0x0800715d
 800713c:	08007179 	.word	0x08007179
 8007140:	08007179 	.word	0x08007179
 8007144:	08007179 	.word	0x08007179
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007148:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800714c:	3308      	adds	r3, #8
 800714e:	4618      	mov	r0, r3
 8007150:	f004 fee0 	bl	800bf14 <RCCEx_PLL2_Config>
 8007154:	4603      	mov	r3, r0
 8007156:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800715a:	e00e      	b.n	800717a <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800715c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007160:	3330      	adds	r3, #48	@ 0x30
 8007162:	4618      	mov	r0, r3
 8007164:	f004 ff6e 	bl	800c044 <RCCEx_PLL3_Config>
 8007168:	4603      	mov	r3, r0
 800716a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800716e:	e004      	b.n	800717a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007176:	e000      	b.n	800717a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8007178:	bf00      	nop
    }

    if (ret == HAL_OK)
 800717a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800717e:	2b00      	cmp	r3, #0
 8007180:	d10c      	bne.n	800719c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8007182:	4ba9      	ldr	r3, [pc, #676]	@ (8007428 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007184:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007188:	f023 0107 	bic.w	r1, r3, #7
 800718c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007190:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007192:	4aa5      	ldr	r2, [pc, #660]	@ (8007428 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007194:	430b      	orrs	r3, r1
 8007196:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800719a:	e003      	b.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800719c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80071a0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80071a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ac:	f002 0a02 	and.w	sl, r2, #2
 80071b0:	f04f 0b00 	mov.w	fp, #0
 80071b4:	ea5a 030b 	orrs.w	r3, sl, fp
 80071b8:	f000 8088 	beq.w	80072cc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80071bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071c2:	2b28      	cmp	r3, #40	@ 0x28
 80071c4:	d868      	bhi.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80071c6:	a201      	add	r2, pc, #4	@ (adr r2, 80071cc <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80071c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071cc:	080072a1 	.word	0x080072a1
 80071d0:	08007299 	.word	0x08007299
 80071d4:	08007299 	.word	0x08007299
 80071d8:	08007299 	.word	0x08007299
 80071dc:	08007299 	.word	0x08007299
 80071e0:	08007299 	.word	0x08007299
 80071e4:	08007299 	.word	0x08007299
 80071e8:	08007299 	.word	0x08007299
 80071ec:	08007271 	.word	0x08007271
 80071f0:	08007299 	.word	0x08007299
 80071f4:	08007299 	.word	0x08007299
 80071f8:	08007299 	.word	0x08007299
 80071fc:	08007299 	.word	0x08007299
 8007200:	08007299 	.word	0x08007299
 8007204:	08007299 	.word	0x08007299
 8007208:	08007299 	.word	0x08007299
 800720c:	08007285 	.word	0x08007285
 8007210:	08007299 	.word	0x08007299
 8007214:	08007299 	.word	0x08007299
 8007218:	08007299 	.word	0x08007299
 800721c:	08007299 	.word	0x08007299
 8007220:	08007299 	.word	0x08007299
 8007224:	08007299 	.word	0x08007299
 8007228:	08007299 	.word	0x08007299
 800722c:	080072a1 	.word	0x080072a1
 8007230:	08007299 	.word	0x08007299
 8007234:	08007299 	.word	0x08007299
 8007238:	08007299 	.word	0x08007299
 800723c:	08007299 	.word	0x08007299
 8007240:	08007299 	.word	0x08007299
 8007244:	08007299 	.word	0x08007299
 8007248:	08007299 	.word	0x08007299
 800724c:	080072a1 	.word	0x080072a1
 8007250:	08007299 	.word	0x08007299
 8007254:	08007299 	.word	0x08007299
 8007258:	08007299 	.word	0x08007299
 800725c:	08007299 	.word	0x08007299
 8007260:	08007299 	.word	0x08007299
 8007264:	08007299 	.word	0x08007299
 8007268:	08007299 	.word	0x08007299
 800726c:	080072a1 	.word	0x080072a1
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007270:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007274:	3308      	adds	r3, #8
 8007276:	4618      	mov	r0, r3
 8007278:	f004 fe4c 	bl	800bf14 <RCCEx_PLL2_Config>
 800727c:	4603      	mov	r3, r0
 800727e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8007282:	e00e      	b.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007284:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007288:	3330      	adds	r3, #48	@ 0x30
 800728a:	4618      	mov	r0, r3
 800728c:	f004 feda 	bl	800c044 <RCCEx_PLL3_Config>
 8007290:	4603      	mov	r3, r0
 8007292:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8007296:	e004      	b.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800729e:	e000      	b.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 80072a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072a2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d10c      	bne.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80072aa:	4b5f      	ldr	r3, [pc, #380]	@ (8007428 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80072ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80072b0:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80072b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072ba:	4a5b      	ldr	r2, [pc, #364]	@ (8007428 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80072bc:	430b      	orrs	r3, r1
 80072be:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80072c2:	e003      	b.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072c4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80072c8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80072cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d4:	f002 0304 	and.w	r3, r2, #4
 80072d8:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80072dc:	2300      	movs	r3, #0
 80072de:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80072e2:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 80072e6:	460b      	mov	r3, r1
 80072e8:	4313      	orrs	r3, r2
 80072ea:	d04e      	beq.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80072ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072f2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80072f6:	d02c      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80072f8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80072fc:	d825      	bhi.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x286>
 80072fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007302:	d028      	beq.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007304:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007308:	d81f      	bhi.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800730a:	2bc0      	cmp	r3, #192	@ 0xc0
 800730c:	d025      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800730e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007310:	d81b      	bhi.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8007312:	2b80      	cmp	r3, #128	@ 0x80
 8007314:	d00f      	beq.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8007316:	2b80      	cmp	r3, #128	@ 0x80
 8007318:	d817      	bhi.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800731a:	2b00      	cmp	r3, #0
 800731c:	d01f      	beq.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x29a>
 800731e:	2b40      	cmp	r3, #64	@ 0x40
 8007320:	d113      	bne.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007322:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007326:	3308      	adds	r3, #8
 8007328:	4618      	mov	r0, r3
 800732a:	f004 fdf3 	bl	800bf14 <RCCEx_PLL2_Config>
 800732e:	4603      	mov	r3, r0
 8007330:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8007334:	e014      	b.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007336:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800733a:	3330      	adds	r3, #48	@ 0x30
 800733c:	4618      	mov	r0, r3
 800733e:	f004 fe81 	bl	800c044 <RCCEx_PLL3_Config>
 8007342:	4603      	mov	r3, r0
 8007344:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8007348:	e00a      	b.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007350:	e006      	b.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8007352:	bf00      	nop
 8007354:	e004      	b.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8007356:	bf00      	nop
 8007358:	e002      	b.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800735a:	bf00      	nop
 800735c:	e000      	b.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800735e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007360:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007364:	2b00      	cmp	r3, #0
 8007366:	d10c      	bne.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8007368:	4b2f      	ldr	r3, [pc, #188]	@ (8007428 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800736a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800736e:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007372:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007376:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007378:	4a2b      	ldr	r2, [pc, #172]	@ (8007428 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800737a:	430b      	orrs	r3, r1
 800737c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007380:	e003      	b.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007382:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007386:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800738a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800738e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007392:	f002 0308 	and.w	r3, r2, #8
 8007396:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800739a:	2300      	movs	r3, #0
 800739c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80073a0:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 80073a4:	460b      	mov	r3, r1
 80073a6:	4313      	orrs	r3, r2
 80073a8:	d056      	beq.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 80073aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80073ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80073b0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80073b4:	d031      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x356>
 80073b6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80073ba:	d82a      	bhi.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80073bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073c0:	d02d      	beq.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80073c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073c6:	d824      	bhi.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80073c8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80073cc:	d029      	beq.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80073ce:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80073d2:	d81e      	bhi.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80073d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073d8:	d011      	beq.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80073da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073de:	d818      	bhi.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d023      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x368>
 80073e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073e8:	d113      	bne.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80073ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80073ee:	3308      	adds	r3, #8
 80073f0:	4618      	mov	r0, r3
 80073f2:	f004 fd8f 	bl	800bf14 <RCCEx_PLL2_Config>
 80073f6:	4603      	mov	r3, r0
 80073f8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80073fc:	e017      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80073fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007402:	3330      	adds	r3, #48	@ 0x30
 8007404:	4618      	mov	r0, r3
 8007406:	f004 fe1d 	bl	800c044 <RCCEx_PLL3_Config>
 800740a:	4603      	mov	r3, r0
 800740c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8007410:	e00d      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007418:	e009      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800741a:	bf00      	nop
 800741c:	e007      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800741e:	bf00      	nop
 8007420:	e005      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8007422:	bf00      	nop
 8007424:	e003      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8007426:	bf00      	nop
 8007428:	44020c00 	.word	0x44020c00
        break;
 800742c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800742e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007432:	2b00      	cmp	r3, #0
 8007434:	d10c      	bne.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8007436:	4bbb      	ldr	r3, [pc, #748]	@ (8007724 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007438:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800743c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8007440:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007444:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007446:	4ab7      	ldr	r2, [pc, #732]	@ (8007724 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007448:	430b      	orrs	r3, r1
 800744a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800744e:	e003      	b.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007450:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007454:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007458:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800745c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007460:	f002 0310 	and.w	r3, r2, #16
 8007464:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8007468:	2300      	movs	r3, #0
 800746a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800746e:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 8007472:	460b      	mov	r3, r1
 8007474:	4313      	orrs	r3, r2
 8007476:	d053      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8007478:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800747c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800747e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007482:	d031      	beq.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8007484:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007488:	d82a      	bhi.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800748a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800748e:	d02d      	beq.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x428>
 8007490:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007494:	d824      	bhi.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007496:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800749a:	d029      	beq.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800749c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80074a0:	d81e      	bhi.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80074a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074a6:	d011      	beq.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x408>
 80074a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074ac:	d818      	bhi.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d020      	beq.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x430>
 80074b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074b6:	d113      	bne.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80074b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074bc:	3308      	adds	r3, #8
 80074be:	4618      	mov	r0, r3
 80074c0:	f004 fd28 	bl	800bf14 <RCCEx_PLL2_Config>
 80074c4:	4603      	mov	r3, r0
 80074c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80074ca:	e014      	b.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80074cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074d0:	3330      	adds	r3, #48	@ 0x30
 80074d2:	4618      	mov	r0, r3
 80074d4:	f004 fdb6 	bl	800c044 <RCCEx_PLL3_Config>
 80074d8:	4603      	mov	r3, r0
 80074da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80074de:	e00a      	b.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80074e6:	e006      	b.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80074e8:	bf00      	nop
 80074ea:	e004      	b.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80074ec:	bf00      	nop
 80074ee:	e002      	b.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80074f0:	bf00      	nop
 80074f2:	e000      	b.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80074f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074f6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d10c      	bne.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80074fe:	4b89      	ldr	r3, [pc, #548]	@ (8007724 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007500:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007504:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007508:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800750c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800750e:	4a85      	ldr	r2, [pc, #532]	@ (8007724 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007510:	430b      	orrs	r3, r1
 8007512:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007516:	e003      	b.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007518:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800751c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007520:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007528:	f002 0320 	and.w	r3, r2, #32
 800752c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8007530:	2300      	movs	r3, #0
 8007532:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8007536:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 800753a:	460b      	mov	r3, r1
 800753c:	4313      	orrs	r3, r2
 800753e:	d053      	beq.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8007540:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007546:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800754a:	d031      	beq.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 800754c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8007550:	d82a      	bhi.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8007552:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007556:	d02d      	beq.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8007558:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800755c:	d824      	bhi.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800755e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8007562:	d029      	beq.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8007564:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8007568:	d81e      	bhi.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800756a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800756e:	d011      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8007570:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007574:	d818      	bhi.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8007576:	2b00      	cmp	r3, #0
 8007578:	d020      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800757a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800757e:	d113      	bne.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007580:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007584:	3308      	adds	r3, #8
 8007586:	4618      	mov	r0, r3
 8007588:	f004 fcc4 	bl	800bf14 <RCCEx_PLL2_Config>
 800758c:	4603      	mov	r3, r0
 800758e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8007592:	e014      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007594:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007598:	3330      	adds	r3, #48	@ 0x30
 800759a:	4618      	mov	r0, r3
 800759c:	f004 fd52 	bl	800c044 <RCCEx_PLL3_Config>
 80075a0:	4603      	mov	r3, r0
 80075a2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80075a6:	e00a      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80075ae:	e006      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80075b0:	bf00      	nop
 80075b2:	e004      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80075b4:	bf00      	nop
 80075b6:	e002      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80075b8:	bf00      	nop
 80075ba:	e000      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80075bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075be:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d10c      	bne.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80075c6:	4b57      	ldr	r3, [pc, #348]	@ (8007724 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80075c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80075cc:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 80075d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075d6:	4a53      	ldr	r2, [pc, #332]	@ (8007724 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80075d8:	430b      	orrs	r3, r1
 80075da:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80075de:	e003      	b.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075e0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80075e4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80075e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f0:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80075f4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80075f8:	2300      	movs	r3, #0
 80075fa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80075fe:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 8007602:	460b      	mov	r3, r1
 8007604:	4313      	orrs	r3, r2
 8007606:	d053      	beq.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8007608:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800760c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800760e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8007612:	d031      	beq.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8007614:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8007618:	d82a      	bhi.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800761a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800761e:	d02d      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8007620:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007624:	d824      	bhi.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8007626:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800762a:	d029      	beq.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800762c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007630:	d81e      	bhi.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8007632:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007636:	d011      	beq.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x598>
 8007638:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800763c:	d818      	bhi.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800763e:	2b00      	cmp	r3, #0
 8007640:	d020      	beq.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007642:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007646:	d113      	bne.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007648:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800764c:	3308      	adds	r3, #8
 800764e:	4618      	mov	r0, r3
 8007650:	f004 fc60 	bl	800bf14 <RCCEx_PLL2_Config>
 8007654:	4603      	mov	r3, r0
 8007656:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800765a:	e014      	b.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800765c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007660:	3330      	adds	r3, #48	@ 0x30
 8007662:	4618      	mov	r0, r3
 8007664:	f004 fcee 	bl	800c044 <RCCEx_PLL3_Config>
 8007668:	4603      	mov	r3, r0
 800766a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800766e:	e00a      	b.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007676:	e006      	b.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8007678:	bf00      	nop
 800767a:	e004      	b.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800767c:	bf00      	nop
 800767e:	e002      	b.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8007680:	bf00      	nop
 8007682:	e000      	b.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8007684:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007686:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10c      	bne.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 800768e:	4b25      	ldr	r3, [pc, #148]	@ (8007724 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007690:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007694:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8007698:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800769c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800769e:	4a21      	ldr	r2, [pc, #132]	@ (8007724 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80076a0:	430b      	orrs	r3, r1
 80076a2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80076a6:	e003      	b.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076a8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80076ac:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80076b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80076bc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80076c0:	2300      	movs	r3, #0
 80076c2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80076c6:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 80076ca:	460b      	mov	r3, r1
 80076cc:	4313      	orrs	r3, r2
 80076ce:	d055      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 80076d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80076d6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80076da:	d033      	beq.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x680>
 80076dc:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80076e0:	d82c      	bhi.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x678>
 80076e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80076e6:	d02f      	beq.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x684>
 80076e8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80076ec:	d826      	bhi.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x678>
 80076ee:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80076f2:	d02b      	beq.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x688>
 80076f4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80076f8:	d820      	bhi.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x678>
 80076fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076fe:	d013      	beq.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007700:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007704:	d81a      	bhi.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x678>
 8007706:	2b00      	cmp	r3, #0
 8007708:	d022      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 800770a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800770e:	d115      	bne.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007710:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007714:	3308      	adds	r3, #8
 8007716:	4618      	mov	r0, r3
 8007718:	f004 fbfc 	bl	800bf14 <RCCEx_PLL2_Config>
 800771c:	4603      	mov	r3, r0
 800771e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8007722:	e016      	b.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8007724:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007728:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800772c:	3330      	adds	r3, #48	@ 0x30
 800772e:	4618      	mov	r0, r3
 8007730:	f004 fc88 	bl	800c044 <RCCEx_PLL3_Config>
 8007734:	4603      	mov	r3, r0
 8007736:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800773a:	e00a      	b.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007742:	e006      	b.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8007744:	bf00      	nop
 8007746:	e004      	b.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8007748:	bf00      	nop
 800774a:	e002      	b.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800774c:	bf00      	nop
 800774e:	e000      	b.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8007750:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007752:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007756:	2b00      	cmp	r3, #0
 8007758:	d10c      	bne.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 800775a:	4bbb      	ldr	r3, [pc, #748]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800775c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007760:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007764:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007768:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800776a:	4ab7      	ldr	r2, [pc, #732]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800776c:	430b      	orrs	r3, r1
 800776e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007772:	e003      	b.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007774:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007778:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 800777c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007784:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8007788:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800778c:	2300      	movs	r3, #0
 800778e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8007792:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8007796:	460b      	mov	r3, r1
 8007798:	4313      	orrs	r3, r2
 800779a:	d053      	beq.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 800779c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80077a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80077a2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80077a6:	d031      	beq.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x748>
 80077a8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80077ac:	d82a      	bhi.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80077ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80077b2:	d02d      	beq.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 80077b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80077b8:	d824      	bhi.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80077ba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80077be:	d029      	beq.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x750>
 80077c0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80077c4:	d81e      	bhi.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80077c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80077ca:	d011      	beq.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 80077cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80077d0:	d818      	bhi.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d020      	beq.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x754>
 80077d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80077da:	d113      	bne.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80077dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80077e0:	3308      	adds	r3, #8
 80077e2:	4618      	mov	r0, r3
 80077e4:	f004 fb96 	bl	800bf14 <RCCEx_PLL2_Config>
 80077e8:	4603      	mov	r3, r0
 80077ea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80077ee:	e014      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80077f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80077f4:	3330      	adds	r3, #48	@ 0x30
 80077f6:	4618      	mov	r0, r3
 80077f8:	f004 fc24 	bl	800c044 <RCCEx_PLL3_Config>
 80077fc:	4603      	mov	r3, r0
 80077fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8007802:	e00a      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800780a:	e006      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800780c:	bf00      	nop
 800780e:	e004      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8007810:	bf00      	nop
 8007812:	e002      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8007814:	bf00      	nop
 8007816:	e000      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8007818:	bf00      	nop
    }

    if (ret == HAL_OK)
 800781a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800781e:	2b00      	cmp	r3, #0
 8007820:	d10c      	bne.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8007822:	4b89      	ldr	r3, [pc, #548]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007824:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007828:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800782c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007830:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007832:	4a85      	ldr	r2, [pc, #532]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007834:	430b      	orrs	r3, r1
 8007836:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800783a:	e003      	b.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800783c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007840:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8007844:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784c:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8007850:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007854:	2300      	movs	r3, #0
 8007856:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800785a:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800785e:	460b      	mov	r3, r1
 8007860:	4313      	orrs	r3, r2
 8007862:	d055      	beq.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8007864:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007868:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800786c:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8007870:	d031      	beq.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x812>
 8007872:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8007876:	d82a      	bhi.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8007878:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800787c:	d02d      	beq.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x816>
 800787e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007882:	d824      	bhi.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8007884:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8007888:	d029      	beq.n	80078de <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800788a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800788e:	d81e      	bhi.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8007890:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007894:	d011      	beq.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8007896:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800789a:	d818      	bhi.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800789c:	2b00      	cmp	r3, #0
 800789e:	d020      	beq.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 80078a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80078a4:	d113      	bne.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80078a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80078aa:	3308      	adds	r3, #8
 80078ac:	4618      	mov	r0, r3
 80078ae:	f004 fb31 	bl	800bf14 <RCCEx_PLL2_Config>
 80078b2:	4603      	mov	r3, r0
 80078b4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80078b8:	e014      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80078ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80078be:	3330      	adds	r3, #48	@ 0x30
 80078c0:	4618      	mov	r0, r3
 80078c2:	f004 fbbf 	bl	800c044 <RCCEx_PLL3_Config>
 80078c6:	4603      	mov	r3, r0
 80078c8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80078cc:	e00a      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80078d4:	e006      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80078d6:	bf00      	nop
 80078d8:	e004      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80078da:	bf00      	nop
 80078dc:	e002      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80078de:	bf00      	nop
 80078e0:	e000      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80078e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078e4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d10d      	bne.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 80078ec:	4b56      	ldr	r3, [pc, #344]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80078ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80078f2:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 80078f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80078fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078fe:	4a52      	ldr	r2, [pc, #328]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007900:	430b      	orrs	r3, r1
 8007902:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007906:	e003      	b.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007908:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800790c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8007910:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007918:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800791c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007920:	2300      	movs	r3, #0
 8007922:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007926:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800792a:	460b      	mov	r3, r1
 800792c:	4313      	orrs	r3, r2
 800792e:	d044      	beq.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8007930:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007934:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007938:	2b05      	cmp	r3, #5
 800793a:	d823      	bhi.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800793c:	a201      	add	r2, pc, #4	@ (adr r2, 8007944 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800793e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007942:	bf00      	nop
 8007944:	0800798d 	.word	0x0800798d
 8007948:	0800795d 	.word	0x0800795d
 800794c:	08007971 	.word	0x08007971
 8007950:	0800798d 	.word	0x0800798d
 8007954:	0800798d 	.word	0x0800798d
 8007958:	0800798d 	.word	0x0800798d
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800795c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007960:	3308      	adds	r3, #8
 8007962:	4618      	mov	r0, r3
 8007964:	f004 fad6 	bl	800bf14 <RCCEx_PLL2_Config>
 8007968:	4603      	mov	r3, r0
 800796a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800796e:	e00e      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007970:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007974:	3330      	adds	r3, #48	@ 0x30
 8007976:	4618      	mov	r0, r3
 8007978:	f004 fb64 	bl	800c044 <RCCEx_PLL3_Config>
 800797c:	4603      	mov	r3, r0
 800797e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8007982:	e004      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800798a:	e000      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 800798c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800798e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007992:	2b00      	cmp	r3, #0
 8007994:	d10d      	bne.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8007996:	4b2c      	ldr	r3, [pc, #176]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007998:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800799c:	f023 0107 	bic.w	r1, r3, #7
 80079a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80079a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079a8:	4a27      	ldr	r2, [pc, #156]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80079aa:	430b      	orrs	r3, r1
 80079ac:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80079b0:	e003      	b.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079b2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80079b6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 80079ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80079be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80079c6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80079ca:	2300      	movs	r3, #0
 80079cc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80079d0:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80079d4:	460b      	mov	r3, r1
 80079d6:	4313      	orrs	r3, r2
 80079d8:	d04f      	beq.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 80079da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80079de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079e2:	2b50      	cmp	r3, #80	@ 0x50
 80079e4:	d029      	beq.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x976>
 80079e6:	2b50      	cmp	r3, #80	@ 0x50
 80079e8:	d823      	bhi.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80079ea:	2b40      	cmp	r3, #64	@ 0x40
 80079ec:	d027      	beq.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x97a>
 80079ee:	2b40      	cmp	r3, #64	@ 0x40
 80079f0:	d81f      	bhi.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80079f2:	2b30      	cmp	r3, #48	@ 0x30
 80079f4:	d025      	beq.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 80079f6:	2b30      	cmp	r3, #48	@ 0x30
 80079f8:	d81b      	bhi.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80079fa:	2b20      	cmp	r3, #32
 80079fc:	d00f      	beq.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80079fe:	2b20      	cmp	r3, #32
 8007a00:	d817      	bhi.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d022      	beq.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8007a06:	2b10      	cmp	r3, #16
 8007a08:	d113      	bne.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007a0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a0e:	3308      	adds	r3, #8
 8007a10:	4618      	mov	r0, r3
 8007a12:	f004 fa7f 	bl	800bf14 <RCCEx_PLL2_Config>
 8007a16:	4603      	mov	r3, r0
 8007a18:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8007a1c:	e017      	b.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007a1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a22:	3330      	adds	r3, #48	@ 0x30
 8007a24:	4618      	mov	r0, r3
 8007a26:	f004 fb0d 	bl	800c044 <RCCEx_PLL3_Config>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8007a30:	e00d      	b.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007a38:	e009      	b.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8007a3a:	bf00      	nop
 8007a3c:	e007      	b.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8007a3e:	bf00      	nop
 8007a40:	e005      	b.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8007a42:	bf00      	nop
 8007a44:	e003      	b.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8007a46:	bf00      	nop
 8007a48:	44020c00 	.word	0x44020c00
        break;
 8007a4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a4e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d10d      	bne.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8007a56:	4baf      	ldr	r3, [pc, #700]	@ (8007d14 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007a58:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007a5c:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8007a60:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a68:	4aaa      	ldr	r2, [pc, #680]	@ (8007d14 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007a6a:	430b      	orrs	r3, r1
 8007a6c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007a70:	e003      	b.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a72:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007a76:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007a7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a82:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007a86:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007a90:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007a94:	460b      	mov	r3, r1
 8007a96:	4313      	orrs	r3, r2
 8007a98:	d055      	beq.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8007a9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007aa2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007aa6:	d031      	beq.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8007aa8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007aac:	d82a      	bhi.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8007aae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007ab2:	d02d      	beq.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8007ab4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007ab8:	d824      	bhi.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8007aba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007abe:	d029      	beq.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8007ac0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007ac4:	d81e      	bhi.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8007ac6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007aca:	d011      	beq.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8007acc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ad0:	d818      	bhi.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d020      	beq.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8007ad6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007ada:	d113      	bne.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007adc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ae0:	3308      	adds	r3, #8
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f004 fa16 	bl	800bf14 <RCCEx_PLL2_Config>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8007aee:	e014      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007af0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007af4:	3330      	adds	r3, #48	@ 0x30
 8007af6:	4618      	mov	r0, r3
 8007af8:	f004 faa4 	bl	800c044 <RCCEx_PLL3_Config>
 8007afc:	4603      	mov	r3, r0
 8007afe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8007b02:	e00a      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007b0a:	e006      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8007b0c:	bf00      	nop
 8007b0e:	e004      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8007b10:	bf00      	nop
 8007b12:	e002      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8007b14:	bf00      	nop
 8007b16:	e000      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8007b18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b1a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d10d      	bne.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8007b22:	4b7c      	ldr	r3, [pc, #496]	@ (8007d14 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b28:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007b2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b34:	4a77      	ldr	r2, [pc, #476]	@ (8007d14 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007b36:	430b      	orrs	r3, r1
 8007b38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007b3c:	e003      	b.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b3e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007b42:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007b46:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007b52:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007b56:	2300      	movs	r3, #0
 8007b58:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007b5c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007b60:	460b      	mov	r3, r1
 8007b62:	4313      	orrs	r3, r2
 8007b64:	d03d      	beq.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8007b66:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b6e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007b72:	d01b      	beq.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8007b74:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007b78:	d814      	bhi.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8007b7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b7e:	d017      	beq.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8007b80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b84:	d80e      	bhi.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d014      	beq.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8007b8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b8e:	d109      	bne.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007b90:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b94:	3330      	adds	r3, #48	@ 0x30
 8007b96:	4618      	mov	r0, r3
 8007b98:	f004 fa54 	bl	800c044 <RCCEx_PLL3_Config>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8007ba2:	e008      	b.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007baa:	e004      	b.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8007bac:	bf00      	nop
 8007bae:	e002      	b.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8007bb0:	bf00      	nop
 8007bb2:	e000      	b.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8007bb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bb6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d10d      	bne.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8007bbe:	4b55      	ldr	r3, [pc, #340]	@ (8007d14 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007bc0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007bc4:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007bc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bd0:	4a50      	ldr	r2, [pc, #320]	@ (8007d14 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007bd2:	430b      	orrs	r3, r1
 8007bd4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007bd8:	e003      	b.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bda:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007bde:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007be2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bea:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007bee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007bf8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	d03d      	beq.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8007c02:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c0a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007c0e:	d01b      	beq.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8007c10:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007c14:	d814      	bhi.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8007c16:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007c1a:	d017      	beq.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8007c1c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007c20:	d80e      	bhi.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d014      	beq.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8007c26:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007c2a:	d109      	bne.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007c2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c30:	3330      	adds	r3, #48	@ 0x30
 8007c32:	4618      	mov	r0, r3
 8007c34:	f004 fa06 	bl	800c044 <RCCEx_PLL3_Config>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8007c3e:	e008      	b.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c40:	2301      	movs	r3, #1
 8007c42:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007c46:	e004      	b.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8007c48:	bf00      	nop
 8007c4a:	e002      	b.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8007c4c:	bf00      	nop
 8007c4e:	e000      	b.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8007c50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c52:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d10d      	bne.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8007c5a:	4b2e      	ldr	r3, [pc, #184]	@ (8007d14 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007c5c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007c60:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8007c64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c6c:	4a29      	ldr	r2, [pc, #164]	@ (8007d14 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007c6e:	430b      	orrs	r3, r1
 8007c70:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007c74:	e003      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c76:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007c7a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007c7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c86:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007c8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007c8e:	2300      	movs	r3, #0
 8007c90:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007c94:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007c98:	460b      	mov	r3, r1
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	d040      	beq.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8007c9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ca2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007ca6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007caa:	d01b      	beq.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8007cac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007cb0:	d814      	bhi.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8007cb2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007cb6:	d017      	beq.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007cb8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007cbc:	d80e      	bhi.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d014      	beq.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8007cc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007cc6:	d109      	bne.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007cc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ccc:	3330      	adds	r3, #48	@ 0x30
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f004 f9b8 	bl	800c044 <RCCEx_PLL3_Config>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8007cda:	e008      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007ce2:	e004      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8007ce4:	bf00      	nop
 8007ce6:	e002      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8007ce8:	bf00      	nop
 8007cea:	e000      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8007cec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d110      	bne.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8007cf6:	4b07      	ldr	r3, [pc, #28]	@ (8007d14 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007cf8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007cfc:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007d00:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d04:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007d08:	4a02      	ldr	r2, [pc, #8]	@ (8007d14 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007d0a:	430b      	orrs	r3, r1
 8007d0c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007d10:	e006      	b.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8007d12:	bf00      	nop
 8007d14:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d18:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007d1c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007d20:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d28:	2100      	movs	r1, #0
 8007d2a:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8007d2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007d36:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	d03d      	beq.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8007d40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d44:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d48:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007d4c:	d01b      	beq.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8007d4e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007d52:	d814      	bhi.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8007d54:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007d58:	d017      	beq.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8007d5a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007d5e:	d80e      	bhi.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d014      	beq.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8007d64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d68:	d109      	bne.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007d6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d6e:	3330      	adds	r3, #48	@ 0x30
 8007d70:	4618      	mov	r0, r3
 8007d72:	f004 f967 	bl	800c044 <RCCEx_PLL3_Config>
 8007d76:	4603      	mov	r3, r0
 8007d78:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8007d7c:	e008      	b.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007d84:	e004      	b.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8007d86:	bf00      	nop
 8007d88:	e002      	b.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8007d8a:	bf00      	nop
 8007d8c:	e000      	b.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8007d8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d90:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d10d      	bne.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8007d98:	4bbe      	ldr	r3, [pc, #760]	@ (8008094 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007d9a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007d9e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007da2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007da6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007daa:	4aba      	ldr	r2, [pc, #744]	@ (8008094 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007dac:	430b      	orrs	r3, r1
 8007dae:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007db2:	e003      	b.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007db4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007db8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8007dbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007dc8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007dcc:	2300      	movs	r3, #0
 8007dce:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007dd2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	d035      	beq.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8007ddc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007de0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007de4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007de8:	d015      	beq.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8007dea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007dee:	d80e      	bhi.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d012      	beq.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8007df4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007df8:	d109      	bne.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007dfa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007dfe:	3330      	adds	r3, #48	@ 0x30
 8007e00:	4618      	mov	r0, r3
 8007e02:	f004 f91f 	bl	800c044 <RCCEx_PLL3_Config>
 8007e06:	4603      	mov	r3, r0
 8007e08:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8007e0c:	e006      	b.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007e14:	e002      	b.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8007e16:	bf00      	nop
 8007e18:	e000      	b.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8007e1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e1c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d10d      	bne.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8007e24:	4b9b      	ldr	r3, [pc, #620]	@ (8008094 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007e26:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007e2a:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8007e2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007e36:	4a97      	ldr	r2, [pc, #604]	@ (8008094 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007e38:	430b      	orrs	r3, r1
 8007e3a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007e3e:	e003      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e40:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007e44:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007e48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e50:	2100      	movs	r1, #0
 8007e52:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8007e56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e5a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007e5e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007e62:	460b      	mov	r3, r1
 8007e64:	4313      	orrs	r3, r2
 8007e66:	d00e      	beq.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8007e68:	4b8a      	ldr	r3, [pc, #552]	@ (8008094 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007e6a:	69db      	ldr	r3, [r3, #28]
 8007e6c:	4a89      	ldr	r2, [pc, #548]	@ (8008094 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007e6e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007e72:	61d3      	str	r3, [r2, #28]
 8007e74:	4b87      	ldr	r3, [pc, #540]	@ (8008094 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007e76:	69d9      	ldr	r1, [r3, #28]
 8007e78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e7c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8007e80:	4a84      	ldr	r2, [pc, #528]	@ (8008094 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007e82:	430b      	orrs	r3, r1
 8007e84:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007e86:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007e92:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007e96:	2300      	movs	r3, #0
 8007e98:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007e9c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	d055      	beq.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8007ea6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007eaa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007eae:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007eb2:	d031      	beq.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8007eb4:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007eb8:	d82a      	bhi.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8007eba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ebe:	d02d      	beq.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8007ec0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ec4:	d824      	bhi.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8007ec6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007eca:	d029      	beq.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8007ecc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ed0:	d81e      	bhi.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8007ed2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ed6:	d011      	beq.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8007ed8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007edc:	d818      	bhi.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d020      	beq.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8007ee2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ee6:	d113      	bne.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007ee8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007eec:	3308      	adds	r3, #8
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f004 f810 	bl	800bf14 <RCCEx_PLL2_Config>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8007efa:	e014      	b.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007efc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f00:	3330      	adds	r3, #48	@ 0x30
 8007f02:	4618      	mov	r0, r3
 8007f04:	f004 f89e 	bl	800c044 <RCCEx_PLL3_Config>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8007f0e:	e00a      	b.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007f16:	e006      	b.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8007f18:	bf00      	nop
 8007f1a:	e004      	b.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8007f1c:	bf00      	nop
 8007f1e:	e002      	b.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8007f20:	bf00      	nop
 8007f22:	e000      	b.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8007f24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f26:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d10d      	bne.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8007f2e:	4b59      	ldr	r3, [pc, #356]	@ (8008094 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007f30:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007f34:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8007f38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007f40:	4a54      	ldr	r2, [pc, #336]	@ (8008094 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007f42:	430b      	orrs	r3, r1
 8007f44:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007f48:	e003      	b.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f4a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007f4e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007f52:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007f5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007f62:	2300      	movs	r3, #0
 8007f64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007f68:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	d055      	beq.n	800801e <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8007f72:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f76:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007f7a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007f7e:	d031      	beq.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8007f80:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007f84:	d82a      	bhi.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8007f86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f8a:	d02d      	beq.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8007f8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f90:	d824      	bhi.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8007f92:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007f96:	d029      	beq.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8007f98:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007f9c:	d81e      	bhi.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8007f9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fa2:	d011      	beq.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8007fa4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fa8:	d818      	bhi.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d020      	beq.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8007fae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fb2:	d113      	bne.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007fb4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007fb8:	3308      	adds	r3, #8
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f003 ffaa 	bl	800bf14 <RCCEx_PLL2_Config>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8007fc6:	e014      	b.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007fc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007fcc:	3330      	adds	r3, #48	@ 0x30
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f004 f838 	bl	800c044 <RCCEx_PLL3_Config>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8007fda:	e00a      	b.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007fe2:	e006      	b.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8007fe4:	bf00      	nop
 8007fe6:	e004      	b.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8007fe8:	bf00      	nop
 8007fea:	e002      	b.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8007fec:	bf00      	nop
 8007fee:	e000      	b.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8007ff0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ff2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d10d      	bne.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8007ffa:	4b26      	ldr	r3, [pc, #152]	@ (8008094 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007ffc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008000:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008004:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008008:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800800c:	4a21      	ldr	r2, [pc, #132]	@ (8008094 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800800e:	430b      	orrs	r3, r1
 8008010:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8008014:	e003      	b.n	800801e <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008016:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800801a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 800801e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008026:	2100      	movs	r1, #0
 8008028:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 800802c:	f003 0320 	and.w	r3, r3, #32
 8008030:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008034:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008038:	460b      	mov	r3, r1
 800803a:	4313      	orrs	r3, r2
 800803c:	d057      	beq.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 800803e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008042:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008046:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800804a:	d033      	beq.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 800804c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008050:	d82c      	bhi.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8008052:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008056:	d02f      	beq.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8008058:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800805c:	d826      	bhi.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800805e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008062:	d02b      	beq.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8008064:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008068:	d820      	bhi.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800806a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800806e:	d013      	beq.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008070:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008074:	d81a      	bhi.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8008076:	2b00      	cmp	r3, #0
 8008078:	d022      	beq.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 800807a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800807e:	d115      	bne.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008080:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008084:	3308      	adds	r3, #8
 8008086:	4618      	mov	r0, r3
 8008088:	f003 ff44 	bl	800bf14 <RCCEx_PLL2_Config>
 800808c:	4603      	mov	r3, r0
 800808e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8008092:	e016      	b.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8008094:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008098:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800809c:	3330      	adds	r3, #48	@ 0x30
 800809e:	4618      	mov	r0, r3
 80080a0:	f003 ffd0 	bl	800c044 <RCCEx_PLL3_Config>
 80080a4:	4603      	mov	r3, r0
 80080a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80080aa:	e00a      	b.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080ac:	2301      	movs	r3, #1
 80080ae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80080b2:	e006      	b.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80080b4:	bf00      	nop
 80080b6:	e004      	b.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80080b8:	bf00      	nop
 80080ba:	e002      	b.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80080bc:	bf00      	nop
 80080be:	e000      	b.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80080c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080c2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d10d      	bne.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 80080ca:	4bbb      	ldr	r3, [pc, #748]	@ (80083b8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80080cc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80080d0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80080d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80080d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80080dc:	4ab6      	ldr	r2, [pc, #728]	@ (80083b8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80080de:	430b      	orrs	r3, r1
 80080e0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80080e4:	e003      	b.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080e6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80080ea:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 80080ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80080f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f6:	2100      	movs	r1, #0
 80080f8:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 80080fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008100:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008104:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008108:	460b      	mov	r3, r1
 800810a:	4313      	orrs	r3, r2
 800810c:	d055      	beq.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 800810e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008112:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008116:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800811a:	d031      	beq.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 800811c:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8008120:	d82a      	bhi.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8008122:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008126:	d02d      	beq.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8008128:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800812c:	d824      	bhi.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800812e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008132:	d029      	beq.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8008134:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008138:	d81e      	bhi.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800813a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800813e:	d011      	beq.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8008140:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008144:	d818      	bhi.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8008146:	2b00      	cmp	r3, #0
 8008148:	d020      	beq.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 800814a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800814e:	d113      	bne.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008150:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008154:	3308      	adds	r3, #8
 8008156:	4618      	mov	r0, r3
 8008158:	f003 fedc 	bl	800bf14 <RCCEx_PLL2_Config>
 800815c:	4603      	mov	r3, r0
 800815e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8008162:	e014      	b.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008164:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008168:	3330      	adds	r3, #48	@ 0x30
 800816a:	4618      	mov	r0, r3
 800816c:	f003 ff6a 	bl	800c044 <RCCEx_PLL3_Config>
 8008170:	4603      	mov	r3, r0
 8008172:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8008176:	e00a      	b.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800817e:	e006      	b.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8008180:	bf00      	nop
 8008182:	e004      	b.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8008184:	bf00      	nop
 8008186:	e002      	b.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8008188:	bf00      	nop
 800818a:	e000      	b.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800818c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800818e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008192:	2b00      	cmp	r3, #0
 8008194:	d10d      	bne.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8008196:	4b88      	ldr	r3, [pc, #544]	@ (80083b8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008198:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800819c:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 80081a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80081a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80081a8:	4a83      	ldr	r2, [pc, #524]	@ (80083b8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80081aa:	430b      	orrs	r3, r1
 80081ac:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80081b0:	e003      	b.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081b2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80081b6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 80081ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80081be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c2:	2100      	movs	r1, #0
 80081c4:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 80081c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80081d0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80081d4:	460b      	mov	r3, r1
 80081d6:	4313      	orrs	r3, r2
 80081d8:	d055      	beq.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 80081da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80081de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80081e2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80081e6:	d031      	beq.n	800824c <HAL_RCCEx_PeriphCLKConfig+0x1188>
 80081e8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80081ec:	d82a      	bhi.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80081ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80081f2:	d02d      	beq.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 80081f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80081f8:	d824      	bhi.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80081fa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80081fe:	d029      	beq.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8008200:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008204:	d81e      	bhi.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8008206:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800820a:	d011      	beq.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 800820c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008210:	d818      	bhi.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8008212:	2b00      	cmp	r3, #0
 8008214:	d020      	beq.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8008216:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800821a:	d113      	bne.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800821c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008220:	3308      	adds	r3, #8
 8008222:	4618      	mov	r0, r3
 8008224:	f003 fe76 	bl	800bf14 <RCCEx_PLL2_Config>
 8008228:	4603      	mov	r3, r0
 800822a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800822e:	e014      	b.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008230:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008234:	3330      	adds	r3, #48	@ 0x30
 8008236:	4618      	mov	r0, r3
 8008238:	f003 ff04 	bl	800c044 <RCCEx_PLL3_Config>
 800823c:	4603      	mov	r3, r0
 800823e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8008242:	e00a      	b.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008244:	2301      	movs	r3, #1
 8008246:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800824a:	e006      	b.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800824c:	bf00      	nop
 800824e:	e004      	b.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8008250:	bf00      	nop
 8008252:	e002      	b.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8008254:	bf00      	nop
 8008256:	e000      	b.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8008258:	bf00      	nop
    }

    if (ret == HAL_OK)
 800825a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800825e:	2b00      	cmp	r3, #0
 8008260:	d10d      	bne.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8008262:	4b55      	ldr	r3, [pc, #340]	@ (80083b8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008264:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008268:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800826c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008270:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008274:	4a50      	ldr	r2, [pc, #320]	@ (80083b8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008276:	430b      	orrs	r3, r1
 8008278:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800827c:	e003      	b.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800827e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008282:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8008286:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800828a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828e:	2100      	movs	r1, #0
 8008290:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8008294:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008298:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800829c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80082a0:	460b      	mov	r3, r1
 80082a2:	4313      	orrs	r3, r2
 80082a4:	d055      	beq.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 80082a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80082aa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80082ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80082b2:	d031      	beq.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 80082b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80082b8:	d82a      	bhi.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80082ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082be:	d02d      	beq.n	800831c <HAL_RCCEx_PeriphCLKConfig+0x1258>
 80082c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082c4:	d824      	bhi.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80082c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80082ca:	d029      	beq.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 80082cc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80082d0:	d81e      	bhi.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80082d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082d6:	d011      	beq.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0x1238>
 80082d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082dc:	d818      	bhi.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d020      	beq.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 80082e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80082e6:	d113      	bne.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80082e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80082ec:	3308      	adds	r3, #8
 80082ee:	4618      	mov	r0, r3
 80082f0:	f003 fe10 	bl	800bf14 <RCCEx_PLL2_Config>
 80082f4:	4603      	mov	r3, r0
 80082f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80082fa:	e014      	b.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80082fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008300:	3330      	adds	r3, #48	@ 0x30
 8008302:	4618      	mov	r0, r3
 8008304:	f003 fe9e 	bl	800c044 <RCCEx_PLL3_Config>
 8008308:	4603      	mov	r3, r0
 800830a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800830e:	e00a      	b.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008316:	e006      	b.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8008318:	bf00      	nop
 800831a:	e004      	b.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800831c:	bf00      	nop
 800831e:	e002      	b.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8008320:	bf00      	nop
 8008322:	e000      	b.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8008324:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008326:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800832a:	2b00      	cmp	r3, #0
 800832c:	d10d      	bne.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 800832e:	4b22      	ldr	r3, [pc, #136]	@ (80083b8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008330:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008334:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008338:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800833c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008340:	4a1d      	ldr	r2, [pc, #116]	@ (80083b8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008342:	430b      	orrs	r3, r1
 8008344:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8008348:	e003      	b.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800834a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800834e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008352:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835a:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800835e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008362:	2300      	movs	r3, #0
 8008364:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008368:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800836c:	460b      	mov	r3, r1
 800836e:	4313      	orrs	r3, r2
 8008370:	d055      	beq.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8008372:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008376:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800837a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800837e:	d035      	beq.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8008380:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008384:	d82e      	bhi.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8008386:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800838a:	d031      	beq.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 800838c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008390:	d828      	bhi.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8008392:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008396:	d01b      	beq.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8008398:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800839c:	d822      	bhi.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d003      	beq.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 80083a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083a6:	d009      	beq.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 80083a8:	e01c      	b.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083aa:	4b03      	ldr	r3, [pc, #12]	@ (80083b8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80083ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ae:	4a02      	ldr	r2, [pc, #8]	@ (80083b8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80083b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083b4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80083b6:	e01c      	b.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 80083b8:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80083bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80083c0:	3308      	adds	r3, #8
 80083c2:	4618      	mov	r0, r3
 80083c4:	f003 fda6 	bl	800bf14 <RCCEx_PLL2_Config>
 80083c8:	4603      	mov	r3, r0
 80083ca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80083ce:	e010      	b.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80083d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80083d4:	3330      	adds	r3, #48	@ 0x30
 80083d6:	4618      	mov	r0, r3
 80083d8:	f003 fe34 	bl	800c044 <RCCEx_PLL3_Config>
 80083dc:	4603      	mov	r3, r0
 80083de:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80083e2:	e006      	b.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80083ea:	e002      	b.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80083ec:	bf00      	nop
 80083ee:	e000      	b.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80083f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083f2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d10d      	bne.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80083fa:	4bc3      	ldr	r3, [pc, #780]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80083fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008400:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008404:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008408:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800840c:	4abe      	ldr	r2, [pc, #760]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800840e:	430b      	orrs	r3, r1
 8008410:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008414:	e003      	b.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008416:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800841a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 800841e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008426:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800842a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800842e:	2300      	movs	r3, #0
 8008430:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008434:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008438:	460b      	mov	r3, r1
 800843a:	4313      	orrs	r3, r2
 800843c:	d051      	beq.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800843e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008442:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008446:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800844a:	d033      	beq.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 800844c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008450:	d82c      	bhi.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8008452:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8008456:	d02d      	beq.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8008458:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800845c:	d826      	bhi.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800845e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008462:	d019      	beq.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8008464:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008468:	d820      	bhi.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800846a:	2b00      	cmp	r3, #0
 800846c:	d003      	beq.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 800846e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008472:	d007      	beq.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8008474:	e01a      	b.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008476:	4ba4      	ldr	r3, [pc, #656]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800847a:	4aa3      	ldr	r2, [pc, #652]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800847c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008480:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8008482:	e018      	b.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008484:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008488:	3308      	adds	r3, #8
 800848a:	4618      	mov	r0, r3
 800848c:	f003 fd42 	bl	800bf14 <RCCEx_PLL2_Config>
 8008490:	4603      	mov	r3, r0
 8008492:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8008496:	e00e      	b.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008498:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800849c:	3330      	adds	r3, #48	@ 0x30
 800849e:	4618      	mov	r0, r3
 80084a0:	f003 fdd0 	bl	800c044 <RCCEx_PLL3_Config>
 80084a4:	4603      	mov	r3, r0
 80084a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80084aa:	e004      	b.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084ac:	2301      	movs	r3, #1
 80084ae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80084b2:	e000      	b.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 80084b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084b6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d10d      	bne.n	80084da <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80084be:	4b92      	ldr	r3, [pc, #584]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80084c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80084c4:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 80084c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80084cc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80084d0:	4a8d      	ldr	r2, [pc, #564]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80084d2:	430b      	orrs	r3, r1
 80084d4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80084d8:	e003      	b.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084da:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80084de:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80084e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80084e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ea:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80084ee:	67bb      	str	r3, [r7, #120]	@ 0x78
 80084f0:	2300      	movs	r3, #0
 80084f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80084f4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80084f8:	460b      	mov	r3, r1
 80084fa:	4313      	orrs	r3, r2
 80084fc:	d032      	beq.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80084fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008502:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8008506:	2b05      	cmp	r3, #5
 8008508:	d80f      	bhi.n	800852a <HAL_RCCEx_PeriphCLKConfig+0x1466>
 800850a:	2b03      	cmp	r3, #3
 800850c:	d211      	bcs.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 800850e:	2b01      	cmp	r3, #1
 8008510:	d911      	bls.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8008512:	2b02      	cmp	r3, #2
 8008514:	d109      	bne.n	800852a <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008516:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800851a:	3308      	adds	r3, #8
 800851c:	4618      	mov	r0, r3
 800851e:	f003 fcf9 	bl	800bf14 <RCCEx_PLL2_Config>
 8008522:	4603      	mov	r3, r0
 8008524:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008528:	e006      	b.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008530:	e002      	b.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8008532:	bf00      	nop
 8008534:	e000      	b.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8008536:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008538:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800853c:	2b00      	cmp	r3, #0
 800853e:	d10d      	bne.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8008540:	4b71      	ldr	r3, [pc, #452]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008542:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008546:	f023 0107 	bic.w	r1, r3, #7
 800854a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800854e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8008552:	4a6d      	ldr	r2, [pc, #436]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008554:	430b      	orrs	r3, r1
 8008556:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800855a:	e003      	b.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800855c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008560:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8008564:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856c:	2100      	movs	r1, #0
 800856e:	6739      	str	r1, [r7, #112]	@ 0x70
 8008570:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008574:	677b      	str	r3, [r7, #116]	@ 0x74
 8008576:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800857a:	460b      	mov	r3, r1
 800857c:	4313      	orrs	r3, r2
 800857e:	d024      	beq.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8008580:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008584:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008588:	2b00      	cmp	r3, #0
 800858a:	d005      	beq.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 800858c:	2b08      	cmp	r3, #8
 800858e:	d005      	beq.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008596:	e002      	b.n	800859e <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8008598:	bf00      	nop
 800859a:	e000      	b.n	800859e <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 800859c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800859e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d10d      	bne.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80085a6:	4b58      	ldr	r3, [pc, #352]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80085a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80085ac:	f023 0108 	bic.w	r1, r3, #8
 80085b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80085b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80085b8:	4a53      	ldr	r2, [pc, #332]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80085ba:	430b      	orrs	r3, r1
 80085bc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80085c0:	e003      	b.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085c2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80085c6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80085ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80085ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d2:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80085d6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80085d8:	2300      	movs	r3, #0
 80085da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80085dc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80085e0:	460b      	mov	r3, r1
 80085e2:	4313      	orrs	r3, r2
 80085e4:	f000 80b9 	beq.w	800875a <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80085e8:	4b48      	ldr	r3, [pc, #288]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80085ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ec:	4a47      	ldr	r2, [pc, #284]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80085ee:	f043 0301 	orr.w	r3, r3, #1
 80085f2:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80085f4:	f7fa fc20 	bl	8002e38 <HAL_GetTick>
 80085f8:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80085fc:	e00b      	b.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085fe:	f7fa fc1b 	bl	8002e38 <HAL_GetTick>
 8008602:	4602      	mov	r2, r0
 8008604:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8008608:	1ad3      	subs	r3, r2, r3
 800860a:	2b02      	cmp	r3, #2
 800860c:	d903      	bls.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 800860e:	2303      	movs	r3, #3
 8008610:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008614:	e005      	b.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8008616:	4b3d      	ldr	r3, [pc, #244]	@ (800870c <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8008618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800861a:	f003 0301 	and.w	r3, r3, #1
 800861e:	2b00      	cmp	r3, #0
 8008620:	d0ed      	beq.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8008622:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008626:	2b00      	cmp	r3, #0
 8008628:	f040 8093 	bne.w	8008752 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800862c:	4b36      	ldr	r3, [pc, #216]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800862e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008632:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008636:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800863a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800863e:	2b00      	cmp	r3, #0
 8008640:	d023      	beq.n	800868a <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8008642:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008646:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 800864a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800864e:	4293      	cmp	r3, r2
 8008650:	d01b      	beq.n	800868a <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008652:	4b2d      	ldr	r3, [pc, #180]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008654:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008658:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800865c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008660:	4b29      	ldr	r3, [pc, #164]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008662:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008666:	4a28      	ldr	r2, [pc, #160]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008668:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800866c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008670:	4b25      	ldr	r3, [pc, #148]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008672:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008676:	4a24      	ldr	r2, [pc, #144]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008678:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800867c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008680:	4a21      	ldr	r2, [pc, #132]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008682:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8008686:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800868a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800868e:	f003 0301 	and.w	r3, r3, #1
 8008692:	2b00      	cmp	r3, #0
 8008694:	d019      	beq.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008696:	f7fa fbcf 	bl	8002e38 <HAL_GetTick>
 800869a:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800869e:	e00d      	b.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086a0:	f7fa fbca 	bl	8002e38 <HAL_GetTick>
 80086a4:	4602      	mov	r2, r0
 80086a6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80086aa:	1ad2      	subs	r2, r2, r3
 80086ac:	f241 3388 	movw	r3, #5000	@ 0x1388
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d903      	bls.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 80086b4:	2303      	movs	r3, #3
 80086b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 80086ba:	e006      	b.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80086bc:	4b12      	ldr	r3, [pc, #72]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80086be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80086c2:	f003 0302 	and.w	r3, r3, #2
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d0ea      	beq.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 80086ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d13a      	bne.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80086d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80086d6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80086da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80086e2:	d115      	bne.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 80086e4:	4b08      	ldr	r3, [pc, #32]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80086e6:	69db      	ldr	r3, [r3, #28]
 80086e8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80086ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80086f0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80086f4:	091b      	lsrs	r3, r3, #4
 80086f6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80086fa:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80086fe:	4a02      	ldr	r2, [pc, #8]	@ (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008700:	430b      	orrs	r3, r1
 8008702:	61d3      	str	r3, [r2, #28]
 8008704:	e00a      	b.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8008706:	bf00      	nop
 8008708:	44020c00 	.word	0x44020c00
 800870c:	44020800 	.word	0x44020800
 8008710:	4b9f      	ldr	r3, [pc, #636]	@ (8008990 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008712:	69db      	ldr	r3, [r3, #28]
 8008714:	4a9e      	ldr	r2, [pc, #632]	@ (8008990 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008716:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800871a:	61d3      	str	r3, [r2, #28]
 800871c:	4b9c      	ldr	r3, [pc, #624]	@ (8008990 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800871e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008722:	4a9b      	ldr	r2, [pc, #620]	@ (8008990 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008724:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008728:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800872c:	4b98      	ldr	r3, [pc, #608]	@ (8008990 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800872e:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8008732:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008736:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800873a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800873e:	4a94      	ldr	r2, [pc, #592]	@ (8008990 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008740:	430b      	orrs	r3, r1
 8008742:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008746:	e008      	b.n	800875a <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008748:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800874c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 8008750:	e003      	b.n	800875a <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008752:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008756:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800875a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800875e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008762:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8008766:	663b      	str	r3, [r7, #96]	@ 0x60
 8008768:	2300      	movs	r3, #0
 800876a:	667b      	str	r3, [r7, #100]	@ 0x64
 800876c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008770:	460b      	mov	r3, r1
 8008772:	4313      	orrs	r3, r2
 8008774:	d035      	beq.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8008776:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800877a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800877e:	2b30      	cmp	r3, #48	@ 0x30
 8008780:	d014      	beq.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8008782:	2b30      	cmp	r3, #48	@ 0x30
 8008784:	d80e      	bhi.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8008786:	2b20      	cmp	r3, #32
 8008788:	d012      	beq.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 800878a:	2b20      	cmp	r3, #32
 800878c:	d80a      	bhi.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800878e:	2b00      	cmp	r3, #0
 8008790:	d010      	beq.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8008792:	2b10      	cmp	r3, #16
 8008794:	d106      	bne.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008796:	4b7e      	ldr	r3, [pc, #504]	@ (8008990 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800879a:	4a7d      	ldr	r2, [pc, #500]	@ (8008990 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800879c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80087a0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80087a2:	e008      	b.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087a4:	2301      	movs	r3, #1
 80087a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80087aa:	e004      	b.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80087ac:	bf00      	nop
 80087ae:	e002      	b.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80087b0:	bf00      	nop
 80087b2:	e000      	b.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80087b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087b6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d10d      	bne.n	80087da <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80087be:	4b74      	ldr	r3, [pc, #464]	@ (8008990 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80087c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80087c4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80087c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80087cc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80087d0:	4a6f      	ldr	r2, [pc, #444]	@ (8008990 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80087d2:	430b      	orrs	r3, r1
 80087d4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80087d8:	e003      	b.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087da:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80087de:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80087e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80087e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ea:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80087ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 80087f0:	2300      	movs	r3, #0
 80087f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80087f4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80087f8:	460b      	mov	r3, r1
 80087fa:	4313      	orrs	r3, r2
 80087fc:	d033      	beq.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 80087fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008802:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8008806:	2b00      	cmp	r3, #0
 8008808:	d002      	beq.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 800880a:	2b40      	cmp	r3, #64	@ 0x40
 800880c:	d007      	beq.n	800881e <HAL_RCCEx_PeriphCLKConfig+0x175a>
 800880e:	e010      	b.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008810:	4b5f      	ldr	r3, [pc, #380]	@ (8008990 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008814:	4a5e      	ldr	r2, [pc, #376]	@ (8008990 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008816:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800881a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800881c:	e00d      	b.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800881e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008822:	3308      	adds	r3, #8
 8008824:	4618      	mov	r0, r3
 8008826:	f003 fb75 	bl	800bf14 <RCCEx_PLL2_Config>
 800882a:	4603      	mov	r3, r0
 800882c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8008830:	e003      	b.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008838:	bf00      	nop
    }

    if (ret == HAL_OK)
 800883a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800883e:	2b00      	cmp	r3, #0
 8008840:	d10d      	bne.n	800885e <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8008842:	4b53      	ldr	r3, [pc, #332]	@ (8008990 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008844:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008848:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 800884c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008850:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8008854:	4a4e      	ldr	r2, [pc, #312]	@ (8008990 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008856:	430b      	orrs	r3, r1
 8008858:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800885c:	e003      	b.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800885e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008862:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8008866:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800886a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800886e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008872:	653b      	str	r3, [r7, #80]	@ 0x50
 8008874:	2300      	movs	r3, #0
 8008876:	657b      	str	r3, [r7, #84]	@ 0x54
 8008878:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800887c:	460b      	mov	r3, r1
 800887e:	4313      	orrs	r3, r2
 8008880:	d033      	beq.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8008882:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008886:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800888a:	2b00      	cmp	r3, #0
 800888c:	d002      	beq.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 800888e:	2b80      	cmp	r3, #128	@ 0x80
 8008890:	d007      	beq.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8008892:	e010      	b.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008894:	4b3e      	ldr	r3, [pc, #248]	@ (8008990 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008898:	4a3d      	ldr	r2, [pc, #244]	@ (8008990 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800889a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800889e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80088a0:	e00d      	b.n	80088be <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80088a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80088a6:	3308      	adds	r3, #8
 80088a8:	4618      	mov	r0, r3
 80088aa:	f003 fb33 	bl	800bf14 <RCCEx_PLL2_Config>
 80088ae:	4603      	mov	r3, r0
 80088b0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80088b4:	e003      	b.n	80088be <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80088bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088be:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d10d      	bne.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 80088c6:	4b32      	ldr	r3, [pc, #200]	@ (8008990 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80088c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80088cc:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80088d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80088d4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80088d8:	4a2d      	ldr	r2, [pc, #180]	@ (8008990 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80088da:	430b      	orrs	r3, r1
 80088dc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80088e0:	e003      	b.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088e2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80088e6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80088ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80088ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f2:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80088f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80088f8:	2300      	movs	r3, #0
 80088fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80088fc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008900:	460b      	mov	r3, r1
 8008902:	4313      	orrs	r3, r2
 8008904:	d04a      	beq.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8008906:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800890a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800890e:	2b04      	cmp	r3, #4
 8008910:	d827      	bhi.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8008912:	a201      	add	r2, pc, #4	@ (adr r2, 8008918 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8008914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008918:	0800892d 	.word	0x0800892d
 800891c:	0800893b 	.word	0x0800893b
 8008920:	0800894f 	.word	0x0800894f
 8008924:	0800896b 	.word	0x0800896b
 8008928:	0800896b 	.word	0x0800896b
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800892c:	4b18      	ldr	r3, [pc, #96]	@ (8008990 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800892e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008930:	4a17      	ldr	r2, [pc, #92]	@ (8008990 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008932:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008936:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8008938:	e018      	b.n	800896c <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800893a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800893e:	3308      	adds	r3, #8
 8008940:	4618      	mov	r0, r3
 8008942:	f003 fae7 	bl	800bf14 <RCCEx_PLL2_Config>
 8008946:	4603      	mov	r3, r0
 8008948:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800894c:	e00e      	b.n	800896c <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800894e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008952:	3330      	adds	r3, #48	@ 0x30
 8008954:	4618      	mov	r0, r3
 8008956:	f003 fb75 	bl	800c044 <RCCEx_PLL3_Config>
 800895a:	4603      	mov	r3, r0
 800895c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8008960:	e004      	b.n	800896c <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008962:	2301      	movs	r3, #1
 8008964:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008968:	e000      	b.n	800896c <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 800896a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800896c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008970:	2b00      	cmp	r3, #0
 8008972:	d10f      	bne.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8008974:	4b06      	ldr	r3, [pc, #24]	@ (8008990 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800897a:	f023 0107 	bic.w	r1, r3, #7
 800897e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008986:	4a02      	ldr	r2, [pc, #8]	@ (8008990 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008988:	430b      	orrs	r3, r1
 800898a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800898e:	e005      	b.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8008990:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008994:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008998:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800899c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80089a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80089a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80089aa:	2300      	movs	r3, #0
 80089ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80089ae:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80089b2:	460b      	mov	r3, r1
 80089b4:	4313      	orrs	r3, r2
 80089b6:	f000 8081 	beq.w	8008abc <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 80089ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80089be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80089c2:	2b20      	cmp	r3, #32
 80089c4:	d85f      	bhi.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 80089c6:	a201      	add	r2, pc, #4	@ (adr r2, 80089cc <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 80089c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089cc:	08008a51 	.word	0x08008a51
 80089d0:	08008a87 	.word	0x08008a87
 80089d4:	08008a87 	.word	0x08008a87
 80089d8:	08008a87 	.word	0x08008a87
 80089dc:	08008a87 	.word	0x08008a87
 80089e0:	08008a87 	.word	0x08008a87
 80089e4:	08008a87 	.word	0x08008a87
 80089e8:	08008a87 	.word	0x08008a87
 80089ec:	08008a5f 	.word	0x08008a5f
 80089f0:	08008a87 	.word	0x08008a87
 80089f4:	08008a87 	.word	0x08008a87
 80089f8:	08008a87 	.word	0x08008a87
 80089fc:	08008a87 	.word	0x08008a87
 8008a00:	08008a87 	.word	0x08008a87
 8008a04:	08008a87 	.word	0x08008a87
 8008a08:	08008a87 	.word	0x08008a87
 8008a0c:	08008a73 	.word	0x08008a73
 8008a10:	08008a87 	.word	0x08008a87
 8008a14:	08008a87 	.word	0x08008a87
 8008a18:	08008a87 	.word	0x08008a87
 8008a1c:	08008a87 	.word	0x08008a87
 8008a20:	08008a87 	.word	0x08008a87
 8008a24:	08008a87 	.word	0x08008a87
 8008a28:	08008a87 	.word	0x08008a87
 8008a2c:	08008a8f 	.word	0x08008a8f
 8008a30:	08008a87 	.word	0x08008a87
 8008a34:	08008a87 	.word	0x08008a87
 8008a38:	08008a87 	.word	0x08008a87
 8008a3c:	08008a87 	.word	0x08008a87
 8008a40:	08008a87 	.word	0x08008a87
 8008a44:	08008a87 	.word	0x08008a87
 8008a48:	08008a87 	.word	0x08008a87
 8008a4c:	08008a8f 	.word	0x08008a8f
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a50:	4bab      	ldr	r3, [pc, #684]	@ (8008d00 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a54:	4aaa      	ldr	r2, [pc, #680]	@ (8008d00 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008a56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a5a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8008a5c:	e018      	b.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008a5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008a62:	3308      	adds	r3, #8
 8008a64:	4618      	mov	r0, r3
 8008a66:	f003 fa55 	bl	800bf14 <RCCEx_PLL2_Config>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8008a70:	e00e      	b.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008a72:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008a76:	3330      	adds	r3, #48	@ 0x30
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f003 fae3 	bl	800c044 <RCCEx_PLL3_Config>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8008a84:	e004      	b.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008a8c:	e000      	b.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8008a8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a90:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d10d      	bne.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8008a98:	4b99      	ldr	r3, [pc, #612]	@ (8008d00 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008a9e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008aa2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008aa6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008aaa:	4a95      	ldr	r2, [pc, #596]	@ (8008d00 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008aac:	430b      	orrs	r3, r1
 8008aae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008ab2:	e003      	b.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ab4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008ab8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8008abc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008aca:	2300      	movs	r3, #0
 8008acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ace:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	d04e      	beq.n	8008b76 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8008ad8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008adc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008ae0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ae4:	d02e      	beq.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8008ae6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008aea:	d827      	bhi.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8008aec:	2bc0      	cmp	r3, #192	@ 0xc0
 8008aee:	d02b      	beq.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8008af0:	2bc0      	cmp	r3, #192	@ 0xc0
 8008af2:	d823      	bhi.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8008af4:	2b80      	cmp	r3, #128	@ 0x80
 8008af6:	d017      	beq.n	8008b28 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8008af8:	2b80      	cmp	r3, #128	@ 0x80
 8008afa:	d81f      	bhi.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d002      	beq.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8008b00:	2b40      	cmp	r3, #64	@ 0x40
 8008b02:	d007      	beq.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8008b04:	e01a      	b.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b06:	4b7e      	ldr	r3, [pc, #504]	@ (8008d00 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b0a:	4a7d      	ldr	r2, [pc, #500]	@ (8008d00 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008b0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b10:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8008b12:	e01a      	b.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008b14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008b18:	3308      	adds	r3, #8
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f003 f9fa 	bl	800bf14 <RCCEx_PLL2_Config>
 8008b20:	4603      	mov	r3, r0
 8008b22:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8008b26:	e010      	b.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008b28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008b2c:	3330      	adds	r3, #48	@ 0x30
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f003 fa88 	bl	800c044 <RCCEx_PLL3_Config>
 8008b34:	4603      	mov	r3, r0
 8008b36:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8008b3a:	e006      	b.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008b42:	e002      	b.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8008b44:	bf00      	nop
 8008b46:	e000      	b.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8008b48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b4a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d10d      	bne.n	8008b6e <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8008b52:	4b6b      	ldr	r3, [pc, #428]	@ (8008d00 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008b58:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008b5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008b60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008b64:	4a66      	ldr	r2, [pc, #408]	@ (8008d00 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008b66:	430b      	orrs	r3, r1
 8008b68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008b6c:	e003      	b.n	8008b76 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b6e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008b72:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8008b76:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008b82:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b84:	2300      	movs	r3, #0
 8008b86:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b88:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008b8c:	460b      	mov	r3, r1
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	d055      	beq.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8008b92:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008b96:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8008b9a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008b9e:	d031      	beq.n	8008c04 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8008ba0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008ba4:	d82a      	bhi.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8008ba6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008baa:	d02d      	beq.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8008bac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008bb0:	d824      	bhi.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8008bb2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008bb6:	d029      	beq.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8008bb8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008bbc:	d81e      	bhi.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8008bbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bc2:	d011      	beq.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8008bc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bc8:	d818      	bhi.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d020      	beq.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8008bce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bd2:	d113      	bne.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008bd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008bd8:	3308      	adds	r3, #8
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f003 f99a 	bl	800bf14 <RCCEx_PLL2_Config>
 8008be0:	4603      	mov	r3, r0
 8008be2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8008be6:	e014      	b.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008be8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008bec:	3330      	adds	r3, #48	@ 0x30
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f003 fa28 	bl	800c044 <RCCEx_PLL3_Config>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8008bfa:	e00a      	b.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008c02:	e006      	b.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8008c04:	bf00      	nop
 8008c06:	e004      	b.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8008c08:	bf00      	nop
 8008c0a:	e002      	b.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8008c0c:	bf00      	nop
 8008c0e:	e000      	b.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8008c10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c12:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d10d      	bne.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8008c1a:	4b39      	ldr	r3, [pc, #228]	@ (8008d00 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008c20:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8008c24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008c28:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8008c2c:	4a34      	ldr	r2, [pc, #208]	@ (8008d00 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008c2e:	430b      	orrs	r3, r1
 8008c30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008c34:	e003      	b.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c36:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008c3a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8008c3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c46:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c50:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008c54:	460b      	mov	r3, r1
 8008c56:	4313      	orrs	r3, r2
 8008c58:	d058      	beq.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8008c5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008c5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c62:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008c66:	d031      	beq.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8008c68:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008c6c:	d82a      	bhi.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8008c6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c72:	d02d      	beq.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8008c74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c78:	d824      	bhi.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8008c7a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008c7e:	d029      	beq.n	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8008c80:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008c84:	d81e      	bhi.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8008c86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c8a:	d011      	beq.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8008c8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c90:	d818      	bhi.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d020      	beq.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8008c96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c9a:	d113      	bne.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008c9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008ca0:	3308      	adds	r3, #8
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f003 f936 	bl	800bf14 <RCCEx_PLL2_Config>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8008cae:	e014      	b.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008cb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008cb4:	3330      	adds	r3, #48	@ 0x30
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f003 f9c4 	bl	800c044 <RCCEx_PLL3_Config>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8008cc2:	e00a      	b.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008cca:	e006      	b.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8008ccc:	bf00      	nop
 8008cce:	e004      	b.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8008cd0:	bf00      	nop
 8008cd2:	e002      	b.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8008cd4:	bf00      	nop
 8008cd6:	e000      	b.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8008cd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cda:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d110      	bne.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8008ce2:	4b07      	ldr	r3, [pc, #28]	@ (8008d00 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008ce8:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8008cec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008cf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008cf4:	4902      	ldr	r1, [pc, #8]	@ (8008d00 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8008cfc:	e006      	b.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8008cfe:	bf00      	nop
 8008d00:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d04:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008d08:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008d0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d14:	2100      	movs	r1, #0
 8008d16:	6239      	str	r1, [r7, #32]
 8008d18:	f003 0301 	and.w	r3, r3, #1
 8008d1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d1e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008d22:	460b      	mov	r3, r1
 8008d24:	4313      	orrs	r3, r2
 8008d26:	d055      	beq.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8008d28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008d2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008d30:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8008d34:	d031      	beq.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8008d36:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8008d3a:	d82a      	bhi.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8008d3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d40:	d02d      	beq.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8008d42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d46:	d824      	bhi.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8008d48:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8008d4c:	d029      	beq.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8008d4e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8008d52:	d81e      	bhi.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8008d54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d58:	d011      	beq.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8008d5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d5e:	d818      	bhi.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d020      	beq.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8008d64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d68:	d113      	bne.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008d6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008d6e:	3308      	adds	r3, #8
 8008d70:	4618      	mov	r0, r3
 8008d72:	f003 f8cf 	bl	800bf14 <RCCEx_PLL2_Config>
 8008d76:	4603      	mov	r3, r0
 8008d78:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008d7c:	e014      	b.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008d7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008d82:	3330      	adds	r3, #48	@ 0x30
 8008d84:	4618      	mov	r0, r3
 8008d86:	f003 f95d 	bl	800c044 <RCCEx_PLL3_Config>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008d90:	e00a      	b.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d92:	2301      	movs	r3, #1
 8008d94:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008d98:	e006      	b.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8008d9a:	bf00      	nop
 8008d9c:	e004      	b.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8008d9e:	bf00      	nop
 8008da0:	e002      	b.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8008da2:	bf00      	nop
 8008da4:	e000      	b.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8008da6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008da8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d10d      	bne.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8008db0:	4b88      	ldr	r3, [pc, #544]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008db6:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8008dba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008dbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008dc2:	4984      	ldr	r1, [pc, #528]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8008dca:	e003      	b.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dcc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008dd0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008dd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ddc:	2100      	movs	r1, #0
 8008dde:	61b9      	str	r1, [r7, #24]
 8008de0:	f003 0302 	and.w	r3, r3, #2
 8008de4:	61fb      	str	r3, [r7, #28]
 8008de6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008dea:	460b      	mov	r3, r1
 8008dec:	4313      	orrs	r3, r2
 8008dee:	d03d      	beq.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8008df0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008df4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008df8:	2b03      	cmp	r3, #3
 8008dfa:	d81c      	bhi.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8008dfc:	a201      	add	r2, pc, #4	@ (adr r2, 8008e04 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8008dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e02:	bf00      	nop
 8008e04:	08008e3f 	.word	0x08008e3f
 8008e08:	08008e15 	.word	0x08008e15
 8008e0c:	08008e23 	.word	0x08008e23
 8008e10:	08008e3f 	.word	0x08008e3f
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e14:	4b6f      	ldr	r3, [pc, #444]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e18:	4a6e      	ldr	r2, [pc, #440]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008e1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e1e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8008e20:	e00e      	b.n	8008e40 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008e22:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008e26:	3308      	adds	r3, #8
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f003 f873 	bl	800bf14 <RCCEx_PLL2_Config>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8008e34:	e004      	b.n	8008e40 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e36:	2301      	movs	r3, #1
 8008e38:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008e3c:	e000      	b.n	8008e40 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8008e3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e40:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d10d      	bne.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8008e48:	4b62      	ldr	r3, [pc, #392]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008e4a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008e4e:	f023 0203 	bic.w	r2, r3, #3
 8008e52:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008e56:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008e5a:	495e      	ldr	r1, [pc, #376]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8008e62:	e003      	b.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e64:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008e68:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008e6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e74:	2100      	movs	r1, #0
 8008e76:	6139      	str	r1, [r7, #16]
 8008e78:	f003 0304 	and.w	r3, r3, #4
 8008e7c:	617b      	str	r3, [r7, #20]
 8008e7e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008e82:	460b      	mov	r3, r1
 8008e84:	4313      	orrs	r3, r2
 8008e86:	d03a      	beq.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8008e88:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008e8c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008e90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e94:	d00e      	beq.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8008e96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e9a:	d815      	bhi.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d017      	beq.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8008ea0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ea4:	d110      	bne.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ea6:	4b4b      	ldr	r3, [pc, #300]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eaa:	4a4a      	ldr	r2, [pc, #296]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008eac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008eb0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8008eb2:	e00e      	b.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008eb4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008eb8:	3308      	adds	r3, #8
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f003 f82a 	bl	800bf14 <RCCEx_PLL2_Config>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8008ec6:	e004      	b.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008ece:	e000      	b.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8008ed0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ed2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d10d      	bne.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8008eda:	4b3e      	ldr	r3, [pc, #248]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008edc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008ee0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008ee4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008ee8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008eec:	4939      	ldr	r1, [pc, #228]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8008ef4:	e003      	b.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ef6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008efa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008efe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f06:	2100      	movs	r1, #0
 8008f08:	60b9      	str	r1, [r7, #8]
 8008f0a:	f003 0310 	and.w	r3, r3, #16
 8008f0e:	60fb      	str	r3, [r7, #12]
 8008f10:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008f14:	460b      	mov	r3, r1
 8008f16:	4313      	orrs	r3, r2
 8008f18:	d038      	beq.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8008f1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008f1e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8008f22:	2b30      	cmp	r3, #48	@ 0x30
 8008f24:	d01b      	beq.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8008f26:	2b30      	cmp	r3, #48	@ 0x30
 8008f28:	d815      	bhi.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8008f2a:	2b10      	cmp	r3, #16
 8008f2c:	d002      	beq.n	8008f34 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8008f2e:	2b20      	cmp	r3, #32
 8008f30:	d007      	beq.n	8008f42 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8008f32:	e010      	b.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f34:	4b27      	ldr	r3, [pc, #156]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f38:	4a26      	ldr	r2, [pc, #152]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008f3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f3e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8008f40:	e00e      	b.n	8008f60 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008f42:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008f46:	3330      	adds	r3, #48	@ 0x30
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f003 f87b 	bl	800c044 <RCCEx_PLL3_Config>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8008f54:	e004      	b.n	8008f60 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f56:	2301      	movs	r3, #1
 8008f58:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008f5c:	e000      	b.n	8008f60 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8008f5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f60:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d10d      	bne.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8008f68:	4b1a      	ldr	r3, [pc, #104]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008f6a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008f6e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008f72:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008f76:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8008f7a:	4916      	ldr	r1, [pc, #88]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8008f82:	e003      	b.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f84:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008f88:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008f8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f94:	2100      	movs	r1, #0
 8008f96:	6039      	str	r1, [r7, #0]
 8008f98:	f003 0308 	and.w	r3, r3, #8
 8008f9c:	607b      	str	r3, [r7, #4]
 8008f9e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008fa2:	460b      	mov	r3, r1
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	d00c      	beq.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8008fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008faa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008fae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008fb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008fb6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8008fba:	4906      	ldr	r1, [pc, #24]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8008fc2:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008fd2:	bf00      	nop
 8008fd4:	44020c00 	.word	0x44020c00

08008fd8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b08b      	sub	sp, #44	@ 0x2c
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8008fe0:	4bae      	ldr	r3, [pc, #696]	@ (800929c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008fe2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fe8:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8008fea:	4bac      	ldr	r3, [pc, #688]	@ (800929c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fee:	f003 0303 	and.w	r3, r3, #3
 8008ff2:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8008ff4:	4ba9      	ldr	r3, [pc, #676]	@ (800929c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ff8:	0a1b      	lsrs	r3, r3, #8
 8008ffa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ffe:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8009000:	4ba6      	ldr	r3, [pc, #664]	@ (800929c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8009002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009004:	091b      	lsrs	r3, r3, #4
 8009006:	f003 0301 	and.w	r3, r3, #1
 800900a:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800900c:	4ba3      	ldr	r3, [pc, #652]	@ (800929c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800900e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009010:	08db      	lsrs	r3, r3, #3
 8009012:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009016:	697a      	ldr	r2, [r7, #20]
 8009018:	fb02 f303 	mul.w	r3, r2, r3
 800901c:	ee07 3a90 	vmov	s15, r3
 8009020:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009024:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8009028:	69bb      	ldr	r3, [r7, #24]
 800902a:	2b00      	cmp	r3, #0
 800902c:	f000 8126 	beq.w	800927c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8009030:	69fb      	ldr	r3, [r7, #28]
 8009032:	2b03      	cmp	r3, #3
 8009034:	d053      	beq.n	80090de <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8009036:	69fb      	ldr	r3, [r7, #28]
 8009038:	2b03      	cmp	r3, #3
 800903a:	d86f      	bhi.n	800911c <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	2b01      	cmp	r3, #1
 8009040:	d003      	beq.n	800904a <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8009042:	69fb      	ldr	r3, [r7, #28]
 8009044:	2b02      	cmp	r3, #2
 8009046:	d02b      	beq.n	80090a0 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8009048:	e068      	b.n	800911c <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800904a:	4b94      	ldr	r3, [pc, #592]	@ (800929c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	08db      	lsrs	r3, r3, #3
 8009050:	f003 0303 	and.w	r3, r3, #3
 8009054:	4a92      	ldr	r2, [pc, #584]	@ (80092a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8009056:	fa22 f303 	lsr.w	r3, r2, r3
 800905a:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	ee07 3a90 	vmov	s15, r3
 8009062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009066:	69bb      	ldr	r3, [r7, #24]
 8009068:	ee07 3a90 	vmov	s15, r3
 800906c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009070:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009074:	6a3b      	ldr	r3, [r7, #32]
 8009076:	ee07 3a90 	vmov	s15, r3
 800907a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800907e:	ed97 6a04 	vldr	s12, [r7, #16]
 8009082:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80092a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8009086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800908a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800908e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800909a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800909e:	e068      	b.n	8009172 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80090a0:	69bb      	ldr	r3, [r7, #24]
 80090a2:	ee07 3a90 	vmov	s15, r3
 80090a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090aa:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80092a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 80090ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090b2:	6a3b      	ldr	r3, [r7, #32]
 80090b4:	ee07 3a90 	vmov	s15, r3
 80090b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090bc:	ed97 6a04 	vldr	s12, [r7, #16]
 80090c0:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80092a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80090c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090d8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80090dc:	e049      	b.n	8009172 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80090de:	69bb      	ldr	r3, [r7, #24]
 80090e0:	ee07 3a90 	vmov	s15, r3
 80090e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090e8:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80092ac <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 80090ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090f0:	6a3b      	ldr	r3, [r7, #32]
 80090f2:	ee07 3a90 	vmov	s15, r3
 80090f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090fa:	ed97 6a04 	vldr	s12, [r7, #16]
 80090fe:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80092a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8009102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800910a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800910e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009116:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800911a:	e02a      	b.n	8009172 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800911c:	4b5f      	ldr	r3, [pc, #380]	@ (800929c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	08db      	lsrs	r3, r3, #3
 8009122:	f003 0303 	and.w	r3, r3, #3
 8009126:	4a5e      	ldr	r2, [pc, #376]	@ (80092a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8009128:	fa22 f303 	lsr.w	r3, r2, r3
 800912c:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	ee07 3a90 	vmov	s15, r3
 8009134:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009138:	69bb      	ldr	r3, [r7, #24]
 800913a:	ee07 3a90 	vmov	s15, r3
 800913e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009146:	6a3b      	ldr	r3, [r7, #32]
 8009148:	ee07 3a90 	vmov	s15, r3
 800914c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009150:	ed97 6a04 	vldr	s12, [r7, #16]
 8009154:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80092a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8009158:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800915c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009160:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009164:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009168:	ee67 7a27 	vmul.f32	s15, s14, s15
 800916c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8009170:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009172:	4b4a      	ldr	r3, [pc, #296]	@ (800929c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800917a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800917e:	d121      	bne.n	80091c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8009180:	4b46      	ldr	r3, [pc, #280]	@ (800929c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8009182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009184:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009188:	2b00      	cmp	r3, #0
 800918a:	d017      	beq.n	80091bc <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800918c:	4b43      	ldr	r3, [pc, #268]	@ (800929c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800918e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009190:	0a5b      	lsrs	r3, r3, #9
 8009192:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009196:	ee07 3a90 	vmov	s15, r3
 800919a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 800919e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80091a2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80091a6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80091aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091b2:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	601a      	str	r2, [r3, #0]
 80091ba:	e006      	b.n	80091ca <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2200      	movs	r2, #0
 80091c0:	601a      	str	r2, [r3, #0]
 80091c2:	e002      	b.n	80091ca <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80091ca:	4b34      	ldr	r3, [pc, #208]	@ (800929c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80091d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80091d6:	d121      	bne.n	800921c <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80091d8:	4b30      	ldr	r3, [pc, #192]	@ (800929c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80091da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d017      	beq.n	8009214 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80091e4:	4b2d      	ldr	r3, [pc, #180]	@ (800929c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80091e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091e8:	0c1b      	lsrs	r3, r3, #16
 80091ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091ee:	ee07 3a90 	vmov	s15, r3
 80091f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 80091f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80091fa:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80091fe:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009202:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009206:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800920a:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	605a      	str	r2, [r3, #4]
 8009212:	e006      	b.n	8009222 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2200      	movs	r2, #0
 8009218:	605a      	str	r2, [r3, #4]
 800921a:	e002      	b.n	8009222 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2200      	movs	r2, #0
 8009220:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009222:	4b1e      	ldr	r3, [pc, #120]	@ (800929c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800922a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800922e:	d121      	bne.n	8009274 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8009230:	4b1a      	ldr	r3, [pc, #104]	@ (800929c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8009232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009234:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009238:	2b00      	cmp	r3, #0
 800923a:	d017      	beq.n	800926c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800923c:	4b17      	ldr	r3, [pc, #92]	@ (800929c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800923e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009240:	0e1b      	lsrs	r3, r3, #24
 8009242:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009246:	ee07 3a90 	vmov	s15, r3
 800924a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 800924e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009252:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8009256:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800925a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800925e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009262:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800926a:	e010      	b.n	800928e <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2200      	movs	r2, #0
 8009270:	609a      	str	r2, [r3, #8]
}
 8009272:	e00c      	b.n	800928e <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2200      	movs	r2, #0
 8009278:	609a      	str	r2, [r3, #8]
}
 800927a:	e008      	b.n	800928e <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2200      	movs	r2, #0
 8009280:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2200      	movs	r2, #0
 8009286:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2200      	movs	r2, #0
 800928c:	609a      	str	r2, [r3, #8]
}
 800928e:	bf00      	nop
 8009290:	372c      	adds	r7, #44	@ 0x2c
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr
 800929a:	bf00      	nop
 800929c:	44020c00 	.word	0x44020c00
 80092a0:	03d09000 	.word	0x03d09000
 80092a4:	46000000 	.word	0x46000000
 80092a8:	4a742400 	.word	0x4a742400
 80092ac:	4af42400 	.word	0x4af42400

080092b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b08b      	sub	sp, #44	@ 0x2c
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80092b8:	4bae      	ldr	r3, [pc, #696]	@ (8009574 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80092ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092c0:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80092c2:	4bac      	ldr	r3, [pc, #688]	@ (8009574 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80092c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092c6:	f003 0303 	and.w	r3, r3, #3
 80092ca:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80092cc:	4ba9      	ldr	r3, [pc, #676]	@ (8009574 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80092ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092d0:	0a1b      	lsrs	r3, r3, #8
 80092d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80092d6:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80092d8:	4ba6      	ldr	r3, [pc, #664]	@ (8009574 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80092da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092dc:	091b      	lsrs	r3, r3, #4
 80092de:	f003 0301 	and.w	r3, r3, #1
 80092e2:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80092e4:	4ba3      	ldr	r3, [pc, #652]	@ (8009574 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80092e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092e8:	08db      	lsrs	r3, r3, #3
 80092ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80092ee:	697a      	ldr	r2, [r7, #20]
 80092f0:	fb02 f303 	mul.w	r3, r2, r3
 80092f4:	ee07 3a90 	vmov	s15, r3
 80092f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092fc:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8009300:	69bb      	ldr	r3, [r7, #24]
 8009302:	2b00      	cmp	r3, #0
 8009304:	f000 8126 	beq.w	8009554 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8009308:	69fb      	ldr	r3, [r7, #28]
 800930a:	2b03      	cmp	r3, #3
 800930c:	d053      	beq.n	80093b6 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 800930e:	69fb      	ldr	r3, [r7, #28]
 8009310:	2b03      	cmp	r3, #3
 8009312:	d86f      	bhi.n	80093f4 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8009314:	69fb      	ldr	r3, [r7, #28]
 8009316:	2b01      	cmp	r3, #1
 8009318:	d003      	beq.n	8009322 <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 800931a:	69fb      	ldr	r3, [r7, #28]
 800931c:	2b02      	cmp	r3, #2
 800931e:	d02b      	beq.n	8009378 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8009320:	e068      	b.n	80093f4 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009322:	4b94      	ldr	r3, [pc, #592]	@ (8009574 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	08db      	lsrs	r3, r3, #3
 8009328:	f003 0303 	and.w	r3, r3, #3
 800932c:	4a92      	ldr	r2, [pc, #584]	@ (8009578 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800932e:	fa22 f303 	lsr.w	r3, r2, r3
 8009332:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	ee07 3a90 	vmov	s15, r3
 800933a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800933e:	69bb      	ldr	r3, [r7, #24]
 8009340:	ee07 3a90 	vmov	s15, r3
 8009344:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009348:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800934c:	6a3b      	ldr	r3, [r7, #32]
 800934e:	ee07 3a90 	vmov	s15, r3
 8009352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009356:	ed97 6a04 	vldr	s12, [r7, #16]
 800935a:	eddf 5a88 	vldr	s11, [pc, #544]	@ 800957c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800935e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009366:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800936a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800936e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009372:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8009376:	e068      	b.n	800944a <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8009378:	69bb      	ldr	r3, [r7, #24]
 800937a:	ee07 3a90 	vmov	s15, r3
 800937e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009382:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8009580 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8009386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800938a:	6a3b      	ldr	r3, [r7, #32]
 800938c:	ee07 3a90 	vmov	s15, r3
 8009390:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009394:	ed97 6a04 	vldr	s12, [r7, #16]
 8009398:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800957c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800939c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093b0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80093b4:	e049      	b.n	800944a <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80093b6:	69bb      	ldr	r3, [r7, #24]
 80093b8:	ee07 3a90 	vmov	s15, r3
 80093bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093c0:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8009584 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 80093c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093c8:	6a3b      	ldr	r3, [r7, #32]
 80093ca:	ee07 3a90 	vmov	s15, r3
 80093ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093d2:	ed97 6a04 	vldr	s12, [r7, #16]
 80093d6:	eddf 5a69 	vldr	s11, [pc, #420]	@ 800957c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80093da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093ee:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80093f2:	e02a      	b.n	800944a <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80093f4:	4b5f      	ldr	r3, [pc, #380]	@ (8009574 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	08db      	lsrs	r3, r3, #3
 80093fa:	f003 0303 	and.w	r3, r3, #3
 80093fe:	4a5e      	ldr	r2, [pc, #376]	@ (8009578 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8009400:	fa22 f303 	lsr.w	r3, r2, r3
 8009404:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	ee07 3a90 	vmov	s15, r3
 800940c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009410:	69bb      	ldr	r3, [r7, #24]
 8009412:	ee07 3a90 	vmov	s15, r3
 8009416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800941a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800941e:	6a3b      	ldr	r3, [r7, #32]
 8009420:	ee07 3a90 	vmov	s15, r3
 8009424:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009428:	ed97 6a04 	vldr	s12, [r7, #16]
 800942c:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800957c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8009430:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009434:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009438:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800943c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009440:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009444:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8009448:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800944a:	4b4a      	ldr	r3, [pc, #296]	@ (8009574 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009452:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009456:	d121      	bne.n	800949c <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8009458:	4b46      	ldr	r3, [pc, #280]	@ (8009574 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800945a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800945c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009460:	2b00      	cmp	r3, #0
 8009462:	d017      	beq.n	8009494 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009464:	4b43      	ldr	r3, [pc, #268]	@ (8009574 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009468:	0a5b      	lsrs	r3, r3, #9
 800946a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800946e:	ee07 3a90 	vmov	s15, r3
 8009472:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8009476:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800947a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800947e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009482:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009486:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800948a:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	601a      	str	r2, [r3, #0]
 8009492:	e006      	b.n	80094a2 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2200      	movs	r2, #0
 8009498:	601a      	str	r2, [r3, #0]
 800949a:	e002      	b.n	80094a2 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2200      	movs	r2, #0
 80094a0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80094a2:	4b34      	ldr	r3, [pc, #208]	@ (8009574 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80094aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80094ae:	d121      	bne.n	80094f4 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80094b0:	4b30      	ldr	r3, [pc, #192]	@ (8009574 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80094b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d017      	beq.n	80094ec <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80094bc:	4b2d      	ldr	r3, [pc, #180]	@ (8009574 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80094be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094c0:	0c1b      	lsrs	r3, r3, #16
 80094c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094c6:	ee07 3a90 	vmov	s15, r3
 80094ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 80094ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094d2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80094d6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80094da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094e2:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	605a      	str	r2, [r3, #4]
 80094ea:	e006      	b.n	80094fa <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2200      	movs	r2, #0
 80094f0:	605a      	str	r2, [r3, #4]
 80094f2:	e002      	b.n	80094fa <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2200      	movs	r2, #0
 80094f8:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80094fa:	4b1e      	ldr	r3, [pc, #120]	@ (8009574 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009502:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009506:	d121      	bne.n	800954c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8009508:	4b1a      	ldr	r3, [pc, #104]	@ (8009574 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800950a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800950c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009510:	2b00      	cmp	r3, #0
 8009512:	d017      	beq.n	8009544 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009514:	4b17      	ldr	r3, [pc, #92]	@ (8009574 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009518:	0e1b      	lsrs	r3, r3, #24
 800951a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800951e:	ee07 3a90 	vmov	s15, r3
 8009522:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8009526:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800952a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800952e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009532:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009536:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800953a:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009542:	e010      	b.n	8009566 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2200      	movs	r2, #0
 8009548:	609a      	str	r2, [r3, #8]
}
 800954a:	e00c      	b.n	8009566 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	609a      	str	r2, [r3, #8]
}
 8009552:	e008      	b.n	8009566 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	609a      	str	r2, [r3, #8]
}
 8009566:	bf00      	nop
 8009568:	372c      	adds	r7, #44	@ 0x2c
 800956a:	46bd      	mov	sp, r7
 800956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009570:	4770      	bx	lr
 8009572:	bf00      	nop
 8009574:	44020c00 	.word	0x44020c00
 8009578:	03d09000 	.word	0x03d09000
 800957c:	46000000 	.word	0x46000000
 8009580:	4a742400 	.word	0x4a742400
 8009584:	4af42400 	.word	0x4af42400

08009588 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8009588:	b480      	push	{r7}
 800958a:	b08b      	sub	sp, #44	@ 0x2c
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8009590:	4bae      	ldr	r3, [pc, #696]	@ (800984c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009598:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800959a:	4bac      	ldr	r3, [pc, #688]	@ (800984c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800959c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800959e:	f003 0303 	and.w	r3, r3, #3
 80095a2:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 80095a4:	4ba9      	ldr	r3, [pc, #676]	@ (800984c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80095a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095a8:	0a1b      	lsrs	r3, r3, #8
 80095aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80095ae:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80095b0:	4ba6      	ldr	r3, [pc, #664]	@ (800984c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80095b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095b4:	091b      	lsrs	r3, r3, #4
 80095b6:	f003 0301 	and.w	r3, r3, #1
 80095ba:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80095bc:	4ba3      	ldr	r3, [pc, #652]	@ (800984c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80095be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095c0:	08db      	lsrs	r3, r3, #3
 80095c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80095c6:	697a      	ldr	r2, [r7, #20]
 80095c8:	fb02 f303 	mul.w	r3, r2, r3
 80095cc:	ee07 3a90 	vmov	s15, r3
 80095d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095d4:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 80095d8:	69bb      	ldr	r3, [r7, #24]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	f000 8126 	beq.w	800982c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 80095e0:	69fb      	ldr	r3, [r7, #28]
 80095e2:	2b03      	cmp	r3, #3
 80095e4:	d053      	beq.n	800968e <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 80095e6:	69fb      	ldr	r3, [r7, #28]
 80095e8:	2b03      	cmp	r3, #3
 80095ea:	d86f      	bhi.n	80096cc <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 80095ec:	69fb      	ldr	r3, [r7, #28]
 80095ee:	2b01      	cmp	r3, #1
 80095f0:	d003      	beq.n	80095fa <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 80095f2:	69fb      	ldr	r3, [r7, #28]
 80095f4:	2b02      	cmp	r3, #2
 80095f6:	d02b      	beq.n	8009650 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80095f8:	e068      	b.n	80096cc <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80095fa:	4b94      	ldr	r3, [pc, #592]	@ (800984c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	08db      	lsrs	r3, r3, #3
 8009600:	f003 0303 	and.w	r3, r3, #3
 8009604:	4a92      	ldr	r2, [pc, #584]	@ (8009850 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8009606:	fa22 f303 	lsr.w	r3, r2, r3
 800960a:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	ee07 3a90 	vmov	s15, r3
 8009612:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	ee07 3a90 	vmov	s15, r3
 800961c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009620:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009624:	6a3b      	ldr	r3, [r7, #32]
 8009626:	ee07 3a90 	vmov	s15, r3
 800962a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800962e:	ed97 6a04 	vldr	s12, [r7, #16]
 8009632:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8009854 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8009636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800963a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800963e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800964a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800964e:	e068      	b.n	8009722 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8009650:	69bb      	ldr	r3, [r7, #24]
 8009652:	ee07 3a90 	vmov	s15, r3
 8009656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800965a:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8009858 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 800965e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009662:	6a3b      	ldr	r3, [r7, #32]
 8009664:	ee07 3a90 	vmov	s15, r3
 8009668:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800966c:	ed97 6a04 	vldr	s12, [r7, #16]
 8009670:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009854 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8009674:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009678:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800967c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009680:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009684:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009688:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800968c:	e049      	b.n	8009722 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800968e:	69bb      	ldr	r3, [r7, #24]
 8009690:	ee07 3a90 	vmov	s15, r3
 8009694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009698:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800985c <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 800969c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096a0:	6a3b      	ldr	r3, [r7, #32]
 80096a2:	ee07 3a90 	vmov	s15, r3
 80096a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096aa:	ed97 6a04 	vldr	s12, [r7, #16]
 80096ae:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8009854 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80096b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096c6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80096ca:	e02a      	b.n	8009722 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80096cc:	4b5f      	ldr	r3, [pc, #380]	@ (800984c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	08db      	lsrs	r3, r3, #3
 80096d2:	f003 0303 	and.w	r3, r3, #3
 80096d6:	4a5e      	ldr	r2, [pc, #376]	@ (8009850 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80096d8:	fa22 f303 	lsr.w	r3, r2, r3
 80096dc:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	ee07 3a90 	vmov	s15, r3
 80096e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096e8:	69bb      	ldr	r3, [r7, #24]
 80096ea:	ee07 3a90 	vmov	s15, r3
 80096ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096f6:	6a3b      	ldr	r3, [r7, #32]
 80096f8:	ee07 3a90 	vmov	s15, r3
 80096fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009700:	ed97 6a04 	vldr	s12, [r7, #16]
 8009704:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8009854 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8009708:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800970c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009710:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009714:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800971c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8009720:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009722:	4b4a      	ldr	r3, [pc, #296]	@ (800984c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800972a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800972e:	d121      	bne.n	8009774 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8009730:	4b46      	ldr	r3, [pc, #280]	@ (800984c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009734:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009738:	2b00      	cmp	r3, #0
 800973a:	d017      	beq.n	800976c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800973c:	4b43      	ldr	r3, [pc, #268]	@ (800984c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800973e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009740:	0a5b      	lsrs	r3, r3, #9
 8009742:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009746:	ee07 3a90 	vmov	s15, r3
 800974a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 800974e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009752:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8009756:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800975a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800975e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009762:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	601a      	str	r2, [r3, #0]
 800976a:	e006      	b.n	800977a <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	601a      	str	r2, [r3, #0]
 8009772:	e002      	b.n	800977a <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800977a:	4b34      	ldr	r3, [pc, #208]	@ (800984c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009782:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009786:	d121      	bne.n	80097cc <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8009788:	4b30      	ldr	r3, [pc, #192]	@ (800984c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800978a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800978c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009790:	2b00      	cmp	r3, #0
 8009792:	d017      	beq.n	80097c4 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009794:	4b2d      	ldr	r3, [pc, #180]	@ (800984c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009798:	0c1b      	lsrs	r3, r3, #16
 800979a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800979e:	ee07 3a90 	vmov	s15, r3
 80097a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 80097a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80097aa:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80097ae:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80097b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097ba:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	605a      	str	r2, [r3, #4]
 80097c2:	e006      	b.n	80097d2 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2200      	movs	r2, #0
 80097c8:	605a      	str	r2, [r3, #4]
 80097ca:	e002      	b.n	80097d2 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2200      	movs	r2, #0
 80097d0:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80097d2:	4b1e      	ldr	r3, [pc, #120]	@ (800984c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80097da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097de:	d121      	bne.n	8009824 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80097e0:	4b1a      	ldr	r3, [pc, #104]	@ (800984c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80097e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d017      	beq.n	800981c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80097ec:	4b17      	ldr	r3, [pc, #92]	@ (800984c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80097ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097f0:	0e1b      	lsrs	r3, r3, #24
 80097f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097f6:	ee07 3a90 	vmov	s15, r3
 80097fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 80097fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009802:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8009806:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800980a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800980e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009812:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800981a:	e010      	b.n	800983e <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2200      	movs	r2, #0
 8009820:	609a      	str	r2, [r3, #8]
}
 8009822:	e00c      	b.n	800983e <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2200      	movs	r2, #0
 8009828:	609a      	str	r2, [r3, #8]
}
 800982a:	e008      	b.n	800983e <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2200      	movs	r2, #0
 8009830:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2200      	movs	r2, #0
 8009836:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2200      	movs	r2, #0
 800983c:	609a      	str	r2, [r3, #8]
}
 800983e:	bf00      	nop
 8009840:	372c      	adds	r7, #44	@ 0x2c
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr
 800984a:	bf00      	nop
 800984c:	44020c00 	.word	0x44020c00
 8009850:	03d09000 	.word	0x03d09000
 8009854:	46000000 	.word	0x46000000
 8009858:	4a742400 	.word	0x4a742400
 800985c:	4af42400 	.word	0x4af42400

08009860 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009860:	b590      	push	{r4, r7, lr}
 8009862:	b08f      	sub	sp, #60	@ 0x3c
 8009864:	af00      	add	r7, sp, #0
 8009866:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800986a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800986e:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8009872:	4321      	orrs	r1, r4
 8009874:	d150      	bne.n	8009918 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8009876:	4b26      	ldr	r3, [pc, #152]	@ (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009878:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800987c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009880:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8009882:	4b23      	ldr	r3, [pc, #140]	@ (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009884:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009888:	f003 0302 	and.w	r3, r3, #2
 800988c:	2b02      	cmp	r3, #2
 800988e:	d108      	bne.n	80098a2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8009890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009892:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009896:	d104      	bne.n	80098a2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8009898:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800989c:	637b      	str	r3, [r7, #52]	@ 0x34
 800989e:	f002 bb2a 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80098a2:	4b1b      	ldr	r3, [pc, #108]	@ (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80098a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80098a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80098ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80098b0:	d108      	bne.n	80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80098b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098b8:	d104      	bne.n	80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80098ba:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80098be:	637b      	str	r3, [r7, #52]	@ 0x34
 80098c0:	f002 bb19 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80098c4:	4b12      	ldr	r3, [pc, #72]	@ (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098d0:	d119      	bne.n	8009906 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80098d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80098d8:	d115      	bne.n	8009906 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80098da:	4b0d      	ldr	r3, [pc, #52]	@ (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80098dc:	69db      	ldr	r3, [r3, #28]
 80098de:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80098e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098e6:	d30a      	bcc.n	80098fe <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80098e8:	4b09      	ldr	r3, [pc, #36]	@ (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80098ea:	69db      	ldr	r3, [r3, #28]
 80098ec:	0a1b      	lsrs	r3, r3, #8
 80098ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80098f2:	4a08      	ldr	r2, [pc, #32]	@ (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80098f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80098f8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80098fa:	f002 bafc 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 80098fe:	2300      	movs	r3, #0
 8009900:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8009902:	f002 baf8 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8009906:	2300      	movs	r3, #0
 8009908:	637b      	str	r3, [r7, #52]	@ 0x34
 800990a:	f002 baf4 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800990e:	bf00      	nop
 8009910:	44020c00 	.word	0x44020c00
 8009914:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8009918:	e9d7 0100 	ldrd	r0, r1, [r7]
 800991c:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 8009920:	ea50 0104 	orrs.w	r1, r0, r4
 8009924:	f001 8275 	beq.w	800ae12 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8009928:	e9d7 0100 	ldrd	r0, r1, [r7]
 800992c:	2801      	cmp	r0, #1
 800992e:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 8009932:	f082 82dd 	bcs.w	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009936:	e9d7 0100 	ldrd	r0, r1, [r7]
 800993a:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 800993e:	ea50 0104 	orrs.w	r1, r0, r4
 8009942:	f001 816c 	beq.w	800ac1e <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 8009946:	e9d7 0100 	ldrd	r0, r1, [r7]
 800994a:	2801      	cmp	r0, #1
 800994c:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8009950:	f082 82ce 	bcs.w	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009954:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009958:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 800995c:	ea50 0104 	orrs.w	r1, r0, r4
 8009960:	f001 8602 	beq.w	800b568 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8009964:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009968:	2801      	cmp	r0, #1
 800996a:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 800996e:	f082 82bf 	bcs.w	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009972:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009976:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 800997a:	ea50 0104 	orrs.w	r1, r0, r4
 800997e:	f001 854c 	beq.w	800b41a <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8009982:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009986:	2801      	cmp	r0, #1
 8009988:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 800998c:	f082 82b0 	bcs.w	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009990:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009994:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 8009998:	ea50 0104 	orrs.w	r1, r0, r4
 800999c:	f001 849e 	beq.w	800b2dc <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 80099a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80099a4:	2801      	cmp	r0, #1
 80099a6:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 80099aa:	f082 82a1 	bcs.w	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80099ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80099b2:	f1a1 0420 	sub.w	r4, r1, #32
 80099b6:	ea50 0104 	orrs.w	r1, r0, r4
 80099ba:	f001 83e8 	beq.w	800b18e <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 80099be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80099c2:	2801      	cmp	r0, #1
 80099c4:	f171 0120 	sbcs.w	r1, r1, #32
 80099c8:	f082 8292 	bcs.w	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80099cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80099d0:	f1a1 0410 	sub.w	r4, r1, #16
 80099d4:	ea50 0104 	orrs.w	r1, r0, r4
 80099d8:	f002 8256 	beq.w	800be88 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80099dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80099e0:	2801      	cmp	r0, #1
 80099e2:	f171 0110 	sbcs.w	r1, r1, #16
 80099e6:	f082 8283 	bcs.w	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80099ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80099ee:	f1a1 0408 	sub.w	r4, r1, #8
 80099f2:	ea50 0104 	orrs.w	r1, r0, r4
 80099f6:	f002 81cc 	beq.w	800bd92 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 80099fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80099fe:	2801      	cmp	r0, #1
 8009a00:	f171 0108 	sbcs.w	r1, r1, #8
 8009a04:	f082 8274 	bcs.w	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009a08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009a0c:	1f0c      	subs	r4, r1, #4
 8009a0e:	ea50 0104 	orrs.w	r1, r0, r4
 8009a12:	f001 8648 	beq.w	800b6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8009a16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009a1a:	2801      	cmp	r0, #1
 8009a1c:	f171 0104 	sbcs.w	r1, r1, #4
 8009a20:	f082 8266 	bcs.w	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009a24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009a28:	1e8c      	subs	r4, r1, #2
 8009a2a:	ea50 0104 	orrs.w	r1, r0, r4
 8009a2e:	f002 8143 	beq.w	800bcb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8009a32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009a36:	2801      	cmp	r0, #1
 8009a38:	f171 0102 	sbcs.w	r1, r1, #2
 8009a3c:	f082 8258 	bcs.w	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009a40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009a44:	1e4c      	subs	r4, r1, #1
 8009a46:	ea50 0104 	orrs.w	r1, r0, r4
 8009a4a:	f002 80ce 	beq.w	800bbea <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8009a4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009a52:	2801      	cmp	r0, #1
 8009a54:	f171 0101 	sbcs.w	r1, r1, #1
 8009a58:	f082 824a 	bcs.w	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009a5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009a60:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8009a64:	4321      	orrs	r1, r4
 8009a66:	f002 8059 	beq.w	800bb1c <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 8009a6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009a6e:	4cd9      	ldr	r4, [pc, #868]	@ (8009dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8009a70:	42a0      	cmp	r0, r4
 8009a72:	f171 0100 	sbcs.w	r1, r1, #0
 8009a76:	f082 823b 	bcs.w	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009a7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009a7e:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8009a82:	4321      	orrs	r1, r4
 8009a84:	f001 87d9 	beq.w	800ba3a <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8009a88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009a8c:	4cd2      	ldr	r4, [pc, #840]	@ (8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8009a8e:	42a0      	cmp	r0, r4
 8009a90:	f171 0100 	sbcs.w	r1, r1, #0
 8009a94:	f082 822c 	bcs.w	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009a98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009a9c:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8009aa0:	4321      	orrs	r1, r4
 8009aa2:	f001 8751 	beq.w	800b948 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8009aa6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009aaa:	4ccc      	ldr	r4, [pc, #816]	@ (8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8009aac:	42a0      	cmp	r0, r4
 8009aae:	f171 0100 	sbcs.w	r1, r1, #0
 8009ab2:	f082 821d 	bcs.w	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009ab6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009aba:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8009abe:	4321      	orrs	r1, r4
 8009ac0:	f001 869a 	beq.w	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8009ac4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ac8:	4cc5      	ldr	r4, [pc, #788]	@ (8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8009aca:	42a0      	cmp	r0, r4
 8009acc:	f171 0100 	sbcs.w	r1, r1, #0
 8009ad0:	f082 820e 	bcs.w	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009ad4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ad8:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8009adc:	4321      	orrs	r1, r4
 8009ade:	f001 8612 	beq.w	800b706 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8009ae2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ae6:	4cbf      	ldr	r4, [pc, #764]	@ (8009de4 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8009ae8:	42a0      	cmp	r0, r4
 8009aea:	f171 0100 	sbcs.w	r1, r1, #0
 8009aee:	f082 81ff 	bcs.w	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009af2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009af6:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8009afa:	4321      	orrs	r1, r4
 8009afc:	f002 817e 	beq.w	800bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8009b00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009b04:	4cb8      	ldr	r4, [pc, #736]	@ (8009de8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009b06:	42a0      	cmp	r0, r4
 8009b08:	f171 0100 	sbcs.w	r1, r1, #0
 8009b0c:	f082 81f0 	bcs.w	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009b10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009b14:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 8009b18:	4321      	orrs	r1, r4
 8009b1a:	f000 829e 	beq.w	800a05a <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8009b1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009b22:	4cb2      	ldr	r4, [pc, #712]	@ (8009dec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009b24:	42a0      	cmp	r0, r4
 8009b26:	f171 0100 	sbcs.w	r1, r1, #0
 8009b2a:	f082 81e1 	bcs.w	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009b2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009b32:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8009b36:	4321      	orrs	r1, r4
 8009b38:	f000 826d 	beq.w	800a016 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8009b3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009b40:	4cab      	ldr	r4, [pc, #684]	@ (8009df0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009b42:	42a0      	cmp	r0, r4
 8009b44:	f171 0100 	sbcs.w	r1, r1, #0
 8009b48:	f082 81d2 	bcs.w	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009b4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009b50:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8009b54:	4321      	orrs	r1, r4
 8009b56:	f001 800d 	beq.w	800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8009b5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009b5e:	4ca5      	ldr	r4, [pc, #660]	@ (8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009b60:	42a0      	cmp	r0, r4
 8009b62:	f171 0100 	sbcs.w	r1, r1, #0
 8009b66:	f082 81c3 	bcs.w	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009b6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009b6e:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 8009b72:	4321      	orrs	r1, r4
 8009b74:	f000 81d0 	beq.w	8009f18 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8009b78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009b7c:	4c9e      	ldr	r4, [pc, #632]	@ (8009df8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8009b7e:	42a0      	cmp	r0, r4
 8009b80:	f171 0100 	sbcs.w	r1, r1, #0
 8009b84:	f082 81b4 	bcs.w	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009b88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009b8c:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 8009b90:	4321      	orrs	r1, r4
 8009b92:	f000 8142 	beq.w	8009e1a <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8009b96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009b9a:	4c98      	ldr	r4, [pc, #608]	@ (8009dfc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009b9c:	42a0      	cmp	r0, r4
 8009b9e:	f171 0100 	sbcs.w	r1, r1, #0
 8009ba2:	f082 81a5 	bcs.w	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009ba6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009baa:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8009bae:	4321      	orrs	r1, r4
 8009bb0:	f001 824e 	beq.w	800b050 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8009bb4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009bb8:	4c91      	ldr	r4, [pc, #580]	@ (8009e00 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8009bba:	42a0      	cmp	r0, r4
 8009bbc:	f171 0100 	sbcs.w	r1, r1, #0
 8009bc0:	f082 8196 	bcs.w	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009bc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009bc8:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8009bcc:	4321      	orrs	r1, r4
 8009bce:	f001 8197 	beq.w	800af00 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8009bd2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009bd6:	4c8b      	ldr	r4, [pc, #556]	@ (8009e04 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8009bd8:	42a0      	cmp	r0, r4
 8009bda:	f171 0100 	sbcs.w	r1, r1, #0
 8009bde:	f082 8187 	bcs.w	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009be2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009be6:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8009bea:	4321      	orrs	r1, r4
 8009bec:	f001 8154 	beq.w	800ae98 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8009bf0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009bf4:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8009bf8:	f171 0100 	sbcs.w	r1, r1, #0
 8009bfc:	f082 8178 	bcs.w	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009c00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009c04:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8009c08:	4321      	orrs	r1, r4
 8009c0a:	f001 80b7 	beq.w	800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8009c0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009c12:	f248 0401 	movw	r4, #32769	@ 0x8001
 8009c16:	42a0      	cmp	r0, r4
 8009c18:	f171 0100 	sbcs.w	r1, r1, #0
 8009c1c:	f082 8168 	bcs.w	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009c20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009c24:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8009c28:	4321      	orrs	r1, r4
 8009c2a:	f001 8064 	beq.w	800acf6 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8009c2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009c32:	f244 0401 	movw	r4, #16385	@ 0x4001
 8009c36:	42a0      	cmp	r0, r4
 8009c38:	f171 0100 	sbcs.w	r1, r1, #0
 8009c3c:	f082 8158 	bcs.w	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009c40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009c44:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8009c48:	4321      	orrs	r1, r4
 8009c4a:	f001 8011 	beq.w	800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8009c4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009c52:	f242 0401 	movw	r4, #8193	@ 0x2001
 8009c56:	42a0      	cmp	r0, r4
 8009c58:	f171 0100 	sbcs.w	r1, r1, #0
 8009c5c:	f082 8148 	bcs.w	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009c60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009c64:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 8009c68:	4321      	orrs	r1, r4
 8009c6a:	f000 871e 	beq.w	800aaaa <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8009c6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009c72:	f241 0401 	movw	r4, #4097	@ 0x1001
 8009c76:	42a0      	cmp	r0, r4
 8009c78:	f171 0100 	sbcs.w	r1, r1, #0
 8009c7c:	f082 8138 	bcs.w	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009c80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009c84:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 8009c88:	4321      	orrs	r1, r4
 8009c8a:	f000 86a8 	beq.w	800a9de <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8009c8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009c92:	f640 0401 	movw	r4, #2049	@ 0x801
 8009c96:	42a0      	cmp	r0, r4
 8009c98:	f171 0100 	sbcs.w	r1, r1, #0
 8009c9c:	f082 8128 	bcs.w	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009ca0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ca4:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 8009ca8:	4321      	orrs	r1, r4
 8009caa:	f000 8632 	beq.w	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8009cae:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009cb2:	f240 4401 	movw	r4, #1025	@ 0x401
 8009cb6:	42a0      	cmp	r0, r4
 8009cb8:	f171 0100 	sbcs.w	r1, r1, #0
 8009cbc:	f082 8118 	bcs.w	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009cc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009cc4:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 8009cc8:	4321      	orrs	r1, r4
 8009cca:	f000 85b0 	beq.w	800a82e <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8009cce:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009cd2:	f240 2401 	movw	r4, #513	@ 0x201
 8009cd6:	42a0      	cmp	r0, r4
 8009cd8:	f171 0100 	sbcs.w	r1, r1, #0
 8009cdc:	f082 8108 	bcs.w	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009ce0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ce4:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 8009ce8:	4321      	orrs	r1, r4
 8009cea:	f000 8535 	beq.w	800a758 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8009cee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009cf2:	f240 1401 	movw	r4, #257	@ 0x101
 8009cf6:	42a0      	cmp	r0, r4
 8009cf8:	f171 0100 	sbcs.w	r1, r1, #0
 8009cfc:	f082 80f8 	bcs.w	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009d00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d04:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 8009d08:	4321      	orrs	r1, r4
 8009d0a:	f000 84ba 	beq.w	800a682 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8009d0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d12:	2881      	cmp	r0, #129	@ 0x81
 8009d14:	f171 0100 	sbcs.w	r1, r1, #0
 8009d18:	f082 80ea 	bcs.w	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009d1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d20:	2821      	cmp	r0, #33	@ 0x21
 8009d22:	f171 0100 	sbcs.w	r1, r1, #0
 8009d26:	d26f      	bcs.n	8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8009d28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d2c:	4301      	orrs	r1, r0
 8009d2e:	f002 80df 	beq.w	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009d32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d36:	1e42      	subs	r2, r0, #1
 8009d38:	f141 33ff 	adc.w	r3, r1, #4294967295
 8009d3c:	2a20      	cmp	r2, #32
 8009d3e:	f173 0100 	sbcs.w	r1, r3, #0
 8009d42:	f082 80d5 	bcs.w	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009d46:	2a1f      	cmp	r2, #31
 8009d48:	f202 80d2 	bhi.w	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009d4c:	a101      	add	r1, pc, #4	@ (adr r1, 8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8009d4e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009d52:	bf00      	nop
 8009d54:	0800a0b5 	.word	0x0800a0b5
 8009d58:	0800a181 	.word	0x0800a181
 8009d5c:	0800bef1 	.word	0x0800bef1
 8009d60:	0800a241 	.word	0x0800a241
 8009d64:	0800bef1 	.word	0x0800bef1
 8009d68:	0800bef1 	.word	0x0800bef1
 8009d6c:	0800bef1 	.word	0x0800bef1
 8009d70:	0800a311 	.word	0x0800a311
 8009d74:	0800bef1 	.word	0x0800bef1
 8009d78:	0800bef1 	.word	0x0800bef1
 8009d7c:	0800bef1 	.word	0x0800bef1
 8009d80:	0800bef1 	.word	0x0800bef1
 8009d84:	0800bef1 	.word	0x0800bef1
 8009d88:	0800bef1 	.word	0x0800bef1
 8009d8c:	0800bef1 	.word	0x0800bef1
 8009d90:	0800a3f3 	.word	0x0800a3f3
 8009d94:	0800bef1 	.word	0x0800bef1
 8009d98:	0800bef1 	.word	0x0800bef1
 8009d9c:	0800bef1 	.word	0x0800bef1
 8009da0:	0800bef1 	.word	0x0800bef1
 8009da4:	0800bef1 	.word	0x0800bef1
 8009da8:	0800bef1 	.word	0x0800bef1
 8009dac:	0800bef1 	.word	0x0800bef1
 8009db0:	0800bef1 	.word	0x0800bef1
 8009db4:	0800bef1 	.word	0x0800bef1
 8009db8:	0800bef1 	.word	0x0800bef1
 8009dbc:	0800bef1 	.word	0x0800bef1
 8009dc0:	0800bef1 	.word	0x0800bef1
 8009dc4:	0800bef1 	.word	0x0800bef1
 8009dc8:	0800bef1 	.word	0x0800bef1
 8009dcc:	0800bef1 	.word	0x0800bef1
 8009dd0:	0800a4c9 	.word	0x0800a4c9
 8009dd4:	80000001 	.word	0x80000001
 8009dd8:	40000001 	.word	0x40000001
 8009ddc:	20000001 	.word	0x20000001
 8009de0:	10000001 	.word	0x10000001
 8009de4:	08000001 	.word	0x08000001
 8009de8:	04000001 	.word	0x04000001
 8009dec:	00800001 	.word	0x00800001
 8009df0:	00400001 	.word	0x00400001
 8009df4:	00200001 	.word	0x00200001
 8009df8:	00100001 	.word	0x00100001
 8009dfc:	00080001 	.word	0x00080001
 8009e00:	00040001 	.word	0x00040001
 8009e04:	00020001 	.word	0x00020001
 8009e08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e0c:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8009e10:	430b      	orrs	r3, r1
 8009e12:	f000 83c4 	beq.w	800a59e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8009e16:	f002 b86b 	b.w	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8009e1a:	4ba1      	ldr	r3, [pc, #644]	@ (800a0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009e1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009e20:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009e24:	633b      	str	r3, [r7, #48]	@ 0x30
 8009e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e28:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009e2c:	d036      	beq.n	8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8009e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e30:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009e34:	d86b      	bhi.n	8009f0e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8009e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e38:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009e3c:	d02b      	beq.n	8009e96 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8009e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e40:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009e44:	d863      	bhi.n	8009f0e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8009e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e4c:	d01b      	beq.n	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8009e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e54:	d85b      	bhi.n	8009f0e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8009e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d004      	beq.n	8009e66 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8009e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e62:	d008      	beq.n	8009e76 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8009e64:	e053      	b.n	8009f0e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e66:	f107 0320 	add.w	r3, r7, #32
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f7ff f8b4 	bl	8008fd8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e72:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009e74:	e04e      	b.n	8009f14 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e76:	f107 0314 	add.w	r3, r7, #20
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f7ff fa18 	bl	80092b0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009e84:	e046      	b.n	8009f14 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e86:	f107 0308 	add.w	r3, r7, #8
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f7ff fb7c 	bl	8009588 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009e94:	e03e      	b.n	8009f14 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009e96:	4b83      	ldr	r3, [pc, #524]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8009e98:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009e9a:	e03b      	b.n	8009f14 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009e9c:	4b80      	ldr	r3, [pc, #512]	@ (800a0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009e9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009ea2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009ea8:	4b7d      	ldr	r3, [pc, #500]	@ (800a0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f003 0302 	and.w	r3, r3, #2
 8009eb0:	2b02      	cmp	r3, #2
 8009eb2:	d10c      	bne.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8009eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d109      	bne.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009eba:	4b79      	ldr	r3, [pc, #484]	@ (800a0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	08db      	lsrs	r3, r3, #3
 8009ec0:	f003 0303 	and.w	r3, r3, #3
 8009ec4:	4a78      	ldr	r2, [pc, #480]	@ (800a0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8009ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8009eca:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ecc:	e01e      	b.n	8009f0c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009ece:	4b74      	ldr	r3, [pc, #464]	@ (800a0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009ed6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009eda:	d106      	bne.n	8009eea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ede:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ee2:	d102      	bne.n	8009eea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009ee4:	4b71      	ldr	r3, [pc, #452]	@ (800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8009ee6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ee8:	e010      	b.n	8009f0c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009eea:	4b6d      	ldr	r3, [pc, #436]	@ (800a0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ef2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ef6:	d106      	bne.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8009ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009efa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009efe:	d102      	bne.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009f00:	4b6b      	ldr	r3, [pc, #428]	@ (800a0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8009f02:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f04:	e002      	b.n	8009f0c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8009f06:	2300      	movs	r3, #0
 8009f08:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009f0a:	e003      	b.n	8009f14 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8009f0c:	e002      	b.n	8009f14 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009f12:	bf00      	nop
          }
        }
        break;
 8009f14:	f001 bfef 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8009f18:	4b61      	ldr	r3, [pc, #388]	@ (800a0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009f1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009f1e:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 8009f22:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f26:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009f2a:	d036      	beq.n	8009f9a <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8009f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009f32:	d86b      	bhi.n	800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8009f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f36:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8009f3a:	d02b      	beq.n	8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8009f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f3e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8009f42:	d863      	bhi.n	800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8009f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009f4a:	d01b      	beq.n	8009f84 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009f52:	d85b      	bhi.n	800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8009f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d004      	beq.n	8009f64 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8009f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f5c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009f60:	d008      	beq.n	8009f74 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8009f62:	e053      	b.n	800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f64:	f107 0320 	add.w	r3, r7, #32
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f7ff f835 	bl	8008fd8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f70:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009f72:	e04e      	b.n	800a012 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f74:	f107 0314 	add.w	r3, r7, #20
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f7ff f999 	bl	80092b0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009f82:	e046      	b.n	800a012 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f84:	f107 0308 	add.w	r3, r7, #8
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f7ff fafd 	bl	8009588 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009f92:	e03e      	b.n	800a012 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009f94:	4b43      	ldr	r3, [pc, #268]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8009f96:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009f98:	e03b      	b.n	800a012 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009f9a:	4b41      	ldr	r3, [pc, #260]	@ (800a0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009f9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009fa0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009fa6:	4b3e      	ldr	r3, [pc, #248]	@ (800a0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f003 0302 	and.w	r3, r3, #2
 8009fae:	2b02      	cmp	r3, #2
 8009fb0:	d10c      	bne.n	8009fcc <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8009fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d109      	bne.n	8009fcc <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009fb8:	4b39      	ldr	r3, [pc, #228]	@ (800a0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	08db      	lsrs	r3, r3, #3
 8009fbe:	f003 0303 	and.w	r3, r3, #3
 8009fc2:	4a39      	ldr	r2, [pc, #228]	@ (800a0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8009fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8009fc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fca:	e01e      	b.n	800a00a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009fcc:	4b34      	ldr	r3, [pc, #208]	@ (800a0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009fd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fd8:	d106      	bne.n	8009fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8009fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fe0:	d102      	bne.n	8009fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009fe2:	4b32      	ldr	r3, [pc, #200]	@ (800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8009fe4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fe6:	e010      	b.n	800a00a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009fe8:	4b2d      	ldr	r3, [pc, #180]	@ (800a0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ff0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ff4:	d106      	bne.n	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8009ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ff8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ffc:	d102      	bne.n	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009ffe:	4b2c      	ldr	r3, [pc, #176]	@ (800a0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800a000:	637b      	str	r3, [r7, #52]	@ 0x34
 800a002:	e002      	b.n	800a00a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800a004:	2300      	movs	r3, #0
 800a006:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a008:	e003      	b.n	800a012 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 800a00a:	e002      	b.n	800a012 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 800a00c:	2300      	movs	r3, #0
 800a00e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a010:	bf00      	nop
          }
        }
        break;
 800a012:	f001 bf70 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 800a016:	4b22      	ldr	r3, [pc, #136]	@ (800a0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a018:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a01c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a020:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 800a022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a024:	2b00      	cmp	r3, #0
 800a026:	d108      	bne.n	800a03a <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a028:	f107 0320 	add.w	r3, r7, #32
 800a02c:	4618      	mov	r0, r3
 800a02e:	f7fe ffd3 	bl	8008fd8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a034:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a036:	f001 bf5e 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 800a03a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a03c:	2b40      	cmp	r3, #64	@ 0x40
 800a03e:	d108      	bne.n	800a052 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a040:	f107 0314 	add.w	r3, r7, #20
 800a044:	4618      	mov	r0, r3
 800a046:	f7ff f933 	bl	80092b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a04a:	69fb      	ldr	r3, [r7, #28]
 800a04c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a04e:	f001 bf52 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800a052:	2300      	movs	r3, #0
 800a054:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a056:	f001 bf4e 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 800a05a:	4b11      	ldr	r3, [pc, #68]	@ (800a0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a05c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a060:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a064:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 800a066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d108      	bne.n	800a07e <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a06c:	f107 0320 	add.w	r3, r7, #32
 800a070:	4618      	mov	r0, r3
 800a072:	f7fe ffb1 	bl	8008fd8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a078:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a07a:	f001 bf3c 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 800a07e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a080:	2b80      	cmp	r3, #128	@ 0x80
 800a082:	d108      	bne.n	800a096 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a084:	f107 0314 	add.w	r3, r7, #20
 800a088:	4618      	mov	r0, r3
 800a08a:	f7ff f911 	bl	80092b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a08e:	69fb      	ldr	r3, [r7, #28]
 800a090:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a092:	f001 bf30 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800a096:	2300      	movs	r3, #0
 800a098:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a09a:	f001 bf2c 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a09e:	bf00      	nop
 800a0a0:	44020c00 	.word	0x44020c00
 800a0a4:	00bb8000 	.word	0x00bb8000
 800a0a8:	03d09000 	.word	0x03d09000
 800a0ac:	003d0900 	.word	0x003d0900
 800a0b0:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800a0b4:	4b9d      	ldr	r3, [pc, #628]	@ (800a32c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a0b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a0ba:	f003 0307 	and.w	r3, r3, #7
 800a0be:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800a0c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d104      	bne.n	800a0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800a0c6:	f7fc ffd1 	bl	800706c <HAL_RCC_GetPCLK2Freq>
 800a0ca:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800a0cc:	f001 bf13 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800a0d0:	4b96      	ldr	r3, [pc, #600]	@ (800a32c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a0d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a0dc:	d10a      	bne.n	800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 800a0de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	d107      	bne.n	800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0e4:	f107 0314 	add.w	r3, r7, #20
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f7ff f8e1 	bl	80092b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a0ee:	69bb      	ldr	r3, [r7, #24]
 800a0f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0f2:	e043      	b.n	800a17c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 800a0f4:	4b8d      	ldr	r3, [pc, #564]	@ (800a32c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a0fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a100:	d10a      	bne.n	800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 800a102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a104:	2b02      	cmp	r3, #2
 800a106:	d107      	bne.n	800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a108:	f107 0308 	add.w	r3, r7, #8
 800a10c:	4618      	mov	r0, r3
 800a10e:	f7ff fa3b 	bl	8009588 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	637b      	str	r3, [r7, #52]	@ 0x34
 800a116:	e031      	b.n	800a17c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800a118:	4b84      	ldr	r3, [pc, #528]	@ (800a32c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f003 0302 	and.w	r3, r3, #2
 800a120:	2b02      	cmp	r3, #2
 800a122:	d10c      	bne.n	800a13e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800a124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a126:	2b03      	cmp	r3, #3
 800a128:	d109      	bne.n	800a13e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a12a:	4b80      	ldr	r3, [pc, #512]	@ (800a32c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	08db      	lsrs	r3, r3, #3
 800a130:	f003 0303 	and.w	r3, r3, #3
 800a134:	4a7e      	ldr	r2, [pc, #504]	@ (800a330 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800a136:	fa22 f303 	lsr.w	r3, r2, r3
 800a13a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a13c:	e01e      	b.n	800a17c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 800a13e:	4b7b      	ldr	r3, [pc, #492]	@ (800a32c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a146:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a14a:	d105      	bne.n	800a158 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 800a14c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a14e:	2b04      	cmp	r3, #4
 800a150:	d102      	bne.n	800a158 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 800a152:	4b78      	ldr	r3, [pc, #480]	@ (800a334 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800a154:	637b      	str	r3, [r7, #52]	@ 0x34
 800a156:	e011      	b.n	800a17c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800a158:	4b74      	ldr	r3, [pc, #464]	@ (800a32c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a15a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a15e:	f003 0302 	and.w	r3, r3, #2
 800a162:	2b02      	cmp	r3, #2
 800a164:	d106      	bne.n	800a174 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800a166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a168:	2b05      	cmp	r3, #5
 800a16a:	d103      	bne.n	800a174 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 800a16c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a170:	637b      	str	r3, [r7, #52]	@ 0x34
 800a172:	e003      	b.n	800a17c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 800a174:	2300      	movs	r3, #0
 800a176:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a178:	f001 bebd 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a17c:	f001 bebb 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800a180:	4b6a      	ldr	r3, [pc, #424]	@ (800a32c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a182:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a186:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a18a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800a18c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d104      	bne.n	800a19c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a192:	f7fc ff55 	bl	8007040 <HAL_RCC_GetPCLK1Freq>
 800a196:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 800a198:	f001 bead 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 800a19c:	4b63      	ldr	r3, [pc, #396]	@ (800a32c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a1a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a1a8:	d10a      	bne.n	800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800a1aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ac:	2b08      	cmp	r3, #8
 800a1ae:	d107      	bne.n	800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1b0:	f107 0314 	add.w	r3, r7, #20
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f7ff f87b 	bl	80092b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a1ba:	69bb      	ldr	r3, [r7, #24]
 800a1bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1be:	e03d      	b.n	800a23c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 800a1c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1c2:	2b10      	cmp	r3, #16
 800a1c4:	d108      	bne.n	800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1c6:	f107 0308 	add.w	r3, r7, #8
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f7ff f9dc 	bl	8009588 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a1d4:	f001 be8f 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800a1d8:	4b54      	ldr	r3, [pc, #336]	@ (800a32c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f003 0302 	and.w	r3, r3, #2
 800a1e0:	2b02      	cmp	r3, #2
 800a1e2:	d10c      	bne.n	800a1fe <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800a1e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e6:	2b18      	cmp	r3, #24
 800a1e8:	d109      	bne.n	800a1fe <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a1ea:	4b50      	ldr	r3, [pc, #320]	@ (800a32c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	08db      	lsrs	r3, r3, #3
 800a1f0:	f003 0303 	and.w	r3, r3, #3
 800a1f4:	4a4e      	ldr	r2, [pc, #312]	@ (800a330 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800a1f6:	fa22 f303 	lsr.w	r3, r2, r3
 800a1fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1fc:	e01e      	b.n	800a23c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800a1fe:	4b4b      	ldr	r3, [pc, #300]	@ (800a32c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a206:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a20a:	d105      	bne.n	800a218 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a20c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a20e:	2b20      	cmp	r3, #32
 800a210:	d102      	bne.n	800a218 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 800a212:	4b48      	ldr	r3, [pc, #288]	@ (800a334 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800a214:	637b      	str	r3, [r7, #52]	@ 0x34
 800a216:	e011      	b.n	800a23c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800a218:	4b44      	ldr	r3, [pc, #272]	@ (800a32c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a21a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a21e:	f003 0302 	and.w	r3, r3, #2
 800a222:	2b02      	cmp	r3, #2
 800a224:	d106      	bne.n	800a234 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 800a226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a228:	2b28      	cmp	r3, #40	@ 0x28
 800a22a:	d103      	bne.n	800a234 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 800a22c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a230:	637b      	str	r3, [r7, #52]	@ 0x34
 800a232:	e003      	b.n	800a23c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 800a234:	2300      	movs	r3, #0
 800a236:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a238:	f001 be5d 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a23c:	f001 be5b 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800a240:	4b3a      	ldr	r3, [pc, #232]	@ (800a32c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a242:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a246:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a24a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800a24c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d104      	bne.n	800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a252:	f7fc fef5 	bl	8007040 <HAL_RCC_GetPCLK1Freq>
 800a256:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 800a258:	f001 be4d 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 800a25c:	4b33      	ldr	r3, [pc, #204]	@ (800a32c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a264:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a268:	d10a      	bne.n	800a280 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800a26a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a26c:	2b40      	cmp	r3, #64	@ 0x40
 800a26e:	d107      	bne.n	800a280 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a270:	f107 0314 	add.w	r3, r7, #20
 800a274:	4618      	mov	r0, r3
 800a276:	f7ff f81b 	bl	80092b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a27a:	69bb      	ldr	r3, [r7, #24]
 800a27c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a27e:	e045      	b.n	800a30c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 800a280:	4b2a      	ldr	r3, [pc, #168]	@ (800a32c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a288:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a28c:	d10a      	bne.n	800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 800a28e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a290:	2b80      	cmp	r3, #128	@ 0x80
 800a292:	d107      	bne.n	800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a294:	f107 0308 	add.w	r3, r7, #8
 800a298:	4618      	mov	r0, r3
 800a29a:	f7ff f975 	bl	8009588 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2a2:	e033      	b.n	800a30c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800a2a4:	4b21      	ldr	r3, [pc, #132]	@ (800a32c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f003 0302 	and.w	r3, r3, #2
 800a2ac:	2b02      	cmp	r3, #2
 800a2ae:	d10c      	bne.n	800a2ca <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 800a2b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2b2:	2bc0      	cmp	r3, #192	@ 0xc0
 800a2b4:	d109      	bne.n	800a2ca <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a2b6:	4b1d      	ldr	r3, [pc, #116]	@ (800a32c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	08db      	lsrs	r3, r3, #3
 800a2bc:	f003 0303 	and.w	r3, r3, #3
 800a2c0:	4a1b      	ldr	r2, [pc, #108]	@ (800a330 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800a2c2:	fa22 f303 	lsr.w	r3, r2, r3
 800a2c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2c8:	e020      	b.n	800a30c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800a2ca:	4b18      	ldr	r3, [pc, #96]	@ (800a32c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a2d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2d6:	d106      	bne.n	800a2e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 800a2d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a2de:	d102      	bne.n	800a2e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 800a2e0:	4b14      	ldr	r3, [pc, #80]	@ (800a334 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800a2e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2e4:	e012      	b.n	800a30c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800a2e6:	4b11      	ldr	r3, [pc, #68]	@ (800a32c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a2e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a2ec:	f003 0302 	and.w	r3, r3, #2
 800a2f0:	2b02      	cmp	r3, #2
 800a2f2:	d107      	bne.n	800a304 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 800a2f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2f6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800a2fa:	d103      	bne.n	800a304 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 800a2fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a300:	637b      	str	r3, [r7, #52]	@ 0x34
 800a302:	e003      	b.n	800a30c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 800a304:	2300      	movs	r3, #0
 800a306:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a308:	f001 bdf5 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a30c:	f001 bdf3 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800a310:	4b06      	ldr	r3, [pc, #24]	@ (800a32c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a312:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a316:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800a31a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800a31c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d10a      	bne.n	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a322:	f7fc fe8d 	bl	8007040 <HAL_RCC_GetPCLK1Freq>
 800a326:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 800a328:	f001 bde5 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a32c:	44020c00 	.word	0x44020c00
 800a330:	03d09000 	.word	0x03d09000
 800a334:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 800a338:	4ba0      	ldr	r3, [pc, #640]	@ (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a340:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a344:	d10b      	bne.n	800a35e <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 800a346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a348:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a34c:	d107      	bne.n	800a35e <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a34e:	f107 0314 	add.w	r3, r7, #20
 800a352:	4618      	mov	r0, r3
 800a354:	f7fe ffac 	bl	80092b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a358:	69bb      	ldr	r3, [r7, #24]
 800a35a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a35c:	e047      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 800a35e:	4b97      	ldr	r3, [pc, #604]	@ (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a366:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a36a:	d10b      	bne.n	800a384 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 800a36c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a36e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a372:	d107      	bne.n	800a384 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a374:	f107 0308 	add.w	r3, r7, #8
 800a378:	4618      	mov	r0, r3
 800a37a:	f7ff f905 	bl	8009588 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	637b      	str	r3, [r7, #52]	@ 0x34
 800a382:	e034      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800a384:	4b8d      	ldr	r3, [pc, #564]	@ (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f003 0302 	and.w	r3, r3, #2
 800a38c:	2b02      	cmp	r3, #2
 800a38e:	d10d      	bne.n	800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 800a390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a392:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a396:	d109      	bne.n	800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a398:	4b88      	ldr	r3, [pc, #544]	@ (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	08db      	lsrs	r3, r3, #3
 800a39e:	f003 0303 	and.w	r3, r3, #3
 800a3a2:	4a87      	ldr	r2, [pc, #540]	@ (800a5c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800a3a4:	fa22 f303 	lsr.w	r3, r2, r3
 800a3a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3aa:	e020      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 800a3ac:	4b83      	ldr	r3, [pc, #524]	@ (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a3b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3b8:	d106      	bne.n	800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800a3ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a3c0:	d102      	bne.n	800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 800a3c2:	4b80      	ldr	r3, [pc, #512]	@ (800a5c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800a3c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3c6:	e012      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800a3c8:	4b7c      	ldr	r3, [pc, #496]	@ (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a3ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a3ce:	f003 0302 	and.w	r3, r3, #2
 800a3d2:	2b02      	cmp	r3, #2
 800a3d4:	d107      	bne.n	800a3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800a3d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3d8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800a3dc:	d103      	bne.n	800a3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 800a3de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a3e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3e4:	e003      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a3ea:	f001 bd84 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a3ee:	f001 bd82 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800a3f2:	4b72      	ldr	r3, [pc, #456]	@ (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a3f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a3f8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a3fc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800a3fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a400:	2b00      	cmp	r3, #0
 800a402:	d104      	bne.n	800a40e <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a404:	f7fc fe1c 	bl	8007040 <HAL_RCC_GetPCLK1Freq>
 800a408:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 800a40a:	f001 bd74 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 800a40e:	4b6b      	ldr	r3, [pc, #428]	@ (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a416:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a41a:	d10b      	bne.n	800a434 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800a41c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a41e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a422:	d107      	bne.n	800a434 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a424:	f107 0314 	add.w	r3, r7, #20
 800a428:	4618      	mov	r0, r3
 800a42a:	f7fe ff41 	bl	80092b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a42e:	69bb      	ldr	r3, [r7, #24]
 800a430:	637b      	str	r3, [r7, #52]	@ 0x34
 800a432:	e047      	b.n	800a4c4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 800a434:	4b61      	ldr	r3, [pc, #388]	@ (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a43c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a440:	d10b      	bne.n	800a45a <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800a442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a444:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a448:	d107      	bne.n	800a45a <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a44a:	f107 0308 	add.w	r3, r7, #8
 800a44e:	4618      	mov	r0, r3
 800a450:	f7ff f89a 	bl	8009588 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	637b      	str	r3, [r7, #52]	@ 0x34
 800a458:	e034      	b.n	800a4c4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800a45a:	4b58      	ldr	r3, [pc, #352]	@ (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f003 0302 	and.w	r3, r3, #2
 800a462:	2b02      	cmp	r3, #2
 800a464:	d10d      	bne.n	800a482 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800a466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a468:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a46c:	d109      	bne.n	800a482 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a46e:	4b53      	ldr	r3, [pc, #332]	@ (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	08db      	lsrs	r3, r3, #3
 800a474:	f003 0303 	and.w	r3, r3, #3
 800a478:	4a51      	ldr	r2, [pc, #324]	@ (800a5c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800a47a:	fa22 f303 	lsr.w	r3, r2, r3
 800a47e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a480:	e020      	b.n	800a4c4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800a482:	4b4e      	ldr	r3, [pc, #312]	@ (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a48a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a48e:	d106      	bne.n	800a49e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800a490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a492:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a496:	d102      	bne.n	800a49e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 800a498:	4b4a      	ldr	r3, [pc, #296]	@ (800a5c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800a49a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a49c:	e012      	b.n	800a4c4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800a49e:	4b47      	ldr	r3, [pc, #284]	@ (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a4a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a4a4:	f003 0302 	and.w	r3, r3, #2
 800a4a8:	2b02      	cmp	r3, #2
 800a4aa:	d107      	bne.n	800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800a4ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ae:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800a4b2:	d103      	bne.n	800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 800a4b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a4b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4ba:	e003      	b.n	800a4c4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a4c0:	f001 bd19 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a4c4:	f001 bd17 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800a4c8:	4b3c      	ldr	r3, [pc, #240]	@ (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a4ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a4ce:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800a4d2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800a4d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d104      	bne.n	800a4e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a4da:	f7fc fdb1 	bl	8007040 <HAL_RCC_GetPCLK1Freq>
 800a4de:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 800a4e0:	f001 bd09 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 800a4e4:	4b35      	ldr	r3, [pc, #212]	@ (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a4ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a4f0:	d10b      	bne.n	800a50a <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800a4f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a4f8:	d107      	bne.n	800a50a <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4fa:	f107 0314 	add.w	r3, r7, #20
 800a4fe:	4618      	mov	r0, r3
 800a500:	f7fe fed6 	bl	80092b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a504:	69bb      	ldr	r3, [r7, #24]
 800a506:	637b      	str	r3, [r7, #52]	@ 0x34
 800a508:	e047      	b.n	800a59a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 800a50a:	4b2c      	ldr	r3, [pc, #176]	@ (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a512:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a516:	d10b      	bne.n	800a530 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 800a518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a51a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a51e:	d107      	bne.n	800a530 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a520:	f107 0308 	add.w	r3, r7, #8
 800a524:	4618      	mov	r0, r3
 800a526:	f7ff f82f 	bl	8009588 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a52e:	e034      	b.n	800a59a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800a530:	4b22      	ldr	r3, [pc, #136]	@ (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f003 0302 	and.w	r3, r3, #2
 800a538:	2b02      	cmp	r3, #2
 800a53a:	d10d      	bne.n	800a558 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 800a53c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a53e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800a542:	d109      	bne.n	800a558 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a544:	4b1d      	ldr	r3, [pc, #116]	@ (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	08db      	lsrs	r3, r3, #3
 800a54a:	f003 0303 	and.w	r3, r3, #3
 800a54e:	4a1c      	ldr	r2, [pc, #112]	@ (800a5c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800a550:	fa22 f303 	lsr.w	r3, r2, r3
 800a554:	637b      	str	r3, [r7, #52]	@ 0x34
 800a556:	e020      	b.n	800a59a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 800a558:	4b18      	ldr	r3, [pc, #96]	@ (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a560:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a564:	d106      	bne.n	800a574 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800a566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a568:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a56c:	d102      	bne.n	800a574 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 800a56e:	4b15      	ldr	r3, [pc, #84]	@ (800a5c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800a570:	637b      	str	r3, [r7, #52]	@ 0x34
 800a572:	e012      	b.n	800a59a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800a574:	4b11      	ldr	r3, [pc, #68]	@ (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a576:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a57a:	f003 0302 	and.w	r3, r3, #2
 800a57e:	2b02      	cmp	r3, #2
 800a580:	d107      	bne.n	800a592 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800a582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a584:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800a588:	d103      	bne.n	800a592 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 800a58a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a58e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a590:	e003      	b.n	800a59a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 800a592:	2300      	movs	r3, #0
 800a594:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a596:	f001 bcae 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a59a:	f001 bcac 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 800a59e:	4b07      	ldr	r3, [pc, #28]	@ (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a5a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a5a4:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 800a5a8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 800a5aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d10b      	bne.n	800a5c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a5b0:	f7fc fd46 	bl	8007040 <HAL_RCC_GetPCLK1Freq>
 800a5b4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 800a5b6:	f001 bc9e 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a5ba:	bf00      	nop
 800a5bc:	44020c00 	.word	0x44020c00
 800a5c0:	03d09000 	.word	0x03d09000
 800a5c4:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 800a5c8:	4ba0      	ldr	r3, [pc, #640]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a5d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a5d4:	d10b      	bne.n	800a5ee <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 800a5d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a5dc:	d107      	bne.n	800a5ee <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5de:	f107 0314 	add.w	r3, r7, #20
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f7fe fe64 	bl	80092b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a5e8:	69bb      	ldr	r3, [r7, #24]
 800a5ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5ec:	e047      	b.n	800a67e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 800a5ee:	4b97      	ldr	r3, [pc, #604]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a5f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a5fa:	d10b      	bne.n	800a614 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800a5fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5fe:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a602:	d107      	bne.n	800a614 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a604:	f107 0308 	add.w	r3, r7, #8
 800a608:	4618      	mov	r0, r3
 800a60a:	f7fe ffbd 	bl	8009588 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	637b      	str	r3, [r7, #52]	@ 0x34
 800a612:	e034      	b.n	800a67e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 800a614:	4b8d      	ldr	r3, [pc, #564]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f003 0302 	and.w	r3, r3, #2
 800a61c:	2b02      	cmp	r3, #2
 800a61e:	d10d      	bne.n	800a63c <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 800a620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a622:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a626:	d109      	bne.n	800a63c <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a628:	4b88      	ldr	r3, [pc, #544]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	08db      	lsrs	r3, r3, #3
 800a62e:	f003 0303 	and.w	r3, r3, #3
 800a632:	4a87      	ldr	r2, [pc, #540]	@ (800a850 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800a634:	fa22 f303 	lsr.w	r3, r2, r3
 800a638:	637b      	str	r3, [r7, #52]	@ 0x34
 800a63a:	e020      	b.n	800a67e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 800a63c:	4b83      	ldr	r3, [pc, #524]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a644:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a648:	d106      	bne.n	800a658 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800a64a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a64c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a650:	d102      	bne.n	800a658 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 800a652:	4b80      	ldr	r3, [pc, #512]	@ (800a854 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800a654:	637b      	str	r3, [r7, #52]	@ 0x34
 800a656:	e012      	b.n	800a67e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 800a658:	4b7c      	ldr	r3, [pc, #496]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a65a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a65e:	f003 0302 	and.w	r3, r3, #2
 800a662:	2b02      	cmp	r3, #2
 800a664:	d107      	bne.n	800a676 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 800a666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a668:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800a66c:	d103      	bne.n	800a676 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 800a66e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a672:	637b      	str	r3, [r7, #52]	@ 0x34
 800a674:	e003      	b.n	800a67e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 800a676:	2300      	movs	r3, #0
 800a678:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a67a:	f001 bc3c 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a67e:	f001 bc3a 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 800a682:	4b72      	ldr	r3, [pc, #456]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a684:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a688:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a68c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 800a68e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a690:	2b00      	cmp	r3, #0
 800a692:	d104      	bne.n	800a69e <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a694:	f7fc fcd4 	bl	8007040 <HAL_RCC_GetPCLK1Freq>
 800a698:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 800a69a:	f001 bc2c 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 800a69e:	4b6b      	ldr	r3, [pc, #428]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a6a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a6aa:	d10b      	bne.n	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800a6ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a6b2:	d107      	bne.n	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6b4:	f107 0314 	add.w	r3, r7, #20
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f7fe fdf9 	bl	80092b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a6be:	69bb      	ldr	r3, [r7, #24]
 800a6c0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6c2:	e047      	b.n	800a754 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 800a6c4:	4b61      	ldr	r3, [pc, #388]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a6cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6d0:	d10b      	bne.n	800a6ea <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 800a6d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a6d8:	d107      	bne.n	800a6ea <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6da:	f107 0308 	add.w	r3, r7, #8
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f7fe ff52 	bl	8009588 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6e8:	e034      	b.n	800a754 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 800a6ea:	4b58      	ldr	r3, [pc, #352]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f003 0302 	and.w	r3, r3, #2
 800a6f2:	2b02      	cmp	r3, #2
 800a6f4:	d10d      	bne.n	800a712 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 800a6f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6f8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a6fc:	d109      	bne.n	800a712 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a6fe:	4b53      	ldr	r3, [pc, #332]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	08db      	lsrs	r3, r3, #3
 800a704:	f003 0303 	and.w	r3, r3, #3
 800a708:	4a51      	ldr	r2, [pc, #324]	@ (800a850 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800a70a:	fa22 f303 	lsr.w	r3, r2, r3
 800a70e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a710:	e020      	b.n	800a754 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 800a712:	4b4e      	ldr	r3, [pc, #312]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a71a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a71e:	d106      	bne.n	800a72e <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 800a720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a722:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a726:	d102      	bne.n	800a72e <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 800a728:	4b4a      	ldr	r3, [pc, #296]	@ (800a854 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800a72a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a72c:	e012      	b.n	800a754 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 800a72e:	4b47      	ldr	r3, [pc, #284]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a730:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a734:	f003 0302 	and.w	r3, r3, #2
 800a738:	2b02      	cmp	r3, #2
 800a73a:	d107      	bne.n	800a74c <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 800a73c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a73e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800a742:	d103      	bne.n	800a74c <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 800a744:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a748:	637b      	str	r3, [r7, #52]	@ 0x34
 800a74a:	e003      	b.n	800a754 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 800a74c:	2300      	movs	r3, #0
 800a74e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a750:	f001 bbd1 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a754:	f001 bbcf 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 800a758:	4b3c      	ldr	r3, [pc, #240]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a75a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a75e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a762:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 800a764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a766:	2b00      	cmp	r3, #0
 800a768:	d104      	bne.n	800a774 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a76a:	f7fc fc69 	bl	8007040 <HAL_RCC_GetPCLK1Freq>
 800a76e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 800a770:	f001 bbc1 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 800a774:	4b35      	ldr	r3, [pc, #212]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a77c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a780:	d10b      	bne.n	800a79a <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 800a782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a784:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a788:	d107      	bne.n	800a79a <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a78a:	f107 0314 	add.w	r3, r7, #20
 800a78e:	4618      	mov	r0, r3
 800a790:	f7fe fd8e 	bl	80092b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a794:	69bb      	ldr	r3, [r7, #24]
 800a796:	637b      	str	r3, [r7, #52]	@ 0x34
 800a798:	e047      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 800a79a:	4b2c      	ldr	r3, [pc, #176]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a7a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7a6:	d10b      	bne.n	800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 800a7a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a7ae:	d107      	bne.n	800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7b0:	f107 0308 	add.w	r3, r7, #8
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f7fe fee7 	bl	8009588 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7be:	e034      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 800a7c0:	4b22      	ldr	r3, [pc, #136]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f003 0302 	and.w	r3, r3, #2
 800a7c8:	2b02      	cmp	r3, #2
 800a7ca:	d10d      	bne.n	800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 800a7cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ce:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a7d2:	d109      	bne.n	800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a7d4:	4b1d      	ldr	r3, [pc, #116]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	08db      	lsrs	r3, r3, #3
 800a7da:	f003 0303 	and.w	r3, r3, #3
 800a7de:	4a1c      	ldr	r2, [pc, #112]	@ (800a850 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800a7e0:	fa22 f303 	lsr.w	r3, r2, r3
 800a7e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7e6:	e020      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 800a7e8:	4b18      	ldr	r3, [pc, #96]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a7f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a7f4:	d106      	bne.n	800a804 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 800a7f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a7fc:	d102      	bne.n	800a804 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 800a7fe:	4b15      	ldr	r3, [pc, #84]	@ (800a854 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800a800:	637b      	str	r3, [r7, #52]	@ 0x34
 800a802:	e012      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 800a804:	4b11      	ldr	r3, [pc, #68]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a806:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a80a:	f003 0302 	and.w	r3, r3, #2
 800a80e:	2b02      	cmp	r3, #2
 800a810:	d107      	bne.n	800a822 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 800a812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a814:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a818:	d103      	bne.n	800a822 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 800a81a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a81e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a820:	e003      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 800a822:	2300      	movs	r3, #0
 800a824:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a826:	f001 bb66 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a82a:	f001 bb64 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 800a82e:	4b07      	ldr	r3, [pc, #28]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a830:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a834:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 800a838:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 800a83a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d10b      	bne.n	800a858 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a840:	f7fc fbfe 	bl	8007040 <HAL_RCC_GetPCLK1Freq>
 800a844:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 800a846:	f001 bb56 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a84a:	bf00      	nop
 800a84c:	44020c00 	.word	0x44020c00
 800a850:	03d09000 	.word	0x03d09000
 800a854:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 800a858:	4ba1      	ldr	r3, [pc, #644]	@ (800aae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a860:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a864:	d10b      	bne.n	800a87e <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800a866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a868:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a86c:	d107      	bne.n	800a87e <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a86e:	f107 0314 	add.w	r3, r7, #20
 800a872:	4618      	mov	r0, r3
 800a874:	f7fe fd1c 	bl	80092b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a878:	69bb      	ldr	r3, [r7, #24]
 800a87a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a87c:	e047      	b.n	800a90e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 800a87e:	4b98      	ldr	r3, [pc, #608]	@ (800aae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a886:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a88a:	d10b      	bne.n	800a8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 800a88c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a88e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a892:	d107      	bne.n	800a8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a894:	f107 0308 	add.w	r3, r7, #8
 800a898:	4618      	mov	r0, r3
 800a89a:	f7fe fe75 	bl	8009588 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8a2:	e034      	b.n	800a90e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 800a8a4:	4b8e      	ldr	r3, [pc, #568]	@ (800aae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f003 0302 	and.w	r3, r3, #2
 800a8ac:	2b02      	cmp	r3, #2
 800a8ae:	d10d      	bne.n	800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 800a8b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8b2:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800a8b6:	d109      	bne.n	800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a8b8:	4b89      	ldr	r3, [pc, #548]	@ (800aae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	08db      	lsrs	r3, r3, #3
 800a8be:	f003 0303 	and.w	r3, r3, #3
 800a8c2:	4a88      	ldr	r2, [pc, #544]	@ (800aae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800a8c4:	fa22 f303 	lsr.w	r3, r2, r3
 800a8c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8ca:	e020      	b.n	800a90e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 800a8cc:	4b84      	ldr	r3, [pc, #528]	@ (800aae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a8d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a8d8:	d106      	bne.n	800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 800a8da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8e0:	d102      	bne.n	800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 800a8e2:	4b81      	ldr	r3, [pc, #516]	@ (800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800a8e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8e6:	e012      	b.n	800a90e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 800a8e8:	4b7d      	ldr	r3, [pc, #500]	@ (800aae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a8ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a8ee:	f003 0302 	and.w	r3, r3, #2
 800a8f2:	2b02      	cmp	r3, #2
 800a8f4:	d107      	bne.n	800a906 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 800a8f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8f8:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800a8fc:	d103      	bne.n	800a906 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 800a8fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a902:	637b      	str	r3, [r7, #52]	@ 0x34
 800a904:	e003      	b.n	800a90e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 800a906:	2300      	movs	r3, #0
 800a908:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a90a:	f001 baf4 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a90e:	f001 baf2 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 800a912:	4b73      	ldr	r3, [pc, #460]	@ (800aae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a914:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a918:	f003 0307 	and.w	r3, r3, #7
 800a91c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 800a91e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a920:	2b00      	cmp	r3, #0
 800a922:	d104      	bne.n	800a92e <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a924:	f7fc fb8c 	bl	8007040 <HAL_RCC_GetPCLK1Freq>
 800a928:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 800a92a:	f001 bae4 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 800a92e:	4b6c      	ldr	r3, [pc, #432]	@ (800aae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a936:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a93a:	d10a      	bne.n	800a952 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 800a93c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a93e:	2b01      	cmp	r3, #1
 800a940:	d107      	bne.n	800a952 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a942:	f107 0314 	add.w	r3, r7, #20
 800a946:	4618      	mov	r0, r3
 800a948:	f7fe fcb2 	bl	80092b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a94c:	69bb      	ldr	r3, [r7, #24]
 800a94e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a950:	e043      	b.n	800a9da <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 800a952:	4b63      	ldr	r3, [pc, #396]	@ (800aae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a95a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a95e:	d10a      	bne.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 800a960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a962:	2b02      	cmp	r3, #2
 800a964:	d107      	bne.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a966:	f107 0308 	add.w	r3, r7, #8
 800a96a:	4618      	mov	r0, r3
 800a96c:	f7fe fe0c 	bl	8009588 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	637b      	str	r3, [r7, #52]	@ 0x34
 800a974:	e031      	b.n	800a9da <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800a976:	4b5a      	ldr	r3, [pc, #360]	@ (800aae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f003 0302 	and.w	r3, r3, #2
 800a97e:	2b02      	cmp	r3, #2
 800a980:	d10c      	bne.n	800a99c <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 800a982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a984:	2b03      	cmp	r3, #3
 800a986:	d109      	bne.n	800a99c <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a988:	4b55      	ldr	r3, [pc, #340]	@ (800aae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	08db      	lsrs	r3, r3, #3
 800a98e:	f003 0303 	and.w	r3, r3, #3
 800a992:	4a54      	ldr	r2, [pc, #336]	@ (800aae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800a994:	fa22 f303 	lsr.w	r3, r2, r3
 800a998:	637b      	str	r3, [r7, #52]	@ 0x34
 800a99a:	e01e      	b.n	800a9da <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 800a99c:	4b50      	ldr	r3, [pc, #320]	@ (800aae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a9a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9a8:	d105      	bne.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 800a9aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9ac:	2b04      	cmp	r3, #4
 800a9ae:	d102      	bne.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 800a9b0:	4b4d      	ldr	r3, [pc, #308]	@ (800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800a9b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9b4:	e011      	b.n	800a9da <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 800a9b6:	4b4a      	ldr	r3, [pc, #296]	@ (800aae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a9b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a9bc:	f003 0302 	and.w	r3, r3, #2
 800a9c0:	2b02      	cmp	r3, #2
 800a9c2:	d106      	bne.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 800a9c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9c6:	2b05      	cmp	r3, #5
 800a9c8:	d103      	bne.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 800a9ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a9ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9d0:	e003      	b.n	800a9da <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a9d6:	f001 ba8e 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a9da:	f001 ba8c 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 800a9de:	4b40      	ldr	r3, [pc, #256]	@ (800aae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a9e0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a9e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a9e8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 800a9ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d104      	bne.n	800a9fa <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a9f0:	f7fc fb26 	bl	8007040 <HAL_RCC_GetPCLK1Freq>
 800a9f4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 800a9f6:	f001 ba7e 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 800a9fa:	4b39      	ldr	r3, [pc, #228]	@ (800aae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa06:	d10a      	bne.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 800aa08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa0a:	2b10      	cmp	r3, #16
 800aa0c:	d107      	bne.n	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa0e:	f107 0314 	add.w	r3, r7, #20
 800aa12:	4618      	mov	r0, r3
 800aa14:	f7fe fc4c 	bl	80092b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aa18:	69bb      	ldr	r3, [r7, #24]
 800aa1a:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa1c:	e043      	b.n	800aaa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 800aa1e:	4b30      	ldr	r3, [pc, #192]	@ (800aae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa2a:	d10a      	bne.n	800aa42 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800aa2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa2e:	2b20      	cmp	r3, #32
 800aa30:	d107      	bne.n	800aa42 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa32:	f107 0308 	add.w	r3, r7, #8
 800aa36:	4618      	mov	r0, r3
 800aa38:	f7fe fda6 	bl	8009588 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa40:	e031      	b.n	800aaa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 800aa42:	4b27      	ldr	r3, [pc, #156]	@ (800aae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f003 0302 	and.w	r3, r3, #2
 800aa4a:	2b02      	cmp	r3, #2
 800aa4c:	d10c      	bne.n	800aa68 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800aa4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa50:	2b30      	cmp	r3, #48	@ 0x30
 800aa52:	d109      	bne.n	800aa68 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800aa54:	4b22      	ldr	r3, [pc, #136]	@ (800aae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	08db      	lsrs	r3, r3, #3
 800aa5a:	f003 0303 	and.w	r3, r3, #3
 800aa5e:	4a21      	ldr	r2, [pc, #132]	@ (800aae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800aa60:	fa22 f303 	lsr.w	r3, r2, r3
 800aa64:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa66:	e01e      	b.n	800aaa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 800aa68:	4b1d      	ldr	r3, [pc, #116]	@ (800aae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aa70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa74:	d105      	bne.n	800aa82 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 800aa76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa78:	2b40      	cmp	r3, #64	@ 0x40
 800aa7a:	d102      	bne.n	800aa82 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 800aa7c:	4b1a      	ldr	r3, [pc, #104]	@ (800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800aa7e:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa80:	e011      	b.n	800aaa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 800aa82:	4b17      	ldr	r3, [pc, #92]	@ (800aae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800aa84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aa88:	f003 0302 	and.w	r3, r3, #2
 800aa8c:	2b02      	cmp	r3, #2
 800aa8e:	d106      	bne.n	800aa9e <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 800aa90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa92:	2b50      	cmp	r3, #80	@ 0x50
 800aa94:	d103      	bne.n	800aa9e <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 800aa96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aa9a:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa9c:	e003      	b.n	800aaa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aaa2:	f001 ba28 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800aaa6:	f001 ba26 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800aaaa:	4b0d      	ldr	r3, [pc, #52]	@ (800aae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800aaac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aab0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800aab4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800aab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d104      	bne.n	800aac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800aabc:	f7fc faec 	bl	8007098 <HAL_RCC_GetPCLK3Freq>
 800aac0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800aac2:	f001 ba18 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 800aac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aac8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aacc:	d10e      	bne.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aace:	f107 0314 	add.w	r3, r7, #20
 800aad2:	4618      	mov	r0, r3
 800aad4:	f7fe fbec 	bl	80092b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aad8:	69bb      	ldr	r3, [r7, #24]
 800aada:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aadc:	f001 ba0b 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800aae0:	44020c00 	.word	0x44020c00
 800aae4:	03d09000 	.word	0x03d09000
 800aae8:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 800aaec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aaf2:	d108      	bne.n	800ab06 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aaf4:	f107 0308 	add.w	r3, r7, #8
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f7fe fd45 	bl	8009588 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ab02:	f001 b9f8 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800ab06:	4ba4      	ldr	r3, [pc, #656]	@ (800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f003 0302 	and.w	r3, r3, #2
 800ab0e:	2b02      	cmp	r3, #2
 800ab10:	d10d      	bne.n	800ab2e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800ab12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab14:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ab18:	d109      	bne.n	800ab2e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ab1a:	4b9f      	ldr	r3, [pc, #636]	@ (800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	08db      	lsrs	r3, r3, #3
 800ab20:	f003 0303 	and.w	r3, r3, #3
 800ab24:	4a9d      	ldr	r2, [pc, #628]	@ (800ad9c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800ab26:	fa22 f303 	lsr.w	r3, r2, r3
 800ab2a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab2c:	e020      	b.n	800ab70 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800ab2e:	4b9a      	ldr	r3, [pc, #616]	@ (800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ab36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab3a:	d106      	bne.n	800ab4a <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 800ab3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab3e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ab42:	d102      	bne.n	800ab4a <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 800ab44:	4b96      	ldr	r3, [pc, #600]	@ (800ada0 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800ab46:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab48:	e012      	b.n	800ab70 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800ab4a:	4b93      	ldr	r3, [pc, #588]	@ (800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ab4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ab50:	f003 0302 	and.w	r3, r3, #2
 800ab54:	2b02      	cmp	r3, #2
 800ab56:	d107      	bne.n	800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 800ab58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab5a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800ab5e:	d103      	bne.n	800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 800ab60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ab64:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab66:	e003      	b.n	800ab70 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ab6c:	f001 b9c3 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ab70:	f001 b9c1 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800ab74:	4b88      	ldr	r3, [pc, #544]	@ (800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ab76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ab7a:	f003 0307 	and.w	r3, r3, #7
 800ab7e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800ab80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d104      	bne.n	800ab90 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800ab86:	f7fc fa3f 	bl	8007008 <HAL_RCC_GetHCLKFreq>
 800ab8a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 800ab8c:	f001 b9b3 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800ab90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab92:	2b01      	cmp	r3, #1
 800ab94:	d104      	bne.n	800aba0 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 800ab96:	f7fc f90b 	bl	8006db0 <HAL_RCC_GetSysClockFreq>
 800ab9a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800ab9c:	f001 b9ab 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 800aba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aba2:	2b02      	cmp	r3, #2
 800aba4:	d108      	bne.n	800abb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aba6:	f107 0314 	add.w	r3, r7, #20
 800abaa:	4618      	mov	r0, r3
 800abac:	f7fe fb80 	bl	80092b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800abb0:	69fb      	ldr	r3, [r7, #28]
 800abb2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800abb4:	f001 b99f 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800abb8:	4b77      	ldr	r3, [pc, #476]	@ (800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800abc0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800abc4:	d105      	bne.n	800abd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 800abc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abc8:	2b03      	cmp	r3, #3
 800abca:	d102      	bne.n	800abd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 800abcc:	4b75      	ldr	r3, [pc, #468]	@ (800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 800abce:	637b      	str	r3, [r7, #52]	@ 0x34
 800abd0:	e023      	b.n	800ac1a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800abd2:	4b71      	ldr	r3, [pc, #452]	@ (800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f003 0302 	and.w	r3, r3, #2
 800abda:	2b02      	cmp	r3, #2
 800abdc:	d10c      	bne.n	800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 800abde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abe0:	2b04      	cmp	r3, #4
 800abe2:	d109      	bne.n	800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800abe4:	4b6c      	ldr	r3, [pc, #432]	@ (800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	08db      	lsrs	r3, r3, #3
 800abea:	f003 0303 	and.w	r3, r3, #3
 800abee:	4a6b      	ldr	r2, [pc, #428]	@ (800ad9c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800abf0:	fa22 f303 	lsr.w	r3, r2, r3
 800abf4:	637b      	str	r3, [r7, #52]	@ 0x34
 800abf6:	e010      	b.n	800ac1a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 800abf8:	4b67      	ldr	r3, [pc, #412]	@ (800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ac00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac04:	d105      	bne.n	800ac12 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 800ac06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac08:	2b05      	cmp	r3, #5
 800ac0a:	d102      	bne.n	800ac12 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 800ac0c:	4b64      	ldr	r3, [pc, #400]	@ (800ada0 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800ac0e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac10:	e003      	b.n	800ac1a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 800ac12:	2300      	movs	r3, #0
 800ac14:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ac16:	f001 b96e 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ac1a:	f001 b96c 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800ac1e:	4b5e      	ldr	r3, [pc, #376]	@ (800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ac20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ac24:	f003 0308 	and.w	r3, r3, #8
 800ac28:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800ac2a:	4b5b      	ldr	r3, [pc, #364]	@ (800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ac2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac30:	f003 0302 	and.w	r3, r3, #2
 800ac34:	2b02      	cmp	r3, #2
 800ac36:	d106      	bne.n	800ac46 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 800ac38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d103      	bne.n	800ac46 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 800ac3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac42:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac44:	e012      	b.n	800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800ac46:	4b54      	ldr	r3, [pc, #336]	@ (800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ac48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac54:	d106      	bne.n	800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 800ac56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac58:	2b08      	cmp	r3, #8
 800ac5a:	d103      	bne.n	800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 800ac5c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800ac60:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac62:	e003      	b.n	800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 800ac64:	2300      	movs	r3, #0
 800ac66:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800ac68:	f001 b945 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ac6c:	f001 b943 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800ac70:	4b49      	ldr	r3, [pc, #292]	@ (800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ac72:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ac76:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ac7a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800ac7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d104      	bne.n	800ac8c <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800ac82:	f7fc f9dd 	bl	8007040 <HAL_RCC_GetPCLK1Freq>
 800ac86:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800ac88:	f001 b935 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 800ac8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac92:	d108      	bne.n	800aca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac94:	f107 0308 	add.w	r3, r7, #8
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f7fe fc75 	bl	8009588 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aca2:	f001 b928 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800aca6:	4b3c      	ldr	r3, [pc, #240]	@ (800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f003 0302 	and.w	r3, r3, #2
 800acae:	2b02      	cmp	r3, #2
 800acb0:	d10d      	bne.n	800acce <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 800acb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800acb8:	d109      	bne.n	800acce <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800acba:	4b37      	ldr	r3, [pc, #220]	@ (800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	08db      	lsrs	r3, r3, #3
 800acc0:	f003 0303 	and.w	r3, r3, #3
 800acc4:	4a35      	ldr	r2, [pc, #212]	@ (800ad9c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800acc6:	fa22 f303 	lsr.w	r3, r2, r3
 800acca:	637b      	str	r3, [r7, #52]	@ 0x34
 800accc:	e011      	b.n	800acf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800acce:	4b32      	ldr	r3, [pc, #200]	@ (800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800acd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800acda:	d106      	bne.n	800acea <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 800acdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acde:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ace2:	d102      	bne.n	800acea <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 800ace4:	4b2e      	ldr	r3, [pc, #184]	@ (800ada0 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800ace6:	637b      	str	r3, [r7, #52]	@ 0x34
 800ace8:	e003      	b.n	800acf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 800acea:	2300      	movs	r3, #0
 800acec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800acee:	f001 b902 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800acf2:	f001 b900 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800acf6:	4b28      	ldr	r3, [pc, #160]	@ (800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800acf8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800acfc:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800ad00:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800ad02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d104      	bne.n	800ad12 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800ad08:	f7fc f99a 	bl	8007040 <HAL_RCC_GetPCLK1Freq>
 800ad0c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800ad0e:	f001 b8f2 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 800ad12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad14:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ad18:	d108      	bne.n	800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad1a:	f107 0308 	add.w	r3, r7, #8
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f7fe fc32 	bl	8009588 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ad28:	f001 b8e5 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800ad2c:	4b1a      	ldr	r3, [pc, #104]	@ (800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f003 0302 	and.w	r3, r3, #2
 800ad34:	2b02      	cmp	r3, #2
 800ad36:	d10d      	bne.n	800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 800ad38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad3a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800ad3e:	d109      	bne.n	800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ad40:	4b15      	ldr	r3, [pc, #84]	@ (800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	08db      	lsrs	r3, r3, #3
 800ad46:	f003 0303 	and.w	r3, r3, #3
 800ad4a:	4a14      	ldr	r2, [pc, #80]	@ (800ad9c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800ad4c:	fa22 f303 	lsr.w	r3, r2, r3
 800ad50:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad52:	e011      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 800ad54:	4b10      	ldr	r3, [pc, #64]	@ (800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ad5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad60:	d106      	bne.n	800ad70 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 800ad62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad64:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800ad68:	d102      	bne.n	800ad70 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 800ad6a:	4b0d      	ldr	r3, [pc, #52]	@ (800ada0 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800ad6c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad6e:	e003      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 800ad70:	2300      	movs	r3, #0
 800ad72:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ad74:	f001 b8bf 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ad78:	f001 b8bd 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800ad7c:	4b06      	ldr	r3, [pc, #24]	@ (800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800ad7e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ad82:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800ad86:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 800ad88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d10c      	bne.n	800ada8 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800ad8e:	f7fc f983 	bl	8007098 <HAL_RCC_GetPCLK3Freq>
 800ad92:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 800ad94:	f001 b8af 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ad98:	44020c00 	.word	0x44020c00
 800ad9c:	03d09000 	.word	0x03d09000
 800ada0:	003d0900 	.word	0x003d0900
 800ada4:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 800ada8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adaa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800adae:	d108      	bne.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800adb0:	f107 0308 	add.w	r3, r7, #8
 800adb4:	4618      	mov	r0, r3
 800adb6:	f7fe fbe7 	bl	8009588 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800adbe:	f001 b89a 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800adc2:	4b9f      	ldr	r3, [pc, #636]	@ (800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f003 0302 	and.w	r3, r3, #2
 800adca:	2b02      	cmp	r3, #2
 800adcc:	d10d      	bne.n	800adea <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 800adce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800add0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800add4:	d109      	bne.n	800adea <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800add6:	4b9a      	ldr	r3, [pc, #616]	@ (800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	08db      	lsrs	r3, r3, #3
 800addc:	f003 0303 	and.w	r3, r3, #3
 800ade0:	4a98      	ldr	r2, [pc, #608]	@ (800b044 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800ade2:	fa22 f303 	lsr.w	r3, r2, r3
 800ade6:	637b      	str	r3, [r7, #52]	@ 0x34
 800ade8:	e011      	b.n	800ae0e <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800adea:	4b95      	ldr	r3, [pc, #596]	@ (800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800adf2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800adf6:	d106      	bne.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 800adf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adfa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800adfe:	d102      	bne.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 800ae00:	4b91      	ldr	r3, [pc, #580]	@ (800b048 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800ae02:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae04:	e003      	b.n	800ae0e <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 800ae06:	2300      	movs	r3, #0
 800ae08:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ae0a:	f001 b874 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ae0e:	f001 b872 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800ae12:	4b8b      	ldr	r3, [pc, #556]	@ (800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ae14:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ae18:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800ae1c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 800ae1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d104      	bne.n	800ae2e <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800ae24:	f7fc f938 	bl	8007098 <HAL_RCC_GetPCLK3Freq>
 800ae28:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 800ae2a:	f001 b864 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 800ae2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ae34:	d108      	bne.n	800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae36:	f107 0308 	add.w	r3, r7, #8
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f7fe fba4 	bl	8009588 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ae44:	f001 b857 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800ae48:	4b7d      	ldr	r3, [pc, #500]	@ (800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f003 0302 	and.w	r3, r3, #2
 800ae50:	2b02      	cmp	r3, #2
 800ae52:	d10d      	bne.n	800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 800ae54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae56:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ae5a:	d109      	bne.n	800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ae5c:	4b78      	ldr	r3, [pc, #480]	@ (800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	08db      	lsrs	r3, r3, #3
 800ae62:	f003 0303 	and.w	r3, r3, #3
 800ae66:	4a77      	ldr	r2, [pc, #476]	@ (800b044 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800ae68:	fa22 f303 	lsr.w	r3, r2, r3
 800ae6c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae6e:	e011      	b.n	800ae94 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 800ae70:	4b73      	ldr	r3, [pc, #460]	@ (800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ae78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae7c:	d106      	bne.n	800ae8c <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 800ae7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae80:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800ae84:	d102      	bne.n	800ae8c <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 800ae86:	4b70      	ldr	r3, [pc, #448]	@ (800b048 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800ae88:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae8a:	e003      	b.n	800ae94 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ae90:	f001 b831 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ae94:	f001 b82f 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 800ae98:	4b69      	ldr	r3, [pc, #420]	@ (800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800ae9a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ae9e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800aea2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800aea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d104      	bne.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800aeaa:	f7fc f8c9 	bl	8007040 <HAL_RCC_GetPCLK1Freq>
 800aeae:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800aeb0:	f001 b821 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 800aeb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeb6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aeba:	d108      	bne.n	800aece <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aebc:	f107 0308 	add.w	r3, r7, #8
 800aec0:	4618      	mov	r0, r3
 800aec2:	f7fe fb61 	bl	8009588 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800aec6:	693b      	ldr	r3, [r7, #16]
 800aec8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aeca:	f001 b814 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800aece:	4b5c      	ldr	r3, [pc, #368]	@ (800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f003 0302 	and.w	r3, r3, #2
 800aed6:	2b02      	cmp	r3, #2
 800aed8:	d10e      	bne.n	800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 800aeda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aedc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aee0:	d10a      	bne.n	800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800aee2:	4b57      	ldr	r3, [pc, #348]	@ (800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	08db      	lsrs	r3, r3, #3
 800aee8:	f003 0303 	and.w	r3, r3, #3
 800aeec:	4a55      	ldr	r2, [pc, #340]	@ (800b044 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800aeee:	fa22 f303 	lsr.w	r3, r2, r3
 800aef2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aef4:	f000 bfff 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800aef8:	2300      	movs	r3, #0
 800aefa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aefc:	f000 bffb 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800af00:	4b4f      	ldr	r3, [pc, #316]	@ (800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800af02:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800af06:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800af0a:	633b      	str	r3, [r7, #48]	@ 0x30
 800af0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af0e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800af12:	d056      	beq.n	800afc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 800af14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af16:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800af1a:	f200 808b 	bhi.w	800b034 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800af1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800af24:	d03e      	beq.n	800afa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 800af26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800af2c:	f200 8082 	bhi.w	800b034 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800af30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800af36:	d027      	beq.n	800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 800af38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800af3e:	d879      	bhi.n	800b034 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800af40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af46:	d017      	beq.n	800af78 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 800af48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af4e:	d871      	bhi.n	800b034 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800af50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af52:	2b00      	cmp	r3, #0
 800af54:	d004      	beq.n	800af60 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 800af56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af5c:	d004      	beq.n	800af68 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 800af5e:	e069      	b.n	800b034 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800af60:	f7fc f89a 	bl	8007098 <HAL_RCC_GetPCLK3Freq>
 800af64:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800af66:	e068      	b.n	800b03a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af68:	f107 0314 	add.w	r3, r7, #20
 800af6c:	4618      	mov	r0, r3
 800af6e:	f7fe f99f 	bl	80092b0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800af76:	e060      	b.n	800b03a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af78:	f107 0308 	add.w	r3, r7, #8
 800af7c:	4618      	mov	r0, r3
 800af7e:	f7fe fb03 	bl	8009588 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800af86:	e058      	b.n	800b03a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800af88:	4b2d      	ldr	r3, [pc, #180]	@ (800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800af8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800af8e:	f003 0302 	and.w	r3, r3, #2
 800af92:	2b02      	cmp	r3, #2
 800af94:	d103      	bne.n	800af9e <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 800af96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af9a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800af9c:	e04d      	b.n	800b03a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800af9e:	2300      	movs	r3, #0
 800afa0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800afa2:	e04a      	b.n	800b03a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800afa4:	4b26      	ldr	r3, [pc, #152]	@ (800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800afa6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800afaa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800afae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800afb2:	d103      	bne.n	800afbc <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 800afb4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800afb8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800afba:	e03e      	b.n	800b03a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800afbc:	2300      	movs	r3, #0
 800afbe:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800afc0:	e03b      	b.n	800b03a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800afc2:	4b1f      	ldr	r3, [pc, #124]	@ (800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800afc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800afc8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800afcc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800afce:	4b1c      	ldr	r3, [pc, #112]	@ (800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f003 0302 	and.w	r3, r3, #2
 800afd6:	2b02      	cmp	r3, #2
 800afd8:	d10c      	bne.n	800aff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 800afda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d109      	bne.n	800aff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800afe0:	4b17      	ldr	r3, [pc, #92]	@ (800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	08db      	lsrs	r3, r3, #3
 800afe6:	f003 0303 	and.w	r3, r3, #3
 800afea:	4a16      	ldr	r2, [pc, #88]	@ (800b044 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800afec:	fa22 f303 	lsr.w	r3, r2, r3
 800aff0:	637b      	str	r3, [r7, #52]	@ 0x34
 800aff2:	e01e      	b.n	800b032 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aff4:	4b12      	ldr	r3, [pc, #72]	@ (800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800affc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b000:	d106      	bne.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 800b002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b004:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b008:	d102      	bne.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b00a:	4b0f      	ldr	r3, [pc, #60]	@ (800b048 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800b00c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b00e:	e010      	b.n	800b032 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b010:	4b0b      	ldr	r3, [pc, #44]	@ (800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b018:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b01c:	d106      	bne.n	800b02c <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 800b01e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b020:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b024:	d102      	bne.n	800b02c <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b026:	4b09      	ldr	r3, [pc, #36]	@ (800b04c <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 800b028:	637b      	str	r3, [r7, #52]	@ 0x34
 800b02a:	e002      	b.n	800b032 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b02c:	2300      	movs	r3, #0
 800b02e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b030:	e003      	b.n	800b03a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 800b032:	e002      	b.n	800b03a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 800b034:	2300      	movs	r3, #0
 800b036:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b038:	bf00      	nop
          }
        }
        break;
 800b03a:	f000 bf5c 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b03e:	bf00      	nop
 800b040:	44020c00 	.word	0x44020c00
 800b044:	03d09000 	.word	0x03d09000
 800b048:	003d0900 	.word	0x003d0900
 800b04c:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800b050:	4b9e      	ldr	r3, [pc, #632]	@ (800b2cc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b052:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b056:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b05a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b05c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b05e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b062:	d056      	beq.n	800b112 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 800b064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b066:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b06a:	f200 808b 	bhi.w	800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800b06e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b070:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b074:	d03e      	beq.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 800b076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b078:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b07c:	f200 8082 	bhi.w	800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800b080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b082:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b086:	d027      	beq.n	800b0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 800b088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b08a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b08e:	d879      	bhi.n	800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800b090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b092:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b096:	d017      	beq.n	800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 800b098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b09a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b09e:	d871      	bhi.n	800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800b0a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d004      	beq.n	800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 800b0a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b0ac:	d004      	beq.n	800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 800b0ae:	e069      	b.n	800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 800b0b0:	f7fb ffc6 	bl	8007040 <HAL_RCC_GetPCLK1Freq>
 800b0b4:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800b0b6:	e068      	b.n	800b18a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0b8:	f107 0314 	add.w	r3, r7, #20
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f7fe f8f7 	bl	80092b0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b0c6:	e060      	b.n	800b18a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b0c8:	f107 0308 	add.w	r3, r7, #8
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f7fe fa5b 	bl	8009588 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b0d6:	e058      	b.n	800b18a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b0d8:	4b7c      	ldr	r3, [pc, #496]	@ (800b2cc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b0da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b0de:	f003 0302 	and.w	r3, r3, #2
 800b0e2:	2b02      	cmp	r3, #2
 800b0e4:	d103      	bne.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 800b0e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b0ea:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b0ec:	e04d      	b.n	800b18a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b0f2:	e04a      	b.n	800b18a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800b0f4:	4b75      	ldr	r3, [pc, #468]	@ (800b2cc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b0f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b0fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b0fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b102:	d103      	bne.n	800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 800b104:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b108:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b10a:	e03e      	b.n	800b18a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800b10c:	2300      	movs	r3, #0
 800b10e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b110:	e03b      	b.n	800b18a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b112:	4b6e      	ldr	r3, [pc, #440]	@ (800b2cc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b114:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b118:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b11c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b11e:	4b6b      	ldr	r3, [pc, #428]	@ (800b2cc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f003 0302 	and.w	r3, r3, #2
 800b126:	2b02      	cmp	r3, #2
 800b128:	d10c      	bne.n	800b144 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 800b12a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d109      	bne.n	800b144 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b130:	4b66      	ldr	r3, [pc, #408]	@ (800b2cc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	08db      	lsrs	r3, r3, #3
 800b136:	f003 0303 	and.w	r3, r3, #3
 800b13a:	4a65      	ldr	r2, [pc, #404]	@ (800b2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800b13c:	fa22 f303 	lsr.w	r3, r2, r3
 800b140:	637b      	str	r3, [r7, #52]	@ 0x34
 800b142:	e01e      	b.n	800b182 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b144:	4b61      	ldr	r3, [pc, #388]	@ (800b2cc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b14c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b150:	d106      	bne.n	800b160 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 800b152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b154:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b158:	d102      	bne.n	800b160 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b15a:	4b5e      	ldr	r3, [pc, #376]	@ (800b2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800b15c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b15e:	e010      	b.n	800b182 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b160:	4b5a      	ldr	r3, [pc, #360]	@ (800b2cc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b168:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b16c:	d106      	bne.n	800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 800b16e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b170:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b174:	d102      	bne.n	800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b176:	4b58      	ldr	r3, [pc, #352]	@ (800b2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800b178:	637b      	str	r3, [r7, #52]	@ 0x34
 800b17a:	e002      	b.n	800b182 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b17c:	2300      	movs	r3, #0
 800b17e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b180:	e003      	b.n	800b18a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 800b182:	e002      	b.n	800b18a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 800b184:	2300      	movs	r3, #0
 800b186:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b188:	bf00      	nop
          }
        }
        break;
 800b18a:	f000 beb4 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800b18e:	4b4f      	ldr	r3, [pc, #316]	@ (800b2cc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b190:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b194:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b198:	633b      	str	r3, [r7, #48]	@ 0x30
 800b19a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b19c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b1a0:	d056      	beq.n	800b250 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 800b1a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b1a8:	f200 808b 	bhi.w	800b2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800b1ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b1b2:	d03e      	beq.n	800b232 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 800b1b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1b6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b1ba:	f200 8082 	bhi.w	800b2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800b1be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1c0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b1c4:	d027      	beq.n	800b216 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 800b1c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b1cc:	d879      	bhi.n	800b2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800b1ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b1d4:	d017      	beq.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 800b1d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b1dc:	d871      	bhi.n	800b2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800b1de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d004      	beq.n	800b1ee <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 800b1e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b1ea:	d004      	beq.n	800b1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 800b1ec:	e069      	b.n	800b2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800b1ee:	f7fb ff53 	bl	8007098 <HAL_RCC_GetPCLK3Freq>
 800b1f2:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800b1f4:	e068      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1f6:	f107 0314 	add.w	r3, r7, #20
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f7fe f858 	bl	80092b0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b204:	e060      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b206:	f107 0308 	add.w	r3, r7, #8
 800b20a:	4618      	mov	r0, r3
 800b20c:	f7fe f9bc 	bl	8009588 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800b210:	693b      	ldr	r3, [r7, #16]
 800b212:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b214:	e058      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b216:	4b2d      	ldr	r3, [pc, #180]	@ (800b2cc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b218:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b21c:	f003 0302 	and.w	r3, r3, #2
 800b220:	2b02      	cmp	r3, #2
 800b222:	d103      	bne.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 800b224:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b228:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b22a:	e04d      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800b22c:	2300      	movs	r3, #0
 800b22e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b230:	e04a      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800b232:	4b26      	ldr	r3, [pc, #152]	@ (800b2cc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b234:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b238:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b23c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b240:	d103      	bne.n	800b24a <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 800b242:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b246:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b248:	e03e      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800b24a:	2300      	movs	r3, #0
 800b24c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b24e:	e03b      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b250:	4b1e      	ldr	r3, [pc, #120]	@ (800b2cc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b252:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b256:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b25a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b25c:	4b1b      	ldr	r3, [pc, #108]	@ (800b2cc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f003 0302 	and.w	r3, r3, #2
 800b264:	2b02      	cmp	r3, #2
 800b266:	d10c      	bne.n	800b282 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 800b268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d109      	bne.n	800b282 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b26e:	4b17      	ldr	r3, [pc, #92]	@ (800b2cc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	08db      	lsrs	r3, r3, #3
 800b274:	f003 0303 	and.w	r3, r3, #3
 800b278:	4a15      	ldr	r2, [pc, #84]	@ (800b2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800b27a:	fa22 f303 	lsr.w	r3, r2, r3
 800b27e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b280:	e01e      	b.n	800b2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b282:	4b12      	ldr	r3, [pc, #72]	@ (800b2cc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b28a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b28e:	d106      	bne.n	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 800b290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b292:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b296:	d102      	bne.n	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b298:	4b0e      	ldr	r3, [pc, #56]	@ (800b2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800b29a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b29c:	e010      	b.n	800b2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b29e:	4b0b      	ldr	r3, [pc, #44]	@ (800b2cc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b2a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b2aa:	d106      	bne.n	800b2ba <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 800b2ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b2b2:	d102      	bne.n	800b2ba <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b2b4:	4b08      	ldr	r3, [pc, #32]	@ (800b2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800b2b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2b8:	e002      	b.n	800b2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b2be:	e003      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 800b2c0:	e002      	b.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b2c6:	bf00      	nop
          }
        }
        break;
 800b2c8:	f000 be15 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b2cc:	44020c00 	.word	0x44020c00
 800b2d0:	03d09000 	.word	0x03d09000
 800b2d4:	003d0900 	.word	0x003d0900
 800b2d8:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 800b2dc:	4b9e      	ldr	r3, [pc, #632]	@ (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b2de:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b2e2:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 800b2e6:	633b      	str	r3, [r7, #48]	@ 0x30
 800b2e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ea:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800b2ee:	d056      	beq.n	800b39e <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 800b2f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2f2:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800b2f6:	f200 808b 	bhi.w	800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800b2fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b300:	d03e      	beq.n	800b380 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 800b302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b304:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b308:	f200 8082 	bhi.w	800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800b30c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b30e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b312:	d027      	beq.n	800b364 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 800b314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b316:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b31a:	d879      	bhi.n	800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800b31c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b31e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b322:	d017      	beq.n	800b354 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 800b324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b326:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b32a:	d871      	bhi.n	800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800b32c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d004      	beq.n	800b33c <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 800b332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b334:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b338:	d004      	beq.n	800b344 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 800b33a:	e069      	b.n	800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800b33c:	f7fb feac 	bl	8007098 <HAL_RCC_GetPCLK3Freq>
 800b340:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800b342:	e068      	b.n	800b416 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b344:	f107 0314 	add.w	r3, r7, #20
 800b348:	4618      	mov	r0, r3
 800b34a:	f7fd ffb1 	bl	80092b0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b352:	e060      	b.n	800b416 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b354:	f107 0308 	add.w	r3, r7, #8
 800b358:	4618      	mov	r0, r3
 800b35a:	f7fe f915 	bl	8009588 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b362:	e058      	b.n	800b416 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b364:	4b7c      	ldr	r3, [pc, #496]	@ (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b366:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b36a:	f003 0302 	and.w	r3, r3, #2
 800b36e:	2b02      	cmp	r3, #2
 800b370:	d103      	bne.n	800b37a <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 800b372:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b376:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b378:	e04d      	b.n	800b416 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800b37a:	2300      	movs	r3, #0
 800b37c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b37e:	e04a      	b.n	800b416 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800b380:	4b75      	ldr	r3, [pc, #468]	@ (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b382:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b386:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b38a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b38e:	d103      	bne.n	800b398 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 800b390:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b394:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b396:	e03e      	b.n	800b416 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800b398:	2300      	movs	r3, #0
 800b39a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b39c:	e03b      	b.n	800b416 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b39e:	4b6e      	ldr	r3, [pc, #440]	@ (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b3a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b3a4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b3a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b3aa:	4b6b      	ldr	r3, [pc, #428]	@ (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f003 0302 	and.w	r3, r3, #2
 800b3b2:	2b02      	cmp	r3, #2
 800b3b4:	d10c      	bne.n	800b3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 800b3b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d109      	bne.n	800b3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b3bc:	4b66      	ldr	r3, [pc, #408]	@ (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	08db      	lsrs	r3, r3, #3
 800b3c2:	f003 0303 	and.w	r3, r3, #3
 800b3c6:	4a65      	ldr	r2, [pc, #404]	@ (800b55c <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800b3c8:	fa22 f303 	lsr.w	r3, r2, r3
 800b3cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3ce:	e01e      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b3d0:	4b61      	ldr	r3, [pc, #388]	@ (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b3d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b3dc:	d106      	bne.n	800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 800b3de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b3e4:	d102      	bne.n	800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b3e6:	4b5e      	ldr	r3, [pc, #376]	@ (800b560 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800b3e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3ea:	e010      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b3ec:	4b5a      	ldr	r3, [pc, #360]	@ (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b3f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b3f8:	d106      	bne.n	800b408 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 800b3fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b400:	d102      	bne.n	800b408 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b402:	4b58      	ldr	r3, [pc, #352]	@ (800b564 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800b404:	637b      	str	r3, [r7, #52]	@ 0x34
 800b406:	e002      	b.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b408:	2300      	movs	r3, #0
 800b40a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b40c:	e003      	b.n	800b416 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 800b40e:	e002      	b.n	800b416 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 800b410:	2300      	movs	r3, #0
 800b412:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b414:	bf00      	nop
          }
        }
        break;
 800b416:	f000 bd6e 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 800b41a:	4b4f      	ldr	r3, [pc, #316]	@ (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b41c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b420:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800b424:	633b      	str	r3, [r7, #48]	@ 0x30
 800b426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b428:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800b42c:	d056      	beq.n	800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 800b42e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b430:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800b434:	f200 808b 	bhi.w	800b54e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800b438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b43a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b43e:	d03e      	beq.n	800b4be <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 800b440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b442:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b446:	f200 8082 	bhi.w	800b54e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800b44a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b44c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b450:	d027      	beq.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 800b452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b454:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b458:	d879      	bhi.n	800b54e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800b45a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b45c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b460:	d017      	beq.n	800b492 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 800b462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b464:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b468:	d871      	bhi.n	800b54e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800b46a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d004      	beq.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 800b470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b472:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b476:	d004      	beq.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 800b478:	e069      	b.n	800b54e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800b47a:	f7fb fe0d 	bl	8007098 <HAL_RCC_GetPCLK3Freq>
 800b47e:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800b480:	e068      	b.n	800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b482:	f107 0314 	add.w	r3, r7, #20
 800b486:	4618      	mov	r0, r3
 800b488:	f7fd ff12 	bl	80092b0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b48c:	697b      	ldr	r3, [r7, #20]
 800b48e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b490:	e060      	b.n	800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b492:	f107 0308 	add.w	r3, r7, #8
 800b496:	4618      	mov	r0, r3
 800b498:	f7fe f876 	bl	8009588 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b4a0:	e058      	b.n	800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b4a2:	4b2d      	ldr	r3, [pc, #180]	@ (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b4a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b4a8:	f003 0302 	and.w	r3, r3, #2
 800b4ac:	2b02      	cmp	r3, #2
 800b4ae:	d103      	bne.n	800b4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 800b4b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b4b4:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b4b6:	e04d      	b.n	800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b4bc:	e04a      	b.n	800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800b4be:	4b26      	ldr	r3, [pc, #152]	@ (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b4c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b4c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b4c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b4cc:	d103      	bne.n	800b4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 800b4ce:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b4d2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b4d4:	e03e      	b.n	800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b4da:	e03b      	b.n	800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b4dc:	4b1e      	ldr	r3, [pc, #120]	@ (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b4de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b4e2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b4e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b4e8:	4b1b      	ldr	r3, [pc, #108]	@ (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f003 0302 	and.w	r3, r3, #2
 800b4f0:	2b02      	cmp	r3, #2
 800b4f2:	d10c      	bne.n	800b50e <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 800b4f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d109      	bne.n	800b50e <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b4fa:	4b17      	ldr	r3, [pc, #92]	@ (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	08db      	lsrs	r3, r3, #3
 800b500:	f003 0303 	and.w	r3, r3, #3
 800b504:	4a15      	ldr	r2, [pc, #84]	@ (800b55c <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800b506:	fa22 f303 	lsr.w	r3, r2, r3
 800b50a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b50c:	e01e      	b.n	800b54c <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b50e:	4b12      	ldr	r3, [pc, #72]	@ (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b516:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b51a:	d106      	bne.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 800b51c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b51e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b522:	d102      	bne.n	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b524:	4b0e      	ldr	r3, [pc, #56]	@ (800b560 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800b526:	637b      	str	r3, [r7, #52]	@ 0x34
 800b528:	e010      	b.n	800b54c <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b52a:	4b0b      	ldr	r3, [pc, #44]	@ (800b558 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b532:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b536:	d106      	bne.n	800b546 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 800b538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b53a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b53e:	d102      	bne.n	800b546 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b540:	4b08      	ldr	r3, [pc, #32]	@ (800b564 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800b542:	637b      	str	r3, [r7, #52]	@ 0x34
 800b544:	e002      	b.n	800b54c <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b546:	2300      	movs	r3, #0
 800b548:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b54a:	e003      	b.n	800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 800b54c:	e002      	b.n	800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 800b54e:	2300      	movs	r3, #0
 800b550:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b552:	bf00      	nop
          }
        }
        break;
 800b554:	f000 bccf 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b558:	44020c00 	.word	0x44020c00
 800b55c:	03d09000 	.word	0x03d09000
 800b560:	003d0900 	.word	0x003d0900
 800b564:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 800b568:	4b9e      	ldr	r3, [pc, #632]	@ (800b7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b56a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b56e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800b572:	633b      	str	r3, [r7, #48]	@ 0x30
 800b574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b576:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b57a:	d056      	beq.n	800b62a <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 800b57c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b57e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b582:	f200 808b 	bhi.w	800b69c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800b586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b588:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b58c:	d03e      	beq.n	800b60c <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 800b58e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b590:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b594:	f200 8082 	bhi.w	800b69c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800b598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b59a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b59e:	d027      	beq.n	800b5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 800b5a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5a2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b5a6:	d879      	bhi.n	800b69c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800b5a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b5ae:	d017      	beq.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 800b5b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b5b6:	d871      	bhi.n	800b69c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800b5b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d004      	beq.n	800b5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 800b5be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b5c4:	d004      	beq.n	800b5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 800b5c6:	e069      	b.n	800b69c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800b5c8:	f7fb fd66 	bl	8007098 <HAL_RCC_GetPCLK3Freq>
 800b5cc:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800b5ce:	e068      	b.n	800b6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5d0:	f107 0314 	add.w	r3, r7, #20
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f7fd fe6b 	bl	80092b0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b5de:	e060      	b.n	800b6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5e0:	f107 0308 	add.w	r3, r7, #8
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f7fd ffcf 	bl	8009588 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800b5ea:	693b      	ldr	r3, [r7, #16]
 800b5ec:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b5ee:	e058      	b.n	800b6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b5f0:	4b7c      	ldr	r3, [pc, #496]	@ (800b7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b5f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b5f6:	f003 0302 	and.w	r3, r3, #2
 800b5fa:	2b02      	cmp	r3, #2
 800b5fc:	d103      	bne.n	800b606 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800b5fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b602:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b604:	e04d      	b.n	800b6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800b606:	2300      	movs	r3, #0
 800b608:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b60a:	e04a      	b.n	800b6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800b60c:	4b75      	ldr	r3, [pc, #468]	@ (800b7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b60e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b612:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b616:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b61a:	d103      	bne.n	800b624 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 800b61c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b620:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b622:	e03e      	b.n	800b6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800b624:	2300      	movs	r3, #0
 800b626:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b628:	e03b      	b.n	800b6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b62a:	4b6e      	ldr	r3, [pc, #440]	@ (800b7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b62c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b630:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b634:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b636:	4b6b      	ldr	r3, [pc, #428]	@ (800b7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f003 0302 	and.w	r3, r3, #2
 800b63e:	2b02      	cmp	r3, #2
 800b640:	d10c      	bne.n	800b65c <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 800b642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b644:	2b00      	cmp	r3, #0
 800b646:	d109      	bne.n	800b65c <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b648:	4b66      	ldr	r3, [pc, #408]	@ (800b7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	08db      	lsrs	r3, r3, #3
 800b64e:	f003 0303 	and.w	r3, r3, #3
 800b652:	4a65      	ldr	r2, [pc, #404]	@ (800b7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800b654:	fa22 f303 	lsr.w	r3, r2, r3
 800b658:	637b      	str	r3, [r7, #52]	@ 0x34
 800b65a:	e01e      	b.n	800b69a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b65c:	4b61      	ldr	r3, [pc, #388]	@ (800b7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b664:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b668:	d106      	bne.n	800b678 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 800b66a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b66c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b670:	d102      	bne.n	800b678 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b672:	4b5e      	ldr	r3, [pc, #376]	@ (800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800b674:	637b      	str	r3, [r7, #52]	@ 0x34
 800b676:	e010      	b.n	800b69a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b678:	4b5a      	ldr	r3, [pc, #360]	@ (800b7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b680:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b684:	d106      	bne.n	800b694 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 800b686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b688:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b68c:	d102      	bne.n	800b694 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b68e:	4b58      	ldr	r3, [pc, #352]	@ (800b7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800b690:	637b      	str	r3, [r7, #52]	@ 0x34
 800b692:	e002      	b.n	800b69a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b694:	2300      	movs	r3, #0
 800b696:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b698:	e003      	b.n	800b6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 800b69a:	e002      	b.n	800b6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 800b69c:	2300      	movs	r3, #0
 800b69e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b6a0:	bf00      	nop
          }
        }
        break;
 800b6a2:	f000 bc28 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b6a6:	4b4f      	ldr	r3, [pc, #316]	@ (800b7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b6a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b6ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b6b0:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800b6b2:	4b4c      	ldr	r3, [pc, #304]	@ (800b7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b6ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b6be:	d106      	bne.n	800b6ce <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 800b6c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d103      	bne.n	800b6ce <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 800b6c6:	4b4a      	ldr	r3, [pc, #296]	@ (800b7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800b6c8:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800b6ca:	f000 bc14 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800b6ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b6d4:	d108      	bne.n	800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b6d6:	f107 0320 	add.w	r3, r7, #32
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f7fd fc7c 	bl	8008fd8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b6e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b6e4:	f000 bc07 	b.w	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800b6e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b6ee:	d107      	bne.n	800b700 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6f0:	f107 0314 	add.w	r3, r7, #20
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f7fd fddb 	bl	80092b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b6fa:	69bb      	ldr	r3, [r7, #24]
 800b6fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b6fe:	e3fa      	b.n	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800b700:	2300      	movs	r3, #0
 800b702:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b704:	e3f7      	b.n	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800b706:	4b37      	ldr	r3, [pc, #220]	@ (800b7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b70c:	f003 0307 	and.w	r3, r3, #7
 800b710:	633b      	str	r3, [r7, #48]	@ 0x30
 800b712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b714:	2b04      	cmp	r3, #4
 800b716:	d861      	bhi.n	800b7dc <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 800b718:	a201      	add	r2, pc, #4	@ (adr r2, 800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 800b71a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b71e:	bf00      	nop
 800b720:	0800b735 	.word	0x0800b735
 800b724:	0800b745 	.word	0x0800b745
 800b728:	0800b755 	.word	0x0800b755
 800b72c:	0800b765 	.word	0x0800b765
 800b730:	0800b76b 	.word	0x0800b76b
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b734:	f107 0320 	add.w	r3, r7, #32
 800b738:	4618      	mov	r0, r3
 800b73a:	f7fd fc4d 	bl	8008fd8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800b73e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b740:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b742:	e04e      	b.n	800b7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b744:	f107 0314 	add.w	r3, r7, #20
 800b748:	4618      	mov	r0, r3
 800b74a:	f7fd fdb1 	bl	80092b0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b752:	e046      	b.n	800b7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b754:	f107 0308 	add.w	r3, r7, #8
 800b758:	4618      	mov	r0, r3
 800b75a:	f7fd ff15 	bl	8009588 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b762:	e03e      	b.n	800b7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800b764:	4b23      	ldr	r3, [pc, #140]	@ (800b7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 800b766:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b768:	e03b      	b.n	800b7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b76a:	4b1e      	ldr	r3, [pc, #120]	@ (800b7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b76c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b770:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b774:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b776:	4b1b      	ldr	r3, [pc, #108]	@ (800b7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f003 0302 	and.w	r3, r3, #2
 800b77e:	2b02      	cmp	r3, #2
 800b780:	d10c      	bne.n	800b79c <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 800b782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b784:	2b00      	cmp	r3, #0
 800b786:	d109      	bne.n	800b79c <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b788:	4b16      	ldr	r3, [pc, #88]	@ (800b7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	08db      	lsrs	r3, r3, #3
 800b78e:	f003 0303 	and.w	r3, r3, #3
 800b792:	4a15      	ldr	r2, [pc, #84]	@ (800b7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800b794:	fa22 f303 	lsr.w	r3, r2, r3
 800b798:	637b      	str	r3, [r7, #52]	@ 0x34
 800b79a:	e01e      	b.n	800b7da <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b79c:	4b11      	ldr	r3, [pc, #68]	@ (800b7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b7a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b7a8:	d106      	bne.n	800b7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 800b7aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b7b0:	d102      	bne.n	800b7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b7b2:	4b0e      	ldr	r3, [pc, #56]	@ (800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800b7b4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7b6:	e010      	b.n	800b7da <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b7b8:	4b0a      	ldr	r3, [pc, #40]	@ (800b7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b7c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b7c4:	d106      	bne.n	800b7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 800b7c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b7cc:	d102      	bne.n	800b7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b7ce:	4b08      	ldr	r3, [pc, #32]	@ (800b7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800b7d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7d2:	e002      	b.n	800b7da <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b7d8:	e003      	b.n	800b7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 800b7da:	e002      	b.n	800b7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b7e0:	bf00      	nop
          }
        }
        break;
 800b7e2:	e388      	b.n	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b7e4:	44020c00 	.word	0x44020c00
 800b7e8:	03d09000 	.word	0x03d09000
 800b7ec:	003d0900 	.word	0x003d0900
 800b7f0:	007a1200 	.word	0x007a1200
 800b7f4:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800b7f8:	4ba9      	ldr	r3, [pc, #676]	@ (800baa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b7fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b7fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b802:	633b      	str	r3, [r7, #48]	@ 0x30
 800b804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b806:	2b20      	cmp	r3, #32
 800b808:	f200 809a 	bhi.w	800b940 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 800b80c:	a201      	add	r2, pc, #4	@ (adr r2, 800b814 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800b80e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b812:	bf00      	nop
 800b814:	0800b899 	.word	0x0800b899
 800b818:	0800b941 	.word	0x0800b941
 800b81c:	0800b941 	.word	0x0800b941
 800b820:	0800b941 	.word	0x0800b941
 800b824:	0800b941 	.word	0x0800b941
 800b828:	0800b941 	.word	0x0800b941
 800b82c:	0800b941 	.word	0x0800b941
 800b830:	0800b941 	.word	0x0800b941
 800b834:	0800b8a9 	.word	0x0800b8a9
 800b838:	0800b941 	.word	0x0800b941
 800b83c:	0800b941 	.word	0x0800b941
 800b840:	0800b941 	.word	0x0800b941
 800b844:	0800b941 	.word	0x0800b941
 800b848:	0800b941 	.word	0x0800b941
 800b84c:	0800b941 	.word	0x0800b941
 800b850:	0800b941 	.word	0x0800b941
 800b854:	0800b8b9 	.word	0x0800b8b9
 800b858:	0800b941 	.word	0x0800b941
 800b85c:	0800b941 	.word	0x0800b941
 800b860:	0800b941 	.word	0x0800b941
 800b864:	0800b941 	.word	0x0800b941
 800b868:	0800b941 	.word	0x0800b941
 800b86c:	0800b941 	.word	0x0800b941
 800b870:	0800b941 	.word	0x0800b941
 800b874:	0800b8c9 	.word	0x0800b8c9
 800b878:	0800b941 	.word	0x0800b941
 800b87c:	0800b941 	.word	0x0800b941
 800b880:	0800b941 	.word	0x0800b941
 800b884:	0800b941 	.word	0x0800b941
 800b888:	0800b941 	.word	0x0800b941
 800b88c:	0800b941 	.word	0x0800b941
 800b890:	0800b941 	.word	0x0800b941
 800b894:	0800b8cf 	.word	0x0800b8cf
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b898:	f107 0320 	add.w	r3, r7, #32
 800b89c:	4618      	mov	r0, r3
 800b89e:	f7fd fb9b 	bl	8008fd8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800b8a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8a4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b8a6:	e04e      	b.n	800b946 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8a8:	f107 0314 	add.w	r3, r7, #20
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f7fd fcff 	bl	80092b0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b8b6:	e046      	b.n	800b946 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b8b8:	f107 0308 	add.w	r3, r7, #8
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f7fd fe63 	bl	8009588 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b8c6:	e03e      	b.n	800b946 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800b8c8:	4b76      	ldr	r3, [pc, #472]	@ (800baa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800b8ca:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b8cc:	e03b      	b.n	800b946 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b8ce:	4b74      	ldr	r3, [pc, #464]	@ (800baa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b8d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b8d4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b8d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b8da:	4b71      	ldr	r3, [pc, #452]	@ (800baa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	f003 0302 	and.w	r3, r3, #2
 800b8e2:	2b02      	cmp	r3, #2
 800b8e4:	d10c      	bne.n	800b900 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800b8e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d109      	bne.n	800b900 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b8ec:	4b6c      	ldr	r3, [pc, #432]	@ (800baa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	08db      	lsrs	r3, r3, #3
 800b8f2:	f003 0303 	and.w	r3, r3, #3
 800b8f6:	4a6c      	ldr	r2, [pc, #432]	@ (800baa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800b8f8:	fa22 f303 	lsr.w	r3, r2, r3
 800b8fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8fe:	e01e      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b900:	4b67      	ldr	r3, [pc, #412]	@ (800baa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b908:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b90c:	d106      	bne.n	800b91c <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800b90e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b910:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b914:	d102      	bne.n	800b91c <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b916:	4b65      	ldr	r3, [pc, #404]	@ (800baac <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800b918:	637b      	str	r3, [r7, #52]	@ 0x34
 800b91a:	e010      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b91c:	4b60      	ldr	r3, [pc, #384]	@ (800baa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b924:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b928:	d106      	bne.n	800b938 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800b92a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b92c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b930:	d102      	bne.n	800b938 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b932:	4b5f      	ldr	r3, [pc, #380]	@ (800bab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800b934:	637b      	str	r3, [r7, #52]	@ 0x34
 800b936:	e002      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b938:	2300      	movs	r3, #0
 800b93a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b93c:	e003      	b.n	800b946 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800b93e:	e002      	b.n	800b946 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 800b940:	2300      	movs	r3, #0
 800b942:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b944:	bf00      	nop
          }
        }
        break;
 800b946:	e2d6      	b.n	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800b948:	4b55      	ldr	r3, [pc, #340]	@ (800baa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b94a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b94e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800b952:	633b      	str	r3, [r7, #48]	@ 0x30
 800b954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b956:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b95a:	d031      	beq.n	800b9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 800b95c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b95e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b962:	d866      	bhi.n	800ba32 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800b964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b966:	2bc0      	cmp	r3, #192	@ 0xc0
 800b968:	d027      	beq.n	800b9ba <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800b96a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b96c:	2bc0      	cmp	r3, #192	@ 0xc0
 800b96e:	d860      	bhi.n	800ba32 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800b970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b972:	2b80      	cmp	r3, #128	@ 0x80
 800b974:	d019      	beq.n	800b9aa <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800b976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b978:	2b80      	cmp	r3, #128	@ 0x80
 800b97a:	d85a      	bhi.n	800ba32 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800b97c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d003      	beq.n	800b98a <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 800b982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b984:	2b40      	cmp	r3, #64	@ 0x40
 800b986:	d008      	beq.n	800b99a <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 800b988:	e053      	b.n	800ba32 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b98a:	f107 0320 	add.w	r3, r7, #32
 800b98e:	4618      	mov	r0, r3
 800b990:	f7fd fb22 	bl	8008fd8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800b994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b996:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b998:	e04e      	b.n	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b99a:	f107 0314 	add.w	r3, r7, #20
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f7fd fc86 	bl	80092b0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b9a8:	e046      	b.n	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b9aa:	f107 0308 	add.w	r3, r7, #8
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f7fd fdea 	bl	8009588 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b9b8:	e03e      	b.n	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800b9ba:	4b3a      	ldr	r3, [pc, #232]	@ (800baa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800b9bc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b9be:	e03b      	b.n	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b9c0:	4b37      	ldr	r3, [pc, #220]	@ (800baa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b9c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b9c6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b9ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b9cc:	4b34      	ldr	r3, [pc, #208]	@ (800baa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f003 0302 	and.w	r3, r3, #2
 800b9d4:	2b02      	cmp	r3, #2
 800b9d6:	d10c      	bne.n	800b9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 800b9d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d109      	bne.n	800b9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b9de:	4b30      	ldr	r3, [pc, #192]	@ (800baa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	08db      	lsrs	r3, r3, #3
 800b9e4:	f003 0303 	and.w	r3, r3, #3
 800b9e8:	4a2f      	ldr	r2, [pc, #188]	@ (800baa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800b9ea:	fa22 f303 	lsr.w	r3, r2, r3
 800b9ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9f0:	e01e      	b.n	800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b9f2:	4b2b      	ldr	r3, [pc, #172]	@ (800baa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b9fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b9fe:	d106      	bne.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 800ba00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba06:	d102      	bne.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800ba08:	4b28      	ldr	r3, [pc, #160]	@ (800baac <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800ba0a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba0c:	e010      	b.n	800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ba0e:	4b24      	ldr	r3, [pc, #144]	@ (800baa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba1a:	d106      	bne.n	800ba2a <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 800ba1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ba22:	d102      	bne.n	800ba2a <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800ba24:	4b22      	ldr	r3, [pc, #136]	@ (800bab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800ba26:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba28:	e002      	b.n	800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800ba2e:	e003      	b.n	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 800ba30:	e002      	b.n	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 800ba32:	2300      	movs	r3, #0
 800ba34:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ba36:	bf00      	nop
          }
        }
        break;
 800ba38:	e25d      	b.n	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800ba3a:	4b19      	ldr	r3, [pc, #100]	@ (800baa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ba3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ba40:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800ba44:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800ba46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d103      	bne.n	800ba54 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800ba4c:	f7fb fb0e 	bl	800706c <HAL_RCC_GetPCLK2Freq>
 800ba50:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800ba52:	e250      	b.n	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800ba54:	4b12      	ldr	r3, [pc, #72]	@ (800baa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ba60:	d10b      	bne.n	800ba7a <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 800ba62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba68:	d107      	bne.n	800ba7a <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba6a:	f107 0314 	add.w	r3, r7, #20
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f7fd fc1e 	bl	80092b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ba74:	69bb      	ldr	r3, [r7, #24]
 800ba76:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba78:	e04f      	b.n	800bb1a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800ba7a:	4b09      	ldr	r3, [pc, #36]	@ (800baa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ba82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba86:	d115      	bne.n	800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800ba88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ba8e:	d111      	bne.n	800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba90:	f107 0308 	add.w	r3, r7, #8
 800ba94:	4618      	mov	r0, r3
 800ba96:	f7fd fd77 	bl	8009588 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba9e:	e03c      	b.n	800bb1a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 800baa0:	44020c00 	.word	0x44020c00
 800baa4:	00bb8000 	.word	0x00bb8000
 800baa8:	03d09000 	.word	0x03d09000
 800baac:	003d0900 	.word	0x003d0900
 800bab0:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800bab4:	4b94      	ldr	r3, [pc, #592]	@ (800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f003 0302 	and.w	r3, r3, #2
 800babc:	2b02      	cmp	r3, #2
 800babe:	d10d      	bne.n	800badc <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 800bac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bac2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800bac6:	d109      	bne.n	800badc <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bac8:	4b8f      	ldr	r3, [pc, #572]	@ (800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	08db      	lsrs	r3, r3, #3
 800bace:	f003 0303 	and.w	r3, r3, #3
 800bad2:	4a8e      	ldr	r2, [pc, #568]	@ (800bd0c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800bad4:	fa22 f303 	lsr.w	r3, r2, r3
 800bad8:	637b      	str	r3, [r7, #52]	@ 0x34
 800bada:	e01e      	b.n	800bb1a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800badc:	4b8a      	ldr	r3, [pc, #552]	@ (800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bae4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bae8:	d106      	bne.n	800baf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800baea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800baf0:	d102      	bne.n	800baf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 800baf2:	4b87      	ldr	r3, [pc, #540]	@ (800bd10 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800baf4:	637b      	str	r3, [r7, #52]	@ 0x34
 800baf6:	e010      	b.n	800bb1a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800baf8:	4b83      	ldr	r3, [pc, #524]	@ (800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bb04:	d106      	bne.n	800bb14 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 800bb06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb08:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800bb0c:	d102      	bne.n	800bb14 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800bb0e:	4b81      	ldr	r3, [pc, #516]	@ (800bd14 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800bb10:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb12:	e002      	b.n	800bb1a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 800bb14:	2300      	movs	r3, #0
 800bb16:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bb18:	e1ed      	b.n	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bb1a:	e1ec      	b.n	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 800bb1c:	4b7a      	ldr	r3, [pc, #488]	@ (800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bb1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bb22:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800bb26:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 800bb28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d103      	bne.n	800bb36 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800bb2e:	f7fb fab3 	bl	8007098 <HAL_RCC_GetPCLK3Freq>
 800bb32:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800bb34:	e1df      	b.n	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800bb36:	4b74      	ldr	r3, [pc, #464]	@ (800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bb3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bb42:	d10b      	bne.n	800bb5c <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 800bb44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bb4a:	d107      	bne.n	800bb5c <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb4c:	f107 0314 	add.w	r3, r7, #20
 800bb50:	4618      	mov	r0, r3
 800bb52:	f7fd fbad 	bl	80092b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bb56:	69bb      	ldr	r3, [r7, #24]
 800bb58:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb5a:	e045      	b.n	800bbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 800bb5c:	4b6a      	ldr	r3, [pc, #424]	@ (800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bb64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bb68:	d10b      	bne.n	800bb82 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800bb6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bb70:	d107      	bne.n	800bb82 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bb72:	f107 0308 	add.w	r3, r7, #8
 800bb76:	4618      	mov	r0, r3
 800bb78:	f7fd fd06 	bl	8009588 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb80:	e032      	b.n	800bbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 800bb82:	4b61      	ldr	r3, [pc, #388]	@ (800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f003 0302 	and.w	r3, r3, #2
 800bb8a:	2b02      	cmp	r3, #2
 800bb8c:	d10d      	bne.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 800bb8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb90:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bb94:	d109      	bne.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bb96:	4b5c      	ldr	r3, [pc, #368]	@ (800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	08db      	lsrs	r3, r3, #3
 800bb9c:	f003 0303 	and.w	r3, r3, #3
 800bba0:	4a5a      	ldr	r2, [pc, #360]	@ (800bd0c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800bba2:	fa22 f303 	lsr.w	r3, r2, r3
 800bba6:	637b      	str	r3, [r7, #52]	@ 0x34
 800bba8:	e01e      	b.n	800bbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800bbaa:	4b57      	ldr	r3, [pc, #348]	@ (800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bbb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bbb6:	d106      	bne.n	800bbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 800bbb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bbbe:	d102      	bne.n	800bbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 800bbc0:	4b53      	ldr	r3, [pc, #332]	@ (800bd10 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800bbc2:	637b      	str	r3, [r7, #52]	@ 0x34
 800bbc4:	e010      	b.n	800bbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 800bbc6:	4b50      	ldr	r3, [pc, #320]	@ (800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bbce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bbd2:	d106      	bne.n	800bbe2 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 800bbd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbd6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800bbda:	d102      	bne.n	800bbe2 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 800bbdc:	4b4d      	ldr	r3, [pc, #308]	@ (800bd14 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800bbde:	637b      	str	r3, [r7, #52]	@ 0x34
 800bbe0:	e002      	b.n	800bbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bbe6:	e186      	b.n	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bbe8:	e185      	b.n	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800bbea:	4b47      	ldr	r3, [pc, #284]	@ (800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bbec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bbf0:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800bbf4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800bbf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d103      	bne.n	800bc04 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800bbfc:	f7fb fa36 	bl	800706c <HAL_RCC_GetPCLK2Freq>
 800bc00:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800bc02:	e178      	b.n	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 800bc04:	4b40      	ldr	r3, [pc, #256]	@ (800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bc0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bc10:	d10b      	bne.n	800bc2a <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 800bc12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bc18:	d107      	bne.n	800bc2a <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc1a:	f107 0314 	add.w	r3, r7, #20
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7fd fb46 	bl	80092b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bc24:	69bb      	ldr	r3, [r7, #24]
 800bc26:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc28:	e045      	b.n	800bcb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800bc2a:	4b37      	ldr	r3, [pc, #220]	@ (800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bc32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bc36:	d10b      	bne.n	800bc50 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 800bc38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bc3e:	d107      	bne.n	800bc50 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc40:	f107 0308 	add.w	r3, r7, #8
 800bc44:	4618      	mov	r0, r3
 800bc46:	f7fd fc9f 	bl	8009588 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc4e:	e032      	b.n	800bcb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 800bc50:	4b2d      	ldr	r3, [pc, #180]	@ (800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	f003 0302 	and.w	r3, r3, #2
 800bc58:	2b02      	cmp	r3, #2
 800bc5a:	d10d      	bne.n	800bc78 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 800bc5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc5e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800bc62:	d109      	bne.n	800bc78 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bc64:	4b28      	ldr	r3, [pc, #160]	@ (800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	08db      	lsrs	r3, r3, #3
 800bc6a:	f003 0303 	and.w	r3, r3, #3
 800bc6e:	4a27      	ldr	r2, [pc, #156]	@ (800bd0c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800bc70:	fa22 f303 	lsr.w	r3, r2, r3
 800bc74:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc76:	e01e      	b.n	800bcb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800bc78:	4b23      	ldr	r3, [pc, #140]	@ (800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bc80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc84:	d106      	bne.n	800bc94 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 800bc86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bc8c:	d102      	bne.n	800bc94 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 800bc8e:	4b20      	ldr	r3, [pc, #128]	@ (800bd10 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800bc90:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc92:	e010      	b.n	800bcb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 800bc94:	4b1c      	ldr	r3, [pc, #112]	@ (800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bc9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bca0:	d106      	bne.n	800bcb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 800bca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bca4:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800bca8:	d102      	bne.n	800bcb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 800bcaa:	4b1a      	ldr	r3, [pc, #104]	@ (800bd14 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800bcac:	637b      	str	r3, [r7, #52]	@ 0x34
 800bcae:	e002      	b.n	800bcb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bcb4:	e11f      	b.n	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bcb6:	e11e      	b.n	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800bcb8:	4b13      	ldr	r3, [pc, #76]	@ (800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bcba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bcbe:	f003 0303 	and.w	r3, r3, #3
 800bcc2:	633b      	str	r3, [r7, #48]	@ 0x30
 800bcc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcc6:	2b03      	cmp	r3, #3
 800bcc8:	d85f      	bhi.n	800bd8a <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 800bcca:	a201      	add	r2, pc, #4	@ (adr r2, 800bcd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 800bccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcd0:	0800bce1 	.word	0x0800bce1
 800bcd4:	0800bce9 	.word	0x0800bce9
 800bcd8:	0800bcf9 	.word	0x0800bcf9
 800bcdc:	0800bd19 	.word	0x0800bd19

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 800bce0:	f7fb f992 	bl	8007008 <HAL_RCC_GetHCLKFreq>
 800bce4:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800bce6:	e053      	b.n	800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bce8:	f107 0320 	add.w	r3, r7, #32
 800bcec:	4618      	mov	r0, r3
 800bcee:	f7fd f973 	bl	8008fd8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800bcf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcf4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bcf6:	e04b      	b.n	800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bcf8:	f107 0314 	add.w	r3, r7, #20
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f7fd fad7 	bl	80092b0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800bd02:	69fb      	ldr	r3, [r7, #28]
 800bd04:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bd06:	e043      	b.n	800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800bd08:	44020c00 	.word	0x44020c00
 800bd0c:	03d09000 	.word	0x03d09000
 800bd10:	003d0900 	.word	0x003d0900
 800bd14:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bd18:	4b79      	ldr	r3, [pc, #484]	@ (800bf00 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800bd1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bd1e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800bd22:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bd24:	4b76      	ldr	r3, [pc, #472]	@ (800bf00 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	f003 0302 	and.w	r3, r3, #2
 800bd2c:	2b02      	cmp	r3, #2
 800bd2e:	d10c      	bne.n	800bd4a <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 800bd30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d109      	bne.n	800bd4a <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bd36:	4b72      	ldr	r3, [pc, #456]	@ (800bf00 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	08db      	lsrs	r3, r3, #3
 800bd3c:	f003 0303 	and.w	r3, r3, #3
 800bd40:	4a70      	ldr	r2, [pc, #448]	@ (800bf04 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 800bd42:	fa22 f303 	lsr.w	r3, r2, r3
 800bd46:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd48:	e01e      	b.n	800bd88 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bd4a:	4b6d      	ldr	r3, [pc, #436]	@ (800bf00 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bd52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bd56:	d106      	bne.n	800bd66 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 800bd58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd5e:	d102      	bne.n	800bd66 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800bd60:	4b69      	ldr	r3, [pc, #420]	@ (800bf08 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 800bd62:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd64:	e010      	b.n	800bd88 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bd66:	4b66      	ldr	r3, [pc, #408]	@ (800bf00 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bd6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bd72:	d106      	bne.n	800bd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 800bd74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bd7a:	d102      	bne.n	800bd82 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800bd7c:	4b63      	ldr	r3, [pc, #396]	@ (800bf0c <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800bd7e:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd80:	e002      	b.n	800bd88 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800bd82:	2300      	movs	r3, #0
 800bd84:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800bd86:	e003      	b.n	800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800bd88:	e002      	b.n	800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bd8e:	bf00      	nop
          }
        }
        break;
 800bd90:	e0b1      	b.n	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800bd92:	4b5b      	ldr	r3, [pc, #364]	@ (800bf00 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800bd94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bd98:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800bd9c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800bd9e:	4b58      	ldr	r3, [pc, #352]	@ (800bf00 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800bda0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bda4:	f003 0302 	and.w	r3, r3, #2
 800bda8:	2b02      	cmp	r3, #2
 800bdaa:	d106      	bne.n	800bdba <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800bdac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d103      	bne.n	800bdba <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 800bdb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bdb6:	637b      	str	r3, [r7, #52]	@ 0x34
 800bdb8:	e01f      	b.n	800bdfa <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800bdba:	4b51      	ldr	r3, [pc, #324]	@ (800bf00 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800bdbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bdc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bdc4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bdc8:	d106      	bne.n	800bdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 800bdca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdcc:	2b40      	cmp	r3, #64	@ 0x40
 800bdce:	d103      	bne.n	800bdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 800bdd0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800bdd4:	637b      	str	r3, [r7, #52]	@ 0x34
 800bdd6:	e010      	b.n	800bdfa <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 800bdd8:	4b49      	ldr	r3, [pc, #292]	@ (800bf00 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bde0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bde4:	d106      	bne.n	800bdf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 800bde6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bde8:	2b80      	cmp	r3, #128	@ 0x80
 800bdea:	d103      	bne.n	800bdf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 800bdec:	f248 0312 	movw	r3, #32786	@ 0x8012
 800bdf0:	637b      	str	r3, [r7, #52]	@ 0x34
 800bdf2:	e002      	b.n	800bdfa <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800bdf8:	e07d      	b.n	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bdfa:	e07c      	b.n	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800bdfc:	4b40      	ldr	r3, [pc, #256]	@ (800bf00 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800bdfe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800be02:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800be06:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800be08:	4b3d      	ldr	r3, [pc, #244]	@ (800bf00 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800be10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800be14:	d105      	bne.n	800be22 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 800be16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d102      	bne.n	800be22 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 800be1c:	4b3c      	ldr	r3, [pc, #240]	@ (800bf10 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800be1e:	637b      	str	r3, [r7, #52]	@ 0x34
 800be20:	e031      	b.n	800be86 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800be22:	4b37      	ldr	r3, [pc, #220]	@ (800bf00 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800be2a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800be2e:	d10a      	bne.n	800be46 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 800be30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be32:	2b10      	cmp	r3, #16
 800be34:	d107      	bne.n	800be46 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800be36:	f107 0320 	add.w	r3, r7, #32
 800be3a:	4618      	mov	r0, r3
 800be3c:	f7fd f8cc 	bl	8008fd8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800be40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be42:	637b      	str	r3, [r7, #52]	@ 0x34
 800be44:	e01f      	b.n	800be86 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800be46:	4b2e      	ldr	r3, [pc, #184]	@ (800bf00 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800be48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800be4c:	f003 0302 	and.w	r3, r3, #2
 800be50:	2b02      	cmp	r3, #2
 800be52:	d106      	bne.n	800be62 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 800be54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be56:	2b20      	cmp	r3, #32
 800be58:	d103      	bne.n	800be62 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800be5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800be5e:	637b      	str	r3, [r7, #52]	@ 0x34
 800be60:	e011      	b.n	800be86 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800be62:	4b27      	ldr	r3, [pc, #156]	@ (800bf00 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800be64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800be68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800be6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800be70:	d106      	bne.n	800be80 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 800be72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be74:	2b30      	cmp	r3, #48	@ 0x30
 800be76:	d103      	bne.n	800be80 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 800be78:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800be7c:	637b      	str	r3, [r7, #52]	@ 0x34
 800be7e:	e002      	b.n	800be86 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800be80:	2300      	movs	r3, #0
 800be82:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800be84:	e037      	b.n	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800be86:	e036      	b.n	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800be88:	4b1d      	ldr	r3, [pc, #116]	@ (800bf00 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800be8a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800be8e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800be92:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800be94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be96:	2b10      	cmp	r3, #16
 800be98:	d107      	bne.n	800beaa <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800be9a:	f107 0320 	add.w	r3, r7, #32
 800be9e:	4618      	mov	r0, r3
 800bea0:	f7fd f89a 	bl	8008fd8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bea6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800bea8:	e025      	b.n	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800beaa:	4b15      	ldr	r3, [pc, #84]	@ (800bf00 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800beb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800beb6:	d10a      	bne.n	800bece <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 800beb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beba:	2b20      	cmp	r3, #32
 800bebc:	d107      	bne.n	800bece <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bebe:	f107 0308 	add.w	r3, r7, #8
 800bec2:	4618      	mov	r0, r3
 800bec4:	f7fd fb60 	bl	8009588 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	637b      	str	r3, [r7, #52]	@ 0x34
 800becc:	e00f      	b.n	800beee <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800bece:	4b0c      	ldr	r3, [pc, #48]	@ (800bf00 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bed6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800beda:	d105      	bne.n	800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 800bedc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bede:	2b30      	cmp	r3, #48	@ 0x30
 800bee0:	d102      	bne.n	800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 800bee2:	4b0b      	ldr	r3, [pc, #44]	@ (800bf10 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800bee4:	637b      	str	r3, [r7, #52]	@ 0x34
 800bee6:	e002      	b.n	800beee <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800bee8:	2300      	movs	r3, #0
 800beea:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 800beec:	e003      	b.n	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800beee:	e002      	b.n	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 800bef0:	2300      	movs	r3, #0
 800bef2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bef4:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 800bef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800bef8:	4618      	mov	r0, r3
 800befa:	373c      	adds	r7, #60	@ 0x3c
 800befc:	46bd      	mov	sp, r7
 800befe:	bd90      	pop	{r4, r7, pc}
 800bf00:	44020c00 	.word	0x44020c00
 800bf04:	03d09000 	.word	0x03d09000
 800bf08:	003d0900 	.word	0x003d0900
 800bf0c:	007a1200 	.word	0x007a1200
 800bf10:	02dc6c00 	.word	0x02dc6c00

0800bf14 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b084      	sub	sp, #16
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800bf1c:	4b48      	ldr	r3, [pc, #288]	@ (800c040 <RCCEx_PLL2_Config+0x12c>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	4a47      	ldr	r2, [pc, #284]	@ (800c040 <RCCEx_PLL2_Config+0x12c>)
 800bf22:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bf26:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bf28:	f7f6 ff86 	bl	8002e38 <HAL_GetTick>
 800bf2c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bf2e:	e008      	b.n	800bf42 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bf30:	f7f6 ff82 	bl	8002e38 <HAL_GetTick>
 800bf34:	4602      	mov	r2, r0
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	1ad3      	subs	r3, r2, r3
 800bf3a:	2b02      	cmp	r3, #2
 800bf3c:	d901      	bls.n	800bf42 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800bf3e:	2303      	movs	r3, #3
 800bf40:	e07a      	b.n	800c038 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bf42:	4b3f      	ldr	r3, [pc, #252]	@ (800c040 <RCCEx_PLL2_Config+0x12c>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d1f0      	bne.n	800bf30 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800bf4e:	4b3c      	ldr	r3, [pc, #240]	@ (800c040 <RCCEx_PLL2_Config+0x12c>)
 800bf50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf52:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800bf56:	f023 0303 	bic.w	r3, r3, #3
 800bf5a:	687a      	ldr	r2, [r7, #4]
 800bf5c:	6811      	ldr	r1, [r2, #0]
 800bf5e:	687a      	ldr	r2, [r7, #4]
 800bf60:	6852      	ldr	r2, [r2, #4]
 800bf62:	0212      	lsls	r2, r2, #8
 800bf64:	430a      	orrs	r2, r1
 800bf66:	4936      	ldr	r1, [pc, #216]	@ (800c040 <RCCEx_PLL2_Config+0x12c>)
 800bf68:	4313      	orrs	r3, r2
 800bf6a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	689b      	ldr	r3, [r3, #8]
 800bf70:	3b01      	subs	r3, #1
 800bf72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	68db      	ldr	r3, [r3, #12]
 800bf7a:	3b01      	subs	r3, #1
 800bf7c:	025b      	lsls	r3, r3, #9
 800bf7e:	b29b      	uxth	r3, r3
 800bf80:	431a      	orrs	r2, r3
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	691b      	ldr	r3, [r3, #16]
 800bf86:	3b01      	subs	r3, #1
 800bf88:	041b      	lsls	r3, r3, #16
 800bf8a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bf8e:	431a      	orrs	r2, r3
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	695b      	ldr	r3, [r3, #20]
 800bf94:	3b01      	subs	r3, #1
 800bf96:	061b      	lsls	r3, r3, #24
 800bf98:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bf9c:	4928      	ldr	r1, [pc, #160]	@ (800c040 <RCCEx_PLL2_Config+0x12c>)
 800bf9e:	4313      	orrs	r3, r2
 800bfa0:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800bfa2:	4b27      	ldr	r3, [pc, #156]	@ (800c040 <RCCEx_PLL2_Config+0x12c>)
 800bfa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfa6:	f023 020c 	bic.w	r2, r3, #12
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	699b      	ldr	r3, [r3, #24]
 800bfae:	4924      	ldr	r1, [pc, #144]	@ (800c040 <RCCEx_PLL2_Config+0x12c>)
 800bfb0:	4313      	orrs	r3, r2
 800bfb2:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800bfb4:	4b22      	ldr	r3, [pc, #136]	@ (800c040 <RCCEx_PLL2_Config+0x12c>)
 800bfb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfb8:	f023 0220 	bic.w	r2, r3, #32
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	69db      	ldr	r3, [r3, #28]
 800bfc0:	491f      	ldr	r1, [pc, #124]	@ (800c040 <RCCEx_PLL2_Config+0x12c>)
 800bfc2:	4313      	orrs	r3, r2
 800bfc4:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800bfc6:	4b1e      	ldr	r3, [pc, #120]	@ (800c040 <RCCEx_PLL2_Config+0x12c>)
 800bfc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfce:	491c      	ldr	r1, [pc, #112]	@ (800c040 <RCCEx_PLL2_Config+0x12c>)
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800bfd4:	4b1a      	ldr	r3, [pc, #104]	@ (800c040 <RCCEx_PLL2_Config+0x12c>)
 800bfd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfd8:	4a19      	ldr	r2, [pc, #100]	@ (800c040 <RCCEx_PLL2_Config+0x12c>)
 800bfda:	f023 0310 	bic.w	r3, r3, #16
 800bfde:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800bfe0:	4b17      	ldr	r3, [pc, #92]	@ (800c040 <RCCEx_PLL2_Config+0x12c>)
 800bfe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfe4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bfe8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800bfec:	687a      	ldr	r2, [r7, #4]
 800bfee:	6a12      	ldr	r2, [r2, #32]
 800bff0:	00d2      	lsls	r2, r2, #3
 800bff2:	4913      	ldr	r1, [pc, #76]	@ (800c040 <RCCEx_PLL2_Config+0x12c>)
 800bff4:	4313      	orrs	r3, r2
 800bff6:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800bff8:	4b11      	ldr	r3, [pc, #68]	@ (800c040 <RCCEx_PLL2_Config+0x12c>)
 800bffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bffc:	4a10      	ldr	r2, [pc, #64]	@ (800c040 <RCCEx_PLL2_Config+0x12c>)
 800bffe:	f043 0310 	orr.w	r3, r3, #16
 800c002:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800c004:	4b0e      	ldr	r3, [pc, #56]	@ (800c040 <RCCEx_PLL2_Config+0x12c>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	4a0d      	ldr	r2, [pc, #52]	@ (800c040 <RCCEx_PLL2_Config+0x12c>)
 800c00a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c00e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c010:	f7f6 ff12 	bl	8002e38 <HAL_GetTick>
 800c014:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c016:	e008      	b.n	800c02a <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c018:	f7f6 ff0e 	bl	8002e38 <HAL_GetTick>
 800c01c:	4602      	mov	r2, r0
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	1ad3      	subs	r3, r2, r3
 800c022:	2b02      	cmp	r3, #2
 800c024:	d901      	bls.n	800c02a <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800c026:	2303      	movs	r3, #3
 800c028:	e006      	b.n	800c038 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c02a:	4b05      	ldr	r3, [pc, #20]	@ (800c040 <RCCEx_PLL2_Config+0x12c>)
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c032:	2b00      	cmp	r3, #0
 800c034:	d0f0      	beq.n	800c018 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800c036:	2300      	movs	r3, #0

}
 800c038:	4618      	mov	r0, r3
 800c03a:	3710      	adds	r7, #16
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bd80      	pop	{r7, pc}
 800c040:	44020c00 	.word	0x44020c00

0800c044 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b084      	sub	sp, #16
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800c04c:	4b48      	ldr	r3, [pc, #288]	@ (800c170 <RCCEx_PLL3_Config+0x12c>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	4a47      	ldr	r2, [pc, #284]	@ (800c170 <RCCEx_PLL3_Config+0x12c>)
 800c052:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c056:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c058:	f7f6 feee 	bl	8002e38 <HAL_GetTick>
 800c05c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c05e:	e008      	b.n	800c072 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c060:	f7f6 feea 	bl	8002e38 <HAL_GetTick>
 800c064:	4602      	mov	r2, r0
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	1ad3      	subs	r3, r2, r3
 800c06a:	2b02      	cmp	r3, #2
 800c06c:	d901      	bls.n	800c072 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800c06e:	2303      	movs	r3, #3
 800c070:	e07a      	b.n	800c168 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c072:	4b3f      	ldr	r3, [pc, #252]	@ (800c170 <RCCEx_PLL3_Config+0x12c>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d1f0      	bne.n	800c060 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800c07e:	4b3c      	ldr	r3, [pc, #240]	@ (800c170 <RCCEx_PLL3_Config+0x12c>)
 800c080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c082:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c086:	f023 0303 	bic.w	r3, r3, #3
 800c08a:	687a      	ldr	r2, [r7, #4]
 800c08c:	6811      	ldr	r1, [r2, #0]
 800c08e:	687a      	ldr	r2, [r7, #4]
 800c090:	6852      	ldr	r2, [r2, #4]
 800c092:	0212      	lsls	r2, r2, #8
 800c094:	430a      	orrs	r2, r1
 800c096:	4936      	ldr	r1, [pc, #216]	@ (800c170 <RCCEx_PLL3_Config+0x12c>)
 800c098:	4313      	orrs	r3, r2
 800c09a:	630b      	str	r3, [r1, #48]	@ 0x30
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	689b      	ldr	r3, [r3, #8]
 800c0a0:	3b01      	subs	r3, #1
 800c0a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	68db      	ldr	r3, [r3, #12]
 800c0aa:	3b01      	subs	r3, #1
 800c0ac:	025b      	lsls	r3, r3, #9
 800c0ae:	b29b      	uxth	r3, r3
 800c0b0:	431a      	orrs	r2, r3
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	691b      	ldr	r3, [r3, #16]
 800c0b6:	3b01      	subs	r3, #1
 800c0b8:	041b      	lsls	r3, r3, #16
 800c0ba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c0be:	431a      	orrs	r2, r3
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	695b      	ldr	r3, [r3, #20]
 800c0c4:	3b01      	subs	r3, #1
 800c0c6:	061b      	lsls	r3, r3, #24
 800c0c8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c0cc:	4928      	ldr	r1, [pc, #160]	@ (800c170 <RCCEx_PLL3_Config+0x12c>)
 800c0ce:	4313      	orrs	r3, r2
 800c0d0:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c0d2:	4b27      	ldr	r3, [pc, #156]	@ (800c170 <RCCEx_PLL3_Config+0x12c>)
 800c0d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0d6:	f023 020c 	bic.w	r2, r3, #12
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	699b      	ldr	r3, [r3, #24]
 800c0de:	4924      	ldr	r1, [pc, #144]	@ (800c170 <RCCEx_PLL3_Config+0x12c>)
 800c0e0:	4313      	orrs	r3, r2
 800c0e2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800c0e4:	4b22      	ldr	r3, [pc, #136]	@ (800c170 <RCCEx_PLL3_Config+0x12c>)
 800c0e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0e8:	f023 0220 	bic.w	r2, r3, #32
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	69db      	ldr	r3, [r3, #28]
 800c0f0:	491f      	ldr	r1, [pc, #124]	@ (800c170 <RCCEx_PLL3_Config+0x12c>)
 800c0f2:	4313      	orrs	r3, r2
 800c0f4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800c0f6:	4b1e      	ldr	r3, [pc, #120]	@ (800c170 <RCCEx_PLL3_Config+0x12c>)
 800c0f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0fe:	491c      	ldr	r1, [pc, #112]	@ (800c170 <RCCEx_PLL3_Config+0x12c>)
 800c100:	4313      	orrs	r3, r2
 800c102:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800c104:	4b1a      	ldr	r3, [pc, #104]	@ (800c170 <RCCEx_PLL3_Config+0x12c>)
 800c106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c108:	4a19      	ldr	r2, [pc, #100]	@ (800c170 <RCCEx_PLL3_Config+0x12c>)
 800c10a:	f023 0310 	bic.w	r3, r3, #16
 800c10e:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800c110:	4b17      	ldr	r3, [pc, #92]	@ (800c170 <RCCEx_PLL3_Config+0x12c>)
 800c112:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c114:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c118:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800c11c:	687a      	ldr	r2, [r7, #4]
 800c11e:	6a12      	ldr	r2, [r2, #32]
 800c120:	00d2      	lsls	r2, r2, #3
 800c122:	4913      	ldr	r1, [pc, #76]	@ (800c170 <RCCEx_PLL3_Config+0x12c>)
 800c124:	4313      	orrs	r3, r2
 800c126:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800c128:	4b11      	ldr	r3, [pc, #68]	@ (800c170 <RCCEx_PLL3_Config+0x12c>)
 800c12a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c12c:	4a10      	ldr	r2, [pc, #64]	@ (800c170 <RCCEx_PLL3_Config+0x12c>)
 800c12e:	f043 0310 	orr.w	r3, r3, #16
 800c132:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800c134:	4b0e      	ldr	r3, [pc, #56]	@ (800c170 <RCCEx_PLL3_Config+0x12c>)
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	4a0d      	ldr	r2, [pc, #52]	@ (800c170 <RCCEx_PLL3_Config+0x12c>)
 800c13a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c13e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c140:	f7f6 fe7a 	bl	8002e38 <HAL_GetTick>
 800c144:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c146:	e008      	b.n	800c15a <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c148:	f7f6 fe76 	bl	8002e38 <HAL_GetTick>
 800c14c:	4602      	mov	r2, r0
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	1ad3      	subs	r3, r2, r3
 800c152:	2b02      	cmp	r3, #2
 800c154:	d901      	bls.n	800c15a <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800c156:	2303      	movs	r3, #3
 800c158:	e006      	b.n	800c168 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c15a:	4b05      	ldr	r3, [pc, #20]	@ (800c170 <RCCEx_PLL3_Config+0x12c>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c162:	2b00      	cmp	r3, #0
 800c164:	d0f0      	beq.n	800c148 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800c166:	2300      	movs	r3, #0
}
 800c168:	4618      	mov	r0, r3
 800c16a:	3710      	adds	r7, #16
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bd80      	pop	{r7, pc}
 800c170:	44020c00 	.word	0x44020c00

0800c174 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b084      	sub	sp, #16
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d101      	bne.n	800c186 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800c182:	2301      	movs	r3, #1
 800c184:	e08c      	b.n	800c2a0 <HAL_RNG_Init+0x12c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	7a5b      	ldrb	r3, [r3, #9]
 800c18a:	b2db      	uxtb	r3, r3
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d105      	bne.n	800c19c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2200      	movs	r2, #0
 800c194:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800c196:	6878      	ldr	r0, [r7, #4]
 800c198:	f7f5 fef2 	bl	8001f80 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2202      	movs	r2, #2
 800c1a0:	725a      	strb	r2, [r3, #9]

  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	681a      	ldr	r2, [r3, #0]
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	f022 0204 	bic.w	r2, r2, #4
 800c1b0:	601a      	str	r2, [r3, #0]

#if defined(RNG_CR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->CR, RNG_CR_NIST_VALUE | RNG_CR_CONDRST | hrng->Init.ClockErrorDetection);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6859      	ldr	r1, [r3, #4]
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681a      	ldr	r2, [r3, #0]
 800c1ba:	4b3b      	ldr	r3, [pc, #236]	@ (800c2a8 <HAL_RNG_Init+0x134>)
 800c1bc:	430b      	orrs	r3, r1
 800c1be:	6013      	str	r3, [r2, #0]
  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
#endif /* RNG_CR_NIST_VALUE */
#if defined(RNG_HTCR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCR_NIST_VALUE);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	f646 2291 	movw	r2, #27281	@ 0x6a91
 800c1c8:	611a      	str	r2, [r3, #16]
#endif /* RNG_HTCR_NIST_VALUE */
#if defined(RNG_NSCR_NIST_VALUE)
  WRITE_REG(hrng->Instance->NSCR, RNG_NSCR_NIST_VALUE);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	4a37      	ldr	r2, [pc, #220]	@ (800c2ac <HAL_RNG_Init+0x138>)
 800c1d0:	60da      	str	r2, [r3, #12]
#endif /* RNG_NSCR_NIST_VALUE */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	681a      	ldr	r2, [r3, #0]
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800c1e0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c1e2:	f7f6 fe29 	bl	8002e38 <HAL_GetTick>
 800c1e6:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800c1e8:	e016      	b.n	800c218 <HAL_RNG_Init+0xa4>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800c1ea:	f7f6 fe25 	bl	8002e38 <HAL_GetTick>
 800c1ee:	4602      	mov	r2, r0
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	1ad3      	subs	r3, r2, r3
 800c1f4:	2b04      	cmp	r3, #4
 800c1f6:	d90f      	bls.n	800c218 <HAL_RNG_Init+0xa4>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c202:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c206:	d107      	bne.n	800c218 <HAL_RNG_Init+0xa4>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2201      	movs	r2, #1
 800c20c:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2202      	movs	r2, #2
 800c212:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800c214:	2301      	movs	r3, #1
 800c216:	e043      	b.n	800c2a0 <HAL_RNG_Init+0x12c>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c222:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c226:	d0e0      	beq.n	800c1ea <HAL_RNG_Init+0x76>
      }
    }
  }

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	681a      	ldr	r2, [r3, #0]
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	f042 0204 	orr.w	r2, r2, #4
 800c236:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	685b      	ldr	r3, [r3, #4]
 800c23e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c242:	2b40      	cmp	r3, #64	@ 0x40
 800c244:	d104      	bne.n	800c250 <HAL_RNG_Init+0xdc>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2204      	movs	r2, #4
 800c24a:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800c24c:	2301      	movs	r3, #1
 800c24e:	e027      	b.n	800c2a0 <HAL_RNG_Init+0x12c>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800c250:	f7f6 fdf2 	bl	8002e38 <HAL_GetTick>
 800c254:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800c256:	e015      	b.n	800c284 <HAL_RNG_Init+0x110>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800c258:	f7f6 fdee 	bl	8002e38 <HAL_GetTick>
 800c25c:	4602      	mov	r2, r0
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	1ad3      	subs	r3, r2, r3
 800c262:	2b04      	cmp	r3, #4
 800c264:	d90e      	bls.n	800c284 <HAL_RNG_Init+0x110>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	685b      	ldr	r3, [r3, #4]
 800c26c:	f003 0301 	and.w	r3, r3, #1
 800c270:	2b01      	cmp	r3, #1
 800c272:	d007      	beq.n	800c284 <HAL_RNG_Init+0x110>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2204      	movs	r2, #4
 800c278:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2202      	movs	r2, #2
 800c27e:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800c280:	2301      	movs	r3, #1
 800c282:	e00d      	b.n	800c2a0 <HAL_RNG_Init+0x12c>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	685b      	ldr	r3, [r3, #4]
 800c28a:	f003 0301 	and.w	r3, r3, #1
 800c28e:	2b01      	cmp	r3, #1
 800c290:	d1e2      	bne.n	800c258 <HAL_RNG_Init+0xe4>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2201      	movs	r2, #1
 800c296:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2200      	movs	r2, #0
 800c29c:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800c29e:	2300      	movs	r3, #0
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3710      	adds	r7, #16
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}
 800c2a8:	40f00e00 	.word	0x40f00e00
 800c2ac:	0003af66 	.word	0x0003af66

0800c2b0 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b084      	sub	sp, #16
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
 800c2b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	7a1b      	ldrb	r3, [r3, #8]
 800c2c2:	2b01      	cmp	r3, #1
 800c2c4:	d101      	bne.n	800c2ca <HAL_RNG_GenerateRandomNumber+0x1a>
 800c2c6:	2302      	movs	r3, #2
 800c2c8:	e068      	b.n	800c39c <HAL_RNG_GenerateRandomNumber+0xec>
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2201      	movs	r2, #1
 800c2ce:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	7a5b      	ldrb	r3, [r3, #9]
 800c2d4:	b2db      	uxtb	r3, r3
 800c2d6:	2b01      	cmp	r3, #1
 800c2d8:	d157      	bne.n	800c38a <HAL_RNG_GenerateRandomNumber+0xda>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2202      	movs	r2, #2
 800c2de:	725a      	strb	r2, [r3, #9]
    /* Check if there is a seed error */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	685b      	ldr	r3, [r3, #4]
 800c2e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2ea:	2b40      	cmp	r3, #64	@ 0x40
 800c2ec:	d10f      	bne.n	800c30e <HAL_RNG_GenerateRandomNumber+0x5e>
    {
      /* Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2208      	movs	r2, #8
 800c2f2:	60da      	str	r2, [r3, #12]
      /* Reset from seed error */
      status = RNG_RecoverSeedError(hrng);
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f000 f85f 	bl	800c3b8 <RNG_RecoverSeedError>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_ERROR)
 800c2fe:	7bfb      	ldrb	r3, [r7, #15]
 800c300:	2b01      	cmp	r3, #1
 800c302:	d104      	bne.n	800c30e <HAL_RNG_GenerateRandomNumber+0x5e>
      {
        /* Update the error code */
        hrng->ErrorCode = HAL_RNG_ERROR_RECOVERSEED;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2220      	movs	r2, #32
 800c308:	60da      	str	r2, [r3, #12]
        return status;
 800c30a:	7bfb      	ldrb	r3, [r7, #15]
 800c30c:	e046      	b.n	800c39c <HAL_RNG_GenerateRandomNumber+0xec>
      }
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 800c30e:	f7f6 fd93 	bl	8002e38 <HAL_GetTick>
 800c312:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800c314:	e018      	b.n	800c348 <HAL_RNG_GenerateRandomNumber+0x98>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800c316:	f7f6 fd8f 	bl	8002e38 <HAL_GetTick>
 800c31a:	4602      	mov	r2, r0
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	1ad3      	subs	r3, r2, r3
 800c320:	2b04      	cmp	r3, #4
 800c322:	d911      	bls.n	800c348 <HAL_RNG_GenerateRandomNumber+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	685b      	ldr	r3, [r3, #4]
 800c32a:	f003 0301 	and.w	r3, r3, #1
 800c32e:	2b01      	cmp	r3, #1
 800c330:	d00a      	beq.n	800c348 <HAL_RNG_GenerateRandomNumber+0x98>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2201      	movs	r2, #1
 800c336:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2202      	movs	r2, #2
 800c33c:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2200      	movs	r2, #0
 800c342:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 800c344:	2301      	movs	r3, #1
 800c346:	e029      	b.n	800c39c <HAL_RNG_GenerateRandomNumber+0xec>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	685b      	ldr	r3, [r3, #4]
 800c34e:	f003 0301 	and.w	r3, r3, #1
 800c352:	2b01      	cmp	r3, #1
 800c354:	d1df      	bne.n	800c316 <HAL_RNG_GenerateRandomNumber+0x66>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	689a      	ldr	r2, [r3, #8]
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	611a      	str	r2, [r3, #16]
    /* In case of seed error, the value available in the RNG_DR register must not
       be used as it may not have enough entropy */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	685b      	ldr	r3, [r3, #4]
 800c366:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c36a:	2b40      	cmp	r3, #64	@ 0x40
 800c36c:	d105      	bne.n	800c37a <HAL_RNG_GenerateRandomNumber+0xca>
    {
      /* Update the error code and status */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2208      	movs	r2, #8
 800c372:	60da      	str	r2, [r3, #12]
      status = HAL_ERROR;
 800c374:	2301      	movs	r3, #1
 800c376:	73fb      	strb	r3, [r7, #15]
 800c378:	e003      	b.n	800c382 <HAL_RNG_GenerateRandomNumber+0xd2>
    }
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	691a      	ldr	r2, [r3, #16]
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	601a      	str	r2, [r3, #0]
    }
    hrng->State = HAL_RNG_STATE_READY;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2201      	movs	r2, #1
 800c386:	725a      	strb	r2, [r3, #9]
 800c388:	e004      	b.n	800c394 <HAL_RNG_GenerateRandomNumber+0xe4>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2204      	movs	r2, #4
 800c38e:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 800c390:	2301      	movs	r3, #1
 800c392:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2200      	movs	r2, #0
 800c398:	721a      	strb	r2, [r3, #8]

  return status;
 800c39a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	3710      	adds	r7, #16
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}

0800c3a4 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b083      	sub	sp, #12
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 800c3ac:	bf00      	nop
 800c3ae:	370c      	adds	r7, #12
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b6:	4770      	bx	lr

0800c3b8 <RNG_RecoverSeedError>:
  * @brief  RNG sequence to recover from a seed error
  * @param  hrng pointer to a RNG_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef RNG_RecoverSeedError(RNG_HandleTypeDef *hrng)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b084      	sub	sp, #16
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	60fb      	str	r3, [r7, #12]

  /*Check if seed error current status (SECS)is set */
  if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	685b      	ldr	r3, [r3, #4]
 800c3ca:	f003 0304 	and.w	r3, r3, #4
 800c3ce:	2b04      	cmp	r3, #4
 800c3d0:	d008      	beq.n	800c3e4 <RNG_RecoverSeedError+0x2c>
  {
    /* RNG performed the reset automatically (auto-reset) */
    /* Clear bit SEIS */
    CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	685a      	ldr	r2, [r3, #4]
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c3e0:	605a      	str	r2, [r3, #4]
 800c3e2:	e05f      	b.n	800c4a4 <RNG_RecoverSeedError+0xec>
  }
  else  /* Sequence to fully recover from a seed error*/
  {
    /* Writing bit CONDRST=1*/
    SET_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	681a      	ldr	r2, [r3, #0]
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800c3f2:	601a      	str	r2, [r3, #0]
    /* Writing bit CONDRST=0*/
    CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	681a      	ldr	r2, [r3, #0]
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800c402:	601a      	str	r2, [r3, #0]

    /* Wait for conditioning reset process to be completed */
    count = RNG_TIMEOUT_VALUE;
 800c404:	2304      	movs	r3, #4
 800c406:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	3b01      	subs	r3, #1
 800c40c:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d110      	bne.n	800c436 <RNG_RecoverSeedError+0x7e>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2201      	movs	r2, #1
 800c418:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	68db      	ldr	r3, [r3, #12]
 800c41e:	f043 0202 	orr.w	r2, r3, #2
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2200      	movs	r2, #0
 800c42a:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f7ff ffb9 	bl	800c3a4 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 800c432:	2301      	movs	r3, #1
 800c434:	e03d      	b.n	800c4b2 <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST));
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c440:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c444:	d0e0      	beq.n	800c408 <RNG_RecoverSeedError+0x50>

    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	685b      	ldr	r3, [r3, #4]
 800c44c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c450:	2b40      	cmp	r3, #64	@ 0x40
 800c452:	d107      	bne.n	800c464 <RNG_RecoverSeedError+0xac>
    {
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	685a      	ldr	r2, [r3, #4]
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c462:	605a      	str	r2, [r3, #4]
    }

    /* Wait for SECS to be cleared */
    count = RNG_TIMEOUT_VALUE;
 800c464:	2304      	movs	r3, #4
 800c466:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	3b01      	subs	r3, #1
 800c46c:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d110      	bne.n	800c496 <RNG_RecoverSeedError+0xde>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2201      	movs	r2, #1
 800c478:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	68db      	ldr	r3, [r3, #12]
 800c47e:	f043 0202 	orr.w	r2, r3, #2
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2200      	movs	r2, #0
 800c48a:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	f7ff ff89 	bl	800c3a4 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 800c492:	2301      	movs	r3, #1
 800c494:	e00d      	b.n	800c4b2 <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->SR, RNG_FLAG_SECS));
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	685b      	ldr	r3, [r3, #4]
 800c49c:	f003 0304 	and.w	r3, r3, #4
 800c4a0:	2b04      	cmp	r3, #4
 800c4a2:	d0e1      	beq.n	800c468 <RNG_RecoverSeedError+0xb0>
  }
  /* Update the error code */
  hrng->ErrorCode &= ~ HAL_RNG_ERROR_SEED;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	68db      	ldr	r3, [r3, #12]
 800c4a8:	f023 0208 	bic.w	r2, r3, #8
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 800c4b0:	2300      	movs	r3, #0
}
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	3710      	adds	r7, #16
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}
	...

0800c4bc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b084      	sub	sp, #16
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c4c4:	2301      	movs	r3, #1
 800c4c6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d071      	beq.n	800c5b2 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c4d4:	b2db      	uxtb	r3, r3
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d106      	bne.n	800c4e8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2200      	movs	r2, #0
 800c4de:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	f7f5 fda4 	bl	8002030 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2202      	movs	r2, #2
 800c4ec:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c4f0:	4b32      	ldr	r3, [pc, #200]	@ (800c5bc <HAL_RTC_Init+0x100>)
 800c4f2:	68db      	ldr	r3, [r3, #12]
 800c4f4:	f003 0310 	and.w	r3, r3, #16
 800c4f8:	2b10      	cmp	r3, #16
 800c4fa:	d051      	beq.n	800c5a0 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c4fc:	4b2f      	ldr	r3, [pc, #188]	@ (800c5bc <HAL_RTC_Init+0x100>)
 800c4fe:	22ca      	movs	r2, #202	@ 0xca
 800c500:	625a      	str	r2, [r3, #36]	@ 0x24
 800c502:	4b2e      	ldr	r3, [pc, #184]	@ (800c5bc <HAL_RTC_Init+0x100>)
 800c504:	2253      	movs	r2, #83	@ 0x53
 800c506:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	f000 f9a3 	bl	800c854 <RTC_EnterInitMode>
 800c50e:	4603      	mov	r3, r0
 800c510:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800c512:	7bfb      	ldrb	r3, [r7, #15]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d13f      	bne.n	800c598 <HAL_RTC_Init+0xdc>
      {
#if defined(RTC_CR_OSEL)
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800c518:	4b28      	ldr	r3, [pc, #160]	@ (800c5bc <HAL_RTC_Init+0x100>)
 800c51a:	699b      	ldr	r3, [r3, #24]
 800c51c:	4a27      	ldr	r2, [pc, #156]	@ (800c5bc <HAL_RTC_Init+0x100>)
 800c51e:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800c522:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c526:	6193      	str	r3, [r2, #24]

        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800c528:	4b24      	ldr	r3, [pc, #144]	@ (800c5bc <HAL_RTC_Init+0x100>)
 800c52a:	699a      	ldr	r2, [r3, #24]
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	6859      	ldr	r1, [r3, #4]
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	691b      	ldr	r3, [r3, #16]
 800c534:	4319      	orrs	r1, r3
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	699b      	ldr	r3, [r3, #24]
 800c53a:	430b      	orrs	r3, r1
 800c53c:	491f      	ldr	r1, [pc, #124]	@ (800c5bc <HAL_RTC_Init+0x100>)
 800c53e:	4313      	orrs	r3, r2
 800c540:	618b      	str	r3, [r1, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, hrtc->Init.HourFormat);
#endif /* RTC_CR_OSEL */

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	68da      	ldr	r2, [r3, #12]
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	689b      	ldr	r3, [r3, #8]
 800c54a:	041b      	lsls	r3, r3, #16
 800c54c:	491b      	ldr	r1, [pc, #108]	@ (800c5bc <HAL_RTC_Init+0x100>)
 800c54e:	4313      	orrs	r3, r2
 800c550:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800c552:	4b1a      	ldr	r3, [pc, #104]	@ (800c5bc <HAL_RTC_Init+0x100>)
 800c554:	68db      	ldr	r3, [r3, #12]
 800c556:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c562:	430b      	orrs	r3, r1
 800c564:	4915      	ldr	r1, [pc, #84]	@ (800c5bc <HAL_RTC_Init+0x100>)
 800c566:	4313      	orrs	r3, r2
 800c568:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800c56a:	6878      	ldr	r0, [r7, #4]
 800c56c:	f000 f9ae 	bl	800c8cc <RTC_ExitInitMode>
 800c570:	4603      	mov	r3, r0
 800c572:	73fb      	strb	r3, [r7, #15]

#if defined(RTC_CR_OSEL)
        if (status == HAL_OK)
 800c574:	7bfb      	ldrb	r3, [r7, #15]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d10e      	bne.n	800c598 <HAL_RTC_Init+0xdc>
        {
#if defined(RTC_CR_OUT2EN)
          MODIFY_REG(RTC->CR, \
 800c57a:	4b10      	ldr	r3, [pc, #64]	@ (800c5bc <HAL_RTC_Init+0x100>)
 800c57c:	699b      	ldr	r3, [r3, #24]
 800c57e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	6a19      	ldr	r1, [r3, #32]
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	69db      	ldr	r3, [r3, #28]
 800c58a:	4319      	orrs	r1, r3
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	695b      	ldr	r3, [r3, #20]
 800c590:	430b      	orrs	r3, r1
 800c592:	490a      	ldr	r1, [pc, #40]	@ (800c5bc <HAL_RTC_Init+0x100>)
 800c594:	4313      	orrs	r3, r2
 800c596:	618b      	str	r3, [r1, #24]
        }
#endif /* RTC_CR_OSEL */
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c598:	4b08      	ldr	r3, [pc, #32]	@ (800c5bc <HAL_RTC_Init+0x100>)
 800c59a:	22ff      	movs	r2, #255	@ 0xff
 800c59c:	625a      	str	r2, [r3, #36]	@ 0x24
 800c59e:	e001      	b.n	800c5a4 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c5a4:	7bfb      	ldrb	r3, [r7, #15]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d103      	bne.n	800c5b2 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2201      	movs	r2, #1
 800c5ae:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800c5b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	3710      	adds	r7, #16
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}
 800c5bc:	44007800 	.word	0x44007800

0800c5c0 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c5c0:	b590      	push	{r4, r7, lr}
 800c5c2:	b087      	sub	sp, #28
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	60f8      	str	r0, [r7, #12]
 800c5c8:	60b9      	str	r1, [r7, #8]
 800c5ca:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c5d2:	2b01      	cmp	r3, #1
 800c5d4:	d101      	bne.n	800c5da <HAL_RTC_SetTime+0x1a>
 800c5d6:	2302      	movs	r3, #2
 800c5d8:	e07e      	b.n	800c6d8 <HAL_RTC_SetTime+0x118>
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	2201      	movs	r2, #1
 800c5de:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	2202      	movs	r2, #2
 800c5e6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c5ea:	4b3d      	ldr	r3, [pc, #244]	@ (800c6e0 <HAL_RTC_SetTime+0x120>)
 800c5ec:	22ca      	movs	r2, #202	@ 0xca
 800c5ee:	625a      	str	r2, [r3, #36]	@ 0x24
 800c5f0:	4b3b      	ldr	r3, [pc, #236]	@ (800c6e0 <HAL_RTC_SetTime+0x120>)
 800c5f2:	2253      	movs	r2, #83	@ 0x53
 800c5f4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c5f6:	68f8      	ldr	r0, [r7, #12]
 800c5f8:	f000 f92c 	bl	800c854 <RTC_EnterInitMode>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c600:	7cfb      	ldrb	r3, [r7, #19]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d159      	bne.n	800c6ba <HAL_RTC_SetTime+0xfa>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800c606:	4b36      	ldr	r3, [pc, #216]	@ (800c6e0 <HAL_RTC_SetTime+0x120>)
 800c608:	68db      	ldr	r3, [r3, #12]
 800c60a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c60e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c612:	d04d      	beq.n	800c6b0 <HAL_RTC_SetTime+0xf0>
    {
      if (Format == RTC_FORMAT_BIN)
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d125      	bne.n	800c666 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800c61a:	4b31      	ldr	r3, [pc, #196]	@ (800c6e0 <HAL_RTC_SetTime+0x120>)
 800c61c:	699b      	ldr	r3, [r3, #24]
 800c61e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c622:	2b00      	cmp	r3, #0
 800c624:	d102      	bne.n	800c62c <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	2200      	movs	r2, #0
 800c62a:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	781b      	ldrb	r3, [r3, #0]
 800c630:	4618      	mov	r0, r3
 800c632:	f000 f989 	bl	800c948 <RTC_ByteToBcd2>
 800c636:	4603      	mov	r3, r0
 800c638:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	785b      	ldrb	r3, [r3, #1]
 800c63e:	4618      	mov	r0, r3
 800c640:	f000 f982 	bl	800c948 <RTC_ByteToBcd2>
 800c644:	4603      	mov	r3, r0
 800c646:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c648:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	789b      	ldrb	r3, [r3, #2]
 800c64e:	4618      	mov	r0, r3
 800c650:	f000 f97a 	bl	800c948 <RTC_ByteToBcd2>
 800c654:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c656:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	78db      	ldrb	r3, [r3, #3]
 800c65e:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c660:	4313      	orrs	r3, r2
 800c662:	617b      	str	r3, [r7, #20]
 800c664:	e017      	b.n	800c696 <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800c666:	4b1e      	ldr	r3, [pc, #120]	@ (800c6e0 <HAL_RTC_SetTime+0x120>)
 800c668:	699b      	ldr	r3, [r3, #24]
 800c66a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d102      	bne.n	800c678 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800c672:	68bb      	ldr	r3, [r7, #8]
 800c674:	2200      	movs	r2, #0
 800c676:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	781b      	ldrb	r3, [r3, #0]
 800c67c:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	785b      	ldrb	r3, [r3, #1]
 800c682:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c684:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800c686:	68ba      	ldr	r2, [r7, #8]
 800c688:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c68a:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	78db      	ldrb	r3, [r3, #3]
 800c690:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c692:	4313      	orrs	r3, r2
 800c694:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800c696:	4a12      	ldr	r2, [pc, #72]	@ (800c6e0 <HAL_RTC_SetTime+0x120>)
 800c698:	697b      	ldr	r3, [r7, #20]
 800c69a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800c69e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800c6a2:	6013      	str	r3, [r2, #0]

      /* Clear the bits to be configured */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800c6a4:	4b0e      	ldr	r3, [pc, #56]	@ (800c6e0 <HAL_RTC_SetTime+0x120>)
 800c6a6:	699b      	ldr	r3, [r3, #24]
 800c6a8:	4a0d      	ldr	r2, [pc, #52]	@ (800c6e0 <HAL_RTC_SetTime+0x120>)
 800c6aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c6ae:	6193      	str	r3, [r2, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c6b0:	68f8      	ldr	r0, [r7, #12]
 800c6b2:	f000 f90b 	bl	800c8cc <RTC_ExitInitMode>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c6ba:	4b09      	ldr	r3, [pc, #36]	@ (800c6e0 <HAL_RTC_SetTime+0x120>)
 800c6bc:	22ff      	movs	r2, #255	@ 0xff
 800c6be:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800c6c0:	7cfb      	ldrb	r3, [r7, #19]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d103      	bne.n	800c6ce <HAL_RTC_SetTime+0x10e>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	2201      	movs	r2, #1
 800c6ca:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800c6d6:	7cfb      	ldrb	r3, [r7, #19]
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	371c      	adds	r7, #28
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd90      	pop	{r4, r7, pc}
 800c6e0:	44007800 	.word	0x44007800

0800c6e4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c6e4:	b590      	push	{r4, r7, lr}
 800c6e6:	b087      	sub	sp, #28
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	60f8      	str	r0, [r7, #12]
 800c6ec:	60b9      	str	r1, [r7, #8]
 800c6ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c6f6:	2b01      	cmp	r3, #1
 800c6f8:	d101      	bne.n	800c6fe <HAL_RTC_SetDate+0x1a>
 800c6fa:	2302      	movs	r3, #2
 800c6fc:	e071      	b.n	800c7e2 <HAL_RTC_SetDate+0xfe>
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	2201      	movs	r2, #1
 800c702:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	2202      	movs	r2, #2
 800c70a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d10e      	bne.n	800c732 <HAL_RTC_SetDate+0x4e>
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	785b      	ldrb	r3, [r3, #1]
 800c718:	f003 0310 	and.w	r3, r3, #16
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d008      	beq.n	800c732 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	785b      	ldrb	r3, [r3, #1]
 800c724:	f023 0310 	bic.w	r3, r3, #16
 800c728:	b2db      	uxtb	r3, r3
 800c72a:	330a      	adds	r3, #10
 800c72c:	b2da      	uxtb	r2, r3
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d11c      	bne.n	800c772 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	78db      	ldrb	r3, [r3, #3]
 800c73c:	4618      	mov	r0, r3
 800c73e:	f000 f903 	bl	800c948 <RTC_ByteToBcd2>
 800c742:	4603      	mov	r3, r0
 800c744:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	785b      	ldrb	r3, [r3, #1]
 800c74a:	4618      	mov	r0, r3
 800c74c:	f000 f8fc 	bl	800c948 <RTC_ByteToBcd2>
 800c750:	4603      	mov	r3, r0
 800c752:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800c754:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800c756:	68bb      	ldr	r3, [r7, #8]
 800c758:	789b      	ldrb	r3, [r3, #2]
 800c75a:	4618      	mov	r0, r3
 800c75c:	f000 f8f4 	bl	800c948 <RTC_ByteToBcd2>
 800c760:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c762:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800c766:	68bb      	ldr	r3, [r7, #8]
 800c768:	781b      	ldrb	r3, [r3, #0]
 800c76a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800c76c:	4313      	orrs	r3, r2
 800c76e:	617b      	str	r3, [r7, #20]
 800c770:	e00e      	b.n	800c790 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800c772:	68bb      	ldr	r3, [r7, #8]
 800c774:	78db      	ldrb	r3, [r3, #3]
 800c776:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800c778:	68bb      	ldr	r3, [r7, #8]
 800c77a:	785b      	ldrb	r3, [r3, #1]
 800c77c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800c77e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800c780:	68ba      	ldr	r2, [r7, #8]
 800c782:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800c784:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c786:	68bb      	ldr	r3, [r7, #8]
 800c788:	781b      	ldrb	r3, [r3, #0]
 800c78a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800c78c:	4313      	orrs	r3, r2
 800c78e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c790:	4b16      	ldr	r3, [pc, #88]	@ (800c7ec <HAL_RTC_SetDate+0x108>)
 800c792:	22ca      	movs	r2, #202	@ 0xca
 800c794:	625a      	str	r2, [r3, #36]	@ 0x24
 800c796:	4b15      	ldr	r3, [pc, #84]	@ (800c7ec <HAL_RTC_SetDate+0x108>)
 800c798:	2253      	movs	r2, #83	@ 0x53
 800c79a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c79c:	68f8      	ldr	r0, [r7, #12]
 800c79e:	f000 f859 	bl	800c854 <RTC_EnterInitMode>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c7a6:	7cfb      	ldrb	r3, [r7, #19]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d10b      	bne.n	800c7c4 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800c7ac:	4a0f      	ldr	r2, [pc, #60]	@ (800c7ec <HAL_RTC_SetDate+0x108>)
 800c7ae:	697b      	ldr	r3, [r7, #20]
 800c7b0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c7b4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c7b8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c7ba:	68f8      	ldr	r0, [r7, #12]
 800c7bc:	f000 f886 	bl	800c8cc <RTC_ExitInitMode>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c7c4:	4b09      	ldr	r3, [pc, #36]	@ (800c7ec <HAL_RTC_SetDate+0x108>)
 800c7c6:	22ff      	movs	r2, #255	@ 0xff
 800c7c8:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800c7ca:	7cfb      	ldrb	r3, [r7, #19]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d103      	bne.n	800c7d8 <HAL_RTC_SetDate+0xf4>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	2201      	movs	r2, #1
 800c7d4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	2200      	movs	r2, #0
 800c7dc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800c7e0:	7cfb      	ldrb	r3, [r7, #19]
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	371c      	adds	r7, #28
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd90      	pop	{r4, r7, pc}
 800c7ea:	bf00      	nop
 800c7ec:	44007800 	.word	0x44007800

0800c7f0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b084      	sub	sp, #16
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800c7f8:	4b15      	ldr	r3, [pc, #84]	@ (800c850 <HAL_RTC_WaitForSynchro+0x60>)
 800c7fa:	68db      	ldr	r3, [r3, #12]
 800c7fc:	4a14      	ldr	r2, [pc, #80]	@ (800c850 <HAL_RTC_WaitForSynchro+0x60>)
 800c7fe:	f023 0320 	bic.w	r3, r3, #32
 800c802:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800c804:	f7f6 fb18 	bl	8002e38 <HAL_GetTick>
 800c808:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800c80a:	e013      	b.n	800c834 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c80c:	f7f6 fb14 	bl	8002e38 <HAL_GetTick>
 800c810:	4602      	mov	r2, r0
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	1ad3      	subs	r3, r2, r3
 800c816:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c81a:	d90b      	bls.n	800c834 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800c81c:	4b0c      	ldr	r3, [pc, #48]	@ (800c850 <HAL_RTC_WaitForSynchro+0x60>)
 800c81e:	68db      	ldr	r3, [r3, #12]
 800c820:	f003 0320 	and.w	r3, r3, #32
 800c824:	2b00      	cmp	r3, #0
 800c826:	d10c      	bne.n	800c842 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2203      	movs	r2, #3
 800c82c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800c830:	2303      	movs	r3, #3
 800c832:	e008      	b.n	800c846 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800c834:	4b06      	ldr	r3, [pc, #24]	@ (800c850 <HAL_RTC_WaitForSynchro+0x60>)
 800c836:	68db      	ldr	r3, [r3, #12]
 800c838:	f003 0320 	and.w	r3, r3, #32
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d0e5      	beq.n	800c80c <HAL_RTC_WaitForSynchro+0x1c>
 800c840:	e000      	b.n	800c844 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800c842:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800c844:	2300      	movs	r3, #0
}
 800c846:	4618      	mov	r0, r3
 800c848:	3710      	adds	r7, #16
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}
 800c84e:	bf00      	nop
 800c850:	44007800 	.word	0x44007800

0800c854 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b084      	sub	sp, #16
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c85c:	2300      	movs	r3, #0
 800c85e:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800c860:	4b19      	ldr	r3, [pc, #100]	@ (800c8c8 <RTC_EnterInitMode+0x74>)
 800c862:	68db      	ldr	r3, [r3, #12]
 800c864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d128      	bne.n	800c8be <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800c86c:	4b16      	ldr	r3, [pc, #88]	@ (800c8c8 <RTC_EnterInitMode+0x74>)
 800c86e:	68db      	ldr	r3, [r3, #12]
 800c870:	4a15      	ldr	r2, [pc, #84]	@ (800c8c8 <RTC_EnterInitMode+0x74>)
 800c872:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c876:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800c878:	f7f6 fade 	bl	8002e38 <HAL_GetTick>
 800c87c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c87e:	e013      	b.n	800c8a8 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c880:	f7f6 fada 	bl	8002e38 <HAL_GetTick>
 800c884:	4602      	mov	r2, r0
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	1ad3      	subs	r3, r2, r3
 800c88a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c88e:	d90b      	bls.n	800c8a8 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800c890:	4b0d      	ldr	r3, [pc, #52]	@ (800c8c8 <RTC_EnterInitMode+0x74>)
 800c892:	68db      	ldr	r3, [r3, #12]
 800c894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d10f      	bne.n	800c8bc <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800c89c:	2303      	movs	r3, #3
 800c89e:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2203      	movs	r2, #3
 800c8a4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c8a8:	4b07      	ldr	r3, [pc, #28]	@ (800c8c8 <RTC_EnterInitMode+0x74>)
 800c8aa:	68db      	ldr	r3, [r3, #12]
 800c8ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d104      	bne.n	800c8be <RTC_EnterInitMode+0x6a>
 800c8b4:	7bfb      	ldrb	r3, [r7, #15]
 800c8b6:	2b03      	cmp	r3, #3
 800c8b8:	d1e2      	bne.n	800c880 <RTC_EnterInitMode+0x2c>
 800c8ba:	e000      	b.n	800c8be <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800c8bc:	bf00      	nop
        }
      }
    }
  }

  return status;
 800c8be:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	3710      	adds	r7, #16
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bd80      	pop	{r7, pc}
 800c8c8:	44007800 	.word	0x44007800

0800c8cc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b084      	sub	sp, #16
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800c8d8:	4b1a      	ldr	r3, [pc, #104]	@ (800c944 <RTC_ExitInitMode+0x78>)
 800c8da:	68db      	ldr	r3, [r3, #12]
 800c8dc:	4a19      	ldr	r2, [pc, #100]	@ (800c944 <RTC_ExitInitMode+0x78>)
 800c8de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c8e2:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800c8e4:	4b17      	ldr	r3, [pc, #92]	@ (800c944 <RTC_ExitInitMode+0x78>)
 800c8e6:	699b      	ldr	r3, [r3, #24]
 800c8e8:	f003 0320 	and.w	r3, r3, #32
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d10c      	bne.n	800c90a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f7ff ff7d 	bl	800c7f0 <HAL_RTC_WaitForSynchro>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d01e      	beq.n	800c93a <RTC_ExitInitMode+0x6e>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2203      	movs	r2, #3
 800c900:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800c904:	2303      	movs	r3, #3
 800c906:	73fb      	strb	r3, [r7, #15]
 800c908:	e017      	b.n	800c93a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c90a:	4b0e      	ldr	r3, [pc, #56]	@ (800c944 <RTC_ExitInitMode+0x78>)
 800c90c:	699b      	ldr	r3, [r3, #24]
 800c90e:	4a0d      	ldr	r2, [pc, #52]	@ (800c944 <RTC_ExitInitMode+0x78>)
 800c910:	f023 0320 	bic.w	r3, r3, #32
 800c914:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f7ff ff6a 	bl	800c7f0 <HAL_RTC_WaitForSynchro>
 800c91c:	4603      	mov	r3, r0
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d005      	beq.n	800c92e <RTC_ExitInitMode+0x62>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2203      	movs	r2, #3
 800c926:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800c92a:	2303      	movs	r3, #3
 800c92c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c92e:	4b05      	ldr	r3, [pc, #20]	@ (800c944 <RTC_ExitInitMode+0x78>)
 800c930:	699b      	ldr	r3, [r3, #24]
 800c932:	4a04      	ldr	r2, [pc, #16]	@ (800c944 <RTC_ExitInitMode+0x78>)
 800c934:	f043 0320 	orr.w	r3, r3, #32
 800c938:	6193      	str	r3, [r2, #24]
  }
  return status;
 800c93a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c93c:	4618      	mov	r0, r3
 800c93e:	3710      	adds	r7, #16
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}
 800c944:	44007800 	.word	0x44007800

0800c948 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c948:	b480      	push	{r7}
 800c94a:	b085      	sub	sp, #20
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	4603      	mov	r3, r0
 800c950:	71fb      	strb	r3, [r7, #7]
  uint32_t bcd_high = 0U;
 800c952:	2300      	movs	r3, #0
 800c954:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_value = Value;
 800c956:	79fb      	ldrb	r3, [r7, #7]
 800c958:	72fb      	strb	r3, [r7, #11]

  while (tmp_value >= 10U)
 800c95a:	e005      	b.n	800c968 <RTC_ByteToBcd2+0x20>
  {
    bcd_high++;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	3301      	adds	r3, #1
 800c960:	60fb      	str	r3, [r7, #12]
    tmp_value -= 10U;
 800c962:	7afb      	ldrb	r3, [r7, #11]
 800c964:	3b0a      	subs	r3, #10
 800c966:	72fb      	strb	r3, [r7, #11]
  while (tmp_value >= 10U)
 800c968:	7afb      	ldrb	r3, [r7, #11]
 800c96a:	2b09      	cmp	r3, #9
 800c96c:	d8f6      	bhi.n	800c95c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcd_high << 4U) | tmp_value);
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	b2db      	uxtb	r3, r3
 800c972:	011b      	lsls	r3, r3, #4
 800c974:	b2da      	uxtb	r2, r3
 800c976:	7afb      	ldrb	r3, [r7, #11]
 800c978:	4313      	orrs	r3, r2
 800c97a:	b2db      	uxtb	r3, r3
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	3714      	adds	r7, #20
 800c980:	46bd      	mov	sp, r7
 800c982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c986:	4770      	bx	lr

0800c988 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(const RTC_HandleTypeDef *hrtc,
                                             const RTC_PrivilegeStateTypeDef *privilegeState)
{
 800c988:	b480      	push	{r7}
 800c98a:	b083      	sub	sp, #12
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
 800c990:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	681a      	ldr	r2, [r3, #0]
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	685b      	ldr	r3, [r3, #4]
 800c99a:	4910      	ldr	r1, [pc, #64]	@ (800c9dc <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800c99c:	4313      	orrs	r3, r2
 800c99e:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	689a      	ldr	r2, [r3, #8]
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	68db      	ldr	r3, [r3, #12]
 800c9a8:	431a      	orrs	r2, r3
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	699b      	ldr	r3, [r3, #24]
 800c9ae:	490c      	ldr	r1, [pc, #48]	@ (800c9e0 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800c9b0:	4313      	orrs	r3, r2
 800c9b2:	624b      	str	r3, [r1, #36]	@ 0x24
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
#if defined(TAMP_SECCFGR_BKPWSEC)
  MODIFY_REG(TAMP->SECCFGR,
 800c9b4:	4b0a      	ldr	r3, [pc, #40]	@ (800c9e0 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800c9b6:	6a1b      	ldr	r3, [r3, #32]
 800c9b8:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	6919      	ldr	r1, [r3, #16]
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	695b      	ldr	r3, [r3, #20]
 800c9c4:	041b      	lsls	r3, r3, #16
 800c9c6:	430b      	orrs	r3, r1
 800c9c8:	4905      	ldr	r1, [pc, #20]	@ (800c9e0 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800c9ca:	4313      	orrs	r3, r2
 800c9cc:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));
#endif /* TAMP_SECCFGR_BKPWSEC */

  return HAL_OK;
 800c9ce:	2300      	movs	r3, #0
}
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	370c      	adds	r7, #12
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9da:	4770      	bx	lr
 800c9dc:	44007800 	.word	0x44007800
 800c9e0:	44007c00 	.word	0x44007c00

0800c9e4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b084      	sub	sp, #16
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d101      	bne.n	800c9f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c9f2:	2301      	movs	r3, #1
 800c9f4:	e162      	b.n	800ccbc <HAL_SPI_Init+0x2d8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	4a70      	ldr	r2, [pc, #448]	@ (800cbbc <HAL_SPI_Init+0x1d8>)
 800c9fc:	4293      	cmp	r3, r2
 800c9fe:	d018      	beq.n	800ca32 <HAL_SPI_Init+0x4e>
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	4a6e      	ldr	r2, [pc, #440]	@ (800cbc0 <HAL_SPI_Init+0x1dc>)
 800ca06:	4293      	cmp	r3, r2
 800ca08:	d013      	beq.n	800ca32 <HAL_SPI_Init+0x4e>
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	4a6d      	ldr	r2, [pc, #436]	@ (800cbc4 <HAL_SPI_Init+0x1e0>)
 800ca10:	4293      	cmp	r3, r2
 800ca12:	d00e      	beq.n	800ca32 <HAL_SPI_Init+0x4e>
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	4a6b      	ldr	r2, [pc, #428]	@ (800cbc8 <HAL_SPI_Init+0x1e4>)
 800ca1a:	4293      	cmp	r3, r2
 800ca1c:	d009      	beq.n	800ca32 <HAL_SPI_Init+0x4e>
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	4a6a      	ldr	r2, [pc, #424]	@ (800cbcc <HAL_SPI_Init+0x1e8>)
 800ca24:	4293      	cmp	r3, r2
 800ca26:	d004      	beq.n	800ca32 <HAL_SPI_Init+0x4e>
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	4a68      	ldr	r2, [pc, #416]	@ (800cbd0 <HAL_SPI_Init+0x1ec>)
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	e000      	b.n	800ca34 <HAL_SPI_Init+0x50>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800ca32:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2200      	movs	r2, #0
 800ca38:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	4a5f      	ldr	r2, [pc, #380]	@ (800cbbc <HAL_SPI_Init+0x1d8>)
 800ca40:	4293      	cmp	r3, r2
 800ca42:	d018      	beq.n	800ca76 <HAL_SPI_Init+0x92>
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	4a5d      	ldr	r2, [pc, #372]	@ (800cbc0 <HAL_SPI_Init+0x1dc>)
 800ca4a:	4293      	cmp	r3, r2
 800ca4c:	d013      	beq.n	800ca76 <HAL_SPI_Init+0x92>
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	4a5c      	ldr	r2, [pc, #368]	@ (800cbc4 <HAL_SPI_Init+0x1e0>)
 800ca54:	4293      	cmp	r3, r2
 800ca56:	d00e      	beq.n	800ca76 <HAL_SPI_Init+0x92>
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	4a5a      	ldr	r2, [pc, #360]	@ (800cbc8 <HAL_SPI_Init+0x1e4>)
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	d009      	beq.n	800ca76 <HAL_SPI_Init+0x92>
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	4a59      	ldr	r2, [pc, #356]	@ (800cbcc <HAL_SPI_Init+0x1e8>)
 800ca68:	4293      	cmp	r3, r2
 800ca6a:	d004      	beq.n	800ca76 <HAL_SPI_Init+0x92>
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	4a57      	ldr	r2, [pc, #348]	@ (800cbd0 <HAL_SPI_Init+0x1ec>)
 800ca72:	4293      	cmp	r3, r2
 800ca74:	d105      	bne.n	800ca82 <HAL_SPI_Init+0x9e>
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	68db      	ldr	r3, [r3, #12]
 800ca7a:	2b0f      	cmp	r3, #15
 800ca7c:	d901      	bls.n	800ca82 <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 800ca7e:	2301      	movs	r3, #1
 800ca80:	e11c      	b.n	800ccbc <HAL_SPI_Init+0x2d8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f000 f91e 	bl	800ccc4 <SPI_GetPacketSize>
 800ca88:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	4a4b      	ldr	r2, [pc, #300]	@ (800cbbc <HAL_SPI_Init+0x1d8>)
 800ca90:	4293      	cmp	r3, r2
 800ca92:	d018      	beq.n	800cac6 <HAL_SPI_Init+0xe2>
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	4a49      	ldr	r2, [pc, #292]	@ (800cbc0 <HAL_SPI_Init+0x1dc>)
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	d013      	beq.n	800cac6 <HAL_SPI_Init+0xe2>
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	4a48      	ldr	r2, [pc, #288]	@ (800cbc4 <HAL_SPI_Init+0x1e0>)
 800caa4:	4293      	cmp	r3, r2
 800caa6:	d00e      	beq.n	800cac6 <HAL_SPI_Init+0xe2>
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	4a46      	ldr	r2, [pc, #280]	@ (800cbc8 <HAL_SPI_Init+0x1e4>)
 800caae:	4293      	cmp	r3, r2
 800cab0:	d009      	beq.n	800cac6 <HAL_SPI_Init+0xe2>
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	4a45      	ldr	r2, [pc, #276]	@ (800cbcc <HAL_SPI_Init+0x1e8>)
 800cab8:	4293      	cmp	r3, r2
 800caba:	d004      	beq.n	800cac6 <HAL_SPI_Init+0xe2>
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	4a43      	ldr	r2, [pc, #268]	@ (800cbd0 <HAL_SPI_Init+0x1ec>)
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d102      	bne.n	800cacc <HAL_SPI_Init+0xe8>
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	2b08      	cmp	r3, #8
 800caca:	d820      	bhi.n	800cb0e <HAL_SPI_Init+0x12a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cad0:	4a40      	ldr	r2, [pc, #256]	@ (800cbd4 <HAL_SPI_Init+0x1f0>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d018      	beq.n	800cb08 <HAL_SPI_Init+0x124>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	4a3f      	ldr	r2, [pc, #252]	@ (800cbd8 <HAL_SPI_Init+0x1f4>)
 800cadc:	4293      	cmp	r3, r2
 800cade:	d013      	beq.n	800cb08 <HAL_SPI_Init+0x124>
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	4a3d      	ldr	r2, [pc, #244]	@ (800cbdc <HAL_SPI_Init+0x1f8>)
 800cae6:	4293      	cmp	r3, r2
 800cae8:	d00e      	beq.n	800cb08 <HAL_SPI_Init+0x124>
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	4a3c      	ldr	r2, [pc, #240]	@ (800cbe0 <HAL_SPI_Init+0x1fc>)
 800caf0:	4293      	cmp	r3, r2
 800caf2:	d009      	beq.n	800cb08 <HAL_SPI_Init+0x124>
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	4a3a      	ldr	r2, [pc, #232]	@ (800cbe4 <HAL_SPI_Init+0x200>)
 800cafa:	4293      	cmp	r3, r2
 800cafc:	d004      	beq.n	800cb08 <HAL_SPI_Init+0x124>
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	4a39      	ldr	r2, [pc, #228]	@ (800cbe8 <HAL_SPI_Init+0x204>)
 800cb04:	4293      	cmp	r3, r2
 800cb06:	d104      	bne.n	800cb12 <HAL_SPI_Init+0x12e>
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	2b10      	cmp	r3, #16
 800cb0c:	d901      	bls.n	800cb12 <HAL_SPI_Init+0x12e>
  {
    return HAL_ERROR;
 800cb0e:	2301      	movs	r3, #1
 800cb10:	e0d4      	b.n	800ccbc <HAL_SPI_Init+0x2d8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800cb18:	b2db      	uxtb	r3, r3
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d106      	bne.n	800cb2c <HAL_SPI_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2200      	movs	r2, #0
 800cb22:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cb26:	6878      	ldr	r0, [r7, #4]
 800cb28:	f7f5 fae2 	bl	80020f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	2202      	movs	r2, #2
 800cb30:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	681a      	ldr	r2, [r3, #0]
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	f022 0201 	bic.w	r2, r2, #1
 800cb42:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	689b      	ldr	r3, [r3, #8]
 800cb4a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800cb4e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	699b      	ldr	r3, [r3, #24]
 800cb54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cb58:	d119      	bne.n	800cb8e <HAL_SPI_Init+0x1aa>
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	685b      	ldr	r3, [r3, #4]
 800cb5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cb62:	d103      	bne.n	800cb6c <HAL_SPI_Init+0x188>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d008      	beq.n	800cb7e <HAL_SPI_Init+0x19a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d10c      	bne.n	800cb8e <HAL_SPI_Init+0x1aa>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cb78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cb7c:	d107      	bne.n	800cb8e <HAL_SPI_Init+0x1aa>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	681a      	ldr	r2, [r3, #0]
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800cb8c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	685b      	ldr	r3, [r3, #4]
 800cb92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d028      	beq.n	800cbec <HAL_SPI_Init+0x208>
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	68db      	ldr	r3, [r3, #12]
 800cb9e:	2b06      	cmp	r3, #6
 800cba0:	d924      	bls.n	800cbec <HAL_SPI_Init+0x208>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	430a      	orrs	r2, r1
 800cbb6:	601a      	str	r2, [r3, #0]
 800cbb8:	e020      	b.n	800cbfc <HAL_SPI_Init+0x218>
 800cbba:	bf00      	nop
 800cbbc:	40014c00 	.word	0x40014c00
 800cbc0:	50014c00 	.word	0x50014c00
 800cbc4:	44002000 	.word	0x44002000
 800cbc8:	54002000 	.word	0x54002000
 800cbcc:	40015000 	.word	0x40015000
 800cbd0:	50015000 	.word	0x50015000
 800cbd4:	40013000 	.word	0x40013000
 800cbd8:	50013000 	.word	0x50013000
 800cbdc:	40003800 	.word	0x40003800
 800cbe0:	50003800 	.word	0x50003800
 800cbe4:	40003c00 	.word	0x40003c00
 800cbe8:	50003c00 	.word	0x50003c00
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	681a      	ldr	r2, [r3, #0]
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cbfa:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	69da      	ldr	r2, [r3, #28]
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc04:	431a      	orrs	r2, r3
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	431a      	orrs	r2, r3
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc0e:	ea42 0103 	orr.w	r1, r2, r3
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	68da      	ldr	r2, [r3, #12]
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	430a      	orrs	r2, r1
 800cc1c:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc26:	431a      	orrs	r2, r3
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc2c:	431a      	orrs	r2, r3
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	699b      	ldr	r3, [r3, #24]
 800cc32:	431a      	orrs	r2, r3
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	691b      	ldr	r3, [r3, #16]
 800cc38:	431a      	orrs	r2, r3
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	695b      	ldr	r3, [r3, #20]
 800cc3e:	431a      	orrs	r2, r3
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	6a1b      	ldr	r3, [r3, #32]
 800cc44:	431a      	orrs	r2, r3
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	685b      	ldr	r3, [r3, #4]
 800cc4a:	431a      	orrs	r2, r3
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cc50:	431a      	orrs	r2, r3
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	689b      	ldr	r3, [r3, #8]
 800cc56:	431a      	orrs	r2, r3
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cc5c:	431a      	orrs	r2, r3
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cc62:	431a      	orrs	r2, r3
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cc68:	ea42 0103 	orr.w	r1, r2, r3
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	430a      	orrs	r2, r1
 800cc76:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	f022 0201 	bic.w	r2, r2, #1
 800cc86:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	685b      	ldr	r3, [r3, #4]
 800cc8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d00a      	beq.n	800ccaa <HAL_SPI_Init+0x2c6>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	68db      	ldr	r3, [r3, #12]
 800cc9a:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	430a      	orrs	r2, r1
 800cca8:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2200      	movs	r2, #0
 800ccae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2201      	movs	r2, #1
 800ccb6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800ccba:	2300      	movs	r3, #0
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	3710      	adds	r7, #16
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}

0800ccc4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b085      	sub	sp, #20
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ccd0:	095b      	lsrs	r3, r3, #5
 800ccd2:	3301      	adds	r3, #1
 800ccd4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	68db      	ldr	r3, [r3, #12]
 800ccda:	3301      	adds	r3, #1
 800ccdc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	3307      	adds	r3, #7
 800cce2:	08db      	lsrs	r3, r3, #3
 800cce4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800cce6:	68bb      	ldr	r3, [r7, #8]
 800cce8:	68fa      	ldr	r2, [r7, #12]
 800ccea:	fb02 f303 	mul.w	r3, r2, r3
}
 800ccee:	4618      	mov	r0, r3
 800ccf0:	3714      	adds	r7, #20
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf8:	4770      	bx	lr

0800ccfa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ccfa:	b580      	push	{r7, lr}
 800ccfc:	b082      	sub	sp, #8
 800ccfe:	af00      	add	r7, sp, #0
 800cd00:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d101      	bne.n	800cd0c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cd08:	2301      	movs	r3, #1
 800cd0a:	e042      	b.n	800cd92 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d106      	bne.n	800cd24 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2200      	movs	r2, #0
 800cd1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f7f5 faa2 	bl	8002268 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2224      	movs	r2, #36	@ 0x24
 800cd28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	681a      	ldr	r2, [r3, #0]
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	f022 0201 	bic.w	r2, r2, #1
 800cd3a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d002      	beq.n	800cd4a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800cd44:	6878      	ldr	r0, [r7, #4]
 800cd46:	f000 fab5 	bl	800d2b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f000 f8c4 	bl	800ced8 <UART_SetConfig>
 800cd50:	4603      	mov	r3, r0
 800cd52:	2b01      	cmp	r3, #1
 800cd54:	d101      	bne.n	800cd5a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800cd56:	2301      	movs	r3, #1
 800cd58:	e01b      	b.n	800cd92 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	685a      	ldr	r2, [r3, #4]
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cd68:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	689a      	ldr	r2, [r3, #8]
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cd78:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	681a      	ldr	r2, [r3, #0]
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	f042 0201 	orr.w	r2, r2, #1
 800cd88:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	f000 fb34 	bl	800d3f8 <UART_CheckIdleState>
 800cd90:	4603      	mov	r3, r0
}
 800cd92:	4618      	mov	r0, r3
 800cd94:	3708      	adds	r7, #8
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bd80      	pop	{r7, pc}

0800cd9a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cd9a:	b580      	push	{r7, lr}
 800cd9c:	b08a      	sub	sp, #40	@ 0x28
 800cd9e:	af02      	add	r7, sp, #8
 800cda0:	60f8      	str	r0, [r7, #12]
 800cda2:	60b9      	str	r1, [r7, #8]
 800cda4:	603b      	str	r3, [r7, #0]
 800cda6:	4613      	mov	r3, r2
 800cda8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cdb0:	2b20      	cmp	r3, #32
 800cdb2:	f040 808b 	bne.w	800cecc <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800cdb6:	68bb      	ldr	r3, [r7, #8]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d002      	beq.n	800cdc2 <HAL_UART_Transmit+0x28>
 800cdbc:	88fb      	ldrh	r3, [r7, #6]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d101      	bne.n	800cdc6 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	e083      	b.n	800cece <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	689b      	ldr	r3, [r3, #8]
 800cdcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cdd0:	2b80      	cmp	r3, #128	@ 0x80
 800cdd2:	d107      	bne.n	800cde4 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	689a      	ldr	r2, [r3, #8]
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cde2:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	2200      	movs	r2, #0
 800cde8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	2221      	movs	r2, #33	@ 0x21
 800cdf0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cdf4:	f7f6 f820 	bl	8002e38 <HAL_GetTick>
 800cdf8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	88fa      	ldrh	r2, [r7, #6]
 800cdfe:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	88fa      	ldrh	r2, [r7, #6]
 800ce06:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	689b      	ldr	r3, [r3, #8]
 800ce0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ce12:	d108      	bne.n	800ce26 <HAL_UART_Transmit+0x8c>
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	691b      	ldr	r3, [r3, #16]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d104      	bne.n	800ce26 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ce20:	68bb      	ldr	r3, [r7, #8]
 800ce22:	61bb      	str	r3, [r7, #24]
 800ce24:	e003      	b.n	800ce2e <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800ce26:	68bb      	ldr	r3, [r7, #8]
 800ce28:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ce2e:	e030      	b.n	800ce92 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	9300      	str	r3, [sp, #0]
 800ce34:	697b      	ldr	r3, [r7, #20]
 800ce36:	2200      	movs	r2, #0
 800ce38:	2180      	movs	r1, #128	@ 0x80
 800ce3a:	68f8      	ldr	r0, [r7, #12]
 800ce3c:	f000 fb86 	bl	800d54c <UART_WaitOnFlagUntilTimeout>
 800ce40:	4603      	mov	r3, r0
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d005      	beq.n	800ce52 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	2220      	movs	r2, #32
 800ce4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ce4e:	2303      	movs	r3, #3
 800ce50:	e03d      	b.n	800cece <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800ce52:	69fb      	ldr	r3, [r7, #28]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d10b      	bne.n	800ce70 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ce58:	69bb      	ldr	r3, [r7, #24]
 800ce5a:	881b      	ldrh	r3, [r3, #0]
 800ce5c:	461a      	mov	r2, r3
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ce66:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ce68:	69bb      	ldr	r3, [r7, #24]
 800ce6a:	3302      	adds	r3, #2
 800ce6c:	61bb      	str	r3, [r7, #24]
 800ce6e:	e007      	b.n	800ce80 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ce70:	69fb      	ldr	r3, [r7, #28]
 800ce72:	781a      	ldrb	r2, [r3, #0]
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ce7a:	69fb      	ldr	r3, [r7, #28]
 800ce7c:	3301      	adds	r3, #1
 800ce7e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ce86:	b29b      	uxth	r3, r3
 800ce88:	3b01      	subs	r3, #1
 800ce8a:	b29a      	uxth	r2, r3
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ce98:	b29b      	uxth	r3, r3
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d1c8      	bne.n	800ce30 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	9300      	str	r3, [sp, #0]
 800cea2:	697b      	ldr	r3, [r7, #20]
 800cea4:	2200      	movs	r2, #0
 800cea6:	2140      	movs	r1, #64	@ 0x40
 800cea8:	68f8      	ldr	r0, [r7, #12]
 800ceaa:	f000 fb4f 	bl	800d54c <UART_WaitOnFlagUntilTimeout>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d005      	beq.n	800cec0 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	2220      	movs	r2, #32
 800ceb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800cebc:	2303      	movs	r3, #3
 800cebe:	e006      	b.n	800cece <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	2220      	movs	r2, #32
 800cec4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800cec8:	2300      	movs	r3, #0
 800ceca:	e000      	b.n	800cece <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800cecc:	2302      	movs	r3, #2
  }
}
 800cece:	4618      	mov	r0, r3
 800ced0:	3720      	adds	r7, #32
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}
	...

0800ced8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ced8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cedc:	b094      	sub	sp, #80	@ 0x50
 800cede:	af00      	add	r7, sp, #0
 800cee0:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cee2:	2300      	movs	r3, #0
 800cee4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800cee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ceea:	681a      	ldr	r2, [r3, #0]
 800ceec:	4b78      	ldr	r3, [pc, #480]	@ (800d0d0 <UART_SetConfig+0x1f8>)
 800ceee:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cef2:	689a      	ldr	r2, [r3, #8]
 800cef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cef6:	691b      	ldr	r3, [r3, #16]
 800cef8:	431a      	orrs	r2, r3
 800cefa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cefc:	695b      	ldr	r3, [r3, #20]
 800cefe:	431a      	orrs	r2, r3
 800cf00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf02:	69db      	ldr	r3, [r3, #28]
 800cf04:	4313      	orrs	r3, r2
 800cf06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cf08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	4971      	ldr	r1, [pc, #452]	@ (800d0d4 <UART_SetConfig+0x1fc>)
 800cf10:	4019      	ands	r1, r3
 800cf12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf14:	681a      	ldr	r2, [r3, #0]
 800cf16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf18:	430b      	orrs	r3, r1
 800cf1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cf1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	685b      	ldr	r3, [r3, #4]
 800cf22:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800cf26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf28:	68d9      	ldr	r1, [r3, #12]
 800cf2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf2c:	681a      	ldr	r2, [r3, #0]
 800cf2e:	ea40 0301 	orr.w	r3, r0, r1
 800cf32:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cf34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf36:	699b      	ldr	r3, [r3, #24]
 800cf38:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cf3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf3c:	681a      	ldr	r2, [r3, #0]
 800cf3e:	4b64      	ldr	r3, [pc, #400]	@ (800d0d0 <UART_SetConfig+0x1f8>)
 800cf40:	429a      	cmp	r2, r3
 800cf42:	d009      	beq.n	800cf58 <UART_SetConfig+0x80>
 800cf44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf46:	681a      	ldr	r2, [r3, #0]
 800cf48:	4b63      	ldr	r3, [pc, #396]	@ (800d0d8 <UART_SetConfig+0x200>)
 800cf4a:	429a      	cmp	r2, r3
 800cf4c:	d004      	beq.n	800cf58 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cf4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf50:	6a1a      	ldr	r2, [r3, #32]
 800cf52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf54:	4313      	orrs	r3, r2
 800cf56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cf58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	689b      	ldr	r3, [r3, #8]
 800cf5e:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800cf62:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800cf66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf68:	681a      	ldr	r2, [r3, #0]
 800cf6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf6c:	430b      	orrs	r3, r1
 800cf6e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cf70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf76:	f023 000f 	bic.w	r0, r3, #15
 800cf7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf7c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800cf7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf80:	681a      	ldr	r2, [r3, #0]
 800cf82:	ea40 0301 	orr.w	r3, r0, r1
 800cf86:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cf88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf8a:	681a      	ldr	r2, [r3, #0]
 800cf8c:	4b53      	ldr	r3, [pc, #332]	@ (800d0dc <UART_SetConfig+0x204>)
 800cf8e:	429a      	cmp	r2, r3
 800cf90:	d102      	bne.n	800cf98 <UART_SetConfig+0xc0>
 800cf92:	2301      	movs	r3, #1
 800cf94:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cf96:	e066      	b.n	800d066 <UART_SetConfig+0x18e>
 800cf98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf9a:	681a      	ldr	r2, [r3, #0]
 800cf9c:	4b50      	ldr	r3, [pc, #320]	@ (800d0e0 <UART_SetConfig+0x208>)
 800cf9e:	429a      	cmp	r2, r3
 800cfa0:	d102      	bne.n	800cfa8 <UART_SetConfig+0xd0>
 800cfa2:	2302      	movs	r3, #2
 800cfa4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cfa6:	e05e      	b.n	800d066 <UART_SetConfig+0x18e>
 800cfa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfaa:	681a      	ldr	r2, [r3, #0]
 800cfac:	4b4d      	ldr	r3, [pc, #308]	@ (800d0e4 <UART_SetConfig+0x20c>)
 800cfae:	429a      	cmp	r2, r3
 800cfb0:	d102      	bne.n	800cfb8 <UART_SetConfig+0xe0>
 800cfb2:	2304      	movs	r3, #4
 800cfb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cfb6:	e056      	b.n	800d066 <UART_SetConfig+0x18e>
 800cfb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfba:	681a      	ldr	r2, [r3, #0]
 800cfbc:	4b4a      	ldr	r3, [pc, #296]	@ (800d0e8 <UART_SetConfig+0x210>)
 800cfbe:	429a      	cmp	r2, r3
 800cfc0:	d102      	bne.n	800cfc8 <UART_SetConfig+0xf0>
 800cfc2:	2308      	movs	r3, #8
 800cfc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cfc6:	e04e      	b.n	800d066 <UART_SetConfig+0x18e>
 800cfc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfca:	681a      	ldr	r2, [r3, #0]
 800cfcc:	4b47      	ldr	r3, [pc, #284]	@ (800d0ec <UART_SetConfig+0x214>)
 800cfce:	429a      	cmp	r2, r3
 800cfd0:	d102      	bne.n	800cfd8 <UART_SetConfig+0x100>
 800cfd2:	2310      	movs	r3, #16
 800cfd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cfd6:	e046      	b.n	800d066 <UART_SetConfig+0x18e>
 800cfd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfda:	681a      	ldr	r2, [r3, #0]
 800cfdc:	4b44      	ldr	r3, [pc, #272]	@ (800d0f0 <UART_SetConfig+0x218>)
 800cfde:	429a      	cmp	r2, r3
 800cfe0:	d102      	bne.n	800cfe8 <UART_SetConfig+0x110>
 800cfe2:	2320      	movs	r3, #32
 800cfe4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cfe6:	e03e      	b.n	800d066 <UART_SetConfig+0x18e>
 800cfe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfea:	681a      	ldr	r2, [r3, #0]
 800cfec:	4b41      	ldr	r3, [pc, #260]	@ (800d0f4 <UART_SetConfig+0x21c>)
 800cfee:	429a      	cmp	r2, r3
 800cff0:	d102      	bne.n	800cff8 <UART_SetConfig+0x120>
 800cff2:	2340      	movs	r3, #64	@ 0x40
 800cff4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cff6:	e036      	b.n	800d066 <UART_SetConfig+0x18e>
 800cff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cffa:	681a      	ldr	r2, [r3, #0]
 800cffc:	4b3e      	ldr	r3, [pc, #248]	@ (800d0f8 <UART_SetConfig+0x220>)
 800cffe:	429a      	cmp	r2, r3
 800d000:	d102      	bne.n	800d008 <UART_SetConfig+0x130>
 800d002:	2380      	movs	r3, #128	@ 0x80
 800d004:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d006:	e02e      	b.n	800d066 <UART_SetConfig+0x18e>
 800d008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d00a:	681a      	ldr	r2, [r3, #0]
 800d00c:	4b3b      	ldr	r3, [pc, #236]	@ (800d0fc <UART_SetConfig+0x224>)
 800d00e:	429a      	cmp	r2, r3
 800d010:	d103      	bne.n	800d01a <UART_SetConfig+0x142>
 800d012:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d016:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d018:	e025      	b.n	800d066 <UART_SetConfig+0x18e>
 800d01a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d01c:	681a      	ldr	r2, [r3, #0]
 800d01e:	4b38      	ldr	r3, [pc, #224]	@ (800d100 <UART_SetConfig+0x228>)
 800d020:	429a      	cmp	r2, r3
 800d022:	d103      	bne.n	800d02c <UART_SetConfig+0x154>
 800d024:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d028:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d02a:	e01c      	b.n	800d066 <UART_SetConfig+0x18e>
 800d02c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d02e:	681a      	ldr	r2, [r3, #0]
 800d030:	4b34      	ldr	r3, [pc, #208]	@ (800d104 <UART_SetConfig+0x22c>)
 800d032:	429a      	cmp	r2, r3
 800d034:	d103      	bne.n	800d03e <UART_SetConfig+0x166>
 800d036:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d03a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d03c:	e013      	b.n	800d066 <UART_SetConfig+0x18e>
 800d03e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d040:	681a      	ldr	r2, [r3, #0]
 800d042:	4b31      	ldr	r3, [pc, #196]	@ (800d108 <UART_SetConfig+0x230>)
 800d044:	429a      	cmp	r2, r3
 800d046:	d103      	bne.n	800d050 <UART_SetConfig+0x178>
 800d048:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d04c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d04e:	e00a      	b.n	800d066 <UART_SetConfig+0x18e>
 800d050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d052:	681a      	ldr	r2, [r3, #0]
 800d054:	4b1e      	ldr	r3, [pc, #120]	@ (800d0d0 <UART_SetConfig+0x1f8>)
 800d056:	429a      	cmp	r2, r3
 800d058:	d103      	bne.n	800d062 <UART_SetConfig+0x18a>
 800d05a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d05e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d060:	e001      	b.n	800d066 <UART_SetConfig+0x18e>
 800d062:	2300      	movs	r3, #0
 800d064:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d068:	681a      	ldr	r2, [r3, #0]
 800d06a:	4b19      	ldr	r3, [pc, #100]	@ (800d0d0 <UART_SetConfig+0x1f8>)
 800d06c:	429a      	cmp	r2, r3
 800d06e:	d005      	beq.n	800d07c <UART_SetConfig+0x1a4>
 800d070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d072:	681a      	ldr	r2, [r3, #0]
 800d074:	4b18      	ldr	r3, [pc, #96]	@ (800d0d8 <UART_SetConfig+0x200>)
 800d076:	429a      	cmp	r2, r3
 800d078:	f040 8094 	bne.w	800d1a4 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d07c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d07e:	2200      	movs	r2, #0
 800d080:	623b      	str	r3, [r7, #32]
 800d082:	627a      	str	r2, [r7, #36]	@ 0x24
 800d084:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d088:	f7fc fbea 	bl	8009860 <HAL_RCCEx_GetPeriphCLKFreq>
 800d08c:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800d08e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d090:	2b00      	cmp	r3, #0
 800d092:	f000 80f7 	beq.w	800d284 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d09a:	4a1c      	ldr	r2, [pc, #112]	@ (800d10c <UART_SetConfig+0x234>)
 800d09c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d0a0:	461a      	mov	r2, r3
 800d0a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d0a4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d0a8:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d0aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0ac:	685a      	ldr	r2, [r3, #4]
 800d0ae:	4613      	mov	r3, r2
 800d0b0:	005b      	lsls	r3, r3, #1
 800d0b2:	4413      	add	r3, r2
 800d0b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d0b6:	429a      	cmp	r2, r3
 800d0b8:	d305      	bcc.n	800d0c6 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d0ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0bc:	685b      	ldr	r3, [r3, #4]
 800d0be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d0c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d0c2:	429a      	cmp	r2, r3
 800d0c4:	d924      	bls.n	800d110 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800d0c6:	2301      	movs	r3, #1
 800d0c8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800d0cc:	e069      	b.n	800d1a2 <UART_SetConfig+0x2ca>
 800d0ce:	bf00      	nop
 800d0d0:	44002400 	.word	0x44002400
 800d0d4:	cfff69f3 	.word	0xcfff69f3
 800d0d8:	54002400 	.word	0x54002400
 800d0dc:	40013800 	.word	0x40013800
 800d0e0:	40004400 	.word	0x40004400
 800d0e4:	40004800 	.word	0x40004800
 800d0e8:	40004c00 	.word	0x40004c00
 800d0ec:	40005000 	.word	0x40005000
 800d0f0:	40006400 	.word	0x40006400
 800d0f4:	40007800 	.word	0x40007800
 800d0f8:	40007c00 	.word	0x40007c00
 800d0fc:	40008000 	.word	0x40008000
 800d100:	40006800 	.word	0x40006800
 800d104:	40006c00 	.word	0x40006c00
 800d108:	40008400 	.word	0x40008400
 800d10c:	08014164 	.word	0x08014164
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d110:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d112:	2200      	movs	r2, #0
 800d114:	61bb      	str	r3, [r7, #24]
 800d116:	61fa      	str	r2, [r7, #28]
 800d118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d11a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d11c:	4a64      	ldr	r2, [pc, #400]	@ (800d2b0 <UART_SetConfig+0x3d8>)
 800d11e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d122:	b29b      	uxth	r3, r3
 800d124:	2200      	movs	r2, #0
 800d126:	613b      	str	r3, [r7, #16]
 800d128:	617a      	str	r2, [r7, #20]
 800d12a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d12e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d132:	f7f3 f8ab 	bl	800028c <__aeabi_uldivmod>
 800d136:	4602      	mov	r2, r0
 800d138:	460b      	mov	r3, r1
 800d13a:	4610      	mov	r0, r2
 800d13c:	4619      	mov	r1, r3
 800d13e:	f04f 0200 	mov.w	r2, #0
 800d142:	f04f 0300 	mov.w	r3, #0
 800d146:	020b      	lsls	r3, r1, #8
 800d148:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d14c:	0202      	lsls	r2, r0, #8
 800d14e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d150:	6849      	ldr	r1, [r1, #4]
 800d152:	0849      	lsrs	r1, r1, #1
 800d154:	2000      	movs	r0, #0
 800d156:	460c      	mov	r4, r1
 800d158:	4605      	mov	r5, r0
 800d15a:	eb12 0804 	adds.w	r8, r2, r4
 800d15e:	eb43 0905 	adc.w	r9, r3, r5
 800d162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d164:	685b      	ldr	r3, [r3, #4]
 800d166:	2200      	movs	r2, #0
 800d168:	60bb      	str	r3, [r7, #8]
 800d16a:	60fa      	str	r2, [r7, #12]
 800d16c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d170:	4640      	mov	r0, r8
 800d172:	4649      	mov	r1, r9
 800d174:	f7f3 f88a 	bl	800028c <__aeabi_uldivmod>
 800d178:	4602      	mov	r2, r0
 800d17a:	460b      	mov	r3, r1
 800d17c:	4613      	mov	r3, r2
 800d17e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d180:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d182:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d186:	d308      	bcc.n	800d19a <UART_SetConfig+0x2c2>
 800d188:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d18a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d18e:	d204      	bcs.n	800d19a <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800d190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d196:	60da      	str	r2, [r3, #12]
 800d198:	e003      	b.n	800d1a2 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800d19a:	2301      	movs	r3, #1
 800d19c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800d1a0:	e070      	b.n	800d284 <UART_SetConfig+0x3ac>
 800d1a2:	e06f      	b.n	800d284 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d1a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1a6:	69db      	ldr	r3, [r3, #28]
 800d1a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d1ac:	d13c      	bne.n	800d228 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d1ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	603b      	str	r3, [r7, #0]
 800d1b4:	607a      	str	r2, [r7, #4]
 800d1b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d1ba:	f7fc fb51 	bl	8009860 <HAL_RCCEx_GetPeriphCLKFreq>
 800d1be:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d1c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d05e      	beq.n	800d284 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d1c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1ca:	4a39      	ldr	r2, [pc, #228]	@ (800d2b0 <UART_SetConfig+0x3d8>)
 800d1cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d1d0:	461a      	mov	r2, r3
 800d1d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d1d8:	005a      	lsls	r2, r3, #1
 800d1da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1dc:	685b      	ldr	r3, [r3, #4]
 800d1de:	085b      	lsrs	r3, r3, #1
 800d1e0:	441a      	add	r2, r3
 800d1e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1e4:	685b      	ldr	r3, [r3, #4]
 800d1e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d1ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1ee:	2b0f      	cmp	r3, #15
 800d1f0:	d916      	bls.n	800d220 <UART_SetConfig+0x348>
 800d1f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d1f8:	d212      	bcs.n	800d220 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d1fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1fc:	b29b      	uxth	r3, r3
 800d1fe:	f023 030f 	bic.w	r3, r3, #15
 800d202:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d204:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d206:	085b      	lsrs	r3, r3, #1
 800d208:	b29b      	uxth	r3, r3
 800d20a:	f003 0307 	and.w	r3, r3, #7
 800d20e:	b29a      	uxth	r2, r3
 800d210:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d212:	4313      	orrs	r3, r2
 800d214:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800d216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d21c:	60da      	str	r2, [r3, #12]
 800d21e:	e031      	b.n	800d284 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800d220:	2301      	movs	r3, #1
 800d222:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800d226:	e02d      	b.n	800d284 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d228:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d22a:	2200      	movs	r2, #0
 800d22c:	469a      	mov	sl, r3
 800d22e:	4693      	mov	fp, r2
 800d230:	4650      	mov	r0, sl
 800d232:	4659      	mov	r1, fp
 800d234:	f7fc fb14 	bl	8009860 <HAL_RCCEx_GetPeriphCLKFreq>
 800d238:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800d23a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d021      	beq.n	800d284 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d244:	4a1a      	ldr	r2, [pc, #104]	@ (800d2b0 <UART_SetConfig+0x3d8>)
 800d246:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d24a:	461a      	mov	r2, r3
 800d24c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d24e:	fbb3 f2f2 	udiv	r2, r3, r2
 800d252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d254:	685b      	ldr	r3, [r3, #4]
 800d256:	085b      	lsrs	r3, r3, #1
 800d258:	441a      	add	r2, r3
 800d25a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d25c:	685b      	ldr	r3, [r3, #4]
 800d25e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d262:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d264:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d266:	2b0f      	cmp	r3, #15
 800d268:	d909      	bls.n	800d27e <UART_SetConfig+0x3a6>
 800d26a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d26c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d270:	d205      	bcs.n	800d27e <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d272:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d274:	b29a      	uxth	r2, r3
 800d276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	60da      	str	r2, [r3, #12]
 800d27c:	e002      	b.n	800d284 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800d27e:	2301      	movs	r3, #1
 800d280:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d286:	2201      	movs	r2, #1
 800d288:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d28c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d28e:	2201      	movs	r2, #1
 800d290:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d296:	2200      	movs	r2, #0
 800d298:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d29a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d29c:	2200      	movs	r2, #0
 800d29e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d2a0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	3750      	adds	r7, #80	@ 0x50
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d2ae:	bf00      	nop
 800d2b0:	08014164 	.word	0x08014164

0800d2b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d2b4:	b480      	push	{r7}
 800d2b6:	b083      	sub	sp, #12
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2c0:	f003 0308 	and.w	r3, r3, #8
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d00a      	beq.n	800d2de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	430a      	orrs	r2, r1
 800d2dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2e2:	f003 0301 	and.w	r3, r3, #1
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d00a      	beq.n	800d300 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	685b      	ldr	r3, [r3, #4]
 800d2f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	430a      	orrs	r2, r1
 800d2fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d304:	f003 0302 	and.w	r3, r3, #2
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d00a      	beq.n	800d322 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	685b      	ldr	r3, [r3, #4]
 800d312:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	430a      	orrs	r2, r1
 800d320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d326:	f003 0304 	and.w	r3, r3, #4
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d00a      	beq.n	800d344 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	685b      	ldr	r3, [r3, #4]
 800d334:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	430a      	orrs	r2, r1
 800d342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d348:	f003 0310 	and.w	r3, r3, #16
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d00a      	beq.n	800d366 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	689b      	ldr	r3, [r3, #8]
 800d356:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	430a      	orrs	r2, r1
 800d364:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d36a:	f003 0320 	and.w	r3, r3, #32
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d00a      	beq.n	800d388 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	689b      	ldr	r3, [r3, #8]
 800d378:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	430a      	orrs	r2, r1
 800d386:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d38c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d390:	2b00      	cmp	r3, #0
 800d392:	d01a      	beq.n	800d3ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	685b      	ldr	r3, [r3, #4]
 800d39a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	430a      	orrs	r2, r1
 800d3a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d3ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d3b2:	d10a      	bne.n	800d3ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	685b      	ldr	r3, [r3, #4]
 800d3ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	430a      	orrs	r2, r1
 800d3c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d00a      	beq.n	800d3ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	685b      	ldr	r3, [r3, #4]
 800d3dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	430a      	orrs	r2, r1
 800d3ea:	605a      	str	r2, [r3, #4]
  }
}
 800d3ec:	bf00      	nop
 800d3ee:	370c      	adds	r7, #12
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f6:	4770      	bx	lr

0800d3f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b098      	sub	sp, #96	@ 0x60
 800d3fc:	af02      	add	r7, sp, #8
 800d3fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2200      	movs	r2, #0
 800d404:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d408:	f7f5 fd16 	bl	8002e38 <HAL_GetTick>
 800d40c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	f003 0308 	and.w	r3, r3, #8
 800d418:	2b08      	cmp	r3, #8
 800d41a:	d12f      	bne.n	800d47c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d41c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d420:	9300      	str	r3, [sp, #0]
 800d422:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d424:	2200      	movs	r2, #0
 800d426:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d42a:	6878      	ldr	r0, [r7, #4]
 800d42c:	f000 f88e 	bl	800d54c <UART_WaitOnFlagUntilTimeout>
 800d430:	4603      	mov	r3, r0
 800d432:	2b00      	cmp	r3, #0
 800d434:	d022      	beq.n	800d47c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d43c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d43e:	e853 3f00 	ldrex	r3, [r3]
 800d442:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d446:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d44a:	653b      	str	r3, [r7, #80]	@ 0x50
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	461a      	mov	r2, r3
 800d452:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d454:	647b      	str	r3, [r7, #68]	@ 0x44
 800d456:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d458:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d45a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d45c:	e841 2300 	strex	r3, r2, [r1]
 800d460:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d464:	2b00      	cmp	r3, #0
 800d466:	d1e6      	bne.n	800d436 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2220      	movs	r2, #32
 800d46c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2200      	movs	r2, #0
 800d474:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d478:	2303      	movs	r3, #3
 800d47a:	e063      	b.n	800d544 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	f003 0304 	and.w	r3, r3, #4
 800d486:	2b04      	cmp	r3, #4
 800d488:	d149      	bne.n	800d51e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d48a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d48e:	9300      	str	r3, [sp, #0]
 800d490:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d492:	2200      	movs	r2, #0
 800d494:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d498:	6878      	ldr	r0, [r7, #4]
 800d49a:	f000 f857 	bl	800d54c <UART_WaitOnFlagUntilTimeout>
 800d49e:	4603      	mov	r3, r0
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d03c      	beq.n	800d51e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4ac:	e853 3f00 	ldrex	r3, [r3]
 800d4b0:	623b      	str	r3, [r7, #32]
   return(result);
 800d4b2:	6a3b      	ldr	r3, [r7, #32]
 800d4b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d4b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	461a      	mov	r2, r3
 800d4c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4c2:	633b      	str	r3, [r7, #48]	@ 0x30
 800d4c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d4c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d4ca:	e841 2300 	strex	r3, r2, [r1]
 800d4ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d4d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d1e6      	bne.n	800d4a4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	3308      	adds	r3, #8
 800d4dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4de:	693b      	ldr	r3, [r7, #16]
 800d4e0:	e853 3f00 	ldrex	r3, [r3]
 800d4e4:	60fb      	str	r3, [r7, #12]
   return(result);
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	f023 0301 	bic.w	r3, r3, #1
 800d4ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	3308      	adds	r3, #8
 800d4f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d4f6:	61fa      	str	r2, [r7, #28]
 800d4f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4fa:	69b9      	ldr	r1, [r7, #24]
 800d4fc:	69fa      	ldr	r2, [r7, #28]
 800d4fe:	e841 2300 	strex	r3, r2, [r1]
 800d502:	617b      	str	r3, [r7, #20]
   return(result);
 800d504:	697b      	ldr	r3, [r7, #20]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d1e5      	bne.n	800d4d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	2220      	movs	r2, #32
 800d50e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	2200      	movs	r2, #0
 800d516:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d51a:	2303      	movs	r3, #3
 800d51c:	e012      	b.n	800d544 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	2220      	movs	r2, #32
 800d522:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	2220      	movs	r2, #32
 800d52a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	2200      	movs	r2, #0
 800d532:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	2200      	movs	r2, #0
 800d538:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2200      	movs	r2, #0
 800d53e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d542:	2300      	movs	r3, #0
}
 800d544:	4618      	mov	r0, r3
 800d546:	3758      	adds	r7, #88	@ 0x58
 800d548:	46bd      	mov	sp, r7
 800d54a:	bd80      	pop	{r7, pc}

0800d54c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b084      	sub	sp, #16
 800d550:	af00      	add	r7, sp, #0
 800d552:	60f8      	str	r0, [r7, #12]
 800d554:	60b9      	str	r1, [r7, #8]
 800d556:	603b      	str	r3, [r7, #0]
 800d558:	4613      	mov	r3, r2
 800d55a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d55c:	e04f      	b.n	800d5fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d55e:	69bb      	ldr	r3, [r7, #24]
 800d560:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d564:	d04b      	beq.n	800d5fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d566:	f7f5 fc67 	bl	8002e38 <HAL_GetTick>
 800d56a:	4602      	mov	r2, r0
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	1ad3      	subs	r3, r2, r3
 800d570:	69ba      	ldr	r2, [r7, #24]
 800d572:	429a      	cmp	r2, r3
 800d574:	d302      	bcc.n	800d57c <UART_WaitOnFlagUntilTimeout+0x30>
 800d576:	69bb      	ldr	r3, [r7, #24]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d101      	bne.n	800d580 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d57c:	2303      	movs	r3, #3
 800d57e:	e04e      	b.n	800d61e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	f003 0304 	and.w	r3, r3, #4
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d037      	beq.n	800d5fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	2b80      	cmp	r3, #128	@ 0x80
 800d592:	d034      	beq.n	800d5fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800d594:	68bb      	ldr	r3, [r7, #8]
 800d596:	2b40      	cmp	r3, #64	@ 0x40
 800d598:	d031      	beq.n	800d5fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	69db      	ldr	r3, [r3, #28]
 800d5a0:	f003 0308 	and.w	r3, r3, #8
 800d5a4:	2b08      	cmp	r3, #8
 800d5a6:	d110      	bne.n	800d5ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	2208      	movs	r2, #8
 800d5ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d5b0:	68f8      	ldr	r0, [r7, #12]
 800d5b2:	f000 f838 	bl	800d626 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	2208      	movs	r2, #8
 800d5ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d5c6:	2301      	movs	r3, #1
 800d5c8:	e029      	b.n	800d61e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	69db      	ldr	r3, [r3, #28]
 800d5d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d5d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d5d8:	d111      	bne.n	800d5fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d5e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d5e4:	68f8      	ldr	r0, [r7, #12]
 800d5e6:	f000 f81e 	bl	800d626 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	2220      	movs	r2, #32
 800d5ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d5fa:	2303      	movs	r3, #3
 800d5fc:	e00f      	b.n	800d61e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	69da      	ldr	r2, [r3, #28]
 800d604:	68bb      	ldr	r3, [r7, #8]
 800d606:	4013      	ands	r3, r2
 800d608:	68ba      	ldr	r2, [r7, #8]
 800d60a:	429a      	cmp	r2, r3
 800d60c:	bf0c      	ite	eq
 800d60e:	2301      	moveq	r3, #1
 800d610:	2300      	movne	r3, #0
 800d612:	b2db      	uxtb	r3, r3
 800d614:	461a      	mov	r2, r3
 800d616:	79fb      	ldrb	r3, [r7, #7]
 800d618:	429a      	cmp	r2, r3
 800d61a:	d0a0      	beq.n	800d55e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d61c:	2300      	movs	r3, #0
}
 800d61e:	4618      	mov	r0, r3
 800d620:	3710      	adds	r7, #16
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}

0800d626 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d626:	b480      	push	{r7}
 800d628:	b095      	sub	sp, #84	@ 0x54
 800d62a:	af00      	add	r7, sp, #0
 800d62c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d636:	e853 3f00 	ldrex	r3, [r3]
 800d63a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d63c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d63e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d642:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	461a      	mov	r2, r3
 800d64a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d64c:	643b      	str	r3, [r7, #64]	@ 0x40
 800d64e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d650:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d652:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d654:	e841 2300 	strex	r3, r2, [r1]
 800d658:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d65a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d1e6      	bne.n	800d62e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	3308      	adds	r3, #8
 800d666:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d668:	6a3b      	ldr	r3, [r7, #32]
 800d66a:	e853 3f00 	ldrex	r3, [r3]
 800d66e:	61fb      	str	r3, [r7, #28]
   return(result);
 800d670:	69fb      	ldr	r3, [r7, #28]
 800d672:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d676:	f023 0301 	bic.w	r3, r3, #1
 800d67a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	3308      	adds	r3, #8
 800d682:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d684:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d686:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d688:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d68a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d68c:	e841 2300 	strex	r3, r2, [r1]
 800d690:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d694:	2b00      	cmp	r3, #0
 800d696:	d1e3      	bne.n	800d660 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d69c:	2b01      	cmp	r3, #1
 800d69e:	d118      	bne.n	800d6d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	e853 3f00 	ldrex	r3, [r3]
 800d6ac:	60bb      	str	r3, [r7, #8]
   return(result);
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	f023 0310 	bic.w	r3, r3, #16
 800d6b4:	647b      	str	r3, [r7, #68]	@ 0x44
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	461a      	mov	r2, r3
 800d6bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d6be:	61bb      	str	r3, [r7, #24]
 800d6c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6c2:	6979      	ldr	r1, [r7, #20]
 800d6c4:	69ba      	ldr	r2, [r7, #24]
 800d6c6:	e841 2300 	strex	r3, r2, [r1]
 800d6ca:	613b      	str	r3, [r7, #16]
   return(result);
 800d6cc:	693b      	ldr	r3, [r7, #16]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d1e6      	bne.n	800d6a0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	2220      	movs	r2, #32
 800d6d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	2200      	movs	r2, #0
 800d6de:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d6e6:	bf00      	nop
 800d6e8:	3754      	adds	r7, #84	@ 0x54
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f0:	4770      	bx	lr

0800d6f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d6f2:	b480      	push	{r7}
 800d6f4:	b085      	sub	sp, #20
 800d6f6:	af00      	add	r7, sp, #0
 800d6f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d700:	2b01      	cmp	r3, #1
 800d702:	d101      	bne.n	800d708 <HAL_UARTEx_DisableFifoMode+0x16>
 800d704:	2302      	movs	r3, #2
 800d706:	e027      	b.n	800d758 <HAL_UARTEx_DisableFifoMode+0x66>
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	2201      	movs	r2, #1
 800d70c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2224      	movs	r2, #36	@ 0x24
 800d714:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	681a      	ldr	r2, [r3, #0]
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	f022 0201 	bic.w	r2, r2, #1
 800d72e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d736:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	2200      	movs	r2, #0
 800d73c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	68fa      	ldr	r2, [r7, #12]
 800d744:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	2220      	movs	r2, #32
 800d74a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	2200      	movs	r2, #0
 800d752:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d756:	2300      	movs	r3, #0
}
 800d758:	4618      	mov	r0, r3
 800d75a:	3714      	adds	r7, #20
 800d75c:	46bd      	mov	sp, r7
 800d75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d762:	4770      	bx	lr

0800d764 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b084      	sub	sp, #16
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
 800d76c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d774:	2b01      	cmp	r3, #1
 800d776:	d101      	bne.n	800d77c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d778:	2302      	movs	r3, #2
 800d77a:	e02d      	b.n	800d7d8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2201      	movs	r2, #1
 800d780:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	2224      	movs	r2, #36	@ 0x24
 800d788:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	681a      	ldr	r2, [r3, #0]
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	f022 0201 	bic.w	r2, r2, #1
 800d7a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	689b      	ldr	r3, [r3, #8]
 800d7aa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	683a      	ldr	r2, [r7, #0]
 800d7b4:	430a      	orrs	r2, r1
 800d7b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d7b8:	6878      	ldr	r0, [r7, #4]
 800d7ba:	f000 f84f 	bl	800d85c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	68fa      	ldr	r2, [r7, #12]
 800d7c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	2220      	movs	r2, #32
 800d7ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d7d6:	2300      	movs	r3, #0
}
 800d7d8:	4618      	mov	r0, r3
 800d7da:	3710      	adds	r7, #16
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}

0800d7e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b084      	sub	sp, #16
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
 800d7e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d7f0:	2b01      	cmp	r3, #1
 800d7f2:	d101      	bne.n	800d7f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d7f4:	2302      	movs	r3, #2
 800d7f6:	e02d      	b.n	800d854 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2201      	movs	r2, #1
 800d7fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2224      	movs	r2, #36	@ 0x24
 800d804:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	681a      	ldr	r2, [r3, #0]
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	f022 0201 	bic.w	r2, r2, #1
 800d81e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	689b      	ldr	r3, [r3, #8]
 800d826:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	683a      	ldr	r2, [r7, #0]
 800d830:	430a      	orrs	r2, r1
 800d832:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d834:	6878      	ldr	r0, [r7, #4]
 800d836:	f000 f811 	bl	800d85c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	68fa      	ldr	r2, [r7, #12]
 800d840:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	2220      	movs	r2, #32
 800d846:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	2200      	movs	r2, #0
 800d84e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d852:	2300      	movs	r3, #0
}
 800d854:	4618      	mov	r0, r3
 800d856:	3710      	adds	r7, #16
 800d858:	46bd      	mov	sp, r7
 800d85a:	bd80      	pop	{r7, pc}

0800d85c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d85c:	b480      	push	{r7}
 800d85e:	b085      	sub	sp, #20
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d108      	bne.n	800d87e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2201      	movs	r2, #1
 800d870:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	2201      	movs	r2, #1
 800d878:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d87c:	e031      	b.n	800d8e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d87e:	2308      	movs	r3, #8
 800d880:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d882:	2308      	movs	r3, #8
 800d884:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	689b      	ldr	r3, [r3, #8]
 800d88c:	0e5b      	lsrs	r3, r3, #25
 800d88e:	b2db      	uxtb	r3, r3
 800d890:	f003 0307 	and.w	r3, r3, #7
 800d894:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	689b      	ldr	r3, [r3, #8]
 800d89c:	0f5b      	lsrs	r3, r3, #29
 800d89e:	b2db      	uxtb	r3, r3
 800d8a0:	f003 0307 	and.w	r3, r3, #7
 800d8a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d8a6:	7bbb      	ldrb	r3, [r7, #14]
 800d8a8:	7b3a      	ldrb	r2, [r7, #12]
 800d8aa:	4911      	ldr	r1, [pc, #68]	@ (800d8f0 <UARTEx_SetNbDataToProcess+0x94>)
 800d8ac:	5c8a      	ldrb	r2, [r1, r2]
 800d8ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d8b2:	7b3a      	ldrb	r2, [r7, #12]
 800d8b4:	490f      	ldr	r1, [pc, #60]	@ (800d8f4 <UARTEx_SetNbDataToProcess+0x98>)
 800d8b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d8b8:	fb93 f3f2 	sdiv	r3, r3, r2
 800d8bc:	b29a      	uxth	r2, r3
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d8c4:	7bfb      	ldrb	r3, [r7, #15]
 800d8c6:	7b7a      	ldrb	r2, [r7, #13]
 800d8c8:	4909      	ldr	r1, [pc, #36]	@ (800d8f0 <UARTEx_SetNbDataToProcess+0x94>)
 800d8ca:	5c8a      	ldrb	r2, [r1, r2]
 800d8cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d8d0:	7b7a      	ldrb	r2, [r7, #13]
 800d8d2:	4908      	ldr	r1, [pc, #32]	@ (800d8f4 <UARTEx_SetNbDataToProcess+0x98>)
 800d8d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d8d6:	fb93 f3f2 	sdiv	r3, r3, r2
 800d8da:	b29a      	uxth	r2, r3
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d8e2:	bf00      	nop
 800d8e4:	3714      	adds	r7, #20
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ec:	4770      	bx	lr
 800d8ee:	bf00      	nop
 800d8f0:	0801417c 	.word	0x0801417c
 800d8f4:	08014184 	.word	0x08014184

0800d8f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_DRD_TypeDef *USBx)
{
 800d8f8:	b480      	push	{r7}
 800d8fa:	b083      	sub	sp, #12
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
  /* Disable Host Mode */
  USBx->CNTR &= ~USB_CNTR_HOST;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d904:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Force Reset IP */
  USBx->CNTR |= USB_CNTR_USBRST;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d910:	f043 0201 	orr.w	r2, r3, #1
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800d918:	2300      	movs	r3, #0
}
 800d91a:	4618      	mov	r0, r3
 800d91c:	370c      	adds	r7, #12
 800d91e:	46bd      	mov	sp, r7
 800d920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d924:	4770      	bx	lr

0800d926 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800d926:	b084      	sub	sp, #16
 800d928:	b580      	push	{r7, lr}
 800d92a:	b084      	sub	sp, #16
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
 800d930:	f107 001c 	add.w	r0, r7, #28
 800d934:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  UNUSED(cfg);

  if (USBx == NULL)
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d101      	bne.n	800d942 <USB_CoreInit+0x1c>
  {
    return HAL_ERROR;
 800d93e:	2301      	movs	r3, #1
 800d940:	e008      	b.n	800d954 <USB_CoreInit+0x2e>
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800d942:	6878      	ldr	r0, [r7, #4]
 800d944:	f7ff ffd8 	bl	800d8f8 <USB_CoreReset>
 800d948:	4603      	mov	r3, r0
 800d94a:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2200      	movs	r2, #0
 800d950:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800d952:	7bfb      	ldrb	r3, [r7, #15]
}
 800d954:	4618      	mov	r0, r3
 800d956:	3710      	adds	r7, #16
 800d958:	46bd      	mov	sp, r7
 800d95a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d95e:	b004      	add	sp, #16
 800d960:	4770      	bx	lr

0800d962 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800d962:	b480      	push	{r7}
 800d964:	b085      	sub	sp, #20
 800d966:	af00      	add	r7, sp, #0
 800d968:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	2200      	movs	r2, #0
 800d96e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800d970:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800d974:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	68fa      	ldr	r2, [r7, #12]
 800d97a:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800d97c:	2300      	movs	r3, #0
}
 800d97e:	4618      	mov	r0, r3
 800d980:	3714      	adds	r7, #20
 800d982:	46bd      	mov	sp, r7
 800d984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d988:	4770      	bx	lr

0800d98a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800d98a:	b480      	push	{r7}
 800d98c:	b085      	sub	sp, #20
 800d98e:	af00      	add	r7, sp, #0
 800d990:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800d992:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800d996:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	43db      	mvns	r3, r3
 800d9a0:	401a      	ands	r2, r3
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800d9a6:	2300      	movs	r3, #0
}
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	3714      	adds	r7, #20
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b2:	4770      	bx	lr

0800d9b4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800d9b4:	b480      	push	{r7}
 800d9b6:	b083      	sub	sp, #12
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
 800d9bc:	460b      	mov	r3, r1
 800d9be:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800d9c0:	78fb      	ldrb	r3, [r7, #3]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d106      	bne.n	800d9d4 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9ca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	641a      	str	r2, [r3, #64]	@ 0x40
 800d9d2:	e00b      	b.n	800d9ec <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800d9d4:	78fb      	ldrb	r3, [r7, #3]
 800d9d6:	2b01      	cmp	r3, #1
 800d9d8:	d106      	bne.n	800d9e8 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9de:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	641a      	str	r2, [r3, #64]	@ 0x40
 800d9e6:	e001      	b.n	800d9ec <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800d9e8:	2301      	movs	r3, #1
 800d9ea:	e000      	b.n	800d9ee <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800d9ec:	2300      	movs	r3, #0
}
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	370c      	adds	r7, #12
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f8:	4770      	bx	lr

0800d9fa <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800d9fa:	b084      	sub	sp, #16
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b084      	sub	sp, #16
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	f107 001c 	add.w	r0, r7, #28
 800da08:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	2201      	movs	r2, #1
 800da10:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da16:	f023 0201 	bic.w	r2, r3, #1
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800da1e:	2100      	movs	r1, #0
 800da20:	6878      	ldr	r0, [r7, #4]
 800da22:	f7ff ffc7 	bl	800d9b4 <USB_SetCurrentMode>
 800da26:	4603      	mov	r3, r0
 800da28:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	2200      	movs	r2, #0
 800da2e:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800da30:	7bfb      	ldrb	r3, [r7, #15]
}
 800da32:	4618      	mov	r0, r3
 800da34:	3710      	adds	r7, #16
 800da36:	46bd      	mov	sp, r7
 800da38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800da3c:	b004      	add	sp, #16
 800da3e:	4770      	bx	lr

0800da40 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800da40:	b480      	push	{r7}
 800da42:	b09f      	sub	sp, #124	@ 0x7c
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
 800da48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800da4a:	2300      	movs	r3, #0
 800da4c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800da50:	687a      	ldr	r2, [r7, #4]
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	781b      	ldrb	r3, [r3, #0]
 800da56:	009b      	lsls	r3, r3, #2
 800da58:	4413      	add	r3, r2
 800da5a:	681a      	ldr	r2, [r3, #0]
 800da5c:	4ba0      	ldr	r3, [pc, #640]	@ (800dce0 <USB_ActivateEndpoint+0x2a0>)
 800da5e:	4013      	ands	r3, r2
 800da60:	673b      	str	r3, [r7, #112]	@ 0x70

  /* initialize Endpoint */
  switch (ep->type)
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	78db      	ldrb	r3, [r3, #3]
 800da66:	2b03      	cmp	r3, #3
 800da68:	d819      	bhi.n	800da9e <USB_ActivateEndpoint+0x5e>
 800da6a:	a201      	add	r2, pc, #4	@ (adr r2, 800da70 <USB_ActivateEndpoint+0x30>)
 800da6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da70:	0800da81 	.word	0x0800da81
 800da74:	0800da95 	.word	0x0800da95
 800da78:	0800daa7 	.word	0x0800daa7
 800da7c:	0800da8b 	.word	0x0800da8b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800da80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800da82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800da86:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800da88:	e00e      	b.n	800daa8 <USB_ActivateEndpoint+0x68>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800da8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800da8c:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800da90:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800da92:	e009      	b.n	800daa8 <USB_ActivateEndpoint+0x68>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800da94:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800da96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800da9a:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800da9c:	e004      	b.n	800daa8 <USB_ActivateEndpoint+0x68>

    default:
      ret = HAL_ERROR;
 800da9e:	2301      	movs	r3, #1
 800daa0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      break;
 800daa4:	e000      	b.n	800daa8 <USB_ActivateEndpoint+0x68>
      break;
 800daa6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 800daa8:	687a      	ldr	r2, [r7, #4]
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	781b      	ldrb	r3, [r3, #0]
 800daae:	009b      	lsls	r3, r3, #2
 800dab0:	441a      	add	r2, r3
 800dab2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dab4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dab8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dabc:	6013      	str	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800dabe:	687a      	ldr	r2, [r7, #4]
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	781b      	ldrb	r3, [r3, #0]
 800dac4:	009b      	lsls	r3, r3, #2
 800dac6:	4413      	add	r3, r2
 800dac8:	681a      	ldr	r2, [r3, #0]
 800daca:	4b86      	ldr	r3, [pc, #536]	@ (800dce4 <USB_ActivateEndpoint+0x2a4>)
 800dacc:	4013      	ands	r3, r2
 800dace:	683a      	ldr	r2, [r7, #0]
 800dad0:	7812      	ldrb	r2, [r2, #0]
 800dad2:	4313      	orrs	r3, r2
 800dad4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dad6:	687a      	ldr	r2, [r7, #4]
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	781b      	ldrb	r3, [r3, #0]
 800dadc:	009b      	lsls	r3, r3, #2
 800dade:	441a      	add	r2, r3
 800dae0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dae2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dae6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800daea:	6013      	str	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800daec:	683b      	ldr	r3, [r7, #0]
 800daee:	7b1b      	ldrb	r3, [r3, #12]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	f040 8177 	bne.w	800dde4 <USB_ActivateEndpoint+0x3a4>
  {
    if (ep->is_in != 0U)
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	785b      	ldrb	r3, [r3, #1]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d079      	beq.n	800dbf2 <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	781b      	ldrb	r3, [r3, #0]
 800db02:	00db      	lsls	r3, r3, #3
 800db04:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800db08:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800db0c:	681a      	ldr	r2, [r3, #0]
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	781b      	ldrb	r3, [r3, #0]
 800db12:	00db      	lsls	r3, r3, #3
 800db14:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800db18:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800db1c:	0c12      	lsrs	r2, r2, #16
 800db1e:	0412      	lsls	r2, r2, #16
 800db20:	601a      	str	r2, [r3, #0]
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	781b      	ldrb	r3, [r3, #0]
 800db26:	00db      	lsls	r3, r3, #3
 800db28:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800db2c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800db30:	6819      	ldr	r1, [r3, #0]
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	88db      	ldrh	r3, [r3, #6]
 800db36:	089b      	lsrs	r3, r3, #2
 800db38:	b29b      	uxth	r3, r3
 800db3a:	009a      	lsls	r2, r3, #2
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	781b      	ldrb	r3, [r3, #0]
 800db40:	00db      	lsls	r3, r3, #3
 800db42:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800db46:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800db4a:	430a      	orrs	r2, r1
 800db4c:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800db4e:	687a      	ldr	r2, [r7, #4]
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	781b      	ldrb	r3, [r3, #0]
 800db54:	009b      	lsls	r3, r3, #2
 800db56:	4413      	add	r3, r2
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	61bb      	str	r3, [r7, #24]
 800db5c:	69bb      	ldr	r3, [r7, #24]
 800db5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db62:	2b00      	cmp	r3, #0
 800db64:	d013      	beq.n	800db8e <USB_ActivateEndpoint+0x14e>
 800db66:	687a      	ldr	r2, [r7, #4]
 800db68:	683b      	ldr	r3, [r7, #0]
 800db6a:	781b      	ldrb	r3, [r3, #0]
 800db6c:	009b      	lsls	r3, r3, #2
 800db6e:	4413      	add	r3, r2
 800db70:	681a      	ldr	r2, [r3, #0]
 800db72:	4b5c      	ldr	r3, [pc, #368]	@ (800dce4 <USB_ActivateEndpoint+0x2a4>)
 800db74:	4013      	ands	r3, r2
 800db76:	617b      	str	r3, [r7, #20]
 800db78:	687a      	ldr	r2, [r7, #4]
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	781b      	ldrb	r3, [r3, #0]
 800db7e:	009b      	lsls	r3, r3, #2
 800db80:	441a      	add	r2, r3
 800db82:	697b      	ldr	r3, [r7, #20]
 800db84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800db88:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800db8c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800db8e:	683b      	ldr	r3, [r7, #0]
 800db90:	78db      	ldrb	r3, [r3, #3]
 800db92:	2b01      	cmp	r3, #1
 800db94:	d018      	beq.n	800dbc8 <USB_ActivateEndpoint+0x188>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800db96:	687a      	ldr	r2, [r7, #4]
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	781b      	ldrb	r3, [r3, #0]
 800db9c:	009b      	lsls	r3, r3, #2
 800db9e:	4413      	add	r3, r2
 800dba0:	681a      	ldr	r2, [r3, #0]
 800dba2:	4b51      	ldr	r3, [pc, #324]	@ (800dce8 <USB_ActivateEndpoint+0x2a8>)
 800dba4:	4013      	ands	r3, r2
 800dba6:	60fb      	str	r3, [r7, #12]
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	f083 0320 	eor.w	r3, r3, #32
 800dbae:	60fb      	str	r3, [r7, #12]
 800dbb0:	687a      	ldr	r2, [r7, #4]
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	781b      	ldrb	r3, [r3, #0]
 800dbb6:	009b      	lsls	r3, r3, #2
 800dbb8:	441a      	add	r2, r3
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dbc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dbc4:	6013      	str	r3, [r2, #0]
 800dbc6:	e28c      	b.n	800e0e2 <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800dbc8:	687a      	ldr	r2, [r7, #4]
 800dbca:	683b      	ldr	r3, [r7, #0]
 800dbcc:	781b      	ldrb	r3, [r3, #0]
 800dbce:	009b      	lsls	r3, r3, #2
 800dbd0:	4413      	add	r3, r2
 800dbd2:	681a      	ldr	r2, [r3, #0]
 800dbd4:	4b44      	ldr	r3, [pc, #272]	@ (800dce8 <USB_ActivateEndpoint+0x2a8>)
 800dbd6:	4013      	ands	r3, r2
 800dbd8:	613b      	str	r3, [r7, #16]
 800dbda:	687a      	ldr	r2, [r7, #4]
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	781b      	ldrb	r3, [r3, #0]
 800dbe0:	009b      	lsls	r3, r3, #2
 800dbe2:	441a      	add	r2, r3
 800dbe4:	693b      	ldr	r3, [r7, #16]
 800dbe6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dbea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dbee:	6013      	str	r3, [r2, #0]
 800dbf0:	e277      	b.n	800e0e2 <USB_ActivateEndpoint+0x6a2>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800dbf2:	683b      	ldr	r3, [r7, #0]
 800dbf4:	781b      	ldrb	r3, [r3, #0]
 800dbf6:	00db      	lsls	r3, r3, #3
 800dbf8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dbfc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dc00:	685a      	ldr	r2, [r3, #4]
 800dc02:	683b      	ldr	r3, [r7, #0]
 800dc04:	781b      	ldrb	r3, [r3, #0]
 800dc06:	00db      	lsls	r3, r3, #3
 800dc08:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dc0c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dc10:	0c12      	lsrs	r2, r2, #16
 800dc12:	0412      	lsls	r2, r2, #16
 800dc14:	605a      	str	r2, [r3, #4]
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	781b      	ldrb	r3, [r3, #0]
 800dc1a:	00db      	lsls	r3, r3, #3
 800dc1c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dc20:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dc24:	6859      	ldr	r1, [r3, #4]
 800dc26:	683b      	ldr	r3, [r7, #0]
 800dc28:	88db      	ldrh	r3, [r3, #6]
 800dc2a:	089b      	lsrs	r3, r3, #2
 800dc2c:	b29b      	uxth	r3, r3
 800dc2e:	009a      	lsls	r2, r3, #2
 800dc30:	683b      	ldr	r3, [r7, #0]
 800dc32:	781b      	ldrb	r3, [r3, #0]
 800dc34:	00db      	lsls	r3, r3, #3
 800dc36:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dc3a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dc3e:	430a      	orrs	r2, r1
 800dc40:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	781b      	ldrb	r3, [r3, #0]
 800dc46:	00db      	lsls	r3, r3, #3
 800dc48:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dc4c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dc50:	685a      	ldr	r2, [r3, #4]
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	781b      	ldrb	r3, [r3, #0]
 800dc56:	00db      	lsls	r3, r3, #3
 800dc58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dc5c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dc60:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800dc64:	605a      	str	r2, [r3, #4]
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	691b      	ldr	r3, [r3, #16]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d112      	bne.n	800dc94 <USB_ActivateEndpoint+0x254>
 800dc6e:	683b      	ldr	r3, [r7, #0]
 800dc70:	781b      	ldrb	r3, [r3, #0]
 800dc72:	00db      	lsls	r3, r3, #3
 800dc74:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dc78:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dc7c:	685a      	ldr	r2, [r3, #4]
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	781b      	ldrb	r3, [r3, #0]
 800dc82:	00db      	lsls	r3, r3, #3
 800dc84:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dc88:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dc8c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800dc90:	605a      	str	r2, [r3, #4]
 800dc92:	e04d      	b.n	800dd30 <USB_ActivateEndpoint+0x2f0>
 800dc94:	683b      	ldr	r3, [r7, #0]
 800dc96:	691b      	ldr	r3, [r3, #16]
 800dc98:	2b3e      	cmp	r3, #62	@ 0x3e
 800dc9a:	d827      	bhi.n	800dcec <USB_ActivateEndpoint+0x2ac>
 800dc9c:	683b      	ldr	r3, [r7, #0]
 800dc9e:	691b      	ldr	r3, [r3, #16]
 800dca0:	085b      	lsrs	r3, r3, #1
 800dca2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	691b      	ldr	r3, [r3, #16]
 800dca8:	f003 0301 	and.w	r3, r3, #1
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d002      	beq.n	800dcb6 <USB_ActivateEndpoint+0x276>
 800dcb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dcb2:	3301      	adds	r3, #1
 800dcb4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	781b      	ldrb	r3, [r3, #0]
 800dcba:	00db      	lsls	r3, r3, #3
 800dcbc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dcc0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dcc4:	6859      	ldr	r1, [r3, #4]
 800dcc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dcc8:	069a      	lsls	r2, r3, #26
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	781b      	ldrb	r3, [r3, #0]
 800dcce:	00db      	lsls	r3, r3, #3
 800dcd0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dcd4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dcd8:	430a      	orrs	r2, r1
 800dcda:	605a      	str	r2, [r3, #4]
 800dcdc:	e028      	b.n	800dd30 <USB_ActivateEndpoint+0x2f0>
 800dcde:	bf00      	nop
 800dce0:	07ff898f 	.word	0x07ff898f
 800dce4:	07ff8f8f 	.word	0x07ff8f8f
 800dce8:	07ff8fbf 	.word	0x07ff8fbf
 800dcec:	683b      	ldr	r3, [r7, #0]
 800dcee:	691b      	ldr	r3, [r3, #16]
 800dcf0:	095b      	lsrs	r3, r3, #5
 800dcf2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	691b      	ldr	r3, [r3, #16]
 800dcf8:	f003 031f 	and.w	r3, r3, #31
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d102      	bne.n	800dd06 <USB_ActivateEndpoint+0x2c6>
 800dd00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dd02:	3b01      	subs	r3, #1
 800dd04:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	781b      	ldrb	r3, [r3, #0]
 800dd0a:	00db      	lsls	r3, r3, #3
 800dd0c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dd10:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dd14:	685a      	ldr	r2, [r3, #4]
 800dd16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dd18:	069b      	lsls	r3, r3, #26
 800dd1a:	431a      	orrs	r2, r3
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	781b      	ldrb	r3, [r3, #0]
 800dd20:	00db      	lsls	r3, r3, #3
 800dd22:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dd26:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dd2a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800dd2e:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dd30:	687a      	ldr	r2, [r7, #4]
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	781b      	ldrb	r3, [r3, #0]
 800dd36:	009b      	lsls	r3, r3, #2
 800dd38:	4413      	add	r3, r2
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dd3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d013      	beq.n	800dd70 <USB_ActivateEndpoint+0x330>
 800dd48:	687a      	ldr	r2, [r7, #4]
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	781b      	ldrb	r3, [r3, #0]
 800dd4e:	009b      	lsls	r3, r3, #2
 800dd50:	4413      	add	r3, r2
 800dd52:	681a      	ldr	r2, [r3, #0]
 800dd54:	4b9c      	ldr	r3, [pc, #624]	@ (800dfc8 <USB_ActivateEndpoint+0x588>)
 800dd56:	4013      	ands	r3, r2
 800dd58:	627b      	str	r3, [r7, #36]	@ 0x24
 800dd5a:	687a      	ldr	r2, [r7, #4]
 800dd5c:	683b      	ldr	r3, [r7, #0]
 800dd5e:	781b      	ldrb	r3, [r3, #0]
 800dd60:	009b      	lsls	r3, r3, #2
 800dd62:	441a      	add	r2, r3
 800dd64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd66:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800dd6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd6e:	6013      	str	r3, [r2, #0]

      if (ep->num == 0U)
 800dd70:	683b      	ldr	r3, [r7, #0]
 800dd72:	781b      	ldrb	r3, [r3, #0]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d11c      	bne.n	800ddb2 <USB_ActivateEndpoint+0x372>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800dd78:	687a      	ldr	r2, [r7, #4]
 800dd7a:	683b      	ldr	r3, [r7, #0]
 800dd7c:	781b      	ldrb	r3, [r3, #0]
 800dd7e:	009b      	lsls	r3, r3, #2
 800dd80:	4413      	add	r3, r2
 800dd82:	681a      	ldr	r2, [r3, #0]
 800dd84:	4b91      	ldr	r3, [pc, #580]	@ (800dfcc <USB_ActivateEndpoint+0x58c>)
 800dd86:	4013      	ands	r3, r2
 800dd88:	61fb      	str	r3, [r7, #28]
 800dd8a:	69fb      	ldr	r3, [r7, #28]
 800dd8c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800dd90:	61fb      	str	r3, [r7, #28]
 800dd92:	69fb      	ldr	r3, [r7, #28]
 800dd94:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800dd98:	61fb      	str	r3, [r7, #28]
 800dd9a:	687a      	ldr	r2, [r7, #4]
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	781b      	ldrb	r3, [r3, #0]
 800dda0:	009b      	lsls	r3, r3, #2
 800dda2:	441a      	add	r2, r3
 800dda4:	69fb      	ldr	r3, [r7, #28]
 800dda6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ddaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ddae:	6013      	str	r3, [r2, #0]
 800ddb0:	e197      	b.n	800e0e2 <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800ddb2:	687a      	ldr	r2, [r7, #4]
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	781b      	ldrb	r3, [r3, #0]
 800ddb8:	009b      	lsls	r3, r3, #2
 800ddba:	4413      	add	r3, r2
 800ddbc:	681a      	ldr	r2, [r3, #0]
 800ddbe:	4b83      	ldr	r3, [pc, #524]	@ (800dfcc <USB_ActivateEndpoint+0x58c>)
 800ddc0:	4013      	ands	r3, r2
 800ddc2:	623b      	str	r3, [r7, #32]
 800ddc4:	6a3b      	ldr	r3, [r7, #32]
 800ddc6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ddca:	623b      	str	r3, [r7, #32]
 800ddcc:	687a      	ldr	r2, [r7, #4]
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	781b      	ldrb	r3, [r3, #0]
 800ddd2:	009b      	lsls	r3, r3, #2
 800ddd4:	441a      	add	r2, r3
 800ddd6:	6a3b      	ldr	r3, [r7, #32]
 800ddd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dddc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dde0:	6013      	str	r3, [r2, #0]
 800dde2:	e17e      	b.n	800e0e2 <USB_ActivateEndpoint+0x6a2>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800dde4:	683b      	ldr	r3, [r7, #0]
 800dde6:	78db      	ldrb	r3, [r3, #3]
 800dde8:	2b02      	cmp	r3, #2
 800ddea:	d114      	bne.n	800de16 <USB_ActivateEndpoint+0x3d6>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ddec:	687a      	ldr	r2, [r7, #4]
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	781b      	ldrb	r3, [r3, #0]
 800ddf2:	009b      	lsls	r3, r3, #2
 800ddf4:	4413      	add	r3, r2
 800ddf6:	681a      	ldr	r2, [r3, #0]
 800ddf8:	4b73      	ldr	r3, [pc, #460]	@ (800dfc8 <USB_ActivateEndpoint+0x588>)
 800ddfa:	4013      	ands	r3, r2
 800ddfc:	663b      	str	r3, [r7, #96]	@ 0x60
 800ddfe:	687a      	ldr	r2, [r7, #4]
 800de00:	683b      	ldr	r3, [r7, #0]
 800de02:	781b      	ldrb	r3, [r3, #0]
 800de04:	009b      	lsls	r3, r3, #2
 800de06:	441a      	add	r2, r3
 800de08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800de0a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800de0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de12:	6013      	str	r3, [r2, #0]
 800de14:	e013      	b.n	800de3e <USB_ActivateEndpoint+0x3fe>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800de16:	687a      	ldr	r2, [r7, #4]
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	781b      	ldrb	r3, [r3, #0]
 800de1c:	009b      	lsls	r3, r3, #2
 800de1e:	4413      	add	r3, r2
 800de20:	681a      	ldr	r2, [r3, #0]
 800de22:	4b6b      	ldr	r3, [pc, #428]	@ (800dfd0 <USB_ActivateEndpoint+0x590>)
 800de24:	4013      	ands	r3, r2
 800de26:	667b      	str	r3, [r7, #100]	@ 0x64
 800de28:	687a      	ldr	r2, [r7, #4]
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	781b      	ldrb	r3, [r3, #0]
 800de2e:	009b      	lsls	r3, r3, #2
 800de30:	441a      	add	r2, r3
 800de32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800de34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800de38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de3c:	6013      	str	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800de3e:	683b      	ldr	r3, [r7, #0]
 800de40:	781b      	ldrb	r3, [r3, #0]
 800de42:	00db      	lsls	r3, r3, #3
 800de44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800de48:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800de4c:	681a      	ldr	r2, [r3, #0]
 800de4e:	683b      	ldr	r3, [r7, #0]
 800de50:	781b      	ldrb	r3, [r3, #0]
 800de52:	00db      	lsls	r3, r3, #3
 800de54:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800de58:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800de5c:	0c12      	lsrs	r2, r2, #16
 800de5e:	0412      	lsls	r2, r2, #16
 800de60:	601a      	str	r2, [r3, #0]
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	781b      	ldrb	r3, [r3, #0]
 800de66:	00db      	lsls	r3, r3, #3
 800de68:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800de6c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800de70:	6819      	ldr	r1, [r3, #0]
 800de72:	683b      	ldr	r3, [r7, #0]
 800de74:	891b      	ldrh	r3, [r3, #8]
 800de76:	089b      	lsrs	r3, r3, #2
 800de78:	b29b      	uxth	r3, r3
 800de7a:	009a      	lsls	r2, r3, #2
 800de7c:	683b      	ldr	r3, [r7, #0]
 800de7e:	781b      	ldrb	r3, [r3, #0]
 800de80:	00db      	lsls	r3, r3, #3
 800de82:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800de86:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800de8a:	430a      	orrs	r2, r1
 800de8c:	601a      	str	r2, [r3, #0]
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	781b      	ldrb	r3, [r3, #0]
 800de92:	00db      	lsls	r3, r3, #3
 800de94:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800de98:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800de9c:	685a      	ldr	r2, [r3, #4]
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	781b      	ldrb	r3, [r3, #0]
 800dea2:	00db      	lsls	r3, r3, #3
 800dea4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dea8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800deac:	0c12      	lsrs	r2, r2, #16
 800deae:	0412      	lsls	r2, r2, #16
 800deb0:	605a      	str	r2, [r3, #4]
 800deb2:	683b      	ldr	r3, [r7, #0]
 800deb4:	781b      	ldrb	r3, [r3, #0]
 800deb6:	00db      	lsls	r3, r3, #3
 800deb8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800debc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dec0:	6859      	ldr	r1, [r3, #4]
 800dec2:	683b      	ldr	r3, [r7, #0]
 800dec4:	895b      	ldrh	r3, [r3, #10]
 800dec6:	089b      	lsrs	r3, r3, #2
 800dec8:	b29b      	uxth	r3, r3
 800deca:	009a      	lsls	r2, r3, #2
 800decc:	683b      	ldr	r3, [r7, #0]
 800dece:	781b      	ldrb	r3, [r3, #0]
 800ded0:	00db      	lsls	r3, r3, #3
 800ded2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ded6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800deda:	430a      	orrs	r2, r1
 800dedc:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 800dede:	683b      	ldr	r3, [r7, #0]
 800dee0:	785b      	ldrb	r3, [r3, #1]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d178      	bne.n	800dfd8 <USB_ActivateEndpoint+0x598>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dee6:	687a      	ldr	r2, [r7, #4]
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	781b      	ldrb	r3, [r3, #0]
 800deec:	009b      	lsls	r3, r3, #2
 800deee:	4413      	add	r3, r2
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	643b      	str	r3, [r7, #64]	@ 0x40
 800def4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800def6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800defa:	2b00      	cmp	r3, #0
 800defc:	d013      	beq.n	800df26 <USB_ActivateEndpoint+0x4e6>
 800defe:	687a      	ldr	r2, [r7, #4]
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	781b      	ldrb	r3, [r3, #0]
 800df04:	009b      	lsls	r3, r3, #2
 800df06:	4413      	add	r3, r2
 800df08:	681a      	ldr	r2, [r3, #0]
 800df0a:	4b2f      	ldr	r3, [pc, #188]	@ (800dfc8 <USB_ActivateEndpoint+0x588>)
 800df0c:	4013      	ands	r3, r2
 800df0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800df10:	687a      	ldr	r2, [r7, #4]
 800df12:	683b      	ldr	r3, [r7, #0]
 800df14:	781b      	ldrb	r3, [r3, #0]
 800df16:	009b      	lsls	r3, r3, #2
 800df18:	441a      	add	r2, r3
 800df1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800df20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df24:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800df26:	687a      	ldr	r2, [r7, #4]
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	781b      	ldrb	r3, [r3, #0]
 800df2c:	009b      	lsls	r3, r3, #2
 800df2e:	4413      	add	r3, r2
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	63bb      	str	r3, [r7, #56]	@ 0x38
 800df34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d013      	beq.n	800df66 <USB_ActivateEndpoint+0x526>
 800df3e:	687a      	ldr	r2, [r7, #4]
 800df40:	683b      	ldr	r3, [r7, #0]
 800df42:	781b      	ldrb	r3, [r3, #0]
 800df44:	009b      	lsls	r3, r3, #2
 800df46:	4413      	add	r3, r2
 800df48:	681a      	ldr	r2, [r3, #0]
 800df4a:	4b1f      	ldr	r3, [pc, #124]	@ (800dfc8 <USB_ActivateEndpoint+0x588>)
 800df4c:	4013      	ands	r3, r2
 800df4e:	637b      	str	r3, [r7, #52]	@ 0x34
 800df50:	687a      	ldr	r2, [r7, #4]
 800df52:	683b      	ldr	r3, [r7, #0]
 800df54:	781b      	ldrb	r3, [r3, #0]
 800df56:	009b      	lsls	r3, r3, #2
 800df58:	441a      	add	r2, r3
 800df5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800df60:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800df64:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800df66:	687a      	ldr	r2, [r7, #4]
 800df68:	683b      	ldr	r3, [r7, #0]
 800df6a:	781b      	ldrb	r3, [r3, #0]
 800df6c:	009b      	lsls	r3, r3, #2
 800df6e:	4413      	add	r3, r2
 800df70:	681a      	ldr	r2, [r3, #0]
 800df72:	4b16      	ldr	r3, [pc, #88]	@ (800dfcc <USB_ActivateEndpoint+0x58c>)
 800df74:	4013      	ands	r3, r2
 800df76:	633b      	str	r3, [r7, #48]	@ 0x30
 800df78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df7a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800df7e:	633b      	str	r3, [r7, #48]	@ 0x30
 800df80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df82:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800df86:	633b      	str	r3, [r7, #48]	@ 0x30
 800df88:	687a      	ldr	r2, [r7, #4]
 800df8a:	683b      	ldr	r3, [r7, #0]
 800df8c:	781b      	ldrb	r3, [r3, #0]
 800df8e:	009b      	lsls	r3, r3, #2
 800df90:	441a      	add	r2, r3
 800df92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800df98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df9c:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800df9e:	687a      	ldr	r2, [r7, #4]
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	781b      	ldrb	r3, [r3, #0]
 800dfa4:	009b      	lsls	r3, r3, #2
 800dfa6:	4413      	add	r3, r2
 800dfa8:	681a      	ldr	r2, [r3, #0]
 800dfaa:	4b0a      	ldr	r3, [pc, #40]	@ (800dfd4 <USB_ActivateEndpoint+0x594>)
 800dfac:	4013      	ands	r3, r2
 800dfae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dfb0:	687a      	ldr	r2, [r7, #4]
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	781b      	ldrb	r3, [r3, #0]
 800dfb6:	009b      	lsls	r3, r3, #2
 800dfb8:	441a      	add	r2, r3
 800dfba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dfc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dfc4:	6013      	str	r3, [r2, #0]
 800dfc6:	e08c      	b.n	800e0e2 <USB_ActivateEndpoint+0x6a2>
 800dfc8:	07ff8f8f 	.word	0x07ff8f8f
 800dfcc:	07ffbf8f 	.word	0x07ffbf8f
 800dfd0:	07ff8e8f 	.word	0x07ff8e8f
 800dfd4:	07ff8fbf 	.word	0x07ff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dfd8:	687a      	ldr	r2, [r7, #4]
 800dfda:	683b      	ldr	r3, [r7, #0]
 800dfdc:	781b      	ldrb	r3, [r3, #0]
 800dfde:	009b      	lsls	r3, r3, #2
 800dfe0:	4413      	add	r3, r2
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800dfe6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dfe8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d013      	beq.n	800e018 <USB_ActivateEndpoint+0x5d8>
 800dff0:	687a      	ldr	r2, [r7, #4]
 800dff2:	683b      	ldr	r3, [r7, #0]
 800dff4:	781b      	ldrb	r3, [r3, #0]
 800dff6:	009b      	lsls	r3, r3, #2
 800dff8:	4413      	add	r3, r2
 800dffa:	681a      	ldr	r2, [r3, #0]
 800dffc:	4b3d      	ldr	r3, [pc, #244]	@ (800e0f4 <USB_ActivateEndpoint+0x6b4>)
 800dffe:	4013      	ands	r3, r2
 800e000:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e002:	687a      	ldr	r2, [r7, #4]
 800e004:	683b      	ldr	r3, [r7, #0]
 800e006:	781b      	ldrb	r3, [r3, #0]
 800e008:	009b      	lsls	r3, r3, #2
 800e00a:	441a      	add	r2, r3
 800e00c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e00e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e012:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e016:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e018:	687a      	ldr	r2, [r7, #4]
 800e01a:	683b      	ldr	r3, [r7, #0]
 800e01c:	781b      	ldrb	r3, [r3, #0]
 800e01e:	009b      	lsls	r3, r3, #2
 800e020:	4413      	add	r3, r2
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	657b      	str	r3, [r7, #84]	@ 0x54
 800e026:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d013      	beq.n	800e058 <USB_ActivateEndpoint+0x618>
 800e030:	687a      	ldr	r2, [r7, #4]
 800e032:	683b      	ldr	r3, [r7, #0]
 800e034:	781b      	ldrb	r3, [r3, #0]
 800e036:	009b      	lsls	r3, r3, #2
 800e038:	4413      	add	r3, r2
 800e03a:	681a      	ldr	r2, [r3, #0]
 800e03c:	4b2d      	ldr	r3, [pc, #180]	@ (800e0f4 <USB_ActivateEndpoint+0x6b4>)
 800e03e:	4013      	ands	r3, r2
 800e040:	653b      	str	r3, [r7, #80]	@ 0x50
 800e042:	687a      	ldr	r2, [r7, #4]
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	781b      	ldrb	r3, [r3, #0]
 800e048:	009b      	lsls	r3, r3, #2
 800e04a:	441a      	add	r2, r3
 800e04c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e04e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e052:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e056:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	78db      	ldrb	r3, [r3, #3]
 800e05c:	2b01      	cmp	r3, #1
 800e05e:	d018      	beq.n	800e092 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e060:	687a      	ldr	r2, [r7, #4]
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	781b      	ldrb	r3, [r3, #0]
 800e066:	009b      	lsls	r3, r3, #2
 800e068:	4413      	add	r3, r2
 800e06a:	681a      	ldr	r2, [r3, #0]
 800e06c:	4b22      	ldr	r3, [pc, #136]	@ (800e0f8 <USB_ActivateEndpoint+0x6b8>)
 800e06e:	4013      	ands	r3, r2
 800e070:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e072:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e074:	f083 0320 	eor.w	r3, r3, #32
 800e078:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e07a:	687a      	ldr	r2, [r7, #4]
 800e07c:	683b      	ldr	r3, [r7, #0]
 800e07e:	781b      	ldrb	r3, [r3, #0]
 800e080:	009b      	lsls	r3, r3, #2
 800e082:	441a      	add	r2, r3
 800e084:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e086:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e08a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e08e:	6013      	str	r3, [r2, #0]
 800e090:	e013      	b.n	800e0ba <USB_ActivateEndpoint+0x67a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e092:	687a      	ldr	r2, [r7, #4]
 800e094:	683b      	ldr	r3, [r7, #0]
 800e096:	781b      	ldrb	r3, [r3, #0]
 800e098:	009b      	lsls	r3, r3, #2
 800e09a:	4413      	add	r3, r2
 800e09c:	681a      	ldr	r2, [r3, #0]
 800e09e:	4b16      	ldr	r3, [pc, #88]	@ (800e0f8 <USB_ActivateEndpoint+0x6b8>)
 800e0a0:	4013      	ands	r3, r2
 800e0a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e0a4:	687a      	ldr	r2, [r7, #4]
 800e0a6:	683b      	ldr	r3, [r7, #0]
 800e0a8:	781b      	ldrb	r3, [r3, #0]
 800e0aa:	009b      	lsls	r3, r3, #2
 800e0ac:	441a      	add	r2, r3
 800e0ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e0b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e0b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e0b8:	6013      	str	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e0ba:	687a      	ldr	r2, [r7, #4]
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	781b      	ldrb	r3, [r3, #0]
 800e0c0:	009b      	lsls	r3, r3, #2
 800e0c2:	4413      	add	r3, r2
 800e0c4:	681a      	ldr	r2, [r3, #0]
 800e0c6:	4b0d      	ldr	r3, [pc, #52]	@ (800e0fc <USB_ActivateEndpoint+0x6bc>)
 800e0c8:	4013      	ands	r3, r2
 800e0ca:	647b      	str	r3, [r7, #68]	@ 0x44
 800e0cc:	687a      	ldr	r2, [r7, #4]
 800e0ce:	683b      	ldr	r3, [r7, #0]
 800e0d0:	781b      	ldrb	r3, [r3, #0]
 800e0d2:	009b      	lsls	r3, r3, #2
 800e0d4:	441a      	add	r2, r3
 800e0d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e0d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e0dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e0e0:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800e0e2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	377c      	adds	r7, #124	@ 0x7c
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f0:	4770      	bx	lr
 800e0f2:	bf00      	nop
 800e0f4:	07ff8f8f 	.word	0x07ff8f8f
 800e0f8:	07ff8fbf 	.word	0x07ff8fbf
 800e0fc:	07ffbf8f 	.word	0x07ffbf8f

0800e100 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800e100:	b480      	push	{r7}
 800e102:	b097      	sub	sp, #92	@ 0x5c
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
 800e108:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800e10a:	683b      	ldr	r3, [r7, #0]
 800e10c:	7b1b      	ldrb	r3, [r3, #12]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d16d      	bne.n	800e1ee <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in != 0U)
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	785b      	ldrb	r3, [r3, #1]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d034      	beq.n	800e184 <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e11a:	687a      	ldr	r2, [r7, #4]
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	781b      	ldrb	r3, [r3, #0]
 800e120:	009b      	lsls	r3, r3, #2
 800e122:	4413      	add	r3, r2
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	613b      	str	r3, [r7, #16]
 800e128:	693b      	ldr	r3, [r7, #16]
 800e12a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d013      	beq.n	800e15a <USB_DeactivateEndpoint+0x5a>
 800e132:	687a      	ldr	r2, [r7, #4]
 800e134:	683b      	ldr	r3, [r7, #0]
 800e136:	781b      	ldrb	r3, [r3, #0]
 800e138:	009b      	lsls	r3, r3, #2
 800e13a:	4413      	add	r3, r2
 800e13c:	681a      	ldr	r2, [r3, #0]
 800e13e:	4b6d      	ldr	r3, [pc, #436]	@ (800e2f4 <USB_DeactivateEndpoint+0x1f4>)
 800e140:	4013      	ands	r3, r2
 800e142:	60fb      	str	r3, [r7, #12]
 800e144:	687a      	ldr	r2, [r7, #4]
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	781b      	ldrb	r3, [r3, #0]
 800e14a:	009b      	lsls	r3, r3, #2
 800e14c:	441a      	add	r2, r3
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e154:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e158:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e15a:	687a      	ldr	r2, [r7, #4]
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	781b      	ldrb	r3, [r3, #0]
 800e160:	009b      	lsls	r3, r3, #2
 800e162:	4413      	add	r3, r2
 800e164:	681a      	ldr	r2, [r3, #0]
 800e166:	4b64      	ldr	r3, [pc, #400]	@ (800e2f8 <USB_DeactivateEndpoint+0x1f8>)
 800e168:	4013      	ands	r3, r2
 800e16a:	60bb      	str	r3, [r7, #8]
 800e16c:	687a      	ldr	r2, [r7, #4]
 800e16e:	683b      	ldr	r3, [r7, #0]
 800e170:	781b      	ldrb	r3, [r3, #0]
 800e172:	009b      	lsls	r3, r3, #2
 800e174:	441a      	add	r2, r3
 800e176:	68bb      	ldr	r3, [r7, #8]
 800e178:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e17c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e180:	6013      	str	r3, [r2, #0]
 800e182:	e139      	b.n	800e3f8 <USB_DeactivateEndpoint+0x2f8>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e184:	687a      	ldr	r2, [r7, #4]
 800e186:	683b      	ldr	r3, [r7, #0]
 800e188:	781b      	ldrb	r3, [r3, #0]
 800e18a:	009b      	lsls	r3, r3, #2
 800e18c:	4413      	add	r3, r2
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	61fb      	str	r3, [r7, #28]
 800e192:	69fb      	ldr	r3, [r7, #28]
 800e194:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d013      	beq.n	800e1c4 <USB_DeactivateEndpoint+0xc4>
 800e19c:	687a      	ldr	r2, [r7, #4]
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	781b      	ldrb	r3, [r3, #0]
 800e1a2:	009b      	lsls	r3, r3, #2
 800e1a4:	4413      	add	r3, r2
 800e1a6:	681a      	ldr	r2, [r3, #0]
 800e1a8:	4b52      	ldr	r3, [pc, #328]	@ (800e2f4 <USB_DeactivateEndpoint+0x1f4>)
 800e1aa:	4013      	ands	r3, r2
 800e1ac:	61bb      	str	r3, [r7, #24]
 800e1ae:	687a      	ldr	r2, [r7, #4]
 800e1b0:	683b      	ldr	r3, [r7, #0]
 800e1b2:	781b      	ldrb	r3, [r3, #0]
 800e1b4:	009b      	lsls	r3, r3, #2
 800e1b6:	441a      	add	r2, r3
 800e1b8:	69bb      	ldr	r3, [r7, #24]
 800e1ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e1be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e1c2:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e1c4:	687a      	ldr	r2, [r7, #4]
 800e1c6:	683b      	ldr	r3, [r7, #0]
 800e1c8:	781b      	ldrb	r3, [r3, #0]
 800e1ca:	009b      	lsls	r3, r3, #2
 800e1cc:	4413      	add	r3, r2
 800e1ce:	681a      	ldr	r2, [r3, #0]
 800e1d0:	4b4a      	ldr	r3, [pc, #296]	@ (800e2fc <USB_DeactivateEndpoint+0x1fc>)
 800e1d2:	4013      	ands	r3, r2
 800e1d4:	617b      	str	r3, [r7, #20]
 800e1d6:	687a      	ldr	r2, [r7, #4]
 800e1d8:	683b      	ldr	r3, [r7, #0]
 800e1da:	781b      	ldrb	r3, [r3, #0]
 800e1dc:	009b      	lsls	r3, r3, #2
 800e1de:	441a      	add	r2, r3
 800e1e0:	697b      	ldr	r3, [r7, #20]
 800e1e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e1e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e1ea:	6013      	str	r3, [r2, #0]
 800e1ec:	e104      	b.n	800e3f8 <USB_DeactivateEndpoint+0x2f8>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800e1ee:	683b      	ldr	r3, [r7, #0]
 800e1f0:	785b      	ldrb	r3, [r3, #1]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	f040 8084 	bne.w	800e300 <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e1f8:	687a      	ldr	r2, [r7, #4]
 800e1fa:	683b      	ldr	r3, [r7, #0]
 800e1fc:	781b      	ldrb	r3, [r3, #0]
 800e1fe:	009b      	lsls	r3, r3, #2
 800e200:	4413      	add	r3, r2
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e208:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d013      	beq.n	800e238 <USB_DeactivateEndpoint+0x138>
 800e210:	687a      	ldr	r2, [r7, #4]
 800e212:	683b      	ldr	r3, [r7, #0]
 800e214:	781b      	ldrb	r3, [r3, #0]
 800e216:	009b      	lsls	r3, r3, #2
 800e218:	4413      	add	r3, r2
 800e21a:	681a      	ldr	r2, [r3, #0]
 800e21c:	4b35      	ldr	r3, [pc, #212]	@ (800e2f4 <USB_DeactivateEndpoint+0x1f4>)
 800e21e:	4013      	ands	r3, r2
 800e220:	637b      	str	r3, [r7, #52]	@ 0x34
 800e222:	687a      	ldr	r2, [r7, #4]
 800e224:	683b      	ldr	r3, [r7, #0]
 800e226:	781b      	ldrb	r3, [r3, #0]
 800e228:	009b      	lsls	r3, r3, #2
 800e22a:	441a      	add	r2, r3
 800e22c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e22e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e232:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e236:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e238:	687a      	ldr	r2, [r7, #4]
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	781b      	ldrb	r3, [r3, #0]
 800e23e:	009b      	lsls	r3, r3, #2
 800e240:	4413      	add	r3, r2
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	633b      	str	r3, [r7, #48]	@ 0x30
 800e246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e248:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d013      	beq.n	800e278 <USB_DeactivateEndpoint+0x178>
 800e250:	687a      	ldr	r2, [r7, #4]
 800e252:	683b      	ldr	r3, [r7, #0]
 800e254:	781b      	ldrb	r3, [r3, #0]
 800e256:	009b      	lsls	r3, r3, #2
 800e258:	4413      	add	r3, r2
 800e25a:	681a      	ldr	r2, [r3, #0]
 800e25c:	4b25      	ldr	r3, [pc, #148]	@ (800e2f4 <USB_DeactivateEndpoint+0x1f4>)
 800e25e:	4013      	ands	r3, r2
 800e260:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e262:	687a      	ldr	r2, [r7, #4]
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	781b      	ldrb	r3, [r3, #0]
 800e268:	009b      	lsls	r3, r3, #2
 800e26a:	441a      	add	r2, r3
 800e26c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e26e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e272:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e276:	6013      	str	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800e278:	687a      	ldr	r2, [r7, #4]
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	781b      	ldrb	r3, [r3, #0]
 800e27e:	009b      	lsls	r3, r3, #2
 800e280:	4413      	add	r3, r2
 800e282:	681a      	ldr	r2, [r3, #0]
 800e284:	4b1b      	ldr	r3, [pc, #108]	@ (800e2f4 <USB_DeactivateEndpoint+0x1f4>)
 800e286:	4013      	ands	r3, r2
 800e288:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e28a:	687a      	ldr	r2, [r7, #4]
 800e28c:	683b      	ldr	r3, [r7, #0]
 800e28e:	781b      	ldrb	r3, [r3, #0]
 800e290:	009b      	lsls	r3, r3, #2
 800e292:	441a      	add	r2, r3
 800e294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e296:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e29a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e29e:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e2a0:	687a      	ldr	r2, [r7, #4]
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	781b      	ldrb	r3, [r3, #0]
 800e2a6:	009b      	lsls	r3, r3, #2
 800e2a8:	4413      	add	r3, r2
 800e2aa:	681a      	ldr	r2, [r3, #0]
 800e2ac:	4b13      	ldr	r3, [pc, #76]	@ (800e2fc <USB_DeactivateEndpoint+0x1fc>)
 800e2ae:	4013      	ands	r3, r2
 800e2b0:	627b      	str	r3, [r7, #36]	@ 0x24
 800e2b2:	687a      	ldr	r2, [r7, #4]
 800e2b4:	683b      	ldr	r3, [r7, #0]
 800e2b6:	781b      	ldrb	r3, [r3, #0]
 800e2b8:	009b      	lsls	r3, r3, #2
 800e2ba:	441a      	add	r2, r3
 800e2bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e2c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e2c6:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e2c8:	687a      	ldr	r2, [r7, #4]
 800e2ca:	683b      	ldr	r3, [r7, #0]
 800e2cc:	781b      	ldrb	r3, [r3, #0]
 800e2ce:	009b      	lsls	r3, r3, #2
 800e2d0:	4413      	add	r3, r2
 800e2d2:	681a      	ldr	r2, [r3, #0]
 800e2d4:	4b08      	ldr	r3, [pc, #32]	@ (800e2f8 <USB_DeactivateEndpoint+0x1f8>)
 800e2d6:	4013      	ands	r3, r2
 800e2d8:	623b      	str	r3, [r7, #32]
 800e2da:	687a      	ldr	r2, [r7, #4]
 800e2dc:	683b      	ldr	r3, [r7, #0]
 800e2de:	781b      	ldrb	r3, [r3, #0]
 800e2e0:	009b      	lsls	r3, r3, #2
 800e2e2:	441a      	add	r2, r3
 800e2e4:	6a3b      	ldr	r3, [r7, #32]
 800e2e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e2ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e2ee:	6013      	str	r3, [r2, #0]
 800e2f0:	e082      	b.n	800e3f8 <USB_DeactivateEndpoint+0x2f8>
 800e2f2:	bf00      	nop
 800e2f4:	07ff8f8f 	.word	0x07ff8f8f
 800e2f8:	07ff8fbf 	.word	0x07ff8fbf
 800e2fc:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e300:	687a      	ldr	r2, [r7, #4]
 800e302:	683b      	ldr	r3, [r7, #0]
 800e304:	781b      	ldrb	r3, [r3, #0]
 800e306:	009b      	lsls	r3, r3, #2
 800e308:	4413      	add	r3, r2
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	657b      	str	r3, [r7, #84]	@ 0x54
 800e30e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e310:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e314:	2b00      	cmp	r3, #0
 800e316:	d013      	beq.n	800e340 <USB_DeactivateEndpoint+0x240>
 800e318:	687a      	ldr	r2, [r7, #4]
 800e31a:	683b      	ldr	r3, [r7, #0]
 800e31c:	781b      	ldrb	r3, [r3, #0]
 800e31e:	009b      	lsls	r3, r3, #2
 800e320:	4413      	add	r3, r2
 800e322:	681a      	ldr	r2, [r3, #0]
 800e324:	4b38      	ldr	r3, [pc, #224]	@ (800e408 <USB_DeactivateEndpoint+0x308>)
 800e326:	4013      	ands	r3, r2
 800e328:	653b      	str	r3, [r7, #80]	@ 0x50
 800e32a:	687a      	ldr	r2, [r7, #4]
 800e32c:	683b      	ldr	r3, [r7, #0]
 800e32e:	781b      	ldrb	r3, [r3, #0]
 800e330:	009b      	lsls	r3, r3, #2
 800e332:	441a      	add	r2, r3
 800e334:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e336:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e33a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e33e:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e340:	687a      	ldr	r2, [r7, #4]
 800e342:	683b      	ldr	r3, [r7, #0]
 800e344:	781b      	ldrb	r3, [r3, #0]
 800e346:	009b      	lsls	r3, r3, #2
 800e348:	4413      	add	r3, r2
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e34e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e354:	2b00      	cmp	r3, #0
 800e356:	d013      	beq.n	800e380 <USB_DeactivateEndpoint+0x280>
 800e358:	687a      	ldr	r2, [r7, #4]
 800e35a:	683b      	ldr	r3, [r7, #0]
 800e35c:	781b      	ldrb	r3, [r3, #0]
 800e35e:	009b      	lsls	r3, r3, #2
 800e360:	4413      	add	r3, r2
 800e362:	681a      	ldr	r2, [r3, #0]
 800e364:	4b28      	ldr	r3, [pc, #160]	@ (800e408 <USB_DeactivateEndpoint+0x308>)
 800e366:	4013      	ands	r3, r2
 800e368:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e36a:	687a      	ldr	r2, [r7, #4]
 800e36c:	683b      	ldr	r3, [r7, #0]
 800e36e:	781b      	ldrb	r3, [r3, #0]
 800e370:	009b      	lsls	r3, r3, #2
 800e372:	441a      	add	r2, r3
 800e374:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e376:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e37a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e37e:	6013      	str	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800e380:	687a      	ldr	r2, [r7, #4]
 800e382:	683b      	ldr	r3, [r7, #0]
 800e384:	781b      	ldrb	r3, [r3, #0]
 800e386:	009b      	lsls	r3, r3, #2
 800e388:	4413      	add	r3, r2
 800e38a:	681a      	ldr	r2, [r3, #0]
 800e38c:	4b1e      	ldr	r3, [pc, #120]	@ (800e408 <USB_DeactivateEndpoint+0x308>)
 800e38e:	4013      	ands	r3, r2
 800e390:	647b      	str	r3, [r7, #68]	@ 0x44
 800e392:	687a      	ldr	r2, [r7, #4]
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	781b      	ldrb	r3, [r3, #0]
 800e398:	009b      	lsls	r3, r3, #2
 800e39a:	441a      	add	r2, r3
 800e39c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e39e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e3a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e3a6:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e3a8:	687a      	ldr	r2, [r7, #4]
 800e3aa:	683b      	ldr	r3, [r7, #0]
 800e3ac:	781b      	ldrb	r3, [r3, #0]
 800e3ae:	009b      	lsls	r3, r3, #2
 800e3b0:	4413      	add	r3, r2
 800e3b2:	681a      	ldr	r2, [r3, #0]
 800e3b4:	4b15      	ldr	r3, [pc, #84]	@ (800e40c <USB_DeactivateEndpoint+0x30c>)
 800e3b6:	4013      	ands	r3, r2
 800e3b8:	643b      	str	r3, [r7, #64]	@ 0x40
 800e3ba:	687a      	ldr	r2, [r7, #4]
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	781b      	ldrb	r3, [r3, #0]
 800e3c0:	009b      	lsls	r3, r3, #2
 800e3c2:	441a      	add	r2, r3
 800e3c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e3c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e3ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e3ce:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e3d0:	687a      	ldr	r2, [r7, #4]
 800e3d2:	683b      	ldr	r3, [r7, #0]
 800e3d4:	781b      	ldrb	r3, [r3, #0]
 800e3d6:	009b      	lsls	r3, r3, #2
 800e3d8:	4413      	add	r3, r2
 800e3da:	681a      	ldr	r2, [r3, #0]
 800e3dc:	4b0c      	ldr	r3, [pc, #48]	@ (800e410 <USB_DeactivateEndpoint+0x310>)
 800e3de:	4013      	ands	r3, r2
 800e3e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e3e2:	687a      	ldr	r2, [r7, #4]
 800e3e4:	683b      	ldr	r3, [r7, #0]
 800e3e6:	781b      	ldrb	r3, [r3, #0]
 800e3e8:	009b      	lsls	r3, r3, #2
 800e3ea:	441a      	add	r2, r3
 800e3ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e3ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e3f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e3f6:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800e3f8:	2300      	movs	r3, #0
}
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	375c      	adds	r7, #92	@ 0x5c
 800e3fe:	46bd      	mov	sp, r7
 800e400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e404:	4770      	bx	lr
 800e406:	bf00      	nop
 800e408:	07ff8f8f 	.word	0x07ff8f8f
 800e40c:	07ff8fbf 	.word	0x07ff8fbf
 800e410:	07ffbf8f 	.word	0x07ffbf8f

0800e414 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b096      	sub	sp, #88	@ 0x58
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
 800e41c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e41e:	683b      	ldr	r3, [r7, #0]
 800e420:	785b      	ldrb	r3, [r3, #1]
 800e422:	2b01      	cmp	r3, #1
 800e424:	f040 84ed 	bne.w	800ee02 <USB_EPStartXfer+0x9ee>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	699a      	ldr	r2, [r3, #24]
 800e42c:	683b      	ldr	r3, [r7, #0]
 800e42e:	691b      	ldr	r3, [r3, #16]
 800e430:	429a      	cmp	r2, r3
 800e432:	d903      	bls.n	800e43c <USB_EPStartXfer+0x28>
    {
      len = ep->maxpacket;
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	691b      	ldr	r3, [r3, #16]
 800e438:	657b      	str	r3, [r7, #84]	@ 0x54
 800e43a:	e002      	b.n	800e442 <USB_EPStartXfer+0x2e>
    }
    else
    {
      len = ep->xfer_len;
 800e43c:	683b      	ldr	r3, [r7, #0]
 800e43e:	699b      	ldr	r3, [r3, #24]
 800e440:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	7b1b      	ldrb	r3, [r3, #12]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d12e      	bne.n	800e4a8 <USB_EPStartXfer+0x94>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800e44a:	683b      	ldr	r3, [r7, #0]
 800e44c:	6959      	ldr	r1, [r3, #20]
 800e44e:	683b      	ldr	r3, [r7, #0]
 800e450:	88da      	ldrh	r2, [r3, #6]
 800e452:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e454:	b29b      	uxth	r3, r3
 800e456:	6878      	ldr	r0, [r7, #4]
 800e458:	f001 f963 	bl	800f722 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800e45c:	683b      	ldr	r3, [r7, #0]
 800e45e:	781b      	ldrb	r3, [r3, #0]
 800e460:	00db      	lsls	r3, r3, #3
 800e462:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e466:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e46a:	681a      	ldr	r2, [r3, #0]
 800e46c:	683b      	ldr	r3, [r7, #0]
 800e46e:	781b      	ldrb	r3, [r3, #0]
 800e470:	00db      	lsls	r3, r3, #3
 800e472:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e476:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e47a:	b292      	uxth	r2, r2
 800e47c:	601a      	str	r2, [r3, #0]
 800e47e:	683b      	ldr	r3, [r7, #0]
 800e480:	781b      	ldrb	r3, [r3, #0]
 800e482:	00db      	lsls	r3, r3, #3
 800e484:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e488:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e48c:	6819      	ldr	r1, [r3, #0]
 800e48e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e490:	041a      	lsls	r2, r3, #16
 800e492:	683b      	ldr	r3, [r7, #0]
 800e494:	781b      	ldrb	r3, [r3, #0]
 800e496:	00db      	lsls	r3, r3, #3
 800e498:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e49c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e4a0:	430a      	orrs	r2, r1
 800e4a2:	601a      	str	r2, [r3, #0]
 800e4a4:	f000 bc90 	b.w	800edc8 <USB_EPStartXfer+0x9b4>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	78db      	ldrb	r3, [r3, #3]
 800e4ac:	2b02      	cmp	r3, #2
 800e4ae:	f040 8332 	bne.w	800eb16 <USB_EPStartXfer+0x702>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800e4b2:	683b      	ldr	r3, [r7, #0]
 800e4b4:	6a1a      	ldr	r2, [r3, #32]
 800e4b6:	683b      	ldr	r3, [r7, #0]
 800e4b8:	691b      	ldr	r3, [r3, #16]
 800e4ba:	429a      	cmp	r2, r3
 800e4bc:	f240 82e4 	bls.w	800ea88 <USB_EPStartXfer+0x674>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800e4c0:	687a      	ldr	r2, [r7, #4]
 800e4c2:	683b      	ldr	r3, [r7, #0]
 800e4c4:	781b      	ldrb	r3, [r3, #0]
 800e4c6:	009b      	lsls	r3, r3, #2
 800e4c8:	4413      	add	r3, r2
 800e4ca:	681a      	ldr	r2, [r3, #0]
 800e4cc:	4ba4      	ldr	r3, [pc, #656]	@ (800e760 <USB_EPStartXfer+0x34c>)
 800e4ce:	4013      	ands	r3, r2
 800e4d0:	613b      	str	r3, [r7, #16]
 800e4d2:	687a      	ldr	r2, [r7, #4]
 800e4d4:	683b      	ldr	r3, [r7, #0]
 800e4d6:	781b      	ldrb	r3, [r3, #0]
 800e4d8:	009b      	lsls	r3, r3, #2
 800e4da:	441a      	add	r2, r3
 800e4dc:	693b      	ldr	r3, [r7, #16]
 800e4de:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800e4e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e4e6:	6013      	str	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800e4e8:	683b      	ldr	r3, [r7, #0]
 800e4ea:	6a1a      	ldr	r2, [r3, #32]
 800e4ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e4ee:	1ad2      	subs	r2, r2, r3
 800e4f0:	683b      	ldr	r3, [r7, #0]
 800e4f2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800e4f4:	687a      	ldr	r2, [r7, #4]
 800e4f6:	683b      	ldr	r3, [r7, #0]
 800e4f8:	781b      	ldrb	r3, [r3, #0]
 800e4fa:	009b      	lsls	r3, r3, #2
 800e4fc:	4413      	add	r3, r2
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e504:	2b00      	cmp	r3, #0
 800e506:	f000 8161 	beq.w	800e7cc <USB_EPStartXfer+0x3b8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e50a:	683b      	ldr	r3, [r7, #0]
 800e50c:	785b      	ldrb	r3, [r3, #1]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d16a      	bne.n	800e5e8 <USB_EPStartXfer+0x1d4>
 800e512:	683b      	ldr	r3, [r7, #0]
 800e514:	781b      	ldrb	r3, [r3, #0]
 800e516:	00db      	lsls	r3, r3, #3
 800e518:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e51c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e520:	685a      	ldr	r2, [r3, #4]
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	781b      	ldrb	r3, [r3, #0]
 800e526:	00db      	lsls	r3, r3, #3
 800e528:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e52c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e530:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800e534:	605a      	str	r2, [r3, #4]
 800e536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d112      	bne.n	800e562 <USB_EPStartXfer+0x14e>
 800e53c:	683b      	ldr	r3, [r7, #0]
 800e53e:	781b      	ldrb	r3, [r3, #0]
 800e540:	00db      	lsls	r3, r3, #3
 800e542:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e546:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e54a:	685a      	ldr	r2, [r3, #4]
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	781b      	ldrb	r3, [r3, #0]
 800e550:	00db      	lsls	r3, r3, #3
 800e552:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e556:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e55a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e55e:	605a      	str	r2, [r3, #4]
 800e560:	e06a      	b.n	800e638 <USB_EPStartXfer+0x224>
 800e562:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e564:	2b3e      	cmp	r3, #62	@ 0x3e
 800e566:	d81e      	bhi.n	800e5a6 <USB_EPStartXfer+0x192>
 800e568:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e56a:	085b      	lsrs	r3, r3, #1
 800e56c:	653b      	str	r3, [r7, #80]	@ 0x50
 800e56e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e570:	f003 0301 	and.w	r3, r3, #1
 800e574:	2b00      	cmp	r3, #0
 800e576:	d002      	beq.n	800e57e <USB_EPStartXfer+0x16a>
 800e578:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e57a:	3301      	adds	r3, #1
 800e57c:	653b      	str	r3, [r7, #80]	@ 0x50
 800e57e:	683b      	ldr	r3, [r7, #0]
 800e580:	781b      	ldrb	r3, [r3, #0]
 800e582:	00db      	lsls	r3, r3, #3
 800e584:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e588:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e58c:	6859      	ldr	r1, [r3, #4]
 800e58e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e590:	069a      	lsls	r2, r3, #26
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	781b      	ldrb	r3, [r3, #0]
 800e596:	00db      	lsls	r3, r3, #3
 800e598:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e59c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e5a0:	430a      	orrs	r2, r1
 800e5a2:	605a      	str	r2, [r3, #4]
 800e5a4:	e048      	b.n	800e638 <USB_EPStartXfer+0x224>
 800e5a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e5a8:	095b      	lsrs	r3, r3, #5
 800e5aa:	653b      	str	r3, [r7, #80]	@ 0x50
 800e5ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e5ae:	f003 031f 	and.w	r3, r3, #31
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d102      	bne.n	800e5bc <USB_EPStartXfer+0x1a8>
 800e5b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e5b8:	3b01      	subs	r3, #1
 800e5ba:	653b      	str	r3, [r7, #80]	@ 0x50
 800e5bc:	683b      	ldr	r3, [r7, #0]
 800e5be:	781b      	ldrb	r3, [r3, #0]
 800e5c0:	00db      	lsls	r3, r3, #3
 800e5c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e5c6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e5ca:	685a      	ldr	r2, [r3, #4]
 800e5cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e5ce:	069b      	lsls	r3, r3, #26
 800e5d0:	431a      	orrs	r2, r3
 800e5d2:	683b      	ldr	r3, [r7, #0]
 800e5d4:	781b      	ldrb	r3, [r3, #0]
 800e5d6:	00db      	lsls	r3, r3, #3
 800e5d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e5dc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e5e0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e5e4:	605a      	str	r2, [r3, #4]
 800e5e6:	e027      	b.n	800e638 <USB_EPStartXfer+0x224>
 800e5e8:	683b      	ldr	r3, [r7, #0]
 800e5ea:	785b      	ldrb	r3, [r3, #1]
 800e5ec:	2b01      	cmp	r3, #1
 800e5ee:	d123      	bne.n	800e638 <USB_EPStartXfer+0x224>
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	781b      	ldrb	r3, [r3, #0]
 800e5f4:	00db      	lsls	r3, r3, #3
 800e5f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e5fa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e5fe:	685a      	ldr	r2, [r3, #4]
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	781b      	ldrb	r3, [r3, #0]
 800e604:	00db      	lsls	r3, r3, #3
 800e606:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e60a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e60e:	b292      	uxth	r2, r2
 800e610:	605a      	str	r2, [r3, #4]
 800e612:	683b      	ldr	r3, [r7, #0]
 800e614:	781b      	ldrb	r3, [r3, #0]
 800e616:	00db      	lsls	r3, r3, #3
 800e618:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e61c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e620:	6859      	ldr	r1, [r3, #4]
 800e622:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e624:	041a      	lsls	r2, r3, #16
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	781b      	ldrb	r3, [r3, #0]
 800e62a:	00db      	lsls	r3, r3, #3
 800e62c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e630:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e634:	430a      	orrs	r2, r1
 800e636:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	895b      	ldrh	r3, [r3, #10]
 800e63c:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	6959      	ldr	r1, [r3, #20]
 800e642:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e644:	b29b      	uxth	r3, r3
 800e646:	8b7a      	ldrh	r2, [r7, #26]
 800e648:	6878      	ldr	r0, [r7, #4]
 800e64a:	f001 f86a 	bl	800f722 <USB_WritePMA>
            ep->xfer_buff += len;
 800e64e:	683b      	ldr	r3, [r7, #0]
 800e650:	695a      	ldr	r2, [r3, #20]
 800e652:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e654:	441a      	add	r2, r3
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	6a1a      	ldr	r2, [r3, #32]
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	691b      	ldr	r3, [r3, #16]
 800e662:	429a      	cmp	r2, r3
 800e664:	d906      	bls.n	800e674 <USB_EPStartXfer+0x260>
            {
              ep->xfer_len_db -= len;
 800e666:	683b      	ldr	r3, [r7, #0]
 800e668:	6a1a      	ldr	r2, [r3, #32]
 800e66a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e66c:	1ad2      	subs	r2, r2, r3
 800e66e:	683b      	ldr	r3, [r7, #0]
 800e670:	621a      	str	r2, [r3, #32]
 800e672:	e005      	b.n	800e680 <USB_EPStartXfer+0x26c>
            }
            else
            {
              len = ep->xfer_len_db;
 800e674:	683b      	ldr	r3, [r7, #0]
 800e676:	6a1b      	ldr	r3, [r3, #32]
 800e678:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800e67a:	683b      	ldr	r3, [r7, #0]
 800e67c:	2200      	movs	r2, #0
 800e67e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	785b      	ldrb	r3, [r3, #1]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d16d      	bne.n	800e764 <USB_EPStartXfer+0x350>
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	781b      	ldrb	r3, [r3, #0]
 800e68c:	00db      	lsls	r3, r3, #3
 800e68e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e692:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e696:	681a      	ldr	r2, [r3, #0]
 800e698:	683b      	ldr	r3, [r7, #0]
 800e69a:	781b      	ldrb	r3, [r3, #0]
 800e69c:	00db      	lsls	r3, r3, #3
 800e69e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e6a2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e6a6:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800e6aa:	601a      	str	r2, [r3, #0]
 800e6ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d112      	bne.n	800e6d8 <USB_EPStartXfer+0x2c4>
 800e6b2:	683b      	ldr	r3, [r7, #0]
 800e6b4:	781b      	ldrb	r3, [r3, #0]
 800e6b6:	00db      	lsls	r3, r3, #3
 800e6b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e6bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e6c0:	681a      	ldr	r2, [r3, #0]
 800e6c2:	683b      	ldr	r3, [r7, #0]
 800e6c4:	781b      	ldrb	r3, [r3, #0]
 800e6c6:	00db      	lsls	r3, r3, #3
 800e6c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e6cc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e6d0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e6d4:	601a      	str	r2, [r3, #0]
 800e6d6:	e06d      	b.n	800e7b4 <USB_EPStartXfer+0x3a0>
 800e6d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e6da:	2b3e      	cmp	r3, #62	@ 0x3e
 800e6dc:	d81e      	bhi.n	800e71c <USB_EPStartXfer+0x308>
 800e6de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e6e0:	085b      	lsrs	r3, r3, #1
 800e6e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e6e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e6e6:	f003 0301 	and.w	r3, r3, #1
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d002      	beq.n	800e6f4 <USB_EPStartXfer+0x2e0>
 800e6ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e6f0:	3301      	adds	r3, #1
 800e6f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e6f4:	683b      	ldr	r3, [r7, #0]
 800e6f6:	781b      	ldrb	r3, [r3, #0]
 800e6f8:	00db      	lsls	r3, r3, #3
 800e6fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e6fe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e702:	6819      	ldr	r1, [r3, #0]
 800e704:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e706:	069a      	lsls	r2, r3, #26
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	781b      	ldrb	r3, [r3, #0]
 800e70c:	00db      	lsls	r3, r3, #3
 800e70e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e712:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e716:	430a      	orrs	r2, r1
 800e718:	601a      	str	r2, [r3, #0]
 800e71a:	e04b      	b.n	800e7b4 <USB_EPStartXfer+0x3a0>
 800e71c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e71e:	095b      	lsrs	r3, r3, #5
 800e720:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e722:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e724:	f003 031f 	and.w	r3, r3, #31
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d102      	bne.n	800e732 <USB_EPStartXfer+0x31e>
 800e72c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e72e:	3b01      	subs	r3, #1
 800e730:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e732:	683b      	ldr	r3, [r7, #0]
 800e734:	781b      	ldrb	r3, [r3, #0]
 800e736:	00db      	lsls	r3, r3, #3
 800e738:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e73c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e740:	681a      	ldr	r2, [r3, #0]
 800e742:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e744:	069b      	lsls	r3, r3, #26
 800e746:	431a      	orrs	r2, r3
 800e748:	683b      	ldr	r3, [r7, #0]
 800e74a:	781b      	ldrb	r3, [r3, #0]
 800e74c:	00db      	lsls	r3, r3, #3
 800e74e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e752:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e756:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e75a:	601a      	str	r2, [r3, #0]
 800e75c:	e02a      	b.n	800e7b4 <USB_EPStartXfer+0x3a0>
 800e75e:	bf00      	nop
 800e760:	07ff8f8f 	.word	0x07ff8f8f
 800e764:	683b      	ldr	r3, [r7, #0]
 800e766:	785b      	ldrb	r3, [r3, #1]
 800e768:	2b01      	cmp	r3, #1
 800e76a:	d123      	bne.n	800e7b4 <USB_EPStartXfer+0x3a0>
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	781b      	ldrb	r3, [r3, #0]
 800e770:	00db      	lsls	r3, r3, #3
 800e772:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e776:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e77a:	681a      	ldr	r2, [r3, #0]
 800e77c:	683b      	ldr	r3, [r7, #0]
 800e77e:	781b      	ldrb	r3, [r3, #0]
 800e780:	00db      	lsls	r3, r3, #3
 800e782:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e786:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e78a:	b292      	uxth	r2, r2
 800e78c:	601a      	str	r2, [r3, #0]
 800e78e:	683b      	ldr	r3, [r7, #0]
 800e790:	781b      	ldrb	r3, [r3, #0]
 800e792:	00db      	lsls	r3, r3, #3
 800e794:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e798:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e79c:	6819      	ldr	r1, [r3, #0]
 800e79e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e7a0:	041a      	lsls	r2, r3, #16
 800e7a2:	683b      	ldr	r3, [r7, #0]
 800e7a4:	781b      	ldrb	r3, [r3, #0]
 800e7a6:	00db      	lsls	r3, r3, #3
 800e7a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e7ac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e7b0:	430a      	orrs	r2, r1
 800e7b2:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	891b      	ldrh	r3, [r3, #8]
 800e7b8:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e7ba:	683b      	ldr	r3, [r7, #0]
 800e7bc:	6959      	ldr	r1, [r3, #20]
 800e7be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e7c0:	b29b      	uxth	r3, r3
 800e7c2:	8b7a      	ldrh	r2, [r7, #26]
 800e7c4:	6878      	ldr	r0, [r7, #4]
 800e7c6:	f000 ffac 	bl	800f722 <USB_WritePMA>
 800e7ca:	e2fd      	b.n	800edc8 <USB_EPStartXfer+0x9b4>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e7cc:	683b      	ldr	r3, [r7, #0]
 800e7ce:	785b      	ldrb	r3, [r3, #1]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d16a      	bne.n	800e8aa <USB_EPStartXfer+0x496>
 800e7d4:	683b      	ldr	r3, [r7, #0]
 800e7d6:	781b      	ldrb	r3, [r3, #0]
 800e7d8:	00db      	lsls	r3, r3, #3
 800e7da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e7de:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e7e2:	681a      	ldr	r2, [r3, #0]
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	781b      	ldrb	r3, [r3, #0]
 800e7e8:	00db      	lsls	r3, r3, #3
 800e7ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e7ee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e7f2:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800e7f6:	601a      	str	r2, [r3, #0]
 800e7f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d112      	bne.n	800e824 <USB_EPStartXfer+0x410>
 800e7fe:	683b      	ldr	r3, [r7, #0]
 800e800:	781b      	ldrb	r3, [r3, #0]
 800e802:	00db      	lsls	r3, r3, #3
 800e804:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e808:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e80c:	681a      	ldr	r2, [r3, #0]
 800e80e:	683b      	ldr	r3, [r7, #0]
 800e810:	781b      	ldrb	r3, [r3, #0]
 800e812:	00db      	lsls	r3, r3, #3
 800e814:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e818:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e81c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e820:	601a      	str	r2, [r3, #0]
 800e822:	e06a      	b.n	800e8fa <USB_EPStartXfer+0x4e6>
 800e824:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e826:	2b3e      	cmp	r3, #62	@ 0x3e
 800e828:	d81e      	bhi.n	800e868 <USB_EPStartXfer+0x454>
 800e82a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e82c:	085b      	lsrs	r3, r3, #1
 800e82e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e830:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e832:	f003 0301 	and.w	r3, r3, #1
 800e836:	2b00      	cmp	r3, #0
 800e838:	d002      	beq.n	800e840 <USB_EPStartXfer+0x42c>
 800e83a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e83c:	3301      	adds	r3, #1
 800e83e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e840:	683b      	ldr	r3, [r7, #0]
 800e842:	781b      	ldrb	r3, [r3, #0]
 800e844:	00db      	lsls	r3, r3, #3
 800e846:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e84a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e84e:	6819      	ldr	r1, [r3, #0]
 800e850:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e852:	069a      	lsls	r2, r3, #26
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	781b      	ldrb	r3, [r3, #0]
 800e858:	00db      	lsls	r3, r3, #3
 800e85a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e85e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e862:	430a      	orrs	r2, r1
 800e864:	601a      	str	r2, [r3, #0]
 800e866:	e048      	b.n	800e8fa <USB_EPStartXfer+0x4e6>
 800e868:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e86a:	095b      	lsrs	r3, r3, #5
 800e86c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e86e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e870:	f003 031f 	and.w	r3, r3, #31
 800e874:	2b00      	cmp	r3, #0
 800e876:	d102      	bne.n	800e87e <USB_EPStartXfer+0x46a>
 800e878:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e87a:	3b01      	subs	r3, #1
 800e87c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	781b      	ldrb	r3, [r3, #0]
 800e882:	00db      	lsls	r3, r3, #3
 800e884:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e888:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e88c:	681a      	ldr	r2, [r3, #0]
 800e88e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e890:	069b      	lsls	r3, r3, #26
 800e892:	431a      	orrs	r2, r3
 800e894:	683b      	ldr	r3, [r7, #0]
 800e896:	781b      	ldrb	r3, [r3, #0]
 800e898:	00db      	lsls	r3, r3, #3
 800e89a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e89e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e8a2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e8a6:	601a      	str	r2, [r3, #0]
 800e8a8:	e027      	b.n	800e8fa <USB_EPStartXfer+0x4e6>
 800e8aa:	683b      	ldr	r3, [r7, #0]
 800e8ac:	785b      	ldrb	r3, [r3, #1]
 800e8ae:	2b01      	cmp	r3, #1
 800e8b0:	d123      	bne.n	800e8fa <USB_EPStartXfer+0x4e6>
 800e8b2:	683b      	ldr	r3, [r7, #0]
 800e8b4:	781b      	ldrb	r3, [r3, #0]
 800e8b6:	00db      	lsls	r3, r3, #3
 800e8b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e8bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e8c0:	681a      	ldr	r2, [r3, #0]
 800e8c2:	683b      	ldr	r3, [r7, #0]
 800e8c4:	781b      	ldrb	r3, [r3, #0]
 800e8c6:	00db      	lsls	r3, r3, #3
 800e8c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e8cc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e8d0:	b292      	uxth	r2, r2
 800e8d2:	601a      	str	r2, [r3, #0]
 800e8d4:	683b      	ldr	r3, [r7, #0]
 800e8d6:	781b      	ldrb	r3, [r3, #0]
 800e8d8:	00db      	lsls	r3, r3, #3
 800e8da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e8de:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e8e2:	6819      	ldr	r1, [r3, #0]
 800e8e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8e6:	041a      	lsls	r2, r3, #16
 800e8e8:	683b      	ldr	r3, [r7, #0]
 800e8ea:	781b      	ldrb	r3, [r3, #0]
 800e8ec:	00db      	lsls	r3, r3, #3
 800e8ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e8f2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e8f6:	430a      	orrs	r2, r1
 800e8f8:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e8fa:	683b      	ldr	r3, [r7, #0]
 800e8fc:	891b      	ldrh	r3, [r3, #8]
 800e8fe:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e900:	683b      	ldr	r3, [r7, #0]
 800e902:	6959      	ldr	r1, [r3, #20]
 800e904:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e906:	b29b      	uxth	r3, r3
 800e908:	8b7a      	ldrh	r2, [r7, #26]
 800e90a:	6878      	ldr	r0, [r7, #4]
 800e90c:	f000 ff09 	bl	800f722 <USB_WritePMA>
            ep->xfer_buff += len;
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	695a      	ldr	r2, [r3, #20]
 800e914:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e916:	441a      	add	r2, r3
 800e918:	683b      	ldr	r3, [r7, #0]
 800e91a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	6a1a      	ldr	r2, [r3, #32]
 800e920:	683b      	ldr	r3, [r7, #0]
 800e922:	691b      	ldr	r3, [r3, #16]
 800e924:	429a      	cmp	r2, r3
 800e926:	d906      	bls.n	800e936 <USB_EPStartXfer+0x522>
            {
              ep->xfer_len_db -= len;
 800e928:	683b      	ldr	r3, [r7, #0]
 800e92a:	6a1a      	ldr	r2, [r3, #32]
 800e92c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e92e:	1ad2      	subs	r2, r2, r3
 800e930:	683b      	ldr	r3, [r7, #0]
 800e932:	621a      	str	r2, [r3, #32]
 800e934:	e005      	b.n	800e942 <USB_EPStartXfer+0x52e>
            }
            else
            {
              len = ep->xfer_len_db;
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	6a1b      	ldr	r3, [r3, #32]
 800e93a:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800e93c:	683b      	ldr	r3, [r7, #0]
 800e93e:	2200      	movs	r2, #0
 800e940:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e942:	683b      	ldr	r3, [r7, #0]
 800e944:	785b      	ldrb	r3, [r3, #1]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d16a      	bne.n	800ea20 <USB_EPStartXfer+0x60c>
 800e94a:	683b      	ldr	r3, [r7, #0]
 800e94c:	781b      	ldrb	r3, [r3, #0]
 800e94e:	00db      	lsls	r3, r3, #3
 800e950:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e954:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e958:	685a      	ldr	r2, [r3, #4]
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	781b      	ldrb	r3, [r3, #0]
 800e95e:	00db      	lsls	r3, r3, #3
 800e960:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e964:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e968:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800e96c:	605a      	str	r2, [r3, #4]
 800e96e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e970:	2b00      	cmp	r3, #0
 800e972:	d112      	bne.n	800e99a <USB_EPStartXfer+0x586>
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	781b      	ldrb	r3, [r3, #0]
 800e978:	00db      	lsls	r3, r3, #3
 800e97a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e97e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e982:	685a      	ldr	r2, [r3, #4]
 800e984:	683b      	ldr	r3, [r7, #0]
 800e986:	781b      	ldrb	r3, [r3, #0]
 800e988:	00db      	lsls	r3, r3, #3
 800e98a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e98e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e992:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e996:	605a      	str	r2, [r3, #4]
 800e998:	e06a      	b.n	800ea70 <USB_EPStartXfer+0x65c>
 800e99a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e99c:	2b3e      	cmp	r3, #62	@ 0x3e
 800e99e:	d81e      	bhi.n	800e9de <USB_EPStartXfer+0x5ca>
 800e9a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9a2:	085b      	lsrs	r3, r3, #1
 800e9a4:	647b      	str	r3, [r7, #68]	@ 0x44
 800e9a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9a8:	f003 0301 	and.w	r3, r3, #1
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d002      	beq.n	800e9b6 <USB_EPStartXfer+0x5a2>
 800e9b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e9b2:	3301      	adds	r3, #1
 800e9b4:	647b      	str	r3, [r7, #68]	@ 0x44
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	781b      	ldrb	r3, [r3, #0]
 800e9ba:	00db      	lsls	r3, r3, #3
 800e9bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e9c0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e9c4:	6859      	ldr	r1, [r3, #4]
 800e9c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e9c8:	069a      	lsls	r2, r3, #26
 800e9ca:	683b      	ldr	r3, [r7, #0]
 800e9cc:	781b      	ldrb	r3, [r3, #0]
 800e9ce:	00db      	lsls	r3, r3, #3
 800e9d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e9d4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e9d8:	430a      	orrs	r2, r1
 800e9da:	605a      	str	r2, [r3, #4]
 800e9dc:	e048      	b.n	800ea70 <USB_EPStartXfer+0x65c>
 800e9de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9e0:	095b      	lsrs	r3, r3, #5
 800e9e2:	647b      	str	r3, [r7, #68]	@ 0x44
 800e9e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9e6:	f003 031f 	and.w	r3, r3, #31
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d102      	bne.n	800e9f4 <USB_EPStartXfer+0x5e0>
 800e9ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e9f0:	3b01      	subs	r3, #1
 800e9f2:	647b      	str	r3, [r7, #68]	@ 0x44
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	781b      	ldrb	r3, [r3, #0]
 800e9f8:	00db      	lsls	r3, r3, #3
 800e9fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e9fe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea02:	685a      	ldr	r2, [r3, #4]
 800ea04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea06:	069b      	lsls	r3, r3, #26
 800ea08:	431a      	orrs	r2, r3
 800ea0a:	683b      	ldr	r3, [r7, #0]
 800ea0c:	781b      	ldrb	r3, [r3, #0]
 800ea0e:	00db      	lsls	r3, r3, #3
 800ea10:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ea14:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea18:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ea1c:	605a      	str	r2, [r3, #4]
 800ea1e:	e027      	b.n	800ea70 <USB_EPStartXfer+0x65c>
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	785b      	ldrb	r3, [r3, #1]
 800ea24:	2b01      	cmp	r3, #1
 800ea26:	d123      	bne.n	800ea70 <USB_EPStartXfer+0x65c>
 800ea28:	683b      	ldr	r3, [r7, #0]
 800ea2a:	781b      	ldrb	r3, [r3, #0]
 800ea2c:	00db      	lsls	r3, r3, #3
 800ea2e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ea32:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea36:	685a      	ldr	r2, [r3, #4]
 800ea38:	683b      	ldr	r3, [r7, #0]
 800ea3a:	781b      	ldrb	r3, [r3, #0]
 800ea3c:	00db      	lsls	r3, r3, #3
 800ea3e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ea42:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea46:	b292      	uxth	r2, r2
 800ea48:	605a      	str	r2, [r3, #4]
 800ea4a:	683b      	ldr	r3, [r7, #0]
 800ea4c:	781b      	ldrb	r3, [r3, #0]
 800ea4e:	00db      	lsls	r3, r3, #3
 800ea50:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ea54:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea58:	6859      	ldr	r1, [r3, #4]
 800ea5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea5c:	041a      	lsls	r2, r3, #16
 800ea5e:	683b      	ldr	r3, [r7, #0]
 800ea60:	781b      	ldrb	r3, [r3, #0]
 800ea62:	00db      	lsls	r3, r3, #3
 800ea64:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ea68:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea6c:	430a      	orrs	r2, r1
 800ea6e:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	895b      	ldrh	r3, [r3, #10]
 800ea74:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ea76:	683b      	ldr	r3, [r7, #0]
 800ea78:	6959      	ldr	r1, [r3, #20]
 800ea7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea7c:	b29b      	uxth	r3, r3
 800ea7e:	8b7a      	ldrh	r2, [r7, #26]
 800ea80:	6878      	ldr	r0, [r7, #4]
 800ea82:	f000 fe4e 	bl	800f722 <USB_WritePMA>
 800ea86:	e19f      	b.n	800edc8 <USB_EPStartXfer+0x9b4>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800ea88:	683b      	ldr	r3, [r7, #0]
 800ea8a:	6a1b      	ldr	r3, [r3, #32]
 800ea8c:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800ea8e:	687a      	ldr	r2, [r7, #4]
 800ea90:	683b      	ldr	r3, [r7, #0]
 800ea92:	781b      	ldrb	r3, [r3, #0]
 800ea94:	009b      	lsls	r3, r3, #2
 800ea96:	4413      	add	r3, r2
 800ea98:	681a      	ldr	r2, [r3, #0]
 800ea9a:	4ba0      	ldr	r3, [pc, #640]	@ (800ed1c <USB_EPStartXfer+0x908>)
 800ea9c:	4013      	ands	r3, r2
 800ea9e:	617b      	str	r3, [r7, #20]
 800eaa0:	687a      	ldr	r2, [r7, #4]
 800eaa2:	683b      	ldr	r3, [r7, #0]
 800eaa4:	781b      	ldrb	r3, [r3, #0]
 800eaa6:	009b      	lsls	r3, r3, #2
 800eaa8:	441a      	add	r2, r3
 800eaaa:	697b      	ldr	r3, [r7, #20]
 800eaac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800eab0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eab4:	6013      	str	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800eab6:	683b      	ldr	r3, [r7, #0]
 800eab8:	781b      	ldrb	r3, [r3, #0]
 800eaba:	00db      	lsls	r3, r3, #3
 800eabc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eac0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eac4:	681a      	ldr	r2, [r3, #0]
 800eac6:	683b      	ldr	r3, [r7, #0]
 800eac8:	781b      	ldrb	r3, [r3, #0]
 800eaca:	00db      	lsls	r3, r3, #3
 800eacc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ead0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ead4:	b292      	uxth	r2, r2
 800ead6:	601a      	str	r2, [r3, #0]
 800ead8:	683b      	ldr	r3, [r7, #0]
 800eada:	781b      	ldrb	r3, [r3, #0]
 800eadc:	00db      	lsls	r3, r3, #3
 800eade:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eae2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eae6:	6819      	ldr	r1, [r3, #0]
 800eae8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eaea:	041a      	lsls	r2, r3, #16
 800eaec:	683b      	ldr	r3, [r7, #0]
 800eaee:	781b      	ldrb	r3, [r3, #0]
 800eaf0:	00db      	lsls	r3, r3, #3
 800eaf2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eaf6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eafa:	430a      	orrs	r2, r1
 800eafc:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800eafe:	683b      	ldr	r3, [r7, #0]
 800eb00:	891b      	ldrh	r3, [r3, #8]
 800eb02:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800eb04:	683b      	ldr	r3, [r7, #0]
 800eb06:	6959      	ldr	r1, [r3, #20]
 800eb08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb0a:	b29b      	uxth	r3, r3
 800eb0c:	8b7a      	ldrh	r2, [r7, #26]
 800eb0e:	6878      	ldr	r0, [r7, #4]
 800eb10:	f000 fe07 	bl	800f722 <USB_WritePMA>
 800eb14:	e158      	b.n	800edc8 <USB_EPStartXfer+0x9b4>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800eb16:	683b      	ldr	r3, [r7, #0]
 800eb18:	6a1a      	ldr	r2, [r3, #32]
 800eb1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb1c:	1ad2      	subs	r2, r2, r3
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800eb22:	687a      	ldr	r2, [r7, #4]
 800eb24:	683b      	ldr	r3, [r7, #0]
 800eb26:	781b      	ldrb	r3, [r3, #0]
 800eb28:	009b      	lsls	r3, r3, #2
 800eb2a:	4413      	add	r3, r2
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	f000 80a3 	beq.w	800ec7e <USB_EPStartXfer+0x86a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800eb38:	683b      	ldr	r3, [r7, #0]
 800eb3a:	785b      	ldrb	r3, [r3, #1]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d16a      	bne.n	800ec16 <USB_EPStartXfer+0x802>
 800eb40:	683b      	ldr	r3, [r7, #0]
 800eb42:	781b      	ldrb	r3, [r3, #0]
 800eb44:	00db      	lsls	r3, r3, #3
 800eb46:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eb4a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eb4e:	685a      	ldr	r2, [r3, #4]
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	781b      	ldrb	r3, [r3, #0]
 800eb54:	00db      	lsls	r3, r3, #3
 800eb56:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eb5a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eb5e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800eb62:	605a      	str	r2, [r3, #4]
 800eb64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d112      	bne.n	800eb90 <USB_EPStartXfer+0x77c>
 800eb6a:	683b      	ldr	r3, [r7, #0]
 800eb6c:	781b      	ldrb	r3, [r3, #0]
 800eb6e:	00db      	lsls	r3, r3, #3
 800eb70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eb74:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eb78:	685a      	ldr	r2, [r3, #4]
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	781b      	ldrb	r3, [r3, #0]
 800eb7e:	00db      	lsls	r3, r3, #3
 800eb80:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eb84:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eb88:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800eb8c:	605a      	str	r2, [r3, #4]
 800eb8e:	e06a      	b.n	800ec66 <USB_EPStartXfer+0x852>
 800eb90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb92:	2b3e      	cmp	r3, #62	@ 0x3e
 800eb94:	d81e      	bhi.n	800ebd4 <USB_EPStartXfer+0x7c0>
 800eb96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb98:	085b      	lsrs	r3, r3, #1
 800eb9a:	643b      	str	r3, [r7, #64]	@ 0x40
 800eb9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb9e:	f003 0301 	and.w	r3, r3, #1
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d002      	beq.n	800ebac <USB_EPStartXfer+0x798>
 800eba6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eba8:	3301      	adds	r3, #1
 800ebaa:	643b      	str	r3, [r7, #64]	@ 0x40
 800ebac:	683b      	ldr	r3, [r7, #0]
 800ebae:	781b      	ldrb	r3, [r3, #0]
 800ebb0:	00db      	lsls	r3, r3, #3
 800ebb2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ebb6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ebba:	6859      	ldr	r1, [r3, #4]
 800ebbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ebbe:	069a      	lsls	r2, r3, #26
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	781b      	ldrb	r3, [r3, #0]
 800ebc4:	00db      	lsls	r3, r3, #3
 800ebc6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ebca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ebce:	430a      	orrs	r2, r1
 800ebd0:	605a      	str	r2, [r3, #4]
 800ebd2:	e048      	b.n	800ec66 <USB_EPStartXfer+0x852>
 800ebd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebd6:	095b      	lsrs	r3, r3, #5
 800ebd8:	643b      	str	r3, [r7, #64]	@ 0x40
 800ebda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebdc:	f003 031f 	and.w	r3, r3, #31
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d102      	bne.n	800ebea <USB_EPStartXfer+0x7d6>
 800ebe4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ebe6:	3b01      	subs	r3, #1
 800ebe8:	643b      	str	r3, [r7, #64]	@ 0x40
 800ebea:	683b      	ldr	r3, [r7, #0]
 800ebec:	781b      	ldrb	r3, [r3, #0]
 800ebee:	00db      	lsls	r3, r3, #3
 800ebf0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ebf4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ebf8:	685a      	ldr	r2, [r3, #4]
 800ebfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ebfc:	069b      	lsls	r3, r3, #26
 800ebfe:	431a      	orrs	r2, r3
 800ec00:	683b      	ldr	r3, [r7, #0]
 800ec02:	781b      	ldrb	r3, [r3, #0]
 800ec04:	00db      	lsls	r3, r3, #3
 800ec06:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ec0a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ec0e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ec12:	605a      	str	r2, [r3, #4]
 800ec14:	e027      	b.n	800ec66 <USB_EPStartXfer+0x852>
 800ec16:	683b      	ldr	r3, [r7, #0]
 800ec18:	785b      	ldrb	r3, [r3, #1]
 800ec1a:	2b01      	cmp	r3, #1
 800ec1c:	d123      	bne.n	800ec66 <USB_EPStartXfer+0x852>
 800ec1e:	683b      	ldr	r3, [r7, #0]
 800ec20:	781b      	ldrb	r3, [r3, #0]
 800ec22:	00db      	lsls	r3, r3, #3
 800ec24:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ec28:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ec2c:	685a      	ldr	r2, [r3, #4]
 800ec2e:	683b      	ldr	r3, [r7, #0]
 800ec30:	781b      	ldrb	r3, [r3, #0]
 800ec32:	00db      	lsls	r3, r3, #3
 800ec34:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ec38:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ec3c:	b292      	uxth	r2, r2
 800ec3e:	605a      	str	r2, [r3, #4]
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	781b      	ldrb	r3, [r3, #0]
 800ec44:	00db      	lsls	r3, r3, #3
 800ec46:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ec4a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ec4e:	6859      	ldr	r1, [r3, #4]
 800ec50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec52:	041a      	lsls	r2, r3, #16
 800ec54:	683b      	ldr	r3, [r7, #0]
 800ec56:	781b      	ldrb	r3, [r3, #0]
 800ec58:	00db      	lsls	r3, r3, #3
 800ec5a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ec5e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ec62:	430a      	orrs	r2, r1
 800ec64:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 800ec66:	683b      	ldr	r3, [r7, #0]
 800ec68:	895b      	ldrh	r3, [r3, #10]
 800ec6a:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ec6c:	683b      	ldr	r3, [r7, #0]
 800ec6e:	6959      	ldr	r1, [r3, #20]
 800ec70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec72:	b29b      	uxth	r3, r3
 800ec74:	8b7a      	ldrh	r2, [r7, #26]
 800ec76:	6878      	ldr	r0, [r7, #4]
 800ec78:	f000 fd53 	bl	800f722 <USB_WritePMA>
 800ec7c:	e0a4      	b.n	800edc8 <USB_EPStartXfer+0x9b4>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ec7e:	683b      	ldr	r3, [r7, #0]
 800ec80:	785b      	ldrb	r3, [r3, #1]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d16d      	bne.n	800ed62 <USB_EPStartXfer+0x94e>
 800ec86:	683b      	ldr	r3, [r7, #0]
 800ec88:	781b      	ldrb	r3, [r3, #0]
 800ec8a:	00db      	lsls	r3, r3, #3
 800ec8c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ec90:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ec94:	681a      	ldr	r2, [r3, #0]
 800ec96:	683b      	ldr	r3, [r7, #0]
 800ec98:	781b      	ldrb	r3, [r3, #0]
 800ec9a:	00db      	lsls	r3, r3, #3
 800ec9c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eca0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eca4:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800eca8:	601a      	str	r2, [r3, #0]
 800ecaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d112      	bne.n	800ecd6 <USB_EPStartXfer+0x8c2>
 800ecb0:	683b      	ldr	r3, [r7, #0]
 800ecb2:	781b      	ldrb	r3, [r3, #0]
 800ecb4:	00db      	lsls	r3, r3, #3
 800ecb6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ecba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ecbe:	681a      	ldr	r2, [r3, #0]
 800ecc0:	683b      	ldr	r3, [r7, #0]
 800ecc2:	781b      	ldrb	r3, [r3, #0]
 800ecc4:	00db      	lsls	r3, r3, #3
 800ecc6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ecca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ecce:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ecd2:	601a      	str	r2, [r3, #0]
 800ecd4:	e06d      	b.n	800edb2 <USB_EPStartXfer+0x99e>
 800ecd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ecd8:	2b3e      	cmp	r3, #62	@ 0x3e
 800ecda:	d821      	bhi.n	800ed20 <USB_EPStartXfer+0x90c>
 800ecdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ecde:	085b      	lsrs	r3, r3, #1
 800ece0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ece2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ece4:	f003 0301 	and.w	r3, r3, #1
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d002      	beq.n	800ecf2 <USB_EPStartXfer+0x8de>
 800ecec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ecee:	3301      	adds	r3, #1
 800ecf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ecf2:	683b      	ldr	r3, [r7, #0]
 800ecf4:	781b      	ldrb	r3, [r3, #0]
 800ecf6:	00db      	lsls	r3, r3, #3
 800ecf8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ecfc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ed00:	6819      	ldr	r1, [r3, #0]
 800ed02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed04:	069a      	lsls	r2, r3, #26
 800ed06:	683b      	ldr	r3, [r7, #0]
 800ed08:	781b      	ldrb	r3, [r3, #0]
 800ed0a:	00db      	lsls	r3, r3, #3
 800ed0c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ed10:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ed14:	430a      	orrs	r2, r1
 800ed16:	601a      	str	r2, [r3, #0]
 800ed18:	e04b      	b.n	800edb2 <USB_EPStartXfer+0x99e>
 800ed1a:	bf00      	nop
 800ed1c:	07ff8e8f 	.word	0x07ff8e8f
 800ed20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed22:	095b      	lsrs	r3, r3, #5
 800ed24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ed26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed28:	f003 031f 	and.w	r3, r3, #31
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d102      	bne.n	800ed36 <USB_EPStartXfer+0x922>
 800ed30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed32:	3b01      	subs	r3, #1
 800ed34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ed36:	683b      	ldr	r3, [r7, #0]
 800ed38:	781b      	ldrb	r3, [r3, #0]
 800ed3a:	00db      	lsls	r3, r3, #3
 800ed3c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ed40:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ed44:	681a      	ldr	r2, [r3, #0]
 800ed46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed48:	069b      	lsls	r3, r3, #26
 800ed4a:	431a      	orrs	r2, r3
 800ed4c:	683b      	ldr	r3, [r7, #0]
 800ed4e:	781b      	ldrb	r3, [r3, #0]
 800ed50:	00db      	lsls	r3, r3, #3
 800ed52:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ed56:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ed5a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ed5e:	601a      	str	r2, [r3, #0]
 800ed60:	e027      	b.n	800edb2 <USB_EPStartXfer+0x99e>
 800ed62:	683b      	ldr	r3, [r7, #0]
 800ed64:	785b      	ldrb	r3, [r3, #1]
 800ed66:	2b01      	cmp	r3, #1
 800ed68:	d123      	bne.n	800edb2 <USB_EPStartXfer+0x99e>
 800ed6a:	683b      	ldr	r3, [r7, #0]
 800ed6c:	781b      	ldrb	r3, [r3, #0]
 800ed6e:	00db      	lsls	r3, r3, #3
 800ed70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ed74:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ed78:	681a      	ldr	r2, [r3, #0]
 800ed7a:	683b      	ldr	r3, [r7, #0]
 800ed7c:	781b      	ldrb	r3, [r3, #0]
 800ed7e:	00db      	lsls	r3, r3, #3
 800ed80:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ed84:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ed88:	b292      	uxth	r2, r2
 800ed8a:	601a      	str	r2, [r3, #0]
 800ed8c:	683b      	ldr	r3, [r7, #0]
 800ed8e:	781b      	ldrb	r3, [r3, #0]
 800ed90:	00db      	lsls	r3, r3, #3
 800ed92:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ed96:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ed9a:	6819      	ldr	r1, [r3, #0]
 800ed9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed9e:	041a      	lsls	r2, r3, #16
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	781b      	ldrb	r3, [r3, #0]
 800eda4:	00db      	lsls	r3, r3, #3
 800eda6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800edaa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800edae:	430a      	orrs	r2, r1
 800edb0:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800edb2:	683b      	ldr	r3, [r7, #0]
 800edb4:	891b      	ldrh	r3, [r3, #8]
 800edb6:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800edb8:	683b      	ldr	r3, [r7, #0]
 800edba:	6959      	ldr	r1, [r3, #20]
 800edbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800edbe:	b29b      	uxth	r3, r3
 800edc0:	8b7a      	ldrh	r2, [r7, #26]
 800edc2:	6878      	ldr	r0, [r7, #4]
 800edc4:	f000 fcad 	bl	800f722 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800edc8:	687a      	ldr	r2, [r7, #4]
 800edca:	683b      	ldr	r3, [r7, #0]
 800edcc:	781b      	ldrb	r3, [r3, #0]
 800edce:	009b      	lsls	r3, r3, #2
 800edd0:	4413      	add	r3, r2
 800edd2:	681a      	ldr	r2, [r3, #0]
 800edd4:	4b8b      	ldr	r3, [pc, #556]	@ (800f004 <USB_EPStartXfer+0xbf0>)
 800edd6:	4013      	ands	r3, r2
 800edd8:	60fb      	str	r3, [r7, #12]
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	f083 0310 	eor.w	r3, r3, #16
 800ede0:	60fb      	str	r3, [r7, #12]
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	f083 0320 	eor.w	r3, r3, #32
 800ede8:	60fb      	str	r3, [r7, #12]
 800edea:	687a      	ldr	r2, [r7, #4]
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	781b      	ldrb	r3, [r3, #0]
 800edf0:	009b      	lsls	r3, r3, #2
 800edf2:	441a      	add	r2, r3
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800edfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800edfe:	6013      	str	r3, [r2, #0]
 800ee00:	e36b      	b.n	800f4da <USB_EPStartXfer+0x10c6>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800ee02:	683b      	ldr	r3, [r7, #0]
 800ee04:	7b1b      	ldrb	r3, [r3, #12]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	f040 8081 	bne.w	800ef0e <USB_EPStartXfer+0xafa>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800ee0c:	683b      	ldr	r3, [r7, #0]
 800ee0e:	699a      	ldr	r2, [r3, #24]
 800ee10:	683b      	ldr	r3, [r7, #0]
 800ee12:	691b      	ldr	r3, [r3, #16]
 800ee14:	429a      	cmp	r2, r3
 800ee16:	d909      	bls.n	800ee2c <USB_EPStartXfer+0xa18>
      {
        len = ep->maxpacket;
 800ee18:	683b      	ldr	r3, [r7, #0]
 800ee1a:	691b      	ldr	r3, [r3, #16]
 800ee1c:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 800ee1e:	683b      	ldr	r3, [r7, #0]
 800ee20:	699a      	ldr	r2, [r3, #24]
 800ee22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee24:	1ad2      	subs	r2, r2, r3
 800ee26:	683b      	ldr	r3, [r7, #0]
 800ee28:	619a      	str	r2, [r3, #24]
 800ee2a:	e005      	b.n	800ee38 <USB_EPStartXfer+0xa24>
      }
      else
      {
        len = ep->xfer_len;
 800ee2c:	683b      	ldr	r3, [r7, #0]
 800ee2e:	699b      	ldr	r3, [r3, #24]
 800ee30:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 800ee32:	683b      	ldr	r3, [r7, #0]
 800ee34:	2200      	movs	r2, #0
 800ee36:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800ee38:	683b      	ldr	r3, [r7, #0]
 800ee3a:	781b      	ldrb	r3, [r3, #0]
 800ee3c:	00db      	lsls	r3, r3, #3
 800ee3e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ee42:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ee46:	685a      	ldr	r2, [r3, #4]
 800ee48:	683b      	ldr	r3, [r7, #0]
 800ee4a:	781b      	ldrb	r3, [r3, #0]
 800ee4c:	00db      	lsls	r3, r3, #3
 800ee4e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ee52:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ee56:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800ee5a:	605a      	str	r2, [r3, #4]
 800ee5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d112      	bne.n	800ee88 <USB_EPStartXfer+0xa74>
 800ee62:	683b      	ldr	r3, [r7, #0]
 800ee64:	781b      	ldrb	r3, [r3, #0]
 800ee66:	00db      	lsls	r3, r3, #3
 800ee68:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ee6c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ee70:	685a      	ldr	r2, [r3, #4]
 800ee72:	683b      	ldr	r3, [r7, #0]
 800ee74:	781b      	ldrb	r3, [r3, #0]
 800ee76:	00db      	lsls	r3, r3, #3
 800ee78:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ee7c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ee80:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ee84:	605a      	str	r2, [r3, #4]
 800ee86:	e30c      	b.n	800f4a2 <USB_EPStartXfer+0x108e>
 800ee88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee8a:	2b3e      	cmp	r3, #62	@ 0x3e
 800ee8c:	d81e      	bhi.n	800eecc <USB_EPStartXfer+0xab8>
 800ee8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee90:	085b      	lsrs	r3, r3, #1
 800ee92:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ee94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee96:	f003 0301 	and.w	r3, r3, #1
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d002      	beq.n	800eea4 <USB_EPStartXfer+0xa90>
 800ee9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eea0:	3301      	adds	r3, #1
 800eea2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800eea4:	683b      	ldr	r3, [r7, #0]
 800eea6:	781b      	ldrb	r3, [r3, #0]
 800eea8:	00db      	lsls	r3, r3, #3
 800eeaa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eeae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eeb2:	6859      	ldr	r1, [r3, #4]
 800eeb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eeb6:	069a      	lsls	r2, r3, #26
 800eeb8:	683b      	ldr	r3, [r7, #0]
 800eeba:	781b      	ldrb	r3, [r3, #0]
 800eebc:	00db      	lsls	r3, r3, #3
 800eebe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eec2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eec6:	430a      	orrs	r2, r1
 800eec8:	605a      	str	r2, [r3, #4]
 800eeca:	e2ea      	b.n	800f4a2 <USB_EPStartXfer+0x108e>
 800eecc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eece:	095b      	lsrs	r3, r3, #5
 800eed0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800eed2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eed4:	f003 031f 	and.w	r3, r3, #31
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d102      	bne.n	800eee2 <USB_EPStartXfer+0xace>
 800eedc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eede:	3b01      	subs	r3, #1
 800eee0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	781b      	ldrb	r3, [r3, #0]
 800eee6:	00db      	lsls	r3, r3, #3
 800eee8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eeec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eef0:	685a      	ldr	r2, [r3, #4]
 800eef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eef4:	069b      	lsls	r3, r3, #26
 800eef6:	431a      	orrs	r2, r3
 800eef8:	683b      	ldr	r3, [r7, #0]
 800eefa:	781b      	ldrb	r3, [r3, #0]
 800eefc:	00db      	lsls	r3, r3, #3
 800eefe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ef02:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ef06:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ef0a:	605a      	str	r2, [r3, #4]
 800ef0c:	e2c9      	b.n	800f4a2 <USB_EPStartXfer+0x108e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800ef0e:	683b      	ldr	r3, [r7, #0]
 800ef10:	78db      	ldrb	r3, [r3, #3]
 800ef12:	2b02      	cmp	r3, #2
 800ef14:	f040 8176 	bne.w	800f204 <USB_EPStartXfer+0xdf0>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800ef18:	683b      	ldr	r3, [r7, #0]
 800ef1a:	785b      	ldrb	r3, [r3, #1]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d173      	bne.n	800f008 <USB_EPStartXfer+0xbf4>
 800ef20:	683b      	ldr	r3, [r7, #0]
 800ef22:	781b      	ldrb	r3, [r3, #0]
 800ef24:	00db      	lsls	r3, r3, #3
 800ef26:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ef2a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ef2e:	681a      	ldr	r2, [r3, #0]
 800ef30:	683b      	ldr	r3, [r7, #0]
 800ef32:	781b      	ldrb	r3, [r3, #0]
 800ef34:	00db      	lsls	r3, r3, #3
 800ef36:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ef3a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ef3e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800ef42:	601a      	str	r2, [r3, #0]
 800ef44:	683b      	ldr	r3, [r7, #0]
 800ef46:	691b      	ldr	r3, [r3, #16]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d112      	bne.n	800ef72 <USB_EPStartXfer+0xb5e>
 800ef4c:	683b      	ldr	r3, [r7, #0]
 800ef4e:	781b      	ldrb	r3, [r3, #0]
 800ef50:	00db      	lsls	r3, r3, #3
 800ef52:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ef56:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ef5a:	681a      	ldr	r2, [r3, #0]
 800ef5c:	683b      	ldr	r3, [r7, #0]
 800ef5e:	781b      	ldrb	r3, [r3, #0]
 800ef60:	00db      	lsls	r3, r3, #3
 800ef62:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ef66:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ef6a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ef6e:	601a      	str	r2, [r3, #0]
 800ef70:	e073      	b.n	800f05a <USB_EPStartXfer+0xc46>
 800ef72:	683b      	ldr	r3, [r7, #0]
 800ef74:	691b      	ldr	r3, [r3, #16]
 800ef76:	2b3e      	cmp	r3, #62	@ 0x3e
 800ef78:	d820      	bhi.n	800efbc <USB_EPStartXfer+0xba8>
 800ef7a:	683b      	ldr	r3, [r7, #0]
 800ef7c:	691b      	ldr	r3, [r3, #16]
 800ef7e:	085b      	lsrs	r3, r3, #1
 800ef80:	637b      	str	r3, [r7, #52]	@ 0x34
 800ef82:	683b      	ldr	r3, [r7, #0]
 800ef84:	691b      	ldr	r3, [r3, #16]
 800ef86:	f003 0301 	and.w	r3, r3, #1
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d002      	beq.n	800ef94 <USB_EPStartXfer+0xb80>
 800ef8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef90:	3301      	adds	r3, #1
 800ef92:	637b      	str	r3, [r7, #52]	@ 0x34
 800ef94:	683b      	ldr	r3, [r7, #0]
 800ef96:	781b      	ldrb	r3, [r3, #0]
 800ef98:	00db      	lsls	r3, r3, #3
 800ef9a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ef9e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800efa2:	6819      	ldr	r1, [r3, #0]
 800efa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800efa6:	069a      	lsls	r2, r3, #26
 800efa8:	683b      	ldr	r3, [r7, #0]
 800efaa:	781b      	ldrb	r3, [r3, #0]
 800efac:	00db      	lsls	r3, r3, #3
 800efae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800efb2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800efb6:	430a      	orrs	r2, r1
 800efb8:	601a      	str	r2, [r3, #0]
 800efba:	e04e      	b.n	800f05a <USB_EPStartXfer+0xc46>
 800efbc:	683b      	ldr	r3, [r7, #0]
 800efbe:	691b      	ldr	r3, [r3, #16]
 800efc0:	095b      	lsrs	r3, r3, #5
 800efc2:	637b      	str	r3, [r7, #52]	@ 0x34
 800efc4:	683b      	ldr	r3, [r7, #0]
 800efc6:	691b      	ldr	r3, [r3, #16]
 800efc8:	f003 031f 	and.w	r3, r3, #31
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d102      	bne.n	800efd6 <USB_EPStartXfer+0xbc2>
 800efd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800efd2:	3b01      	subs	r3, #1
 800efd4:	637b      	str	r3, [r7, #52]	@ 0x34
 800efd6:	683b      	ldr	r3, [r7, #0]
 800efd8:	781b      	ldrb	r3, [r3, #0]
 800efda:	00db      	lsls	r3, r3, #3
 800efdc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800efe0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800efe4:	681a      	ldr	r2, [r3, #0]
 800efe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800efe8:	069b      	lsls	r3, r3, #26
 800efea:	431a      	orrs	r2, r3
 800efec:	683b      	ldr	r3, [r7, #0]
 800efee:	781b      	ldrb	r3, [r3, #0]
 800eff0:	00db      	lsls	r3, r3, #3
 800eff2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eff6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800effa:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800effe:	601a      	str	r2, [r3, #0]
 800f000:	e02b      	b.n	800f05a <USB_EPStartXfer+0xc46>
 800f002:	bf00      	nop
 800f004:	07ff8fbf 	.word	0x07ff8fbf
 800f008:	683b      	ldr	r3, [r7, #0]
 800f00a:	785b      	ldrb	r3, [r3, #1]
 800f00c:	2b01      	cmp	r3, #1
 800f00e:	d124      	bne.n	800f05a <USB_EPStartXfer+0xc46>
 800f010:	683b      	ldr	r3, [r7, #0]
 800f012:	781b      	ldrb	r3, [r3, #0]
 800f014:	00db      	lsls	r3, r3, #3
 800f016:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f01a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f01e:	681a      	ldr	r2, [r3, #0]
 800f020:	683b      	ldr	r3, [r7, #0]
 800f022:	781b      	ldrb	r3, [r3, #0]
 800f024:	00db      	lsls	r3, r3, #3
 800f026:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f02a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f02e:	b292      	uxth	r2, r2
 800f030:	601a      	str	r2, [r3, #0]
 800f032:	683b      	ldr	r3, [r7, #0]
 800f034:	781b      	ldrb	r3, [r3, #0]
 800f036:	00db      	lsls	r3, r3, #3
 800f038:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f03c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f040:	6819      	ldr	r1, [r3, #0]
 800f042:	683b      	ldr	r3, [r7, #0]
 800f044:	691b      	ldr	r3, [r3, #16]
 800f046:	041a      	lsls	r2, r3, #16
 800f048:	683b      	ldr	r3, [r7, #0]
 800f04a:	781b      	ldrb	r3, [r3, #0]
 800f04c:	00db      	lsls	r3, r3, #3
 800f04e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f052:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f056:	430a      	orrs	r2, r1
 800f058:	601a      	str	r2, [r3, #0]
 800f05a:	683b      	ldr	r3, [r7, #0]
 800f05c:	785b      	ldrb	r3, [r3, #1]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d170      	bne.n	800f144 <USB_EPStartXfer+0xd30>
 800f062:	683b      	ldr	r3, [r7, #0]
 800f064:	781b      	ldrb	r3, [r3, #0]
 800f066:	00db      	lsls	r3, r3, #3
 800f068:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f06c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f070:	685a      	ldr	r2, [r3, #4]
 800f072:	683b      	ldr	r3, [r7, #0]
 800f074:	781b      	ldrb	r3, [r3, #0]
 800f076:	00db      	lsls	r3, r3, #3
 800f078:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f07c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f080:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800f084:	605a      	str	r2, [r3, #4]
 800f086:	683b      	ldr	r3, [r7, #0]
 800f088:	691b      	ldr	r3, [r3, #16]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d112      	bne.n	800f0b4 <USB_EPStartXfer+0xca0>
 800f08e:	683b      	ldr	r3, [r7, #0]
 800f090:	781b      	ldrb	r3, [r3, #0]
 800f092:	00db      	lsls	r3, r3, #3
 800f094:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f098:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f09c:	685a      	ldr	r2, [r3, #4]
 800f09e:	683b      	ldr	r3, [r7, #0]
 800f0a0:	781b      	ldrb	r3, [r3, #0]
 800f0a2:	00db      	lsls	r3, r3, #3
 800f0a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f0a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f0ac:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f0b0:	605a      	str	r2, [r3, #4]
 800f0b2:	e070      	b.n	800f196 <USB_EPStartXfer+0xd82>
 800f0b4:	683b      	ldr	r3, [r7, #0]
 800f0b6:	691b      	ldr	r3, [r3, #16]
 800f0b8:	2b3e      	cmp	r3, #62	@ 0x3e
 800f0ba:	d820      	bhi.n	800f0fe <USB_EPStartXfer+0xcea>
 800f0bc:	683b      	ldr	r3, [r7, #0]
 800f0be:	691b      	ldr	r3, [r3, #16]
 800f0c0:	085b      	lsrs	r3, r3, #1
 800f0c2:	633b      	str	r3, [r7, #48]	@ 0x30
 800f0c4:	683b      	ldr	r3, [r7, #0]
 800f0c6:	691b      	ldr	r3, [r3, #16]
 800f0c8:	f003 0301 	and.w	r3, r3, #1
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d002      	beq.n	800f0d6 <USB_EPStartXfer+0xcc2>
 800f0d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0d2:	3301      	adds	r3, #1
 800f0d4:	633b      	str	r3, [r7, #48]	@ 0x30
 800f0d6:	683b      	ldr	r3, [r7, #0]
 800f0d8:	781b      	ldrb	r3, [r3, #0]
 800f0da:	00db      	lsls	r3, r3, #3
 800f0dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f0e0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f0e4:	6859      	ldr	r1, [r3, #4]
 800f0e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0e8:	069a      	lsls	r2, r3, #26
 800f0ea:	683b      	ldr	r3, [r7, #0]
 800f0ec:	781b      	ldrb	r3, [r3, #0]
 800f0ee:	00db      	lsls	r3, r3, #3
 800f0f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f0f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f0f8:	430a      	orrs	r2, r1
 800f0fa:	605a      	str	r2, [r3, #4]
 800f0fc:	e04b      	b.n	800f196 <USB_EPStartXfer+0xd82>
 800f0fe:	683b      	ldr	r3, [r7, #0]
 800f100:	691b      	ldr	r3, [r3, #16]
 800f102:	095b      	lsrs	r3, r3, #5
 800f104:	633b      	str	r3, [r7, #48]	@ 0x30
 800f106:	683b      	ldr	r3, [r7, #0]
 800f108:	691b      	ldr	r3, [r3, #16]
 800f10a:	f003 031f 	and.w	r3, r3, #31
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d102      	bne.n	800f118 <USB_EPStartXfer+0xd04>
 800f112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f114:	3b01      	subs	r3, #1
 800f116:	633b      	str	r3, [r7, #48]	@ 0x30
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	781b      	ldrb	r3, [r3, #0]
 800f11c:	00db      	lsls	r3, r3, #3
 800f11e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f122:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f126:	685a      	ldr	r2, [r3, #4]
 800f128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f12a:	069b      	lsls	r3, r3, #26
 800f12c:	431a      	orrs	r2, r3
 800f12e:	683b      	ldr	r3, [r7, #0]
 800f130:	781b      	ldrb	r3, [r3, #0]
 800f132:	00db      	lsls	r3, r3, #3
 800f134:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f138:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f13c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f140:	605a      	str	r2, [r3, #4]
 800f142:	e028      	b.n	800f196 <USB_EPStartXfer+0xd82>
 800f144:	683b      	ldr	r3, [r7, #0]
 800f146:	785b      	ldrb	r3, [r3, #1]
 800f148:	2b01      	cmp	r3, #1
 800f14a:	d124      	bne.n	800f196 <USB_EPStartXfer+0xd82>
 800f14c:	683b      	ldr	r3, [r7, #0]
 800f14e:	781b      	ldrb	r3, [r3, #0]
 800f150:	00db      	lsls	r3, r3, #3
 800f152:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f156:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f15a:	685a      	ldr	r2, [r3, #4]
 800f15c:	683b      	ldr	r3, [r7, #0]
 800f15e:	781b      	ldrb	r3, [r3, #0]
 800f160:	00db      	lsls	r3, r3, #3
 800f162:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f166:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f16a:	b292      	uxth	r2, r2
 800f16c:	605a      	str	r2, [r3, #4]
 800f16e:	683b      	ldr	r3, [r7, #0]
 800f170:	781b      	ldrb	r3, [r3, #0]
 800f172:	00db      	lsls	r3, r3, #3
 800f174:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f178:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f17c:	6859      	ldr	r1, [r3, #4]
 800f17e:	683b      	ldr	r3, [r7, #0]
 800f180:	691b      	ldr	r3, [r3, #16]
 800f182:	041a      	lsls	r2, r3, #16
 800f184:	683b      	ldr	r3, [r7, #0]
 800f186:	781b      	ldrb	r3, [r3, #0]
 800f188:	00db      	lsls	r3, r3, #3
 800f18a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f18e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f192:	430a      	orrs	r2, r1
 800f194:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800f196:	683b      	ldr	r3, [r7, #0]
 800f198:	69db      	ldr	r3, [r3, #28]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	f000 8181 	beq.w	800f4a2 <USB_EPStartXfer+0x108e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 800f1a0:	687a      	ldr	r2, [r7, #4]
 800f1a2:	683b      	ldr	r3, [r7, #0]
 800f1a4:	781b      	ldrb	r3, [r3, #0]
 800f1a6:	009b      	lsls	r3, r3, #2
 800f1a8:	4413      	add	r3, r2
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	84fb      	strh	r3, [r7, #38]	@ 0x26

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800f1ae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f1b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d004      	beq.n	800f1c2 <USB_EPStartXfer+0xdae>
 800f1b8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f1ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d10b      	bne.n	800f1da <USB_EPStartXfer+0xdc6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800f1c2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f1c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	f040 816a 	bne.w	800f4a2 <USB_EPStartXfer+0x108e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800f1ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f1d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	f040 8164 	bne.w	800f4a2 <USB_EPStartXfer+0x108e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800f1da:	687a      	ldr	r2, [r7, #4]
 800f1dc:	683b      	ldr	r3, [r7, #0]
 800f1de:	781b      	ldrb	r3, [r3, #0]
 800f1e0:	009b      	lsls	r3, r3, #2
 800f1e2:	4413      	add	r3, r2
 800f1e4:	681a      	ldr	r2, [r3, #0]
 800f1e6:	4b98      	ldr	r3, [pc, #608]	@ (800f448 <USB_EPStartXfer+0x1034>)
 800f1e8:	4013      	ands	r3, r2
 800f1ea:	623b      	str	r3, [r7, #32]
 800f1ec:	687a      	ldr	r2, [r7, #4]
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	781b      	ldrb	r3, [r3, #0]
 800f1f2:	009b      	lsls	r3, r3, #2
 800f1f4:	441a      	add	r2, r3
 800f1f6:	6a3b      	ldr	r3, [r7, #32]
 800f1f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f1fc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800f200:	6013      	str	r3, [r2, #0]
 800f202:	e14e      	b.n	800f4a2 <USB_EPStartXfer+0x108e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	78db      	ldrb	r3, [r3, #3]
 800f208:	2b01      	cmp	r3, #1
 800f20a:	f040 8148 	bne.w	800f49e <USB_EPStartXfer+0x108a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800f20e:	683b      	ldr	r3, [r7, #0]
 800f210:	699a      	ldr	r2, [r3, #24]
 800f212:	683b      	ldr	r3, [r7, #0]
 800f214:	691b      	ldr	r3, [r3, #16]
 800f216:	429a      	cmp	r2, r3
 800f218:	d909      	bls.n	800f22e <USB_EPStartXfer+0xe1a>
        {
          len = ep->maxpacket;
 800f21a:	683b      	ldr	r3, [r7, #0]
 800f21c:	691b      	ldr	r3, [r3, #16]
 800f21e:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 800f220:	683b      	ldr	r3, [r7, #0]
 800f222:	699a      	ldr	r2, [r3, #24]
 800f224:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f226:	1ad2      	subs	r2, r2, r3
 800f228:	683b      	ldr	r3, [r7, #0]
 800f22a:	619a      	str	r2, [r3, #24]
 800f22c:	e005      	b.n	800f23a <USB_EPStartXfer+0xe26>
        }
        else
        {
          len = ep->xfer_len;
 800f22e:	683b      	ldr	r3, [r7, #0]
 800f230:	699b      	ldr	r3, [r3, #24]
 800f232:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 800f234:	683b      	ldr	r3, [r7, #0]
 800f236:	2200      	movs	r2, #0
 800f238:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800f23a:	683b      	ldr	r3, [r7, #0]
 800f23c:	785b      	ldrb	r3, [r3, #1]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d16a      	bne.n	800f318 <USB_EPStartXfer+0xf04>
 800f242:	683b      	ldr	r3, [r7, #0]
 800f244:	781b      	ldrb	r3, [r3, #0]
 800f246:	00db      	lsls	r3, r3, #3
 800f248:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f24c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f250:	681a      	ldr	r2, [r3, #0]
 800f252:	683b      	ldr	r3, [r7, #0]
 800f254:	781b      	ldrb	r3, [r3, #0]
 800f256:	00db      	lsls	r3, r3, #3
 800f258:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f25c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f260:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800f264:	601a      	str	r2, [r3, #0]
 800f266:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d112      	bne.n	800f292 <USB_EPStartXfer+0xe7e>
 800f26c:	683b      	ldr	r3, [r7, #0]
 800f26e:	781b      	ldrb	r3, [r3, #0]
 800f270:	00db      	lsls	r3, r3, #3
 800f272:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f276:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f27a:	681a      	ldr	r2, [r3, #0]
 800f27c:	683b      	ldr	r3, [r7, #0]
 800f27e:	781b      	ldrb	r3, [r3, #0]
 800f280:	00db      	lsls	r3, r3, #3
 800f282:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f286:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f28a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f28e:	601a      	str	r2, [r3, #0]
 800f290:	e06a      	b.n	800f368 <USB_EPStartXfer+0xf54>
 800f292:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f294:	2b3e      	cmp	r3, #62	@ 0x3e
 800f296:	d81e      	bhi.n	800f2d6 <USB_EPStartXfer+0xec2>
 800f298:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f29a:	085b      	lsrs	r3, r3, #1
 800f29c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f29e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f2a0:	f003 0301 	and.w	r3, r3, #1
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d002      	beq.n	800f2ae <USB_EPStartXfer+0xe9a>
 800f2a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2aa:	3301      	adds	r3, #1
 800f2ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f2ae:	683b      	ldr	r3, [r7, #0]
 800f2b0:	781b      	ldrb	r3, [r3, #0]
 800f2b2:	00db      	lsls	r3, r3, #3
 800f2b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f2b8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f2bc:	6819      	ldr	r1, [r3, #0]
 800f2be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2c0:	069a      	lsls	r2, r3, #26
 800f2c2:	683b      	ldr	r3, [r7, #0]
 800f2c4:	781b      	ldrb	r3, [r3, #0]
 800f2c6:	00db      	lsls	r3, r3, #3
 800f2c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f2cc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f2d0:	430a      	orrs	r2, r1
 800f2d2:	601a      	str	r2, [r3, #0]
 800f2d4:	e048      	b.n	800f368 <USB_EPStartXfer+0xf54>
 800f2d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f2d8:	095b      	lsrs	r3, r3, #5
 800f2da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f2dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f2de:	f003 031f 	and.w	r3, r3, #31
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d102      	bne.n	800f2ec <USB_EPStartXfer+0xed8>
 800f2e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2e8:	3b01      	subs	r3, #1
 800f2ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f2ec:	683b      	ldr	r3, [r7, #0]
 800f2ee:	781b      	ldrb	r3, [r3, #0]
 800f2f0:	00db      	lsls	r3, r3, #3
 800f2f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f2f6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f2fa:	681a      	ldr	r2, [r3, #0]
 800f2fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2fe:	069b      	lsls	r3, r3, #26
 800f300:	431a      	orrs	r2, r3
 800f302:	683b      	ldr	r3, [r7, #0]
 800f304:	781b      	ldrb	r3, [r3, #0]
 800f306:	00db      	lsls	r3, r3, #3
 800f308:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f30c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f310:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f314:	601a      	str	r2, [r3, #0]
 800f316:	e027      	b.n	800f368 <USB_EPStartXfer+0xf54>
 800f318:	683b      	ldr	r3, [r7, #0]
 800f31a:	785b      	ldrb	r3, [r3, #1]
 800f31c:	2b01      	cmp	r3, #1
 800f31e:	d123      	bne.n	800f368 <USB_EPStartXfer+0xf54>
 800f320:	683b      	ldr	r3, [r7, #0]
 800f322:	781b      	ldrb	r3, [r3, #0]
 800f324:	00db      	lsls	r3, r3, #3
 800f326:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f32a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f32e:	681a      	ldr	r2, [r3, #0]
 800f330:	683b      	ldr	r3, [r7, #0]
 800f332:	781b      	ldrb	r3, [r3, #0]
 800f334:	00db      	lsls	r3, r3, #3
 800f336:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f33a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f33e:	b292      	uxth	r2, r2
 800f340:	601a      	str	r2, [r3, #0]
 800f342:	683b      	ldr	r3, [r7, #0]
 800f344:	781b      	ldrb	r3, [r3, #0]
 800f346:	00db      	lsls	r3, r3, #3
 800f348:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f34c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f350:	6819      	ldr	r1, [r3, #0]
 800f352:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f354:	041a      	lsls	r2, r3, #16
 800f356:	683b      	ldr	r3, [r7, #0]
 800f358:	781b      	ldrb	r3, [r3, #0]
 800f35a:	00db      	lsls	r3, r3, #3
 800f35c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f360:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f364:	430a      	orrs	r2, r1
 800f366:	601a      	str	r2, [r3, #0]
 800f368:	683b      	ldr	r3, [r7, #0]
 800f36a:	785b      	ldrb	r3, [r3, #1]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d16d      	bne.n	800f44c <USB_EPStartXfer+0x1038>
 800f370:	683b      	ldr	r3, [r7, #0]
 800f372:	781b      	ldrb	r3, [r3, #0]
 800f374:	00db      	lsls	r3, r3, #3
 800f376:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f37a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f37e:	685a      	ldr	r2, [r3, #4]
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	781b      	ldrb	r3, [r3, #0]
 800f384:	00db      	lsls	r3, r3, #3
 800f386:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f38a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f38e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800f392:	605a      	str	r2, [r3, #4]
 800f394:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f396:	2b00      	cmp	r3, #0
 800f398:	d112      	bne.n	800f3c0 <USB_EPStartXfer+0xfac>
 800f39a:	683b      	ldr	r3, [r7, #0]
 800f39c:	781b      	ldrb	r3, [r3, #0]
 800f39e:	00db      	lsls	r3, r3, #3
 800f3a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f3a4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f3a8:	685a      	ldr	r2, [r3, #4]
 800f3aa:	683b      	ldr	r3, [r7, #0]
 800f3ac:	781b      	ldrb	r3, [r3, #0]
 800f3ae:	00db      	lsls	r3, r3, #3
 800f3b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f3b4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f3b8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f3bc:	605a      	str	r2, [r3, #4]
 800f3be:	e070      	b.n	800f4a2 <USB_EPStartXfer+0x108e>
 800f3c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f3c2:	2b3e      	cmp	r3, #62	@ 0x3e
 800f3c4:	d81e      	bhi.n	800f404 <USB_EPStartXfer+0xff0>
 800f3c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f3c8:	085b      	lsrs	r3, r3, #1
 800f3ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f3cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f3ce:	f003 0301 	and.w	r3, r3, #1
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d002      	beq.n	800f3dc <USB_EPStartXfer+0xfc8>
 800f3d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3d8:	3301      	adds	r3, #1
 800f3da:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f3dc:	683b      	ldr	r3, [r7, #0]
 800f3de:	781b      	ldrb	r3, [r3, #0]
 800f3e0:	00db      	lsls	r3, r3, #3
 800f3e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f3e6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f3ea:	6859      	ldr	r1, [r3, #4]
 800f3ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3ee:	069a      	lsls	r2, r3, #26
 800f3f0:	683b      	ldr	r3, [r7, #0]
 800f3f2:	781b      	ldrb	r3, [r3, #0]
 800f3f4:	00db      	lsls	r3, r3, #3
 800f3f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f3fa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f3fe:	430a      	orrs	r2, r1
 800f400:	605a      	str	r2, [r3, #4]
 800f402:	e04e      	b.n	800f4a2 <USB_EPStartXfer+0x108e>
 800f404:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f406:	095b      	lsrs	r3, r3, #5
 800f408:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f40a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f40c:	f003 031f 	and.w	r3, r3, #31
 800f410:	2b00      	cmp	r3, #0
 800f412:	d102      	bne.n	800f41a <USB_EPStartXfer+0x1006>
 800f414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f416:	3b01      	subs	r3, #1
 800f418:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	781b      	ldrb	r3, [r3, #0]
 800f41e:	00db      	lsls	r3, r3, #3
 800f420:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f424:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f428:	685a      	ldr	r2, [r3, #4]
 800f42a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f42c:	069b      	lsls	r3, r3, #26
 800f42e:	431a      	orrs	r2, r3
 800f430:	683b      	ldr	r3, [r7, #0]
 800f432:	781b      	ldrb	r3, [r3, #0]
 800f434:	00db      	lsls	r3, r3, #3
 800f436:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f43a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f43e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f442:	605a      	str	r2, [r3, #4]
 800f444:	e02d      	b.n	800f4a2 <USB_EPStartXfer+0x108e>
 800f446:	bf00      	nop
 800f448:	07ff8f8f 	.word	0x07ff8f8f
 800f44c:	683b      	ldr	r3, [r7, #0]
 800f44e:	785b      	ldrb	r3, [r3, #1]
 800f450:	2b01      	cmp	r3, #1
 800f452:	d126      	bne.n	800f4a2 <USB_EPStartXfer+0x108e>
 800f454:	683b      	ldr	r3, [r7, #0]
 800f456:	781b      	ldrb	r3, [r3, #0]
 800f458:	00db      	lsls	r3, r3, #3
 800f45a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f45e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f462:	685a      	ldr	r2, [r3, #4]
 800f464:	683b      	ldr	r3, [r7, #0]
 800f466:	781b      	ldrb	r3, [r3, #0]
 800f468:	00db      	lsls	r3, r3, #3
 800f46a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f46e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f472:	b292      	uxth	r2, r2
 800f474:	605a      	str	r2, [r3, #4]
 800f476:	683b      	ldr	r3, [r7, #0]
 800f478:	781b      	ldrb	r3, [r3, #0]
 800f47a:	00db      	lsls	r3, r3, #3
 800f47c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f480:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f484:	6859      	ldr	r1, [r3, #4]
 800f486:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f488:	041a      	lsls	r2, r3, #16
 800f48a:	683b      	ldr	r3, [r7, #0]
 800f48c:	781b      	ldrb	r3, [r3, #0]
 800f48e:	00db      	lsls	r3, r3, #3
 800f490:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f494:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f498:	430a      	orrs	r2, r1
 800f49a:	605a      	str	r2, [r3, #4]
 800f49c:	e001      	b.n	800f4a2 <USB_EPStartXfer+0x108e>
      }
      else
      {
        return HAL_ERROR;
 800f49e:	2301      	movs	r3, #1
 800f4a0:	e01c      	b.n	800f4dc <USB_EPStartXfer+0x10c8>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f4a2:	687a      	ldr	r2, [r7, #4]
 800f4a4:	683b      	ldr	r3, [r7, #0]
 800f4a6:	781b      	ldrb	r3, [r3, #0]
 800f4a8:	009b      	lsls	r3, r3, #2
 800f4aa:	4413      	add	r3, r2
 800f4ac:	681a      	ldr	r2, [r3, #0]
 800f4ae:	4b0d      	ldr	r3, [pc, #52]	@ (800f4e4 <USB_EPStartXfer+0x10d0>)
 800f4b0:	4013      	ands	r3, r2
 800f4b2:	61fb      	str	r3, [r7, #28]
 800f4b4:	69fb      	ldr	r3, [r7, #28]
 800f4b6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800f4ba:	61fb      	str	r3, [r7, #28]
 800f4bc:	69fb      	ldr	r3, [r7, #28]
 800f4be:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800f4c2:	61fb      	str	r3, [r7, #28]
 800f4c4:	687a      	ldr	r2, [r7, #4]
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	781b      	ldrb	r3, [r3, #0]
 800f4ca:	009b      	lsls	r3, r3, #2
 800f4cc:	441a      	add	r2, r3
 800f4ce:	69fb      	ldr	r3, [r7, #28]
 800f4d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f4d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f4d8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f4da:	2300      	movs	r3, #0
}
 800f4dc:	4618      	mov	r0, r3
 800f4de:	3758      	adds	r7, #88	@ 0x58
 800f4e0:	46bd      	mov	sp, r7
 800f4e2:	bd80      	pop	{r7, pc}
 800f4e4:	07ffbf8f 	.word	0x07ffbf8f

0800f4e8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800f4e8:	b480      	push	{r7}
 800f4ea:	b085      	sub	sp, #20
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
 800f4f0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800f4f2:	683b      	ldr	r3, [r7, #0]
 800f4f4:	785b      	ldrb	r3, [r3, #1]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d018      	beq.n	800f52c <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800f4fa:	687a      	ldr	r2, [r7, #4]
 800f4fc:	683b      	ldr	r3, [r7, #0]
 800f4fe:	781b      	ldrb	r3, [r3, #0]
 800f500:	009b      	lsls	r3, r3, #2
 800f502:	4413      	add	r3, r2
 800f504:	681a      	ldr	r2, [r3, #0]
 800f506:	4b19      	ldr	r3, [pc, #100]	@ (800f56c <USB_EPSetStall+0x84>)
 800f508:	4013      	ands	r3, r2
 800f50a:	60bb      	str	r3, [r7, #8]
 800f50c:	68bb      	ldr	r3, [r7, #8]
 800f50e:	f083 0310 	eor.w	r3, r3, #16
 800f512:	60bb      	str	r3, [r7, #8]
 800f514:	687a      	ldr	r2, [r7, #4]
 800f516:	683b      	ldr	r3, [r7, #0]
 800f518:	781b      	ldrb	r3, [r3, #0]
 800f51a:	009b      	lsls	r3, r3, #2
 800f51c:	441a      	add	r2, r3
 800f51e:	68bb      	ldr	r3, [r7, #8]
 800f520:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f524:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f528:	6013      	str	r3, [r2, #0]
 800f52a:	e017      	b.n	800f55c <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800f52c:	687a      	ldr	r2, [r7, #4]
 800f52e:	683b      	ldr	r3, [r7, #0]
 800f530:	781b      	ldrb	r3, [r3, #0]
 800f532:	009b      	lsls	r3, r3, #2
 800f534:	4413      	add	r3, r2
 800f536:	681a      	ldr	r2, [r3, #0]
 800f538:	4b0d      	ldr	r3, [pc, #52]	@ (800f570 <USB_EPSetStall+0x88>)
 800f53a:	4013      	ands	r3, r2
 800f53c:	60fb      	str	r3, [r7, #12]
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800f544:	60fb      	str	r3, [r7, #12]
 800f546:	687a      	ldr	r2, [r7, #4]
 800f548:	683b      	ldr	r3, [r7, #0]
 800f54a:	781b      	ldrb	r3, [r3, #0]
 800f54c:	009b      	lsls	r3, r3, #2
 800f54e:	441a      	add	r2, r3
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f556:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f55a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f55c:	2300      	movs	r3, #0
}
 800f55e:	4618      	mov	r0, r3
 800f560:	3714      	adds	r7, #20
 800f562:	46bd      	mov	sp, r7
 800f564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f568:	4770      	bx	lr
 800f56a:	bf00      	nop
 800f56c:	07ff8fbf 	.word	0x07ff8fbf
 800f570:	07ffbf8f 	.word	0x07ffbf8f

0800f574 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800f574:	b480      	push	{r7}
 800f576:	b089      	sub	sp, #36	@ 0x24
 800f578:	af00      	add	r7, sp, #0
 800f57a:	6078      	str	r0, [r7, #4]
 800f57c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800f57e:	683b      	ldr	r3, [r7, #0]
 800f580:	7b1b      	ldrb	r3, [r3, #12]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d17c      	bne.n	800f680 <USB_EPClearStall+0x10c>
  {
    if (ep->is_in != 0U)
 800f586:	683b      	ldr	r3, [r7, #0]
 800f588:	785b      	ldrb	r3, [r3, #1]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d03c      	beq.n	800f608 <USB_EPClearStall+0x94>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f58e:	687a      	ldr	r2, [r7, #4]
 800f590:	683b      	ldr	r3, [r7, #0]
 800f592:	781b      	ldrb	r3, [r3, #0]
 800f594:	009b      	lsls	r3, r3, #2
 800f596:	4413      	add	r3, r2
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	613b      	str	r3, [r7, #16]
 800f59c:	693b      	ldr	r3, [r7, #16]
 800f59e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d013      	beq.n	800f5ce <USB_EPClearStall+0x5a>
 800f5a6:	687a      	ldr	r2, [r7, #4]
 800f5a8:	683b      	ldr	r3, [r7, #0]
 800f5aa:	781b      	ldrb	r3, [r3, #0]
 800f5ac:	009b      	lsls	r3, r3, #2
 800f5ae:	4413      	add	r3, r2
 800f5b0:	681a      	ldr	r2, [r3, #0]
 800f5b2:	4b37      	ldr	r3, [pc, #220]	@ (800f690 <USB_EPClearStall+0x11c>)
 800f5b4:	4013      	ands	r3, r2
 800f5b6:	60fb      	str	r3, [r7, #12]
 800f5b8:	687a      	ldr	r2, [r7, #4]
 800f5ba:	683b      	ldr	r3, [r7, #0]
 800f5bc:	781b      	ldrb	r3, [r3, #0]
 800f5be:	009b      	lsls	r3, r3, #2
 800f5c0:	441a      	add	r2, r3
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f5c8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800f5cc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f5ce:	683b      	ldr	r3, [r7, #0]
 800f5d0:	78db      	ldrb	r3, [r3, #3]
 800f5d2:	2b01      	cmp	r3, #1
 800f5d4:	d054      	beq.n	800f680 <USB_EPClearStall+0x10c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f5d6:	687a      	ldr	r2, [r7, #4]
 800f5d8:	683b      	ldr	r3, [r7, #0]
 800f5da:	781b      	ldrb	r3, [r3, #0]
 800f5dc:	009b      	lsls	r3, r3, #2
 800f5de:	4413      	add	r3, r2
 800f5e0:	681a      	ldr	r2, [r3, #0]
 800f5e2:	4b2c      	ldr	r3, [pc, #176]	@ (800f694 <USB_EPClearStall+0x120>)
 800f5e4:	4013      	ands	r3, r2
 800f5e6:	60bb      	str	r3, [r7, #8]
 800f5e8:	68bb      	ldr	r3, [r7, #8]
 800f5ea:	f083 0320 	eor.w	r3, r3, #32
 800f5ee:	60bb      	str	r3, [r7, #8]
 800f5f0:	687a      	ldr	r2, [r7, #4]
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	781b      	ldrb	r3, [r3, #0]
 800f5f6:	009b      	lsls	r3, r3, #2
 800f5f8:	441a      	add	r2, r3
 800f5fa:	68bb      	ldr	r3, [r7, #8]
 800f5fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f600:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f604:	6013      	str	r3, [r2, #0]
 800f606:	e03b      	b.n	800f680 <USB_EPClearStall+0x10c>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f608:	687a      	ldr	r2, [r7, #4]
 800f60a:	683b      	ldr	r3, [r7, #0]
 800f60c:	781b      	ldrb	r3, [r3, #0]
 800f60e:	009b      	lsls	r3, r3, #2
 800f610:	4413      	add	r3, r2
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	61fb      	str	r3, [r7, #28]
 800f616:	69fb      	ldr	r3, [r7, #28]
 800f618:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d013      	beq.n	800f648 <USB_EPClearStall+0xd4>
 800f620:	687a      	ldr	r2, [r7, #4]
 800f622:	683b      	ldr	r3, [r7, #0]
 800f624:	781b      	ldrb	r3, [r3, #0]
 800f626:	009b      	lsls	r3, r3, #2
 800f628:	4413      	add	r3, r2
 800f62a:	681a      	ldr	r2, [r3, #0]
 800f62c:	4b18      	ldr	r3, [pc, #96]	@ (800f690 <USB_EPClearStall+0x11c>)
 800f62e:	4013      	ands	r3, r2
 800f630:	61bb      	str	r3, [r7, #24]
 800f632:	687a      	ldr	r2, [r7, #4]
 800f634:	683b      	ldr	r3, [r7, #0]
 800f636:	781b      	ldrb	r3, [r3, #0]
 800f638:	009b      	lsls	r3, r3, #2
 800f63a:	441a      	add	r2, r3
 800f63c:	69bb      	ldr	r3, [r7, #24]
 800f63e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800f642:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f646:	6013      	str	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f648:	687a      	ldr	r2, [r7, #4]
 800f64a:	683b      	ldr	r3, [r7, #0]
 800f64c:	781b      	ldrb	r3, [r3, #0]
 800f64e:	009b      	lsls	r3, r3, #2
 800f650:	4413      	add	r3, r2
 800f652:	681a      	ldr	r2, [r3, #0]
 800f654:	4b10      	ldr	r3, [pc, #64]	@ (800f698 <USB_EPClearStall+0x124>)
 800f656:	4013      	ands	r3, r2
 800f658:	617b      	str	r3, [r7, #20]
 800f65a:	697b      	ldr	r3, [r7, #20]
 800f65c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800f660:	617b      	str	r3, [r7, #20]
 800f662:	697b      	ldr	r3, [r7, #20]
 800f664:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800f668:	617b      	str	r3, [r7, #20]
 800f66a:	687a      	ldr	r2, [r7, #4]
 800f66c:	683b      	ldr	r3, [r7, #0]
 800f66e:	781b      	ldrb	r3, [r3, #0]
 800f670:	009b      	lsls	r3, r3, #2
 800f672:	441a      	add	r2, r3
 800f674:	697b      	ldr	r3, [r7, #20]
 800f676:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f67a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f67e:	6013      	str	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800f680:	2300      	movs	r3, #0
}
 800f682:	4618      	mov	r0, r3
 800f684:	3724      	adds	r7, #36	@ 0x24
 800f686:	46bd      	mov	sp, r7
 800f688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68c:	4770      	bx	lr
 800f68e:	bf00      	nop
 800f690:	07ff8f8f 	.word	0x07ff8f8f
 800f694:	07ff8fbf 	.word	0x07ff8fbf
 800f698:	07ffbf8f 	.word	0x07ffbf8f

0800f69c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 800f69c:	b480      	push	{r7}
 800f69e:	b083      	sub	sp, #12
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	6078      	str	r0, [r7, #4]
 800f6a4:	460b      	mov	r3, r1
 800f6a6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800f6a8:	78fb      	ldrb	r3, [r7, #3]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d102      	bne.n	800f6b4 <USB_SetDevAddress+0x18>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	2280      	movs	r2, #128	@ 0x80
 800f6b2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800f6b4:	2300      	movs	r3, #0
}
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	370c      	adds	r7, #12
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c0:	4770      	bx	lr

0800f6c2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 800f6c2:	b480      	push	{r7}
 800f6c4:	b083      	sub	sp, #12
 800f6c6:	af00      	add	r7, sp, #0
 800f6c8:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f6ce:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800f6d6:	2300      	movs	r3, #0
}
 800f6d8:	4618      	mov	r0, r3
 800f6da:	370c      	adds	r7, #12
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e2:	4770      	bx	lr

0800f6e4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 800f6e4:	b480      	push	{r7}
 800f6e6:	b083      	sub	sp, #12
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f6f0:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800f6f8:	2300      	movs	r3, #0
}
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	370c      	adds	r7, #12
 800f6fe:	46bd      	mov	sp, r7
 800f700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f704:	4770      	bx	lr

0800f706 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 800f706:	b480      	push	{r7}
 800f708:	b085      	sub	sp, #20
 800f70a:	af00      	add	r7, sp, #0
 800f70c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f712:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800f714:	68fb      	ldr	r3, [r7, #12]
}
 800f716:	4618      	mov	r0, r3
 800f718:	3714      	adds	r7, #20
 800f71a:	46bd      	mov	sp, r7
 800f71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f720:	4770      	bx	lr

0800f722 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800f722:	b480      	push	{r7}
 800f724:	b08b      	sub	sp, #44	@ 0x2c
 800f726:	af00      	add	r7, sp, #0
 800f728:	60f8      	str	r0, [r7, #12]
 800f72a:	60b9      	str	r1, [r7, #8]
 800f72c:	4611      	mov	r1, r2
 800f72e:	461a      	mov	r2, r3
 800f730:	460b      	mov	r3, r1
 800f732:	80fb      	strh	r3, [r7, #6]
 800f734:	4613      	mov	r3, r2
 800f736:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800f738:	88bb      	ldrh	r3, [r7, #4]
 800f73a:	3303      	adds	r3, #3
 800f73c:	089b      	lsrs	r3, r3, #2
 800f73e:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800f740:	88bb      	ldrh	r3, [r7, #4]
 800f742:	f003 0303 	and.w	r3, r3, #3
 800f746:	82fb      	strh	r3, [r7, #22]
  uint8_t *pBuf = pbUsrBuf;
 800f748:	68bb      	ldr	r3, [r7, #8]
 800f74a:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 800f74c:	8afb      	ldrh	r3, [r7, #22]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d002      	beq.n	800f758 <USB_WritePMA+0x36>
  {
    NbWords--;
 800f752:	69bb      	ldr	r3, [r7, #24]
 800f754:	3b01      	subs	r3, #1
 800f756:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800f758:	88fb      	ldrh	r3, [r7, #6]
 800f75a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f75e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f762:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 800f764:	69bb      	ldr	r3, [r7, #24]
 800f766:	623b      	str	r3, [r7, #32]
 800f768:	e015      	b.n	800f796 <USB_WritePMA+0x74>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 800f76a:	693b      	ldr	r3, [r7, #16]
 800f76c:	681a      	ldr	r2, [r3, #0]
 800f76e:	69fb      	ldr	r3, [r7, #28]
 800f770:	601a      	str	r2, [r3, #0]
    pdwVal++;
 800f772:	69fb      	ldr	r3, [r7, #28]
 800f774:	3304      	adds	r3, #4
 800f776:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 800f778:	693b      	ldr	r3, [r7, #16]
 800f77a:	3301      	adds	r3, #1
 800f77c:	613b      	str	r3, [r7, #16]
    pBuf++;
 800f77e:	693b      	ldr	r3, [r7, #16]
 800f780:	3301      	adds	r3, #1
 800f782:	613b      	str	r3, [r7, #16]
    pBuf++;
 800f784:	693b      	ldr	r3, [r7, #16]
 800f786:	3301      	adds	r3, #1
 800f788:	613b      	str	r3, [r7, #16]
    pBuf++;
 800f78a:	693b      	ldr	r3, [r7, #16]
 800f78c:	3301      	adds	r3, #1
 800f78e:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 800f790:	6a3b      	ldr	r3, [r7, #32]
 800f792:	3b01      	subs	r3, #1
 800f794:	623b      	str	r3, [r7, #32]
 800f796:	6a3b      	ldr	r3, [r7, #32]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d1e6      	bne.n	800f76a <USB_WritePMA+0x48>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 800f79c:	8afb      	ldrh	r3, [r7, #22]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d01a      	beq.n	800f7d8 <USB_WritePMA+0xb6>
  {
    WrVal = 0U;
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800f7a6:	693b      	ldr	r3, [r7, #16]
 800f7a8:	781b      	ldrb	r3, [r3, #0]
 800f7aa:	461a      	mov	r2, r3
 800f7ac:	6a3b      	ldr	r3, [r7, #32]
 800f7ae:	00db      	lsls	r3, r3, #3
 800f7b0:	fa02 f303 	lsl.w	r3, r2, r3
 800f7b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f7b6:	4313      	orrs	r3, r2
 800f7b8:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 800f7ba:	6a3b      	ldr	r3, [r7, #32]
 800f7bc:	3301      	adds	r3, #1
 800f7be:	623b      	str	r3, [r7, #32]
      pBuf++;
 800f7c0:	693b      	ldr	r3, [r7, #16]
 800f7c2:	3301      	adds	r3, #1
 800f7c4:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 800f7c6:	8afb      	ldrh	r3, [r7, #22]
 800f7c8:	3b01      	subs	r3, #1
 800f7ca:	82fb      	strh	r3, [r7, #22]
    } while (remaining_bytes != 0U);
 800f7cc:	8afb      	ldrh	r3, [r7, #22]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d1e9      	bne.n	800f7a6 <USB_WritePMA+0x84>

    *pdwVal = WrVal;
 800f7d2:	69fb      	ldr	r3, [r7, #28]
 800f7d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f7d6:	601a      	str	r2, [r3, #0]
  }
}
 800f7d8:	bf00      	nop
 800f7da:	372c      	adds	r7, #44	@ 0x2c
 800f7dc:	46bd      	mov	sp, r7
 800f7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e2:	4770      	bx	lr

0800f7e4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800f7e4:	b480      	push	{r7}
 800f7e6:	b08b      	sub	sp, #44	@ 0x2c
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	60f8      	str	r0, [r7, #12]
 800f7ec:	60b9      	str	r1, [r7, #8]
 800f7ee:	4611      	mov	r1, r2
 800f7f0:	461a      	mov	r2, r3
 800f7f2:	460b      	mov	r3, r1
 800f7f4:	80fb      	strh	r3, [r7, #6]
 800f7f6:	4613      	mov	r3, r2
 800f7f8:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800f7fa:	88bb      	ldrh	r3, [r7, #4]
 800f7fc:	3303      	adds	r3, #3
 800f7fe:	089b      	lsrs	r3, r3, #2
 800f800:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800f802:	88bb      	ldrh	r3, [r7, #4]
 800f804:	f003 0303 	and.w	r3, r3, #3
 800f808:	837b      	strh	r3, [r7, #26]
  uint8_t *pBuf = pbUsrBuf;
 800f80a:	68bb      	ldr	r3, [r7, #8]
 800f80c:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800f80e:	88fb      	ldrh	r3, [r7, #6]
 800f810:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f814:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f818:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 800f81a:	8b7b      	ldrh	r3, [r7, #26]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d002      	beq.n	800f826 <USB_ReadPMA+0x42>
  {
    NbWords--;
 800f820:	69fb      	ldr	r3, [r7, #28]
 800f822:	3b01      	subs	r3, #1
 800f824:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 800f826:	69fb      	ldr	r3, [r7, #28]
 800f828:	627b      	str	r3, [r7, #36]	@ 0x24
 800f82a:	e015      	b.n	800f858 <USB_ReadPMA+0x74>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 800f82c:	6a3b      	ldr	r3, [r7, #32]
 800f82e:	681a      	ldr	r2, [r3, #0]
 800f830:	697b      	ldr	r3, [r7, #20]
 800f832:	601a      	str	r2, [r3, #0]

    pdwVal++;
 800f834:	6a3b      	ldr	r3, [r7, #32]
 800f836:	3304      	adds	r3, #4
 800f838:	623b      	str	r3, [r7, #32]
    pBuf++;
 800f83a:	697b      	ldr	r3, [r7, #20]
 800f83c:	3301      	adds	r3, #1
 800f83e:	617b      	str	r3, [r7, #20]
    pBuf++;
 800f840:	697b      	ldr	r3, [r7, #20]
 800f842:	3301      	adds	r3, #1
 800f844:	617b      	str	r3, [r7, #20]
    pBuf++;
 800f846:	697b      	ldr	r3, [r7, #20]
 800f848:	3301      	adds	r3, #1
 800f84a:	617b      	str	r3, [r7, #20]
    pBuf++;
 800f84c:	697b      	ldr	r3, [r7, #20]
 800f84e:	3301      	adds	r3, #1
 800f850:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 800f852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f854:	3b01      	subs	r3, #1
 800f856:	627b      	str	r3, [r7, #36]	@ 0x24
 800f858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d1e6      	bne.n	800f82c <USB_ReadPMA+0x48>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 800f85e:	8b7b      	ldrh	r3, [r7, #26]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d017      	beq.n	800f894 <USB_ReadPMA+0xb0>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 800f864:	6a3b      	ldr	r3, [r7, #32]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 800f86a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f86c:	b2db      	uxtb	r3, r3
 800f86e:	00db      	lsls	r3, r3, #3
 800f870:	693a      	ldr	r2, [r7, #16]
 800f872:	fa22 f303 	lsr.w	r3, r2, r3
 800f876:	b2da      	uxtb	r2, r3
 800f878:	697b      	ldr	r3, [r7, #20]
 800f87a:	701a      	strb	r2, [r3, #0]
      count++;
 800f87c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f87e:	3301      	adds	r3, #1
 800f880:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 800f882:	697b      	ldr	r3, [r7, #20]
 800f884:	3301      	adds	r3, #1
 800f886:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 800f888:	8b7b      	ldrh	r3, [r7, #26]
 800f88a:	3b01      	subs	r3, #1
 800f88c:	837b      	strh	r3, [r7, #26]
    } while (remaining_bytes != 0U);
 800f88e:	8b7b      	ldrh	r3, [r7, #26]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d1ea      	bne.n	800f86a <USB_ReadPMA+0x86>
  }
}
 800f894:	bf00      	nop
 800f896:	372c      	adds	r7, #44	@ 0x2c
 800f898:	46bd      	mov	sp, r7
 800f89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f89e:	4770      	bx	lr

0800f8a0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b084      	sub	sp, #16
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
 800f8a8:	460b      	mov	r3, r1
 800f8aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f8ac:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800f8b0:	f001 f8fa 	bl	8010aa8 <USBD_static_malloc>
 800f8b4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d109      	bne.n	800f8d0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	32b0      	adds	r2, #176	@ 0xb0
 800f8c6:	2100      	movs	r1, #0
 800f8c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800f8cc:	2302      	movs	r3, #2
 800f8ce:	e0d4      	b.n	800fa7a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800f8d0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800f8d4:	2100      	movs	r1, #0
 800f8d6:	68f8      	ldr	r0, [r7, #12]
 800f8d8:	f002 fe0c 	bl	80124f4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	32b0      	adds	r2, #176	@ 0xb0
 800f8e6:	68f9      	ldr	r1, [r7, #12]
 800f8e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	32b0      	adds	r2, #176	@ 0xb0
 800f8f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	7c1b      	ldrb	r3, [r3, #16]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d138      	bne.n	800f97a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f908:	4b5e      	ldr	r3, [pc, #376]	@ (800fa84 <USBD_CDC_Init+0x1e4>)
 800f90a:	7819      	ldrb	r1, [r3, #0]
 800f90c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f910:	2202      	movs	r2, #2
 800f912:	6878      	ldr	r0, [r7, #4]
 800f914:	f000 ffcf 	bl	80108b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f918:	4b5a      	ldr	r3, [pc, #360]	@ (800fa84 <USBD_CDC_Init+0x1e4>)
 800f91a:	781b      	ldrb	r3, [r3, #0]
 800f91c:	f003 020f 	and.w	r2, r3, #15
 800f920:	6879      	ldr	r1, [r7, #4]
 800f922:	4613      	mov	r3, r2
 800f924:	009b      	lsls	r3, r3, #2
 800f926:	4413      	add	r3, r2
 800f928:	009b      	lsls	r3, r3, #2
 800f92a:	440b      	add	r3, r1
 800f92c:	3324      	adds	r3, #36	@ 0x24
 800f92e:	2201      	movs	r2, #1
 800f930:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f932:	4b55      	ldr	r3, [pc, #340]	@ (800fa88 <USBD_CDC_Init+0x1e8>)
 800f934:	7819      	ldrb	r1, [r3, #0]
 800f936:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f93a:	2202      	movs	r2, #2
 800f93c:	6878      	ldr	r0, [r7, #4]
 800f93e:	f000 ffba 	bl	80108b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f942:	4b51      	ldr	r3, [pc, #324]	@ (800fa88 <USBD_CDC_Init+0x1e8>)
 800f944:	781b      	ldrb	r3, [r3, #0]
 800f946:	f003 020f 	and.w	r2, r3, #15
 800f94a:	6879      	ldr	r1, [r7, #4]
 800f94c:	4613      	mov	r3, r2
 800f94e:	009b      	lsls	r3, r3, #2
 800f950:	4413      	add	r3, r2
 800f952:	009b      	lsls	r3, r3, #2
 800f954:	440b      	add	r3, r1
 800f956:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f95a:	2201      	movs	r2, #1
 800f95c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f95e:	4b4b      	ldr	r3, [pc, #300]	@ (800fa8c <USBD_CDC_Init+0x1ec>)
 800f960:	781b      	ldrb	r3, [r3, #0]
 800f962:	f003 020f 	and.w	r2, r3, #15
 800f966:	6879      	ldr	r1, [r7, #4]
 800f968:	4613      	mov	r3, r2
 800f96a:	009b      	lsls	r3, r3, #2
 800f96c:	4413      	add	r3, r2
 800f96e:	009b      	lsls	r3, r3, #2
 800f970:	440b      	add	r3, r1
 800f972:	3326      	adds	r3, #38	@ 0x26
 800f974:	2210      	movs	r2, #16
 800f976:	801a      	strh	r2, [r3, #0]
 800f978:	e035      	b.n	800f9e6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f97a:	4b42      	ldr	r3, [pc, #264]	@ (800fa84 <USBD_CDC_Init+0x1e4>)
 800f97c:	7819      	ldrb	r1, [r3, #0]
 800f97e:	2340      	movs	r3, #64	@ 0x40
 800f980:	2202      	movs	r2, #2
 800f982:	6878      	ldr	r0, [r7, #4]
 800f984:	f000 ff97 	bl	80108b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f988:	4b3e      	ldr	r3, [pc, #248]	@ (800fa84 <USBD_CDC_Init+0x1e4>)
 800f98a:	781b      	ldrb	r3, [r3, #0]
 800f98c:	f003 020f 	and.w	r2, r3, #15
 800f990:	6879      	ldr	r1, [r7, #4]
 800f992:	4613      	mov	r3, r2
 800f994:	009b      	lsls	r3, r3, #2
 800f996:	4413      	add	r3, r2
 800f998:	009b      	lsls	r3, r3, #2
 800f99a:	440b      	add	r3, r1
 800f99c:	3324      	adds	r3, #36	@ 0x24
 800f99e:	2201      	movs	r2, #1
 800f9a0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f9a2:	4b39      	ldr	r3, [pc, #228]	@ (800fa88 <USBD_CDC_Init+0x1e8>)
 800f9a4:	7819      	ldrb	r1, [r3, #0]
 800f9a6:	2340      	movs	r3, #64	@ 0x40
 800f9a8:	2202      	movs	r2, #2
 800f9aa:	6878      	ldr	r0, [r7, #4]
 800f9ac:	f000 ff83 	bl	80108b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f9b0:	4b35      	ldr	r3, [pc, #212]	@ (800fa88 <USBD_CDC_Init+0x1e8>)
 800f9b2:	781b      	ldrb	r3, [r3, #0]
 800f9b4:	f003 020f 	and.w	r2, r3, #15
 800f9b8:	6879      	ldr	r1, [r7, #4]
 800f9ba:	4613      	mov	r3, r2
 800f9bc:	009b      	lsls	r3, r3, #2
 800f9be:	4413      	add	r3, r2
 800f9c0:	009b      	lsls	r3, r3, #2
 800f9c2:	440b      	add	r3, r1
 800f9c4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f9c8:	2201      	movs	r2, #1
 800f9ca:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800f9cc:	4b2f      	ldr	r3, [pc, #188]	@ (800fa8c <USBD_CDC_Init+0x1ec>)
 800f9ce:	781b      	ldrb	r3, [r3, #0]
 800f9d0:	f003 020f 	and.w	r2, r3, #15
 800f9d4:	6879      	ldr	r1, [r7, #4]
 800f9d6:	4613      	mov	r3, r2
 800f9d8:	009b      	lsls	r3, r3, #2
 800f9da:	4413      	add	r3, r2
 800f9dc:	009b      	lsls	r3, r3, #2
 800f9de:	440b      	add	r3, r1
 800f9e0:	3326      	adds	r3, #38	@ 0x26
 800f9e2:	2210      	movs	r2, #16
 800f9e4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f9e6:	4b29      	ldr	r3, [pc, #164]	@ (800fa8c <USBD_CDC_Init+0x1ec>)
 800f9e8:	7819      	ldrb	r1, [r3, #0]
 800f9ea:	2308      	movs	r3, #8
 800f9ec:	2203      	movs	r2, #3
 800f9ee:	6878      	ldr	r0, [r7, #4]
 800f9f0:	f000 ff61 	bl	80108b6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800f9f4:	4b25      	ldr	r3, [pc, #148]	@ (800fa8c <USBD_CDC_Init+0x1ec>)
 800f9f6:	781b      	ldrb	r3, [r3, #0]
 800f9f8:	f003 020f 	and.w	r2, r3, #15
 800f9fc:	6879      	ldr	r1, [r7, #4]
 800f9fe:	4613      	mov	r3, r2
 800fa00:	009b      	lsls	r3, r3, #2
 800fa02:	4413      	add	r3, r2
 800fa04:	009b      	lsls	r3, r3, #2
 800fa06:	440b      	add	r3, r1
 800fa08:	3324      	adds	r3, #36	@ 0x24
 800fa0a:	2201      	movs	r2, #1
 800fa0c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	2200      	movs	r2, #0
 800fa12:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fa1c:	687a      	ldr	r2, [r7, #4]
 800fa1e:	33b0      	adds	r3, #176	@ 0xb0
 800fa20:	009b      	lsls	r3, r3, #2
 800fa22:	4413      	add	r3, r2
 800fa24:	685b      	ldr	r3, [r3, #4]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	2200      	movs	r2, #0
 800fa2e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	2200      	movs	r2, #0
 800fa36:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d101      	bne.n	800fa48 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800fa44:	2302      	movs	r3, #2
 800fa46:	e018      	b.n	800fa7a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	7c1b      	ldrb	r3, [r3, #16]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d10a      	bne.n	800fa66 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fa50:	4b0d      	ldr	r3, [pc, #52]	@ (800fa88 <USBD_CDC_Init+0x1e8>)
 800fa52:	7819      	ldrb	r1, [r3, #0]
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800fa5a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fa5e:	6878      	ldr	r0, [r7, #4]
 800fa60:	f000 fff4 	bl	8010a4c <USBD_LL_PrepareReceive>
 800fa64:	e008      	b.n	800fa78 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fa66:	4b08      	ldr	r3, [pc, #32]	@ (800fa88 <USBD_CDC_Init+0x1e8>)
 800fa68:	7819      	ldrb	r1, [r3, #0]
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800fa70:	2340      	movs	r3, #64	@ 0x40
 800fa72:	6878      	ldr	r0, [r7, #4]
 800fa74:	f000 ffea 	bl	8010a4c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800fa78:	2300      	movs	r3, #0
}
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	3710      	adds	r7, #16
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	bd80      	pop	{r7, pc}
 800fa82:	bf00      	nop
 800fa84:	200000b3 	.word	0x200000b3
 800fa88:	200000b4 	.word	0x200000b4
 800fa8c:	200000b5 	.word	0x200000b5

0800fa90 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b082      	sub	sp, #8
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	6078      	str	r0, [r7, #4]
 800fa98:	460b      	mov	r3, r1
 800fa9a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800fa9c:	4b3a      	ldr	r3, [pc, #232]	@ (800fb88 <USBD_CDC_DeInit+0xf8>)
 800fa9e:	781b      	ldrb	r3, [r3, #0]
 800faa0:	4619      	mov	r1, r3
 800faa2:	6878      	ldr	r0, [r7, #4]
 800faa4:	f000 ff27 	bl	80108f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800faa8:	4b37      	ldr	r3, [pc, #220]	@ (800fb88 <USBD_CDC_DeInit+0xf8>)
 800faaa:	781b      	ldrb	r3, [r3, #0]
 800faac:	f003 020f 	and.w	r2, r3, #15
 800fab0:	6879      	ldr	r1, [r7, #4]
 800fab2:	4613      	mov	r3, r2
 800fab4:	009b      	lsls	r3, r3, #2
 800fab6:	4413      	add	r3, r2
 800fab8:	009b      	lsls	r3, r3, #2
 800faba:	440b      	add	r3, r1
 800fabc:	3324      	adds	r3, #36	@ 0x24
 800fabe:	2200      	movs	r2, #0
 800fac0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800fac2:	4b32      	ldr	r3, [pc, #200]	@ (800fb8c <USBD_CDC_DeInit+0xfc>)
 800fac4:	781b      	ldrb	r3, [r3, #0]
 800fac6:	4619      	mov	r1, r3
 800fac8:	6878      	ldr	r0, [r7, #4]
 800faca:	f000 ff14 	bl	80108f6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800face:	4b2f      	ldr	r3, [pc, #188]	@ (800fb8c <USBD_CDC_DeInit+0xfc>)
 800fad0:	781b      	ldrb	r3, [r3, #0]
 800fad2:	f003 020f 	and.w	r2, r3, #15
 800fad6:	6879      	ldr	r1, [r7, #4]
 800fad8:	4613      	mov	r3, r2
 800fada:	009b      	lsls	r3, r3, #2
 800fadc:	4413      	add	r3, r2
 800fade:	009b      	lsls	r3, r3, #2
 800fae0:	440b      	add	r3, r1
 800fae2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fae6:	2200      	movs	r2, #0
 800fae8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800faea:	4b29      	ldr	r3, [pc, #164]	@ (800fb90 <USBD_CDC_DeInit+0x100>)
 800faec:	781b      	ldrb	r3, [r3, #0]
 800faee:	4619      	mov	r1, r3
 800faf0:	6878      	ldr	r0, [r7, #4]
 800faf2:	f000 ff00 	bl	80108f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800faf6:	4b26      	ldr	r3, [pc, #152]	@ (800fb90 <USBD_CDC_DeInit+0x100>)
 800faf8:	781b      	ldrb	r3, [r3, #0]
 800fafa:	f003 020f 	and.w	r2, r3, #15
 800fafe:	6879      	ldr	r1, [r7, #4]
 800fb00:	4613      	mov	r3, r2
 800fb02:	009b      	lsls	r3, r3, #2
 800fb04:	4413      	add	r3, r2
 800fb06:	009b      	lsls	r3, r3, #2
 800fb08:	440b      	add	r3, r1
 800fb0a:	3324      	adds	r3, #36	@ 0x24
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800fb10:	4b1f      	ldr	r3, [pc, #124]	@ (800fb90 <USBD_CDC_DeInit+0x100>)
 800fb12:	781b      	ldrb	r3, [r3, #0]
 800fb14:	f003 020f 	and.w	r2, r3, #15
 800fb18:	6879      	ldr	r1, [r7, #4]
 800fb1a:	4613      	mov	r3, r2
 800fb1c:	009b      	lsls	r3, r3, #2
 800fb1e:	4413      	add	r3, r2
 800fb20:	009b      	lsls	r3, r3, #2
 800fb22:	440b      	add	r3, r1
 800fb24:	3326      	adds	r3, #38	@ 0x26
 800fb26:	2200      	movs	r2, #0
 800fb28:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	32b0      	adds	r2, #176	@ 0xb0
 800fb34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d01f      	beq.n	800fb7c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fb42:	687a      	ldr	r2, [r7, #4]
 800fb44:	33b0      	adds	r3, #176	@ 0xb0
 800fb46:	009b      	lsls	r3, r3, #2
 800fb48:	4413      	add	r3, r2
 800fb4a:	685b      	ldr	r3, [r3, #4]
 800fb4c:	685b      	ldr	r3, [r3, #4]
 800fb4e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	32b0      	adds	r2, #176	@ 0xb0
 800fb5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb5e:	4618      	mov	r0, r3
 800fb60:	f000 ffb0 	bl	8010ac4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	32b0      	adds	r2, #176	@ 0xb0
 800fb6e:	2100      	movs	r1, #0
 800fb70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	2200      	movs	r2, #0
 800fb78:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800fb7c:	2300      	movs	r3, #0
}
 800fb7e:	4618      	mov	r0, r3
 800fb80:	3708      	adds	r7, #8
 800fb82:	46bd      	mov	sp, r7
 800fb84:	bd80      	pop	{r7, pc}
 800fb86:	bf00      	nop
 800fb88:	200000b3 	.word	0x200000b3
 800fb8c:	200000b4 	.word	0x200000b4
 800fb90:	200000b5 	.word	0x200000b5

0800fb94 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b086      	sub	sp, #24
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	6078      	str	r0, [r7, #4]
 800fb9c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	32b0      	adds	r2, #176	@ 0xb0
 800fba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800fbae:	2300      	movs	r3, #0
 800fbb0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800fbba:	693b      	ldr	r3, [r7, #16]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d101      	bne.n	800fbc4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800fbc0:	2303      	movs	r3, #3
 800fbc2:	e0bf      	b.n	800fd44 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fbc4:	683b      	ldr	r3, [r7, #0]
 800fbc6:	781b      	ldrb	r3, [r3, #0]
 800fbc8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d050      	beq.n	800fc72 <USBD_CDC_Setup+0xde>
 800fbd0:	2b20      	cmp	r3, #32
 800fbd2:	f040 80af 	bne.w	800fd34 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800fbd6:	683b      	ldr	r3, [r7, #0]
 800fbd8:	88db      	ldrh	r3, [r3, #6]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d03a      	beq.n	800fc54 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800fbde:	683b      	ldr	r3, [r7, #0]
 800fbe0:	781b      	ldrb	r3, [r3, #0]
 800fbe2:	b25b      	sxtb	r3, r3
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	da1b      	bge.n	800fc20 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fbee:	687a      	ldr	r2, [r7, #4]
 800fbf0:	33b0      	adds	r3, #176	@ 0xb0
 800fbf2:	009b      	lsls	r3, r3, #2
 800fbf4:	4413      	add	r3, r2
 800fbf6:	685b      	ldr	r3, [r3, #4]
 800fbf8:	689b      	ldr	r3, [r3, #8]
 800fbfa:	683a      	ldr	r2, [r7, #0]
 800fbfc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800fbfe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800fc00:	683a      	ldr	r2, [r7, #0]
 800fc02:	88d2      	ldrh	r2, [r2, #6]
 800fc04:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800fc06:	683b      	ldr	r3, [r7, #0]
 800fc08:	88db      	ldrh	r3, [r3, #6]
 800fc0a:	2b07      	cmp	r3, #7
 800fc0c:	bf28      	it	cs
 800fc0e:	2307      	movcs	r3, #7
 800fc10:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800fc12:	693b      	ldr	r3, [r7, #16]
 800fc14:	89fa      	ldrh	r2, [r7, #14]
 800fc16:	4619      	mov	r1, r3
 800fc18:	6878      	ldr	r0, [r7, #4]
 800fc1a:	f002 fa46 	bl	80120aa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800fc1e:	e090      	b.n	800fd42 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800fc20:	683b      	ldr	r3, [r7, #0]
 800fc22:	785a      	ldrb	r2, [r3, #1]
 800fc24:	693b      	ldr	r3, [r7, #16]
 800fc26:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800fc2a:	683b      	ldr	r3, [r7, #0]
 800fc2c:	88db      	ldrh	r3, [r3, #6]
 800fc2e:	2b3f      	cmp	r3, #63	@ 0x3f
 800fc30:	d803      	bhi.n	800fc3a <USBD_CDC_Setup+0xa6>
 800fc32:	683b      	ldr	r3, [r7, #0]
 800fc34:	88db      	ldrh	r3, [r3, #6]
 800fc36:	b2da      	uxtb	r2, r3
 800fc38:	e000      	b.n	800fc3c <USBD_CDC_Setup+0xa8>
 800fc3a:	2240      	movs	r2, #64	@ 0x40
 800fc3c:	693b      	ldr	r3, [r7, #16]
 800fc3e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800fc42:	6939      	ldr	r1, [r7, #16]
 800fc44:	693b      	ldr	r3, [r7, #16]
 800fc46:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800fc4a:	461a      	mov	r2, r3
 800fc4c:	6878      	ldr	r0, [r7, #4]
 800fc4e:	f002 fa58 	bl	8012102 <USBD_CtlPrepareRx>
      break;
 800fc52:	e076      	b.n	800fd42 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fc5a:	687a      	ldr	r2, [r7, #4]
 800fc5c:	33b0      	adds	r3, #176	@ 0xb0
 800fc5e:	009b      	lsls	r3, r3, #2
 800fc60:	4413      	add	r3, r2
 800fc62:	685b      	ldr	r3, [r3, #4]
 800fc64:	689b      	ldr	r3, [r3, #8]
 800fc66:	683a      	ldr	r2, [r7, #0]
 800fc68:	7850      	ldrb	r0, [r2, #1]
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	6839      	ldr	r1, [r7, #0]
 800fc6e:	4798      	blx	r3
      break;
 800fc70:	e067      	b.n	800fd42 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fc72:	683b      	ldr	r3, [r7, #0]
 800fc74:	785b      	ldrb	r3, [r3, #1]
 800fc76:	2b0b      	cmp	r3, #11
 800fc78:	d851      	bhi.n	800fd1e <USBD_CDC_Setup+0x18a>
 800fc7a:	a201      	add	r2, pc, #4	@ (adr r2, 800fc80 <USBD_CDC_Setup+0xec>)
 800fc7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc80:	0800fcb1 	.word	0x0800fcb1
 800fc84:	0800fd2d 	.word	0x0800fd2d
 800fc88:	0800fd1f 	.word	0x0800fd1f
 800fc8c:	0800fd1f 	.word	0x0800fd1f
 800fc90:	0800fd1f 	.word	0x0800fd1f
 800fc94:	0800fd1f 	.word	0x0800fd1f
 800fc98:	0800fd1f 	.word	0x0800fd1f
 800fc9c:	0800fd1f 	.word	0x0800fd1f
 800fca0:	0800fd1f 	.word	0x0800fd1f
 800fca4:	0800fd1f 	.word	0x0800fd1f
 800fca8:	0800fcdb 	.word	0x0800fcdb
 800fcac:	0800fd05 	.word	0x0800fd05
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fcb6:	b2db      	uxtb	r3, r3
 800fcb8:	2b03      	cmp	r3, #3
 800fcba:	d107      	bne.n	800fccc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800fcbc:	f107 030a 	add.w	r3, r7, #10
 800fcc0:	2202      	movs	r2, #2
 800fcc2:	4619      	mov	r1, r3
 800fcc4:	6878      	ldr	r0, [r7, #4]
 800fcc6:	f002 f9f0 	bl	80120aa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800fcca:	e032      	b.n	800fd32 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800fccc:	6839      	ldr	r1, [r7, #0]
 800fcce:	6878      	ldr	r0, [r7, #4]
 800fcd0:	f002 f86d 	bl	8011dae <USBD_CtlError>
            ret = USBD_FAIL;
 800fcd4:	2303      	movs	r3, #3
 800fcd6:	75fb      	strb	r3, [r7, #23]
          break;
 800fcd8:	e02b      	b.n	800fd32 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fce0:	b2db      	uxtb	r3, r3
 800fce2:	2b03      	cmp	r3, #3
 800fce4:	d107      	bne.n	800fcf6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800fce6:	f107 030d 	add.w	r3, r7, #13
 800fcea:	2201      	movs	r2, #1
 800fcec:	4619      	mov	r1, r3
 800fcee:	6878      	ldr	r0, [r7, #4]
 800fcf0:	f002 f9db 	bl	80120aa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800fcf4:	e01d      	b.n	800fd32 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800fcf6:	6839      	ldr	r1, [r7, #0]
 800fcf8:	6878      	ldr	r0, [r7, #4]
 800fcfa:	f002 f858 	bl	8011dae <USBD_CtlError>
            ret = USBD_FAIL;
 800fcfe:	2303      	movs	r3, #3
 800fd00:	75fb      	strb	r3, [r7, #23]
          break;
 800fd02:	e016      	b.n	800fd32 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fd0a:	b2db      	uxtb	r3, r3
 800fd0c:	2b03      	cmp	r3, #3
 800fd0e:	d00f      	beq.n	800fd30 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800fd10:	6839      	ldr	r1, [r7, #0]
 800fd12:	6878      	ldr	r0, [r7, #4]
 800fd14:	f002 f84b 	bl	8011dae <USBD_CtlError>
            ret = USBD_FAIL;
 800fd18:	2303      	movs	r3, #3
 800fd1a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800fd1c:	e008      	b.n	800fd30 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800fd1e:	6839      	ldr	r1, [r7, #0]
 800fd20:	6878      	ldr	r0, [r7, #4]
 800fd22:	f002 f844 	bl	8011dae <USBD_CtlError>
          ret = USBD_FAIL;
 800fd26:	2303      	movs	r3, #3
 800fd28:	75fb      	strb	r3, [r7, #23]
          break;
 800fd2a:	e002      	b.n	800fd32 <USBD_CDC_Setup+0x19e>
          break;
 800fd2c:	bf00      	nop
 800fd2e:	e008      	b.n	800fd42 <USBD_CDC_Setup+0x1ae>
          break;
 800fd30:	bf00      	nop
      }
      break;
 800fd32:	e006      	b.n	800fd42 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800fd34:	6839      	ldr	r1, [r7, #0]
 800fd36:	6878      	ldr	r0, [r7, #4]
 800fd38:	f002 f839 	bl	8011dae <USBD_CtlError>
      ret = USBD_FAIL;
 800fd3c:	2303      	movs	r3, #3
 800fd3e:	75fb      	strb	r3, [r7, #23]
      break;
 800fd40:	bf00      	nop
  }

  return (uint8_t)ret;
 800fd42:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd44:	4618      	mov	r0, r3
 800fd46:	3718      	adds	r7, #24
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	bd80      	pop	{r7, pc}

0800fd4c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	b084      	sub	sp, #16
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]
 800fd54:	460b      	mov	r3, r1
 800fd56:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fd5e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	32b0      	adds	r2, #176	@ 0xb0
 800fd6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d101      	bne.n	800fd76 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800fd72:	2303      	movs	r3, #3
 800fd74:	e065      	b.n	800fe42 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	32b0      	adds	r2, #176	@ 0xb0
 800fd80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd84:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800fd86:	78fb      	ldrb	r3, [r7, #3]
 800fd88:	f003 020f 	and.w	r2, r3, #15
 800fd8c:	6879      	ldr	r1, [r7, #4]
 800fd8e:	4613      	mov	r3, r2
 800fd90:	009b      	lsls	r3, r3, #2
 800fd92:	4413      	add	r3, r2
 800fd94:	009b      	lsls	r3, r3, #2
 800fd96:	440b      	add	r3, r1
 800fd98:	3318      	adds	r3, #24
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d02f      	beq.n	800fe00 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800fda0:	78fb      	ldrb	r3, [r7, #3]
 800fda2:	f003 020f 	and.w	r2, r3, #15
 800fda6:	6879      	ldr	r1, [r7, #4]
 800fda8:	4613      	mov	r3, r2
 800fdaa:	009b      	lsls	r3, r3, #2
 800fdac:	4413      	add	r3, r2
 800fdae:	009b      	lsls	r3, r3, #2
 800fdb0:	440b      	add	r3, r1
 800fdb2:	3318      	adds	r3, #24
 800fdb4:	681a      	ldr	r2, [r3, #0]
 800fdb6:	78fb      	ldrb	r3, [r7, #3]
 800fdb8:	f003 010f 	and.w	r1, r3, #15
 800fdbc:	68f8      	ldr	r0, [r7, #12]
 800fdbe:	460b      	mov	r3, r1
 800fdc0:	009b      	lsls	r3, r3, #2
 800fdc2:	440b      	add	r3, r1
 800fdc4:	00db      	lsls	r3, r3, #3
 800fdc6:	4403      	add	r3, r0
 800fdc8:	3324      	adds	r3, #36	@ 0x24
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	fbb2 f1f3 	udiv	r1, r2, r3
 800fdd0:	fb01 f303 	mul.w	r3, r1, r3
 800fdd4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d112      	bne.n	800fe00 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800fdda:	78fb      	ldrb	r3, [r7, #3]
 800fddc:	f003 020f 	and.w	r2, r3, #15
 800fde0:	6879      	ldr	r1, [r7, #4]
 800fde2:	4613      	mov	r3, r2
 800fde4:	009b      	lsls	r3, r3, #2
 800fde6:	4413      	add	r3, r2
 800fde8:	009b      	lsls	r3, r3, #2
 800fdea:	440b      	add	r3, r1
 800fdec:	3318      	adds	r3, #24
 800fdee:	2200      	movs	r2, #0
 800fdf0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800fdf2:	78f9      	ldrb	r1, [r7, #3]
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	6878      	ldr	r0, [r7, #4]
 800fdfa:	f000 fe0c 	bl	8010a16 <USBD_LL_Transmit>
 800fdfe:	e01f      	b.n	800fe40 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800fe00:	68bb      	ldr	r3, [r7, #8]
 800fe02:	2200      	movs	r2, #0
 800fe04:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fe0e:	687a      	ldr	r2, [r7, #4]
 800fe10:	33b0      	adds	r3, #176	@ 0xb0
 800fe12:	009b      	lsls	r3, r3, #2
 800fe14:	4413      	add	r3, r2
 800fe16:	685b      	ldr	r3, [r3, #4]
 800fe18:	691b      	ldr	r3, [r3, #16]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d010      	beq.n	800fe40 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fe24:	687a      	ldr	r2, [r7, #4]
 800fe26:	33b0      	adds	r3, #176	@ 0xb0
 800fe28:	009b      	lsls	r3, r3, #2
 800fe2a:	4413      	add	r3, r2
 800fe2c:	685b      	ldr	r3, [r3, #4]
 800fe2e:	691b      	ldr	r3, [r3, #16]
 800fe30:	68ba      	ldr	r2, [r7, #8]
 800fe32:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800fe36:	68ba      	ldr	r2, [r7, #8]
 800fe38:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800fe3c:	78fa      	ldrb	r2, [r7, #3]
 800fe3e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800fe40:	2300      	movs	r3, #0
}
 800fe42:	4618      	mov	r0, r3
 800fe44:	3710      	adds	r7, #16
 800fe46:	46bd      	mov	sp, r7
 800fe48:	bd80      	pop	{r7, pc}

0800fe4a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fe4a:	b580      	push	{r7, lr}
 800fe4c:	b084      	sub	sp, #16
 800fe4e:	af00      	add	r7, sp, #0
 800fe50:	6078      	str	r0, [r7, #4]
 800fe52:	460b      	mov	r3, r1
 800fe54:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	32b0      	adds	r2, #176	@ 0xb0
 800fe60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe64:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	32b0      	adds	r2, #176	@ 0xb0
 800fe70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d101      	bne.n	800fe7c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800fe78:	2303      	movs	r3, #3
 800fe7a:	e01a      	b.n	800feb2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800fe7c:	78fb      	ldrb	r3, [r7, #3]
 800fe7e:	4619      	mov	r1, r3
 800fe80:	6878      	ldr	r0, [r7, #4]
 800fe82:	f000 fdfe 	bl	8010a82 <USBD_LL_GetRxDataSize>
 800fe86:	4602      	mov	r2, r0
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fe94:	687a      	ldr	r2, [r7, #4]
 800fe96:	33b0      	adds	r3, #176	@ 0xb0
 800fe98:	009b      	lsls	r3, r3, #2
 800fe9a:	4413      	add	r3, r2
 800fe9c:	685b      	ldr	r3, [r3, #4]
 800fe9e:	68db      	ldr	r3, [r3, #12]
 800fea0:	68fa      	ldr	r2, [r7, #12]
 800fea2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800fea6:	68fa      	ldr	r2, [r7, #12]
 800fea8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800feac:	4611      	mov	r1, r2
 800feae:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800feb0:	2300      	movs	r3, #0
}
 800feb2:	4618      	mov	r0, r3
 800feb4:	3710      	adds	r7, #16
 800feb6:	46bd      	mov	sp, r7
 800feb8:	bd80      	pop	{r7, pc}

0800feba <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800feba:	b580      	push	{r7, lr}
 800febc:	b084      	sub	sp, #16
 800febe:	af00      	add	r7, sp, #0
 800fec0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	32b0      	adds	r2, #176	@ 0xb0
 800fecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fed0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d101      	bne.n	800fedc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800fed8:	2303      	movs	r3, #3
 800feda:	e024      	b.n	800ff26 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fee2:	687a      	ldr	r2, [r7, #4]
 800fee4:	33b0      	adds	r3, #176	@ 0xb0
 800fee6:	009b      	lsls	r3, r3, #2
 800fee8:	4413      	add	r3, r2
 800feea:	685b      	ldr	r3, [r3, #4]
 800feec:	2b00      	cmp	r3, #0
 800feee:	d019      	beq.n	800ff24 <USBD_CDC_EP0_RxReady+0x6a>
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800fef6:	2bff      	cmp	r3, #255	@ 0xff
 800fef8:	d014      	beq.n	800ff24 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ff00:	687a      	ldr	r2, [r7, #4]
 800ff02:	33b0      	adds	r3, #176	@ 0xb0
 800ff04:	009b      	lsls	r3, r3, #2
 800ff06:	4413      	add	r3, r2
 800ff08:	685b      	ldr	r3, [r3, #4]
 800ff0a:	689b      	ldr	r3, [r3, #8]
 800ff0c:	68fa      	ldr	r2, [r7, #12]
 800ff0e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800ff12:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ff14:	68fa      	ldr	r2, [r7, #12]
 800ff16:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ff1a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	22ff      	movs	r2, #255	@ 0xff
 800ff20:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800ff24:	2300      	movs	r3, #0
}
 800ff26:	4618      	mov	r0, r3
 800ff28:	3710      	adds	r7, #16
 800ff2a:	46bd      	mov	sp, r7
 800ff2c:	bd80      	pop	{r7, pc}
	...

0800ff30 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b086      	sub	sp, #24
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ff38:	2182      	movs	r1, #130	@ 0x82
 800ff3a:	4818      	ldr	r0, [pc, #96]	@ (800ff9c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ff3c:	f001 f901 	bl	8011142 <USBD_GetEpDesc>
 800ff40:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ff42:	2101      	movs	r1, #1
 800ff44:	4815      	ldr	r0, [pc, #84]	@ (800ff9c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ff46:	f001 f8fc 	bl	8011142 <USBD_GetEpDesc>
 800ff4a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ff4c:	2181      	movs	r1, #129	@ 0x81
 800ff4e:	4813      	ldr	r0, [pc, #76]	@ (800ff9c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ff50:	f001 f8f7 	bl	8011142 <USBD_GetEpDesc>
 800ff54:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ff56:	697b      	ldr	r3, [r7, #20]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d002      	beq.n	800ff62 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ff5c:	697b      	ldr	r3, [r7, #20]
 800ff5e:	2210      	movs	r2, #16
 800ff60:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ff62:	693b      	ldr	r3, [r7, #16]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d006      	beq.n	800ff76 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ff68:	693b      	ldr	r3, [r7, #16]
 800ff6a:	2200      	movs	r2, #0
 800ff6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ff70:	711a      	strb	r2, [r3, #4]
 800ff72:	2200      	movs	r2, #0
 800ff74:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d006      	beq.n	800ff8a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	2200      	movs	r2, #0
 800ff80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ff84:	711a      	strb	r2, [r3, #4]
 800ff86:	2200      	movs	r2, #0
 800ff88:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	2243      	movs	r2, #67	@ 0x43
 800ff8e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ff90:	4b02      	ldr	r3, [pc, #8]	@ (800ff9c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ff92:	4618      	mov	r0, r3
 800ff94:	3718      	adds	r7, #24
 800ff96:	46bd      	mov	sp, r7
 800ff98:	bd80      	pop	{r7, pc}
 800ff9a:	bf00      	nop
 800ff9c:	20000070 	.word	0x20000070

0800ffa0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b086      	sub	sp, #24
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ffa8:	2182      	movs	r1, #130	@ 0x82
 800ffaa:	4818      	ldr	r0, [pc, #96]	@ (801000c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ffac:	f001 f8c9 	bl	8011142 <USBD_GetEpDesc>
 800ffb0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ffb2:	2101      	movs	r1, #1
 800ffb4:	4815      	ldr	r0, [pc, #84]	@ (801000c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ffb6:	f001 f8c4 	bl	8011142 <USBD_GetEpDesc>
 800ffba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ffbc:	2181      	movs	r1, #129	@ 0x81
 800ffbe:	4813      	ldr	r0, [pc, #76]	@ (801000c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ffc0:	f001 f8bf 	bl	8011142 <USBD_GetEpDesc>
 800ffc4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ffc6:	697b      	ldr	r3, [r7, #20]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d002      	beq.n	800ffd2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ffcc:	697b      	ldr	r3, [r7, #20]
 800ffce:	2210      	movs	r2, #16
 800ffd0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ffd2:	693b      	ldr	r3, [r7, #16]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d006      	beq.n	800ffe6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ffd8:	693b      	ldr	r3, [r7, #16]
 800ffda:	2200      	movs	r2, #0
 800ffdc:	711a      	strb	r2, [r3, #4]
 800ffde:	2200      	movs	r2, #0
 800ffe0:	f042 0202 	orr.w	r2, r2, #2
 800ffe4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d006      	beq.n	800fffa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	2200      	movs	r2, #0
 800fff0:	711a      	strb	r2, [r3, #4]
 800fff2:	2200      	movs	r2, #0
 800fff4:	f042 0202 	orr.w	r2, r2, #2
 800fff8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	2243      	movs	r2, #67	@ 0x43
 800fffe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010000:	4b02      	ldr	r3, [pc, #8]	@ (801000c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8010002:	4618      	mov	r0, r3
 8010004:	3718      	adds	r7, #24
 8010006:	46bd      	mov	sp, r7
 8010008:	bd80      	pop	{r7, pc}
 801000a:	bf00      	nop
 801000c:	20000070 	.word	0x20000070

08010010 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010010:	b580      	push	{r7, lr}
 8010012:	b086      	sub	sp, #24
 8010014:	af00      	add	r7, sp, #0
 8010016:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010018:	2182      	movs	r1, #130	@ 0x82
 801001a:	4818      	ldr	r0, [pc, #96]	@ (801007c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801001c:	f001 f891 	bl	8011142 <USBD_GetEpDesc>
 8010020:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010022:	2101      	movs	r1, #1
 8010024:	4815      	ldr	r0, [pc, #84]	@ (801007c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010026:	f001 f88c 	bl	8011142 <USBD_GetEpDesc>
 801002a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801002c:	2181      	movs	r1, #129	@ 0x81
 801002e:	4813      	ldr	r0, [pc, #76]	@ (801007c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010030:	f001 f887 	bl	8011142 <USBD_GetEpDesc>
 8010034:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010036:	697b      	ldr	r3, [r7, #20]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d002      	beq.n	8010042 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801003c:	697b      	ldr	r3, [r7, #20]
 801003e:	2210      	movs	r2, #16
 8010040:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010042:	693b      	ldr	r3, [r7, #16]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d006      	beq.n	8010056 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010048:	693b      	ldr	r3, [r7, #16]
 801004a:	2200      	movs	r2, #0
 801004c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010050:	711a      	strb	r2, [r3, #4]
 8010052:	2200      	movs	r2, #0
 8010054:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d006      	beq.n	801006a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	2200      	movs	r2, #0
 8010060:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010064:	711a      	strb	r2, [r3, #4]
 8010066:	2200      	movs	r2, #0
 8010068:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	2243      	movs	r2, #67	@ 0x43
 801006e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010070:	4b02      	ldr	r3, [pc, #8]	@ (801007c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8010072:	4618      	mov	r0, r3
 8010074:	3718      	adds	r7, #24
 8010076:	46bd      	mov	sp, r7
 8010078:	bd80      	pop	{r7, pc}
 801007a:	bf00      	nop
 801007c:	20000070 	.word	0x20000070

08010080 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010080:	b480      	push	{r7}
 8010082:	b083      	sub	sp, #12
 8010084:	af00      	add	r7, sp, #0
 8010086:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	220a      	movs	r2, #10
 801008c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801008e:	4b03      	ldr	r3, [pc, #12]	@ (801009c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010090:	4618      	mov	r0, r3
 8010092:	370c      	adds	r7, #12
 8010094:	46bd      	mov	sp, r7
 8010096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801009a:	4770      	bx	lr
 801009c:	2000002c 	.word	0x2000002c

080100a0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80100a0:	b480      	push	{r7}
 80100a2:	b083      	sub	sp, #12
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
 80100a8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80100aa:	683b      	ldr	r3, [r7, #0]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d101      	bne.n	80100b4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80100b0:	2303      	movs	r3, #3
 80100b2:	e009      	b.n	80100c8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80100ba:	687a      	ldr	r2, [r7, #4]
 80100bc:	33b0      	adds	r3, #176	@ 0xb0
 80100be:	009b      	lsls	r3, r3, #2
 80100c0:	4413      	add	r3, r2
 80100c2:	683a      	ldr	r2, [r7, #0]
 80100c4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80100c6:	2300      	movs	r3, #0
}
 80100c8:	4618      	mov	r0, r3
 80100ca:	370c      	adds	r7, #12
 80100cc:	46bd      	mov	sp, r7
 80100ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d2:	4770      	bx	lr

080100d4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80100d4:	b480      	push	{r7}
 80100d6:	b087      	sub	sp, #28
 80100d8:	af00      	add	r7, sp, #0
 80100da:	60f8      	str	r0, [r7, #12]
 80100dc:	60b9      	str	r1, [r7, #8]
 80100de:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	32b0      	adds	r2, #176	@ 0xb0
 80100ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100ee:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80100f0:	697b      	ldr	r3, [r7, #20]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d101      	bne.n	80100fa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80100f6:	2303      	movs	r3, #3
 80100f8:	e008      	b.n	801010c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80100fa:	697b      	ldr	r3, [r7, #20]
 80100fc:	68ba      	ldr	r2, [r7, #8]
 80100fe:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8010102:	697b      	ldr	r3, [r7, #20]
 8010104:	687a      	ldr	r2, [r7, #4]
 8010106:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 801010a:	2300      	movs	r3, #0
}
 801010c:	4618      	mov	r0, r3
 801010e:	371c      	adds	r7, #28
 8010110:	46bd      	mov	sp, r7
 8010112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010116:	4770      	bx	lr

08010118 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8010118:	b480      	push	{r7}
 801011a:	b085      	sub	sp, #20
 801011c:	af00      	add	r7, sp, #0
 801011e:	6078      	str	r0, [r7, #4]
 8010120:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	32b0      	adds	r2, #176	@ 0xb0
 801012c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010130:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d101      	bne.n	801013c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8010138:	2303      	movs	r3, #3
 801013a:	e004      	b.n	8010146 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	683a      	ldr	r2, [r7, #0]
 8010140:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8010144:	2300      	movs	r3, #0
}
 8010146:	4618      	mov	r0, r3
 8010148:	3714      	adds	r7, #20
 801014a:	46bd      	mov	sp, r7
 801014c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010150:	4770      	bx	lr
	...

08010154 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8010154:	b580      	push	{r7, lr}
 8010156:	b084      	sub	sp, #16
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	32b0      	adds	r2, #176	@ 0xb0
 8010166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801016a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 801016c:	2301      	movs	r3, #1
 801016e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8010170:	68bb      	ldr	r3, [r7, #8]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d101      	bne.n	801017a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8010176:	2303      	movs	r3, #3
 8010178:	e025      	b.n	80101c6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 801017a:	68bb      	ldr	r3, [r7, #8]
 801017c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8010180:	2b00      	cmp	r3, #0
 8010182:	d11f      	bne.n	80101c4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8010184:	68bb      	ldr	r3, [r7, #8]
 8010186:	2201      	movs	r2, #1
 8010188:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 801018c:	4b10      	ldr	r3, [pc, #64]	@ (80101d0 <USBD_CDC_TransmitPacket+0x7c>)
 801018e:	781b      	ldrb	r3, [r3, #0]
 8010190:	f003 020f 	and.w	r2, r3, #15
 8010194:	68bb      	ldr	r3, [r7, #8]
 8010196:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 801019a:	6878      	ldr	r0, [r7, #4]
 801019c:	4613      	mov	r3, r2
 801019e:	009b      	lsls	r3, r3, #2
 80101a0:	4413      	add	r3, r2
 80101a2:	009b      	lsls	r3, r3, #2
 80101a4:	4403      	add	r3, r0
 80101a6:	3318      	adds	r3, #24
 80101a8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80101aa:	4b09      	ldr	r3, [pc, #36]	@ (80101d0 <USBD_CDC_TransmitPacket+0x7c>)
 80101ac:	7819      	ldrb	r1, [r3, #0]
 80101ae:	68bb      	ldr	r3, [r7, #8]
 80101b0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80101b4:	68bb      	ldr	r3, [r7, #8]
 80101b6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80101ba:	6878      	ldr	r0, [r7, #4]
 80101bc:	f000 fc2b 	bl	8010a16 <USBD_LL_Transmit>

    ret = USBD_OK;
 80101c0:	2300      	movs	r3, #0
 80101c2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80101c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80101c6:	4618      	mov	r0, r3
 80101c8:	3710      	adds	r7, #16
 80101ca:	46bd      	mov	sp, r7
 80101cc:	bd80      	pop	{r7, pc}
 80101ce:	bf00      	nop
 80101d0:	200000b3 	.word	0x200000b3

080101d4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	b084      	sub	sp, #16
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	32b0      	adds	r2, #176	@ 0xb0
 80101e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101ea:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	32b0      	adds	r2, #176	@ 0xb0
 80101f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d101      	bne.n	8010202 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80101fe:	2303      	movs	r3, #3
 8010200:	e018      	b.n	8010234 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	7c1b      	ldrb	r3, [r3, #16]
 8010206:	2b00      	cmp	r3, #0
 8010208:	d10a      	bne.n	8010220 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801020a:	4b0c      	ldr	r3, [pc, #48]	@ (801023c <USBD_CDC_ReceivePacket+0x68>)
 801020c:	7819      	ldrb	r1, [r3, #0]
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010214:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010218:	6878      	ldr	r0, [r7, #4]
 801021a:	f000 fc17 	bl	8010a4c <USBD_LL_PrepareReceive>
 801021e:	e008      	b.n	8010232 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010220:	4b06      	ldr	r3, [pc, #24]	@ (801023c <USBD_CDC_ReceivePacket+0x68>)
 8010222:	7819      	ldrb	r1, [r3, #0]
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801022a:	2340      	movs	r3, #64	@ 0x40
 801022c:	6878      	ldr	r0, [r7, #4]
 801022e:	f000 fc0d 	bl	8010a4c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010232:	2300      	movs	r3, #0
}
 8010234:	4618      	mov	r0, r3
 8010236:	3710      	adds	r7, #16
 8010238:	46bd      	mov	sp, r7
 801023a:	bd80      	pop	{r7, pc}
 801023c:	200000b4 	.word	0x200000b4

08010240 <TEMPLATE_Init>:
  *         Initializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Init(void)
{
 8010240:	b580      	push	{r7, lr}
 8010242:	af00      	add	r7, sp, #0
      USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010244:	2200      	movs	r2, #0
 8010246:	4905      	ldr	r1, [pc, #20]	@ (801025c <TEMPLATE_Init+0x1c>)
 8010248:	4805      	ldr	r0, [pc, #20]	@ (8010260 <TEMPLATE_Init+0x20>)
 801024a:	f7ff ff43 	bl	80100d4 <USBD_CDC_SetTxBuffer>
      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801024e:	4905      	ldr	r1, [pc, #20]	@ (8010264 <TEMPLATE_Init+0x24>)
 8010250:	4803      	ldr	r0, [pc, #12]	@ (8010260 <TEMPLATE_Init+0x20>)
 8010252:	f7ff ff61 	bl	8010118 <USBD_CDC_SetRxBuffer>
      return (0);
 8010256:	2300      	movs	r3, #0
}
 8010258:	4618      	mov	r0, r3
 801025a:	bd80      	pop	{r7, pc}
 801025c:	20000ce8 	.word	0x20000ce8
 8010260:	20000760 	.word	0x20000760
 8010264:	20000ae8 	.word	0x20000ae8

08010268 <TEMPLATE_DeInit>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_DeInit(void)
{
 8010268:	b480      	push	{r7}
 801026a:	af00      	add	r7, sp, #0
  /*
     Add your deinitialization code here
  */
  return (0);
 801026c:	2300      	movs	r3, #0
}
 801026e:	4618      	mov	r0, r3
 8010270:	46bd      	mov	sp, r7
 8010272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010276:	4770      	bx	lr

08010278 <USB_Transmit>:

uint8_t USB_Transmit(uint8_t *data, uint32_t len)
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b0a4      	sub	sp, #144	@ 0x90
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
 8010280:	6039      	str	r1, [r7, #0]
    uint32_t offset = 0;
 8010282:	2300      	movs	r3, #0
 8010284:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    const uint32_t bytesPerLine = 16;
 8010288:	2310      	movs	r3, #16
 801028a:	67bb      	str	r3, [r7, #120]	@ 0x78

    while (offset < len)
 801028c:	e0a4      	b.n	80103d8 <USB_Transmit+0x160>
    {
        uint16_t chunk_len = ((len - offset) >= CDC_BLOCK_SIZE) ? CDC_BLOCK_SIZE : (len - offset);
 801028e:	683a      	ldr	r2, [r7, #0]
 8010290:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010294:	1ad3      	subs	r3, r2, r3
 8010296:	2b40      	cmp	r3, #64	@ 0x40
 8010298:	bf28      	it	cs
 801029a:	2340      	movcs	r3, #64	@ 0x40
 801029c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
        tx_complete = 0;
 80102a0:	4b53      	ldr	r3, [pc, #332]	@ (80103f0 <USB_Transmit+0x178>)
 80102a2:	2200      	movs	r2, #0
 80102a4:	701a      	strb	r2, [r3, #0]
        USBD_CDC_SetTxBuffer(&hUsbDeviceFS, &data[offset], chunk_len);
 80102a6:	687a      	ldr	r2, [r7, #4]
 80102a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80102ac:	4413      	add	r3, r2
 80102ae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80102b2:	4619      	mov	r1, r3
 80102b4:	484f      	ldr	r0, [pc, #316]	@ (80103f4 <USB_Transmit+0x17c>)
 80102b6:	f7ff ff0d 	bl	80100d4 <USBD_CDC_SetTxBuffer>

        // Log in 32-byte lines
        uint32_t printed = 0;
 80102ba:	2300      	movs	r3, #0
 80102bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        while (printed < chunk_len)
 80102c0:	e056      	b.n	8010370 <USB_Transmit+0xf8>
        {
            uint32_t lineLen = ((chunk_len - printed) > bytesPerLine) ? bytesPerLine : (chunk_len - printed);
 80102c2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80102c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80102ca:	1ad3      	subs	r3, r2, r3
 80102cc:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80102ce:	4293      	cmp	r3, r2
 80102d0:	bf28      	it	cs
 80102d2:	4613      	movcs	r3, r2
 80102d4:	673b      	str	r3, [r7, #112]	@ 0x70
            char log_line[BYTES_PER_LINE * 3 + 1] = {0};
 80102d6:	2300      	movs	r3, #0
 80102d8:	60bb      	str	r3, [r7, #8]
 80102da:	f107 030c 	add.w	r3, r7, #12
 80102de:	225d      	movs	r2, #93	@ 0x5d
 80102e0:	2100      	movs	r1, #0
 80102e2:	4618      	mov	r0, r3
 80102e4:	f002 f906 	bl	80124f4 <memset>
            char *ptr = log_line;
 80102e8:	f107 0308 	add.w	r3, r7, #8
 80102ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

            for (uint32_t i = 0; i < lineLen; i++)
 80102f0:	2300      	movs	r3, #0
 80102f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80102f6:	e01c      	b.n	8010332 <USB_Transmit+0xba>
            {
                ptr += snprintf(ptr, 4, "%02X ", data[offset + printed + i]);
 80102f8:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80102fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010300:	441a      	add	r2, r3
 8010302:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8010306:	4413      	add	r3, r2
 8010308:	687a      	ldr	r2, [r7, #4]
 801030a:	4413      	add	r3, r2
 801030c:	781b      	ldrb	r3, [r3, #0]
 801030e:	4a3a      	ldr	r2, [pc, #232]	@ (80103f8 <USB_Transmit+0x180>)
 8010310:	2104      	movs	r1, #4
 8010312:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8010316:	f002 f81d 	bl	8012354 <sniprintf>
 801031a:	4603      	mov	r3, r0
 801031c:	461a      	mov	r2, r3
 801031e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010322:	4413      	add	r3, r2
 8010324:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            for (uint32_t i = 0; i < lineLen; i++)
 8010328:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801032c:	3301      	adds	r3, #1
 801032e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010332:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010336:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010338:	429a      	cmp	r2, r3
 801033a:	d3dd      	bcc.n	80102f8 <USB_Transmit+0x80>
            }

            if (printed == 0)
 801033c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010340:	2b00      	cmp	r3, #0
 8010342:	d108      	bne.n	8010356 <USB_Transmit+0xde>
            {
                log_info("USB Tx [%d bytes]: %s", chunk_len, log_line);
 8010344:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8010348:	f107 0208 	add.w	r2, r7, #8
 801034c:	4619      	mov	r1, r3
 801034e:	482b      	ldr	r0, [pc, #172]	@ (80103fc <USB_Transmit+0x184>)
 8010350:	f7f1 f8e2 	bl	8001518 <log_info>
 8010354:	e006      	b.n	8010364 <USB_Transmit+0xec>
            }
            else
            {
                log_info("%19s%s", "", log_line);
 8010356:	f107 0308 	add.w	r3, r7, #8
 801035a:	461a      	mov	r2, r3
 801035c:	4928      	ldr	r1, [pc, #160]	@ (8010400 <USB_Transmit+0x188>)
 801035e:	4829      	ldr	r0, [pc, #164]	@ (8010404 <USB_Transmit+0x18c>)
 8010360:	f7f1 f8da 	bl	8001518 <log_info>
            }

            printed += lineLen;
 8010364:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8010368:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801036a:	4413      	add	r3, r2
 801036c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        while (printed < chunk_len)
 8010370:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8010374:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8010378:	429a      	cmp	r2, r3
 801037a:	d3a2      	bcc.n	80102c2 <USB_Transmit+0x4a>
        }

        if (USBD_CDC_TransmitPacket(&hUsbDeviceFS) != USBD_OK)
 801037c:	481d      	ldr	r0, [pc, #116]	@ (80103f4 <USB_Transmit+0x17c>)
 801037e:	f7ff fee9 	bl	8010154 <USBD_CDC_TransmitPacket>
 8010382:	4603      	mov	r3, r0
 8010384:	2b00      	cmp	r3, #0
 8010386:	d001      	beq.n	801038c <USB_Transmit+0x114>
        {
            return USBD_FAIL;
 8010388:	2303      	movs	r3, #3
 801038a:	e02c      	b.n	80103e6 <USB_Transmit+0x16e>
        }

        uint32_t timeout = 10000;
 801038c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8010390:	67fb      	str	r3, [r7, #124]	@ 0x7c
        while (tx_complete == 0 && timeout--);
 8010392:	bf00      	nop
 8010394:	4b16      	ldr	r3, [pc, #88]	@ (80103f0 <USB_Transmit+0x178>)
 8010396:	781b      	ldrb	r3, [r3, #0]
 8010398:	b2db      	uxtb	r3, r3
 801039a:	2b00      	cmp	r3, #0
 801039c:	d104      	bne.n	80103a8 <USB_Transmit+0x130>
 801039e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80103a0:	1e5a      	subs	r2, r3, #1
 80103a2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d1f5      	bne.n	8010394 <USB_Transmit+0x11c>
        if (timeout == 0)
 80103a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d104      	bne.n	80103b8 <USB_Transmit+0x140>
        {
            log_error("USB TX Timeout");
 80103ae:	4816      	ldr	r0, [pc, #88]	@ (8010408 <USB_Transmit+0x190>)
 80103b0:	f7f1 f8e6 	bl	8001580 <log_error>
            return USBD_FAIL;
 80103b4:	2303      	movs	r3, #3
 80103b6:	e016      	b.n	80103e6 <USB_Transmit+0x16e>
        }

        offset += chunk_len;
 80103b8:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 80103bc:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80103c0:	4413      	add	r3, r2
 80103c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        for (volatile int i = 0; i < 200; i++);
 80103c6:	2300      	movs	r3, #0
 80103c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80103ca:	e002      	b.n	80103d2 <USB_Transmit+0x15a>
 80103cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80103ce:	3301      	adds	r3, #1
 80103d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80103d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80103d4:	2bc7      	cmp	r3, #199	@ 0xc7
 80103d6:	ddf9      	ble.n	80103cc <USB_Transmit+0x154>
    while (offset < len)
 80103d8:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80103dc:	683b      	ldr	r3, [r7, #0]
 80103de:	429a      	cmp	r2, r3
 80103e0:	f4ff af55 	bcc.w	801028e <USB_Transmit+0x16>
    }

    return USBD_OK;
 80103e4:	2300      	movs	r3, #0
}
 80103e6:	4618      	mov	r0, r3
 80103e8:	3790      	adds	r7, #144	@ 0x90
 80103ea:	46bd      	mov	sp, r7
 80103ec:	bd80      	pop	{r7, pc}
 80103ee:	bf00      	nop
 80103f0:	200000b6 	.word	0x200000b6
 80103f4:	20000760 	.word	0x20000760
 80103f8:	08014090 	.word	0x08014090
 80103fc:	08014098 	.word	0x08014098
 8010400:	080140b0 	.word	0x080140b0
 8010404:	080140b4 	.word	0x080140b4
 8010408:	080140bc 	.word	0x080140bc

0801040c <TEMPLATE_Control>:
  * @param  Buf: Buffer containing command data (request parameters)
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Control(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 801040c:	b480      	push	{r7}
 801040e:	b083      	sub	sp, #12
 8010410:	af00      	add	r7, sp, #0
 8010412:	4603      	mov	r3, r0
 8010414:	6039      	str	r1, [r7, #0]
 8010416:	71fb      	strb	r3, [r7, #7]
 8010418:	4613      	mov	r3, r2
 801041a:	80bb      	strh	r3, [r7, #4]
  UNUSED(length);

  switch (cmd)
 801041c:	79fb      	ldrb	r3, [r7, #7]
 801041e:	2b23      	cmp	r3, #35	@ 0x23
 8010420:	f200 8098 	bhi.w	8010554 <TEMPLATE_Control+0x148>
 8010424:	a201      	add	r2, pc, #4	@ (adr r2, 801042c <TEMPLATE_Control+0x20>)
 8010426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801042a:	bf00      	nop
 801042c:	08010555 	.word	0x08010555
 8010430:	08010555 	.word	0x08010555
 8010434:	08010555 	.word	0x08010555
 8010438:	08010555 	.word	0x08010555
 801043c:	08010555 	.word	0x08010555
 8010440:	08010555 	.word	0x08010555
 8010444:	08010555 	.word	0x08010555
 8010448:	08010555 	.word	0x08010555
 801044c:	08010555 	.word	0x08010555
 8010450:	08010555 	.word	0x08010555
 8010454:	08010555 	.word	0x08010555
 8010458:	08010555 	.word	0x08010555
 801045c:	08010555 	.word	0x08010555
 8010460:	08010555 	.word	0x08010555
 8010464:	08010555 	.word	0x08010555
 8010468:	08010555 	.word	0x08010555
 801046c:	08010555 	.word	0x08010555
 8010470:	08010555 	.word	0x08010555
 8010474:	08010555 	.word	0x08010555
 8010478:	08010555 	.word	0x08010555
 801047c:	08010555 	.word	0x08010555
 8010480:	08010555 	.word	0x08010555
 8010484:	08010555 	.word	0x08010555
 8010488:	08010555 	.word	0x08010555
 801048c:	08010555 	.word	0x08010555
 8010490:	08010555 	.word	0x08010555
 8010494:	08010555 	.word	0x08010555
 8010498:	08010555 	.word	0x08010555
 801049c:	08010555 	.word	0x08010555
 80104a0:	08010555 	.word	0x08010555
 80104a4:	08010555 	.word	0x08010555
 80104a8:	08010555 	.word	0x08010555
 80104ac:	080104bd 	.word	0x080104bd
 80104b0:	08010501 	.word	0x08010501
 80104b4:	08010555 	.word	0x08010555
 80104b8:	08010555 	.word	0x08010555
    case CDC_CLEAR_COMM_FEATURE:
      /* Add your code here */
      break;

    case CDC_SET_LINE_CODING:
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 80104bc:	683b      	ldr	r3, [r7, #0]
 80104be:	781b      	ldrb	r3, [r3, #0]
 80104c0:	461a      	mov	r2, r3
 80104c2:	683b      	ldr	r3, [r7, #0]
 80104c4:	3301      	adds	r3, #1
 80104c6:	781b      	ldrb	r3, [r3, #0]
 80104c8:	021b      	lsls	r3, r3, #8
 80104ca:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 80104cc:	683b      	ldr	r3, [r7, #0]
 80104ce:	3302      	adds	r3, #2
 80104d0:	781b      	ldrb	r3, [r3, #0]
 80104d2:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 80104d4:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 80104d6:	683b      	ldr	r3, [r7, #0]
 80104d8:	3303      	adds	r3, #3
 80104da:	781b      	ldrb	r3, [r3, #0]
 80104dc:	061b      	lsls	r3, r3, #24
 80104de:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 80104e0:	461a      	mov	r2, r3
 80104e2:	4b20      	ldr	r3, [pc, #128]	@ (8010564 <TEMPLATE_Control+0x158>)
 80104e4:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 80104e6:	683b      	ldr	r3, [r7, #0]
 80104e8:	791a      	ldrb	r2, [r3, #4]
 80104ea:	4b1e      	ldr	r3, [pc, #120]	@ (8010564 <TEMPLATE_Control+0x158>)
 80104ec:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 80104ee:	683b      	ldr	r3, [r7, #0]
 80104f0:	795a      	ldrb	r2, [r3, #5]
 80104f2:	4b1c      	ldr	r3, [pc, #112]	@ (8010564 <TEMPLATE_Control+0x158>)
 80104f4:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 80104f6:	683b      	ldr	r3, [r7, #0]
 80104f8:	799a      	ldrb	r2, [r3, #6]
 80104fa:	4b1a      	ldr	r3, [pc, #104]	@ (8010564 <TEMPLATE_Control+0x158>)
 80104fc:	719a      	strb	r2, [r3, #6]

      /* Add your code here */
      break;
 80104fe:	e02a      	b.n	8010556 <TEMPLATE_Control+0x14a>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 8010500:	4b18      	ldr	r3, [pc, #96]	@ (8010564 <TEMPLATE_Control+0x158>)
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	b2da      	uxtb	r2, r3
 8010506:	683b      	ldr	r3, [r7, #0]
 8010508:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 801050a:	4b16      	ldr	r3, [pc, #88]	@ (8010564 <TEMPLATE_Control+0x158>)
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	0a1a      	lsrs	r2, r3, #8
 8010510:	683b      	ldr	r3, [r7, #0]
 8010512:	3301      	adds	r3, #1
 8010514:	b2d2      	uxtb	r2, r2
 8010516:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 8010518:	4b12      	ldr	r3, [pc, #72]	@ (8010564 <TEMPLATE_Control+0x158>)
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	0c1a      	lsrs	r2, r3, #16
 801051e:	683b      	ldr	r3, [r7, #0]
 8010520:	3302      	adds	r3, #2
 8010522:	b2d2      	uxtb	r2, r2
 8010524:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 8010526:	4b0f      	ldr	r3, [pc, #60]	@ (8010564 <TEMPLATE_Control+0x158>)
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	0e1a      	lsrs	r2, r3, #24
 801052c:	683b      	ldr	r3, [r7, #0]
 801052e:	3303      	adds	r3, #3
 8010530:	b2d2      	uxtb	r2, r2
 8010532:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 8010534:	683b      	ldr	r3, [r7, #0]
 8010536:	3304      	adds	r3, #4
 8010538:	4a0a      	ldr	r2, [pc, #40]	@ (8010564 <TEMPLATE_Control+0x158>)
 801053a:	7912      	ldrb	r2, [r2, #4]
 801053c:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 801053e:	683b      	ldr	r3, [r7, #0]
 8010540:	3305      	adds	r3, #5
 8010542:	4a08      	ldr	r2, [pc, #32]	@ (8010564 <TEMPLATE_Control+0x158>)
 8010544:	7952      	ldrb	r2, [r2, #5]
 8010546:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 8010548:	683b      	ldr	r3, [r7, #0]
 801054a:	3306      	adds	r3, #6
 801054c:	4a05      	ldr	r2, [pc, #20]	@ (8010564 <TEMPLATE_Control+0x158>)
 801054e:	7992      	ldrb	r2, [r2, #6]
 8010550:	701a      	strb	r2, [r3, #0]

      /* Add your code here */
      break;
 8010552:	e000      	b.n	8010556 <TEMPLATE_Control+0x14a>
    case CDC_SEND_BREAK:
      /* Add your code here */
      break;

    default:
      break;
 8010554:	bf00      	nop
  }

  return (0);
 8010556:	2300      	movs	r3, #0
}
 8010558:	4618      	mov	r0, r3
 801055a:	370c      	adds	r7, #12
 801055c:	46bd      	mov	sp, r7
 801055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010562:	4770      	bx	lr
 8010564:	200000cc 	.word	0x200000cc

08010568 <TEMPLATE_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Receive(uint8_t *Buf, uint32_t *Len)
{
 8010568:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801056c:	b08b      	sub	sp, #44	@ 0x2c
 801056e:	af00      	add	r7, sp, #0
 8010570:	6078      	str	r0, [r7, #4]
 8010572:	6039      	str	r1, [r7, #0]
 8010574:	466b      	mov	r3, sp
 8010576:	461e      	mov	r6, r3
    const uint32_t bytesPerLine = 16;
 8010578:	2310      	movs	r3, #16
 801057a:	61bb      	str	r3, [r7, #24]
    char hexLine[bytesPerLine * 3 + 1]; // 2 hex chars + 1 space per byte
 801057c:	69ba      	ldr	r2, [r7, #24]
 801057e:	4613      	mov	r3, r2
 8010580:	005b      	lsls	r3, r3, #1
 8010582:	4413      	add	r3, r2
 8010584:	617b      	str	r3, [r7, #20]
 8010586:	69ba      	ldr	r2, [r7, #24]
 8010588:	4613      	mov	r3, r2
 801058a:	005b      	lsls	r3, r3, #1
 801058c:	4413      	add	r3, r2
 801058e:	3301      	adds	r3, #1
 8010590:	2200      	movs	r2, #0
 8010592:	4698      	mov	r8, r3
 8010594:	4691      	mov	r9, r2
 8010596:	f04f 0200 	mov.w	r2, #0
 801059a:	f04f 0300 	mov.w	r3, #0
 801059e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80105a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80105a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80105aa:	69ba      	ldr	r2, [r7, #24]
 80105ac:	4613      	mov	r3, r2
 80105ae:	005b      	lsls	r3, r3, #1
 80105b0:	4413      	add	r3, r2
 80105b2:	3301      	adds	r3, #1
 80105b4:	2200      	movs	r2, #0
 80105b6:	461c      	mov	r4, r3
 80105b8:	4615      	mov	r5, r2
 80105ba:	f04f 0200 	mov.w	r2, #0
 80105be:	f04f 0300 	mov.w	r3, #0
 80105c2:	00eb      	lsls	r3, r5, #3
 80105c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80105c8:	00e2      	lsls	r2, r4, #3
 80105ca:	69ba      	ldr	r2, [r7, #24]
 80105cc:	4613      	mov	r3, r2
 80105ce:	005b      	lsls	r3, r3, #1
 80105d0:	4413      	add	r3, r2
 80105d2:	3301      	adds	r3, #1
 80105d4:	3307      	adds	r3, #7
 80105d6:	08db      	lsrs	r3, r3, #3
 80105d8:	00db      	lsls	r3, r3, #3
 80105da:	ebad 0d03 	sub.w	sp, sp, r3
 80105de:	466b      	mov	r3, sp
 80105e0:	3300      	adds	r3, #0
 80105e2:	613b      	str	r3, [r7, #16]
    uint32_t totalLen = *Len;
 80105e4:	683b      	ldr	r3, [r7, #0]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	60fb      	str	r3, [r7, #12]
    uint32_t printed = 0;
 80105ea:	2300      	movs	r3, #0
 80105ec:	627b      	str	r3, [r7, #36]	@ 0x24

    if (*Len > CDC_DATA_FS_MAX_PACKET_SIZE) {
 80105ee:	683b      	ldr	r3, [r7, #0]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	2b40      	cmp	r3, #64	@ 0x40
 80105f4:	d944      	bls.n	8010680 <TEMPLATE_Receive+0x118>
        *Len = CDC_DATA_FS_MAX_PACKET_SIZE;
 80105f6:	683b      	ldr	r3, [r7, #0]
 80105f8:	2240      	movs	r2, #64	@ 0x40
 80105fa:	601a      	str	r2, [r3, #0]
    }

    while (printed < *Len)
 80105fc:	e040      	b.n	8010680 <TEMPLATE_Receive+0x118>
    {
        uint32_t lineLen = ((*Len - printed) > bytesPerLine) ? bytesPerLine : (*Len - printed);
 80105fe:	683b      	ldr	r3, [r7, #0]
 8010600:	681a      	ldr	r2, [r3, #0]
 8010602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010604:	1ad3      	subs	r3, r2, r3
 8010606:	69ba      	ldr	r2, [r7, #24]
 8010608:	4293      	cmp	r3, r2
 801060a:	bf28      	it	cs
 801060c:	4613      	movcs	r3, r2
 801060e:	60bb      	str	r3, [r7, #8]
    char hexLine[bytesPerLine * 3 + 1]; // 2 hex chars + 1 space per byte
 8010610:	69ba      	ldr	r2, [r7, #24]
 8010612:	4613      	mov	r3, r2
 8010614:	005b      	lsls	r3, r3, #1
 8010616:	4413      	add	r3, r2
        memset(hexLine, 0, sizeof(hexLine));
 8010618:	3301      	adds	r3, #1
 801061a:	461a      	mov	r2, r3
 801061c:	2100      	movs	r1, #0
 801061e:	6938      	ldr	r0, [r7, #16]
 8010620:	f001 ff68 	bl	80124f4 <memset>
        char *ptr = hexLine;
 8010624:	693b      	ldr	r3, [r7, #16]
 8010626:	623b      	str	r3, [r7, #32]

        for (uint32_t i = 0; i < lineLen; ++i)
 8010628:	2300      	movs	r3, #0
 801062a:	61fb      	str	r3, [r7, #28]
 801062c:	e012      	b.n	8010654 <TEMPLATE_Receive+0xec>
        {
            ptr += snprintf(ptr, 4, "%02X ", Buf[printed + i]);
 801062e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010630:	69fb      	ldr	r3, [r7, #28]
 8010632:	4413      	add	r3, r2
 8010634:	687a      	ldr	r2, [r7, #4]
 8010636:	4413      	add	r3, r2
 8010638:	781b      	ldrb	r3, [r3, #0]
 801063a:	4a2d      	ldr	r2, [pc, #180]	@ (80106f0 <TEMPLATE_Receive+0x188>)
 801063c:	2104      	movs	r1, #4
 801063e:	6a38      	ldr	r0, [r7, #32]
 8010640:	f001 fe88 	bl	8012354 <sniprintf>
 8010644:	4603      	mov	r3, r0
 8010646:	461a      	mov	r2, r3
 8010648:	6a3b      	ldr	r3, [r7, #32]
 801064a:	4413      	add	r3, r2
 801064c:	623b      	str	r3, [r7, #32]
        for (uint32_t i = 0; i < lineLen; ++i)
 801064e:	69fb      	ldr	r3, [r7, #28]
 8010650:	3301      	adds	r3, #1
 8010652:	61fb      	str	r3, [r7, #28]
 8010654:	69fa      	ldr	r2, [r7, #28]
 8010656:	68bb      	ldr	r3, [r7, #8]
 8010658:	429a      	cmp	r2, r3
 801065a:	d3e8      	bcc.n	801062e <TEMPLATE_Receive+0xc6>
        }

        if (printed == 0)
 801065c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801065e:	2b00      	cmp	r3, #0
 8010660:	d105      	bne.n	801066e <TEMPLATE_Receive+0x106>
        {
            // First line includes logger message
            log_info("USB Rx [%lu bytes]: %s", totalLen, hexLine);
 8010662:	693a      	ldr	r2, [r7, #16]
 8010664:	68f9      	ldr	r1, [r7, #12]
 8010666:	4823      	ldr	r0, [pc, #140]	@ (80106f4 <TEMPLATE_Receive+0x18c>)
 8010668:	f7f0 ff56 	bl	8001518 <log_info>
 801066c:	e004      	b.n	8010678 <TEMPLATE_Receive+0x110>
        }
        else
        {
            // Subsequent lines have 26-space indent
            log_info("%19s%s", "", hexLine);
 801066e:	693a      	ldr	r2, [r7, #16]
 8010670:	4921      	ldr	r1, [pc, #132]	@ (80106f8 <TEMPLATE_Receive+0x190>)
 8010672:	4822      	ldr	r0, [pc, #136]	@ (80106fc <TEMPLATE_Receive+0x194>)
 8010674:	f7f0 ff50 	bl	8001518 <log_info>
        }

        printed += lineLen;
 8010678:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801067a:	68bb      	ldr	r3, [r7, #8]
 801067c:	4413      	add	r3, r2
 801067e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (printed < *Len)
 8010680:	683b      	ldr	r3, [r7, #0]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010686:	429a      	cmp	r2, r3
 8010688:	d3b9      	bcc.n	80105fe <TEMPLATE_Receive+0x96>
    }

    // Copy to usb_rx_buffer if space permits
    if ((usb_rx_index + *Len) < MAX_USB_DATA_SIZE)
 801068a:	683b      	ldr	r3, [r7, #0]
 801068c:	681a      	ldr	r2, [r3, #0]
 801068e:	4b1c      	ldr	r3, [pc, #112]	@ (8010700 <TEMPLATE_Receive+0x198>)
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	4413      	add	r3, r2
 8010694:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010698:	d215      	bcs.n	80106c6 <TEMPLATE_Receive+0x15e>
    {
        memcpy(&usb_rx_buffer[usb_rx_index], Buf, *Len);
 801069a:	4b19      	ldr	r3, [pc, #100]	@ (8010700 <TEMPLATE_Receive+0x198>)
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	4a19      	ldr	r2, [pc, #100]	@ (8010704 <TEMPLATE_Receive+0x19c>)
 80106a0:	1898      	adds	r0, r3, r2
 80106a2:	683b      	ldr	r3, [r7, #0]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	461a      	mov	r2, r3
 80106a8:	6879      	ldr	r1, [r7, #4]
 80106aa:	f001 ff9e 	bl	80125ea <memcpy>
        usb_rx_index += *Len;
 80106ae:	683b      	ldr	r3, [r7, #0]
 80106b0:	681a      	ldr	r2, [r3, #0]
 80106b2:	4b13      	ldr	r3, [pc, #76]	@ (8010700 <TEMPLATE_Receive+0x198>)
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	4413      	add	r3, r2
 80106b8:	4a11      	ldr	r2, [pc, #68]	@ (8010700 <TEMPLATE_Receive+0x198>)
 80106ba:	6013      	str	r3, [r2, #0]
        log_error("USB buffer overflow");
        return USBD_FAIL;
    }

    // If this was the last packet
    if (*Len < CDC_DATA_FS_MAX_PACKET_SIZE)
 80106bc:	683b      	ldr	r3, [r7, #0]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	2b3f      	cmp	r3, #63	@ 0x3f
 80106c2:	d80b      	bhi.n	80106dc <TEMPLATE_Receive+0x174>
 80106c4:	e007      	b.n	80106d6 <TEMPLATE_Receive+0x16e>
        usb_rx_index = 0;
 80106c6:	4b0e      	ldr	r3, [pc, #56]	@ (8010700 <TEMPLATE_Receive+0x198>)
 80106c8:	2200      	movs	r2, #0
 80106ca:	601a      	str	r2, [r3, #0]
        log_error("USB buffer overflow");
 80106cc:	480e      	ldr	r0, [pc, #56]	@ (8010708 <TEMPLATE_Receive+0x1a0>)
 80106ce:	f7f0 ff57 	bl	8001580 <log_error>
        return USBD_FAIL;
 80106d2:	2303      	movs	r3, #3
 80106d4:	e006      	b.n	80106e4 <TEMPLATE_Receive+0x17c>
    {
        usb_rx_complete = true;
 80106d6:	4b0d      	ldr	r3, [pc, #52]	@ (801070c <TEMPLATE_Receive+0x1a4>)
 80106d8:	2201      	movs	r2, #1
 80106da:	701a      	strb	r2, [r3, #0]
    }

    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80106dc:	480c      	ldr	r0, [pc, #48]	@ (8010710 <TEMPLATE_Receive+0x1a8>)
 80106de:	f7ff fd79 	bl	80101d4 <USBD_CDC_ReceivePacket>
    return USBD_OK;
 80106e2:	2300      	movs	r3, #0
 80106e4:	46b5      	mov	sp, r6
}
 80106e6:	4618      	mov	r0, r3
 80106e8:	372c      	adds	r7, #44	@ 0x2c
 80106ea:	46bd      	mov	sp, r7
 80106ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80106f0:	08014090 	.word	0x08014090
 80106f4:	080140cc 	.word	0x080140cc
 80106f8:	080140b0 	.word	0x080140b0
 80106fc:	080140b4 	.word	0x080140b4
 8010700:	20010ee8 	.word	0x20010ee8
 8010704:	20000ee8 	.word	0x20000ee8
 8010708:	080140e4 	.word	0x080140e4
 801070c:	20010eec 	.word	0x20010eec
 8010710:	20000760 	.word	0x20000760

08010714 <TEMPLATE_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_TransmitCplt(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010714:	b480      	push	{r7}
 8010716:	b085      	sub	sp, #20
 8010718:	af00      	add	r7, sp, #0
 801071a:	60f8      	str	r0, [r7, #12]
 801071c:	60b9      	str	r1, [r7, #8]
 801071e:	4613      	mov	r3, r2
 8010720:	71fb      	strb	r3, [r7, #7]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);

  return 0;
 8010722:	2300      	movs	r3, #0

}
 8010724:	4618      	mov	r0, r3
 8010726:	3714      	adds	r7, #20
 8010728:	46bd      	mov	sp, r7
 801072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801072e:	4770      	bx	lr

08010730 <HAL_PCD_SetupStageCallback>:
extern PCD_HandleTypeDef hpcd_USB_DRD_FS;
/* Private function prototypes -----------------------------------------------*/
static USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status);
/* Private functions ---------------------------------------------------------*/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8010730:	b580      	push	{r7, lr}
 8010732:	b082      	sub	sp, #8
 8010734:	af00      	add	r7, sp, #0
 8010736:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8010744:	4619      	mov	r1, r3
 8010746:	4610      	mov	r0, r2
 8010748:	f000 faa5 	bl	8010c96 <USBD_LL_SetupStage>
}
 801074c:	bf00      	nop
 801074e:	3708      	adds	r7, #8
 8010750:	46bd      	mov	sp, r7
 8010752:	bd80      	pop	{r7, pc}

08010754 <HAL_PCD_DataOutStageCallback>:

void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8010754:	b580      	push	{r7, lr}
 8010756:	b082      	sub	sp, #8
 8010758:	af00      	add	r7, sp, #0
 801075a:	6078      	str	r0, [r7, #4]
 801075c:	460b      	mov	r3, r1
 801075e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 8010766:	78fa      	ldrb	r2, [r7, #3]
 8010768:	6879      	ldr	r1, [r7, #4]
 801076a:	4613      	mov	r3, r2
 801076c:	009b      	lsls	r3, r3, #2
 801076e:	4413      	add	r3, r2
 8010770:	00db      	lsls	r3, r3, #3
 8010772:	440b      	add	r3, r1
 8010774:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8010778:	681a      	ldr	r2, [r3, #0]
 801077a:	78fb      	ldrb	r3, [r7, #3]
 801077c:	4619      	mov	r1, r3
 801077e:	f000 fadf 	bl	8010d40 <USBD_LL_DataOutStage>
}
 8010782:	bf00      	nop
 8010784:	3708      	adds	r7, #8
 8010786:	46bd      	mov	sp, r7
 8010788:	bd80      	pop	{r7, pc}

0801078a <HAL_PCD_DataInStageCallback>:

void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 801078a:	b580      	push	{r7, lr}
 801078c:	b082      	sub	sp, #8
 801078e:	af00      	add	r7, sp, #0
 8010790:	6078      	str	r0, [r7, #4]
 8010792:	460b      	mov	r3, r1
 8010794:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 801079c:	78fa      	ldrb	r2, [r7, #3]
 801079e:	6879      	ldr	r1, [r7, #4]
 80107a0:	4613      	mov	r3, r2
 80107a2:	009b      	lsls	r3, r3, #2
 80107a4:	4413      	add	r3, r2
 80107a6:	00db      	lsls	r3, r3, #3
 80107a8:	440b      	add	r3, r1
 80107aa:	3328      	adds	r3, #40	@ 0x28
 80107ac:	681a      	ldr	r2, [r3, #0]
 80107ae:	78fb      	ldrb	r3, [r7, #3]
 80107b0:	4619      	mov	r1, r3
 80107b2:	f000 fb78 	bl	8010ea6 <USBD_LL_DataInStage>
}
 80107b6:	bf00      	nop
 80107b8:	3708      	adds	r7, #8
 80107ba:	46bd      	mov	sp, r7
 80107bc:	bd80      	pop	{r7, pc}

080107be <HAL_PCD_SOFCallback>:

void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 80107be:	b580      	push	{r7, lr}
 80107c0:	b082      	sub	sp, #8
 80107c2:	af00      	add	r7, sp, #0
 80107c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80107cc:	4618      	mov	r0, r3
 80107ce:	f000 fc7e 	bl	80110ce <USBD_LL_SOF>
}
 80107d2:	bf00      	nop
 80107d4:	3708      	adds	r7, #8
 80107d6:	46bd      	mov	sp, r7
 80107d8:	bd80      	pop	{r7, pc}

080107da <HAL_PCD_ResetCallback>:

void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 80107da:	b580      	push	{r7, lr}
 80107dc:	b084      	sub	sp, #16
 80107de:	af00      	add	r7, sp, #0
 80107e0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80107e2:	2301      	movs	r3, #1
 80107e4:	73fb      	strb	r3, [r7, #15]
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	79db      	ldrb	r3, [r3, #7]
 80107ea:	2b02      	cmp	r3, #2
 80107ec:	d001      	beq.n	80107f2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80107ee:	f7f1 faf3 	bl	8001dd8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80107f8:	7bfa      	ldrb	r2, [r7, #15]
 80107fa:	4611      	mov	r1, r2
 80107fc:	4618      	mov	r0, r3
 80107fe:	f000 fc56 	bl	80110ae <USBD_LL_SetSpeed>
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8010808:	4618      	mov	r0, r3
 801080a:	f000 fbfe 	bl	801100a <USBD_LL_Reset>
}
 801080e:	bf00      	nop
 8010810:	3710      	adds	r7, #16
 8010812:	46bd      	mov	sp, r7
 8010814:	bd80      	pop	{r7, pc}
	...

08010818 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010818:	b580      	push	{r7, lr}
 801081a:	b082      	sub	sp, #8
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
      pdev->pData  = &hpcd_USB_DRD_FS;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	4a19      	ldr	r2, [pc, #100]	@ (8010888 <USBD_LL_Init+0x70>)
 8010824:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x40);
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801082e:	2340      	movs	r3, #64	@ 0x40
 8010830:	2200      	movs	r2, #0
 8010832:	2100      	movs	r1, #0
 8010834:	f7f5 fc48 	bl	80060c8 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x80);
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801083e:	2380      	movs	r3, #128	@ 0x80
 8010840:	2200      	movs	r2, #0
 8010842:	2180      	movs	r1, #128	@ 0x80
 8010844:	f7f5 fc40 	bl	80060c8 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0xC0);
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801084e:	23c0      	movs	r3, #192	@ 0xc0
 8010850:	2200      	movs	r2, #0
 8010852:	2181      	movs	r1, #129	@ 0x81
 8010854:	f7f5 fc38 	bl	80060c8 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0x100);
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801085e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010862:	2200      	movs	r2, #0
 8010864:	2101      	movs	r1, #1
 8010866:	f7f5 fc2f 	bl	80060c8 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x140);
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010870:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8010874:	2200      	movs	r2, #0
 8010876:	2182      	movs	r1, #130	@ 0x82
 8010878:	f7f5 fc26 	bl	80060c8 <HAL_PCDEx_PMAConfig>
      return USBD_OK;
 801087c:	2300      	movs	r3, #0
}
 801087e:	4618      	mov	r0, r3
 8010880:	3708      	adds	r7, #8
 8010882:	46bd      	mov	sp, r7
 8010884:	bd80      	pop	{r7, pc}
 8010886:	bf00      	nop
 8010888:	2000047c 	.word	0x2000047c

0801088c <USBD_LL_Start>:
      hal_status = HAL_PCD_DeInit(pdev->pData);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801088c:	b580      	push	{r7, lr}
 801088e:	b084      	sub	sp, #16
 8010890:	af00      	add	r7, sp, #0
 8010892:	6078      	str	r0, [r7, #4]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_Start(pdev->pData);
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801089a:	4618      	mov	r0, r3
 801089c:	f7f4 f8f8 	bl	8004a90 <HAL_PCD_Start>
 80108a0:	4603      	mov	r3, r0
 80108a2:	73fb      	strb	r3, [r7, #15]
      return  USBD_Get_USB_Status(hal_status);
 80108a4:	7bfb      	ldrb	r3, [r7, #15]
 80108a6:	4618      	mov	r0, r3
 80108a8:	f000 f916 	bl	8010ad8 <USBD_Get_USB_Status>
 80108ac:	4603      	mov	r3, r0
}
 80108ae:	4618      	mov	r0, r3
 80108b0:	3710      	adds	r7, #16
 80108b2:	46bd      	mov	sp, r7
 80108b4:	bd80      	pop	{r7, pc}

080108b6 <USBD_LL_OpenEP>:
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t ep_type, uint16_t ep_mps)
{
 80108b6:	b580      	push	{r7, lr}
 80108b8:	b084      	sub	sp, #16
 80108ba:	af00      	add	r7, sp, #0
 80108bc:	6078      	str	r0, [r7, #4]
 80108be:	4608      	mov	r0, r1
 80108c0:	4611      	mov	r1, r2
 80108c2:	461a      	mov	r2, r3
 80108c4:	4603      	mov	r3, r0
 80108c6:	70fb      	strb	r3, [r7, #3]
 80108c8:	460b      	mov	r3, r1
 80108ca:	70bb      	strb	r3, [r7, #2]
 80108cc:	4613      	mov	r3, r2
 80108ce:	803b      	strh	r3, [r7, #0]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80108d6:	78bb      	ldrb	r3, [r7, #2]
 80108d8:	883a      	ldrh	r2, [r7, #0]
 80108da:	78f9      	ldrb	r1, [r7, #3]
 80108dc:	f7f4 fa27 	bl	8004d2e <HAL_PCD_EP_Open>
 80108e0:	4603      	mov	r3, r0
 80108e2:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 80108e4:	7bfb      	ldrb	r3, [r7, #15]
 80108e6:	4618      	mov	r0, r3
 80108e8:	f000 f8f6 	bl	8010ad8 <USBD_Get_USB_Status>
 80108ec:	4603      	mov	r3, r0
}
 80108ee:	4618      	mov	r0, r3
 80108f0:	3710      	adds	r7, #16
 80108f2:	46bd      	mov	sp, r7
 80108f4:	bd80      	pop	{r7, pc}

080108f6 <USBD_LL_CloseEP>:

USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80108f6:	b580      	push	{r7, lr}
 80108f8:	b084      	sub	sp, #16
 80108fa:	af00      	add	r7, sp, #0
 80108fc:	6078      	str	r0, [r7, #4]
 80108fe:	460b      	mov	r3, r1
 8010900:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010908:	78fa      	ldrb	r2, [r7, #3]
 801090a:	4611      	mov	r1, r2
 801090c:	4618      	mov	r0, r3
 801090e:	f7f4 fa6f 	bl	8004df0 <HAL_PCD_EP_Close>
 8010912:	4603      	mov	r3, r0
 8010914:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 8010916:	7bfb      	ldrb	r3, [r7, #15]
 8010918:	4618      	mov	r0, r3
 801091a:	f000 f8dd 	bl	8010ad8 <USBD_Get_USB_Status>
 801091e:	4603      	mov	r3, r0
}
 8010920:	4618      	mov	r0, r3
 8010922:	3710      	adds	r7, #16
 8010924:	46bd      	mov	sp, r7
 8010926:	bd80      	pop	{r7, pc}

08010928 <USBD_LL_StallEP>:
      hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010928:	b580      	push	{r7, lr}
 801092a:	b084      	sub	sp, #16
 801092c:	af00      	add	r7, sp, #0
 801092e:	6078      	str	r0, [r7, #4]
 8010930:	460b      	mov	r3, r1
 8010932:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801093a:	78fa      	ldrb	r2, [r7, #3]
 801093c:	4611      	mov	r1, r2
 801093e:	4618      	mov	r0, r3
 8010940:	f7f4 fb22 	bl	8004f88 <HAL_PCD_EP_SetStall>
 8010944:	4603      	mov	r3, r0
 8010946:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 8010948:	7bfb      	ldrb	r3, [r7, #15]
 801094a:	4618      	mov	r0, r3
 801094c:	f000 f8c4 	bl	8010ad8 <USBD_Get_USB_Status>
 8010950:	4603      	mov	r3, r0
}
 8010952:	4618      	mov	r0, r3
 8010954:	3710      	adds	r7, #16
 8010956:	46bd      	mov	sp, r7
 8010958:	bd80      	pop	{r7, pc}

0801095a <USBD_LL_ClearStallEP>:

USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr)
{
 801095a:	b580      	push	{r7, lr}
 801095c:	b084      	sub	sp, #16
 801095e:	af00      	add	r7, sp, #0
 8010960:	6078      	str	r0, [r7, #4]
 8010962:	460b      	mov	r3, r1
 8010964:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801096c:	78fa      	ldrb	r2, [r7, #3]
 801096e:	4611      	mov	r1, r2
 8010970:	4618      	mov	r0, r3
 8010972:	f7f4 fb5d 	bl	8005030 <HAL_PCD_EP_ClrStall>
 8010976:	4603      	mov	r3, r0
 8010978:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 801097a:	7bfb      	ldrb	r3, [r7, #15]
 801097c:	4618      	mov	r0, r3
 801097e:	f000 f8ab 	bl	8010ad8 <USBD_Get_USB_Status>
 8010982:	4603      	mov	r3, r0
}
 8010984:	4618      	mov	r0, r3
 8010986:	3710      	adds	r7, #16
 8010988:	46bd      	mov	sp, r7
 801098a:	bd80      	pop	{r7, pc}

0801098c <USBD_LL_IsStallEP>:

uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801098c:	b480      	push	{r7}
 801098e:	b085      	sub	sp, #20
 8010990:	af00      	add	r7, sp, #0
 8010992:	6078      	str	r0, [r7, #4]
 8010994:	460b      	mov	r3, r1
 8010996:	70fb      	strb	r3, [r7, #3]
      PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801099e:	60fb      	str	r3, [r7, #12]
      if((ep_addr & 0x80) == 0x80)
 80109a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	da0b      	bge.n	80109c0 <USBD_LL_IsStallEP+0x34>
      {
             return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80109a8:	78fb      	ldrb	r3, [r7, #3]
 80109aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80109ae:	68f9      	ldr	r1, [r7, #12]
 80109b0:	4613      	mov	r3, r2
 80109b2:	009b      	lsls	r3, r3, #2
 80109b4:	4413      	add	r3, r2
 80109b6:	00db      	lsls	r3, r3, #3
 80109b8:	440b      	add	r3, r1
 80109ba:	3316      	adds	r3, #22
 80109bc:	781b      	ldrb	r3, [r3, #0]
 80109be:	e00b      	b.n	80109d8 <USBD_LL_IsStallEP+0x4c>
      }
      else
      {
             return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80109c0:	78fb      	ldrb	r3, [r7, #3]
 80109c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80109c6:	68f9      	ldr	r1, [r7, #12]
 80109c8:	4613      	mov	r3, r2
 80109ca:	009b      	lsls	r3, r3, #2
 80109cc:	4413      	add	r3, r2
 80109ce:	00db      	lsls	r3, r3, #3
 80109d0:	440b      	add	r3, r1
 80109d2:	f503 73ab 	add.w	r3, r3, #342	@ 0x156
 80109d6:	781b      	ldrb	r3, [r3, #0]
      }
}
 80109d8:	4618      	mov	r0, r3
 80109da:	3714      	adds	r7, #20
 80109dc:	46bd      	mov	sp, r7
 80109de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e2:	4770      	bx	lr

080109e4 <USBD_LL_SetUSBAddress>:

USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev,
             uint8_t dev_addr)
{
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b084      	sub	sp, #16
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
 80109ec:	460b      	mov	r3, r1
 80109ee:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80109f6:	78fa      	ldrb	r2, [r7, #3]
 80109f8:	4611      	mov	r1, r2
 80109fa:	4618      	mov	r0, r3
 80109fc:	f7f4 f973 	bl	8004ce6 <HAL_PCD_SetAddress>
 8010a00:	4603      	mov	r3, r0
 8010a02:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 8010a04:	7bfb      	ldrb	r3, [r7, #15]
 8010a06:	4618      	mov	r0, r3
 8010a08:	f000 f866 	bl	8010ad8 <USBD_Get_USB_Status>
 8010a0c:	4603      	mov	r3, r0
}
 8010a0e:	4618      	mov	r0, r3
 8010a10:	3710      	adds	r7, #16
 8010a12:	46bd      	mov	sp, r7
 8010a14:	bd80      	pop	{r7, pc}

08010a16 <USBD_LL_Transmit>:

USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t *pbuf, uint32_t size)
{
 8010a16:	b580      	push	{r7, lr}
 8010a18:	b086      	sub	sp, #24
 8010a1a:	af00      	add	r7, sp, #0
 8010a1c:	60f8      	str	r0, [r7, #12]
 8010a1e:	607a      	str	r2, [r7, #4]
 8010a20:	603b      	str	r3, [r7, #0]
 8010a22:	460b      	mov	r3, r1
 8010a24:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010a2c:	7af9      	ldrb	r1, [r7, #11]
 8010a2e:	683b      	ldr	r3, [r7, #0]
 8010a30:	687a      	ldr	r2, [r7, #4]
 8010a32:	f7f4 fa71 	bl	8004f18 <HAL_PCD_EP_Transmit>
 8010a36:	4603      	mov	r3, r0
 8010a38:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 8010a3a:	7dfb      	ldrb	r3, [r7, #23]
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	f000 f84b 	bl	8010ad8 <USBD_Get_USB_Status>
 8010a42:	4603      	mov	r3, r0
}
 8010a44:	4618      	mov	r0, r3
 8010a46:	3718      	adds	r7, #24
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	bd80      	pop	{r7, pc}

08010a4c <USBD_LL_PrepareReceive>:

USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr, uint8_t *pbuf,
             uint32_t size)
{
 8010a4c:	b580      	push	{r7, lr}
 8010a4e:	b086      	sub	sp, #24
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	60f8      	str	r0, [r7, #12]
 8010a54:	607a      	str	r2, [r7, #4]
 8010a56:	603b      	str	r3, [r7, #0]
 8010a58:	460b      	mov	r3, r1
 8010a5a:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010a62:	7af9      	ldrb	r1, [r7, #11]
 8010a64:	683b      	ldr	r3, [r7, #0]
 8010a66:	687a      	ldr	r2, [r7, #4]
 8010a68:	f7f4 fa0c 	bl	8004e84 <HAL_PCD_EP_Receive>
 8010a6c:	4603      	mov	r3, r0
 8010a6e:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 8010a70:	7dfb      	ldrb	r3, [r7, #23]
 8010a72:	4618      	mov	r0, r3
 8010a74:	f000 f830 	bl	8010ad8 <USBD_Get_USB_Status>
 8010a78:	4603      	mov	r3, r0
}
 8010a7a:	4618      	mov	r0, r3
 8010a7c:	3718      	adds	r7, #24
 8010a7e:	46bd      	mov	sp, r7
 8010a80:	bd80      	pop	{r7, pc}

08010a82 <USBD_LL_GetRxDataSize>:

uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010a82:	b580      	push	{r7, lr}
 8010a84:	b082      	sub	sp, #8
 8010a86:	af00      	add	r7, sp, #0
 8010a88:	6078      	str	r0, [r7, #4]
 8010a8a:	460b      	mov	r3, r1
 8010a8c:	70fb      	strb	r3, [r7, #3]
      return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010a94:	78fa      	ldrb	r2, [r7, #3]
 8010a96:	4611      	mov	r1, r2
 8010a98:	4618      	mov	r0, r3
 8010a9a:	f7f4 fa25 	bl	8004ee8 <HAL_PCD_EP_GetRxCount>
 8010a9e:	4603      	mov	r3, r0
}
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	3708      	adds	r7, #8
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	bd80      	pop	{r7, pc}

08010aa8 <USBD_static_malloc>:

void *USBD_static_malloc(uint32_t size)
{
 8010aa8:	b480      	push	{r7}
 8010aaa:	b083      	sub	sp, #12
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	6078      	str	r0, [r7, #4]
      UNUSED(size);
      static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef) / 4) + 1]; /* On 32-bit boundary */
      return mem;
 8010ab0:	4b03      	ldr	r3, [pc, #12]	@ (8010ac0 <USBD_static_malloc+0x18>)
}
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	370c      	adds	r7, #12
 8010ab6:	46bd      	mov	sp, r7
 8010ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010abc:	4770      	bx	lr
 8010abe:	bf00      	nop
 8010ac0:	20010ef0 	.word	0x20010ef0

08010ac4 <USBD_static_free>:

void USBD_static_free(void *p)
{
 8010ac4:	b480      	push	{r7}
 8010ac6:	b083      	sub	sp, #12
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
      UNUSED(p);
}
 8010acc:	bf00      	nop
 8010ace:	370c      	adds	r7, #12
 8010ad0:	46bd      	mov	sp, r7
 8010ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad6:	4770      	bx	lr

08010ad8 <USBD_Get_USB_Status>:
{
      HAL_Delay(Delay);
}

USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010ad8:	b480      	push	{r7}
 8010ada:	b085      	sub	sp, #20
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	4603      	mov	r3, r0
 8010ae0:	71fb      	strb	r3, [r7, #7]
      USBD_StatusTypeDef usb_status = USBD_OK;
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	73fb      	strb	r3, [r7, #15]
      switch (hal_status)
 8010ae6:	79fb      	ldrb	r3, [r7, #7]
 8010ae8:	2b03      	cmp	r3, #3
 8010aea:	d817      	bhi.n	8010b1c <USBD_Get_USB_Status+0x44>
 8010aec:	a201      	add	r2, pc, #4	@ (adr r2, 8010af4 <USBD_Get_USB_Status+0x1c>)
 8010aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010af2:	bf00      	nop
 8010af4:	08010b05 	.word	0x08010b05
 8010af8:	08010b0b 	.word	0x08010b0b
 8010afc:	08010b11 	.word	0x08010b11
 8010b00:	08010b17 	.word	0x08010b17
      {
      case HAL_OK :
             usb_status = USBD_OK;
 8010b04:	2300      	movs	r3, #0
 8010b06:	73fb      	strb	r3, [r7, #15]
             break;
 8010b08:	e00b      	b.n	8010b22 <USBD_Get_USB_Status+0x4a>
      case HAL_ERROR :
             usb_status = USBD_FAIL;
 8010b0a:	2303      	movs	r3, #3
 8010b0c:	73fb      	strb	r3, [r7, #15]
             break;
 8010b0e:	e008      	b.n	8010b22 <USBD_Get_USB_Status+0x4a>
      case HAL_BUSY :
             usb_status = USBD_BUSY;
 8010b10:	2301      	movs	r3, #1
 8010b12:	73fb      	strb	r3, [r7, #15]
             break;
 8010b14:	e005      	b.n	8010b22 <USBD_Get_USB_Status+0x4a>
      case HAL_TIMEOUT :
             usb_status = USBD_FAIL;
 8010b16:	2303      	movs	r3, #3
 8010b18:	73fb      	strb	r3, [r7, #15]
             break;
 8010b1a:	e002      	b.n	8010b22 <USBD_Get_USB_Status+0x4a>
      default :
             usb_status = USBD_FAIL;
 8010b1c:	2303      	movs	r3, #3
 8010b1e:	73fb      	strb	r3, [r7, #15]
             break;
 8010b20:	bf00      	nop
      }
      return usb_status;
 8010b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b24:	4618      	mov	r0, r3
 8010b26:	3714      	adds	r7, #20
 8010b28:	46bd      	mov	sp, r7
 8010b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b2e:	4770      	bx	lr

08010b30 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010b30:	b580      	push	{r7, lr}
 8010b32:	b086      	sub	sp, #24
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	60f8      	str	r0, [r7, #12]
 8010b38:	60b9      	str	r1, [r7, #8]
 8010b3a:	4613      	mov	r3, r2
 8010b3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d101      	bne.n	8010b48 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8010b44:	2303      	movs	r3, #3
 8010b46:	e01f      	b.n	8010b88 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	2200      	movs	r2, #0
 8010b4c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	2200      	movs	r2, #0
 8010b54:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	2200      	movs	r2, #0
 8010b5c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010b60:	68bb      	ldr	r3, [r7, #8]
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d003      	beq.n	8010b6e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	68ba      	ldr	r2, [r7, #8]
 8010b6a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	2201      	movs	r2, #1
 8010b72:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	79fa      	ldrb	r2, [r7, #7]
 8010b7a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8010b7c:	68f8      	ldr	r0, [r7, #12]
 8010b7e:	f7ff fe4b 	bl	8010818 <USBD_LL_Init>
 8010b82:	4603      	mov	r3, r0
 8010b84:	75fb      	strb	r3, [r7, #23]

  return ret;
 8010b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b88:	4618      	mov	r0, r3
 8010b8a:	3718      	adds	r7, #24
 8010b8c:	46bd      	mov	sp, r7
 8010b8e:	bd80      	pop	{r7, pc}

08010b90 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010b90:	b580      	push	{r7, lr}
 8010b92:	b084      	sub	sp, #16
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	6078      	str	r0, [r7, #4]
 8010b98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010b9a:	2300      	movs	r3, #0
 8010b9c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8010b9e:	683b      	ldr	r3, [r7, #0]
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d101      	bne.n	8010ba8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8010ba4:	2303      	movs	r3, #3
 8010ba6:	e025      	b.n	8010bf4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	683a      	ldr	r2, [r7, #0]
 8010bac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	32ae      	adds	r2, #174	@ 0xae
 8010bba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d00f      	beq.n	8010be4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	32ae      	adds	r2, #174	@ 0xae
 8010bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010bd4:	f107 020e 	add.w	r2, r7, #14
 8010bd8:	4610      	mov	r0, r2
 8010bda:	4798      	blx	r3
 8010bdc:	4602      	mov	r2, r0
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010bea:	1c5a      	adds	r2, r3, #1
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8010bf2:	2300      	movs	r3, #0
}
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	3710      	adds	r7, #16
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	bd80      	pop	{r7, pc}

08010bfc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010bfc:	b580      	push	{r7, lr}
 8010bfe:	b082      	sub	sp, #8
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010c04:	6878      	ldr	r0, [r7, #4]
 8010c06:	f7ff fe41 	bl	801088c <USBD_LL_Start>
 8010c0a:	4603      	mov	r3, r0
}
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	3708      	adds	r7, #8
 8010c10:	46bd      	mov	sp, r7
 8010c12:	bd80      	pop	{r7, pc}

08010c14 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8010c14:	b480      	push	{r7}
 8010c16:	b083      	sub	sp, #12
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010c1c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8010c1e:	4618      	mov	r0, r3
 8010c20:	370c      	adds	r7, #12
 8010c22:	46bd      	mov	sp, r7
 8010c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c28:	4770      	bx	lr

08010c2a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010c2a:	b580      	push	{r7, lr}
 8010c2c:	b084      	sub	sp, #16
 8010c2e:	af00      	add	r7, sp, #0
 8010c30:	6078      	str	r0, [r7, #4]
 8010c32:	460b      	mov	r3, r1
 8010c34:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8010c36:	2300      	movs	r3, #0
 8010c38:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d009      	beq.n	8010c58 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	78fa      	ldrb	r2, [r7, #3]
 8010c4e:	4611      	mov	r1, r2
 8010c50:	6878      	ldr	r0, [r7, #4]
 8010c52:	4798      	blx	r3
 8010c54:	4603      	mov	r3, r0
 8010c56:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	3710      	adds	r7, #16
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	bd80      	pop	{r7, pc}

08010c62 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010c62:	b580      	push	{r7, lr}
 8010c64:	b084      	sub	sp, #16
 8010c66:	af00      	add	r7, sp, #0
 8010c68:	6078      	str	r0, [r7, #4]
 8010c6a:	460b      	mov	r3, r1
 8010c6c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8010c6e:	2300      	movs	r3, #0
 8010c70:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010c78:	685b      	ldr	r3, [r3, #4]
 8010c7a:	78fa      	ldrb	r2, [r7, #3]
 8010c7c:	4611      	mov	r1, r2
 8010c7e:	6878      	ldr	r0, [r7, #4]
 8010c80:	4798      	blx	r3
 8010c82:	4603      	mov	r3, r0
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d001      	beq.n	8010c8c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8010c88:	2303      	movs	r3, #3
 8010c8a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c8e:	4618      	mov	r0, r3
 8010c90:	3710      	adds	r7, #16
 8010c92:	46bd      	mov	sp, r7
 8010c94:	bd80      	pop	{r7, pc}

08010c96 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010c96:	b580      	push	{r7, lr}
 8010c98:	b084      	sub	sp, #16
 8010c9a:	af00      	add	r7, sp, #0
 8010c9c:	6078      	str	r0, [r7, #4]
 8010c9e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010ca6:	6839      	ldr	r1, [r7, #0]
 8010ca8:	4618      	mov	r0, r3
 8010caa:	f001 f846 	bl	8011d3a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	2201      	movs	r2, #1
 8010cb2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8010cbc:	461a      	mov	r2, r3
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8010cca:	f003 031f 	and.w	r3, r3, #31
 8010cce:	2b02      	cmp	r3, #2
 8010cd0:	d01a      	beq.n	8010d08 <USBD_LL_SetupStage+0x72>
 8010cd2:	2b02      	cmp	r3, #2
 8010cd4:	d822      	bhi.n	8010d1c <USBD_LL_SetupStage+0x86>
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d002      	beq.n	8010ce0 <USBD_LL_SetupStage+0x4a>
 8010cda:	2b01      	cmp	r3, #1
 8010cdc:	d00a      	beq.n	8010cf4 <USBD_LL_SetupStage+0x5e>
 8010cde:	e01d      	b.n	8010d1c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010ce6:	4619      	mov	r1, r3
 8010ce8:	6878      	ldr	r0, [r7, #4]
 8010cea:	f000 fa9d 	bl	8011228 <USBD_StdDevReq>
 8010cee:	4603      	mov	r3, r0
 8010cf0:	73fb      	strb	r3, [r7, #15]
      break;
 8010cf2:	e020      	b.n	8010d36 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010cfa:	4619      	mov	r1, r3
 8010cfc:	6878      	ldr	r0, [r7, #4]
 8010cfe:	f000 fb05 	bl	801130c <USBD_StdItfReq>
 8010d02:	4603      	mov	r3, r0
 8010d04:	73fb      	strb	r3, [r7, #15]
      break;
 8010d06:	e016      	b.n	8010d36 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010d0e:	4619      	mov	r1, r3
 8010d10:	6878      	ldr	r0, [r7, #4]
 8010d12:	f000 fb67 	bl	80113e4 <USBD_StdEPReq>
 8010d16:	4603      	mov	r3, r0
 8010d18:	73fb      	strb	r3, [r7, #15]
      break;
 8010d1a:	e00c      	b.n	8010d36 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8010d22:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8010d26:	b2db      	uxtb	r3, r3
 8010d28:	4619      	mov	r1, r3
 8010d2a:	6878      	ldr	r0, [r7, #4]
 8010d2c:	f7ff fdfc 	bl	8010928 <USBD_LL_StallEP>
 8010d30:	4603      	mov	r3, r0
 8010d32:	73fb      	strb	r3, [r7, #15]
      break;
 8010d34:	bf00      	nop
  }

  return ret;
 8010d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d38:	4618      	mov	r0, r3
 8010d3a:	3710      	adds	r7, #16
 8010d3c:	46bd      	mov	sp, r7
 8010d3e:	bd80      	pop	{r7, pc}

08010d40 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b086      	sub	sp, #24
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	60f8      	str	r0, [r7, #12]
 8010d48:	460b      	mov	r3, r1
 8010d4a:	607a      	str	r2, [r7, #4]
 8010d4c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8010d4e:	2300      	movs	r3, #0
 8010d50:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8010d52:	7afb      	ldrb	r3, [r7, #11]
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d16e      	bne.n	8010e36 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8010d5e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8010d66:	2b03      	cmp	r3, #3
 8010d68:	f040 8098 	bne.w	8010e9c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8010d6c:	693b      	ldr	r3, [r7, #16]
 8010d6e:	689a      	ldr	r2, [r3, #8]
 8010d70:	693b      	ldr	r3, [r7, #16]
 8010d72:	68db      	ldr	r3, [r3, #12]
 8010d74:	429a      	cmp	r2, r3
 8010d76:	d913      	bls.n	8010da0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8010d78:	693b      	ldr	r3, [r7, #16]
 8010d7a:	689a      	ldr	r2, [r3, #8]
 8010d7c:	693b      	ldr	r3, [r7, #16]
 8010d7e:	68db      	ldr	r3, [r3, #12]
 8010d80:	1ad2      	subs	r2, r2, r3
 8010d82:	693b      	ldr	r3, [r7, #16]
 8010d84:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8010d86:	693b      	ldr	r3, [r7, #16]
 8010d88:	68da      	ldr	r2, [r3, #12]
 8010d8a:	693b      	ldr	r3, [r7, #16]
 8010d8c:	689b      	ldr	r3, [r3, #8]
 8010d8e:	4293      	cmp	r3, r2
 8010d90:	bf28      	it	cs
 8010d92:	4613      	movcs	r3, r2
 8010d94:	461a      	mov	r2, r3
 8010d96:	6879      	ldr	r1, [r7, #4]
 8010d98:	68f8      	ldr	r0, [r7, #12]
 8010d9a:	f001 f9cf 	bl	801213c <USBD_CtlContinueRx>
 8010d9e:	e07d      	b.n	8010e9c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8010da6:	f003 031f 	and.w	r3, r3, #31
 8010daa:	2b02      	cmp	r3, #2
 8010dac:	d014      	beq.n	8010dd8 <USBD_LL_DataOutStage+0x98>
 8010dae:	2b02      	cmp	r3, #2
 8010db0:	d81d      	bhi.n	8010dee <USBD_LL_DataOutStage+0xae>
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d002      	beq.n	8010dbc <USBD_LL_DataOutStage+0x7c>
 8010db6:	2b01      	cmp	r3, #1
 8010db8:	d003      	beq.n	8010dc2 <USBD_LL_DataOutStage+0x82>
 8010dba:	e018      	b.n	8010dee <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	75bb      	strb	r3, [r7, #22]
            break;
 8010dc0:	e018      	b.n	8010df4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8010dc8:	b2db      	uxtb	r3, r3
 8010dca:	4619      	mov	r1, r3
 8010dcc:	68f8      	ldr	r0, [r7, #12]
 8010dce:	f000 f99e 	bl	801110e <USBD_CoreFindIF>
 8010dd2:	4603      	mov	r3, r0
 8010dd4:	75bb      	strb	r3, [r7, #22]
            break;
 8010dd6:	e00d      	b.n	8010df4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8010dde:	b2db      	uxtb	r3, r3
 8010de0:	4619      	mov	r1, r3
 8010de2:	68f8      	ldr	r0, [r7, #12]
 8010de4:	f000 f9a0 	bl	8011128 <USBD_CoreFindEP>
 8010de8:	4603      	mov	r3, r0
 8010dea:	75bb      	strb	r3, [r7, #22]
            break;
 8010dec:	e002      	b.n	8010df4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8010dee:	2300      	movs	r3, #0
 8010df0:	75bb      	strb	r3, [r7, #22]
            break;
 8010df2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8010df4:	7dbb      	ldrb	r3, [r7, #22]
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d119      	bne.n	8010e2e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010e00:	b2db      	uxtb	r3, r3
 8010e02:	2b03      	cmp	r3, #3
 8010e04:	d113      	bne.n	8010e2e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8010e06:	7dba      	ldrb	r2, [r7, #22]
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	32ae      	adds	r2, #174	@ 0xae
 8010e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e10:	691b      	ldr	r3, [r3, #16]
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d00b      	beq.n	8010e2e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8010e16:	7dba      	ldrb	r2, [r7, #22]
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8010e1e:	7dba      	ldrb	r2, [r7, #22]
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	32ae      	adds	r2, #174	@ 0xae
 8010e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e28:	691b      	ldr	r3, [r3, #16]
 8010e2a:	68f8      	ldr	r0, [r7, #12]
 8010e2c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8010e2e:	68f8      	ldr	r0, [r7, #12]
 8010e30:	f001 f995 	bl	801215e <USBD_CtlSendStatus>
 8010e34:	e032      	b.n	8010e9c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8010e36:	7afb      	ldrb	r3, [r7, #11]
 8010e38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010e3c:	b2db      	uxtb	r3, r3
 8010e3e:	4619      	mov	r1, r3
 8010e40:	68f8      	ldr	r0, [r7, #12]
 8010e42:	f000 f971 	bl	8011128 <USBD_CoreFindEP>
 8010e46:	4603      	mov	r3, r0
 8010e48:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010e4a:	7dbb      	ldrb	r3, [r7, #22]
 8010e4c:	2bff      	cmp	r3, #255	@ 0xff
 8010e4e:	d025      	beq.n	8010e9c <USBD_LL_DataOutStage+0x15c>
 8010e50:	7dbb      	ldrb	r3, [r7, #22]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d122      	bne.n	8010e9c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010e5c:	b2db      	uxtb	r3, r3
 8010e5e:	2b03      	cmp	r3, #3
 8010e60:	d117      	bne.n	8010e92 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8010e62:	7dba      	ldrb	r2, [r7, #22]
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	32ae      	adds	r2, #174	@ 0xae
 8010e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e6c:	699b      	ldr	r3, [r3, #24]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d00f      	beq.n	8010e92 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8010e72:	7dba      	ldrb	r2, [r7, #22]
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8010e7a:	7dba      	ldrb	r2, [r7, #22]
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	32ae      	adds	r2, #174	@ 0xae
 8010e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e84:	699b      	ldr	r3, [r3, #24]
 8010e86:	7afa      	ldrb	r2, [r7, #11]
 8010e88:	4611      	mov	r1, r2
 8010e8a:	68f8      	ldr	r0, [r7, #12]
 8010e8c:	4798      	blx	r3
 8010e8e:	4603      	mov	r3, r0
 8010e90:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8010e92:	7dfb      	ldrb	r3, [r7, #23]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d001      	beq.n	8010e9c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8010e98:	7dfb      	ldrb	r3, [r7, #23]
 8010e9a:	e000      	b.n	8010e9e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8010e9c:	2300      	movs	r3, #0
}
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	3718      	adds	r7, #24
 8010ea2:	46bd      	mov	sp, r7
 8010ea4:	bd80      	pop	{r7, pc}

08010ea6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8010ea6:	b580      	push	{r7, lr}
 8010ea8:	b086      	sub	sp, #24
 8010eaa:	af00      	add	r7, sp, #0
 8010eac:	60f8      	str	r0, [r7, #12]
 8010eae:	460b      	mov	r3, r1
 8010eb0:	607a      	str	r2, [r7, #4]
 8010eb2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8010eb4:	7afb      	ldrb	r3, [r7, #11]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d16f      	bne.n	8010f9a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	3314      	adds	r3, #20
 8010ebe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8010ec6:	2b02      	cmp	r3, #2
 8010ec8:	d15a      	bne.n	8010f80 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8010eca:	693b      	ldr	r3, [r7, #16]
 8010ecc:	689a      	ldr	r2, [r3, #8]
 8010ece:	693b      	ldr	r3, [r7, #16]
 8010ed0:	68db      	ldr	r3, [r3, #12]
 8010ed2:	429a      	cmp	r2, r3
 8010ed4:	d914      	bls.n	8010f00 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010ed6:	693b      	ldr	r3, [r7, #16]
 8010ed8:	689a      	ldr	r2, [r3, #8]
 8010eda:	693b      	ldr	r3, [r7, #16]
 8010edc:	68db      	ldr	r3, [r3, #12]
 8010ede:	1ad2      	subs	r2, r2, r3
 8010ee0:	693b      	ldr	r3, [r7, #16]
 8010ee2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010ee4:	693b      	ldr	r3, [r7, #16]
 8010ee6:	689b      	ldr	r3, [r3, #8]
 8010ee8:	461a      	mov	r2, r3
 8010eea:	6879      	ldr	r1, [r7, #4]
 8010eec:	68f8      	ldr	r0, [r7, #12]
 8010eee:	f001 f8f7 	bl	80120e0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	2200      	movs	r2, #0
 8010ef6:	2100      	movs	r1, #0
 8010ef8:	68f8      	ldr	r0, [r7, #12]
 8010efa:	f7ff fda7 	bl	8010a4c <USBD_LL_PrepareReceive>
 8010efe:	e03f      	b.n	8010f80 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010f00:	693b      	ldr	r3, [r7, #16]
 8010f02:	68da      	ldr	r2, [r3, #12]
 8010f04:	693b      	ldr	r3, [r7, #16]
 8010f06:	689b      	ldr	r3, [r3, #8]
 8010f08:	429a      	cmp	r2, r3
 8010f0a:	d11c      	bne.n	8010f46 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010f0c:	693b      	ldr	r3, [r7, #16]
 8010f0e:	685a      	ldr	r2, [r3, #4]
 8010f10:	693b      	ldr	r3, [r7, #16]
 8010f12:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010f14:	429a      	cmp	r2, r3
 8010f16:	d316      	bcc.n	8010f46 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8010f18:	693b      	ldr	r3, [r7, #16]
 8010f1a:	685a      	ldr	r2, [r3, #4]
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010f22:	429a      	cmp	r2, r3
 8010f24:	d20f      	bcs.n	8010f46 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010f26:	2200      	movs	r2, #0
 8010f28:	2100      	movs	r1, #0
 8010f2a:	68f8      	ldr	r0, [r7, #12]
 8010f2c:	f001 f8d8 	bl	80120e0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	2200      	movs	r2, #0
 8010f34:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010f38:	2300      	movs	r3, #0
 8010f3a:	2200      	movs	r2, #0
 8010f3c:	2100      	movs	r1, #0
 8010f3e:	68f8      	ldr	r0, [r7, #12]
 8010f40:	f7ff fd84 	bl	8010a4c <USBD_LL_PrepareReceive>
 8010f44:	e01c      	b.n	8010f80 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010f4c:	b2db      	uxtb	r3, r3
 8010f4e:	2b03      	cmp	r3, #3
 8010f50:	d10f      	bne.n	8010f72 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010f58:	68db      	ldr	r3, [r3, #12]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d009      	beq.n	8010f72 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	2200      	movs	r2, #0
 8010f62:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010f6c:	68db      	ldr	r3, [r3, #12]
 8010f6e:	68f8      	ldr	r0, [r7, #12]
 8010f70:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010f72:	2180      	movs	r1, #128	@ 0x80
 8010f74:	68f8      	ldr	r0, [r7, #12]
 8010f76:	f7ff fcd7 	bl	8010928 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8010f7a:	68f8      	ldr	r0, [r7, #12]
 8010f7c:	f001 f902 	bl	8012184 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d03a      	beq.n	8011000 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8010f8a:	68f8      	ldr	r0, [r7, #12]
 8010f8c:	f7ff fe42 	bl	8010c14 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	2200      	movs	r2, #0
 8010f94:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8010f98:	e032      	b.n	8011000 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8010f9a:	7afb      	ldrb	r3, [r7, #11]
 8010f9c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010fa0:	b2db      	uxtb	r3, r3
 8010fa2:	4619      	mov	r1, r3
 8010fa4:	68f8      	ldr	r0, [r7, #12]
 8010fa6:	f000 f8bf 	bl	8011128 <USBD_CoreFindEP>
 8010faa:	4603      	mov	r3, r0
 8010fac:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010fae:	7dfb      	ldrb	r3, [r7, #23]
 8010fb0:	2bff      	cmp	r3, #255	@ 0xff
 8010fb2:	d025      	beq.n	8011000 <USBD_LL_DataInStage+0x15a>
 8010fb4:	7dfb      	ldrb	r3, [r7, #23]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d122      	bne.n	8011000 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010fc0:	b2db      	uxtb	r3, r3
 8010fc2:	2b03      	cmp	r3, #3
 8010fc4:	d11c      	bne.n	8011000 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8010fc6:	7dfa      	ldrb	r2, [r7, #23]
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	32ae      	adds	r2, #174	@ 0xae
 8010fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010fd0:	695b      	ldr	r3, [r3, #20]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d014      	beq.n	8011000 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8010fd6:	7dfa      	ldrb	r2, [r7, #23]
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8010fde:	7dfa      	ldrb	r2, [r7, #23]
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	32ae      	adds	r2, #174	@ 0xae
 8010fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010fe8:	695b      	ldr	r3, [r3, #20]
 8010fea:	7afa      	ldrb	r2, [r7, #11]
 8010fec:	4611      	mov	r1, r2
 8010fee:	68f8      	ldr	r0, [r7, #12]
 8010ff0:	4798      	blx	r3
 8010ff2:	4603      	mov	r3, r0
 8010ff4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8010ff6:	7dbb      	ldrb	r3, [r7, #22]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d001      	beq.n	8011000 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8010ffc:	7dbb      	ldrb	r3, [r7, #22]
 8010ffe:	e000      	b.n	8011002 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8011000:	2300      	movs	r3, #0
}
 8011002:	4618      	mov	r0, r3
 8011004:	3718      	adds	r7, #24
 8011006:	46bd      	mov	sp, r7
 8011008:	bd80      	pop	{r7, pc}

0801100a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801100a:	b580      	push	{r7, lr}
 801100c:	b084      	sub	sp, #16
 801100e:	af00      	add	r7, sp, #0
 8011010:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8011012:	2300      	movs	r3, #0
 8011014:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	2201      	movs	r2, #1
 801101a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	2200      	movs	r2, #0
 8011022:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	2200      	movs	r2, #0
 801102a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	2200      	movs	r2, #0
 8011030:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	2200      	movs	r2, #0
 8011038:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011042:	2b00      	cmp	r3, #0
 8011044:	d014      	beq.n	8011070 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801104c:	685b      	ldr	r3, [r3, #4]
 801104e:	2b00      	cmp	r3, #0
 8011050:	d00e      	beq.n	8011070 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011058:	685b      	ldr	r3, [r3, #4]
 801105a:	687a      	ldr	r2, [r7, #4]
 801105c:	6852      	ldr	r2, [r2, #4]
 801105e:	b2d2      	uxtb	r2, r2
 8011060:	4611      	mov	r1, r2
 8011062:	6878      	ldr	r0, [r7, #4]
 8011064:	4798      	blx	r3
 8011066:	4603      	mov	r3, r0
 8011068:	2b00      	cmp	r3, #0
 801106a:	d001      	beq.n	8011070 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 801106c:	2303      	movs	r3, #3
 801106e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011070:	2340      	movs	r3, #64	@ 0x40
 8011072:	2200      	movs	r2, #0
 8011074:	2100      	movs	r1, #0
 8011076:	6878      	ldr	r0, [r7, #4]
 8011078:	f7ff fc1d 	bl	80108b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	2201      	movs	r2, #1
 8011080:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	2240      	movs	r2, #64	@ 0x40
 8011088:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801108c:	2340      	movs	r3, #64	@ 0x40
 801108e:	2200      	movs	r2, #0
 8011090:	2180      	movs	r1, #128	@ 0x80
 8011092:	6878      	ldr	r0, [r7, #4]
 8011094:	f7ff fc0f 	bl	80108b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	2201      	movs	r2, #1
 801109c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	2240      	movs	r2, #64	@ 0x40
 80110a2:	621a      	str	r2, [r3, #32]

  return ret;
 80110a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80110a6:	4618      	mov	r0, r3
 80110a8:	3710      	adds	r7, #16
 80110aa:	46bd      	mov	sp, r7
 80110ac:	bd80      	pop	{r7, pc}

080110ae <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80110ae:	b480      	push	{r7}
 80110b0:	b083      	sub	sp, #12
 80110b2:	af00      	add	r7, sp, #0
 80110b4:	6078      	str	r0, [r7, #4]
 80110b6:	460b      	mov	r3, r1
 80110b8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	78fa      	ldrb	r2, [r7, #3]
 80110be:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80110c0:	2300      	movs	r3, #0
}
 80110c2:	4618      	mov	r0, r3
 80110c4:	370c      	adds	r7, #12
 80110c6:	46bd      	mov	sp, r7
 80110c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110cc:	4770      	bx	lr

080110ce <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80110ce:	b580      	push	{r7, lr}
 80110d0:	b082      	sub	sp, #8
 80110d2:	af00      	add	r7, sp, #0
 80110d4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80110dc:	b2db      	uxtb	r3, r3
 80110de:	2b03      	cmp	r3, #3
 80110e0:	d110      	bne.n	8011104 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d00b      	beq.n	8011104 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80110f2:	69db      	ldr	r3, [r3, #28]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d005      	beq.n	8011104 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80110fe:	69db      	ldr	r3, [r3, #28]
 8011100:	6878      	ldr	r0, [r7, #4]
 8011102:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8011104:	2300      	movs	r3, #0
}
 8011106:	4618      	mov	r0, r3
 8011108:	3708      	adds	r7, #8
 801110a:	46bd      	mov	sp, r7
 801110c:	bd80      	pop	{r7, pc}

0801110e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801110e:	b480      	push	{r7}
 8011110:	b083      	sub	sp, #12
 8011112:	af00      	add	r7, sp, #0
 8011114:	6078      	str	r0, [r7, #4]
 8011116:	460b      	mov	r3, r1
 8011118:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801111a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801111c:	4618      	mov	r0, r3
 801111e:	370c      	adds	r7, #12
 8011120:	46bd      	mov	sp, r7
 8011122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011126:	4770      	bx	lr

08011128 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8011128:	b480      	push	{r7}
 801112a:	b083      	sub	sp, #12
 801112c:	af00      	add	r7, sp, #0
 801112e:	6078      	str	r0, [r7, #4]
 8011130:	460b      	mov	r3, r1
 8011132:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011134:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011136:	4618      	mov	r0, r3
 8011138:	370c      	adds	r7, #12
 801113a:	46bd      	mov	sp, r7
 801113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011140:	4770      	bx	lr

08011142 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8011142:	b580      	push	{r7, lr}
 8011144:	b086      	sub	sp, #24
 8011146:	af00      	add	r7, sp, #0
 8011148:	6078      	str	r0, [r7, #4]
 801114a:	460b      	mov	r3, r1
 801114c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8011156:	2300      	movs	r3, #0
 8011158:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	885b      	ldrh	r3, [r3, #2]
 801115e:	b29b      	uxth	r3, r3
 8011160:	68fa      	ldr	r2, [r7, #12]
 8011162:	7812      	ldrb	r2, [r2, #0]
 8011164:	4293      	cmp	r3, r2
 8011166:	d91f      	bls.n	80111a8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	781b      	ldrb	r3, [r3, #0]
 801116c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801116e:	e013      	b.n	8011198 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8011170:	f107 030a 	add.w	r3, r7, #10
 8011174:	4619      	mov	r1, r3
 8011176:	6978      	ldr	r0, [r7, #20]
 8011178:	f000 f81b 	bl	80111b2 <USBD_GetNextDesc>
 801117c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801117e:	697b      	ldr	r3, [r7, #20]
 8011180:	785b      	ldrb	r3, [r3, #1]
 8011182:	2b05      	cmp	r3, #5
 8011184:	d108      	bne.n	8011198 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8011186:	697b      	ldr	r3, [r7, #20]
 8011188:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801118a:	693b      	ldr	r3, [r7, #16]
 801118c:	789b      	ldrb	r3, [r3, #2]
 801118e:	78fa      	ldrb	r2, [r7, #3]
 8011190:	429a      	cmp	r2, r3
 8011192:	d008      	beq.n	80111a6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8011194:	2300      	movs	r3, #0
 8011196:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	885b      	ldrh	r3, [r3, #2]
 801119c:	b29a      	uxth	r2, r3
 801119e:	897b      	ldrh	r3, [r7, #10]
 80111a0:	429a      	cmp	r2, r3
 80111a2:	d8e5      	bhi.n	8011170 <USBD_GetEpDesc+0x2e>
 80111a4:	e000      	b.n	80111a8 <USBD_GetEpDesc+0x66>
          break;
 80111a6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80111a8:	693b      	ldr	r3, [r7, #16]
}
 80111aa:	4618      	mov	r0, r3
 80111ac:	3718      	adds	r7, #24
 80111ae:	46bd      	mov	sp, r7
 80111b0:	bd80      	pop	{r7, pc}

080111b2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80111b2:	b480      	push	{r7}
 80111b4:	b085      	sub	sp, #20
 80111b6:	af00      	add	r7, sp, #0
 80111b8:	6078      	str	r0, [r7, #4]
 80111ba:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80111c0:	683b      	ldr	r3, [r7, #0]
 80111c2:	881b      	ldrh	r3, [r3, #0]
 80111c4:	68fa      	ldr	r2, [r7, #12]
 80111c6:	7812      	ldrb	r2, [r2, #0]
 80111c8:	4413      	add	r3, r2
 80111ca:	b29a      	uxth	r2, r3
 80111cc:	683b      	ldr	r3, [r7, #0]
 80111ce:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	781b      	ldrb	r3, [r3, #0]
 80111d4:	461a      	mov	r2, r3
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	4413      	add	r3, r2
 80111da:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80111dc:	68fb      	ldr	r3, [r7, #12]
}
 80111de:	4618      	mov	r0, r3
 80111e0:	3714      	adds	r7, #20
 80111e2:	46bd      	mov	sp, r7
 80111e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e8:	4770      	bx	lr

080111ea <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80111ea:	b480      	push	{r7}
 80111ec:	b087      	sub	sp, #28
 80111ee:	af00      	add	r7, sp, #0
 80111f0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80111f6:	697b      	ldr	r3, [r7, #20]
 80111f8:	781b      	ldrb	r3, [r3, #0]
 80111fa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80111fc:	697b      	ldr	r3, [r7, #20]
 80111fe:	3301      	adds	r3, #1
 8011200:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011202:	697b      	ldr	r3, [r7, #20]
 8011204:	781b      	ldrb	r3, [r3, #0]
 8011206:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011208:	8a3b      	ldrh	r3, [r7, #16]
 801120a:	021b      	lsls	r3, r3, #8
 801120c:	b21a      	sxth	r2, r3
 801120e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011212:	4313      	orrs	r3, r2
 8011214:	b21b      	sxth	r3, r3
 8011216:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011218:	89fb      	ldrh	r3, [r7, #14]
}
 801121a:	4618      	mov	r0, r3
 801121c:	371c      	adds	r7, #28
 801121e:	46bd      	mov	sp, r7
 8011220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011224:	4770      	bx	lr
	...

08011228 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011228:	b580      	push	{r7, lr}
 801122a:	b084      	sub	sp, #16
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
 8011230:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011232:	2300      	movs	r3, #0
 8011234:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011236:	683b      	ldr	r3, [r7, #0]
 8011238:	781b      	ldrb	r3, [r3, #0]
 801123a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801123e:	2b40      	cmp	r3, #64	@ 0x40
 8011240:	d005      	beq.n	801124e <USBD_StdDevReq+0x26>
 8011242:	2b40      	cmp	r3, #64	@ 0x40
 8011244:	d857      	bhi.n	80112f6 <USBD_StdDevReq+0xce>
 8011246:	2b00      	cmp	r3, #0
 8011248:	d00f      	beq.n	801126a <USBD_StdDevReq+0x42>
 801124a:	2b20      	cmp	r3, #32
 801124c:	d153      	bne.n	80112f6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	32ae      	adds	r2, #174	@ 0xae
 8011258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801125c:	689b      	ldr	r3, [r3, #8]
 801125e:	6839      	ldr	r1, [r7, #0]
 8011260:	6878      	ldr	r0, [r7, #4]
 8011262:	4798      	blx	r3
 8011264:	4603      	mov	r3, r0
 8011266:	73fb      	strb	r3, [r7, #15]
      break;
 8011268:	e04a      	b.n	8011300 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801126a:	683b      	ldr	r3, [r7, #0]
 801126c:	785b      	ldrb	r3, [r3, #1]
 801126e:	2b09      	cmp	r3, #9
 8011270:	d83b      	bhi.n	80112ea <USBD_StdDevReq+0xc2>
 8011272:	a201      	add	r2, pc, #4	@ (adr r2, 8011278 <USBD_StdDevReq+0x50>)
 8011274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011278:	080112cd 	.word	0x080112cd
 801127c:	080112e1 	.word	0x080112e1
 8011280:	080112eb 	.word	0x080112eb
 8011284:	080112d7 	.word	0x080112d7
 8011288:	080112eb 	.word	0x080112eb
 801128c:	080112ab 	.word	0x080112ab
 8011290:	080112a1 	.word	0x080112a1
 8011294:	080112eb 	.word	0x080112eb
 8011298:	080112c3 	.word	0x080112c3
 801129c:	080112b5 	.word	0x080112b5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80112a0:	6839      	ldr	r1, [r7, #0]
 80112a2:	6878      	ldr	r0, [r7, #4]
 80112a4:	f000 fa3c 	bl	8011720 <USBD_GetDescriptor>
          break;
 80112a8:	e024      	b.n	80112f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80112aa:	6839      	ldr	r1, [r7, #0]
 80112ac:	6878      	ldr	r0, [r7, #4]
 80112ae:	f000 fba1 	bl	80119f4 <USBD_SetAddress>
          break;
 80112b2:	e01f      	b.n	80112f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80112b4:	6839      	ldr	r1, [r7, #0]
 80112b6:	6878      	ldr	r0, [r7, #4]
 80112b8:	f000 fbe0 	bl	8011a7c <USBD_SetConfig>
 80112bc:	4603      	mov	r3, r0
 80112be:	73fb      	strb	r3, [r7, #15]
          break;
 80112c0:	e018      	b.n	80112f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80112c2:	6839      	ldr	r1, [r7, #0]
 80112c4:	6878      	ldr	r0, [r7, #4]
 80112c6:	f000 fc83 	bl	8011bd0 <USBD_GetConfig>
          break;
 80112ca:	e013      	b.n	80112f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80112cc:	6839      	ldr	r1, [r7, #0]
 80112ce:	6878      	ldr	r0, [r7, #4]
 80112d0:	f000 fcb4 	bl	8011c3c <USBD_GetStatus>
          break;
 80112d4:	e00e      	b.n	80112f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80112d6:	6839      	ldr	r1, [r7, #0]
 80112d8:	6878      	ldr	r0, [r7, #4]
 80112da:	f000 fce3 	bl	8011ca4 <USBD_SetFeature>
          break;
 80112de:	e009      	b.n	80112f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80112e0:	6839      	ldr	r1, [r7, #0]
 80112e2:	6878      	ldr	r0, [r7, #4]
 80112e4:	f000 fd07 	bl	8011cf6 <USBD_ClrFeature>
          break;
 80112e8:	e004      	b.n	80112f4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80112ea:	6839      	ldr	r1, [r7, #0]
 80112ec:	6878      	ldr	r0, [r7, #4]
 80112ee:	f000 fd5e 	bl	8011dae <USBD_CtlError>
          break;
 80112f2:	bf00      	nop
      }
      break;
 80112f4:	e004      	b.n	8011300 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80112f6:	6839      	ldr	r1, [r7, #0]
 80112f8:	6878      	ldr	r0, [r7, #4]
 80112fa:	f000 fd58 	bl	8011dae <USBD_CtlError>
      break;
 80112fe:	bf00      	nop
  }

  return ret;
 8011300:	7bfb      	ldrb	r3, [r7, #15]
}
 8011302:	4618      	mov	r0, r3
 8011304:	3710      	adds	r7, #16
 8011306:	46bd      	mov	sp, r7
 8011308:	bd80      	pop	{r7, pc}
 801130a:	bf00      	nop

0801130c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801130c:	b580      	push	{r7, lr}
 801130e:	b084      	sub	sp, #16
 8011310:	af00      	add	r7, sp, #0
 8011312:	6078      	str	r0, [r7, #4]
 8011314:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011316:	2300      	movs	r3, #0
 8011318:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801131a:	683b      	ldr	r3, [r7, #0]
 801131c:	781b      	ldrb	r3, [r3, #0]
 801131e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011322:	2b40      	cmp	r3, #64	@ 0x40
 8011324:	d005      	beq.n	8011332 <USBD_StdItfReq+0x26>
 8011326:	2b40      	cmp	r3, #64	@ 0x40
 8011328:	d852      	bhi.n	80113d0 <USBD_StdItfReq+0xc4>
 801132a:	2b00      	cmp	r3, #0
 801132c:	d001      	beq.n	8011332 <USBD_StdItfReq+0x26>
 801132e:	2b20      	cmp	r3, #32
 8011330:	d14e      	bne.n	80113d0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011338:	b2db      	uxtb	r3, r3
 801133a:	3b01      	subs	r3, #1
 801133c:	2b02      	cmp	r3, #2
 801133e:	d840      	bhi.n	80113c2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011340:	683b      	ldr	r3, [r7, #0]
 8011342:	889b      	ldrh	r3, [r3, #4]
 8011344:	b2db      	uxtb	r3, r3
 8011346:	2b01      	cmp	r3, #1
 8011348:	d836      	bhi.n	80113b8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801134a:	683b      	ldr	r3, [r7, #0]
 801134c:	889b      	ldrh	r3, [r3, #4]
 801134e:	b2db      	uxtb	r3, r3
 8011350:	4619      	mov	r1, r3
 8011352:	6878      	ldr	r0, [r7, #4]
 8011354:	f7ff fedb 	bl	801110e <USBD_CoreFindIF>
 8011358:	4603      	mov	r3, r0
 801135a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801135c:	7bbb      	ldrb	r3, [r7, #14]
 801135e:	2bff      	cmp	r3, #255	@ 0xff
 8011360:	d01d      	beq.n	801139e <USBD_StdItfReq+0x92>
 8011362:	7bbb      	ldrb	r3, [r7, #14]
 8011364:	2b00      	cmp	r3, #0
 8011366:	d11a      	bne.n	801139e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8011368:	7bba      	ldrb	r2, [r7, #14]
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	32ae      	adds	r2, #174	@ 0xae
 801136e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011372:	689b      	ldr	r3, [r3, #8]
 8011374:	2b00      	cmp	r3, #0
 8011376:	d00f      	beq.n	8011398 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8011378:	7bba      	ldrb	r2, [r7, #14]
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011380:	7bba      	ldrb	r2, [r7, #14]
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	32ae      	adds	r2, #174	@ 0xae
 8011386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801138a:	689b      	ldr	r3, [r3, #8]
 801138c:	6839      	ldr	r1, [r7, #0]
 801138e:	6878      	ldr	r0, [r7, #4]
 8011390:	4798      	blx	r3
 8011392:	4603      	mov	r3, r0
 8011394:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011396:	e004      	b.n	80113a2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8011398:	2303      	movs	r3, #3
 801139a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801139c:	e001      	b.n	80113a2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801139e:	2303      	movs	r3, #3
 80113a0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80113a2:	683b      	ldr	r3, [r7, #0]
 80113a4:	88db      	ldrh	r3, [r3, #6]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d110      	bne.n	80113cc <USBD_StdItfReq+0xc0>
 80113aa:	7bfb      	ldrb	r3, [r7, #15]
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d10d      	bne.n	80113cc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80113b0:	6878      	ldr	r0, [r7, #4]
 80113b2:	f000 fed4 	bl	801215e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80113b6:	e009      	b.n	80113cc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80113b8:	6839      	ldr	r1, [r7, #0]
 80113ba:	6878      	ldr	r0, [r7, #4]
 80113bc:	f000 fcf7 	bl	8011dae <USBD_CtlError>
          break;
 80113c0:	e004      	b.n	80113cc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80113c2:	6839      	ldr	r1, [r7, #0]
 80113c4:	6878      	ldr	r0, [r7, #4]
 80113c6:	f000 fcf2 	bl	8011dae <USBD_CtlError>
          break;
 80113ca:	e000      	b.n	80113ce <USBD_StdItfReq+0xc2>
          break;
 80113cc:	bf00      	nop
      }
      break;
 80113ce:	e004      	b.n	80113da <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80113d0:	6839      	ldr	r1, [r7, #0]
 80113d2:	6878      	ldr	r0, [r7, #4]
 80113d4:	f000 fceb 	bl	8011dae <USBD_CtlError>
      break;
 80113d8:	bf00      	nop
  }

  return ret;
 80113da:	7bfb      	ldrb	r3, [r7, #15]
}
 80113dc:	4618      	mov	r0, r3
 80113de:	3710      	adds	r7, #16
 80113e0:	46bd      	mov	sp, r7
 80113e2:	bd80      	pop	{r7, pc}

080113e4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80113e4:	b580      	push	{r7, lr}
 80113e6:	b084      	sub	sp, #16
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	6078      	str	r0, [r7, #4]
 80113ec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80113ee:	2300      	movs	r3, #0
 80113f0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80113f2:	683b      	ldr	r3, [r7, #0]
 80113f4:	889b      	ldrh	r3, [r3, #4]
 80113f6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80113f8:	683b      	ldr	r3, [r7, #0]
 80113fa:	781b      	ldrb	r3, [r3, #0]
 80113fc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011400:	2b40      	cmp	r3, #64	@ 0x40
 8011402:	d007      	beq.n	8011414 <USBD_StdEPReq+0x30>
 8011404:	2b40      	cmp	r3, #64	@ 0x40
 8011406:	f200 817f 	bhi.w	8011708 <USBD_StdEPReq+0x324>
 801140a:	2b00      	cmp	r3, #0
 801140c:	d02a      	beq.n	8011464 <USBD_StdEPReq+0x80>
 801140e:	2b20      	cmp	r3, #32
 8011410:	f040 817a 	bne.w	8011708 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8011414:	7bbb      	ldrb	r3, [r7, #14]
 8011416:	4619      	mov	r1, r3
 8011418:	6878      	ldr	r0, [r7, #4]
 801141a:	f7ff fe85 	bl	8011128 <USBD_CoreFindEP>
 801141e:	4603      	mov	r3, r0
 8011420:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011422:	7b7b      	ldrb	r3, [r7, #13]
 8011424:	2bff      	cmp	r3, #255	@ 0xff
 8011426:	f000 8174 	beq.w	8011712 <USBD_StdEPReq+0x32e>
 801142a:	7b7b      	ldrb	r3, [r7, #13]
 801142c:	2b00      	cmp	r3, #0
 801142e:	f040 8170 	bne.w	8011712 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8011432:	7b7a      	ldrb	r2, [r7, #13]
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801143a:	7b7a      	ldrb	r2, [r7, #13]
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	32ae      	adds	r2, #174	@ 0xae
 8011440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011444:	689b      	ldr	r3, [r3, #8]
 8011446:	2b00      	cmp	r3, #0
 8011448:	f000 8163 	beq.w	8011712 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 801144c:	7b7a      	ldrb	r2, [r7, #13]
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	32ae      	adds	r2, #174	@ 0xae
 8011452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011456:	689b      	ldr	r3, [r3, #8]
 8011458:	6839      	ldr	r1, [r7, #0]
 801145a:	6878      	ldr	r0, [r7, #4]
 801145c:	4798      	blx	r3
 801145e:	4603      	mov	r3, r0
 8011460:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8011462:	e156      	b.n	8011712 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011464:	683b      	ldr	r3, [r7, #0]
 8011466:	785b      	ldrb	r3, [r3, #1]
 8011468:	2b03      	cmp	r3, #3
 801146a:	d008      	beq.n	801147e <USBD_StdEPReq+0x9a>
 801146c:	2b03      	cmp	r3, #3
 801146e:	f300 8145 	bgt.w	80116fc <USBD_StdEPReq+0x318>
 8011472:	2b00      	cmp	r3, #0
 8011474:	f000 809b 	beq.w	80115ae <USBD_StdEPReq+0x1ca>
 8011478:	2b01      	cmp	r3, #1
 801147a:	d03c      	beq.n	80114f6 <USBD_StdEPReq+0x112>
 801147c:	e13e      	b.n	80116fc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011484:	b2db      	uxtb	r3, r3
 8011486:	2b02      	cmp	r3, #2
 8011488:	d002      	beq.n	8011490 <USBD_StdEPReq+0xac>
 801148a:	2b03      	cmp	r3, #3
 801148c:	d016      	beq.n	80114bc <USBD_StdEPReq+0xd8>
 801148e:	e02c      	b.n	80114ea <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011490:	7bbb      	ldrb	r3, [r7, #14]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d00d      	beq.n	80114b2 <USBD_StdEPReq+0xce>
 8011496:	7bbb      	ldrb	r3, [r7, #14]
 8011498:	2b80      	cmp	r3, #128	@ 0x80
 801149a:	d00a      	beq.n	80114b2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801149c:	7bbb      	ldrb	r3, [r7, #14]
 801149e:	4619      	mov	r1, r3
 80114a0:	6878      	ldr	r0, [r7, #4]
 80114a2:	f7ff fa41 	bl	8010928 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80114a6:	2180      	movs	r1, #128	@ 0x80
 80114a8:	6878      	ldr	r0, [r7, #4]
 80114aa:	f7ff fa3d 	bl	8010928 <USBD_LL_StallEP>
 80114ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80114b0:	e020      	b.n	80114f4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80114b2:	6839      	ldr	r1, [r7, #0]
 80114b4:	6878      	ldr	r0, [r7, #4]
 80114b6:	f000 fc7a 	bl	8011dae <USBD_CtlError>
              break;
 80114ba:	e01b      	b.n	80114f4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80114bc:	683b      	ldr	r3, [r7, #0]
 80114be:	885b      	ldrh	r3, [r3, #2]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d10e      	bne.n	80114e2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80114c4:	7bbb      	ldrb	r3, [r7, #14]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d00b      	beq.n	80114e2 <USBD_StdEPReq+0xfe>
 80114ca:	7bbb      	ldrb	r3, [r7, #14]
 80114cc:	2b80      	cmp	r3, #128	@ 0x80
 80114ce:	d008      	beq.n	80114e2 <USBD_StdEPReq+0xfe>
 80114d0:	683b      	ldr	r3, [r7, #0]
 80114d2:	88db      	ldrh	r3, [r3, #6]
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d104      	bne.n	80114e2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80114d8:	7bbb      	ldrb	r3, [r7, #14]
 80114da:	4619      	mov	r1, r3
 80114dc:	6878      	ldr	r0, [r7, #4]
 80114de:	f7ff fa23 	bl	8010928 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80114e2:	6878      	ldr	r0, [r7, #4]
 80114e4:	f000 fe3b 	bl	801215e <USBD_CtlSendStatus>

              break;
 80114e8:	e004      	b.n	80114f4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80114ea:	6839      	ldr	r1, [r7, #0]
 80114ec:	6878      	ldr	r0, [r7, #4]
 80114ee:	f000 fc5e 	bl	8011dae <USBD_CtlError>
              break;
 80114f2:	bf00      	nop
          }
          break;
 80114f4:	e107      	b.n	8011706 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80114fc:	b2db      	uxtb	r3, r3
 80114fe:	2b02      	cmp	r3, #2
 8011500:	d002      	beq.n	8011508 <USBD_StdEPReq+0x124>
 8011502:	2b03      	cmp	r3, #3
 8011504:	d016      	beq.n	8011534 <USBD_StdEPReq+0x150>
 8011506:	e04b      	b.n	80115a0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011508:	7bbb      	ldrb	r3, [r7, #14]
 801150a:	2b00      	cmp	r3, #0
 801150c:	d00d      	beq.n	801152a <USBD_StdEPReq+0x146>
 801150e:	7bbb      	ldrb	r3, [r7, #14]
 8011510:	2b80      	cmp	r3, #128	@ 0x80
 8011512:	d00a      	beq.n	801152a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011514:	7bbb      	ldrb	r3, [r7, #14]
 8011516:	4619      	mov	r1, r3
 8011518:	6878      	ldr	r0, [r7, #4]
 801151a:	f7ff fa05 	bl	8010928 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801151e:	2180      	movs	r1, #128	@ 0x80
 8011520:	6878      	ldr	r0, [r7, #4]
 8011522:	f7ff fa01 	bl	8010928 <USBD_LL_StallEP>
 8011526:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011528:	e040      	b.n	80115ac <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801152a:	6839      	ldr	r1, [r7, #0]
 801152c:	6878      	ldr	r0, [r7, #4]
 801152e:	f000 fc3e 	bl	8011dae <USBD_CtlError>
              break;
 8011532:	e03b      	b.n	80115ac <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011534:	683b      	ldr	r3, [r7, #0]
 8011536:	885b      	ldrh	r3, [r3, #2]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d136      	bne.n	80115aa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801153c:	7bbb      	ldrb	r3, [r7, #14]
 801153e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011542:	2b00      	cmp	r3, #0
 8011544:	d004      	beq.n	8011550 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011546:	7bbb      	ldrb	r3, [r7, #14]
 8011548:	4619      	mov	r1, r3
 801154a:	6878      	ldr	r0, [r7, #4]
 801154c:	f7ff fa05 	bl	801095a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8011550:	6878      	ldr	r0, [r7, #4]
 8011552:	f000 fe04 	bl	801215e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8011556:	7bbb      	ldrb	r3, [r7, #14]
 8011558:	4619      	mov	r1, r3
 801155a:	6878      	ldr	r0, [r7, #4]
 801155c:	f7ff fde4 	bl	8011128 <USBD_CoreFindEP>
 8011560:	4603      	mov	r3, r0
 8011562:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011564:	7b7b      	ldrb	r3, [r7, #13]
 8011566:	2bff      	cmp	r3, #255	@ 0xff
 8011568:	d01f      	beq.n	80115aa <USBD_StdEPReq+0x1c6>
 801156a:	7b7b      	ldrb	r3, [r7, #13]
 801156c:	2b00      	cmp	r3, #0
 801156e:	d11c      	bne.n	80115aa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8011570:	7b7a      	ldrb	r2, [r7, #13]
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8011578:	7b7a      	ldrb	r2, [r7, #13]
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	32ae      	adds	r2, #174	@ 0xae
 801157e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011582:	689b      	ldr	r3, [r3, #8]
 8011584:	2b00      	cmp	r3, #0
 8011586:	d010      	beq.n	80115aa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011588:	7b7a      	ldrb	r2, [r7, #13]
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	32ae      	adds	r2, #174	@ 0xae
 801158e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011592:	689b      	ldr	r3, [r3, #8]
 8011594:	6839      	ldr	r1, [r7, #0]
 8011596:	6878      	ldr	r0, [r7, #4]
 8011598:	4798      	blx	r3
 801159a:	4603      	mov	r3, r0
 801159c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801159e:	e004      	b.n	80115aa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80115a0:	6839      	ldr	r1, [r7, #0]
 80115a2:	6878      	ldr	r0, [r7, #4]
 80115a4:	f000 fc03 	bl	8011dae <USBD_CtlError>
              break;
 80115a8:	e000      	b.n	80115ac <USBD_StdEPReq+0x1c8>
              break;
 80115aa:	bf00      	nop
          }
          break;
 80115ac:	e0ab      	b.n	8011706 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80115b4:	b2db      	uxtb	r3, r3
 80115b6:	2b02      	cmp	r3, #2
 80115b8:	d002      	beq.n	80115c0 <USBD_StdEPReq+0x1dc>
 80115ba:	2b03      	cmp	r3, #3
 80115bc:	d032      	beq.n	8011624 <USBD_StdEPReq+0x240>
 80115be:	e097      	b.n	80116f0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80115c0:	7bbb      	ldrb	r3, [r7, #14]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d007      	beq.n	80115d6 <USBD_StdEPReq+0x1f2>
 80115c6:	7bbb      	ldrb	r3, [r7, #14]
 80115c8:	2b80      	cmp	r3, #128	@ 0x80
 80115ca:	d004      	beq.n	80115d6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80115cc:	6839      	ldr	r1, [r7, #0]
 80115ce:	6878      	ldr	r0, [r7, #4]
 80115d0:	f000 fbed 	bl	8011dae <USBD_CtlError>
                break;
 80115d4:	e091      	b.n	80116fa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80115d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80115da:	2b00      	cmp	r3, #0
 80115dc:	da0b      	bge.n	80115f6 <USBD_StdEPReq+0x212>
 80115de:	7bbb      	ldrb	r3, [r7, #14]
 80115e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80115e4:	4613      	mov	r3, r2
 80115e6:	009b      	lsls	r3, r3, #2
 80115e8:	4413      	add	r3, r2
 80115ea:	009b      	lsls	r3, r3, #2
 80115ec:	3310      	adds	r3, #16
 80115ee:	687a      	ldr	r2, [r7, #4]
 80115f0:	4413      	add	r3, r2
 80115f2:	3304      	adds	r3, #4
 80115f4:	e00b      	b.n	801160e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80115f6:	7bbb      	ldrb	r3, [r7, #14]
 80115f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80115fc:	4613      	mov	r3, r2
 80115fe:	009b      	lsls	r3, r3, #2
 8011600:	4413      	add	r3, r2
 8011602:	009b      	lsls	r3, r3, #2
 8011604:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8011608:	687a      	ldr	r2, [r7, #4]
 801160a:	4413      	add	r3, r2
 801160c:	3304      	adds	r3, #4
 801160e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8011610:	68bb      	ldr	r3, [r7, #8]
 8011612:	2200      	movs	r2, #0
 8011614:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011616:	68bb      	ldr	r3, [r7, #8]
 8011618:	2202      	movs	r2, #2
 801161a:	4619      	mov	r1, r3
 801161c:	6878      	ldr	r0, [r7, #4]
 801161e:	f000 fd44 	bl	80120aa <USBD_CtlSendData>
              break;
 8011622:	e06a      	b.n	80116fa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8011624:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011628:	2b00      	cmp	r3, #0
 801162a:	da11      	bge.n	8011650 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801162c:	7bbb      	ldrb	r3, [r7, #14]
 801162e:	f003 020f 	and.w	r2, r3, #15
 8011632:	6879      	ldr	r1, [r7, #4]
 8011634:	4613      	mov	r3, r2
 8011636:	009b      	lsls	r3, r3, #2
 8011638:	4413      	add	r3, r2
 801163a:	009b      	lsls	r3, r3, #2
 801163c:	440b      	add	r3, r1
 801163e:	3324      	adds	r3, #36	@ 0x24
 8011640:	881b      	ldrh	r3, [r3, #0]
 8011642:	2b00      	cmp	r3, #0
 8011644:	d117      	bne.n	8011676 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011646:	6839      	ldr	r1, [r7, #0]
 8011648:	6878      	ldr	r0, [r7, #4]
 801164a:	f000 fbb0 	bl	8011dae <USBD_CtlError>
                  break;
 801164e:	e054      	b.n	80116fa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011650:	7bbb      	ldrb	r3, [r7, #14]
 8011652:	f003 020f 	and.w	r2, r3, #15
 8011656:	6879      	ldr	r1, [r7, #4]
 8011658:	4613      	mov	r3, r2
 801165a:	009b      	lsls	r3, r3, #2
 801165c:	4413      	add	r3, r2
 801165e:	009b      	lsls	r3, r3, #2
 8011660:	440b      	add	r3, r1
 8011662:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011666:	881b      	ldrh	r3, [r3, #0]
 8011668:	2b00      	cmp	r3, #0
 801166a:	d104      	bne.n	8011676 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801166c:	6839      	ldr	r1, [r7, #0]
 801166e:	6878      	ldr	r0, [r7, #4]
 8011670:	f000 fb9d 	bl	8011dae <USBD_CtlError>
                  break;
 8011674:	e041      	b.n	80116fa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011676:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801167a:	2b00      	cmp	r3, #0
 801167c:	da0b      	bge.n	8011696 <USBD_StdEPReq+0x2b2>
 801167e:	7bbb      	ldrb	r3, [r7, #14]
 8011680:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011684:	4613      	mov	r3, r2
 8011686:	009b      	lsls	r3, r3, #2
 8011688:	4413      	add	r3, r2
 801168a:	009b      	lsls	r3, r3, #2
 801168c:	3310      	adds	r3, #16
 801168e:	687a      	ldr	r2, [r7, #4]
 8011690:	4413      	add	r3, r2
 8011692:	3304      	adds	r3, #4
 8011694:	e00b      	b.n	80116ae <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011696:	7bbb      	ldrb	r3, [r7, #14]
 8011698:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801169c:	4613      	mov	r3, r2
 801169e:	009b      	lsls	r3, r3, #2
 80116a0:	4413      	add	r3, r2
 80116a2:	009b      	lsls	r3, r3, #2
 80116a4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80116a8:	687a      	ldr	r2, [r7, #4]
 80116aa:	4413      	add	r3, r2
 80116ac:	3304      	adds	r3, #4
 80116ae:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80116b0:	7bbb      	ldrb	r3, [r7, #14]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d002      	beq.n	80116bc <USBD_StdEPReq+0x2d8>
 80116b6:	7bbb      	ldrb	r3, [r7, #14]
 80116b8:	2b80      	cmp	r3, #128	@ 0x80
 80116ba:	d103      	bne.n	80116c4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80116bc:	68bb      	ldr	r3, [r7, #8]
 80116be:	2200      	movs	r2, #0
 80116c0:	601a      	str	r2, [r3, #0]
 80116c2:	e00e      	b.n	80116e2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80116c4:	7bbb      	ldrb	r3, [r7, #14]
 80116c6:	4619      	mov	r1, r3
 80116c8:	6878      	ldr	r0, [r7, #4]
 80116ca:	f7ff f95f 	bl	801098c <USBD_LL_IsStallEP>
 80116ce:	4603      	mov	r3, r0
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d003      	beq.n	80116dc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80116d4:	68bb      	ldr	r3, [r7, #8]
 80116d6:	2201      	movs	r2, #1
 80116d8:	601a      	str	r2, [r3, #0]
 80116da:	e002      	b.n	80116e2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80116dc:	68bb      	ldr	r3, [r7, #8]
 80116de:	2200      	movs	r2, #0
 80116e0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80116e2:	68bb      	ldr	r3, [r7, #8]
 80116e4:	2202      	movs	r2, #2
 80116e6:	4619      	mov	r1, r3
 80116e8:	6878      	ldr	r0, [r7, #4]
 80116ea:	f000 fcde 	bl	80120aa <USBD_CtlSendData>
              break;
 80116ee:	e004      	b.n	80116fa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80116f0:	6839      	ldr	r1, [r7, #0]
 80116f2:	6878      	ldr	r0, [r7, #4]
 80116f4:	f000 fb5b 	bl	8011dae <USBD_CtlError>
              break;
 80116f8:	bf00      	nop
          }
          break;
 80116fa:	e004      	b.n	8011706 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80116fc:	6839      	ldr	r1, [r7, #0]
 80116fe:	6878      	ldr	r0, [r7, #4]
 8011700:	f000 fb55 	bl	8011dae <USBD_CtlError>
          break;
 8011704:	bf00      	nop
      }
      break;
 8011706:	e005      	b.n	8011714 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8011708:	6839      	ldr	r1, [r7, #0]
 801170a:	6878      	ldr	r0, [r7, #4]
 801170c:	f000 fb4f 	bl	8011dae <USBD_CtlError>
      break;
 8011710:	e000      	b.n	8011714 <USBD_StdEPReq+0x330>
      break;
 8011712:	bf00      	nop
  }

  return ret;
 8011714:	7bfb      	ldrb	r3, [r7, #15]
}
 8011716:	4618      	mov	r0, r3
 8011718:	3710      	adds	r7, #16
 801171a:	46bd      	mov	sp, r7
 801171c:	bd80      	pop	{r7, pc}
	...

08011720 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011720:	b580      	push	{r7, lr}
 8011722:	b084      	sub	sp, #16
 8011724:	af00      	add	r7, sp, #0
 8011726:	6078      	str	r0, [r7, #4]
 8011728:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801172a:	2300      	movs	r3, #0
 801172c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801172e:	2300      	movs	r3, #0
 8011730:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011732:	2300      	movs	r3, #0
 8011734:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011736:	683b      	ldr	r3, [r7, #0]
 8011738:	885b      	ldrh	r3, [r3, #2]
 801173a:	0a1b      	lsrs	r3, r3, #8
 801173c:	b29b      	uxth	r3, r3
 801173e:	3b01      	subs	r3, #1
 8011740:	2b06      	cmp	r3, #6
 8011742:	f200 8128 	bhi.w	8011996 <USBD_GetDescriptor+0x276>
 8011746:	a201      	add	r2, pc, #4	@ (adr r2, 801174c <USBD_GetDescriptor+0x2c>)
 8011748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801174c:	08011769 	.word	0x08011769
 8011750:	08011781 	.word	0x08011781
 8011754:	080117c1 	.word	0x080117c1
 8011758:	08011997 	.word	0x08011997
 801175c:	08011997 	.word	0x08011997
 8011760:	08011937 	.word	0x08011937
 8011764:	08011963 	.word	0x08011963
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	687a      	ldr	r2, [r7, #4]
 8011772:	7c12      	ldrb	r2, [r2, #16]
 8011774:	f107 0108 	add.w	r1, r7, #8
 8011778:	4610      	mov	r0, r2
 801177a:	4798      	blx	r3
 801177c:	60f8      	str	r0, [r7, #12]
      break;
 801177e:	e112      	b.n	80119a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	7c1b      	ldrb	r3, [r3, #16]
 8011784:	2b00      	cmp	r3, #0
 8011786:	d10d      	bne.n	80117a4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801178e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011790:	f107 0208 	add.w	r2, r7, #8
 8011794:	4610      	mov	r0, r2
 8011796:	4798      	blx	r3
 8011798:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	3301      	adds	r3, #1
 801179e:	2202      	movs	r2, #2
 80117a0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80117a2:	e100      	b.n	80119a6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80117aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117ac:	f107 0208 	add.w	r2, r7, #8
 80117b0:	4610      	mov	r0, r2
 80117b2:	4798      	blx	r3
 80117b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	3301      	adds	r3, #1
 80117ba:	2202      	movs	r2, #2
 80117bc:	701a      	strb	r2, [r3, #0]
      break;
 80117be:	e0f2      	b.n	80119a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80117c0:	683b      	ldr	r3, [r7, #0]
 80117c2:	885b      	ldrh	r3, [r3, #2]
 80117c4:	b2db      	uxtb	r3, r3
 80117c6:	2b05      	cmp	r3, #5
 80117c8:	f200 80ac 	bhi.w	8011924 <USBD_GetDescriptor+0x204>
 80117cc:	a201      	add	r2, pc, #4	@ (adr r2, 80117d4 <USBD_GetDescriptor+0xb4>)
 80117ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117d2:	bf00      	nop
 80117d4:	080117ed 	.word	0x080117ed
 80117d8:	08011821 	.word	0x08011821
 80117dc:	08011855 	.word	0x08011855
 80117e0:	08011889 	.word	0x08011889
 80117e4:	080118bd 	.word	0x080118bd
 80117e8:	080118f1 	.word	0x080118f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80117f2:	685b      	ldr	r3, [r3, #4]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d00b      	beq.n	8011810 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80117fe:	685b      	ldr	r3, [r3, #4]
 8011800:	687a      	ldr	r2, [r7, #4]
 8011802:	7c12      	ldrb	r2, [r2, #16]
 8011804:	f107 0108 	add.w	r1, r7, #8
 8011808:	4610      	mov	r0, r2
 801180a:	4798      	blx	r3
 801180c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801180e:	e091      	b.n	8011934 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011810:	6839      	ldr	r1, [r7, #0]
 8011812:	6878      	ldr	r0, [r7, #4]
 8011814:	f000 facb 	bl	8011dae <USBD_CtlError>
            err++;
 8011818:	7afb      	ldrb	r3, [r7, #11]
 801181a:	3301      	adds	r3, #1
 801181c:	72fb      	strb	r3, [r7, #11]
          break;
 801181e:	e089      	b.n	8011934 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011826:	689b      	ldr	r3, [r3, #8]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d00b      	beq.n	8011844 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011832:	689b      	ldr	r3, [r3, #8]
 8011834:	687a      	ldr	r2, [r7, #4]
 8011836:	7c12      	ldrb	r2, [r2, #16]
 8011838:	f107 0108 	add.w	r1, r7, #8
 801183c:	4610      	mov	r0, r2
 801183e:	4798      	blx	r3
 8011840:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011842:	e077      	b.n	8011934 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011844:	6839      	ldr	r1, [r7, #0]
 8011846:	6878      	ldr	r0, [r7, #4]
 8011848:	f000 fab1 	bl	8011dae <USBD_CtlError>
            err++;
 801184c:	7afb      	ldrb	r3, [r7, #11]
 801184e:	3301      	adds	r3, #1
 8011850:	72fb      	strb	r3, [r7, #11]
          break;
 8011852:	e06f      	b.n	8011934 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801185a:	68db      	ldr	r3, [r3, #12]
 801185c:	2b00      	cmp	r3, #0
 801185e:	d00b      	beq.n	8011878 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011866:	68db      	ldr	r3, [r3, #12]
 8011868:	687a      	ldr	r2, [r7, #4]
 801186a:	7c12      	ldrb	r2, [r2, #16]
 801186c:	f107 0108 	add.w	r1, r7, #8
 8011870:	4610      	mov	r0, r2
 8011872:	4798      	blx	r3
 8011874:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011876:	e05d      	b.n	8011934 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011878:	6839      	ldr	r1, [r7, #0]
 801187a:	6878      	ldr	r0, [r7, #4]
 801187c:	f000 fa97 	bl	8011dae <USBD_CtlError>
            err++;
 8011880:	7afb      	ldrb	r3, [r7, #11]
 8011882:	3301      	adds	r3, #1
 8011884:	72fb      	strb	r3, [r7, #11]
          break;
 8011886:	e055      	b.n	8011934 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801188e:	691b      	ldr	r3, [r3, #16]
 8011890:	2b00      	cmp	r3, #0
 8011892:	d00b      	beq.n	80118ac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801189a:	691b      	ldr	r3, [r3, #16]
 801189c:	687a      	ldr	r2, [r7, #4]
 801189e:	7c12      	ldrb	r2, [r2, #16]
 80118a0:	f107 0108 	add.w	r1, r7, #8
 80118a4:	4610      	mov	r0, r2
 80118a6:	4798      	blx	r3
 80118a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80118aa:	e043      	b.n	8011934 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80118ac:	6839      	ldr	r1, [r7, #0]
 80118ae:	6878      	ldr	r0, [r7, #4]
 80118b0:	f000 fa7d 	bl	8011dae <USBD_CtlError>
            err++;
 80118b4:	7afb      	ldrb	r3, [r7, #11]
 80118b6:	3301      	adds	r3, #1
 80118b8:	72fb      	strb	r3, [r7, #11]
          break;
 80118ba:	e03b      	b.n	8011934 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80118c2:	695b      	ldr	r3, [r3, #20]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d00b      	beq.n	80118e0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80118ce:	695b      	ldr	r3, [r3, #20]
 80118d0:	687a      	ldr	r2, [r7, #4]
 80118d2:	7c12      	ldrb	r2, [r2, #16]
 80118d4:	f107 0108 	add.w	r1, r7, #8
 80118d8:	4610      	mov	r0, r2
 80118da:	4798      	blx	r3
 80118dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80118de:	e029      	b.n	8011934 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80118e0:	6839      	ldr	r1, [r7, #0]
 80118e2:	6878      	ldr	r0, [r7, #4]
 80118e4:	f000 fa63 	bl	8011dae <USBD_CtlError>
            err++;
 80118e8:	7afb      	ldrb	r3, [r7, #11]
 80118ea:	3301      	adds	r3, #1
 80118ec:	72fb      	strb	r3, [r7, #11]
          break;
 80118ee:	e021      	b.n	8011934 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80118f6:	699b      	ldr	r3, [r3, #24]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d00b      	beq.n	8011914 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011902:	699b      	ldr	r3, [r3, #24]
 8011904:	687a      	ldr	r2, [r7, #4]
 8011906:	7c12      	ldrb	r2, [r2, #16]
 8011908:	f107 0108 	add.w	r1, r7, #8
 801190c:	4610      	mov	r0, r2
 801190e:	4798      	blx	r3
 8011910:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011912:	e00f      	b.n	8011934 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011914:	6839      	ldr	r1, [r7, #0]
 8011916:	6878      	ldr	r0, [r7, #4]
 8011918:	f000 fa49 	bl	8011dae <USBD_CtlError>
            err++;
 801191c:	7afb      	ldrb	r3, [r7, #11]
 801191e:	3301      	adds	r3, #1
 8011920:	72fb      	strb	r3, [r7, #11]
          break;
 8011922:	e007      	b.n	8011934 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8011924:	6839      	ldr	r1, [r7, #0]
 8011926:	6878      	ldr	r0, [r7, #4]
 8011928:	f000 fa41 	bl	8011dae <USBD_CtlError>
          err++;
 801192c:	7afb      	ldrb	r3, [r7, #11]
 801192e:	3301      	adds	r3, #1
 8011930:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8011932:	bf00      	nop
      }
      break;
 8011934:	e037      	b.n	80119a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	7c1b      	ldrb	r3, [r3, #16]
 801193a:	2b00      	cmp	r3, #0
 801193c:	d109      	bne.n	8011952 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011944:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011946:	f107 0208 	add.w	r2, r7, #8
 801194a:	4610      	mov	r0, r2
 801194c:	4798      	blx	r3
 801194e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011950:	e029      	b.n	80119a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8011952:	6839      	ldr	r1, [r7, #0]
 8011954:	6878      	ldr	r0, [r7, #4]
 8011956:	f000 fa2a 	bl	8011dae <USBD_CtlError>
        err++;
 801195a:	7afb      	ldrb	r3, [r7, #11]
 801195c:	3301      	adds	r3, #1
 801195e:	72fb      	strb	r3, [r7, #11]
      break;
 8011960:	e021      	b.n	80119a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	7c1b      	ldrb	r3, [r3, #16]
 8011966:	2b00      	cmp	r3, #0
 8011968:	d10d      	bne.n	8011986 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011972:	f107 0208 	add.w	r2, r7, #8
 8011976:	4610      	mov	r0, r2
 8011978:	4798      	blx	r3
 801197a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	3301      	adds	r3, #1
 8011980:	2207      	movs	r2, #7
 8011982:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011984:	e00f      	b.n	80119a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8011986:	6839      	ldr	r1, [r7, #0]
 8011988:	6878      	ldr	r0, [r7, #4]
 801198a:	f000 fa10 	bl	8011dae <USBD_CtlError>
        err++;
 801198e:	7afb      	ldrb	r3, [r7, #11]
 8011990:	3301      	adds	r3, #1
 8011992:	72fb      	strb	r3, [r7, #11]
      break;
 8011994:	e007      	b.n	80119a6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8011996:	6839      	ldr	r1, [r7, #0]
 8011998:	6878      	ldr	r0, [r7, #4]
 801199a:	f000 fa08 	bl	8011dae <USBD_CtlError>
      err++;
 801199e:	7afb      	ldrb	r3, [r7, #11]
 80119a0:	3301      	adds	r3, #1
 80119a2:	72fb      	strb	r3, [r7, #11]
      break;
 80119a4:	bf00      	nop
  }

  if (err != 0U)
 80119a6:	7afb      	ldrb	r3, [r7, #11]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d11e      	bne.n	80119ea <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80119ac:	683b      	ldr	r3, [r7, #0]
 80119ae:	88db      	ldrh	r3, [r3, #6]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d016      	beq.n	80119e2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80119b4:	893b      	ldrh	r3, [r7, #8]
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d00e      	beq.n	80119d8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80119ba:	683b      	ldr	r3, [r7, #0]
 80119bc:	88da      	ldrh	r2, [r3, #6]
 80119be:	893b      	ldrh	r3, [r7, #8]
 80119c0:	4293      	cmp	r3, r2
 80119c2:	bf28      	it	cs
 80119c4:	4613      	movcs	r3, r2
 80119c6:	b29b      	uxth	r3, r3
 80119c8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80119ca:	893b      	ldrh	r3, [r7, #8]
 80119cc:	461a      	mov	r2, r3
 80119ce:	68f9      	ldr	r1, [r7, #12]
 80119d0:	6878      	ldr	r0, [r7, #4]
 80119d2:	f000 fb6a 	bl	80120aa <USBD_CtlSendData>
 80119d6:	e009      	b.n	80119ec <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80119d8:	6839      	ldr	r1, [r7, #0]
 80119da:	6878      	ldr	r0, [r7, #4]
 80119dc:	f000 f9e7 	bl	8011dae <USBD_CtlError>
 80119e0:	e004      	b.n	80119ec <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80119e2:	6878      	ldr	r0, [r7, #4]
 80119e4:	f000 fbbb 	bl	801215e <USBD_CtlSendStatus>
 80119e8:	e000      	b.n	80119ec <USBD_GetDescriptor+0x2cc>
    return;
 80119ea:	bf00      	nop
  }
}
 80119ec:	3710      	adds	r7, #16
 80119ee:	46bd      	mov	sp, r7
 80119f0:	bd80      	pop	{r7, pc}
 80119f2:	bf00      	nop

080119f4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80119f4:	b580      	push	{r7, lr}
 80119f6:	b084      	sub	sp, #16
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	6078      	str	r0, [r7, #4]
 80119fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80119fe:	683b      	ldr	r3, [r7, #0]
 8011a00:	889b      	ldrh	r3, [r3, #4]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d131      	bne.n	8011a6a <USBD_SetAddress+0x76>
 8011a06:	683b      	ldr	r3, [r7, #0]
 8011a08:	88db      	ldrh	r3, [r3, #6]
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d12d      	bne.n	8011a6a <USBD_SetAddress+0x76>
 8011a0e:	683b      	ldr	r3, [r7, #0]
 8011a10:	885b      	ldrh	r3, [r3, #2]
 8011a12:	2b7f      	cmp	r3, #127	@ 0x7f
 8011a14:	d829      	bhi.n	8011a6a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011a16:	683b      	ldr	r3, [r7, #0]
 8011a18:	885b      	ldrh	r3, [r3, #2]
 8011a1a:	b2db      	uxtb	r3, r3
 8011a1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011a20:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011a28:	b2db      	uxtb	r3, r3
 8011a2a:	2b03      	cmp	r3, #3
 8011a2c:	d104      	bne.n	8011a38 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8011a2e:	6839      	ldr	r1, [r7, #0]
 8011a30:	6878      	ldr	r0, [r7, #4]
 8011a32:	f000 f9bc 	bl	8011dae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011a36:	e01d      	b.n	8011a74 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	7bfa      	ldrb	r2, [r7, #15]
 8011a3c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011a40:	7bfb      	ldrb	r3, [r7, #15]
 8011a42:	4619      	mov	r1, r3
 8011a44:	6878      	ldr	r0, [r7, #4]
 8011a46:	f7fe ffcd 	bl	80109e4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011a4a:	6878      	ldr	r0, [r7, #4]
 8011a4c:	f000 fb87 	bl	801215e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011a50:	7bfb      	ldrb	r3, [r7, #15]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d004      	beq.n	8011a60 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	2202      	movs	r2, #2
 8011a5a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011a5e:	e009      	b.n	8011a74 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	2201      	movs	r2, #1
 8011a64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011a68:	e004      	b.n	8011a74 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011a6a:	6839      	ldr	r1, [r7, #0]
 8011a6c:	6878      	ldr	r0, [r7, #4]
 8011a6e:	f000 f99e 	bl	8011dae <USBD_CtlError>
  }
}
 8011a72:	bf00      	nop
 8011a74:	bf00      	nop
 8011a76:	3710      	adds	r7, #16
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	bd80      	pop	{r7, pc}

08011a7c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011a7c:	b580      	push	{r7, lr}
 8011a7e:	b084      	sub	sp, #16
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	6078      	str	r0, [r7, #4]
 8011a84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011a86:	2300      	movs	r3, #0
 8011a88:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011a8a:	683b      	ldr	r3, [r7, #0]
 8011a8c:	885b      	ldrh	r3, [r3, #2]
 8011a8e:	b2da      	uxtb	r2, r3
 8011a90:	4b4e      	ldr	r3, [pc, #312]	@ (8011bcc <USBD_SetConfig+0x150>)
 8011a92:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011a94:	4b4d      	ldr	r3, [pc, #308]	@ (8011bcc <USBD_SetConfig+0x150>)
 8011a96:	781b      	ldrb	r3, [r3, #0]
 8011a98:	2b01      	cmp	r3, #1
 8011a9a:	d905      	bls.n	8011aa8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011a9c:	6839      	ldr	r1, [r7, #0]
 8011a9e:	6878      	ldr	r0, [r7, #4]
 8011aa0:	f000 f985 	bl	8011dae <USBD_CtlError>
    return USBD_FAIL;
 8011aa4:	2303      	movs	r3, #3
 8011aa6:	e08c      	b.n	8011bc2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011aae:	b2db      	uxtb	r3, r3
 8011ab0:	2b02      	cmp	r3, #2
 8011ab2:	d002      	beq.n	8011aba <USBD_SetConfig+0x3e>
 8011ab4:	2b03      	cmp	r3, #3
 8011ab6:	d029      	beq.n	8011b0c <USBD_SetConfig+0x90>
 8011ab8:	e075      	b.n	8011ba6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8011aba:	4b44      	ldr	r3, [pc, #272]	@ (8011bcc <USBD_SetConfig+0x150>)
 8011abc:	781b      	ldrb	r3, [r3, #0]
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d020      	beq.n	8011b04 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8011ac2:	4b42      	ldr	r3, [pc, #264]	@ (8011bcc <USBD_SetConfig+0x150>)
 8011ac4:	781b      	ldrb	r3, [r3, #0]
 8011ac6:	461a      	mov	r2, r3
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011acc:	4b3f      	ldr	r3, [pc, #252]	@ (8011bcc <USBD_SetConfig+0x150>)
 8011ace:	781b      	ldrb	r3, [r3, #0]
 8011ad0:	4619      	mov	r1, r3
 8011ad2:	6878      	ldr	r0, [r7, #4]
 8011ad4:	f7ff f8a9 	bl	8010c2a <USBD_SetClassConfig>
 8011ad8:	4603      	mov	r3, r0
 8011ada:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8011adc:	7bfb      	ldrb	r3, [r7, #15]
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d008      	beq.n	8011af4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8011ae2:	6839      	ldr	r1, [r7, #0]
 8011ae4:	6878      	ldr	r0, [r7, #4]
 8011ae6:	f000 f962 	bl	8011dae <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	2202      	movs	r2, #2
 8011aee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011af2:	e065      	b.n	8011bc0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8011af4:	6878      	ldr	r0, [r7, #4]
 8011af6:	f000 fb32 	bl	801215e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	2203      	movs	r2, #3
 8011afe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8011b02:	e05d      	b.n	8011bc0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8011b04:	6878      	ldr	r0, [r7, #4]
 8011b06:	f000 fb2a 	bl	801215e <USBD_CtlSendStatus>
      break;
 8011b0a:	e059      	b.n	8011bc0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8011b0c:	4b2f      	ldr	r3, [pc, #188]	@ (8011bcc <USBD_SetConfig+0x150>)
 8011b0e:	781b      	ldrb	r3, [r3, #0]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d112      	bne.n	8011b3a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	2202      	movs	r2, #2
 8011b18:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8011b1c:	4b2b      	ldr	r3, [pc, #172]	@ (8011bcc <USBD_SetConfig+0x150>)
 8011b1e:	781b      	ldrb	r3, [r3, #0]
 8011b20:	461a      	mov	r2, r3
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011b26:	4b29      	ldr	r3, [pc, #164]	@ (8011bcc <USBD_SetConfig+0x150>)
 8011b28:	781b      	ldrb	r3, [r3, #0]
 8011b2a:	4619      	mov	r1, r3
 8011b2c:	6878      	ldr	r0, [r7, #4]
 8011b2e:	f7ff f898 	bl	8010c62 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8011b32:	6878      	ldr	r0, [r7, #4]
 8011b34:	f000 fb13 	bl	801215e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011b38:	e042      	b.n	8011bc0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8011b3a:	4b24      	ldr	r3, [pc, #144]	@ (8011bcc <USBD_SetConfig+0x150>)
 8011b3c:	781b      	ldrb	r3, [r3, #0]
 8011b3e:	461a      	mov	r2, r3
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	685b      	ldr	r3, [r3, #4]
 8011b44:	429a      	cmp	r2, r3
 8011b46:	d02a      	beq.n	8011b9e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	685b      	ldr	r3, [r3, #4]
 8011b4c:	b2db      	uxtb	r3, r3
 8011b4e:	4619      	mov	r1, r3
 8011b50:	6878      	ldr	r0, [r7, #4]
 8011b52:	f7ff f886 	bl	8010c62 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8011b56:	4b1d      	ldr	r3, [pc, #116]	@ (8011bcc <USBD_SetConfig+0x150>)
 8011b58:	781b      	ldrb	r3, [r3, #0]
 8011b5a:	461a      	mov	r2, r3
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011b60:	4b1a      	ldr	r3, [pc, #104]	@ (8011bcc <USBD_SetConfig+0x150>)
 8011b62:	781b      	ldrb	r3, [r3, #0]
 8011b64:	4619      	mov	r1, r3
 8011b66:	6878      	ldr	r0, [r7, #4]
 8011b68:	f7ff f85f 	bl	8010c2a <USBD_SetClassConfig>
 8011b6c:	4603      	mov	r3, r0
 8011b6e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8011b70:	7bfb      	ldrb	r3, [r7, #15]
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d00f      	beq.n	8011b96 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8011b76:	6839      	ldr	r1, [r7, #0]
 8011b78:	6878      	ldr	r0, [r7, #4]
 8011b7a:	f000 f918 	bl	8011dae <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	685b      	ldr	r3, [r3, #4]
 8011b82:	b2db      	uxtb	r3, r3
 8011b84:	4619      	mov	r1, r3
 8011b86:	6878      	ldr	r0, [r7, #4]
 8011b88:	f7ff f86b 	bl	8010c62 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	2202      	movs	r2, #2
 8011b90:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8011b94:	e014      	b.n	8011bc0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8011b96:	6878      	ldr	r0, [r7, #4]
 8011b98:	f000 fae1 	bl	801215e <USBD_CtlSendStatus>
      break;
 8011b9c:	e010      	b.n	8011bc0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8011b9e:	6878      	ldr	r0, [r7, #4]
 8011ba0:	f000 fadd 	bl	801215e <USBD_CtlSendStatus>
      break;
 8011ba4:	e00c      	b.n	8011bc0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8011ba6:	6839      	ldr	r1, [r7, #0]
 8011ba8:	6878      	ldr	r0, [r7, #4]
 8011baa:	f000 f900 	bl	8011dae <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011bae:	4b07      	ldr	r3, [pc, #28]	@ (8011bcc <USBD_SetConfig+0x150>)
 8011bb0:	781b      	ldrb	r3, [r3, #0]
 8011bb2:	4619      	mov	r1, r3
 8011bb4:	6878      	ldr	r0, [r7, #4]
 8011bb6:	f7ff f854 	bl	8010c62 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8011bba:	2303      	movs	r3, #3
 8011bbc:	73fb      	strb	r3, [r7, #15]
      break;
 8011bbe:	bf00      	nop
  }

  return ret;
 8011bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	3710      	adds	r7, #16
 8011bc6:	46bd      	mov	sp, r7
 8011bc8:	bd80      	pop	{r7, pc}
 8011bca:	bf00      	nop
 8011bcc:	20011110 	.word	0x20011110

08011bd0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011bd0:	b580      	push	{r7, lr}
 8011bd2:	b082      	sub	sp, #8
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	6078      	str	r0, [r7, #4]
 8011bd8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8011bda:	683b      	ldr	r3, [r7, #0]
 8011bdc:	88db      	ldrh	r3, [r3, #6]
 8011bde:	2b01      	cmp	r3, #1
 8011be0:	d004      	beq.n	8011bec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011be2:	6839      	ldr	r1, [r7, #0]
 8011be4:	6878      	ldr	r0, [r7, #4]
 8011be6:	f000 f8e2 	bl	8011dae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8011bea:	e023      	b.n	8011c34 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011bf2:	b2db      	uxtb	r3, r3
 8011bf4:	2b02      	cmp	r3, #2
 8011bf6:	dc02      	bgt.n	8011bfe <USBD_GetConfig+0x2e>
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	dc03      	bgt.n	8011c04 <USBD_GetConfig+0x34>
 8011bfc:	e015      	b.n	8011c2a <USBD_GetConfig+0x5a>
 8011bfe:	2b03      	cmp	r3, #3
 8011c00:	d00b      	beq.n	8011c1a <USBD_GetConfig+0x4a>
 8011c02:	e012      	b.n	8011c2a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	2200      	movs	r2, #0
 8011c08:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	3308      	adds	r3, #8
 8011c0e:	2201      	movs	r2, #1
 8011c10:	4619      	mov	r1, r3
 8011c12:	6878      	ldr	r0, [r7, #4]
 8011c14:	f000 fa49 	bl	80120aa <USBD_CtlSendData>
        break;
 8011c18:	e00c      	b.n	8011c34 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	3304      	adds	r3, #4
 8011c1e:	2201      	movs	r2, #1
 8011c20:	4619      	mov	r1, r3
 8011c22:	6878      	ldr	r0, [r7, #4]
 8011c24:	f000 fa41 	bl	80120aa <USBD_CtlSendData>
        break;
 8011c28:	e004      	b.n	8011c34 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8011c2a:	6839      	ldr	r1, [r7, #0]
 8011c2c:	6878      	ldr	r0, [r7, #4]
 8011c2e:	f000 f8be 	bl	8011dae <USBD_CtlError>
        break;
 8011c32:	bf00      	nop
}
 8011c34:	bf00      	nop
 8011c36:	3708      	adds	r7, #8
 8011c38:	46bd      	mov	sp, r7
 8011c3a:	bd80      	pop	{r7, pc}

08011c3c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011c3c:	b580      	push	{r7, lr}
 8011c3e:	b082      	sub	sp, #8
 8011c40:	af00      	add	r7, sp, #0
 8011c42:	6078      	str	r0, [r7, #4]
 8011c44:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011c4c:	b2db      	uxtb	r3, r3
 8011c4e:	3b01      	subs	r3, #1
 8011c50:	2b02      	cmp	r3, #2
 8011c52:	d81e      	bhi.n	8011c92 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011c54:	683b      	ldr	r3, [r7, #0]
 8011c56:	88db      	ldrh	r3, [r3, #6]
 8011c58:	2b02      	cmp	r3, #2
 8011c5a:	d004      	beq.n	8011c66 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8011c5c:	6839      	ldr	r1, [r7, #0]
 8011c5e:	6878      	ldr	r0, [r7, #4]
 8011c60:	f000 f8a5 	bl	8011dae <USBD_CtlError>
        break;
 8011c64:	e01a      	b.n	8011c9c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	2201      	movs	r2, #1
 8011c6a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d005      	beq.n	8011c82 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	68db      	ldr	r3, [r3, #12]
 8011c7a:	f043 0202 	orr.w	r2, r3, #2
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	330c      	adds	r3, #12
 8011c86:	2202      	movs	r2, #2
 8011c88:	4619      	mov	r1, r3
 8011c8a:	6878      	ldr	r0, [r7, #4]
 8011c8c:	f000 fa0d 	bl	80120aa <USBD_CtlSendData>
      break;
 8011c90:	e004      	b.n	8011c9c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8011c92:	6839      	ldr	r1, [r7, #0]
 8011c94:	6878      	ldr	r0, [r7, #4]
 8011c96:	f000 f88a 	bl	8011dae <USBD_CtlError>
      break;
 8011c9a:	bf00      	nop
  }
}
 8011c9c:	bf00      	nop
 8011c9e:	3708      	adds	r7, #8
 8011ca0:	46bd      	mov	sp, r7
 8011ca2:	bd80      	pop	{r7, pc}

08011ca4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011ca4:	b580      	push	{r7, lr}
 8011ca6:	b082      	sub	sp, #8
 8011ca8:	af00      	add	r7, sp, #0
 8011caa:	6078      	str	r0, [r7, #4]
 8011cac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011cae:	683b      	ldr	r3, [r7, #0]
 8011cb0:	885b      	ldrh	r3, [r3, #2]
 8011cb2:	2b01      	cmp	r3, #1
 8011cb4:	d107      	bne.n	8011cc6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	2201      	movs	r2, #1
 8011cba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8011cbe:	6878      	ldr	r0, [r7, #4]
 8011cc0:	f000 fa4d 	bl	801215e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8011cc4:	e013      	b.n	8011cee <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8011cc6:	683b      	ldr	r3, [r7, #0]
 8011cc8:	885b      	ldrh	r3, [r3, #2]
 8011cca:	2b02      	cmp	r3, #2
 8011ccc:	d10b      	bne.n	8011ce6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8011cce:	683b      	ldr	r3, [r7, #0]
 8011cd0:	889b      	ldrh	r3, [r3, #4]
 8011cd2:	0a1b      	lsrs	r3, r3, #8
 8011cd4:	b29b      	uxth	r3, r3
 8011cd6:	b2da      	uxtb	r2, r3
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8011cde:	6878      	ldr	r0, [r7, #4]
 8011ce0:	f000 fa3d 	bl	801215e <USBD_CtlSendStatus>
}
 8011ce4:	e003      	b.n	8011cee <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8011ce6:	6839      	ldr	r1, [r7, #0]
 8011ce8:	6878      	ldr	r0, [r7, #4]
 8011cea:	f000 f860 	bl	8011dae <USBD_CtlError>
}
 8011cee:	bf00      	nop
 8011cf0:	3708      	adds	r7, #8
 8011cf2:	46bd      	mov	sp, r7
 8011cf4:	bd80      	pop	{r7, pc}

08011cf6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011cf6:	b580      	push	{r7, lr}
 8011cf8:	b082      	sub	sp, #8
 8011cfa:	af00      	add	r7, sp, #0
 8011cfc:	6078      	str	r0, [r7, #4]
 8011cfe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011d06:	b2db      	uxtb	r3, r3
 8011d08:	3b01      	subs	r3, #1
 8011d0a:	2b02      	cmp	r3, #2
 8011d0c:	d80b      	bhi.n	8011d26 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011d0e:	683b      	ldr	r3, [r7, #0]
 8011d10:	885b      	ldrh	r3, [r3, #2]
 8011d12:	2b01      	cmp	r3, #1
 8011d14:	d10c      	bne.n	8011d30 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	2200      	movs	r2, #0
 8011d1a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8011d1e:	6878      	ldr	r0, [r7, #4]
 8011d20:	f000 fa1d 	bl	801215e <USBD_CtlSendStatus>
      }
      break;
 8011d24:	e004      	b.n	8011d30 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8011d26:	6839      	ldr	r1, [r7, #0]
 8011d28:	6878      	ldr	r0, [r7, #4]
 8011d2a:	f000 f840 	bl	8011dae <USBD_CtlError>
      break;
 8011d2e:	e000      	b.n	8011d32 <USBD_ClrFeature+0x3c>
      break;
 8011d30:	bf00      	nop
  }
}
 8011d32:	bf00      	nop
 8011d34:	3708      	adds	r7, #8
 8011d36:	46bd      	mov	sp, r7
 8011d38:	bd80      	pop	{r7, pc}

08011d3a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011d3a:	b580      	push	{r7, lr}
 8011d3c:	b084      	sub	sp, #16
 8011d3e:	af00      	add	r7, sp, #0
 8011d40:	6078      	str	r0, [r7, #4]
 8011d42:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8011d44:	683b      	ldr	r3, [r7, #0]
 8011d46:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	781a      	ldrb	r2, [r3, #0]
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	3301      	adds	r3, #1
 8011d54:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	781a      	ldrb	r2, [r3, #0]
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	3301      	adds	r3, #1
 8011d62:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8011d64:	68f8      	ldr	r0, [r7, #12]
 8011d66:	f7ff fa40 	bl	80111ea <SWAPBYTE>
 8011d6a:	4603      	mov	r3, r0
 8011d6c:	461a      	mov	r2, r3
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	3301      	adds	r3, #1
 8011d76:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	3301      	adds	r3, #1
 8011d7c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8011d7e:	68f8      	ldr	r0, [r7, #12]
 8011d80:	f7ff fa33 	bl	80111ea <SWAPBYTE>
 8011d84:	4603      	mov	r3, r0
 8011d86:	461a      	mov	r2, r3
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	3301      	adds	r3, #1
 8011d90:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	3301      	adds	r3, #1
 8011d96:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011d98:	68f8      	ldr	r0, [r7, #12]
 8011d9a:	f7ff fa26 	bl	80111ea <SWAPBYTE>
 8011d9e:	4603      	mov	r3, r0
 8011da0:	461a      	mov	r2, r3
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	80da      	strh	r2, [r3, #6]
}
 8011da6:	bf00      	nop
 8011da8:	3710      	adds	r7, #16
 8011daa:	46bd      	mov	sp, r7
 8011dac:	bd80      	pop	{r7, pc}

08011dae <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011dae:	b580      	push	{r7, lr}
 8011db0:	b082      	sub	sp, #8
 8011db2:	af00      	add	r7, sp, #0
 8011db4:	6078      	str	r0, [r7, #4]
 8011db6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011db8:	2180      	movs	r1, #128	@ 0x80
 8011dba:	6878      	ldr	r0, [r7, #4]
 8011dbc:	f7fe fdb4 	bl	8010928 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011dc0:	2100      	movs	r1, #0
 8011dc2:	6878      	ldr	r0, [r7, #4]
 8011dc4:	f7fe fdb0 	bl	8010928 <USBD_LL_StallEP>
}
 8011dc8:	bf00      	nop
 8011dca:	3708      	adds	r7, #8
 8011dcc:	46bd      	mov	sp, r7
 8011dce:	bd80      	pop	{r7, pc}

08011dd0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011dd0:	b580      	push	{r7, lr}
 8011dd2:	b086      	sub	sp, #24
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	60f8      	str	r0, [r7, #12]
 8011dd8:	60b9      	str	r1, [r7, #8]
 8011dda:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011ddc:	2300      	movs	r3, #0
 8011dde:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d036      	beq.n	8011e54 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8011dea:	6938      	ldr	r0, [r7, #16]
 8011dec:	f000 f836 	bl	8011e5c <USBD_GetLen>
 8011df0:	4603      	mov	r3, r0
 8011df2:	3301      	adds	r3, #1
 8011df4:	b29b      	uxth	r3, r3
 8011df6:	005b      	lsls	r3, r3, #1
 8011df8:	b29a      	uxth	r2, r3
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8011dfe:	7dfb      	ldrb	r3, [r7, #23]
 8011e00:	68ba      	ldr	r2, [r7, #8]
 8011e02:	4413      	add	r3, r2
 8011e04:	687a      	ldr	r2, [r7, #4]
 8011e06:	7812      	ldrb	r2, [r2, #0]
 8011e08:	701a      	strb	r2, [r3, #0]
  idx++;
 8011e0a:	7dfb      	ldrb	r3, [r7, #23]
 8011e0c:	3301      	adds	r3, #1
 8011e0e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011e10:	7dfb      	ldrb	r3, [r7, #23]
 8011e12:	68ba      	ldr	r2, [r7, #8]
 8011e14:	4413      	add	r3, r2
 8011e16:	2203      	movs	r2, #3
 8011e18:	701a      	strb	r2, [r3, #0]
  idx++;
 8011e1a:	7dfb      	ldrb	r3, [r7, #23]
 8011e1c:	3301      	adds	r3, #1
 8011e1e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8011e20:	e013      	b.n	8011e4a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8011e22:	7dfb      	ldrb	r3, [r7, #23]
 8011e24:	68ba      	ldr	r2, [r7, #8]
 8011e26:	4413      	add	r3, r2
 8011e28:	693a      	ldr	r2, [r7, #16]
 8011e2a:	7812      	ldrb	r2, [r2, #0]
 8011e2c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8011e2e:	693b      	ldr	r3, [r7, #16]
 8011e30:	3301      	adds	r3, #1
 8011e32:	613b      	str	r3, [r7, #16]
    idx++;
 8011e34:	7dfb      	ldrb	r3, [r7, #23]
 8011e36:	3301      	adds	r3, #1
 8011e38:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8011e3a:	7dfb      	ldrb	r3, [r7, #23]
 8011e3c:	68ba      	ldr	r2, [r7, #8]
 8011e3e:	4413      	add	r3, r2
 8011e40:	2200      	movs	r2, #0
 8011e42:	701a      	strb	r2, [r3, #0]
    idx++;
 8011e44:	7dfb      	ldrb	r3, [r7, #23]
 8011e46:	3301      	adds	r3, #1
 8011e48:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8011e4a:	693b      	ldr	r3, [r7, #16]
 8011e4c:	781b      	ldrb	r3, [r3, #0]
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d1e7      	bne.n	8011e22 <USBD_GetString+0x52>
 8011e52:	e000      	b.n	8011e56 <USBD_GetString+0x86>
    return;
 8011e54:	bf00      	nop
  }
}
 8011e56:	3718      	adds	r7, #24
 8011e58:	46bd      	mov	sp, r7
 8011e5a:	bd80      	pop	{r7, pc}

08011e5c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011e5c:	b480      	push	{r7}
 8011e5e:	b085      	sub	sp, #20
 8011e60:	af00      	add	r7, sp, #0
 8011e62:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011e64:	2300      	movs	r3, #0
 8011e66:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011e6c:	e005      	b.n	8011e7a <USBD_GetLen+0x1e>
  {
    len++;
 8011e6e:	7bfb      	ldrb	r3, [r7, #15]
 8011e70:	3301      	adds	r3, #1
 8011e72:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011e74:	68bb      	ldr	r3, [r7, #8]
 8011e76:	3301      	adds	r3, #1
 8011e78:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011e7a:	68bb      	ldr	r3, [r7, #8]
 8011e7c:	781b      	ldrb	r3, [r3, #0]
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d1f5      	bne.n	8011e6e <USBD_GetLen+0x12>
  }

  return len;
 8011e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e84:	4618      	mov	r0, r3
 8011e86:	3714      	adds	r7, #20
 8011e88:	46bd      	mov	sp, r7
 8011e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e8e:	4770      	bx	lr

08011e90 <USBD_Class_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011e90:	b480      	push	{r7}
 8011e92:	b083      	sub	sp, #12
 8011e94:	af00      	add	r7, sp, #0
 8011e96:	4603      	mov	r3, r0
 8011e98:	6039      	str	r1, [r7, #0]
 8011e9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_DeviceDesc);
 8011e9c:	683b      	ldr	r3, [r7, #0]
 8011e9e:	2212      	movs	r2, #18
 8011ea0:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_DeviceDesc;
 8011ea2:	4b03      	ldr	r3, [pc, #12]	@ (8011eb0 <USBD_Class_DeviceDescriptor+0x20>)
}
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	370c      	adds	r7, #12
 8011ea8:	46bd      	mov	sp, r7
 8011eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eae:	4770      	bx	lr
 8011eb0:	200000f0 	.word	0x200000f0

08011eb4 <USBD_Class_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011eb4:	b480      	push	{r7}
 8011eb6:	b083      	sub	sp, #12
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	4603      	mov	r3, r0
 8011ebc:	6039      	str	r1, [r7, #0]
 8011ebe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_LangIDDesc);
 8011ec0:	683b      	ldr	r3, [r7, #0]
 8011ec2:	2204      	movs	r2, #4
 8011ec4:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_LangIDDesc;
 8011ec6:	4b03      	ldr	r3, [pc, #12]	@ (8011ed4 <USBD_Class_LangIDStrDescriptor+0x20>)
}
 8011ec8:	4618      	mov	r0, r3
 8011eca:	370c      	adds	r7, #12
 8011ecc:	46bd      	mov	sp, r7
 8011ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed2:	4770      	bx	lr
 8011ed4:	20000104 	.word	0x20000104

08011ed8 <USBD_Class_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011ed8:	b580      	push	{r7, lr}
 8011eda:	b082      	sub	sp, #8
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	4603      	mov	r3, r0
 8011ee0:	6039      	str	r1, [r7, #0]
 8011ee2:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 8011ee4:	79fb      	ldrb	r3, [r7, #7]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d105      	bne.n	8011ef6 <USBD_Class_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 8011eea:	683a      	ldr	r2, [r7, #0]
 8011eec:	4907      	ldr	r1, [pc, #28]	@ (8011f0c <USBD_Class_ProductStrDescriptor+0x34>)
 8011eee:	4808      	ldr	r0, [pc, #32]	@ (8011f10 <USBD_Class_ProductStrDescriptor+0x38>)
 8011ef0:	f7ff ff6e 	bl	8011dd0 <USBD_GetString>
 8011ef4:	e004      	b.n	8011f00 <USBD_Class_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 8011ef6:	683a      	ldr	r2, [r7, #0]
 8011ef8:	4904      	ldr	r1, [pc, #16]	@ (8011f0c <USBD_Class_ProductStrDescriptor+0x34>)
 8011efa:	4805      	ldr	r0, [pc, #20]	@ (8011f10 <USBD_Class_ProductStrDescriptor+0x38>)
 8011efc:	f7ff ff68 	bl	8011dd0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011f00:	4b02      	ldr	r3, [pc, #8]	@ (8011f0c <USBD_Class_ProductStrDescriptor+0x34>)
}
 8011f02:	4618      	mov	r0, r3
 8011f04:	3708      	adds	r7, #8
 8011f06:	46bd      	mov	sp, r7
 8011f08:	bd80      	pop	{r7, pc}
 8011f0a:	bf00      	nop
 8011f0c:	20011114 	.word	0x20011114
 8011f10:	080140f8 	.word	0x080140f8

08011f14 <USBD_Class_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011f14:	b580      	push	{r7, lr}
 8011f16:	b082      	sub	sp, #8
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	4603      	mov	r3, r0
 8011f1c:	6039      	str	r1, [r7, #0]
 8011f1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011f20:	683a      	ldr	r2, [r7, #0]
 8011f22:	4904      	ldr	r1, [pc, #16]	@ (8011f34 <USBD_Class_ManufacturerStrDescriptor+0x20>)
 8011f24:	4804      	ldr	r0, [pc, #16]	@ (8011f38 <USBD_Class_ManufacturerStrDescriptor+0x24>)
 8011f26:	f7ff ff53 	bl	8011dd0 <USBD_GetString>
  return USBD_StrDesc;
 8011f2a:	4b02      	ldr	r3, [pc, #8]	@ (8011f34 <USBD_Class_ManufacturerStrDescriptor+0x20>)
}
 8011f2c:	4618      	mov	r0, r3
 8011f2e:	3708      	adds	r7, #8
 8011f30:	46bd      	mov	sp, r7
 8011f32:	bd80      	pop	{r7, pc}
 8011f34:	20011114 	.word	0x20011114
 8011f38:	08014110 	.word	0x08014110

08011f3c <USBD_Class_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011f3c:	b580      	push	{r7, lr}
 8011f3e:	b082      	sub	sp, #8
 8011f40:	af00      	add	r7, sp, #0
 8011f42:	4603      	mov	r3, r0
 8011f44:	6039      	str	r1, [r7, #0]
 8011f46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = USB_SIZ_STRING_SERIAL;
 8011f48:	683b      	ldr	r3, [r7, #0]
 8011f4a:	221a      	movs	r2, #26
 8011f4c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 8011f4e:	f000 f843 	bl	8011fd8 <Get_SerialNum>

  return (uint8_t *)USBD_StringSerial;
 8011f52:	4b02      	ldr	r3, [pc, #8]	@ (8011f5c <USBD_Class_SerialStrDescriptor+0x20>)
}
 8011f54:	4618      	mov	r0, r3
 8011f56:	3708      	adds	r7, #8
 8011f58:	46bd      	mov	sp, r7
 8011f5a:	bd80      	pop	{r7, pc}
 8011f5c:	20000108 	.word	0x20000108

08011f60 <USBD_Class_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011f60:	b580      	push	{r7, lr}
 8011f62:	b082      	sub	sp, #8
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	4603      	mov	r3, r0
 8011f68:	6039      	str	r1, [r7, #0]
 8011f6a:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 8011f6c:	79fb      	ldrb	r3, [r7, #7]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d105      	bne.n	8011f7e <USBD_Class_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 8011f72:	683a      	ldr	r2, [r7, #0]
 8011f74:	4907      	ldr	r1, [pc, #28]	@ (8011f94 <USBD_Class_ConfigStrDescriptor+0x34>)
 8011f76:	4808      	ldr	r0, [pc, #32]	@ (8011f98 <USBD_Class_ConfigStrDescriptor+0x38>)
 8011f78:	f7ff ff2a 	bl	8011dd0 <USBD_GetString>
 8011f7c:	e004      	b.n	8011f88 <USBD_Class_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 8011f7e:	683a      	ldr	r2, [r7, #0]
 8011f80:	4904      	ldr	r1, [pc, #16]	@ (8011f94 <USBD_Class_ConfigStrDescriptor+0x34>)
 8011f82:	4805      	ldr	r0, [pc, #20]	@ (8011f98 <USBD_Class_ConfigStrDescriptor+0x38>)
 8011f84:	f7ff ff24 	bl	8011dd0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011f88:	4b02      	ldr	r3, [pc, #8]	@ (8011f94 <USBD_Class_ConfigStrDescriptor+0x34>)
}
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	3708      	adds	r7, #8
 8011f8e:	46bd      	mov	sp, r7
 8011f90:	bd80      	pop	{r7, pc}
 8011f92:	bf00      	nop
 8011f94:	20011114 	.word	0x20011114
 8011f98:	08014124 	.word	0x08014124

08011f9c <USBD_Class_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011f9c:	b580      	push	{r7, lr}
 8011f9e:	b082      	sub	sp, #8
 8011fa0:	af00      	add	r7, sp, #0
 8011fa2:	4603      	mov	r3, r0
 8011fa4:	6039      	str	r1, [r7, #0]
 8011fa6:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 8011fa8:	79fb      	ldrb	r3, [r7, #7]
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d105      	bne.n	8011fba <USBD_Class_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 8011fae:	683a      	ldr	r2, [r7, #0]
 8011fb0:	4907      	ldr	r1, [pc, #28]	@ (8011fd0 <USBD_Class_InterfaceStrDescriptor+0x34>)
 8011fb2:	4808      	ldr	r0, [pc, #32]	@ (8011fd4 <USBD_Class_InterfaceStrDescriptor+0x38>)
 8011fb4:	f7ff ff0c 	bl	8011dd0 <USBD_GetString>
 8011fb8:	e004      	b.n	8011fc4 <USBD_Class_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 8011fba:	683a      	ldr	r2, [r7, #0]
 8011fbc:	4904      	ldr	r1, [pc, #16]	@ (8011fd0 <USBD_Class_InterfaceStrDescriptor+0x34>)
 8011fbe:	4805      	ldr	r0, [pc, #20]	@ (8011fd4 <USBD_Class_InterfaceStrDescriptor+0x38>)
 8011fc0:	f7ff ff06 	bl	8011dd0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011fc4:	4b02      	ldr	r3, [pc, #8]	@ (8011fd0 <USBD_Class_InterfaceStrDescriptor+0x34>)
}
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	3708      	adds	r7, #8
 8011fca:	46bd      	mov	sp, r7
 8011fcc:	bd80      	pop	{r7, pc}
 8011fce:	bf00      	nop
 8011fd0:	20011114 	.word	0x20011114
 8011fd4:	08014130 	.word	0x08014130

08011fd8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011fd8:	b580      	push	{r7, lr}
 8011fda:	b084      	sub	sp, #16
 8011fdc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *)DEVICE_ID1;
 8011fde:	4b0f      	ldr	r3, [pc, #60]	@ (801201c <Get_SerialNum+0x44>)
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *)DEVICE_ID2;
 8011fe4:	4b0e      	ldr	r3, [pc, #56]	@ (8012020 <Get_SerialNum+0x48>)
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *)DEVICE_ID3;
 8011fea:	4b0e      	ldr	r3, [pc, #56]	@ (8012024 <Get_SerialNum+0x4c>)
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011ff0:	68fa      	ldr	r2, [r7, #12]
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	4413      	add	r3, r2
 8011ff6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0U)
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d009      	beq.n	8012012 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8U);
 8011ffe:	2208      	movs	r2, #8
 8012000:	4909      	ldr	r1, [pc, #36]	@ (8012028 <Get_SerialNum+0x50>)
 8012002:	68f8      	ldr	r0, [r7, #12]
 8012004:	f000 f814 	bl	8012030 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4U);
 8012008:	2204      	movs	r2, #4
 801200a:	4908      	ldr	r1, [pc, #32]	@ (801202c <Get_SerialNum+0x54>)
 801200c:	68b8      	ldr	r0, [r7, #8]
 801200e:	f000 f80f 	bl	8012030 <IntToUnicode>
  }
}
 8012012:	bf00      	nop
 8012014:	3710      	adds	r7, #16
 8012016:	46bd      	mov	sp, r7
 8012018:	bd80      	pop	{r7, pc}
 801201a:	bf00      	nop
 801201c:	08fff800 	.word	0x08fff800
 8012020:	08fff804 	.word	0x08fff804
 8012024:	08fff808 	.word	0x08fff808
 8012028:	2000010a 	.word	0x2000010a
 801202c:	2000011a 	.word	0x2000011a

08012030 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len)
{
 8012030:	b480      	push	{r7}
 8012032:	b087      	sub	sp, #28
 8012034:	af00      	add	r7, sp, #0
 8012036:	60f8      	str	r0, [r7, #12]
 8012038:	60b9      	str	r1, [r7, #8]
 801203a:	4613      	mov	r3, r2
 801203c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0U;
 801203e:	2300      	movs	r3, #0
 8012040:	75fb      	strb	r3, [r7, #23]

  for (idx = 0U ; idx < len ; idx ++)
 8012042:	2300      	movs	r3, #0
 8012044:	75fb      	strb	r3, [r7, #23]
 8012046:	e025      	b.n	8012094 <IntToUnicode+0x64>
  {
    if (((value >> 28)) < 0xAU)
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	0f1b      	lsrs	r3, r3, #28
 801204c:	2b09      	cmp	r3, #9
 801204e:	d80a      	bhi.n	8012066 <IntToUnicode+0x36>
    {
      pbuf[ 2U * idx] = (value >> 28) + '0';
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	0f1b      	lsrs	r3, r3, #28
 8012054:	b2da      	uxtb	r2, r3
 8012056:	7dfb      	ldrb	r3, [r7, #23]
 8012058:	005b      	lsls	r3, r3, #1
 801205a:	68b9      	ldr	r1, [r7, #8]
 801205c:	440b      	add	r3, r1
 801205e:	3230      	adds	r2, #48	@ 0x30
 8012060:	b2d2      	uxtb	r2, r2
 8012062:	701a      	strb	r2, [r3, #0]
 8012064:	e009      	b.n	801207a <IntToUnicode+0x4a>
    }
    else
    {
      pbuf[2U * idx] = (value >> 28) + 'A' - 10U;
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	0f1b      	lsrs	r3, r3, #28
 801206a:	b2da      	uxtb	r2, r3
 801206c:	7dfb      	ldrb	r3, [r7, #23]
 801206e:	005b      	lsls	r3, r3, #1
 8012070:	68b9      	ldr	r1, [r7, #8]
 8012072:	440b      	add	r3, r1
 8012074:	3237      	adds	r2, #55	@ 0x37
 8012076:	b2d2      	uxtb	r2, r2
 8012078:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	011b      	lsls	r3, r3, #4
 801207e:	60fb      	str	r3, [r7, #12]

    pbuf[2U * idx + 1] = 0U;
 8012080:	7dfb      	ldrb	r3, [r7, #23]
 8012082:	005b      	lsls	r3, r3, #1
 8012084:	3301      	adds	r3, #1
 8012086:	68ba      	ldr	r2, [r7, #8]
 8012088:	4413      	add	r3, r2
 801208a:	2200      	movs	r2, #0
 801208c:	701a      	strb	r2, [r3, #0]
  for (idx = 0U ; idx < len ; idx ++)
 801208e:	7dfb      	ldrb	r3, [r7, #23]
 8012090:	3301      	adds	r3, #1
 8012092:	75fb      	strb	r3, [r7, #23]
 8012094:	7dfa      	ldrb	r2, [r7, #23]
 8012096:	79fb      	ldrb	r3, [r7, #7]
 8012098:	429a      	cmp	r2, r3
 801209a:	d3d5      	bcc.n	8012048 <IntToUnicode+0x18>
  }
}
 801209c:	bf00      	nop
 801209e:	bf00      	nop
 80120a0:	371c      	adds	r7, #28
 80120a2:	46bd      	mov	sp, r7
 80120a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a8:	4770      	bx	lr

080120aa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80120aa:	b580      	push	{r7, lr}
 80120ac:	b084      	sub	sp, #16
 80120ae:	af00      	add	r7, sp, #0
 80120b0:	60f8      	str	r0, [r7, #12]
 80120b2:	60b9      	str	r1, [r7, #8]
 80120b4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	2202      	movs	r2, #2
 80120ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	687a      	ldr	r2, [r7, #4]
 80120c2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	687a      	ldr	r2, [r7, #4]
 80120c8:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	68ba      	ldr	r2, [r7, #8]
 80120ce:	2100      	movs	r1, #0
 80120d0:	68f8      	ldr	r0, [r7, #12]
 80120d2:	f7fe fca0 	bl	8010a16 <USBD_LL_Transmit>

  return USBD_OK;
 80120d6:	2300      	movs	r3, #0
}
 80120d8:	4618      	mov	r0, r3
 80120da:	3710      	adds	r7, #16
 80120dc:	46bd      	mov	sp, r7
 80120de:	bd80      	pop	{r7, pc}

080120e0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80120e0:	b580      	push	{r7, lr}
 80120e2:	b084      	sub	sp, #16
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	60f8      	str	r0, [r7, #12]
 80120e8:	60b9      	str	r1, [r7, #8]
 80120ea:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	68ba      	ldr	r2, [r7, #8]
 80120f0:	2100      	movs	r1, #0
 80120f2:	68f8      	ldr	r0, [r7, #12]
 80120f4:	f7fe fc8f 	bl	8010a16 <USBD_LL_Transmit>

  return USBD_OK;
 80120f8:	2300      	movs	r3, #0
}
 80120fa:	4618      	mov	r0, r3
 80120fc:	3710      	adds	r7, #16
 80120fe:	46bd      	mov	sp, r7
 8012100:	bd80      	pop	{r7, pc}

08012102 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012102:	b580      	push	{r7, lr}
 8012104:	b084      	sub	sp, #16
 8012106:	af00      	add	r7, sp, #0
 8012108:	60f8      	str	r0, [r7, #12]
 801210a:	60b9      	str	r1, [r7, #8]
 801210c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	2203      	movs	r2, #3
 8012112:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	687a      	ldr	r2, [r7, #4]
 801211a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	687a      	ldr	r2, [r7, #4]
 8012122:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	68ba      	ldr	r2, [r7, #8]
 801212a:	2100      	movs	r1, #0
 801212c:	68f8      	ldr	r0, [r7, #12]
 801212e:	f7fe fc8d 	bl	8010a4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012132:	2300      	movs	r3, #0
}
 8012134:	4618      	mov	r0, r3
 8012136:	3710      	adds	r7, #16
 8012138:	46bd      	mov	sp, r7
 801213a:	bd80      	pop	{r7, pc}

0801213c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801213c:	b580      	push	{r7, lr}
 801213e:	b084      	sub	sp, #16
 8012140:	af00      	add	r7, sp, #0
 8012142:	60f8      	str	r0, [r7, #12]
 8012144:	60b9      	str	r1, [r7, #8]
 8012146:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	68ba      	ldr	r2, [r7, #8]
 801214c:	2100      	movs	r1, #0
 801214e:	68f8      	ldr	r0, [r7, #12]
 8012150:	f7fe fc7c 	bl	8010a4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012154:	2300      	movs	r3, #0
}
 8012156:	4618      	mov	r0, r3
 8012158:	3710      	adds	r7, #16
 801215a:	46bd      	mov	sp, r7
 801215c:	bd80      	pop	{r7, pc}

0801215e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801215e:	b580      	push	{r7, lr}
 8012160:	b082      	sub	sp, #8
 8012162:	af00      	add	r7, sp, #0
 8012164:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	2204      	movs	r2, #4
 801216a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801216e:	2300      	movs	r3, #0
 8012170:	2200      	movs	r2, #0
 8012172:	2100      	movs	r1, #0
 8012174:	6878      	ldr	r0, [r7, #4]
 8012176:	f7fe fc4e 	bl	8010a16 <USBD_LL_Transmit>

  return USBD_OK;
 801217a:	2300      	movs	r3, #0
}
 801217c:	4618      	mov	r0, r3
 801217e:	3708      	adds	r7, #8
 8012180:	46bd      	mov	sp, r7
 8012182:	bd80      	pop	{r7, pc}

08012184 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012184:	b580      	push	{r7, lr}
 8012186:	b082      	sub	sp, #8
 8012188:	af00      	add	r7, sp, #0
 801218a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	2205      	movs	r2, #5
 8012190:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012194:	2300      	movs	r3, #0
 8012196:	2200      	movs	r2, #0
 8012198:	2100      	movs	r1, #0
 801219a:	6878      	ldr	r0, [r7, #4]
 801219c:	f7fe fc56 	bl	8010a4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80121a0:	2300      	movs	r3, #0
}
 80121a2:	4618      	mov	r0, r3
 80121a4:	3708      	adds	r7, #8
 80121a6:	46bd      	mov	sp, r7
 80121a8:	bd80      	pop	{r7, pc}
	...

080121ac <std>:
 80121ac:	2300      	movs	r3, #0
 80121ae:	b510      	push	{r4, lr}
 80121b0:	4604      	mov	r4, r0
 80121b2:	6083      	str	r3, [r0, #8]
 80121b4:	8181      	strh	r1, [r0, #12]
 80121b6:	4619      	mov	r1, r3
 80121b8:	6643      	str	r3, [r0, #100]	@ 0x64
 80121ba:	81c2      	strh	r2, [r0, #14]
 80121bc:	2208      	movs	r2, #8
 80121be:	6183      	str	r3, [r0, #24]
 80121c0:	e9c0 3300 	strd	r3, r3, [r0]
 80121c4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80121c8:	305c      	adds	r0, #92	@ 0x5c
 80121ca:	f000 f993 	bl	80124f4 <memset>
 80121ce:	4b0d      	ldr	r3, [pc, #52]	@ (8012204 <std+0x58>)
 80121d0:	6224      	str	r4, [r4, #32]
 80121d2:	6263      	str	r3, [r4, #36]	@ 0x24
 80121d4:	4b0c      	ldr	r3, [pc, #48]	@ (8012208 <std+0x5c>)
 80121d6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80121d8:	4b0c      	ldr	r3, [pc, #48]	@ (801220c <std+0x60>)
 80121da:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80121dc:	4b0c      	ldr	r3, [pc, #48]	@ (8012210 <std+0x64>)
 80121de:	6323      	str	r3, [r4, #48]	@ 0x30
 80121e0:	4b0c      	ldr	r3, [pc, #48]	@ (8012214 <std+0x68>)
 80121e2:	429c      	cmp	r4, r3
 80121e4:	d006      	beq.n	80121f4 <std+0x48>
 80121e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80121ea:	4294      	cmp	r4, r2
 80121ec:	d002      	beq.n	80121f4 <std+0x48>
 80121ee:	33d0      	adds	r3, #208	@ 0xd0
 80121f0:	429c      	cmp	r4, r3
 80121f2:	d105      	bne.n	8012200 <std+0x54>
 80121f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80121f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80121fc:	f000 b9f2 	b.w	80125e4 <__retarget_lock_init_recursive>
 8012200:	bd10      	pop	{r4, pc}
 8012202:	bf00      	nop
 8012204:	080123fd 	.word	0x080123fd
 8012208:	0801241f 	.word	0x0801241f
 801220c:	08012457 	.word	0x08012457
 8012210:	0801247b 	.word	0x0801247b
 8012214:	20011214 	.word	0x20011214

08012218 <stdio_exit_handler>:
 8012218:	4a02      	ldr	r2, [pc, #8]	@ (8012224 <stdio_exit_handler+0xc>)
 801221a:	4903      	ldr	r1, [pc, #12]	@ (8012228 <stdio_exit_handler+0x10>)
 801221c:	4803      	ldr	r0, [pc, #12]	@ (801222c <stdio_exit_handler+0x14>)
 801221e:	f000 b869 	b.w	80122f4 <_fwalk_sglue>
 8012222:	bf00      	nop
 8012224:	20000124 	.word	0x20000124
 8012228:	08013155 	.word	0x08013155
 801222c:	20000134 	.word	0x20000134

08012230 <cleanup_stdio>:
 8012230:	6841      	ldr	r1, [r0, #4]
 8012232:	4b0c      	ldr	r3, [pc, #48]	@ (8012264 <cleanup_stdio+0x34>)
 8012234:	4299      	cmp	r1, r3
 8012236:	b510      	push	{r4, lr}
 8012238:	4604      	mov	r4, r0
 801223a:	d001      	beq.n	8012240 <cleanup_stdio+0x10>
 801223c:	f000 ff8a 	bl	8013154 <_fflush_r>
 8012240:	68a1      	ldr	r1, [r4, #8]
 8012242:	4b09      	ldr	r3, [pc, #36]	@ (8012268 <cleanup_stdio+0x38>)
 8012244:	4299      	cmp	r1, r3
 8012246:	d002      	beq.n	801224e <cleanup_stdio+0x1e>
 8012248:	4620      	mov	r0, r4
 801224a:	f000 ff83 	bl	8013154 <_fflush_r>
 801224e:	68e1      	ldr	r1, [r4, #12]
 8012250:	4b06      	ldr	r3, [pc, #24]	@ (801226c <cleanup_stdio+0x3c>)
 8012252:	4299      	cmp	r1, r3
 8012254:	d004      	beq.n	8012260 <cleanup_stdio+0x30>
 8012256:	4620      	mov	r0, r4
 8012258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801225c:	f000 bf7a 	b.w	8013154 <_fflush_r>
 8012260:	bd10      	pop	{r4, pc}
 8012262:	bf00      	nop
 8012264:	20011214 	.word	0x20011214
 8012268:	2001127c 	.word	0x2001127c
 801226c:	200112e4 	.word	0x200112e4

08012270 <global_stdio_init.part.0>:
 8012270:	b510      	push	{r4, lr}
 8012272:	4b0b      	ldr	r3, [pc, #44]	@ (80122a0 <global_stdio_init.part.0+0x30>)
 8012274:	2104      	movs	r1, #4
 8012276:	4c0b      	ldr	r4, [pc, #44]	@ (80122a4 <global_stdio_init.part.0+0x34>)
 8012278:	4a0b      	ldr	r2, [pc, #44]	@ (80122a8 <global_stdio_init.part.0+0x38>)
 801227a:	4620      	mov	r0, r4
 801227c:	601a      	str	r2, [r3, #0]
 801227e:	2200      	movs	r2, #0
 8012280:	f7ff ff94 	bl	80121ac <std>
 8012284:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012288:	2201      	movs	r2, #1
 801228a:	2109      	movs	r1, #9
 801228c:	f7ff ff8e 	bl	80121ac <std>
 8012290:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012294:	2202      	movs	r2, #2
 8012296:	2112      	movs	r1, #18
 8012298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801229c:	f7ff bf86 	b.w	80121ac <std>
 80122a0:	2001134c 	.word	0x2001134c
 80122a4:	20011214 	.word	0x20011214
 80122a8:	08012219 	.word	0x08012219

080122ac <__sfp_lock_acquire>:
 80122ac:	4801      	ldr	r0, [pc, #4]	@ (80122b4 <__sfp_lock_acquire+0x8>)
 80122ae:	f000 b99a 	b.w	80125e6 <__retarget_lock_acquire_recursive>
 80122b2:	bf00      	nop
 80122b4:	20011355 	.word	0x20011355

080122b8 <__sfp_lock_release>:
 80122b8:	4801      	ldr	r0, [pc, #4]	@ (80122c0 <__sfp_lock_release+0x8>)
 80122ba:	f000 b995 	b.w	80125e8 <__retarget_lock_release_recursive>
 80122be:	bf00      	nop
 80122c0:	20011355 	.word	0x20011355

080122c4 <__sinit>:
 80122c4:	b510      	push	{r4, lr}
 80122c6:	4604      	mov	r4, r0
 80122c8:	f7ff fff0 	bl	80122ac <__sfp_lock_acquire>
 80122cc:	6a23      	ldr	r3, [r4, #32]
 80122ce:	b11b      	cbz	r3, 80122d8 <__sinit+0x14>
 80122d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80122d4:	f7ff bff0 	b.w	80122b8 <__sfp_lock_release>
 80122d8:	4b04      	ldr	r3, [pc, #16]	@ (80122ec <__sinit+0x28>)
 80122da:	6223      	str	r3, [r4, #32]
 80122dc:	4b04      	ldr	r3, [pc, #16]	@ (80122f0 <__sinit+0x2c>)
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d1f5      	bne.n	80122d0 <__sinit+0xc>
 80122e4:	f7ff ffc4 	bl	8012270 <global_stdio_init.part.0>
 80122e8:	e7f2      	b.n	80122d0 <__sinit+0xc>
 80122ea:	bf00      	nop
 80122ec:	08012231 	.word	0x08012231
 80122f0:	2001134c 	.word	0x2001134c

080122f4 <_fwalk_sglue>:
 80122f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80122f8:	4607      	mov	r7, r0
 80122fa:	4688      	mov	r8, r1
 80122fc:	4614      	mov	r4, r2
 80122fe:	2600      	movs	r6, #0
 8012300:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012304:	f1b9 0901 	subs.w	r9, r9, #1
 8012308:	d505      	bpl.n	8012316 <_fwalk_sglue+0x22>
 801230a:	6824      	ldr	r4, [r4, #0]
 801230c:	2c00      	cmp	r4, #0
 801230e:	d1f7      	bne.n	8012300 <_fwalk_sglue+0xc>
 8012310:	4630      	mov	r0, r6
 8012312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012316:	89ab      	ldrh	r3, [r5, #12]
 8012318:	2b01      	cmp	r3, #1
 801231a:	d907      	bls.n	801232c <_fwalk_sglue+0x38>
 801231c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012320:	3301      	adds	r3, #1
 8012322:	d003      	beq.n	801232c <_fwalk_sglue+0x38>
 8012324:	4629      	mov	r1, r5
 8012326:	4638      	mov	r0, r7
 8012328:	47c0      	blx	r8
 801232a:	4306      	orrs	r6, r0
 801232c:	3568      	adds	r5, #104	@ 0x68
 801232e:	e7e9      	b.n	8012304 <_fwalk_sglue+0x10>

08012330 <iprintf>:
 8012330:	b40f      	push	{r0, r1, r2, r3}
 8012332:	b507      	push	{r0, r1, r2, lr}
 8012334:	4906      	ldr	r1, [pc, #24]	@ (8012350 <iprintf+0x20>)
 8012336:	ab04      	add	r3, sp, #16
 8012338:	6808      	ldr	r0, [r1, #0]
 801233a:	f853 2b04 	ldr.w	r2, [r3], #4
 801233e:	6881      	ldr	r1, [r0, #8]
 8012340:	9301      	str	r3, [sp, #4]
 8012342:	f000 fbd9 	bl	8012af8 <_vfiprintf_r>
 8012346:	b003      	add	sp, #12
 8012348:	f85d eb04 	ldr.w	lr, [sp], #4
 801234c:	b004      	add	sp, #16
 801234e:	4770      	bx	lr
 8012350:	20000130 	.word	0x20000130

08012354 <sniprintf>:
 8012354:	b40c      	push	{r2, r3}
 8012356:	4b18      	ldr	r3, [pc, #96]	@ (80123b8 <sniprintf+0x64>)
 8012358:	b530      	push	{r4, r5, lr}
 801235a:	1e0c      	subs	r4, r1, #0
 801235c:	b09d      	sub	sp, #116	@ 0x74
 801235e:	681d      	ldr	r5, [r3, #0]
 8012360:	da08      	bge.n	8012374 <sniprintf+0x20>
 8012362:	238b      	movs	r3, #139	@ 0x8b
 8012364:	f04f 30ff 	mov.w	r0, #4294967295
 8012368:	602b      	str	r3, [r5, #0]
 801236a:	b01d      	add	sp, #116	@ 0x74
 801236c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012370:	b002      	add	sp, #8
 8012372:	4770      	bx	lr
 8012374:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8012378:	9002      	str	r0, [sp, #8]
 801237a:	9006      	str	r0, [sp, #24]
 801237c:	a902      	add	r1, sp, #8
 801237e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012382:	bf14      	ite	ne
 8012384:	f104 33ff 	addne.w	r3, r4, #4294967295
 8012388:	4623      	moveq	r3, r4
 801238a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801238c:	4628      	mov	r0, r5
 801238e:	9304      	str	r3, [sp, #16]
 8012390:	9307      	str	r3, [sp, #28]
 8012392:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012396:	f8ad 3016 	strh.w	r3, [sp, #22]
 801239a:	ab21      	add	r3, sp, #132	@ 0x84
 801239c:	9301      	str	r3, [sp, #4]
 801239e:	f000 fa85 	bl	80128ac <_svfiprintf_r>
 80123a2:	1c43      	adds	r3, r0, #1
 80123a4:	bfbc      	itt	lt
 80123a6:	238b      	movlt	r3, #139	@ 0x8b
 80123a8:	602b      	strlt	r3, [r5, #0]
 80123aa:	2c00      	cmp	r4, #0
 80123ac:	d0dd      	beq.n	801236a <sniprintf+0x16>
 80123ae:	9b02      	ldr	r3, [sp, #8]
 80123b0:	2200      	movs	r2, #0
 80123b2:	701a      	strb	r2, [r3, #0]
 80123b4:	e7d9      	b.n	801236a <sniprintf+0x16>
 80123b6:	bf00      	nop
 80123b8:	20000130 	.word	0x20000130

080123bc <siprintf>:
 80123bc:	b40e      	push	{r1, r2, r3}
 80123be:	b500      	push	{lr}
 80123c0:	b09c      	sub	sp, #112	@ 0x70
 80123c2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80123c6:	ab1d      	add	r3, sp, #116	@ 0x74
 80123c8:	9002      	str	r0, [sp, #8]
 80123ca:	9006      	str	r0, [sp, #24]
 80123cc:	9107      	str	r1, [sp, #28]
 80123ce:	9104      	str	r1, [sp, #16]
 80123d0:	4808      	ldr	r0, [pc, #32]	@ (80123f4 <siprintf+0x38>)
 80123d2:	4909      	ldr	r1, [pc, #36]	@ (80123f8 <siprintf+0x3c>)
 80123d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80123d8:	9105      	str	r1, [sp, #20]
 80123da:	a902      	add	r1, sp, #8
 80123dc:	6800      	ldr	r0, [r0, #0]
 80123de:	9301      	str	r3, [sp, #4]
 80123e0:	f000 fa64 	bl	80128ac <_svfiprintf_r>
 80123e4:	9b02      	ldr	r3, [sp, #8]
 80123e6:	2200      	movs	r2, #0
 80123e8:	701a      	strb	r2, [r3, #0]
 80123ea:	b01c      	add	sp, #112	@ 0x70
 80123ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80123f0:	b003      	add	sp, #12
 80123f2:	4770      	bx	lr
 80123f4:	20000130 	.word	0x20000130
 80123f8:	ffff0208 	.word	0xffff0208

080123fc <__sread>:
 80123fc:	b510      	push	{r4, lr}
 80123fe:	460c      	mov	r4, r1
 8012400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012404:	f000 f8a0 	bl	8012548 <_read_r>
 8012408:	2800      	cmp	r0, #0
 801240a:	bfab      	itete	ge
 801240c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801240e:	89a3      	ldrhlt	r3, [r4, #12]
 8012410:	181b      	addge	r3, r3, r0
 8012412:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012416:	bfac      	ite	ge
 8012418:	6563      	strge	r3, [r4, #84]	@ 0x54
 801241a:	81a3      	strhlt	r3, [r4, #12]
 801241c:	bd10      	pop	{r4, pc}

0801241e <__swrite>:
 801241e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012422:	461f      	mov	r7, r3
 8012424:	898b      	ldrh	r3, [r1, #12]
 8012426:	4605      	mov	r5, r0
 8012428:	460c      	mov	r4, r1
 801242a:	05db      	lsls	r3, r3, #23
 801242c:	4616      	mov	r6, r2
 801242e:	d505      	bpl.n	801243c <__swrite+0x1e>
 8012430:	2302      	movs	r3, #2
 8012432:	2200      	movs	r2, #0
 8012434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012438:	f000 f874 	bl	8012524 <_lseek_r>
 801243c:	89a3      	ldrh	r3, [r4, #12]
 801243e:	4632      	mov	r2, r6
 8012440:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012444:	4628      	mov	r0, r5
 8012446:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801244a:	81a3      	strh	r3, [r4, #12]
 801244c:	463b      	mov	r3, r7
 801244e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012452:	f000 b88b 	b.w	801256c <_write_r>

08012456 <__sseek>:
 8012456:	b510      	push	{r4, lr}
 8012458:	460c      	mov	r4, r1
 801245a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801245e:	f000 f861 	bl	8012524 <_lseek_r>
 8012462:	1c43      	adds	r3, r0, #1
 8012464:	89a3      	ldrh	r3, [r4, #12]
 8012466:	bf15      	itete	ne
 8012468:	6560      	strne	r0, [r4, #84]	@ 0x54
 801246a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801246e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012472:	81a3      	strheq	r3, [r4, #12]
 8012474:	bf18      	it	ne
 8012476:	81a3      	strhne	r3, [r4, #12]
 8012478:	bd10      	pop	{r4, pc}

0801247a <__sclose>:
 801247a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801247e:	f000 b841 	b.w	8012504 <_close_r>

08012482 <_vsniprintf_r>:
 8012482:	b530      	push	{r4, r5, lr}
 8012484:	4614      	mov	r4, r2
 8012486:	b09b      	sub	sp, #108	@ 0x6c
 8012488:	4605      	mov	r5, r0
 801248a:	461a      	mov	r2, r3
 801248c:	2c00      	cmp	r4, #0
 801248e:	da05      	bge.n	801249c <_vsniprintf_r+0x1a>
 8012490:	238b      	movs	r3, #139	@ 0x8b
 8012492:	6003      	str	r3, [r0, #0]
 8012494:	f04f 30ff 	mov.w	r0, #4294967295
 8012498:	b01b      	add	sp, #108	@ 0x6c
 801249a:	bd30      	pop	{r4, r5, pc}
 801249c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80124a0:	9100      	str	r1, [sp, #0]
 80124a2:	9104      	str	r1, [sp, #16]
 80124a4:	4669      	mov	r1, sp
 80124a6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80124aa:	bf14      	ite	ne
 80124ac:	f104 33ff 	addne.w	r3, r4, #4294967295
 80124b0:	4623      	moveq	r3, r4
 80124b2:	9302      	str	r3, [sp, #8]
 80124b4:	9305      	str	r3, [sp, #20]
 80124b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80124ba:	f8ad 300e 	strh.w	r3, [sp, #14]
 80124be:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80124c0:	f000 f9f4 	bl	80128ac <_svfiprintf_r>
 80124c4:	1c43      	adds	r3, r0, #1
 80124c6:	bfbc      	itt	lt
 80124c8:	238b      	movlt	r3, #139	@ 0x8b
 80124ca:	602b      	strlt	r3, [r5, #0]
 80124cc:	2c00      	cmp	r4, #0
 80124ce:	d0e3      	beq.n	8012498 <_vsniprintf_r+0x16>
 80124d0:	9b00      	ldr	r3, [sp, #0]
 80124d2:	2200      	movs	r2, #0
 80124d4:	701a      	strb	r2, [r3, #0]
 80124d6:	e7df      	b.n	8012498 <_vsniprintf_r+0x16>

080124d8 <vsniprintf>:
 80124d8:	b507      	push	{r0, r1, r2, lr}
 80124da:	9300      	str	r3, [sp, #0]
 80124dc:	4613      	mov	r3, r2
 80124de:	460a      	mov	r2, r1
 80124e0:	4601      	mov	r1, r0
 80124e2:	4803      	ldr	r0, [pc, #12]	@ (80124f0 <vsniprintf+0x18>)
 80124e4:	6800      	ldr	r0, [r0, #0]
 80124e6:	f7ff ffcc 	bl	8012482 <_vsniprintf_r>
 80124ea:	b003      	add	sp, #12
 80124ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80124f0:	20000130 	.word	0x20000130

080124f4 <memset>:
 80124f4:	4402      	add	r2, r0
 80124f6:	4603      	mov	r3, r0
 80124f8:	4293      	cmp	r3, r2
 80124fa:	d100      	bne.n	80124fe <memset+0xa>
 80124fc:	4770      	bx	lr
 80124fe:	f803 1b01 	strb.w	r1, [r3], #1
 8012502:	e7f9      	b.n	80124f8 <memset+0x4>

08012504 <_close_r>:
 8012504:	b538      	push	{r3, r4, r5, lr}
 8012506:	2300      	movs	r3, #0
 8012508:	4d05      	ldr	r5, [pc, #20]	@ (8012520 <_close_r+0x1c>)
 801250a:	4604      	mov	r4, r0
 801250c:	4608      	mov	r0, r1
 801250e:	602b      	str	r3, [r5, #0]
 8012510:	f7f0 f8b5 	bl	800267e <_close>
 8012514:	1c43      	adds	r3, r0, #1
 8012516:	d102      	bne.n	801251e <_close_r+0x1a>
 8012518:	682b      	ldr	r3, [r5, #0]
 801251a:	b103      	cbz	r3, 801251e <_close_r+0x1a>
 801251c:	6023      	str	r3, [r4, #0]
 801251e:	bd38      	pop	{r3, r4, r5, pc}
 8012520:	20011350 	.word	0x20011350

08012524 <_lseek_r>:
 8012524:	b538      	push	{r3, r4, r5, lr}
 8012526:	4604      	mov	r4, r0
 8012528:	4d06      	ldr	r5, [pc, #24]	@ (8012544 <_lseek_r+0x20>)
 801252a:	4608      	mov	r0, r1
 801252c:	4611      	mov	r1, r2
 801252e:	2200      	movs	r2, #0
 8012530:	602a      	str	r2, [r5, #0]
 8012532:	461a      	mov	r2, r3
 8012534:	f7f0 f8ca 	bl	80026cc <_lseek>
 8012538:	1c43      	adds	r3, r0, #1
 801253a:	d102      	bne.n	8012542 <_lseek_r+0x1e>
 801253c:	682b      	ldr	r3, [r5, #0]
 801253e:	b103      	cbz	r3, 8012542 <_lseek_r+0x1e>
 8012540:	6023      	str	r3, [r4, #0]
 8012542:	bd38      	pop	{r3, r4, r5, pc}
 8012544:	20011350 	.word	0x20011350

08012548 <_read_r>:
 8012548:	b538      	push	{r3, r4, r5, lr}
 801254a:	4604      	mov	r4, r0
 801254c:	4d06      	ldr	r5, [pc, #24]	@ (8012568 <_read_r+0x20>)
 801254e:	4608      	mov	r0, r1
 8012550:	4611      	mov	r1, r2
 8012552:	2200      	movs	r2, #0
 8012554:	602a      	str	r2, [r5, #0]
 8012556:	461a      	mov	r2, r3
 8012558:	f7f0 f858 	bl	800260c <_read>
 801255c:	1c43      	adds	r3, r0, #1
 801255e:	d102      	bne.n	8012566 <_read_r+0x1e>
 8012560:	682b      	ldr	r3, [r5, #0]
 8012562:	b103      	cbz	r3, 8012566 <_read_r+0x1e>
 8012564:	6023      	str	r3, [r4, #0]
 8012566:	bd38      	pop	{r3, r4, r5, pc}
 8012568:	20011350 	.word	0x20011350

0801256c <_write_r>:
 801256c:	b538      	push	{r3, r4, r5, lr}
 801256e:	4604      	mov	r4, r0
 8012570:	4d06      	ldr	r5, [pc, #24]	@ (801258c <_write_r+0x20>)
 8012572:	4608      	mov	r0, r1
 8012574:	4611      	mov	r1, r2
 8012576:	2200      	movs	r2, #0
 8012578:	602a      	str	r2, [r5, #0]
 801257a:	461a      	mov	r2, r3
 801257c:	f7f0 f863 	bl	8002646 <_write>
 8012580:	1c43      	adds	r3, r0, #1
 8012582:	d102      	bne.n	801258a <_write_r+0x1e>
 8012584:	682b      	ldr	r3, [r5, #0]
 8012586:	b103      	cbz	r3, 801258a <_write_r+0x1e>
 8012588:	6023      	str	r3, [r4, #0]
 801258a:	bd38      	pop	{r3, r4, r5, pc}
 801258c:	20011350 	.word	0x20011350

08012590 <__errno>:
 8012590:	4b01      	ldr	r3, [pc, #4]	@ (8012598 <__errno+0x8>)
 8012592:	6818      	ldr	r0, [r3, #0]
 8012594:	4770      	bx	lr
 8012596:	bf00      	nop
 8012598:	20000130 	.word	0x20000130

0801259c <__libc_init_array>:
 801259c:	b570      	push	{r4, r5, r6, lr}
 801259e:	4d0d      	ldr	r5, [pc, #52]	@ (80125d4 <__libc_init_array+0x38>)
 80125a0:	2600      	movs	r6, #0
 80125a2:	4c0d      	ldr	r4, [pc, #52]	@ (80125d8 <__libc_init_array+0x3c>)
 80125a4:	1b64      	subs	r4, r4, r5
 80125a6:	10a4      	asrs	r4, r4, #2
 80125a8:	42a6      	cmp	r6, r4
 80125aa:	d109      	bne.n	80125c0 <__libc_init_array+0x24>
 80125ac:	4d0b      	ldr	r5, [pc, #44]	@ (80125dc <__libc_init_array+0x40>)
 80125ae:	2600      	movs	r6, #0
 80125b0:	4c0b      	ldr	r4, [pc, #44]	@ (80125e0 <__libc_init_array+0x44>)
 80125b2:	f000 ff7d 	bl	80134b0 <_init>
 80125b6:	1b64      	subs	r4, r4, r5
 80125b8:	10a4      	asrs	r4, r4, #2
 80125ba:	42a6      	cmp	r6, r4
 80125bc:	d105      	bne.n	80125ca <__libc_init_array+0x2e>
 80125be:	bd70      	pop	{r4, r5, r6, pc}
 80125c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80125c4:	3601      	adds	r6, #1
 80125c6:	4798      	blx	r3
 80125c8:	e7ee      	b.n	80125a8 <__libc_init_array+0xc>
 80125ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80125ce:	3601      	adds	r6, #1
 80125d0:	4798      	blx	r3
 80125d2:	e7f2      	b.n	80125ba <__libc_init_array+0x1e>
 80125d4:	080141c8 	.word	0x080141c8
 80125d8:	080141c8 	.word	0x080141c8
 80125dc:	080141c8 	.word	0x080141c8
 80125e0:	080141cc 	.word	0x080141cc

080125e4 <__retarget_lock_init_recursive>:
 80125e4:	4770      	bx	lr

080125e6 <__retarget_lock_acquire_recursive>:
 80125e6:	4770      	bx	lr

080125e8 <__retarget_lock_release_recursive>:
 80125e8:	4770      	bx	lr

080125ea <memcpy>:
 80125ea:	440a      	add	r2, r1
 80125ec:	1e43      	subs	r3, r0, #1
 80125ee:	4291      	cmp	r1, r2
 80125f0:	d100      	bne.n	80125f4 <memcpy+0xa>
 80125f2:	4770      	bx	lr
 80125f4:	b510      	push	{r4, lr}
 80125f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80125fa:	4291      	cmp	r1, r2
 80125fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012600:	d1f9      	bne.n	80125f6 <memcpy+0xc>
 8012602:	bd10      	pop	{r4, pc}

08012604 <_free_r>:
 8012604:	b538      	push	{r3, r4, r5, lr}
 8012606:	4605      	mov	r5, r0
 8012608:	2900      	cmp	r1, #0
 801260a:	d041      	beq.n	8012690 <_free_r+0x8c>
 801260c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012610:	1f0c      	subs	r4, r1, #4
 8012612:	2b00      	cmp	r3, #0
 8012614:	bfb8      	it	lt
 8012616:	18e4      	addlt	r4, r4, r3
 8012618:	f000 f8e0 	bl	80127dc <__malloc_lock>
 801261c:	4a1d      	ldr	r2, [pc, #116]	@ (8012694 <_free_r+0x90>)
 801261e:	6813      	ldr	r3, [r2, #0]
 8012620:	b933      	cbnz	r3, 8012630 <_free_r+0x2c>
 8012622:	6063      	str	r3, [r4, #4]
 8012624:	6014      	str	r4, [r2, #0]
 8012626:	4628      	mov	r0, r5
 8012628:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801262c:	f000 b8dc 	b.w	80127e8 <__malloc_unlock>
 8012630:	42a3      	cmp	r3, r4
 8012632:	d908      	bls.n	8012646 <_free_r+0x42>
 8012634:	6820      	ldr	r0, [r4, #0]
 8012636:	1821      	adds	r1, r4, r0
 8012638:	428b      	cmp	r3, r1
 801263a:	bf01      	itttt	eq
 801263c:	6819      	ldreq	r1, [r3, #0]
 801263e:	685b      	ldreq	r3, [r3, #4]
 8012640:	1809      	addeq	r1, r1, r0
 8012642:	6021      	streq	r1, [r4, #0]
 8012644:	e7ed      	b.n	8012622 <_free_r+0x1e>
 8012646:	461a      	mov	r2, r3
 8012648:	685b      	ldr	r3, [r3, #4]
 801264a:	b10b      	cbz	r3, 8012650 <_free_r+0x4c>
 801264c:	42a3      	cmp	r3, r4
 801264e:	d9fa      	bls.n	8012646 <_free_r+0x42>
 8012650:	6811      	ldr	r1, [r2, #0]
 8012652:	1850      	adds	r0, r2, r1
 8012654:	42a0      	cmp	r0, r4
 8012656:	d10b      	bne.n	8012670 <_free_r+0x6c>
 8012658:	6820      	ldr	r0, [r4, #0]
 801265a:	4401      	add	r1, r0
 801265c:	1850      	adds	r0, r2, r1
 801265e:	6011      	str	r1, [r2, #0]
 8012660:	4283      	cmp	r3, r0
 8012662:	d1e0      	bne.n	8012626 <_free_r+0x22>
 8012664:	6818      	ldr	r0, [r3, #0]
 8012666:	685b      	ldr	r3, [r3, #4]
 8012668:	4408      	add	r0, r1
 801266a:	6053      	str	r3, [r2, #4]
 801266c:	6010      	str	r0, [r2, #0]
 801266e:	e7da      	b.n	8012626 <_free_r+0x22>
 8012670:	d902      	bls.n	8012678 <_free_r+0x74>
 8012672:	230c      	movs	r3, #12
 8012674:	602b      	str	r3, [r5, #0]
 8012676:	e7d6      	b.n	8012626 <_free_r+0x22>
 8012678:	6820      	ldr	r0, [r4, #0]
 801267a:	1821      	adds	r1, r4, r0
 801267c:	428b      	cmp	r3, r1
 801267e:	bf02      	ittt	eq
 8012680:	6819      	ldreq	r1, [r3, #0]
 8012682:	685b      	ldreq	r3, [r3, #4]
 8012684:	1809      	addeq	r1, r1, r0
 8012686:	6063      	str	r3, [r4, #4]
 8012688:	bf08      	it	eq
 801268a:	6021      	streq	r1, [r4, #0]
 801268c:	6054      	str	r4, [r2, #4]
 801268e:	e7ca      	b.n	8012626 <_free_r+0x22>
 8012690:	bd38      	pop	{r3, r4, r5, pc}
 8012692:	bf00      	nop
 8012694:	2001135c 	.word	0x2001135c

08012698 <sbrk_aligned>:
 8012698:	b570      	push	{r4, r5, r6, lr}
 801269a:	4e0f      	ldr	r6, [pc, #60]	@ (80126d8 <sbrk_aligned+0x40>)
 801269c:	460c      	mov	r4, r1
 801269e:	4605      	mov	r5, r0
 80126a0:	6831      	ldr	r1, [r6, #0]
 80126a2:	b911      	cbnz	r1, 80126aa <sbrk_aligned+0x12>
 80126a4:	f000 fe2c 	bl	8013300 <_sbrk_r>
 80126a8:	6030      	str	r0, [r6, #0]
 80126aa:	4621      	mov	r1, r4
 80126ac:	4628      	mov	r0, r5
 80126ae:	f000 fe27 	bl	8013300 <_sbrk_r>
 80126b2:	1c43      	adds	r3, r0, #1
 80126b4:	d103      	bne.n	80126be <sbrk_aligned+0x26>
 80126b6:	f04f 34ff 	mov.w	r4, #4294967295
 80126ba:	4620      	mov	r0, r4
 80126bc:	bd70      	pop	{r4, r5, r6, pc}
 80126be:	1cc4      	adds	r4, r0, #3
 80126c0:	f024 0403 	bic.w	r4, r4, #3
 80126c4:	42a0      	cmp	r0, r4
 80126c6:	d0f8      	beq.n	80126ba <sbrk_aligned+0x22>
 80126c8:	1a21      	subs	r1, r4, r0
 80126ca:	4628      	mov	r0, r5
 80126cc:	f000 fe18 	bl	8013300 <_sbrk_r>
 80126d0:	3001      	adds	r0, #1
 80126d2:	d1f2      	bne.n	80126ba <sbrk_aligned+0x22>
 80126d4:	e7ef      	b.n	80126b6 <sbrk_aligned+0x1e>
 80126d6:	bf00      	nop
 80126d8:	20011358 	.word	0x20011358

080126dc <_malloc_r>:
 80126dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80126e0:	1ccd      	adds	r5, r1, #3
 80126e2:	4606      	mov	r6, r0
 80126e4:	f025 0503 	bic.w	r5, r5, #3
 80126e8:	3508      	adds	r5, #8
 80126ea:	2d0c      	cmp	r5, #12
 80126ec:	bf38      	it	cc
 80126ee:	250c      	movcc	r5, #12
 80126f0:	2d00      	cmp	r5, #0
 80126f2:	db01      	blt.n	80126f8 <_malloc_r+0x1c>
 80126f4:	42a9      	cmp	r1, r5
 80126f6:	d904      	bls.n	8012702 <_malloc_r+0x26>
 80126f8:	230c      	movs	r3, #12
 80126fa:	6033      	str	r3, [r6, #0]
 80126fc:	2000      	movs	r0, #0
 80126fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012702:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80127d8 <_malloc_r+0xfc>
 8012706:	f000 f869 	bl	80127dc <__malloc_lock>
 801270a:	f8d8 3000 	ldr.w	r3, [r8]
 801270e:	461c      	mov	r4, r3
 8012710:	bb44      	cbnz	r4, 8012764 <_malloc_r+0x88>
 8012712:	4629      	mov	r1, r5
 8012714:	4630      	mov	r0, r6
 8012716:	f7ff ffbf 	bl	8012698 <sbrk_aligned>
 801271a:	1c43      	adds	r3, r0, #1
 801271c:	4604      	mov	r4, r0
 801271e:	d158      	bne.n	80127d2 <_malloc_r+0xf6>
 8012720:	f8d8 4000 	ldr.w	r4, [r8]
 8012724:	4627      	mov	r7, r4
 8012726:	2f00      	cmp	r7, #0
 8012728:	d143      	bne.n	80127b2 <_malloc_r+0xd6>
 801272a:	2c00      	cmp	r4, #0
 801272c:	d04b      	beq.n	80127c6 <_malloc_r+0xea>
 801272e:	6823      	ldr	r3, [r4, #0]
 8012730:	4639      	mov	r1, r7
 8012732:	4630      	mov	r0, r6
 8012734:	eb04 0903 	add.w	r9, r4, r3
 8012738:	f000 fde2 	bl	8013300 <_sbrk_r>
 801273c:	4581      	cmp	r9, r0
 801273e:	d142      	bne.n	80127c6 <_malloc_r+0xea>
 8012740:	6821      	ldr	r1, [r4, #0]
 8012742:	4630      	mov	r0, r6
 8012744:	1a6d      	subs	r5, r5, r1
 8012746:	4629      	mov	r1, r5
 8012748:	f7ff ffa6 	bl	8012698 <sbrk_aligned>
 801274c:	3001      	adds	r0, #1
 801274e:	d03a      	beq.n	80127c6 <_malloc_r+0xea>
 8012750:	6823      	ldr	r3, [r4, #0]
 8012752:	442b      	add	r3, r5
 8012754:	6023      	str	r3, [r4, #0]
 8012756:	f8d8 3000 	ldr.w	r3, [r8]
 801275a:	685a      	ldr	r2, [r3, #4]
 801275c:	bb62      	cbnz	r2, 80127b8 <_malloc_r+0xdc>
 801275e:	f8c8 7000 	str.w	r7, [r8]
 8012762:	e00f      	b.n	8012784 <_malloc_r+0xa8>
 8012764:	6822      	ldr	r2, [r4, #0]
 8012766:	1b52      	subs	r2, r2, r5
 8012768:	d420      	bmi.n	80127ac <_malloc_r+0xd0>
 801276a:	2a0b      	cmp	r2, #11
 801276c:	d917      	bls.n	801279e <_malloc_r+0xc2>
 801276e:	1961      	adds	r1, r4, r5
 8012770:	42a3      	cmp	r3, r4
 8012772:	6025      	str	r5, [r4, #0]
 8012774:	bf18      	it	ne
 8012776:	6059      	strne	r1, [r3, #4]
 8012778:	6863      	ldr	r3, [r4, #4]
 801277a:	bf08      	it	eq
 801277c:	f8c8 1000 	streq.w	r1, [r8]
 8012780:	5162      	str	r2, [r4, r5]
 8012782:	604b      	str	r3, [r1, #4]
 8012784:	4630      	mov	r0, r6
 8012786:	f000 f82f 	bl	80127e8 <__malloc_unlock>
 801278a:	f104 000b 	add.w	r0, r4, #11
 801278e:	1d23      	adds	r3, r4, #4
 8012790:	f020 0007 	bic.w	r0, r0, #7
 8012794:	1ac2      	subs	r2, r0, r3
 8012796:	bf1c      	itt	ne
 8012798:	1a1b      	subne	r3, r3, r0
 801279a:	50a3      	strne	r3, [r4, r2]
 801279c:	e7af      	b.n	80126fe <_malloc_r+0x22>
 801279e:	6862      	ldr	r2, [r4, #4]
 80127a0:	42a3      	cmp	r3, r4
 80127a2:	bf0c      	ite	eq
 80127a4:	f8c8 2000 	streq.w	r2, [r8]
 80127a8:	605a      	strne	r2, [r3, #4]
 80127aa:	e7eb      	b.n	8012784 <_malloc_r+0xa8>
 80127ac:	4623      	mov	r3, r4
 80127ae:	6864      	ldr	r4, [r4, #4]
 80127b0:	e7ae      	b.n	8012710 <_malloc_r+0x34>
 80127b2:	463c      	mov	r4, r7
 80127b4:	687f      	ldr	r7, [r7, #4]
 80127b6:	e7b6      	b.n	8012726 <_malloc_r+0x4a>
 80127b8:	461a      	mov	r2, r3
 80127ba:	685b      	ldr	r3, [r3, #4]
 80127bc:	42a3      	cmp	r3, r4
 80127be:	d1fb      	bne.n	80127b8 <_malloc_r+0xdc>
 80127c0:	2300      	movs	r3, #0
 80127c2:	6053      	str	r3, [r2, #4]
 80127c4:	e7de      	b.n	8012784 <_malloc_r+0xa8>
 80127c6:	230c      	movs	r3, #12
 80127c8:	4630      	mov	r0, r6
 80127ca:	6033      	str	r3, [r6, #0]
 80127cc:	f000 f80c 	bl	80127e8 <__malloc_unlock>
 80127d0:	e794      	b.n	80126fc <_malloc_r+0x20>
 80127d2:	6005      	str	r5, [r0, #0]
 80127d4:	e7d6      	b.n	8012784 <_malloc_r+0xa8>
 80127d6:	bf00      	nop
 80127d8:	2001135c 	.word	0x2001135c

080127dc <__malloc_lock>:
 80127dc:	4801      	ldr	r0, [pc, #4]	@ (80127e4 <__malloc_lock+0x8>)
 80127de:	f7ff bf02 	b.w	80125e6 <__retarget_lock_acquire_recursive>
 80127e2:	bf00      	nop
 80127e4:	20011354 	.word	0x20011354

080127e8 <__malloc_unlock>:
 80127e8:	4801      	ldr	r0, [pc, #4]	@ (80127f0 <__malloc_unlock+0x8>)
 80127ea:	f7ff befd 	b.w	80125e8 <__retarget_lock_release_recursive>
 80127ee:	bf00      	nop
 80127f0:	20011354 	.word	0x20011354

080127f4 <__ssputs_r>:
 80127f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80127f8:	461f      	mov	r7, r3
 80127fa:	688e      	ldr	r6, [r1, #8]
 80127fc:	4682      	mov	sl, r0
 80127fe:	460c      	mov	r4, r1
 8012800:	42be      	cmp	r6, r7
 8012802:	4690      	mov	r8, r2
 8012804:	680b      	ldr	r3, [r1, #0]
 8012806:	d82d      	bhi.n	8012864 <__ssputs_r+0x70>
 8012808:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801280c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012810:	d026      	beq.n	8012860 <__ssputs_r+0x6c>
 8012812:	6965      	ldr	r5, [r4, #20]
 8012814:	6909      	ldr	r1, [r1, #16]
 8012816:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801281a:	eba3 0901 	sub.w	r9, r3, r1
 801281e:	1c7b      	adds	r3, r7, #1
 8012820:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012824:	444b      	add	r3, r9
 8012826:	106d      	asrs	r5, r5, #1
 8012828:	429d      	cmp	r5, r3
 801282a:	bf38      	it	cc
 801282c:	461d      	movcc	r5, r3
 801282e:	0553      	lsls	r3, r2, #21
 8012830:	d527      	bpl.n	8012882 <__ssputs_r+0x8e>
 8012832:	4629      	mov	r1, r5
 8012834:	f7ff ff52 	bl	80126dc <_malloc_r>
 8012838:	4606      	mov	r6, r0
 801283a:	b360      	cbz	r0, 8012896 <__ssputs_r+0xa2>
 801283c:	464a      	mov	r2, r9
 801283e:	6921      	ldr	r1, [r4, #16]
 8012840:	f7ff fed3 	bl	80125ea <memcpy>
 8012844:	89a3      	ldrh	r3, [r4, #12]
 8012846:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801284a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801284e:	81a3      	strh	r3, [r4, #12]
 8012850:	6126      	str	r6, [r4, #16]
 8012852:	444e      	add	r6, r9
 8012854:	6165      	str	r5, [r4, #20]
 8012856:	eba5 0509 	sub.w	r5, r5, r9
 801285a:	6026      	str	r6, [r4, #0]
 801285c:	463e      	mov	r6, r7
 801285e:	60a5      	str	r5, [r4, #8]
 8012860:	42be      	cmp	r6, r7
 8012862:	d900      	bls.n	8012866 <__ssputs_r+0x72>
 8012864:	463e      	mov	r6, r7
 8012866:	4632      	mov	r2, r6
 8012868:	4641      	mov	r1, r8
 801286a:	6820      	ldr	r0, [r4, #0]
 801286c:	f000 fd2e 	bl	80132cc <memmove>
 8012870:	68a3      	ldr	r3, [r4, #8]
 8012872:	2000      	movs	r0, #0
 8012874:	1b9b      	subs	r3, r3, r6
 8012876:	60a3      	str	r3, [r4, #8]
 8012878:	6823      	ldr	r3, [r4, #0]
 801287a:	4433      	add	r3, r6
 801287c:	6023      	str	r3, [r4, #0]
 801287e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012882:	462a      	mov	r2, r5
 8012884:	f000 fd5a 	bl	801333c <_realloc_r>
 8012888:	4606      	mov	r6, r0
 801288a:	2800      	cmp	r0, #0
 801288c:	d1e0      	bne.n	8012850 <__ssputs_r+0x5c>
 801288e:	6921      	ldr	r1, [r4, #16]
 8012890:	4650      	mov	r0, sl
 8012892:	f7ff feb7 	bl	8012604 <_free_r>
 8012896:	230c      	movs	r3, #12
 8012898:	f04f 30ff 	mov.w	r0, #4294967295
 801289c:	f8ca 3000 	str.w	r3, [sl]
 80128a0:	89a3      	ldrh	r3, [r4, #12]
 80128a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80128a6:	81a3      	strh	r3, [r4, #12]
 80128a8:	e7e9      	b.n	801287e <__ssputs_r+0x8a>
	...

080128ac <_svfiprintf_r>:
 80128ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128b0:	4698      	mov	r8, r3
 80128b2:	898b      	ldrh	r3, [r1, #12]
 80128b4:	b09d      	sub	sp, #116	@ 0x74
 80128b6:	4607      	mov	r7, r0
 80128b8:	061b      	lsls	r3, r3, #24
 80128ba:	460d      	mov	r5, r1
 80128bc:	4614      	mov	r4, r2
 80128be:	d510      	bpl.n	80128e2 <_svfiprintf_r+0x36>
 80128c0:	690b      	ldr	r3, [r1, #16]
 80128c2:	b973      	cbnz	r3, 80128e2 <_svfiprintf_r+0x36>
 80128c4:	2140      	movs	r1, #64	@ 0x40
 80128c6:	f7ff ff09 	bl	80126dc <_malloc_r>
 80128ca:	6028      	str	r0, [r5, #0]
 80128cc:	6128      	str	r0, [r5, #16]
 80128ce:	b930      	cbnz	r0, 80128de <_svfiprintf_r+0x32>
 80128d0:	230c      	movs	r3, #12
 80128d2:	603b      	str	r3, [r7, #0]
 80128d4:	f04f 30ff 	mov.w	r0, #4294967295
 80128d8:	b01d      	add	sp, #116	@ 0x74
 80128da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128de:	2340      	movs	r3, #64	@ 0x40
 80128e0:	616b      	str	r3, [r5, #20]
 80128e2:	2300      	movs	r3, #0
 80128e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80128e8:	f04f 0901 	mov.w	r9, #1
 80128ec:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8012a90 <_svfiprintf_r+0x1e4>
 80128f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80128f2:	2320      	movs	r3, #32
 80128f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80128f8:	2330      	movs	r3, #48	@ 0x30
 80128fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80128fe:	4623      	mov	r3, r4
 8012900:	469a      	mov	sl, r3
 8012902:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012906:	b10a      	cbz	r2, 801290c <_svfiprintf_r+0x60>
 8012908:	2a25      	cmp	r2, #37	@ 0x25
 801290a:	d1f9      	bne.n	8012900 <_svfiprintf_r+0x54>
 801290c:	ebba 0b04 	subs.w	fp, sl, r4
 8012910:	d00b      	beq.n	801292a <_svfiprintf_r+0x7e>
 8012912:	465b      	mov	r3, fp
 8012914:	4622      	mov	r2, r4
 8012916:	4629      	mov	r1, r5
 8012918:	4638      	mov	r0, r7
 801291a:	f7ff ff6b 	bl	80127f4 <__ssputs_r>
 801291e:	3001      	adds	r0, #1
 8012920:	f000 80a7 	beq.w	8012a72 <_svfiprintf_r+0x1c6>
 8012924:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012926:	445a      	add	r2, fp
 8012928:	9209      	str	r2, [sp, #36]	@ 0x24
 801292a:	f89a 3000 	ldrb.w	r3, [sl]
 801292e:	2b00      	cmp	r3, #0
 8012930:	f000 809f 	beq.w	8012a72 <_svfiprintf_r+0x1c6>
 8012934:	2300      	movs	r3, #0
 8012936:	f04f 32ff 	mov.w	r2, #4294967295
 801293a:	f10a 0a01 	add.w	sl, sl, #1
 801293e:	9304      	str	r3, [sp, #16]
 8012940:	9307      	str	r3, [sp, #28]
 8012942:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012946:	931a      	str	r3, [sp, #104]	@ 0x68
 8012948:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801294c:	4654      	mov	r4, sl
 801294e:	2205      	movs	r2, #5
 8012950:	484f      	ldr	r0, [pc, #316]	@ (8012a90 <_svfiprintf_r+0x1e4>)
 8012952:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012956:	f000 fce3 	bl	8013320 <memchr>
 801295a:	9a04      	ldr	r2, [sp, #16]
 801295c:	b9d8      	cbnz	r0, 8012996 <_svfiprintf_r+0xea>
 801295e:	06d0      	lsls	r0, r2, #27
 8012960:	bf44      	itt	mi
 8012962:	2320      	movmi	r3, #32
 8012964:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012968:	0711      	lsls	r1, r2, #28
 801296a:	bf44      	itt	mi
 801296c:	232b      	movmi	r3, #43	@ 0x2b
 801296e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012972:	f89a 3000 	ldrb.w	r3, [sl]
 8012976:	2b2a      	cmp	r3, #42	@ 0x2a
 8012978:	d015      	beq.n	80129a6 <_svfiprintf_r+0xfa>
 801297a:	9a07      	ldr	r2, [sp, #28]
 801297c:	4654      	mov	r4, sl
 801297e:	2000      	movs	r0, #0
 8012980:	f04f 0c0a 	mov.w	ip, #10
 8012984:	4621      	mov	r1, r4
 8012986:	f811 3b01 	ldrb.w	r3, [r1], #1
 801298a:	3b30      	subs	r3, #48	@ 0x30
 801298c:	2b09      	cmp	r3, #9
 801298e:	d94b      	bls.n	8012a28 <_svfiprintf_r+0x17c>
 8012990:	b1b0      	cbz	r0, 80129c0 <_svfiprintf_r+0x114>
 8012992:	9207      	str	r2, [sp, #28]
 8012994:	e014      	b.n	80129c0 <_svfiprintf_r+0x114>
 8012996:	eba0 0308 	sub.w	r3, r0, r8
 801299a:	46a2      	mov	sl, r4
 801299c:	fa09 f303 	lsl.w	r3, r9, r3
 80129a0:	4313      	orrs	r3, r2
 80129a2:	9304      	str	r3, [sp, #16]
 80129a4:	e7d2      	b.n	801294c <_svfiprintf_r+0xa0>
 80129a6:	9b03      	ldr	r3, [sp, #12]
 80129a8:	1d19      	adds	r1, r3, #4
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	9103      	str	r1, [sp, #12]
 80129b0:	bfbb      	ittet	lt
 80129b2:	425b      	neglt	r3, r3
 80129b4:	f042 0202 	orrlt.w	r2, r2, #2
 80129b8:	9307      	strge	r3, [sp, #28]
 80129ba:	9307      	strlt	r3, [sp, #28]
 80129bc:	bfb8      	it	lt
 80129be:	9204      	strlt	r2, [sp, #16]
 80129c0:	7823      	ldrb	r3, [r4, #0]
 80129c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80129c4:	d10a      	bne.n	80129dc <_svfiprintf_r+0x130>
 80129c6:	7863      	ldrb	r3, [r4, #1]
 80129c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80129ca:	d132      	bne.n	8012a32 <_svfiprintf_r+0x186>
 80129cc:	9b03      	ldr	r3, [sp, #12]
 80129ce:	3402      	adds	r4, #2
 80129d0:	1d1a      	adds	r2, r3, #4
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80129d8:	9203      	str	r2, [sp, #12]
 80129da:	9305      	str	r3, [sp, #20]
 80129dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012aa0 <_svfiprintf_r+0x1f4>
 80129e0:	2203      	movs	r2, #3
 80129e2:	7821      	ldrb	r1, [r4, #0]
 80129e4:	4650      	mov	r0, sl
 80129e6:	f000 fc9b 	bl	8013320 <memchr>
 80129ea:	b138      	cbz	r0, 80129fc <_svfiprintf_r+0x150>
 80129ec:	eba0 000a 	sub.w	r0, r0, sl
 80129f0:	2240      	movs	r2, #64	@ 0x40
 80129f2:	9b04      	ldr	r3, [sp, #16]
 80129f4:	3401      	adds	r4, #1
 80129f6:	4082      	lsls	r2, r0
 80129f8:	4313      	orrs	r3, r2
 80129fa:	9304      	str	r3, [sp, #16]
 80129fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a00:	2206      	movs	r2, #6
 8012a02:	4824      	ldr	r0, [pc, #144]	@ (8012a94 <_svfiprintf_r+0x1e8>)
 8012a04:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012a08:	f000 fc8a 	bl	8013320 <memchr>
 8012a0c:	2800      	cmp	r0, #0
 8012a0e:	d036      	beq.n	8012a7e <_svfiprintf_r+0x1d2>
 8012a10:	4b21      	ldr	r3, [pc, #132]	@ (8012a98 <_svfiprintf_r+0x1ec>)
 8012a12:	bb1b      	cbnz	r3, 8012a5c <_svfiprintf_r+0x1b0>
 8012a14:	9b03      	ldr	r3, [sp, #12]
 8012a16:	3307      	adds	r3, #7
 8012a18:	f023 0307 	bic.w	r3, r3, #7
 8012a1c:	3308      	adds	r3, #8
 8012a1e:	9303      	str	r3, [sp, #12]
 8012a20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a22:	4433      	add	r3, r6
 8012a24:	9309      	str	r3, [sp, #36]	@ 0x24
 8012a26:	e76a      	b.n	80128fe <_svfiprintf_r+0x52>
 8012a28:	fb0c 3202 	mla	r2, ip, r2, r3
 8012a2c:	460c      	mov	r4, r1
 8012a2e:	2001      	movs	r0, #1
 8012a30:	e7a8      	b.n	8012984 <_svfiprintf_r+0xd8>
 8012a32:	2300      	movs	r3, #0
 8012a34:	3401      	adds	r4, #1
 8012a36:	f04f 0c0a 	mov.w	ip, #10
 8012a3a:	4619      	mov	r1, r3
 8012a3c:	9305      	str	r3, [sp, #20]
 8012a3e:	4620      	mov	r0, r4
 8012a40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012a44:	3a30      	subs	r2, #48	@ 0x30
 8012a46:	2a09      	cmp	r2, #9
 8012a48:	d903      	bls.n	8012a52 <_svfiprintf_r+0x1a6>
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d0c6      	beq.n	80129dc <_svfiprintf_r+0x130>
 8012a4e:	9105      	str	r1, [sp, #20]
 8012a50:	e7c4      	b.n	80129dc <_svfiprintf_r+0x130>
 8012a52:	fb0c 2101 	mla	r1, ip, r1, r2
 8012a56:	4604      	mov	r4, r0
 8012a58:	2301      	movs	r3, #1
 8012a5a:	e7f0      	b.n	8012a3e <_svfiprintf_r+0x192>
 8012a5c:	ab03      	add	r3, sp, #12
 8012a5e:	462a      	mov	r2, r5
 8012a60:	a904      	add	r1, sp, #16
 8012a62:	4638      	mov	r0, r7
 8012a64:	9300      	str	r3, [sp, #0]
 8012a66:	4b0d      	ldr	r3, [pc, #52]	@ (8012a9c <_svfiprintf_r+0x1f0>)
 8012a68:	f3af 8000 	nop.w
 8012a6c:	1c42      	adds	r2, r0, #1
 8012a6e:	4606      	mov	r6, r0
 8012a70:	d1d6      	bne.n	8012a20 <_svfiprintf_r+0x174>
 8012a72:	89ab      	ldrh	r3, [r5, #12]
 8012a74:	065b      	lsls	r3, r3, #25
 8012a76:	f53f af2d 	bmi.w	80128d4 <_svfiprintf_r+0x28>
 8012a7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012a7c:	e72c      	b.n	80128d8 <_svfiprintf_r+0x2c>
 8012a7e:	ab03      	add	r3, sp, #12
 8012a80:	462a      	mov	r2, r5
 8012a82:	a904      	add	r1, sp, #16
 8012a84:	4638      	mov	r0, r7
 8012a86:	9300      	str	r3, [sp, #0]
 8012a88:	4b04      	ldr	r3, [pc, #16]	@ (8012a9c <_svfiprintf_r+0x1f0>)
 8012a8a:	f000 f9bf 	bl	8012e0c <_printf_i>
 8012a8e:	e7ed      	b.n	8012a6c <_svfiprintf_r+0x1c0>
 8012a90:	0801418c 	.word	0x0801418c
 8012a94:	08014196 	.word	0x08014196
 8012a98:	00000000 	.word	0x00000000
 8012a9c:	080127f5 	.word	0x080127f5
 8012aa0:	08014192 	.word	0x08014192

08012aa4 <__sfputc_r>:
 8012aa4:	6893      	ldr	r3, [r2, #8]
 8012aa6:	3b01      	subs	r3, #1
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	6093      	str	r3, [r2, #8]
 8012aac:	b410      	push	{r4}
 8012aae:	da08      	bge.n	8012ac2 <__sfputc_r+0x1e>
 8012ab0:	6994      	ldr	r4, [r2, #24]
 8012ab2:	42a3      	cmp	r3, r4
 8012ab4:	db01      	blt.n	8012aba <__sfputc_r+0x16>
 8012ab6:	290a      	cmp	r1, #10
 8012ab8:	d103      	bne.n	8012ac2 <__sfputc_r+0x1e>
 8012aba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012abe:	f000 bb71 	b.w	80131a4 <__swbuf_r>
 8012ac2:	6813      	ldr	r3, [r2, #0]
 8012ac4:	1c58      	adds	r0, r3, #1
 8012ac6:	6010      	str	r0, [r2, #0]
 8012ac8:	4608      	mov	r0, r1
 8012aca:	7019      	strb	r1, [r3, #0]
 8012acc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012ad0:	4770      	bx	lr

08012ad2 <__sfputs_r>:
 8012ad2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ad4:	4606      	mov	r6, r0
 8012ad6:	460f      	mov	r7, r1
 8012ad8:	4614      	mov	r4, r2
 8012ada:	18d5      	adds	r5, r2, r3
 8012adc:	42ac      	cmp	r4, r5
 8012ade:	d101      	bne.n	8012ae4 <__sfputs_r+0x12>
 8012ae0:	2000      	movs	r0, #0
 8012ae2:	e007      	b.n	8012af4 <__sfputs_r+0x22>
 8012ae4:	463a      	mov	r2, r7
 8012ae6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012aea:	4630      	mov	r0, r6
 8012aec:	f7ff ffda 	bl	8012aa4 <__sfputc_r>
 8012af0:	1c43      	adds	r3, r0, #1
 8012af2:	d1f3      	bne.n	8012adc <__sfputs_r+0xa>
 8012af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012af8 <_vfiprintf_r>:
 8012af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012afc:	460d      	mov	r5, r1
 8012afe:	b09d      	sub	sp, #116	@ 0x74
 8012b00:	4614      	mov	r4, r2
 8012b02:	4698      	mov	r8, r3
 8012b04:	4606      	mov	r6, r0
 8012b06:	b118      	cbz	r0, 8012b10 <_vfiprintf_r+0x18>
 8012b08:	6a03      	ldr	r3, [r0, #32]
 8012b0a:	b90b      	cbnz	r3, 8012b10 <_vfiprintf_r+0x18>
 8012b0c:	f7ff fbda 	bl	80122c4 <__sinit>
 8012b10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012b12:	07d9      	lsls	r1, r3, #31
 8012b14:	d405      	bmi.n	8012b22 <_vfiprintf_r+0x2a>
 8012b16:	89ab      	ldrh	r3, [r5, #12]
 8012b18:	059a      	lsls	r2, r3, #22
 8012b1a:	d402      	bmi.n	8012b22 <_vfiprintf_r+0x2a>
 8012b1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012b1e:	f7ff fd62 	bl	80125e6 <__retarget_lock_acquire_recursive>
 8012b22:	89ab      	ldrh	r3, [r5, #12]
 8012b24:	071b      	lsls	r3, r3, #28
 8012b26:	d501      	bpl.n	8012b2c <_vfiprintf_r+0x34>
 8012b28:	692b      	ldr	r3, [r5, #16]
 8012b2a:	b99b      	cbnz	r3, 8012b54 <_vfiprintf_r+0x5c>
 8012b2c:	4629      	mov	r1, r5
 8012b2e:	4630      	mov	r0, r6
 8012b30:	f000 fb76 	bl	8013220 <__swsetup_r>
 8012b34:	b170      	cbz	r0, 8012b54 <_vfiprintf_r+0x5c>
 8012b36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012b38:	07dc      	lsls	r4, r3, #31
 8012b3a:	d504      	bpl.n	8012b46 <_vfiprintf_r+0x4e>
 8012b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8012b40:	b01d      	add	sp, #116	@ 0x74
 8012b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b46:	89ab      	ldrh	r3, [r5, #12]
 8012b48:	0598      	lsls	r0, r3, #22
 8012b4a:	d4f7      	bmi.n	8012b3c <_vfiprintf_r+0x44>
 8012b4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012b4e:	f7ff fd4b 	bl	80125e8 <__retarget_lock_release_recursive>
 8012b52:	e7f3      	b.n	8012b3c <_vfiprintf_r+0x44>
 8012b54:	2300      	movs	r3, #0
 8012b56:	f8cd 800c 	str.w	r8, [sp, #12]
 8012b5a:	f04f 0901 	mov.w	r9, #1
 8012b5e:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8012d14 <_vfiprintf_r+0x21c>
 8012b62:	9309      	str	r3, [sp, #36]	@ 0x24
 8012b64:	2320      	movs	r3, #32
 8012b66:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012b6a:	2330      	movs	r3, #48	@ 0x30
 8012b6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012b70:	4623      	mov	r3, r4
 8012b72:	469a      	mov	sl, r3
 8012b74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012b78:	b10a      	cbz	r2, 8012b7e <_vfiprintf_r+0x86>
 8012b7a:	2a25      	cmp	r2, #37	@ 0x25
 8012b7c:	d1f9      	bne.n	8012b72 <_vfiprintf_r+0x7a>
 8012b7e:	ebba 0b04 	subs.w	fp, sl, r4
 8012b82:	d00b      	beq.n	8012b9c <_vfiprintf_r+0xa4>
 8012b84:	465b      	mov	r3, fp
 8012b86:	4622      	mov	r2, r4
 8012b88:	4629      	mov	r1, r5
 8012b8a:	4630      	mov	r0, r6
 8012b8c:	f7ff ffa1 	bl	8012ad2 <__sfputs_r>
 8012b90:	3001      	adds	r0, #1
 8012b92:	f000 80a7 	beq.w	8012ce4 <_vfiprintf_r+0x1ec>
 8012b96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012b98:	445a      	add	r2, fp
 8012b9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8012b9c:	f89a 3000 	ldrb.w	r3, [sl]
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	f000 809f 	beq.w	8012ce4 <_vfiprintf_r+0x1ec>
 8012ba6:	2300      	movs	r3, #0
 8012ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8012bac:	f10a 0a01 	add.w	sl, sl, #1
 8012bb0:	9304      	str	r3, [sp, #16]
 8012bb2:	9307      	str	r3, [sp, #28]
 8012bb4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012bb8:	931a      	str	r3, [sp, #104]	@ 0x68
 8012bba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012bbe:	4654      	mov	r4, sl
 8012bc0:	2205      	movs	r2, #5
 8012bc2:	4854      	ldr	r0, [pc, #336]	@ (8012d14 <_vfiprintf_r+0x21c>)
 8012bc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012bc8:	f000 fbaa 	bl	8013320 <memchr>
 8012bcc:	9a04      	ldr	r2, [sp, #16]
 8012bce:	b9d8      	cbnz	r0, 8012c08 <_vfiprintf_r+0x110>
 8012bd0:	06d1      	lsls	r1, r2, #27
 8012bd2:	bf44      	itt	mi
 8012bd4:	2320      	movmi	r3, #32
 8012bd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012bda:	0713      	lsls	r3, r2, #28
 8012bdc:	bf44      	itt	mi
 8012bde:	232b      	movmi	r3, #43	@ 0x2b
 8012be0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012be4:	f89a 3000 	ldrb.w	r3, [sl]
 8012be8:	2b2a      	cmp	r3, #42	@ 0x2a
 8012bea:	d015      	beq.n	8012c18 <_vfiprintf_r+0x120>
 8012bec:	9a07      	ldr	r2, [sp, #28]
 8012bee:	4654      	mov	r4, sl
 8012bf0:	2000      	movs	r0, #0
 8012bf2:	f04f 0c0a 	mov.w	ip, #10
 8012bf6:	4621      	mov	r1, r4
 8012bf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012bfc:	3b30      	subs	r3, #48	@ 0x30
 8012bfe:	2b09      	cmp	r3, #9
 8012c00:	d94b      	bls.n	8012c9a <_vfiprintf_r+0x1a2>
 8012c02:	b1b0      	cbz	r0, 8012c32 <_vfiprintf_r+0x13a>
 8012c04:	9207      	str	r2, [sp, #28]
 8012c06:	e014      	b.n	8012c32 <_vfiprintf_r+0x13a>
 8012c08:	eba0 0308 	sub.w	r3, r0, r8
 8012c0c:	46a2      	mov	sl, r4
 8012c0e:	fa09 f303 	lsl.w	r3, r9, r3
 8012c12:	4313      	orrs	r3, r2
 8012c14:	9304      	str	r3, [sp, #16]
 8012c16:	e7d2      	b.n	8012bbe <_vfiprintf_r+0xc6>
 8012c18:	9b03      	ldr	r3, [sp, #12]
 8012c1a:	1d19      	adds	r1, r3, #4
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	9103      	str	r1, [sp, #12]
 8012c22:	bfbb      	ittet	lt
 8012c24:	425b      	neglt	r3, r3
 8012c26:	f042 0202 	orrlt.w	r2, r2, #2
 8012c2a:	9307      	strge	r3, [sp, #28]
 8012c2c:	9307      	strlt	r3, [sp, #28]
 8012c2e:	bfb8      	it	lt
 8012c30:	9204      	strlt	r2, [sp, #16]
 8012c32:	7823      	ldrb	r3, [r4, #0]
 8012c34:	2b2e      	cmp	r3, #46	@ 0x2e
 8012c36:	d10a      	bne.n	8012c4e <_vfiprintf_r+0x156>
 8012c38:	7863      	ldrb	r3, [r4, #1]
 8012c3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8012c3c:	d132      	bne.n	8012ca4 <_vfiprintf_r+0x1ac>
 8012c3e:	9b03      	ldr	r3, [sp, #12]
 8012c40:	3402      	adds	r4, #2
 8012c42:	1d1a      	adds	r2, r3, #4
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012c4a:	9203      	str	r2, [sp, #12]
 8012c4c:	9305      	str	r3, [sp, #20]
 8012c4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012d24 <_vfiprintf_r+0x22c>
 8012c52:	2203      	movs	r2, #3
 8012c54:	7821      	ldrb	r1, [r4, #0]
 8012c56:	4650      	mov	r0, sl
 8012c58:	f000 fb62 	bl	8013320 <memchr>
 8012c5c:	b138      	cbz	r0, 8012c6e <_vfiprintf_r+0x176>
 8012c5e:	eba0 000a 	sub.w	r0, r0, sl
 8012c62:	2240      	movs	r2, #64	@ 0x40
 8012c64:	9b04      	ldr	r3, [sp, #16]
 8012c66:	3401      	adds	r4, #1
 8012c68:	4082      	lsls	r2, r0
 8012c6a:	4313      	orrs	r3, r2
 8012c6c:	9304      	str	r3, [sp, #16]
 8012c6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c72:	2206      	movs	r2, #6
 8012c74:	4828      	ldr	r0, [pc, #160]	@ (8012d18 <_vfiprintf_r+0x220>)
 8012c76:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012c7a:	f000 fb51 	bl	8013320 <memchr>
 8012c7e:	2800      	cmp	r0, #0
 8012c80:	d03f      	beq.n	8012d02 <_vfiprintf_r+0x20a>
 8012c82:	4b26      	ldr	r3, [pc, #152]	@ (8012d1c <_vfiprintf_r+0x224>)
 8012c84:	bb1b      	cbnz	r3, 8012cce <_vfiprintf_r+0x1d6>
 8012c86:	9b03      	ldr	r3, [sp, #12]
 8012c88:	3307      	adds	r3, #7
 8012c8a:	f023 0307 	bic.w	r3, r3, #7
 8012c8e:	3308      	adds	r3, #8
 8012c90:	9303      	str	r3, [sp, #12]
 8012c92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c94:	443b      	add	r3, r7
 8012c96:	9309      	str	r3, [sp, #36]	@ 0x24
 8012c98:	e76a      	b.n	8012b70 <_vfiprintf_r+0x78>
 8012c9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8012c9e:	460c      	mov	r4, r1
 8012ca0:	2001      	movs	r0, #1
 8012ca2:	e7a8      	b.n	8012bf6 <_vfiprintf_r+0xfe>
 8012ca4:	2300      	movs	r3, #0
 8012ca6:	3401      	adds	r4, #1
 8012ca8:	f04f 0c0a 	mov.w	ip, #10
 8012cac:	4619      	mov	r1, r3
 8012cae:	9305      	str	r3, [sp, #20]
 8012cb0:	4620      	mov	r0, r4
 8012cb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012cb6:	3a30      	subs	r2, #48	@ 0x30
 8012cb8:	2a09      	cmp	r2, #9
 8012cba:	d903      	bls.n	8012cc4 <_vfiprintf_r+0x1cc>
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d0c6      	beq.n	8012c4e <_vfiprintf_r+0x156>
 8012cc0:	9105      	str	r1, [sp, #20]
 8012cc2:	e7c4      	b.n	8012c4e <_vfiprintf_r+0x156>
 8012cc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8012cc8:	4604      	mov	r4, r0
 8012cca:	2301      	movs	r3, #1
 8012ccc:	e7f0      	b.n	8012cb0 <_vfiprintf_r+0x1b8>
 8012cce:	ab03      	add	r3, sp, #12
 8012cd0:	462a      	mov	r2, r5
 8012cd2:	a904      	add	r1, sp, #16
 8012cd4:	4630      	mov	r0, r6
 8012cd6:	9300      	str	r3, [sp, #0]
 8012cd8:	4b11      	ldr	r3, [pc, #68]	@ (8012d20 <_vfiprintf_r+0x228>)
 8012cda:	f3af 8000 	nop.w
 8012cde:	4607      	mov	r7, r0
 8012ce0:	1c78      	adds	r0, r7, #1
 8012ce2:	d1d6      	bne.n	8012c92 <_vfiprintf_r+0x19a>
 8012ce4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012ce6:	07d9      	lsls	r1, r3, #31
 8012ce8:	d405      	bmi.n	8012cf6 <_vfiprintf_r+0x1fe>
 8012cea:	89ab      	ldrh	r3, [r5, #12]
 8012cec:	059a      	lsls	r2, r3, #22
 8012cee:	d402      	bmi.n	8012cf6 <_vfiprintf_r+0x1fe>
 8012cf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012cf2:	f7ff fc79 	bl	80125e8 <__retarget_lock_release_recursive>
 8012cf6:	89ab      	ldrh	r3, [r5, #12]
 8012cf8:	065b      	lsls	r3, r3, #25
 8012cfa:	f53f af1f 	bmi.w	8012b3c <_vfiprintf_r+0x44>
 8012cfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012d00:	e71e      	b.n	8012b40 <_vfiprintf_r+0x48>
 8012d02:	ab03      	add	r3, sp, #12
 8012d04:	462a      	mov	r2, r5
 8012d06:	a904      	add	r1, sp, #16
 8012d08:	4630      	mov	r0, r6
 8012d0a:	9300      	str	r3, [sp, #0]
 8012d0c:	4b04      	ldr	r3, [pc, #16]	@ (8012d20 <_vfiprintf_r+0x228>)
 8012d0e:	f000 f87d 	bl	8012e0c <_printf_i>
 8012d12:	e7e4      	b.n	8012cde <_vfiprintf_r+0x1e6>
 8012d14:	0801418c 	.word	0x0801418c
 8012d18:	08014196 	.word	0x08014196
 8012d1c:	00000000 	.word	0x00000000
 8012d20:	08012ad3 	.word	0x08012ad3
 8012d24:	08014192 	.word	0x08014192

08012d28 <_printf_common>:
 8012d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d2c:	4616      	mov	r6, r2
 8012d2e:	4698      	mov	r8, r3
 8012d30:	688a      	ldr	r2, [r1, #8]
 8012d32:	4607      	mov	r7, r0
 8012d34:	690b      	ldr	r3, [r1, #16]
 8012d36:	460c      	mov	r4, r1
 8012d38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012d3c:	4293      	cmp	r3, r2
 8012d3e:	bfb8      	it	lt
 8012d40:	4613      	movlt	r3, r2
 8012d42:	6033      	str	r3, [r6, #0]
 8012d44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012d48:	b10a      	cbz	r2, 8012d4e <_printf_common+0x26>
 8012d4a:	3301      	adds	r3, #1
 8012d4c:	6033      	str	r3, [r6, #0]
 8012d4e:	6823      	ldr	r3, [r4, #0]
 8012d50:	0699      	lsls	r1, r3, #26
 8012d52:	bf42      	ittt	mi
 8012d54:	6833      	ldrmi	r3, [r6, #0]
 8012d56:	3302      	addmi	r3, #2
 8012d58:	6033      	strmi	r3, [r6, #0]
 8012d5a:	6825      	ldr	r5, [r4, #0]
 8012d5c:	f015 0506 	ands.w	r5, r5, #6
 8012d60:	d106      	bne.n	8012d70 <_printf_common+0x48>
 8012d62:	f104 0a19 	add.w	sl, r4, #25
 8012d66:	68e3      	ldr	r3, [r4, #12]
 8012d68:	6832      	ldr	r2, [r6, #0]
 8012d6a:	1a9b      	subs	r3, r3, r2
 8012d6c:	42ab      	cmp	r3, r5
 8012d6e:	dc2b      	bgt.n	8012dc8 <_printf_common+0xa0>
 8012d70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012d74:	6822      	ldr	r2, [r4, #0]
 8012d76:	3b00      	subs	r3, #0
 8012d78:	bf18      	it	ne
 8012d7a:	2301      	movne	r3, #1
 8012d7c:	0692      	lsls	r2, r2, #26
 8012d7e:	d430      	bmi.n	8012de2 <_printf_common+0xba>
 8012d80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012d84:	4641      	mov	r1, r8
 8012d86:	4638      	mov	r0, r7
 8012d88:	47c8      	blx	r9
 8012d8a:	3001      	adds	r0, #1
 8012d8c:	d023      	beq.n	8012dd6 <_printf_common+0xae>
 8012d8e:	6823      	ldr	r3, [r4, #0]
 8012d90:	341a      	adds	r4, #26
 8012d92:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8012d96:	f003 0306 	and.w	r3, r3, #6
 8012d9a:	2b04      	cmp	r3, #4
 8012d9c:	bf0a      	itet	eq
 8012d9e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8012da2:	2500      	movne	r5, #0
 8012da4:	6833      	ldreq	r3, [r6, #0]
 8012da6:	f04f 0600 	mov.w	r6, #0
 8012daa:	bf08      	it	eq
 8012dac:	1aed      	subeq	r5, r5, r3
 8012dae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8012db2:	bf08      	it	eq
 8012db4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012db8:	4293      	cmp	r3, r2
 8012dba:	bfc4      	itt	gt
 8012dbc:	1a9b      	subgt	r3, r3, r2
 8012dbe:	18ed      	addgt	r5, r5, r3
 8012dc0:	42b5      	cmp	r5, r6
 8012dc2:	d11a      	bne.n	8012dfa <_printf_common+0xd2>
 8012dc4:	2000      	movs	r0, #0
 8012dc6:	e008      	b.n	8012dda <_printf_common+0xb2>
 8012dc8:	2301      	movs	r3, #1
 8012dca:	4652      	mov	r2, sl
 8012dcc:	4641      	mov	r1, r8
 8012dce:	4638      	mov	r0, r7
 8012dd0:	47c8      	blx	r9
 8012dd2:	3001      	adds	r0, #1
 8012dd4:	d103      	bne.n	8012dde <_printf_common+0xb6>
 8012dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8012dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012dde:	3501      	adds	r5, #1
 8012de0:	e7c1      	b.n	8012d66 <_printf_common+0x3e>
 8012de2:	18e1      	adds	r1, r4, r3
 8012de4:	1c5a      	adds	r2, r3, #1
 8012de6:	2030      	movs	r0, #48	@ 0x30
 8012de8:	3302      	adds	r3, #2
 8012dea:	4422      	add	r2, r4
 8012dec:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012df0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012df4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012df8:	e7c2      	b.n	8012d80 <_printf_common+0x58>
 8012dfa:	2301      	movs	r3, #1
 8012dfc:	4622      	mov	r2, r4
 8012dfe:	4641      	mov	r1, r8
 8012e00:	4638      	mov	r0, r7
 8012e02:	47c8      	blx	r9
 8012e04:	3001      	adds	r0, #1
 8012e06:	d0e6      	beq.n	8012dd6 <_printf_common+0xae>
 8012e08:	3601      	adds	r6, #1
 8012e0a:	e7d9      	b.n	8012dc0 <_printf_common+0x98>

08012e0c <_printf_i>:
 8012e0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012e10:	7e0f      	ldrb	r7, [r1, #24]
 8012e12:	4691      	mov	r9, r2
 8012e14:	4680      	mov	r8, r0
 8012e16:	460c      	mov	r4, r1
 8012e18:	2f78      	cmp	r7, #120	@ 0x78
 8012e1a:	469a      	mov	sl, r3
 8012e1c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012e1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012e22:	d807      	bhi.n	8012e34 <_printf_i+0x28>
 8012e24:	2f62      	cmp	r7, #98	@ 0x62
 8012e26:	d80a      	bhi.n	8012e3e <_printf_i+0x32>
 8012e28:	2f00      	cmp	r7, #0
 8012e2a:	f000 80d2 	beq.w	8012fd2 <_printf_i+0x1c6>
 8012e2e:	2f58      	cmp	r7, #88	@ 0x58
 8012e30:	f000 80b9 	beq.w	8012fa6 <_printf_i+0x19a>
 8012e34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012e38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012e3c:	e03a      	b.n	8012eb4 <_printf_i+0xa8>
 8012e3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012e42:	2b15      	cmp	r3, #21
 8012e44:	d8f6      	bhi.n	8012e34 <_printf_i+0x28>
 8012e46:	a101      	add	r1, pc, #4	@ (adr r1, 8012e4c <_printf_i+0x40>)
 8012e48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012e4c:	08012ea5 	.word	0x08012ea5
 8012e50:	08012eb9 	.word	0x08012eb9
 8012e54:	08012e35 	.word	0x08012e35
 8012e58:	08012e35 	.word	0x08012e35
 8012e5c:	08012e35 	.word	0x08012e35
 8012e60:	08012e35 	.word	0x08012e35
 8012e64:	08012eb9 	.word	0x08012eb9
 8012e68:	08012e35 	.word	0x08012e35
 8012e6c:	08012e35 	.word	0x08012e35
 8012e70:	08012e35 	.word	0x08012e35
 8012e74:	08012e35 	.word	0x08012e35
 8012e78:	08012fb9 	.word	0x08012fb9
 8012e7c:	08012ee3 	.word	0x08012ee3
 8012e80:	08012f73 	.word	0x08012f73
 8012e84:	08012e35 	.word	0x08012e35
 8012e88:	08012e35 	.word	0x08012e35
 8012e8c:	08012fdb 	.word	0x08012fdb
 8012e90:	08012e35 	.word	0x08012e35
 8012e94:	08012ee3 	.word	0x08012ee3
 8012e98:	08012e35 	.word	0x08012e35
 8012e9c:	08012e35 	.word	0x08012e35
 8012ea0:	08012f7b 	.word	0x08012f7b
 8012ea4:	6833      	ldr	r3, [r6, #0]
 8012ea6:	1d1a      	adds	r2, r3, #4
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	6032      	str	r2, [r6, #0]
 8012eac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012eb0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012eb4:	2301      	movs	r3, #1
 8012eb6:	e09d      	b.n	8012ff4 <_printf_i+0x1e8>
 8012eb8:	6833      	ldr	r3, [r6, #0]
 8012eba:	6820      	ldr	r0, [r4, #0]
 8012ebc:	1d19      	adds	r1, r3, #4
 8012ebe:	6031      	str	r1, [r6, #0]
 8012ec0:	0606      	lsls	r6, r0, #24
 8012ec2:	d501      	bpl.n	8012ec8 <_printf_i+0xbc>
 8012ec4:	681d      	ldr	r5, [r3, #0]
 8012ec6:	e003      	b.n	8012ed0 <_printf_i+0xc4>
 8012ec8:	0645      	lsls	r5, r0, #25
 8012eca:	d5fb      	bpl.n	8012ec4 <_printf_i+0xb8>
 8012ecc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012ed0:	2d00      	cmp	r5, #0
 8012ed2:	da03      	bge.n	8012edc <_printf_i+0xd0>
 8012ed4:	232d      	movs	r3, #45	@ 0x2d
 8012ed6:	426d      	negs	r5, r5
 8012ed8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012edc:	4859      	ldr	r0, [pc, #356]	@ (8013044 <_printf_i+0x238>)
 8012ede:	230a      	movs	r3, #10
 8012ee0:	e011      	b.n	8012f06 <_printf_i+0xfa>
 8012ee2:	6821      	ldr	r1, [r4, #0]
 8012ee4:	6833      	ldr	r3, [r6, #0]
 8012ee6:	0608      	lsls	r0, r1, #24
 8012ee8:	f853 5b04 	ldr.w	r5, [r3], #4
 8012eec:	d402      	bmi.n	8012ef4 <_printf_i+0xe8>
 8012eee:	0649      	lsls	r1, r1, #25
 8012ef0:	bf48      	it	mi
 8012ef2:	b2ad      	uxthmi	r5, r5
 8012ef4:	2f6f      	cmp	r7, #111	@ 0x6f
 8012ef6:	6033      	str	r3, [r6, #0]
 8012ef8:	4852      	ldr	r0, [pc, #328]	@ (8013044 <_printf_i+0x238>)
 8012efa:	bf14      	ite	ne
 8012efc:	230a      	movne	r3, #10
 8012efe:	2308      	moveq	r3, #8
 8012f00:	2100      	movs	r1, #0
 8012f02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012f06:	6866      	ldr	r6, [r4, #4]
 8012f08:	2e00      	cmp	r6, #0
 8012f0a:	60a6      	str	r6, [r4, #8]
 8012f0c:	bfa2      	ittt	ge
 8012f0e:	6821      	ldrge	r1, [r4, #0]
 8012f10:	f021 0104 	bicge.w	r1, r1, #4
 8012f14:	6021      	strge	r1, [r4, #0]
 8012f16:	b90d      	cbnz	r5, 8012f1c <_printf_i+0x110>
 8012f18:	2e00      	cmp	r6, #0
 8012f1a:	d04b      	beq.n	8012fb4 <_printf_i+0x1a8>
 8012f1c:	4616      	mov	r6, r2
 8012f1e:	fbb5 f1f3 	udiv	r1, r5, r3
 8012f22:	fb03 5711 	mls	r7, r3, r1, r5
 8012f26:	5dc7      	ldrb	r7, [r0, r7]
 8012f28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012f2c:	462f      	mov	r7, r5
 8012f2e:	460d      	mov	r5, r1
 8012f30:	42bb      	cmp	r3, r7
 8012f32:	d9f4      	bls.n	8012f1e <_printf_i+0x112>
 8012f34:	2b08      	cmp	r3, #8
 8012f36:	d10b      	bne.n	8012f50 <_printf_i+0x144>
 8012f38:	6823      	ldr	r3, [r4, #0]
 8012f3a:	07df      	lsls	r7, r3, #31
 8012f3c:	d508      	bpl.n	8012f50 <_printf_i+0x144>
 8012f3e:	6923      	ldr	r3, [r4, #16]
 8012f40:	6861      	ldr	r1, [r4, #4]
 8012f42:	4299      	cmp	r1, r3
 8012f44:	bfde      	ittt	le
 8012f46:	2330      	movle	r3, #48	@ 0x30
 8012f48:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012f4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012f50:	1b92      	subs	r2, r2, r6
 8012f52:	6122      	str	r2, [r4, #16]
 8012f54:	464b      	mov	r3, r9
 8012f56:	aa03      	add	r2, sp, #12
 8012f58:	4621      	mov	r1, r4
 8012f5a:	4640      	mov	r0, r8
 8012f5c:	f8cd a000 	str.w	sl, [sp]
 8012f60:	f7ff fee2 	bl	8012d28 <_printf_common>
 8012f64:	3001      	adds	r0, #1
 8012f66:	d14a      	bne.n	8012ffe <_printf_i+0x1f2>
 8012f68:	f04f 30ff 	mov.w	r0, #4294967295
 8012f6c:	b004      	add	sp, #16
 8012f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f72:	6823      	ldr	r3, [r4, #0]
 8012f74:	f043 0320 	orr.w	r3, r3, #32
 8012f78:	6023      	str	r3, [r4, #0]
 8012f7a:	2778      	movs	r7, #120	@ 0x78
 8012f7c:	4832      	ldr	r0, [pc, #200]	@ (8013048 <_printf_i+0x23c>)
 8012f7e:	6823      	ldr	r3, [r4, #0]
 8012f80:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012f84:	061f      	lsls	r7, r3, #24
 8012f86:	6831      	ldr	r1, [r6, #0]
 8012f88:	f851 5b04 	ldr.w	r5, [r1], #4
 8012f8c:	d402      	bmi.n	8012f94 <_printf_i+0x188>
 8012f8e:	065f      	lsls	r7, r3, #25
 8012f90:	bf48      	it	mi
 8012f92:	b2ad      	uxthmi	r5, r5
 8012f94:	6031      	str	r1, [r6, #0]
 8012f96:	07d9      	lsls	r1, r3, #31
 8012f98:	bf44      	itt	mi
 8012f9a:	f043 0320 	orrmi.w	r3, r3, #32
 8012f9e:	6023      	strmi	r3, [r4, #0]
 8012fa0:	b11d      	cbz	r5, 8012faa <_printf_i+0x19e>
 8012fa2:	2310      	movs	r3, #16
 8012fa4:	e7ac      	b.n	8012f00 <_printf_i+0xf4>
 8012fa6:	4827      	ldr	r0, [pc, #156]	@ (8013044 <_printf_i+0x238>)
 8012fa8:	e7e9      	b.n	8012f7e <_printf_i+0x172>
 8012faa:	6823      	ldr	r3, [r4, #0]
 8012fac:	f023 0320 	bic.w	r3, r3, #32
 8012fb0:	6023      	str	r3, [r4, #0]
 8012fb2:	e7f6      	b.n	8012fa2 <_printf_i+0x196>
 8012fb4:	4616      	mov	r6, r2
 8012fb6:	e7bd      	b.n	8012f34 <_printf_i+0x128>
 8012fb8:	6833      	ldr	r3, [r6, #0]
 8012fba:	6825      	ldr	r5, [r4, #0]
 8012fbc:	1d18      	adds	r0, r3, #4
 8012fbe:	6961      	ldr	r1, [r4, #20]
 8012fc0:	6030      	str	r0, [r6, #0]
 8012fc2:	062e      	lsls	r6, r5, #24
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	d501      	bpl.n	8012fcc <_printf_i+0x1c0>
 8012fc8:	6019      	str	r1, [r3, #0]
 8012fca:	e002      	b.n	8012fd2 <_printf_i+0x1c6>
 8012fcc:	0668      	lsls	r0, r5, #25
 8012fce:	d5fb      	bpl.n	8012fc8 <_printf_i+0x1bc>
 8012fd0:	8019      	strh	r1, [r3, #0]
 8012fd2:	2300      	movs	r3, #0
 8012fd4:	4616      	mov	r6, r2
 8012fd6:	6123      	str	r3, [r4, #16]
 8012fd8:	e7bc      	b.n	8012f54 <_printf_i+0x148>
 8012fda:	6833      	ldr	r3, [r6, #0]
 8012fdc:	2100      	movs	r1, #0
 8012fde:	1d1a      	adds	r2, r3, #4
 8012fe0:	6032      	str	r2, [r6, #0]
 8012fe2:	681e      	ldr	r6, [r3, #0]
 8012fe4:	6862      	ldr	r2, [r4, #4]
 8012fe6:	4630      	mov	r0, r6
 8012fe8:	f000 f99a 	bl	8013320 <memchr>
 8012fec:	b108      	cbz	r0, 8012ff2 <_printf_i+0x1e6>
 8012fee:	1b80      	subs	r0, r0, r6
 8012ff0:	6060      	str	r0, [r4, #4]
 8012ff2:	6863      	ldr	r3, [r4, #4]
 8012ff4:	6123      	str	r3, [r4, #16]
 8012ff6:	2300      	movs	r3, #0
 8012ff8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012ffc:	e7aa      	b.n	8012f54 <_printf_i+0x148>
 8012ffe:	6923      	ldr	r3, [r4, #16]
 8013000:	4632      	mov	r2, r6
 8013002:	4649      	mov	r1, r9
 8013004:	4640      	mov	r0, r8
 8013006:	47d0      	blx	sl
 8013008:	3001      	adds	r0, #1
 801300a:	d0ad      	beq.n	8012f68 <_printf_i+0x15c>
 801300c:	6823      	ldr	r3, [r4, #0]
 801300e:	079b      	lsls	r3, r3, #30
 8013010:	d413      	bmi.n	801303a <_printf_i+0x22e>
 8013012:	68e0      	ldr	r0, [r4, #12]
 8013014:	9b03      	ldr	r3, [sp, #12]
 8013016:	4298      	cmp	r0, r3
 8013018:	bfb8      	it	lt
 801301a:	4618      	movlt	r0, r3
 801301c:	e7a6      	b.n	8012f6c <_printf_i+0x160>
 801301e:	2301      	movs	r3, #1
 8013020:	4632      	mov	r2, r6
 8013022:	4649      	mov	r1, r9
 8013024:	4640      	mov	r0, r8
 8013026:	47d0      	blx	sl
 8013028:	3001      	adds	r0, #1
 801302a:	d09d      	beq.n	8012f68 <_printf_i+0x15c>
 801302c:	3501      	adds	r5, #1
 801302e:	68e3      	ldr	r3, [r4, #12]
 8013030:	9903      	ldr	r1, [sp, #12]
 8013032:	1a5b      	subs	r3, r3, r1
 8013034:	42ab      	cmp	r3, r5
 8013036:	dcf2      	bgt.n	801301e <_printf_i+0x212>
 8013038:	e7eb      	b.n	8013012 <_printf_i+0x206>
 801303a:	2500      	movs	r5, #0
 801303c:	f104 0619 	add.w	r6, r4, #25
 8013040:	e7f5      	b.n	801302e <_printf_i+0x222>
 8013042:	bf00      	nop
 8013044:	0801419d 	.word	0x0801419d
 8013048:	080141ae 	.word	0x080141ae

0801304c <__sflush_r>:
 801304c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013054:	0716      	lsls	r6, r2, #28
 8013056:	4605      	mov	r5, r0
 8013058:	460c      	mov	r4, r1
 801305a:	d454      	bmi.n	8013106 <__sflush_r+0xba>
 801305c:	684b      	ldr	r3, [r1, #4]
 801305e:	2b00      	cmp	r3, #0
 8013060:	dc02      	bgt.n	8013068 <__sflush_r+0x1c>
 8013062:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013064:	2b00      	cmp	r3, #0
 8013066:	dd48      	ble.n	80130fa <__sflush_r+0xae>
 8013068:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801306a:	2e00      	cmp	r6, #0
 801306c:	d045      	beq.n	80130fa <__sflush_r+0xae>
 801306e:	2300      	movs	r3, #0
 8013070:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013074:	682f      	ldr	r7, [r5, #0]
 8013076:	6a21      	ldr	r1, [r4, #32]
 8013078:	602b      	str	r3, [r5, #0]
 801307a:	d030      	beq.n	80130de <__sflush_r+0x92>
 801307c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801307e:	89a3      	ldrh	r3, [r4, #12]
 8013080:	0759      	lsls	r1, r3, #29
 8013082:	d505      	bpl.n	8013090 <__sflush_r+0x44>
 8013084:	6863      	ldr	r3, [r4, #4]
 8013086:	1ad2      	subs	r2, r2, r3
 8013088:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801308a:	b10b      	cbz	r3, 8013090 <__sflush_r+0x44>
 801308c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801308e:	1ad2      	subs	r2, r2, r3
 8013090:	2300      	movs	r3, #0
 8013092:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013094:	6a21      	ldr	r1, [r4, #32]
 8013096:	4628      	mov	r0, r5
 8013098:	47b0      	blx	r6
 801309a:	1c43      	adds	r3, r0, #1
 801309c:	89a3      	ldrh	r3, [r4, #12]
 801309e:	d106      	bne.n	80130ae <__sflush_r+0x62>
 80130a0:	6829      	ldr	r1, [r5, #0]
 80130a2:	291d      	cmp	r1, #29
 80130a4:	d82b      	bhi.n	80130fe <__sflush_r+0xb2>
 80130a6:	4a2a      	ldr	r2, [pc, #168]	@ (8013150 <__sflush_r+0x104>)
 80130a8:	410a      	asrs	r2, r1
 80130aa:	07d6      	lsls	r6, r2, #31
 80130ac:	d427      	bmi.n	80130fe <__sflush_r+0xb2>
 80130ae:	2200      	movs	r2, #0
 80130b0:	04d9      	lsls	r1, r3, #19
 80130b2:	6062      	str	r2, [r4, #4]
 80130b4:	6922      	ldr	r2, [r4, #16]
 80130b6:	6022      	str	r2, [r4, #0]
 80130b8:	d504      	bpl.n	80130c4 <__sflush_r+0x78>
 80130ba:	1c42      	adds	r2, r0, #1
 80130bc:	d101      	bne.n	80130c2 <__sflush_r+0x76>
 80130be:	682b      	ldr	r3, [r5, #0]
 80130c0:	b903      	cbnz	r3, 80130c4 <__sflush_r+0x78>
 80130c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80130c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80130c6:	602f      	str	r7, [r5, #0]
 80130c8:	b1b9      	cbz	r1, 80130fa <__sflush_r+0xae>
 80130ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80130ce:	4299      	cmp	r1, r3
 80130d0:	d002      	beq.n	80130d8 <__sflush_r+0x8c>
 80130d2:	4628      	mov	r0, r5
 80130d4:	f7ff fa96 	bl	8012604 <_free_r>
 80130d8:	2300      	movs	r3, #0
 80130da:	6363      	str	r3, [r4, #52]	@ 0x34
 80130dc:	e00d      	b.n	80130fa <__sflush_r+0xae>
 80130de:	2301      	movs	r3, #1
 80130e0:	4628      	mov	r0, r5
 80130e2:	47b0      	blx	r6
 80130e4:	4602      	mov	r2, r0
 80130e6:	1c50      	adds	r0, r2, #1
 80130e8:	d1c9      	bne.n	801307e <__sflush_r+0x32>
 80130ea:	682b      	ldr	r3, [r5, #0]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d0c6      	beq.n	801307e <__sflush_r+0x32>
 80130f0:	2b1d      	cmp	r3, #29
 80130f2:	d001      	beq.n	80130f8 <__sflush_r+0xac>
 80130f4:	2b16      	cmp	r3, #22
 80130f6:	d11d      	bne.n	8013134 <__sflush_r+0xe8>
 80130f8:	602f      	str	r7, [r5, #0]
 80130fa:	2000      	movs	r0, #0
 80130fc:	e021      	b.n	8013142 <__sflush_r+0xf6>
 80130fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013102:	b21b      	sxth	r3, r3
 8013104:	e01a      	b.n	801313c <__sflush_r+0xf0>
 8013106:	690f      	ldr	r7, [r1, #16]
 8013108:	2f00      	cmp	r7, #0
 801310a:	d0f6      	beq.n	80130fa <__sflush_r+0xae>
 801310c:	0793      	lsls	r3, r2, #30
 801310e:	680e      	ldr	r6, [r1, #0]
 8013110:	600f      	str	r7, [r1, #0]
 8013112:	bf0c      	ite	eq
 8013114:	694b      	ldreq	r3, [r1, #20]
 8013116:	2300      	movne	r3, #0
 8013118:	eba6 0807 	sub.w	r8, r6, r7
 801311c:	608b      	str	r3, [r1, #8]
 801311e:	f1b8 0f00 	cmp.w	r8, #0
 8013122:	ddea      	ble.n	80130fa <__sflush_r+0xae>
 8013124:	4643      	mov	r3, r8
 8013126:	463a      	mov	r2, r7
 8013128:	6a21      	ldr	r1, [r4, #32]
 801312a:	4628      	mov	r0, r5
 801312c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801312e:	47b0      	blx	r6
 8013130:	2800      	cmp	r0, #0
 8013132:	dc08      	bgt.n	8013146 <__sflush_r+0xfa>
 8013134:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013138:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801313c:	f04f 30ff 	mov.w	r0, #4294967295
 8013140:	81a3      	strh	r3, [r4, #12]
 8013142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013146:	4407      	add	r7, r0
 8013148:	eba8 0800 	sub.w	r8, r8, r0
 801314c:	e7e7      	b.n	801311e <__sflush_r+0xd2>
 801314e:	bf00      	nop
 8013150:	dfbffffe 	.word	0xdfbffffe

08013154 <_fflush_r>:
 8013154:	b538      	push	{r3, r4, r5, lr}
 8013156:	690b      	ldr	r3, [r1, #16]
 8013158:	4605      	mov	r5, r0
 801315a:	460c      	mov	r4, r1
 801315c:	b913      	cbnz	r3, 8013164 <_fflush_r+0x10>
 801315e:	2500      	movs	r5, #0
 8013160:	4628      	mov	r0, r5
 8013162:	bd38      	pop	{r3, r4, r5, pc}
 8013164:	b118      	cbz	r0, 801316e <_fflush_r+0x1a>
 8013166:	6a03      	ldr	r3, [r0, #32]
 8013168:	b90b      	cbnz	r3, 801316e <_fflush_r+0x1a>
 801316a:	f7ff f8ab 	bl	80122c4 <__sinit>
 801316e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013172:	2b00      	cmp	r3, #0
 8013174:	d0f3      	beq.n	801315e <_fflush_r+0xa>
 8013176:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013178:	07d0      	lsls	r0, r2, #31
 801317a:	d404      	bmi.n	8013186 <_fflush_r+0x32>
 801317c:	0599      	lsls	r1, r3, #22
 801317e:	d402      	bmi.n	8013186 <_fflush_r+0x32>
 8013180:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013182:	f7ff fa30 	bl	80125e6 <__retarget_lock_acquire_recursive>
 8013186:	4628      	mov	r0, r5
 8013188:	4621      	mov	r1, r4
 801318a:	f7ff ff5f 	bl	801304c <__sflush_r>
 801318e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013190:	4605      	mov	r5, r0
 8013192:	07da      	lsls	r2, r3, #31
 8013194:	d4e4      	bmi.n	8013160 <_fflush_r+0xc>
 8013196:	89a3      	ldrh	r3, [r4, #12]
 8013198:	059b      	lsls	r3, r3, #22
 801319a:	d4e1      	bmi.n	8013160 <_fflush_r+0xc>
 801319c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801319e:	f7ff fa23 	bl	80125e8 <__retarget_lock_release_recursive>
 80131a2:	e7dd      	b.n	8013160 <_fflush_r+0xc>

080131a4 <__swbuf_r>:
 80131a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131a6:	460e      	mov	r6, r1
 80131a8:	4614      	mov	r4, r2
 80131aa:	4605      	mov	r5, r0
 80131ac:	b118      	cbz	r0, 80131b6 <__swbuf_r+0x12>
 80131ae:	6a03      	ldr	r3, [r0, #32]
 80131b0:	b90b      	cbnz	r3, 80131b6 <__swbuf_r+0x12>
 80131b2:	f7ff f887 	bl	80122c4 <__sinit>
 80131b6:	69a3      	ldr	r3, [r4, #24]
 80131b8:	60a3      	str	r3, [r4, #8]
 80131ba:	89a3      	ldrh	r3, [r4, #12]
 80131bc:	071a      	lsls	r2, r3, #28
 80131be:	d501      	bpl.n	80131c4 <__swbuf_r+0x20>
 80131c0:	6923      	ldr	r3, [r4, #16]
 80131c2:	b943      	cbnz	r3, 80131d6 <__swbuf_r+0x32>
 80131c4:	4621      	mov	r1, r4
 80131c6:	4628      	mov	r0, r5
 80131c8:	f000 f82a 	bl	8013220 <__swsetup_r>
 80131cc:	b118      	cbz	r0, 80131d6 <__swbuf_r+0x32>
 80131ce:	f04f 37ff 	mov.w	r7, #4294967295
 80131d2:	4638      	mov	r0, r7
 80131d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131d6:	6823      	ldr	r3, [r4, #0]
 80131d8:	b2f6      	uxtb	r6, r6
 80131da:	6922      	ldr	r2, [r4, #16]
 80131dc:	4637      	mov	r7, r6
 80131de:	1a98      	subs	r0, r3, r2
 80131e0:	6963      	ldr	r3, [r4, #20]
 80131e2:	4283      	cmp	r3, r0
 80131e4:	dc05      	bgt.n	80131f2 <__swbuf_r+0x4e>
 80131e6:	4621      	mov	r1, r4
 80131e8:	4628      	mov	r0, r5
 80131ea:	f7ff ffb3 	bl	8013154 <_fflush_r>
 80131ee:	2800      	cmp	r0, #0
 80131f0:	d1ed      	bne.n	80131ce <__swbuf_r+0x2a>
 80131f2:	68a3      	ldr	r3, [r4, #8]
 80131f4:	3b01      	subs	r3, #1
 80131f6:	60a3      	str	r3, [r4, #8]
 80131f8:	6823      	ldr	r3, [r4, #0]
 80131fa:	1c5a      	adds	r2, r3, #1
 80131fc:	6022      	str	r2, [r4, #0]
 80131fe:	701e      	strb	r6, [r3, #0]
 8013200:	1c43      	adds	r3, r0, #1
 8013202:	6962      	ldr	r2, [r4, #20]
 8013204:	429a      	cmp	r2, r3
 8013206:	d004      	beq.n	8013212 <__swbuf_r+0x6e>
 8013208:	89a3      	ldrh	r3, [r4, #12]
 801320a:	07db      	lsls	r3, r3, #31
 801320c:	d5e1      	bpl.n	80131d2 <__swbuf_r+0x2e>
 801320e:	2e0a      	cmp	r6, #10
 8013210:	d1df      	bne.n	80131d2 <__swbuf_r+0x2e>
 8013212:	4621      	mov	r1, r4
 8013214:	4628      	mov	r0, r5
 8013216:	f7ff ff9d 	bl	8013154 <_fflush_r>
 801321a:	2800      	cmp	r0, #0
 801321c:	d0d9      	beq.n	80131d2 <__swbuf_r+0x2e>
 801321e:	e7d6      	b.n	80131ce <__swbuf_r+0x2a>

08013220 <__swsetup_r>:
 8013220:	b538      	push	{r3, r4, r5, lr}
 8013222:	4b29      	ldr	r3, [pc, #164]	@ (80132c8 <__swsetup_r+0xa8>)
 8013224:	4605      	mov	r5, r0
 8013226:	460c      	mov	r4, r1
 8013228:	6818      	ldr	r0, [r3, #0]
 801322a:	b118      	cbz	r0, 8013234 <__swsetup_r+0x14>
 801322c:	6a03      	ldr	r3, [r0, #32]
 801322e:	b90b      	cbnz	r3, 8013234 <__swsetup_r+0x14>
 8013230:	f7ff f848 	bl	80122c4 <__sinit>
 8013234:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013238:	0719      	lsls	r1, r3, #28
 801323a:	d422      	bmi.n	8013282 <__swsetup_r+0x62>
 801323c:	06da      	lsls	r2, r3, #27
 801323e:	d407      	bmi.n	8013250 <__swsetup_r+0x30>
 8013240:	2209      	movs	r2, #9
 8013242:	602a      	str	r2, [r5, #0]
 8013244:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013248:	f04f 30ff 	mov.w	r0, #4294967295
 801324c:	81a3      	strh	r3, [r4, #12]
 801324e:	e033      	b.n	80132b8 <__swsetup_r+0x98>
 8013250:	0758      	lsls	r0, r3, #29
 8013252:	d512      	bpl.n	801327a <__swsetup_r+0x5a>
 8013254:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013256:	b141      	cbz	r1, 801326a <__swsetup_r+0x4a>
 8013258:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801325c:	4299      	cmp	r1, r3
 801325e:	d002      	beq.n	8013266 <__swsetup_r+0x46>
 8013260:	4628      	mov	r0, r5
 8013262:	f7ff f9cf 	bl	8012604 <_free_r>
 8013266:	2300      	movs	r3, #0
 8013268:	6363      	str	r3, [r4, #52]	@ 0x34
 801326a:	89a3      	ldrh	r3, [r4, #12]
 801326c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013270:	81a3      	strh	r3, [r4, #12]
 8013272:	2300      	movs	r3, #0
 8013274:	6063      	str	r3, [r4, #4]
 8013276:	6923      	ldr	r3, [r4, #16]
 8013278:	6023      	str	r3, [r4, #0]
 801327a:	89a3      	ldrh	r3, [r4, #12]
 801327c:	f043 0308 	orr.w	r3, r3, #8
 8013280:	81a3      	strh	r3, [r4, #12]
 8013282:	6923      	ldr	r3, [r4, #16]
 8013284:	b94b      	cbnz	r3, 801329a <__swsetup_r+0x7a>
 8013286:	89a3      	ldrh	r3, [r4, #12]
 8013288:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801328c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013290:	d003      	beq.n	801329a <__swsetup_r+0x7a>
 8013292:	4621      	mov	r1, r4
 8013294:	4628      	mov	r0, r5
 8013296:	f000 f8a4 	bl	80133e2 <__smakebuf_r>
 801329a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801329e:	f013 0201 	ands.w	r2, r3, #1
 80132a2:	d00a      	beq.n	80132ba <__swsetup_r+0x9a>
 80132a4:	2200      	movs	r2, #0
 80132a6:	60a2      	str	r2, [r4, #8]
 80132a8:	6962      	ldr	r2, [r4, #20]
 80132aa:	4252      	negs	r2, r2
 80132ac:	61a2      	str	r2, [r4, #24]
 80132ae:	6922      	ldr	r2, [r4, #16]
 80132b0:	b942      	cbnz	r2, 80132c4 <__swsetup_r+0xa4>
 80132b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80132b6:	d1c5      	bne.n	8013244 <__swsetup_r+0x24>
 80132b8:	bd38      	pop	{r3, r4, r5, pc}
 80132ba:	0799      	lsls	r1, r3, #30
 80132bc:	bf58      	it	pl
 80132be:	6962      	ldrpl	r2, [r4, #20]
 80132c0:	60a2      	str	r2, [r4, #8]
 80132c2:	e7f4      	b.n	80132ae <__swsetup_r+0x8e>
 80132c4:	2000      	movs	r0, #0
 80132c6:	e7f7      	b.n	80132b8 <__swsetup_r+0x98>
 80132c8:	20000130 	.word	0x20000130

080132cc <memmove>:
 80132cc:	4288      	cmp	r0, r1
 80132ce:	b510      	push	{r4, lr}
 80132d0:	eb01 0402 	add.w	r4, r1, r2
 80132d4:	d902      	bls.n	80132dc <memmove+0x10>
 80132d6:	4284      	cmp	r4, r0
 80132d8:	4623      	mov	r3, r4
 80132da:	d807      	bhi.n	80132ec <memmove+0x20>
 80132dc:	1e43      	subs	r3, r0, #1
 80132de:	42a1      	cmp	r1, r4
 80132e0:	d008      	beq.n	80132f4 <memmove+0x28>
 80132e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80132e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80132ea:	e7f8      	b.n	80132de <memmove+0x12>
 80132ec:	4402      	add	r2, r0
 80132ee:	4601      	mov	r1, r0
 80132f0:	428a      	cmp	r2, r1
 80132f2:	d100      	bne.n	80132f6 <memmove+0x2a>
 80132f4:	bd10      	pop	{r4, pc}
 80132f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80132fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80132fe:	e7f7      	b.n	80132f0 <memmove+0x24>

08013300 <_sbrk_r>:
 8013300:	b538      	push	{r3, r4, r5, lr}
 8013302:	2300      	movs	r3, #0
 8013304:	4d05      	ldr	r5, [pc, #20]	@ (801331c <_sbrk_r+0x1c>)
 8013306:	4604      	mov	r4, r0
 8013308:	4608      	mov	r0, r1
 801330a:	602b      	str	r3, [r5, #0]
 801330c:	f7ef f9ec 	bl	80026e8 <_sbrk>
 8013310:	1c43      	adds	r3, r0, #1
 8013312:	d102      	bne.n	801331a <_sbrk_r+0x1a>
 8013314:	682b      	ldr	r3, [r5, #0]
 8013316:	b103      	cbz	r3, 801331a <_sbrk_r+0x1a>
 8013318:	6023      	str	r3, [r4, #0]
 801331a:	bd38      	pop	{r3, r4, r5, pc}
 801331c:	20011350 	.word	0x20011350

08013320 <memchr>:
 8013320:	b2c9      	uxtb	r1, r1
 8013322:	4603      	mov	r3, r0
 8013324:	4402      	add	r2, r0
 8013326:	b510      	push	{r4, lr}
 8013328:	4293      	cmp	r3, r2
 801332a:	4618      	mov	r0, r3
 801332c:	d101      	bne.n	8013332 <memchr+0x12>
 801332e:	2000      	movs	r0, #0
 8013330:	e003      	b.n	801333a <memchr+0x1a>
 8013332:	7804      	ldrb	r4, [r0, #0]
 8013334:	3301      	adds	r3, #1
 8013336:	428c      	cmp	r4, r1
 8013338:	d1f6      	bne.n	8013328 <memchr+0x8>
 801333a:	bd10      	pop	{r4, pc}

0801333c <_realloc_r>:
 801333c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013340:	4680      	mov	r8, r0
 8013342:	4615      	mov	r5, r2
 8013344:	460c      	mov	r4, r1
 8013346:	b921      	cbnz	r1, 8013352 <_realloc_r+0x16>
 8013348:	4611      	mov	r1, r2
 801334a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801334e:	f7ff b9c5 	b.w	80126dc <_malloc_r>
 8013352:	b92a      	cbnz	r2, 8013360 <_realloc_r+0x24>
 8013354:	f7ff f956 	bl	8012604 <_free_r>
 8013358:	2400      	movs	r4, #0
 801335a:	4620      	mov	r0, r4
 801335c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013360:	f000 f89e 	bl	80134a0 <_malloc_usable_size_r>
 8013364:	4285      	cmp	r5, r0
 8013366:	4606      	mov	r6, r0
 8013368:	d802      	bhi.n	8013370 <_realloc_r+0x34>
 801336a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801336e:	d8f4      	bhi.n	801335a <_realloc_r+0x1e>
 8013370:	4629      	mov	r1, r5
 8013372:	4640      	mov	r0, r8
 8013374:	f7ff f9b2 	bl	80126dc <_malloc_r>
 8013378:	4607      	mov	r7, r0
 801337a:	2800      	cmp	r0, #0
 801337c:	d0ec      	beq.n	8013358 <_realloc_r+0x1c>
 801337e:	42b5      	cmp	r5, r6
 8013380:	462a      	mov	r2, r5
 8013382:	4621      	mov	r1, r4
 8013384:	bf28      	it	cs
 8013386:	4632      	movcs	r2, r6
 8013388:	f7ff f92f 	bl	80125ea <memcpy>
 801338c:	4621      	mov	r1, r4
 801338e:	4640      	mov	r0, r8
 8013390:	463c      	mov	r4, r7
 8013392:	f7ff f937 	bl	8012604 <_free_r>
 8013396:	e7e0      	b.n	801335a <_realloc_r+0x1e>

08013398 <__swhatbuf_r>:
 8013398:	b570      	push	{r4, r5, r6, lr}
 801339a:	460c      	mov	r4, r1
 801339c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80133a0:	b096      	sub	sp, #88	@ 0x58
 80133a2:	4615      	mov	r5, r2
 80133a4:	2900      	cmp	r1, #0
 80133a6:	461e      	mov	r6, r3
 80133a8:	da0c      	bge.n	80133c4 <__swhatbuf_r+0x2c>
 80133aa:	89a3      	ldrh	r3, [r4, #12]
 80133ac:	2100      	movs	r1, #0
 80133ae:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80133b2:	bf14      	ite	ne
 80133b4:	2340      	movne	r3, #64	@ 0x40
 80133b6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80133ba:	2000      	movs	r0, #0
 80133bc:	6031      	str	r1, [r6, #0]
 80133be:	602b      	str	r3, [r5, #0]
 80133c0:	b016      	add	sp, #88	@ 0x58
 80133c2:	bd70      	pop	{r4, r5, r6, pc}
 80133c4:	466a      	mov	r2, sp
 80133c6:	f000 f849 	bl	801345c <_fstat_r>
 80133ca:	2800      	cmp	r0, #0
 80133cc:	dbed      	blt.n	80133aa <__swhatbuf_r+0x12>
 80133ce:	9901      	ldr	r1, [sp, #4]
 80133d0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80133d4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80133d8:	4259      	negs	r1, r3
 80133da:	4159      	adcs	r1, r3
 80133dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80133e0:	e7eb      	b.n	80133ba <__swhatbuf_r+0x22>

080133e2 <__smakebuf_r>:
 80133e2:	898b      	ldrh	r3, [r1, #12]
 80133e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80133e6:	079d      	lsls	r5, r3, #30
 80133e8:	4606      	mov	r6, r0
 80133ea:	460c      	mov	r4, r1
 80133ec:	d507      	bpl.n	80133fe <__smakebuf_r+0x1c>
 80133ee:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80133f2:	6023      	str	r3, [r4, #0]
 80133f4:	6123      	str	r3, [r4, #16]
 80133f6:	2301      	movs	r3, #1
 80133f8:	6163      	str	r3, [r4, #20]
 80133fa:	b003      	add	sp, #12
 80133fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80133fe:	ab01      	add	r3, sp, #4
 8013400:	466a      	mov	r2, sp
 8013402:	f7ff ffc9 	bl	8013398 <__swhatbuf_r>
 8013406:	9f00      	ldr	r7, [sp, #0]
 8013408:	4605      	mov	r5, r0
 801340a:	4630      	mov	r0, r6
 801340c:	4639      	mov	r1, r7
 801340e:	f7ff f965 	bl	80126dc <_malloc_r>
 8013412:	b948      	cbnz	r0, 8013428 <__smakebuf_r+0x46>
 8013414:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013418:	059a      	lsls	r2, r3, #22
 801341a:	d4ee      	bmi.n	80133fa <__smakebuf_r+0x18>
 801341c:	f023 0303 	bic.w	r3, r3, #3
 8013420:	f043 0302 	orr.w	r3, r3, #2
 8013424:	81a3      	strh	r3, [r4, #12]
 8013426:	e7e2      	b.n	80133ee <__smakebuf_r+0xc>
 8013428:	89a3      	ldrh	r3, [r4, #12]
 801342a:	6020      	str	r0, [r4, #0]
 801342c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013430:	81a3      	strh	r3, [r4, #12]
 8013432:	9b01      	ldr	r3, [sp, #4]
 8013434:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013438:	b15b      	cbz	r3, 8013452 <__smakebuf_r+0x70>
 801343a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801343e:	4630      	mov	r0, r6
 8013440:	f000 f81e 	bl	8013480 <_isatty_r>
 8013444:	b128      	cbz	r0, 8013452 <__smakebuf_r+0x70>
 8013446:	89a3      	ldrh	r3, [r4, #12]
 8013448:	f023 0303 	bic.w	r3, r3, #3
 801344c:	f043 0301 	orr.w	r3, r3, #1
 8013450:	81a3      	strh	r3, [r4, #12]
 8013452:	89a3      	ldrh	r3, [r4, #12]
 8013454:	431d      	orrs	r5, r3
 8013456:	81a5      	strh	r5, [r4, #12]
 8013458:	e7cf      	b.n	80133fa <__smakebuf_r+0x18>
	...

0801345c <_fstat_r>:
 801345c:	b538      	push	{r3, r4, r5, lr}
 801345e:	2300      	movs	r3, #0
 8013460:	4d06      	ldr	r5, [pc, #24]	@ (801347c <_fstat_r+0x20>)
 8013462:	4604      	mov	r4, r0
 8013464:	4608      	mov	r0, r1
 8013466:	4611      	mov	r1, r2
 8013468:	602b      	str	r3, [r5, #0]
 801346a:	f7ef f914 	bl	8002696 <_fstat>
 801346e:	1c43      	adds	r3, r0, #1
 8013470:	d102      	bne.n	8013478 <_fstat_r+0x1c>
 8013472:	682b      	ldr	r3, [r5, #0]
 8013474:	b103      	cbz	r3, 8013478 <_fstat_r+0x1c>
 8013476:	6023      	str	r3, [r4, #0]
 8013478:	bd38      	pop	{r3, r4, r5, pc}
 801347a:	bf00      	nop
 801347c:	20011350 	.word	0x20011350

08013480 <_isatty_r>:
 8013480:	b538      	push	{r3, r4, r5, lr}
 8013482:	2300      	movs	r3, #0
 8013484:	4d05      	ldr	r5, [pc, #20]	@ (801349c <_isatty_r+0x1c>)
 8013486:	4604      	mov	r4, r0
 8013488:	4608      	mov	r0, r1
 801348a:	602b      	str	r3, [r5, #0]
 801348c:	f7ef f913 	bl	80026b6 <_isatty>
 8013490:	1c43      	adds	r3, r0, #1
 8013492:	d102      	bne.n	801349a <_isatty_r+0x1a>
 8013494:	682b      	ldr	r3, [r5, #0]
 8013496:	b103      	cbz	r3, 801349a <_isatty_r+0x1a>
 8013498:	6023      	str	r3, [r4, #0]
 801349a:	bd38      	pop	{r3, r4, r5, pc}
 801349c:	20011350 	.word	0x20011350

080134a0 <_malloc_usable_size_r>:
 80134a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80134a4:	1f18      	subs	r0, r3, #4
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	bfbc      	itt	lt
 80134aa:	580b      	ldrlt	r3, [r1, r0]
 80134ac:	18c0      	addlt	r0, r0, r3
 80134ae:	4770      	bx	lr

080134b0 <_init>:
 80134b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134b2:	bf00      	nop
 80134b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80134b6:	bc08      	pop	{r3}
 80134b8:	469e      	mov	lr, r3
 80134ba:	4770      	bx	lr

080134bc <_fini>:
 80134bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134be:	bf00      	nop
 80134c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80134c2:	bc08      	pop	{r3}
 80134c4:	469e      	mov	lr, r3
 80134c6:	4770      	bx	lr
