
HardwareSecurityModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000174a0  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f3c  080176ec  080176ec  000186ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019628  08019628  0001b19c  2**0
                  CONTENTS
  4 .ARM          00000008  08019628  08019628  0001a628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019630  08019630  0001b19c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019630  08019630  0001a630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08019634  08019634  0001a634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000019c  20000000  08019638  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000133c4  2000019c  080197d4  0001b19c  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  20013560  080197d4  0001b560  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0001b19c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003047b  00000000  00000000  0001b1d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007a7c  00000000  00000000  0004b64d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000024c8  00000000  00000000  000530d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001bc0  00000000  00000000  00055598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d771  00000000  00000000  00057158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003f1b6  00000000  00000000  000948c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014e553  00000000  00000000  000d3a7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00221fd2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a00c  00000000  00000000  00222018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0022c024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	2000019c 	.word	0x2000019c
 8000268:	00000000 	.word	0x00000000
 800026c:	080176d4 	.word	0x080176d4

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	200001a0 	.word	0x200001a0
 8000288:	080176d4 	.word	0x080176d4

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295
 800029c:	f04f 30ff 	movne.w	r0, #4294967295
 80002a0:	f000 b97e 	b.w	80005a0 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002c2:	460c      	mov	r4, r1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d14d      	bne.n	8000364 <__udivmoddi4+0xa8>
 80002c8:	428a      	cmp	r2, r1
 80002ca:	460f      	mov	r7, r1
 80002cc:	4684      	mov	ip, r0
 80002ce:	4696      	mov	lr, r2
 80002d0:	fab2 f382 	clz	r3, r2
 80002d4:	d960      	bls.n	8000398 <__udivmoddi4+0xdc>
 80002d6:	b14b      	cbz	r3, 80002ec <__udivmoddi4+0x30>
 80002d8:	fa02 fe03 	lsl.w	lr, r2, r3
 80002dc:	f1c3 0220 	rsb	r2, r3, #32
 80002e0:	409f      	lsls	r7, r3
 80002e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002f0:	fa1f f48e 	uxth.w	r4, lr
 80002f4:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002f8:	fbb7 f1f6 	udiv	r1, r7, r6
 80002fc:	fb06 7711 	mls	r7, r6, r1, r7
 8000300:	fb01 f004 	mul.w	r0, r1, r4
 8000304:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000308:	4290      	cmp	r0, r2
 800030a:	d908      	bls.n	800031e <__udivmoddi4+0x62>
 800030c:	eb1e 0202 	adds.w	r2, lr, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x60>
 8000316:	4290      	cmp	r0, r2
 8000318:	f200 812d 	bhi.w	8000576 <__udivmoddi4+0x2ba>
 800031c:	4639      	mov	r1, r7
 800031e:	1a12      	subs	r2, r2, r0
 8000320:	fa1f fc8c 	uxth.w	ip, ip
 8000324:	fbb2 f0f6 	udiv	r0, r2, r6
 8000328:	fb06 2210 	mls	r2, r6, r0, r2
 800032c:	fb00 f404 	mul.w	r4, r0, r4
 8000330:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000334:	4564      	cmp	r4, ip
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x8e>
 8000338:	eb1e 0c0c 	adds.w	ip, lr, ip
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x8c>
 8000342:	4564      	cmp	r4, ip
 8000344:	f200 811a 	bhi.w	800057c <__udivmoddi4+0x2c0>
 8000348:	4610      	mov	r0, r2
 800034a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034e:	ebac 0c04 	sub.w	ip, ip, r4
 8000352:	2100      	movs	r1, #0
 8000354:	b125      	cbz	r5, 8000360 <__udivmoddi4+0xa4>
 8000356:	fa2c f303 	lsr.w	r3, ip, r3
 800035a:	2200      	movs	r2, #0
 800035c:	e9c5 3200 	strd	r3, r2, [r5]
 8000360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d905      	bls.n	8000374 <__udivmoddi4+0xb8>
 8000368:	b10d      	cbz	r5, 800036e <__udivmoddi4+0xb2>
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	2100      	movs	r1, #0
 8000370:	4608      	mov	r0, r1
 8000372:	e7f5      	b.n	8000360 <__udivmoddi4+0xa4>
 8000374:	fab3 f183 	clz	r1, r3
 8000378:	2900      	cmp	r1, #0
 800037a:	d14d      	bne.n	8000418 <__udivmoddi4+0x15c>
 800037c:	42a3      	cmp	r3, r4
 800037e:	f0c0 80f2 	bcc.w	8000566 <__udivmoddi4+0x2aa>
 8000382:	4290      	cmp	r0, r2
 8000384:	f080 80ef 	bcs.w	8000566 <__udivmoddi4+0x2aa>
 8000388:	4606      	mov	r6, r0
 800038a:	4623      	mov	r3, r4
 800038c:	4608      	mov	r0, r1
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e6      	beq.n	8000360 <__udivmoddi4+0xa4>
 8000392:	e9c5 6300 	strd	r6, r3, [r5]
 8000396:	e7e3      	b.n	8000360 <__udivmoddi4+0xa4>
 8000398:	2b00      	cmp	r3, #0
 800039a:	f040 80a2 	bne.w	80004e2 <__udivmoddi4+0x226>
 800039e:	1a8a      	subs	r2, r1, r2
 80003a0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003a4:	fa1f f68e 	uxth.w	r6, lr
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 f4f7 	udiv	r4, r2, r7
 80003ae:	fb07 2014 	mls	r0, r7, r4, r2
 80003b2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb06 f004 	mul.w	r0, r6, r4
 80003be:	4290      	cmp	r0, r2
 80003c0:	d90f      	bls.n	80003e2 <__udivmoddi4+0x126>
 80003c2:	eb1e 0202 	adds.w	r2, lr, r2
 80003c6:	f104 38ff 	add.w	r8, r4, #4294967295
 80003ca:	bf2c      	ite	cs
 80003cc:	f04f 0901 	movcs.w	r9, #1
 80003d0:	f04f 0900 	movcc.w	r9, #0
 80003d4:	4290      	cmp	r0, r2
 80003d6:	d903      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003d8:	f1b9 0f00 	cmp.w	r9, #0
 80003dc:	f000 80c8 	beq.w	8000570 <__udivmoddi4+0x2b4>
 80003e0:	4644      	mov	r4, r8
 80003e2:	1a12      	subs	r2, r2, r0
 80003e4:	fa1f fc8c 	uxth.w	ip, ip
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	fb00 f606 	mul.w	r6, r0, r6
 80003f4:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003f8:	4566      	cmp	r6, ip
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x152>
 80003fc:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x150>
 8000406:	4566      	cmp	r6, ip
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c6>
 800040c:	4610      	mov	r0, r2
 800040e:	ebac 0c06 	sub.w	ip, ip, r6
 8000412:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000416:	e79d      	b.n	8000354 <__udivmoddi4+0x98>
 8000418:	f1c1 0620 	rsb	r6, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	fa20 fc06 	lsr.w	ip, r0, r6
 800042a:	40f4      	lsrs	r4, r6
 800042c:	408a      	lsls	r2, r1
 800042e:	431f      	orrs	r7, r3
 8000430:	ea4e 030c 	orr.w	r3, lr, ip
 8000434:	fa00 fe01 	lsl.w	lr, r0, r1
 8000438:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800043c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000440:	fa1f fc87 	uxth.w	ip, r7
 8000444:	fbb4 f0f8 	udiv	r0, r4, r8
 8000448:	fb08 4410 	mls	r4, r8, r0, r4
 800044c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000450:	fb00 f90c 	mul.w	r9, r0, ip
 8000454:	45a1      	cmp	r9, r4
 8000456:	d90e      	bls.n	8000476 <__udivmoddi4+0x1ba>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f100 3aff 	add.w	sl, r0, #4294967295
 800045e:	bf2c      	ite	cs
 8000460:	f04f 0b01 	movcs.w	fp, #1
 8000464:	f04f 0b00 	movcc.w	fp, #0
 8000468:	45a1      	cmp	r9, r4
 800046a:	d903      	bls.n	8000474 <__udivmoddi4+0x1b8>
 800046c:	f1bb 0f00 	cmp.w	fp, #0
 8000470:	f000 8093 	beq.w	800059a <__udivmoddi4+0x2de>
 8000474:	4650      	mov	r0, sl
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000482:	fb08 4413 	mls	r4, r8, r3, r4
 8000486:	fb03 fc0c 	mul.w	ip, r3, ip
 800048a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048e:	45a4      	cmp	ip, r4
 8000490:	d906      	bls.n	80004a0 <__udivmoddi4+0x1e4>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 38ff 	add.w	r8, r3, #4294967295
 8000498:	d201      	bcs.n	800049e <__udivmoddi4+0x1e2>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d87a      	bhi.n	8000594 <__udivmoddi4+0x2d8>
 800049e:	4643      	mov	r3, r8
 80004a0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a4:	eba4 040c 	sub.w	r4, r4, ip
 80004a8:	fba0 9802 	umull	r9, r8, r0, r2
 80004ac:	4544      	cmp	r4, r8
 80004ae:	46cc      	mov	ip, r9
 80004b0:	4643      	mov	r3, r8
 80004b2:	d302      	bcc.n	80004ba <__udivmoddi4+0x1fe>
 80004b4:	d106      	bne.n	80004c4 <__udivmoddi4+0x208>
 80004b6:	45ce      	cmp	lr, r9
 80004b8:	d204      	bcs.n	80004c4 <__udivmoddi4+0x208>
 80004ba:	3801      	subs	r0, #1
 80004bc:	ebb9 0c02 	subs.w	ip, r9, r2
 80004c0:	eb68 0307 	sbc.w	r3, r8, r7
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x222>
 80004c6:	ebbe 020c 	subs.w	r2, lr, ip
 80004ca:	eb64 0403 	sbc.w	r4, r4, r3
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	40cc      	lsrs	r4, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e73e      	b.n	8000360 <__udivmoddi4+0xa4>
 80004e2:	fa02 fe03 	lsl.w	lr, r2, r3
 80004e6:	f1c3 0120 	rsb	r1, r3, #32
 80004ea:	fa04 f203 	lsl.w	r2, r4, r3
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	40cc      	lsrs	r4, r1
 80004f4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004f8:	fa20 f101 	lsr.w	r1, r0, r1
 80004fc:	fa1f f68e 	uxth.w	r6, lr
 8000500:	fbb4 f0f7 	udiv	r0, r4, r7
 8000504:	430a      	orrs	r2, r1
 8000506:	fb07 4410 	mls	r4, r7, r0, r4
 800050a:	0c11      	lsrs	r1, r2, #16
 800050c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000510:	fb00 f406 	mul.w	r4, r0, r6
 8000514:	428c      	cmp	r4, r1
 8000516:	d90e      	bls.n	8000536 <__udivmoddi4+0x27a>
 8000518:	eb1e 0101 	adds.w	r1, lr, r1
 800051c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000520:	bf2c      	ite	cs
 8000522:	f04f 0901 	movcs.w	r9, #1
 8000526:	f04f 0900 	movcc.w	r9, #0
 800052a:	428c      	cmp	r4, r1
 800052c:	d902      	bls.n	8000534 <__udivmoddi4+0x278>
 800052e:	f1b9 0f00 	cmp.w	r9, #0
 8000532:	d02c      	beq.n	800058e <__udivmoddi4+0x2d2>
 8000534:	4640      	mov	r0, r8
 8000536:	1b09      	subs	r1, r1, r4
 8000538:	b292      	uxth	r2, r2
 800053a:	fbb1 f4f7 	udiv	r4, r1, r7
 800053e:	fb07 1114 	mls	r1, r7, r4, r1
 8000542:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000546:	fb04 f106 	mul.w	r1, r4, r6
 800054a:	4291      	cmp	r1, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x2a2>
 800054e:	eb1e 0202 	adds.w	r2, lr, r2
 8000552:	f104 38ff 	add.w	r8, r4, #4294967295
 8000556:	d201      	bcs.n	800055c <__udivmoddi4+0x2a0>
 8000558:	4291      	cmp	r1, r2
 800055a:	d815      	bhi.n	8000588 <__udivmoddi4+0x2cc>
 800055c:	4644      	mov	r4, r8
 800055e:	1a52      	subs	r2, r2, r1
 8000560:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000564:	e721      	b.n	80003aa <__udivmoddi4+0xee>
 8000566:	1a86      	subs	r6, r0, r2
 8000568:	eb64 0303 	sbc.w	r3, r4, r3
 800056c:	2001      	movs	r0, #1
 800056e:	e70e      	b.n	800038e <__udivmoddi4+0xd2>
 8000570:	3c02      	subs	r4, #2
 8000572:	4472      	add	r2, lr
 8000574:	e735      	b.n	80003e2 <__udivmoddi4+0x126>
 8000576:	3902      	subs	r1, #2
 8000578:	4472      	add	r2, lr
 800057a:	e6d0      	b.n	800031e <__udivmoddi4+0x62>
 800057c:	44f4      	add	ip, lr
 800057e:	3802      	subs	r0, #2
 8000580:	e6e3      	b.n	800034a <__udivmoddi4+0x8e>
 8000582:	44f4      	add	ip, lr
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x152>
 8000588:	3c02      	subs	r4, #2
 800058a:	4472      	add	r2, lr
 800058c:	e7e7      	b.n	800055e <__udivmoddi4+0x2a2>
 800058e:	3802      	subs	r0, #2
 8000590:	4471      	add	r1, lr
 8000592:	e7d0      	b.n	8000536 <__udivmoddi4+0x27a>
 8000594:	3b02      	subs	r3, #2
 8000596:	443c      	add	r4, r7
 8000598:	e782      	b.n	80004a0 <__udivmoddi4+0x1e4>
 800059a:	3802      	subs	r0, #2
 800059c:	443c      	add	r4, r7
 800059e:	e76a      	b.n	8000476 <__udivmoddi4+0x1ba>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <GetCommandName>:

#include <stdio.h>
#include <stdint.h>

static const char* GetCommandName(uint8_t cmd)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
    switch (cmd)
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	3b01      	subs	r3, #1
 80005b2:	2b0e      	cmp	r3, #14
 80005b4:	d832      	bhi.n	800061c <GetCommandName+0x78>
 80005b6:	a201      	add	r2, pc, #4	@ (adr r2, 80005bc <GetCommandName+0x18>)
 80005b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005bc:	080005f9 	.word	0x080005f9
 80005c0:	080005fd 	.word	0x080005fd
 80005c4:	08000601 	.word	0x08000601
 80005c8:	0800061d 	.word	0x0800061d
 80005cc:	08000605 	.word	0x08000605
 80005d0:	08000609 	.word	0x08000609
 80005d4:	0800060d 	.word	0x0800060d
 80005d8:	08000611 	.word	0x08000611
 80005dc:	08000615 	.word	0x08000615
 80005e0:	0800061d 	.word	0x0800061d
 80005e4:	0800061d 	.word	0x0800061d
 80005e8:	0800061d 	.word	0x0800061d
 80005ec:	0800061d 	.word	0x0800061d
 80005f0:	0800061d 	.word	0x0800061d
 80005f4:	08000619 	.word	0x08000619
    {
        case CMD_ENCRYPT:   	return "Encryption Operation";
 80005f8:	4b0c      	ldr	r3, [pc, #48]	@ (800062c <GetCommandName+0x88>)
 80005fa:	e010      	b.n	800061e <GetCommandName+0x7a>
        case CMD_DECRYPT:   	return "Decryption Operation";
 80005fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000630 <GetCommandName+0x8c>)
 80005fe:	e00e      	b.n	800061e <GetCommandName+0x7a>
        case CMD_HASH:      	return "Hashing Operation";
 8000600:	4b0c      	ldr	r3, [pc, #48]	@ (8000634 <GetCommandName+0x90>)
 8000602:	e00c      	b.n	800061e <GetCommandName+0x7a>
        case CMD_RANDOM:   		return "RNG Operation";
 8000604:	4b0c      	ldr	r3, [pc, #48]	@ (8000638 <GetCommandName+0x94>)
 8000606:	e00a      	b.n	800061e <GetCommandName+0x7a>
        case CMD_OTP:   		return "OTP Operation";
 8000608:	4b0c      	ldr	r3, [pc, #48]	@ (800063c <GetCommandName+0x98>)
 800060a:	e008      	b.n	800061e <GetCommandName+0x7a>
        case CMD_KEY_GEN:   	return "Key Generation Operation";
 800060c:	4b0c      	ldr	r3, [pc, #48]	@ (8000640 <GetCommandName+0x9c>)
 800060e:	e006      	b.n	800061e <GetCommandName+0x7a>
        case CMD_KEY_STORE:   	return "Key Store Operation";
 8000610:	4b0c      	ldr	r3, [pc, #48]	@ (8000644 <GetCommandName+0xa0>)
 8000612:	e004      	b.n	800061e <GetCommandName+0x7a>
        case CMD_KEY_DELETE:   	return "Key Delete Operation";
 8000614:	4b0c      	ldr	r3, [pc, #48]	@ (8000648 <GetCommandName+0xa4>)
 8000616:	e002      	b.n	800061e <GetCommandName+0x7a>
        case CMD_PING:   		return "Device Ping Operation";
 8000618:	4b0c      	ldr	r3, [pc, #48]	@ (800064c <GetCommandName+0xa8>)
 800061a:	e000      	b.n	800061e <GetCommandName+0x7a>
        default:            	return "Unknown Command";
 800061c:	4b0c      	ldr	r3, [pc, #48]	@ (8000650 <GetCommandName+0xac>)
    }
}
 800061e:	4618      	mov	r0, r3
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	080176ec 	.word	0x080176ec
 8000630:	08017704 	.word	0x08017704
 8000634:	0801771c 	.word	0x0801771c
 8000638:	08017730 	.word	0x08017730
 800063c:	08017740 	.word	0x08017740
 8000640:	08017750 	.word	0x08017750
 8000644:	0801776c 	.word	0x0801776c
 8000648:	08017780 	.word	0x08017780
 800064c:	08017798 	.word	0x08017798
 8000650:	080177b0 	.word	0x080177b0

08000654 <GetOptionName>:

static const char* GetOptionName(uint8_t option)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
    switch (option)
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	3b01      	subs	r3, #1
 8000662:	2b4e      	cmp	r3, #78	@ 0x4e
 8000664:	f200 80d2 	bhi.w	800080c <GetOptionName+0x1b8>
 8000668:	a201      	add	r2, pc, #4	@ (adr r2, 8000670 <GetOptionName+0x1c>)
 800066a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800066e:	bf00      	nop
 8000670:	080007ad 	.word	0x080007ad
 8000674:	080007b1 	.word	0x080007b1
 8000678:	0800080d 	.word	0x0800080d
 800067c:	0800080d 	.word	0x0800080d
 8000680:	0800080d 	.word	0x0800080d
 8000684:	0800080d 	.word	0x0800080d
 8000688:	0800080d 	.word	0x0800080d
 800068c:	0800080d 	.word	0x0800080d
 8000690:	0800080d 	.word	0x0800080d
 8000694:	0800080d 	.word	0x0800080d
 8000698:	0800080d 	.word	0x0800080d
 800069c:	0800080d 	.word	0x0800080d
 80006a0:	0800080d 	.word	0x0800080d
 80006a4:	0800080d 	.word	0x0800080d
 80006a8:	0800080d 	.word	0x0800080d
 80006ac:	0800080d 	.word	0x0800080d
 80006b0:	080007b5 	.word	0x080007b5
 80006b4:	080007b9 	.word	0x080007b9
 80006b8:	0800080d 	.word	0x0800080d
 80006bc:	0800080d 	.word	0x0800080d
 80006c0:	0800080d 	.word	0x0800080d
 80006c4:	0800080d 	.word	0x0800080d
 80006c8:	0800080d 	.word	0x0800080d
 80006cc:	0800080d 	.word	0x0800080d
 80006d0:	0800080d 	.word	0x0800080d
 80006d4:	0800080d 	.word	0x0800080d
 80006d8:	0800080d 	.word	0x0800080d
 80006dc:	0800080d 	.word	0x0800080d
 80006e0:	0800080d 	.word	0x0800080d
 80006e4:	0800080d 	.word	0x0800080d
 80006e8:	0800080d 	.word	0x0800080d
 80006ec:	0800080d 	.word	0x0800080d
 80006f0:	080007bd 	.word	0x080007bd
 80006f4:	080007c1 	.word	0x080007c1
 80006f8:	080007c5 	.word	0x080007c5
 80006fc:	080007c9 	.word	0x080007c9
 8000700:	0800080d 	.word	0x0800080d
 8000704:	0800080d 	.word	0x0800080d
 8000708:	0800080d 	.word	0x0800080d
 800070c:	0800080d 	.word	0x0800080d
 8000710:	0800080d 	.word	0x0800080d
 8000714:	0800080d 	.word	0x0800080d
 8000718:	0800080d 	.word	0x0800080d
 800071c:	0800080d 	.word	0x0800080d
 8000720:	0800080d 	.word	0x0800080d
 8000724:	0800080d 	.word	0x0800080d
 8000728:	0800080d 	.word	0x0800080d
 800072c:	0800080d 	.word	0x0800080d
 8000730:	080007cd 	.word	0x080007cd
 8000734:	080007d1 	.word	0x080007d1
 8000738:	0800080d 	.word	0x0800080d
 800073c:	0800080d 	.word	0x0800080d
 8000740:	0800080d 	.word	0x0800080d
 8000744:	0800080d 	.word	0x0800080d
 8000748:	0800080d 	.word	0x0800080d
 800074c:	0800080d 	.word	0x0800080d
 8000750:	0800080d 	.word	0x0800080d
 8000754:	0800080d 	.word	0x0800080d
 8000758:	0800080d 	.word	0x0800080d
 800075c:	0800080d 	.word	0x0800080d
 8000760:	0800080d 	.word	0x0800080d
 8000764:	0800080d 	.word	0x0800080d
 8000768:	0800080d 	.word	0x0800080d
 800076c:	0800080d 	.word	0x0800080d
 8000770:	080007d5 	.word	0x080007d5
 8000774:	080007d9 	.word	0x080007d9
 8000778:	080007dd 	.word	0x080007dd
 800077c:	080007e1 	.word	0x080007e1
 8000780:	080007e5 	.word	0x080007e5
 8000784:	080007e9 	.word	0x080007e9
 8000788:	080007ed 	.word	0x080007ed
 800078c:	080007f1 	.word	0x080007f1
 8000790:	080007f5 	.word	0x080007f5
 8000794:	080007f9 	.word	0x080007f9
 8000798:	0800080d 	.word	0x0800080d
 800079c:	080007fd 	.word	0x080007fd
 80007a0:	08000801 	.word	0x08000801
 80007a4:	08000805 	.word	0x08000805
 80007a8:	08000809 	.word	0x08000809
    {
    	case OPTION_ENCRYP_KEY128:	return "128-bit Encryption";
 80007ac:	4b1b      	ldr	r3, [pc, #108]	@ (800081c <GetOptionName+0x1c8>)
 80007ae:	e02e      	b.n	800080e <GetOptionName+0x1ba>
		case OPTION_ENCRYP_KEY256:	return "256-bit Encryption";
 80007b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000820 <GetOptionName+0x1cc>)
 80007b2:	e02c      	b.n	800080e <GetOptionName+0x1ba>
		case OPTION_DECRYP_KEY128:	return "128-bit Decryption";
 80007b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000824 <GetOptionName+0x1d0>)
 80007b6:	e02a      	b.n	800080e <GetOptionName+0x1ba>
		case OPTION_DECRYP_KEY256:	return "256-bit Decryption";
 80007b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000828 <GetOptionName+0x1d4>)
 80007ba:	e028      	b.n	800080e <GetOptionName+0x1ba>
		case OPTION_HASH_SHA224:	return "SHA224 Hashing Algorithm";
 80007bc:	4b1b      	ldr	r3, [pc, #108]	@ (800082c <GetOptionName+0x1d8>)
 80007be:	e026      	b.n	800080e <GetOptionName+0x1ba>
		case OPTION_HASH_SHA256:	return "SHA256 Hashing Algorithm";
 80007c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000830 <GetOptionName+0x1dc>)
 80007c2:	e024      	b.n	800080e <GetOptionName+0x1ba>
		case OPTION_HASH_SHA384:	return "SHA384 Hashing Algorithm";
 80007c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000834 <GetOptionName+0x1e0>)
 80007c6:	e022      	b.n	800080e <GetOptionName+0x1ba>
		case OPTION_HASH_SHA512:	return "SHA512 Hashing Algorithm";
 80007c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000838 <GetOptionName+0x1e4>)
 80007ca:	e020      	b.n	800080e <GetOptionName+0x1ba>
		case OPTION_HMAC_SHA224:	return "SHA224 HMAC Algorithm";
 80007cc:	4b1b      	ldr	r3, [pc, #108]	@ (800083c <GetOptionName+0x1e8>)
 80007ce:	e01e      	b.n	800080e <GetOptionName+0x1ba>
		case OPTION_HMAC_SHA256:	return "SHA256 HMAC Algorithm";
 80007d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000840 <GetOptionName+0x1ec>)
 80007d2:	e01c      	b.n	800080e <GetOptionName+0x1ba>
		case OPTION_RNG_0004:		return "4-byte Random Number Generation";
 80007d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000844 <GetOptionName+0x1f0>)
 80007d6:	e01a      	b.n	800080e <GetOptionName+0x1ba>
		case OPTION_RNG_0008:		return "8-byte Random Number Generation";
 80007d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000848 <GetOptionName+0x1f4>)
 80007da:	e018      	b.n	800080e <GetOptionName+0x1ba>
		case OPTION_RNG_0016:		return "16-byte Random Number Generation";
 80007dc:	4b1b      	ldr	r3, [pc, #108]	@ (800084c <GetOptionName+0x1f8>)
 80007de:	e016      	b.n	800080e <GetOptionName+0x1ba>
		case OPTION_RNG_0024:		return "24-byte Random Number Generation";
 80007e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000850 <GetOptionName+0x1fc>)
 80007e2:	e014      	b.n	800080e <GetOptionName+0x1ba>
		case OPTION_RNG_0032:		return "32-byte Random Number Generation";
 80007e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000854 <GetOptionName+0x200>)
 80007e6:	e012      	b.n	800080e <GetOptionName+0x1ba>
		case OPTION_RNG_0048:		return "48-byte Random Number Generation";
 80007e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000858 <GetOptionName+0x204>)
 80007ea:	e010      	b.n	800080e <GetOptionName+0x1ba>
		case OPTION_RNG_0064:		return "64-byte Random Number Generation";
 80007ec:	4b1b      	ldr	r3, [pc, #108]	@ (800085c <GetOptionName+0x208>)
 80007ee:	e00e      	b.n	800080e <GetOptionName+0x1ba>
		case OPTION_RNG_0066:		return "66-byte Random Number Generation";
 80007f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000860 <GetOptionName+0x20c>)
 80007f2:	e00c      	b.n	800080e <GetOptionName+0x1ba>
		case OPTION_RNG_0128:		return "128-byte Random Number Generation";
 80007f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000864 <GetOptionName+0x210>)
 80007f6:	e00a      	b.n	800080e <GetOptionName+0x1ba>
		case OPTION_RNG_0256:		return "256-byte Random Number Generation";
 80007f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000868 <GetOptionName+0x214>)
 80007fa:	e008      	b.n	800080e <GetOptionName+0x1ba>
		case OPTION_RNG_0512:		return "512-byte Random Number Generation";
 80007fc:	4b1b      	ldr	r3, [pc, #108]	@ (800086c <GetOptionName+0x218>)
 80007fe:	e006      	b.n	800080e <GetOptionName+0x1ba>
		case OPTION_RNG_1024:		return "1024-byte Random Number Generation";
 8000800:	4b1b      	ldr	r3, [pc, #108]	@ (8000870 <GetOptionName+0x21c>)
 8000802:	e004      	b.n	800080e <GetOptionName+0x1ba>
		case OPTION_RNG_2048:		return "2048-byte Random Number Generation";
 8000804:	4b1b      	ldr	r3, [pc, #108]	@ (8000874 <GetOptionName+0x220>)
 8000806:	e002      	b.n	800080e <GetOptionName+0x1ba>
		case OPTION_RNG_4096:		return "4096-byte Random Number Generation";
 8000808:	4b1b      	ldr	r3, [pc, #108]	@ (8000878 <GetOptionName+0x224>)
 800080a:	e000      	b.n	800080e <GetOptionName+0x1ba>
		default:					return "Unknown Command"; 	break;
 800080c:	4b1b      	ldr	r3, [pc, #108]	@ (800087c <GetOptionName+0x228>)
    }
}
 800080e:	4618      	mov	r0, r3
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	080177c0 	.word	0x080177c0
 8000820:	080177d4 	.word	0x080177d4
 8000824:	080177e8 	.word	0x080177e8
 8000828:	080177fc 	.word	0x080177fc
 800082c:	08017810 	.word	0x08017810
 8000830:	0801782c 	.word	0x0801782c
 8000834:	08017848 	.word	0x08017848
 8000838:	08017864 	.word	0x08017864
 800083c:	08017880 	.word	0x08017880
 8000840:	08017898 	.word	0x08017898
 8000844:	080178b0 	.word	0x080178b0
 8000848:	080178d0 	.word	0x080178d0
 800084c:	080178f0 	.word	0x080178f0
 8000850:	08017914 	.word	0x08017914
 8000854:	08017938 	.word	0x08017938
 8000858:	0801795c 	.word	0x0801795c
 800085c:	08017980 	.word	0x08017980
 8000860:	080179a4 	.word	0x080179a4
 8000864:	080179c8 	.word	0x080179c8
 8000868:	080179ec 	.word	0x080179ec
 800086c:	08017a10 	.word	0x08017a10
 8000870:	08017a34 	.word	0x08017a34
 8000874:	08017a58 	.word	0x08017a58
 8000878:	08017a7c 	.word	0x08017a7c
 800087c:	080177b0 	.word	0x080177b0

08000880 <LogParsedPacket>:

static void LogParsedPacket(const ParsedPacket_t* packet)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b094      	sub	sp, #80	@ 0x50
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
    if (!packet)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d103      	bne.n	8000896 <LogParsedPacket+0x16>
    {
        log_error("ParsedPacket is NULL");
 800088e:	4841      	ldr	r0, [pc, #260]	@ (8000994 <LogParsedPacket+0x114>)
 8000890:	f003 fbbc 	bl	800400c <log_error>
        return;
 8000894:	e07b      	b.n	800098e <LogParsedPacket+0x10e>
    }

    log_debug("PARSED PACKET:");
 8000896:	4840      	ldr	r0, [pc, #256]	@ (8000998 <LogParsedPacket+0x118>)
 8000898:	f003 fb6a 	bl	8003f70 <log_debug>
    log_debug("TXID       : %u", packet->transactionID);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4619      	mov	r1, r3
 80008a2:	483e      	ldr	r0, [pc, #248]	@ (800099c <LogParsedPacket+0x11c>)
 80008a4:	f003 fb64 	bl	8003f70 <log_debug>
    log_debug("CMD        : %s", GetCommandName(packet->cmd));
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	791b      	ldrb	r3, [r3, #4]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff fe79 	bl	80005a4 <GetCommandName>
 80008b2:	4603      	mov	r3, r0
 80008b4:	4619      	mov	r1, r3
 80008b6:	483a      	ldr	r0, [pc, #232]	@ (80009a0 <LogParsedPacket+0x120>)
 80008b8:	f003 fb5a 	bl	8003f70 <log_debug>
    log_debug("OPTION     : %s", GetOptionName(packet->option));
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	795b      	ldrb	r3, [r3, #5]
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff fec7 	bl	8000654 <GetOptionName>
 80008c6:	4603      	mov	r3, r0
 80008c8:	4619      	mov	r1, r3
 80008ca:	4836      	ldr	r0, [pc, #216]	@ (80009a4 <LogParsedPacket+0x124>)
 80008cc:	f003 fb50 	bl	8003f70 <log_debug>
    log_debug("INPUT SIZE : %hu bytes", packet->inputSize);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	88db      	ldrh	r3, [r3, #6]
 80008d4:	4619      	mov	r1, r3
 80008d6:	4834      	ldr	r0, [pc, #208]	@ (80009a8 <LogParsedPacket+0x128>)
 80008d8:	f003 fb4a 	bl	8003f70 <log_debug>

    const uint8_t* data = packet->inputData;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	3308      	adds	r3, #8
 80008e0:	643b      	str	r3, [r7, #64]	@ 0x40
    uint16_t size = packet->inputSize;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	88db      	ldrh	r3, [r3, #6]
 80008e6:	87fb      	strh	r3, [r7, #62]	@ 0x3e

    for (uint16_t i = 0; i < size; i += bytesPerLine)
 80008e8:	2300      	movs	r3, #0
 80008ea:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80008ee:	e049      	b.n	8000984 <LogParsedPacket+0x104>
    {
        char line[bytesPerLine * 3 + 1] = {0};
 80008f0:	2300      	movs	r3, #0
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	f107 0310 	add.w	r3, r7, #16
 80008f8:	222d      	movs	r2, #45	@ 0x2d
 80008fa:	2100      	movs	r1, #0
 80008fc:	4618      	mov	r0, r3
 80008fe:	f015 ffb9 	bl	8016874 <memset>
        char* ptr = line;
 8000902:	f107 030c 	add.w	r3, r7, #12
 8000906:	64bb      	str	r3, [r7, #72]	@ 0x48

        for (uint16_t j = 0; j < bytesPerLine && (i + j) < size; ++j)
 8000908:	2300      	movs	r3, #0
 800090a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800090e:	e017      	b.n	8000940 <LogParsedPacket+0xc0>
        {
            ptr += sprintf(ptr, "%02X ", data[i + j]);
 8000910:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8000914:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000918:	4413      	add	r3, r2
 800091a:	461a      	mov	r2, r3
 800091c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800091e:	4413      	add	r3, r2
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	461a      	mov	r2, r3
 8000924:	4921      	ldr	r1, [pc, #132]	@ (80009ac <LogParsedPacket+0x12c>)
 8000926:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000928:	f015 fef8 	bl	801671c <siprintf>
 800092c:	4603      	mov	r3, r0
 800092e:	461a      	mov	r2, r3
 8000930:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000932:	4413      	add	r3, r2
 8000934:	64bb      	str	r3, [r7, #72]	@ 0x48
        for (uint16_t j = 0; j < bytesPerLine && (i + j) < size; ++j)
 8000936:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800093a:	3301      	adds	r3, #1
 800093c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8000940:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000944:	2b0f      	cmp	r3, #15
 8000946:	d807      	bhi.n	8000958 <LogParsedPacket+0xd8>
 8000948:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800094c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000950:	441a      	add	r2, r3
 8000952:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000954:	429a      	cmp	r2, r3
 8000956:	dbdb      	blt.n	8000910 <LogParsedPacket+0x90>
        }

        if (i == 0)
 8000958:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800095c:	2b00      	cmp	r3, #0
 800095e:	d106      	bne.n	800096e <LogParsedPacket+0xee>
        {
        	log_debug("INPUT DATA : %s", line);
 8000960:	f107 030c 	add.w	r3, r7, #12
 8000964:	4619      	mov	r1, r3
 8000966:	4812      	ldr	r0, [pc, #72]	@ (80009b0 <LogParsedPacket+0x130>)
 8000968:	f003 fb02 	bl	8003f70 <log_debug>
 800096c:	e005      	b.n	800097a <LogParsedPacket+0xfa>
        }
        else
        {
        	log_debug("             %s", line);
 800096e:	f107 030c 	add.w	r3, r7, #12
 8000972:	4619      	mov	r1, r3
 8000974:	480f      	ldr	r0, [pc, #60]	@ (80009b4 <LogParsedPacket+0x134>)
 8000976:	f003 fafb 	bl	8003f70 <log_debug>
    for (uint16_t i = 0; i < size; i += bytesPerLine)
 800097a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800097e:	3310      	adds	r3, #16
 8000980:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8000984:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8000988:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800098a:	429a      	cmp	r2, r3
 800098c:	d3b0      	bcc.n	80008f0 <LogParsedPacket+0x70>
        }
    }
    // log_debug("EOD FLAG    : %04X", packet->out_eod_flag);
}
 800098e:	3750      	adds	r7, #80	@ 0x50
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	08017aa0 	.word	0x08017aa0
 8000998:	08017ab8 	.word	0x08017ab8
 800099c:	08017ac8 	.word	0x08017ac8
 80009a0:	08017ad8 	.word	0x08017ad8
 80009a4:	08017ae8 	.word	0x08017ae8
 80009a8:	08017af8 	.word	0x08017af8
 80009ac:	08017b10 	.word	0x08017b10
 80009b0:	08017b18 	.word	0x08017b18
 80009b4:	08017b28 	.word	0x08017b28

080009b8 <LogResponsePacket>:

static void LogResponsePacket(const ResponsePacket_t* packet)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b094      	sub	sp, #80	@ 0x50
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
    if (!packet)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d103      	bne.n	80009ce <LogResponsePacket+0x16>
    {
        log_error("ResponsePacket is NULL");
 80009c6:	483b      	ldr	r0, [pc, #236]	@ (8000ab4 <LogResponsePacket+0xfc>)
 80009c8:	f003 fb20 	bl	800400c <log_error>
        return;
 80009cc:	e06f      	b.n	8000aae <LogResponsePacket+0xf6>
    }

    log_debug("RESPONSE PACKET");
 80009ce:	483a      	ldr	r0, [pc, #232]	@ (8000ab8 <LogResponsePacket+0x100>)
 80009d0:	f003 face 	bl	8003f70 <log_debug>
    log_debug("TXID        : %u", packet->transactionID);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4619      	mov	r1, r3
 80009da:	4838      	ldr	r0, [pc, #224]	@ (8000abc <LogResponsePacket+0x104>)
 80009dc:	f003 fac8 	bl	8003f70 <log_debug>
    log_debug("OUTPUT SIZE : %u bytes", packet->outputSize);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	889b      	ldrh	r3, [r3, #4]
 80009e4:	4619      	mov	r1, r3
 80009e6:	4836      	ldr	r0, [pc, #216]	@ (8000ac0 <LogResponsePacket+0x108>)
 80009e8:	f003 fac2 	bl	8003f70 <log_debug>

    const uint8_t* data = packet->outputData;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	3306      	adds	r3, #6
 80009f0:	643b      	str	r3, [r7, #64]	@ 0x40
    uint16_t size = packet->outputSize;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	889b      	ldrh	r3, [r3, #4]
 80009f6:	87fb      	strh	r3, [r7, #62]	@ 0x3e

    for (uint16_t i = 0; i < size; i += bytesPerLine)
 80009f8:	2300      	movs	r3, #0
 80009fa:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80009fe:	e049      	b.n	8000a94 <LogResponsePacket+0xdc>
    {
        char line[bytesPerLine * 3 + 1] = {0};
 8000a00:	2300      	movs	r3, #0
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	f107 0310 	add.w	r3, r7, #16
 8000a08:	222d      	movs	r2, #45	@ 0x2d
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f015 ff31 	bl	8016874 <memset>
        char* ptr = line;
 8000a12:	f107 030c 	add.w	r3, r7, #12
 8000a16:	64bb      	str	r3, [r7, #72]	@ 0x48

        for (uint16_t j = 0; j < bytesPerLine && (i + j) < size; ++j)
 8000a18:	2300      	movs	r3, #0
 8000a1a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8000a1e:	e017      	b.n	8000a50 <LogResponsePacket+0x98>
        {
            ptr += sprintf(ptr, "%02X ", data[i + j]);
 8000a20:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8000a24:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000a28:	4413      	add	r3, r2
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a2e:	4413      	add	r3, r2
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	461a      	mov	r2, r3
 8000a34:	4923      	ldr	r1, [pc, #140]	@ (8000ac4 <LogResponsePacket+0x10c>)
 8000a36:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000a38:	f015 fe70 	bl	801671c <siprintf>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	461a      	mov	r2, r3
 8000a40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000a42:	4413      	add	r3, r2
 8000a44:	64bb      	str	r3, [r7, #72]	@ 0x48
        for (uint16_t j = 0; j < bytesPerLine && (i + j) < size; ++j)
 8000a46:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8000a50:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000a54:	2b0f      	cmp	r3, #15
 8000a56:	d807      	bhi.n	8000a68 <LogResponsePacket+0xb0>
 8000a58:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8000a5c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000a60:	441a      	add	r2, r3
 8000a62:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000a64:	429a      	cmp	r2, r3
 8000a66:	dbdb      	blt.n	8000a20 <LogResponsePacket+0x68>
        }

        if (i == 0)
 8000a68:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d106      	bne.n	8000a7e <LogResponsePacket+0xc6>
            log_debug("OUTPUT DATA : %s", line);
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	4619      	mov	r1, r3
 8000a76:	4814      	ldr	r0, [pc, #80]	@ (8000ac8 <LogResponsePacket+0x110>)
 8000a78:	f003 fa7a 	bl	8003f70 <log_debug>
 8000a7c:	e005      	b.n	8000a8a <LogResponsePacket+0xd2>
        else
            log_debug("              %s", line);
 8000a7e:	f107 030c 	add.w	r3, r7, #12
 8000a82:	4619      	mov	r1, r3
 8000a84:	4811      	ldr	r0, [pc, #68]	@ (8000acc <LogResponsePacket+0x114>)
 8000a86:	f003 fa73 	bl	8003f70 <log_debug>
    for (uint16_t i = 0; i < size; i += bytesPerLine)
 8000a8a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000a8e:	3310      	adds	r3, #16
 8000a90:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8000a94:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8000a98:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d3b0      	bcc.n	8000a00 <LogResponsePacket+0x48>
    }
    log_debug("EOD FLAG    : %04X", packet->out_eod_flag);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000aa4:	689b      	ldr	r3, [r3, #8]
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4809      	ldr	r0, [pc, #36]	@ (8000ad0 <LogResponsePacket+0x118>)
 8000aaa:	f003 fa61 	bl	8003f70 <log_debug>
}
 8000aae:	3750      	adds	r7, #80	@ 0x50
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	08017b38 	.word	0x08017b38
 8000ab8:	08017b50 	.word	0x08017b50
 8000abc:	08017b60 	.word	0x08017b60
 8000ac0:	08017b74 	.word	0x08017b74
 8000ac4:	08017b10 	.word	0x08017b10
 8000ac8:	08017b8c 	.word	0x08017b8c
 8000acc:	08017ba0 	.word	0x08017ba0
 8000ad0:	08017bb4 	.word	0x08017bb4

08000ad4 <LogTransmitBuffer>:

static void LogTransmitBuffer(const uint8_t* usb_tx_buffer, uint32_t usb_tx_index)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b092      	sub	sp, #72	@ 0x48
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	6039      	str	r1, [r7, #0]
    if (!usb_tx_buffer || usb_tx_index == 0)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d002      	beq.n	8000aea <LogTransmitBuffer+0x16>
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d103      	bne.n	8000af2 <LogTransmitBuffer+0x1e>
    {
        log_debug("USB TX buffer is empty or NULL.");
 8000aea:	4826      	ldr	r0, [pc, #152]	@ (8000b84 <LogTransmitBuffer+0xb0>)
 8000aec:	f003 fa40 	bl	8003f70 <log_debug>
        return;
 8000af0:	e045      	b.n	8000b7e <LogTransmitBuffer+0xaa>
    }


    for (uint32_t i = 0; i < usb_tx_index; i += bytesPerLine)
 8000af2:	2300      	movs	r3, #0
 8000af4:	647b      	str	r3, [r7, #68]	@ 0x44
 8000af6:	e03e      	b.n	8000b76 <LogTransmitBuffer+0xa2>
    {
        char line[bytesPerLine * 3 + 1] = {0};
 8000af8:	2300      	movs	r3, #0
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	f107 030c 	add.w	r3, r7, #12
 8000b00:	222d      	movs	r2, #45	@ 0x2d
 8000b02:	2100      	movs	r1, #0
 8000b04:	4618      	mov	r0, r3
 8000b06:	f015 feb5 	bl	8016874 <memset>
        char* ptr = line;
 8000b0a:	f107 0308 	add.w	r3, r7, #8
 8000b0e:	643b      	str	r3, [r7, #64]	@ 0x40

        for (uint32_t j = 0; j < bytesPerLine && (i + j) < usb_tx_index; ++j)
 8000b10:	2300      	movs	r3, #0
 8000b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000b14:	e012      	b.n	8000b3c <LogTransmitBuffer+0x68>
        {
            ptr += sprintf(ptr, "%02X ", usb_tx_buffer[i + j]);
 8000b16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000b18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b1a:	4413      	add	r3, r2
 8000b1c:	687a      	ldr	r2, [r7, #4]
 8000b1e:	4413      	add	r3, r2
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	461a      	mov	r2, r3
 8000b24:	4918      	ldr	r1, [pc, #96]	@ (8000b88 <LogTransmitBuffer+0xb4>)
 8000b26:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000b28:	f015 fdf8 	bl	801671c <siprintf>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	461a      	mov	r2, r3
 8000b30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b32:	4413      	add	r3, r2
 8000b34:	643b      	str	r3, [r7, #64]	@ 0x40
        for (uint32_t j = 0; j < bytesPerLine && (i + j) < usb_tx_index; ++j)
 8000b36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b38:	3301      	adds	r3, #1
 8000b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000b3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b3e:	2b0f      	cmp	r3, #15
 8000b40:	d805      	bhi.n	8000b4e <LogTransmitBuffer+0x7a>
 8000b42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000b44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b46:	4413      	add	r3, r2
 8000b48:	683a      	ldr	r2, [r7, #0]
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	d8e3      	bhi.n	8000b16 <LogTransmitBuffer+0x42>
        }

        if (i == 0)
 8000b4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d107      	bne.n	8000b64 <LogTransmitBuffer+0x90>
            log_debug("USB Tx [%lu bytes]: %s", usb_tx_index, line);
 8000b54:	f107 0308 	add.w	r3, r7, #8
 8000b58:	461a      	mov	r2, r3
 8000b5a:	6839      	ldr	r1, [r7, #0]
 8000b5c:	480b      	ldr	r0, [pc, #44]	@ (8000b8c <LogTransmitBuffer+0xb8>)
 8000b5e:	f003 fa07 	bl	8003f70 <log_debug>
 8000b62:	e005      	b.n	8000b70 <LogTransmitBuffer+0x9c>
        else
            log_debug("                   %s", line);  // 17-character indent to align with line 1
 8000b64:	f107 0308 	add.w	r3, r7, #8
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4809      	ldr	r0, [pc, #36]	@ (8000b90 <LogTransmitBuffer+0xbc>)
 8000b6c:	f003 fa00 	bl	8003f70 <log_debug>
    for (uint32_t i = 0; i < usb_tx_index; i += bytesPerLine)
 8000b70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b72:	3310      	adds	r3, #16
 8000b74:	647b      	str	r3, [r7, #68]	@ 0x44
 8000b76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d3bc      	bcc.n	8000af8 <LogTransmitBuffer+0x24>
    }
}
 8000b7e:	3748      	adds	r7, #72	@ 0x48
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	08017bc8 	.word	0x08017bc8
 8000b88:	08017b10 	.word	0x08017b10
 8000b8c:	08017be8 	.word	0x08017be8
 8000b90:	08017c00 	.word	0x08017c00

08000b94 <HSMManager_Init>:

void HSMManager_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
	int err;

	log_init(LOG_LEVEL_DEBUG);
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	f003 f982 	bl	8003ea4 <log_init>
	log_info("Initializing HSM Device.");
 8000ba0:	484b      	ldr	r0, [pc, #300]	@ (8000cd0 <HSMManager_Init+0x13c>)
 8000ba2:	f003 f9ff 	bl	8003fa4 <log_info>
	HAL_Delay(1000);
 8000ba6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000baa:	f004 ff17 	bl	80059dc <HAL_Delay>
	log_info("Turning LED ON.");
 8000bae:	4849      	ldr	r0, [pc, #292]	@ (8000cd4 <HSMManager_Init+0x140>)
 8000bb0:	f003 f9f8 	bl	8003fa4 <log_info>
	BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	f004 fcaf 	bl	8005518 <BSP_LED_Toggle>
 8000bba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bbe:	f004 ff0d 	bl	80059dc <HAL_Delay>
	BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000bc2:	2002      	movs	r0, #2
 8000bc4:	f004 fca8 	bl	8005518 <BSP_LED_Toggle>
 8000bc8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bcc:	f004 ff06 	bl	80059dc <HAL_Delay>
	BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	f004 fca1 	bl	8005518 <BSP_LED_Toggle>
 8000bd6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bda:	f004 feff 	bl	80059dc <HAL_Delay>
	log_clearline();
 8000bde:	f003 f971 	bl	8003ec4 <log_clearline>
	log_info("Turning LED OFF.");
 8000be2:	483d      	ldr	r0, [pc, #244]	@ (8000cd8 <HSMManager_Init+0x144>)
 8000be4:	f003 f9de 	bl	8003fa4 <log_info>
	BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000be8:	2000      	movs	r0, #0
 8000bea:	f004 fc95 	bl	8005518 <BSP_LED_Toggle>
 8000bee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bf2:	f004 fef3 	bl	80059dc <HAL_Delay>
	BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000bf6:	2002      	movs	r0, #2
 8000bf8:	f004 fc8e 	bl	8005518 <BSP_LED_Toggle>
 8000bfc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c00:	f004 feec 	bl	80059dc <HAL_Delay>
	BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000c04:	2001      	movs	r0, #1
 8000c06:	f004 fc87 	bl	8005518 <BSP_LED_Toggle>
 8000c0a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c0e:	f004 fee5 	bl	80059dc <HAL_Delay>
	log_clearline();
 8000c12:	f003 f957 	bl	8003ec4 <log_clearline>

	err = SaltManager_Init();
 8000c16:	f003 f907 	bl	8003e28 <SaltManager_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	607b      	str	r3, [r7, #4]
	if(err)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d004      	beq.n	8000c2e <HSMManager_Init+0x9a>
	{
		log_error("Salt Manager did not Initialize. Error.");
 8000c24:	482d      	ldr	r0, [pc, #180]	@ (8000cdc <HSMManager_Init+0x148>)
 8000c26:	f003 f9f1 	bl	800400c <log_error>
		while(1);
 8000c2a:	bf00      	nop
 8000c2c:	e7fd      	b.n	8000c2a <HSMManager_Init+0x96>
	}
	err = FlashManager_Init();
 8000c2e:	f002 f945 	bl	8002ebc <FlashManager_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	607b      	str	r3, [r7, #4]
	if(err)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d004      	beq.n	8000c46 <HSMManager_Init+0xb2>
	{
		log_error("Flash Manager did not Initialize. Error.");
 8000c3c:	4828      	ldr	r0, [pc, #160]	@ (8000ce0 <HSMManager_Init+0x14c>)
 8000c3e:	f003 f9e5 	bl	800400c <log_error>
		while(1);
 8000c42:	bf00      	nop
 8000c44:	e7fd      	b.n	8000c42 <HSMManager_Init+0xae>
	}
	err = KeyManager_Init();
 8000c46:	f002 fbfb 	bl	8003440 <KeyManager_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	607b      	str	r3, [r7, #4]
	if(err)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d004      	beq.n	8000c5e <HSMManager_Init+0xca>
	{
		log_error("Key Manager did not Initialize. Error.");
 8000c54:	4823      	ldr	r0, [pc, #140]	@ (8000ce4 <HSMManager_Init+0x150>)
 8000c56:	f003 f9d9 	bl	800400c <log_error>
		while(1);
 8000c5a:	bf00      	nop
 8000c5c:	e7fd      	b.n	8000c5a <HSMManager_Init+0xc6>
	}

	log_info("Turning LED ON.");
 8000c5e:	481d      	ldr	r0, [pc, #116]	@ (8000cd4 <HSMManager_Init+0x140>)
 8000c60:	f003 f9a0 	bl	8003fa4 <log_info>
	BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000c64:	2000      	movs	r0, #0
 8000c66:	f004 fc57 	bl	8005518 <BSP_LED_Toggle>
 8000c6a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c6e:	f004 feb5 	bl	80059dc <HAL_Delay>
	BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000c72:	2002      	movs	r0, #2
 8000c74:	f004 fc50 	bl	8005518 <BSP_LED_Toggle>
 8000c78:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c7c:	f004 feae 	bl	80059dc <HAL_Delay>
	BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000c80:	2001      	movs	r0, #1
 8000c82:	f004 fc49 	bl	8005518 <BSP_LED_Toggle>
 8000c86:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c8a:	f004 fea7 	bl	80059dc <HAL_Delay>
	log_clearline();
 8000c8e:	f003 f919 	bl	8003ec4 <log_clearline>
	log_info("Turning LED OFF.");
 8000c92:	4811      	ldr	r0, [pc, #68]	@ (8000cd8 <HSMManager_Init+0x144>)
 8000c94:	f003 f986 	bl	8003fa4 <log_info>
	BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000c98:	2000      	movs	r0, #0
 8000c9a:	f004 fc3d 	bl	8005518 <BSP_LED_Toggle>
 8000c9e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ca2:	f004 fe9b 	bl	80059dc <HAL_Delay>
	BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000ca6:	2002      	movs	r0, #2
 8000ca8:	f004 fc36 	bl	8005518 <BSP_LED_Toggle>
 8000cac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cb0:	f004 fe94 	bl	80059dc <HAL_Delay>
	BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	f004 fc2f 	bl	8005518 <BSP_LED_Toggle>
 8000cba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cbe:	f004 fe8d 	bl	80059dc <HAL_Delay>
	log_clearline();
 8000cc2:	f003 f8ff 	bl	8003ec4 <log_clearline>
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	08017c18 	.word	0x08017c18
 8000cd4:	08017c34 	.word	0x08017c34
 8000cd8:	08017c44 	.word	0x08017c44
 8000cdc:	08017c58 	.word	0x08017c58
 8000ce0:	08017c80 	.word	0x08017c80
 8000ce4:	08017cac 	.word	0x08017cac

08000ce8 <HSMManager_ProcessCommand>:


OperationStatus_t HSMManager_ProcessCommand(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	f5ad 3d90 	sub.w	sp, sp, #73728	@ 0x12000
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
	 if (usb_rx_complete)
 8000cf2:	4b48      	ldr	r3, [pc, #288]	@ (8000e14 <HSMManager_ProcessCommand+0x12c>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	f000 8084 	beq.w	8000e06 <HSMManager_ProcessCommand+0x11e>
	 {
		 ParsedPacket_t request;
		 ResponsePacket_t response;
		 uint8_t usb_tx_buffer[MAX_USB_DATA_SIZE];
		 uint16_t usb_tx_index;
		 ParseStatus_t status = PacketParser_Parse(usb_rx_buffer, usb_rx_index, &request);
 8000cfe:	4b46      	ldr	r3, [pc, #280]	@ (8000e18 <HSMManager_ProcessCommand+0x130>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	b299      	uxth	r1, r3
 8000d04:	f107 0318 	add.w	r3, r7, #24
 8000d08:	3b18      	subs	r3, #24
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	4843      	ldr	r0, [pc, #268]	@ (8000e1c <HSMManager_ProcessCommand+0x134>)
 8000d0e:	f002 ff2f 	bl	8003b70 <PacketParser_Parse>
 8000d12:	4603      	mov	r3, r0
 8000d14:	f507 3290 	add.w	r2, r7, #73728	@ 0x12000
 8000d18:	f102 0217 	add.w	r2, r2, #23
 8000d1c:	7013      	strb	r3, [r2, #0]

		 if (status == PARSE_SUCCESS)
 8000d1e:	f507 3390 	add.w	r3, r7, #73728	@ 0x12000
 8000d22:	f103 0317 	add.w	r3, r3, #23
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d163      	bne.n	8000df4 <HSMManager_ProcessCommand+0x10c>
		 {
			 log_debug("Packet Parsed Successfully:");
 8000d2c:	483c      	ldr	r0, [pc, #240]	@ (8000e20 <HSMManager_ProcessCommand+0x138>)
 8000d2e:	f003 f91f 	bl	8003f70 <log_debug>
			 LogParsedPacket(&request);
 8000d32:	f107 0318 	add.w	r3, r7, #24
 8000d36:	3b18      	subs	r3, #24
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fda1 	bl	8000880 <LogParsedPacket>
			 OperationDispatcher_Dispatch(&request, &response);
 8000d3e:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000d42:	f102 0218 	add.w	r2, r2, #24
 8000d46:	3a10      	subs	r2, #16
 8000d48:	f107 0318 	add.w	r3, r7, #24
 8000d4c:	3b18      	subs	r3, #24
 8000d4e:	4611      	mov	r1, r2
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 f869 	bl	8000e28 <OperationDispatcher_Dispatch>
			 response.transactionID = request.transactionID;
 8000d56:	f107 0318 	add.w	r3, r7, #24
 8000d5a:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8000d5e:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000d62:	f102 0218 	add.w	r2, r2, #24
 8000d66:	f842 3c10 	str.w	r3, [r2, #-16]
			 LogResponsePacket(&response);
 8000d6a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000d6e:	f103 0318 	add.w	r3, r3, #24
 8000d72:	3b10      	subs	r3, #16
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fe1f 	bl	80009b8 <LogResponsePacket>
			 usb_tx_index = response.outputSize + 10;
 8000d7a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000d7e:	f103 0318 	add.w	r3, r3, #24
 8000d82:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8000d86:	330a      	adds	r3, #10
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	f507 3290 	add.w	r2, r7, #73728	@ 0x12000
 8000d8e:	f102 0214 	add.w	r2, r2, #20
 8000d92:	8013      	strh	r3, [r2, #0]
			 PacketBuilder_Build(&response, usb_tx_buffer, &usb_tx_index);
 8000d94:	f507 3290 	add.w	r2, r7, #73728	@ 0x12000
 8000d98:	f102 0214 	add.w	r2, r2, #20
 8000d9c:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 8000da0:	f101 0118 	add.w	r1, r1, #24
 8000da4:	3904      	subs	r1, #4
 8000da6:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000daa:	f103 0318 	add.w	r3, r3, #24
 8000dae:	3b10      	subs	r3, #16
 8000db0:	4618      	mov	r0, r3
 8000db2:	f002 fe2d 	bl	8003a10 <PacketBuilder_Build>
			 LogTransmitBuffer(usb_tx_buffer, usb_tx_index);
 8000db6:	f507 3390 	add.w	r3, r7, #73728	@ 0x12000
 8000dba:	f103 0314 	add.w	r3, r3, #20
 8000dbe:	881b      	ldrh	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8000dc6:	f103 0318 	add.w	r3, r3, #24
 8000dca:	3b04      	subs	r3, #4
 8000dcc:	4611      	mov	r1, r2
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff fe80 	bl	8000ad4 <LogTransmitBuffer>
			 USB_Transmit(usb_tx_buffer, usb_tx_index);
 8000dd4:	f507 3390 	add.w	r3, r7, #73728	@ 0x12000
 8000dd8:	f103 0314 	add.w	r3, r3, #20
 8000ddc:	881b      	ldrh	r3, [r3, #0]
 8000dde:	461a      	mov	r2, r3
 8000de0:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8000de4:	f103 0318 	add.w	r3, r3, #24
 8000de8:	3b04      	subs	r3, #4
 8000dea:	4611      	mov	r1, r2
 8000dec:	4618      	mov	r0, r3
 8000dee:	f013 fb35 	bl	801445c <USB_Transmit>
 8000df2:	e008      	b.n	8000e06 <HSMManager_ProcessCommand+0x11e>
		 }
		 else
		 {
			 log_error("Parsing failed with status code: %d", status);
 8000df4:	f507 3390 	add.w	r3, r7, #73728	@ 0x12000
 8000df8:	f103 0317 	add.w	r3, r3, #23
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4808      	ldr	r0, [pc, #32]	@ (8000e24 <HSMManager_ProcessCommand+0x13c>)
 8000e02:	f003 f903 	bl	800400c <log_error>
		 }
	 }
	 return 0;
 8000e06:	2300      	movs	r3, #0
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f507 3790 	add.w	r7, r7, #73728	@ 0x12000
 8000e0e:	3718      	adds	r7, #24
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	200130ec 	.word	0x200130ec
 8000e18:	200130e8 	.word	0x200130e8
 8000e1c:	200030e8 	.word	0x200030e8
 8000e20:	08017cd4 	.word	0x08017cd4
 8000e24:	08017cf0 	.word	0x08017cf0

08000e28 <OperationDispatcher_Dispatch>:
#include "../../../Handlers/KeyDelete/Inc/KeyDelete.h"
#include "constants.h"
#include "Logger.h"

OperationStatus_t OperationDispatcher_Dispatch(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
    log_info("Dispatching Command.");
 8000e32:	4846      	ldr	r0, [pc, #280]	@ (8000f4c <OperationDispatcher_Dispatch+0x124>)
 8000e34:	f003 f8b6 	bl	8003fa4 <log_info>

    switch (request->cmd)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	791b      	ldrb	r3, [r3, #4]
 8000e3c:	3b01      	subs	r3, #1
 8000e3e:	2b0e      	cmp	r3, #14
 8000e40:	d879      	bhi.n	8000f36 <OperationDispatcher_Dispatch+0x10e>
 8000e42:	a201      	add	r2, pc, #4	@ (adr r2, 8000e48 <OperationDispatcher_Dispatch+0x20>)
 8000e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e48:	08000e85 	.word	0x08000e85
 8000e4c:	08000e97 	.word	0x08000e97
 8000e50:	08000ea9 	.word	0x08000ea9
 8000e54:	08000ebb 	.word	0x08000ebb
 8000e58:	08000ecd 	.word	0x08000ecd
 8000e5c:	08000edf 	.word	0x08000edf
 8000e60:	08000ef1 	.word	0x08000ef1
 8000e64:	08000f03 	.word	0x08000f03
 8000e68:	08000f15 	.word	0x08000f15
 8000e6c:	08000f37 	.word	0x08000f37
 8000e70:	08000f37 	.word	0x08000f37
 8000e74:	08000f37 	.word	0x08000f37
 8000e78:	08000f37 	.word	0x08000f37
 8000e7c:	08000f37 	.word	0x08000f37
 8000e80:	08000f27 	.word	0x08000f27
    {
        case CMD_ENCRYPT:
        	log_info("Calling Encryption Operation.");
 8000e84:	4832      	ldr	r0, [pc, #200]	@ (8000f50 <OperationDispatcher_Dispatch+0x128>)
 8000e86:	f003 f88d 	bl	8003fa4 <log_info>
            return EncryptHandler_Encrypt(request, response);
 8000e8a:	6839      	ldr	r1, [r7, #0]
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f000 f98b 	bl	80011a8 <EncryptHandler_Encrypt>
 8000e92:	4603      	mov	r3, r0
 8000e94:	e056      	b.n	8000f44 <OperationDispatcher_Dispatch+0x11c>

        case CMD_DECRYPT:
        	log_info("Calling Decryption Operation.");
 8000e96:	482f      	ldr	r0, [pc, #188]	@ (8000f54 <OperationDispatcher_Dispatch+0x12c>)
 8000e98:	f003 f884 	bl	8003fa4 <log_info>
            return DecryptHandler_Decrypt(request, response);
 8000e9c:	6839      	ldr	r1, [r7, #0]
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f000 f88c 	bl	8000fbc <DecryptHandler_Decrypt>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	e04d      	b.n	8000f44 <OperationDispatcher_Dispatch+0x11c>

        case CMD_HASH:
        	log_info("Calling Hashing Operation.");
 8000ea8:	482b      	ldr	r0, [pc, #172]	@ (8000f58 <OperationDispatcher_Dispatch+0x130>)
 8000eaa:	f003 f87b 	bl	8003fa4 <log_info>
            return HashingHandler_Handle(request, response);
 8000eae:	6839      	ldr	r1, [r7, #0]
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f000 fbc1 	bl	8001638 <HashingHandler_Handle>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	e044      	b.n	8000f44 <OperationDispatcher_Dispatch+0x11c>

        case CMD_HMAC:
        	log_info("Calling HMAC Operation.");
 8000eba:	4828      	ldr	r0, [pc, #160]	@ (8000f5c <OperationDispatcher_Dispatch+0x134>)
 8000ebc:	f003 f872 	bl	8003fa4 <log_info>
            return HMACHandler_Handle(request, response);
 8000ec0:	6839      	ldr	r1, [r7, #0]
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f000 fa8a 	bl	80013dc <HMACHandler_Handle>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	e03b      	b.n	8000f44 <OperationDispatcher_Dispatch+0x11c>

        case CMD_RANDOM:
        	log_info("Calling RNG Operation.");
 8000ecc:	4824      	ldr	r0, [pc, #144]	@ (8000f60 <OperationDispatcher_Dispatch+0x138>)
 8000ece:	f003 f869 	bl	8003fa4 <log_info>
            return RandomHandler_Handle(request, response);
 8000ed2:	6839      	ldr	r1, [r7, #0]
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f000 ff01 	bl	8001cdc <RandomHandler_Handle>
 8000eda:	4603      	mov	r3, r0
 8000edc:	e032      	b.n	8000f44 <OperationDispatcher_Dispatch+0x11c>

        case CMD_OTP:
            log_info("Calling OTP Operation.");
 8000ede:	4821      	ldr	r0, [pc, #132]	@ (8000f64 <OperationDispatcher_Dispatch+0x13c>)
 8000ee0:	f003 f860 	bl	8003fa4 <log_info>
            return OTPHandler_Handle(request, response);
 8000ee4:	6839      	ldr	r1, [r7, #0]
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f000 fe42 	bl	8001b70 <OTPHandler_Handle>
 8000eec:	4603      	mov	r3, r0
 8000eee:	e029      	b.n	8000f44 <OperationDispatcher_Dispatch+0x11c>

        case CMD_KEY_GEN:
        	log_info("Calling Key Generator Operation.");
 8000ef0:	481d      	ldr	r0, [pc, #116]	@ (8000f68 <OperationDispatcher_Dispatch+0x140>)
 8000ef2:	f003 f857 	bl	8003fa4 <log_info>
            return KeyHandler_Generate(request, response);
 8000ef6:	6839      	ldr	r1, [r7, #0]
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f000 fcf9 	bl	80018f0 <KeyHandler_Generate>
 8000efe:	4603      	mov	r3, r0
 8000f00:	e020      	b.n	8000f44 <OperationDispatcher_Dispatch+0x11c>

        case CMD_KEY_STORE:
        	log_info("Calling Key Store Operation.");
 8000f02:	481a      	ldr	r0, [pc, #104]	@ (8000f6c <OperationDispatcher_Dispatch+0x144>)
 8000f04:	f003 f84e 	bl	8003fa4 <log_info>
            return KeyHandler_Store(request, response);
 8000f08:	6839      	ldr	r1, [r7, #0]
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f000 fd84 	bl	8001a18 <KeyHandler_Store>
 8000f10:	4603      	mov	r3, r0
 8000f12:	e017      	b.n	8000f44 <OperationDispatcher_Dispatch+0x11c>

        case CMD_KEY_DELETE:
        	log_info("Calling Key Delete Operation.");
 8000f14:	4816      	ldr	r0, [pc, #88]	@ (8000f70 <OperationDispatcher_Dispatch+0x148>)
 8000f16:	f003 f845 	bl	8003fa4 <log_info>
            return KeyHandler_Delete(request, response);
 8000f1a:	6839      	ldr	r1, [r7, #0]
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f000 fc59 	bl	80017d4 <KeyHandler_Delete>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e00e      	b.n	8000f44 <OperationDispatcher_Dispatch+0x11c>

        case CMD_PING:
        	log_info("Calling Ping Operation.");
 8000f26:	4813      	ldr	r0, [pc, #76]	@ (8000f74 <OperationDispatcher_Dispatch+0x14c>)
 8000f28:	f003 f83c 	bl	8003fa4 <log_info>
        	log_warn("Ping Operation not supported");
 8000f2c:	4812      	ldr	r0, [pc, #72]	@ (8000f78 <OperationDispatcher_Dispatch+0x150>)
 8000f2e:	f003 f853 	bl	8003fd8 <log_warn>
            return OPERATION_INVALID_CMD;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e006      	b.n	8000f44 <OperationDispatcher_Dispatch+0x11c>

        default:
            log_error("Invalid Command code received");
 8000f36:	4811      	ldr	r0, [pc, #68]	@ (8000f7c <OperationDispatcher_Dispatch+0x154>)
 8000f38:	f003 f868 	bl	800400c <log_error>
            log_error("Returning Failure Status code");
 8000f3c:	4810      	ldr	r0, [pc, #64]	@ (8000f80 <OperationDispatcher_Dispatch+0x158>)
 8000f3e:	f003 f865 	bl	800400c <log_error>
            return OPERATION_INVALID_CMD;
 8000f42:	2301      	movs	r3, #1
    }
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	08017d14 	.word	0x08017d14
 8000f50:	08017d2c 	.word	0x08017d2c
 8000f54:	08017d4c 	.word	0x08017d4c
 8000f58:	08017d6c 	.word	0x08017d6c
 8000f5c:	08017d88 	.word	0x08017d88
 8000f60:	08017da0 	.word	0x08017da0
 8000f64:	08017db8 	.word	0x08017db8
 8000f68:	08017dd0 	.word	0x08017dd0
 8000f6c:	08017df4 	.word	0x08017df4
 8000f70:	08017e14 	.word	0x08017e14
 8000f74:	08017e34 	.word	0x08017e34
 8000f78:	08017e4c 	.word	0x08017e4c
 8000f7c:	08017e6c 	.word	0x08017e6c
 8000f80:	08017e8c 	.word	0x08017e8c

08000f84 <ConvertKeyIDToUint32>:
#define KEYID_LEN		4
#define OUT_KEYID_POS	0
#define OUT_PT_POS		4

static uint32_t ConvertKeyIDToUint32(const uint8_t keyID[4])
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
    return ((uint32_t)keyID[0]) |
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
           ((uint32_t)keyID[1] << 8) |
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	3301      	adds	r3, #1
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	021b      	lsls	r3, r3, #8
    return ((uint32_t)keyID[0]) |
 8000f9a:	431a      	orrs	r2, r3
           ((uint32_t)keyID[2] << 16) |
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3302      	adds	r3, #2
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	041b      	lsls	r3, r3, #16
           ((uint32_t)keyID[1] << 8) |
 8000fa4:	431a      	orrs	r2, r3
           ((uint32_t)keyID[3] << 24);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3303      	adds	r3, #3
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	061b      	lsls	r3, r3, #24
           ((uint32_t)keyID[2] << 16) |
 8000fae:	4313      	orrs	r3, r2
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <DecryptHandler_Decrypt>:

OperationStatus_t DecryptHandler_Decrypt(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b08b      	sub	sp, #44	@ 0x2c
 8000fc0:	af02      	add	r7, sp, #8
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
	log_info("Handling Decryption operation.");
 8000fc6:	485c      	ldr	r0, [pc, #368]	@ (8001138 <DecryptHandler_Decrypt+0x17c>)
 8000fc8:	f002 ffec 	bl	8003fa4 <log_info>
	// Check if either Request or Response Packet is NULL
	if (!request )
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d104      	bne.n	8000fdc <DecryptHandler_Decrypt+0x20>
	{
		log_error("Request Packet is NULL.");
 8000fd2:	485a      	ldr	r0, [pc, #360]	@ (800113c <DecryptHandler_Decrypt+0x180>)
 8000fd4:	f003 f81a 	bl	800400c <log_error>
		return OPERATION_INVALID_INPUT_DATA;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	e0a9      	b.n	8001130 <DecryptHandler_Decrypt+0x174>
	}
	// Initialize variable to store Codec operation status
	int codec_result = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61fb      	str	r3, [r7, #28]
	// Declare variables to assign Key and IV state
	uint8_t keyState, ivState;
	// Initialize array to store Key ID
	uint8_t keyID[KEYID_LEN] = {0};
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]
	uint32_t keyID_32 = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61bb      	str	r3, [r7, #24]
	// Declare array to hold Key and IV data in data section
	static uint8_t keyData[DEC_KEY_SIZE], ivData[DEC_IV_SIZE];
	// Parse out Key State and IV state from Input Data Stream
	keyState = request->inputData[KEY_STATE_POS];
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	7a1b      	ldrb	r3, [r3, #8]
 8000fec:	75fb      	strb	r3, [r7, #23]
	ivState = request->inputData[IV_STATE_POS];
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	7e5b      	ldrb	r3, [r3, #25]
 8000ff2:	75bb      	strb	r3, [r7, #22]
	// Calculate the size of input Ciphertext
	const uint16_t ciphertextLen = (request->inputSize) - DEC_KEY_SIZE - DEC_IV_SIZE - 2;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	88db      	ldrh	r3, [r3, #6]
 8000ff8:	3b22      	subs	r3, #34	@ 0x22
 8000ffa:	82bb      	strh	r3, [r7, #20]
	// Declare array to hold the output Ciphertext on the stack
	uint8_t *plaintextData = malloc(ciphertextLen);
 8000ffc:	8abb      	ldrh	r3, [r7, #20]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f015 f9c6 	bl	8016390 <malloc>
 8001004:	4603      	mov	r3, r0
 8001006:	613b      	str	r3, [r7, #16]
	// Check if the dynamically allocated array is NULL or not
	if (plaintextData == NULL)
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d104      	bne.n	8001018 <DecryptHandler_Decrypt+0x5c>
	{
	    log_error("Failed to allocate buffer for Plaintext");
 800100e:	484c      	ldr	r0, [pc, #304]	@ (8001140 <DecryptHandler_Decrypt+0x184>)
 8001010:	f002 fffc 	bl	800400c <log_error>
	    return OPERATION_HEAP_FAIL;
 8001014:	2304      	movs	r3, #4
 8001016:	e08b      	b.n	8001130 <DecryptHandler_Decrypt+0x174>
	}
	// Copy the IV from the Data Stream
	switch(ivState)
 8001018:	7dbb      	ldrb	r3, [r7, #22]
 800101a:	2bc1      	cmp	r3, #193	@ 0xc1
 800101c:	d002      	beq.n	8001024 <DecryptHandler_Decrypt+0x68>
 800101e:	2bc2      	cmp	r3, #194	@ 0xc2
 8001020:	d00d      	beq.n	800103e <DecryptHandler_Decrypt+0x82>
 8001022:	e019      	b.n	8001058 <DecryptHandler_Decrypt+0x9c>
	{
		case DEC_IV_BYIV:
			log_info("Using a User-Provided Initialization Vector.");
 8001024:	4847      	ldr	r0, [pc, #284]	@ (8001144 <DecryptHandler_Decrypt+0x188>)
 8001026:	f002 ffbd 	bl	8003fa4 <log_info>
			memcpy(ivData, &request->inputData[IV_DATA_POS], DEC_IV_SIZE);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	331a      	adds	r3, #26
 800102e:	4a46      	ldr	r2, [pc, #280]	@ (8001148 <DecryptHandler_Decrypt+0x18c>)
 8001030:	4614      	mov	r4, r2
 8001032:	6818      	ldr	r0, [r3, #0]
 8001034:	6859      	ldr	r1, [r3, #4]
 8001036:	689a      	ldr	r2, [r3, #8]
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			break;
 800103c:	e010      	b.n	8001060 <DecryptHandler_Decrypt+0xa4>

		case DEC_IV_DABA:
			log_info("Generating a Random Initialization Vector");
 800103e:	4843      	ldr	r0, [pc, #268]	@ (800114c <DecryptHandler_Decrypt+0x190>)
 8001040:	f002 ffb0 	bl	8003fa4 <log_info>
			memcpy(ivData, &request->inputData[IV_DATA_POS], DEC_IV_SIZE);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	331a      	adds	r3, #26
 8001048:	4a3f      	ldr	r2, [pc, #252]	@ (8001148 <DecryptHandler_Decrypt+0x18c>)
 800104a:	4614      	mov	r4, r2
 800104c:	6818      	ldr	r0, [r3, #0]
 800104e:	6859      	ldr	r1, [r3, #4]
 8001050:	689a      	ldr	r2, [r3, #8]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			break;
 8001056:	e003      	b.n	8001060 <DecryptHandler_Decrypt+0xa4>

		default:
			log_warn("IV State field not Recognized.");
 8001058:	483d      	ldr	r0, [pc, #244]	@ (8001150 <DecryptHandler_Decrypt+0x194>)
 800105a:	f002 ffbd 	bl	8003fd8 <log_warn>
			break;
 800105e:	bf00      	nop
	}
	// Copy the Key/Key ID from Data Stream
	switch(keyState)
 8001060:	7dfb      	ldrb	r3, [r7, #23]
 8001062:	2bd1      	cmp	r3, #209	@ 0xd1
 8001064:	d002      	beq.n	800106c <DecryptHandler_Decrypt+0xb0>
 8001066:	2bd2      	cmp	r3, #210	@ 0xd2
 8001068:	d020      	beq.n	80010ac <DecryptHandler_Decrypt+0xf0>
 800106a:	e031      	b.n	80010d0 <DecryptHandler_Decrypt+0x114>
	{
		case DEC_KEY_BYOK:
			log_info("Using a User-Provided Decryption Key.");
 800106c:	4839      	ldr	r0, [pc, #228]	@ (8001154 <DecryptHandler_Decrypt+0x198>)
 800106e:	f002 ff99 	bl	8003fa4 <log_info>
			memcpy(keyData, &request->inputData[KEY_DATA_POS], DEC_KEY_SIZE);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3309      	adds	r3, #9
 8001076:	4a38      	ldr	r2, [pc, #224]	@ (8001158 <DecryptHandler_Decrypt+0x19c>)
 8001078:	4614      	mov	r4, r2
 800107a:	6818      	ldr	r0, [r3, #0]
 800107c:	6859      	ldr	r1, [r3, #4]
 800107e:	689a      	ldr	r2, [r3, #8]
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			GenerateKEYID(keyID);
 8001084:	f107 030c 	add.w	r3, r7, #12
 8001088:	4618      	mov	r0, r3
 800108a:	f002 f91d 	bl	80032c8 <GenerateKEYID>
			keyID_32 = ConvertKeyIDToUint32(keyID);
 800108e:	f107 030c 	add.w	r3, r7, #12
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff ff76 	bl	8000f84 <ConvertKeyIDToUint32>
 8001098:	61b8      	str	r0, [r7, #24]
			KeyManager_AddKey(keyID_32, keyData, DEC_KEY_SIZE, KEY_ORIGIN_PROVIDED, USAGE_DECRYPT);
 800109a:	2302      	movs	r3, #2
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	2300      	movs	r3, #0
 80010a0:	2210      	movs	r2, #16
 80010a2:	492d      	ldr	r1, [pc, #180]	@ (8001158 <DecryptHandler_Decrypt+0x19c>)
 80010a4:	69b8      	ldr	r0, [r7, #24]
 80010a6:	f002 fa25 	bl	80034f4 <KeyManager_AddKey>
			break;
 80010aa:	e015      	b.n	80010d8 <DecryptHandler_Decrypt+0x11c>

		case DEC_KEY_DABA:
			log_info("Searching for a stored Key in the Key Manager.");
 80010ac:	482b      	ldr	r0, [pc, #172]	@ (800115c <DecryptHandler_Decrypt+0x1a0>)
 80010ae:	f002 ff79 	bl	8003fa4 <log_info>
			memcpy(keyID, &request->inputData[KEY_DATA_POS], KEYID_LEN);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3309      	adds	r3, #9
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	60fb      	str	r3, [r7, #12]
			keyID_32 = ConvertKeyIDToUint32(keyID);
 80010ba:	f107 030c 	add.w	r3, r7, #12
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff ff60 	bl	8000f84 <ConvertKeyIDToUint32>
 80010c4:	61b8      	str	r0, [r7, #24]
			KeyManager_GetKey(keyID_32, keyData);
 80010c6:	4924      	ldr	r1, [pc, #144]	@ (8001158 <DecryptHandler_Decrypt+0x19c>)
 80010c8:	69b8      	ldr	r0, [r7, #24]
 80010ca:	f002 fb41 	bl	8003750 <KeyManager_GetKey>
			break;
 80010ce:	e003      	b.n	80010d8 <DecryptHandler_Decrypt+0x11c>

		default:
			log_warn("Key State field not Recognized.");
 80010d0:	4823      	ldr	r0, [pc, #140]	@ (8001160 <DecryptHandler_Decrypt+0x1a4>)
 80010d2:	f002 ff81 	bl	8003fd8 <log_warn>
			break;
 80010d6:	bf00      	nop
	}
	// Execute the Encryption operation
	codec_result = CryptoEngine_Codec(plaintextData,
 80010d8:	8ab9      	ldrh	r1, [r7, #20]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 80010e0:	8abb      	ldrh	r3, [r7, #20]
 80010e2:	481d      	ldr	r0, [pc, #116]	@ (8001158 <DecryptHandler_Decrypt+0x19c>)
 80010e4:	9001      	str	r0, [sp, #4]
 80010e6:	4818      	ldr	r0, [pc, #96]	@ (8001148 <DecryptHandler_Decrypt+0x18c>)
 80010e8:	9000      	str	r0, [sp, #0]
 80010ea:	6938      	ldr	r0, [r7, #16]
 80010ec:	f001 fe3e 	bl	8002d6c <CryptoEngine_Codec>
 80010f0:	61f8      	str	r0, [r7, #28]
									  &request->inputData[CIPHERTEXT_POS],
									  ciphertextLen,
									  ivData,
									  keyData);
	// Check if Encryption operation was success
	if(codec_result == CODEC_FAILURE)
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d104      	bne.n	8001102 <DecryptHandler_Decrypt+0x146>
	{
		log_error("Decryption operation failed.");
 80010f8:	481a      	ldr	r0, [pc, #104]	@ (8001164 <DecryptHandler_Decrypt+0x1a8>)
 80010fa:	f002 ff87 	bl	800400c <log_error>
		return OPERATION_DECRYPTION_FAIL;
 80010fe:	2306      	movs	r3, #6
 8001100:	e016      	b.n	8001130 <DecryptHandler_Decrypt+0x174>
	}
	log_info("Input Data has been Decrypted. Building packet now.");
 8001102:	4819      	ldr	r0, [pc, #100]	@ (8001168 <DecryptHandler_Decrypt+0x1ac>)
 8001104:	f002 ff4e 	bl	8003fa4 <log_info>
	// Set the output size in Response Packet
	response->outputSize = ciphertextLen + KEYID_LEN;
 8001108:	8abb      	ldrh	r3, [r7, #20]
 800110a:	3304      	adds	r3, #4
 800110c:	b29a      	uxth	r2, r3
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	809a      	strh	r2, [r3, #4]
	// Copy the Key ID into Output Data Buffer
	memcpy(&response->outputData[OUT_KEYID_POS], keyID, KEYID_LEN);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	3306      	adds	r3, #6
 8001116:	68fa      	ldr	r2, [r7, #12]
 8001118:	601a      	str	r2, [r3, #0]
	// Copy the Ciphertext into Output Data Buffer
	memcpy(&response->outputData[OUT_PT_POS], plaintextData, ciphertextLen);
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	330a      	adds	r3, #10
 800111e:	8aba      	ldrh	r2, [r7, #20]
 8001120:	6939      	ldr	r1, [r7, #16]
 8001122:	4618      	mov	r0, r3
 8001124:	f015 fc31 	bl	801698a <memcpy>
	log_info("Decryption operation completed.");
 8001128:	4810      	ldr	r0, [pc, #64]	@ (800116c <DecryptHandler_Decrypt+0x1b0>)
 800112a:	f002 ff3b 	bl	8003fa4 <log_info>
	// Return the OperationStatus value
	return OPERATION_SUCCESS;
 800112e:	2300      	movs	r3, #0
}
 8001130:	4618      	mov	r0, r3
 8001132:	3724      	adds	r7, #36	@ 0x24
 8001134:	46bd      	mov	sp, r7
 8001136:	bd90      	pop	{r4, r7, pc}
 8001138:	08017eac 	.word	0x08017eac
 800113c:	08017ecc 	.word	0x08017ecc
 8001140:	08017ee4 	.word	0x08017ee4
 8001144:	08017f0c 	.word	0x08017f0c
 8001148:	200001b8 	.word	0x200001b8
 800114c:	08017f3c 	.word	0x08017f3c
 8001150:	08017f68 	.word	0x08017f68
 8001154:	08017f88 	.word	0x08017f88
 8001158:	200001c8 	.word	0x200001c8
 800115c:	08017fb0 	.word	0x08017fb0
 8001160:	08017fe0 	.word	0x08017fe0
 8001164:	08018000 	.word	0x08018000
 8001168:	08018020 	.word	0x08018020
 800116c:	08018054 	.word	0x08018054

08001170 <ConvertKeyIDToUint32>:
#define OUT_KEYID_POS	0
#define OUT_IV_POS		4
#define OUT_CT_POS		20

static uint32_t ConvertKeyIDToUint32(const uint8_t keyID[4])
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
    return ((uint32_t)keyID[0]) |
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	461a      	mov	r2, r3
           ((uint32_t)keyID[1] << 8) |
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3301      	adds	r3, #1
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	021b      	lsls	r3, r3, #8
    return ((uint32_t)keyID[0]) |
 8001186:	431a      	orrs	r2, r3
           ((uint32_t)keyID[2] << 16) |
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3302      	adds	r3, #2
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	041b      	lsls	r3, r3, #16
           ((uint32_t)keyID[1] << 8) |
 8001190:	431a      	orrs	r2, r3
           ((uint32_t)keyID[3] << 24);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3303      	adds	r3, #3
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	061b      	lsls	r3, r3, #24
           ((uint32_t)keyID[2] << 16) |
 800119a:	4313      	orrs	r3, r2
}
 800119c:	4618      	mov	r0, r3
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <EncryptHandler_Encrypt>:

OperationStatus_t EncryptHandler_Encrypt(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 80011a8:	b5b0      	push	{r4, r5, r7, lr}
 80011aa:	b08a      	sub	sp, #40	@ 0x28
 80011ac:	af02      	add	r7, sp, #8
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
	log_info("Handling Encryption operation.");
 80011b2:	486d      	ldr	r0, [pc, #436]	@ (8001368 <EncryptHandler_Encrypt+0x1c0>)
 80011b4:	f002 fef6 	bl	8003fa4 <log_info>
	// Check if either Request or Response Packet is NULL
	if (!request )
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d104      	bne.n	80011c8 <EncryptHandler_Encrypt+0x20>
	{
		log_error("Request Packet is NULL.");
 80011be:	486b      	ldr	r0, [pc, #428]	@ (800136c <EncryptHandler_Encrypt+0x1c4>)
 80011c0:	f002 ff24 	bl	800400c <log_error>
		return OPERATION_INVALID_INPUT_DATA;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e0cb      	b.n	8001360 <EncryptHandler_Encrypt+0x1b8>
	}
	// Initialize variable to store Codec operation status
	int codec_result = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	61fb      	str	r3, [r7, #28]
	// Declare variables to assign Key and IV state
	uint8_t keyState, ivState;
	// Initialize variable to store Key ID
	uint8_t keyID[KEYID_LEN] = {0};
 80011cc:	2300      	movs	r3, #0
 80011ce:	60fb      	str	r3, [r7, #12]
	uint32_t keyID_32 = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61bb      	str	r3, [r7, #24]
	// Declare array to hold Key and IV data in data section
	static uint8_t keyData[ENC_KEY_SIZE], ivData[ENC_IV_SIZE];
	// Parse out Key State and IV state from Input Data Stream
	keyState = request->inputData[KEY_STATE_POS];
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	7a1b      	ldrb	r3, [r3, #8]
 80011d8:	75fb      	strb	r3, [r7, #23]
	ivState = request->inputData[IV_STATE_POS];
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	7e5b      	ldrb	r3, [r3, #25]
 80011de:	75bb      	strb	r3, [r7, #22]
	// Calculate the size of input Plaintext
	uint16_t plaintextLen = (request->inputSize) - ENC_KEY_SIZE - ENC_IV_SIZE - KEY_STATE_SIZE - IV_STATE_SIZE;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	88db      	ldrh	r3, [r3, #6]
 80011e4:	3b22      	subs	r3, #34	@ 0x22
 80011e6:	82bb      	strh	r3, [r7, #20]
	// Declare array to hold the output Ciphertext on the stack
	uint8_t *ciphertextData = malloc(plaintextLen);
 80011e8:	8abb      	ldrh	r3, [r7, #20]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f015 f8d0 	bl	8016390 <malloc>
 80011f0:	4603      	mov	r3, r0
 80011f2:	613b      	str	r3, [r7, #16]
	// Check if the dynamically allocated array is NULL or not
	if (ciphertextData == NULL)
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d104      	bne.n	8001204 <EncryptHandler_Encrypt+0x5c>
	{
	    log_error("Failed to allocate buffer for Ciphertext");
 80011fa:	485d      	ldr	r0, [pc, #372]	@ (8001370 <EncryptHandler_Encrypt+0x1c8>)
 80011fc:	f002 ff06 	bl	800400c <log_error>
	    return OPERATION_HEAP_FAIL;
 8001200:	2304      	movs	r3, #4
 8001202:	e0ad      	b.n	8001360 <EncryptHandler_Encrypt+0x1b8>
	}
	// Copy the IV from Data Stream or Generate an IV
	switch(ivState)
 8001204:	7dbb      	ldrb	r3, [r7, #22]
 8001206:	2be1      	cmp	r3, #225	@ 0xe1
 8001208:	d002      	beq.n	8001210 <EncryptHandler_Encrypt+0x68>
 800120a:	2be2      	cmp	r3, #226	@ 0xe2
 800120c:	d00d      	beq.n	800122a <EncryptHandler_Encrypt+0x82>
 800120e:	e013      	b.n	8001238 <EncryptHandler_Encrypt+0x90>
	{
		case ENC_IV_BYIV:
			log_info("Using a User-Provided Initialization Vector.");
 8001210:	4858      	ldr	r0, [pc, #352]	@ (8001374 <EncryptHandler_Encrypt+0x1cc>)
 8001212:	f002 fec7 	bl	8003fa4 <log_info>
			memcpy(ivData, &request->inputData[IV_DATA_POS], ENC_IV_SIZE);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	331a      	adds	r3, #26
 800121a:	4a57      	ldr	r2, [pc, #348]	@ (8001378 <EncryptHandler_Encrypt+0x1d0>)
 800121c:	4614      	mov	r4, r2
 800121e:	6818      	ldr	r0, [r3, #0]
 8001220:	6859      	ldr	r1, [r3, #4]
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			break;
 8001228:	e00a      	b.n	8001240 <EncryptHandler_Encrypt+0x98>

		case ENC_IV_GYIV:
			log_info("Generating a Random Initialization Vector");
 800122a:	4854      	ldr	r0, [pc, #336]	@ (800137c <EncryptHandler_Encrypt+0x1d4>)
 800122c:	f002 feba 	bl	8003fa4 <log_info>
			GenerateIV(ivData);
 8001230:	4851      	ldr	r0, [pc, #324]	@ (8001378 <EncryptHandler_Encrypt+0x1d0>)
 8001232:	f002 f83c 	bl	80032ae <GenerateIV>
			break;
 8001236:	e003      	b.n	8001240 <EncryptHandler_Encrypt+0x98>

		default:
			log_warn("IV State field not Recognized.");
 8001238:	4851      	ldr	r0, [pc, #324]	@ (8001380 <EncryptHandler_Encrypt+0x1d8>)
 800123a:	f002 fecd 	bl	8003fd8 <log_warn>
			break;
 800123e:	bf00      	nop
	}
	// Copy the Key/Key ID from Data Stream or Generate a Key
	switch(keyState)
 8001240:	7dfb      	ldrb	r3, [r7, #23]
 8001242:	2bf3      	cmp	r3, #243	@ 0xf3
 8001244:	d026      	beq.n	8001294 <EncryptHandler_Encrypt+0xec>
 8001246:	2bf3      	cmp	r3, #243	@ 0xf3
 8001248:	dc50      	bgt.n	80012ec <EncryptHandler_Encrypt+0x144>
 800124a:	2bf1      	cmp	r3, #241	@ 0xf1
 800124c:	d002      	beq.n	8001254 <EncryptHandler_Encrypt+0xac>
 800124e:	2bf2      	cmp	r3, #242	@ 0xf2
 8001250:	d032      	beq.n	80012b8 <EncryptHandler_Encrypt+0x110>
 8001252:	e04b      	b.n	80012ec <EncryptHandler_Encrypt+0x144>
	{
		case ENC_KEY_BYOK:
			log_info("Using a User-Provided Encryption Key.");
 8001254:	484b      	ldr	r0, [pc, #300]	@ (8001384 <EncryptHandler_Encrypt+0x1dc>)
 8001256:	f002 fea5 	bl	8003fa4 <log_info>
			memcpy(keyData, &request->inputData[KEY_DATA_POS], ENC_KEY_SIZE);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	3309      	adds	r3, #9
 800125e:	4a4a      	ldr	r2, [pc, #296]	@ (8001388 <EncryptHandler_Encrypt+0x1e0>)
 8001260:	4614      	mov	r4, r2
 8001262:	6818      	ldr	r0, [r3, #0]
 8001264:	6859      	ldr	r1, [r3, #4]
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			GenerateKEYID(keyID);
 800126c:	f107 030c 	add.w	r3, r7, #12
 8001270:	4618      	mov	r0, r3
 8001272:	f002 f829 	bl	80032c8 <GenerateKEYID>
			keyID_32 = ConvertKeyIDToUint32(keyID);
 8001276:	f107 030c 	add.w	r3, r7, #12
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff ff78 	bl	8001170 <ConvertKeyIDToUint32>
 8001280:	61b8      	str	r0, [r7, #24]
			KeyManager_AddKey(keyID_32, keyData, ENC_KEY_SIZE, KEY_ORIGIN_PROVIDED, USAGE_ENCRYPT);
 8001282:	2301      	movs	r3, #1
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	2300      	movs	r3, #0
 8001288:	2210      	movs	r2, #16
 800128a:	493f      	ldr	r1, [pc, #252]	@ (8001388 <EncryptHandler_Encrypt+0x1e0>)
 800128c:	69b8      	ldr	r0, [r7, #24]
 800128e:	f002 f931 	bl	80034f4 <KeyManager_AddKey>
			break;
 8001292:	e02f      	b.n	80012f4 <EncryptHandler_Encrypt+0x14c>

		case ENC_KEY_DABA:
			log_info("Searching for a stored Key in the Key Manager.");
 8001294:	483d      	ldr	r0, [pc, #244]	@ (800138c <EncryptHandler_Encrypt+0x1e4>)
 8001296:	f002 fe85 	bl	8003fa4 <log_info>
			memcpy(keyID, &request->inputData[KEY_DATA_POS], KEYID_LEN);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	3309      	adds	r3, #9
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	60fb      	str	r3, [r7, #12]
			keyID_32 = ConvertKeyIDToUint32(keyID);
 80012a2:	f107 030c 	add.w	r3, r7, #12
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff ff62 	bl	8001170 <ConvertKeyIDToUint32>
 80012ac:	61b8      	str	r0, [r7, #24]
			KeyManager_GetKey(keyID_32, keyData);
 80012ae:	4936      	ldr	r1, [pc, #216]	@ (8001388 <EncryptHandler_Encrypt+0x1e0>)
 80012b0:	69b8      	ldr	r0, [r7, #24]
 80012b2:	f002 fa4d 	bl	8003750 <KeyManager_GetKey>
			break;
 80012b6:	e01d      	b.n	80012f4 <EncryptHandler_Encrypt+0x14c>

		case ENC_KEY_GYOK:
			log_info("Generating a Random Encryption Key.");
 80012b8:	4835      	ldr	r0, [pc, #212]	@ (8001390 <EncryptHandler_Encrypt+0x1e8>)
 80012ba:	f002 fe73 	bl	8003fa4 <log_info>
			GenerateKEYID(keyID);
 80012be:	f107 030c 	add.w	r3, r7, #12
 80012c2:	4618      	mov	r0, r3
 80012c4:	f002 f800 	bl	80032c8 <GenerateKEYID>
			GenerateKEY(keyData);
 80012c8:	482f      	ldr	r0, [pc, #188]	@ (8001388 <EncryptHandler_Encrypt+0x1e0>)
 80012ca:	f001 ffe3 	bl	8003294 <GenerateKEY>
			keyID_32 = ConvertKeyIDToUint32(keyID);
 80012ce:	f107 030c 	add.w	r3, r7, #12
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff ff4c 	bl	8001170 <ConvertKeyIDToUint32>
 80012d8:	61b8      	str	r0, [r7, #24]
			KeyManager_AddKey(keyID_32, keyData, ENC_KEY_SIZE, KEY_ORIGIN_GENERATED, USAGE_ENCRYPT);
 80012da:	2301      	movs	r3, #1
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	2301      	movs	r3, #1
 80012e0:	2210      	movs	r2, #16
 80012e2:	4929      	ldr	r1, [pc, #164]	@ (8001388 <EncryptHandler_Encrypt+0x1e0>)
 80012e4:	69b8      	ldr	r0, [r7, #24]
 80012e6:	f002 f905 	bl	80034f4 <KeyManager_AddKey>
			break;
 80012ea:	e003      	b.n	80012f4 <EncryptHandler_Encrypt+0x14c>

		default:
			log_warn("Key State field not Recognized.");
 80012ec:	4829      	ldr	r0, [pc, #164]	@ (8001394 <EncryptHandler_Encrypt+0x1ec>)
 80012ee:	f002 fe73 	bl	8003fd8 <log_warn>
			break;
 80012f2:	bf00      	nop
	}
	// Execute the Encryption operation
	codec_result = CryptoEngine_Codec(ciphertextData,
 80012f4:	8ab9      	ldrh	r1, [r7, #20]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 80012fc:	8abb      	ldrh	r3, [r7, #20]
 80012fe:	4822      	ldr	r0, [pc, #136]	@ (8001388 <EncryptHandler_Encrypt+0x1e0>)
 8001300:	9001      	str	r0, [sp, #4]
 8001302:	481d      	ldr	r0, [pc, #116]	@ (8001378 <EncryptHandler_Encrypt+0x1d0>)
 8001304:	9000      	str	r0, [sp, #0]
 8001306:	6938      	ldr	r0, [r7, #16]
 8001308:	f001 fd30 	bl	8002d6c <CryptoEngine_Codec>
 800130c:	61f8      	str	r0, [r7, #28]
									  &request->inputData[PLAINTEXT_POS],
									  plaintextLen,
									  ivData,
									  keyData);
	// Check if Encryption operation was success
	if(codec_result == CODEC_FAILURE)
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d104      	bne.n	800131e <EncryptHandler_Encrypt+0x176>
	{
		log_error("Encryption operation failed.");
 8001314:	4820      	ldr	r0, [pc, #128]	@ (8001398 <EncryptHandler_Encrypt+0x1f0>)
 8001316:	f002 fe79 	bl	800400c <log_error>
		return OPERATION_ENCRYPTION_FAIL;
 800131a:	2305      	movs	r3, #5
 800131c:	e020      	b.n	8001360 <EncryptHandler_Encrypt+0x1b8>
	}
	log_info("Input Data has been Encrypted. Building Packet now.");
 800131e:	481f      	ldr	r0, [pc, #124]	@ (800139c <EncryptHandler_Encrypt+0x1f4>)
 8001320:	f002 fe40 	bl	8003fa4 <log_info>
	// Set the output size in Response Packet
	response->outputSize = plaintextLen + KEYID_LEN + ENC_IV_SIZE;
 8001324:	8abb      	ldrh	r3, [r7, #20]
 8001326:	3314      	adds	r3, #20
 8001328:	b29a      	uxth	r2, r3
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	809a      	strh	r2, [r3, #4]
	// Copy the Key ID into Output Data Buffer
	memcpy(&response->outputData[OUT_KEYID_POS], keyID, KEYID_LEN);
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	3306      	adds	r3, #6
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	601a      	str	r2, [r3, #0]
	// Copy the Initialization Vector into Output Data Buffer
	memcpy(&response->outputData[OUT_IV_POS], ivData, ENC_IV_SIZE);
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	330a      	adds	r3, #10
 800133a:	4a0f      	ldr	r2, [pc, #60]	@ (8001378 <EncryptHandler_Encrypt+0x1d0>)
 800133c:	461c      	mov	r4, r3
 800133e:	4615      	mov	r5, r2
 8001340:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001342:	6020      	str	r0, [r4, #0]
 8001344:	6061      	str	r1, [r4, #4]
 8001346:	60a2      	str	r2, [r4, #8]
 8001348:	60e3      	str	r3, [r4, #12]
	// Copy the Ciphertext into Output Data Buffer
	memcpy(&response->outputData[OUT_CT_POS], ciphertextData, plaintextLen);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	331a      	adds	r3, #26
 800134e:	8aba      	ldrh	r2, [r7, #20]
 8001350:	6939      	ldr	r1, [r7, #16]
 8001352:	4618      	mov	r0, r3
 8001354:	f015 fb19 	bl	801698a <memcpy>
	log_info("Encryption operation complete.");
 8001358:	4811      	ldr	r0, [pc, #68]	@ (80013a0 <EncryptHandler_Encrypt+0x1f8>)
 800135a:	f002 fe23 	bl	8003fa4 <log_info>
	// Return the OperationStatus value
	return OPERATION_SUCCESS;
 800135e:	2300      	movs	r3, #0
}
 8001360:	4618      	mov	r0, r3
 8001362:	3720      	adds	r7, #32
 8001364:	46bd      	mov	sp, r7
 8001366:	bdb0      	pop	{r4, r5, r7, pc}
 8001368:	08018074 	.word	0x08018074
 800136c:	08018094 	.word	0x08018094
 8001370:	080180ac 	.word	0x080180ac
 8001374:	080180d8 	.word	0x080180d8
 8001378:	200001d8 	.word	0x200001d8
 800137c:	08018108 	.word	0x08018108
 8001380:	08018134 	.word	0x08018134
 8001384:	08018154 	.word	0x08018154
 8001388:	200001e8 	.word	0x200001e8
 800138c:	0801817c 	.word	0x0801817c
 8001390:	080181ac 	.word	0x080181ac
 8001394:	080181d0 	.word	0x080181d0
 8001398:	080181f0 	.word	0x080181f0
 800139c:	08018210 	.word	0x08018210
 80013a0:	08018244 	.word	0x08018244

080013a4 <ConvertKeyIDToUint32>:
#define OUT_DIGEST_POS			4
#define OUT_DIGEST_SIZE_SHA224	28
#define OUT_DIGEST_SIZE_SHA256	32

static uint32_t ConvertKeyIDToUint32(const uint8_t keyID[4])
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
    return ((uint32_t)keyID[0]) |
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	461a      	mov	r2, r3
           ((uint32_t)keyID[1] << 8) |
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	3301      	adds	r3, #1
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	021b      	lsls	r3, r3, #8
    return ((uint32_t)keyID[0]) |
 80013ba:	431a      	orrs	r2, r3
           ((uint32_t)keyID[2] << 16) |
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3302      	adds	r3, #2
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	041b      	lsls	r3, r3, #16
           ((uint32_t)keyID[1] << 8) |
 80013c4:	431a      	orrs	r2, r3
           ((uint32_t)keyID[3] << 24);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	3303      	adds	r3, #3
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	061b      	lsls	r3, r3, #24
           ((uint32_t)keyID[2] << 16) |
 80013ce:	4313      	orrs	r3, r2
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <HMACHandler_Handle>:

OperationStatus_t HMACHandler_Handle(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 80013dc:	b5b0      	push	{r4, r5, r7, lr}
 80013de:	b08a      	sub	sp, #40	@ 0x28
 80013e0:	af02      	add	r7, sp, #8
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
	log_info("Handling HMAC operation.");
 80013e6:	4880      	ldr	r0, [pc, #512]	@ (80015e8 <HMACHandler_Handle+0x20c>)
 80013e8:	f002 fddc 	bl	8003fa4 <log_info>
	// Check if either Request or Response Packet is NULL
    if (!request )
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d104      	bne.n	80013fc <HMACHandler_Handle+0x20>
    {
    	log_error("Request Packet is NULL.");
 80013f2:	487e      	ldr	r0, [pc, #504]	@ (80015ec <HMACHandler_Handle+0x210>)
 80013f4:	f002 fe0a 	bl	800400c <log_error>
        return OPERATION_INVALID_INPUT_DATA;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e0f0      	b.n	80015de <HMACHandler_Handle+0x202>
	// Declare variable to assign Key state
	uint8_t keyState;
    // Declare variable to assign HMAC Algorithm
    uint32_t AlgorithmSelected;
	// Initialize variable to store Key ID
	uint8_t keyID[OUT_KEYID_SIZE] = {0};
 80013fc:	2300      	movs	r3, #0
 80013fe:	60fb      	str	r3, [r7, #12]
	uint32_t keyID_32 = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	61bb      	str	r3, [r7, #24]
	// Pointer to Location of Input Data to Hash
	const uint8_t *inputDataPtr = &request->inputData[INPUT_DATA_POS];
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3328      	adds	r3, #40	@ 0x28
 8001408:	617b      	str	r3, [r7, #20]
	// Declare array to hold Key and IV data in data section
	static uint8_t keyData[KEY_DATA_SIZE] = {0};
    // Declare a static byte array of 64 elements
    static uint8_t digest[OUT_DIGEST_SIZE_SHA256] = {0};
	// Parse out Key State and IV state from Input Data Stream
	keyState = request->inputData[KEY_STATE_POS];
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	7a1b      	ldrb	r3, [r3, #8]
 800140e:	74fb      	strb	r3, [r7, #19]
	// Calculate the size of input Plaintext
	uint16_t inputDataSize = (request->inputSize) - KEY_STATE_SIZE - KEY_DATA_SIZE;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	88db      	ldrh	r3, [r3, #6]
 8001414:	3b21      	subs	r3, #33	@ 0x21
 8001416:	823b      	strh	r3, [r7, #16]
    // Check the Request Packet's option member
    switch (request->option)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	795b      	ldrb	r3, [r3, #5]
 800141c:	2b31      	cmp	r3, #49	@ 0x31
 800141e:	d002      	beq.n	8001426 <HMACHandler_Handle+0x4a>
 8001420:	2b32      	cmp	r3, #50	@ 0x32
 8001422:	d00a      	beq.n	800143a <HMACHandler_Handle+0x5e>
 8001424:	e013      	b.n	800144e <HMACHandler_Handle+0x72>
    {
    	// SHA224 Hashing Algorithm Selected.
        case OPTION_HMAC_SHA224:
        	log_info("SHA224 HMAC Algorithm Selected.");
 8001426:	4872      	ldr	r0, [pc, #456]	@ (80015f0 <HMACHandler_Handle+0x214>)
 8001428:	f002 fdbc 	bl	8003fa4 <log_info>
        	response->outputSize = OUT_DIGEST_SIZE_SHA224 + OUT_KEYID_SIZE;
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	2220      	movs	r2, #32
 8001430:	809a      	strh	r2, [r3, #4]
        	AlgorithmSelected = HASH_ALGOSELECTION_SHA224;
 8001432:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001436:	61fb      	str	r3, [r7, #28]
            break;
 8001438:	e00e      	b.n	8001458 <HMACHandler_Handle+0x7c>

        // SHA256 Hashing Algorithm Selected.
        case OPTION_HMAC_SHA256:
        	log_info("SHA256 HMAC Algorithm Selected.");
 800143a:	486e      	ldr	r0, [pc, #440]	@ (80015f4 <HMACHandler_Handle+0x218>)
 800143c:	f002 fdb2 	bl	8003fa4 <log_info>
        	response->outputSize = OUT_DIGEST_SIZE_SHA256 + OUT_KEYID_SIZE;
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	2224      	movs	r2, #36	@ 0x24
 8001444:	809a      	strh	r2, [r3, #4]
        	AlgorithmSelected = HASH_ALGOSELECTION_SHA256;
 8001446:	f44f 23c0 	mov.w	r3, #393216	@ 0x60000
 800144a:	61fb      	str	r3, [r7, #28]
            break;
 800144c:	e004      	b.n	8001458 <HMACHandler_Handle+0x7c>

        // Default switch case
        default:
        	log_error("Option Byte not Recognized.");
 800144e:	486a      	ldr	r0, [pc, #424]	@ (80015f8 <HMACHandler_Handle+0x21c>)
 8001450:	f002 fddc 	bl	800400c <log_error>
            return OPERATION_INVALID_OPTION;
 8001454:	2302      	movs	r3, #2
 8001456:	e0c2      	b.n	80015de <HMACHandler_Handle+0x202>
    }
	// Copy the Key/Key ID from Data Stream or Generate a Key
	switch(keyState)
 8001458:	7cfb      	ldrb	r3, [r7, #19]
 800145a:	2bb3      	cmp	r3, #179	@ 0xb3
 800145c:	d02c      	beq.n	80014b8 <HMACHandler_Handle+0xdc>
 800145e:	2bb3      	cmp	r3, #179	@ 0xb3
 8001460:	dc52      	bgt.n	8001508 <HMACHandler_Handle+0x12c>
 8001462:	2bb1      	cmp	r3, #177	@ 0xb1
 8001464:	d002      	beq.n	800146c <HMACHandler_Handle+0x90>
 8001466:	2bb2      	cmp	r3, #178	@ 0xb2
 8001468:	d034      	beq.n	80014d4 <HMACHandler_Handle+0xf8>
 800146a:	e04d      	b.n	8001508 <HMACHandler_Handle+0x12c>
	{
		case HMAC_KEY_BYOK:
			log_info("Using the User-Provided HMAC Key.");
 800146c:	4863      	ldr	r0, [pc, #396]	@ (80015fc <HMACHandler_Handle+0x220>)
 800146e:	f002 fd99 	bl	8003fa4 <log_info>
			memcpy(keyData, &request->inputData[KEY_DATA_POS], KEY_DATA_SIZE);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	3309      	adds	r3, #9
 8001476:	4a62      	ldr	r2, [pc, #392]	@ (8001600 <HMACHandler_Handle+0x224>)
 8001478:	4614      	mov	r4, r2
 800147a:	461d      	mov	r5, r3
 800147c:	6828      	ldr	r0, [r5, #0]
 800147e:	6869      	ldr	r1, [r5, #4]
 8001480:	68aa      	ldr	r2, [r5, #8]
 8001482:	68eb      	ldr	r3, [r5, #12]
 8001484:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001486:	6928      	ldr	r0, [r5, #16]
 8001488:	6969      	ldr	r1, [r5, #20]
 800148a:	69aa      	ldr	r2, [r5, #24]
 800148c:	69eb      	ldr	r3, [r5, #28]
 800148e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			GenerateKEYID(keyID);
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	4618      	mov	r0, r3
 8001496:	f001 ff17 	bl	80032c8 <GenerateKEYID>
			keyID_32 = ConvertKeyIDToUint32(keyID);
 800149a:	f107 030c 	add.w	r3, r7, #12
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff ff80 	bl	80013a4 <ConvertKeyIDToUint32>
 80014a4:	61b8      	str	r0, [r7, #24]
			KeyManager_AddKey(keyID_32, keyData, HMAC_KEY_SIZE, KEY_ORIGIN_PROVIDED, USAGE_HMAC);
 80014a6:	2304      	movs	r3, #4
 80014a8:	9300      	str	r3, [sp, #0]
 80014aa:	2300      	movs	r3, #0
 80014ac:	2220      	movs	r2, #32
 80014ae:	4954      	ldr	r1, [pc, #336]	@ (8001600 <HMACHandler_Handle+0x224>)
 80014b0:	69b8      	ldr	r0, [r7, #24]
 80014b2:	f002 f81f 	bl	80034f4 <KeyManager_AddKey>
			break;
 80014b6:	e02b      	b.n	8001510 <HMACHandler_Handle+0x134>

		case HMAC_KEY_DABA:
			log_info("Searching for a stored Key in the Key Manager.");
 80014b8:	4852      	ldr	r0, [pc, #328]	@ (8001604 <HMACHandler_Handle+0x228>)
 80014ba:	f002 fd73 	bl	8003fa4 <log_info>
			memcpy(keyData, &request->inputData[KEY_DATA_POS], OUT_KEYID_SIZE);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	3309      	adds	r3, #9
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	461a      	mov	r2, r3
 80014c6:	4b4e      	ldr	r3, [pc, #312]	@ (8001600 <HMACHandler_Handle+0x224>)
 80014c8:	601a      	str	r2, [r3, #0]
			KeyManager_GetKey(keyID_32, keyData);
 80014ca:	494d      	ldr	r1, [pc, #308]	@ (8001600 <HMACHandler_Handle+0x224>)
 80014cc:	69b8      	ldr	r0, [r7, #24]
 80014ce:	f002 f93f 	bl	8003750 <KeyManager_GetKey>
			break;
 80014d2:	e01d      	b.n	8001510 <HMACHandler_Handle+0x134>

		case HMAC_KEY_GYOK:
			log_info("Generating a Random HMAC Key.");
 80014d4:	484c      	ldr	r0, [pc, #304]	@ (8001608 <HMACHandler_Handle+0x22c>)
 80014d6:	f002 fd65 	bl	8003fa4 <log_info>
			GenerateKEYID(keyID);
 80014da:	f107 030c 	add.w	r3, r7, #12
 80014de:	4618      	mov	r0, r3
 80014e0:	f001 fef2 	bl	80032c8 <GenerateKEYID>
			GenerateKEY(keyData);
 80014e4:	4846      	ldr	r0, [pc, #280]	@ (8001600 <HMACHandler_Handle+0x224>)
 80014e6:	f001 fed5 	bl	8003294 <GenerateKEY>
			keyID_32 = ConvertKeyIDToUint32(keyID);
 80014ea:	f107 030c 	add.w	r3, r7, #12
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff ff58 	bl	80013a4 <ConvertKeyIDToUint32>
 80014f4:	61b8      	str	r0, [r7, #24]
			KeyManager_AddKey(keyID_32, keyData, HMAC_KEY_SIZE, KEY_ORIGIN_GENERATED, USAGE_HMAC);
 80014f6:	2304      	movs	r3, #4
 80014f8:	9300      	str	r3, [sp, #0]
 80014fa:	2301      	movs	r3, #1
 80014fc:	2220      	movs	r2, #32
 80014fe:	4940      	ldr	r1, [pc, #256]	@ (8001600 <HMACHandler_Handle+0x224>)
 8001500:	69b8      	ldr	r0, [r7, #24]
 8001502:	f001 fff7 	bl	80034f4 <KeyManager_AddKey>
			break;
 8001506:	e003      	b.n	8001510 <HMACHandler_Handle+0x134>

		default:
			log_warn("Key State field not Recognized.");
 8001508:	4840      	ldr	r0, [pc, #256]	@ (800160c <HMACHandler_Handle+0x230>)
 800150a:	f002 fd65 	bl	8003fd8 <log_warn>
			break;
 800150e:	bf00      	nop
	}

    HAL_HASH_DeInit(&hhash);
 8001510:	483f      	ldr	r0, [pc, #252]	@ (8001610 <HMACHandler_Handle+0x234>)
 8001512:	f005 f979 	bl	8006808 <HAL_HASH_DeInit>

    log_info("De-Initialized HMAC Peripheral.");
 8001516:	483f      	ldr	r0, [pc, #252]	@ (8001614 <HMACHandler_Handle+0x238>)
 8001518:	f002 fd44 	bl	8003fa4 <log_info>

    hhash.Instance = HASH;
 800151c:	4b3c      	ldr	r3, [pc, #240]	@ (8001610 <HMACHandler_Handle+0x234>)
 800151e:	4a3e      	ldr	r2, [pc, #248]	@ (8001618 <HMACHandler_Handle+0x23c>)
 8001520:	601a      	str	r2, [r3, #0]
    hhash.Init.DataType = HASH_BYTE_SWAP;
 8001522:	4b3b      	ldr	r3, [pc, #236]	@ (8001610 <HMACHandler_Handle+0x234>)
 8001524:	2220      	movs	r2, #32
 8001526:	605a      	str	r2, [r3, #4]
    hhash.Init.KeySize = KEY_DATA_SIZE;
 8001528:	4b39      	ldr	r3, [pc, #228]	@ (8001610 <HMACHandler_Handle+0x234>)
 800152a:	2220      	movs	r2, #32
 800152c:	609a      	str	r2, [r3, #8]
    hhash.Init.pKey = (uint8_t *)keyData;
 800152e:	4b38      	ldr	r3, [pc, #224]	@ (8001610 <HMACHandler_Handle+0x234>)
 8001530:	4a33      	ldr	r2, [pc, #204]	@ (8001600 <HMACHandler_Handle+0x224>)
 8001532:	60da      	str	r2, [r3, #12]
    hhash.Init.Algorithm = HASH_ALGOSELECTION_SHA256;
 8001534:	4b36      	ldr	r3, [pc, #216]	@ (8001610 <HMACHandler_Handle+0x234>)
 8001536:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 800153a:	611a      	str	r2, [r3, #16]
    if (HAL_HASH_Init(&hhash) != HAL_OK)
 800153c:	4834      	ldr	r0, [pc, #208]	@ (8001610 <HMACHandler_Handle+0x234>)
 800153e:	f005 f92b 	bl	8006798 <HAL_HASH_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d004      	beq.n	8001552 <HMACHandler_Handle+0x176>
    {
    	log_error("Hash Peripheral Initialization failed.");
 8001548:	4834      	ldr	r0, [pc, #208]	@ (800161c <HMACHandler_Handle+0x240>)
 800154a:	f002 fd5f 	bl	800400c <log_error>
        return OPERATION_HMAC_FAIL;
 800154e:	2308      	movs	r3, #8
 8001550:	e045      	b.n	80015de <HMACHandler_Handle+0x202>
    }

    log_info("Re-initialized HASH Peripheral.");
 8001552:	4833      	ldr	r0, [pc, #204]	@ (8001620 <HMACHandler_Handle+0x244>)
 8001554:	f002 fd26 	bl	8003fa4 <log_info>

    /* Compute HMAC SHA2 */
    if (HAL_HASH_HMAC_Start(&hhash, inputDataPtr, inputDataSize, digest, 0xFF) != HAL_OK)
 8001558:	8a3a      	ldrh	r2, [r7, #16]
 800155a:	23ff      	movs	r3, #255	@ 0xff
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	4b31      	ldr	r3, [pc, #196]	@ (8001624 <HMACHandler_Handle+0x248>)
 8001560:	6979      	ldr	r1, [r7, #20]
 8001562:	482b      	ldr	r0, [pc, #172]	@ (8001610 <HMACHandler_Handle+0x234>)
 8001564:	f005 f9e0 	bl	8006928 <HAL_HASH_HMAC_Start>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d004      	beq.n	8001578 <HMACHandler_Handle+0x19c>
    {
        log_error("HMAC Operation Failed.");
 800156e:	482e      	ldr	r0, [pc, #184]	@ (8001628 <HMACHandler_Handle+0x24c>)
 8001570:	f002 fd4c 	bl	800400c <log_error>
        return OPERATION_HMAC_FAIL;
 8001574:	2308      	movs	r3, #8
 8001576:	e032      	b.n	80015de <HMACHandler_Handle+0x202>
    }
    log_info("Generated HMAC Digest successfully.");
 8001578:	482c      	ldr	r0, [pc, #176]	@ (800162c <HMACHandler_Handle+0x250>)
 800157a:	f002 fd13 	bl	8003fa4 <log_info>
    log_info("Copying HMAC Digest into Response Packet.");
 800157e:	482c      	ldr	r0, [pc, #176]	@ (8001630 <HMACHandler_Handle+0x254>)
 8001580:	f002 fd10 	bl	8003fa4 <log_info>
    // Copy Key ID into Response Packet structure
    memcpy(&response->outputData[OUT_KEYID_POS], keyID, OUT_KEYID_SIZE);
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	3306      	adds	r3, #6
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	601a      	str	r2, [r3, #0]
    // Copy HMAC Digest into Response Packet structure
    switch(AlgorithmSelected)
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	2b31      	cmp	r3, #49	@ 0x31
 8001590:	d003      	beq.n	800159a <HMACHandler_Handle+0x1be>
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	2b32      	cmp	r3, #50	@ 0x32
 8001596:	d00e      	beq.n	80015b6 <HMACHandler_Handle+0x1da>
 8001598:	e01d      	b.n	80015d6 <HMACHandler_Handle+0x1fa>
    {
		case OPTION_HMAC_SHA224:
			// Dummy word to zero the last 4-bytes of SHA224 digest
			uint8_t buffer[OUT_DIGEST_SIZE_SHA256 - OUT_DIGEST_SIZE_SHA224] = {0};
 800159a:	2300      	movs	r3, #0
 800159c:	60bb      	str	r3, [r7, #8]
			// Copying the 28-byte Digest into Response Structure
			memcpy(&response->outputData[OUT_DIGEST_POS], digest, OUT_DIGEST_SIZE_SHA224);
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	330a      	adds	r3, #10
 80015a2:	221c      	movs	r2, #28
 80015a4:	491f      	ldr	r1, [pc, #124]	@ (8001624 <HMACHandler_Handle+0x248>)
 80015a6:	4618      	mov	r0, r3
 80015a8:	f015 f9ef 	bl	801698a <memcpy>
			// Copying zero word to fill last 4-bytes of Digest space in Response Structure
			memcpy(&response->outputData[OUT_DIGEST_POS + OUT_DIGEST_SIZE_SHA224], buffer, OUT_DIGEST_SIZE_SHA256 - OUT_DIGEST_SIZE_SHA224);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	3326      	adds	r3, #38	@ 0x26
 80015b0:	68ba      	ldr	r2, [r7, #8]
 80015b2:	601a      	str	r2, [r3, #0]
			break;
 80015b4:	e00f      	b.n	80015d6 <HMACHandler_Handle+0x1fa>

		case OPTION_HMAC_SHA256:
			// Copying the 32-byte SHA256 Digest into Response Structure
			memcpy(&response->outputData[OUT_DIGEST_POS], digest, OUT_DIGEST_SIZE_SHA256);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	330a      	adds	r3, #10
 80015ba:	4a1a      	ldr	r2, [pc, #104]	@ (8001624 <HMACHandler_Handle+0x248>)
 80015bc:	461c      	mov	r4, r3
 80015be:	4615      	mov	r5, r2
 80015c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015c2:	6020      	str	r0, [r4, #0]
 80015c4:	6061      	str	r1, [r4, #4]
 80015c6:	60a2      	str	r2, [r4, #8]
 80015c8:	60e3      	str	r3, [r4, #12]
 80015ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015cc:	6120      	str	r0, [r4, #16]
 80015ce:	6161      	str	r1, [r4, #20]
 80015d0:	61a2      	str	r2, [r4, #24]
 80015d2:	61e3      	str	r3, [r4, #28]
			break;
 80015d4:	bf00      	nop
    }
    log_info("HMAC operation complete.");
 80015d6:	4817      	ldr	r0, [pc, #92]	@ (8001634 <HMACHandler_Handle+0x258>)
 80015d8:	f002 fce4 	bl	8003fa4 <log_info>
    // Return Success
    return OPERATION_SUCCESS;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3720      	adds	r7, #32
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bdb0      	pop	{r4, r5, r7, pc}
 80015e6:	bf00      	nop
 80015e8:	08018264 	.word	0x08018264
 80015ec:	08018280 	.word	0x08018280
 80015f0:	08018298 	.word	0x08018298
 80015f4:	080182b8 	.word	0x080182b8
 80015f8:	080182d8 	.word	0x080182d8
 80015fc:	080182f4 	.word	0x080182f4
 8001600:	200001f8 	.word	0x200001f8
 8001604:	08018318 	.word	0x08018318
 8001608:	08018348 	.word	0x08018348
 800160c:	08018368 	.word	0x08018368
 8001610:	200023ec 	.word	0x200023ec
 8001614:	08018388 	.word	0x08018388
 8001618:	420c0400 	.word	0x420c0400
 800161c:	080183a8 	.word	0x080183a8
 8001620:	080183d0 	.word	0x080183d0
 8001624:	20000218 	.word	0x20000218
 8001628:	080183f0 	.word	0x080183f0
 800162c:	08018408 	.word	0x08018408
 8001630:	0801842c 	.word	0x0801842c
 8001634:	08018458 	.word	0x08018458

08001638 <HashingHandler_Handle>:

extern HASH_HandleTypeDef hhash;
extern void Error_Handler(void);

OperationStatus_t HashingHandler_Handle(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
	log_info("Handling Hashing operation.");
 8001642:	4849      	ldr	r0, [pc, #292]	@ (8001768 <HashingHandler_Handle+0x130>)
 8001644:	f002 fcae 	bl	8003fa4 <log_info>
	// Check if either Request or Response Packet is NULL
    if (!request )
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d101      	bne.n	8001652 <HashingHandler_Handle+0x1a>
    {
        return OPERATION_INVALID_INPUT_DATA;
 800164e:	2303      	movs	r3, #3
 8001650:	e085      	b.n	800175e <HashingHandler_Handle+0x126>
    }
    uint32_t AlgorithmSelected;
    // Declare status as Negative for Early Exit Pattern
    OperationStatus_t status = OPERATION_HASH_FAIL;
 8001652:	2307      	movs	r3, #7
 8001654:	72fb      	strb	r3, [r7, #11]
    // Declare a static byte array of 64 elements
    static uint8_t digest[64] = {0};
    // Check the Request Packet's option member
    switch (request->option)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	795b      	ldrb	r3, [r3, #5]
 800165a:	3b21      	subs	r3, #33	@ 0x21
 800165c:	2b03      	cmp	r3, #3
 800165e:	d833      	bhi.n	80016c8 <HashingHandler_Handle+0x90>
 8001660:	a201      	add	r2, pc, #4	@ (adr r2, 8001668 <HashingHandler_Handle+0x30>)
 8001662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001666:	bf00      	nop
 8001668:	08001679 	.word	0x08001679
 800166c:	0800168d 	.word	0x0800168d
 8001670:	080016a1 	.word	0x080016a1
 8001674:	080016b5 	.word	0x080016b5
    {
    	// SHA224 Hashing Algorithm Selected.
        case OPTION_HASH_SHA224:
        	log_info("SHA224 Hashing Algorithm Selected.");
 8001678:	483c      	ldr	r0, [pc, #240]	@ (800176c <HashingHandler_Handle+0x134>)
 800167a:	f002 fc93 	bl	8003fa4 <log_info>
        	response->outputSize = 28;
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	221c      	movs	r2, #28
 8001682:	809a      	strh	r2, [r3, #4]
        	AlgorithmSelected = HASH_ALGOSELECTION_SHA224;
 8001684:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001688:	60fb      	str	r3, [r7, #12]
            break;
 800168a:	e01f      	b.n	80016cc <HashingHandler_Handle+0x94>

        // SHA256 Hashing Algorithm Selected.
        case OPTION_HASH_SHA256:
        	log_info("SHA256 Hashing Algorithm Selected.");
 800168c:	4838      	ldr	r0, [pc, #224]	@ (8001770 <HashingHandler_Handle+0x138>)
 800168e:	f002 fc89 	bl	8003fa4 <log_info>
        	response->outputSize = 32;
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	2220      	movs	r2, #32
 8001696:	809a      	strh	r2, [r3, #4]
        	AlgorithmSelected = HASH_ALGOSELECTION_SHA256;
 8001698:	f44f 23c0 	mov.w	r3, #393216	@ 0x60000
 800169c:	60fb      	str	r3, [r7, #12]
            break;
 800169e:	e015      	b.n	80016cc <HashingHandler_Handle+0x94>

        // SHA384 Hashing Algorithm Selected.
        case OPTION_HASH_SHA384:
        	log_info("SHA384 Hashing Algorithm Selected.");
 80016a0:	4834      	ldr	r0, [pc, #208]	@ (8001774 <HashingHandler_Handle+0x13c>)
 80016a2:	f002 fc7f 	bl	8003fa4 <log_info>
        	response->outputSize = 48;
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	2230      	movs	r2, #48	@ 0x30
 80016aa:	809a      	strh	r2, [r3, #4]
        	AlgorithmSelected = HASH_ALGOSELECTION_SHA384;
 80016ac:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 80016b0:	60fb      	str	r3, [r7, #12]
            break;
 80016b2:	e00b      	b.n	80016cc <HashingHandler_Handle+0x94>

        // SHA512 Hashing Algorithm Selected.
        case OPTION_HASH_SHA512:
        	log_info("SHA512 Hashing Algorithm Selected.");
 80016b4:	4830      	ldr	r0, [pc, #192]	@ (8001778 <HashingHandler_Handle+0x140>)
 80016b6:	f002 fc75 	bl	8003fa4 <log_info>
        	response->outputSize = 64;
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	2240      	movs	r2, #64	@ 0x40
 80016be:	809a      	strh	r2, [r3, #4]
        	AlgorithmSelected = HASH_ALGOSELECTION_SHA512;
 80016c0:	f44f 13f0 	mov.w	r3, #1966080	@ 0x1e0000
 80016c4:	60fb      	str	r3, [r7, #12]
            break;
 80016c6:	e001      	b.n	80016cc <HashingHandler_Handle+0x94>

        // Default switch case
        default:
            return OPERATION_INVALID_OPTION;
 80016c8:	2302      	movs	r3, #2
 80016ca:	e048      	b.n	800175e <HashingHandler_Handle+0x126>
    }

    status = OPERATION_SUCCESS;
 80016cc:	2300      	movs	r3, #0
 80016ce:	72fb      	strb	r3, [r7, #11]
    HAL_HASH_DeInit(&hhash);
 80016d0:	482a      	ldr	r0, [pc, #168]	@ (800177c <HashingHandler_Handle+0x144>)
 80016d2:	f005 f899 	bl	8006808 <HAL_HASH_DeInit>

    log_info("De-Initialized HASH Peripheral.");
 80016d6:	482a      	ldr	r0, [pc, #168]	@ (8001780 <HashingHandler_Handle+0x148>)
 80016d8:	f002 fc64 	bl	8003fa4 <log_info>

    hhash.Instance = HASH;
 80016dc:	4b27      	ldr	r3, [pc, #156]	@ (800177c <HashingHandler_Handle+0x144>)
 80016de:	4a29      	ldr	r2, [pc, #164]	@ (8001784 <HashingHandler_Handle+0x14c>)
 80016e0:	601a      	str	r2, [r3, #0]
    hhash.Init.DataType = HASH_BYTE_SWAP;
 80016e2:	4b26      	ldr	r3, [pc, #152]	@ (800177c <HashingHandler_Handle+0x144>)
 80016e4:	2220      	movs	r2, #32
 80016e6:	605a      	str	r2, [r3, #4]
    hhash.Init.Algorithm = AlgorithmSelected;
 80016e8:	4a24      	ldr	r2, [pc, #144]	@ (800177c <HashingHandler_Handle+0x144>)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	6113      	str	r3, [r2, #16]
    if (HAL_HASH_Init(&hhash) != HAL_OK)
 80016ee:	4823      	ldr	r0, [pc, #140]	@ (800177c <HashingHandler_Handle+0x144>)
 80016f0:	f005 f852 	bl	8006798 <HAL_HASH_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <HashingHandler_Handle+0xc6>
    {
    	status = OPERATION_HASH_FAIL;
 80016fa:	2307      	movs	r3, #7
 80016fc:	72fb      	strb	r3, [r7, #11]
    }

    log_info("Re-initialized HASH Peripheral.");
 80016fe:	4822      	ldr	r0, [pc, #136]	@ (8001788 <HashingHandler_Handle+0x150>)
 8001700:	f002 fc50 	bl	8003fa4 <log_info>

    if (HAL_HASH_Start_IT(&hhash, (uint8_t*)request->inputData, (uint32_t)request->inputSize, digest) != HAL_OK)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f103 0108 	add.w	r1, r3, #8
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	88db      	ldrh	r3, [r3, #6]
 800170e:	461a      	mov	r2, r3
 8001710:	4b1e      	ldr	r3, [pc, #120]	@ (800178c <HashingHandler_Handle+0x154>)
 8001712:	481a      	ldr	r0, [pc, #104]	@ (800177c <HashingHandler_Handle+0x144>)
 8001714:	f005 f89b 	bl	800684e <HAL_HASH_Start_IT>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HashingHandler_Handle+0xea>
    {
      Error_Handler();
 800171e:	f003 f8d5 	bl	80048cc <Error_Handler>
    }
    while (HAL_HASH_GetState(&hhash) != HAL_HASH_STATE_READY);
 8001722:	bf00      	nop
 8001724:	4815      	ldr	r0, [pc, #84]	@ (800177c <HashingHandler_Handle+0x144>)
 8001726:	f005 fae8 	bl	8006cfa <HAL_HASH_GetState>
 800172a:	4603      	mov	r3, r0
 800172c:	2b01      	cmp	r3, #1
 800172e:	d1f9      	bne.n	8001724 <HashingHandler_Handle+0xec>

    log_info("Generated Hash Digest successfully.");
 8001730:	4817      	ldr	r0, [pc, #92]	@ (8001790 <HashingHandler_Handle+0x158>)
 8001732:	f002 fc37 	bl	8003fa4 <log_info>
    // Check if operation status is Success
    if (status != OPERATION_SUCCESS)
 8001736:	7afb      	ldrb	r3, [r7, #11]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <HashingHandler_Handle+0x108>
    {
        return status;
 800173c:	7afb      	ldrb	r3, [r7, #11]
 800173e:	e00e      	b.n	800175e <HashingHandler_Handle+0x126>
    }
    log_info("Copying Hash Digest into Response Packet.");
 8001740:	4814      	ldr	r0, [pc, #80]	@ (8001794 <HashingHandler_Handle+0x15c>)
 8001742:	f002 fc2f 	bl	8003fa4 <log_info>
    // Copy digest value to Response Packet structure
    memcpy(response->outputData, digest, response->outputSize);
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	1d98      	adds	r0, r3, #6
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	889b      	ldrh	r3, [r3, #4]
 800174e:	461a      	mov	r2, r3
 8001750:	490e      	ldr	r1, [pc, #56]	@ (800178c <HashingHandler_Handle+0x154>)
 8001752:	f015 f91a 	bl	801698a <memcpy>
    log_info("Hash operation complete.");
 8001756:	4810      	ldr	r0, [pc, #64]	@ (8001798 <HashingHandler_Handle+0x160>)
 8001758:	f002 fc24 	bl	8003fa4 <log_info>
    // Return Success
    return OPERATION_SUCCESS;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	08018474 	.word	0x08018474
 800176c:	08018490 	.word	0x08018490
 8001770:	080184b4 	.word	0x080184b4
 8001774:	080184d8 	.word	0x080184d8
 8001778:	080184fc 	.word	0x080184fc
 800177c:	200023ec 	.word	0x200023ec
 8001780:	08018520 	.word	0x08018520
 8001784:	420c0400 	.word	0x420c0400
 8001788:	08018540 	.word	0x08018540
 800178c:	20000238 	.word	0x20000238
 8001790:	08018560 	.word	0x08018560
 8001794:	08018584 	.word	0x08018584
 8001798:	080185b0 	.word	0x080185b0

0800179c <ConvertKeyIDToUint32>:
#include <string.h>

#include "stm32h5xx_hal.h"

static uint32_t ConvertKeyIDToUint32(const uint8_t keyID[4])
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
    return ((uint32_t)keyID[0]) |
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	461a      	mov	r2, r3
           ((uint32_t)keyID[1] << 8) |
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	3301      	adds	r3, #1
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	021b      	lsls	r3, r3, #8
    return ((uint32_t)keyID[0]) |
 80017b2:	431a      	orrs	r2, r3
           ((uint32_t)keyID[2] << 16) |
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3302      	adds	r3, #2
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	041b      	lsls	r3, r3, #16
           ((uint32_t)keyID[1] << 8) |
 80017bc:	431a      	orrs	r2, r3
           ((uint32_t)keyID[3] << 24);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3303      	adds	r3, #3
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	061b      	lsls	r3, r3, #24
           ((uint32_t)keyID[2] << 16) |
 80017c6:	4313      	orrs	r3, r2
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <KeyHandler_Delete>:


OperationStatus_t KeyHandler_Delete(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
    log_info("Handling Key Delete operation.");
 80017de:	481b      	ldr	r0, [pc, #108]	@ (800184c <KeyHandler_Delete+0x78>)
 80017e0:	f002 fbe0 	bl	8003fa4 <log_info>

    // Check if either Request or Response Packet is NULL
    if (!request)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d104      	bne.n	80017f4 <KeyHandler_Delete+0x20>
    {
    	log_error("Request Packet is NULL.");
 80017ea:	4819      	ldr	r0, [pc, #100]	@ (8001850 <KeyHandler_Delete+0x7c>)
 80017ec:	f002 fc0e 	bl	800400c <log_error>
        return OPERATION_INVALID_INPUT_DATA;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e026      	b.n	8001842 <KeyHandler_Delete+0x6e>
    }

    // Declare variables to hold Key ID.
    uint8_t keyID[4] = {0};
 80017f4:	2300      	movs	r3, #0
 80017f6:	60bb      	str	r3, [r7, #8]
    uint32_t keyID_32 = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	60fb      	str	r3, [r7, #12]

    // Retrieve Key ID from Request Packet
    memcpy(keyID, &request->inputData[0], 4);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3308      	adds	r3, #8
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	60bb      	str	r3, [r7, #8]

    // Convert 4-byte Key ID array into 32-bit unsigned integer
    keyID_32 = ConvertKeyIDToUint32(keyID);
 8001804:	f107 0308 	add.w	r3, r7, #8
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff ffc7 	bl	800179c <ConvertKeyIDToUint32>
 800180e:	60f8      	str	r0, [r7, #12]
    // Call Key Manager to Add Key to Storage medium
    if(KeyManager_DeleteKey(keyID_32) != 0)
 8001810:	68f8      	ldr	r0, [r7, #12]
 8001812:	f002 f8c1 	bl	8003998 <KeyManager_DeleteKey>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d004      	beq.n	8001826 <KeyHandler_Delete+0x52>
    {
    	log_error("Failed to Delete Key from Storage Medium.");
 800181c:	480d      	ldr	r0, [pc, #52]	@ (8001854 <KeyHandler_Delete+0x80>)
 800181e:	f002 fbf5 	bl	800400c <log_error>
    	return OPERATION_KEY_DELETE_FAIL;
 8001822:	230d      	movs	r3, #13
 8001824:	e00d      	b.n	8001842 <KeyHandler_Delete+0x6e>
    }

    // Set the Output Size to 2 for zeroing output data
    response->outputSize = 2;
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	2202      	movs	r2, #2
 800182a:	809a      	strh	r2, [r3, #4]
    memset(&response->outputData, 0, 2);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	3306      	adds	r3, #6
 8001830:	2202      	movs	r2, #2
 8001832:	2100      	movs	r1, #0
 8001834:	4618      	mov	r0, r3
 8001836:	f015 f81d 	bl	8016874 <memset>
    log_info("Key Delete Operation complete.");
 800183a:	4807      	ldr	r0, [pc, #28]	@ (8001858 <KeyHandler_Delete+0x84>)
 800183c:	f002 fbb2 	bl	8003fa4 <log_info>
    return OPERATION_SUCCESS;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	080185cc 	.word	0x080185cc
 8001850:	080185ec 	.word	0x080185ec
 8001854:	08018604 	.word	0x08018604
 8001858:	08018630 	.word	0x08018630

0800185c <CalculateKeySize>:
#define MAX_RANDOM_BYTES 4096
// Externally link RNG Instance
extern RNG_HandleTypeDef hrng;

static uint16_t CalculateKeySize(uint8_t option_member)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]
	uint16_t byteSize;
	switch(option_member)
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	3b43      	subs	r3, #67	@ 0x43
 800186a:	2b09      	cmp	r3, #9
 800186c:	d837      	bhi.n	80018de <CalculateKeySize+0x82>
 800186e:	a201      	add	r2, pc, #4	@ (adr r2, 8001874 <CalculateKeySize+0x18>)
 8001870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001874:	0800189d 	.word	0x0800189d
 8001878:	080018a3 	.word	0x080018a3
 800187c:	080018a9 	.word	0x080018a9
 8001880:	080018af 	.word	0x080018af
 8001884:	080018b5 	.word	0x080018b5
 8001888:	080018bb 	.word	0x080018bb
 800188c:	080018c1 	.word	0x080018c1
 8001890:	080018c7 	.word	0x080018c7
 8001894:	080018cf 	.word	0x080018cf
 8001898:	080018d7 	.word	0x080018d7
	{
		case OPTION_RNG_0016: byteSize = 16; 	break;
 800189c:	2310      	movs	r3, #16
 800189e:	81fb      	strh	r3, [r7, #14]
 80018a0:	e01e      	b.n	80018e0 <CalculateKeySize+0x84>
		case OPTION_RNG_0024: byteSize = 24; 	break;
 80018a2:	2318      	movs	r3, #24
 80018a4:	81fb      	strh	r3, [r7, #14]
 80018a6:	e01b      	b.n	80018e0 <CalculateKeySize+0x84>
		case OPTION_RNG_0032: byteSize = 32; 	break;
 80018a8:	2320      	movs	r3, #32
 80018aa:	81fb      	strh	r3, [r7, #14]
 80018ac:	e018      	b.n	80018e0 <CalculateKeySize+0x84>
		case OPTION_RNG_0048: byteSize = 48; 	break;
 80018ae:	2330      	movs	r3, #48	@ 0x30
 80018b0:	81fb      	strh	r3, [r7, #14]
 80018b2:	e015      	b.n	80018e0 <CalculateKeySize+0x84>
		case OPTION_RNG_0064: byteSize = 64; 	break;
 80018b4:	2340      	movs	r3, #64	@ 0x40
 80018b6:	81fb      	strh	r3, [r7, #14]
 80018b8:	e012      	b.n	80018e0 <CalculateKeySize+0x84>
		case OPTION_RNG_0066: byteSize = 66; 	break;
 80018ba:	2342      	movs	r3, #66	@ 0x42
 80018bc:	81fb      	strh	r3, [r7, #14]
 80018be:	e00f      	b.n	80018e0 <CalculateKeySize+0x84>
		case OPTION_RNG_0128: byteSize = 128; 	break;
 80018c0:	2380      	movs	r3, #128	@ 0x80
 80018c2:	81fb      	strh	r3, [r7, #14]
 80018c4:	e00c      	b.n	80018e0 <CalculateKeySize+0x84>
		case OPTION_RNG_0256: byteSize = 256; 	break;
 80018c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018ca:	81fb      	strh	r3, [r7, #14]
 80018cc:	e008      	b.n	80018e0 <CalculateKeySize+0x84>
		case OPTION_RNG_0384: byteSize = 384; 	break;
 80018ce:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80018d2:	81fb      	strh	r3, [r7, #14]
 80018d4:	e004      	b.n	80018e0 <CalculateKeySize+0x84>
		case OPTION_RNG_0512: byteSize = 512; 	break;
 80018d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018da:	81fb      	strh	r3, [r7, #14]
 80018dc:	e000      	b.n	80018e0 <CalculateKeySize+0x84>
		default: break;
 80018de:	bf00      	nop
	}
	return byteSize;
 80018e0:	89fb      	ldrh	r3, [r7, #14]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop

080018f0 <KeyHandler_Generate>:

OperationStatus_t KeyHandler_Generate(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
    log_info("Handling Key Generation operation.");
 80018fa:	4832      	ldr	r0, [pc, #200]	@ (80019c4 <KeyHandler_Generate+0xd4>)
 80018fc:	f002 fb52 	bl	8003fa4 <log_info>
    // Variable to hold word alignment overflow count
    uint16_t remainder = 0;
 8001900:	2300      	movs	r3, #0
 8001902:	82fb      	strh	r3, [r7, #22]
    // Retrieve requested OPTION byte from Request Packet
    uint8_t option_val = (request->option);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	795b      	ldrb	r3, [r3, #5]
 8001908:	74bb      	strb	r3, [r7, #18]
    // Set the requested Pad size
    uint16_t numBytes = CalculateKeySize(option_val);
 800190a:	7cbb      	ldrb	r3, [r7, #18]
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff ffa5 	bl	800185c <CalculateKeySize>
 8001912:	4603      	mov	r3, r0
 8001914:	82bb      	strh	r3, [r7, #20]
    // Checking if requested byte count is word aligned
    if(numBytes % 4)
 8001916:	8abb      	ldrh	r3, [r7, #20]
 8001918:	f003 0303 	and.w	r3, r3, #3
 800191c:	b29b      	uxth	r3, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	d00a      	beq.n	8001938 <KeyHandler_Generate+0x48>
    {
    	log_info("Padding RNG Output to be word aligned.");
 8001922:	4829      	ldr	r0, [pc, #164]	@ (80019c8 <KeyHandler_Generate+0xd8>)
 8001924:	f002 fb3e 	bl	8003fa4 <log_info>
    	remainder = numBytes % 4;
 8001928:	8abb      	ldrh	r3, [r7, #20]
 800192a:	f003 0303 	and.w	r3, r3, #3
 800192e:	82fb      	strh	r3, [r7, #22]
    	numBytes += remainder;
 8001930:	8aba      	ldrh	r2, [r7, #20]
 8001932:	8afb      	ldrh	r3, [r7, #22]
 8001934:	4413      	add	r3, r2
 8001936:	82bb      	strh	r3, [r7, #20]
    }
    log_info("Generating %d bytes of One-Time Pad", numBytes - remainder);
 8001938:	8aba      	ldrh	r2, [r7, #20]
 800193a:	8afb      	ldrh	r3, [r7, #22]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	4619      	mov	r1, r3
 8001940:	4822      	ldr	r0, [pc, #136]	@ (80019cc <KeyHandler_Generate+0xdc>)
 8001942:	f002 fb2f 	bl	8003fa4 <log_info>
    // Check if the requested size is within the limits
    if (numBytes == 0 || numBytes > MAX_RANDOM_BYTES)
 8001946:	8abb      	ldrh	r3, [r7, #20]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d003      	beq.n	8001954 <KeyHandler_Generate+0x64>
 800194c:	8abb      	ldrh	r3, [r7, #20]
 800194e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001952:	d904      	bls.n	800195e <KeyHandler_Generate+0x6e>
    {
        log_error("Requested Pad count is invalid.");
 8001954:	481e      	ldr	r0, [pc, #120]	@ (80019d0 <KeyHandler_Generate+0xe0>)
 8001956:	f002 fb59 	bl	800400c <log_error>
        return OPERATION_INVALID_OPTION;
 800195a:	2302      	movs	r3, #2
 800195c:	e02d      	b.n	80019ba <KeyHandler_Generate+0xca>
    // Declare a status handler for RNG calls
    HAL_StatusTypeDef hal_status;
    // Declare a 32-bit variable to store generated word
    uint32_t randomValue;
    // Iterate through loop till required number of random words are filled
    for (uint8_t i = 0; i < numBytes/4; ++i)
 800195e:	2300      	movs	r3, #0
 8001960:	74fb      	strb	r3, [r7, #19]
 8001962:	e019      	b.n	8001998 <KeyHandler_Generate+0xa8>
    {
    	// Call HAL API to generate 32-bit random word
    	hal_status = HAL_RNG_GenerateRandomNumber(&hrng, &randomValue);
 8001964:	f107 030c 	add.w	r3, r7, #12
 8001968:	4619      	mov	r1, r3
 800196a:	481a      	ldr	r0, [pc, #104]	@ (80019d4 <KeyHandler_Generate+0xe4>)
 800196c:	f00d ffce 	bl	800f90c <HAL_RNG_GenerateRandomNumber>
 8001970:	4603      	mov	r3, r0
 8001972:	747b      	strb	r3, [r7, #17]
    	// Check if API call returned successfully
	    if (hal_status != HAL_OK)
 8001974:	7c7b      	ldrb	r3, [r7, #17]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d004      	beq.n	8001984 <KeyHandler_Generate+0x94>
	    {
	    	log_error("Failed to generate random number from RNG peripheral.");
 800197a:	4817      	ldr	r0, [pc, #92]	@ (80019d8 <KeyHandler_Generate+0xe8>)
 800197c:	f002 fb46 	bl	800400c <log_error>
		    return OPERATION_KEY_GEN_FAIL;
 8001980:	230b      	movs	r3, #11
 8001982:	e01a      	b.n	80019ba <KeyHandler_Generate+0xca>
	    }
	    // Append generated random word to response packet
        response->outputData[i] = (uint8_t)(randomValue & 0xFF);
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	7cfb      	ldrb	r3, [r7, #19]
 8001988:	b2d1      	uxtb	r1, r2
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	4413      	add	r3, r2
 800198e:	460a      	mov	r2, r1
 8001990:	719a      	strb	r2, [r3, #6]
    for (uint8_t i = 0; i < numBytes/4; ++i)
 8001992:	7cfb      	ldrb	r3, [r7, #19]
 8001994:	3301      	adds	r3, #1
 8001996:	74fb      	strb	r3, [r7, #19]
 8001998:	7cfb      	ldrb	r3, [r7, #19]
 800199a:	b29a      	uxth	r2, r3
 800199c:	8abb      	ldrh	r3, [r7, #20]
 800199e:	089b      	lsrs	r3, r3, #2
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d3de      	bcc.n	8001964 <KeyHandler_Generate+0x74>
    }
    // Set the Output Size to number of randomly generated bytes
    response->outputSize = numBytes - remainder;
 80019a6:	8aba      	ldrh	r2, [r7, #20]
 80019a8:	8afb      	ldrh	r3, [r7, #22]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	809a      	strh	r2, [r3, #4]
    log_info("One-Time Pad Generation Operation complete.");
 80019b2:	480a      	ldr	r0, [pc, #40]	@ (80019dc <KeyHandler_Generate+0xec>)
 80019b4:	f002 faf6 	bl	8003fa4 <log_info>
    return OPERATION_SUCCESS;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	08018650 	.word	0x08018650
 80019c8:	08018674 	.word	0x08018674
 80019cc:	0801869c 	.word	0x0801869c
 80019d0:	080186c0 	.word	0x080186c0
 80019d4:	20002480 	.word	0x20002480
 80019d8:	080186e0 	.word	0x080186e0
 80019dc:	08018718 	.word	0x08018718

080019e0 <ConvertKeyIDToUint32>:
#include <string.h>

#include "stm32h5xx_hal.h"

static uint32_t ConvertKeyIDToUint32(const uint8_t keyID[4])
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
    return ((uint32_t)keyID[0]) |
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	461a      	mov	r2, r3
           ((uint32_t)keyID[1] << 8) |
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	3301      	adds	r3, #1
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	021b      	lsls	r3, r3, #8
    return ((uint32_t)keyID[0]) |
 80019f6:	431a      	orrs	r2, r3
           ((uint32_t)keyID[2] << 16) |
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3302      	adds	r3, #2
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	041b      	lsls	r3, r3, #16
           ((uint32_t)keyID[1] << 8) |
 8001a00:	431a      	orrs	r2, r3
           ((uint32_t)keyID[3] << 24);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3303      	adds	r3, #3
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	061b      	lsls	r3, r3, #24
           ((uint32_t)keyID[2] << 16) |
 8001a0a:	4313      	orrs	r3, r2
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <KeyHandler_Store>:

OperationStatus_t KeyHandler_Store(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b090      	sub	sp, #64	@ 0x40
 8001a1c:	af02      	add	r7, sp, #8
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
    log_info("Handling Key Store operation.");
 8001a22:	482e      	ldr	r0, [pc, #184]	@ (8001adc <KeyHandler_Store+0xc4>)
 8001a24:	f002 fabe 	bl	8003fa4 <log_info>

    // Check if either Request or Response Packet is NULL
    if (!request )
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d104      	bne.n	8001a38 <KeyHandler_Store+0x20>
    {
    	log_error("Request Packet is NULL.");
 8001a2e:	482c      	ldr	r0, [pc, #176]	@ (8001ae0 <KeyHandler_Store+0xc8>)
 8001a30:	f002 faec 	bl	800400c <log_error>
        return OPERATION_INVALID_INPUT_DATA;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e04c      	b.n	8001ad2 <KeyHandler_Store+0xba>
    }

    // Declare variables to hold Key ID, Key Value, and Key Usage information.
    uint8_t keyID[4] = {0};
 8001a38:	2300      	movs	r3, #0
 8001a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t keyID_32 = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	637b      	str	r3, [r7, #52]	@ 0x34
    uint8_t keyVal[32] = {0};
 8001a40:	2300      	movs	r3, #0
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	f107 0310 	add.w	r3, r7, #16
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]
 8001a54:	615a      	str	r2, [r3, #20]
 8001a56:	619a      	str	r2, [r3, #24]

    // Retrieve Key Size, Key Usage and Key Value from Request Packet
    uint8_t keySize = request->inputSize - 1;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	88db      	ldrh	r3, [r3, #6]
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    uint8_t keyUsage = request->inputData[0];
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	7a1b      	ldrb	r3, [r3, #8]
 8001a68:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    memcpy(keyVal, &request->inputData[1], keySize);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f103 0109 	add.w	r1, r3, #9
 8001a72:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8001a76:	f107 030c 	add.w	r3, r7, #12
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f014 ff85 	bl	801698a <memcpy>

    // Generate 4-byte Key ID
    GenerateKEYID(keyID);
 8001a80:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a84:	4618      	mov	r0, r3
 8001a86:	f001 fc1f 	bl	80032c8 <GenerateKEYID>
    // Convert 4-byte Key ID array into 32-bit unsigned integer
    keyID_32 = ConvertKeyIDToUint32(keyID);
 8001a8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff ffa6 	bl	80019e0 <ConvertKeyIDToUint32>
 8001a94:	6378      	str	r0, [r7, #52]	@ 0x34
    // Call Key Manager to Add Key to Storage medium
    if(KeyManager_AddKey(keyID_32, keyVal, keySize, KEY_ORIGIN_PROVIDED, keyUsage) != 0)
 8001a96:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8001a9a:	f107 010c 	add.w	r1, r7, #12
 8001a9e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001aa8:	f001 fd24 	bl	80034f4 <KeyManager_AddKey>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d004      	beq.n	8001abc <KeyHandler_Store+0xa4>
    {
    	log_error("Failed to Add Key to Storage Medium.");
 8001ab2:	480c      	ldr	r0, [pc, #48]	@ (8001ae4 <KeyHandler_Store+0xcc>)
 8001ab4:	f002 faaa 	bl	800400c <log_error>
    	return OPERATION_KEY_STORE_FAIL;
 8001ab8:	230c      	movs	r3, #12
 8001aba:	e00a      	b.n	8001ad2 <KeyHandler_Store+0xba>
    }

    // Set the Output Size to the size of Key ID
    response->outputSize = 4;
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	2204      	movs	r2, #4
 8001ac0:	809a      	strh	r2, [r3, #4]
    memcpy(&response->outputData, keyID, 4);
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	3306      	adds	r3, #6
 8001ac6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ac8:	601a      	str	r2, [r3, #0]
    log_info("Key Store Operation complete.");
 8001aca:	4807      	ldr	r0, [pc, #28]	@ (8001ae8 <KeyHandler_Store+0xd0>)
 8001acc:	f002 fa6a 	bl	8003fa4 <log_info>
    return OPERATION_SUCCESS;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3738      	adds	r7, #56	@ 0x38
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	08018744 	.word	0x08018744
 8001ae0:	08018764 	.word	0x08018764
 8001ae4:	0801877c 	.word	0x0801877c
 8001ae8:	080187a4 	.word	0x080187a4

08001aec <CalculatePadSize>:
#define MAX_RANDOM_BYTES 4096
// Externally link RNG Instance
extern RNG_HandleTypeDef hrng;

uint16_t CalculatePadSize(uint8_t option_member)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	71fb      	strb	r3, [r7, #7]
	uint16_t byteSize;
	switch(option_member)
 8001af6:	79fb      	ldrb	r3, [r7, #7]
 8001af8:	3b43      	subs	r3, #67	@ 0x43
 8001afa:	2b0a      	cmp	r3, #10
 8001afc:	d830      	bhi.n	8001b60 <CalculatePadSize+0x74>
 8001afe:	a201      	add	r2, pc, #4	@ (adr r2, 8001b04 <CalculatePadSize+0x18>)
 8001b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b04:	08001b31 	.word	0x08001b31
 8001b08:	08001b61 	.word	0x08001b61
 8001b0c:	08001b37 	.word	0x08001b37
 8001b10:	08001b61 	.word	0x08001b61
 8001b14:	08001b3d 	.word	0x08001b3d
 8001b18:	08001b61 	.word	0x08001b61
 8001b1c:	08001b43 	.word	0x08001b43
 8001b20:	08001b49 	.word	0x08001b49
 8001b24:	08001b61 	.word	0x08001b61
 8001b28:	08001b51 	.word	0x08001b51
 8001b2c:	08001b59 	.word	0x08001b59
	{
		case OPTION_RNG_0016: byteSize = 16; 	break;
 8001b30:	2310      	movs	r3, #16
 8001b32:	81fb      	strh	r3, [r7, #14]
 8001b34:	e015      	b.n	8001b62 <CalculatePadSize+0x76>
		case OPTION_RNG_0032: byteSize = 32; 	break;
 8001b36:	2320      	movs	r3, #32
 8001b38:	81fb      	strh	r3, [r7, #14]
 8001b3a:	e012      	b.n	8001b62 <CalculatePadSize+0x76>
		case OPTION_RNG_0064: byteSize = 64; 	break;
 8001b3c:	2340      	movs	r3, #64	@ 0x40
 8001b3e:	81fb      	strh	r3, [r7, #14]
 8001b40:	e00f      	b.n	8001b62 <CalculatePadSize+0x76>
		case OPTION_RNG_0128: byteSize = 128; 	break;
 8001b42:	2380      	movs	r3, #128	@ 0x80
 8001b44:	81fb      	strh	r3, [r7, #14]
 8001b46:	e00c      	b.n	8001b62 <CalculatePadSize+0x76>
		case OPTION_RNG_0256: byteSize = 256; 	break;
 8001b48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b4c:	81fb      	strh	r3, [r7, #14]
 8001b4e:	e008      	b.n	8001b62 <CalculatePadSize+0x76>
		case OPTION_RNG_0512: byteSize = 512; 	break;
 8001b50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b54:	81fb      	strh	r3, [r7, #14]
 8001b56:	e004      	b.n	8001b62 <CalculatePadSize+0x76>
		case OPTION_RNG_1024: byteSize = 1024; 	break;
 8001b58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b5c:	81fb      	strh	r3, [r7, #14]
 8001b5e:	e000      	b.n	8001b62 <CalculatePadSize+0x76>
		default: break;
 8001b60:	bf00      	nop
	}
	return byteSize;
 8001b62:	89fb      	ldrh	r3, [r7, #14]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <OTPHandler_Handle>:

OperationStatus_t OTPHandler_Handle(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
    log_info("Handling One-Time Pad Generation operation.");
 8001b7a:	4826      	ldr	r0, [pc, #152]	@ (8001c14 <OTPHandler_Handle+0xa4>)
 8001b7c:	f002 fa12 	bl	8003fa4 <log_info>
    // Retrieve requested OPTION half-word from Request Packet
    uint8_t option_val = (request->option);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	795b      	ldrb	r3, [r3, #5]
 8001b84:	75bb      	strb	r3, [r7, #22]
    // Set the requested Pad size
    uint16_t numBytes = CalculatePadSize(option_val);
 8001b86:	7dbb      	ldrb	r3, [r7, #22]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff ffaf 	bl	8001aec <CalculatePadSize>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	82bb      	strh	r3, [r7, #20]
    log_info("Generating %d bytes of One-Time Pad", numBytes);
 8001b92:	8abb      	ldrh	r3, [r7, #20]
 8001b94:	4619      	mov	r1, r3
 8001b96:	4820      	ldr	r0, [pc, #128]	@ (8001c18 <OTPHandler_Handle+0xa8>)
 8001b98:	f002 fa04 	bl	8003fa4 <log_info>
    // Check if the requested size is within the limits
    if (numBytes == 0 || numBytes > MAX_RANDOM_BYTES)
 8001b9c:	8abb      	ldrh	r3, [r7, #20]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <OTPHandler_Handle+0x3a>
 8001ba2:	8abb      	ldrh	r3, [r7, #20]
 8001ba4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ba8:	d904      	bls.n	8001bb4 <OTPHandler_Handle+0x44>
    {
        log_error("Requested Pad count is too big.");
 8001baa:	481c      	ldr	r0, [pc, #112]	@ (8001c1c <OTPHandler_Handle+0xac>)
 8001bac:	f002 fa2e 	bl	800400c <log_error>
        return OPERATION_INVALID_OPTION;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	e02a      	b.n	8001c0a <OTPHandler_Handle+0x9a>
    // Declare a status handler for RNG calls
    HAL_StatusTypeDef hal_status;
    // Declare a 32-bit variable to store generated word
    uint32_t randomValue;
    // Iterate through loop till required number of random words are filled
    for (uint8_t i = 0; i < numBytes/4; ++i)
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	75fb      	strb	r3, [r7, #23]
 8001bb8:	e019      	b.n	8001bee <OTPHandler_Handle+0x7e>
    {
    	// Call HAL API to generate 32-bit random word
    	hal_status = HAL_RNG_GenerateRandomNumber(&hrng, &randomValue);
 8001bba:	f107 030c 	add.w	r3, r7, #12
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4817      	ldr	r0, [pc, #92]	@ (8001c20 <OTPHandler_Handle+0xb0>)
 8001bc2:	f00d fea3 	bl	800f90c <HAL_RNG_GenerateRandomNumber>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	74fb      	strb	r3, [r7, #19]
    	// Check if API call returned successfully
	    if (hal_status != HAL_OK)
 8001bca:	7cfb      	ldrb	r3, [r7, #19]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d004      	beq.n	8001bda <OTPHandler_Handle+0x6a>
	    {
	    	log_error("Failed to generate random number from RNG peripheral.");
 8001bd0:	4814      	ldr	r0, [pc, #80]	@ (8001c24 <OTPHandler_Handle+0xb4>)
 8001bd2:	f002 fa1b 	bl	800400c <log_error>
		    return OPERATION_OTP_GEN_FAIL;
 8001bd6:	230a      	movs	r3, #10
 8001bd8:	e017      	b.n	8001c0a <OTPHandler_Handle+0x9a>
	    }
	    // Append generated random word to response packet
        response->outputData[i] = (uint8_t)(randomValue & 0xFF);
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	7dfb      	ldrb	r3, [r7, #23]
 8001bde:	b2d1      	uxtb	r1, r2
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	4413      	add	r3, r2
 8001be4:	460a      	mov	r2, r1
 8001be6:	719a      	strb	r2, [r3, #6]
    for (uint8_t i = 0; i < numBytes/4; ++i)
 8001be8:	7dfb      	ldrb	r3, [r7, #23]
 8001bea:	3301      	adds	r3, #1
 8001bec:	75fb      	strb	r3, [r7, #23]
 8001bee:	7dfb      	ldrb	r3, [r7, #23]
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	8abb      	ldrh	r3, [r7, #20]
 8001bf4:	089b      	lsrs	r3, r3, #2
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d3de      	bcc.n	8001bba <OTPHandler_Handle+0x4a>
    }
    // Set the Output Size to number of randomly generated bytes
    response->outputSize = numBytes;
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	8aba      	ldrh	r2, [r7, #20]
 8001c00:	809a      	strh	r2, [r3, #4]
    log_info("One-Time Pad Generation Operation complete.");
 8001c02:	4809      	ldr	r0, [pc, #36]	@ (8001c28 <OTPHandler_Handle+0xb8>)
 8001c04:	f002 f9ce 	bl	8003fa4 <log_info>
    return OPERATION_SUCCESS;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3718      	adds	r7, #24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	080187c4 	.word	0x080187c4
 8001c18:	080187f0 	.word	0x080187f0
 8001c1c:	08018814 	.word	0x08018814
 8001c20:	20002480 	.word	0x20002480
 8001c24:	08018834 	.word	0x08018834
 8001c28:	0801886c 	.word	0x0801886c

08001c2c <CalculateByteSize>:
#define MAX_RANDOM_BYTES 4096
// Externally link RNG Instance
extern RNG_HandleTypeDef hrng;

uint16_t CalculateByteSize(uint8_t option_member)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	71fb      	strb	r3, [r7, #7]
	uint16_t byteSize;
	switch(option_member)
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	3b41      	subs	r3, #65	@ 0x41
 8001c3a:	2b0e      	cmp	r3, #14
 8001c3c:	d846      	bhi.n	8001ccc <CalculateByteSize+0xa0>
 8001c3e:	a201      	add	r2, pc, #4	@ (adr r2, 8001c44 <CalculateByteSize+0x18>)
 8001c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c44:	08001c81 	.word	0x08001c81
 8001c48:	08001c87 	.word	0x08001c87
 8001c4c:	08001c8d 	.word	0x08001c8d
 8001c50:	08001ccd 	.word	0x08001ccd
 8001c54:	08001c93 	.word	0x08001c93
 8001c58:	08001ccd 	.word	0x08001ccd
 8001c5c:	08001c99 	.word	0x08001c99
 8001c60:	08001ccd 	.word	0x08001ccd
 8001c64:	08001c9f 	.word	0x08001c9f
 8001c68:	08001ca5 	.word	0x08001ca5
 8001c6c:	08001ccd 	.word	0x08001ccd
 8001c70:	08001cad 	.word	0x08001cad
 8001c74:	08001cb5 	.word	0x08001cb5
 8001c78:	08001cbd 	.word	0x08001cbd
 8001c7c:	08001cc5 	.word	0x08001cc5
	{
		case OPTION_RNG_0004: byteSize = 4; break;
 8001c80:	2304      	movs	r3, #4
 8001c82:	81fb      	strh	r3, [r7, #14]
 8001c84:	e023      	b.n	8001cce <CalculateByteSize+0xa2>
		case OPTION_RNG_0008: byteSize = 8; break;
 8001c86:	2308      	movs	r3, #8
 8001c88:	81fb      	strh	r3, [r7, #14]
 8001c8a:	e020      	b.n	8001cce <CalculateByteSize+0xa2>
		case OPTION_RNG_0016: byteSize = 16; break;
 8001c8c:	2310      	movs	r3, #16
 8001c8e:	81fb      	strh	r3, [r7, #14]
 8001c90:	e01d      	b.n	8001cce <CalculateByteSize+0xa2>
		case OPTION_RNG_0032: byteSize = 32; break;
 8001c92:	2320      	movs	r3, #32
 8001c94:	81fb      	strh	r3, [r7, #14]
 8001c96:	e01a      	b.n	8001cce <CalculateByteSize+0xa2>
		case OPTION_RNG_0064: byteSize = 64; break;
 8001c98:	2340      	movs	r3, #64	@ 0x40
 8001c9a:	81fb      	strh	r3, [r7, #14]
 8001c9c:	e017      	b.n	8001cce <CalculateByteSize+0xa2>
		case OPTION_RNG_0128: byteSize = 128; break;
 8001c9e:	2380      	movs	r3, #128	@ 0x80
 8001ca0:	81fb      	strh	r3, [r7, #14]
 8001ca2:	e014      	b.n	8001cce <CalculateByteSize+0xa2>
		case OPTION_RNG_0256: byteSize = 256; break;
 8001ca4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ca8:	81fb      	strh	r3, [r7, #14]
 8001caa:	e010      	b.n	8001cce <CalculateByteSize+0xa2>
		case OPTION_RNG_0512: byteSize = 512; break;
 8001cac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001cb0:	81fb      	strh	r3, [r7, #14]
 8001cb2:	e00c      	b.n	8001cce <CalculateByteSize+0xa2>
		case OPTION_RNG_1024: byteSize = 1024; break;
 8001cb4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001cb8:	81fb      	strh	r3, [r7, #14]
 8001cba:	e008      	b.n	8001cce <CalculateByteSize+0xa2>
		case OPTION_RNG_2048: byteSize = 2048; break;
 8001cbc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001cc0:	81fb      	strh	r3, [r7, #14]
 8001cc2:	e004      	b.n	8001cce <CalculateByteSize+0xa2>
		case OPTION_RNG_4096: byteSize = 4096; break;
 8001cc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cc8:	81fb      	strh	r3, [r7, #14]
 8001cca:	e000      	b.n	8001cce <CalculateByteSize+0xa2>
		default: break;
 8001ccc:	bf00      	nop
	}
	return byteSize;
 8001cce:	89fb      	ldrh	r3, [r7, #14]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <RandomHandler_Handle>:

OperationStatus_t RandomHandler_Handle(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
    log_info("Handling Random Number Generation operation.");
 8001ce6:	4826      	ldr	r0, [pc, #152]	@ (8001d80 <RandomHandler_Handle+0xa4>)
 8001ce8:	f002 f95c 	bl	8003fa4 <log_info>
    // Retrieve requested OPTION half-word from Request Packet
    uint8_t option_val = (request->option);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	795b      	ldrb	r3, [r3, #5]
 8001cf0:	75bb      	strb	r3, [r7, #22]
    // Set the requested Random Number size
    uint16_t numBytes = CalculateByteSize(option_val);
 8001cf2:	7dbb      	ldrb	r3, [r7, #22]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff99 	bl	8001c2c <CalculateByteSize>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	82bb      	strh	r3, [r7, #20]
    log_info("Generating %d bytes of Random Number", numBytes);
 8001cfe:	8abb      	ldrh	r3, [r7, #20]
 8001d00:	4619      	mov	r1, r3
 8001d02:	4820      	ldr	r0, [pc, #128]	@ (8001d84 <RandomHandler_Handle+0xa8>)
 8001d04:	f002 f94e 	bl	8003fa4 <log_info>
    // Check if the requested size is within the limits
    if (numBytes == 0 || numBytes > MAX_RANDOM_BYTES)
 8001d08:	8abb      	ldrh	r3, [r7, #20]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <RandomHandler_Handle+0x3a>
 8001d0e:	8abb      	ldrh	r3, [r7, #20]
 8001d10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d14:	d904      	bls.n	8001d20 <RandomHandler_Handle+0x44>
    {
        log_error("Requested random byte count is invalid.");
 8001d16:	481c      	ldr	r0, [pc, #112]	@ (8001d88 <RandomHandler_Handle+0xac>)
 8001d18:	f002 f978 	bl	800400c <log_error>
        return OPERATION_INVALID_OPTION;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	e02a      	b.n	8001d76 <RandomHandler_Handle+0x9a>
    // Declare a status handler for RNG calls
    HAL_StatusTypeDef hal_status;
    // Declare a 32-bit variable to store generated word
    uint32_t randomValue;
    // Iterate through loop till required number of random words are filled
    for (uint8_t i = 0; i < numBytes/4; ++i)
 8001d20:	2300      	movs	r3, #0
 8001d22:	75fb      	strb	r3, [r7, #23]
 8001d24:	e019      	b.n	8001d5a <RandomHandler_Handle+0x7e>
    {
    	// Call HAL API to generate 32-bit random word
    	hal_status = HAL_RNG_GenerateRandomNumber(&hrng, &randomValue);
 8001d26:	f107 030c 	add.w	r3, r7, #12
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4817      	ldr	r0, [pc, #92]	@ (8001d8c <RandomHandler_Handle+0xb0>)
 8001d2e:	f00d fded 	bl	800f90c <HAL_RNG_GenerateRandomNumber>
 8001d32:	4603      	mov	r3, r0
 8001d34:	74fb      	strb	r3, [r7, #19]
    	// Check if API call returned successfully
	    if (hal_status != HAL_OK)
 8001d36:	7cfb      	ldrb	r3, [r7, #19]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d004      	beq.n	8001d46 <RandomHandler_Handle+0x6a>
	    {
	    	log_error("Failed to generate random number from RNG peripheral.");
 8001d3c:	4814      	ldr	r0, [pc, #80]	@ (8001d90 <RandomHandler_Handle+0xb4>)
 8001d3e:	f002 f965 	bl	800400c <log_error>
		    return OPERATION_RANDOM_GEN_FAIL;
 8001d42:	2309      	movs	r3, #9
 8001d44:	e017      	b.n	8001d76 <RandomHandler_Handle+0x9a>
	    }
	    // Append generated random word to response packet
        response->outputData[i] = (uint8_t)(randomValue & 0xFF);
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	7dfb      	ldrb	r3, [r7, #23]
 8001d4a:	b2d1      	uxtb	r1, r2
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	4413      	add	r3, r2
 8001d50:	460a      	mov	r2, r1
 8001d52:	719a      	strb	r2, [r3, #6]
    for (uint8_t i = 0; i < numBytes/4; ++i)
 8001d54:	7dfb      	ldrb	r3, [r7, #23]
 8001d56:	3301      	adds	r3, #1
 8001d58:	75fb      	strb	r3, [r7, #23]
 8001d5a:	7dfb      	ldrb	r3, [r7, #23]
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	8abb      	ldrh	r3, [r7, #20]
 8001d60:	089b      	lsrs	r3, r3, #2
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d3de      	bcc.n	8001d26 <RandomHandler_Handle+0x4a>
    }
    // Set the Output Size to number of randomly generated bytes
    response->outputSize = numBytes;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	8aba      	ldrh	r2, [r7, #20]
 8001d6c:	809a      	strh	r2, [r3, #4]
    log_info("RNG Operation complete.");
 8001d6e:	4809      	ldr	r0, [pc, #36]	@ (8001d94 <RandomHandler_Handle+0xb8>)
 8001d70:	f002 f918 	bl	8003fa4 <log_info>
    return OPERATION_SUCCESS;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	08018898 	.word	0x08018898
 8001d84:	080188c8 	.word	0x080188c8
 8001d88:	080188f0 	.word	0x080188f0
 8001d8c:	20002480 	.word	0x20002480
 8001d90:	08018918 	.word	0x08018918
 8001d94:	08018950 	.word	0x08018950

08001d98 <W25Q_Delay>:
#define W25Q_SPI hspi1

#define numBLOCK 32

void W25Q_Delay(uint32_t time)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
	HAL_Delay(time);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f003 fe1b 	bl	80059dc <HAL_Delay>
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
	...

08001db0 <csLOW>:

void csLOW (void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001db4:	2200      	movs	r2, #0
 8001db6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001dba:	4802      	ldr	r0, [pc, #8]	@ (8001dc4 <csLOW+0x14>)
 8001dbc:	f004 fcba 	bl	8006734 <HAL_GPIO_WritePin>
}
 8001dc0:	bf00      	nop
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	42020c00 	.word	0x42020c00

08001dc8 <csHIGH>:

void csHIGH (void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001dd2:	4802      	ldr	r0, [pc, #8]	@ (8001ddc <csHIGH+0x14>)
 8001dd4:	f004 fcae 	bl	8006734 <HAL_GPIO_WritePin>
}
 8001dd8:	bf00      	nop
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	42020c00 	.word	0x42020c00

08001de0 <SPI_Write>:

void SPI_Write(uint8_t *data, uint8_t len)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	460b      	mov	r3, r1
 8001dea:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(&W25Q_SPI, data, len, 2000);
 8001dec:	78fb      	ldrb	r3, [r7, #3]
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001df4:	6879      	ldr	r1, [r7, #4]
 8001df6:	4803      	ldr	r0, [pc, #12]	@ (8001e04 <SPI_Write+0x24>)
 8001df8:	f00e fa92 	bl	8010320 <HAL_SPI_Transmit>
}
 8001dfc:	bf00      	nop
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	200024c4 	.word	0x200024c4

08001e08 <SPI_Read>:

void SPI_Read(uint8_t *data, uint32_t len)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
	HAL_SPI_Receive(&W25Q_SPI, data, len, 5000);
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	4803      	ldr	r0, [pc, #12]	@ (8001e2c <SPI_Read+0x24>)
 8001e1e:	f00e fcb7 	bl	8010790 <HAL_SPI_Receive>
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	200024c4 	.word	0x200024c4

08001e30 <W25Q_Reset>:


void W25Q_Reset (void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
	uint8_t tData[2];
	tData[0] = 0x66;
 8001e36:	2366      	movs	r3, #102	@ 0x66
 8001e38:	713b      	strb	r3, [r7, #4]
	tData[1] = 0x99;
 8001e3a:	2399      	movs	r3, #153	@ 0x99
 8001e3c:	717b      	strb	r3, [r7, #5]
	csLOW();
 8001e3e:	f7ff ffb7 	bl	8001db0 <csLOW>
	SPI_Write(tData, 2);
 8001e42:	1d3b      	adds	r3, r7, #4
 8001e44:	2102      	movs	r1, #2
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff ffca 	bl	8001de0 <SPI_Write>
	csHIGH();
 8001e4c:	f7ff ffbc 	bl	8001dc8 <csHIGH>
	W25Q_Delay(100);
 8001e50:	2064      	movs	r0, #100	@ 0x64
 8001e52:	f7ff ffa1 	bl	8001d98 <W25Q_Delay>
}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <W25Q_ReadID>:

uint32_t W25Q_ReadID(void)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b082      	sub	sp, #8
 8001e62:	af00      	add	r7, sp, #0
	uint8_t tData = 0x9F;
 8001e64:	239f      	movs	r3, #159	@ 0x9f
 8001e66:	71fb      	strb	r3, [r7, #7]
	uint8_t rData[3];
	csLOW();
 8001e68:	f7ff ffa2 	bl	8001db0 <csLOW>
	SPI_Write(&tData, 1);
 8001e6c:	1dfb      	adds	r3, r7, #7
 8001e6e:	2101      	movs	r1, #1
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff ffb5 	bl	8001de0 <SPI_Write>
	SPI_Read(rData, 3);
 8001e76:	1d3b      	adds	r3, r7, #4
 8001e78:	2103      	movs	r1, #3
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff ffc4 	bl	8001e08 <SPI_Read>
	csHIGH();
 8001e80:	f7ff ffa2 	bl	8001dc8 <csHIGH>
	return ((rData[0]<<16)|(rData[1]<<8)|rData[2]);
 8001e84:	793b      	ldrb	r3, [r7, #4]
 8001e86:	041a      	lsls	r2, r3, #16
 8001e88:	797b      	ldrb	r3, [r7, #5]
 8001e8a:	021b      	lsls	r3, r3, #8
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	79ba      	ldrb	r2, [r7, #6]
 8001e90:	4313      	orrs	r3, r2
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <W25Q_Read>:

void W25Q_Read (uint32_t startPage, uint8_t offset, uint32_t size, uint8_t *rData)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b088      	sub	sp, #32
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	60f8      	str	r0, [r7, #12]
 8001ea2:	607a      	str	r2, [r7, #4]
 8001ea4:	603b      	str	r3, [r7, #0]
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	72fb      	strb	r3, [r7, #11]
	uint8_t tData[5];
	uint32_t memAddr = (startPage*256) + offset;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	021a      	lsls	r2, r3, #8
 8001eae:	7afb      	ldrb	r3, [r7, #11]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	61fb      	str	r3, [r7, #28]

	if (numBLOCK<512)   // Chip Size<256Mb
	{
		tData[0] = 0x03;  // enable Read
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	753b      	strb	r3, [r7, #20]
		tData[1] = (memAddr>>16)&0xFF;  // MSB of the memory Address
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	0c1b      	lsrs	r3, r3, #16
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	757b      	strb	r3, [r7, #21]
		tData[2] = (memAddr>>8)&0xFF;
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	0a1b      	lsrs	r3, r3, #8
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	75bb      	strb	r3, [r7, #22]
		tData[3] = (memAddr)&0xFF; // LSB of the memory Address
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	75fb      	strb	r3, [r7, #23]
		tData[2] = (memAddr>>16)&0xFF;
		tData[3] = (memAddr>>8)&0xFF;
		tData[4] = (memAddr)&0xFF; // LSB of the memory Address
	}

	csLOW();  // pull the CS Low
 8001ece:	f7ff ff6f 	bl	8001db0 <csLOW>
	if (numBLOCK<512)
	{
		SPI_Write(tData, 4);  // send read instruction along with the 24 bit memory address
 8001ed2:	f107 0314 	add.w	r3, r7, #20
 8001ed6:	2104      	movs	r1, #4
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff ff81 	bl	8001de0 <SPI_Write>
	else
	{
		SPI_Write(tData, 5);  // send read instruction along with the 32 bit memory address
	}

	SPI_Read(rData, size);  // Read the data
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	6838      	ldr	r0, [r7, #0]
 8001ee2:	f7ff ff91 	bl	8001e08 <SPI_Read>
	csHIGH();  // pull the CS High
 8001ee6:	f7ff ff6f 	bl	8001dc8 <csHIGH>
}
 8001eea:	bf00      	nop
 8001eec:	3720      	adds	r7, #32
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <W25Q_FastRead>:

void W25Q_FastRead (uint32_t startPage, uint8_t offset, uint32_t size, uint8_t *rData)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b088      	sub	sp, #32
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	60f8      	str	r0, [r7, #12]
 8001efa:	607a      	str	r2, [r7, #4]
 8001efc:	603b      	str	r3, [r7, #0]
 8001efe:	460b      	mov	r3, r1
 8001f00:	72fb      	strb	r3, [r7, #11]
	uint8_t tData[6];
	uint32_t memAddr = (startPage*256) + offset;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	021a      	lsls	r2, r3, #8
 8001f06:	7afb      	ldrb	r3, [r7, #11]
 8001f08:	4413      	add	r3, r2
 8001f0a:	61fb      	str	r3, [r7, #28]

	if (numBLOCK<512)   // Chip Size<256Mb
	{
		tData[0] = 0x0B;  // enable Fast Read
 8001f0c:	230b      	movs	r3, #11
 8001f0e:	753b      	strb	r3, [r7, #20]
		tData[1] = (memAddr>>16)&0xFF;  // MSB of the memory Address
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	0c1b      	lsrs	r3, r3, #16
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	757b      	strb	r3, [r7, #21]
		tData[2] = (memAddr>>8)&0xFF;
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	0a1b      	lsrs	r3, r3, #8
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	75bb      	strb	r3, [r7, #22]
		tData[3] = (memAddr)&0xFF; // LSB of the memory Address
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	75fb      	strb	r3, [r7, #23]
		tData[4] = 0;  // Dummy clock
 8001f26:	2300      	movs	r3, #0
 8001f28:	763b      	strb	r3, [r7, #24]
		tData[3] = (memAddr>>8)&0xFF;
		tData[4] = (memAddr)&0xFF; // LSB of the memory Address
		tData[5] = 0;  // Dummy clock
	}

	csLOW();  // pull the CS Low
 8001f2a:	f7ff ff41 	bl	8001db0 <csLOW>
	if (numBLOCK<512)
	{
		SPI_Write(tData, 5);  // send read instruction along with the 24 bit memory address
 8001f2e:	f107 0314 	add.w	r3, r7, #20
 8001f32:	2105      	movs	r1, #5
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff ff53 	bl	8001de0 <SPI_Write>
	else
	{
		SPI_Write(tData, 6);  // send read instruction along with the 32 bit memory address
	}

	SPI_Read(rData, size);  // Read the data
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	6838      	ldr	r0, [r7, #0]
 8001f3e:	f7ff ff63 	bl	8001e08 <SPI_Read>
	csHIGH();  // pull the CS High
 8001f42:	f7ff ff41 	bl	8001dc8 <csHIGH>
}
 8001f46:	bf00      	nop
 8001f48:	3720      	adds	r7, #32
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <write_enable>:

void write_enable (void)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
	uint8_t tData = 0x06;  // enable write
 8001f54:	2306      	movs	r3, #6
 8001f56:	71fb      	strb	r3, [r7, #7]
	csLOW();
 8001f58:	f7ff ff2a 	bl	8001db0 <csLOW>
	SPI_Write(&tData, 1);
 8001f5c:	1dfb      	adds	r3, r7, #7
 8001f5e:	2101      	movs	r1, #1
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff ff3d 	bl	8001de0 <SPI_Write>
	csHIGH();
 8001f66:	f7ff ff2f 	bl	8001dc8 <csHIGH>
	W25Q_Delay(5);  // 5ms delay
 8001f6a:	2005      	movs	r0, #5
 8001f6c:	f7ff ff14 	bl	8001d98 <W25Q_Delay>
}
 8001f70:	bf00      	nop
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <write_disable>:

void write_disable(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
	uint8_t tData = 0x04;  // disable write
 8001f7e:	2304      	movs	r3, #4
 8001f80:	71fb      	strb	r3, [r7, #7]
	csLOW();
 8001f82:	f7ff ff15 	bl	8001db0 <csLOW>
	SPI_Write(&tData, 1);
 8001f86:	1dfb      	adds	r3, r7, #7
 8001f88:	2101      	movs	r1, #1
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff ff28 	bl	8001de0 <SPI_Write>
	csHIGH();
 8001f90:	f7ff ff1a 	bl	8001dc8 <csHIGH>
	W25Q_Delay(5);  // 5ms delay
 8001f94:	2005      	movs	r0, #5
 8001f96:	f7ff feff 	bl	8001d98 <W25Q_Delay>
}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <bytestowriteFLASH>:

uint32_t bytestowriteFLASH (uint32_t size, uint16_t offset)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
 8001faa:	460b      	mov	r3, r1
 8001fac:	807b      	strh	r3, [r7, #2]
	if ((size+offset)<256) return size;
 8001fae:	887a      	ldrh	r2, [r7, #2]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	2bff      	cmp	r3, #255	@ 0xff
 8001fb6:	d801      	bhi.n	8001fbc <bytestowriteFLASH+0x1a>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	e002      	b.n	8001fc2 <bytestowriteFLASH+0x20>
	else return 256-offset;
 8001fbc:	887b      	ldrh	r3, [r7, #2]
 8001fbe:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <bytestomodify>:

uint32_t bytestomodify (uint32_t size, uint16_t offset)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	807b      	strh	r3, [r7, #2]
	if ((size+offset)<4096) return size;
 8001fda:	887a      	ldrh	r2, [r7, #2]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4413      	add	r3, r2
 8001fe0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fe4:	d201      	bcs.n	8001fea <bytestomodify+0x1c>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	e002      	b.n	8001ff0 <bytestomodify+0x22>
	else return 4096-offset;
 8001fea:	887b      	ldrh	r3, [r7, #2]
 8001fec:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <W25Q_Erase_Sector>:

void W25Q_Erase_Sector (uint16_t numsector)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	80fb      	strh	r3, [r7, #6]
	uint8_t tData[6];
	uint32_t memAddr = numsector*16*256;   // Each sector contains 16 pages * 256 bytes
 8002006:	88fb      	ldrh	r3, [r7, #6]
 8002008:	031b      	lsls	r3, r3, #12
 800200a:	617b      	str	r3, [r7, #20]

	write_enable();
 800200c:	f7ff ff9f 	bl	8001f4e <write_enable>

	if (numBLOCK<512)   // Chip Size<256Mb
	{
		tData[0] = 0x20;  // Erase sector
 8002010:	2320      	movs	r3, #32
 8002012:	733b      	strb	r3, [r7, #12]
		tData[1] = (memAddr>>16)&0xFF;  // MSB of the memory Address
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	0c1b      	lsrs	r3, r3, #16
 8002018:	b2db      	uxtb	r3, r3
 800201a:	737b      	strb	r3, [r7, #13]
		tData[2] = (memAddr>>8)&0xFF;
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	0a1b      	lsrs	r3, r3, #8
 8002020:	b2db      	uxtb	r3, r3
 8002022:	73bb      	strb	r3, [r7, #14]
		tData[3] = (memAddr)&0xFF; // LSB of the memory Address
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	b2db      	uxtb	r3, r3
 8002028:	73fb      	strb	r3, [r7, #15]

		csLOW();
 800202a:	f7ff fec1 	bl	8001db0 <csLOW>
		SPI_Write(tData, 4);
 800202e:	f107 030c 	add.w	r3, r7, #12
 8002032:	2104      	movs	r1, #4
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff fed3 	bl	8001de0 <SPI_Write>
		csHIGH();
 800203a:	f7ff fec5 	bl	8001dc8 <csHIGH>
		csLOW();  // pull the CS LOW
		SPI_Write(tData, 5);
		csHIGH();  // pull the HIGH
	}

	W25Q_Delay(450);  // 450ms delay for sector erase
 800203e:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8002042:	f7ff fea9 	bl	8001d98 <W25Q_Delay>

	write_disable();
 8002046:	f7ff ff97 	bl	8001f78 <write_disable>

}
 800204a:	bf00      	nop
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <W25Q_Write_Clean>:


void W25Q_Write_Clean (uint32_t page, uint16_t offset, uint32_t size, uint8_t *data)
{
 8002052:	b590      	push	{r4, r7, lr}
 8002054:	b0d3      	sub	sp, #332	@ 0x14c
 8002056:	af00      	add	r7, sp, #0
 8002058:	f507 74a4 	add.w	r4, r7, #328	@ 0x148
 800205c:	f5a4 749e 	sub.w	r4, r4, #316	@ 0x13c
 8002060:	6020      	str	r0, [r4, #0]
 8002062:	4608      	mov	r0, r1
 8002064:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 8002068:	f5a1 71a2 	sub.w	r1, r1, #324	@ 0x144
 800206c:	600a      	str	r2, [r1, #0]
 800206e:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8002072:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 8002076:	6013      	str	r3, [r2, #0]
 8002078:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800207c:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8002080:	4602      	mov	r2, r0
 8002082:	801a      	strh	r2, [r3, #0]
	uint8_t tData[266];
	uint32_t startPage = page;
 8002084:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002088:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
	uint32_t endPage  = startPage + ((size+offset-1)/256);
 8002092:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002096:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 800209a:	881a      	ldrh	r2, [r3, #0]
 800209c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80020a0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4413      	add	r3, r2
 80020a8:	3b01      	subs	r3, #1
 80020aa:	0a1b      	lsrs	r3, r3, #8
 80020ac:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80020b0:	4413      	add	r3, r2
 80020b2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	uint32_t numPages = endPage-startPage+1;
 80020b6:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80020ba:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	3301      	adds	r3, #1
 80020c2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128

	uint16_t startSector  = startPage/16;
 80020c6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80020ca:	091b      	lsrs	r3, r3, #4
 80020cc:	f8a7 3142 	strh.w	r3, [r7, #322]	@ 0x142
	uint16_t endSector  = endPage/16;
 80020d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80020d4:	091b      	lsrs	r3, r3, #4
 80020d6:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
	uint16_t numSectors = endSector-startSector+1;
 80020da:	f8b7 2126 	ldrh.w	r2, [r7, #294]	@ 0x126
 80020de:	f8b7 3142 	ldrh.w	r3, [r7, #322]	@ 0x142
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	3301      	adds	r3, #1
 80020e8:	f8a7 3124 	strh.w	r3, [r7, #292]	@ 0x124
	for (uint16_t i=0; i<numSectors; i++)
 80020ec:	2300      	movs	r3, #0
 80020ee:	f8a7 3140 	strh.w	r3, [r7, #320]	@ 0x140
 80020f2:	e00c      	b.n	800210e <W25Q_Write_Clean+0xbc>
	{
		W25Q_Erase_Sector(startSector++);
 80020f4:	f8b7 3142 	ldrh.w	r3, [r7, #322]	@ 0x142
 80020f8:	1c5a      	adds	r2, r3, #1
 80020fa:	f8a7 2142 	strh.w	r2, [r7, #322]	@ 0x142
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff ff7c 	bl	8001ffc <W25Q_Erase_Sector>
	for (uint16_t i=0; i<numSectors; i++)
 8002104:	f8b7 3140 	ldrh.w	r3, [r7, #320]	@ 0x140
 8002108:	3301      	adds	r3, #1
 800210a:	f8a7 3140 	strh.w	r3, [r7, #320]	@ 0x140
 800210e:	f8b7 2140 	ldrh.w	r2, [r7, #320]	@ 0x140
 8002112:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8002116:	429a      	cmp	r2, r3
 8002118:	d3ec      	bcc.n	80020f4 <W25Q_Write_Clean+0xa2>
	}

	uint32_t dataPosition = 0;
 800211a:	2300      	movs	r3, #0
 800211c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c

	// write the data
	for (uint32_t i=0; i<numPages; i++)
 8002120:	2300      	movs	r3, #0
 8002122:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002126:	e0c0      	b.n	80022aa <W25Q_Write_Clean+0x258>
	{
		uint32_t memAddr = (startPage*256)+offset;
 8002128:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800212c:	021a      	lsls	r2, r3, #8
 800212e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002132:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	4413      	add	r3, r2
 800213a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
		uint16_t bytesremaining  = bytestowriteFLASH(size, offset);
 800213e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002142:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8002146:	881a      	ldrh	r2, [r3, #0]
 8002148:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800214c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002150:	4611      	mov	r1, r2
 8002152:	6818      	ldr	r0, [r3, #0]
 8002154:	f7ff ff25 	bl	8001fa2 <bytestowriteFLASH>
 8002158:	4603      	mov	r3, r0
 800215a:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
		uint32_t indx = 0;
 800215e:	2300      	movs	r3, #0
 8002160:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134

		write_enable();
 8002164:	f7ff fef3 	bl	8001f4e <write_enable>

		if (numBLOCK<512)   // Chip Size<256Mb
		{
			tData[0] = 0x02;  // page program
 8002168:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800216c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002170:	2202      	movs	r2, #2
 8002172:	701a      	strb	r2, [r3, #0]
			tData[1] = (memAddr>>16)&0xFF;  // MSB of the memory Address
 8002174:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002178:	0c1b      	lsrs	r3, r3, #16
 800217a:	b2da      	uxtb	r2, r3
 800217c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002180:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002184:	705a      	strb	r2, [r3, #1]
			tData[2] = (memAddr>>8)&0xFF;
 8002186:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800218a:	0a1b      	lsrs	r3, r3, #8
 800218c:	b2da      	uxtb	r2, r3
 800218e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002192:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002196:	709a      	strb	r2, [r3, #2]
			tData[3] = (memAddr)&0xFF; // LSB of the memory Address
 8002198:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800219c:	b2da      	uxtb	r2, r3
 800219e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80021a2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80021a6:	70da      	strb	r2, [r3, #3]

			indx = 4;
 80021a8:	2304      	movs	r3, #4
 80021aa:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
			tData[4] = (memAddr)&0xFF; // LSB of the memory Address

			indx = 5;
		}

		uint16_t bytestosend  = bytesremaining + indx;
 80021ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 80021b8:	4413      	add	r3, r2
 80021ba:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c

		for (uint16_t i=0; i<bytesremaining; i++)
 80021be:	2300      	movs	r3, #0
 80021c0:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
 80021c4:	e01a      	b.n	80021fc <W25Q_Write_Clean+0x1aa>
		{
			tData[indx++] = data[i+dataPosition];
 80021c6:	f8b7 2132 	ldrh.w	r2, [r7, #306]	@ 0x132
 80021ca:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80021ce:	4413      	add	r3, r2
 80021d0:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 80021d4:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 80021d8:	6812      	ldr	r2, [r2, #0]
 80021da:	441a      	add	r2, r3
 80021dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80021e0:	1c59      	adds	r1, r3, #1
 80021e2:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 80021e6:	7811      	ldrb	r1, [r2, #0]
 80021e8:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 80021ec:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 80021f0:	54d1      	strb	r1, [r2, r3]
		for (uint16_t i=0; i<bytesremaining; i++)
 80021f2:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 80021f6:	3301      	adds	r3, #1
 80021f8:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
 80021fc:	f8b7 2132 	ldrh.w	r2, [r7, #306]	@ 0x132
 8002200:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 8002204:	429a      	cmp	r2, r3
 8002206:	d3de      	bcc.n	80021c6 <W25Q_Write_Clean+0x174>
		}

		if (bytestosend > 250)
 8002208:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 800220c:	2bfa      	cmp	r3, #250	@ 0xfa
 800220e:	d916      	bls.n	800223e <W25Q_Write_Clean+0x1ec>
		{
			csLOW();
 8002210:	f7ff fdce 	bl	8001db0 <csLOW>
			SPI_Write(tData, 100);
 8002214:	f107 0310 	add.w	r3, r7, #16
 8002218:	2164      	movs	r1, #100	@ 0x64
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff fde0 	bl	8001de0 <SPI_Write>
			SPI_Write(tData+100, bytestosend-100);
 8002220:	f107 0310 	add.w	r3, r7, #16
 8002224:	3364      	adds	r3, #100	@ 0x64
 8002226:	f8b7 211c 	ldrh.w	r2, [r7, #284]	@ 0x11c
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	3a64      	subs	r2, #100	@ 0x64
 800222e:	b2d2      	uxtb	r2, r2
 8002230:	4611      	mov	r1, r2
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff fdd4 	bl	8001de0 <SPI_Write>
			csHIGH();
 8002238:	f7ff fdc6 	bl	8001dc8 <csHIGH>
 800223c:	e00c      	b.n	8002258 <W25Q_Write_Clean+0x206>

		}

		else
		{
			csLOW();
 800223e:	f7ff fdb7 	bl	8001db0 <csLOW>
			SPI_Write(tData, bytestosend);
 8002242:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8002246:	b2da      	uxtb	r2, r3
 8002248:	f107 0310 	add.w	r3, r7, #16
 800224c:	4611      	mov	r1, r2
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff fdc6 	bl	8001de0 <SPI_Write>
			csHIGH();
 8002254:	f7ff fdb8 	bl	8001dc8 <csHIGH>
		}


		startPage++;
 8002258:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800225c:	3301      	adds	r3, #1
 800225e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
		offset = 0;
 8002262:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002266:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 800226a:	2200      	movs	r2, #0
 800226c:	801a      	strh	r2, [r3, #0]
		size = size-bytesremaining;
 800226e:	f8b7 211e 	ldrh.w	r2, [r7, #286]	@ 0x11e
 8002272:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002276:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800227a:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 800227e:	f5a1 71a2 	sub.w	r1, r1, #324	@ 0x144
 8002282:	6809      	ldr	r1, [r1, #0]
 8002284:	1a8a      	subs	r2, r1, r2
 8002286:	601a      	str	r2, [r3, #0]
		dataPosition = dataPosition+bytesremaining;
 8002288:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 800228c:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8002290:	4413      	add	r3, r2
 8002292:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c

		W25Q_Delay(5);
 8002296:	2005      	movs	r0, #5
 8002298:	f7ff fd7e 	bl	8001d98 <W25Q_Delay>
		write_disable();
 800229c:	f7ff fe6c 	bl	8001f78 <write_disable>
	for (uint32_t i=0; i<numPages; i++)
 80022a0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80022a4:	3301      	adds	r3, #1
 80022a6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80022aa:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 80022ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80022b2:	429a      	cmp	r2, r3
 80022b4:	f4ff af38 	bcc.w	8002128 <W25Q_Write_Clean+0xd6>

	}
}
 80022b8:	bf00      	nop
 80022ba:	bf00      	nop
 80022bc:	f507 77a6 	add.w	r7, r7, #332	@ 0x14c
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd90      	pop	{r4, r7, pc}

080022c4 <W25Q_Write>:

void W25Q_Write (uint32_t page, uint16_t offset, uint32_t size, uint8_t *data)
{
 80022c4:	b590      	push	{r4, r7, lr}
 80022c6:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 80022d2:	f844 0c24 	str.w	r0, [r4, #-36]
 80022d6:	4608      	mov	r0, r1
 80022d8:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80022dc:	f841 2c2c 	str.w	r2, [r1, #-44]
 80022e0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80022e4:	f842 3c30 	str.w	r3, [r2, #-48]
 80022e8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80022ec:	4602      	mov	r2, r0
 80022ee:	f823 2c26 	strh.w	r2, [r3, #-38]
	uint16_t startSector  = page/16;
 80022f2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80022f6:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80022fa:	091b      	lsrs	r3, r3, #4
 80022fc:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8002300:	f102 020e 	add.w	r2, r2, #14
 8002304:	8013      	strh	r3, [r2, #0]
	uint16_t endSector  = (page + ((size+offset-1)/256))/16;
 8002306:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800230a:	f833 2c26 	ldrh.w	r2, [r3, #-38]
 800230e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002312:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002316:	4413      	add	r3, r2
 8002318:	3b01      	subs	r3, #1
 800231a:	0a1a      	lsrs	r2, r3, #8
 800231c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002320:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8002324:	4413      	add	r3, r2
 8002326:	091b      	lsrs	r3, r3, #4
 8002328:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800232c:	f102 021e 	add.w	r2, r2, #30
 8002330:	8013      	strh	r3, [r2, #0]
	uint16_t numSectors = endSector-startSector+1;
 8002332:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8002336:	f103 031e 	add.w	r3, r3, #30
 800233a:	881a      	ldrh	r2, [r3, #0]
 800233c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002340:	f103 030e 	add.w	r3, r3, #14
 8002344:	881b      	ldrh	r3, [r3, #0]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	b29b      	uxth	r3, r3
 800234a:	3301      	adds	r3, #1
 800234c:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8002350:	f102 021c 	add.w	r2, r2, #28
 8002354:	8013      	strh	r3, [r2, #0]

	uint8_t previousData[4096];
	uint32_t sectorOffset = ((page%16)*256)+offset;
 8002356:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800235a:	f853 3c24 	ldr.w	r3, [r3, #-36]
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	021a      	lsls	r2, r3, #8
 8002364:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002368:	f833 3c26 	ldrh.w	r3, [r3, #-38]
 800236c:	4413      	add	r3, r2
 800236e:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8002372:	f102 0208 	add.w	r2, r2, #8
 8002376:	6013      	str	r3, [r2, #0]
	uint32_t dataindx = 0;
 8002378:	2300      	movs	r3, #0
 800237a:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800237e:	f102 0204 	add.w	r2, r2, #4
 8002382:	6013      	str	r3, [r2, #0]

	for (uint16_t i=0; i<numSectors; i++)
 8002384:	2300      	movs	r3, #0
 8002386:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800238a:	f102 0202 	add.w	r2, r2, #2
 800238e:	8013      	strh	r3, [r2, #0]
 8002390:	e0a5      	b.n	80024de <W25Q_Write+0x21a>
	{
		uint32_t startPage = startSector*16;
 8002392:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002396:	f103 030e 	add.w	r3, r3, #14
 800239a:	881b      	ldrh	r3, [r3, #0]
 800239c:	011b      	lsls	r3, r3, #4
 800239e:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80023a2:	f102 0218 	add.w	r2, r2, #24
 80023a6:	6013      	str	r3, [r2, #0]
		W25Q_FastRead(startPage, 0, 4096, previousData);
 80023a8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80023ac:	3b1c      	subs	r3, #28
 80023ae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80023b2:	2100      	movs	r1, #0
 80023b4:	f507 5080 	add.w	r0, r7, #4096	@ 0x1000
 80023b8:	f100 0018 	add.w	r0, r0, #24
 80023bc:	6800      	ldr	r0, [r0, #0]
 80023be:	f7ff fd98 	bl	8001ef2 <W25Q_FastRead>

		uint16_t bytesRemaining = bytestomodify(size, sectorOffset);
 80023c2:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80023c6:	f103 0308 	add.w	r3, r3, #8
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80023d2:	4619      	mov	r1, r3
 80023d4:	f852 0c2c 	ldr.w	r0, [r2, #-44]
 80023d8:	f7ff fdf9 	bl	8001fce <bytestomodify>
 80023dc:	4603      	mov	r3, r0
 80023de:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80023e2:	f102 0216 	add.w	r2, r2, #22
 80023e6:	8013      	strh	r3, [r2, #0]
		for (uint16_t i=0; i<bytesRemaining; i++)
 80023e8:	2300      	movs	r3, #0
 80023ea:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80023ee:	8013      	strh	r3, [r2, #0]
 80023f0:	e023      	b.n	800243a <W25Q_Write+0x176>
		{
			previousData[i+sectorOffset] = data[i+dataindx];
 80023f2:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80023f6:	881a      	ldrh	r2, [r3, #0]
 80023f8:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80023fc:	f103 0304 	add.w	r3, r3, #4
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4413      	add	r3, r2
 8002404:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8002408:	f852 2c30 	ldr.w	r2, [r2, #-48]
 800240c:	441a      	add	r2, r3
 800240e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002412:	8819      	ldrh	r1, [r3, #0]
 8002414:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002418:	f103 0308 	add.w	r3, r3, #8
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	440b      	add	r3, r1
 8002420:	7812      	ldrb	r2, [r2, #0]
 8002422:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8002426:	440b      	add	r3, r1
 8002428:	f803 2c1c 	strb.w	r2, [r3, #-28]
		for (uint16_t i=0; i<bytesRemaining; i++)
 800242c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002430:	881b      	ldrh	r3, [r3, #0]
 8002432:	3301      	adds	r3, #1
 8002434:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8002438:	8013      	strh	r3, [r2, #0]
 800243a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800243e:	881a      	ldrh	r2, [r3, #0]
 8002440:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8002444:	f103 0316 	add.w	r3, r3, #22
 8002448:	881b      	ldrh	r3, [r3, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d3d1      	bcc.n	80023f2 <W25Q_Write+0x12e>
		}

		W25Q_Write_Clean(startPage, 0, 4096, previousData);
 800244e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002452:	3b1c      	subs	r3, #28
 8002454:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002458:	2100      	movs	r1, #0
 800245a:	f507 5080 	add.w	r0, r7, #4096	@ 0x1000
 800245e:	f100 0018 	add.w	r0, r0, #24
 8002462:	6800      	ldr	r0, [r0, #0]
 8002464:	f7ff fdf5 	bl	8002052 <W25Q_Write_Clean>

		startSector++;
 8002468:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800246c:	f103 030e 	add.w	r3, r3, #14
 8002470:	881b      	ldrh	r3, [r3, #0]
 8002472:	3301      	adds	r3, #1
 8002474:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8002478:	f102 020e 	add.w	r2, r2, #14
 800247c:	8013      	strh	r3, [r2, #0]
		sectorOffset = 0;
 800247e:	2300      	movs	r3, #0
 8002480:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8002484:	f102 0208 	add.w	r2, r2, #8
 8002488:	6013      	str	r3, [r2, #0]
		dataindx = dataindx+bytesRemaining;
 800248a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800248e:	f103 0316 	add.w	r3, r3, #22
 8002492:	881b      	ldrh	r3, [r3, #0]
 8002494:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8002498:	f102 0204 	add.w	r2, r2, #4
 800249c:	6812      	ldr	r2, [r2, #0]
 800249e:	4413      	add	r3, r2
 80024a0:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80024a4:	f102 0204 	add.w	r2, r2, #4
 80024a8:	6013      	str	r3, [r2, #0]
		size = size-bytesRemaining;
 80024aa:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80024ae:	f103 0316 	add.w	r3, r3, #22
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80024b8:	4611      	mov	r1, r2
 80024ba:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80024be:	f852 2c2c 	ldr.w	r2, [r2, #-44]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	f841 3c2c 	str.w	r3, [r1, #-44]
	for (uint16_t i=0; i<numSectors; i++)
 80024c8:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80024cc:	f103 0302 	add.w	r3, r3, #2
 80024d0:	881b      	ldrh	r3, [r3, #0]
 80024d2:	3301      	adds	r3, #1
 80024d4:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80024d8:	f102 0202 	add.w	r2, r2, #2
 80024dc:	8013      	strh	r3, [r2, #0]
 80024de:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80024e2:	f103 0302 	add.w	r3, r3, #2
 80024e6:	881a      	ldrh	r2, [r3, #0]
 80024e8:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80024ec:	f103 031c 	add.w	r3, r3, #28
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	f4ff af4d 	bcc.w	8002392 <W25Q_Write+0xce>
	}
}
 80024f8:	bf00      	nop
 80024fa:	bf00      	nop
 80024fc:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 8002500:	3714      	adds	r7, #20
 8002502:	46bd      	mov	sp, r7
 8002504:	bd90      	pop	{r4, r7, pc}

08002506 <W25Q_Read_Byte>:

uint8_t W25Q_Read_Byte (uint32_t Addr)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b086      	sub	sp, #24
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
	uint8_t tData[5];
	uint8_t rData;

	if (numBLOCK<512)   // Chip Size<256Mb
	{
		tData[0] = 0x03;  // enable Read
 800250e:	2303      	movs	r3, #3
 8002510:	743b      	strb	r3, [r7, #16]
		tData[1] = (Addr>>16)&0xFF;  // MSB of the memory Address
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	0c1b      	lsrs	r3, r3, #16
 8002516:	b2db      	uxtb	r3, r3
 8002518:	747b      	strb	r3, [r7, #17]
		tData[2] = (Addr>>8)&0xFF;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	0a1b      	lsrs	r3, r3, #8
 800251e:	b2db      	uxtb	r3, r3
 8002520:	74bb      	strb	r3, [r7, #18]
		tData[3] = (Addr)&0xFF; // LSB of the memory Address
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	b2db      	uxtb	r3, r3
 8002526:	74fb      	strb	r3, [r7, #19]
		tData[2] = (Addr>>16)&0xFF;
		tData[3] = (Addr>>8)&0xFF;
		tData[4] = (Addr)&0xFF; // LSB of the memory Address
	}

	csLOW();  // pull the CS Low
 8002528:	f7ff fc42 	bl	8001db0 <csLOW>
	if (numBLOCK<512)
	{
		SPI_Write(tData, 4);  // send read instruction along with the 24 bit memory address
 800252c:	f107 0310 	add.w	r3, r7, #16
 8002530:	2104      	movs	r1, #4
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff fc54 	bl	8001de0 <SPI_Write>
	else
	{
		SPI_Write(tData, 5);  // send read instruction along with the 32 bit memory address
	}

	SPI_Read(&rData, 1);  // Read the data
 8002538:	f107 030f 	add.w	r3, r7, #15
 800253c:	2101      	movs	r1, #1
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff fc62 	bl	8001e08 <SPI_Read>
	csHIGH();  // pull the CS High
 8002544:	f7ff fc40 	bl	8001dc8 <csHIGH>

	return rData;
 8002548:	7bfb      	ldrb	r3, [r7, #15]
}
 800254a:	4618      	mov	r0, r3
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <W25Q_Write_Byte>:

void W25Q_Write_Byte (uint32_t Addr, uint8_t data)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b084      	sub	sp, #16
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
 800255a:	460b      	mov	r3, r1
 800255c:	70fb      	strb	r3, [r7, #3]
	uint8_t tData[6];
	uint8_t indx;

	if (numBLOCK<512)   // Chip Size<256Mb
	{
		tData[0] = 0x02;  // page program
 800255e:	2302      	movs	r3, #2
 8002560:	723b      	strb	r3, [r7, #8]
		tData[1] = (Addr>>16)&0xFF;  // MSB of the memory Address
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	0c1b      	lsrs	r3, r3, #16
 8002566:	b2db      	uxtb	r3, r3
 8002568:	727b      	strb	r3, [r7, #9]
		tData[2] = (Addr>>8)&0xFF;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	0a1b      	lsrs	r3, r3, #8
 800256e:	b2db      	uxtb	r3, r3
 8002570:	72bb      	strb	r3, [r7, #10]
		tData[3] = (Addr)&0xFF; // LSB of the memory Address
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	b2db      	uxtb	r3, r3
 8002576:	72fb      	strb	r3, [r7, #11]
		tData[4] = data;
 8002578:	78fb      	ldrb	r3, [r7, #3]
 800257a:	733b      	strb	r3, [r7, #12]
		indx = 5;
 800257c:	2305      	movs	r3, #5
 800257e:	73fb      	strb	r3, [r7, #15]
		tData[5] = data;
		indx = 6;
	}


	if (W25Q_Read_Byte(Addr) == 0xFF)
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f7ff ffc0 	bl	8002506 <W25Q_Read_Byte>
 8002586:	4603      	mov	r3, r0
 8002588:	2bff      	cmp	r3, #255	@ 0xff
 800258a:	d111      	bne.n	80025b0 <W25Q_Write_Byte+0x5e>
	{
		write_enable();
 800258c:	f7ff fcdf 	bl	8001f4e <write_enable>
		csLOW();
 8002590:	f7ff fc0e 	bl	8001db0 <csLOW>
		SPI_Write(tData, indx);
 8002594:	7bfa      	ldrb	r2, [r7, #15]
 8002596:	f107 0308 	add.w	r3, r7, #8
 800259a:	4611      	mov	r1, r2
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff fc1f 	bl	8001de0 <SPI_Write>
		csHIGH();
 80025a2:	f7ff fc11 	bl	8001dc8 <csHIGH>

		W25Q_Delay(5);
 80025a6:	2005      	movs	r0, #5
 80025a8:	f7ff fbf6 	bl	8001d98 <W25Q_Delay>
		write_disable();
 80025ac:	f7ff fce4 	bl	8001f78 <write_disable>
	}
}
 80025b0:	bf00      	nop
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <rotword>:
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f,
	0xb0, 0x54, 0xbb, 0x16
};

static inline unsigned int rotword(unsigned int a)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
	return (((a) >> 24)|((a) << 8));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	ea4f 6333 	mov.w	r3, r3, ror #24
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
	...

080025d4 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
 80025d4:	b5b0      	push	{r4, r5, r7, lr}
 80025d6:	b090      	sub	sp, #64	@ 0x40
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
	const unsigned int rconst[11] = {
 80025de:	4b49      	ldr	r3, [pc, #292]	@ (8002704 <tc_aes128_set_encrypt_key+0x130>)
 80025e0:	f107 040c 	add.w	r4, r7, #12
 80025e4:	461d      	mov	r5, r3
 80025e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80025f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <tc_aes128_set_encrypt_key+0x2c>
		return TC_CRYPTO_FAIL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	e07d      	b.n	80026fc <tc_aes128_set_encrypt_key+0x128>
	} else if (k == (const uint8_t *) 0) {
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <tc_aes128_set_encrypt_key+0x36>
		return TC_CRYPTO_FAIL;
 8002606:	2300      	movs	r3, #0
 8002608:	e078      	b.n	80026fc <tc_aes128_set_encrypt_key+0x128>
	}

	for (i = 0; i < Nk; ++i) {
 800260a:	2300      	movs	r3, #0
 800260c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800260e:	e024      	b.n	800265a <tc_aes128_set_encrypt_key+0x86>
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
 8002610:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	4413      	add	r3, r2
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	061a      	lsls	r2, r3, #24
 800261c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	3301      	adds	r3, #1
 8002622:	6839      	ldr	r1, [r7, #0]
 8002624:	440b      	add	r3, r1
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	041b      	lsls	r3, r3, #16
 800262a:	431a      	orrs	r2, r3
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
 800262c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	3302      	adds	r3, #2
 8002632:	6839      	ldr	r1, [r7, #0]
 8002634:	440b      	add	r3, r1
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	021b      	lsls	r3, r3, #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
 800263a:	4313      	orrs	r3, r2
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
 800263c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800263e:	0092      	lsls	r2, r2, #2
 8002640:	3203      	adds	r2, #3
 8002642:	6839      	ldr	r1, [r7, #0]
 8002644:	440a      	add	r2, r1
 8002646:	7812      	ldrb	r2, [r2, #0]
 8002648:	4313      	orrs	r3, r2
 800264a:	4619      	mov	r1, r3
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < Nk; ++i) {
 8002654:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002656:	3301      	adds	r3, #1
 8002658:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800265a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800265c:	2b03      	cmp	r3, #3
 800265e:	d9d7      	bls.n	8002610 <tc_aes128_set_encrypt_key+0x3c>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
 8002660:	e048      	b.n	80026f4 <tc_aes128_set_encrypt_key+0x120>
		t = s->words[i-1];
 8002662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002664:	1e5a      	subs	r2, r3, #1
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800266c:	63bb      	str	r3, [r7, #56]	@ 0x38
		if ((i % Nk) == 0) {
 800266e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002670:	f003 0303 	and.w	r3, r3, #3
 8002674:	2b00      	cmp	r3, #0
 8002676:	d12e      	bne.n	80026d6 <tc_aes128_set_encrypt_key+0x102>
			t = subword(rotword(t)) ^ rconst[i/Nk];
 8002678:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800267a:	f7ff ff9d 	bl	80025b8 <rotword>
 800267e:	4603      	mov	r3, r0
 8002680:	0e1b      	lsrs	r3, r3, #24
 8002682:	b2db      	uxtb	r3, r3
 8002684:	4a20      	ldr	r2, [pc, #128]	@ (8002708 <tc_aes128_set_encrypt_key+0x134>)
 8002686:	5cd3      	ldrb	r3, [r2, r3]
 8002688:	061c      	lsls	r4, r3, #24
 800268a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800268c:	f7ff ff94 	bl	80025b8 <rotword>
 8002690:	4603      	mov	r3, r0
 8002692:	0c1b      	lsrs	r3, r3, #16
 8002694:	b2db      	uxtb	r3, r3
 8002696:	4a1c      	ldr	r2, [pc, #112]	@ (8002708 <tc_aes128_set_encrypt_key+0x134>)
 8002698:	5cd3      	ldrb	r3, [r2, r3]
 800269a:	041b      	lsls	r3, r3, #16
 800269c:	431c      	orrs	r4, r3
 800269e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80026a0:	f7ff ff8a 	bl	80025b8 <rotword>
 80026a4:	4603      	mov	r3, r0
 80026a6:	0a1b      	lsrs	r3, r3, #8
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	4a17      	ldr	r2, [pc, #92]	@ (8002708 <tc_aes128_set_encrypt_key+0x134>)
 80026ac:	5cd3      	ldrb	r3, [r2, r3]
 80026ae:	021b      	lsls	r3, r3, #8
 80026b0:	431c      	orrs	r4, r3
 80026b2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80026b4:	f7ff ff80 	bl	80025b8 <rotword>
 80026b8:	4603      	mov	r3, r0
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	4a12      	ldr	r2, [pc, #72]	@ (8002708 <tc_aes128_set_encrypt_key+0x134>)
 80026be:	5cd3      	ldrb	r3, [r2, r3]
 80026c0:	4323      	orrs	r3, r4
 80026c2:	461a      	mov	r2, r3
 80026c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026c6:	089b      	lsrs	r3, r3, #2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	3340      	adds	r3, #64	@ 0x40
 80026cc:	443b      	add	r3, r7
 80026ce:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80026d2:	4053      	eors	r3, r2
 80026d4:	63bb      	str	r3, [r7, #56]	@ 0x38
		}
		s->words[i] = s->words[i-Nk] ^ t;
 80026d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026d8:	1f1a      	subs	r2, r3, #4
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80026e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026e2:	ea82 0103 	eor.w	r1, r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80026ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (; i < (Nb * (Nr + 1)); ++i) {
 80026ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026f0:	3301      	adds	r3, #1
 80026f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026f6:	2b2b      	cmp	r3, #43	@ 0x2b
 80026f8:	d9b3      	bls.n	8002662 <tc_aes128_set_encrypt_key+0x8e>
	}

	return TC_CRYPTO_SUCCESS;
 80026fa:	2301      	movs	r3, #1
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3740      	adds	r7, #64	@ 0x40
 8002700:	46bd      	mov	sp, r7
 8002702:	bdb0      	pop	{r4, r5, r7, pc}
 8002704:	08018968 	.word	0x08018968
 8002708:	080194a4 	.word	0x080194a4

0800270c <add_round_key>:

static inline void add_round_key(uint8_t *s, const unsigned int *k)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	781a      	ldrb	r2, [r3, #0]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	0e1b      	lsrs	r3, r3, #24
 8002720:	b2db      	uxtb	r3, r3
 8002722:	4053      	eors	r3, r2
 8002724:	b2da      	uxtb	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	701a      	strb	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	3301      	adds	r3, #1
 800272e:	7819      	ldrb	r1, [r3, #0]
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	0c1b      	lsrs	r3, r3, #16
 8002736:	b2da      	uxtb	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3301      	adds	r3, #1
 800273c:	404a      	eors	r2, r1
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	701a      	strb	r2, [r3, #0]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3302      	adds	r3, #2
 8002746:	7819      	ldrb	r1, [r3, #0]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	0a1b      	lsrs	r3, r3, #8
 800274e:	b2da      	uxtb	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3302      	adds	r3, #2
 8002754:	404a      	eors	r2, r1
 8002756:	b2d2      	uxtb	r2, r2
 8002758:	701a      	strb	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3303      	adds	r3, #3
 800275e:	7819      	ldrb	r1, [r3, #0]
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	b2da      	uxtb	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	3303      	adds	r3, #3
 800276a:	404a      	eors	r2, r1
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	701a      	strb	r2, [r3, #0]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3304      	adds	r3, #4
 8002774:	7819      	ldrb	r1, [r3, #0]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	3304      	adds	r3, #4
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	0e1b      	lsrs	r3, r3, #24
 800277e:	b2da      	uxtb	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3304      	adds	r3, #4
 8002784:	404a      	eors	r2, r1
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	701a      	strb	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	3305      	adds	r3, #5
 800278e:	7819      	ldrb	r1, [r3, #0]
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	3304      	adds	r3, #4
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	0c1b      	lsrs	r3, r3, #16
 8002798:	b2da      	uxtb	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	3305      	adds	r3, #5
 800279e:	404a      	eors	r2, r1
 80027a0:	b2d2      	uxtb	r2, r2
 80027a2:	701a      	strb	r2, [r3, #0]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3306      	adds	r3, #6
 80027a8:	7819      	ldrb	r1, [r3, #0]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	3304      	adds	r3, #4
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	0a1b      	lsrs	r3, r3, #8
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3306      	adds	r3, #6
 80027b8:	404a      	eors	r2, r1
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	701a      	strb	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	3307      	adds	r3, #7
 80027c2:	7819      	ldrb	r1, [r3, #0]
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	3304      	adds	r3, #4
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3307      	adds	r3, #7
 80027d0:	404a      	eors	r2, r1
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	701a      	strb	r2, [r3, #0]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	3308      	adds	r3, #8
 80027da:	7819      	ldrb	r1, [r3, #0]
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	3308      	adds	r3, #8
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	0e1b      	lsrs	r3, r3, #24
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3308      	adds	r3, #8
 80027ea:	404a      	eors	r2, r1
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	701a      	strb	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3309      	adds	r3, #9
 80027f4:	7819      	ldrb	r1, [r3, #0]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	3308      	adds	r3, #8
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	0c1b      	lsrs	r3, r3, #16
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3309      	adds	r3, #9
 8002804:	404a      	eors	r2, r1
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	701a      	strb	r2, [r3, #0]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	330a      	adds	r3, #10
 800280e:	7819      	ldrb	r1, [r3, #0]
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	3308      	adds	r3, #8
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	0a1b      	lsrs	r3, r3, #8
 8002818:	b2da      	uxtb	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	330a      	adds	r3, #10
 800281e:	404a      	eors	r2, r1
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	701a      	strb	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	330b      	adds	r3, #11
 8002828:	7819      	ldrb	r1, [r3, #0]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	3308      	adds	r3, #8
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	b2da      	uxtb	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	330b      	adds	r3, #11
 8002836:	404a      	eors	r2, r1
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	701a      	strb	r2, [r3, #0]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	330c      	adds	r3, #12
 8002840:	7819      	ldrb	r1, [r3, #0]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	330c      	adds	r3, #12
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	0e1b      	lsrs	r3, r3, #24
 800284a:	b2da      	uxtb	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	330c      	adds	r3, #12
 8002850:	404a      	eors	r2, r1
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	701a      	strb	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	330d      	adds	r3, #13
 800285a:	7819      	ldrb	r1, [r3, #0]
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	330c      	adds	r3, #12
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	0c1b      	lsrs	r3, r3, #16
 8002864:	b2da      	uxtb	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	330d      	adds	r3, #13
 800286a:	404a      	eors	r2, r1
 800286c:	b2d2      	uxtb	r2, r2
 800286e:	701a      	strb	r2, [r3, #0]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	330e      	adds	r3, #14
 8002874:	7819      	ldrb	r1, [r3, #0]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	330c      	adds	r3, #12
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	0a1b      	lsrs	r3, r3, #8
 800287e:	b2da      	uxtb	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	330e      	adds	r3, #14
 8002884:	404a      	eors	r2, r1
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	701a      	strb	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	330f      	adds	r3, #15
 800288e:	7819      	ldrb	r1, [r3, #0]
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	330c      	adds	r3, #12
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	b2da      	uxtb	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	330f      	adds	r3, #15
 800289c:	404a      	eors	r2, r1
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	701a      	strb	r2, [r3, #0]
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
	...

080028b0 <sub_bytes>:

static inline void sub_bytes(uint8_t *s)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
 80028b8:	2300      	movs	r3, #0
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	e00d      	b.n	80028da <sub_bytes+0x2a>
		s[i] = sbox[s[i]];
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	4413      	add	r3, r2
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	4619      	mov	r1, r3
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	4413      	add	r3, r2
 80028ce:	4a08      	ldr	r2, [pc, #32]	@ (80028f0 <sub_bytes+0x40>)
 80028d0:	5c52      	ldrb	r2, [r2, r1]
 80028d2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	3301      	adds	r3, #1
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2b0f      	cmp	r3, #15
 80028de:	d9ee      	bls.n	80028be <sub_bytes+0xe>
	}
}
 80028e0:	bf00      	nop
 80028e2:	bf00      	nop
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	080194a4 	.word	0x080194a4

080028f4 <mult_row_column>:

#define triple(a)(_double_byte(a)^(a))

static inline void mult_row_column(uint8_t *out, const uint8_t *in)
{
 80028f4:	b590      	push	{r4, r7, lr}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f000 fa14 	bl	8002d30 <_double_byte>
 8002908:	4603      	mov	r3, r0
 800290a:	461c      	mov	r4, r3
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	3301      	adds	r3, #1
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f000 fa0c 	bl	8002d30 <_double_byte>
 8002918:	4603      	mov	r3, r0
 800291a:	461a      	mov	r2, r3
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	3301      	adds	r3, #1
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	4053      	eors	r3, r2
 8002924:	b2db      	uxtb	r3, r3
 8002926:	4063      	eors	r3, r4
 8002928:	b2da      	uxtb	r2, r3
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	3302      	adds	r3, #2
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	4053      	eors	r3, r2
 8002932:	b2da      	uxtb	r2, r3
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	3303      	adds	r3, #3
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	4053      	eors	r3, r2
 800293c:	b2da      	uxtb	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	701a      	strb	r2, [r3, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	781c      	ldrb	r4, [r3, #0]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	3301      	adds	r3, #1
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	4618      	mov	r0, r3
 800294e:	f000 f9ef 	bl	8002d30 <_double_byte>
 8002952:	4603      	mov	r3, r0
 8002954:	4063      	eors	r3, r4
 8002956:	b2dc      	uxtb	r4, r3
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	3302      	adds	r3, #2
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f000 f9e6 	bl	8002d30 <_double_byte>
 8002964:	4603      	mov	r3, r0
 8002966:	461a      	mov	r2, r3
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	3302      	adds	r3, #2
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	4053      	eors	r3, r2
 8002970:	b2db      	uxtb	r3, r3
 8002972:	4063      	eors	r3, r4
 8002974:	b2d9      	uxtb	r1, r3
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	3303      	adds	r3, #3
 800297a:	781a      	ldrb	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3301      	adds	r3, #1
 8002980:	404a      	eors	r2, r1
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	701a      	strb	r2, [r3, #0]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	781a      	ldrb	r2, [r3, #0]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	3301      	adds	r3, #1
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	4053      	eors	r3, r2
 8002992:	b2dc      	uxtb	r4, r3
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	3302      	adds	r3, #2
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f000 f9c8 	bl	8002d30 <_double_byte>
 80029a0:	4603      	mov	r3, r0
 80029a2:	4063      	eors	r3, r4
 80029a4:	b2dc      	uxtb	r4, r3
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	3303      	adds	r3, #3
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f000 f9bf 	bl	8002d30 <_double_byte>
 80029b2:	4603      	mov	r3, r0
 80029b4:	461a      	mov	r2, r3
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	3303      	adds	r3, #3
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	4053      	eors	r3, r2
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3302      	adds	r3, #2
 80029c4:	4062      	eors	r2, r4
 80029c6:	b2d2      	uxtb	r2, r2
 80029c8:	701a      	strb	r2, [r3, #0]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 f9ae 	bl	8002d30 <_double_byte>
 80029d4:	4603      	mov	r3, r0
 80029d6:	461a      	mov	r2, r3
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	4053      	eors	r3, r2
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	3301      	adds	r3, #1
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	4053      	eors	r3, r2
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	3302      	adds	r3, #2
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	4053      	eors	r3, r2
 80029f2:	b2dc      	uxtb	r4, r3
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	3303      	adds	r3, #3
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 f998 	bl	8002d30 <_double_byte>
 8002a00:	4603      	mov	r3, r0
 8002a02:	461a      	mov	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3303      	adds	r3, #3
 8002a08:	4062      	eors	r2, r4
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	701a      	strb	r2, [r3, #0]
}
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd90      	pop	{r4, r7, pc}

08002a16 <mix_columns>:

static inline void mix_columns(uint8_t *s)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b086      	sub	sp, #24
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
	uint8_t t[Nb*Nk];

	mult_row_column(t, s);
 8002a1e:	f107 0308 	add.w	r3, r7, #8
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff ff65 	bl	80028f4 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	1d1a      	adds	r2, r3, #4
 8002a2e:	f107 0308 	add.w	r3, r7, #8
 8002a32:	3304      	adds	r3, #4
 8002a34:	4611      	mov	r1, r2
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff ff5c 	bl	80028f4 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f103 0208 	add.w	r2, r3, #8
 8002a42:	f107 0308 	add.w	r3, r7, #8
 8002a46:	3308      	adds	r3, #8
 8002a48:	4611      	mov	r1, r2
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff ff52 	bl	80028f4 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f103 020c 	add.w	r2, r3, #12
 8002a56:	f107 0308 	add.w	r3, r7, #8
 8002a5a:	330c      	adds	r3, #12
 8002a5c:	4611      	mov	r1, r2
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff ff48 	bl	80028f4 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
 8002a64:	f107 0208 	add.w	r2, r7, #8
 8002a68:	2310      	movs	r3, #16
 8002a6a:	2110      	movs	r1, #16
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 f937 	bl	8002ce0 <_copy>
}
 8002a72:	bf00      	nop
 8002a74:	3718      	adds	r7, #24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b086      	sub	sp, #24
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	723b      	strb	r3, [r7, #8]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	795b      	ldrb	r3, [r3, #5]
 8002a8c:	727b      	strb	r3, [r7, #9]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	7a9b      	ldrb	r3, [r3, #10]
 8002a92:	72bb      	strb	r3, [r7, #10]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	7bdb      	ldrb	r3, [r3, #15]
 8002a98:	72fb      	strb	r3, [r7, #11]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	791b      	ldrb	r3, [r3, #4]
 8002a9e:	733b      	strb	r3, [r7, #12]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	7a5b      	ldrb	r3, [r3, #9]
 8002aa4:	737b      	strb	r3, [r7, #13]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	7b9b      	ldrb	r3, [r3, #14]
 8002aaa:	73bb      	strb	r3, [r7, #14]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	78db      	ldrb	r3, [r3, #3]
 8002ab0:	73fb      	strb	r3, [r7, #15]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	7a1b      	ldrb	r3, [r3, #8]
 8002ab6:	743b      	strb	r3, [r7, #16]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	7b5b      	ldrb	r3, [r3, #13]
 8002abc:	747b      	strb	r3, [r7, #17]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	789b      	ldrb	r3, [r3, #2]
 8002ac2:	74bb      	strb	r3, [r7, #18]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	79db      	ldrb	r3, [r3, #7]
 8002ac8:	74fb      	strb	r3, [r7, #19]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	7b1b      	ldrb	r3, [r3, #12]
 8002ace:	753b      	strb	r3, [r7, #20]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	785b      	ldrb	r3, [r3, #1]
 8002ad4:	757b      	strb	r3, [r7, #21]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	799b      	ldrb	r3, [r3, #6]
 8002ada:	75bb      	strb	r3, [r7, #22]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	7adb      	ldrb	r3, [r3, #11]
 8002ae0:	75fb      	strb	r3, [r7, #23]
	(void) _copy(s, sizeof(t), t, sizeof(t));
 8002ae2:	f107 0208 	add.w	r2, r7, #8
 8002ae6:	2310      	movs	r3, #16
 8002ae8:	2110      	movs	r1, #16
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 f8f8 	bl	8002ce0 <_copy>
}
 8002af0:	bf00      	nop
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b08a      	sub	sp, #40	@ 0x28
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <tc_aes_encrypt+0x16>
		return TC_CRYPTO_FAIL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	e05e      	b.n	8002bcc <tc_aes_encrypt+0xd4>
	} else if (in == (const uint8_t *) 0) {
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <tc_aes_encrypt+0x20>
		return TC_CRYPTO_FAIL;
 8002b14:	2300      	movs	r3, #0
 8002b16:	e059      	b.n	8002bcc <tc_aes_encrypt+0xd4>
	} else if (s == (TCAesKeySched_t) 0) {
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <tc_aes_encrypt+0x2a>
		return TC_CRYPTO_FAIL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	e054      	b.n	8002bcc <tc_aes_encrypt+0xd4>
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
 8002b22:	f107 0014 	add.w	r0, r7, #20
 8002b26:	2310      	movs	r3, #16
 8002b28:	68ba      	ldr	r2, [r7, #8]
 8002b2a:	2110      	movs	r1, #16
 8002b2c:	f000 f8d8 	bl	8002ce0 <_copy>
	add_round_key(state, s->words);
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	f107 0314 	add.w	r3, r7, #20
 8002b36:	4611      	mov	r1, r2
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff fde7 	bl	800270c <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
 8002b3e:	2300      	movs	r3, #0
 8002b40:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b42:	e01c      	b.n	8002b7e <tc_aes_encrypt+0x86>
		sub_bytes(state);
 8002b44:	f107 0314 	add.w	r3, r7, #20
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff feb1 	bl	80028b0 <sub_bytes>
		shift_rows(state);
 8002b4e:	f107 0314 	add.w	r3, r7, #20
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff ff91 	bl	8002a7a <shift_rows>
		mix_columns(state);
 8002b58:	f107 0314 	add.w	r3, r7, #20
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff ff5a 	bl	8002a16 <mix_columns>
		add_round_key(state, s->words + Nb*(i+1));
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b66:	3301      	adds	r3, #1
 8002b68:	011b      	lsls	r3, r3, #4
 8002b6a:	441a      	add	r2, r3
 8002b6c:	f107 0314 	add.w	r3, r7, #20
 8002b70:	4611      	mov	r1, r2
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff fdca 	bl	800270c <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
 8002b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d9df      	bls.n	8002b44 <tc_aes_encrypt+0x4c>
	}

	sub_bytes(state);
 8002b84:	f107 0314 	add.w	r3, r7, #20
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff fe91 	bl	80028b0 <sub_bytes>
	shift_rows(state);
 8002b8e:	f107 0314 	add.w	r3, r7, #20
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff ff71 	bl	8002a7a <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	011b      	lsls	r3, r3, #4
 8002ba0:	441a      	add	r2, r3
 8002ba2:	f107 0314 	add.w	r3, r7, #20
 8002ba6:	4611      	mov	r1, r2
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff fdaf 	bl	800270c <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
 8002bae:	f107 0214 	add.w	r2, r7, #20
 8002bb2:	2310      	movs	r3, #16
 8002bb4:	2110      	movs	r1, #16
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 f892 	bl	8002ce0 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
 8002bbc:	f107 0314 	add.w	r3, r7, #20
 8002bc0:	2210      	movs	r2, #16
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f000 f8a2 	bl	8002d0e <_set>

	return TC_CRYPTO_SUCCESS;
 8002bca:	2301      	movs	r3, #1
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3728      	adds	r7, #40	@ 0x28
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <tc_ctr_mode>:
#include <tinycrypt/ctr_mode.h>
#include <tinycrypt/utils.h>

int tc_ctr_mode(uint8_t *out, unsigned int outlen, const uint8_t *in,
		unsigned int inlen, uint8_t *ctr, const TCAesKeySched_t sched)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08e      	sub	sp, #56	@ 0x38
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
 8002be0:	603b      	str	r3, [r7, #0]
	uint8_t nonce[TC_AES_BLOCK_SIZE];
	unsigned int block_num;
	unsigned int i;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d012      	beq.n	8002c0e <tc_ctr_mode+0x3a>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00f      	beq.n	8002c0e <tc_ctr_mode+0x3a>
	    in == (uint8_t *) 0 ||
 8002bee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00c      	beq.n	8002c0e <tc_ctr_mode+0x3a>
	    ctr == (uint8_t *) 0 ||
 8002bf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d009      	beq.n	8002c0e <tc_ctr_mode+0x3a>
	    sched == (TCAesKeySched_t) 0 ||
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d006      	beq.n	8002c0e <tc_ctr_mode+0x3a>
	    inlen == 0 ||
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <tc_ctr_mode+0x3a>
	    outlen == 0 ||
 8002c06:	68ba      	ldr	r2, [r7, #8]
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d001      	beq.n	8002c12 <tc_ctr_mode+0x3e>
	    outlen != inlen) {
		return TC_CRYPTO_FAIL;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	e062      	b.n	8002cd8 <tc_ctr_mode+0x104>
	}

	/* copy the ctr to the nonce */
	(void)_copy(nonce, sizeof(nonce), ctr, sizeof(nonce));
 8002c12:	f107 0010 	add.w	r0, r7, #16
 8002c16:	2310      	movs	r3, #16
 8002c18:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002c1a:	2110      	movs	r1, #16
 8002c1c:	f000 f860 	bl	8002ce0 <_copy>

	/* select the last 4 bytes of the nonce to be incremented */
	block_num = (nonce[12] << 24) | (nonce[13] << 16) |
 8002c20:	7f3b      	ldrb	r3, [r7, #28]
 8002c22:	061a      	lsls	r2, r3, #24
 8002c24:	7f7b      	ldrb	r3, [r7, #29]
 8002c26:	041b      	lsls	r3, r3, #16
 8002c28:	431a      	orrs	r2, r3
		    (nonce[14] << 8) | (nonce[15]);
 8002c2a:	7fbb      	ldrb	r3, [r7, #30]
 8002c2c:	021b      	lsls	r3, r3, #8
	block_num = (nonce[12] << 24) | (nonce[13] << 16) |
 8002c2e:	4313      	orrs	r3, r2
		    (nonce[14] << 8) | (nonce[15]);
 8002c30:	7ffa      	ldrb	r2, [r7, #31]
 8002c32:	4313      	orrs	r3, r2
	block_num = (nonce[12] << 24) | (nonce[13] << 16) |
 8002c34:	637b      	str	r3, [r7, #52]	@ 0x34
	for (i = 0; i < inlen; ++i) {
 8002c36:	2300      	movs	r3, #0
 8002c38:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c3a:	e038      	b.n	8002cae <tc_ctr_mode+0xda>
		if ((i % (TC_AES_BLOCK_SIZE)) == 0) {
 8002c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c3e:	f003 030f 	and.w	r3, r3, #15
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d11f      	bne.n	8002c86 <tc_ctr_mode+0xb2>
			/* encrypt data using the current nonce */
			if (tc_aes_encrypt(buffer, nonce, sched)) {
 8002c46:	f107 0110 	add.w	r1, r7, #16
 8002c4a:	f107 0320 	add.w	r3, r7, #32
 8002c4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff ff51 	bl	8002af8 <tc_aes_encrypt>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d012      	beq.n	8002c82 <tc_ctr_mode+0xae>
				block_num++;
 8002c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c5e:	3301      	adds	r3, #1
 8002c60:	637b      	str	r3, [r7, #52]	@ 0x34
				nonce[12] = (uint8_t)(block_num >> 24);
 8002c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c64:	0e1b      	lsrs	r3, r3, #24
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	773b      	strb	r3, [r7, #28]
				nonce[13] = (uint8_t)(block_num >> 16);
 8002c6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c6c:	0c1b      	lsrs	r3, r3, #16
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	777b      	strb	r3, [r7, #29]
				nonce[14] = (uint8_t)(block_num >> 8);
 8002c72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c74:	0a1b      	lsrs	r3, r3, #8
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	77bb      	strb	r3, [r7, #30]
				nonce[15] = (uint8_t)(block_num);
 8002c7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	77fb      	strb	r3, [r7, #31]
 8002c80:	e001      	b.n	8002c86 <tc_ctr_mode+0xb2>
			} else {
				return TC_CRYPTO_FAIL;
 8002c82:	2300      	movs	r3, #0
 8002c84:	e028      	b.n	8002cd8 <tc_ctr_mode+0x104>
			}
		}
		/* update the output */
		*out++ = buffer[i%(TC_AES_BLOCK_SIZE)] ^ *in++;
 8002c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c88:	f003 030f 	and.w	r3, r3, #15
 8002c8c:	3338      	adds	r3, #56	@ 0x38
 8002c8e:	443b      	add	r3, r7
 8002c90:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	1c5a      	adds	r2, r3, #1
 8002c98:	607a      	str	r2, [r7, #4]
 8002c9a:	781a      	ldrb	r2, [r3, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	1c58      	adds	r0, r3, #1
 8002ca0:	60f8      	str	r0, [r7, #12]
 8002ca2:	404a      	eors	r2, r1
 8002ca4:	b2d2      	uxtb	r2, r2
 8002ca6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < inlen; ++i) {
 8002ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002caa:	3301      	adds	r3, #1
 8002cac:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d3c2      	bcc.n	8002c3c <tc_ctr_mode+0x68>
	}

	/* update the counter */
	ctr[12] = nonce[12]; ctr[13] = nonce[13];
 8002cb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cb8:	330c      	adds	r3, #12
 8002cba:	7f3a      	ldrb	r2, [r7, #28]
 8002cbc:	701a      	strb	r2, [r3, #0]
 8002cbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cc0:	330d      	adds	r3, #13
 8002cc2:	7f7a      	ldrb	r2, [r7, #29]
 8002cc4:	701a      	strb	r2, [r3, #0]
	ctr[14] = nonce[14]; ctr[15] = nonce[15];
 8002cc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cc8:	330e      	adds	r3, #14
 8002cca:	7fba      	ldrb	r2, [r7, #30]
 8002ccc:	701a      	strb	r2, [r3, #0]
 8002cce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cd0:	330f      	adds	r3, #15
 8002cd2:	7ffa      	ldrb	r2, [r7, #31]
 8002cd4:	701a      	strb	r2, [r3, #0]

	return TC_CRYPTO_SUCCESS;
 8002cd6:	2301      	movs	r3, #1
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3738      	adds	r7, #56	@ 0x38
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
 8002cec:	603b      	str	r3, [r7, #0]
	if (from_len <= to_len) {
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d806      	bhi.n	8002d04 <_copy+0x24>
		(void)memcpy(to, from, from_len);
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f013 fe45 	bl	801698a <memcpy>
		return from_len;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	e000      	b.n	8002d06 <_copy+0x26>
	} else {
		return TC_CRYPTO_FAIL;
 8002d04:	2300      	movs	r3, #0
	}
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b084      	sub	sp, #16
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	60f8      	str	r0, [r7, #12]
 8002d16:	460b      	mov	r3, r1
 8002d18:	607a      	str	r2, [r7, #4]
 8002d1a:	72fb      	strb	r3, [r7, #11]
	(void)memset(to, val, len);
 8002d1c:	7afb      	ldrb	r3, [r7, #11]
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	4619      	mov	r1, r3
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f013 fda6 	bl	8016874 <memset>
}
 8002d28:	bf00      	nop
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <_double_byte>:

/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	4603      	mov	r3, r0
 8002d38:	71fb      	strb	r3, [r7, #7]
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
 8002d3a:	79fb      	ldrb	r3, [r7, #7]
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	b25a      	sxtb	r2, r3
 8002d40:	79fb      	ldrb	r3, [r7, #7]
 8002d42:	09db      	lsrs	r3, r3, #7
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	4619      	mov	r1, r3
 8002d48:	0049      	lsls	r1, r1, #1
 8002d4a:	440b      	add	r3, r1
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	00c8      	lsls	r0, r1, #3
 8002d50:	4619      	mov	r1, r3
 8002d52:	4603      	mov	r3, r0
 8002d54:	440b      	add	r3, r1
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	b25b      	sxtb	r3, r3
 8002d5a:	4053      	eors	r3, r2
 8002d5c:	b25b      	sxtb	r3, r3
 8002d5e:	b2db      	uxtb	r3, r3
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <CryptoEngine_Codec>:

int CryptoEngine_Codec(uint8_t *out, unsigned int outlen,
                            const uint8_t *in, unsigned int inlen,
                            const uint8_t *ctr,
                            const uint8_t *key)
{
 8002d6c:	b590      	push	{r4, r7, lr}
 8002d6e:	b0b9      	sub	sp, #228	@ 0xe4
 8002d70:	af02      	add	r7, sp, #8
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
 8002d78:	603b      	str	r3, [r7, #0]
    if (!out || !in || !ctr || !key || outlen != inlen || inlen == 0)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d011      	beq.n	8002da4 <CryptoEngine_Codec+0x38>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00e      	beq.n	8002da4 <CryptoEngine_Codec+0x38>
 8002d86:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00a      	beq.n	8002da4 <CryptoEngine_Codec+0x38>
 8002d8e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d006      	beq.n	8002da4 <CryptoEngine_Codec+0x38>
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d102      	bne.n	8002da4 <CryptoEngine_Codec+0x38>
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <CryptoEngine_Codec+0x3c>
    {
        return TC_CRYPTO_FAIL;
 8002da4:	2300      	movs	r3, #0
 8002da6:	e024      	b.n	8002df2 <CryptoEngine_Codec+0x86>
    }

    struct tc_aes_key_sched_struct sched;
    if (tc_aes128_set_encrypt_key(&sched, key) != TC_CRYPTO_SUCCESS)
 8002da8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002dac:	f8d7 10ec 	ldr.w	r1, [r7, #236]	@ 0xec
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff fc0f 	bl	80025d4 <tc_aes128_set_encrypt_key>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d001      	beq.n	8002dc0 <CryptoEngine_Codec+0x54>
    {
        return TC_CRYPTO_FAIL;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	e018      	b.n	8002df2 <CryptoEngine_Codec+0x86>
    }

    uint8_t ctr_copy[TC_AES_BLOCK_SIZE];
    memcpy(ctr_copy, ctr, TC_AES_BLOCK_SIZE);
 8002dc0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002dc4:	f107 0414 	add.w	r4, r7, #20
 8002dc8:	6818      	ldr	r0, [r3, #0]
 8002dca:	6859      	ldr	r1, [r3, #4]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}

    int result = tc_ctr_mode(out, outlen, in, inlen, ctr_copy, &sched);
 8002dd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002dd6:	9301      	str	r3, [sp, #4]
 8002dd8:	f107 0314 	add.w	r3, r7, #20
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	68b9      	ldr	r1, [r7, #8]
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f7ff fef5 	bl	8002bd4 <tc_ctr_mode>
 8002dea:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    return result;
 8002dee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	37dc      	adds	r7, #220	@ 0xdc
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd90      	pop	{r4, r7, pc}
	...

08002dfc <DeviceInfo_GetUniqueID>:
    }
	return DEVICE_INFO_OK;
}

InfoStatus_t DeviceInfo_GetUniqueID(uint8_t* uID)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
    if (uID == NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d104      	bne.n	8002e14 <DeviceInfo_GetUniqueID+0x18>
    {
    	log_error("Received NULL Input for UID storage.");
 8002e0a:	482b      	ldr	r0, [pc, #172]	@ (8002eb8 <DeviceInfo_GetUniqueID+0xbc>)
 8002e0c:	f001 f8fe 	bl	800400c <log_error>
        return DEVICE_INFO_NULL_INPUT;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e04d      	b.n	8002eb0 <DeviceInfo_GetUniqueID+0xb4>
    }
    uint32_t uid0 = HAL_GetUIDw0(); // bits 0–31
 8002e14:	f002 fe06 	bl	8005a24 <HAL_GetUIDw0>
 8002e18:	6178      	str	r0, [r7, #20]
    uint32_t uid1 = HAL_GetUIDw1(); // bits 32–63
 8002e1a:	f002 fe0f 	bl	8005a3c <HAL_GetUIDw1>
 8002e1e:	6138      	str	r0, [r7, #16]
    uint32_t uid2 = HAL_GetUIDw2(); // bits 64–95
 8002e20:	f002 fe18 	bl	8005a54 <HAL_GetUIDw2>
 8002e24:	60f8      	str	r0, [r7, #12]
    	log_error("Failed to retrieve Unique ID.");
    	return DEVICE_INFO_UID_FAIL;
    }

    // Store in Little Endian order (byte-wise)
    uID[0]  = (uid0 >>  0) & 0xFF;
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	b2da      	uxtb	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	701a      	strb	r2, [r3, #0]
    uID[1]  = (uid0 >>  8) & 0xFF;
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	0a1a      	lsrs	r2, r3, #8
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	3301      	adds	r3, #1
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	701a      	strb	r2, [r3, #0]
    uID[2]  = (uid0 >> 16) & 0xFF;
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	0c1a      	lsrs	r2, r3, #16
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	3302      	adds	r3, #2
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	701a      	strb	r2, [r3, #0]
    uID[3]  = (uid0 >> 24) & 0xFF;
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	0e1a      	lsrs	r2, r3, #24
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	3303      	adds	r3, #3
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	701a      	strb	r2, [r3, #0]

    uID[4]  = (uid1 >>  0) & 0xFF;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	3304      	adds	r3, #4
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	b2d2      	uxtb	r2, r2
 8002e5a:	701a      	strb	r2, [r3, #0]
    uID[5]  = (uid1 >>  8) & 0xFF;
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	0a1a      	lsrs	r2, r3, #8
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3305      	adds	r3, #5
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	701a      	strb	r2, [r3, #0]
    uID[6]  = (uid1 >> 16) & 0xFF;
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	0c1a      	lsrs	r2, r3, #16
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3306      	adds	r3, #6
 8002e70:	b2d2      	uxtb	r2, r2
 8002e72:	701a      	strb	r2, [r3, #0]
    uID[7]  = (uid1 >> 24) & 0xFF;
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	0e1a      	lsrs	r2, r3, #24
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3307      	adds	r3, #7
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	701a      	strb	r2, [r3, #0]

    uID[8]  = (uid2 >>  0) & 0xFF;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	3308      	adds	r3, #8
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	b2d2      	uxtb	r2, r2
 8002e88:	701a      	strb	r2, [r3, #0]
    uID[9]  = (uid2 >>  8) & 0xFF;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	0a1a      	lsrs	r2, r3, #8
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	3309      	adds	r3, #9
 8002e92:	b2d2      	uxtb	r2, r2
 8002e94:	701a      	strb	r2, [r3, #0]
    uID[10] = (uid2 >> 16) & 0xFF;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	0c1a      	lsrs	r2, r3, #16
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	330a      	adds	r3, #10
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	701a      	strb	r2, [r3, #0]
    uID[11] = (uid2 >> 24) & 0xFF;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	0e1a      	lsrs	r2, r3, #24
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	330b      	adds	r3, #11
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	701a      	strb	r2, [r3, #0]

    return DEVICE_INFO_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3718      	adds	r7, #24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	080189b4 	.word	0x080189b4

08002ebc <FlashManager_Init>:
#define VALID_FLAG 			0xAA
#define INVALID_FLAG 		0x55
#define IDENTIFIER_SIZE		5

FlashManagerStatus_t FlashManager_Init(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
	uint32_t deviceID = 0;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	607b      	str	r3, [r7, #4]
	log_info("Initializing the Flash Manager.");
 8002ec6:	480f      	ldr	r0, [pc, #60]	@ (8002f04 <FlashManager_Init+0x48>)
 8002ec8:	f001 f86c 	bl	8003fa4 <log_info>
	W25Q_Reset();
 8002ecc:	f7fe ffb0 	bl	8001e30 <W25Q_Reset>
	deviceID = W25Q_ReadID();
 8002ed0:	f7fe ffc5 	bl	8001e5e <W25Q_ReadID>
 8002ed4:	6078      	str	r0, [r7, #4]
	if(!deviceID)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d107      	bne.n	8002eec <FlashManager_Init+0x30>
	{
		log_error("Flash Memory Device ID could not be retrieved.");
 8002edc:	480a      	ldr	r0, [pc, #40]	@ (8002f08 <FlashManager_Init+0x4c>)
 8002ede:	f001 f895 	bl	800400c <log_error>
		log_error("External Flash Memory device has not been reset.");
 8002ee2:	480a      	ldr	r0, [pc, #40]	@ (8002f0c <FlashManager_Init+0x50>)
 8002ee4:	f001 f892 	bl	800400c <log_error>
		return FLASH_MANAGER_NOT_INITIALIZED;
 8002ee8:	2305      	movs	r3, #5
 8002eea:	e007      	b.n	8002efc <FlashManager_Init+0x40>
	}
	log_info("External Flash Memory device has been reset.");
 8002eec:	4808      	ldr	r0, [pc, #32]	@ (8002f10 <FlashManager_Init+0x54>)
 8002eee:	f001 f859 	bl	8003fa4 <log_info>
	log_info("Flash Memory Device ID : %0xX", deviceID);
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	4807      	ldr	r0, [pc, #28]	@ (8002f14 <FlashManager_Init+0x58>)
 8002ef6:	f001 f855 	bl	8003fa4 <log_info>
	return FLASH_MANAGER_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	080189dc 	.word	0x080189dc
 8002f08:	080189fc 	.word	0x080189fc
 8002f0c:	08018a2c 	.word	0x08018a2c
 8002f10:	08018a60 	.word	0x08018a60
 8002f14:	08018a90 	.word	0x08018a90

08002f18 <FlashManager_ReadIdentifier>:

FlashManagerStatus_t FlashManager_ReadIdentifier(uint16_t sectorNumber, uint8_t *entryHeader)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	4603      	mov	r3, r0
 8002f20:	6039      	str	r1, [r7, #0]
 8002f22:	80fb      	strh	r3, [r7, #6]
	// Calculating Page Number from Sector Number
	uint32_t page_number = sectorNumber * (SECTOR_SIZE/PAGE_SIZE);
 8002f24:	88fb      	ldrh	r3, [r7, #6]
 8002f26:	011b      	lsls	r3, r3, #4
 8002f28:	60fb      	str	r3, [r7, #12]
	// Read the first 5 bytes from the sector
	W25Q_Read(page_number, 0, IDENTIFIER_SIZE, entryHeader);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	2205      	movs	r2, #5
 8002f2e:	2100      	movs	r1, #0
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f7fe ffb2 	bl	8001e9a <W25Q_Read>
	log_info("Read Sector Identifier from Flash.");
 8002f36:	4804      	ldr	r0, [pc, #16]	@ (8002f48 <FlashManager_ReadIdentifier+0x30>)
 8002f38:	f001 f834 	bl	8003fa4 <log_info>
	return FLASH_MANAGER_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	08018ab0 	.word	0x08018ab0

08002f4c <FlashManager_ReadEntry>:

FlashManagerStatus_t FlashManager_ReadEntry(uint16_t sectorNumber, uint8_t *entry)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	4603      	mov	r3, r0
 8002f54:	6039      	str	r1, [r7, #0]
 8002f56:	80fb      	strh	r3, [r7, #6]
	// Calculating Page Number and Validity Flag address.
	uint32_t page_number = sectorNumber * (SECTOR_SIZE/PAGE_SIZE);
 8002f58:	88fb      	ldrh	r3, [r7, #6]
 8002f5a:	011b      	lsls	r3, r3, #4
 8002f5c:	617b      	str	r3, [r7, #20]
	uint32_t byte_addr = page_number * PAGE_SIZE;
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	021b      	lsls	r3, r3, #8
 8002f62:	613b      	str	r3, [r7, #16]
	// Reading Validity Flag at the start of sector.
	uint8_t entryFlag = W25Q_Read_Byte(byte_addr);
 8002f64:	6938      	ldr	r0, [r7, #16]
 8002f66:	f7ff face 	bl	8002506 <W25Q_Read_Byte>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	73fb      	strb	r3, [r7, #15]
	// Checking if Entry has a Valid Flag or not.
	if (entryFlag != VALID_FLAG)
 8002f6e:	7bfb      	ldrb	r3, [r7, #15]
 8002f70:	2baa      	cmp	r3, #170	@ 0xaa
 8002f72:	d004      	beq.n	8002f7e <FlashManager_ReadEntry+0x32>
	{
		log_error("Entry has an Invalid/Unidentified Flag.");
 8002f74:	4809      	ldr	r0, [pc, #36]	@ (8002f9c <FlashManager_ReadEntry+0x50>)
 8002f76:	f001 f849 	bl	800400c <log_error>
		return FLASH_MANAGER_INVALID_FLAG;
 8002f7a:	2304      	movs	r3, #4
 8002f7c:	e009      	b.n	8002f92 <FlashManager_ReadEntry+0x46>
	}
	else
	{
		// Reading from the sector if validity flag is 0xAA
		W25Q_Read(page_number, 1, ENTRY_SIZE, entry);
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	2258      	movs	r2, #88	@ 0x58
 8002f82:	2101      	movs	r1, #1
 8002f84:	6978      	ldr	r0, [r7, #20]
 8002f86:	f7fe ff88 	bl	8001e9a <W25Q_Read>
		log_info("Read valid entry from Flash.");
 8002f8a:	4805      	ldr	r0, [pc, #20]	@ (8002fa0 <FlashManager_ReadEntry+0x54>)
 8002f8c:	f001 f80a 	bl	8003fa4 <log_info>
	}
	return FLASH_MANAGER_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3718      	adds	r7, #24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	08018ad4 	.word	0x08018ad4
 8002fa0:	08018afc 	.word	0x08018afc

08002fa4 <FlashManager_WriteEntry>:

FlashManagerStatus_t FlashManager_WriteEntry(uint16_t sectorNumber, uint8_t *entry)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	4603      	mov	r3, r0
 8002fac:	6039      	str	r1, [r7, #0]
 8002fae:	80fb      	strh	r3, [r7, #6]
	// Calculating Page Number and Validity Flag address
	uint32_t page_number = sectorNumber * (SECTOR_SIZE/PAGE_SIZE);
 8002fb0:	88fb      	ldrh	r3, [r7, #6]
 8002fb2:	011b      	lsls	r3, r3, #4
 8002fb4:	617b      	str	r3, [r7, #20]
	uint32_t byte_addr = page_number * PAGE_SIZE;
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	021b      	lsls	r3, r3, #8
 8002fba:	613b      	str	r3, [r7, #16]
	// Reading Validity Flag at the start of sector
	uint8_t entryFlag = W25Q_Read_Byte(byte_addr);
 8002fbc:	6938      	ldr	r0, [r7, #16]
 8002fbe:	f7ff faa2 	bl	8002506 <W25Q_Read_Byte>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	73fb      	strb	r3, [r7, #15]
	// Checking if Entry has a Valid Flag or not.
	if (entryFlag == VALID_FLAG)
 8002fc6:	7bfb      	ldrb	r3, [r7, #15]
 8002fc8:	2baa      	cmp	r3, #170	@ 0xaa
 8002fca:	d107      	bne.n	8002fdc <FlashManager_WriteEntry+0x38>
	{
		log_error("Entry has a Valid Flag.");
 8002fcc:	480c      	ldr	r0, [pc, #48]	@ (8003000 <FlashManager_WriteEntry+0x5c>)
 8002fce:	f001 f81d 	bl	800400c <log_error>
		log_warn("Cannot write to this sector.");
 8002fd2:	480c      	ldr	r0, [pc, #48]	@ (8003004 <FlashManager_WriteEntry+0x60>)
 8002fd4:	f001 f800 	bl	8003fd8 <log_warn>
		return FLASH_MANAGER_WRITE_FAIL;
 8002fd8:	2302      	movs	r3, #2
 8002fda:	e00d      	b.n	8002ff8 <FlashManager_WriteEntry+0x54>
	}
	else
	{
		// Writing to the sector if Validity Flag is not 0xAA
		W25Q_Write_Byte(byte_addr, VALID_FLAG);
 8002fdc:	21aa      	movs	r1, #170	@ 0xaa
 8002fde:	6938      	ldr	r0, [r7, #16]
 8002fe0:	f7ff fab7 	bl	8002552 <W25Q_Write_Byte>
		W25Q_Write(page_number, 1, ENTRY_SIZE, entry);
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	2258      	movs	r2, #88	@ 0x58
 8002fe8:	2101      	movs	r1, #1
 8002fea:	6978      	ldr	r0, [r7, #20]
 8002fec:	f7ff f96a 	bl	80022c4 <W25Q_Write>
		log_info("Wrote a valid entry to Flash.");
 8002ff0:	4805      	ldr	r0, [pc, #20]	@ (8003008 <FlashManager_WriteEntry+0x64>)
 8002ff2:	f000 ffd7 	bl	8003fa4 <log_info>
	}
	return FLASH_MANAGER_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3718      	adds	r7, #24
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	08018b1c 	.word	0x08018b1c
 8003004:	08018b34 	.word	0x08018b34
 8003008:	08018b54 	.word	0x08018b54

0800300c <FlashManager_UpdateEntry>:

FlashManagerStatus_t FlashManager_UpdateEntry(uint16_t sectorNumber, uint8_t *entry)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	6039      	str	r1, [r7, #0]
 8003016:	80fb      	strh	r3, [r7, #6]
	// Calculating Page Number and Validity Flag address
	uint32_t page_number = sectorNumber * (SECTOR_SIZE/PAGE_SIZE);
 8003018:	88fb      	ldrh	r3, [r7, #6]
 800301a:	011b      	lsls	r3, r3, #4
 800301c:	617b      	str	r3, [r7, #20]
	uint32_t byte_addr = page_number * PAGE_SIZE;
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	021b      	lsls	r3, r3, #8
 8003022:	613b      	str	r3, [r7, #16]
	// Reading Validity Flag at the start of sector
	uint8_t entryFlag = W25Q_Read_Byte(byte_addr);
 8003024:	6938      	ldr	r0, [r7, #16]
 8003026:	f7ff fa6e 	bl	8002506 <W25Q_Read_Byte>
 800302a:	4603      	mov	r3, r0
 800302c:	73fb      	strb	r3, [r7, #15]
	// Checking if Entry has an Invalid Flag or not.
	if (entryFlag != VALID_FLAG)
 800302e:	7bfb      	ldrb	r3, [r7, #15]
 8003030:	2baa      	cmp	r3, #170	@ 0xaa
 8003032:	d004      	beq.n	800303e <FlashManager_UpdateEntry+0x32>
	{
		log_error("Entry has an Invalid/Unidentified Flag.");
 8003034:	4810      	ldr	r0, [pc, #64]	@ (8003078 <FlashManager_UpdateEntry+0x6c>)
 8003036:	f000 ffe9 	bl	800400c <log_error>
		return FLASH_MANAGER_INVALID_FLAG;
 800303a:	2304      	movs	r3, #4
 800303c:	e017      	b.n	800306e <FlashManager_UpdateEntry+0x62>
	}
	else
	{
		// Updating the sector if Validity Flag is 0xAA
		log_info("Erasing the current entry in Flash.");
 800303e:	480f      	ldr	r0, [pc, #60]	@ (800307c <FlashManager_UpdateEntry+0x70>)
 8003040:	f000 ffb0 	bl	8003fa4 <log_info>
		W25Q_Erase_Sector(sectorNumber);
 8003044:	88fb      	ldrh	r3, [r7, #6]
 8003046:	4618      	mov	r0, r3
 8003048:	f7fe ffd8 	bl	8001ffc <W25Q_Erase_Sector>
		log_info("Updating the current entry in Flash.");
 800304c:	480c      	ldr	r0, [pc, #48]	@ (8003080 <FlashManager_UpdateEntry+0x74>)
 800304e:	f000 ffa9 	bl	8003fa4 <log_info>
		W25Q_Write_Byte(byte_addr, VALID_FLAG);
 8003052:	21aa      	movs	r1, #170	@ 0xaa
 8003054:	6938      	ldr	r0, [r7, #16]
 8003056:	f7ff fa7c 	bl	8002552 <W25Q_Write_Byte>
		W25Q_Write(page_number, 1, ENTRY_SIZE, entry);
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	2258      	movs	r2, #88	@ 0x58
 800305e:	2101      	movs	r1, #1
 8003060:	6978      	ldr	r0, [r7, #20]
 8003062:	f7ff f92f 	bl	80022c4 <W25Q_Write>
		log_info("Completed updating the Key Entry in Flash.");
 8003066:	4807      	ldr	r0, [pc, #28]	@ (8003084 <FlashManager_UpdateEntry+0x78>)
 8003068:	f000 ff9c 	bl	8003fa4 <log_info>
	}
	return FLASH_MANAGER_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3718      	adds	r7, #24
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	08018ad4 	.word	0x08018ad4
 800307c:	08018b74 	.word	0x08018b74
 8003080:	08018b98 	.word	0x08018b98
 8003084:	08018bc0 	.word	0x08018bc0

08003088 <FlashManager_EraseEntry>:
	}
	return FLASH_MANAGER_OK;
}*/

FlashManagerStatus_t FlashManager_EraseEntry(uint16_t sectorNumber)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	4603      	mov	r3, r0
 8003090:	80fb      	strh	r3, [r7, #6]
	// Calculating Page Number and Validity Flag address
	uint32_t page_number = sectorNumber * (SECTOR_SIZE/PAGE_SIZE);
 8003092:	88fb      	ldrh	r3, [r7, #6]
 8003094:	011b      	lsls	r3, r3, #4
 8003096:	617b      	str	r3, [r7, #20]
	uint32_t byte_addr = page_number * PAGE_SIZE;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	021b      	lsls	r3, r3, #8
 800309c:	613b      	str	r3, [r7, #16]
	// Reading Validity Flag at the start of sector
	uint8_t entryFlag = W25Q_Read_Byte(byte_addr);
 800309e:	6938      	ldr	r0, [r7, #16]
 80030a0:	f7ff fa31 	bl	8002506 <W25Q_Read_Byte>
 80030a4:	4603      	mov	r3, r0
 80030a6:	73fb      	strb	r3, [r7, #15]
	// Checking if Entry has a Valid Flag or not.
	if (entryFlag == VALID_FLAG)
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
 80030aa:	2baa      	cmp	r3, #170	@ 0xaa
 80030ac:	d10b      	bne.n	80030c6 <FlashManager_EraseEntry+0x3e>
	{
		log_info("The current entry has a Valid Flag.");
 80030ae:	480a      	ldr	r0, [pc, #40]	@ (80030d8 <FlashManager_EraseEntry+0x50>)
 80030b0:	f000 ff78 	bl	8003fa4 <log_info>
		W25Q_Erase_Sector(sectorNumber);
 80030b4:	88fb      	ldrh	r3, [r7, #6]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7fe ffa0 	bl	8001ffc <W25Q_Erase_Sector>
		log_info("Completed erasing the Key Entry in Flash.");
 80030bc:	4807      	ldr	r0, [pc, #28]	@ (80030dc <FlashManager_EraseEntry+0x54>)
 80030be:	f000 ff71 	bl	8003fa4 <log_info>
	else
	{
		log_info("The current entry has an Invalid Flag.");
		return FLASH_MANAGER_ERASE_FAIL;
	}
	return FLASH_MANAGER_OK;
 80030c2:	2300      	movs	r3, #0
 80030c4:	e003      	b.n	80030ce <FlashManager_EraseEntry+0x46>
		log_info("The current entry has an Invalid Flag.");
 80030c6:	4806      	ldr	r0, [pc, #24]	@ (80030e0 <FlashManager_EraseEntry+0x58>)
 80030c8:	f000 ff6c 	bl	8003fa4 <log_info>
		return FLASH_MANAGER_ERASE_FAIL;
 80030cc:	2303      	movs	r3, #3
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3718      	adds	r7, #24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	08018bec 	.word	0x08018bec
 80030dc:	08018c10 	.word	0x08018c10
 80030e0:	08018c3c 	.word	0x08018c3c

080030e4 <GenerateRandomBytes>:
extern HASH_HandleTypeDef hhash;

#define HMAC_KEY_SIZE	16

static GeneratorStatus_t GenerateRandomBytes(uint8_t *output, uint32_t length)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
    if (output == NULL || length == 0 || (length % 4) != 0)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d007      	beq.n	8003104 <GenerateRandomBytes+0x20>
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d004      	beq.n	8003104 <GenerateRandomBytes+0x20>
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	f003 0303 	and.w	r3, r3, #3
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <GenerateRandomBytes+0x24>
    {
        return GENERATOR_STATUS_INPUT_NULL;
 8003104:	2301      	movs	r3, #1
 8003106:	e054      	b.n	80031b2 <GenerateRandomBytes+0xce>
    }

    HAL_RNG_DeInit(&hrng);
 8003108:	482c      	ldr	r0, [pc, #176]	@ (80031bc <GenerateRandomBytes+0xd8>)
 800310a:	f00c fb9b 	bl	800f844 <HAL_RNG_DeInit>
    log_info("De-Initialized RNG Peripheral.");
 800310e:	482c      	ldr	r0, [pc, #176]	@ (80031c0 <GenerateRandomBytes+0xdc>)
 8003110:	f000 ff48 	bl	8003fa4 <log_info>
    hrng.Instance = RNG;
 8003114:	4b29      	ldr	r3, [pc, #164]	@ (80031bc <GenerateRandomBytes+0xd8>)
 8003116:	4a2b      	ldr	r2, [pc, #172]	@ (80031c4 <GenerateRandomBytes+0xe0>)
 8003118:	601a      	str	r2, [r3, #0]
    hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800311a:	4b28      	ldr	r3, [pc, #160]	@ (80031bc <GenerateRandomBytes+0xd8>)
 800311c:	2200      	movs	r2, #0
 800311e:	605a      	str	r2, [r3, #4]

    if (HAL_RNG_Init(&hrng) != HAL_OK)
 8003120:	4826      	ldr	r0, [pc, #152]	@ (80031bc <GenerateRandomBytes+0xd8>)
 8003122:	f00c faf1 	bl	800f708 <HAL_RNG_Init>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d004      	beq.n	8003136 <GenerateRandomBytes+0x52>
    {
    	log_error("Failed to Re-Initialize the RNG Peripheral.");
 800312c:	4826      	ldr	r0, [pc, #152]	@ (80031c8 <GenerateRandomBytes+0xe4>)
 800312e:	f000 ff6d 	bl	800400c <log_error>
    	return GENERATOR_STATUS_RNG_INIT_FAIL;
 8003132:	2302      	movs	r3, #2
 8003134:	e03d      	b.n	80031b2 <GenerateRandomBytes+0xce>
    }

    log_info("Re-Initialized RNG Peripheral.");
 8003136:	4825      	ldr	r0, [pc, #148]	@ (80031cc <GenerateRandomBytes+0xe8>)
 8003138:	f000 ff34 	bl	8003fa4 <log_info>

    for (uint32_t i = 0; i < length; i += 4)
 800313c:	2300      	movs	r3, #0
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	e02e      	b.n	80031a0 <GenerateRandomBytes+0xbc>
    {
        uint32_t rnd;
        if (HAL_RNG_GenerateRandomNumber(&hrng, &rnd) != HAL_OK)
 8003142:	f107 0308 	add.w	r3, r7, #8
 8003146:	4619      	mov	r1, r3
 8003148:	481c      	ldr	r0, [pc, #112]	@ (80031bc <GenerateRandomBytes+0xd8>)
 800314a:	f00c fbdf 	bl	800f90c <HAL_RNG_GenerateRandomNumber>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d004      	beq.n	800315e <GenerateRandomBytes+0x7a>
        {
        	log_error("RNG Operation failed.");
 8003154:	481e      	ldr	r0, [pc, #120]	@ (80031d0 <GenerateRandomBytes+0xec>)
 8003156:	f000 ff59 	bl	800400c <log_error>
            return GENERATOR_STATUS_RNG_OP_FAIL;
 800315a:	2304      	movs	r3, #4
 800315c:	e029      	b.n	80031b2 <GenerateRandomBytes+0xce>
        }

        output[i + 0] = (uint8_t)(rnd >> 24);
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	0e19      	lsrs	r1, r3, #24
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	4413      	add	r3, r2
 8003168:	b2ca      	uxtb	r2, r1
 800316a:	701a      	strb	r2, [r3, #0]
        output[i + 1] = (uint8_t)(rnd >> 16);
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	0c19      	lsrs	r1, r3, #16
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	3301      	adds	r3, #1
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	4413      	add	r3, r2
 8003178:	b2ca      	uxtb	r2, r1
 800317a:	701a      	strb	r2, [r3, #0]
        output[i + 2] = (uint8_t)(rnd >> 8);
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	0a19      	lsrs	r1, r3, #8
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	3302      	adds	r3, #2
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	4413      	add	r3, r2
 8003188:	b2ca      	uxtb	r2, r1
 800318a:	701a      	strb	r2, [r3, #0]
        output[i + 3] = (uint8_t)(rnd);
 800318c:	68b9      	ldr	r1, [r7, #8]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	3303      	adds	r3, #3
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	4413      	add	r3, r2
 8003196:	b2ca      	uxtb	r2, r1
 8003198:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i += 4)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	3304      	adds	r3, #4
 800319e:	60fb      	str	r3, [r7, #12]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d3cc      	bcc.n	8003142 <GenerateRandomBytes+0x5e>
    }

    log_info("RNG Generated for %d bytes.", length);
 80031a8:	6839      	ldr	r1, [r7, #0]
 80031aa:	480a      	ldr	r0, [pc, #40]	@ (80031d4 <GenerateRandomBytes+0xf0>)
 80031ac:	f000 fefa 	bl	8003fa4 <log_info>
    return GENERATOR_STATUS_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	20002480 	.word	0x20002480
 80031c0:	08018c64 	.word	0x08018c64
 80031c4:	420c0800 	.word	0x420c0800
 80031c8:	08018c84 	.word	0x08018c84
 80031cc:	08018cb0 	.word	0x08018cb0
 80031d0:	08018cd0 	.word	0x08018cd0
 80031d4:	08018ce8 	.word	0x08018ce8

080031d8 <GenerateHMAC>:

GeneratorStatus_t GenerateHMAC(uint8_t* input, uint8_t size, uint8_t* key, uint8_t* output)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af02      	add	r7, sp, #8
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	607a      	str	r2, [r7, #4]
 80031e2:	603b      	str	r3, [r7, #0]
 80031e4:	460b      	mov	r3, r1
 80031e6:	72fb      	strb	r3, [r7, #11]
	if (input == NULL || size == 0 || key == 0)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d005      	beq.n	80031fa <GenerateHMAC+0x22>
 80031ee:	7afb      	ldrb	r3, [r7, #11]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d002      	beq.n	80031fa <GenerateHMAC+0x22>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <GenerateHMAC+0x26>
	{
		return GENERATOR_STATUS_INPUT_NULL;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e037      	b.n	800326e <GenerateHMAC+0x96>
	}

	HAL_HASH_DeInit(&hhash);
 80031fe:	481e      	ldr	r0, [pc, #120]	@ (8003278 <GenerateHMAC+0xa0>)
 8003200:	f003 fb02 	bl	8006808 <HAL_HASH_DeInit>
	log_info("De-Initialized HASH Peripheral.");
 8003204:	481d      	ldr	r0, [pc, #116]	@ (800327c <GenerateHMAC+0xa4>)
 8003206:	f000 fecd 	bl	8003fa4 <log_info>

	hhash.Instance = HASH;
 800320a:	4b1b      	ldr	r3, [pc, #108]	@ (8003278 <GenerateHMAC+0xa0>)
 800320c:	4a1c      	ldr	r2, [pc, #112]	@ (8003280 <GenerateHMAC+0xa8>)
 800320e:	601a      	str	r2, [r3, #0]
	hhash.Init.DataType = HASH_BYTE_SWAP;
 8003210:	4b19      	ldr	r3, [pc, #100]	@ (8003278 <GenerateHMAC+0xa0>)
 8003212:	2220      	movs	r2, #32
 8003214:	605a      	str	r2, [r3, #4]
	hhash.Init.KeySize = HMAC_KEY_SIZE;
 8003216:	4b18      	ldr	r3, [pc, #96]	@ (8003278 <GenerateHMAC+0xa0>)
 8003218:	2210      	movs	r2, #16
 800321a:	609a      	str	r2, [r3, #8]
	hhash.Init.pKey = (uint8_t *)key;
 800321c:	4a16      	ldr	r2, [pc, #88]	@ (8003278 <GenerateHMAC+0xa0>)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	60d3      	str	r3, [r2, #12]
	hhash.Init.Algorithm = HASH_ALGOSELECTION_SHA256;
 8003222:	4b15      	ldr	r3, [pc, #84]	@ (8003278 <GenerateHMAC+0xa0>)
 8003224:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 8003228:	611a      	str	r2, [r3, #16]

	if (HAL_HASH_Init(&hhash) != HAL_OK)
 800322a:	4813      	ldr	r0, [pc, #76]	@ (8003278 <GenerateHMAC+0xa0>)
 800322c:	f003 fab4 	bl	8006798 <HAL_HASH_Init>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d004      	beq.n	8003240 <GenerateHMAC+0x68>
	{
		log_error("Failed to Re-Initialize the Hash Peripheral.");
 8003236:	4813      	ldr	r0, [pc, #76]	@ (8003284 <GenerateHMAC+0xac>)
 8003238:	f000 fee8 	bl	800400c <log_error>
		return GENERATOR_STATUS_HASH_INIT_FAIL;
 800323c:	2303      	movs	r3, #3
 800323e:	e016      	b.n	800326e <GenerateHMAC+0x96>
	}

	log_info("Re-Initialized HASH Peripheral.");
 8003240:	4811      	ldr	r0, [pc, #68]	@ (8003288 <GenerateHMAC+0xb0>)
 8003242:	f000 feaf 	bl	8003fa4 <log_info>

	if (HAL_HASH_HMAC_Start(&hhash, (uint8_t *)input, size, (uint8_t *)output, 0xFF) != HAL_OK)
 8003246:	7afa      	ldrb	r2, [r7, #11]
 8003248:	23ff      	movs	r3, #255	@ 0xff
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	68f9      	ldr	r1, [r7, #12]
 8003250:	4809      	ldr	r0, [pc, #36]	@ (8003278 <GenerateHMAC+0xa0>)
 8003252:	f003 fb69 	bl	8006928 <HAL_HASH_HMAC_Start>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d004      	beq.n	8003266 <GenerateHMAC+0x8e>
	{
		log_error("HMAC Operation failed.");
 800325c:	480b      	ldr	r0, [pc, #44]	@ (800328c <GenerateHMAC+0xb4>)
 800325e:	f000 fed5 	bl	800400c <log_error>
		return GENERATOR_STATUS_HASH_OP_FAIL;
 8003262:	2305      	movs	r3, #5
 8003264:	e003      	b.n	800326e <GenerateHMAC+0x96>
	}

	log_info("HMAC Generated for Key Blob.");
 8003266:	480a      	ldr	r0, [pc, #40]	@ (8003290 <GenerateHMAC+0xb8>)
 8003268:	f000 fe9c 	bl	8003fa4 <log_info>
	return GENERATOR_STATUS_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	200023ec 	.word	0x200023ec
 800327c:	08018d04 	.word	0x08018d04
 8003280:	420c0400 	.word	0x420c0400
 8003284:	08018d24 	.word	0x08018d24
 8003288:	08018d54 	.word	0x08018d54
 800328c:	08018d74 	.word	0x08018d74
 8003290:	08018d8c 	.word	0x08018d8c

08003294 <GenerateKEY>:


GeneratorStatus_t GenerateKEY(uint8_t *key_out)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
    return GenerateRandomBytes(key_out, 16);
 800329c:	2110      	movs	r1, #16
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7ff ff20 	bl	80030e4 <GenerateRandomBytes>
 80032a4:	4603      	mov	r3, r0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <GenerateIV>:

GeneratorStatus_t GenerateIV(uint8_t *iv_out)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b082      	sub	sp, #8
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
    return GenerateRandomBytes(iv_out, 16);
 80032b6:	2110      	movs	r1, #16
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7ff ff13 	bl	80030e4 <GenerateRandomBytes>
 80032be:	4603      	mov	r3, r0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <GenerateKEYID>:

GeneratorStatus_t GenerateKEYID(uint8_t *id_out)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
    return GenerateRandomBytes(id_out, 4);
 80032d0:	2104      	movs	r1, #4
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7ff ff06 	bl	80030e4 <GenerateRandomBytes>
 80032d8:	4603      	mov	r3, r0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <GenerateSalt>:

GeneratorStatus_t GenerateSalt(uint8_t *id_out)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b082      	sub	sp, #8
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
    return GenerateRandomBytes(id_out, 20);
 80032ea:	2114      	movs	r1, #20
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f7ff fef9 	bl	80030e4 <GenerateRandomBytes>
 80032f2:	4603      	mov	r3, r0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3708      	adds	r7, #8
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <HKDF_DeriveKey>:
#define DERIVED_KEY_SIZE 	16  // 128-bit AES key
#define UID_SIZE         	12  // 96-bit STM32 Unique ID
#define IKM_SIZE         	20  // Random entropy size

KeyDerivatorStatus_t HKDF_DeriveKey(const uint8_t *ikm, const uint8_t *uid, uint8_t *out_key)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b0a0      	sub	sp, #128	@ 0x80
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
	//Checking if Input arguments are NULL
    if (!ikm || !uid || !out_key)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d005      	beq.n	800331a <HKDF_DeriveKey+0x1e>
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d002      	beq.n	800331a <HKDF_DeriveKey+0x1e>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d104      	bne.n	8003324 <HKDF_DeriveKey+0x28>
    {
        log_error("Key derivation: NULL input");
 800331a:	4824      	ldr	r0, [pc, #144]	@ (80033ac <HKDF_DeriveKey+0xb0>)
 800331c:	f000 fe76 	bl	800400c <log_error>
        return KEY_DERIVATOR_NULL_INPUT;
 8003320:	2301      	movs	r3, #1
 8003322:	e03e      	b.n	80033a2 <HKDF_DeriveKey+0xa6>
    }

    uint8_t prk[HASH_OUTPUT_SIZE];
    uint8_t salt[HASH_OUTPUT_SIZE] = {0};  // optional, use zero as per HKDF standard
 8003324:	2300      	movs	r3, #0
 8003326:	643b      	str	r3, [r7, #64]	@ 0x40
 8003328:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	605a      	str	r2, [r3, #4]
 8003332:	609a      	str	r2, [r3, #8]
 8003334:	60da      	str	r2, [r3, #12]
 8003336:	611a      	str	r2, [r3, #16]
 8003338:	615a      	str	r2, [r3, #20]
 800333a:	619a      	str	r2, [r3, #24]

    // HKDF Extract: PRK = HMAC(salt, IKM)
    if (GenerateHMAC((uint8_t *)ikm, IKM_SIZE, salt, prk) != 0)
 800333c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003340:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003344:	2114      	movs	r1, #20
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f7ff ff46 	bl	80031d8 <GenerateHMAC>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d004      	beq.n	800335c <HKDF_DeriveKey+0x60>
    {
        log_error("HKDF Extract failed.");
 8003352:	4817      	ldr	r0, [pc, #92]	@ (80033b0 <HKDF_DeriveKey+0xb4>)
 8003354:	f000 fe5a 	bl	800400c <log_error>
        return KEY_DERIVATOR_HMAC_FAIL;
 8003358:	2302      	movs	r3, #2
 800335a:	e022      	b.n	80033a2 <HKDF_DeriveKey+0xa6>
    }

    // HKDF Expand: OKM = HMAC(PRK, info | 0x01)
    uint8_t info[UID_SIZE + 1];
    memcpy(info, uid, UID_SIZE);
 800335c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003360:	220c      	movs	r2, #12
 8003362:	68b9      	ldr	r1, [r7, #8]
 8003364:	4618      	mov	r0, r3
 8003366:	f013 fb10 	bl	801698a <memcpy>
    info[UID_SIZE] = 0x01;  // Counter = 1
 800336a:	2301      	movs	r3, #1
 800336c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c

    uint8_t okm[HASH_OUTPUT_SIZE];  // full 32-byte output
    if (GenerateHMAC(info, sizeof(info), prk, okm) != 0)
 8003370:	f107 0310 	add.w	r3, r7, #16
 8003374:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8003378:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800337c:	210d      	movs	r1, #13
 800337e:	f7ff ff2b 	bl	80031d8 <GenerateHMAC>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d004      	beq.n	8003392 <HKDF_DeriveKey+0x96>
    {
        log_error("HKDF Expand failed.");
 8003388:	480a      	ldr	r0, [pc, #40]	@ (80033b4 <HKDF_DeriveKey+0xb8>)
 800338a:	f000 fe3f 	bl	800400c <log_error>
        return KEY_DERIVATOR_HMAC_FAIL;
 800338e:	2302      	movs	r3, #2
 8003390:	e007      	b.n	80033a2 <HKDF_DeriveKey+0xa6>
    }

    // Copy first 16 bytes for AES-128
    memcpy(out_key, okm, DERIVED_KEY_SIZE);
 8003392:	f107 0310 	add.w	r3, r7, #16
 8003396:	2210      	movs	r2, #16
 8003398:	4619      	mov	r1, r3
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f013 faf5 	bl	801698a <memcpy>
    return KEY_DERIVATOR_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3780      	adds	r7, #128	@ 0x80
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	08018dac 	.word	0x08018dac
 80033b0:	08018dc8 	.word	0x08018dc8
 80033b4:	08018de0 	.word	0x08018de0

080033b8 <KeyManager_FindKey>:
static uint32_t key_lookup_table[MAX_SECTORS];
static uint16_t total_keys = 0;

// Returns sector number if key is found, else -1
static int16_t KeyManager_FindKey(uint32_t key_id)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
    for (uint16_t sector = 0; sector < MAX_SECTORS; sector++)
 80033c0:	2300      	movs	r3, #0
 80033c2:	81fb      	strh	r3, [r7, #14]
 80033c4:	e00c      	b.n	80033e0 <KeyManager_FindKey+0x28>
    {
        if (key_lookup_table[sector] == key_id)
 80033c6:	89fb      	ldrh	r3, [r7, #14]
 80033c8:	4a0b      	ldr	r2, [pc, #44]	@ (80033f8 <KeyManager_FindKey+0x40>)
 80033ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d102      	bne.n	80033da <KeyManager_FindKey+0x22>
		{
        	return sector;
 80033d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033d8:	e008      	b.n	80033ec <KeyManager_FindKey+0x34>
    for (uint16_t sector = 0; sector < MAX_SECTORS; sector++)
 80033da:	89fb      	ldrh	r3, [r7, #14]
 80033dc:	3301      	adds	r3, #1
 80033de:	81fb      	strh	r3, [r7, #14]
 80033e0:	89fb      	ldrh	r3, [r7, #14]
 80033e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033e6:	d3ee      	bcc.n	80033c6 <KeyManager_FindKey+0xe>
		}
    }
    return -1;
 80033e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3714      	adds	r7, #20
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr
 80033f8:	20000278 	.word	0x20000278

080033fc <KeyManager_FindFreeSector>:

// Returns the first empty sector
static int16_t KeyManager_FindFreeSector(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
    for (uint16_t sector = 0; sector < MAX_SECTORS; sector++)
 8003402:	2300      	movs	r3, #0
 8003404:	80fb      	strh	r3, [r7, #6]
 8003406:	e00c      	b.n	8003422 <KeyManager_FindFreeSector+0x26>
    {
        if (key_lookup_table[sector] == 0xFFFFFFFF)
 8003408:	88fb      	ldrh	r3, [r7, #6]
 800340a:	4a0c      	ldr	r2, [pc, #48]	@ (800343c <KeyManager_FindFreeSector+0x40>)
 800340c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003414:	d102      	bne.n	800341c <KeyManager_FindFreeSector+0x20>
        {
            return sector;
 8003416:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800341a:	e008      	b.n	800342e <KeyManager_FindFreeSector+0x32>
    for (uint16_t sector = 0; sector < MAX_SECTORS; sector++)
 800341c:	88fb      	ldrh	r3, [r7, #6]
 800341e:	3301      	adds	r3, #1
 8003420:	80fb      	strh	r3, [r7, #6]
 8003422:	88fb      	ldrh	r3, [r7, #6]
 8003424:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003428:	d3ee      	bcc.n	8003408 <KeyManager_FindFreeSector+0xc>
        }
    }
    return -1;
 800342a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800342e:	4618      	mov	r0, r3
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	20000278 	.word	0x20000278

08003440 <KeyManager_Init>:
    return total_keys;
}

// Initializes the Key Manager and builds the lookup table
KeyManagerStatus_t KeyManager_Init(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
	// Array to hold the Identifier Header
    uint8_t entry_header[ENTRY_HEADER_SIZE];
    // Zero Initialize the Look-Up Table
    memset(key_lookup_table, 0xFF, sizeof(key_lookup_table)); // 0xFFFFFFFF indicates unused
 8003446:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800344a:	21ff      	movs	r1, #255	@ 0xff
 800344c:	4824      	ldr	r0, [pc, #144]	@ (80034e0 <KeyManager_Init+0xa0>)
 800344e:	f013 fa11 	bl	8016874 <memset>
    // Set Total Key count to Zero
    total_keys = 0;
 8003452:	4b24      	ldr	r3, [pc, #144]	@ (80034e4 <KeyManager_Init+0xa4>)
 8003454:	2200      	movs	r2, #0
 8003456:	801a      	strh	r2, [r3, #0]
    // Fill up the Look-Up Table
    for (uint16_t sector = 0; sector < MAX_SECTORS; sector++)
 8003458:	2300      	movs	r3, #0
 800345a:	81fb      	strh	r3, [r7, #14]
 800345c:	e030      	b.n	80034c0 <KeyManager_Init+0x80>
    {
        // Read first 5 bytes of each entry to check for valid entry
        if (FlashManager_ReadIdentifier(sector, entry_header) != FLASH_MANAGER_OK)
 800345e:	463a      	mov	r2, r7
 8003460:	89fb      	ldrh	r3, [r7, #14]
 8003462:	4611      	mov	r1, r2
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff fd57 	bl	8002f18 <FlashManager_ReadIdentifier>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d005      	beq.n	800347c <KeyManager_Init+0x3c>
        {
            log_error("Failed to read sector %u during KeyManager Init", sector);
 8003470:	89fb      	ldrh	r3, [r7, #14]
 8003472:	4619      	mov	r1, r3
 8003474:	481c      	ldr	r0, [pc, #112]	@ (80034e8 <KeyManager_Init+0xa8>)
 8003476:	f000 fdc9 	bl	800400c <log_error>
            continue;
 800347a:	e01e      	b.n	80034ba <KeyManager_Init+0x7a>
        }
        // Check the Validity Flag
        if (entry_header[0] == VALID_ENTRY_FLAG)
 800347c:	783b      	ldrb	r3, [r7, #0]
 800347e:	2baa      	cmp	r3, #170	@ 0xaa
 8003480:	d11b      	bne.n	80034ba <KeyManager_Init+0x7a>
        {
        	// Retrieve the Key ID from Identifier Header
            uint32_t key_id = (entry_header[1] << 24) |
 8003482:	787b      	ldrb	r3, [r7, #1]
 8003484:	061a      	lsls	r2, r3, #24
                              (entry_header[2] << 16) |
 8003486:	78bb      	ldrb	r3, [r7, #2]
 8003488:	041b      	lsls	r3, r3, #16
            uint32_t key_id = (entry_header[1] << 24) |
 800348a:	431a      	orrs	r2, r3
                              (entry_header[3] << 8)  |
 800348c:	78fb      	ldrb	r3, [r7, #3]
 800348e:	021b      	lsls	r3, r3, #8
                              (entry_header[2] << 16) |
 8003490:	4313      	orrs	r3, r2
                              (entry_header[4]);
 8003492:	793a      	ldrb	r2, [r7, #4]
                              (entry_header[3] << 8)  |
 8003494:	4313      	orrs	r3, r2
            uint32_t key_id = (entry_header[1] << 24) |
 8003496:	60bb      	str	r3, [r7, #8]
            // Store the Key ID in the Look-Up Table
            key_lookup_table[sector] = key_id;
 8003498:	89fb      	ldrh	r3, [r7, #14]
 800349a:	4911      	ldr	r1, [pc, #68]	@ (80034e0 <KeyManager_Init+0xa0>)
 800349c:	68ba      	ldr	r2, [r7, #8]
 800349e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            // Increment the Total Key count
            total_keys++;
 80034a2:	4b10      	ldr	r3, [pc, #64]	@ (80034e4 <KeyManager_Init+0xa4>)
 80034a4:	881b      	ldrh	r3, [r3, #0]
 80034a6:	3301      	adds	r3, #1
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	4b0e      	ldr	r3, [pc, #56]	@ (80034e4 <KeyManager_Init+0xa4>)
 80034ac:	801a      	strh	r2, [r3, #0]
            log_info("Key ID 0x%08X found at sector %u", key_id, sector);
 80034ae:	89fb      	ldrh	r3, [r7, #14]
 80034b0:	461a      	mov	r2, r3
 80034b2:	68b9      	ldr	r1, [r7, #8]
 80034b4:	480d      	ldr	r0, [pc, #52]	@ (80034ec <KeyManager_Init+0xac>)
 80034b6:	f000 fd75 	bl	8003fa4 <log_info>
    for (uint16_t sector = 0; sector < MAX_SECTORS; sector++)
 80034ba:	89fb      	ldrh	r3, [r7, #14]
 80034bc:	3301      	adds	r3, #1
 80034be:	81fb      	strh	r3, [r7, #14]
 80034c0:	89fb      	ldrh	r3, [r7, #14]
 80034c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034c6:	d3ca      	bcc.n	800345e <KeyManager_Init+0x1e>
        }
    }

    log_info("KeyManager Initialization completed with %u keys loaded.", total_keys);
 80034c8:	4b06      	ldr	r3, [pc, #24]	@ (80034e4 <KeyManager_Init+0xa4>)
 80034ca:	881b      	ldrh	r3, [r3, #0]
 80034cc:	4619      	mov	r1, r3
 80034ce:	4808      	ldr	r0, [pc, #32]	@ (80034f0 <KeyManager_Init+0xb0>)
 80034d0:	f000 fd68 	bl	8003fa4 <log_info>
    return KM_STATUS_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	20000278 	.word	0x20000278
 80034e4:	20002278 	.word	0x20002278
 80034e8:	08018df4 	.word	0x08018df4
 80034ec:	08018e24 	.word	0x08018e24
 80034f0:	08018e48 	.word	0x08018e48

080034f4 <KeyManager_AddKey>:

KeyManagerStatus_t KeyManager_AddKey(uint32_t keyID, uint8_t* key, uint8_t keySize, uint8_t keyOrigin, uint8_t keyUsage)
{
 80034f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f6:	b09f      	sub	sp, #124	@ 0x7c
 80034f8:	af02      	add	r7, sp, #8
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	4611      	mov	r1, r2
 8003500:	461a      	mov	r2, r3
 8003502:	460b      	mov	r3, r1
 8003504:	71fb      	strb	r3, [r7, #7]
 8003506:	4613      	mov	r3, r2
 8003508:	71bb      	strb	r3, [r7, #6]
	// Check for Free Sector in the Look-Up table
	uint16_t sectorNumber = 0;
 800350a:	2300      	movs	r3, #0
 800350c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
	sectorNumber = KeyManager_FindFreeSector();
 8003510:	f7ff ff74 	bl	80033fc <KeyManager_FindFreeSector>
 8003514:	4603      	mov	r3, r0
 8003516:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
		log_error("No free sectors are available. Key Manager full.");
		return KM_STATUS_STORAGE_FULL;
	}

	// Creating an instance of the KeyEntry_t structure
	KeyEntry_t *keyEntry = (KeyEntry_t *)malloc(sizeof(KeyEntry_t));
 800351a:	2058      	movs	r0, #88	@ 0x58
 800351c:	f012 ff38 	bl	8016390 <malloc>
 8003520:	4603      	mov	r3, r0
 8003522:	66bb      	str	r3, [r7, #104]	@ 0x68
	// Checking if Heap allocated space for the struct instance
	if(keyEntry == NULL)
 8003524:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003526:	2b00      	cmp	r3, #0
 8003528:	d104      	bne.n	8003534 <KeyManager_AddKey+0x40>
	{
		log_error("Failed to allocate memory for Key Entry.");
 800352a:	487f      	ldr	r0, [pc, #508]	@ (8003728 <KeyManager_AddKey+0x234>)
 800352c:	f000 fd6e 	bl	800400c <log_error>
		return KM_STATUS_NO_HEAP;
 8003530:	2303      	movs	r3, #3
 8003532:	e0f4      	b.n	800371e <KeyManager_AddKey+0x22a>
	}
	// Set struct memory to zero
	memset(keyEntry, 0, sizeof(KeyEntry_t));
 8003534:	2258      	movs	r2, #88	@ 0x58
 8003536:	2100      	movs	r1, #0
 8003538:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800353a:	f013 f99b 	bl	8016874 <memset>

	// Declare static arrays to hold Plaintext, Ciphertext, IV, HMAC and Buffer Array to flush to flash
	static uint8_t keyEntryArray[sizeof(KeyEntry_t)] = {0};
	static uint8_t plaintext[sizeof(KeyEntry_t)-53] = {0};
	static uint8_t ciphertext[sizeof(KeyEntry_t)-53] = {0};
	uint8_t iv[KEY_IV_SIZE] = {0}, hmac[KEY_HMAC_SIZE] = {0}, uid[12] = {0}, masterKey[16] = {0};
 800353e:	2300      	movs	r3, #0
 8003540:	653b      	str	r3, [r7, #80]	@ 0x50
 8003542:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003546:	2200      	movs	r2, #0
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	605a      	str	r2, [r3, #4]
 800354c:	609a      	str	r2, [r3, #8]
 800354e:	2300      	movs	r3, #0
 8003550:	633b      	str	r3, [r7, #48]	@ 0x30
 8003552:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003556:	2200      	movs	r2, #0
 8003558:	601a      	str	r2, [r3, #0]
 800355a:	605a      	str	r2, [r3, #4]
 800355c:	609a      	str	r2, [r3, #8]
 800355e:	60da      	str	r2, [r3, #12]
 8003560:	611a      	str	r2, [r3, #16]
 8003562:	615a      	str	r2, [r3, #20]
 8003564:	619a      	str	r2, [r3, #24]
 8003566:	2300      	movs	r3, #0
 8003568:	627b      	str	r3, [r7, #36]	@ 0x24
 800356a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800356e:	2200      	movs	r2, #0
 8003570:	601a      	str	r2, [r3, #0]
 8003572:	605a      	str	r2, [r3, #4]
 8003574:	2300      	movs	r3, #0
 8003576:	617b      	str	r3, [r7, #20]
 8003578:	f107 0318 	add.w	r3, r7, #24
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	605a      	str	r2, [r3, #4]
 8003582:	609a      	str	r2, [r3, #8]
	int err = 0;
 8003584:	2300      	movs	r3, #0
 8003586:	667b      	str	r3, [r7, #100]	@ 0x64

	// Retrieve Salt from Flash
	const uint8_t* salt_ptr = SaltManager_Get();
 8003588:	f000 fc82 	bl	8003e90 <SaltManager_Get>
 800358c:	6638      	str	r0, [r7, #96]	@ 0x60
	// Retrieve UID from System
	DeviceInfo_GetUniqueID(uid);
 800358e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003592:	4618      	mov	r0, r3
 8003594:	f7ff fc32 	bl	8002dfc <DeviceInfo_GetUniqueID>
	// Derive Key using HKDF
	HKDF_DeriveKey(salt_ptr, uid, masterKey);
 8003598:	f107 0214 	add.w	r2, r7, #20
 800359c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035a0:	4619      	mov	r1, r3
 80035a2:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80035a4:	f7ff feaa 	bl	80032fc <HKDF_DeriveKey>

	// Set Key ID member in the structure
	keyEntry->key_id = keyID;
 80035a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	601a      	str	r2, [r3, #0]
	// Set Key Usage Count to zero in the structure
	keyEntry->usage_count = 0;
 80035ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035b0:	2200      	movs	r2, #0
 80035b2:	711a      	strb	r2, [r3, #4]
	// Set Key Origin member in the structure
	keyEntry->origin = keyOrigin;
 80035b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035b6:	79ba      	ldrb	r2, [r7, #6]
 80035b8:	715a      	strb	r2, [r3, #5]
	// Set Key Usage member in the structure
	keyEntry->usage = keyUsage;
 80035ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035bc:	f897 2088 	ldrb.w	r2, [r7, #136]	@ 0x88
 80035c0:	719a      	strb	r2, [r3, #6]
	// Set Key Size member in the structure
	keyEntry->key_size = keySize;
 80035c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035c4:	79fa      	ldrb	r2, [r7, #7]
 80035c6:	71da      	strb	r2, [r3, #7]
	// Fill Key Value member in the structure
	memcpy(keyEntry->key_val, key, keySize);
 80035c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035ca:	3308      	adds	r3, #8
 80035cc:	79fa      	ldrb	r2, [r7, #7]
 80035ce:	68b9      	ldr	r1, [r7, #8]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f013 f9da 	bl	801698a <memcpy>

	// Filling up plaintext array to be encrypted with Master Key
	plaintext[KEY_ORIGIN_POS - 5] = keyOrigin;
 80035d6:	4a55      	ldr	r2, [pc, #340]	@ (800372c <KeyManager_AddKey+0x238>)
 80035d8:	79bb      	ldrb	r3, [r7, #6]
 80035da:	7013      	strb	r3, [r2, #0]
	plaintext[KEY_USAGE_POS - 5] = keyUsage;
 80035dc:	4a53      	ldr	r2, [pc, #332]	@ (800372c <KeyManager_AddKey+0x238>)
 80035de:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 80035e2:	7053      	strb	r3, [r2, #1]
	plaintext[KEY_SIZE_POS - 5] = keySize;
 80035e4:	4a51      	ldr	r2, [pc, #324]	@ (800372c <KeyManager_AddKey+0x238>)
 80035e6:	79fb      	ldrb	r3, [r7, #7]
 80035e8:	7093      	strb	r3, [r2, #2]
	memcpy(&plaintext[KEY_VAL_POS - 5], key, MAX_KEY_SIZE);
 80035ea:	2220      	movs	r2, #32
 80035ec:	68b9      	ldr	r1, [r7, #8]
 80035ee:	4850      	ldr	r0, [pc, #320]	@ (8003730 <KeyManager_AddKey+0x23c>)
 80035f0:	f013 f9cb 	bl	801698a <memcpy>

	// Generate a 16-byte Random Initialization Vector
	err = GenerateIV(iv);
 80035f4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7ff fe58 	bl	80032ae <GenerateIV>
 80035fe:	4603      	mov	r3, r0
 8003600:	667b      	str	r3, [r7, #100]	@ 0x64
	if(err)
 8003602:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003604:	2b00      	cmp	r3, #0
 8003606:	d007      	beq.n	8003618 <KeyManager_AddKey+0x124>
	{
		log_error("IV Generation Failed.");
 8003608:	484a      	ldr	r0, [pc, #296]	@ (8003734 <KeyManager_AddKey+0x240>)
 800360a:	f000 fcff 	bl	800400c <log_error>
		free(keyEntry);
 800360e:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8003610:	f012 fec6 	bl	80163a0 <free>
		return KM_STATUS_IV_FAIL;
 8003614:	230e      	movs	r3, #14
 8003616:	e082      	b.n	800371e <KeyManager_AddKey+0x22a>
	}

	// Encrypt the Key Entry Blob with a Master key from KDF
	err = CryptoEngine_Codec(ciphertext, sizeof(ciphertext), plaintext, sizeof(plaintext), iv, masterKey);
 8003618:	f107 0314 	add.w	r3, r7, #20
 800361c:	9301      	str	r3, [sp, #4]
 800361e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	2323      	movs	r3, #35	@ 0x23
 8003626:	4a41      	ldr	r2, [pc, #260]	@ (800372c <KeyManager_AddKey+0x238>)
 8003628:	2123      	movs	r1, #35	@ 0x23
 800362a:	4843      	ldr	r0, [pc, #268]	@ (8003738 <KeyManager_AddKey+0x244>)
 800362c:	f7ff fb9e 	bl	8002d6c <CryptoEngine_Codec>
 8003630:	6678      	str	r0, [r7, #100]	@ 0x64
	if(err)
 8003632:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003634:	2b00      	cmp	r3, #0
 8003636:	d007      	beq.n	8003648 <KeyManager_AddKey+0x154>
	{
		log_error("Codec Generation Failed.");
 8003638:	4840      	ldr	r0, [pc, #256]	@ (800373c <KeyManager_AddKey+0x248>)
 800363a:	f000 fce7 	bl	800400c <log_error>
		free(keyEntry);
 800363e:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8003640:	f012 feae 	bl	80163a0 <free>
		return KM_STATUS_CODEC_FAIL;
 8003644:	230f      	movs	r3, #15
 8003646:	e06a      	b.n	800371e <KeyManager_AddKey+0x22a>
	}

	// Generate the 32-byte HMAC digest for the encrypted Key Entry Blob
	err = GenerateHMAC(ciphertext, sizeof(ciphertext), masterKey, hmac);
 8003648:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800364c:	f107 0214 	add.w	r2, r7, #20
 8003650:	2123      	movs	r1, #35	@ 0x23
 8003652:	4839      	ldr	r0, [pc, #228]	@ (8003738 <KeyManager_AddKey+0x244>)
 8003654:	f7ff fdc0 	bl	80031d8 <GenerateHMAC>
 8003658:	4603      	mov	r3, r0
 800365a:	667b      	str	r3, [r7, #100]	@ 0x64
	if(err)
 800365c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800365e:	2b00      	cmp	r3, #0
 8003660:	d007      	beq.n	8003672 <KeyManager_AddKey+0x17e>
	{
		log_error("HMAC Generation Failed.");
 8003662:	4837      	ldr	r0, [pc, #220]	@ (8003740 <KeyManager_AddKey+0x24c>)
 8003664:	f000 fcd2 	bl	800400c <log_error>
		free(keyEntry);
 8003668:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800366a:	f012 fe99 	bl	80163a0 <free>
		return KM_STATUS_HMAC_FAIL;
 800366e:	2310      	movs	r3, #16
 8003670:	e055      	b.n	800371e <KeyManager_AddKey+0x22a>
	}

	// Set Key ID in the Buffer array
	keyEntryArray[KEY_ID_POS + 0] = (uint8_t)((keyEntry->key_id << 24) & 0xFF);
 8003672:	4b34      	ldr	r3, [pc, #208]	@ (8003744 <KeyManager_AddKey+0x250>)
 8003674:	2200      	movs	r2, #0
 8003676:	701a      	strb	r2, [r3, #0]
	keyEntryArray[KEY_ID_POS + 1] = (uint8_t)((keyEntry->key_id << 16) & 0xFF);
 8003678:	4b32      	ldr	r3, [pc, #200]	@ (8003744 <KeyManager_AddKey+0x250>)
 800367a:	2200      	movs	r2, #0
 800367c:	705a      	strb	r2, [r3, #1]
	keyEntryArray[KEY_ID_POS + 2] = (uint8_t)((keyEntry->key_id << 8) & 0xFF);
 800367e:	4b31      	ldr	r3, [pc, #196]	@ (8003744 <KeyManager_AddKey+0x250>)
 8003680:	2200      	movs	r2, #0
 8003682:	709a      	strb	r2, [r3, #2]
	keyEntryArray[KEY_ID_POS + 3] = (uint8_t)((keyEntry->key_id) & 0xFF);
 8003684:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	b2da      	uxtb	r2, r3
 800368a:	4b2e      	ldr	r3, [pc, #184]	@ (8003744 <KeyManager_AddKey+0x250>)
 800368c:	70da      	strb	r2, [r3, #3]
	// Set Key Usage Count in the Buffer array
	keyEntryArray[KEY_USECOUNT_POS] = (uint8_t)((keyEntry->usage_count) & 0xFF);
 800368e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003690:	791a      	ldrb	r2, [r3, #4]
 8003692:	4b2c      	ldr	r3, [pc, #176]	@ (8003744 <KeyManager_AddKey+0x250>)
 8003694:	711a      	strb	r2, [r3, #4]
	// Copy the encrypted Key Entry Blob into the Buffer array
	memcpy(&keyEntryArray[KEY_ORIGIN_POS], ciphertext, sizeof(ciphertext));
 8003696:	4b2b      	ldr	r3, [pc, #172]	@ (8003744 <KeyManager_AddKey+0x250>)
 8003698:	4a27      	ldr	r2, [pc, #156]	@ (8003738 <KeyManager_AddKey+0x244>)
 800369a:	4614      	mov	r4, r2
 800369c:	f103 0c05 	add.w	ip, r3, #5
 80036a0:	f104 0e20 	add.w	lr, r4, #32
 80036a4:	4665      	mov	r5, ip
 80036a6:	4626      	mov	r6, r4
 80036a8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80036aa:	6028      	str	r0, [r5, #0]
 80036ac:	6069      	str	r1, [r5, #4]
 80036ae:	60aa      	str	r2, [r5, #8]
 80036b0:	60eb      	str	r3, [r5, #12]
 80036b2:	3410      	adds	r4, #16
 80036b4:	f10c 0c10 	add.w	ip, ip, #16
 80036b8:	4574      	cmp	r4, lr
 80036ba:	d1f3      	bne.n	80036a4 <KeyManager_AddKey+0x1b0>
 80036bc:	4663      	mov	r3, ip
 80036be:	4622      	mov	r2, r4
 80036c0:	8811      	ldrh	r1, [r2, #0]
 80036c2:	7892      	ldrb	r2, [r2, #2]
 80036c4:	8019      	strh	r1, [r3, #0]
 80036c6:	709a      	strb	r2, [r3, #2]
	// Copy the used Initialization vector into the Buffer array
	memcpy(&keyEntryArray[KEY_IV_POS], iv, sizeof(iv));
 80036c8:	4b1e      	ldr	r3, [pc, #120]	@ (8003744 <KeyManager_AddKey+0x250>)
 80036ca:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 80036ce:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80036d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// Copy the generated HMAC Digest into the Buffer array
	memcpy(&keyEntryArray[KEY_HMAC_POS], hmac, sizeof(hmac));
 80036d8:	4b1a      	ldr	r3, [pc, #104]	@ (8003744 <KeyManager_AddKey+0x250>)
 80036da:	f103 0438 	add.w	r4, r3, #56	@ 0x38
 80036de:	f107 0530 	add.w	r5, r7, #48	@ 0x30
 80036e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036e6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80036ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// Call Flash Manager function to write to Flash
	if(FlashManager_WriteEntry(sectorNumber, keyEntryArray) != 0)
 80036ee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80036f2:	4914      	ldr	r1, [pc, #80]	@ (8003744 <KeyManager_AddKey+0x250>)
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff fc55 	bl	8002fa4 <FlashManager_WriteEntry>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d007      	beq.n	8003710 <KeyManager_AddKey+0x21c>
	{
		log_error("Write operation to Flash Failed.");
 8003700:	4811      	ldr	r0, [pc, #68]	@ (8003748 <KeyManager_AddKey+0x254>)
 8003702:	f000 fc83 	bl	800400c <log_error>
		free(keyEntry);
 8003706:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8003708:	f012 fe4a 	bl	80163a0 <free>
		return KM_STATUS_WRITE_KEY_FAIL;
 800370c:	2311      	movs	r3, #17
 800370e:	e006      	b.n	800371e <KeyManager_AddKey+0x22a>
	}
	log_info("Key Entry Added to Flash Memory.");
 8003710:	480e      	ldr	r0, [pc, #56]	@ (800374c <KeyManager_AddKey+0x258>)
 8003712:	f000 fc47 	bl	8003fa4 <log_info>
	free(keyEntry);
 8003716:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8003718:	f012 fe42 	bl	80163a0 <free>
	return KM_STATUS_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3774      	adds	r7, #116	@ 0x74
 8003722:	46bd      	mov	sp, r7
 8003724:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003726:	bf00      	nop
 8003728:	08018e84 	.word	0x08018e84
 800372c:	2000227c 	.word	0x2000227c
 8003730:	2000227f 	.word	0x2000227f
 8003734:	08018eb0 	.word	0x08018eb0
 8003738:	200022a0 	.word	0x200022a0
 800373c:	08018ec8 	.word	0x08018ec8
 8003740:	08018ee4 	.word	0x08018ee4
 8003744:	200022c4 	.word	0x200022c4
 8003748:	08018efc 	.word	0x08018efc
 800374c:	08018f20 	.word	0x08018f20

08003750 <KeyManager_GetKey>:

KeyManagerStatus_t KeyManager_GetKey(uint32_t keyID, uint8_t* key)
{
 8003750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003752:	b0a5      	sub	sp, #148	@ 0x94
 8003754:	af02      	add	r7, sp, #8
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
	// Find the Sector Number using the given Key ID
	uint16_t sectorNumber = KeyManager_FindKey(keyID);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7ff fe2c 	bl	80033b8 <KeyManager_FindKey>
 8003760:	4603      	mov	r3, r0
 8003762:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		log_error("Failed to match Key ID in Database.");
		return KM_STATUS_KEY_NOT_FOUND;
	}

	// Creating an instance of the KeyEntry_t structure
	KeyEntry_t *keyEntry = (KeyEntry_t *)malloc(sizeof(KeyEntry_t));
 8003766:	2058      	movs	r0, #88	@ 0x58
 8003768:	f012 fe12 	bl	8016390 <malloc>
 800376c:	4603      	mov	r3, r0
 800376e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	// Checking if Heap allocated space for the struct instance
	if(keyEntry == NULL)
 8003772:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003776:	2b00      	cmp	r3, #0
 8003778:	d104      	bne.n	8003784 <KeyManager_GetKey+0x34>
	{
		log_error("Failed to allocate memory for Key Entry.");
 800377a:	487c      	ldr	r0, [pc, #496]	@ (800396c <KeyManager_GetKey+0x21c>)
 800377c:	f000 fc46 	bl	800400c <log_error>
		return KM_STATUS_NO_HEAP;
 8003780:	2303      	movs	r3, #3
 8003782:	e0ee      	b.n	8003962 <KeyManager_GetKey+0x212>
	}
	// Set struct memory to zero
	memset(keyEntry, 0, sizeof(KeyEntry_t));
 8003784:	2258      	movs	r2, #88	@ 0x58
 8003786:	2100      	movs	r1, #0
 8003788:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800378c:	f013 f872 	bl	8016874 <memset>

	// Declare static arrays to hold plaintext, ciphertext, iv, hmac, master key and buffer array to flush to flash
	static uint8_t keyEntryArray[sizeof(KeyEntry_t)] = {0};
	static uint8_t plaintext[sizeof(KeyEntry_t)-53] = {0};
	static uint8_t ciphertext[sizeof(KeyEntry_t)-53] = {0};
	uint8_t iv[KEY_IV_SIZE] = {0}, stored_hmac[KEY_HMAC_SIZE] = {0}, computed_hmac[KEY_HMAC_SIZE] = {0}, uid[12] = {0}, masterKey[16] = {0};
 8003790:	2300      	movs	r3, #0
 8003792:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003794:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	605a      	str	r2, [r3, #4]
 800379e:	609a      	str	r2, [r3, #8]
 80037a0:	2300      	movs	r3, #0
 80037a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037a4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	605a      	str	r2, [r3, #4]
 80037ae:	609a      	str	r2, [r3, #8]
 80037b0:	60da      	str	r2, [r3, #12]
 80037b2:	611a      	str	r2, [r3, #16]
 80037b4:	615a      	str	r2, [r3, #20]
 80037b6:	619a      	str	r2, [r3, #24]
 80037b8:	2300      	movs	r3, #0
 80037ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	605a      	str	r2, [r3, #4]
 80037c6:	609a      	str	r2, [r3, #8]
 80037c8:	60da      	str	r2, [r3, #12]
 80037ca:	611a      	str	r2, [r3, #16]
 80037cc:	615a      	str	r2, [r3, #20]
 80037ce:	619a      	str	r2, [r3, #24]
 80037d0:	2300      	movs	r3, #0
 80037d2:	61fb      	str	r3, [r7, #28]
 80037d4:	f107 0320 	add.w	r3, r7, #32
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	605a      	str	r2, [r3, #4]
 80037de:	2300      	movs	r3, #0
 80037e0:	60fb      	str	r3, [r7, #12]
 80037e2:	f107 0310 	add.w	r3, r7, #16
 80037e6:	2200      	movs	r2, #0
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	605a      	str	r2, [r3, #4]
 80037ec:	609a      	str	r2, [r3, #8]
	int err = 0;
 80037ee:	2300      	movs	r3, #0
 80037f0:	67fb      	str	r3, [r7, #124]	@ 0x7c

	// Retrieve Salt from Flash
	const uint8_t* salt_ptr = SaltManager_Get();
 80037f2:	f000 fb4d 	bl	8003e90 <SaltManager_Get>
 80037f6:	67b8      	str	r0, [r7, #120]	@ 0x78
	// Retrieve UID from System
	DeviceInfo_GetUniqueID(uid);
 80037f8:	f107 031c 	add.w	r3, r7, #28
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7ff fafd 	bl	8002dfc <DeviceInfo_GetUniqueID>
	// Derive Key using HKDF
	HKDF_DeriveKey(salt_ptr, uid, masterKey);
 8003802:	f107 020c 	add.w	r2, r7, #12
 8003806:	f107 031c 	add.w	r3, r7, #28
 800380a:	4619      	mov	r1, r3
 800380c:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800380e:	f7ff fd75 	bl	80032fc <HKDF_DeriveKey>

	// Call FlashManager function to read back the Key Entry and store it in keyEntryArray[]
	if(FlashManager_ReadEntry(sectorNumber, keyEntryArray) != 0)
 8003812:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003816:	4956      	ldr	r1, [pc, #344]	@ (8003970 <KeyManager_GetKey+0x220>)
 8003818:	4618      	mov	r0, r3
 800381a:	f7ff fb97 	bl	8002f4c <FlashManager_ReadEntry>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d008      	beq.n	8003836 <KeyManager_GetKey+0xe6>
	{
		log_error("Failed to Read entry from Flash.");
 8003824:	4853      	ldr	r0, [pc, #332]	@ (8003974 <KeyManager_GetKey+0x224>)
 8003826:	f000 fbf1 	bl	800400c <log_error>
		free(keyEntry);
 800382a:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800382e:	f012 fdb7 	bl	80163a0 <free>
		return KM_STATUS_READ_KEY_FAIL;
 8003832:	2312      	movs	r3, #18
 8003834:	e095      	b.n	8003962 <KeyManager_GetKey+0x212>
	}

	// Copy the encrypted Key Entry Blob into the Ciphertext array
	memcpy(ciphertext, &keyEntryArray[KEY_ORIGIN_POS], sizeof(ciphertext));
 8003836:	4a50      	ldr	r2, [pc, #320]	@ (8003978 <KeyManager_GetKey+0x228>)
 8003838:	4b4d      	ldr	r3, [pc, #308]	@ (8003970 <KeyManager_GetKey+0x220>)
 800383a:	1d5c      	adds	r4, r3, #5
 800383c:	4616      	mov	r6, r2
 800383e:	f104 0c20 	add.w	ip, r4, #32
 8003842:	4635      	mov	r5, r6
 8003844:	4623      	mov	r3, r4
 8003846:	6818      	ldr	r0, [r3, #0]
 8003848:	6859      	ldr	r1, [r3, #4]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003850:	3410      	adds	r4, #16
 8003852:	3610      	adds	r6, #16
 8003854:	4564      	cmp	r4, ip
 8003856:	d1f4      	bne.n	8003842 <KeyManager_GetKey+0xf2>
 8003858:	4633      	mov	r3, r6
 800385a:	4622      	mov	r2, r4
 800385c:	8811      	ldrh	r1, [r2, #0]
 800385e:	7892      	ldrb	r2, [r2, #2]
 8003860:	8019      	strh	r1, [r3, #0]
 8003862:	709a      	strb	r2, [r3, #2]
	// Copy the used Initialization vector into the Buffer array
	memcpy(iv, &keyEntryArray[KEY_IV_POS], KEY_IV_SIZE);
 8003864:	4b42      	ldr	r3, [pc, #264]	@ (8003970 <KeyManager_GetKey+0x220>)
 8003866:	f107 0468 	add.w	r4, r7, #104	@ 0x68
 800386a:	3328      	adds	r3, #40	@ 0x28
 800386c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800386e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// Copy the generated HMAC Digest into the Buffer arrayS
	memcpy(stored_hmac, &keyEntryArray[KEY_HMAC_POS], KEY_HMAC_SIZE);
 8003872:	4b3f      	ldr	r3, [pc, #252]	@ (8003970 <KeyManager_GetKey+0x220>)
 8003874:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 8003878:	f103 0538 	add.w	r5, r3, #56	@ 0x38
 800387c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800387e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003880:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003884:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// Generate the 32-byte HMAC digest for the encrypted Key Entry Blob
	err = GenerateHMAC(ciphertext, sizeof(ciphertext), masterKey, computed_hmac);
 8003888:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800388c:	f107 020c 	add.w	r2, r7, #12
 8003890:	2123      	movs	r1, #35	@ 0x23
 8003892:	4839      	ldr	r0, [pc, #228]	@ (8003978 <KeyManager_GetKey+0x228>)
 8003894:	f7ff fca0 	bl	80031d8 <GenerateHMAC>
 8003898:	4603      	mov	r3, r0
 800389a:	67fb      	str	r3, [r7, #124]	@ 0x7c
	if(err)
 800389c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d008      	beq.n	80038b4 <KeyManager_GetKey+0x164>
	{
		log_error("HMAC Generation Failed.");
 80038a2:	4836      	ldr	r0, [pc, #216]	@ (800397c <KeyManager_GetKey+0x22c>)
 80038a4:	f000 fbb2 	bl	800400c <log_error>
		free(keyEntry);
 80038a8:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80038ac:	f012 fd78 	bl	80163a0 <free>
		return KM_STATUS_HMAC_FAIL;
 80038b0:	2310      	movs	r3, #16
 80038b2:	e056      	b.n	8003962 <KeyManager_GetKey+0x212>
	}

	// Check if Computed HMAC is same as Stored value
	if(memcmp(stored_hmac, computed_hmac, KEY_HMAC_SIZE) != 0)
 80038b4:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80038b8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80038bc:	2220      	movs	r2, #32
 80038be:	4618      	mov	r0, r3
 80038c0:	f012 ffc8 	bl	8016854 <memcmp>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d008      	beq.n	80038dc <KeyManager_GetKey+0x18c>
	{
		log_error("Computed HMAC value does not match with the stored value.");
 80038ca:	482d      	ldr	r0, [pc, #180]	@ (8003980 <KeyManager_GetKey+0x230>)
 80038cc:	f000 fb9e 	bl	800400c <log_error>
		free(keyEntry);
 80038d0:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80038d4:	f012 fd64 	bl	80163a0 <free>
		return KM_STATUS_HMAC_MISMATCH;
 80038d8:	2309      	movs	r3, #9
 80038da:	e042      	b.n	8003962 <KeyManager_GetKey+0x212>
	}
	log_info("Computed HMAC value matches with the stored value.");
 80038dc:	4829      	ldr	r0, [pc, #164]	@ (8003984 <KeyManager_GetKey+0x234>)
 80038de:	f000 fb61 	bl	8003fa4 <log_info>

	// Decrypt the Key Entry Blob with a Master key from KDF
	err = CryptoEngine_Codec(plaintext, sizeof(plaintext), ciphertext, sizeof(ciphertext), iv, masterKey);
 80038e2:	f107 030c 	add.w	r3, r7, #12
 80038e6:	9301      	str	r3, [sp, #4]
 80038e8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	2323      	movs	r3, #35	@ 0x23
 80038f0:	4a21      	ldr	r2, [pc, #132]	@ (8003978 <KeyManager_GetKey+0x228>)
 80038f2:	2123      	movs	r1, #35	@ 0x23
 80038f4:	4824      	ldr	r0, [pc, #144]	@ (8003988 <KeyManager_GetKey+0x238>)
 80038f6:	f7ff fa39 	bl	8002d6c <CryptoEngine_Codec>
 80038fa:	67f8      	str	r0, [r7, #124]	@ 0x7c
	if(err)
 80038fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d008      	beq.n	8003914 <KeyManager_GetKey+0x1c4>
	{
		log_error("Codec Generation Failed.");
 8003902:	4822      	ldr	r0, [pc, #136]	@ (800398c <KeyManager_GetKey+0x23c>)
 8003904:	f000 fb82 	bl	800400c <log_error>
		free(keyEntry);
 8003908:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800390c:	f012 fd48 	bl	80163a0 <free>
		return KM_STATUS_CODEC_FAIL;
 8003910:	230f      	movs	r3, #15
 8003912:	e026      	b.n	8003962 <KeyManager_GetKey+0x212>
	}

	// Retrieve the Key Size
	keyEntry->key_size = plaintext[KEY_SIZE_POS - 5];
 8003914:	4b1c      	ldr	r3, [pc, #112]	@ (8003988 <KeyManager_GetKey+0x238>)
 8003916:	789a      	ldrb	r2, [r3, #2]
 8003918:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800391c:	71da      	strb	r2, [r3, #7]
	// Retrieve the Key Value
	memcpy(key, &plaintext[KEY_VAL_POS - 5], MAX_KEY_SIZE);
 800391e:	2220      	movs	r2, #32
 8003920:	491b      	ldr	r1, [pc, #108]	@ (8003990 <KeyManager_GetKey+0x240>)
 8003922:	6838      	ldr	r0, [r7, #0]
 8003924:	f013 f831 	bl	801698a <memcpy>
	// Update the Key Use Count in the Buffer array
	keyEntryArray[KEY_USECOUNT_POS] += 1;
 8003928:	4b11      	ldr	r3, [pc, #68]	@ (8003970 <KeyManager_GetKey+0x220>)
 800392a:	791b      	ldrb	r3, [r3, #4]
 800392c:	3301      	adds	r3, #1
 800392e:	b2da      	uxtb	r2, r3
 8003930:	4b0f      	ldr	r3, [pc, #60]	@ (8003970 <KeyManager_GetKey+0x220>)
 8003932:	711a      	strb	r2, [r3, #4]
	// Call FlashManager function to write the updated Buffer array to flash
	if(FlashManager_UpdateEntry(sectorNumber, keyEntryArray) != 0)
 8003934:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003938:	490d      	ldr	r1, [pc, #52]	@ (8003970 <KeyManager_GetKey+0x220>)
 800393a:	4618      	mov	r0, r3
 800393c:	f7ff fb66 	bl	800300c <FlashManager_UpdateEntry>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d008      	beq.n	8003958 <KeyManager_GetKey+0x208>
	{
		log_error("Failed to Update entry in Flash.");
 8003946:	4813      	ldr	r0, [pc, #76]	@ (8003994 <KeyManager_GetKey+0x244>)
 8003948:	f000 fb60 	bl	800400c <log_error>
		free(keyEntry);
 800394c:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8003950:	f012 fd26 	bl	80163a0 <free>
		return KM_STATUS_UPDATE_KEY_FAIL;
 8003954:	2313      	movs	r3, #19
 8003956:	e004      	b.n	8003962 <KeyManager_GetKey+0x212>
	}
	free(keyEntry);
 8003958:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800395c:	f012 fd20 	bl	80163a0 <free>
	// Return operation success flag.
	return KM_STATUS_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	378c      	adds	r7, #140	@ 0x8c
 8003966:	46bd      	mov	sp, r7
 8003968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800396a:	bf00      	nop
 800396c:	08018e84 	.word	0x08018e84
 8003970:	2000231c 	.word	0x2000231c
 8003974:	08018f44 	.word	0x08018f44
 8003978:	20002374 	.word	0x20002374
 800397c:	08018ee4 	.word	0x08018ee4
 8003980:	08018f68 	.word	0x08018f68
 8003984:	08018fa4 	.word	0x08018fa4
 8003988:	20002398 	.word	0x20002398
 800398c:	08018ec8 	.word	0x08018ec8
 8003990:	2000239b 	.word	0x2000239b
 8003994:	08018fd8 	.word	0x08018fd8

08003998 <KeyManager_DeleteKey>:

KeyManagerStatus_t KeyManager_DeleteKey(uint32_t keyID)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
	uint16_t sectorNumber = 0;
 80039a0:	2300      	movs	r3, #0
 80039a2:	81fb      	strh	r3, [r7, #14]
	uint8_t header[ENTRY_HEADER_SIZE] = {0};
 80039a4:	2300      	movs	r3, #0
 80039a6:	60bb      	str	r3, [r7, #8]
 80039a8:	2300      	movs	r3, #0
 80039aa:	733b      	strb	r3, [r7, #12]
	sectorNumber = KeyManager_FindKey(keyID);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7ff fd03 	bl	80033b8 <KeyManager_FindKey>
 80039b2:	4603      	mov	r3, r0
 80039b4:	81fb      	strh	r3, [r7, #14]
	{
		log_error("Failed to match Key ID in Database.");
		return KM_STATUS_KEY_NOT_FOUND;
	}

	if(FlashManager_ReadIdentifier(sectorNumber, header) != 0)
 80039b6:	f107 0208 	add.w	r2, r7, #8
 80039ba:	89fb      	ldrh	r3, [r7, #14]
 80039bc:	4611      	mov	r1, r2
 80039be:	4618      	mov	r0, r3
 80039c0:	f7ff faaa 	bl	8002f18 <FlashManager_ReadIdentifier>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d004      	beq.n	80039d4 <KeyManager_DeleteKey+0x3c>
	{
		log_error("Failed to read Identifier Flash.");
 80039ca:	480e      	ldr	r0, [pc, #56]	@ (8003a04 <KeyManager_DeleteKey+0x6c>)
 80039cc:	f000 fb1e 	bl	800400c <log_error>
		return KM_STATUS_READ_KEY_FAIL;
 80039d0:	2312      	movs	r3, #18
 80039d2:	e012      	b.n	80039fa <KeyManager_DeleteKey+0x62>
	}

	if(header[VALIDITY_FLAG_POS] == VALID_ENTRY_FLAG)
 80039d4:	7a3b      	ldrb	r3, [r7, #8]
 80039d6:	2baa      	cmp	r3, #170	@ 0xaa
 80039d8:	d10e      	bne.n	80039f8 <KeyManager_DeleteKey+0x60>
	{
		log_info("Sector contains valid entry. Erasing now.");
 80039da:	480b      	ldr	r0, [pc, #44]	@ (8003a08 <KeyManager_DeleteKey+0x70>)
 80039dc:	f000 fae2 	bl	8003fa4 <log_info>
		if(FlashManager_EraseEntry(sectorNumber) != 0)
 80039e0:	89fb      	ldrh	r3, [r7, #14]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7ff fb50 	bl	8003088 <FlashManager_EraseEntry>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d004      	beq.n	80039f8 <KeyManager_DeleteKey+0x60>
		{
			log_error("Failed to Erase entry from Flash.");
 80039ee:	4807      	ldr	r0, [pc, #28]	@ (8003a0c <KeyManager_DeleteKey+0x74>)
 80039f0:	f000 fb0c 	bl	800400c <log_error>
			return KM_STATUS_DELETE_KEY_FAIL;
 80039f4:	2314      	movs	r3, #20
 80039f6:	e000      	b.n	80039fa <KeyManager_DeleteKey+0x62>
		}
	}
	return KM_STATUS_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	08018ffc 	.word	0x08018ffc
 8003a08:	08019020 	.word	0x08019020
 8003a0c:	0801904c 	.word	0x0801904c

08003a10 <PacketBuilder_Build>:
#include "Logger.h"
#include <string.h>


BuildStatus_t PacketBuilder_Build(const ResponsePacket_t* responsePacket, uint8_t* outBuffer, uint16_t* outLength)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
	log_debug("Checking if Response Packet is NULL");
 8003a1c:	484e      	ldr	r0, [pc, #312]	@ (8003b58 <PacketBuilder_Build+0x148>)
 8003a1e:	f000 faa7 	bl	8003f70 <log_debug>
	// Check if Response, Output and Output Size are NULL
    if (!responsePacket || !outBuffer || !outLength)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d005      	beq.n	8003a34 <PacketBuilder_Build+0x24>
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d002      	beq.n	8003a34 <PacketBuilder_Build+0x24>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d101      	bne.n	8003a38 <PacketBuilder_Build+0x28>
    {
    	return BUILD_NULL_POINTER;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e08b      	b.n	8003b50 <PacketBuilder_Build+0x140>
    }
    log_debug("Checking if Output Size is under limits");
 8003a38:	4848      	ldr	r0, [pc, #288]	@ (8003b5c <PacketBuilder_Build+0x14c>)
 8003a3a:	f000 fa99 	bl	8003f70 <log_debug>
    // Check if Output Size is under the specified limits
    if (responsePacket->outputSize > MAX_OUTPUT_DATA_SIZE)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	889b      	ldrh	r3, [r3, #4]
 8003a42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a46:	d901      	bls.n	8003a4c <PacketBuilder_Build+0x3c>
    {
    	return BUILD_OUTPUT_TOO_LARGE;
 8003a48:	2302      	movs	r3, #2
 8003a4a:	e081      	b.n	8003b50 <PacketBuilder_Build+0x140>
    }
    // Set Index to start of Data Stream
    uint16_t index = 0;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	82fb      	strh	r3, [r7, #22]
    log_debug("Adding Transaction ID to Out Buffer");
 8003a50:	4843      	ldr	r0, [pc, #268]	@ (8003b60 <PacketBuilder_Build+0x150>)
 8003a52:	f000 fa8d 	bl	8003f70 <log_debug>
    // Fill Data Stream with the corresponding Transaction ID
    outBuffer[index++] = (responsePacket->transactionID >> 24) & 0xFF;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	0e1a      	lsrs	r2, r3, #24
 8003a5c:	8afb      	ldrh	r3, [r7, #22]
 8003a5e:	1c59      	adds	r1, r3, #1
 8003a60:	82f9      	strh	r1, [r7, #22]
 8003a62:	4619      	mov	r1, r3
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	440b      	add	r3, r1
 8003a68:	b2d2      	uxtb	r2, r2
 8003a6a:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (responsePacket->transactionID >> 16) & 0xFF;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	0c1a      	lsrs	r2, r3, #16
 8003a72:	8afb      	ldrh	r3, [r7, #22]
 8003a74:	1c59      	adds	r1, r3, #1
 8003a76:	82f9      	strh	r1, [r7, #22]
 8003a78:	4619      	mov	r1, r3
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	440b      	add	r3, r1
 8003a7e:	b2d2      	uxtb	r2, r2
 8003a80:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (responsePacket->transactionID >> 8)  & 0xFF;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	0a1a      	lsrs	r2, r3, #8
 8003a88:	8afb      	ldrh	r3, [r7, #22]
 8003a8a:	1c59      	adds	r1, r3, #1
 8003a8c:	82f9      	strh	r1, [r7, #22]
 8003a8e:	4619      	mov	r1, r3
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	440b      	add	r3, r1
 8003a94:	b2d2      	uxtb	r2, r2
 8003a96:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (responsePacket->transactionID)       & 0xFF;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	8afb      	ldrh	r3, [r7, #22]
 8003a9e:	1c59      	adds	r1, r3, #1
 8003aa0:	82f9      	strh	r1, [r7, #22]
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	440b      	add	r3, r1
 8003aa8:	b2d2      	uxtb	r2, r2
 8003aaa:	701a      	strb	r2, [r3, #0]
    log_debug("Adding Output Data Size to Out Buffer");
 8003aac:	482d      	ldr	r0, [pc, #180]	@ (8003b64 <PacketBuilder_Build+0x154>)
 8003aae:	f000 fa5f 	bl	8003f70 <log_debug>
    // Fill Data Stream with the Output Data Size
    outBuffer[index++] = (responsePacket->outputSize >> 8) & 0xFF;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	889b      	ldrh	r3, [r3, #4]
 8003ab6:	0a1b      	lsrs	r3, r3, #8
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	8afb      	ldrh	r3, [r7, #22]
 8003abc:	1c59      	adds	r1, r3, #1
 8003abe:	82f9      	strh	r1, [r7, #22]
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	440b      	add	r3, r1
 8003ac6:	b2d2      	uxtb	r2, r2
 8003ac8:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (responsePacket->outputSize)      & 0xFF;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	889a      	ldrh	r2, [r3, #4]
 8003ace:	8afb      	ldrh	r3, [r7, #22]
 8003ad0:	1c59      	adds	r1, r3, #1
 8003ad2:	82f9      	strh	r1, [r7, #22]
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	440b      	add	r3, r1
 8003ada:	b2d2      	uxtb	r2, r2
 8003adc:	701a      	strb	r2, [r3, #0]
    // Copy Output Data contents to Data Stream
    log_debug("Copying Output Data to Out Buffer");
 8003ade:	4822      	ldr	r0, [pc, #136]	@ (8003b68 <PacketBuilder_Build+0x158>)
 8003ae0:	f000 fa46 	bl	8003f70 <log_debug>
    memcpy(&outBuffer[index], responsePacket->outputData, responsePacket->outputSize);
 8003ae4:	8afb      	ldrh	r3, [r7, #22]
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	18d0      	adds	r0, r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	1d99      	adds	r1, r3, #6
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	889b      	ldrh	r3, [r3, #4]
 8003af2:	461a      	mov	r2, r3
 8003af4:	f012 ff49 	bl	801698a <memcpy>
    // Set Index to point to EOD Flag
    index += responsePacket->outputSize;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	889a      	ldrh	r2, [r3, #4]
 8003afc:	8afb      	ldrh	r3, [r7, #22]
 8003afe:	4413      	add	r3, r2
 8003b00:	82fb      	strh	r3, [r7, #22]
    log_debug("Adding Outward EOD Flag to Out Buffer");
 8003b02:	481a      	ldr	r0, [pc, #104]	@ (8003b6c <PacketBuilder_Build+0x15c>)
 8003b04:	f000 fa34 	bl	8003f70 <log_debug>
    // Add EOD Flag to Data Stream
    outBuffer[index++] = (OUT_EOD_FLAG >> 24) & 0xFF;
 8003b08:	8afb      	ldrh	r3, [r7, #22]
 8003b0a:	1c5a      	adds	r2, r3, #1
 8003b0c:	82fa      	strh	r2, [r7, #22]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	4413      	add	r3, r2
 8003b14:	22ca      	movs	r2, #202	@ 0xca
 8003b16:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (OUT_EOD_FLAG >> 16) & 0xFF;
 8003b18:	8afb      	ldrh	r3, [r7, #22]
 8003b1a:	1c5a      	adds	r2, r3, #1
 8003b1c:	82fa      	strh	r2, [r7, #22]
 8003b1e:	461a      	mov	r2, r3
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	4413      	add	r3, r2
 8003b24:	22fe      	movs	r2, #254	@ 0xfe
 8003b26:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (OUT_EOD_FLAG >> 8)  & 0xFF;
 8003b28:	8afb      	ldrh	r3, [r7, #22]
 8003b2a:	1c5a      	adds	r2, r3, #1
 8003b2c:	82fa      	strh	r2, [r7, #22]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	4413      	add	r3, r2
 8003b34:	22ba      	movs	r2, #186	@ 0xba
 8003b36:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (OUT_EOD_FLAG)       & 0xFF;
 8003b38:	8afb      	ldrh	r3, [r7, #22]
 8003b3a:	1c5a      	adds	r2, r3, #1
 8003b3c:	82fa      	strh	r2, [r7, #22]
 8003b3e:	461a      	mov	r2, r3
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	4413      	add	r3, r2
 8003b44:	22be      	movs	r2, #190	@ 0xbe
 8003b46:	701a      	strb	r2, [r3, #0]
    // Set Index to point to End of Data Stream
    *outLength = index;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	8afa      	ldrh	r2, [r7, #22]
 8003b4c:	801a      	strh	r2, [r3, #0]
    // Return to indicate successful Packet Build
    return BUILD_SUCCESS;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3718      	adds	r7, #24
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	08019070 	.word	0x08019070
 8003b5c:	08019094 	.word	0x08019094
 8003b60:	080190bc 	.word	0x080190bc
 8003b64:	080190e0 	.word	0x080190e0
 8003b68:	08019108 	.word	0x08019108
 8003b6c:	0801912c 	.word	0x0801912c

08003b70 <PacketParser_Parse>:
#include "constants.h"
#include "Logger.h"
#include <string.h>

ParseStatus_t PacketParser_Parse(const uint8_t* rawData, uint16_t rawLength, ParsedPacket_t* parsedPacket)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	460b      	mov	r3, r1
 8003b7a:	607a      	str	r2, [r7, #4]
 8003b7c:	817b      	strh	r3, [r7, #10]
	log_debug("Checking if Data Stream or Packet Structure is NULL.");
 8003b7e:	4860      	ldr	r0, [pc, #384]	@ (8003d00 <PacketParser_Parse+0x190>)
 8003b80:	f000 f9f6 	bl	8003f70 <log_debug>
	// Check if Data Stream or Packet structure is NULL
	if (!rawData || !parsedPacket)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d002      	beq.n	8003b90 <PacketParser_Parse+0x20>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d104      	bne.n	8003b9a <PacketParser_Parse+0x2a>
    {
		log_error("Data Stream or Packet Structure is NULL");
 8003b90:	485c      	ldr	r0, [pc, #368]	@ (8003d04 <PacketParser_Parse+0x194>)
 8003b92:	f000 fa3b 	bl	800400c <log_error>
    	return PARSE_NULL_POINTER;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e0ae      	b.n	8003cf8 <PacketParser_Parse+0x188>
    }
	log_debug("Checking if Data Stream contains less than 12 bytes.");
 8003b9a:	485b      	ldr	r0, [pc, #364]	@ (8003d08 <PacketParser_Parse+0x198>)
 8003b9c:	f000 f9e8 	bl	8003f70 <log_debug>
    // Check if Data Stream contains Data of valid length
    if (rawLength < 12)
 8003ba0:	897b      	ldrh	r3, [r7, #10]
 8003ba2:	2b0b      	cmp	r3, #11
 8003ba4:	d804      	bhi.n	8003bb0 <PacketParser_Parse+0x40>
    {
    	log_error("Data stream contain less than 12 bytes");
 8003ba6:	4859      	ldr	r0, [pc, #356]	@ (8003d0c <PacketParser_Parse+0x19c>)
 8003ba8:	f000 fa30 	bl	800400c <log_error>
    	return PARSE_INVALID_LENGTH;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e0a3      	b.n	8003cf8 <PacketParser_Parse+0x188>
    }
    // Set Index to start of Data Stream
    uint16_t index = 0;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	82fb      	strh	r3, [r7, #22]
    log_debug("Filling up Transaction ID.");
 8003bb4:	4856      	ldr	r0, [pc, #344]	@ (8003d10 <PacketParser_Parse+0x1a0>)
 8003bb6:	f000 f9db 	bl	8003f70 <log_debug>
    // Retrieve Transaction ID from Data Stream
    parsedPacket->transactionID = (rawData[index]     << 24) |
 8003bba:	8afb      	ldrh	r3, [r7, #22]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	061a      	lsls	r2, r3, #24
                                  (rawData[index + 1] << 16) |
 8003bc4:	8afb      	ldrh	r3, [r7, #22]
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	68f9      	ldr	r1, [r7, #12]
 8003bca:	440b      	add	r3, r1
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	041b      	lsls	r3, r3, #16
    parsedPacket->transactionID = (rawData[index]     << 24) |
 8003bd0:	431a      	orrs	r2, r3
                                  (rawData[index + 2] << 8)  |
 8003bd2:	8afb      	ldrh	r3, [r7, #22]
 8003bd4:	3302      	adds	r3, #2
 8003bd6:	68f9      	ldr	r1, [r7, #12]
 8003bd8:	440b      	add	r3, r1
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	021b      	lsls	r3, r3, #8
                                  (rawData[index + 1] << 16) |
 8003bde:	4313      	orrs	r3, r2
                                  (rawData[index + 3]);
 8003be0:	8afa      	ldrh	r2, [r7, #22]
 8003be2:	3203      	adds	r2, #3
 8003be4:	68f9      	ldr	r1, [r7, #12]
 8003be6:	440a      	add	r2, r1
 8003be8:	7812      	ldrb	r2, [r2, #0]
                                  (rawData[index + 2] << 8)  |
 8003bea:	4313      	orrs	r3, r2
 8003bec:	461a      	mov	r2, r3
    parsedPacket->transactionID = (rawData[index]     << 24) |
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	601a      	str	r2, [r3, #0]
    // Set Index to point CMD byte
    index += 4;
 8003bf2:	8afb      	ldrh	r3, [r7, #22]
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	82fb      	strh	r3, [r7, #22]
    log_debug("Filling up CMD, OPTION and INPUT_SIZE fields.");
 8003bf8:	4846      	ldr	r0, [pc, #280]	@ (8003d14 <PacketParser_Parse+0x1a4>)
 8003bfa:	f000 f9b9 	bl	8003f70 <log_debug>
    // Retrieve CMD byte from Data Stream
    parsedPacket->cmd = rawData[index++];
 8003bfe:	8afb      	ldrh	r3, [r7, #22]
 8003c00:	1c5a      	adds	r2, r3, #1
 8003c02:	82fa      	strh	r2, [r7, #22]
 8003c04:	461a      	mov	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	4413      	add	r3, r2
 8003c0a:	781a      	ldrb	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	711a      	strb	r2, [r3, #4]
    // Retrieve OPTION byte from Data Stream
    parsedPacket->option = rawData[index++];
 8003c10:	8afb      	ldrh	r3, [r7, #22]
 8003c12:	1c5a      	adds	r2, r3, #1
 8003c14:	82fa      	strh	r2, [r7, #22]
 8003c16:	461a      	mov	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	781a      	ldrb	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	715a      	strb	r2, [r3, #5]
    // Retrieve INPUT_SIZE half-word from Data Stream
    parsedPacket->inputSize = (rawData[index] << 8) | rawData[index + 1];
 8003c22:	8afb      	ldrh	r3, [r7, #22]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	4413      	add	r3, r2
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	021b      	lsls	r3, r3, #8
 8003c2c:	b21a      	sxth	r2, r3
 8003c2e:	8afb      	ldrh	r3, [r7, #22]
 8003c30:	3301      	adds	r3, #1
 8003c32:	68f9      	ldr	r1, [r7, #12]
 8003c34:	440b      	add	r3, r1
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	b21b      	sxth	r3, r3
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	b21b      	sxth	r3, r3
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	80da      	strh	r2, [r3, #6]
    // Set Index to point INPUT_DATA
    index += 2;
 8003c44:	8afb      	ldrh	r3, [r7, #22]
 8003c46:	3302      	adds	r3, #2
 8003c48:	82fb      	strh	r3, [r7, #22]
    log_debug("Checking if INPUT_SIZE is within the limits.");
 8003c4a:	4833      	ldr	r0, [pc, #204]	@ (8003d18 <PacketParser_Parse+0x1a8>)
 8003c4c:	f000 f990 	bl	8003f70 <log_debug>
    // Check if INPUT_SIZE is under the prescribed limit
    if (parsedPacket->inputSize > MAX_INPUT_DATA_SIZE || ((index - 1) + parsedPacket->inputSize + 4) > rawLength)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	88db      	ldrh	r3, [r3, #6]
 8003c54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c58:	d808      	bhi.n	8003c6c <PacketParser_Parse+0xfc>
 8003c5a:	8afb      	ldrh	r3, [r7, #22]
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	88d2      	ldrh	r2, [r2, #6]
 8003c62:	4413      	add	r3, r2
 8003c64:	1cda      	adds	r2, r3, #3
 8003c66:	897b      	ldrh	r3, [r7, #10]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	db04      	blt.n	8003c76 <PacketParser_Parse+0x106>
    {
    	log_error("Input Data Size is too big.");
 8003c6c:	482b      	ldr	r0, [pc, #172]	@ (8003d1c <PacketParser_Parse+0x1ac>)
 8003c6e:	f000 f9cd 	bl	800400c <log_error>
        return PARSE_INPUT_TOO_LARGE;
 8003c72:	2304      	movs	r3, #4
 8003c74:	e040      	b.n	8003cf8 <PacketParser_Parse+0x188>
    }
    log_debug("Copying INPUT DATA to Packet Structure.");
 8003c76:	482a      	ldr	r0, [pc, #168]	@ (8003d20 <PacketParser_Parse+0x1b0>)
 8003c78:	f000 f97a 	bl	8003f70 <log_debug>
    // Copy INPUT_DATA array from Data Stream to Packet structure
    memcpy(parsedPacket->inputData, &rawData[index], parsedPacket->inputSize);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f103 0008 	add.w	r0, r3, #8
 8003c82:	8afb      	ldrh	r3, [r7, #22]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	18d1      	adds	r1, r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	88db      	ldrh	r3, [r3, #6]
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	f012 fe7c 	bl	801698a <memcpy>
    // Set Index to point EOD Flag
    if(!(parsedPacket->inputSize))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	88db      	ldrh	r3, [r3, #6]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d102      	bne.n	8003ca0 <PacketParser_Parse+0x130>
    {
    	index = 8;
 8003c9a:	2308      	movs	r3, #8
 8003c9c:	82fb      	strh	r3, [r7, #22]
 8003c9e:	e004      	b.n	8003caa <PacketParser_Parse+0x13a>
    }
    else
    {
    	index += parsedPacket->inputSize;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	88da      	ldrh	r2, [r3, #6]
 8003ca4:	8afb      	ldrh	r3, [r7, #22]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	82fb      	strh	r3, [r7, #22]
    }
    log_debug("Checking the Received EOD word.");
 8003caa:	481e      	ldr	r0, [pc, #120]	@ (8003d24 <PacketParser_Parse+0x1b4>)
 8003cac:	f000 f960 	bl	8003f70 <log_debug>
    // Retrieve EOD Flag from Data Stream
    uint32_t received_IN_EOD = (rawData[index]     << 24) |
 8003cb0:	8afb      	ldrh	r3, [r7, #22]
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	061a      	lsls	r2, r3, #24
                           	   (rawData[index + 1] << 16) |
 8003cba:	8afb      	ldrh	r3, [r7, #22]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	68f9      	ldr	r1, [r7, #12]
 8003cc0:	440b      	add	r3, r1
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	041b      	lsls	r3, r3, #16
    uint32_t received_IN_EOD = (rawData[index]     << 24) |
 8003cc6:	431a      	orrs	r2, r3
							   (rawData[index + 2] << 8)  |
 8003cc8:	8afb      	ldrh	r3, [r7, #22]
 8003cca:	3302      	adds	r3, #2
 8003ccc:	68f9      	ldr	r1, [r7, #12]
 8003cce:	440b      	add	r3, r1
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	021b      	lsls	r3, r3, #8
                           	   (rawData[index + 1] << 16) |
 8003cd4:	4313      	orrs	r3, r2
							   (rawData[index + 3]);
 8003cd6:	8afa      	ldrh	r2, [r7, #22]
 8003cd8:	3203      	adds	r2, #3
 8003cda:	68f9      	ldr	r1, [r7, #12]
 8003cdc:	440a      	add	r2, r1
 8003cde:	7812      	ldrb	r2, [r2, #0]
							   (rawData[index + 2] << 8)  |
 8003ce0:	4313      	orrs	r3, r2
    uint32_t received_IN_EOD = (rawData[index]     << 24) |
 8003ce2:	613b      	str	r3, [r7, #16]
    // Check if EOD Flag is valid
    if (received_IN_EOD != IN_EOD_FLAG)
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	4a10      	ldr	r2, [pc, #64]	@ (8003d28 <PacketParser_Parse+0x1b8>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d004      	beq.n	8003cf6 <PacketParser_Parse+0x186>
    {
    	log_error("Received EOD Flag is Invalid");
 8003cec:	480f      	ldr	r0, [pc, #60]	@ (8003d2c <PacketParser_Parse+0x1bc>)
 8003cee:	f000 f98d 	bl	800400c <log_error>
        return PARSE_EOD_MISMATCH;
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	e000      	b.n	8003cf8 <PacketParser_Parse+0x188>
    }
    // Return to Indicate successful parsing
    return PARSE_SUCCESS;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3718      	adds	r7, #24
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	08019154 	.word	0x08019154
 8003d04:	0801918c 	.word	0x0801918c
 8003d08:	080191b4 	.word	0x080191b4
 8003d0c:	080191ec 	.word	0x080191ec
 8003d10:	08019214 	.word	0x08019214
 8003d14:	08019230 	.word	0x08019230
 8003d18:	08019260 	.word	0x08019260
 8003d1c:	08019290 	.word	0x08019290
 8003d20:	080192ac 	.word	0x080192ac
 8003d24:	080192d4 	.word	0x080192d4
 8003d28:	deadbeef 	.word	0xdeadbeef
 8003d2c:	080192f4 	.word	0x080192f4

08003d30 <WriteSaltToFlash>:
#define SALT_VALUE_SIZE	   20

static uint8_t salt[SALT_LENGTH];

static SaltManagerStatus_t WriteSaltToFlash(const uint8_t* salt_data)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b08e      	sub	sp, #56	@ 0x38
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
	if (salt_data == NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <WriteSaltToFlash+0x12>
	{
		return SALT_MANAGER_SALT_NULL;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e056      	b.n	8003df0 <WriteSaltToFlash+0xc0>
	}
	// Variables to hold error status
	HAL_StatusTypeDef status;
    uint32_t SectorError = 0;
 8003d42:	2300      	movs	r3, #0
 8003d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // 32-byte temporary buffer
    uint8_t tempBuf[32] __attribute__((aligned(4)));
    // Configure Flash Erase Init structure
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8003d46:	4b2c      	ldr	r3, [pc, #176]	@ (8003df8 <WriteSaltToFlash+0xc8>)
 8003d48:	2204      	movs	r2, #4
 8003d4a:	601a      	str	r2, [r3, #0]
    EraseInitStruct.Banks = FLASH_BANK_2;
 8003d4c:	4b2a      	ldr	r3, [pc, #168]	@ (8003df8 <WriteSaltToFlash+0xc8>)
 8003d4e:	2202      	movs	r2, #2
 8003d50:	605a      	str	r2, [r3, #4]
    EraseInitStruct.Sector = 127;
 8003d52:	4b29      	ldr	r3, [pc, #164]	@ (8003df8 <WriteSaltToFlash+0xc8>)
 8003d54:	227f      	movs	r2, #127	@ 0x7f
 8003d56:	609a      	str	r2, [r3, #8]
    EraseInitStruct.NbSectors = 1;
 8003d58:	4b27      	ldr	r3, [pc, #156]	@ (8003df8 <WriteSaltToFlash+0xc8>)
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	60da      	str	r2, [r3, #12]
	// Fill buffer with zeros first
	memset(tempBuf, 0, sizeof(tempBuf));
 8003d5e:	f107 030c 	add.w	r3, r7, #12
 8003d62:	2220      	movs	r2, #32
 8003d64:	2100      	movs	r1, #0
 8003d66:	4618      	mov	r0, r3
 8003d68:	f012 fd84 	bl	8016874 <memset>
	// Copy the Magic Word into buffer
	*(uint32_t*)&tempBuf[0] = SALT_MAGIC_VALUE;
 8003d6c:	f107 030c 	add.w	r3, r7, #12
 8003d70:	f04f 325a 	mov.w	r2, #1515870810	@ 0x5a5a5a5a
 8003d74:	601a      	str	r2, [r3, #0]
	// Copy the 20-byte Salt into buffer
	memcpy(&tempBuf[4], salt_data, 20);
 8003d76:	f107 030c 	add.w	r3, r7, #12
 8003d7a:	3304      	adds	r3, #4
 8003d7c:	2214      	movs	r2, #20
 8003d7e:	6879      	ldr	r1, [r7, #4]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f012 fe02 	bl	801698a <memcpy>
    // Unlock the Flash Interface
    HAL_FLASH_Unlock();
 8003d86:	f002 f933 	bl	8005ff0 <HAL_FLASH_Unlock>
    // Erase Sector 127 of Flash Bank 2
    if(HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK)
 8003d8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003d8e:	4619      	mov	r1, r3
 8003d90:	4819      	ldr	r0, [pc, #100]	@ (8003df8 <WriteSaltToFlash+0xc8>)
 8003d92:	f002 fa79 	bl	8006288 <HAL_FLASHEx_Erase>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d006      	beq.n	8003daa <WriteSaltToFlash+0x7a>
    {
    	log_error("Flash Erase Operation failed.");
 8003d9c:	4817      	ldr	r0, [pc, #92]	@ (8003dfc <WriteSaltToFlash+0xcc>)
 8003d9e:	f000 f935 	bl	800400c <log_error>
    	HAL_FLASH_Lock();
 8003da2:	f002 f94b 	bl	800603c <HAL_FLASH_Lock>
    	return SALT_MANAGER_FLASH_ERASE_FAIL;
 8003da6:	2304      	movs	r3, #4
 8003da8:	e022      	b.n	8003df0 <WriteSaltToFlash+0xc0>
    }
    // Program the buffer to Flash (2 Quad-Words)
    for(int i = 0; i < 2; i++)
 8003daa:	2300      	movs	r3, #0
 8003dac:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dae:	e01b      	b.n	8003de8 <WriteSaltToFlash+0xb8>
    {
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, (SALT_FLASH_ADDR + i*16), (uint32_t)&tempBuf[0]);
 8003db0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003db2:	011b      	lsls	r3, r3, #4
 8003db4:	461a      	mov	r2, r3
 8003db6:	4b12      	ldr	r3, [pc, #72]	@ (8003e00 <WriteSaltToFlash+0xd0>)
 8003db8:	4413      	add	r3, r2
 8003dba:	f107 020c 	add.w	r2, r7, #12
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	2002      	movs	r0, #2
 8003dc2:	f002 f89d 	bl	8005f00 <HAL_FLASH_Program>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (status != HAL_OK)
 8003dcc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d006      	beq.n	8003de2 <WriteSaltToFlash+0xb2>
    	{
        	log_error("Flash Program Operation failed.");
 8003dd4:	480b      	ldr	r0, [pc, #44]	@ (8003e04 <WriteSaltToFlash+0xd4>)
 8003dd6:	f000 f919 	bl	800400c <log_error>
        	HAL_FLASH_Lock();
 8003dda:	f002 f92f 	bl	800603c <HAL_FLASH_Lock>
        	return SALT_MANAGER_FLASH_WRITE_FAIL;
 8003dde:	2305      	movs	r3, #5
 8003de0:	e006      	b.n	8003df0 <WriteSaltToFlash+0xc0>
    for(int i = 0; i < 2; i++)
 8003de2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003de4:	3301      	adds	r3, #1
 8003de6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	dde0      	ble.n	8003db0 <WriteSaltToFlash+0x80>
    	}
    }
    return SALT_MANAGER_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3738      	adds	r7, #56	@ 0x38
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	200023bc 	.word	0x200023bc
 8003dfc:	08019314 	.word	0x08019314
 8003e00:	081fffe0 	.word	0x081fffe0
 8003e04:	08019334 	.word	0x08019334

08003e08 <LoadSaltFromFlash>:

static void LoadSaltFromFlash(uint8_t* dest)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
    memcpy(dest, (const void*)SALT_VALUE_ADDR, SALT_VALUE_SIZE);
 8003e10:	2214      	movs	r2, #20
 8003e12:	4904      	ldr	r1, [pc, #16]	@ (8003e24 <LoadSaltFromFlash+0x1c>)
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f012 fdb8 	bl	801698a <memcpy>
}
 8003e1a:	bf00      	nop
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	081fffe4 	.word	0x081fffe4

08003e28 <SaltManager_Init>:

SaltManagerStatus_t SaltManager_Init(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
    if (*(uint32_t*)SALT_MAGIC_ADDR == SALT_MAGIC_VALUE)
 8003e2e:	4b14      	ldr	r3, [pc, #80]	@ (8003e80 <SaltManager_Init+0x58>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f1b3 3f5a 	cmp.w	r3, #1515870810	@ 0x5a5a5a5a
 8003e36:	d104      	bne.n	8003e42 <SaltManager_Init+0x1a>
    {
        // Salt already initialized
    	LoadSaltFromFlash(salt);
 8003e38:	4812      	ldr	r0, [pc, #72]	@ (8003e84 <SaltManager_Init+0x5c>)
 8003e3a:	f7ff ffe5 	bl	8003e08 <LoadSaltFromFlash>
        return SALT_MANAGER_OK;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	e01a      	b.n	8003e78 <SaltManager_Init+0x50>
    }

    // First boot: generate and store
    uint8_t err;
    err = GenerateSalt(salt);
 8003e42:	4810      	ldr	r0, [pc, #64]	@ (8003e84 <SaltManager_Init+0x5c>)
 8003e44:	f7ff fa4d 	bl	80032e2 <GenerateSalt>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	71fb      	strb	r3, [r7, #7]
    if(err)
 8003e4c:	79fb      	ldrb	r3, [r7, #7]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d004      	beq.n	8003e5c <SaltManager_Init+0x34>
    {
    	log_error("Failed to Generate Salt.");
 8003e52:	480d      	ldr	r0, [pc, #52]	@ (8003e88 <SaltManager_Init+0x60>)
 8003e54:	f000 f8da 	bl	800400c <log_error>
    	return SALT_MANAGER_GENERATOR_FAIL;
 8003e58:	2302      	movs	r3, #2
 8003e5a:	e00d      	b.n	8003e78 <SaltManager_Init+0x50>
    }
    err = WriteSaltToFlash(salt);
 8003e5c:	4809      	ldr	r0, [pc, #36]	@ (8003e84 <SaltManager_Init+0x5c>)
 8003e5e:	f7ff ff67 	bl	8003d30 <WriteSaltToFlash>
 8003e62:	4603      	mov	r3, r0
 8003e64:	71fb      	strb	r3, [r7, #7]
    if(err)
 8003e66:	79fb      	ldrb	r3, [r7, #7]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d004      	beq.n	8003e76 <SaltManager_Init+0x4e>
    {
    	log_error("Failed to write Salt to Flash.");
 8003e6c:	4807      	ldr	r0, [pc, #28]	@ (8003e8c <SaltManager_Init+0x64>)
 8003e6e:	f000 f8cd 	bl	800400c <log_error>
    	return SALT_MANAGER_FLASH_WRITE_FAIL;
 8003e72:	2305      	movs	r3, #5
 8003e74:	e000      	b.n	8003e78 <SaltManager_Init+0x50>
    }
    return SALT_MANAGER_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3708      	adds	r7, #8
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	081fffe0 	.word	0x081fffe0
 8003e84:	200023cc 	.word	0x200023cc
 8003e88:	08019354 	.word	0x08019354
 8003e8c:	08019370 	.word	0x08019370

08003e90 <SaltManager_Get>:

const uint8_t* SaltManager_Get(void)
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
    return salt;
 8003e94:	4b02      	ldr	r3, [pc, #8]	@ (8003ea0 <SaltManager_Get+0x10>)
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr
 8003ea0:	200023cc 	.word	0x200023cc

08003ea4 <log_init>:
#define LOG_BUFFER_SIZE 256

static LogLevel current_level = LOG_LEVEL_INFO;

void log_init(LogLevel level)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	4603      	mov	r3, r0
 8003eac:	71fb      	strb	r3, [r7, #7]
    current_level = level;
 8003eae:	4a04      	ldr	r2, [pc, #16]	@ (8003ec0 <log_init+0x1c>)
 8003eb0:	79fb      	ldrb	r3, [r7, #7]
 8003eb2:	7013      	strb	r3, [r2, #0]
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	20000000 	.word	0x20000000

08003ec4 <log_clearline>:

void log_clearline(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
    // Move cursor up and clear the entire line
    printf("\033[A\033[2K\r");
 8003ec8:	4802      	ldr	r0, [pc, #8]	@ (8003ed4 <log_clearline+0x10>)
 8003eca:	f012 fbe1 	bl	8016690 <iprintf>
}
 8003ece:	bf00      	nop
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	08019390 	.word	0x08019390

08003ed8 <log_generic>:

static void log_generic(LogLevel level, const char *prefix, const char *color, const char *fmt, va_list args)
{
 8003ed8:	b590      	push	{r4, r7, lr}
 8003eda:	b0c7      	sub	sp, #284	@ 0x11c
 8003edc:	af02      	add	r7, sp, #8
 8003ede:	4604      	mov	r4, r0
 8003ee0:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8003ee4:	f5a0 7084 	sub.w	r0, r0, #264	@ 0x108
 8003ee8:	6001      	str	r1, [r0, #0]
 8003eea:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8003eee:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8003ef2:	600a      	str	r2, [r1, #0]
 8003ef4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003ef8:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8003efc:	6013      	str	r3, [r2, #0]
 8003efe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003f02:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8003f06:	4622      	mov	r2, r4
 8003f08:	701a      	strb	r2, [r3, #0]
    if (level < current_level)
 8003f0a:	4b16      	ldr	r3, [pc, #88]	@ (8003f64 <log_generic+0x8c>)
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003f12:	f2a2 1201 	subw	r2, r2, #257	@ 0x101
 8003f16:	7812      	ldrb	r2, [r2, #0]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d31e      	bcc.n	8003f5a <log_generic+0x82>
        return;

    char buffer[LOG_BUFFER_SIZE];
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 8003f1c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003f20:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 8003f24:	f107 0010 	add.w	r0, r7, #16
 8003f28:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003f2c:	6812      	ldr	r2, [r2, #0]
 8003f2e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003f32:	f012 fc81 	bl	8016838 <vsniprintf>

    // Print directly using printf(), assumes it's redirected to VCOM via BSP
    printf("%s[%s] %s%s\r\n", color, prefix, buffer, COLOR_RESET);
 8003f36:	f107 0310 	add.w	r3, r7, #16
 8003f3a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003f3e:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8003f42:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8003f46:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8003f4a:	4807      	ldr	r0, [pc, #28]	@ (8003f68 <log_generic+0x90>)
 8003f4c:	9000      	str	r0, [sp, #0]
 8003f4e:	6812      	ldr	r2, [r2, #0]
 8003f50:	6809      	ldr	r1, [r1, #0]
 8003f52:	4806      	ldr	r0, [pc, #24]	@ (8003f6c <log_generic+0x94>)
 8003f54:	f012 fb9c 	bl	8016690 <iprintf>
 8003f58:	e000      	b.n	8003f5c <log_generic+0x84>
        return;
 8003f5a:	bf00      	nop
}
 8003f5c:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd90      	pop	{r4, r7, pc}
 8003f64:	20000000 	.word	0x20000000
 8003f68:	080193ac 	.word	0x080193ac
 8003f6c:	0801939c 	.word	0x0801939c

08003f70 <log_debug>:

void log_debug(const char *fmt, ...)
{
 8003f70:	b40f      	push	{r0, r1, r2, r3}
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b084      	sub	sp, #16
 8003f76:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 8003f78:	f107 0314 	add.w	r3, r7, #20
 8003f7c:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_DEBUG, "DEBUG", COLOR_DEBUG, fmt, args);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	4a05      	ldr	r2, [pc, #20]	@ (8003f9c <log_debug+0x2c>)
 8003f86:	4906      	ldr	r1, [pc, #24]	@ (8003fa0 <log_debug+0x30>)
 8003f88:	2000      	movs	r0, #0
 8003f8a:	f7ff ffa5 	bl	8003ed8 <log_generic>
    va_end(args);
}
 8003f8e:	bf00      	nop
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f98:	b004      	add	sp, #16
 8003f9a:	4770      	bx	lr
 8003f9c:	080193b4 	.word	0x080193b4
 8003fa0:	080193bc 	.word	0x080193bc

08003fa4 <log_info>:

void log_info(const char *fmt, ...)
{
 8003fa4:	b40f      	push	{r0, r1, r2, r3}
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b084      	sub	sp, #16
 8003faa:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 8003fac:	f107 0314 	add.w	r3, r7, #20
 8003fb0:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_INFO, "INFO", COLOR_INFO, fmt, args);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	4a05      	ldr	r2, [pc, #20]	@ (8003fd0 <log_info+0x2c>)
 8003fba:	4906      	ldr	r1, [pc, #24]	@ (8003fd4 <log_info+0x30>)
 8003fbc:	2001      	movs	r0, #1
 8003fbe:	f7ff ff8b 	bl	8003ed8 <log_generic>
    va_end(args);
}
 8003fc2:	bf00      	nop
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003fcc:	b004      	add	sp, #16
 8003fce:	4770      	bx	lr
 8003fd0:	080193c4 	.word	0x080193c4
 8003fd4:	080193cc 	.word	0x080193cc

08003fd8 <log_warn>:

void log_warn(const char *fmt, ...)
{
 8003fd8:	b40f      	push	{r0, r1, r2, r3}
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b084      	sub	sp, #16
 8003fde:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 8003fe0:	f107 0314 	add.w	r3, r7, #20
 8003fe4:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_WARN, "WARN", COLOR_WARN, fmt, args);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	4a05      	ldr	r2, [pc, #20]	@ (8004004 <log_warn+0x2c>)
 8003fee:	4906      	ldr	r1, [pc, #24]	@ (8004008 <log_warn+0x30>)
 8003ff0:	2002      	movs	r0, #2
 8003ff2:	f7ff ff71 	bl	8003ed8 <log_generic>
    va_end(args);
}
 8003ff6:	bf00      	nop
 8003ff8:	3708      	adds	r7, #8
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004000:	b004      	add	sp, #16
 8004002:	4770      	bx	lr
 8004004:	080193d4 	.word	0x080193d4
 8004008:	080193dc 	.word	0x080193dc

0800400c <log_error>:

void log_error(const char *fmt, ...)
{
 800400c:	b40f      	push	{r0, r1, r2, r3}
 800400e:	b580      	push	{r7, lr}
 8004010:	b084      	sub	sp, #16
 8004012:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 8004014:	f107 0314 	add.w	r3, r7, #20
 8004018:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_ERROR, "ERROR", COLOR_ERROR, fmt, args);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	4a05      	ldr	r2, [pc, #20]	@ (8004038 <log_error+0x2c>)
 8004022:	4906      	ldr	r1, [pc, #24]	@ (800403c <log_error+0x30>)
 8004024:	2003      	movs	r0, #3
 8004026:	f7ff ff57 	bl	8003ed8 <log_generic>
    va_end(args);
}
 800402a:	bf00      	nop
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004034:	b004      	add	sp, #16
 8004036:	4770      	bx	lr
 8004038:	080193e4 	.word	0x080193e4
 800403c:	080193ec 	.word	0x080193ec

08004040 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004044:	f001 fc0c 	bl	8005860 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004048:	f000 f84a 	bl	80040e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800404c:	f000 fb1a 	bl	8004684 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 8004050:	f000 fab6 	bl	80045c0 <MX_USB_PCD_Init>
  MX_USART2_UART_Init();
 8004054:	f000 fa1c 	bl	8004490 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8004058:	f000 f8ec 	bl	8004234 <MX_I2C1_Init>
  MX_SPI1_Init();
 800405c:	f000 f9c2 	bl	80043e4 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 8004060:	f000 fa62 	bl	8004528 <MX_USART6_UART_Init>
  MX_RTC_Init();
 8004064:	f000 f93c 	bl	80042e0 <MX_RTC_Init>
  MX_RNG_Init();
 8004068:	f000 f924 	bl	80042b4 <MX_RNG_Init>
  MX_HASH_Init();
 800406c:	f000 f8c0 	bl	80041f0 <MX_HASH_Init>
  MX_FLASH_Init();
 8004070:	f000 f8ac 	bl	80041cc <MX_FLASH_Init>
  /* USER CODE BEGIN 2 */
  while(hUsbDeviceFS.pClassData == NULL);
 8004074:	bf00      	nop
 8004076:	4b18      	ldr	r3, [pc, #96]	@ (80040d8 <main+0x98>)
 8004078:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800407c:	2b00      	cmp	r3, #0
 800407e:	d0fa      	beq.n	8004076 <main+0x36>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8004080:	2000      	movs	r0, #0
 8004082:	f001 f9d3 	bl	800542c <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8004086:	2001      	movs	r0, #1
 8004088:	f001 f9d0 	bl	800542c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800408c:	2002      	movs	r0, #2
 800408e:	f001 f9cd 	bl	800542c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8004092:	2101      	movs	r1, #1
 8004094:	2000      	movs	r0, #0
 8004096:	f001 fa69 	bl	800556c <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800409a:	4b10      	ldr	r3, [pc, #64]	@ (80040dc <main+0x9c>)
 800409c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80040a0:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80040a2:	4b0e      	ldr	r3, [pc, #56]	@ (80040dc <main+0x9c>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80040a8:	4b0c      	ldr	r3, [pc, #48]	@ (80040dc <main+0x9c>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80040ae:	4b0b      	ldr	r3, [pc, #44]	@ (80040dc <main+0x9c>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80040b4:	4b09      	ldr	r3, [pc, #36]	@ (80040dc <main+0x9c>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80040ba:	4908      	ldr	r1, [pc, #32]	@ (80040dc <main+0x9c>)
 80040bc:	2000      	movs	r0, #0
 80040be:	f001 faef 	bl	80056a0 <BSP_COM_Init>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <main+0x8c>
  {
    Error_Handler();
 80040c8:	f000 fc00 	bl	80048cc <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HSMManager_Init();
 80040cc:	f7fc fd62 	bl	8000b94 <HSMManager_Init>

  HSMManager_ProcessCommand();
 80040d0:	f7fc fe0a 	bl	8000ce8 <HSMManager_ProcessCommand>

  while (1)
 80040d4:	bf00      	nop
 80040d6:	e7fd      	b.n	80040d4 <main+0x94>
 80040d8:	20002960 	.word	0x20002960
 80040dc:	200023dc 	.word	0x200023dc

080040e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b09c      	sub	sp, #112	@ 0x70
 80040e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80040e6:	f107 0320 	add.w	r3, r7, #32
 80040ea:	2250      	movs	r2, #80	@ 0x50
 80040ec:	2100      	movs	r1, #0
 80040ee:	4618      	mov	r0, r3
 80040f0:	f012 fbc0 	bl	8016874 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80040f4:	f107 0308 	add.w	r3, r7, #8
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]
 80040fc:	605a      	str	r2, [r3, #4]
 80040fe:	609a      	str	r2, [r3, #8]
 8004100:	60da      	str	r2, [r3, #12]
 8004102:	611a      	str	r2, [r3, #16]
 8004104:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8004106:	4b2f      	ldr	r3, [pc, #188]	@ (80041c4 <SystemClock_Config+0xe4>)
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	4a2e      	ldr	r2, [pc, #184]	@ (80041c4 <SystemClock_Config+0xe4>)
 800410c:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8004110:	6113      	str	r3, [r2, #16]
 8004112:	4b2c      	ldr	r3, [pc, #176]	@ (80041c4 <SystemClock_Config+0xe4>)
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800411a:	607b      	str	r3, [r7, #4]
 800411c:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800411e:	bf00      	nop
 8004120:	4b28      	ldr	r3, [pc, #160]	@ (80041c4 <SystemClock_Config+0xe4>)
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	f003 0308 	and.w	r3, r3, #8
 8004128:	2b08      	cmp	r3, #8
 800412a:	d1f9      	bne.n	8004120 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 800412c:	2329      	movs	r3, #41	@ 0x29
 800412e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004130:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8004134:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004136:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800413a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800413c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004140:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004142:	2302      	movs	r3, #2
 8004144:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8004146:	2303      	movs	r3, #3
 8004148:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800414a:	2304      	movs	r3, #4
 800414c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 800414e:	23fa      	movs	r3, #250	@ 0xfa
 8004150:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8004152:	2302      	movs	r3, #2
 8004154:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004156:	2302      	movs	r3, #2
 8004158:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800415a:	2302      	movs	r3, #2
 800415c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 800415e:	2304      	movs	r3, #4
 8004160:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8004162:	2300      	movs	r3, #0
 8004164:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8004166:	2300      	movs	r3, #0
 8004168:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800416a:	f107 0320 	add.w	r3, r7, #32
 800416e:	4618      	mov	r0, r3
 8004170:	f005 faf8 	bl	8009764 <HAL_RCC_OscConfig>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800417a:	f000 fba7 	bl	80048cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800417e:	231f      	movs	r3, #31
 8004180:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004182:	2303      	movs	r3, #3
 8004184:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004186:	2300      	movs	r3, #0
 8004188:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800418a:	2300      	movs	r3, #0
 800418c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800418e:	2300      	movs	r3, #0
 8004190:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8004192:	2300      	movs	r3, #0
 8004194:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004196:	f107 0308 	add.w	r3, r7, #8
 800419a:	2105      	movs	r1, #5
 800419c:	4618      	mov	r0, r3
 800419e:	f005 ff19 	bl	8009fd4 <HAL_RCC_ClockConfig>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80041a8:	f000 fb90 	bl	80048cc <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 80041ac:	4b06      	ldr	r3, [pc, #24]	@ (80041c8 <SystemClock_Config+0xe8>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80041b4:	4a04      	ldr	r2, [pc, #16]	@ (80041c8 <SystemClock_Config+0xe8>)
 80041b6:	f043 0320 	orr.w	r3, r3, #32
 80041ba:	6013      	str	r3, [r2, #0]
}
 80041bc:	bf00      	nop
 80041be:	3770      	adds	r7, #112	@ 0x70
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	44020800 	.word	0x44020800
 80041c8:	40022000 	.word	0x40022000

080041cc <MX_FLASH_Init>:
  * @brief FLASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_FLASH_Init(void)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	af00      	add	r7, sp, #0
  /* USER CODE END FLASH_Init 0 */

  /* USER CODE BEGIN FLASH_Init 1 */

  /* USER CODE END FLASH_Init 1 */
  if (HAL_FLASH_Unlock() != HAL_OK)
 80041d0:	f001 ff0e 	bl	8005ff0 <HAL_FLASH_Unlock>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <MX_FLASH_Init+0x12>
  {
    Error_Handler();
 80041da:	f000 fb77 	bl	80048cc <Error_Handler>
  }
  if (HAL_FLASH_Lock() != HAL_OK)
 80041de:	f001 ff2d 	bl	800603c <HAL_FLASH_Lock>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <MX_FLASH_Init+0x20>
  {
    Error_Handler();
 80041e8:	f000 fb70 	bl	80048cc <Error_Handler>
  }
  /* USER CODE BEGIN FLASH_Init 2 */

  /* USER CODE END FLASH_Init 2 */

}
 80041ec:	bf00      	nop
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <MX_HASH_Init>:
  * @brief HASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_HASH_Init(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	af00      	add	r7, sp, #0
  /* USER CODE END HASH_Init 0 */

  /* USER CODE BEGIN HASH_Init 1 */

  /* USER CODE END HASH_Init 1 */
  hhash.Instance = HASH;
 80041f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004228 <MX_HASH_Init+0x38>)
 80041f6:	4a0d      	ldr	r2, [pc, #52]	@ (800422c <MX_HASH_Init+0x3c>)
 80041f8:	601a      	str	r2, [r3, #0]
  hhash.Init.DataType = HASH_BYTE_SWAP;
 80041fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004228 <MX_HASH_Init+0x38>)
 80041fc:	2220      	movs	r2, #32
 80041fe:	605a      	str	r2, [r3, #4]
  hhash.Init.KeySize = 1;
 8004200:	4b09      	ldr	r3, [pc, #36]	@ (8004228 <MX_HASH_Init+0x38>)
 8004202:	2201      	movs	r2, #1
 8004204:	609a      	str	r2, [r3, #8]
  hhash.Init.pKey = (uint8_t *)pKeyHASH;
 8004206:	4b08      	ldr	r3, [pc, #32]	@ (8004228 <MX_HASH_Init+0x38>)
 8004208:	4a09      	ldr	r2, [pc, #36]	@ (8004230 <MX_HASH_Init+0x40>)
 800420a:	60da      	str	r2, [r3, #12]
  hhash.Init.Algorithm = HASH_ALGOSELECTION_SHA256;
 800420c:	4b06      	ldr	r3, [pc, #24]	@ (8004228 <MX_HASH_Init+0x38>)
 800420e:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 8004212:	611a      	str	r2, [r3, #16]
  if (HAL_HASH_Init(&hhash) != HAL_OK)
 8004214:	4804      	ldr	r0, [pc, #16]	@ (8004228 <MX_HASH_Init+0x38>)
 8004216:	f002 fabf 	bl	8006798 <HAL_HASH_Init>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <MX_HASH_Init+0x34>
  {
    Error_Handler();
 8004220:	f000 fb54 	bl	80048cc <Error_Handler>
  }
  /* USER CODE BEGIN HASH_Init 2 */

  /* USER CODE END HASH_Init 2 */

}
 8004224:	bf00      	nop
 8004226:	bd80      	pop	{r7, pc}
 8004228:	200023ec 	.word	0x200023ec
 800422c:	420c0400 	.word	0x420c0400
 8004230:	080195a4 	.word	0x080195a4

08004234 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004238:	4b1b      	ldr	r3, [pc, #108]	@ (80042a8 <MX_I2C1_Init+0x74>)
 800423a:	4a1c      	ldr	r2, [pc, #112]	@ (80042ac <MX_I2C1_Init+0x78>)
 800423c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C043E5;
 800423e:	4b1a      	ldr	r3, [pc, #104]	@ (80042a8 <MX_I2C1_Init+0x74>)
 8004240:	4a1b      	ldr	r2, [pc, #108]	@ (80042b0 <MX_I2C1_Init+0x7c>)
 8004242:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004244:	4b18      	ldr	r3, [pc, #96]	@ (80042a8 <MX_I2C1_Init+0x74>)
 8004246:	2200      	movs	r2, #0
 8004248:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800424a:	4b17      	ldr	r3, [pc, #92]	@ (80042a8 <MX_I2C1_Init+0x74>)
 800424c:	2201      	movs	r2, #1
 800424e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004250:	4b15      	ldr	r3, [pc, #84]	@ (80042a8 <MX_I2C1_Init+0x74>)
 8004252:	2200      	movs	r2, #0
 8004254:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004256:	4b14      	ldr	r3, [pc, #80]	@ (80042a8 <MX_I2C1_Init+0x74>)
 8004258:	2200      	movs	r2, #0
 800425a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800425c:	4b12      	ldr	r3, [pc, #72]	@ (80042a8 <MX_I2C1_Init+0x74>)
 800425e:	2200      	movs	r2, #0
 8004260:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004262:	4b11      	ldr	r3, [pc, #68]	@ (80042a8 <MX_I2C1_Init+0x74>)
 8004264:	2200      	movs	r2, #0
 8004266:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004268:	4b0f      	ldr	r3, [pc, #60]	@ (80042a8 <MX_I2C1_Init+0x74>)
 800426a:	2200      	movs	r2, #0
 800426c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800426e:	480e      	ldr	r0, [pc, #56]	@ (80042a8 <MX_I2C1_Init+0x74>)
 8004270:	f003 fc41 	bl	8007af6 <HAL_I2C_Init>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800427a:	f000 fb27 	bl	80048cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800427e:	2100      	movs	r1, #0
 8004280:	4809      	ldr	r0, [pc, #36]	@ (80042a8 <MX_I2C1_Init+0x74>)
 8004282:	f003 fcd3 	bl	8007c2c <HAL_I2CEx_ConfigAnalogFilter>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800428c:	f000 fb1e 	bl	80048cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004290:	2100      	movs	r1, #0
 8004292:	4805      	ldr	r0, [pc, #20]	@ (80042a8 <MX_I2C1_Init+0x74>)
 8004294:	f003 fd15 	bl	8007cc2 <HAL_I2CEx_ConfigDigitalFilter>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800429e:	f000 fb15 	bl	80048cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80042a2:	bf00      	nop
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	2000242c 	.word	0x2000242c
 80042ac:	40005400 	.word	0x40005400
 80042b0:	10c043e5 	.word	0x10c043e5

080042b4 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80042b8:	4b07      	ldr	r3, [pc, #28]	@ (80042d8 <MX_RNG_Init+0x24>)
 80042ba:	4a08      	ldr	r2, [pc, #32]	@ (80042dc <MX_RNG_Init+0x28>)
 80042bc:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80042be:	4b06      	ldr	r3, [pc, #24]	@ (80042d8 <MX_RNG_Init+0x24>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80042c4:	4804      	ldr	r0, [pc, #16]	@ (80042d8 <MX_RNG_Init+0x24>)
 80042c6:	f00b fa1f 	bl	800f708 <HAL_RNG_Init>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d001      	beq.n	80042d4 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 80042d0:	f000 fafc 	bl	80048cc <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80042d4:	bf00      	nop
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	20002480 	.word	0x20002480
 80042dc:	420c0800 	.word	0x420c0800

080042e0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b08e      	sub	sp, #56	@ 0x38
 80042e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 80042e6:	f107 031c 	add.w	r3, r7, #28
 80042ea:	2200      	movs	r2, #0
 80042ec:	601a      	str	r2, [r3, #0]
 80042ee:	605a      	str	r2, [r3, #4]
 80042f0:	609a      	str	r2, [r3, #8]
 80042f2:	60da      	str	r2, [r3, #12]
 80042f4:	611a      	str	r2, [r3, #16]
 80042f6:	615a      	str	r2, [r3, #20]
 80042f8:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 80042fa:	f107 0308 	add.w	r3, r7, #8
 80042fe:	2200      	movs	r2, #0
 8004300:	601a      	str	r2, [r3, #0]
 8004302:	605a      	str	r2, [r3, #4]
 8004304:	609a      	str	r2, [r3, #8]
 8004306:	60da      	str	r2, [r3, #12]
 8004308:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800430a:	2300      	movs	r3, #0
 800430c:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800430e:	4b33      	ldr	r3, [pc, #204]	@ (80043dc <MX_RTC_Init+0xfc>)
 8004310:	4a33      	ldr	r2, [pc, #204]	@ (80043e0 <MX_RTC_Init+0x100>)
 8004312:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004314:	4b31      	ldr	r3, [pc, #196]	@ (80043dc <MX_RTC_Init+0xfc>)
 8004316:	2200      	movs	r2, #0
 8004318:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800431a:	4b30      	ldr	r3, [pc, #192]	@ (80043dc <MX_RTC_Init+0xfc>)
 800431c:	227f      	movs	r2, #127	@ 0x7f
 800431e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004320:	4b2e      	ldr	r3, [pc, #184]	@ (80043dc <MX_RTC_Init+0xfc>)
 8004322:	22ff      	movs	r2, #255	@ 0xff
 8004324:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004326:	4b2d      	ldr	r3, [pc, #180]	@ (80043dc <MX_RTC_Init+0xfc>)
 8004328:	2200      	movs	r2, #0
 800432a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800432c:	4b2b      	ldr	r3, [pc, #172]	@ (80043dc <MX_RTC_Init+0xfc>)
 800432e:	2200      	movs	r2, #0
 8004330:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004332:	4b2a      	ldr	r3, [pc, #168]	@ (80043dc <MX_RTC_Init+0xfc>)
 8004334:	2200      	movs	r2, #0
 8004336:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004338:	4b28      	ldr	r3, [pc, #160]	@ (80043dc <MX_RTC_Init+0xfc>)
 800433a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800433e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8004340:	4b26      	ldr	r3, [pc, #152]	@ (80043dc <MX_RTC_Init+0xfc>)
 8004342:	2200      	movs	r2, #0
 8004344:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8004346:	4b25      	ldr	r3, [pc, #148]	@ (80043dc <MX_RTC_Init+0xfc>)
 8004348:	2200      	movs	r2, #0
 800434a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800434c:	4823      	ldr	r0, [pc, #140]	@ (80043dc <MX_RTC_Init+0xfc>)
 800434e:	f00b fbe3 	bl	800fb18 <HAL_RTC_Init>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d001      	beq.n	800435c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8004358:	f000 fab8 	bl	80048cc <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 800435c:	2300      	movs	r3, #0
 800435e:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8004360:	2300      	movs	r3, #0
 8004362:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8004364:	2300      	movs	r3, #0
 8004366:	62fb      	str	r3, [r7, #44]	@ 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8004368:	2300      	movs	r3, #0
 800436a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 800436c:	f107 031c 	add.w	r3, r7, #28
 8004370:	4619      	mov	r1, r3
 8004372:	481a      	ldr	r0, [pc, #104]	@ (80043dc <MX_RTC_Init+0xfc>)
 8004374:	f00b fe36 	bl	800ffe4 <HAL_RTCEx_PrivilegeModeSet>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800437e:	f000 faa5 	bl	80048cc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8004382:	2300      	movs	r3, #0
 8004384:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 8004386:	2300      	movs	r3, #0
 8004388:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 800438a:	2300      	movs	r3, #0
 800438c:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800438e:	2300      	movs	r3, #0
 8004390:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004392:	2300      	movs	r3, #0
 8004394:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004396:	f107 0308 	add.w	r3, r7, #8
 800439a:	2201      	movs	r2, #1
 800439c:	4619      	mov	r1, r3
 800439e:	480f      	ldr	r0, [pc, #60]	@ (80043dc <MX_RTC_Init+0xfc>)
 80043a0:	f00b fc3c 	bl	800fc1c <HAL_RTC_SetTime>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <MX_RTC_Init+0xce>
  {
    Error_Handler();
 80043aa:	f000 fa8f 	bl	80048cc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80043ae:	2301      	movs	r3, #1
 80043b0:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 80043b2:	2301      	movs	r3, #1
 80043b4:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 80043b6:	2301      	movs	r3, #1
 80043b8:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 80043ba:	2300      	movs	r3, #0
 80043bc:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80043be:	1d3b      	adds	r3, r7, #4
 80043c0:	2201      	movs	r2, #1
 80043c2:	4619      	mov	r1, r3
 80043c4:	4805      	ldr	r0, [pc, #20]	@ (80043dc <MX_RTC_Init+0xfc>)
 80043c6:	f00b fcbb 	bl	800fd40 <HAL_RTC_SetDate>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d001      	beq.n	80043d4 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 80043d0:	f000 fa7c 	bl	80048cc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80043d4:	bf00      	nop
 80043d6:	3738      	adds	r7, #56	@ 0x38
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	20002494 	.word	0x20002494
 80043e0:	44007800 	.word	0x44007800

080043e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80043e8:	4b27      	ldr	r3, [pc, #156]	@ (8004488 <MX_SPI1_Init+0xa4>)
 80043ea:	4a28      	ldr	r2, [pc, #160]	@ (800448c <MX_SPI1_Init+0xa8>)
 80043ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80043ee:	4b26      	ldr	r3, [pc, #152]	@ (8004488 <MX_SPI1_Init+0xa4>)
 80043f0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80043f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80043f6:	4b24      	ldr	r3, [pc, #144]	@ (8004488 <MX_SPI1_Init+0xa4>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80043fc:	4b22      	ldr	r3, [pc, #136]	@ (8004488 <MX_SPI1_Init+0xa4>)
 80043fe:	2207      	movs	r2, #7
 8004400:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004402:	4b21      	ldr	r3, [pc, #132]	@ (8004488 <MX_SPI1_Init+0xa4>)
 8004404:	2200      	movs	r2, #0
 8004406:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004408:	4b1f      	ldr	r3, [pc, #124]	@ (8004488 <MX_SPI1_Init+0xa4>)
 800440a:	2200      	movs	r2, #0
 800440c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800440e:	4b1e      	ldr	r3, [pc, #120]	@ (8004488 <MX_SPI1_Init+0xa4>)
 8004410:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004414:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8004416:	4b1c      	ldr	r3, [pc, #112]	@ (8004488 <MX_SPI1_Init+0xa4>)
 8004418:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 800441c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800441e:	4b1a      	ldr	r3, [pc, #104]	@ (8004488 <MX_SPI1_Init+0xa4>)
 8004420:	2200      	movs	r2, #0
 8004422:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004424:	4b18      	ldr	r3, [pc, #96]	@ (8004488 <MX_SPI1_Init+0xa4>)
 8004426:	2200      	movs	r2, #0
 8004428:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800442a:	4b17      	ldr	r3, [pc, #92]	@ (8004488 <MX_SPI1_Init+0xa4>)
 800442c:	2200      	movs	r2, #0
 800442e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8004430:	4b15      	ldr	r3, [pc, #84]	@ (8004488 <MX_SPI1_Init+0xa4>)
 8004432:	2207      	movs	r2, #7
 8004434:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004436:	4b14      	ldr	r3, [pc, #80]	@ (8004488 <MX_SPI1_Init+0xa4>)
 8004438:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800443c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800443e:	4b12      	ldr	r3, [pc, #72]	@ (8004488 <MX_SPI1_Init+0xa4>)
 8004440:	2200      	movs	r2, #0
 8004442:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004444:	4b10      	ldr	r3, [pc, #64]	@ (8004488 <MX_SPI1_Init+0xa4>)
 8004446:	2200      	movs	r2, #0
 8004448:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800444a:	4b0f      	ldr	r3, [pc, #60]	@ (8004488 <MX_SPI1_Init+0xa4>)
 800444c:	2200      	movs	r2, #0
 800444e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004450:	4b0d      	ldr	r3, [pc, #52]	@ (8004488 <MX_SPI1_Init+0xa4>)
 8004452:	2200      	movs	r2, #0
 8004454:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004456:	4b0c      	ldr	r3, [pc, #48]	@ (8004488 <MX_SPI1_Init+0xa4>)
 8004458:	2200      	movs	r2, #0
 800445a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800445c:	4b0a      	ldr	r3, [pc, #40]	@ (8004488 <MX_SPI1_Init+0xa4>)
 800445e:	2200      	movs	r2, #0
 8004460:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004462:	4b09      	ldr	r3, [pc, #36]	@ (8004488 <MX_SPI1_Init+0xa4>)
 8004464:	2200      	movs	r2, #0
 8004466:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8004468:	4b07      	ldr	r3, [pc, #28]	@ (8004488 <MX_SPI1_Init+0xa4>)
 800446a:	2200      	movs	r2, #0
 800446c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800446e:	4b06      	ldr	r3, [pc, #24]	@ (8004488 <MX_SPI1_Init+0xa4>)
 8004470:	2200      	movs	r2, #0
 8004472:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004474:	4804      	ldr	r0, [pc, #16]	@ (8004488 <MX_SPI1_Init+0xa4>)
 8004476:	f00b fde3 	bl	8010040 <HAL_SPI_Init>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8004480:	f000 fa24 	bl	80048cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004484:	bf00      	nop
 8004486:	bd80      	pop	{r7, pc}
 8004488:	200024c4 	.word	0x200024c4
 800448c:	40013000 	.word	0x40013000

08004490 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004494:	4b22      	ldr	r3, [pc, #136]	@ (8004520 <MX_USART2_UART_Init+0x90>)
 8004496:	4a23      	ldr	r2, [pc, #140]	@ (8004524 <MX_USART2_UART_Init+0x94>)
 8004498:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800449a:	4b21      	ldr	r3, [pc, #132]	@ (8004520 <MX_USART2_UART_Init+0x90>)
 800449c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80044a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80044a2:	4b1f      	ldr	r3, [pc, #124]	@ (8004520 <MX_USART2_UART_Init+0x90>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80044a8:	4b1d      	ldr	r3, [pc, #116]	@ (8004520 <MX_USART2_UART_Init+0x90>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80044ae:	4b1c      	ldr	r3, [pc, #112]	@ (8004520 <MX_USART2_UART_Init+0x90>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80044b4:	4b1a      	ldr	r3, [pc, #104]	@ (8004520 <MX_USART2_UART_Init+0x90>)
 80044b6:	220c      	movs	r2, #12
 80044b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80044ba:	4b19      	ldr	r3, [pc, #100]	@ (8004520 <MX_USART2_UART_Init+0x90>)
 80044bc:	2200      	movs	r2, #0
 80044be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80044c0:	4b17      	ldr	r3, [pc, #92]	@ (8004520 <MX_USART2_UART_Init+0x90>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80044c6:	4b16      	ldr	r3, [pc, #88]	@ (8004520 <MX_USART2_UART_Init+0x90>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80044cc:	4b14      	ldr	r3, [pc, #80]	@ (8004520 <MX_USART2_UART_Init+0x90>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80044d2:	4b13      	ldr	r3, [pc, #76]	@ (8004520 <MX_USART2_UART_Init+0x90>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80044d8:	4811      	ldr	r0, [pc, #68]	@ (8004520 <MX_USART2_UART_Init+0x90>)
 80044da:	f00c fd00 	bl	8010ede <HAL_UART_Init>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80044e4:	f000 f9f2 	bl	80048cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80044e8:	2100      	movs	r1, #0
 80044ea:	480d      	ldr	r0, [pc, #52]	@ (8004520 <MX_USART2_UART_Init+0x90>)
 80044ec:	f00d fa2c 	bl	8011948 <HAL_UARTEx_SetTxFifoThreshold>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80044f6:	f000 f9e9 	bl	80048cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80044fa:	2100      	movs	r1, #0
 80044fc:	4808      	ldr	r0, [pc, #32]	@ (8004520 <MX_USART2_UART_Init+0x90>)
 80044fe:	f00d fa61 	bl	80119c4 <HAL_UARTEx_SetRxFifoThreshold>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d001      	beq.n	800450c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8004508:	f000 f9e0 	bl	80048cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800450c:	4804      	ldr	r0, [pc, #16]	@ (8004520 <MX_USART2_UART_Init+0x90>)
 800450e:	f00d f9e2 	bl	80118d6 <HAL_UARTEx_DisableFifoMode>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d001      	beq.n	800451c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8004518:	f000 f9d8 	bl	80048cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800451c:	bf00      	nop
 800451e:	bd80      	pop	{r7, pc}
 8004520:	20002554 	.word	0x20002554
 8004524:	40004400 	.word	0x40004400

08004528 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800452c:	4b22      	ldr	r3, [pc, #136]	@ (80045b8 <MX_USART6_UART_Init+0x90>)
 800452e:	4a23      	ldr	r2, [pc, #140]	@ (80045bc <MX_USART6_UART_Init+0x94>)
 8004530:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004532:	4b21      	ldr	r3, [pc, #132]	@ (80045b8 <MX_USART6_UART_Init+0x90>)
 8004534:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004538:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800453a:	4b1f      	ldr	r3, [pc, #124]	@ (80045b8 <MX_USART6_UART_Init+0x90>)
 800453c:	2200      	movs	r2, #0
 800453e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004540:	4b1d      	ldr	r3, [pc, #116]	@ (80045b8 <MX_USART6_UART_Init+0x90>)
 8004542:	2200      	movs	r2, #0
 8004544:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004546:	4b1c      	ldr	r3, [pc, #112]	@ (80045b8 <MX_USART6_UART_Init+0x90>)
 8004548:	2200      	movs	r2, #0
 800454a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800454c:	4b1a      	ldr	r3, [pc, #104]	@ (80045b8 <MX_USART6_UART_Init+0x90>)
 800454e:	220c      	movs	r2, #12
 8004550:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004552:	4b19      	ldr	r3, [pc, #100]	@ (80045b8 <MX_USART6_UART_Init+0x90>)
 8004554:	2200      	movs	r2, #0
 8004556:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004558:	4b17      	ldr	r3, [pc, #92]	@ (80045b8 <MX_USART6_UART_Init+0x90>)
 800455a:	2200      	movs	r2, #0
 800455c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800455e:	4b16      	ldr	r3, [pc, #88]	@ (80045b8 <MX_USART6_UART_Init+0x90>)
 8004560:	2200      	movs	r2, #0
 8004562:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004564:	4b14      	ldr	r3, [pc, #80]	@ (80045b8 <MX_USART6_UART_Init+0x90>)
 8004566:	2200      	movs	r2, #0
 8004568:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800456a:	4b13      	ldr	r3, [pc, #76]	@ (80045b8 <MX_USART6_UART_Init+0x90>)
 800456c:	2200      	movs	r2, #0
 800456e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004570:	4811      	ldr	r0, [pc, #68]	@ (80045b8 <MX_USART6_UART_Init+0x90>)
 8004572:	f00c fcb4 	bl	8010ede <HAL_UART_Init>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 800457c:	f000 f9a6 	bl	80048cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004580:	2100      	movs	r1, #0
 8004582:	480d      	ldr	r0, [pc, #52]	@ (80045b8 <MX_USART6_UART_Init+0x90>)
 8004584:	f00d f9e0 	bl	8011948 <HAL_UARTEx_SetTxFifoThreshold>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 800458e:	f000 f99d 	bl	80048cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004592:	2100      	movs	r1, #0
 8004594:	4808      	ldr	r0, [pc, #32]	@ (80045b8 <MX_USART6_UART_Init+0x90>)
 8004596:	f00d fa15 	bl	80119c4 <HAL_UARTEx_SetRxFifoThreshold>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d001      	beq.n	80045a4 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80045a0:	f000 f994 	bl	80048cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80045a4:	4804      	ldr	r0, [pc, #16]	@ (80045b8 <MX_USART6_UART_Init+0x90>)
 80045a6:	f00d f996 	bl	80118d6 <HAL_UARTEx_DisableFifoMode>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d001      	beq.n	80045b4 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80045b0:	f000 f98c 	bl	80048cc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80045b4:	bf00      	nop
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	200025e8 	.word	0x200025e8
 80045bc:	40006400 	.word	0x40006400

080045c0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USB_Init 0 */
  hpcd_USB_DRD_FS.pData = &hUsbDeviceFS;
 80045c4:	4b29      	ldr	r3, [pc, #164]	@ (800466c <MX_USB_PCD_Init+0xac>)
 80045c6:	4a2a      	ldr	r2, [pc, #168]	@ (8004670 <MX_USB_PCD_Init+0xb0>)
 80045c8:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 80045cc:	4b27      	ldr	r3, [pc, #156]	@ (800466c <MX_USB_PCD_Init+0xac>)
 80045ce:	4a29      	ldr	r2, [pc, #164]	@ (8004674 <MX_USB_PCD_Init+0xb4>)
 80045d0:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 80045d2:	4b26      	ldr	r3, [pc, #152]	@ (800466c <MX_USB_PCD_Init+0xac>)
 80045d4:	2208      	movs	r2, #8
 80045d6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 80045d8:	4b24      	ldr	r3, [pc, #144]	@ (800466c <MX_USB_PCD_Init+0xac>)
 80045da:	2202      	movs	r2, #2
 80045dc:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80045de:	4b23      	ldr	r3, [pc, #140]	@ (800466c <MX_USB_PCD_Init+0xac>)
 80045e0:	2202      	movs	r2, #2
 80045e2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 80045e4:	4b21      	ldr	r3, [pc, #132]	@ (800466c <MX_USB_PCD_Init+0xac>)
 80045e6:	2200      	movs	r2, #0
 80045e8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 80045ea:	4b20      	ldr	r3, [pc, #128]	@ (800466c <MX_USB_PCD_Init+0xac>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 80045f0:	4b1e      	ldr	r3, [pc, #120]	@ (800466c <MX_USB_PCD_Init+0xac>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 80045f6:	4b1d      	ldr	r3, [pc, #116]	@ (800466c <MX_USB_PCD_Init+0xac>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 80045fc:	4b1b      	ldr	r3, [pc, #108]	@ (800466c <MX_USB_PCD_Init+0xac>)
 80045fe:	2200      	movs	r2, #0
 8004600:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8004602:	4b1a      	ldr	r3, [pc, #104]	@ (800466c <MX_USB_PCD_Init+0xac>)
 8004604:	2200      	movs	r2, #0
 8004606:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8004608:	4b18      	ldr	r3, [pc, #96]	@ (800466c <MX_USB_PCD_Init+0xac>)
 800460a:	2200      	movs	r2, #0
 800460c:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 800460e:	4817      	ldr	r0, [pc, #92]	@ (800466c <MX_USB_PCD_Init+0xac>)
 8004610:	f003 fc06 	bl	8007e20 <HAL_PCD_Init>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <MX_USB_PCD_Init+0x5e>
  {
    Error_Handler();
 800461a:	f000 f957 	bl	80048cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */
  if(USBD_Init(&hUsbDeviceFS, &Class_Desc, 0) != USBD_OK)
 800461e:	2200      	movs	r2, #0
 8004620:	4915      	ldr	r1, [pc, #84]	@ (8004678 <MX_USB_PCD_Init+0xb8>)
 8004622:	4813      	ldr	r0, [pc, #76]	@ (8004670 <MX_USB_PCD_Init+0xb0>)
 8004624:	f010 fb76 	bl	8014d14 <USBD_Init>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d001      	beq.n	8004632 <MX_USB_PCD_Init+0x72>
        Error_Handler();
 800462e:	f000 f94d 	bl	80048cc <Error_Handler>

  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8004632:	4912      	ldr	r1, [pc, #72]	@ (800467c <MX_USB_PCD_Init+0xbc>)
 8004634:	480e      	ldr	r0, [pc, #56]	@ (8004670 <MX_USB_PCD_Init+0xb0>)
 8004636:	f010 fb9d 	bl	8014d74 <USBD_RegisterClass>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d001      	beq.n	8004644 <MX_USB_PCD_Init+0x84>
        Error_Handler();
 8004640:	f000 f944 	bl	80048cc <Error_Handler>

  if(USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_CDC_Template_fops) != USBD_OK)
 8004644:	490e      	ldr	r1, [pc, #56]	@ (8004680 <MX_USB_PCD_Init+0xc0>)
 8004646:	480a      	ldr	r0, [pc, #40]	@ (8004670 <MX_USB_PCD_Init+0xb0>)
 8004648:	f00f fe1c 	bl	8014284 <USBD_CDC_RegisterInterface>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <MX_USB_PCD_Init+0x96>
        Error_Handler();
 8004652:	f000 f93b 	bl	80048cc <Error_Handler>

  if(USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8004656:	4806      	ldr	r0, [pc, #24]	@ (8004670 <MX_USB_PCD_Init+0xb0>)
 8004658:	f010 fbc2 	bl	8014de0 <USBD_Start>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <MX_USB_PCD_Init+0xa6>
        Error_Handler();
 8004662:	f000 f933 	bl	80048cc <Error_Handler>
  /* USER CODE END USB_Init 2 */

}
 8004666:	bf00      	nop
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	2000267c 	.word	0x2000267c
 8004670:	20002960 	.word	0x20002960
 8004674:	40016000 	.word	0x40016000
 8004678:	200000f0 	.word	0x200000f0
 800467c:	20000054 	.word	0x20000054
 8004680:	200000d4 	.word	0x200000d4

08004684 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b08c      	sub	sp, #48	@ 0x30
 8004688:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800468a:	f107 031c 	add.w	r3, r7, #28
 800468e:	2200      	movs	r2, #0
 8004690:	601a      	str	r2, [r3, #0]
 8004692:	605a      	str	r2, [r3, #4]
 8004694:	609a      	str	r2, [r3, #8]
 8004696:	60da      	str	r2, [r3, #12]
 8004698:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800469a:	4b85      	ldr	r3, [pc, #532]	@ (80048b0 <MX_GPIO_Init+0x22c>)
 800469c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046a0:	4a83      	ldr	r2, [pc, #524]	@ (80048b0 <MX_GPIO_Init+0x22c>)
 80046a2:	f043 0310 	orr.w	r3, r3, #16
 80046a6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80046aa:	4b81      	ldr	r3, [pc, #516]	@ (80048b0 <MX_GPIO_Init+0x22c>)
 80046ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046b0:	f003 0310 	and.w	r3, r3, #16
 80046b4:	61bb      	str	r3, [r7, #24]
 80046b6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80046b8:	4b7d      	ldr	r3, [pc, #500]	@ (80048b0 <MX_GPIO_Init+0x22c>)
 80046ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046be:	4a7c      	ldr	r2, [pc, #496]	@ (80048b0 <MX_GPIO_Init+0x22c>)
 80046c0:	f043 0304 	orr.w	r3, r3, #4
 80046c4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80046c8:	4b79      	ldr	r3, [pc, #484]	@ (80048b0 <MX_GPIO_Init+0x22c>)
 80046ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046ce:	f003 0304 	and.w	r3, r3, #4
 80046d2:	617b      	str	r3, [r7, #20]
 80046d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80046d6:	4b76      	ldr	r3, [pc, #472]	@ (80048b0 <MX_GPIO_Init+0x22c>)
 80046d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046dc:	4a74      	ldr	r2, [pc, #464]	@ (80048b0 <MX_GPIO_Init+0x22c>)
 80046de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046e2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80046e6:	4b72      	ldr	r3, [pc, #456]	@ (80048b0 <MX_GPIO_Init+0x22c>)
 80046e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046f0:	613b      	str	r3, [r7, #16]
 80046f2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80046f4:	4b6e      	ldr	r3, [pc, #440]	@ (80048b0 <MX_GPIO_Init+0x22c>)
 80046f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046fa:	4a6d      	ldr	r2, [pc, #436]	@ (80048b0 <MX_GPIO_Init+0x22c>)
 80046fc:	f043 0301 	orr.w	r3, r3, #1
 8004700:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004704:	4b6a      	ldr	r3, [pc, #424]	@ (80048b0 <MX_GPIO_Init+0x22c>)
 8004706:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	60fb      	str	r3, [r7, #12]
 8004710:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004712:	4b67      	ldr	r3, [pc, #412]	@ (80048b0 <MX_GPIO_Init+0x22c>)
 8004714:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004718:	4a65      	ldr	r2, [pc, #404]	@ (80048b0 <MX_GPIO_Init+0x22c>)
 800471a:	f043 0302 	orr.w	r3, r3, #2
 800471e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004722:	4b63      	ldr	r3, [pc, #396]	@ (80048b0 <MX_GPIO_Init+0x22c>)
 8004724:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	60bb      	str	r3, [r7, #8]
 800472e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004730:	4b5f      	ldr	r3, [pc, #380]	@ (80048b0 <MX_GPIO_Init+0x22c>)
 8004732:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004736:	4a5e      	ldr	r2, [pc, #376]	@ (80048b0 <MX_GPIO_Init+0x22c>)
 8004738:	f043 0308 	orr.w	r3, r3, #8
 800473c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004740:	4b5b      	ldr	r3, [pc, #364]	@ (80048b0 <MX_GPIO_Init+0x22c>)
 8004742:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004746:	f003 0308 	and.w	r3, r3, #8
 800474a:	607b      	str	r3, [r7, #4]
 800474c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800474e:	4b58      	ldr	r3, [pc, #352]	@ (80048b0 <MX_GPIO_Init+0x22c>)
 8004750:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004754:	4a56      	ldr	r2, [pc, #344]	@ (80048b0 <MX_GPIO_Init+0x22c>)
 8004756:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800475a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800475e:	4b54      	ldr	r3, [pc, #336]	@ (80048b0 <MX_GPIO_Init+0x22c>)
 8004760:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004764:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004768:	603b      	str	r3, [r7, #0]
 800476a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800476c:	2200      	movs	r2, #0
 800476e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004772:	4850      	ldr	r0, [pc, #320]	@ (80048b4 <MX_GPIO_Init+0x230>)
 8004774:	f001 ffde 	bl	8006734 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004778:	2332      	movs	r3, #50	@ 0x32
 800477a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800477c:	2302      	movs	r3, #2
 800477e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004780:	2300      	movs	r3, #0
 8004782:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004784:	2302      	movs	r3, #2
 8004786:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004788:	230b      	movs	r3, #11
 800478a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800478c:	f107 031c 	add.w	r3, r7, #28
 8004790:	4619      	mov	r1, r3
 8004792:	4849      	ldr	r0, [pc, #292]	@ (80048b8 <MX_GPIO_Init+0x234>)
 8004794:	f001 fe7c 	bl	8006490 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004798:	2384      	movs	r3, #132	@ 0x84
 800479a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800479c:	2302      	movs	r3, #2
 800479e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a0:	2300      	movs	r3, #0
 80047a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047a4:	2302      	movs	r3, #2
 80047a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80047a8:	230b      	movs	r3, #11
 80047aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047ac:	f107 031c 	add.w	r3, r7, #28
 80047b0:	4619      	mov	r1, r3
 80047b2:	4842      	ldr	r0, [pc, #264]	@ (80048bc <MX_GPIO_Init+0x238>)
 80047b4:	f001 fe6c 	bl	8006490 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 80047b8:	2310      	movs	r3, #16
 80047ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047bc:	2303      	movs	r3, #3
 80047be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c0:	2300      	movs	r3, #0
 80047c2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 80047c4:	f107 031c 	add.w	r3, r7, #28
 80047c8:	4619      	mov	r1, r3
 80047ca:	483c      	ldr	r0, [pc, #240]	@ (80048bc <MX_GPIO_Init+0x238>)
 80047cc:	f001 fe60 	bl	8006490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80047d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80047d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047d6:	2302      	movs	r3, #2
 80047d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047da:	2300      	movs	r3, #0
 80047dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047de:	2300      	movs	r3, #0
 80047e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80047e2:	2307      	movs	r3, #7
 80047e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047e6:	f107 031c 	add.w	r3, r7, #28
 80047ea:	4619      	mov	r1, r3
 80047ec:	4834      	ldr	r0, [pc, #208]	@ (80048c0 <MX_GPIO_Init+0x23c>)
 80047ee:	f001 fe4f 	bl	8006490 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_CC1_Pin UCPD_CC2_Pin */
  GPIO_InitStruct.Pin = UCPD_CC1_Pin|UCPD_CC2_Pin;
 80047f2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80047f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047f8:	2303      	movs	r3, #3
 80047fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047fc:	2300      	movs	r3, #0
 80047fe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004800:	f107 031c 	add.w	r3, r7, #28
 8004804:	4619      	mov	r1, r3
 8004806:	482e      	ldr	r0, [pc, #184]	@ (80048c0 <MX_GPIO_Init+0x23c>)
 8004808:	f001 fe42 	bl	8006490 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800480c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004812:	2302      	movs	r3, #2
 8004814:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004816:	2300      	movs	r3, #0
 8004818:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800481a:	2302      	movs	r3, #2
 800481c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800481e:	230b      	movs	r3, #11
 8004820:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004822:	f107 031c 	add.w	r3, r7, #28
 8004826:	4619      	mov	r1, r3
 8004828:	4825      	ldr	r0, [pc, #148]	@ (80048c0 <MX_GPIO_Init+0x23c>)
 800482a:	f001 fe31 	bl	8006490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800482e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004834:	2301      	movs	r3, #1
 8004836:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004838:	2300      	movs	r3, #0
 800483a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800483c:	2300      	movs	r3, #0
 800483e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004840:	f107 031c 	add.w	r3, r7, #28
 8004844:	4619      	mov	r1, r3
 8004846:	481b      	ldr	r0, [pc, #108]	@ (80048b4 <MX_GPIO_Init+0x230>)
 8004848:	f001 fe22 	bl	8006490 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 800484c:	2380      	movs	r3, #128	@ 0x80
 800484e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004850:	4b1c      	ldr	r3, [pc, #112]	@ (80048c4 <MX_GPIO_Init+0x240>)
 8004852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004854:	2300      	movs	r3, #0
 8004856:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8004858:	f107 031c 	add.w	r3, r7, #28
 800485c:	4619      	mov	r1, r3
 800485e:	481a      	ldr	r0, [pc, #104]	@ (80048c8 <MX_GPIO_Init+0x244>)
 8004860:	f001 fe16 	bl	8006490 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXT_EN_Pin RMI_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TXT_EN_Pin|RMI_TXD0_Pin;
 8004864:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8004868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800486a:	2302      	movs	r3, #2
 800486c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800486e:	2300      	movs	r3, #0
 8004870:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004872:	2302      	movs	r3, #2
 8004874:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004876:	230b      	movs	r3, #11
 8004878:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800487a:	f107 031c 	add.w	r3, r7, #28
 800487e:	4619      	mov	r1, r3
 8004880:	4811      	ldr	r0, [pc, #68]	@ (80048c8 <MX_GPIO_Init+0x244>)
 8004882:	f001 fe05 	bl	8006490 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_TX_Pin ARD_D0_RX_Pin */
  GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 8004886:	23c0      	movs	r3, #192	@ 0xc0
 8004888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800488a:	2302      	movs	r3, #2
 800488c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800488e:	2300      	movs	r3, #0
 8004890:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004892:	2300      	movs	r3, #0
 8004894:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8004896:	2308      	movs	r3, #8
 8004898:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800489a:	f107 031c 	add.w	r3, r7, #28
 800489e:	4619      	mov	r1, r3
 80048a0:	4807      	ldr	r0, [pc, #28]	@ (80048c0 <MX_GPIO_Init+0x23c>)
 80048a2:	f001 fdf5 	bl	8006490 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80048a6:	bf00      	nop
 80048a8:	3730      	adds	r7, #48	@ 0x30
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	44020c00 	.word	0x44020c00
 80048b4:	42020c00 	.word	0x42020c00
 80048b8:	42020800 	.word	0x42020800
 80048bc:	42020000 	.word	0x42020000
 80048c0:	42020400 	.word	0x42020400
 80048c4:	10110000 	.word	0x10110000
 80048c8:	42021800 	.word	0x42021800

080048cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80048cc:	b480      	push	{r7}
 80048ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80048d0:	b672      	cpsid	i
}
 80048d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80048d4:	bf00      	nop
 80048d6:	e7fd      	b.n	80048d4 <Error_Handler+0x8>

080048d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80048d8:	b480      	push	{r7}
 80048da:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048dc:	bf00      	nop
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
	...

080048e8 <HAL_HASH_MspInit>:
* This function configures the hardware resources used in this example
* @param hhash: HASH handle pointer
* @retval None
*/
void HAL_HASH_MspInit(HASH_HandleTypeDef* hhash)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HASH_MspInit 0 */

  /* USER CODE END HASH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HASH_CLK_ENABLE();
 80048f0:	4b0d      	ldr	r3, [pc, #52]	@ (8004928 <HAL_HASH_MspInit+0x40>)
 80048f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048f6:	4a0c      	ldr	r2, [pc, #48]	@ (8004928 <HAL_HASH_MspInit+0x40>)
 80048f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048fc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004900:	4b09      	ldr	r3, [pc, #36]	@ (8004928 <HAL_HASH_MspInit+0x40>)
 8004902:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800490a:	60fb      	str	r3, [r7, #12]
 800490c:	68fb      	ldr	r3, [r7, #12]
    /* HASH interrupt Init */
    HAL_NVIC_SetPriority(HASH_IRQn, 0, 0);
 800490e:	2200      	movs	r2, #0
 8004910:	2100      	movs	r1, #0
 8004912:	2075      	movs	r0, #117	@ 0x75
 8004914:	f001 f986 	bl	8005c24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_IRQn);
 8004918:	2075      	movs	r0, #117	@ 0x75
 800491a:	f001 f99d 	bl	8005c58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HASH_MspInit 1 */

  /* USER CODE END HASH_MspInit 1 */

}
 800491e:	bf00      	nop
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	44020c00 	.word	0x44020c00

0800492c <HAL_HASH_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hhash: HASH handle pointer
* @retval None
*/
void HAL_HASH_MspDeInit(HASH_HandleTypeDef* hhash)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HASH_MspDeInit 0 */

  /* USER CODE END HASH_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_HASH_CLK_DISABLE();
 8004934:	4b07      	ldr	r3, [pc, #28]	@ (8004954 <HAL_HASH_MspDeInit+0x28>)
 8004936:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800493a:	4a06      	ldr	r2, [pc, #24]	@ (8004954 <HAL_HASH_MspDeInit+0x28>)
 800493c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004940:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

    /* HASH interrupt DeInit */
    HAL_NVIC_DisableIRQ(HASH_IRQn);
 8004944:	2075      	movs	r0, #117	@ 0x75
 8004946:	f001 f995 	bl	8005c74 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN HASH_MspDeInit 1 */

  /* USER CODE END HASH_MspDeInit 1 */

}
 800494a:	bf00      	nop
 800494c:	3708      	adds	r7, #8
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	44020c00 	.word	0x44020c00

08004958 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b0cc      	sub	sp, #304	@ 0x130
 800495c:	af00      	add	r7, sp, #0
 800495e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004962:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004966:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004968:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 800496c:	2200      	movs	r2, #0
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	605a      	str	r2, [r3, #4]
 8004972:	609a      	str	r2, [r3, #8]
 8004974:	60da      	str	r2, [r3, #12]
 8004976:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004978:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800497c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004980:	4618      	mov	r0, r3
 8004982:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8004986:	461a      	mov	r2, r3
 8004988:	2100      	movs	r1, #0
 800498a:	f011 ff73 	bl	8016874 <memset>
  if(hi2c->Instance==I2C1)
 800498e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004992:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a33      	ldr	r2, [pc, #204]	@ (8004a68 <HAL_I2C_MspInit+0x110>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d15e      	bne.n	8004a5e <HAL_I2C_MspInit+0x106>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80049a0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80049a4:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80049a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80049ac:	f04f 0300 	mov.w	r3, #0
 80049b0:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80049b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80049b8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80049bc:	2200      	movs	r2, #0
 80049be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80049c2:	f107 0310 	add.w	r3, r7, #16
 80049c6:	4618      	mov	r0, r3
 80049c8:	f005 fe46 	bl	800a658 <HAL_RCCEx_PeriphCLKConfig>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d001      	beq.n	80049d6 <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 80049d2:	f7ff ff7b 	bl	80048cc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049d6:	4b25      	ldr	r3, [pc, #148]	@ (8004a6c <HAL_I2C_MspInit+0x114>)
 80049d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049dc:	4a23      	ldr	r2, [pc, #140]	@ (8004a6c <HAL_I2C_MspInit+0x114>)
 80049de:	f043 0302 	orr.w	r3, r3, #2
 80049e2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80049e6:	4b21      	ldr	r3, [pc, #132]	@ (8004a6c <HAL_I2C_MspInit+0x114>)
 80049e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049ec:	f003 0202 	and.w	r2, r3, #2
 80049f0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80049f4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80049fe:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004a02:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004a04:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004a08:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a0c:	2312      	movs	r3, #18
 8004a0e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a12:	2300      	movs	r3, #0
 8004a14:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004a1e:	2304      	movs	r3, #4
 8004a20:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a24:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8004a28:	4619      	mov	r1, r3
 8004a2a:	4811      	ldr	r0, [pc, #68]	@ (8004a70 <HAL_I2C_MspInit+0x118>)
 8004a2c:	f001 fd30 	bl	8006490 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004a30:	4b0e      	ldr	r3, [pc, #56]	@ (8004a6c <HAL_I2C_MspInit+0x114>)
 8004a32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a36:	4a0d      	ldr	r2, [pc, #52]	@ (8004a6c <HAL_I2C_MspInit+0x114>)
 8004a38:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004a3c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004a40:	4b0a      	ldr	r3, [pc, #40]	@ (8004a6c <HAL_I2C_MspInit+0x114>)
 8004a42:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a46:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8004a4a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004a4e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004a52:	601a      	str	r2, [r3, #0]
 8004a54:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004a58:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004a5c:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8004a5e:	bf00      	nop
 8004a60:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	40005400 	.word	0x40005400
 8004a6c:	44020c00 	.word	0x44020c00
 8004a70:	42020400 	.word	0x42020400

08004a74 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b0c6      	sub	sp, #280	@ 0x118
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004a7e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004a82:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004a84:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004a88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8004a92:	461a      	mov	r2, r3
 8004a94:	2100      	movs	r1, #0
 8004a96:	f011 feed 	bl	8016874 <memset>
  if(hrng->Instance==RNG)
 8004a9a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004a9e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a1d      	ldr	r2, [pc, #116]	@ (8004b1c <HAL_RNG_MspInit+0xa8>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d131      	bne.n	8004b10 <HAL_RNG_MspInit+0x9c>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8004aac:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004ab0:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8004ab4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004ab8:	f04f 0300 	mov.w	r3, #0
 8004abc:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8004ac0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004ac4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004ace:	f107 0310 	add.w	r3, r7, #16
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f005 fdc0 	bl	800a658 <HAL_RCCEx_PeriphCLKConfig>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <HAL_RNG_MspInit+0x6e>
    {
      Error_Handler();
 8004ade:	f7ff fef5 	bl	80048cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8004ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8004b20 <HAL_RNG_MspInit+0xac>)
 8004ae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ae8:	4a0d      	ldr	r2, [pc, #52]	@ (8004b20 <HAL_RNG_MspInit+0xac>)
 8004aea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004aee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004af2:	4b0b      	ldr	r3, [pc, #44]	@ (8004b20 <HAL_RNG_MspInit+0xac>)
 8004af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004af8:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 8004afc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004b00:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004b0a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004b0e:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8004b10:	bf00      	nop
 8004b12:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	420c0800 	.word	0x420c0800
 8004b20:	44020c00 	.word	0x44020c00

08004b24 <HAL_RNG_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspDeInit(RNG_HandleTypeDef* hrng)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a08      	ldr	r2, [pc, #32]	@ (8004b54 <HAL_RNG_MspDeInit+0x30>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d107      	bne.n	8004b46 <HAL_RNG_MspDeInit+0x22>
  {
  /* USER CODE BEGIN RNG_MspDeInit 0 */

  /* USER CODE END RNG_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RNG_CLK_DISABLE();
 8004b36:	4b08      	ldr	r3, [pc, #32]	@ (8004b58 <HAL_RNG_MspDeInit+0x34>)
 8004b38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b3c:	4a06      	ldr	r2, [pc, #24]	@ (8004b58 <HAL_RNG_MspDeInit+0x34>)
 8004b3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b42:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  /* USER CODE BEGIN RNG_MspDeInit 1 */

  /* USER CODE END RNG_MspDeInit 1 */
  }

}
 8004b46:	bf00      	nop
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	420c0800 	.word	0x420c0800
 8004b58:	44020c00 	.word	0x44020c00

08004b5c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b0c6      	sub	sp, #280	@ 0x118
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004b66:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004b6a:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004b6c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004b70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b74:	4618      	mov	r0, r3
 8004b76:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	f011 fe79 	bl	8016874 <memset>
  if(hrtc->Instance==RTC)
 8004b82:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004b86:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a21      	ldr	r2, [pc, #132]	@ (8004c14 <HAL_RTC_MspInit+0xb8>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d13a      	bne.n	8004c0a <HAL_RTC_MspInit+0xae>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004b94:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004b98:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8004b9c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004ba0:	f04f 0300 	mov.w	r3, #0
 8004ba4:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004ba8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004bac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bb4:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004bb8:	f107 0310 	add.w	r3, r7, #16
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f005 fd4b 	bl	800a658 <HAL_RCCEx_PeriphCLKConfig>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d001      	beq.n	8004bcc <HAL_RTC_MspInit+0x70>
    {
      Error_Handler();
 8004bc8:	f7ff fe80 	bl	80048cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004bcc:	4b12      	ldr	r3, [pc, #72]	@ (8004c18 <HAL_RTC_MspInit+0xbc>)
 8004bce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bd2:	4a11      	ldr	r2, [pc, #68]	@ (8004c18 <HAL_RTC_MspInit+0xbc>)
 8004bd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bd8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8004bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8004c18 <HAL_RTC_MspInit+0xbc>)
 8004bde:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004be2:	4a0d      	ldr	r2, [pc, #52]	@ (8004c18 <HAL_RTC_MspInit+0xbc>)
 8004be4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004be8:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8004bec:	4b0a      	ldr	r3, [pc, #40]	@ (8004c18 <HAL_RTC_MspInit+0xbc>)
 8004bee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004bf2:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8004bf6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004bfa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004bfe:	601a      	str	r2, [r3, #0]
 8004c00:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004c04:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004c08:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8004c0a:	bf00      	nop
 8004c0c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	44007800 	.word	0x44007800
 8004c18:	44020c00 	.word	0x44020c00

08004c1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b0ce      	sub	sp, #312	@ 0x138
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004c26:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004c2a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c2c:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8004c30:	2200      	movs	r2, #0
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	605a      	str	r2, [r3, #4]
 8004c36:	609a      	str	r2, [r3, #8]
 8004c38:	60da      	str	r2, [r3, #12]
 8004c3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004c3c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004c40:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004c44:	4618      	mov	r0, r3
 8004c46:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	f011 fe11 	bl	8016874 <memset>
  if(hspi->Instance==SPI1)
 8004c52:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004c56:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a60      	ldr	r2, [pc, #384]	@ (8004de0 <HAL_SPI_MspInit+0x1c4>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	f040 80b7 	bne.w	8004dd4 <HAL_SPI_MspInit+0x1b8>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8004c66:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004c6a:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8004c6e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004c72:	f04f 0300 	mov.w	r3, #0
 8004c76:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 8004c7a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004c7e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004c82:	2200      	movs	r2, #0
 8004c84:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c88:	f107 0318 	add.w	r3, r7, #24
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f005 fce3 	bl	800a658 <HAL_RCCEx_PeriphCLKConfig>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d001      	beq.n	8004c9c <HAL_SPI_MspInit+0x80>
    {
      Error_Handler();
 8004c98:	f7ff fe18 	bl	80048cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004c9c:	4b51      	ldr	r3, [pc, #324]	@ (8004de4 <HAL_SPI_MspInit+0x1c8>)
 8004c9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004ca2:	4a50      	ldr	r2, [pc, #320]	@ (8004de4 <HAL_SPI_MspInit+0x1c8>)
 8004ca4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004ca8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8004cac:	4b4d      	ldr	r3, [pc, #308]	@ (8004de4 <HAL_SPI_MspInit+0x1c8>)
 8004cae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004cb2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004cb6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004cba:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004cbe:	601a      	str	r2, [r3, #0]
 8004cc0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004cc4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004cc8:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cca:	4b46      	ldr	r3, [pc, #280]	@ (8004de4 <HAL_SPI_MspInit+0x1c8>)
 8004ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004cd0:	4a44      	ldr	r2, [pc, #272]	@ (8004de4 <HAL_SPI_MspInit+0x1c8>)
 8004cd2:	f043 0301 	orr.w	r3, r3, #1
 8004cd6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004cda:	4b42      	ldr	r3, [pc, #264]	@ (8004de4 <HAL_SPI_MspInit+0x1c8>)
 8004cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ce0:	f003 0201 	and.w	r2, r3, #1
 8004ce4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004ce8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004cec:	601a      	str	r2, [r3, #0]
 8004cee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004cf2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004cf6:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004cf8:	4b3a      	ldr	r3, [pc, #232]	@ (8004de4 <HAL_SPI_MspInit+0x1c8>)
 8004cfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004cfe:	4a39      	ldr	r2, [pc, #228]	@ (8004de4 <HAL_SPI_MspInit+0x1c8>)
 8004d00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d04:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004d08:	4b36      	ldr	r3, [pc, #216]	@ (8004de4 <HAL_SPI_MspInit+0x1c8>)
 8004d0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d0e:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8004d12:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004d16:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004d1a:	601a      	str	r2, [r3, #0]
 8004d1c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004d20:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004d24:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d26:	4b2f      	ldr	r3, [pc, #188]	@ (8004de4 <HAL_SPI_MspInit+0x1c8>)
 8004d28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d2c:	4a2d      	ldr	r2, [pc, #180]	@ (8004de4 <HAL_SPI_MspInit+0x1c8>)
 8004d2e:	f043 0302 	orr.w	r3, r3, #2
 8004d32:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004d36:	4b2b      	ldr	r3, [pc, #172]	@ (8004de4 <HAL_SPI_MspInit+0x1c8>)
 8004d38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d3c:	f003 0202 	and.w	r2, r3, #2
 8004d40:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004d44:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004d48:	601a      	str	r2, [r3, #0]
 8004d4a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004d4e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004d52:	681b      	ldr	r3, [r3, #0]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PG9     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004d54:	2320      	movs	r3, #32
 8004d56:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d60:	2300      	movs	r3, #0
 8004d62:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d66:	2300      	movs	r3, #0
 8004d68:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004d6c:	2305      	movs	r3, #5
 8004d6e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d72:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8004d76:	4619      	mov	r1, r3
 8004d78:	481b      	ldr	r0, [pc, #108]	@ (8004de8 <HAL_SPI_MspInit+0x1cc>)
 8004d7a:	f001 fb89 	bl	8006490 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004d7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d82:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d86:	2302      	movs	r3, #2
 8004d88:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d92:	2300      	movs	r3, #0
 8004d94:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004d98:	2305      	movs	r3, #5
 8004d9a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004d9e:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8004da2:	4619      	mov	r1, r3
 8004da4:	4811      	ldr	r0, [pc, #68]	@ (8004dec <HAL_SPI_MspInit+0x1d0>)
 8004da6:	f001 fb73 	bl	8006490 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004daa:	2320      	movs	r3, #32
 8004dac:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004db0:	2302      	movs	r3, #2
 8004db2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004db6:	2300      	movs	r3, #0
 8004db8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004dc2:	2305      	movs	r3, #5
 8004dc4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dc8:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8004dcc:	4619      	mov	r1, r3
 8004dce:	4808      	ldr	r0, [pc, #32]	@ (8004df0 <HAL_SPI_MspInit+0x1d4>)
 8004dd0:	f001 fb5e 	bl	8006490 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8004dd4:	bf00      	nop
 8004dd6:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	40013000 	.word	0x40013000
 8004de4:	44020c00 	.word	0x44020c00
 8004de8:	42020000 	.word	0x42020000
 8004dec:	42021800 	.word	0x42021800
 8004df0:	42020400 	.word	0x42020400

08004df4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b0d0      	sub	sp, #320	@ 0x140
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004dfe:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004e02:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e04:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8004e08:	2200      	movs	r2, #0
 8004e0a:	601a      	str	r2, [r3, #0]
 8004e0c:	605a      	str	r2, [r3, #4]
 8004e0e:	609a      	str	r2, [r3, #8]
 8004e10:	60da      	str	r2, [r3, #12]
 8004e12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004e14:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004e18:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8004e22:	461a      	mov	r2, r3
 8004e24:	2100      	movs	r1, #0
 8004e26:	f011 fd25 	bl	8016874 <memset>
  if(huart->Instance==USART2)
 8004e2a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004e2e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a7c      	ldr	r2, [pc, #496]	@ (8005028 <HAL_UART_MspInit+0x234>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	f040 808a 	bne.w	8004f52 <HAL_UART_MspInit+0x15e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004e3e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004e42:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8004e46:	f04f 0202 	mov.w	r2, #2
 8004e4a:	f04f 0300 	mov.w	r3, #0
 8004e4e:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004e52:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004e56:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	661a      	str	r2, [r3, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004e5e:	f107 0320 	add.w	r3, r7, #32
 8004e62:	4618      	mov	r0, r3
 8004e64:	f005 fbf8 	bl	800a658 <HAL_RCCEx_PeriphCLKConfig>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 8004e6e:	f7ff fd2d 	bl	80048cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004e72:	4b6e      	ldr	r3, [pc, #440]	@ (800502c <HAL_UART_MspInit+0x238>)
 8004e74:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e78:	4a6c      	ldr	r2, [pc, #432]	@ (800502c <HAL_UART_MspInit+0x238>)
 8004e7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e7e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004e82:	4b6a      	ldr	r3, [pc, #424]	@ (800502c <HAL_UART_MspInit+0x238>)
 8004e84:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e88:	f403 3200 	and.w	r2, r3, #131072	@ 0x20000
 8004e8c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004e90:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004e94:	601a      	str	r2, [r3, #0]
 8004e96:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004e9a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004e9e:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ea0:	4b62      	ldr	r3, [pc, #392]	@ (800502c <HAL_UART_MspInit+0x238>)
 8004ea2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ea6:	4a61      	ldr	r2, [pc, #388]	@ (800502c <HAL_UART_MspInit+0x238>)
 8004ea8:	f043 0301 	orr.w	r3, r3, #1
 8004eac:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004eb0:	4b5e      	ldr	r3, [pc, #376]	@ (800502c <HAL_UART_MspInit+0x238>)
 8004eb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004eb6:	f003 0201 	and.w	r2, r3, #1
 8004eba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004ebe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004ec8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004ecc:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ece:	4b57      	ldr	r3, [pc, #348]	@ (800502c <HAL_UART_MspInit+0x238>)
 8004ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ed4:	4a55      	ldr	r2, [pc, #340]	@ (800502c <HAL_UART_MspInit+0x238>)
 8004ed6:	f043 0308 	orr.w	r3, r3, #8
 8004eda:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004ede:	4b53      	ldr	r3, [pc, #332]	@ (800502c <HAL_UART_MspInit+0x238>)
 8004ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ee4:	f003 0208 	and.w	r2, r3, #8
 8004ee8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004eec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004ef0:	601a      	str	r2, [r3, #0]
 8004ef2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004ef6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004efa:	681b      	ldr	r3, [r3, #0]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004efc:	2308      	movs	r3, #8
 8004efe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f02:	2302      	movs	r3, #2
 8004f04:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004f14:	2307      	movs	r3, #7
 8004f16:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f1a:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8004f1e:	4619      	mov	r1, r3
 8004f20:	4843      	ldr	r0, [pc, #268]	@ (8005030 <HAL_UART_MspInit+0x23c>)
 8004f22:	f001 fab5 	bl	8006490 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004f26:	2320      	movs	r3, #32
 8004f28:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f32:	2300      	movs	r3, #0
 8004f34:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004f3e:	2307      	movs	r3, #7
 8004f40:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004f44:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8004f48:	4619      	mov	r1, r3
 8004f4a:	483a      	ldr	r0, [pc, #232]	@ (8005034 <HAL_UART_MspInit+0x240>)
 8004f4c:	f001 faa0 	bl	8006490 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004f50:	e065      	b.n	800501e <HAL_UART_MspInit+0x22a>
  else if(huart->Instance==USART6)
 8004f52:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004f56:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a36      	ldr	r2, [pc, #216]	@ (8005038 <HAL_UART_MspInit+0x244>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d15c      	bne.n	800501e <HAL_UART_MspInit+0x22a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8004f64:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004f68:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8004f6c:	f04f 0220 	mov.w	r2, #32
 8004f70:	f04f 0300 	mov.w	r3, #0
 8004f74:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 8004f78:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004f7c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004f80:	2200      	movs	r2, #0
 8004f82:	671a      	str	r2, [r3, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004f84:	f107 0320 	add.w	r3, r7, #32
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f005 fb65 	bl	800a658 <HAL_RCCEx_PeriphCLKConfig>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d001      	beq.n	8004f98 <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 8004f94:	f7ff fc9a 	bl	80048cc <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004f98:	4b24      	ldr	r3, [pc, #144]	@ (800502c <HAL_UART_MspInit+0x238>)
 8004f9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f9e:	4a23      	ldr	r2, [pc, #140]	@ (800502c <HAL_UART_MspInit+0x238>)
 8004fa0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004fa4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004fa8:	4b20      	ldr	r3, [pc, #128]	@ (800502c <HAL_UART_MspInit+0x238>)
 8004faa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004fae:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 8004fb2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004fb6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004fba:	601a      	str	r2, [r3, #0]
 8004fbc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004fc0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004fc4:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004fc6:	4b19      	ldr	r3, [pc, #100]	@ (800502c <HAL_UART_MspInit+0x238>)
 8004fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004fcc:	4a17      	ldr	r2, [pc, #92]	@ (800502c <HAL_UART_MspInit+0x238>)
 8004fce:	f043 0304 	orr.w	r3, r3, #4
 8004fd2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004fd6:	4b15      	ldr	r3, [pc, #84]	@ (800502c <HAL_UART_MspInit+0x238>)
 8004fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004fdc:	f003 0204 	and.w	r2, r3, #4
 8004fe0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004fe4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004fee:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004ff2:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004ff4:	23c0      	movs	r3, #192	@ 0xc0
 8004ff6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ffa:	2302      	movs	r3, #2
 8004ffc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005000:	2300      	movs	r3, #0
 8005002:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005006:	2300      	movs	r3, #0
 8005008:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 800500c:	2307      	movs	r3, #7
 800500e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005012:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8005016:	4619      	mov	r1, r3
 8005018:	4808      	ldr	r0, [pc, #32]	@ (800503c <HAL_UART_MspInit+0x248>)
 800501a:	f001 fa39 	bl	8006490 <HAL_GPIO_Init>
}
 800501e:	bf00      	nop
 8005020:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	40004400 	.word	0x40004400
 800502c:	44020c00 	.word	0x44020c00
 8005030:	42020000 	.word	0x42020000
 8005034:	42020c00 	.word	0x42020c00
 8005038:	40006400 	.word	0x40006400
 800503c:	42020800 	.word	0x42020800

08005040 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b0c6      	sub	sp, #280	@ 0x118
 8005044:	af00      	add	r7, sp, #0
 8005046:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800504a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800504e:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005050:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005054:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005058:	4618      	mov	r0, r3
 800505a:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800505e:	461a      	mov	r2, r3
 8005060:	2100      	movs	r1, #0
 8005062:	f011 fc07 	bl	8016874 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8005066:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800506a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a22      	ldr	r2, [pc, #136]	@ (80050fc <HAL_PCD_MspInit+0xbc>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d13b      	bne.n	80050f0 <HAL_PCD_MspInit+0xb0>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8005078:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800507c:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8005080:	f04f 0200 	mov.w	r2, #0
 8005084:	f04f 0310 	mov.w	r3, #16
 8005088:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800508c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005090:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005094:	2230      	movs	r2, #48	@ 0x30
 8005096:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800509a:	f107 0310 	add.w	r3, r7, #16
 800509e:	4618      	mov	r0, r3
 80050a0:	f005 fada 	bl	800a658 <HAL_RCCEx_PeriphCLKConfig>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d001      	beq.n	80050ae <HAL_PCD_MspInit+0x6e>
    {
      Error_Handler();
 80050aa:	f7ff fc0f 	bl	80048cc <Error_Handler>
    }

    /* Enable VDDUSB */
    HAL_PWREx_EnableVddUSB();
 80050ae:	f004 fb49 	bl	8009744 <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80050b2:	4b13      	ldr	r3, [pc, #76]	@ (8005100 <HAL_PCD_MspInit+0xc0>)
 80050b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80050b8:	4a11      	ldr	r2, [pc, #68]	@ (8005100 <HAL_PCD_MspInit+0xc0>)
 80050ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050be:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80050c2:	4b0f      	ldr	r3, [pc, #60]	@ (8005100 <HAL_PCD_MspInit+0xc0>)
 80050c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80050c8:	f003 7280 	and.w	r2, r3, #16777216	@ 0x1000000
 80050cc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80050d0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80050d4:	601a      	str	r2, [r3, #0]
 80050d6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80050da:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80050de:	681b      	ldr	r3, [r3, #0]
    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 80050e0:	2200      	movs	r2, #0
 80050e2:	2100      	movs	r1, #0
 80050e4:	204a      	movs	r0, #74	@ 0x4a
 80050e6:	f000 fd9d 	bl	8005c24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_DRD_FS_IRQn);
 80050ea:	204a      	movs	r0, #74	@ 0x4a
 80050ec:	f000 fdb4 	bl	8005c58 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 80050f0:	bf00      	nop
 80050f2:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	40016000 	.word	0x40016000
 8005100:	44020c00 	.word	0x44020c00

08005104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005104:	b480      	push	{r7}
 8005106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005108:	bf00      	nop
 800510a:	e7fd      	b.n	8005108 <NMI_Handler+0x4>

0800510c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800510c:	b480      	push	{r7}
 800510e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005110:	bf00      	nop
 8005112:	e7fd      	b.n	8005110 <HardFault_Handler+0x4>

08005114 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005114:	b480      	push	{r7}
 8005116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005118:	bf00      	nop
 800511a:	e7fd      	b.n	8005118 <MemManage_Handler+0x4>

0800511c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800511c:	b480      	push	{r7}
 800511e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005120:	bf00      	nop
 8005122:	e7fd      	b.n	8005120 <BusFault_Handler+0x4>

08005124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005124:	b480      	push	{r7}
 8005126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005128:	bf00      	nop
 800512a:	e7fd      	b.n	8005128 <UsageFault_Handler+0x4>

0800512c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800512c:	b480      	push	{r7}
 800512e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005130:	bf00      	nop
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr

0800513a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800513a:	b480      	push	{r7}
 800513c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800513e:	bf00      	nop
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005148:	b480      	push	{r7}
 800514a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800514c:	bf00      	nop
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800515a:	f000 fc1f 	bl	800599c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800515e:	bf00      	nop
 8005160:	bd80      	pop	{r7, pc}

08005162 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8005166:	2000      	movs	r0, #0
 8005168:	f000 fa78 	bl	800565c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 800516c:	bf00      	nop
 800516e:	bd80      	pop	{r7, pc}

08005170 <USB_DRD_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt.
  */
void USB_DRD_FS_IRQHandler(void)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DRD_FS_IRQn 0 */

  /* USER CODE END USB_DRD_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 8005174:	4802      	ldr	r0, [pc, #8]	@ (8005180 <USB_DRD_FS_IRQHandler+0x10>)
 8005176:	f002 ff76 	bl	8008066 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_DRD_FS_IRQn 1 */

  /* USER CODE END USB_DRD_FS_IRQn 1 */
}
 800517a:	bf00      	nop
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	2000267c 	.word	0x2000267c

08005184 <HASH_IRQHandler>:

/**
  * @brief This function handles HASH global interrupt.
  */
void HASH_IRQHandler(void)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_IRQn 0 */

  /* USER CODE END HASH_IRQn 0 */
  HAL_HASH_IRQHandler(&hhash);
 8005188:	4802      	ldr	r0, [pc, #8]	@ (8005194 <HASH_IRQHandler+0x10>)
 800518a:	f001 fd0b 	bl	8006ba4 <HAL_HASH_IRQHandler>
  /* USER CODE BEGIN HASH_IRQn 1 */

  /* USER CODE END HASH_IRQn 1 */
}
 800518e:	bf00      	nop
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	200023ec 	.word	0x200023ec

08005198 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b086      	sub	sp, #24
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051a4:	2300      	movs	r3, #0
 80051a6:	617b      	str	r3, [r7, #20]
 80051a8:	e00a      	b.n	80051c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80051aa:	f3af 8000 	nop.w
 80051ae:	4601      	mov	r1, r0
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	1c5a      	adds	r2, r3, #1
 80051b4:	60ba      	str	r2, [r7, #8]
 80051b6:	b2ca      	uxtb	r2, r1
 80051b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	3301      	adds	r3, #1
 80051be:	617b      	str	r3, [r7, #20]
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	dbf0      	blt.n	80051aa <_read+0x12>
  }

  return len;
 80051c8:	687b      	ldr	r3, [r7, #4]
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3718      	adds	r7, #24
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b086      	sub	sp, #24
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	60f8      	str	r0, [r7, #12]
 80051da:	60b9      	str	r1, [r7, #8]
 80051dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051de:	2300      	movs	r3, #0
 80051e0:	617b      	str	r3, [r7, #20]
 80051e2:	e009      	b.n	80051f8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	1c5a      	adds	r2, r3, #1
 80051e8:	60ba      	str	r2, [r7, #8]
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f000 fabb 	bl	8005768 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	3301      	adds	r3, #1
 80051f6:	617b      	str	r3, [r7, #20]
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	dbf1      	blt.n	80051e4 <_write+0x12>
  }
  return len;
 8005200:	687b      	ldr	r3, [r7, #4]
}
 8005202:	4618      	mov	r0, r3
 8005204:	3718      	adds	r7, #24
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}

0800520a <_close>:

int _close(int file)
{
 800520a:	b480      	push	{r7}
 800520c:	b083      	sub	sp, #12
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005212:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005216:	4618      	mov	r0, r3
 8005218:	370c      	adds	r7, #12
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr

08005222 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005222:	b480      	push	{r7}
 8005224:	b083      	sub	sp, #12
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
 800522a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005232:	605a      	str	r2, [r3, #4]
  return 0;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <_isatty>:

int _isatty(int file)
{
 8005242:	b480      	push	{r7}
 8005244:	b083      	sub	sp, #12
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800524a:	2301      	movs	r3, #1
}
 800524c:	4618      	mov	r0, r3
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3714      	adds	r7, #20
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
	...

08005274 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b086      	sub	sp, #24
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800527c:	4a14      	ldr	r2, [pc, #80]	@ (80052d0 <_sbrk+0x5c>)
 800527e:	4b15      	ldr	r3, [pc, #84]	@ (80052d4 <_sbrk+0x60>)
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005288:	4b13      	ldr	r3, [pc, #76]	@ (80052d8 <_sbrk+0x64>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d102      	bne.n	8005296 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005290:	4b11      	ldr	r3, [pc, #68]	@ (80052d8 <_sbrk+0x64>)
 8005292:	4a12      	ldr	r2, [pc, #72]	@ (80052dc <_sbrk+0x68>)
 8005294:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005296:	4b10      	ldr	r3, [pc, #64]	@ (80052d8 <_sbrk+0x64>)
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4413      	add	r3, r2
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d207      	bcs.n	80052b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80052a4:	f011 fb44 	bl	8016930 <__errno>
 80052a8:	4603      	mov	r3, r0
 80052aa:	220c      	movs	r2, #12
 80052ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80052ae:	f04f 33ff 	mov.w	r3, #4294967295
 80052b2:	e009      	b.n	80052c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80052b4:	4b08      	ldr	r3, [pc, #32]	@ (80052d8 <_sbrk+0x64>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80052ba:	4b07      	ldr	r3, [pc, #28]	@ (80052d8 <_sbrk+0x64>)
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4413      	add	r3, r2
 80052c2:	4a05      	ldr	r2, [pc, #20]	@ (80052d8 <_sbrk+0x64>)
 80052c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80052c6:	68fb      	ldr	r3, [r7, #12]
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3718      	adds	r7, #24
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	200a0000 	.word	0x200a0000
 80052d4:	00000500 	.word	0x00000500
 80052d8:	20002c3c 	.word	0x20002c3c
 80052dc:	20013560 	.word	0x20013560

080052e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80052e6:	4b35      	ldr	r3, [pc, #212]	@ (80053bc <SystemInit+0xdc>)
 80052e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ec:	4a33      	ldr	r2, [pc, #204]	@ (80053bc <SystemInit+0xdc>)
 80052ee:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80052f2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80052f6:	4b32      	ldr	r3, [pc, #200]	@ (80053c0 <SystemInit+0xe0>)
 80052f8:	2201      	movs	r2, #1
 80052fa:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80052fc:	4b30      	ldr	r3, [pc, #192]	@ (80053c0 <SystemInit+0xe0>)
 80052fe:	2200      	movs	r2, #0
 8005300:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8005302:	4b2f      	ldr	r3, [pc, #188]	@ (80053c0 <SystemInit+0xe0>)
 8005304:	2200      	movs	r2, #0
 8005306:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8005308:	4b2d      	ldr	r3, [pc, #180]	@ (80053c0 <SystemInit+0xe0>)
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	492c      	ldr	r1, [pc, #176]	@ (80053c0 <SystemInit+0xe0>)
 800530e:	4b2d      	ldr	r3, [pc, #180]	@ (80053c4 <SystemInit+0xe4>)
 8005310:	4013      	ands	r3, r2
 8005312:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8005314:	4b2a      	ldr	r3, [pc, #168]	@ (80053c0 <SystemInit+0xe0>)
 8005316:	2200      	movs	r2, #0
 8005318:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 800531a:	4b29      	ldr	r3, [pc, #164]	@ (80053c0 <SystemInit+0xe0>)
 800531c:	2200      	movs	r2, #0
 800531e:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8005320:	4b27      	ldr	r3, [pc, #156]	@ (80053c0 <SystemInit+0xe0>)
 8005322:	2200      	movs	r2, #0
 8005324:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8005326:	4b26      	ldr	r3, [pc, #152]	@ (80053c0 <SystemInit+0xe0>)
 8005328:	4a27      	ldr	r2, [pc, #156]	@ (80053c8 <SystemInit+0xe8>)
 800532a:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 800532c:	4b24      	ldr	r3, [pc, #144]	@ (80053c0 <SystemInit+0xe0>)
 800532e:	2200      	movs	r2, #0
 8005330:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8005332:	4b23      	ldr	r3, [pc, #140]	@ (80053c0 <SystemInit+0xe0>)
 8005334:	4a24      	ldr	r2, [pc, #144]	@ (80053c8 <SystemInit+0xe8>)
 8005336:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8005338:	4b21      	ldr	r3, [pc, #132]	@ (80053c0 <SystemInit+0xe0>)
 800533a:	2200      	movs	r2, #0
 800533c:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 800533e:	4b20      	ldr	r3, [pc, #128]	@ (80053c0 <SystemInit+0xe0>)
 8005340:	4a21      	ldr	r2, [pc, #132]	@ (80053c8 <SystemInit+0xe8>)
 8005342:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8005344:	4b1e      	ldr	r3, [pc, #120]	@ (80053c0 <SystemInit+0xe0>)
 8005346:	2200      	movs	r2, #0
 8005348:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800534a:	4b1d      	ldr	r3, [pc, #116]	@ (80053c0 <SystemInit+0xe0>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a1c      	ldr	r2, [pc, #112]	@ (80053c0 <SystemInit+0xe0>)
 8005350:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005354:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8005356:	4b1a      	ldr	r3, [pc, #104]	@ (80053c0 <SystemInit+0xe0>)
 8005358:	2200      	movs	r2, #0
 800535a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800535c:	4b17      	ldr	r3, [pc, #92]	@ (80053bc <SystemInit+0xdc>)
 800535e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005362:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8005364:	4b19      	ldr	r3, [pc, #100]	@ (80053cc <SystemInit+0xec>)
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 800536c:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8005374:	d003      	beq.n	800537e <SystemInit+0x9e>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800537c:	d117      	bne.n	80053ae <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800537e:	4b13      	ldr	r3, [pc, #76]	@ (80053cc <SystemInit+0xec>)
 8005380:	69db      	ldr	r3, [r3, #28]
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	2b00      	cmp	r3, #0
 8005388:	d005      	beq.n	8005396 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 800538a:	4b10      	ldr	r3, [pc, #64]	@ (80053cc <SystemInit+0xec>)
 800538c:	4a10      	ldr	r2, [pc, #64]	@ (80053d0 <SystemInit+0xf0>)
 800538e:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8005390:	4b0e      	ldr	r3, [pc, #56]	@ (80053cc <SystemInit+0xec>)
 8005392:	4a10      	ldr	r2, [pc, #64]	@ (80053d4 <SystemInit+0xf4>)
 8005394:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8005396:	4b0d      	ldr	r3, [pc, #52]	@ (80053cc <SystemInit+0xec>)
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	4a0c      	ldr	r2, [pc, #48]	@ (80053cc <SystemInit+0xec>)
 800539c:	f043 0302 	orr.w	r3, r3, #2
 80053a0:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80053a2:	4b0a      	ldr	r3, [pc, #40]	@ (80053cc <SystemInit+0xec>)
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	4a09      	ldr	r2, [pc, #36]	@ (80053cc <SystemInit+0xec>)
 80053a8:	f043 0301 	orr.w	r3, r3, #1
 80053ac:	61d3      	str	r3, [r2, #28]
  }
}
 80053ae:	bf00      	nop
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	e000ed00 	.word	0xe000ed00
 80053c0:	44020c00 	.word	0x44020c00
 80053c4:	eae2eae3 	.word	0xeae2eae3
 80053c8:	01010280 	.word	0x01010280
 80053cc:	40022000 	.word	0x40022000
 80053d0:	08192a3b 	.word	0x08192a3b
 80053d4:	4c5d6e7f 	.word	0x4c5d6e7f

080053d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80053d8:	480d      	ldr	r0, [pc, #52]	@ (8005410 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80053da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80053dc:	f7ff ff80 	bl	80052e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80053e0:	480c      	ldr	r0, [pc, #48]	@ (8005414 <LoopForever+0x6>)
  ldr r1, =_edata
 80053e2:	490d      	ldr	r1, [pc, #52]	@ (8005418 <LoopForever+0xa>)
  ldr r2, =_sidata
 80053e4:	4a0d      	ldr	r2, [pc, #52]	@ (800541c <LoopForever+0xe>)
  movs r3, #0
 80053e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80053e8:	e002      	b.n	80053f0 <LoopCopyDataInit>

080053ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80053ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80053ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80053ee:	3304      	adds	r3, #4

080053f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80053f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80053f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80053f4:	d3f9      	bcc.n	80053ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80053f6:	4a0a      	ldr	r2, [pc, #40]	@ (8005420 <LoopForever+0x12>)
  ldr r4, =_ebss
 80053f8:	4c0a      	ldr	r4, [pc, #40]	@ (8005424 <LoopForever+0x16>)
  movs r3, #0
 80053fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80053fc:	e001      	b.n	8005402 <LoopFillZerobss>

080053fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80053fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005400:	3204      	adds	r2, #4

08005402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005404:	d3fb      	bcc.n	80053fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005406:	f011 fa99 	bl	801693c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800540a:	f7fe fe19 	bl	8004040 <main>

0800540e <LoopForever>:

LoopForever:
    b LoopForever
 800540e:	e7fe      	b.n	800540e <LoopForever>
  ldr   r0, =_estack
 8005410:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8005414:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005418:	2000019c 	.word	0x2000019c
  ldr r2, =_sidata
 800541c:	08019638 	.word	0x08019638
  ldr r2, =_sbss
 8005420:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 8005424:	20013560 	.word	0x20013560

08005428 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005428:	e7fe      	b.n	8005428 <ADC1_IRQHandler>
	...

0800542c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b08c      	sub	sp, #48	@ 0x30
 8005430:	af00      	add	r7, sp, #0
 8005432:	4603      	mov	r3, r0
 8005434:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8005436:	2300      	movs	r3, #0
 8005438:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if ((Led != LED2)
 800543a:	79fb      	ldrb	r3, [r7, #7]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d009      	beq.n	8005454 <BSP_LED_Init+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8005440:	79fb      	ldrb	r3, [r7, #7]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d006      	beq.n	8005454 <BSP_LED_Init+0x28>
 8005446:	79fb      	ldrb	r3, [r7, #7]
 8005448:	2b02      	cmp	r3, #2
 800544a:	d003      	beq.n	8005454 <BSP_LED_Init+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800544c:	f06f 0301 	mvn.w	r3, #1
 8005450:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005452:	e055      	b.n	8005500 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8005454:	79fb      	ldrb	r3, [r7, #7]
 8005456:	2b01      	cmp	r3, #1
 8005458:	d10f      	bne.n	800547a <BSP_LED_Init+0x4e>
    {
      LED2_GPIO_CLK_ENABLE();
 800545a:	4b2c      	ldr	r3, [pc, #176]	@ (800550c <BSP_LED_Init+0xe0>)
 800545c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005460:	4a2a      	ldr	r2, [pc, #168]	@ (800550c <BSP_LED_Init+0xe0>)
 8005462:	f043 0320 	orr.w	r3, r3, #32
 8005466:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800546a:	4b28      	ldr	r3, [pc, #160]	@ (800550c <BSP_LED_Init+0xe0>)
 800546c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005470:	f003 0320 	and.w	r3, r3, #32
 8005474:	617b      	str	r3, [r7, #20]
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	e021      	b.n	80054be <BSP_LED_Init+0x92>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 800547a:	79fb      	ldrb	r3, [r7, #7]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d10f      	bne.n	80054a0 <BSP_LED_Init+0x74>
    {
      LED1_GPIO_CLK_ENABLE();
 8005480:	4b22      	ldr	r3, [pc, #136]	@ (800550c <BSP_LED_Init+0xe0>)
 8005482:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005486:	4a21      	ldr	r2, [pc, #132]	@ (800550c <BSP_LED_Init+0xe0>)
 8005488:	f043 0302 	orr.w	r3, r3, #2
 800548c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005490:	4b1e      	ldr	r3, [pc, #120]	@ (800550c <BSP_LED_Init+0xe0>)
 8005492:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005496:	f003 0302 	and.w	r3, r3, #2
 800549a:	613b      	str	r3, [r7, #16]
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	e00e      	b.n	80054be <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80054a0:	4b1a      	ldr	r3, [pc, #104]	@ (800550c <BSP_LED_Init+0xe0>)
 80054a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054a6:	4a19      	ldr	r2, [pc, #100]	@ (800550c <BSP_LED_Init+0xe0>)
 80054a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054ac:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80054b0:	4b16      	ldr	r3, [pc, #88]	@ (800550c <BSP_LED_Init+0xe0>)
 80054b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054ba:	60fb      	str	r3, [r7, #12]
 80054bc:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80054be:	79fb      	ldrb	r3, [r7, #7]
 80054c0:	4a13      	ldr	r2, [pc, #76]	@ (8005510 <BSP_LED_Init+0xe4>)
 80054c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054c6:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80054c8:	2301      	movs	r3, #1
 80054ca:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80054cc:	2300      	movs	r3, #0
 80054ce:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054d0:	2303      	movs	r3, #3
 80054d2:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80054d4:	79fb      	ldrb	r3, [r7, #7]
 80054d6:	4a0f      	ldr	r2, [pc, #60]	@ (8005514 <BSP_LED_Init+0xe8>)
 80054d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054dc:	f107 0218 	add.w	r2, r7, #24
 80054e0:	4611      	mov	r1, r2
 80054e2:	4618      	mov	r0, r3
 80054e4:	f000 ffd4 	bl	8006490 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80054e8:	79fb      	ldrb	r3, [r7, #7]
 80054ea:	4a0a      	ldr	r2, [pc, #40]	@ (8005514 <BSP_LED_Init+0xe8>)
 80054ec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80054f0:	79fb      	ldrb	r3, [r7, #7]
 80054f2:	4a07      	ldr	r2, [pc, #28]	@ (8005510 <BSP_LED_Init+0xe4>)
 80054f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054f8:	2200      	movs	r2, #0
 80054fa:	4619      	mov	r1, r3
 80054fc:	f001 f91a 	bl	8006734 <HAL_GPIO_WritePin>
  }

  return ret;
 8005500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005502:	4618      	mov	r0, r3
 8005504:	3730      	adds	r7, #48	@ 0x30
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	44020c00 	.word	0x44020c00
 8005510:	080195c0 	.word	0x080195c0
 8005514:	2000000c 	.word	0x2000000c

08005518 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	4603      	mov	r3, r0
 8005520:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8005522:	2300      	movs	r3, #0
 8005524:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 8005526:	79fb      	ldrb	r3, [r7, #7]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d009      	beq.n	8005540 <BSP_LED_Toggle+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 800552c:	79fb      	ldrb	r3, [r7, #7]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d006      	beq.n	8005540 <BSP_LED_Toggle+0x28>
 8005532:	79fb      	ldrb	r3, [r7, #7]
 8005534:	2b02      	cmp	r3, #2
 8005536:	d003      	beq.n	8005540 <BSP_LED_Toggle+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005538:	f06f 0301 	mvn.w	r3, #1
 800553c:	60fb      	str	r3, [r7, #12]
 800553e:	e00b      	b.n	8005558 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8005540:	79fb      	ldrb	r3, [r7, #7]
 8005542:	4a08      	ldr	r2, [pc, #32]	@ (8005564 <BSP_LED_Toggle+0x4c>)
 8005544:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005548:	79fb      	ldrb	r3, [r7, #7]
 800554a:	4907      	ldr	r1, [pc, #28]	@ (8005568 <BSP_LED_Toggle+0x50>)
 800554c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005550:	4619      	mov	r1, r3
 8005552:	4610      	mov	r0, r2
 8005554:	f001 f906 	bl	8006764 <HAL_GPIO_TogglePin>
  }

  return ret;
 8005558:	68fb      	ldr	r3, [r7, #12]
}
 800555a:	4618      	mov	r0, r3
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	2000000c 	.word	0x2000000c
 8005568:	080195c0 	.word	0x080195c0

0800556c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b088      	sub	sp, #32
 8005570:	af00      	add	r7, sp, #0
 8005572:	4603      	mov	r3, r0
 8005574:	460a      	mov	r2, r1
 8005576:	71fb      	strb	r3, [r7, #7]
 8005578:	4613      	mov	r3, r2
 800557a:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 800557c:	4b30      	ldr	r3, [pc, #192]	@ (8005640 <BSP_PB_Init+0xd4>)
 800557e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005582:	4a2f      	ldr	r2, [pc, #188]	@ (8005640 <BSP_PB_Init+0xd4>)
 8005584:	f043 0304 	orr.w	r3, r3, #4
 8005588:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800558c:	4b2c      	ldr	r3, [pc, #176]	@ (8005640 <BSP_PB_Init+0xd4>)
 800558e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005592:	f003 0304 	and.w	r3, r3, #4
 8005596:	60bb      	str	r3, [r7, #8]
 8005598:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800559a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800559e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80055a0:	2302      	movs	r3, #2
 80055a2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80055a4:	2302      	movs	r3, #2
 80055a6:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 80055a8:	79bb      	ldrb	r3, [r7, #6]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10c      	bne.n	80055c8 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80055ae:	2300      	movs	r3, #0
 80055b0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80055b2:	79fb      	ldrb	r3, [r7, #7]
 80055b4:	4a23      	ldr	r2, [pc, #140]	@ (8005644 <BSP_PB_Init+0xd8>)
 80055b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055ba:	f107 020c 	add.w	r2, r7, #12
 80055be:	4611      	mov	r1, r2
 80055c0:	4618      	mov	r0, r3
 80055c2:	f000 ff65 	bl	8006490 <HAL_GPIO_Init>
 80055c6:	e036      	b.n	8005636 <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80055c8:	4b1f      	ldr	r3, [pc, #124]	@ (8005648 <BSP_PB_Init+0xdc>)
 80055ca:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80055cc:	79fb      	ldrb	r3, [r7, #7]
 80055ce:	4a1d      	ldr	r2, [pc, #116]	@ (8005644 <BSP_PB_Init+0xd8>)
 80055d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055d4:	f107 020c 	add.w	r2, r7, #12
 80055d8:	4611      	mov	r1, r2
 80055da:	4618      	mov	r0, r3
 80055dc:	f000 ff58 	bl	8006490 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80055e0:	79fa      	ldrb	r2, [r7, #7]
 80055e2:	4613      	mov	r3, r2
 80055e4:	005b      	lsls	r3, r3, #1
 80055e6:	4413      	add	r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	4a18      	ldr	r2, [pc, #96]	@ (800564c <BSP_PB_Init+0xe0>)
 80055ec:	441a      	add	r2, r3
 80055ee:	79fb      	ldrb	r3, [r7, #7]
 80055f0:	4917      	ldr	r1, [pc, #92]	@ (8005650 <BSP_PB_Init+0xe4>)
 80055f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80055f6:	4619      	mov	r1, r3
 80055f8:	4610      	mov	r0, r2
 80055fa:	f000 fc25 	bl	8005e48 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80055fe:	79fa      	ldrb	r2, [r7, #7]
 8005600:	4613      	mov	r3, r2
 8005602:	005b      	lsls	r3, r3, #1
 8005604:	4413      	add	r3, r2
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	4a10      	ldr	r2, [pc, #64]	@ (800564c <BSP_PB_Init+0xe0>)
 800560a:	1898      	adds	r0, r3, r2
 800560c:	79fb      	ldrb	r3, [r7, #7]
 800560e:	4a11      	ldr	r2, [pc, #68]	@ (8005654 <BSP_PB_Init+0xe8>)
 8005610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005614:	461a      	mov	r2, r3
 8005616:	2100      	movs	r1, #0
 8005618:	f000 fbea 	bl	8005df0 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800561c:	2018      	movs	r0, #24
 800561e:	79fb      	ldrb	r3, [r7, #7]
 8005620:	4a0d      	ldr	r2, [pc, #52]	@ (8005658 <BSP_PB_Init+0xec>)
 8005622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005626:	2200      	movs	r2, #0
 8005628:	4619      	mov	r1, r3
 800562a:	f000 fafb 	bl	8005c24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800562e:	2318      	movs	r3, #24
 8005630:	4618      	mov	r0, r3
 8005632:	f000 fb11 	bl	8005c58 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3720      	adds	r7, #32
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	44020c00 	.word	0x44020c00
 8005644:	20000018 	.word	0x20000018
 8005648:	10110000 	.word	0x10110000
 800564c:	20002c40 	.word	0x20002c40
 8005650:	080195c8 	.word	0x080195c8
 8005654:	2000001c 	.word	0x2000001c
 8005658:	20000020 	.word	0x20000020

0800565c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	4603      	mov	r3, r0
 8005664:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8005666:	79fa      	ldrb	r2, [r7, #7]
 8005668:	4613      	mov	r3, r2
 800566a:	005b      	lsls	r3, r3, #1
 800566c:	4413      	add	r3, r2
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	4a04      	ldr	r2, [pc, #16]	@ (8005684 <BSP_PB_IRQHandler+0x28>)
 8005672:	4413      	add	r3, r2
 8005674:	4618      	mov	r0, r3
 8005676:	f000 fbfb 	bl	8005e70 <HAL_EXTI_IRQHandler>
}
 800567a:	bf00      	nop
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	20002c40 	.word	0x20002c40

08005688 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	4603      	mov	r3, r0
 8005690:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8005692:	bf00      	nop
 8005694:	370c      	adds	r7, #12
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
	...

080056a0 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	4603      	mov	r3, r0
 80056a8:	6039      	str	r1, [r7, #0]
 80056aa:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80056ac:	2300      	movs	r3, #0
 80056ae:	60fb      	str	r3, [r7, #12]

  if (COM >= COM_NBR)
 80056b0:	79fb      	ldrb	r3, [r7, #7]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d003      	beq.n	80056be <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80056b6:	f06f 0301 	mvn.w	r3, #1
 80056ba:	60fb      	str	r3, [r7, #12]
 80056bc:	e018      	b.n	80056f0 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80056be:	79fb      	ldrb	r3, [r7, #7]
 80056c0:	2294      	movs	r2, #148	@ 0x94
 80056c2:	fb02 f303 	mul.w	r3, r2, r3
 80056c6:	4a0d      	ldr	r2, [pc, #52]	@ (80056fc <BSP_COM_Init+0x5c>)
 80056c8:	4413      	add	r3, r2
 80056ca:	4618      	mov	r0, r3
 80056cc:	f000 f870 	bl	80057b0 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80056d0:	79fb      	ldrb	r3, [r7, #7]
 80056d2:	2294      	movs	r2, #148	@ 0x94
 80056d4:	fb02 f303 	mul.w	r3, r2, r3
 80056d8:	4a08      	ldr	r2, [pc, #32]	@ (80056fc <BSP_COM_Init+0x5c>)
 80056da:	4413      	add	r3, r2
 80056dc:	6839      	ldr	r1, [r7, #0]
 80056de:	4618      	mov	r0, r3
 80056e0:	f000 f80e 	bl	8005700 <MX_USART_Init>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d002      	beq.n	80056f0 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80056ea:	f06f 0303 	mvn.w	r3, #3
 80056ee:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80056f0:	68fb      	ldr	r3, [r7, #12]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	20002c4c 	.word	0x20002c4c

08005700 <MX_USART_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 800570a:	4b16      	ldr	r3, [pc, #88]	@ (8005764 <MX_USART_Init+0x64>)
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	220c      	movs	r2, #12
 800571e:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	895b      	ldrh	r3, [r3, #10]
 8005724:	461a      	mov	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	685a      	ldr	r2, [r3, #4]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	891b      	ldrh	r3, [r3, #8]
 8005736:	461a      	mov	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	899b      	ldrh	r3, [r3, #12]
 8005740:	461a      	mov	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800574c:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f00b fbc2 	bl	8010ede <HAL_UART_Init>
 800575a:	4603      	mov	r3, r0
}
 800575c:	4618      	mov	r0, r3
 800575e:	3708      	adds	r7, #8
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}
 8005764:	20000008 	.word	0x20000008

08005768 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8005770:	4b09      	ldr	r3, [pc, #36]	@ (8005798 <__io_putchar+0x30>)
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	461a      	mov	r2, r3
 8005776:	2394      	movs	r3, #148	@ 0x94
 8005778:	fb02 f303 	mul.w	r3, r2, r3
 800577c:	4a07      	ldr	r2, [pc, #28]	@ (800579c <__io_putchar+0x34>)
 800577e:	1898      	adds	r0, r3, r2
 8005780:	1d39      	adds	r1, r7, #4
 8005782:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005786:	2201      	movs	r2, #1
 8005788:	f00b fbf9 	bl	8010f7e <HAL_UART_Transmit>
  return ch;
 800578c:	687b      	ldr	r3, [r7, #4]
}
 800578e:	4618      	mov	r0, r3
 8005790:	3708      	adds	r7, #8
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	20002ce0 	.word	0x20002ce0
 800579c:	20002c4c 	.word	0x20002c4c

080057a0 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80057a4:	2000      	movs	r0, #0
 80057a6:	f7ff ff6f 	bl	8005688 <BSP_PB_Callback>
}
 80057aa:	bf00      	nop
 80057ac:	bd80      	pop	{r7, pc}
	...

080057b0 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b08a      	sub	sp, #40	@ 0x28
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80057b8:	4b27      	ldr	r3, [pc, #156]	@ (8005858 <COM1_MspInit+0xa8>)
 80057ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057be:	4a26      	ldr	r2, [pc, #152]	@ (8005858 <COM1_MspInit+0xa8>)
 80057c0:	f043 0308 	orr.w	r3, r3, #8
 80057c4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80057c8:	4b23      	ldr	r3, [pc, #140]	@ (8005858 <COM1_MspInit+0xa8>)
 80057ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057ce:	f003 0308 	and.w	r3, r3, #8
 80057d2:	613b      	str	r3, [r7, #16]
 80057d4:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80057d6:	4b20      	ldr	r3, [pc, #128]	@ (8005858 <COM1_MspInit+0xa8>)
 80057d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057dc:	4a1e      	ldr	r2, [pc, #120]	@ (8005858 <COM1_MspInit+0xa8>)
 80057de:	f043 0308 	orr.w	r3, r3, #8
 80057e2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80057e6:	4b1c      	ldr	r3, [pc, #112]	@ (8005858 <COM1_MspInit+0xa8>)
 80057e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057ec:	f003 0308 	and.w	r3, r3, #8
 80057f0:	60fb      	str	r3, [r7, #12]
 80057f2:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80057f4:	4b18      	ldr	r3, [pc, #96]	@ (8005858 <COM1_MspInit+0xa8>)
 80057f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80057fa:	4a17      	ldr	r2, [pc, #92]	@ (8005858 <COM1_MspInit+0xa8>)
 80057fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005800:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005804:	4b14      	ldr	r3, [pc, #80]	@ (8005858 <COM1_MspInit+0xa8>)
 8005806:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800580a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800580e:	60bb      	str	r3, [r7, #8]
 8005810:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8005812:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005816:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005818:	2302      	movs	r3, #2
 800581a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800581c:	2302      	movs	r3, #2
 800581e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005820:	2301      	movs	r3, #1
 8005822:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8005824:	2307      	movs	r3, #7
 8005826:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8005828:	f107 0314 	add.w	r3, r7, #20
 800582c:	4619      	mov	r1, r3
 800582e:	480b      	ldr	r0, [pc, #44]	@ (800585c <COM1_MspInit+0xac>)
 8005830:	f000 fe2e 	bl	8006490 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8005834:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005838:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800583a:	2302      	movs	r3, #2
 800583c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800583e:	2307      	movs	r3, #7
 8005840:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8005842:	f107 0314 	add.w	r3, r7, #20
 8005846:	4619      	mov	r1, r3
 8005848:	4804      	ldr	r0, [pc, #16]	@ (800585c <COM1_MspInit+0xac>)
 800584a:	f000 fe21 	bl	8006490 <HAL_GPIO_Init>
}
 800584e:	bf00      	nop
 8005850:	3728      	adds	r7, #40	@ 0x28
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	44020c00 	.word	0x44020c00
 800585c:	42020c00 	.word	0x42020c00

08005860 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005864:	2003      	movs	r0, #3
 8005866:	f000 f9d2 	bl	8005c0e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800586a:	f004 fd6b 	bl	800a344 <HAL_RCC_GetSysClockFreq>
 800586e:	4602      	mov	r2, r0
 8005870:	4b0c      	ldr	r3, [pc, #48]	@ (80058a4 <HAL_Init+0x44>)
 8005872:	6a1b      	ldr	r3, [r3, #32]
 8005874:	f003 030f 	and.w	r3, r3, #15
 8005878:	490b      	ldr	r1, [pc, #44]	@ (80058a8 <HAL_Init+0x48>)
 800587a:	5ccb      	ldrb	r3, [r1, r3]
 800587c:	fa22 f303 	lsr.w	r3, r2, r3
 8005880:	4a0a      	ldr	r2, [pc, #40]	@ (80058ac <HAL_Init+0x4c>)
 8005882:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8005884:	2004      	movs	r0, #4
 8005886:	f000 fa25 	bl	8005cd4 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800588a:	200f      	movs	r0, #15
 800588c:	f000 f810 	bl	80058b0 <HAL_InitTick>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d001      	beq.n	800589a <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e002      	b.n	80058a0 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800589a:	f7ff f81d 	bl	80048d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	44020c00 	.word	0x44020c00
 80058a8:	080195a8 	.word	0x080195a8
 80058ac:	20000004 	.word	0x20000004

080058b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80058b8:	2300      	movs	r3, #0
 80058ba:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80058bc:	4b33      	ldr	r3, [pc, #204]	@ (800598c <HAL_InitTick+0xdc>)
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d101      	bne.n	80058c8 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e05c      	b.n	8005982 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80058c8:	4b31      	ldr	r3, [pc, #196]	@ (8005990 <HAL_InitTick+0xe0>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0304 	and.w	r3, r3, #4
 80058d0:	2b04      	cmp	r3, #4
 80058d2:	d10c      	bne.n	80058ee <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80058d4:	4b2f      	ldr	r3, [pc, #188]	@ (8005994 <HAL_InitTick+0xe4>)
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	4b2c      	ldr	r3, [pc, #176]	@ (800598c <HAL_InitTick+0xdc>)
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	4619      	mov	r1, r3
 80058de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80058e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80058e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ea:	60fb      	str	r3, [r7, #12]
 80058ec:	e037      	b.n	800595e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80058ee:	f000 fa49 	bl	8005d84 <HAL_SYSTICK_GetCLKSourceConfig>
 80058f2:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d023      	beq.n	8005942 <HAL_InitTick+0x92>
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d82d      	bhi.n	800595c <HAL_InitTick+0xac>
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d003      	beq.n	800590e <HAL_InitTick+0x5e>
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	2b01      	cmp	r3, #1
 800590a:	d00d      	beq.n	8005928 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 800590c:	e026      	b.n	800595c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800590e:	4b21      	ldr	r3, [pc, #132]	@ (8005994 <HAL_InitTick+0xe4>)
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	4b1e      	ldr	r3, [pc, #120]	@ (800598c <HAL_InitTick+0xdc>)
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	4619      	mov	r1, r3
 8005918:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800591c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005920:	fbb2 f3f3 	udiv	r3, r2, r3
 8005924:	60fb      	str	r3, [r7, #12]
        break;
 8005926:	e01a      	b.n	800595e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8005928:	4b18      	ldr	r3, [pc, #96]	@ (800598c <HAL_InitTick+0xdc>)
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	461a      	mov	r2, r3
 800592e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005932:	fbb3 f3f2 	udiv	r3, r3, r2
 8005936:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800593a:	fbb2 f3f3 	udiv	r3, r2, r3
 800593e:	60fb      	str	r3, [r7, #12]
        break;
 8005940:	e00d      	b.n	800595e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8005942:	4b12      	ldr	r3, [pc, #72]	@ (800598c <HAL_InitTick+0xdc>)
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	461a      	mov	r2, r3
 8005948:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800594c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005950:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005954:	fbb2 f3f3 	udiv	r3, r2, r3
 8005958:	60fb      	str	r3, [r7, #12]
        break;
 800595a:	e000      	b.n	800595e <HAL_InitTick+0xae>
        break;
 800595c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f000 f996 	bl	8005c90 <HAL_SYSTICK_Config>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d001      	beq.n	800596e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e009      	b.n	8005982 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800596e:	2200      	movs	r2, #0
 8005970:	6879      	ldr	r1, [r7, #4]
 8005972:	f04f 30ff 	mov.w	r0, #4294967295
 8005976:	f000 f955 	bl	8005c24 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800597a:	4a07      	ldr	r2, [pc, #28]	@ (8005998 <HAL_InitTick+0xe8>)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3710      	adds	r7, #16
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	20000028 	.word	0x20000028
 8005990:	e000e010 	.word	0xe000e010
 8005994:	20000004 	.word	0x20000004
 8005998:	20000024 	.word	0x20000024

0800599c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800599c:	b480      	push	{r7}
 800599e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80059a0:	4b06      	ldr	r3, [pc, #24]	@ (80059bc <HAL_IncTick+0x20>)
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	461a      	mov	r2, r3
 80059a6:	4b06      	ldr	r3, [pc, #24]	@ (80059c0 <HAL_IncTick+0x24>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4413      	add	r3, r2
 80059ac:	4a04      	ldr	r2, [pc, #16]	@ (80059c0 <HAL_IncTick+0x24>)
 80059ae:	6013      	str	r3, [r2, #0]
}
 80059b0:	bf00      	nop
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	20000028 	.word	0x20000028
 80059c0:	20002ce4 	.word	0x20002ce4

080059c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80059c4:	b480      	push	{r7}
 80059c6:	af00      	add	r7, sp, #0
  return uwTick;
 80059c8:	4b03      	ldr	r3, [pc, #12]	@ (80059d8 <HAL_GetTick+0x14>)
 80059ca:	681b      	ldr	r3, [r3, #0]
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	20002ce4 	.word	0x20002ce4

080059dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80059e4:	f7ff ffee 	bl	80059c4 <HAL_GetTick>
 80059e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f4:	d005      	beq.n	8005a02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80059f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005a20 <HAL_Delay+0x44>)
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	461a      	mov	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4413      	add	r3, r2
 8005a00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005a02:	bf00      	nop
 8005a04:	f7ff ffde 	bl	80059c4 <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d8f7      	bhi.n	8005a04 <HAL_Delay+0x28>
  {
  }
}
 8005a14:	bf00      	nop
 8005a16:	bf00      	nop
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	20000028 	.word	0x20000028

08005a24 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8005a24:	b480      	push	{r7}
 8005a26:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8005a28:	4b03      	ldr	r3, [pc, #12]	@ (8005a38 <HAL_GetUIDw0+0x14>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	08fff800 	.word	0x08fff800

08005a3c <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8005a40:	4b03      	ldr	r3, [pc, #12]	@ (8005a50 <HAL_GetUIDw1+0x14>)
 8005a42:	681b      	ldr	r3, [r3, #0]
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	08fff804 	.word	0x08fff804

08005a54 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8005a54:	b480      	push	{r7}
 8005a56:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8005a58:	4b03      	ldr	r3, [pc, #12]	@ (8005a68 <HAL_GetUIDw2+0x14>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr
 8005a66:	bf00      	nop
 8005a68:	08fff808 	.word	0x08fff808

08005a6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f003 0307 	and.w	r3, r3, #7
 8005a7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8005ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005a88:	4013      	ands	r3, r2
 8005a8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005a98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a9e:	4a04      	ldr	r2, [pc, #16]	@ (8005ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	60d3      	str	r3, [r2, #12]
}
 8005aa4:	bf00      	nop
 8005aa6:	3714      	adds	r7, #20
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr
 8005ab0:	e000ed00 	.word	0xe000ed00

08005ab4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ab8:	4b04      	ldr	r3, [pc, #16]	@ (8005acc <__NVIC_GetPriorityGrouping+0x18>)
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	0a1b      	lsrs	r3, r3, #8
 8005abe:	f003 0307 	and.w	r3, r3, #7
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr
 8005acc:	e000ed00 	.word	0xe000ed00

08005ad0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005ada:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	db0b      	blt.n	8005afa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ae2:	88fb      	ldrh	r3, [r7, #6]
 8005ae4:	f003 021f 	and.w	r2, r3, #31
 8005ae8:	4907      	ldr	r1, [pc, #28]	@ (8005b08 <__NVIC_EnableIRQ+0x38>)
 8005aea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005aee:	095b      	lsrs	r3, r3, #5
 8005af0:	2001      	movs	r0, #1
 8005af2:	fa00 f202 	lsl.w	r2, r0, r2
 8005af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005afa:	bf00      	nop
 8005afc:	370c      	adds	r7, #12
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	e000e100 	.word	0xe000e100

08005b0c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	4603      	mov	r3, r0
 8005b14:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005b16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	db12      	blt.n	8005b44 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b1e:	88fb      	ldrh	r3, [r7, #6]
 8005b20:	f003 021f 	and.w	r2, r3, #31
 8005b24:	490a      	ldr	r1, [pc, #40]	@ (8005b50 <__NVIC_DisableIRQ+0x44>)
 8005b26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b2a:	095b      	lsrs	r3, r3, #5
 8005b2c:	2001      	movs	r0, #1
 8005b2e:	fa00 f202 	lsl.w	r2, r0, r2
 8005b32:	3320      	adds	r3, #32
 8005b34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005b38:	f3bf 8f4f 	dsb	sy
}
 8005b3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005b3e:	f3bf 8f6f 	isb	sy
}
 8005b42:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr
 8005b50:	e000e100 	.word	0xe000e100

08005b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	6039      	str	r1, [r7, #0]
 8005b5e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005b60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	db0a      	blt.n	8005b7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	b2da      	uxtb	r2, r3
 8005b6c:	490c      	ldr	r1, [pc, #48]	@ (8005ba0 <__NVIC_SetPriority+0x4c>)
 8005b6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b72:	0112      	lsls	r2, r2, #4
 8005b74:	b2d2      	uxtb	r2, r2
 8005b76:	440b      	add	r3, r1
 8005b78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005b7c:	e00a      	b.n	8005b94 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	b2da      	uxtb	r2, r3
 8005b82:	4908      	ldr	r1, [pc, #32]	@ (8005ba4 <__NVIC_SetPriority+0x50>)
 8005b84:	88fb      	ldrh	r3, [r7, #6]
 8005b86:	f003 030f 	and.w	r3, r3, #15
 8005b8a:	3b04      	subs	r3, #4
 8005b8c:	0112      	lsls	r2, r2, #4
 8005b8e:	b2d2      	uxtb	r2, r2
 8005b90:	440b      	add	r3, r1
 8005b92:	761a      	strb	r2, [r3, #24]
}
 8005b94:	bf00      	nop
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr
 8005ba0:	e000e100 	.word	0xe000e100
 8005ba4:	e000ed00 	.word	0xe000ed00

08005ba8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b089      	sub	sp, #36	@ 0x24
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f003 0307 	and.w	r3, r3, #7
 8005bba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	f1c3 0307 	rsb	r3, r3, #7
 8005bc2:	2b04      	cmp	r3, #4
 8005bc4:	bf28      	it	cs
 8005bc6:	2304      	movcs	r3, #4
 8005bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	3304      	adds	r3, #4
 8005bce:	2b06      	cmp	r3, #6
 8005bd0:	d902      	bls.n	8005bd8 <NVIC_EncodePriority+0x30>
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	3b03      	subs	r3, #3
 8005bd6:	e000      	b.n	8005bda <NVIC_EncodePriority+0x32>
 8005bd8:	2300      	movs	r3, #0
 8005bda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	fa02 f303 	lsl.w	r3, r2, r3
 8005be6:	43da      	mvns	r2, r3
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	401a      	ands	r2, r3
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8005bfa:	43d9      	mvns	r1, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c00:	4313      	orrs	r3, r2
         );
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3724      	adds	r7, #36	@ 0x24
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr

08005c0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b082      	sub	sp, #8
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f7ff ff28 	bl	8005a6c <__NVIC_SetPriorityGrouping>
}
 8005c1c:	bf00      	nop
 8005c1e:	3708      	adds	r7, #8
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b086      	sub	sp, #24
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
 8005c30:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005c32:	f7ff ff3f 	bl	8005ab4 <__NVIC_GetPriorityGrouping>
 8005c36:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	68b9      	ldr	r1, [r7, #8]
 8005c3c:	6978      	ldr	r0, [r7, #20]
 8005c3e:	f7ff ffb3 	bl	8005ba8 <NVIC_EncodePriority>
 8005c42:	4602      	mov	r2, r0
 8005c44:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005c48:	4611      	mov	r1, r2
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7ff ff82 	bl	8005b54 <__NVIC_SetPriority>
}
 8005c50:	bf00      	nop
 8005c52:	3718      	adds	r7, #24
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	4603      	mov	r3, r0
 8005c60:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7ff ff32 	bl	8005ad0 <__NVIC_EnableIRQ>
}
 8005c6c:	bf00      	nop
 8005c6e:	3708      	adds	r7, #8
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005c7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f7ff ff42 	bl	8005b0c <__NVIC_DisableIRQ>
}
 8005c88:	bf00      	nop
 8005c8a:	3708      	adds	r7, #8
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ca0:	d301      	bcc.n	8005ca6 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e00d      	b.n	8005cc2 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8005ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8005cd0 <HAL_SYSTICK_Config+0x40>)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	3b01      	subs	r3, #1
 8005cac:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8005cae:	4b08      	ldr	r3, [pc, #32]	@ (8005cd0 <HAL_SYSTICK_Config+0x40>)
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8005cb4:	4b06      	ldr	r3, [pc, #24]	@ (8005cd0 <HAL_SYSTICK_Config+0x40>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a05      	ldr	r2, [pc, #20]	@ (8005cd0 <HAL_SYSTICK_Config+0x40>)
 8005cba:	f043 0303 	orr.w	r3, r3, #3
 8005cbe:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	370c      	adds	r7, #12
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	e000e010 	.word	0xe000e010

08005cd4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b04      	cmp	r3, #4
 8005ce0:	d844      	bhi.n	8005d6c <HAL_SYSTICK_CLKSourceConfig+0x98>
 8005ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ce8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8005ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce8:	08005d0b 	.word	0x08005d0b
 8005cec:	08005d29 	.word	0x08005d29
 8005cf0:	08005d4b 	.word	0x08005d4b
 8005cf4:	08005d6d 	.word	0x08005d6d
 8005cf8:	08005cfd 	.word	0x08005cfd
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8005cfc:	4b1f      	ldr	r3, [pc, #124]	@ (8005d7c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a1e      	ldr	r2, [pc, #120]	@ (8005d7c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005d02:	f043 0304 	orr.w	r3, r3, #4
 8005d06:	6013      	str	r3, [r2, #0]
      break;
 8005d08:	e031      	b.n	8005d6e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8005d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8005d7c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a1b      	ldr	r2, [pc, #108]	@ (8005d7c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005d10:	f023 0304 	bic.w	r3, r3, #4
 8005d14:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8005d16:	4b1a      	ldr	r3, [pc, #104]	@ (8005d80 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005d18:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005d1c:	4a18      	ldr	r2, [pc, #96]	@ (8005d80 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005d1e:	f023 030c 	bic.w	r3, r3, #12
 8005d22:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8005d26:	e022      	b.n	8005d6e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8005d28:	4b14      	ldr	r3, [pc, #80]	@ (8005d7c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a13      	ldr	r2, [pc, #76]	@ (8005d7c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005d2e:	f023 0304 	bic.w	r3, r3, #4
 8005d32:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8005d34:	4b12      	ldr	r3, [pc, #72]	@ (8005d80 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005d36:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005d3a:	f023 030c 	bic.w	r3, r3, #12
 8005d3e:	4a10      	ldr	r2, [pc, #64]	@ (8005d80 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005d40:	f043 0304 	orr.w	r3, r3, #4
 8005d44:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8005d48:	e011      	b.n	8005d6e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8005d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8005d7c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a0b      	ldr	r2, [pc, #44]	@ (8005d7c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005d50:	f023 0304 	bic.w	r3, r3, #4
 8005d54:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8005d56:	4b0a      	ldr	r3, [pc, #40]	@ (8005d80 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005d58:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005d5c:	f023 030c 	bic.w	r3, r3, #12
 8005d60:	4a07      	ldr	r2, [pc, #28]	@ (8005d80 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005d62:	f043 0308 	orr.w	r3, r3, #8
 8005d66:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8005d6a:	e000      	b.n	8005d6e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8005d6c:	bf00      	nop
  }
}
 8005d6e:	bf00      	nop
 8005d70:	370c      	adds	r7, #12
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	e000e010 	.word	0xe000e010
 8005d80:	44020c00 	.word	0x44020c00

08005d84 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8005d8a:	4b17      	ldr	r3, [pc, #92]	@ (8005de8 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0304 	and.w	r3, r3, #4
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d002      	beq.n	8005d9c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8005d96:	2304      	movs	r3, #4
 8005d98:	607b      	str	r3, [r7, #4]
 8005d9a:	e01e      	b.n	8005dda <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8005d9c:	4b13      	ldr	r3, [pc, #76]	@ (8005dec <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8005d9e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005da2:	f003 030c 	and.w	r3, r3, #12
 8005da6:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	2b08      	cmp	r3, #8
 8005dac:	d00f      	beq.n	8005dce <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	2b08      	cmp	r3, #8
 8005db2:	d80f      	bhi.n	8005dd4 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d003      	beq.n	8005dc2 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	2b04      	cmp	r3, #4
 8005dbe:	d003      	beq.n	8005dc8 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8005dc0:	e008      	b.n	8005dd4 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	607b      	str	r3, [r7, #4]
        break;
 8005dc6:	e008      	b.n	8005dda <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	607b      	str	r3, [r7, #4]
        break;
 8005dcc:	e005      	b.n	8005dda <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8005dce:	2302      	movs	r3, #2
 8005dd0:	607b      	str	r3, [r7, #4]
        break;
 8005dd2:	e002      	b.n	8005dda <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	607b      	str	r3, [r7, #4]
        break;
 8005dd8:	bf00      	nop
    }
  }
  return systick_source;
 8005dda:	687b      	ldr	r3, [r7, #4]
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr
 8005de8:	e000e010 	.word	0xe000e010
 8005dec:	44020c00 	.word	0x44020c00

08005df0 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8005df0:	b480      	push	{r7}
 8005df2:	b087      	sub	sp, #28
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	460b      	mov	r3, r1
 8005dfa:	607a      	str	r2, [r7, #4]
 8005dfc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8005e02:	7afb      	ldrb	r3, [r7, #11]
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	d011      	beq.n	8005e2c <HAL_EXTI_RegisterCallback+0x3c>
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	dc13      	bgt.n	8005e34 <HAL_EXTI_RegisterCallback+0x44>
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d002      	beq.n	8005e16 <HAL_EXTI_RegisterCallback+0x26>
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d007      	beq.n	8005e24 <HAL_EXTI_RegisterCallback+0x34>
 8005e14:	e00e      	b.n	8005e34 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	609a      	str	r2, [r3, #8]
      break;
 8005e22:	e00a      	b.n	8005e3a <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	605a      	str	r2, [r3, #4]
      break;
 8005e2a:	e006      	b.n	8005e3a <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	609a      	str	r2, [r3, #8]
      break;
 8005e32:	e002      	b.n	8005e3a <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	75fb      	strb	r3, [r7, #23]
      break;
 8005e38:	bf00      	nop
  }

  return status;
 8005e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	371c      	adds	r7, #28
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d101      	bne.n	8005e5c <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e003      	b.n	8005e64 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	683a      	ldr	r2, [r7, #0]
 8005e60:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005e62:	2300      	movs	r3, #0
  }
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b086      	sub	sp, #24
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	0c1b      	lsrs	r3, r3, #16
 8005e7e:	f003 0301 	and.w	r3, r3, #1
 8005e82:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 031f 	and.w	r3, r3, #31
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e92:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	015a      	lsls	r2, r3, #5
 8005e98:	4b17      	ldr	r3, [pc, #92]	@ (8005ef8 <HAL_EXTI_IRQHandler+0x88>)
 8005e9a:	4413      	add	r3, r2
 8005e9c:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	693a      	ldr	r2, [r7, #16]
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d009      	beq.n	8005ec2 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d002      	beq.n	8005ec2 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	015a      	lsls	r2, r3, #5
 8005ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8005efc <HAL_EXTI_IRQHandler+0x8c>)
 8005ec8:	4413      	add	r3, r2
 8005eca:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d009      	beq.n	8005ef0 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d002      	beq.n	8005ef0 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	4798      	blx	r3
    }
  }
}
 8005ef0:	bf00      	nop
 8005ef2:	3718      	adds	r7, #24
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}
 8005ef8:	4402200c 	.word	0x4402200c
 8005efc:	44022010 	.word	0x44022010

08005f00 <HAL_FLASH_Program>:
  * @param  DataAddress specifies the address of data to be programmed
  *         This parameter shall be 32-bit aligned
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b088      	sub	sp, #32
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005f0c:	4b31      	ldr	r3, [pc, #196]	@ (8005fd4 <HAL_FLASH_Program+0xd4>)
 8005f0e:	2200      	movs	r2, #0
 8005f10:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005f12:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005f16:	f000 f8ad 	bl	8006074 <FLASH_WaitForLastOperation>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	77fb      	strb	r3, [r7, #31]

  if (status == HAL_OK)
 8005f1e:	7ffb      	ldrb	r3, [r7, #31]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d152      	bne.n	8005fca <HAL_FLASH_Program+0xca>
  {
    /* Set current operation type */
    pFlash.ProcedureOnGoing = TypeProgram;
 8005f24:	4a2b      	ldr	r2, [pc, #172]	@ (8005fd4 <HAL_FLASH_Program+0xd4>)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6093      	str	r3, [r2, #8]

    /* Access to SECCR or NSCR depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8005f2a:	4b2b      	ldr	r3, [pc, #172]	@ (8005fd8 <HAL_FLASH_Program+0xd8>)
 8005f2c:	61bb      	str	r3, [r7, #24]
#else
    reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

    if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_QUADWORD)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d104      	bne.n	8005f42 <HAL_FLASH_Program+0x42>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_USER_MEM_ADDRESS(FlashAddress));

      /* Program a quad-word (128-bit) at a specified address */
      FLASH_Program_QuadWord(FlashAddress, DataAddress);
 8005f38:	6879      	ldr	r1, [r7, #4]
 8005f3a:	68b8      	ldr	r0, [r7, #8]
 8005f3c:	f000 f8e8 	bl	8006110 <FLASH_Program_QuadWord>
 8005f40:	e026      	b.n	8005f90 <HAL_FLASH_Program+0x90>
    }
#if defined (FLASH_SR_OBKERR)
    else if ((TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK) || (TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK_ALT))
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	4a25      	ldr	r2, [pc, #148]	@ (8005fdc <HAL_FLASH_Program+0xdc>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d003      	beq.n	8005f52 <HAL_FLASH_Program+0x52>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	4a24      	ldr	r2, [pc, #144]	@ (8005fe0 <HAL_FLASH_Program+0xe0>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d104      	bne.n	8005f5c <HAL_FLASH_Program+0x5c>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_OBK_ADDRESS(FlashAddress));

      /* Program a quad-word (128-bit) of OBK at a specified address */
      FLASH_Program_QuadWord_OBK(FlashAddress, DataAddress);
 8005f52:	6879      	ldr	r1, [r7, #4]
 8005f54:	68b8      	ldr	r0, [r7, #8]
 8005f56:	f000 f917 	bl	8006188 <FLASH_Program_QuadWord_OBK>
 8005f5a:	e019      	b.n	8005f90 <HAL_FLASH_Program+0x90>
    }
#endif /* FLASH_SR_OBKERR */
#if defined (FLASH_EDATAR_EDATA_EN)
    else if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_HALFWORD_EDATA)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005f62:	4a20      	ldr	r2, [pc, #128]	@ (8005fe4 <HAL_FLASH_Program+0xe4>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d104      	bne.n	8005f72 <HAL_FLASH_Program+0x72>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_EDATA_ADDRESS(FlashAddress));

      /* Program a Flash high-cycle data half-word at a specified address */
      FLASH_Program_HalfWord(FlashAddress, DataAddress);
 8005f68:	6879      	ldr	r1, [r7, #4]
 8005f6a:	68b8      	ldr	r0, [r7, #8]
 8005f6c:	f000 f958 	bl	8006220 <FLASH_Program_HalfWord>
 8005f70:	e00e      	b.n	8005f90 <HAL_FLASH_Program+0x90>
    }
    else if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_WORD_EDATA)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005f78:	4a1b      	ldr	r2, [pc, #108]	@ (8005fe8 <HAL_FLASH_Program+0xe8>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d104      	bne.n	8005f88 <HAL_FLASH_Program+0x88>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_EDATA_ADDRESS(FlashAddress));

      /* Program a Flash high-cycle data half-word at a specified address */
      FLASH_Program_Word(FlashAddress, DataAddress);
 8005f7e:	6879      	ldr	r1, [r7, #4]
 8005f80:	68b8      	ldr	r0, [r7, #8]
 8005f82:	f000 f967 	bl	8006254 <FLASH_Program_Word>
 8005f86:	e003      	b.n	8005f90 <HAL_FLASH_Program+0x90>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_OTP_ADDRESS(FlashAddress));

      /* Program an OTP half-word at a specified address */
      FLASH_Program_HalfWord(FlashAddress, DataAddress);
 8005f88:	6879      	ldr	r1, [r7, #4]
 8005f8a:	68b8      	ldr	r0, [r7, #8]
 8005f8c:	f000 f948 	bl	8006220 <FLASH_Program_HalfWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005f90:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005f94:	f000 f86e 	bl	8006074 <FLASH_WaitForLastOperation>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	77fb      	strb	r3, [r7, #31]

#if defined (FLASH_SR_OBKERR)
    /* If the program operation is completed, disable the PG */
    CLEAR_BIT((*reg_cr), (TypeProgram & ~(FLASH_NON_SECURE_MASK | FLASH_OBK | FLASH_OTP | FLASH_OBKCFGR_ALT_SECT)));
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f023 4330 	bic.w	r3, r3, #2952790016	@ 0xb0000000
 8005fa6:	f023 0304 	bic.w	r3, r3, #4
 8005faa:	43db      	mvns	r3, r3
 8005fac:	401a      	ands	r2, r3
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	601a      	str	r2, [r3, #0]

    /* Clear alternate sector bit */
    if (TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK_ALT)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	4a0a      	ldr	r2, [pc, #40]	@ (8005fe0 <HAL_FLASH_Program+0xe0>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d107      	bne.n	8005fca <HAL_FLASH_Program+0xca>
    {
      reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 8005fba:	4b0c      	ldr	r3, [pc, #48]	@ (8005fec <HAL_FLASH_Program+0xec>)
 8005fbc:	617b      	str	r3, [r7, #20]
      CLEAR_BIT((*reg_obkcfgr), FLASH_OBKCFGR_ALT_SECT);
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f023 0204 	bic.w	r2, r3, #4
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	601a      	str	r2, [r3, #0]
    /* If the program operation is completed, disable the PG */
    CLEAR_BIT((*reg_cr), (TypeProgram & ~(FLASH_NON_SECURE_MASK |  FLASH_OTP)));
#endif /* FLASH_SR_OBKERR */
  }
  /* return status */
  return status;
 8005fca:	7ffb      	ldrb	r3, [r7, #31]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3720      	adds	r7, #32
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	2000002c 	.word	0x2000002c
 8005fd8:	40022028 	.word	0x40022028
 8005fdc:	10000002 	.word	0x10000002
 8005fe0:	10000006 	.word	0x10000006
 8005fe4:	40000002 	.word	0x40000002
 8005fe8:	60000002 	.word	0x60000002
 8005fec:	40022040 	.word	0x40022040

08005ff0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 8005ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8006030 <HAL_FLASH_Unlock+0x40>)
 8005ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ffe:	f003 0301 	and.w	r3, r3, #1
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00d      	beq.n	8006022 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Control Register access */
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 8006006:	4b0a      	ldr	r3, [pc, #40]	@ (8006030 <HAL_FLASH_Unlock+0x40>)
 8006008:	4a0a      	ldr	r2, [pc, #40]	@ (8006034 <HAL_FLASH_Unlock+0x44>)
 800600a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 800600c:	4b08      	ldr	r3, [pc, #32]	@ (8006030 <HAL_FLASH_Unlock+0x40>)
 800600e:	4a0a      	ldr	r2, [pc, #40]	@ (8006038 <HAL_FLASH_Unlock+0x48>)
 8006010:	605a      	str	r2, [r3, #4]

    /* Verify Flash CR is unlocked */
    if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 8006012:	4b07      	ldr	r3, [pc, #28]	@ (8006030 <HAL_FLASH_Unlock+0x40>)
 8006014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006016:	f003 0301 	and.w	r3, r3, #1
 800601a:	2b00      	cmp	r3, #0
 800601c:	d001      	beq.n	8006022 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 8006022:	79fb      	ldrb	r3, [r7, #7]
}
 8006024:	4618      	mov	r0, r3
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr
 8006030:	40022000 	.word	0x40022000
 8006034:	45670123 	.word	0x45670123
 8006038:	cdef89ab 	.word	0xcdef89ab

0800603c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006042:	2300      	movs	r3, #0
 8006044:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Control Register access */
  SET_BIT(FLASH->NSCR, FLASH_CR_LOCK);
 8006046:	4b0a      	ldr	r3, [pc, #40]	@ (8006070 <HAL_FLASH_Lock+0x34>)
 8006048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800604a:	4a09      	ldr	r2, [pc, #36]	@ (8006070 <HAL_FLASH_Lock+0x34>)
 800604c:	f043 0301 	orr.w	r3, r3, #1
 8006050:	6293      	str	r3, [r2, #40]	@ 0x28

  /* Verify Flash is locked */
  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) == 0U)
 8006052:	4b07      	ldr	r3, [pc, #28]	@ (8006070 <HAL_FLASH_Lock+0x34>)
 8006054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	2b00      	cmp	r3, #0
 800605c:	d101      	bne.n	8006062 <HAL_FLASH_Lock+0x26>
  {
    status = HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 8006062:	79fb      	ldrb	r3, [r7, #7]
}
 8006064:	4618      	mov	r0, r3
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr
 8006070:	40022000 	.word	0x40022000

08006074 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b086      	sub	sp, #24
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]

  uint32_t errorflag;
  const __IO uint32_t *reg_sr;
  __IO uint32_t *reg_ccr;

  uint32_t tickstart = HAL_GetTick();
 800607c:	f7ff fca2 	bl	80059c4 <HAL_GetTick>
 8006080:	6178      	str	r0, [r7, #20]

  /* Access to SR register depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_sr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECSR) : &(FLASH_NS->NSSR);
 8006082:	4b20      	ldr	r3, [pc, #128]	@ (8006104 <FLASH_WaitForLastOperation+0x90>)
 8006084:	613b      	str	r3, [r7, #16]
#else
  reg_sr = &(FLASH_NS->NSSR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Wait on BSY, WBNE and DBNE flags to be reset */
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WBNE | FLASH_FLAG_DBNE)) != 0U)
 8006086:	e010      	b.n	80060aa <FLASH_WaitForLastOperation+0x36>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800608e:	d00c      	beq.n	80060aa <FLASH_WaitForLastOperation+0x36>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006090:	f7ff fc98 	bl	80059c4 <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	429a      	cmp	r2, r3
 800609e:	d302      	bcc.n	80060a6 <FLASH_WaitForLastOperation+0x32>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d101      	bne.n	80060aa <FLASH_WaitForLastOperation+0x36>
      {
        return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e027      	b.n	80060fa <FLASH_WaitForLastOperation+0x86>
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WBNE | FLASH_FLAG_DBNE)) != 0U)
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 030b 	and.w	r3, r3, #11
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d1e8      	bne.n	8006088 <FLASH_WaitForLastOperation+0x14>
    }
  }

  /* Access to CCR register depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_ccr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCCR) : &(FLASH_NS->NSCCR);
 80060b6:	4b14      	ldr	r3, [pc, #80]	@ (8006108 <FLASH_WaitForLastOperation+0x94>)
 80060b8:	60fb      	str	r3, [r7, #12]
#else
  reg_ccr = &(FLASH_NS->NSCCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Check FLASH operation error flags */
  errorflag = ((*reg_sr) & FLASH_FLAG_SR_ERRORS);
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f403 037e 	and.w	r3, r3, #16646144	@ 0xfe0000
 80060c2:	60bb      	str	r3, [r7, #8]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  errorflag |= (FLASH->NSSR & FLASH_FLAG_OPTCHANGEERR);
#endif /* __ARM_FEATURE_CMSE */

  /* In case of error reported in Flash SR or OPTSR registers */
  if (errorflag != 0U)
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00c      	beq.n	80060e4 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 80060ca:	4b10      	ldr	r3, [pc, #64]	@ (800610c <FLASH_WaitForLastOperation+0x98>)
 80060cc:	685a      	ldr	r2, [r3, #4]
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	4a0e      	ldr	r2, [pc, #56]	@ (800610c <FLASH_WaitForLastOperation+0x98>)
 80060d4:	6053      	str	r3, [r2, #4]

    /* Clear error flags */
    (*reg_ccr) = errorflag & FLASH_FLAG_SR_ERRORS;
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	f403 027e 	and.w	r2, r3, #16646144	@ 0xfe0000
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	601a      	str	r2, [r3, #0]
    {
      FLASH->NSCCR = FLASH_FLAG_OPTCHANGEERR;
    }
#endif /* __ARM_FEATURE_CMSE */

    return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e00a      	b.n	80060fa <FLASH_WaitForLastOperation+0x86>
  }

  /* Check FLASH End of Operation flag  */
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d003      	beq.n	80060f8 <FLASH_WaitForLastOperation+0x84>
  {
    /* Clear FLASH End of Operation pending bit */
    (*reg_ccr) = FLASH_FLAG_EOP;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80060f6:	601a      	str	r2, [r3, #0]
  }

  /* If there is no error flag set */
  return HAL_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3718      	adds	r7, #24
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	40022020 	.word	0x40022020
 8006108:	40022030 	.word	0x40022030
 800610c:	2000002c 	.word	0x2000002c

08006110 <FLASH_Program_QuadWord>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_QuadWord(uint32_t FlashAddress, uint32_t DataAddress)
{
 8006110:	b480      	push	{r7}
 8006112:	b08b      	sub	sp, #44	@ 0x2c
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  uint8_t index = 4;
 800611a:	2304      	movs	r3, #4
 800611c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t *dest_addr = (uint32_t *)FlashAddress;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	623b      	str	r3, [r7, #32]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	61fb      	str	r3, [r7, #28]
  uint32_t primask_bit;
  __IO uint32_t *reg_cr;

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8006128:	4b16      	ldr	r3, [pc, #88]	@ (8006184 <FLASH_Program_QuadWord+0x74>)
 800612a:	61bb      	str	r3, [r7, #24]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Set PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f043 0202 	orr.w	r2, r3, #2
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	601a      	str	r2, [r3, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006138:	f3ef 8310 	mrs	r3, PRIMASK
 800613c:	613b      	str	r3, [r7, #16]
  return(result);
 800613e:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8006140:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006142:	b672      	cpsid	i
}
 8006144:	bf00      	nop
  __disable_irq();

  /* Program the quad-word */
  do
  {
    *dest_addr = *src_addr;
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	6a3b      	ldr	r3, [r7, #32]
 800614c:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800614e:	6a3b      	ldr	r3, [r7, #32]
 8006150:	3304      	adds	r3, #4
 8006152:	623b      	str	r3, [r7, #32]
    src_addr++;
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	3304      	adds	r3, #4
 8006158:	61fb      	str	r3, [r7, #28]
    index--;
 800615a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800615e:	3b01      	subs	r3, #1
 8006160:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  } while (index != 0U);
 8006164:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006168:	2b00      	cmp	r3, #0
 800616a:	d1ec      	bne.n	8006146 <FLASH_Program_QuadWord+0x36>
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f383 8810 	msr	PRIMASK, r3
}
 8006176:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8006178:	bf00      	nop
 800617a:	372c      	adds	r7, #44	@ 0x2c
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr
 8006184:	40022028 	.word	0x40022028

08006188 <FLASH_Program_QuadWord_OBK>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_QuadWord_OBK(uint32_t FlashAddress, uint32_t DataAddress)
{
 8006188:	b480      	push	{r7}
 800618a:	b08b      	sub	sp, #44	@ 0x2c
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  uint8_t index = 4;
 8006192:	2304      	movs	r3, #4
 8006194:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t *dest_addr = (uint32_t *)FlashAddress;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	623b      	str	r3, [r7, #32]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	61fb      	str	r3, [r7, #28]
  uint32_t primask_bit;
  __IO uint32_t *reg_cr;
  __IO uint32_t *reg_obkcfgr;

  /* Access to SECCR or NSCR registers depends on operation type */
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 80061a0:	4b1c      	ldr	r3, [pc, #112]	@ (8006214 <FLASH_Program_QuadWord_OBK+0x8c>)
 80061a2:	61bb      	str	r3, [r7, #24]
  reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 80061a4:	4b1c      	ldr	r3, [pc, #112]	@ (8006218 <FLASH_Program_QuadWord_OBK+0x90>)
 80061a6:	617b      	str	r3, [r7, #20]

  /* Set PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f043 0202 	orr.w	r2, r3, #2
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	601a      	str	r2, [r3, #0]

  /* Set ALT_SECT bit */
  SET_BIT((*reg_obkcfgr), pFlash.ProcedureOnGoing & FLASH_OBKCFGR_ALT_SECT);
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	4b18      	ldr	r3, [pc, #96]	@ (800621c <FLASH_Program_QuadWord_OBK+0x94>)
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	f003 0304 	and.w	r3, r3, #4
 80061c0:	431a      	orrs	r2, r3
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80061c6:	f3ef 8310 	mrs	r3, PRIMASK
 80061ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80061cc:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80061ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80061d0:	b672      	cpsid	i
}
 80061d2:	bf00      	nop
  __disable_irq();

  /* Program the quad-word */
  do
  {
    *dest_addr = *src_addr;
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	6a3b      	ldr	r3, [r7, #32]
 80061da:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80061dc:	6a3b      	ldr	r3, [r7, #32]
 80061de:	3304      	adds	r3, #4
 80061e0:	623b      	str	r3, [r7, #32]
    src_addr++;
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	3304      	adds	r3, #4
 80061e6:	61fb      	str	r3, [r7, #28]
    index--;
 80061e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80061ec:	3b01      	subs	r3, #1
 80061ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  } while (index != 0U);
 80061f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1ec      	bne.n	80061d4 <FLASH_Program_QuadWord_OBK+0x4c>
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	f383 8810 	msr	PRIMASK, r3
}
 8006204:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8006206:	bf00      	nop
 8006208:	372c      	adds	r7, #44	@ 0x2c
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	40022028 	.word	0x40022028
 8006218:	40022040 	.word	0x40022040
 800621c:	2000002c 	.word	0x2000002c

08006220 <FLASH_Program_HalfWord>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t FlashAddress, uint32_t DataAddress)
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  __IO uint32_t *reg_cr;

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 800622a:	4b09      	ldr	r3, [pc, #36]	@ (8006250 <FLASH_Program_HalfWord+0x30>)
 800622c:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Set HalfWord_PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f043 0202 	orr.w	r2, r3, #2
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	601a      	str	r2, [r3, #0]

  /* Program a halfword word (16 bits) */
  *(__IO uint16_t *)FlashAddress = *(__IO uint16_t *)DataAddress;
 800623a:	683a      	ldr	r2, [r7, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	8812      	ldrh	r2, [r2, #0]
 8006240:	b292      	uxth	r2, r2
 8006242:	801a      	strh	r2, [r3, #0]
}
 8006244:	bf00      	nop
 8006246:	3714      	adds	r7, #20
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr
 8006250:	40022028 	.word	0x40022028

08006254 <FLASH_Program_Word>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t FlashAddress, uint32_t DataAddress)
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  __IO uint32_t *reg_cr;

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 800625e:	4b09      	ldr	r3, [pc, #36]	@ (8006284 <FLASH_Program_Word+0x30>)
 8006260:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Set PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f043 0202 	orr.w	r2, r3, #2
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	601a      	str	r2, [r3, #0]

    *(__IO uint32_t *)FlashAddress = *(__IO uint32_t *)DataAddress;
 800626e:	683a      	ldr	r2, [r7, #0]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6812      	ldr	r2, [r2, #0]
 8006274:	601a      	str	r2, [r3, #0]
}
 8006276:	bf00      	nop
 8006278:	3714      	adds	r7, #20
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	40022028 	.word	0x40022028

08006288 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased).
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006292:	4b3a      	ldr	r3, [pc, #232]	@ (800637c <HAL_FLASHEx_Erase+0xf4>)
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	2b01      	cmp	r3, #1
 8006298:	d101      	bne.n	800629e <HAL_FLASHEx_Erase+0x16>
 800629a:	2302      	movs	r3, #2
 800629c:	e06a      	b.n	8006374 <HAL_FLASHEx_Erase+0xec>
 800629e:	4b37      	ldr	r3, [pc, #220]	@ (800637c <HAL_FLASHEx_Erase+0xf4>)
 80062a0:	2201      	movs	r2, #1
 80062a2:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80062a4:	4b35      	ldr	r3, [pc, #212]	@ (800637c <HAL_FLASHEx_Erase+0xf4>)
 80062a6:	2200      	movs	r2, #0
 80062a8:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80062aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80062ae:	f7ff fee1 	bl	8006074 <FLASH_WaitForLastOperation>
 80062b2:	4603      	mov	r3, r0
 80062b4:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80062b6:	7dfb      	ldrb	r3, [r7, #23]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d157      	bne.n	800636c <HAL_FLASHEx_Erase+0xe4>
  {
    /* Current operation type */
    pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a2e      	ldr	r2, [pc, #184]	@ (800637c <HAL_FLASHEx_Erase+0xf4>)
 80062c2:	6093      	str	r3, [r2, #8]

    /* Access to SECCR or NSCR depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 80062c4:	4b2e      	ldr	r3, [pc, #184]	@ (8006380 <HAL_FLASHEx_Erase+0xf8>)
 80062c6:	60fb      	str	r3, [r7, #12]
#else
    reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

    if ((pEraseInit->TypeErase & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEERASE_MASSERASE)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80062d0:	f248 0208 	movw	r2, #32776	@ 0x8008
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d10b      	bne.n	80062f0 <HAL_FLASHEx_Erase+0x68>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	4618      	mov	r0, r3
 80062de:	f000 f853 	bl	8006388 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80062e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80062e6:	f7ff fec5 	bl	8006074 <FLASH_WaitForLastOperation>
 80062ea:	4603      	mov	r3, r0
 80062ec:	75fb      	strb	r3, [r7, #23]
 80062ee:	e033      	b.n	8006358 <HAL_FLASHEx_Erase+0xd0>
    }
#if defined (FLASH_SR_OBKERR)
    else if (pEraseInit->TypeErase == FLASH_TYPEERASE_OBK_ALT)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a23      	ldr	r2, [pc, #140]	@ (8006384 <HAL_FLASHEx_Erase+0xfc>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d108      	bne.n	800630c <HAL_FLASHEx_Erase+0x84>
    {
      /* OBK erase to be done */
      FLASH_OBKErase();
 80062fa:	f000 f8b5 	bl	8006468 <FLASH_OBKErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80062fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006302:	f7ff feb7 	bl	8006074 <FLASH_WaitForLastOperation>
 8006306:	4603      	mov	r3, r0
 8006308:	75fb      	strb	r3, [r7, #23]
 800630a:	e025      	b.n	8006358 <HAL_FLASHEx_Erase+0xd0>
    }
#endif /* FLASH_SR_OBKERR */
    else
    {
      /* Initialization of SectorError variable */
      *SectorError = 0xFFFFFFFFU;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	f04f 32ff 	mov.w	r2, #4294967295
 8006312:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for (sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); \
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	613b      	str	r3, [r7, #16]
 800631a:	e015      	b.n	8006348 <HAL_FLASHEx_Erase+0xc0>
           sector_index++)
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	4619      	mov	r1, r3
 8006322:	6938      	ldr	r0, [r7, #16]
 8006324:	f000 f868 	bl	80063f8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006328:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800632c:	f7ff fea2 	bl	8006074 <FLASH_WaitForLastOperation>
 8006330:	4603      	mov	r3, r0
 8006332:	75fb      	strb	r3, [r7, #23]

        if (status != HAL_OK)
 8006334:	7dfb      	ldrb	r3, [r7, #23]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d003      	beq.n	8006342 <HAL_FLASHEx_Erase+0xba>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	693a      	ldr	r2, [r7, #16]
 800633e:	601a      	str	r2, [r3, #0]
          break;
 8006340:	e00a      	b.n	8006358 <HAL_FLASHEx_Erase+0xd0>
           sector_index++)
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	3301      	adds	r3, #1
 8006346:	613b      	str	r3, [r7, #16]
      for (sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); \
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	68da      	ldr	r2, [r3, #12]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	4413      	add	r3, r2
 8006352:	693a      	ldr	r2, [r7, #16]
 8006354:	429a      	cmp	r2, r3
 8006356:	d3e1      	bcc.n	800631c <HAL_FLASHEx_Erase+0x94>
        }
      }
    }

    /* If the erase operation is completed, disable the associated bits */
    CLEAR_BIT((*reg_cr), (pEraseInit->TypeErase) & (~(FLASH_NON_SECURE_MASK)));
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006364:	43db      	mvns	r3, r3
 8006366:	401a      	ands	r2, r3
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800636c:	4b03      	ldr	r3, [pc, #12]	@ (800637c <HAL_FLASHEx_Erase+0xf4>)
 800636e:	2200      	movs	r2, #0
 8006370:	701a      	strb	r2, [r3, #0]

  return status;
 8006372:	7dfb      	ldrb	r3, [r7, #23]
}
 8006374:	4618      	mov	r0, r3
 8006376:	3718      	adds	r7, #24
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	2000002c 	.word	0x2000002c
 8006380:	40022028 	.word	0x40022028
 8006384:	80000008 	.word	0x80000008

08006388 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8006390:	4b18      	ldr	r3, [pc, #96]	@ (80063f4 <FLASH_MassErase+0x6c>)
 8006392:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Flash Mass Erase */
  if ((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f003 0303 	and.w	r3, r3, #3
 800639a:	2b03      	cmp	r3, #3
 800639c:	d108      	bne.n	80063b0 <FLASH_MassErase+0x28>
  {
    /* Set Mass Erase Bit */
    SET_BIT((*reg_cr), FLASH_CR_MER | FLASH_CR_START);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063a6:	f043 0320 	orr.w	r3, r3, #32
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	6013      	str	r3, [r2, #0]
    {
      /* Erase Bank2 */
      SET_BIT((*reg_cr), (FLASH_CR_BER | FLASH_CR_BKSEL | FLASH_CR_START));
    }
  }
}
 80063ae:	e01b      	b.n	80063e8 <FLASH_MassErase+0x60>
    if ((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f003 0301 	and.w	r3, r3, #1
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d009      	beq.n	80063ce <FLASH_MassErase+0x46>
      MODIFY_REG((*reg_cr), (FLASH_CR_BKSEL | FLASH_CR_BER | FLASH_CR_START), (FLASH_CR_BER | FLASH_CR_START));
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80063c2:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 80063c6:	f043 0228 	orr.w	r2, r3, #40	@ 0x28
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	601a      	str	r2, [r3, #0]
    if ((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f003 0302 	and.w	r3, r3, #2
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d007      	beq.n	80063e8 <FLASH_MassErase+0x60>
      SET_BIT((*reg_cr), (FLASH_CR_BER | FLASH_CR_BKSEL | FLASH_CR_START));
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80063e0:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	6013      	str	r3, [r2, #0]
}
 80063e8:	bf00      	nop
 80063ea:	3714      	adds	r7, #20
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr
 80063f4:	40022028 	.word	0x40022028

080063f8 <FLASH_Erase_Sector>:
  *            @arg FLASH_BANK_1: Sector in bank 1 to be erased
  *            @arg FLASH_BANK_2: Sector in bank 2 to be erased
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8006402:	4b18      	ldr	r3, [pc, #96]	@ (8006464 <FLASH_Erase_Sector+0x6c>)
 8006404:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  if ((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	f003 0301 	and.w	r3, r3, #1
 800640c:	2b00      	cmp	r3, #0
 800640e:	d011      	beq.n	8006434 <FLASH_Erase_Sector+0x3c>
  {
    /* Reset Sector Number for Bank1 */
    (*reg_cr) &= ~(FLASH_CR_SNB | FLASH_CR_BKSEL);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006418:	f423 53fe 	bic.w	r3, r3, #8128	@ 0x1fc0
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	6013      	str	r3, [r2, #0]

    (*reg_cr) |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	019b      	lsls	r3, r3, #6
 8006428:	4313      	orrs	r3, r2
 800642a:	f043 0224 	orr.w	r2, r3, #36	@ 0x24
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	601a      	str	r2, [r3, #0]
    /* Reset Sector Number for Bank2 */
    (*reg_cr) &= ~(FLASH_CR_SNB);

    (*reg_cr) |= (FLASH_CR_SER | FLASH_CR_BKSEL | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
  }
}
 8006432:	e010      	b.n	8006456 <FLASH_Erase_Sector+0x5e>
    (*reg_cr) &= ~(FLASH_CR_SNB);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f423 52fe 	bic.w	r2, r3, #8128	@ 0x1fc0
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	601a      	str	r2, [r3, #0]
    (*reg_cr) |= (FLASH_CR_SER | FLASH_CR_BKSEL | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	019b      	lsls	r3, r3, #6
 8006448:	4313      	orrs	r3, r2
 800644a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800644e:	f043 0324 	orr.w	r3, r3, #36	@ 0x24
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	6013      	str	r3, [r2, #0]
}
 8006456:	bf00      	nop
 8006458:	3714      	adds	r7, #20
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	40022028 	.word	0x40022028

08006468 <FLASH_OBKErase>:
/**
  * @brief  Erase of FLASH OBK
  * @retval None
  */
static void FLASH_OBKErase()
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
  __IO uint32_t *reg_obkcfgr;

  /* Access to SECOBKCFGR or NSOBKCFGR registers depends on operation type */
  reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 800646e:	4b07      	ldr	r3, [pc, #28]	@ (800648c <FLASH_OBKErase+0x24>)
 8006470:	607b      	str	r3, [r7, #4]

  /* Set OBK Erase Bit */
  SET_BIT((*reg_obkcfgr), FLASH_OBKCFGR_ALT_SECT_ERASE);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f043 0208 	orr.w	r2, r3, #8
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	601a      	str	r2, [r3, #0]
}
 800647e:	bf00      	nop
 8006480:	370c      	adds	r7, #12
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	40022040 	.word	0x40022040

08006490 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8006490:	b480      	push	{r7}
 8006492:	b087      	sub	sp, #28
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800649a:	2300      	movs	r3, #0
 800649c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800649e:	e136      	b.n	800670e <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	2101      	movs	r1, #1
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	fa01 f303 	lsl.w	r3, r1, r3
 80064ac:	4013      	ands	r3, r2
 80064ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f000 8128 	beq.w	8006708 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	2b02      	cmp	r3, #2
 80064be:	d003      	beq.n	80064c8 <HAL_GPIO_Init+0x38>
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	2b12      	cmp	r3, #18
 80064c6:	d125      	bne.n	8006514 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	08da      	lsrs	r2, r3, #3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	3208      	adds	r2, #8
 80064d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064d4:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	f003 0307 	and.w	r3, r3, #7
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	220f      	movs	r2, #15
 80064e0:	fa02 f303 	lsl.w	r3, r2, r3
 80064e4:	43db      	mvns	r3, r3
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	4013      	ands	r3, r2
 80064ea:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	f003 020f 	and.w	r2, r3, #15
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	f003 0307 	and.w	r3, r3, #7
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006500:	697a      	ldr	r2, [r7, #20]
 8006502:	4313      	orrs	r3, r2
 8006504:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	08da      	lsrs	r2, r3, #3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	3208      	adds	r2, #8
 800650e:	6979      	ldr	r1, [r7, #20]
 8006510:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	005b      	lsls	r3, r3, #1
 800651e:	2203      	movs	r2, #3
 8006520:	fa02 f303 	lsl.w	r3, r2, r3
 8006524:	43db      	mvns	r3, r3
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	4013      	ands	r3, r2
 800652a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	f003 0203 	and.w	r2, r3, #3
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	005b      	lsls	r3, r3, #1
 8006538:	fa02 f303 	lsl.w	r3, r2, r3
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	4313      	orrs	r3, r2
 8006540:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	697a      	ldr	r2, [r7, #20]
 8006546:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	2b01      	cmp	r3, #1
 800654e:	d00b      	beq.n	8006568 <HAL_GPIO_Init+0xd8>
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	2b02      	cmp	r3, #2
 8006556:	d007      	beq.n	8006568 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800655c:	2b11      	cmp	r3, #17
 800655e:	d003      	beq.n	8006568 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	2b12      	cmp	r3, #18
 8006566:	d130      	bne.n	80065ca <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	005b      	lsls	r3, r3, #1
 8006572:	2203      	movs	r2, #3
 8006574:	fa02 f303 	lsl.w	r3, r2, r3
 8006578:	43db      	mvns	r3, r3
 800657a:	697a      	ldr	r2, [r7, #20]
 800657c:	4013      	ands	r3, r2
 800657e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	68da      	ldr	r2, [r3, #12]
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	005b      	lsls	r3, r3, #1
 8006588:	fa02 f303 	lsl.w	r3, r2, r3
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	4313      	orrs	r3, r2
 8006590:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	697a      	ldr	r2, [r7, #20]
 8006596:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800659e:	2201      	movs	r2, #1
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	fa02 f303 	lsl.w	r3, r2, r3
 80065a6:	43db      	mvns	r3, r3
 80065a8:	697a      	ldr	r2, [r7, #20]
 80065aa:	4013      	ands	r3, r2
 80065ac:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	091b      	lsrs	r3, r3, #4
 80065b4:	f003 0201 	and.w	r2, r3, #1
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	fa02 f303 	lsl.w	r3, r2, r3
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	697a      	ldr	r2, [r7, #20]
 80065c8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	2b03      	cmp	r3, #3
 80065d0:	d017      	beq.n	8006602 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	005b      	lsls	r3, r3, #1
 80065dc:	2203      	movs	r2, #3
 80065de:	fa02 f303 	lsl.w	r3, r2, r3
 80065e2:	43db      	mvns	r3, r3
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	4013      	ands	r3, r2
 80065e8:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	689a      	ldr	r2, [r3, #8]
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	005b      	lsls	r3, r3, #1
 80065f2:	fa02 f303 	lsl.w	r3, r2, r3
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d07c      	beq.n	8006708 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800660e:	4a47      	ldr	r2, [pc, #284]	@ (800672c <HAL_GPIO_Init+0x29c>)
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	089b      	lsrs	r3, r3, #2
 8006614:	3318      	adds	r3, #24
 8006616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800661a:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	f003 0303 	and.w	r3, r3, #3
 8006622:	00db      	lsls	r3, r3, #3
 8006624:	220f      	movs	r2, #15
 8006626:	fa02 f303 	lsl.w	r3, r2, r3
 800662a:	43db      	mvns	r3, r3
 800662c:	697a      	ldr	r2, [r7, #20]
 800662e:	4013      	ands	r3, r2
 8006630:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	0a9a      	lsrs	r2, r3, #10
 8006636:	4b3e      	ldr	r3, [pc, #248]	@ (8006730 <HAL_GPIO_Init+0x2a0>)
 8006638:	4013      	ands	r3, r2
 800663a:	693a      	ldr	r2, [r7, #16]
 800663c:	f002 0203 	and.w	r2, r2, #3
 8006640:	00d2      	lsls	r2, r2, #3
 8006642:	4093      	lsls	r3, r2
 8006644:	697a      	ldr	r2, [r7, #20]
 8006646:	4313      	orrs	r3, r2
 8006648:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800664a:	4938      	ldr	r1, [pc, #224]	@ (800672c <HAL_GPIO_Init+0x29c>)
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	089b      	lsrs	r3, r3, #2
 8006650:	3318      	adds	r3, #24
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8006658:	4b34      	ldr	r3, [pc, #208]	@ (800672c <HAL_GPIO_Init+0x29c>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	43db      	mvns	r3, r3
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	4013      	ands	r3, r2
 8006666:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d003      	beq.n	800667c <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8006674:	697a      	ldr	r2, [r7, #20]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	4313      	orrs	r3, r2
 800667a:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800667c:	4a2b      	ldr	r2, [pc, #172]	@ (800672c <HAL_GPIO_Init+0x29c>)
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8006682:	4b2a      	ldr	r3, [pc, #168]	@ (800672c <HAL_GPIO_Init+0x29c>)
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	43db      	mvns	r3, r3
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	4013      	ands	r3, r2
 8006690:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d003      	beq.n	80066a6 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 800669e:	697a      	ldr	r2, [r7, #20]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80066a6:	4a21      	ldr	r2, [pc, #132]	@ (800672c <HAL_GPIO_Init+0x29c>)
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80066ac:	4b1f      	ldr	r3, [pc, #124]	@ (800672c <HAL_GPIO_Init+0x29c>)
 80066ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066b2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	43db      	mvns	r3, r3
 80066b8:	697a      	ldr	r2, [r7, #20]
 80066ba:	4013      	ands	r3, r2
 80066bc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d003      	beq.n	80066d2 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80066d2:	4a16      	ldr	r2, [pc, #88]	@ (800672c <HAL_GPIO_Init+0x29c>)
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80066da:	4b14      	ldr	r3, [pc, #80]	@ (800672c <HAL_GPIO_Init+0x29c>)
 80066dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066e0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	43db      	mvns	r3, r3
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	4013      	ands	r3, r2
 80066ea:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d003      	beq.n	8006700 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 80066f8:	697a      	ldr	r2, [r7, #20]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8006700:	4a0a      	ldr	r2, [pc, #40]	@ (800672c <HAL_GPIO_Init+0x29c>)
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	3301      	adds	r3, #1
 800670c:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	fa22 f303 	lsr.w	r3, r2, r3
 8006718:	2b00      	cmp	r3, #0
 800671a:	f47f aec1 	bne.w	80064a0 <HAL_GPIO_Init+0x10>
  }
}
 800671e:	bf00      	nop
 8006720:	bf00      	nop
 8006722:	371c      	adds	r7, #28
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr
 800672c:	44022000 	.word	0x44022000
 8006730:	002f7f7f 	.word	0x002f7f7f

08006734 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	460b      	mov	r3, r1
 800673e:	807b      	strh	r3, [r7, #2]
 8006740:	4613      	mov	r3, r2
 8006742:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006744:	787b      	ldrb	r3, [r7, #1]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d003      	beq.n	8006752 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800674a:	887a      	ldrh	r2, [r7, #2]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006750:	e002      	b.n	8006758 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006752:	887a      	ldrh	r2, [r7, #2]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006758:	bf00      	nop
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006764:	b480      	push	{r7}
 8006766:	b085      	sub	sp, #20
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	460b      	mov	r3, r1
 800676e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	695b      	ldr	r3, [r3, #20]
 8006774:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006776:	887a      	ldrh	r2, [r7, #2]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	4013      	ands	r3, r2
 800677c:	041a      	lsls	r2, r3, #16
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	43d9      	mvns	r1, r3
 8006782:	887b      	ldrh	r3, [r7, #2]
 8006784:	400b      	ands	r3, r1
 8006786:	431a      	orrs	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	619a      	str	r2, [r3, #24]
}
 800678c:	bf00      	nop
 800678e:	3714      	adds	r7, #20
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <HAL_HASH_Init>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_Init(HASH_HandleTypeDef *hhash)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  uint32_t cr_value;

  /* Check the hash handle allocation */
  if (hhash == NULL)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d101      	bne.n	80067aa <HAL_HASH_Init+0x12>
  {
    return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e02a      	b.n	8006800 <HAL_HASH_Init+0x68>

    /* Init the low level hardware */
    hhash->MspInitCallback(hhash);
  }
#else
  if (hhash->State == HAL_HASH_STATE_RESET)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d106      	bne.n	80067c4 <HAL_HASH_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhash->Lock = HAL_UNLOCKED;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Init the low level hardware */
    HAL_HASH_MspInit(hhash);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f7fe f892 	bl	80048e8 <HAL_HASH_MspInit>
  }
#endif /* (USE_HAL_HASH_REGISTER_CALLBACKS) */

  /* Set the key size, data type and Algorithm */
  cr_value = (uint32_t)(hhash->Init.DataType | hhash->Init.Algorithm);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685a      	ldr	r2, [r3, #4]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	60fb      	str	r3, [r7, #12]
  /* Set the key size, data type, algorithm and mode */
  MODIFY_REG(hhash->Instance->CR, HASH_CR_DATATYPE | HASH_CR_ALGO | HASH_CR_INIT, cr_value);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f423 13f0 	bic.w	r3, r3, #1966080	@ 0x1e0000
 80067da:	f023 0334 	bic.w	r3, r3, #52	@ 0x34
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	6812      	ldr	r2, [r2, #0]
 80067e2:	68f9      	ldr	r1, [r7, #12]
 80067e4:	430b      	orrs	r3, r1
 80067e6:	6013      	str	r3, [r2, #0]

  /* Change HASH phase to Ready */
  hhash->Phase = HAL_HASH_PHASE_READY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  /* Change HASH state to Ready */
  hhash->State = HAL_HASH_STATE_READY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Reset error code field */
  hhash->ErrorCode = HAL_HASH_ERROR_NONE;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_HASH_SUSPEND_RESUME == 1U)
  /* Reset suspension request flag */
  hhash->SuspendRequest = HAL_HASH_SUSPEND_NONE;
#endif /* (USE_HAL_HASH_SUSPEND_RESUME) */
  /* Return function status */
  return HAL_OK;
 80067fe:	2300      	movs	r3, #0
}
 8006800:	4618      	mov	r0, r3
 8006802:	3710      	adds	r7, #16
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <HAL_HASH_DeInit>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_DeInit(HASH_HandleTypeDef *hhash)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  /* Check the HASH handle allocation */
  if (hhash == NULL)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d101      	bne.n	800681a <HAL_HASH_DeInit+0x12>
  {
    return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e015      	b.n	8006846 <HAL_HASH_DeInit+0x3e>
  }

  /* Change the default HASH phase */
  hhash->Phase = HAL_HASH_PHASE_READY;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2201      	movs	r2, #1
 800681e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  /* Reset HashInCount */
  hhash->HashInCount = 0U;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	61da      	str	r2, [r3, #28]

  /* Reset multi buffers accumulation flag */
  hhash->Accumulation = 0U;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DeInit the low level hardware */
  hhash->MspDeInitCallback(hhash);
#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_HASH_MspDeInit(hhash);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f7fe f87c 	bl	800492c <HAL_HASH_MspDeInit>
#endif /* (USE_HAL_HASH_REGISTER_CALLBACKS) */

  /* Set the HASH state to Ready */
  hhash->State = HAL_HASH_STATE_RESET;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  __HAL_UNLOCK(hhash);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3708      	adds	r7, #8
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <HAL_HASH_Start_IT>:
  * @param  pOutBuffer pointer to the computed digest.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_Start_IT(HASH_HandleTypeDef *hhash, const uint8_t *const pInBuffer, uint32_t Size,
                                    uint8_t *const pOutBuffer)
{
 800684e:	b580      	push	{r7, lr}
 8006850:	b086      	sub	sp, #24
 8006852:	af00      	add	r7, sp, #0
 8006854:	60f8      	str	r0, [r7, #12]
 8006856:	60b9      	str	r1, [r7, #8]
 8006858:	607a      	str	r2, [r7, #4]
 800685a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  HAL_HASH_StateTypeDef temp_state;

  /* Check the hash handle allocation */
  if (hhash == NULL)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d101      	bne.n	8006866 <HAL_HASH_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e05c      	b.n	8006920 <HAL_HASH_Start_IT+0xd2>
  }

  /* Check if peripheral is ready to start process or suspended */
  temp_state = hhash->State;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800686c:	75bb      	strb	r3, [r7, #22]
  if ((temp_state == HAL_HASH_STATE_READY) || (temp_state == HAL_HASH_STATE_SUSPENDED))
 800686e:	7dbb      	ldrb	r3, [r7, #22]
 8006870:	2b01      	cmp	r3, #1
 8006872:	d002      	beq.n	800687a <HAL_HASH_Start_IT+0x2c>
 8006874:	7dbb      	ldrb	r3, [r7, #22]
 8006876:	2b03      	cmp	r3, #3
 8006878:	d14f      	bne.n	800691a <HAL_HASH_Start_IT+0xcc>
  {
    /* Process Locked */
    __HAL_LOCK(hhash);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006880:	2b01      	cmp	r3, #1
 8006882:	d101      	bne.n	8006888 <HAL_HASH_Start_IT+0x3a>
 8006884:	2302      	movs	r3, #2
 8006886:	e04b      	b.n	8006920 <HAL_HASH_Start_IT+0xd2>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    if (hhash->State == HAL_HASH_STATE_READY)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006896:	b2db      	uxtb	r3, r3
 8006898:	2b01      	cmp	r3, #1
 800689a:	d128      	bne.n	80068ee <HAL_HASH_Start_IT+0xa0>
    {
      /* Reset HashInCount and Initialize Size, pHashInBuffPtr and pHashOutBuffPtr parameters */
      hhash->HashInCount =  0U;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	61da      	str	r2, [r3, #28]
      hhash->pHashInBuffPtr = pInBuffer;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	68ba      	ldr	r2, [r7, #8]
 80068a6:	615a      	str	r2, [r3, #20]
      hhash->pHashOutBuffPtr = pOutBuffer;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	683a      	ldr	r2, [r7, #0]
 80068ac:	619a      	str	r2, [r3, #24]
      hhash->Size = Size;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	621a      	str	r2, [r3, #32]

      /* Set HASH mode */
      CLEAR_BIT(hhash->Instance->CR, HASH_CR_MODE);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80068c2:	601a      	str	r2, [r3, #0]
      /* Reset the HASH processor core */
      MODIFY_REG(hhash->Instance->CR, HASH_CR_INIT, HASH_CR_INIT);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f042 0204 	orr.w	r2, r2, #4
 80068d2:	601a      	str	r2, [r3, #0]

      /* Configure the number of valid bits in last word of the message */
      MODIFY_REG(hhash->Instance->STR, HASH_STR_NBLW, 8U * (Size % 4U));
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	f023 011f 	bic.w	r1, r3, #31
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f003 0303 	and.w	r3, r3, #3
 80068e4:	00da      	lsls	r2, r3, #3
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	430a      	orrs	r2, r1
 80068ec:	609a      	str	r2, [r3, #8]
    }
    /* Change the HASH state */
    hhash->State = HAL_HASH_STATE_BUSY;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2202      	movs	r2, #2
 80068f2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Set the phase */
    hhash->Phase = HAL_HASH_PHASE_PROCESS;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2202      	movs	r2, #2
 80068fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    /* Enable the specified HASH interrupt*/
    __HAL_HASH_ENABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	6a1a      	ldr	r2, [r3, #32]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f042 0203 	orr.w	r2, r2, #3
 800690c:	621a      	str	r2, [r3, #32]

    status = HASH_WriteData_IT(hhash);
 800690e:	68f8      	ldr	r0, [r7, #12]
 8006910:	f000 fa8a 	bl	8006e28 <HASH_WriteData_IT>
 8006914:	4603      	mov	r3, r0
 8006916:	75fb      	strb	r3, [r7, #23]
 8006918:	e001      	b.n	800691e <HAL_HASH_Start_IT+0xd0>
  }
  else
  {
    status =  HAL_BUSY;
 800691a:	2302      	movs	r3, #2
 800691c:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 800691e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006920:	4618      	mov	r0, r3
 8006922:	3718      	adds	r7, #24
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <HAL_HASH_HMAC_Start>:
  * @param  Timeout specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_HMAC_Start(HASH_HandleTypeDef *hhash, const uint8_t *const pInBuffer, uint32_t Size,
                                      uint8_t *const pOutBuffer, uint32_t Timeout)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b086      	sub	sp, #24
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	607a      	str	r2, [r7, #4]
 8006934:	603b      	str	r3, [r7, #0]
  uint32_t blocksize; /* Block size in bytes */

  /* Check the hash handle allocation */
  if (hhash == NULL)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d101      	bne.n	8006940 <HAL_HASH_HMAC_Start+0x18>
  {
    return HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	e12d      	b.n	8006b9c <HAL_HASH_HMAC_Start+0x274>
  }

  /* Check if peripheral is ready to start process */
  if (hhash->State == HAL_HASH_STATE_READY)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006946:	b2db      	uxtb	r3, r3
 8006948:	2b01      	cmp	r3, #1
 800694a:	f040 8126 	bne.w	8006b9a <HAL_HASH_HMAC_Start+0x272>
  {

    /* Process Locked */
    __HAL_LOCK(hhash);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006954:	2b01      	cmp	r3, #1
 8006956:	d101      	bne.n	800695c <HAL_HASH_HMAC_Start+0x34>
 8006958:	2302      	movs	r3, #2
 800695a:	e11f      	b.n	8006b9c <HAL_HASH_HMAC_Start+0x274>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Change the HASH state */
    hhash->State = HAL_HASH_STATE_BUSY;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2202      	movs	r2, #2
 8006968:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Reset HASH Phase */
    hhash->Phase = HAL_HASH_PHASE_READY;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    /* Reset HashInCount and Initialize Size, pHashKeyBuffPtr, pHashInBuffPtr and pHashOutBuffPtr parameters */
    hhash->pHashInBuffPtr = pInBuffer;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	68ba      	ldr	r2, [r7, #8]
 8006978:	615a      	str	r2, [r3, #20]
    hhash->pHashOutBuffPtr = pOutBuffer;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	683a      	ldr	r2, [r7, #0]
 800697e:	619a      	str	r2, [r3, #24]
    hhash->pHashKeyBuffPtr =  hhash->Init.pKey;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	68da      	ldr	r2, [r3, #12]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	625a      	str	r2, [r3, #36]	@ 0x24
    hhash->HashInCount =  0U;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2200      	movs	r2, #0
 800698c:	61da      	str	r2, [r3, #28]
    hhash->Size = Size;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	621a      	str	r2, [r3, #32]

    /* Check if key size is larger than block size of the algorithm, accordingly set LKEY and the other setting bits */
    if ((hhash->Init.Algorithm == HASH_ALGOSELECTION_SHA1) ||
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	691b      	ldr	r3, [r3, #16]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d009      	beq.n	80069b0 <HAL_HASH_HMAC_Start+0x88>
        (hhash->Init.Algorithm == HASH_ALGOSELECTION_SHA224) ||
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	691b      	ldr	r3, [r3, #16]
    if ((hhash->Init.Algorithm == HASH_ALGOSELECTION_SHA1) ||
 80069a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80069a4:	d004      	beq.n	80069b0 <HAL_HASH_HMAC_Start+0x88>
        (hhash->Init.Algorithm == HASH_ALGOSELECTION_SHA256))
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	691b      	ldr	r3, [r3, #16]
        (hhash->Init.Algorithm == HASH_ALGOSELECTION_SHA224) ||
 80069aa:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80069ae:	d102      	bne.n	80069b6 <HAL_HASH_HMAC_Start+0x8e>
    {
      blocksize = BLOCK_64B;
 80069b0:	2340      	movs	r3, #64	@ 0x40
 80069b2:	617b      	str	r3, [r7, #20]
 80069b4:	e001      	b.n	80069ba <HAL_HASH_HMAC_Start+0x92>
    }
    else
    {
      blocksize = BLOCK_128B;
 80069b6:	2380      	movs	r3, #128	@ 0x80
 80069b8:	617b      	str	r3, [r7, #20]
    }
    if (hhash->Init.KeySize > blocksize)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	697a      	ldr	r2, [r7, #20]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d20a      	bcs.n	80069da <HAL_HASH_HMAC_Start+0xb2>
    {
      MODIFY_REG(hhash->Instance->CR, HASH_CR_LKEY | HASH_CR_MODE | HASH_CR_INIT,
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	6812      	ldr	r2, [r2, #0]
 80069ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069d2:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80069d6:	6013      	str	r3, [r2, #0]
 80069d8:	e00b      	b.n	80069f2 <HAL_HASH_HMAC_Start+0xca>
                 HASH_ALGOMODE_HMAC | HASH_LONGKEY | HASH_CR_INIT);
    }
    else
    {

      MODIFY_REG(hhash->Instance->CR, HASH_CR_LKEY | HASH_CR_MODE | HASH_CR_INIT,
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069e4:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	6812      	ldr	r2, [r2, #0]
 80069ec:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80069f0:	6013      	str	r3, [r2, #0]
                 HASH_ALGOMODE_HMAC | HASH_CR_INIT);
    }

    /* Configure the number of valid bits in last word of the Key */
    MODIFY_REG(hhash->Instance->STR, HASH_STR_NBLW, 8U * ((hhash->Init.KeySize) % 4U));
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	f023 011f 	bic.w	r1, r3, #31
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	f003 0303 	and.w	r3, r3, #3
 8006a04:	00da      	lsls	r2, r3, #3
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	430a      	orrs	r2, r1
 8006a0c:	609a      	str	r2, [r3, #8]


    /* Set the phase */
    hhash->Phase = HAL_HASH_PHASE_PROCESS;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2202      	movs	r2, #2
 8006a12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    /* Write Key */
    HASH_WriteData(hhash, hhash->Init.pKey, hhash->Init.KeySize);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	68d9      	ldr	r1, [r3, #12]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	68f8      	ldr	r0, [r7, #12]
 8006a22:	f000 f978 	bl	8006d16 <HASH_WriteData>

    /* Start the Key padding then the Digest calculation */
    SET_BIT(hhash->Instance->STR, HASH_STR_DCAL);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	689a      	ldr	r2, [r3, #8]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006a34:	609a      	str	r2, [r3, #8]

    /* Wait for BUSY flag to be cleared */
    if (HASH_WaitOnFlagUntilTimeout(hhash, HASH_FLAG_BUSY, SET, Timeout) != HAL_OK)
 8006a36:	6a3b      	ldr	r3, [r7, #32]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	2108      	movs	r1, #8
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f001 f80b 	bl	8007a58 <HASH_WaitOnFlagUntilTimeout>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d001      	beq.n	8006a4c <HAL_HASH_HMAC_Start+0x124>
    {
      return HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e0a7      	b.n	8006b9c <HAL_HASH_HMAC_Start+0x274>
    }

    /* Configure the number of valid bits in last word of the message */
    MODIFY_REG(hhash->Instance->STR, HASH_STR_NBLW, 8U * (Size % 4U));
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f023 011f 	bic.w	r1, r3, #31
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f003 0303 	and.w	r3, r3, #3
 8006a5c:	00da      	lsls	r2, r3, #3
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	430a      	orrs	r2, r1
 8006a64:	609a      	str	r2, [r3, #8]

    /* Write message */
    HASH_WriteData(hhash, pInBuffer, Size);
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	68b9      	ldr	r1, [r7, #8]
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	f000 f953 	bl	8006d16 <HASH_WriteData>

    /* Start the message padding then the Digest calculation */
    SET_BIT(hhash->Instance->STR, HASH_STR_DCAL);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	689a      	ldr	r2, [r3, #8]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006a7e:	609a      	str	r2, [r3, #8]

    /* Wait for BUSY flag to be cleared */
    if (HASH_WaitOnFlagUntilTimeout(hhash, HASH_FLAG_BUSY, SET, Timeout) != HAL_OK)
 8006a80:	6a3b      	ldr	r3, [r7, #32]
 8006a82:	2201      	movs	r2, #1
 8006a84:	2108      	movs	r1, #8
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f000 ffe6 	bl	8007a58 <HASH_WaitOnFlagUntilTimeout>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d001      	beq.n	8006a96 <HAL_HASH_HMAC_Start+0x16e>
    {
      return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e082      	b.n	8006b9c <HAL_HASH_HMAC_Start+0x274>
    }
    /* Configure the number of valid bits in last word of the Key */
    MODIFY_REG(hhash->Instance->STR, HASH_STR_NBLW, 8U * ((hhash->Init.KeySize) % 4U));
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	f023 011f 	bic.w	r1, r3, #31
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	f003 0303 	and.w	r3, r3, #3
 8006aa8:	00da      	lsls	r2, r3, #3
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	430a      	orrs	r2, r1
 8006ab0:	609a      	str	r2, [r3, #8]

    /* Write Key */
    HASH_WriteData(hhash, hhash->Init.pKey, hhash->Init.KeySize);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	68d9      	ldr	r1, [r3, #12]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	461a      	mov	r2, r3
 8006abc:	68f8      	ldr	r0, [r7, #12]
 8006abe:	f000 f92a 	bl	8006d16 <HASH_WriteData>

    /* Start the Key padding then the Digest calculation */
    SET_BIT(hhash->Instance->STR, HASH_STR_DCAL);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	689a      	ldr	r2, [r3, #8]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ad0:	609a      	str	r2, [r3, #8]

    /* Wait for digest calculation completion status(DCIS) flag to be set */
    if (HASH_WaitOnFlagUntilTimeout(hhash, HASH_FLAG_DCIS, RESET, Timeout) != HAL_OK)
 8006ad2:	6a3b      	ldr	r3, [r7, #32]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	2102      	movs	r1, #2
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f000 ffbd 	bl	8007a58 <HASH_WaitOnFlagUntilTimeout>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d001      	beq.n	8006ae8 <HAL_HASH_HMAC_Start+0x1c0>
    {
      return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e059      	b.n	8006b9c <HAL_HASH_HMAC_Start+0x274>
    }

    /* Read the message digest */
    HASH_GetDigest(hhash, pOutBuffer, HASH_DIGEST_LENGTH(hhash));
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d03d      	beq.n	8006b72 <HAL_HASH_HMAC_Start+0x24a>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006b00:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006b04:	d033      	beq.n	8006b6e <HAL_HASH_HMAC_Start+0x246>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006b10:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006b14:	d029      	beq.n	8006b6a <HAL_HASH_HMAC_Start+0x242>
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006b20:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006b24:	d01f      	beq.n	8006b66 <HAL_HASH_HMAC_Start+0x23e>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006b30:	f5b3 1fd0 	cmp.w	r3, #1703936	@ 0x1a0000
 8006b34:	d015      	beq.n	8006b62 <HAL_HASH_HMAC_Start+0x23a>
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006b40:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8006b44:	d00b      	beq.n	8006b5e <HAL_HASH_HMAC_Start+0x236>
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006b50:	f5b3 1ff0 	cmp.w	r3, #1966080	@ 0x1e0000
 8006b54:	d101      	bne.n	8006b5a <HAL_HASH_HMAC_Start+0x232>
 8006b56:	2340      	movs	r3, #64	@ 0x40
 8006b58:	e00c      	b.n	8006b74 <HAL_HASH_HMAC_Start+0x24c>
 8006b5a:	2314      	movs	r3, #20
 8006b5c:	e00a      	b.n	8006b74 <HAL_HASH_HMAC_Start+0x24c>
 8006b5e:	2320      	movs	r3, #32
 8006b60:	e008      	b.n	8006b74 <HAL_HASH_HMAC_Start+0x24c>
 8006b62:	231c      	movs	r3, #28
 8006b64:	e006      	b.n	8006b74 <HAL_HASH_HMAC_Start+0x24c>
 8006b66:	2330      	movs	r3, #48	@ 0x30
 8006b68:	e004      	b.n	8006b74 <HAL_HASH_HMAC_Start+0x24c>
 8006b6a:	2320      	movs	r3, #32
 8006b6c:	e002      	b.n	8006b74 <HAL_HASH_HMAC_Start+0x24c>
 8006b6e:	231c      	movs	r3, #28
 8006b70:	e000      	b.n	8006b74 <HAL_HASH_HMAC_Start+0x24c>
 8006b72:	2314      	movs	r3, #20
 8006b74:	461a      	mov	r2, r3
 8006b76:	6839      	ldr	r1, [r7, #0]
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f000 fc6d 	bl	8007458 <HASH_GetDigest>

    /* Change the HASH state */
    hhash->State = HAL_HASH_STATE_READY;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Change the HASH phase  */
    hhash->Phase = HAL_HASH_PHASE_READY;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    /* Process Unlocked */
    __HAL_UNLOCK(hhash);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Return function status */
    return HAL_OK;
 8006b96:	2300      	movs	r3, #0
 8006b98:	e000      	b.n	8006b9c <HAL_HASH_HMAC_Start+0x274>

  }
  else
  {
    return HAL_BUSY;
 8006b9a:	2302      	movs	r3, #2
  }
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3718      	adds	r7, #24
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <HAL_HASH_IRQHandler>:
  * @param hhash HASH handle.
  * @note  HAL_HASH_IRQHandler() handles interrupts in HMAC processing as well.
  * @retval None
  */
void HAL_HASH_IRQHandler(HASH_HandleTypeDef *hhash)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b086      	sub	sp, #24
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t itsource = hhash->Instance->IMR;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	6a1b      	ldr	r3, [r3, #32]
 8006bb2:	617b      	str	r3, [r7, #20]
  uint32_t itflag   = hhash->Instance->SR;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bba:	613b      	str	r3, [r7, #16]

  /* If digest is ready */
  if ((itflag & HASH_FLAG_DCIS) == HASH_FLAG_DCIS)
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	f003 0302 	and.w	r3, r3, #2
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d062      	beq.n	8006c8c <HAL_HASH_IRQHandler+0xe8>
  {
    /* Read the digest */
    HASH_GetDigest(hhash, hhash->pHashOutBuffPtr, HASH_DIGEST_LENGTH(hhash));
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6999      	ldr	r1, [r3, #24]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d03d      	beq.n	8006c54 <HAL_HASH_IRQHandler+0xb0>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006be2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006be6:	d033      	beq.n	8006c50 <HAL_HASH_IRQHandler+0xac>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006bf2:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006bf6:	d029      	beq.n	8006c4c <HAL_HASH_IRQHandler+0xa8>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006c02:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006c06:	d01f      	beq.n	8006c48 <HAL_HASH_IRQHandler+0xa4>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006c12:	f5b3 1fd0 	cmp.w	r3, #1703936	@ 0x1a0000
 8006c16:	d015      	beq.n	8006c44 <HAL_HASH_IRQHandler+0xa0>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006c22:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8006c26:	d00b      	beq.n	8006c40 <HAL_HASH_IRQHandler+0x9c>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006c32:	f5b3 1ff0 	cmp.w	r3, #1966080	@ 0x1e0000
 8006c36:	d101      	bne.n	8006c3c <HAL_HASH_IRQHandler+0x98>
 8006c38:	2340      	movs	r3, #64	@ 0x40
 8006c3a:	e00c      	b.n	8006c56 <HAL_HASH_IRQHandler+0xb2>
 8006c3c:	2314      	movs	r3, #20
 8006c3e:	e00a      	b.n	8006c56 <HAL_HASH_IRQHandler+0xb2>
 8006c40:	2320      	movs	r3, #32
 8006c42:	e008      	b.n	8006c56 <HAL_HASH_IRQHandler+0xb2>
 8006c44:	231c      	movs	r3, #28
 8006c46:	e006      	b.n	8006c56 <HAL_HASH_IRQHandler+0xb2>
 8006c48:	2330      	movs	r3, #48	@ 0x30
 8006c4a:	e004      	b.n	8006c56 <HAL_HASH_IRQHandler+0xb2>
 8006c4c:	2320      	movs	r3, #32
 8006c4e:	e002      	b.n	8006c56 <HAL_HASH_IRQHandler+0xb2>
 8006c50:	231c      	movs	r3, #28
 8006c52:	e000      	b.n	8006c56 <HAL_HASH_IRQHandler+0xb2>
 8006c54:	2314      	movs	r3, #20
 8006c56:	461a      	mov	r2, r3
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 fbfd 	bl	8007458 <HASH_GetDigest>

    /* Disable Interrupts */
    __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	6a1a      	ldr	r2, [r3, #32]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f022 0203 	bic.w	r2, r2, #3
 8006c6c:	621a      	str	r2, [r3, #32]
    /* Change the HASH state */
    hhash->State = HAL_HASH_STATE_READY;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2201      	movs	r2, #1
 8006c72:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Reset HASH state machine */
    hhash->Phase = HAL_HASH_PHASE_READY;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    /* Process Unlocked */
    __HAL_UNLOCK(hhash);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    /* Call digest computation complete call back */
#if (USE_HAL_HASH_REGISTER_CALLBACKS == 1)
    hhash->DgstCpltCallback(hhash);
#else
    HAL_HASH_DgstCpltCallback(hhash);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 f823 	bl	8006cd2 <HAL_HASH_DgstCpltCallback>
#endif /* USE_HAL_HASH_REGISTER_CALLBACKS */

  }
  /* If Peripheral ready to accept new data */
  if ((itflag & HASH_FLAG_DINIS) == HASH_FLAG_DINIS)
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	f003 0301 	and.w	r3, r3, #1
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00f      	beq.n	8006cb6 <HAL_HASH_IRQHandler+0x112>
  {
    if ((itsource & HASH_IT_DINI) == HASH_IT_DINI)
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	f003 0301 	and.w	r3, r3, #1
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00a      	beq.n	8006cb6 <HAL_HASH_IRQHandler+0x112>
    {
      status = HASH_WriteData_IT(hhash);
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 f8c1 	bl	8006e28 <HASH_WriteData_IT>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	73fb      	strb	r3, [r7, #15]
      if (status != HAL_OK)
 8006caa:	7bfb      	ldrb	r3, [r7, #15]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d002      	beq.n	8006cb6 <HAL_HASH_IRQHandler+0x112>
      {
        /* Call error callback */
#if (USE_HAL_HASH_REGISTER_CALLBACKS == 1)
        hhash->ErrorCallback(hhash);
#else
        HAL_HASH_ErrorCallback(hhash);
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 f818 	bl	8006ce6 <HAL_HASH_ErrorCallback>
#endif /* USE_HAL_HASH_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006cb6:	bf00      	nop
 8006cb8:	3718      	adds	r7, #24
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}

08006cbe <HAL_HASH_InCpltCallback>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval None
  */
__weak void HAL_HASH_InCpltCallback(HASH_HandleTypeDef *hhash)
{
 8006cbe:	b480      	push	{r7}
 8006cc0:	b083      	sub	sp, #12
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
  UNUSED(hhash);

  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_HASH_InCpltCallback() can be implemented in the user file.
   */
}
 8006cc6:	bf00      	nop
 8006cc8:	370c      	adds	r7, #12
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr

08006cd2 <HAL_HASH_DgstCpltCallback>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval None
  */
__weak void HAL_HASH_DgstCpltCallback(HASH_HandleTypeDef *hhash)
{
 8006cd2:	b480      	push	{r7}
 8006cd4:	b083      	sub	sp, #12
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
  UNUSED(hhash);

  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_HASH_DgstCpltCallback() can be implemented in the user file.
   */
}
 8006cda:	bf00      	nop
 8006cdc:	370c      	adds	r7, #12
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr

08006ce6 <HAL_HASH_ErrorCallback>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval None
  */
__weak void HAL_HASH_ErrorCallback(HASH_HandleTypeDef *hhash)
{
 8006ce6:	b480      	push	{r7}
 8006ce8:	b083      	sub	sp, #12
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
  UNUSED(hhash);

  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_HASH_ErrorCallback() can be implemented in the user file.
   */
}
 8006cee:	bf00      	nop
 8006cf0:	370c      	adds	r7, #12
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr

08006cfa <HAL_HASH_GetState>:
  * @note   The API yields the current state of the handle (BUSY, READY,...).
  * @param  hhash HASH handle.
  * @retval HAL HASH state
  */
HAL_HASH_StateTypeDef HAL_HASH_GetState(const HASH_HandleTypeDef *hhash)
{
 8006cfa:	b480      	push	{r7}
 8006cfc:	b083      	sub	sp, #12
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
  return hhash->State;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006d08:	b2db      	uxtb	r3, r3
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	370c      	adds	r7, #12
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <HASH_WriteData>:
  * @param  pInBuffer pointer to input buffer.
  * @param  Size the size of input buffer in bytes.
  * @retval HAL status
  */
static void HASH_WriteData(HASH_HandleTypeDef *hhash, const uint8_t *pInBuffer, uint32_t Size)
{
 8006d16:	b480      	push	{r7}
 8006d18:	b089      	sub	sp, #36	@ 0x24
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	60f8      	str	r0, [r7, #12]
 8006d1e:	60b9      	str	r1, [r7, #8]
 8006d20:	607a      	str	r2, [r7, #4]
  uint32_t buffercounter;
  __IO uint32_t inputaddr = (uint32_t) pInBuffer;
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	617b      	str	r3, [r7, #20]
  uint8_t tmp1;
  uint8_t tmp2;
  uint8_t tmp3;

  for (buffercounter = 0U; buffercounter < (Size / 4U) ; buffercounter++)
 8006d26:	2300      	movs	r3, #0
 8006d28:	61fb      	str	r3, [r7, #28]
 8006d2a:	e010      	b.n	8006d4e <HASH_WriteData+0x38>
  {
    /* Write input data 4 bytes at a time */
    hhash->Instance->DIN = *(uint32_t *)inputaddr;
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	461a      	mov	r2, r3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	6812      	ldr	r2, [r2, #0]
 8006d36:	605a      	str	r2, [r3, #4]
    inputaddr += 4U;
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	3304      	adds	r3, #4
 8006d3c:	617b      	str	r3, [r7, #20]
    hhash->HashInCount += 4U;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	69db      	ldr	r3, [r3, #28]
 8006d42:	1d1a      	adds	r2, r3, #4
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	61da      	str	r2, [r3, #28]
  for (buffercounter = 0U; buffercounter < (Size / 4U) ; buffercounter++)
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	61fb      	str	r3, [r7, #28]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	089b      	lsrs	r3, r3, #2
 8006d52:	69fa      	ldr	r2, [r7, #28]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d3e9      	bcc.n	8006d2c <HASH_WriteData+0x16>
  }

  if ((Size % 4U) != 0U)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f003 0303 	and.w	r3, r3, #3
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d05c      	beq.n	8006e1c <HASH_WriteData+0x106>
  {
    if (hhash->Init.DataType == HASH_HALFWORD_SWAP)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	2b10      	cmp	r3, #16
 8006d68:	d115      	bne.n	8006d96 <HASH_WriteData+0x80>
    {
      /* Write remaining input data */
      if ((Size % 4U) <= 2U)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f003 0303 	and.w	r3, r3, #3
 8006d70:	2b02      	cmp	r3, #2
 8006d72:	d804      	bhi.n	8006d7e <HASH_WriteData+0x68>
      {
        hhash->Instance->DIN = (uint32_t) * (uint16_t *)inputaddr;
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	881a      	ldrh	r2, [r3, #0]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	605a      	str	r2, [r3, #4]
      }
      if ((Size % 4U) == 3U)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f003 0303 	and.w	r3, r3, #3
 8006d84:	2b03      	cmp	r3, #3
 8006d86:	d144      	bne.n	8006e12 <HASH_WriteData+0xfc>
      {
        hhash->Instance->DIN = *(uint32_t *)inputaddr;
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	6812      	ldr	r2, [r2, #0]
 8006d92:	605a      	str	r2, [r3, #4]
 8006d94:	e03d      	b.n	8006e12 <HASH_WriteData+0xfc>
      }
    }
    else if ((hhash->Init.DataType == HASH_BYTE_SWAP)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	2b20      	cmp	r3, #32
 8006d9c:	d003      	beq.n	8006da6 <HASH_WriteData+0x90>
             || (hhash->Init.DataType == HASH_BIT_SWAP))  /* byte swap or bit swap or */
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	2b30      	cmp	r3, #48	@ 0x30
 8006da4:	d12f      	bne.n	8006e06 <HASH_WriteData+0xf0>
    {
      /* Write remaining input data */
      if ((Size % 4U) == 1U)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f003 0303 	and.w	r3, r3, #3
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d104      	bne.n	8006dba <HASH_WriteData+0xa4>
      {
        hhash->Instance->DIN = (uint32_t) * (uint8_t *)inputaddr;
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	781a      	ldrb	r2, [r3, #0]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	605a      	str	r2, [r3, #4]
      }
      if ((Size % 4U) == 2U)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f003 0303 	and.w	r3, r3, #3
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d104      	bne.n	8006dce <HASH_WriteData+0xb8>
      {
        hhash->Instance->DIN = (uint32_t) * (uint16_t *)inputaddr;
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	881a      	ldrh	r2, [r3, #0]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	605a      	str	r2, [r3, #4]
      }
      if ((Size % 4U) == 3U)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f003 0303 	and.w	r3, r3, #3
 8006dd4:	2b03      	cmp	r3, #3
 8006dd6:	d11c      	bne.n	8006e12 <HASH_WriteData+0xfc>
      {
        tmp1 = *(uint8_t *)inputaddr;
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	76fb      	strb	r3, [r7, #27]
        tmp2 = *(((uint8_t *)inputaddr) + 1U);
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	3301      	adds	r3, #1
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	76bb      	strb	r3, [r7, #26]
        tmp3 = *(((uint8_t *)inputaddr) + 2U);
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	3302      	adds	r3, #2
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	767b      	strb	r3, [r7, #25]
        hhash->Instance->DIN = ((uint32_t)tmp1) | ((uint32_t)tmp2 << 8U) | ((uint32_t)tmp3 << 16U);
 8006dee:	7efa      	ldrb	r2, [r7, #27]
 8006df0:	7ebb      	ldrb	r3, [r7, #26]
 8006df2:	021b      	lsls	r3, r3, #8
 8006df4:	ea42 0103 	orr.w	r1, r2, r3
 8006df8:	7e7b      	ldrb	r3, [r7, #25]
 8006dfa:	041a      	lsls	r2, r3, #16
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	430a      	orrs	r2, r1
 8006e02:	605a      	str	r2, [r3, #4]
      if ((Size % 4U) == 3U)
 8006e04:	e005      	b.n	8006e12 <HASH_WriteData+0xfc>
      }
    }
    else
    {
      hhash->Instance->DIN = *(uint32_t *)inputaddr;
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	461a      	mov	r2, r3
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	6812      	ldr	r2, [r2, #0]
 8006e10:	605a      	str	r2, [r3, #4]
    }
    hhash->HashInCount += 4U;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	69db      	ldr	r3, [r3, #28]
 8006e16:	1d1a      	adds	r2, r3, #4
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	61da      	str	r2, [r3, #28]
  }
}
 8006e1c:	bf00      	nop
 8006e1e:	3724      	adds	r7, #36	@ 0x24
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <HASH_WriteData_IT>:
  * @brief  Feed the input buffer to the HASH peripheral in interruption mode.
  * @param  hhash HASH handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef HASH_WriteData_IT(HASH_HandleTypeDef *hhash)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b088      	sub	sp, #32
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  uint32_t buffercounter;
  uint32_t count;
  __IO uint32_t keyaddr = (uint32_t)(hhash->pHashKeyBuffPtr);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e34:	613b      	str	r3, [r7, #16]
  __IO uint32_t inputaddr = (uint32_t)(hhash->pHashInBuffPtr);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	695b      	ldr	r3, [r3, #20]
 8006e3a:	60fb      	str	r3, [r7, #12]
  uint32_t nbbytePartialHash  = (((hhash->Instance->SR) >> 16U) * 4U); /* Nb byte  to enter in HASH fifo to trig
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e42:	0c1b      	lsrs	r3, r3, #16
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	617b      	str	r3, [r7, #20]
                                                                      a partial HASH computation*/

  if (hhash->State == HAL_HASH_STATE_BUSY)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	2b02      	cmp	r3, #2
 8006e52:	f040 82ea 	bne.w	800742a <HASH_WriteData_IT+0x602>
  {
    if ((hhash->Instance->CR & HASH_CR_MODE) == 0U)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	f040 80b3 	bne.w	8006fcc <HASH_WriteData_IT+0x1a4>
      }
      else
      {
#endif /* USE_HAL_HASH_SUSPEND_RESUME */

        if (((hhash->HashInCount) + nbbytePartialHash) < (hhash->Size))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	69da      	ldr	r2, [r3, #28]
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	441a      	add	r2, r3
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a1b      	ldr	r3, [r3, #32]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d258      	bcs.n	8006f28 <HASH_WriteData_IT+0x100>
        {
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 8006e76:	2300      	movs	r3, #0
 8006e78:	61fb      	str	r3, [r7, #28]
 8006e7a:	e015      	b.n	8006ea8 <HASH_WriteData_IT+0x80>
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)inputaddr;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	461a      	mov	r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	6812      	ldr	r2, [r2, #0]
 8006e86:	605a      	str	r2, [r3, #4]
            inputaddr += 4U;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	3304      	adds	r3, #4
 8006e8c:	60fb      	str	r3, [r7, #12]
            hhash->HashInCount += 4U;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	69db      	ldr	r3, [r3, #28]
 8006e92:	1d1a      	adds	r2, r3, #4
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	61da      	str	r2, [r3, #28]
            hhash->pHashInBuffPtr += 4U;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	695b      	ldr	r3, [r3, #20]
 8006e9c:	1d1a      	adds	r2, r3, #4
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	615a      	str	r2, [r3, #20]
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	3304      	adds	r3, #4
 8006ea6:	61fb      	str	r3, [r7, #28]
 8006ea8:	69fa      	ldr	r2, [r7, #28]
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d3e5      	bcc.n	8006e7c <HASH_WriteData_IT+0x54>
          }
          /* Wait for HASH_IT_DINI flag to be set */
          count = HASH_TIMEOUTVALUE;
 8006eb0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006eb4:	61bb      	str	r3, [r7, #24]
          do
          {
            count--;
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	61bb      	str	r3, [r7, #24]
            if (count == 0U)
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d117      	bne.n	8006ef2 <HASH_WriteData_IT+0xca>
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	6a1a      	ldr	r2, [r3, #32]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f022 0203 	bic.w	r2, r2, #3
 8006ed0:	621a      	str	r2, [r3, #32]

              /* Change state */
              hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ed6:	f043 0204 	orr.w	r2, r3, #4
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	635a      	str	r2, [r3, #52]	@ 0x34
              hhash->State = HAL_HASH_STATE_READY;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e2ad      	b.n	800744e <HASH_WriteData_IT+0x626>
            }
          } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DINIS));
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ef8:	f003 0301 	and.w	r3, r3, #1
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d0da      	beq.n	8006eb6 <HASH_WriteData_IT+0x8e>
 8006f00:	e2a4      	b.n	800744c <HASH_WriteData_IT+0x624>
        else
        {
          while ((hhash->HashInCount) < hhash->Size)
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)inputaddr;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	461a      	mov	r2, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	6812      	ldr	r2, [r2, #0]
 8006f0c:	605a      	str	r2, [r3, #4]
            inputaddr += 4U;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	3304      	adds	r3, #4
 8006f12:	60fb      	str	r3, [r7, #12]
            hhash->HashInCount += 4U;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	69db      	ldr	r3, [r3, #28]
 8006f18:	1d1a      	adds	r2, r3, #4
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	61da      	str	r2, [r3, #28]
            hhash->pHashInBuffPtr += 4U;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	695b      	ldr	r3, [r3, #20]
 8006f22:	1d1a      	adds	r2, r3, #4
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	615a      	str	r2, [r3, #20]
          while ((hhash->HashInCount) < hhash->Size)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	69da      	ldr	r2, [r3, #28]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6a1b      	ldr	r3, [r3, #32]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d3e6      	bcc.n	8006f02 <HASH_WriteData_IT+0xda>
#if (USE_HAL_HASH_REGISTER_CALLBACKS == 1U)
          /*Call registered Input complete callback*/
          hhash->InCpltCallback(hhash);
#else
          /*Call legacy weak Input complete callback*/
          HAL_HASH_InCpltCallback(hhash);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f7ff fec2 	bl	8006cbe <HAL_HASH_InCpltCallback>
#endif /* USE_HAL_HASH_REGISTER_CALLBACKS */
          if (hhash->Accumulation == 0U)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d138      	bne.n	8006fb4 <HASH_WriteData_IT+0x18c>
          {
            if (__HAL_HASH_GET_IT_SOURCE(hhash, HASH_IT_DINI))
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	6a1b      	ldr	r3, [r3, #32]
 8006f48:	f003 0301 	and.w	r3, r3, #1
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	f040 827d 	bne.w	800744c <HASH_WriteData_IT+0x624>
            {
              /* Start the message padding then the Digest calculation */
              SET_BIT(hhash->Instance->STR, HASH_STR_DCAL);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	689a      	ldr	r2, [r3, #8]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006f60:	609a      	str	r2, [r3, #8]

              /* Wait for HASH_FLAG_DCIS flag to be set */
              count = HASH_TIMEOUTVALUE;
 8006f62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006f66:	61bb      	str	r3, [r7, #24]
              do
              {
                count--;
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	61bb      	str	r3, [r7, #24]
                if (count == 0U)
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d117      	bne.n	8006fa4 <HASH_WriteData_IT+0x17c>
                {
                  /* Disable Interrupts */
                  __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	6a1a      	ldr	r2, [r3, #32]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f022 0203 	bic.w	r2, r2, #3
 8006f82:	621a      	str	r2, [r3, #32]

                  /* Change state */
                  hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f88:	f043 0204 	orr.w	r2, r3, #4
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	635a      	str	r2, [r3, #52]	@ 0x34
                  hhash->State = HAL_HASH_STATE_READY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                  __HAL_UNLOCK(hhash);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                  return HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e254      	b.n	800744e <HASH_WriteData_IT+0x626>
                }
              } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DCIS));
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006faa:	f003 0302 	and.w	r3, r3, #2
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d0da      	beq.n	8006f68 <HASH_WriteData_IT+0x140>
 8006fb2:	e24b      	b.n	800744c <HASH_WriteData_IT+0x624>
            }
          }
          else
          {
            /* Reset multi buffers accumulation flag */
            hhash->Accumulation = 0U;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	63da      	str	r2, [r3, #60]	@ 0x3c
            /* Disable Interrupts */
            __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	6a1a      	ldr	r2, [r3, #32]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f022 0201 	bic.w	r2, r2, #1
 8006fc8:	621a      	str	r2, [r3, #32]
 8006fca:	e23f      	b.n	800744c <HASH_WriteData_IT+0x624>
      }
#endif /* USE_HAL_HASH_SUSPEND_RESUME */
    }
    else /*HMAC */
    {
      if (hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_2) /* loading input*/
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006fd2:	2b04      	cmp	r3, #4
 8006fd4:	f040 80df 	bne.w	8007196 <HASH_WriteData_IT+0x36e>
          __HAL_UNLOCK(hhash);
        }
        else
        {
#endif /* USE_HAL_HASH_SUSPEND_RESUME */
          if (hhash->Accumulation == 1U)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d108      	bne.n	8006ff2 <HASH_WriteData_IT+0x1ca>
          {
            /* Configure the number of valid bits in last word of the message */
            MODIFY_REG(hhash->Instance->STR, HASH_STR_NBLW, 0U);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	689a      	ldr	r2, [r3, #8]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f022 021f 	bic.w	r2, r2, #31
 8006fee:	609a      	str	r2, [r3, #8]
 8006ff0:	e00d      	b.n	800700e <HASH_WriteData_IT+0x1e6>
          }
          else
          {
            /* Configure the number of valid bits in last word of the message */
            MODIFY_REG(hhash->Instance->STR, HASH_STR_NBLW, 8U * (hhash->Size % 4U));
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	f023 011f 	bic.w	r1, r3, #31
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6a1b      	ldr	r3, [r3, #32]
 8007000:	f003 0303 	and.w	r3, r3, #3
 8007004:	00da      	lsls	r2, r3, #3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	430a      	orrs	r2, r1
 800700c:	609a      	str	r2, [r3, #8]
          }
          if (((hhash->HashInCount) + nbbytePartialHash) < (hhash->Size))
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	69da      	ldr	r2, [r3, #28]
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	441a      	add	r2, r3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a1b      	ldr	r3, [r3, #32]
 800701a:	429a      	cmp	r2, r3
 800701c:	d258      	bcs.n	80070d0 <HASH_WriteData_IT+0x2a8>
          {
            for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 800701e:	2300      	movs	r3, #0
 8007020:	61fb      	str	r3, [r7, #28]
 8007022:	e015      	b.n	8007050 <HASH_WriteData_IT+0x228>
            {
              /* Write input data 4 bytes at a time */
              hhash->Instance->DIN = *(uint32_t *)inputaddr;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	461a      	mov	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	6812      	ldr	r2, [r2, #0]
 800702e:	605a      	str	r2, [r3, #4]
              inputaddr += 4U;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	3304      	adds	r3, #4
 8007034:	60fb      	str	r3, [r7, #12]
              hhash->HashInCount += 4U;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	69db      	ldr	r3, [r3, #28]
 800703a:	1d1a      	adds	r2, r3, #4
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	61da      	str	r2, [r3, #28]
              hhash->pHashInBuffPtr += 4U;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	695b      	ldr	r3, [r3, #20]
 8007044:	1d1a      	adds	r2, r3, #4
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	615a      	str	r2, [r3, #20]
            for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	3304      	adds	r3, #4
 800704e:	61fb      	str	r3, [r7, #28]
 8007050:	69fa      	ldr	r2, [r7, #28]
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	429a      	cmp	r2, r3
 8007056:	d3e5      	bcc.n	8007024 <HASH_WriteData_IT+0x1fc>
            }
            /* Wait for HASH_IT_DINI flag to be set */
            count = HASH_TIMEOUTVALUE;
 8007058:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800705c:	61bb      	str	r3, [r7, #24]
            do
            {
              count--;
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	3b01      	subs	r3, #1
 8007062:	61bb      	str	r3, [r7, #24]
              if (count == 0U)
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d117      	bne.n	800709a <HASH_WriteData_IT+0x272>
              {
                /* Disable Interrupts */
                __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	6a1a      	ldr	r2, [r3, #32]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f022 0203 	bic.w	r2, r2, #3
 8007078:	621a      	str	r2, [r3, #32]

                /* Change state */
                hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800707e:	f043 0204 	orr.w	r2, r3, #4
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	635a      	str	r2, [r3, #52]	@ 0x34
                hhash->State = HAL_HASH_STATE_READY;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2201      	movs	r2, #1
 800708a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                __HAL_UNLOCK(hhash);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e1d9      	b.n	800744e <HASH_WriteData_IT+0x626>
              }
            } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DINIS));
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070a0:	f003 0301 	and.w	r3, r3, #1
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d0da      	beq.n	800705e <HASH_WriteData_IT+0x236>
 80070a8:	e1d0      	b.n	800744c <HASH_WriteData_IT+0x624>
          else
          {
            while ((hhash->HashInCount) < hhash->Size)
            {
              /* Write input data 4 bytes at a time */
              hhash->Instance->DIN = *(uint32_t *)inputaddr;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	461a      	mov	r2, r3
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	6812      	ldr	r2, [r2, #0]
 80070b4:	605a      	str	r2, [r3, #4]
              inputaddr += 4U;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	3304      	adds	r3, #4
 80070ba:	60fb      	str	r3, [r7, #12]
              hhash->HashInCount += 4U;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	69db      	ldr	r3, [r3, #28]
 80070c0:	1d1a      	adds	r2, r3, #4
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	61da      	str	r2, [r3, #28]
              hhash->pHashInBuffPtr += 4U;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	695b      	ldr	r3, [r3, #20]
 80070ca:	1d1a      	adds	r2, r3, #4
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	615a      	str	r2, [r3, #20]
            while ((hhash->HashInCount) < hhash->Size)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	69da      	ldr	r2, [r3, #28]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6a1b      	ldr	r3, [r3, #32]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d3e6      	bcc.n	80070aa <HASH_WriteData_IT+0x282>
#if (USE_HAL_HASH_REGISTER_CALLBACKS == 1U)
            /*Call registered Input complete callback*/
            hhash->InCpltCallback(hhash);
#else
            /*Call legacy weak Input complete callback*/
            HAL_HASH_InCpltCallback(hhash);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f7ff fdee 	bl	8006cbe <HAL_HASH_InCpltCallback>
#endif /* USE_HAL_HASH_REGISTER_CALLBACKS */

            if (hhash->Accumulation == 0U)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d143      	bne.n	8007172 <HASH_WriteData_IT+0x34a>
            {
              if (__HAL_HASH_GET_IT_SOURCE(hhash, HASH_IT_DINI))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	6a1b      	ldr	r3, [r3, #32]
 80070f0:	f003 0301 	and.w	r3, r3, #1
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	f040 81a9 	bne.w	800744c <HASH_WriteData_IT+0x624>
              {
                /* Start the message padding then the Digest calculation */
                SET_BIT(hhash->Instance->STR, HASH_STR_DCAL);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	689a      	ldr	r2, [r3, #8]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007108:	609a      	str	r2, [r3, #8]

                /* Wait for HASH_FLAG_BUSY flag to be set */
                count = HASH_TIMEOUTVALUE;
 800710a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800710e:	61bb      	str	r3, [r7, #24]
                do
                {
                  count--;
 8007110:	69bb      	ldr	r3, [r7, #24]
 8007112:	3b01      	subs	r3, #1
 8007114:	61bb      	str	r3, [r7, #24]
                  if (count == 0U)
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d117      	bne.n	800714c <HASH_WriteData_IT+0x324>
                  {
                    /* Disable Interrupts */
                    __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	6a1a      	ldr	r2, [r3, #32]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f022 0203 	bic.w	r2, r2, #3
 800712a:	621a      	str	r2, [r3, #32]

                    /* Change state */
                    hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007130:	f043 0204 	orr.w	r2, r3, #4
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	635a      	str	r2, [r3, #52]	@ 0x34
                    hhash->State = HAL_HASH_STATE_READY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                    __HAL_UNLOCK(hhash);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                    return HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	e180      	b.n	800744e <HASH_WriteData_IT+0x626>
                  }
                } while (HAL_IS_BIT_SET(hhash->Instance->SR, HASH_FLAG_BUSY));
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007152:	f003 0308 	and.w	r3, r3, #8
 8007156:	2b08      	cmp	r3, #8
 8007158:	d0da      	beq.n	8007110 <HASH_WriteData_IT+0x2e8>

                hhash->Phase = HAL_HASH_PHASE_HMAC_STEP_3;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2205      	movs	r2, #5
 800715e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                hhash->HashInCount = 0U;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	61da      	str	r2, [r3, #28]
                hhash->pHashKeyBuffPtr = hhash->Init.pKey;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	68da      	ldr	r2, [r3, #12]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	625a      	str	r2, [r3, #36]	@ 0x24
 8007170:	e16c      	b.n	800744c <HASH_WriteData_IT+0x624>
            }

            else
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	6a1a      	ldr	r2, [r3, #32]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f022 0203 	bic.w	r2, r2, #3
 8007180:	621a      	str	r2, [r3, #32]
              hhash->State = HAL_HASH_STATE_READY;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2201      	movs	r2, #1
 8007186:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_OK;
 8007192:	2300      	movs	r3, #0
 8007194:	e15b      	b.n	800744e <HASH_WriteData_IT+0x626>
#if (USE_HAL_HASH_SUSPEND_RESUME == 1U)
        }
#endif /* USE_HAL_HASH_SUSPEND_RESUME */
      }

      else if (hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_3)/* loading Key*/
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800719c:	2b05      	cmp	r3, #5
 800719e:	f040 80a1 	bne.w	80072e4 <HASH_WriteData_IT+0x4bc>
      {

        /* Configure the number of valid bits in last word of the Key */
        MODIFY_REG(hhash->Instance->STR, HASH_STR_NBLW, 8U * ((hhash->Init.KeySize) % 4U));
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	f023 011f 	bic.w	r1, r3, #31
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	f003 0303 	and.w	r3, r3, #3
 80071b4:	00da      	lsls	r2, r3, #3
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	430a      	orrs	r2, r1
 80071bc:	609a      	str	r2, [r3, #8]

        if (((hhash->HashInCount) + nbbytePartialHash) < (hhash->Init.KeySize))
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	69da      	ldr	r2, [r3, #28]
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	441a      	add	r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d253      	bcs.n	8007276 <HASH_WriteData_IT+0x44e>
        {
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 80071ce:	2300      	movs	r3, #0
 80071d0:	61fb      	str	r3, [r7, #28]
 80071d2:	e015      	b.n	8007200 <HASH_WriteData_IT+0x3d8>
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)keyaddr;
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	461a      	mov	r2, r3
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	6812      	ldr	r2, [r2, #0]
 80071de:	605a      	str	r2, [r3, #4]
            keyaddr += 4U;
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	3304      	adds	r3, #4
 80071e4:	613b      	str	r3, [r7, #16]
            hhash->HashInCount += 4U;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	69db      	ldr	r3, [r3, #28]
 80071ea:	1d1a      	adds	r2, r3, #4
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	61da      	str	r2, [r3, #28]
            hhash->pHashKeyBuffPtr += 4U;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071f4:	1d1a      	adds	r2, r3, #4
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	625a      	str	r2, [r3, #36]	@ 0x24
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	3304      	adds	r3, #4
 80071fe:	61fb      	str	r3, [r7, #28]
 8007200:	69fa      	ldr	r2, [r7, #28]
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	429a      	cmp	r2, r3
 8007206:	d3e5      	bcc.n	80071d4 <HASH_WriteData_IT+0x3ac>
          }
          /* Wait for HASH_IT_DINI flag to be set */
          count = HASH_TIMEOUTVALUE;
 8007208:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800720c:	61bb      	str	r3, [r7, #24]
          do
          {
            count--;
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	3b01      	subs	r3, #1
 8007212:	61bb      	str	r3, [r7, #24]
            if (count == 0U)
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d117      	bne.n	800724a <HASH_WriteData_IT+0x422>
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	6a1a      	ldr	r2, [r3, #32]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f022 0203 	bic.w	r2, r2, #3
 8007228:	621a      	str	r2, [r3, #32]

              /* Change state */
              hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800722e:	f043 0204 	orr.w	r2, r3, #4
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	635a      	str	r2, [r3, #52]	@ 0x34
              hhash->State = HAL_HASH_STATE_READY;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2201      	movs	r2, #1
 800723a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	e101      	b.n	800744e <HASH_WriteData_IT+0x626>
            }
          } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DINIS));
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007250:	f003 0301 	and.w	r3, r3, #1
 8007254:	2b00      	cmp	r3, #0
 8007256:	d0da      	beq.n	800720e <HASH_WriteData_IT+0x3e6>
 8007258:	e0f8      	b.n	800744c <HASH_WriteData_IT+0x624>
        else
        {
          while ((hhash->HashInCount) < (hhash->Init.KeySize))
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)keyaddr;
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	461a      	mov	r2, r3
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	6812      	ldr	r2, [r2, #0]
 8007264:	605a      	str	r2, [r3, #4]
            keyaddr += 4U;
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	3304      	adds	r3, #4
 800726a:	613b      	str	r3, [r7, #16]
            hhash->HashInCount += 4U;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	69db      	ldr	r3, [r3, #28]
 8007270:	1d1a      	adds	r2, r3, #4
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	61da      	str	r2, [r3, #28]
          while ((hhash->HashInCount) < (hhash->Init.KeySize))
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	69da      	ldr	r2, [r3, #28]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	429a      	cmp	r2, r3
 8007280:	d3eb      	bcc.n	800725a <HASH_WriteData_IT+0x432>
          }
          /* Start the message padding then the Digest calculation */
          SET_BIT(hhash->Instance->STR, HASH_STR_DCAL);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	689a      	ldr	r2, [r3, #8]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007290:	609a      	str	r2, [r3, #8]

          /* Wait for HASH_FLAG_DCIS flag to be set */
          count = HASH_TIMEOUTVALUE;
 8007292:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007296:	61bb      	str	r3, [r7, #24]
          do
          {
            count--;
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	3b01      	subs	r3, #1
 800729c:	61bb      	str	r3, [r7, #24]
            if (count == 0U)
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d117      	bne.n	80072d4 <HASH_WriteData_IT+0x4ac>
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	6a1a      	ldr	r2, [r3, #32]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f022 0203 	bic.w	r2, r2, #3
 80072b2:	621a      	str	r2, [r3, #32]

              /* Change state */
              hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072b8:	f043 0204 	orr.w	r2, r3, #4
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	635a      	str	r2, [r3, #52]	@ 0x34
              hhash->State = HAL_HASH_STATE_READY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	e0bc      	b.n	800744e <HASH_WriteData_IT+0x626>
            }
          } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DCIS));
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072da:	f003 0302 	and.w	r3, r3, #2
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d0da      	beq.n	8007298 <HASH_WriteData_IT+0x470>
 80072e2:	e0b3      	b.n	800744c <HASH_WriteData_IT+0x624>
        }
      }
      else  /*first step , loading key*/
      {

        hhash->Phase = HAL_HASH_PHASE_HMAC_STEP_1;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2203      	movs	r2, #3
 80072e8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

        if (((hhash->HashInCount) + nbbytePartialHash) < (hhash->Init.KeySize))
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	69da      	ldr	r2, [r3, #28]
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	441a      	add	r2, r3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d258      	bcs.n	80073ae <HASH_WriteData_IT+0x586>
        {
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 80072fc:	2300      	movs	r3, #0
 80072fe:	61fb      	str	r3, [r7, #28]
 8007300:	e015      	b.n	800732e <HASH_WriteData_IT+0x506>
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)keyaddr;
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	461a      	mov	r2, r3
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	6812      	ldr	r2, [r2, #0]
 800730c:	605a      	str	r2, [r3, #4]
            keyaddr += 4U;
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	3304      	adds	r3, #4
 8007312:	613b      	str	r3, [r7, #16]
            hhash->HashInCount += 4U;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	69db      	ldr	r3, [r3, #28]
 8007318:	1d1a      	adds	r2, r3, #4
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	61da      	str	r2, [r3, #28]
            hhash->pHashKeyBuffPtr += 4U;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007322:	1d1a      	adds	r2, r3, #4
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	625a      	str	r2, [r3, #36]	@ 0x24
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	3304      	adds	r3, #4
 800732c:	61fb      	str	r3, [r7, #28]
 800732e:	69fa      	ldr	r2, [r7, #28]
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	429a      	cmp	r2, r3
 8007334:	d3e5      	bcc.n	8007302 <HASH_WriteData_IT+0x4da>
          }
          /* Wait for HASH_IT_DINI flag to be set */
          count = HASH_TIMEOUTVALUE;
 8007336:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800733a:	61bb      	str	r3, [r7, #24]
          do
          {
            count--;
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	3b01      	subs	r3, #1
 8007340:	61bb      	str	r3, [r7, #24]
            if (count == 0U)
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d117      	bne.n	8007378 <HASH_WriteData_IT+0x550>
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	6a1a      	ldr	r2, [r3, #32]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f022 0203 	bic.w	r2, r2, #3
 8007356:	621a      	str	r2, [r3, #32]

              /* Change state */
              hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800735c:	f043 0204 	orr.w	r2, r3, #4
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	635a      	str	r2, [r3, #52]	@ 0x34
              hhash->State = HAL_HASH_STATE_READY;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	e06a      	b.n	800744e <HASH_WriteData_IT+0x626>
            }
          } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DINIS));
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800737e:	f003 0301 	and.w	r3, r3, #1
 8007382:	2b00      	cmp	r3, #0
 8007384:	d0da      	beq.n	800733c <HASH_WriteData_IT+0x514>
 8007386:	e061      	b.n	800744c <HASH_WriteData_IT+0x624>
        else
        {
          while ((hhash->HashInCount) < (hhash->Init.KeySize))
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)keyaddr;
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	461a      	mov	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	6812      	ldr	r2, [r2, #0]
 8007392:	605a      	str	r2, [r3, #4]
            keyaddr += 4U;
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	3304      	adds	r3, #4
 8007398:	613b      	str	r3, [r7, #16]
            hhash->HashInCount += 4U;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	69db      	ldr	r3, [r3, #28]
 800739e:	1d1a      	adds	r2, r3, #4
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	61da      	str	r2, [r3, #28]
            hhash->pHashKeyBuffPtr += 4U;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073a8:	1d1a      	adds	r2, r3, #4
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	625a      	str	r2, [r3, #36]	@ 0x24
          while ((hhash->HashInCount) < (hhash->Init.KeySize))
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	69da      	ldr	r2, [r3, #28]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d3e6      	bcc.n	8007388 <HASH_WriteData_IT+0x560>
          }
          /* Start the message padding then the Digest calculation */
          SET_BIT(hhash->Instance->STR, HASH_STR_DCAL);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	689a      	ldr	r2, [r3, #8]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80073c8:	609a      	str	r2, [r3, #8]

          /* Wait for HASH_FLAG_BUSY flag to be set */
          count = HASH_TIMEOUTVALUE;
 80073ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80073ce:	61bb      	str	r3, [r7, #24]
          do
          {
            count--;
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	3b01      	subs	r3, #1
 80073d4:	61bb      	str	r3, [r7, #24]
            if (count == 0U)
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d117      	bne.n	800740c <HASH_WriteData_IT+0x5e4>
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	6a1a      	ldr	r2, [r3, #32]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f022 0203 	bic.w	r2, r2, #3
 80073ea:	621a      	str	r2, [r3, #32]

              /* Change state */
              hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073f0:	f043 0204 	orr.w	r2, r3, #4
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	635a      	str	r2, [r3, #52]	@ 0x34
              hhash->State = HAL_HASH_STATE_READY;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	e020      	b.n	800744e <HASH_WriteData_IT+0x626>
            }
          } while (HAL_IS_BIT_SET(hhash->Instance->SR, HASH_FLAG_BUSY));
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007412:	f003 0308 	and.w	r3, r3, #8
 8007416:	2b08      	cmp	r3, #8
 8007418:	d0da      	beq.n	80073d0 <HASH_WriteData_IT+0x5a8>
          /*change Phase to step 2*/
          hhash->Phase = HAL_HASH_PHASE_HMAC_STEP_2;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2204      	movs	r2, #4
 800741e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
          hhash->HashInCount = 0U;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	61da      	str	r2, [r3, #28]
 8007428:	e010      	b.n	800744c <HASH_WriteData_IT+0x624>
        }
      }
    }
  }
  else if ((hhash->State == HAL_HASH_STATE_SUSPENDED))
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007430:	b2db      	uxtb	r3, r3
 8007432:	2b03      	cmp	r3, #3
 8007434:	d101      	bne.n	800743a <HASH_WriteData_IT+0x612>
  {
    return HAL_OK;
 8007436:	2300      	movs	r3, #0
 8007438:	e009      	b.n	800744e <HASH_WriteData_IT+0x626>
  }
  else
  {
    /* Busy error code field */
    hhash->ErrorCode |= HAL_HASH_ERROR_BUSY;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800743e:	f043 0201 	orr.w	r2, r3, #1
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_HASH_REGISTER_CALLBACKS == 1U)
    /*Call registered error callback*/
    hhash->ErrorCallback(hhash);
#else
    /*Call legacy weak error callback*/
    HAL_HASH_ErrorCallback(hhash);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f7ff fc4d 	bl	8006ce6 <HAL_HASH_ErrorCallback>
#endif /* USE_HAL_HASH_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800744c:	2300      	movs	r3, #0
}
 800744e:	4618      	mov	r0, r3
 8007450:	3720      	adds	r7, #32
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
	...

08007458 <HASH_GetDigest>:
  * @param  pMsgDigest pointer to the computed digest.
  * @param  Size message digest size in bytes.
  * @retval None
  */
static void HASH_GetDigest(const HASH_HandleTypeDef *hhash, const uint8_t *pMsgDigest, uint8_t Size)
{
 8007458:	b480      	push	{r7}
 800745a:	b0b7      	sub	sp, #220	@ 0xdc
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	4613      	mov	r3, r2
 8007464:	71fb      	strb	r3, [r7, #7]
  uint32_t msgdigest = (uint32_t)pMsgDigest;
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  switch (Size)
 800746c:	79fb      	ldrb	r3, [r7, #7]
 800746e:	2b30      	cmp	r3, #48	@ 0x30
 8007470:	dc44      	bgt.n	80074fc <HASH_GetDigest+0xa4>
 8007472:	2b14      	cmp	r3, #20
 8007474:	f2c0 82e7 	blt.w	8007a46 <HASH_GetDigest+0x5ee>
 8007478:	3b14      	subs	r3, #20
 800747a:	2b1c      	cmp	r3, #28
 800747c:	f200 82e3 	bhi.w	8007a46 <HASH_GetDigest+0x5ee>
 8007480:	a201      	add	r2, pc, #4	@ (adr r2, 8007488 <HASH_GetDigest+0x30>)
 8007482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007486:	bf00      	nop
 8007488:	08007505 	.word	0x08007505
 800748c:	08007a47 	.word	0x08007a47
 8007490:	08007a47 	.word	0x08007a47
 8007494:	08007a47 	.word	0x08007a47
 8007498:	08007a47 	.word	0x08007a47
 800749c:	08007a47 	.word	0x08007a47
 80074a0:	08007a47 	.word	0x08007a47
 80074a4:	08007a47 	.word	0x08007a47
 80074a8:	0800759d 	.word	0x0800759d
 80074ac:	08007a47 	.word	0x08007a47
 80074b0:	08007a47 	.word	0x08007a47
 80074b4:	08007a47 	.word	0x08007a47
 80074b8:	08007671 	.word	0x08007671
 80074bc:	08007a47 	.word	0x08007a47
 80074c0:	08007a47 	.word	0x08007a47
 80074c4:	08007a47 	.word	0x08007a47
 80074c8:	08007a47 	.word	0x08007a47
 80074cc:	08007a47 	.word	0x08007a47
 80074d0:	08007a47 	.word	0x08007a47
 80074d4:	08007a47 	.word	0x08007a47
 80074d8:	08007a47 	.word	0x08007a47
 80074dc:	08007a47 	.word	0x08007a47
 80074e0:	08007a47 	.word	0x08007a47
 80074e4:	08007a47 	.word	0x08007a47
 80074e8:	08007a47 	.word	0x08007a47
 80074ec:	08007a47 	.word	0x08007a47
 80074f0:	08007a47 	.word	0x08007a47
 80074f4:	08007a47 	.word	0x08007a47
 80074f8:	08007763 	.word	0x08007763
 80074fc:	2b40      	cmp	r3, #64	@ 0x40
 80074fe:	f000 81d1 	beq.w	80078a4 <HASH_GetDigest+0x44c>
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[15]);

      break;
#endif /* defined(HASH_ALGOSELECTION_SHA512)*/
    default:
      break;
 8007502:	e2a0      	b.n	8007a46 <HASH_GetDigest+0x5ee>
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[0]);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68da      	ldr	r2, [r3, #12]
 800750a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800750e:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
  return __builtin_bswap32(value);
 8007512:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007516:	ba12      	rev	r2, r2
 8007518:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800751a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800751e:	3304      	adds	r3, #4
 8007520:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[1]);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	691a      	ldr	r2, [r3, #16]
 800752a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800752e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007532:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007536:	ba12      	rev	r2, r2
 8007538:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800753a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800753e:	3304      	adds	r3, #4
 8007540:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[2]);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	695a      	ldr	r2, [r3, #20]
 800754a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800754e:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8007552:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007556:	ba12      	rev	r2, r2
 8007558:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800755a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800755e:	3304      	adds	r3, #4
 8007560:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[3]);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	699a      	ldr	r2, [r3, #24]
 800756a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800756e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8007572:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8007576:	ba12      	rev	r2, r2
 8007578:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800757a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800757e:	3304      	adds	r3, #4
 8007580:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[4]);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	69da      	ldr	r2, [r3, #28]
 800758a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800758e:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8007592:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007596:	ba12      	rev	r2, r2
 8007598:	601a      	str	r2, [r3, #0]
      break;
 800759a:	e255      	b.n	8007a48 <HASH_GetDigest+0x5f0>
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[0]);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	68da      	ldr	r2, [r3, #12]
 80075a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80075a6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80075aa:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80075ae:	ba12      	rev	r2, r2
 80075b0:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80075b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80075b6:	3304      	adds	r3, #4
 80075b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[1]);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	691a      	ldr	r2, [r3, #16]
 80075c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80075c6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80075ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80075ce:	ba12      	rev	r2, r2
 80075d0:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80075d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80075d6:	3304      	adds	r3, #4
 80075d8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[2]);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	695a      	ldr	r2, [r3, #20]
 80075e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80075e6:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80075ea:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80075ee:	ba12      	rev	r2, r2
 80075f0:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80075f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80075f6:	3304      	adds	r3, #4
 80075f8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[3]);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	699a      	ldr	r2, [r3, #24]
 8007602:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007606:	f8c7 20b0 	str.w	r2, [r7, #176]	@ 0xb0
 800760a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800760e:	ba12      	rev	r2, r2
 8007610:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8007612:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007616:	3304      	adds	r3, #4
 8007618:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[4]);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	69da      	ldr	r2, [r3, #28]
 8007622:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007626:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800762a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800762e:	ba12      	rev	r2, r2
 8007630:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8007632:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007636:	3304      	adds	r3, #4
 8007638:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 800763c:	4b98      	ldr	r3, [pc, #608]	@ (80078a0 <HASH_GetDigest+0x448>)
 800763e:	695a      	ldr	r2, [r3, #20]
 8007640:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007644:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 8007648:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800764c:	ba12      	rev	r2, r2
 800764e:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8007650:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007654:	3304      	adds	r3, #4
 8007656:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 800765a:	4b91      	ldr	r3, [pc, #580]	@ (80078a0 <HASH_GetDigest+0x448>)
 800765c:	699a      	ldr	r2, [r3, #24]
 800765e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007662:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007666:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800766a:	ba12      	rev	r2, r2
 800766c:	601a      	str	r2, [r3, #0]
      break;
 800766e:	e1eb      	b.n	8007a48 <HASH_GetDigest+0x5f0>
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[0]);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	68da      	ldr	r2, [r3, #12]
 8007676:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800767a:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800767e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007682:	ba12      	rev	r2, r2
 8007684:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8007686:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800768a:	3304      	adds	r3, #4
 800768c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[1]);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	691a      	ldr	r2, [r3, #16]
 8007696:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800769a:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 800769e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80076a2:	ba12      	rev	r2, r2
 80076a4:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80076a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80076aa:	3304      	adds	r3, #4
 80076ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[2]);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	695a      	ldr	r2, [r3, #20]
 80076b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80076ba:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80076be:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80076c2:	ba12      	rev	r2, r2
 80076c4:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80076c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80076ca:	3304      	adds	r3, #4
 80076cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[3]);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	699a      	ldr	r2, [r3, #24]
 80076d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80076da:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80076de:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80076e2:	ba12      	rev	r2, r2
 80076e4:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80076e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80076ea:	3304      	adds	r3, #4
 80076ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[4]);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	69da      	ldr	r2, [r3, #28]
 80076f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80076fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80076fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007702:	ba12      	rev	r2, r2
 8007704:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8007706:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800770a:	3304      	adds	r3, #4
 800770c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 8007710:	4b63      	ldr	r3, [pc, #396]	@ (80078a0 <HASH_GetDigest+0x448>)
 8007712:	695a      	ldr	r2, [r3, #20]
 8007714:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007718:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800771c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007720:	ba12      	rev	r2, r2
 8007722:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8007724:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007728:	3304      	adds	r3, #4
 800772a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 800772e:	4b5c      	ldr	r3, [pc, #368]	@ (80078a0 <HASH_GetDigest+0x448>)
 8007730:	699a      	ldr	r2, [r3, #24]
 8007732:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007736:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800773a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800773e:	ba12      	rev	r2, r2
 8007740:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8007742:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007746:	3304      	adds	r3, #4
 8007748:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[7]);
 800774c:	4b54      	ldr	r3, [pc, #336]	@ (80078a0 <HASH_GetDigest+0x448>)
 800774e:	69da      	ldr	r2, [r3, #28]
 8007750:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007754:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8007758:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800775c:	ba12      	rev	r2, r2
 800775e:	601a      	str	r2, [r3, #0]
      break;
 8007760:	e172      	b.n	8007a48 <HASH_GetDigest+0x5f0>
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[0]);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	68da      	ldr	r2, [r3, #12]
 8007768:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800776c:	657a      	str	r2, [r7, #84]	@ 0x54
 800776e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007770:	ba12      	rev	r2, r2
 8007772:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8007774:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007778:	3304      	adds	r3, #4
 800777a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[1]);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	691a      	ldr	r2, [r3, #16]
 8007784:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007788:	65ba      	str	r2, [r7, #88]	@ 0x58
 800778a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800778c:	ba12      	rev	r2, r2
 800778e:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8007790:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007794:	3304      	adds	r3, #4
 8007796:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[2]);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	695a      	ldr	r2, [r3, #20]
 80077a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077a4:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80077a6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80077a8:	ba12      	rev	r2, r2
 80077aa:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80077ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077b0:	3304      	adds	r3, #4
 80077b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[3]);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	699a      	ldr	r2, [r3, #24]
 80077bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077c0:	663a      	str	r2, [r7, #96]	@ 0x60
 80077c2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80077c4:	ba12      	rev	r2, r2
 80077c6:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80077c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077cc:	3304      	adds	r3, #4
 80077ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[4]);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	69da      	ldr	r2, [r3, #28]
 80077d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077dc:	667a      	str	r2, [r7, #100]	@ 0x64
 80077de:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80077e0:	ba12      	rev	r2, r2
 80077e2:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80077e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077e8:	3304      	adds	r3, #4
 80077ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 80077ee:	4b2c      	ldr	r3, [pc, #176]	@ (80078a0 <HASH_GetDigest+0x448>)
 80077f0:	695a      	ldr	r2, [r3, #20]
 80077f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077f6:	66ba      	str	r2, [r7, #104]	@ 0x68
 80077f8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80077fa:	ba12      	rev	r2, r2
 80077fc:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80077fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007802:	3304      	adds	r3, #4
 8007804:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 8007808:	4b25      	ldr	r3, [pc, #148]	@ (80078a0 <HASH_GetDigest+0x448>)
 800780a:	699a      	ldr	r2, [r3, #24]
 800780c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007810:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007812:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007814:	ba12      	rev	r2, r2
 8007816:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8007818:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800781c:	3304      	adds	r3, #4
 800781e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[7]);
 8007822:	4b1f      	ldr	r3, [pc, #124]	@ (80078a0 <HASH_GetDigest+0x448>)
 8007824:	69da      	ldr	r2, [r3, #28]
 8007826:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800782a:	673a      	str	r2, [r7, #112]	@ 0x70
 800782c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800782e:	ba12      	rev	r2, r2
 8007830:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8007832:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007836:	3304      	adds	r3, #4
 8007838:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[8]);
 800783c:	4b18      	ldr	r3, [pc, #96]	@ (80078a0 <HASH_GetDigest+0x448>)
 800783e:	6a1a      	ldr	r2, [r3, #32]
 8007840:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007844:	677a      	str	r2, [r7, #116]	@ 0x74
 8007846:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007848:	ba12      	rev	r2, r2
 800784a:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800784c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007850:	3304      	adds	r3, #4
 8007852:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[9]);
 8007856:	4b12      	ldr	r3, [pc, #72]	@ (80078a0 <HASH_GetDigest+0x448>)
 8007858:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800785a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800785e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8007860:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8007862:	ba12      	rev	r2, r2
 8007864:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8007866:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800786a:	3304      	adds	r3, #4
 800786c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[10]);
 8007870:	4b0b      	ldr	r3, [pc, #44]	@ (80078a0 <HASH_GetDigest+0x448>)
 8007872:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007874:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007878:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800787a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800787c:	ba12      	rev	r2, r2
 800787e:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8007880:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007884:	3304      	adds	r3, #4
 8007886:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[11]);
 800788a:	4b05      	ldr	r3, [pc, #20]	@ (80078a0 <HASH_GetDigest+0x448>)
 800788c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800788e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007892:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007896:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800789a:	ba12      	rev	r2, r2
 800789c:	601a      	str	r2, [r3, #0]
      break;
 800789e:	e0d3      	b.n	8007a48 <HASH_GetDigest+0x5f0>
 80078a0:	420c0710 	.word	0x420c0710
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[0]);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	68da      	ldr	r2, [r3, #12]
 80078aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078ae:	617a      	str	r2, [r7, #20]
 80078b0:	697a      	ldr	r2, [r7, #20]
 80078b2:	ba12      	rev	r2, r2
 80078b4:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80078b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078ba:	3304      	adds	r3, #4
 80078bc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[1]);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	691a      	ldr	r2, [r3, #16]
 80078c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078ca:	61ba      	str	r2, [r7, #24]
 80078cc:	69ba      	ldr	r2, [r7, #24]
 80078ce:	ba12      	rev	r2, r2
 80078d0:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80078d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078d6:	3304      	adds	r3, #4
 80078d8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[2]);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	695a      	ldr	r2, [r3, #20]
 80078e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078e6:	61fa      	str	r2, [r7, #28]
 80078e8:	69fa      	ldr	r2, [r7, #28]
 80078ea:	ba12      	rev	r2, r2
 80078ec:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80078ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078f2:	3304      	adds	r3, #4
 80078f4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[3]);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	699a      	ldr	r2, [r3, #24]
 80078fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007902:	623a      	str	r2, [r7, #32]
 8007904:	6a3a      	ldr	r2, [r7, #32]
 8007906:	ba12      	rev	r2, r2
 8007908:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800790a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800790e:	3304      	adds	r3, #4
 8007910:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[4]);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	69da      	ldr	r2, [r3, #28]
 800791a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800791e:	627a      	str	r2, [r7, #36]	@ 0x24
 8007920:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007922:	ba12      	rev	r2, r2
 8007924:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8007926:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800792a:	3304      	adds	r3, #4
 800792c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 8007930:	4b48      	ldr	r3, [pc, #288]	@ (8007a54 <HASH_GetDigest+0x5fc>)
 8007932:	695a      	ldr	r2, [r3, #20]
 8007934:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007938:	62ba      	str	r2, [r7, #40]	@ 0x28
 800793a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800793c:	ba12      	rev	r2, r2
 800793e:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8007940:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007944:	3304      	adds	r3, #4
 8007946:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 800794a:	4b42      	ldr	r3, [pc, #264]	@ (8007a54 <HASH_GetDigest+0x5fc>)
 800794c:	699a      	ldr	r2, [r3, #24]
 800794e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007952:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007954:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007956:	ba12      	rev	r2, r2
 8007958:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800795a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800795e:	3304      	adds	r3, #4
 8007960:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[7]);
 8007964:	4b3b      	ldr	r3, [pc, #236]	@ (8007a54 <HASH_GetDigest+0x5fc>)
 8007966:	69da      	ldr	r2, [r3, #28]
 8007968:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800796c:	633a      	str	r2, [r7, #48]	@ 0x30
 800796e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007970:	ba12      	rev	r2, r2
 8007972:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8007974:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007978:	3304      	adds	r3, #4
 800797a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[8]);
 800797e:	4b35      	ldr	r3, [pc, #212]	@ (8007a54 <HASH_GetDigest+0x5fc>)
 8007980:	6a1a      	ldr	r2, [r3, #32]
 8007982:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007986:	637a      	str	r2, [r7, #52]	@ 0x34
 8007988:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800798a:	ba12      	rev	r2, r2
 800798c:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800798e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007992:	3304      	adds	r3, #4
 8007994:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[9]);
 8007998:	4b2e      	ldr	r3, [pc, #184]	@ (8007a54 <HASH_GetDigest+0x5fc>)
 800799a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800799c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079a0:	63ba      	str	r2, [r7, #56]	@ 0x38
 80079a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80079a4:	ba12      	rev	r2, r2
 80079a6:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80079a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079ac:	3304      	adds	r3, #4
 80079ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[10]);
 80079b2:	4b28      	ldr	r3, [pc, #160]	@ (8007a54 <HASH_GetDigest+0x5fc>)
 80079b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80079b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079ba:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80079bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80079be:	ba12      	rev	r2, r2
 80079c0:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80079c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079c6:	3304      	adds	r3, #4
 80079c8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[11]);
 80079cc:	4b21      	ldr	r3, [pc, #132]	@ (8007a54 <HASH_GetDigest+0x5fc>)
 80079ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079d4:	643a      	str	r2, [r7, #64]	@ 0x40
 80079d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80079d8:	ba12      	rev	r2, r2
 80079da:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80079dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079e0:	3304      	adds	r3, #4
 80079e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[12]);
 80079e6:	4b1b      	ldr	r3, [pc, #108]	@ (8007a54 <HASH_GetDigest+0x5fc>)
 80079e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80079ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079ee:	647a      	str	r2, [r7, #68]	@ 0x44
 80079f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80079f2:	ba12      	rev	r2, r2
 80079f4:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80079f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079fa:	3304      	adds	r3, #4
 80079fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[13]);
 8007a00:	4b14      	ldr	r3, [pc, #80]	@ (8007a54 <HASH_GetDigest+0x5fc>)
 8007a02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a08:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007a0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a0c:	ba12      	rev	r2, r2
 8007a0e:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8007a10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a14:	3304      	adds	r3, #4
 8007a16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[14]);
 8007a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8007a54 <HASH_GetDigest+0x5fc>)
 8007a1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a22:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007a24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007a26:	ba12      	rev	r2, r2
 8007a28:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8007a2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a2e:	3304      	adds	r3, #4
 8007a30:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[15]);
 8007a34:	4b07      	ldr	r3, [pc, #28]	@ (8007a54 <HASH_GetDigest+0x5fc>)
 8007a36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a3c:	653a      	str	r2, [r7, #80]	@ 0x50
 8007a3e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007a40:	ba12      	rev	r2, r2
 8007a42:	601a      	str	r2, [r3, #0]
      break;
 8007a44:	e000      	b.n	8007a48 <HASH_GetDigest+0x5f0>
      break;
 8007a46:	bf00      	nop
  }
}
 8007a48:	bf00      	nop
 8007a4a:	37dc      	adds	r7, #220	@ 0xdc
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr
 8007a54:	420c0710 	.word	0x420c0710

08007a58 <HASH_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef HASH_WaitOnFlagUntilTimeout(HASH_HandleTypeDef *hhash, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Timeout)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b086      	sub	sp, #24
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	603b      	str	r3, [r7, #0]
 8007a64:	4613      	mov	r3, r2
 8007a66:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart = HAL_GetTick();
 8007a68:	f7fd ffac 	bl	80059c4 <HAL_GetTick>
 8007a6c:	6178      	str	r0, [r7, #20]

  while (__HAL_HASH_GET_FLAG(hhash, Flag) == Status)
 8007a6e:	e01e      	b.n	8007aae <HASH_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a76:	d01a      	beq.n	8007aae <HASH_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007a78:	f7fd ffa4 	bl	80059c4 <HAL_GetTick>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	1ad3      	subs	r3, r2, r3
 8007a82:	683a      	ldr	r2, [r7, #0]
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d302      	bcc.n	8007a8e <HASH_WaitOnFlagUntilTimeout+0x36>
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d10f      	bne.n	8007aae <HASH_WaitOnFlagUntilTimeout+0x56>
      {
        /* Set State to Ready to be able to restart later on */
        hhash->State  = HAL_HASH_STATE_READY;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2201      	movs	r2, #1
 8007a92:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a9a:	f043 0204 	orr.w	r2, r3, #4
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	635a      	str	r2, [r3, #52]	@ 0x34
        /* Process Unlocked */
        __HAL_UNLOCK(hhash);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

        return HAL_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e01f      	b.n	8007aee <HASH_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_HASH_GET_FLAG(hhash, Flag) == Status)
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	2b08      	cmp	r3, #8
 8007ab2:	d90c      	bls.n	8007ace <HASH_WaitOnFlagUntilTimeout+0x76>
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	4013      	ands	r3, r2
 8007abe:	68ba      	ldr	r2, [r7, #8]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	bf0c      	ite	eq
 8007ac4:	2301      	moveq	r3, #1
 8007ac6:	2300      	movne	r3, #0
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	461a      	mov	r2, r3
 8007acc:	e00b      	b.n	8007ae6 <HASH_WaitOnFlagUntilTimeout+0x8e>
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	4013      	ands	r3, r2
 8007ad8:	68ba      	ldr	r2, [r7, #8]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	bf0c      	ite	eq
 8007ade:	2301      	moveq	r3, #1
 8007ae0:	2300      	movne	r3, #0
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	79fb      	ldrb	r3, [r7, #7]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d0c1      	beq.n	8007a70 <HASH_WaitOnFlagUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3718      	adds	r7, #24
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}

08007af6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007af6:	b580      	push	{r7, lr}
 8007af8:	b082      	sub	sp, #8
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d101      	bne.n	8007b08 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	e08d      	b.n	8007c24 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d106      	bne.n	8007b22 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f7fc ff1b 	bl	8004958 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2224      	movs	r2, #36	@ 0x24
 8007b26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f022 0201 	bic.w	r2, r2, #1
 8007b38:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	685a      	ldr	r2, [r3, #4]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007b46:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	689a      	ldr	r2, [r3, #8]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007b56:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d107      	bne.n	8007b70 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	689a      	ldr	r2, [r3, #8]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007b6c:	609a      	str	r2, [r3, #8]
 8007b6e:	e006      	b.n	8007b7e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	689a      	ldr	r2, [r3, #8]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007b7c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	68db      	ldr	r3, [r3, #12]
 8007b82:	2b02      	cmp	r3, #2
 8007b84:	d108      	bne.n	8007b98 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	685a      	ldr	r2, [r3, #4]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b94:	605a      	str	r2, [r3, #4]
 8007b96:	e007      	b.n	8007ba8 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	685a      	ldr	r2, [r3, #4]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007ba6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	6812      	ldr	r2, [r2, #0]
 8007bb2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007bb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bba:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	68da      	ldr	r2, [r3, #12]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007bca:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	691a      	ldr	r2, [r3, #16]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	695b      	ldr	r3, [r3, #20]
 8007bd4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	699b      	ldr	r3, [r3, #24]
 8007bdc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	430a      	orrs	r2, r1
 8007be4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	69d9      	ldr	r1, [r3, #28]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a1a      	ldr	r2, [r3, #32]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	430a      	orrs	r2, r1
 8007bf4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f042 0201 	orr.w	r2, r2, #1
 8007c04:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2220      	movs	r2, #32
 8007c10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007c22:	2300      	movs	r3, #0
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3708      	adds	r7, #8
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	2b20      	cmp	r3, #32
 8007c40:	d138      	bne.n	8007cb4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d101      	bne.n	8007c50 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007c4c:	2302      	movs	r3, #2
 8007c4e:	e032      	b.n	8007cb6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2201      	movs	r2, #1
 8007c54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2224      	movs	r2, #36	@ 0x24
 8007c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f022 0201 	bic.w	r2, r2, #1
 8007c6e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007c7e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	6819      	ldr	r1, [r3, #0]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	683a      	ldr	r2, [r7, #0]
 8007c8c:	430a      	orrs	r2, r1
 8007c8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f042 0201 	orr.w	r2, r2, #1
 8007c9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2220      	movs	r2, #32
 8007ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	e000      	b.n	8007cb6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007cb4:	2302      	movs	r3, #2
  }
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	370c      	adds	r7, #12
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr

08007cc2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007cc2:	b480      	push	{r7}
 8007cc4:	b085      	sub	sp, #20
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
 8007cca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	2b20      	cmp	r3, #32
 8007cd6:	d139      	bne.n	8007d4c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d101      	bne.n	8007ce6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007ce2:	2302      	movs	r3, #2
 8007ce4:	e033      	b.n	8007d4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2201      	movs	r2, #1
 8007cea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2224      	movs	r2, #36	@ 0x24
 8007cf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f022 0201 	bic.w	r2, r2, #1
 8007d04:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007d14:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	021b      	lsls	r3, r3, #8
 8007d1a:	68fa      	ldr	r2, [r7, #12]
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f042 0201 	orr.w	r2, r2, #1
 8007d36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2220      	movs	r2, #32
 8007d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2200      	movs	r2, #0
 8007d44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	e000      	b.n	8007d4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007d4c:	2302      	movs	r3, #2
  }
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3714      	adds	r7, #20
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr

08007d5a <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8007d5a:	b480      	push	{r7}
 8007d5c:	b085      	sub	sp, #20
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
 8007d62:	460b      	mov	r3, r1
 8007d64:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8007d66:	230a      	movs	r3, #10
 8007d68:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8007d6a:	e002      	b.n	8007d72 <PCD_GET_EP_RX_CNT+0x18>
  {
    count--;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d1f9      	bne.n	8007d6c <PCD_GET_EP_RX_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 8007d78:	887b      	ldrh	r3, [r7, #2]
 8007d7a:	00db      	lsls	r3, r3, #3
 8007d7c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007d80:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	0c1b      	lsrs	r3, r3, #16
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d8e:	b29b      	uxth	r3, r3
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3714      	adds	r7, #20
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b085      	sub	sp, #20
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	460b      	mov	r3, r1
 8007da6:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8007da8:	230a      	movs	r3, #10
 8007daa:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8007dac:	e002      	b.n	8007db4 <PCD_GET_EP_DBUF0_CNT+0x18>
  {
    count--;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	3b01      	subs	r3, #1
 8007db2:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d1f9      	bne.n	8007dae <PCD_GET_EP_DBUF0_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 8007dba:	887b      	ldrh	r3, [r7, #2]
 8007dbc:	00db      	lsls	r3, r3, #3
 8007dbe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007dc2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	0c1b      	lsrs	r3, r3, #16
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007dd0:	b29b      	uxth	r3, r3
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3714      	adds	r7, #20
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr

08007dde <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8007dde:	b480      	push	{r7}
 8007de0:	b085      	sub	sp, #20
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
 8007de6:	460b      	mov	r3, r1
 8007de8:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8007dea:	230a      	movs	r3, #10
 8007dec:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8007dee:	e002      	b.n	8007df6 <PCD_GET_EP_DBUF1_CNT+0x18>
  {
    count--;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	3b01      	subs	r3, #1
 8007df4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d1f9      	bne.n	8007df0 <PCD_GET_EP_DBUF1_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 8007dfc:	887b      	ldrh	r3, [r7, #2]
 8007dfe:	00db      	lsls	r3, r3, #3
 8007e00:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007e04:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	0c1b      	lsrs	r3, r3, #16
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e12:	b29b      	uxth	r3, r3
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3714      	adds	r7, #20
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b086      	sub	sp, #24
 8007e24:	af02      	add	r7, sp, #8
 8007e26:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d101      	bne.n	8007e32 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e0f3      	b.n	800801a <HAL_PCD_Init+0x1fa>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d106      	bne.n	8007e4c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f7fd f8fa 	bl	8005040 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2203      	movs	r2, #3
 8007e50:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f009 fe88 	bl	8011b6e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6818      	ldr	r0, [r3, #0]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	7c1a      	ldrb	r2, [r3, #16]
 8007e66:	f88d 2000 	strb.w	r2, [sp]
 8007e6a:	3304      	adds	r3, #4
 8007e6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007e6e:	f009 fe4c 	bl	8011b0a <USB_CoreInit>
 8007e72:	4603      	mov	r3, r0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d005      	beq.n	8007e84 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2202      	movs	r2, #2
 8007e7c:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8007e80:	2301      	movs	r3, #1
 8007e82:	e0ca      	b.n	800801a <HAL_PCD_Init+0x1fa>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	2100      	movs	r1, #0
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f009 fe84 	bl	8011b98 <USB_SetCurrentMode>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d005      	beq.n	8007ea2 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2202      	movs	r2, #2
 8007e9a:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e0bb      	b.n	800801a <HAL_PCD_Init+0x1fa>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	73fb      	strb	r3, [r7, #15]
 8007ea6:	e03f      	b.n	8007f28 <HAL_PCD_Init+0x108>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007ea8:	7bfa      	ldrb	r2, [r7, #15]
 8007eaa:	6879      	ldr	r1, [r7, #4]
 8007eac:	4613      	mov	r3, r2
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	4413      	add	r3, r2
 8007eb2:	00db      	lsls	r3, r3, #3
 8007eb4:	440b      	add	r3, r1
 8007eb6:	3315      	adds	r3, #21
 8007eb8:	2201      	movs	r2, #1
 8007eba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007ebc:	7bfa      	ldrb	r2, [r7, #15]
 8007ebe:	6879      	ldr	r1, [r7, #4]
 8007ec0:	4613      	mov	r3, r2
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	4413      	add	r3, r2
 8007ec6:	00db      	lsls	r3, r3, #3
 8007ec8:	440b      	add	r3, r1
 8007eca:	3314      	adds	r3, #20
 8007ecc:	7bfa      	ldrb	r2, [r7, #15]
 8007ece:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007ed0:	7bfa      	ldrb	r2, [r7, #15]
 8007ed2:	6879      	ldr	r1, [r7, #4]
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	4413      	add	r3, r2
 8007eda:	00db      	lsls	r3, r3, #3
 8007edc:	440b      	add	r3, r1
 8007ede:	3317      	adds	r3, #23
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007ee4:	7bfa      	ldrb	r2, [r7, #15]
 8007ee6:	6879      	ldr	r1, [r7, #4]
 8007ee8:	4613      	mov	r3, r2
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	4413      	add	r3, r2
 8007eee:	00db      	lsls	r3, r3, #3
 8007ef0:	440b      	add	r3, r1
 8007ef2:	3324      	adds	r3, #36	@ 0x24
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007ef8:	7bfa      	ldrb	r2, [r7, #15]
 8007efa:	6879      	ldr	r1, [r7, #4]
 8007efc:	4613      	mov	r3, r2
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	4413      	add	r3, r2
 8007f02:	00db      	lsls	r3, r3, #3
 8007f04:	440b      	add	r3, r1
 8007f06:	3328      	adds	r3, #40	@ 0x28
 8007f08:	2200      	movs	r2, #0
 8007f0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007f0c:	7bfb      	ldrb	r3, [r7, #15]
 8007f0e:	6879      	ldr	r1, [r7, #4]
 8007f10:	1c5a      	adds	r2, r3, #1
 8007f12:	4613      	mov	r3, r2
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	4413      	add	r3, r2
 8007f18:	00db      	lsls	r3, r3, #3
 8007f1a:	440b      	add	r3, r1
 8007f1c:	3304      	adds	r3, #4
 8007f1e:	2200      	movs	r2, #0
 8007f20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f22:	7bfb      	ldrb	r3, [r7, #15]
 8007f24:	3301      	adds	r3, #1
 8007f26:	73fb      	strb	r3, [r7, #15]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	791b      	ldrb	r3, [r3, #4]
 8007f2c:	7bfa      	ldrb	r2, [r7, #15]
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d3ba      	bcc.n	8007ea8 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f32:	2300      	movs	r3, #0
 8007f34:	73fb      	strb	r3, [r7, #15]
 8007f36:	e044      	b.n	8007fc2 <HAL_PCD_Init+0x1a2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007f38:	7bfa      	ldrb	r2, [r7, #15]
 8007f3a:	6879      	ldr	r1, [r7, #4]
 8007f3c:	4613      	mov	r3, r2
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	4413      	add	r3, r2
 8007f42:	00db      	lsls	r3, r3, #3
 8007f44:	440b      	add	r3, r1
 8007f46:	f203 1355 	addw	r3, r3, #341	@ 0x155
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007f4e:	7bfa      	ldrb	r2, [r7, #15]
 8007f50:	6879      	ldr	r1, [r7, #4]
 8007f52:	4613      	mov	r3, r2
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	4413      	add	r3, r2
 8007f58:	00db      	lsls	r3, r3, #3
 8007f5a:	440b      	add	r3, r1
 8007f5c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007f60:	7bfa      	ldrb	r2, [r7, #15]
 8007f62:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007f64:	7bfa      	ldrb	r2, [r7, #15]
 8007f66:	6879      	ldr	r1, [r7, #4]
 8007f68:	4613      	mov	r3, r2
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	4413      	add	r3, r2
 8007f6e:	00db      	lsls	r3, r3, #3
 8007f70:	440b      	add	r3, r1
 8007f72:	f203 1357 	addw	r3, r3, #343	@ 0x157
 8007f76:	2200      	movs	r2, #0
 8007f78:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007f7a:	7bfa      	ldrb	r2, [r7, #15]
 8007f7c:	6879      	ldr	r1, [r7, #4]
 8007f7e:	4613      	mov	r3, r2
 8007f80:	009b      	lsls	r3, r3, #2
 8007f82:	4413      	add	r3, r2
 8007f84:	00db      	lsls	r3, r3, #3
 8007f86:	440b      	add	r3, r1
 8007f88:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007f90:	7bfa      	ldrb	r2, [r7, #15]
 8007f92:	6879      	ldr	r1, [r7, #4]
 8007f94:	4613      	mov	r3, r2
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	4413      	add	r3, r2
 8007f9a:	00db      	lsls	r3, r3, #3
 8007f9c:	440b      	add	r3, r1
 8007f9e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007fa6:	7bfa      	ldrb	r2, [r7, #15]
 8007fa8:	6879      	ldr	r1, [r7, #4]
 8007faa:	4613      	mov	r3, r2
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	4413      	add	r3, r2
 8007fb0:	00db      	lsls	r3, r3, #3
 8007fb2:	440b      	add	r3, r1
 8007fb4:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8007fb8:	2200      	movs	r2, #0
 8007fba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007fbc:	7bfb      	ldrb	r3, [r7, #15]
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	73fb      	strb	r3, [r7, #15]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	791b      	ldrb	r3, [r3, #4]
 8007fc6:	7bfa      	ldrb	r2, [r7, #15]
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d3b5      	bcc.n	8007f38 <HAL_PCD_Init+0x118>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6818      	ldr	r0, [r3, #0]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	7c1a      	ldrb	r2, [r3, #16]
 8007fd4:	f88d 2000 	strb.w	r2, [sp]
 8007fd8:	3304      	adds	r3, #4
 8007fda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007fdc:	f009 fdff 	bl	8011bde <USB_DevInit>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d005      	beq.n	8007ff2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2202      	movs	r2, #2
 8007fea:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	e013      	b.n	800801a <HAL_PCD_Init+0x1fa>
  }

  hpcd->USB_Address = 0U;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	7b1b      	ldrb	r3, [r3, #12]
 8008004:	2b01      	cmp	r3, #1
 8008006:	d102      	bne.n	800800e <HAL_PCD_Init+0x1ee>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f001 fb6c 	bl	80096e6 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4618      	mov	r0, r3
 8008014:	f00b fc58 	bl	80138c8 <USB_DevDisconnect>

  return HAL_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3710      	adds	r7, #16
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b082      	sub	sp, #8
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8008030:	2b01      	cmp	r3, #1
 8008032:	d101      	bne.n	8008038 <HAL_PCD_Start+0x16>
 8008034:	2302      	movs	r3, #2
 8008036:	e012      	b.n	800805e <HAL_PCD_Start+0x3c>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4618      	mov	r0, r3
 8008046:	f009 fd7e 	bl	8011b46 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4618      	mov	r0, r3
 8008050:	f00b fc29 	bl	80138a6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	3708      	adds	r7, #8
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}

08008066 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008066:	b580      	push	{r7, lr}
 8008068:	b084      	sub	sp, #16
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4618      	mov	r0, r3
 8008074:	f00b fc39 	bl	80138ea <USB_ReadInterrupts>
 8008078:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008080:	2b00      	cmp	r3, #0
 8008082:	d003      	beq.n	800808c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 faf3 	bl	8008670 <PCD_EP_ISR_Handler>

    return;
 800808a:	e0de      	b.n	800824a <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008092:	2b00      	cmp	r3, #0
 8008094:	d010      	beq.n	80080b8 <HAL_PCD_IRQHandler+0x52>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	f64f 33ff 	movw	r3, #64511	@ 0xfbff
 80080a4:	400b      	ands	r3, r1
 80080a6:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f00c fc88 	bl	80149be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80080ae:	2100      	movs	r1, #0
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 f8e1 	bl	8008278 <HAL_PCD_SetAddress>

    return;
 80080b6:	e0c8      	b.n	800824a <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d009      	beq.n	80080d6 <HAL_PCD_IRQHandler+0x70>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	f64b 73ff 	movw	r3, #49151	@ 0xbfff
 80080d0:	400b      	ands	r3, r1
 80080d2:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 80080d4:	e0b9      	b.n	800824a <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d009      	beq.n	80080f4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	f64d 73ff 	movw	r3, #57343	@ 0xdfff
 80080ee:	400b      	ands	r3, r1
 80080f0:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 80080f2:	e0aa      	b.n	800824a <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d029      	beq.n	8008152 <HAL_PCD_IRQHandler+0xec>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f022 0204 	bic.w	r2, r2, #4
 800810c:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f022 0208 	bic.w	r2, r2, #8
 800811c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 8008124:	2b01      	cmp	r3, #1
 8008126:	d107      	bne.n	8008138 <HAL_PCD_IRQHandler+0xd2>
    {
      hpcd->LPM_State = LPM_L0;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008130:	2100      	movs	r1, #0
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f001 faf9 	bl	800972a <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 f893 	bl	8008264 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 800814c:	400b      	ands	r3, r1
 800814e:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8008150:	e07b      	b.n	800824a <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008158:	2b00      	cmp	r3, #0
 800815a:	d01c      	beq.n	8008196 <HAL_PCD_IRQHandler+0x130>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f042 0208 	orr.w	r2, r2, #8
 800816a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	f24f 73ff 	movw	r3, #63487	@ 0xf7ff
 800817a:	400b      	ands	r3, r1
 800817c:	6453      	str	r3, [r2, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f042 0204 	orr.w	r2, r2, #4
 800818c:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 f85e 	bl	8008250 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8008194:	e059      	b.n	800824a <HAL_PCD_IRQHandler+0x1e4>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800819c:	2b00      	cmp	r3, #0
 800819e:	d033      	beq.n	8008208 <HAL_PCD_IRQHandler+0x1a2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 80081ae:	400b      	ands	r3, r1
 80081b0:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d121      	bne.n	8008200 <HAL_PCD_IRQHandler+0x19a>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f042 0204 	orr.w	r2, r2, #4
 80081ca:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f042 0208 	orr.w	r2, r2, #8
 80081da:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081ea:	089b      	lsrs	r3, r3, #2
 80081ec:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80081f6:	2101      	movs	r1, #1
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f001 fa96 	bl	800972a <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80081fe:	e024      	b.n	800824a <HAL_PCD_IRQHandler+0x1e4>
      HAL_PCD_SuspendCallback(hpcd);
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 f825 	bl	8008250 <HAL_PCD_SuspendCallback>
    return;
 8008206:	e020      	b.n	800824a <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800820e:	2b00      	cmp	r3, #0
 8008210:	d00c      	beq.n	800822c <HAL_PCD_IRQHandler+0x1c6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	f64f 53ff 	movw	r3, #65023	@ 0xfdff
 8008220:	400b      	ands	r3, r1
 8008222:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f00c fbbc 	bl	80149a2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800822a:	e00e      	b.n	800824a <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008232:	2b00      	cmp	r3, #0
 8008234:	d009      	beq.n	800824a <HAL_PCD_IRQHandler+0x1e4>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8008244:	400b      	ands	r3, r1
 8008246:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8008248:	bf00      	nop
  }
}
 800824a:	3710      	adds	r7, #16
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8008250:	b480      	push	{r7}
 8008252:	b083      	sub	sp, #12
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8008258:	bf00      	nop
 800825a:	370c      	adds	r7, #12
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr

08008264 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8008264:	b480      	push	{r7}
 8008266:	b083      	sub	sp, #12
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 800826c:	bf00      	nop
 800826e:	370c      	adds	r7, #12
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr

08008278 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	460b      	mov	r3, r1
 8008282:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 800828a:	2b01      	cmp	r3, #1
 800828c:	d101      	bne.n	8008292 <HAL_PCD_SetAddress+0x1a>
 800828e:	2302      	movs	r3, #2
 8008290:	e012      	b.n	80082b8 <HAL_PCD_SetAddress+0x40>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2201      	movs	r2, #1
 8008296:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  hpcd->USB_Address = address;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	78fa      	ldrb	r2, [r7, #3]
 800829e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	78fa      	ldrb	r2, [r7, #3]
 80082a6:	4611      	mov	r1, r2
 80082a8:	4618      	mov	r0, r3
 80082aa:	f00b fae9 	bl	8013880 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2200      	movs	r2, #0
 80082b2:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 80082b6:	2300      	movs	r3, #0
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3708      	adds	r7, #8
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	4608      	mov	r0, r1
 80082ca:	4611      	mov	r1, r2
 80082cc:	461a      	mov	r2, r3
 80082ce:	4603      	mov	r3, r0
 80082d0:	70fb      	strb	r3, [r7, #3]
 80082d2:	460b      	mov	r3, r1
 80082d4:	803b      	strh	r3, [r7, #0]
 80082d6:	4613      	mov	r3, r2
 80082d8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80082da:	2300      	movs	r3, #0
 80082dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80082de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	da0f      	bge.n	8008306 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80082e6:	78fb      	ldrb	r3, [r7, #3]
 80082e8:	f003 0207 	and.w	r2, r3, #7
 80082ec:	4613      	mov	r3, r2
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	4413      	add	r3, r2
 80082f2:	00db      	lsls	r3, r3, #3
 80082f4:	3310      	adds	r3, #16
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	4413      	add	r3, r2
 80082fa:	3304      	adds	r3, #4
 80082fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2201      	movs	r2, #1
 8008302:	705a      	strb	r2, [r3, #1]
 8008304:	e00f      	b.n	8008326 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008306:	78fb      	ldrb	r3, [r7, #3]
 8008308:	f003 0207 	and.w	r2, r3, #7
 800830c:	4613      	mov	r3, r2
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	4413      	add	r3, r2
 8008312:	00db      	lsls	r3, r3, #3
 8008314:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	4413      	add	r3, r2
 800831c:	3304      	adds	r3, #4
 800831e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2200      	movs	r2, #0
 8008324:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008326:	78fb      	ldrb	r3, [r7, #3]
 8008328:	f003 0307 	and.w	r3, r3, #7
 800832c:	b2da      	uxtb	r2, r3
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8008332:	883b      	ldrh	r3, [r7, #0]
 8008334:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	78ba      	ldrb	r2, [r7, #2]
 8008340:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008342:	78bb      	ldrb	r3, [r7, #2]
 8008344:	2b02      	cmp	r3, #2
 8008346:	d102      	bne.n	800834e <HAL_PCD_EP_Open+0x8e>
  {
    ep->data_pid_start = 0U;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2200      	movs	r2, #0
 800834c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8008354:	2b01      	cmp	r3, #1
 8008356:	d101      	bne.n	800835c <HAL_PCD_EP_Open+0x9c>
 8008358:	2302      	movs	r3, #2
 800835a:	e00e      	b.n	800837a <HAL_PCD_EP_Open+0xba>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	68f9      	ldr	r1, [r7, #12]
 800836a:	4618      	mov	r0, r3
 800836c:	f009 fc5a 	bl	8011c24 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return ret;
 8008378:	7afb      	ldrb	r3, [r7, #11]
}
 800837a:	4618      	mov	r0, r3
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}

08008382 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008382:	b580      	push	{r7, lr}
 8008384:	b084      	sub	sp, #16
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
 800838a:	460b      	mov	r3, r1
 800838c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800838e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008392:	2b00      	cmp	r3, #0
 8008394:	da0f      	bge.n	80083b6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008396:	78fb      	ldrb	r3, [r7, #3]
 8008398:	f003 0207 	and.w	r2, r3, #7
 800839c:	4613      	mov	r3, r2
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	4413      	add	r3, r2
 80083a2:	00db      	lsls	r3, r3, #3
 80083a4:	3310      	adds	r3, #16
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	4413      	add	r3, r2
 80083aa:	3304      	adds	r3, #4
 80083ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2201      	movs	r2, #1
 80083b2:	705a      	strb	r2, [r3, #1]
 80083b4:	e00f      	b.n	80083d6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80083b6:	78fb      	ldrb	r3, [r7, #3]
 80083b8:	f003 0207 	and.w	r2, r3, #7
 80083bc:	4613      	mov	r3, r2
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	4413      	add	r3, r2
 80083c2:	00db      	lsls	r3, r3, #3
 80083c4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	4413      	add	r3, r2
 80083cc:	3304      	adds	r3, #4
 80083ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2200      	movs	r2, #0
 80083d4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80083d6:	78fb      	ldrb	r3, [r7, #3]
 80083d8:	f003 0307 	and.w	r3, r3, #7
 80083dc:	b2da      	uxtb	r2, r3
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d101      	bne.n	80083f0 <HAL_PCD_EP_Close+0x6e>
 80083ec:	2302      	movs	r3, #2
 80083ee:	e00e      	b.n	800840e <HAL_PCD_EP_Close+0x8c>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	68f9      	ldr	r1, [r7, #12]
 80083fe:	4618      	mov	r0, r3
 8008400:	f009 ff70 	bl	80122e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2200      	movs	r2, #0
 8008408:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  return HAL_OK;
 800840c:	2300      	movs	r3, #0
}
 800840e:	4618      	mov	r0, r3
 8008410:	3710      	adds	r7, #16
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}

08008416 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008416:	b580      	push	{r7, lr}
 8008418:	b086      	sub	sp, #24
 800841a:	af00      	add	r7, sp, #0
 800841c:	60f8      	str	r0, [r7, #12]
 800841e:	607a      	str	r2, [r7, #4]
 8008420:	603b      	str	r3, [r7, #0]
 8008422:	460b      	mov	r3, r1
 8008424:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008426:	7afb      	ldrb	r3, [r7, #11]
 8008428:	f003 0207 	and.w	r2, r3, #7
 800842c:	4613      	mov	r3, r2
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	4413      	add	r3, r2
 8008432:	00db      	lsls	r3, r3, #3
 8008434:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008438:	68fa      	ldr	r2, [r7, #12]
 800843a:	4413      	add	r3, r2
 800843c:	3304      	adds	r3, #4
 800843e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	683a      	ldr	r2, [r7, #0]
 800844a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	2200      	movs	r2, #0
 8008450:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	2200      	movs	r2, #0
 8008456:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008458:	7afb      	ldrb	r3, [r7, #11]
 800845a:	f003 0307 	and.w	r3, r3, #7
 800845e:	b2da      	uxtb	r2, r3
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	6979      	ldr	r1, [r7, #20]
 800846a:	4618      	mov	r0, r3
 800846c:	f00a f8c4 	bl	80125f8 <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8008470:	2300      	movs	r3, #0
}
 8008472:	4618      	mov	r0, r3
 8008474:	3718      	adds	r7, #24
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800847a:	b480      	push	{r7}
 800847c:	b083      	sub	sp, #12
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
 8008482:	460b      	mov	r3, r1
 8008484:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008486:	78fb      	ldrb	r3, [r7, #3]
 8008488:	f003 0207 	and.w	r2, r3, #7
 800848c:	6879      	ldr	r1, [r7, #4]
 800848e:	4613      	mov	r3, r2
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	4413      	add	r3, r2
 8008494:	00db      	lsls	r3, r3, #3
 8008496:	440b      	add	r3, r1
 8008498:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 800849c:	681b      	ldr	r3, [r3, #0]
}
 800849e:	4618      	mov	r0, r3
 80084a0:	370c      	adds	r7, #12
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr

080084aa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b086      	sub	sp, #24
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	60f8      	str	r0, [r7, #12]
 80084b2:	607a      	str	r2, [r7, #4]
 80084b4:	603b      	str	r3, [r7, #0]
 80084b6:	460b      	mov	r3, r1
 80084b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80084ba:	7afb      	ldrb	r3, [r7, #11]
 80084bc:	f003 0207 	and.w	r2, r3, #7
 80084c0:	4613      	mov	r3, r2
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	4413      	add	r3, r2
 80084c6:	00db      	lsls	r3, r3, #3
 80084c8:	3310      	adds	r3, #16
 80084ca:	68fa      	ldr	r2, [r7, #12]
 80084cc:	4413      	add	r3, r2
 80084ce:	3304      	adds	r3, #4
 80084d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	683a      	ldr	r2, [r7, #0]
 80084dc:	619a      	str	r2, [r3, #24]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	2201      	movs	r2, #1
 80084e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	683a      	ldr	r2, [r7, #0]
 80084ea:	621a      	str	r2, [r3, #32]
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	2200      	movs	r2, #0
 80084f0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	2201      	movs	r2, #1
 80084f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80084f8:	7afb      	ldrb	r3, [r7, #11]
 80084fa:	f003 0307 	and.w	r3, r3, #7
 80084fe:	b2da      	uxtb	r2, r3
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	6979      	ldr	r1, [r7, #20]
 800850a:	4618      	mov	r0, r3
 800850c:	f00a f874 	bl	80125f8 <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8008510:	2300      	movs	r3, #0
}
 8008512:	4618      	mov	r0, r3
 8008514:	3718      	adds	r7, #24
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}

0800851a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800851a:	b580      	push	{r7, lr}
 800851c:	b084      	sub	sp, #16
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
 8008522:	460b      	mov	r3, r1
 8008524:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008526:	78fb      	ldrb	r3, [r7, #3]
 8008528:	f003 0307 	and.w	r3, r3, #7
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	7912      	ldrb	r2, [r2, #4]
 8008530:	4293      	cmp	r3, r2
 8008532:	d901      	bls.n	8008538 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008534:	2301      	movs	r3, #1
 8008536:	e040      	b.n	80085ba <HAL_PCD_EP_SetStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008538:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800853c:	2b00      	cmp	r3, #0
 800853e:	da0f      	bge.n	8008560 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008540:	78fb      	ldrb	r3, [r7, #3]
 8008542:	f003 0207 	and.w	r2, r3, #7
 8008546:	4613      	mov	r3, r2
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	4413      	add	r3, r2
 800854c:	00db      	lsls	r3, r3, #3
 800854e:	3310      	adds	r3, #16
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	4413      	add	r3, r2
 8008554:	3304      	adds	r3, #4
 8008556:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2201      	movs	r2, #1
 800855c:	705a      	strb	r2, [r3, #1]
 800855e:	e00d      	b.n	800857c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008560:	78fa      	ldrb	r2, [r7, #3]
 8008562:	4613      	mov	r3, r2
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	4413      	add	r3, r2
 8008568:	00db      	lsls	r3, r3, #3
 800856a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	4413      	add	r3, r2
 8008572:	3304      	adds	r3, #4
 8008574:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2200      	movs	r2, #0
 800857a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2201      	movs	r2, #1
 8008580:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008582:	78fb      	ldrb	r3, [r7, #3]
 8008584:	f003 0307 	and.w	r3, r3, #7
 8008588:	b2da      	uxtb	r2, r3
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8008594:	2b01      	cmp	r3, #1
 8008596:	d101      	bne.n	800859c <HAL_PCD_EP_SetStall+0x82>
 8008598:	2302      	movs	r3, #2
 800859a:	e00e      	b.n	80085ba <HAL_PCD_EP_SetStall+0xa0>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2201      	movs	r2, #1
 80085a0:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	68f9      	ldr	r1, [r7, #12]
 80085aa:	4618      	mov	r0, r3
 80085ac:	f00b f88e 	bl	80136cc <USB_EPSetStall>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2200      	movs	r2, #0
 80085b4:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3710      	adds	r7, #16
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b084      	sub	sp, #16
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
 80085ca:	460b      	mov	r3, r1
 80085cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80085ce:	78fb      	ldrb	r3, [r7, #3]
 80085d0:	f003 030f 	and.w	r3, r3, #15
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	7912      	ldrb	r2, [r2, #4]
 80085d8:	4293      	cmp	r3, r2
 80085da:	d901      	bls.n	80085e0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	e042      	b.n	8008666 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80085e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	da0f      	bge.n	8008608 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80085e8:	78fb      	ldrb	r3, [r7, #3]
 80085ea:	f003 0207 	and.w	r2, r3, #7
 80085ee:	4613      	mov	r3, r2
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	4413      	add	r3, r2
 80085f4:	00db      	lsls	r3, r3, #3
 80085f6:	3310      	adds	r3, #16
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	4413      	add	r3, r2
 80085fc:	3304      	adds	r3, #4
 80085fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2201      	movs	r2, #1
 8008604:	705a      	strb	r2, [r3, #1]
 8008606:	e00f      	b.n	8008628 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008608:	78fb      	ldrb	r3, [r7, #3]
 800860a:	f003 0207 	and.w	r2, r3, #7
 800860e:	4613      	mov	r3, r2
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	4413      	add	r3, r2
 8008614:	00db      	lsls	r3, r3, #3
 8008616:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	4413      	add	r3, r2
 800861e:	3304      	adds	r3, #4
 8008620:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2200      	movs	r2, #0
 8008626:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2200      	movs	r2, #0
 800862c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800862e:	78fb      	ldrb	r3, [r7, #3]
 8008630:	f003 0307 	and.w	r3, r3, #7
 8008634:	b2da      	uxtb	r2, r3
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8008640:	2b01      	cmp	r3, #1
 8008642:	d101      	bne.n	8008648 <HAL_PCD_EP_ClrStall+0x86>
 8008644:	2302      	movs	r3, #2
 8008646:	e00e      	b.n	8008666 <HAL_PCD_EP_ClrStall+0xa4>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2201      	movs	r2, #1
 800864c:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	68f9      	ldr	r1, [r7, #12]
 8008656:	4618      	mov	r0, r3
 8008658:	f00b f87e 	bl	8013758 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2200      	movs	r2, #0
 8008660:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8008664:	2300      	movs	r3, #0
}
 8008666:	4618      	mov	r0, r3
 8008668:	3710      	adds	r7, #16
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
	...

08008670 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b08e      	sub	sp, #56	@ 0x38
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008678:	e326      	b.n	8008cc8 <PCD_EP_ISR_Handler+0x658>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008680:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 8008682:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008684:	b2db      	uxtb	r3, r3
 8008686:	f003 030f 	and.w	r3, r3, #15
 800868a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    if (epindex == 0U)
 800868e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008692:	2b00      	cmp	r3, #0
 8008694:	f040 8124 	bne.w	80088e0 <PCD_EP_ISR_Handler+0x270>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8008698:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800869a:	f003 0310 	and.w	r3, r3, #16
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d13e      	bne.n	8008720 <PCD_EP_ISR_Handler+0xb0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	4b89      	ldr	r3, [pc, #548]	@ (80088d0 <PCD_EP_ISR_Handler+0x260>)
 80086aa:	4013      	ands	r3, r2
 80086ac:	60bb      	str	r3, [r7, #8]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	68ba      	ldr	r2, [r7, #8]
 80086b4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80086b8:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	3314      	adds	r3, #20
 80086be:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80086c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	00db      	lsls	r3, r3, #3
 80086c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80086ca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	0c1b      	lsrs	r3, r3, #16
 80086d2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80086d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086d8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80086da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086dc:	695a      	ldr	r2, [r3, #20]
 80086de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086e0:	69db      	ldr	r3, [r3, #28]
 80086e2:	441a      	add	r2, r3
 80086e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086e6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80086e8:	2100      	movs	r1, #0
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f00c f93f 	bl	801496e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	7c5b      	ldrb	r3, [r3, #17]
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	f000 82e6 	beq.w	8008cc8 <PCD_EP_ISR_Handler+0x658>
 80086fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086fe:	699b      	ldr	r3, [r3, #24]
 8008700:	2b00      	cmp	r3, #0
 8008702:	f040 82e1 	bne.w	8008cc8 <PCD_EP_ISR_Handler+0x658>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	7c5b      	ldrb	r3, [r3, #17]
 800870a:	b2db      	uxtb	r3, r3
 800870c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008710:	b2da      	uxtb	r2, r3
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	745a      	strb	r2, [r3, #17]
 800871e:	e2d3      	b.n	8008cc8 <PCD_EP_ISR_Handler+0x658>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008726:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	867b      	strh	r3, [r7, #50]	@ 0x32

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8008730:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8008732:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008736:	2b00      	cmp	r3, #0
 8008738:	d027      	beq.n	800878a <PCD_EP_ISR_Handler+0x11a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	4619      	mov	r1, r3
 8008744:	4610      	mov	r0, r2
 8008746:	f7ff fb08 	bl	8007d5a <PCD_GET_EP_RX_CNT>
 800874a:	4603      	mov	r3, r0
 800874c:	461a      	mov	r2, r3
 800874e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008750:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6818      	ldr	r0, [r3, #0]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 800875c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800875e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8008760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008762:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8008764:	b29b      	uxth	r3, r3
 8008766:	f00b f92f 	bl	80139c8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	4b58      	ldr	r3, [pc, #352]	@ (80088d4 <PCD_EP_ISR_Handler+0x264>)
 8008772:	4013      	ands	r3, r2
 8008774:	60fb      	str	r3, [r7, #12]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	68fa      	ldr	r2, [r7, #12]
 800877c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008780:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f00c f8c6 	bl	8014914 <HAL_PCD_SetupStageCallback>
 8008788:	e29e      	b.n	8008cc8 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 800878a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800878e:	2b00      	cmp	r3, #0
 8008790:	f280 829a 	bge.w	8008cc8 <PCD_EP_ISR_Handler+0x658>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	4b4e      	ldr	r3, [pc, #312]	@ (80088d4 <PCD_EP_ISR_Handler+0x264>)
 800879c:	4013      	ands	r3, r2
 800879e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087a6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80087aa:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	4619      	mov	r1, r3
 80087b6:	4610      	mov	r0, r2
 80087b8:	f7ff facf 	bl	8007d5a <PCD_GET_EP_RX_CNT>
 80087bc:	4603      	mov	r3, r0
 80087be:	461a      	mov	r2, r3
 80087c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087c2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80087c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087c6:	69db      	ldr	r3, [r3, #28]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d019      	beq.n	8008800 <PCD_EP_ISR_Handler+0x190>
 80087cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087ce:	695b      	ldr	r3, [r3, #20]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d015      	beq.n	8008800 <PCD_EP_ISR_Handler+0x190>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6818      	ldr	r0, [r3, #0]
 80087d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087da:	6959      	ldr	r1, [r3, #20]
 80087dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087de:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80087e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087e2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	f00b f8ef 	bl	80139c8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80087ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087ec:	695a      	ldr	r2, [r3, #20]
 80087ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087f0:	69db      	ldr	r3, [r3, #28]
 80087f2:	441a      	add	r2, r3
 80087f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087f6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80087f8:	2100      	movs	r1, #0
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f00c f89c 	bl	8014938 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	867b      	strh	r3, [r7, #50]	@ 0x32

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8008808:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800880a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800880e:	2b00      	cmp	r3, #0
 8008810:	f040 825a 	bne.w	8008cc8 <PCD_EP_ISR_Handler+0x658>
 8008814:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8008816:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800881a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800881e:	f000 8253 	beq.w	8008cc8 <PCD_EP_ISR_Handler+0x658>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8008822:	4b2d      	ldr	r3, [pc, #180]	@ (80088d8 <PCD_EP_ISR_Handler+0x268>)
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	4a2c      	ldr	r2, [pc, #176]	@ (80088d8 <PCD_EP_ISR_Handler+0x268>)
 8008828:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 800882c:	6053      	str	r3, [r2, #4]
 800882e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008830:	691b      	ldr	r3, [r3, #16]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d106      	bne.n	8008844 <PCD_EP_ISR_Handler+0x1d4>
 8008836:	4b28      	ldr	r3, [pc, #160]	@ (80088d8 <PCD_EP_ISR_Handler+0x268>)
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	4a27      	ldr	r2, [pc, #156]	@ (80088d8 <PCD_EP_ISR_Handler+0x268>)
 800883c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008840:	6053      	str	r3, [r2, #4]
 8008842:	e02e      	b.n	80088a2 <PCD_EP_ISR_Handler+0x232>
 8008844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008846:	691b      	ldr	r3, [r3, #16]
 8008848:	2b3e      	cmp	r3, #62	@ 0x3e
 800884a:	d814      	bhi.n	8008876 <PCD_EP_ISR_Handler+0x206>
 800884c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800884e:	691b      	ldr	r3, [r3, #16]
 8008850:	085b      	lsrs	r3, r3, #1
 8008852:	617b      	str	r3, [r7, #20]
 8008854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008856:	691b      	ldr	r3, [r3, #16]
 8008858:	f003 0301 	and.w	r3, r3, #1
 800885c:	2b00      	cmp	r3, #0
 800885e:	d002      	beq.n	8008866 <PCD_EP_ISR_Handler+0x1f6>
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	3301      	adds	r3, #1
 8008864:	617b      	str	r3, [r7, #20]
 8008866:	4b1c      	ldr	r3, [pc, #112]	@ (80088d8 <PCD_EP_ISR_Handler+0x268>)
 8008868:	685a      	ldr	r2, [r3, #4]
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	069b      	lsls	r3, r3, #26
 800886e:	491a      	ldr	r1, [pc, #104]	@ (80088d8 <PCD_EP_ISR_Handler+0x268>)
 8008870:	4313      	orrs	r3, r2
 8008872:	604b      	str	r3, [r1, #4]
 8008874:	e015      	b.n	80088a2 <PCD_EP_ISR_Handler+0x232>
 8008876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008878:	691b      	ldr	r3, [r3, #16]
 800887a:	095b      	lsrs	r3, r3, #5
 800887c:	617b      	str	r3, [r7, #20]
 800887e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008880:	691b      	ldr	r3, [r3, #16]
 8008882:	f003 031f 	and.w	r3, r3, #31
 8008886:	2b00      	cmp	r3, #0
 8008888:	d102      	bne.n	8008890 <PCD_EP_ISR_Handler+0x220>
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	3b01      	subs	r3, #1
 800888e:	617b      	str	r3, [r7, #20]
 8008890:	4b11      	ldr	r3, [pc, #68]	@ (80088d8 <PCD_EP_ISR_Handler+0x268>)
 8008892:	685a      	ldr	r2, [r3, #4]
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	069b      	lsls	r3, r3, #26
 8008898:	4313      	orrs	r3, r2
 800889a:	4a0f      	ldr	r2, [pc, #60]	@ (80088d8 <PCD_EP_ISR_Handler+0x268>)
 800889c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80088a0:	6053      	str	r3, [r2, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	4b0c      	ldr	r3, [pc, #48]	@ (80088dc <PCD_EP_ISR_Handler+0x26c>)
 80088aa:	4013      	ands	r3, r2
 80088ac:	613b      	str	r3, [r7, #16]
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80088b4:	613b      	str	r3, [r7, #16]
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80088bc:	613b      	str	r3, [r7, #16]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088cc:	6013      	str	r3, [r2, #0]
 80088ce:	e1fb      	b.n	8008cc8 <PCD_EP_ISR_Handler+0x658>
 80088d0:	07ff8f0f 	.word	0x07ff8f0f
 80088d4:	07ff0f8f 	.word	0x07ff0f8f
 80088d8:	40016400 	.word	0x40016400
 80088dc:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	461a      	mov	r2, r3
 80088e6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	4413      	add	r3, r2
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	867b      	strh	r3, [r7, #50]	@ 0x32

      if ((wEPVal & USB_EP_VTRX) != 0U)
 80088f2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	f280 80bd 	bge.w	8008a76 <PCD_EP_ISR_Handler+0x406>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	461a      	mov	r2, r3
 8008902:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	4413      	add	r3, r2
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	4b9e      	ldr	r3, [pc, #632]	@ (8008b88 <PCD_EP_ISR_Handler+0x518>)
 800890e:	4013      	ands	r3, r2
 8008910:	61fb      	str	r3, [r7, #28]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	461a      	mov	r2, r3
 8008918:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	4413      	add	r3, r2
 8008920:	69fa      	ldr	r2, [r7, #28]
 8008922:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008926:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8008928:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800892c:	4613      	mov	r3, r2
 800892e:	009b      	lsls	r3, r3, #2
 8008930:	4413      	add	r3, r2
 8008932:	00db      	lsls	r3, r3, #3
 8008934:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	4413      	add	r3, r2
 800893c:	3304      	adds	r3, #4
 800893e:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8008940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008942:	7b1b      	ldrb	r3, [r3, #12]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d116      	bne.n	8008976 <PCD_EP_ISR_Handler+0x306>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681a      	ldr	r2, [r3, #0]
 800894c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	4619      	mov	r1, r3
 8008952:	4610      	mov	r0, r2
 8008954:	f7ff fa01 	bl	8007d5a <PCD_GET_EP_RX_CNT>
 8008958:	4603      	mov	r3, r0
 800895a:	84bb      	strh	r3, [r7, #36]	@ 0x24

          if (count != 0U)
 800895c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800895e:	2b00      	cmp	r3, #0
 8008960:	d067      	beq.n	8008a32 <PCD_EP_ISR_Handler+0x3c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6818      	ldr	r0, [r3, #0]
 8008966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008968:	6959      	ldr	r1, [r3, #20]
 800896a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800896c:	88da      	ldrh	r2, [r3, #6]
 800896e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008970:	f00b f82a 	bl	80139c8 <USB_ReadPMA>
 8008974:	e05d      	b.n	8008a32 <PCD_EP_ISR_Handler+0x3c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8008976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008978:	78db      	ldrb	r3, [r3, #3]
 800897a:	2b02      	cmp	r3, #2
 800897c:	d108      	bne.n	8008990 <PCD_EP_ISR_Handler+0x320>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800897e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8008980:	461a      	mov	r2, r3
 8008982:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f000 f9ad 	bl	8008ce4 <HAL_PCD_EP_DB_Receive>
 800898a:	4603      	mov	r3, r0
 800898c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800898e:	e050      	b.n	8008a32 <PCD_EP_ISR_Handler+0x3c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	461a      	mov	r2, r3
 8008996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	4413      	add	r3, r2
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	4b7a      	ldr	r3, [pc, #488]	@ (8008b8c <PCD_EP_ISR_Handler+0x51c>)
 80089a2:	4013      	ands	r3, r2
 80089a4:	61bb      	str	r3, [r7, #24]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	461a      	mov	r2, r3
 80089ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	441a      	add	r2, r3
 80089b4:	69bb      	ldr	r3, [r7, #24]
 80089b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089ba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80089be:	6013      	str	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	461a      	mov	r2, r3
 80089c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	4413      	add	r3, r2
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d016      	beq.n	8008a06 <PCD_EP_ISR_Handler+0x396>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	4619      	mov	r1, r3
 80089e2:	4610      	mov	r0, r2
 80089e4:	f7ff f9da 	bl	8007d9c <PCD_GET_EP_DBUF0_CNT>
 80089e8:	4603      	mov	r3, r0
 80089ea:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 80089ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d01f      	beq.n	8008a32 <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6818      	ldr	r0, [r3, #0]
 80089f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089f8:	6959      	ldr	r1, [r3, #20]
 80089fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089fc:	891a      	ldrh	r2, [r3, #8]
 80089fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a00:	f00a ffe2 	bl	80139c8 <USB_ReadPMA>
 8008a04:	e015      	b.n	8008a32 <PCD_EP_ISR_Handler+0x3c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	4619      	mov	r1, r3
 8008a10:	4610      	mov	r0, r2
 8008a12:	f7ff f9e4 	bl	8007dde <PCD_GET_EP_DBUF1_CNT>
 8008a16:	4603      	mov	r3, r0
 8008a18:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8008a1a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d008      	beq.n	8008a32 <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6818      	ldr	r0, [r3, #0]
 8008a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a26:	6959      	ldr	r1, [r3, #20]
 8008a28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a2a:	895a      	ldrh	r2, [r3, #10]
 8008a2c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a2e:	f00a ffcb 	bl	80139c8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8008a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a34:	69da      	ldr	r2, [r3, #28]
 8008a36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a38:	441a      	add	r2, r3
 8008a3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a3c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8008a3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a40:	695a      	ldr	r2, [r3, #20]
 8008a42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a44:	441a      	add	r2, r3
 8008a46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a48:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8008a4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a4c:	699b      	ldr	r3, [r3, #24]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d004      	beq.n	8008a5c <PCD_EP_ISR_Handler+0x3ec>
 8008a52:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a56:	691b      	ldr	r3, [r3, #16]
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d206      	bcs.n	8008a6a <PCD_EP_ISR_Handler+0x3fa>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8008a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	4619      	mov	r1, r3
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f00b ff68 	bl	8014938 <HAL_PCD_DataOutStageCallback>
 8008a68:	e005      	b.n	8008a76 <PCD_EP_ISR_Handler+0x406>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008a70:	4618      	mov	r0, r3
 8008a72:	f009 fdc1 	bl	80125f8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 8008a76:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8008a78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	f000 8123 	beq.w	8008cc8 <PCD_EP_ISR_Handler+0x658>
      {
        ep = &hpcd->IN_ep[epindex];
 8008a82:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8008a86:	4613      	mov	r3, r2
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	4413      	add	r3, r2
 8008a8c:	00db      	lsls	r3, r3, #3
 8008a8e:	3310      	adds	r3, #16
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	4413      	add	r3, r2
 8008a94:	3304      	adds	r3, #4
 8008a96:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008aa2:	009b      	lsls	r3, r3, #2
 8008aa4:	4413      	add	r3, r2
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	4b39      	ldr	r3, [pc, #228]	@ (8008b90 <PCD_EP_ISR_Handler+0x520>)
 8008aaa:	4013      	ands	r3, r2
 8008aac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	4413      	add	r3, r2
 8008abc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008abe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008ac2:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8008ac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ac6:	78db      	ldrb	r3, [r3, #3]
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	f040 80b8 	bne.w	8008c3e <PCD_EP_ISR_Handler+0x5ce>
        {
          ep->xfer_len = 0U;
 8008ace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8008ad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ad6:	7b1b      	ldrb	r3, [r3, #12]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	f000 80a9 	beq.w	8008c30 <PCD_EP_ISR_Handler+0x5c0>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008ade:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8008ae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d055      	beq.n	8008b94 <PCD_EP_ISR_Handler+0x524>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008aea:	785b      	ldrb	r3, [r3, #1]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d124      	bne.n	8008b3a <PCD_EP_ISR_Handler+0x4ca>
 8008af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	00db      	lsls	r3, r3, #3
 8008af6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008afa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	00db      	lsls	r3, r3, #3
 8008b06:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008b0a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008b0e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8008b12:	601a      	str	r2, [r3, #0]
 8008b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	00db      	lsls	r3, r3, #3
 8008b1a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008b1e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008b22:	681a      	ldr	r2, [r3, #0]
 8008b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	00db      	lsls	r3, r3, #3
 8008b2a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008b2e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008b32:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8008b36:	601a      	str	r2, [r3, #0]
 8008b38:	e07a      	b.n	8008c30 <PCD_EP_ISR_Handler+0x5c0>
 8008b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b3c:	785b      	ldrb	r3, [r3, #1]
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	d176      	bne.n	8008c30 <PCD_EP_ISR_Handler+0x5c0>
 8008b42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	00db      	lsls	r3, r3, #3
 8008b48:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008b4c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008b50:	681a      	ldr	r2, [r3, #0]
 8008b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	00db      	lsls	r3, r3, #3
 8008b58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008b5c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008b60:	b292      	uxth	r2, r2
 8008b62:	601a      	str	r2, [r3, #0]
 8008b64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	00db      	lsls	r3, r3, #3
 8008b6a:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8008b6e:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8008b72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	00db      	lsls	r3, r3, #3
 8008b78:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008b7c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008b80:	6812      	ldr	r2, [r2, #0]
 8008b82:	601a      	str	r2, [r3, #0]
 8008b84:	e054      	b.n	8008c30 <PCD_EP_ISR_Handler+0x5c0>
 8008b86:	bf00      	nop
 8008b88:	07ff0f8f 	.word	0x07ff0f8f
 8008b8c:	07ff8f8f 	.word	0x07ff8f8f
 8008b90:	07ff8f0f 	.word	0x07ff8f0f
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b96:	785b      	ldrb	r3, [r3, #1]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d124      	bne.n	8008be6 <PCD_EP_ISR_Handler+0x576>
 8008b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	00db      	lsls	r3, r3, #3
 8008ba2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008ba6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008baa:	685a      	ldr	r2, [r3, #4]
 8008bac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	00db      	lsls	r3, r3, #3
 8008bb2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008bb6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008bba:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8008bbe:	605a      	str	r2, [r3, #4]
 8008bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	00db      	lsls	r3, r3, #3
 8008bc6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008bca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008bce:	685a      	ldr	r2, [r3, #4]
 8008bd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	00db      	lsls	r3, r3, #3
 8008bd6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008bda:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008bde:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8008be2:	605a      	str	r2, [r3, #4]
 8008be4:	e024      	b.n	8008c30 <PCD_EP_ISR_Handler+0x5c0>
 8008be6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008be8:	785b      	ldrb	r3, [r3, #1]
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d120      	bne.n	8008c30 <PCD_EP_ISR_Handler+0x5c0>
 8008bee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	00db      	lsls	r3, r3, #3
 8008bf4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008bf8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008bfc:	685a      	ldr	r2, [r3, #4]
 8008bfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	00db      	lsls	r3, r3, #3
 8008c04:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008c08:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008c0c:	b292      	uxth	r2, r2
 8008c0e:	605a      	str	r2, [r3, #4]
 8008c10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	00db      	lsls	r3, r3, #3
 8008c16:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8008c1a:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8008c1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	00db      	lsls	r3, r3, #3
 8008c24:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008c28:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008c2c:	6852      	ldr	r2, [r2, #4]
 8008c2e:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008c30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	4619      	mov	r1, r3
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f00b fe99 	bl	801496e <HAL_PCD_DataInStageCallback>
 8008c3c:	e044      	b.n	8008cc8 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8008c3e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8008c40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d139      	bne.n	8008cbc <PCD_EP_ISR_Handler+0x64c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8008c48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	00db      	lsls	r3, r3, #3
 8008c4e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008c52:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	0c1b      	lsrs	r3, r3, #16
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c60:	84fb      	strh	r3, [r7, #38]	@ 0x26

            if (ep->xfer_len > TxPctSize)
 8008c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c64:	699a      	ldr	r2, [r3, #24]
 8008c66:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d906      	bls.n	8008c7a <PCD_EP_ISR_Handler+0x60a>
            {
              ep->xfer_len -= TxPctSize;
 8008c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c6e:	699a      	ldr	r2, [r3, #24]
 8008c70:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008c72:	1ad2      	subs	r2, r2, r3
 8008c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c76:	619a      	str	r2, [r3, #24]
 8008c78:	e002      	b.n	8008c80 <PCD_EP_ISR_Handler+0x610>
            }
            else
            {
              ep->xfer_len = 0U;
 8008c7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8008c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c82:	699b      	ldr	r3, [r3, #24]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d106      	bne.n	8008c96 <PCD_EP_ISR_Handler+0x626>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008c88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c8a:	781b      	ldrb	r3, [r3, #0]
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f00b fe6d 	bl	801496e <HAL_PCD_DataInStageCallback>
 8008c94:	e018      	b.n	8008cc8 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8008c96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c98:	695a      	ldr	r2, [r3, #20]
 8008c9a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008c9c:	441a      	add	r2, r3
 8008c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ca0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8008ca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ca4:	69da      	ldr	r2, [r3, #28]
 8008ca6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008ca8:	441a      	add	r2, r3
 8008caa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cac:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f009 fc9f 	bl	80125f8 <USB_EPStartXfer>
 8008cba:	e005      	b.n	8008cc8 <PCD_EP_ISR_Handler+0x658>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8008cbc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 f8e8 	bl	8008e98 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	f47f acd1 	bne.w	800867a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8008cd8:	2300      	movs	r3, #0
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3738      	adds	r7, #56	@ 0x38
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop

08008ce4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b08a      	sub	sp, #40	@ 0x28
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	60f8      	str	r0, [r7, #12]
 8008cec:	60b9      	str	r1, [r7, #8]
 8008cee:	4613      	mov	r3, r2
 8008cf0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008cf2:	88fb      	ldrh	r3, [r7, #6]
 8008cf4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d062      	beq.n	8008dc2 <HAL_PCD_EP_DB_Receive+0xde>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681a      	ldr	r2, [r3, #0]
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	4619      	mov	r1, r3
 8008d06:	4610      	mov	r0, r2
 8008d08:	f7ff f848 	bl	8007d9c <PCD_GET_EP_DBUF0_CNT>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	699a      	ldr	r2, [r3, #24]
 8008d14:	8bfb      	ldrh	r3, [r7, #30]
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d306      	bcc.n	8008d28 <HAL_PCD_EP_DB_Receive+0x44>
    {
      ep->xfer_len -= count;
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	699a      	ldr	r2, [r3, #24]
 8008d1e:	8bfb      	ldrh	r3, [r7, #30]
 8008d20:	1ad2      	subs	r2, r2, r3
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	619a      	str	r2, [r3, #24]
 8008d26:	e002      	b.n	8008d2e <HAL_PCD_EP_DB_Receive+0x4a>
    }
    else
    {
      ep->xfer_len = 0U;
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	699b      	ldr	r3, [r3, #24]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d11b      	bne.n	8008d6e <HAL_PCD_EP_DB_Receive+0x8a>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	4413      	add	r3, r2
 8008d44:	681a      	ldr	r2, [r3, #0]
 8008d46:	4b52      	ldr	r3, [pc, #328]	@ (8008e90 <HAL_PCD_EP_DB_Receive+0x1ac>)
 8008d48:	4013      	ands	r3, r2
 8008d4a:	61bb      	str	r3, [r7, #24]
 8008d4c:	69bb      	ldr	r3, [r7, #24]
 8008d4e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008d52:	61bb      	str	r3, [r7, #24]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	461a      	mov	r2, r3
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	441a      	add	r2, r3
 8008d62:	69bb      	ldr	r3, [r7, #24]
 8008d64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d6c:	6013      	str	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008d6e:	88fb      	ldrh	r3, [r7, #6]
 8008d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d017      	beq.n	8008da8 <HAL_PCD_EP_DB_Receive+0xc4>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	009b      	lsls	r3, r3, #2
 8008d84:	4413      	add	r3, r2
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	4b42      	ldr	r3, [pc, #264]	@ (8008e94 <HAL_PCD_EP_DB_Receive+0x1b0>)
 8008d8a:	4013      	ands	r3, r2
 8008d8c:	617b      	str	r3, [r7, #20]
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	461a      	mov	r2, r3
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	009b      	lsls	r3, r3, #2
 8008d9a:	441a      	add	r2, r3
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008da2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008da6:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 8008da8:	8bfb      	ldrh	r3, [r7, #30]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d06b      	beq.n	8008e86 <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	6818      	ldr	r0, [r3, #0]
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	6959      	ldr	r1, [r3, #20]
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	891a      	ldrh	r2, [r3, #8]
 8008dba:	8bfb      	ldrh	r3, [r7, #30]
 8008dbc:	f00a fe04 	bl	80139c8 <USB_ReadPMA>
 8008dc0:	e061      	b.n	8008e86 <HAL_PCD_EP_DB_Receive+0x1a2>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	4619      	mov	r1, r3
 8008dcc:	4610      	mov	r0, r2
 8008dce:	f7ff f806 	bl	8007dde <PCD_GET_EP_DBUF1_CNT>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	699a      	ldr	r2, [r3, #24]
 8008dda:	8bfb      	ldrh	r3, [r7, #30]
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d306      	bcc.n	8008dee <HAL_PCD_EP_DB_Receive+0x10a>
    {
      ep->xfer_len -= count;
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	699a      	ldr	r2, [r3, #24]
 8008de4:	8bfb      	ldrh	r3, [r7, #30]
 8008de6:	1ad2      	subs	r2, r2, r3
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	619a      	str	r2, [r3, #24]
 8008dec:	e002      	b.n	8008df4 <HAL_PCD_EP_DB_Receive+0x110>
    }
    else
    {
      ep->xfer_len = 0U;
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	2200      	movs	r2, #0
 8008df2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	699b      	ldr	r3, [r3, #24]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d11b      	bne.n	8008e34 <HAL_PCD_EP_DB_Receive+0x150>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	461a      	mov	r2, r3
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	781b      	ldrb	r3, [r3, #0]
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	4413      	add	r3, r2
 8008e0a:	681a      	ldr	r2, [r3, #0]
 8008e0c:	4b20      	ldr	r3, [pc, #128]	@ (8008e90 <HAL_PCD_EP_DB_Receive+0x1ac>)
 8008e0e:	4013      	ands	r3, r2
 8008e10:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e14:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008e18:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	461a      	mov	r2, r3
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	441a      	add	r2, r3
 8008e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e32:	6013      	str	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8008e34:	88fb      	ldrh	r3, [r7, #6]
 8008e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d117      	bne.n	8008e6e <HAL_PCD_EP_DB_Receive+0x18a>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	461a      	mov	r2, r3
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	781b      	ldrb	r3, [r3, #0]
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	4413      	add	r3, r2
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	4b11      	ldr	r3, [pc, #68]	@ (8008e94 <HAL_PCD_EP_DB_Receive+0x1b0>)
 8008e50:	4013      	ands	r3, r2
 8008e52:	623b      	str	r3, [r7, #32]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	461a      	mov	r2, r3
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	009b      	lsls	r3, r3, #2
 8008e60:	441a      	add	r2, r3
 8008e62:	6a3b      	ldr	r3, [r7, #32]
 8008e64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e68:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008e6c:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 8008e6e:	8bfb      	ldrh	r3, [r7, #30]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d008      	beq.n	8008e86 <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	6818      	ldr	r0, [r3, #0]
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	6959      	ldr	r1, [r3, #20]
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	895a      	ldrh	r2, [r3, #10]
 8008e80:	8bfb      	ldrh	r3, [r7, #30]
 8008e82:	f00a fda1 	bl	80139c8 <USB_ReadPMA>
    }
  }

  return count;
 8008e86:	8bfb      	ldrh	r3, [r7, #30]
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3728      	adds	r7, #40	@ 0x28
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}
 8008e90:	07ffbf8f 	.word	0x07ffbf8f
 8008e94:	07ff8f8f 	.word	0x07ff8f8f

08008e98 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b08e      	sub	sp, #56	@ 0x38
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	60b9      	str	r1, [r7, #8]
 8008ea2:	4613      	mov	r3, r2
 8008ea4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008ea6:	88fb      	ldrh	r3, [r7, #6]
 8008ea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	f000 81d5 	beq.w	800925c <HAL_PCD_EP_DB_Transmit+0x3c4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681a      	ldr	r2, [r3, #0]
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	4619      	mov	r1, r3
 8008ebc:	4610      	mov	r0, r2
 8008ebe:	f7fe ff6d 	bl	8007d9c <PCD_GET_EP_DBUF0_CNT>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len > TxPctSize)
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	699a      	ldr	r2, [r3, #24]
 8008eca:	8bfb      	ldrh	r3, [r7, #30]
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	d906      	bls.n	8008ede <HAL_PCD_EP_DB_Transmit+0x46>
    {
      ep->xfer_len -= TxPctSize;
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	699a      	ldr	r2, [r3, #24]
 8008ed4:	8bfb      	ldrh	r3, [r7, #30]
 8008ed6:	1ad2      	subs	r2, r2, r3
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	619a      	str	r2, [r3, #24]
 8008edc:	e002      	b.n	8008ee4 <HAL_PCD_EP_DB_Transmit+0x4c>
    }
    else
    {
      ep->xfer_len = 0U;
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	699b      	ldr	r3, [r3, #24]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	f040 80c1 	bne.w	8009070 <HAL_PCD_EP_DB_Transmit+0x1d8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	785b      	ldrb	r3, [r3, #1]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d124      	bne.n	8008f40 <HAL_PCD_EP_DB_Transmit+0xa8>
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	00db      	lsls	r3, r3, #3
 8008efc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008f00:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	00db      	lsls	r3, r3, #3
 8008f0c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008f10:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008f14:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8008f18:	601a      	str	r2, [r3, #0]
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	00db      	lsls	r3, r3, #3
 8008f20:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008f24:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	00db      	lsls	r3, r3, #3
 8008f30:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008f34:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008f38:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8008f3c:	601a      	str	r2, [r3, #0]
 8008f3e:	e024      	b.n	8008f8a <HAL_PCD_EP_DB_Transmit+0xf2>
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	785b      	ldrb	r3, [r3, #1]
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d120      	bne.n	8008f8a <HAL_PCD_EP_DB_Transmit+0xf2>
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	00db      	lsls	r3, r3, #3
 8008f4e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008f52:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	00db      	lsls	r3, r3, #3
 8008f5e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008f62:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008f66:	b292      	uxth	r2, r2
 8008f68:	601a      	str	r2, [r3, #0]
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	00db      	lsls	r3, r3, #3
 8008f70:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8008f74:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	00db      	lsls	r3, r3, #3
 8008f7e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008f82:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008f86:	6812      	ldr	r2, [r2, #0]
 8008f88:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	785b      	ldrb	r3, [r3, #1]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d124      	bne.n	8008fdc <HAL_PCD_EP_DB_Transmit+0x144>
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	00db      	lsls	r3, r3, #3
 8008f98:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008f9c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008fa0:	685a      	ldr	r2, [r3, #4]
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	00db      	lsls	r3, r3, #3
 8008fa8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008fac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008fb0:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8008fb4:	605a      	str	r2, [r3, #4]
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	00db      	lsls	r3, r3, #3
 8008fbc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008fc0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008fc4:	685a      	ldr	r2, [r3, #4]
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	781b      	ldrb	r3, [r3, #0]
 8008fca:	00db      	lsls	r3, r3, #3
 8008fcc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008fd0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008fd4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8008fd8:	605a      	str	r2, [r3, #4]
 8008fda:	e024      	b.n	8009026 <HAL_PCD_EP_DB_Transmit+0x18e>
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	785b      	ldrb	r3, [r3, #1]
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d120      	bne.n	8009026 <HAL_PCD_EP_DB_Transmit+0x18e>
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	00db      	lsls	r3, r3, #3
 8008fea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008fee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008ff2:	685a      	ldr	r2, [r3, #4]
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	00db      	lsls	r3, r3, #3
 8008ffa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008ffe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009002:	b292      	uxth	r2, r2
 8009004:	605a      	str	r2, [r3, #4]
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	00db      	lsls	r3, r3, #3
 800900c:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8009010:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	00db      	lsls	r3, r3, #3
 800901a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800901e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009022:	6852      	ldr	r2, [r2, #4]
 8009024:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	4619      	mov	r1, r3
 800902c:	68f8      	ldr	r0, [r7, #12]
 800902e:	f00b fc9e 	bl	801496e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009032:	88fb      	ldrh	r3, [r7, #6]
 8009034:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009038:	2b00      	cmp	r3, #0
 800903a:	f000 82e5 	beq.w	8009608 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	461a      	mov	r2, r3
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	009b      	lsls	r3, r3, #2
 800904a:	4413      	add	r3, r2
 800904c:	681a      	ldr	r2, [r3, #0]
 800904e:	4b8e      	ldr	r3, [pc, #568]	@ (8009288 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8009050:	4013      	ands	r3, r2
 8009052:	637b      	str	r3, [r7, #52]	@ 0x34
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	461a      	mov	r2, r3
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	009b      	lsls	r3, r3, #2
 8009060:	441a      	add	r2, r3
 8009062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009064:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009068:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800906c:	6013      	str	r3, [r2, #0]
 800906e:	e2cb      	b.n	8009608 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009070:	88fb      	ldrh	r3, [r7, #6]
 8009072:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009076:	2b00      	cmp	r3, #0
 8009078:	d017      	beq.n	80090aa <HAL_PCD_EP_DB_Transmit+0x212>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	461a      	mov	r2, r3
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	4413      	add	r3, r2
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	4b7f      	ldr	r3, [pc, #508]	@ (8009288 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 800908c:	4013      	ands	r3, r2
 800908e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	461a      	mov	r2, r3
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	781b      	ldrb	r3, [r3, #0]
 800909a:	009b      	lsls	r3, r3, #2
 800909c:	441a      	add	r2, r3
 800909e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80090a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090a8:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	f040 82a9 	bne.w	8009608 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	695a      	ldr	r2, [r3, #20]
 80090ba:	8bfb      	ldrh	r3, [r7, #30]
 80090bc:	441a      	add	r2, r3
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	69da      	ldr	r2, [r3, #28]
 80090c6:	8bfb      	ldrh	r3, [r7, #30]
 80090c8:	441a      	add	r2, r3
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	6a1a      	ldr	r2, [r3, #32]
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	691b      	ldr	r3, [r3, #16]
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d309      	bcc.n	80090ee <HAL_PCD_EP_DB_Transmit+0x256>
        {
          len = ep->maxpacket;
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	691b      	ldr	r3, [r3, #16]
 80090de:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	6a1a      	ldr	r2, [r3, #32]
 80090e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e6:	1ad2      	subs	r2, r2, r3
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	621a      	str	r2, [r3, #32]
 80090ec:	e014      	b.n	8009118 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else if (ep->xfer_len_db == 0U)
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	6a1b      	ldr	r3, [r3, #32]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d106      	bne.n	8009104 <HAL_PCD_EP_DB_Transmit+0x26c>
        {
          len = TxPctSize;
 80090f6:	8bfb      	ldrh	r3, [r7, #30]
 80090f8:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	2200      	movs	r2, #0
 80090fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8009102:	e009      	b.n	8009118 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	2200      	movs	r2, #0
 8009108:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	6a1b      	ldr	r3, [r3, #32]
 8009110:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	2200      	movs	r2, #0
 8009116:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	785b      	ldrb	r3, [r3, #1]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d16a      	bne.n	80091f6 <HAL_PCD_EP_DB_Transmit+0x35e>
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	781b      	ldrb	r3, [r3, #0]
 8009124:	00db      	lsls	r3, r3, #3
 8009126:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800912a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	00db      	lsls	r3, r3, #3
 8009136:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800913a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800913e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8009142:	601a      	str	r2, [r3, #0]
 8009144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009146:	2b00      	cmp	r3, #0
 8009148:	d112      	bne.n	8009170 <HAL_PCD_EP_DB_Transmit+0x2d8>
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	781b      	ldrb	r3, [r3, #0]
 800914e:	00db      	lsls	r3, r3, #3
 8009150:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009154:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	00db      	lsls	r3, r3, #3
 8009160:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009164:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009168:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800916c:	601a      	str	r2, [r3, #0]
 800916e:	e06a      	b.n	8009246 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8009170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009172:	2b3e      	cmp	r3, #62	@ 0x3e
 8009174:	d81e      	bhi.n	80091b4 <HAL_PCD_EP_DB_Transmit+0x31c>
 8009176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009178:	085b      	lsrs	r3, r3, #1
 800917a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800917c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800917e:	f003 0301 	and.w	r3, r3, #1
 8009182:	2b00      	cmp	r3, #0
 8009184:	d002      	beq.n	800918c <HAL_PCD_EP_DB_Transmit+0x2f4>
 8009186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009188:	3301      	adds	r3, #1
 800918a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	00db      	lsls	r3, r3, #3
 8009192:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009196:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800919a:	6819      	ldr	r1, [r3, #0]
 800919c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800919e:	069a      	lsls	r2, r3, #26
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	00db      	lsls	r3, r3, #3
 80091a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80091aa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80091ae:	430a      	orrs	r2, r1
 80091b0:	601a      	str	r2, [r3, #0]
 80091b2:	e048      	b.n	8009246 <HAL_PCD_EP_DB_Transmit+0x3ae>
 80091b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b6:	095b      	lsrs	r3, r3, #5
 80091b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091bc:	f003 031f 	and.w	r3, r3, #31
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d102      	bne.n	80091ca <HAL_PCD_EP_DB_Transmit+0x332>
 80091c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091c6:	3b01      	subs	r3, #1
 80091c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	00db      	lsls	r3, r3, #3
 80091d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80091d4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091dc:	069b      	lsls	r3, r3, #26
 80091de:	431a      	orrs	r2, r3
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	00db      	lsls	r3, r3, #3
 80091e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80091ea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80091ee:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80091f2:	601a      	str	r2, [r3, #0]
 80091f4:	e027      	b.n	8009246 <HAL_PCD_EP_DB_Transmit+0x3ae>
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	785b      	ldrb	r3, [r3, #1]
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d123      	bne.n	8009246 <HAL_PCD_EP_DB_Transmit+0x3ae>
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	00db      	lsls	r3, r3, #3
 8009204:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009208:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	781b      	ldrb	r3, [r3, #0]
 8009212:	00db      	lsls	r3, r3, #3
 8009214:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009218:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800921c:	b292      	uxth	r2, r2
 800921e:	601a      	str	r2, [r3, #0]
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	781b      	ldrb	r3, [r3, #0]
 8009224:	00db      	lsls	r3, r3, #3
 8009226:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800922a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800922e:	6819      	ldr	r1, [r3, #0]
 8009230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009232:	041a      	lsls	r2, r3, #16
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	00db      	lsls	r3, r3, #3
 800923a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800923e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009242:	430a      	orrs	r2, r1
 8009244:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	6818      	ldr	r0, [r3, #0]
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	6959      	ldr	r1, [r3, #20]
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	891a      	ldrh	r2, [r3, #8]
 8009252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009254:	b29b      	uxth	r3, r3
 8009256:	f00a fb56 	bl	8013906 <USB_WritePMA>
 800925a:	e1d5      	b.n	8009608 <HAL_PCD_EP_DB_Transmit+0x770>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	4619      	mov	r1, r3
 8009266:	4610      	mov	r0, r2
 8009268:	f7fe fdb9 	bl	8007dde <PCD_GET_EP_DBUF1_CNT>
 800926c:	4603      	mov	r3, r0
 800926e:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= TxPctSize)
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	699a      	ldr	r2, [r3, #24]
 8009274:	8bfb      	ldrh	r3, [r7, #30]
 8009276:	429a      	cmp	r2, r3
 8009278:	d308      	bcc.n	800928c <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxPctSize;
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	699a      	ldr	r2, [r3, #24]
 800927e:	8bfb      	ldrh	r3, [r7, #30]
 8009280:	1ad2      	subs	r2, r2, r3
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	619a      	str	r2, [r3, #24]
 8009286:	e004      	b.n	8009292 <HAL_PCD_EP_DB_Transmit+0x3fa>
 8009288:	07ff8f8f 	.word	0x07ff8f8f
    }
    else
    {
      ep->xfer_len = 0U;
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	2200      	movs	r2, #0
 8009290:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	699b      	ldr	r3, [r3, #24]
 8009296:	2b00      	cmp	r3, #0
 8009298:	f040 80c1 	bne.w	800941e <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	785b      	ldrb	r3, [r3, #1]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d124      	bne.n	80092ee <HAL_PCD_EP_DB_Transmit+0x456>
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	00db      	lsls	r3, r3, #3
 80092aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80092ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80092b2:	681a      	ldr	r2, [r3, #0]
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	00db      	lsls	r3, r3, #3
 80092ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80092be:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80092c2:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80092c6:	601a      	str	r2, [r3, #0]
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	00db      	lsls	r3, r3, #3
 80092ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80092d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	00db      	lsls	r3, r3, #3
 80092de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80092e2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80092e6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80092ea:	601a      	str	r2, [r3, #0]
 80092ec:	e024      	b.n	8009338 <HAL_PCD_EP_DB_Transmit+0x4a0>
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	785b      	ldrb	r3, [r3, #1]
 80092f2:	2b01      	cmp	r3, #1
 80092f4:	d120      	bne.n	8009338 <HAL_PCD_EP_DB_Transmit+0x4a0>
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	00db      	lsls	r3, r3, #3
 80092fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009300:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009304:	681a      	ldr	r2, [r3, #0]
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	00db      	lsls	r3, r3, #3
 800930c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009310:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009314:	b292      	uxth	r2, r2
 8009316:	601a      	str	r2, [r3, #0]
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	00db      	lsls	r3, r3, #3
 800931e:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8009322:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	00db      	lsls	r3, r3, #3
 800932c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009330:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009334:	6812      	ldr	r2, [r2, #0]
 8009336:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	785b      	ldrb	r3, [r3, #1]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d124      	bne.n	800938a <HAL_PCD_EP_DB_Transmit+0x4f2>
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	781b      	ldrb	r3, [r3, #0]
 8009344:	00db      	lsls	r3, r3, #3
 8009346:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800934a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800934e:	685a      	ldr	r2, [r3, #4]
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	00db      	lsls	r3, r3, #3
 8009356:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800935a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800935e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8009362:	605a      	str	r2, [r3, #4]
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	00db      	lsls	r3, r3, #3
 800936a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800936e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009372:	685a      	ldr	r2, [r3, #4]
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	781b      	ldrb	r3, [r3, #0]
 8009378:	00db      	lsls	r3, r3, #3
 800937a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800937e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009382:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8009386:	605a      	str	r2, [r3, #4]
 8009388:	e024      	b.n	80093d4 <HAL_PCD_EP_DB_Transmit+0x53c>
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	785b      	ldrb	r3, [r3, #1]
 800938e:	2b01      	cmp	r3, #1
 8009390:	d120      	bne.n	80093d4 <HAL_PCD_EP_DB_Transmit+0x53c>
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	00db      	lsls	r3, r3, #3
 8009398:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800939c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80093a0:	685a      	ldr	r2, [r3, #4]
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	00db      	lsls	r3, r3, #3
 80093a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80093ac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80093b0:	b292      	uxth	r2, r2
 80093b2:	605a      	str	r2, [r3, #4]
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	781b      	ldrb	r3, [r3, #0]
 80093b8:	00db      	lsls	r3, r3, #3
 80093ba:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80093be:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	781b      	ldrb	r3, [r3, #0]
 80093c6:	00db      	lsls	r3, r3, #3
 80093c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80093cc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80093d0:	6852      	ldr	r2, [r2, #4]
 80093d2:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	781b      	ldrb	r3, [r3, #0]
 80093d8:	4619      	mov	r1, r3
 80093da:	68f8      	ldr	r0, [r7, #12]
 80093dc:	f00b fac7 	bl	801496e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80093e0:	88fb      	ldrh	r3, [r7, #6]
 80093e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	f040 810e 	bne.w	8009608 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	461a      	mov	r2, r3
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	781b      	ldrb	r3, [r3, #0]
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	4413      	add	r3, r2
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	4b95      	ldr	r3, [pc, #596]	@ (8009654 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 80093fe:	4013      	ands	r3, r2
 8009400:	623b      	str	r3, [r7, #32]
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	461a      	mov	r2, r3
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	441a      	add	r2, r3
 8009410:	6a3b      	ldr	r3, [r7, #32]
 8009412:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009416:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800941a:	6013      	str	r3, [r2, #0]
 800941c:	e0f4      	b.n	8009608 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800941e:	88fb      	ldrh	r3, [r7, #6]
 8009420:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009424:	2b00      	cmp	r3, #0
 8009426:	d117      	bne.n	8009458 <HAL_PCD_EP_DB_Transmit+0x5c0>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	461a      	mov	r2, r3
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	781b      	ldrb	r3, [r3, #0]
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	4413      	add	r3, r2
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	4b86      	ldr	r3, [pc, #536]	@ (8009654 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 800943a:	4013      	ands	r3, r2
 800943c:	617b      	str	r3, [r7, #20]
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	461a      	mov	r2, r3
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	009b      	lsls	r3, r3, #2
 800944a:	441a      	add	r2, r3
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009452:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009456:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800945e:	2b01      	cmp	r3, #1
 8009460:	f040 80d2 	bne.w	8009608 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	695a      	ldr	r2, [r3, #20]
 8009468:	8bfb      	ldrh	r3, [r7, #30]
 800946a:	441a      	add	r2, r3
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	69da      	ldr	r2, [r3, #28]
 8009474:	8bfb      	ldrh	r3, [r7, #30]
 8009476:	441a      	add	r2, r3
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	6a1a      	ldr	r2, [r3, #32]
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	691b      	ldr	r3, [r3, #16]
 8009484:	429a      	cmp	r2, r3
 8009486:	d309      	bcc.n	800949c <HAL_PCD_EP_DB_Transmit+0x604>
        {
          len = ep->maxpacket;
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	691b      	ldr	r3, [r3, #16]
 800948c:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	6a1a      	ldr	r2, [r3, #32]
 8009492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009494:	1ad2      	subs	r2, r2, r3
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	621a      	str	r2, [r3, #32]
 800949a:	e014      	b.n	80094c6 <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else if (ep->xfer_len_db == 0U)
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	6a1b      	ldr	r3, [r3, #32]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d106      	bne.n	80094b2 <HAL_PCD_EP_DB_Transmit+0x61a>
        {
          len = TxPctSize;
 80094a4:	8bfb      	ldrh	r3, [r7, #30]
 80094a6:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	2200      	movs	r2, #0
 80094ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80094b0:	e009      	b.n	80094c6 <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else
        {
          len = ep->xfer_len_db;
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	6a1b      	ldr	r3, [r3, #32]
 80094b6:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	2200      	movs	r2, #0
 80094bc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	2200      	movs	r2, #0
 80094c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	785b      	ldrb	r3, [r3, #1]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d16a      	bne.n	80095a4 <HAL_PCD_EP_DB_Transmit+0x70c>
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	00db      	lsls	r3, r3, #3
 80094d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80094d8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80094dc:	685a      	ldr	r2, [r3, #4]
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	781b      	ldrb	r3, [r3, #0]
 80094e2:	00db      	lsls	r3, r3, #3
 80094e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80094e8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80094ec:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80094f0:	605a      	str	r2, [r3, #4]
 80094f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d112      	bne.n	800951e <HAL_PCD_EP_DB_Transmit+0x686>
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	00db      	lsls	r3, r3, #3
 80094fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009502:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009506:	685a      	ldr	r2, [r3, #4]
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	00db      	lsls	r3, r3, #3
 800950e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009512:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009516:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800951a:	605a      	str	r2, [r3, #4]
 800951c:	e06a      	b.n	80095f4 <HAL_PCD_EP_DB_Transmit+0x75c>
 800951e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009520:	2b3e      	cmp	r3, #62	@ 0x3e
 8009522:	d81e      	bhi.n	8009562 <HAL_PCD_EP_DB_Transmit+0x6ca>
 8009524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009526:	085b      	lsrs	r3, r3, #1
 8009528:	61bb      	str	r3, [r7, #24]
 800952a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800952c:	f003 0301 	and.w	r3, r3, #1
 8009530:	2b00      	cmp	r3, #0
 8009532:	d002      	beq.n	800953a <HAL_PCD_EP_DB_Transmit+0x6a2>
 8009534:	69bb      	ldr	r3, [r7, #24]
 8009536:	3301      	adds	r3, #1
 8009538:	61bb      	str	r3, [r7, #24]
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	781b      	ldrb	r3, [r3, #0]
 800953e:	00db      	lsls	r3, r3, #3
 8009540:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009544:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009548:	6859      	ldr	r1, [r3, #4]
 800954a:	69bb      	ldr	r3, [r7, #24]
 800954c:	069a      	lsls	r2, r3, #26
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	00db      	lsls	r3, r3, #3
 8009554:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009558:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800955c:	430a      	orrs	r2, r1
 800955e:	605a      	str	r2, [r3, #4]
 8009560:	e048      	b.n	80095f4 <HAL_PCD_EP_DB_Transmit+0x75c>
 8009562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009564:	095b      	lsrs	r3, r3, #5
 8009566:	61bb      	str	r3, [r7, #24]
 8009568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800956a:	f003 031f 	and.w	r3, r3, #31
 800956e:	2b00      	cmp	r3, #0
 8009570:	d102      	bne.n	8009578 <HAL_PCD_EP_DB_Transmit+0x6e0>
 8009572:	69bb      	ldr	r3, [r7, #24]
 8009574:	3b01      	subs	r3, #1
 8009576:	61bb      	str	r3, [r7, #24]
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	781b      	ldrb	r3, [r3, #0]
 800957c:	00db      	lsls	r3, r3, #3
 800957e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009582:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8009586:	685a      	ldr	r2, [r3, #4]
 8009588:	69bb      	ldr	r3, [r7, #24]
 800958a:	069b      	lsls	r3, r3, #26
 800958c:	431a      	orrs	r2, r3
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	00db      	lsls	r3, r3, #3
 8009594:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009598:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800959c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80095a0:	605a      	str	r2, [r3, #4]
 80095a2:	e027      	b.n	80095f4 <HAL_PCD_EP_DB_Transmit+0x75c>
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	785b      	ldrb	r3, [r3, #1]
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d123      	bne.n	80095f4 <HAL_PCD_EP_DB_Transmit+0x75c>
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	00db      	lsls	r3, r3, #3
 80095b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80095b6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80095ba:	685a      	ldr	r2, [r3, #4]
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	781b      	ldrb	r3, [r3, #0]
 80095c0:	00db      	lsls	r3, r3, #3
 80095c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80095c6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80095ca:	b292      	uxth	r2, r2
 80095cc:	605a      	str	r2, [r3, #4]
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	781b      	ldrb	r3, [r3, #0]
 80095d2:	00db      	lsls	r3, r3, #3
 80095d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80095d8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80095dc:	6859      	ldr	r1, [r3, #4]
 80095de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e0:	041a      	lsls	r2, r3, #16
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	00db      	lsls	r3, r3, #3
 80095e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80095ec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80095f0:	430a      	orrs	r2, r1
 80095f2:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	6818      	ldr	r0, [r3, #0]
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	6959      	ldr	r1, [r3, #20]
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	895a      	ldrh	r2, [r3, #10]
 8009600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009602:	b29b      	uxth	r3, r3
 8009604:	f00a f97f 	bl	8013906 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	461a      	mov	r2, r3
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	4413      	add	r3, r2
 8009616:	681a      	ldr	r2, [r3, #0]
 8009618:	4b0f      	ldr	r3, [pc, #60]	@ (8009658 <HAL_PCD_EP_DB_Transmit+0x7c0>)
 800961a:	4013      	ands	r3, r2
 800961c:	633b      	str	r3, [r7, #48]	@ 0x30
 800961e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009620:	f083 0310 	eor.w	r3, r3, #16
 8009624:	633b      	str	r3, [r7, #48]	@ 0x30
 8009626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009628:	f083 0320 	eor.w	r3, r3, #32
 800962c:	633b      	str	r3, [r7, #48]	@ 0x30
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	461a      	mov	r2, r3
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	441a      	add	r2, r3
 800963c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800963e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009642:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009646:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009648:	2300      	movs	r3, #0
}
 800964a:	4618      	mov	r0, r3
 800964c:	3738      	adds	r7, #56	@ 0x38
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
 8009652:	bf00      	nop
 8009654:	07ff8f8f 	.word	0x07ff8f8f
 8009658:	07ff8fbf 	.word	0x07ff8fbf

0800965c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800965c:	b480      	push	{r7}
 800965e:	b087      	sub	sp, #28
 8009660:	af00      	add	r7, sp, #0
 8009662:	60f8      	str	r0, [r7, #12]
 8009664:	607b      	str	r3, [r7, #4]
 8009666:	460b      	mov	r3, r1
 8009668:	817b      	strh	r3, [r7, #10]
 800966a:	4613      	mov	r3, r2
 800966c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800966e:	897b      	ldrh	r3, [r7, #10]
 8009670:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009674:	b29b      	uxth	r3, r3
 8009676:	2b00      	cmp	r3, #0
 8009678:	d00c      	beq.n	8009694 <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800967a:	897b      	ldrh	r3, [r7, #10]
 800967c:	f003 0207 	and.w	r2, r3, #7
 8009680:	4613      	mov	r3, r2
 8009682:	009b      	lsls	r3, r3, #2
 8009684:	4413      	add	r3, r2
 8009686:	00db      	lsls	r3, r3, #3
 8009688:	3310      	adds	r3, #16
 800968a:	68fa      	ldr	r2, [r7, #12]
 800968c:	4413      	add	r3, r2
 800968e:	3304      	adds	r3, #4
 8009690:	617b      	str	r3, [r7, #20]
 8009692:	e00a      	b.n	80096aa <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009694:	897a      	ldrh	r2, [r7, #10]
 8009696:	4613      	mov	r3, r2
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	4413      	add	r3, r2
 800969c:	00db      	lsls	r3, r3, #3
 800969e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80096a2:	68fa      	ldr	r2, [r7, #12]
 80096a4:	4413      	add	r3, r2
 80096a6:	3304      	adds	r3, #4
 80096a8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80096aa:	893b      	ldrh	r3, [r7, #8]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d107      	bne.n	80096c0 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	2200      	movs	r2, #0
 80096b4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	b29a      	uxth	r2, r3
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	80da      	strh	r2, [r3, #6]
 80096be:	e00b      	b.n	80096d8 <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	2201      	movs	r2, #1
 80096c4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	b29a      	uxth	r2, r3
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	0c1b      	lsrs	r3, r3, #16
 80096d2:	b29a      	uxth	r2, r3
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80096d8:	2300      	movs	r3, #0
}
 80096da:	4618      	mov	r0, r3
 80096dc:	371c      	adds	r7, #28
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr

080096e6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80096e6:	b480      	push	{r7}
 80096e8:	b085      	sub	sp, #20
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2201      	movs	r2, #1
 80096f8:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  hpcd->LPM_State = LPM_L0;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2200      	movs	r2, #0
 8009700:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009708:	f043 0201 	orr.w	r2, r3, #1
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009714:	f043 0202 	orr.w	r2, r3, #2
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800971c:	2300      	movs	r3, #0
}
 800971e:	4618      	mov	r0, r3
 8009720:	3714      	adds	r7, #20
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr

0800972a <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800972a:	b480      	push	{r7}
 800972c:	b083      	sub	sp, #12
 800972e:	af00      	add	r7, sp, #0
 8009730:	6078      	str	r0, [r7, #4]
 8009732:	460b      	mov	r3, r1
 8009734:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009736:	bf00      	nop
 8009738:	370c      	adds	r7, #12
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr
	...

08009744 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8009744:	b480      	push	{r7}
 8009746:	af00      	add	r7, sp, #0
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33SV);
 8009748:	4b05      	ldr	r3, [pc, #20]	@ (8009760 <HAL_PWREx_EnableVddUSB+0x1c>)
 800974a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800974c:	4a04      	ldr	r2, [pc, #16]	@ (8009760 <HAL_PWREx_EnableVddUSB+0x1c>)
 800974e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009752:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8009754:	bf00      	nop
 8009756:	46bd      	mov	sp, r7
 8009758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975c:	4770      	bx	lr
 800975e:	bf00      	nop
 8009760:	44020800 	.word	0x44020800

08009764 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b088      	sub	sp, #32
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d102      	bne.n	8009778 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009772:	2301      	movs	r3, #1
 8009774:	f000 bc28 	b.w	8009fc8 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009778:	4b94      	ldr	r3, [pc, #592]	@ (80099cc <HAL_RCC_OscConfig+0x268>)
 800977a:	69db      	ldr	r3, [r3, #28]
 800977c:	f003 0318 	and.w	r3, r3, #24
 8009780:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8009782:	4b92      	ldr	r3, [pc, #584]	@ (80099cc <HAL_RCC_OscConfig+0x268>)
 8009784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009786:	f003 0303 	and.w	r3, r3, #3
 800978a:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f003 0310 	and.w	r3, r3, #16
 8009794:	2b00      	cmp	r3, #0
 8009796:	d05b      	beq.n	8009850 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8009798:	69fb      	ldr	r3, [r7, #28]
 800979a:	2b08      	cmp	r3, #8
 800979c:	d005      	beq.n	80097aa <HAL_RCC_OscConfig+0x46>
 800979e:	69fb      	ldr	r3, [r7, #28]
 80097a0:	2b18      	cmp	r3, #24
 80097a2:	d114      	bne.n	80097ce <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80097a4:	69bb      	ldr	r3, [r7, #24]
 80097a6:	2b02      	cmp	r3, #2
 80097a8:	d111      	bne.n	80097ce <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	69db      	ldr	r3, [r3, #28]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d102      	bne.n	80097b8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80097b2:	2301      	movs	r3, #1
 80097b4:	f000 bc08 	b.w	8009fc8 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80097b8:	4b84      	ldr	r3, [pc, #528]	@ (80099cc <HAL_RCC_OscConfig+0x268>)
 80097ba:	699b      	ldr	r3, [r3, #24]
 80097bc:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6a1b      	ldr	r3, [r3, #32]
 80097c4:	041b      	lsls	r3, r3, #16
 80097c6:	4981      	ldr	r1, [pc, #516]	@ (80099cc <HAL_RCC_OscConfig+0x268>)
 80097c8:	4313      	orrs	r3, r2
 80097ca:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80097cc:	e040      	b.n	8009850 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	69db      	ldr	r3, [r3, #28]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d023      	beq.n	800981e <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80097d6:	4b7d      	ldr	r3, [pc, #500]	@ (80099cc <HAL_RCC_OscConfig+0x268>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a7c      	ldr	r2, [pc, #496]	@ (80099cc <HAL_RCC_OscConfig+0x268>)
 80097dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80097e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097e2:	f7fc f8ef 	bl	80059c4 <HAL_GetTick>
 80097e6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80097e8:	e008      	b.n	80097fc <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80097ea:	f7fc f8eb 	bl	80059c4 <HAL_GetTick>
 80097ee:	4602      	mov	r2, r0
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	1ad3      	subs	r3, r2, r3
 80097f4:	2b02      	cmp	r3, #2
 80097f6:	d901      	bls.n	80097fc <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80097f8:	2303      	movs	r3, #3
 80097fa:	e3e5      	b.n	8009fc8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80097fc:	4b73      	ldr	r3, [pc, #460]	@ (80099cc <HAL_RCC_OscConfig+0x268>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009804:	2b00      	cmp	r3, #0
 8009806:	d0f0      	beq.n	80097ea <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8009808:	4b70      	ldr	r3, [pc, #448]	@ (80099cc <HAL_RCC_OscConfig+0x268>)
 800980a:	699b      	ldr	r3, [r3, #24]
 800980c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6a1b      	ldr	r3, [r3, #32]
 8009814:	041b      	lsls	r3, r3, #16
 8009816:	496d      	ldr	r1, [pc, #436]	@ (80099cc <HAL_RCC_OscConfig+0x268>)
 8009818:	4313      	orrs	r3, r2
 800981a:	618b      	str	r3, [r1, #24]
 800981c:	e018      	b.n	8009850 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800981e:	4b6b      	ldr	r3, [pc, #428]	@ (80099cc <HAL_RCC_OscConfig+0x268>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4a6a      	ldr	r2, [pc, #424]	@ (80099cc <HAL_RCC_OscConfig+0x268>)
 8009824:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009828:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800982a:	f7fc f8cb 	bl	80059c4 <HAL_GetTick>
 800982e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8009830:	e008      	b.n	8009844 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8009832:	f7fc f8c7 	bl	80059c4 <HAL_GetTick>
 8009836:	4602      	mov	r2, r0
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	1ad3      	subs	r3, r2, r3
 800983c:	2b02      	cmp	r3, #2
 800983e:	d901      	bls.n	8009844 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8009840:	2303      	movs	r3, #3
 8009842:	e3c1      	b.n	8009fc8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8009844:	4b61      	ldr	r3, [pc, #388]	@ (80099cc <HAL_RCC_OscConfig+0x268>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800984c:	2b00      	cmp	r3, #0
 800984e:	d1f0      	bne.n	8009832 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f003 0301 	and.w	r3, r3, #1
 8009858:	2b00      	cmp	r3, #0
 800985a:	f000 80a0 	beq.w	800999e <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800985e:	69fb      	ldr	r3, [r7, #28]
 8009860:	2b10      	cmp	r3, #16
 8009862:	d005      	beq.n	8009870 <HAL_RCC_OscConfig+0x10c>
 8009864:	69fb      	ldr	r3, [r7, #28]
 8009866:	2b18      	cmp	r3, #24
 8009868:	d109      	bne.n	800987e <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800986a:	69bb      	ldr	r3, [r7, #24]
 800986c:	2b03      	cmp	r3, #3
 800986e:	d106      	bne.n	800987e <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	685b      	ldr	r3, [r3, #4]
 8009874:	2b00      	cmp	r3, #0
 8009876:	f040 8092 	bne.w	800999e <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800987a:	2301      	movs	r3, #1
 800987c:	e3a4      	b.n	8009fc8 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009886:	d106      	bne.n	8009896 <HAL_RCC_OscConfig+0x132>
 8009888:	4b50      	ldr	r3, [pc, #320]	@ (80099cc <HAL_RCC_OscConfig+0x268>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4a4f      	ldr	r2, [pc, #316]	@ (80099cc <HAL_RCC_OscConfig+0x268>)
 800988e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009892:	6013      	str	r3, [r2, #0]
 8009894:	e058      	b.n	8009948 <HAL_RCC_OscConfig+0x1e4>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d112      	bne.n	80098c4 <HAL_RCC_OscConfig+0x160>
 800989e:	4b4b      	ldr	r3, [pc, #300]	@ (80099cc <HAL_RCC_OscConfig+0x268>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	4a4a      	ldr	r2, [pc, #296]	@ (80099cc <HAL_RCC_OscConfig+0x268>)
 80098a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80098a8:	6013      	str	r3, [r2, #0]
 80098aa:	4b48      	ldr	r3, [pc, #288]	@ (80099cc <HAL_RCC_OscConfig+0x268>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4a47      	ldr	r2, [pc, #284]	@ (80099cc <HAL_RCC_OscConfig+0x268>)
 80098b0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80098b4:	6013      	str	r3, [r2, #0]
 80098b6:	4b45      	ldr	r3, [pc, #276]	@ (80099cc <HAL_RCC_OscConfig+0x268>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a44      	ldr	r2, [pc, #272]	@ (80099cc <HAL_RCC_OscConfig+0x268>)
 80098bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80098c0:	6013      	str	r3, [r2, #0]
 80098c2:	e041      	b.n	8009948 <HAL_RCC_OscConfig+0x1e4>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80098cc:	d112      	bne.n	80098f4 <HAL_RCC_OscConfig+0x190>
 80098ce:	4b3f      	ldr	r3, [pc, #252]	@ (80099cc <HAL_RCC_OscConfig+0x268>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4a3e      	ldr	r2, [pc, #248]	@ (80099cc <HAL_RCC_OscConfig+0x268>)
 80098d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80098d8:	6013      	str	r3, [r2, #0]
 80098da:	4b3c      	ldr	r3, [pc, #240]	@ (80099cc <HAL_RCC_OscConfig+0x268>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4a3b      	ldr	r2, [pc, #236]	@ (80099cc <HAL_RCC_OscConfig+0x268>)
 80098e0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80098e4:	6013      	str	r3, [r2, #0]
 80098e6:	4b39      	ldr	r3, [pc, #228]	@ (80099cc <HAL_RCC_OscConfig+0x268>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4a38      	ldr	r2, [pc, #224]	@ (80099cc <HAL_RCC_OscConfig+0x268>)
 80098ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80098f0:	6013      	str	r3, [r2, #0]
 80098f2:	e029      	b.n	8009948 <HAL_RCC_OscConfig+0x1e4>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80098fc:	d112      	bne.n	8009924 <HAL_RCC_OscConfig+0x1c0>
 80098fe:	4b33      	ldr	r3, [pc, #204]	@ (80099cc <HAL_RCC_OscConfig+0x268>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4a32      	ldr	r2, [pc, #200]	@ (80099cc <HAL_RCC_OscConfig+0x268>)
 8009904:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009908:	6013      	str	r3, [r2, #0]
 800990a:	4b30      	ldr	r3, [pc, #192]	@ (80099cc <HAL_RCC_OscConfig+0x268>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4a2f      	ldr	r2, [pc, #188]	@ (80099cc <HAL_RCC_OscConfig+0x268>)
 8009910:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009914:	6013      	str	r3, [r2, #0]
 8009916:	4b2d      	ldr	r3, [pc, #180]	@ (80099cc <HAL_RCC_OscConfig+0x268>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4a2c      	ldr	r2, [pc, #176]	@ (80099cc <HAL_RCC_OscConfig+0x268>)
 800991c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009920:	6013      	str	r3, [r2, #0]
 8009922:	e011      	b.n	8009948 <HAL_RCC_OscConfig+0x1e4>
 8009924:	4b29      	ldr	r3, [pc, #164]	@ (80099cc <HAL_RCC_OscConfig+0x268>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a28      	ldr	r2, [pc, #160]	@ (80099cc <HAL_RCC_OscConfig+0x268>)
 800992a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800992e:	6013      	str	r3, [r2, #0]
 8009930:	4b26      	ldr	r3, [pc, #152]	@ (80099cc <HAL_RCC_OscConfig+0x268>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4a25      	ldr	r2, [pc, #148]	@ (80099cc <HAL_RCC_OscConfig+0x268>)
 8009936:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800993a:	6013      	str	r3, [r2, #0]
 800993c:	4b23      	ldr	r3, [pc, #140]	@ (80099cc <HAL_RCC_OscConfig+0x268>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4a22      	ldr	r2, [pc, #136]	@ (80099cc <HAL_RCC_OscConfig+0x268>)
 8009942:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009946:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d013      	beq.n	8009978 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009950:	f7fc f838 	bl	80059c4 <HAL_GetTick>
 8009954:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009956:	e008      	b.n	800996a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8009958:	f7fc f834 	bl	80059c4 <HAL_GetTick>
 800995c:	4602      	mov	r2, r0
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	1ad3      	subs	r3, r2, r3
 8009962:	2b64      	cmp	r3, #100	@ 0x64
 8009964:	d901      	bls.n	800996a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009966:	2303      	movs	r3, #3
 8009968:	e32e      	b.n	8009fc8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800996a:	4b18      	ldr	r3, [pc, #96]	@ (80099cc <HAL_RCC_OscConfig+0x268>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009972:	2b00      	cmp	r3, #0
 8009974:	d0f0      	beq.n	8009958 <HAL_RCC_OscConfig+0x1f4>
 8009976:	e012      	b.n	800999e <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009978:	f7fc f824 	bl	80059c4 <HAL_GetTick>
 800997c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800997e:	e008      	b.n	8009992 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8009980:	f7fc f820 	bl	80059c4 <HAL_GetTick>
 8009984:	4602      	mov	r2, r0
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	1ad3      	subs	r3, r2, r3
 800998a:	2b64      	cmp	r3, #100	@ 0x64
 800998c:	d901      	bls.n	8009992 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800998e:	2303      	movs	r3, #3
 8009990:	e31a      	b.n	8009fc8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009992:	4b0e      	ldr	r3, [pc, #56]	@ (80099cc <HAL_RCC_OscConfig+0x268>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800999a:	2b00      	cmp	r3, #0
 800999c:	d1f0      	bne.n	8009980 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f003 0302 	and.w	r3, r3, #2
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	f000 809a 	beq.w	8009ae0 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80099ac:	69fb      	ldr	r3, [r7, #28]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d005      	beq.n	80099be <HAL_RCC_OscConfig+0x25a>
 80099b2:	69fb      	ldr	r3, [r7, #28]
 80099b4:	2b18      	cmp	r3, #24
 80099b6:	d149      	bne.n	8009a4c <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80099b8:	69bb      	ldr	r3, [r7, #24]
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d146      	bne.n	8009a4c <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	68db      	ldr	r3, [r3, #12]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d104      	bne.n	80099d0 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80099c6:	2301      	movs	r3, #1
 80099c8:	e2fe      	b.n	8009fc8 <HAL_RCC_OscConfig+0x864>
 80099ca:	bf00      	nop
 80099cc:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80099d0:	69fb      	ldr	r3, [r7, #28]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d11c      	bne.n	8009a10 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80099d6:	4b9a      	ldr	r3, [pc, #616]	@ (8009c40 <HAL_RCC_OscConfig+0x4dc>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f003 0218 	and.w	r2, r3, #24
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	691b      	ldr	r3, [r3, #16]
 80099e2:	429a      	cmp	r2, r3
 80099e4:	d014      	beq.n	8009a10 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80099e6:	4b96      	ldr	r3, [pc, #600]	@ (8009c40 <HAL_RCC_OscConfig+0x4dc>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f023 0218 	bic.w	r2, r3, #24
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	691b      	ldr	r3, [r3, #16]
 80099f2:	4993      	ldr	r1, [pc, #588]	@ (8009c40 <HAL_RCC_OscConfig+0x4dc>)
 80099f4:	4313      	orrs	r3, r2
 80099f6:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80099f8:	f000 fdd0 	bl	800a59c <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80099fc:	4b91      	ldr	r3, [pc, #580]	@ (8009c44 <HAL_RCC_OscConfig+0x4e0>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4618      	mov	r0, r3
 8009a02:	f7fb ff55 	bl	80058b0 <HAL_InitTick>
 8009a06:	4603      	mov	r3, r0
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d001      	beq.n	8009a10 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	e2db      	b.n	8009fc8 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a10:	f7fb ffd8 	bl	80059c4 <HAL_GetTick>
 8009a14:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009a16:	e008      	b.n	8009a2a <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8009a18:	f7fb ffd4 	bl	80059c4 <HAL_GetTick>
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	1ad3      	subs	r3, r2, r3
 8009a22:	2b02      	cmp	r3, #2
 8009a24:	d901      	bls.n	8009a2a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8009a26:	2303      	movs	r3, #3
 8009a28:	e2ce      	b.n	8009fc8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009a2a:	4b85      	ldr	r3, [pc, #532]	@ (8009c40 <HAL_RCC_OscConfig+0x4dc>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f003 0302 	and.w	r3, r3, #2
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d0f0      	beq.n	8009a18 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8009a36:	4b82      	ldr	r3, [pc, #520]	@ (8009c40 <HAL_RCC_OscConfig+0x4dc>)
 8009a38:	691b      	ldr	r3, [r3, #16]
 8009a3a:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	695b      	ldr	r3, [r3, #20]
 8009a42:	041b      	lsls	r3, r3, #16
 8009a44:	497e      	ldr	r1, [pc, #504]	@ (8009c40 <HAL_RCC_OscConfig+0x4dc>)
 8009a46:	4313      	orrs	r3, r2
 8009a48:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8009a4a:	e049      	b.n	8009ae0 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d02c      	beq.n	8009aae <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8009a54:	4b7a      	ldr	r3, [pc, #488]	@ (8009c40 <HAL_RCC_OscConfig+0x4dc>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f023 0218 	bic.w	r2, r3, #24
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	691b      	ldr	r3, [r3, #16]
 8009a60:	4977      	ldr	r1, [pc, #476]	@ (8009c40 <HAL_RCC_OscConfig+0x4dc>)
 8009a62:	4313      	orrs	r3, r2
 8009a64:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8009a66:	4b76      	ldr	r3, [pc, #472]	@ (8009c40 <HAL_RCC_OscConfig+0x4dc>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a75      	ldr	r2, [pc, #468]	@ (8009c40 <HAL_RCC_OscConfig+0x4dc>)
 8009a6c:	f043 0301 	orr.w	r3, r3, #1
 8009a70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a72:	f7fb ffa7 	bl	80059c4 <HAL_GetTick>
 8009a76:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009a78:	e008      	b.n	8009a8c <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8009a7a:	f7fb ffa3 	bl	80059c4 <HAL_GetTick>
 8009a7e:	4602      	mov	r2, r0
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	1ad3      	subs	r3, r2, r3
 8009a84:	2b02      	cmp	r3, #2
 8009a86:	d901      	bls.n	8009a8c <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8009a88:	2303      	movs	r3, #3
 8009a8a:	e29d      	b.n	8009fc8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009a8c:	4b6c      	ldr	r3, [pc, #432]	@ (8009c40 <HAL_RCC_OscConfig+0x4dc>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f003 0302 	and.w	r3, r3, #2
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d0f0      	beq.n	8009a7a <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8009a98:	4b69      	ldr	r3, [pc, #420]	@ (8009c40 <HAL_RCC_OscConfig+0x4dc>)
 8009a9a:	691b      	ldr	r3, [r3, #16]
 8009a9c:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	695b      	ldr	r3, [r3, #20]
 8009aa4:	041b      	lsls	r3, r3, #16
 8009aa6:	4966      	ldr	r1, [pc, #408]	@ (8009c40 <HAL_RCC_OscConfig+0x4dc>)
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	610b      	str	r3, [r1, #16]
 8009aac:	e018      	b.n	8009ae0 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009aae:	4b64      	ldr	r3, [pc, #400]	@ (8009c40 <HAL_RCC_OscConfig+0x4dc>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4a63      	ldr	r2, [pc, #396]	@ (8009c40 <HAL_RCC_OscConfig+0x4dc>)
 8009ab4:	f023 0301 	bic.w	r3, r3, #1
 8009ab8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009aba:	f7fb ff83 	bl	80059c4 <HAL_GetTick>
 8009abe:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009ac0:	e008      	b.n	8009ad4 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8009ac2:	f7fb ff7f 	bl	80059c4 <HAL_GetTick>
 8009ac6:	4602      	mov	r2, r0
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	1ad3      	subs	r3, r2, r3
 8009acc:	2b02      	cmp	r3, #2
 8009ace:	d901      	bls.n	8009ad4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8009ad0:	2303      	movs	r3, #3
 8009ad2:	e279      	b.n	8009fc8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009ad4:	4b5a      	ldr	r3, [pc, #360]	@ (8009c40 <HAL_RCC_OscConfig+0x4dc>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f003 0302 	and.w	r3, r3, #2
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d1f0      	bne.n	8009ac2 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f003 0308 	and.w	r3, r3, #8
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d03c      	beq.n	8009b66 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	699b      	ldr	r3, [r3, #24]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d01c      	beq.n	8009b2e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009af4:	4b52      	ldr	r3, [pc, #328]	@ (8009c40 <HAL_RCC_OscConfig+0x4dc>)
 8009af6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009afa:	4a51      	ldr	r2, [pc, #324]	@ (8009c40 <HAL_RCC_OscConfig+0x4dc>)
 8009afc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009b00:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b04:	f7fb ff5e 	bl	80059c4 <HAL_GetTick>
 8009b08:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8009b0a:	e008      	b.n	8009b1e <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8009b0c:	f7fb ff5a 	bl	80059c4 <HAL_GetTick>
 8009b10:	4602      	mov	r2, r0
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	1ad3      	subs	r3, r2, r3
 8009b16:	2b02      	cmp	r3, #2
 8009b18:	d901      	bls.n	8009b1e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8009b1a:	2303      	movs	r3, #3
 8009b1c:	e254      	b.n	8009fc8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8009b1e:	4b48      	ldr	r3, [pc, #288]	@ (8009c40 <HAL_RCC_OscConfig+0x4dc>)
 8009b20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d0ef      	beq.n	8009b0c <HAL_RCC_OscConfig+0x3a8>
 8009b2c:	e01b      	b.n	8009b66 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009b2e:	4b44      	ldr	r3, [pc, #272]	@ (8009c40 <HAL_RCC_OscConfig+0x4dc>)
 8009b30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b34:	4a42      	ldr	r2, [pc, #264]	@ (8009c40 <HAL_RCC_OscConfig+0x4dc>)
 8009b36:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009b3a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b3e:	f7fb ff41 	bl	80059c4 <HAL_GetTick>
 8009b42:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009b44:	e008      	b.n	8009b58 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8009b46:	f7fb ff3d 	bl	80059c4 <HAL_GetTick>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	1ad3      	subs	r3, r2, r3
 8009b50:	2b02      	cmp	r3, #2
 8009b52:	d901      	bls.n	8009b58 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8009b54:	2303      	movs	r3, #3
 8009b56:	e237      	b.n	8009fc8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009b58:	4b39      	ldr	r3, [pc, #228]	@ (8009c40 <HAL_RCC_OscConfig+0x4dc>)
 8009b5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d1ef      	bne.n	8009b46 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f003 0304 	and.w	r3, r3, #4
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	f000 80d2 	beq.w	8009d18 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8009b74:	4b34      	ldr	r3, [pc, #208]	@ (8009c48 <HAL_RCC_OscConfig+0x4e4>)
 8009b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b78:	f003 0301 	and.w	r3, r3, #1
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d118      	bne.n	8009bb2 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8009b80:	4b31      	ldr	r3, [pc, #196]	@ (8009c48 <HAL_RCC_OscConfig+0x4e4>)
 8009b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b84:	4a30      	ldr	r2, [pc, #192]	@ (8009c48 <HAL_RCC_OscConfig+0x4e4>)
 8009b86:	f043 0301 	orr.w	r3, r3, #1
 8009b8a:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009b8c:	f7fb ff1a 	bl	80059c4 <HAL_GetTick>
 8009b90:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8009b92:	e008      	b.n	8009ba6 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b94:	f7fb ff16 	bl	80059c4 <HAL_GetTick>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	1ad3      	subs	r3, r2, r3
 8009b9e:	2b02      	cmp	r3, #2
 8009ba0:	d901      	bls.n	8009ba6 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8009ba2:	2303      	movs	r3, #3
 8009ba4:	e210      	b.n	8009fc8 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8009ba6:	4b28      	ldr	r3, [pc, #160]	@ (8009c48 <HAL_RCC_OscConfig+0x4e4>)
 8009ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009baa:	f003 0301 	and.w	r3, r3, #1
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d0f0      	beq.n	8009b94 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	689b      	ldr	r3, [r3, #8]
 8009bb6:	2b01      	cmp	r3, #1
 8009bb8:	d108      	bne.n	8009bcc <HAL_RCC_OscConfig+0x468>
 8009bba:	4b21      	ldr	r3, [pc, #132]	@ (8009c40 <HAL_RCC_OscConfig+0x4dc>)
 8009bbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009bc0:	4a1f      	ldr	r2, [pc, #124]	@ (8009c40 <HAL_RCC_OscConfig+0x4dc>)
 8009bc2:	f043 0301 	orr.w	r3, r3, #1
 8009bc6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009bca:	e074      	b.n	8009cb6 <HAL_RCC_OscConfig+0x552>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d118      	bne.n	8009c06 <HAL_RCC_OscConfig+0x4a2>
 8009bd4:	4b1a      	ldr	r3, [pc, #104]	@ (8009c40 <HAL_RCC_OscConfig+0x4dc>)
 8009bd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009bda:	4a19      	ldr	r2, [pc, #100]	@ (8009c40 <HAL_RCC_OscConfig+0x4dc>)
 8009bdc:	f023 0301 	bic.w	r3, r3, #1
 8009be0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009be4:	4b16      	ldr	r3, [pc, #88]	@ (8009c40 <HAL_RCC_OscConfig+0x4dc>)
 8009be6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009bea:	4a15      	ldr	r2, [pc, #84]	@ (8009c40 <HAL_RCC_OscConfig+0x4dc>)
 8009bec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009bf0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009bf4:	4b12      	ldr	r3, [pc, #72]	@ (8009c40 <HAL_RCC_OscConfig+0x4dc>)
 8009bf6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009bfa:	4a11      	ldr	r2, [pc, #68]	@ (8009c40 <HAL_RCC_OscConfig+0x4dc>)
 8009bfc:	f023 0304 	bic.w	r3, r3, #4
 8009c00:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009c04:	e057      	b.n	8009cb6 <HAL_RCC_OscConfig+0x552>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	689b      	ldr	r3, [r3, #8]
 8009c0a:	2b05      	cmp	r3, #5
 8009c0c:	d11e      	bne.n	8009c4c <HAL_RCC_OscConfig+0x4e8>
 8009c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8009c40 <HAL_RCC_OscConfig+0x4dc>)
 8009c10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c14:	4a0a      	ldr	r2, [pc, #40]	@ (8009c40 <HAL_RCC_OscConfig+0x4dc>)
 8009c16:	f043 0304 	orr.w	r3, r3, #4
 8009c1a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009c1e:	4b08      	ldr	r3, [pc, #32]	@ (8009c40 <HAL_RCC_OscConfig+0x4dc>)
 8009c20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c24:	4a06      	ldr	r2, [pc, #24]	@ (8009c40 <HAL_RCC_OscConfig+0x4dc>)
 8009c26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009c2a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009c2e:	4b04      	ldr	r3, [pc, #16]	@ (8009c40 <HAL_RCC_OscConfig+0x4dc>)
 8009c30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c34:	4a02      	ldr	r2, [pc, #8]	@ (8009c40 <HAL_RCC_OscConfig+0x4dc>)
 8009c36:	f043 0301 	orr.w	r3, r3, #1
 8009c3a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009c3e:	e03a      	b.n	8009cb6 <HAL_RCC_OscConfig+0x552>
 8009c40:	44020c00 	.word	0x44020c00
 8009c44:	20000024 	.word	0x20000024
 8009c48:	44020800 	.word	0x44020800
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	689b      	ldr	r3, [r3, #8]
 8009c50:	2b85      	cmp	r3, #133	@ 0x85
 8009c52:	d118      	bne.n	8009c86 <HAL_RCC_OscConfig+0x522>
 8009c54:	4ba2      	ldr	r3, [pc, #648]	@ (8009ee0 <HAL_RCC_OscConfig+0x77c>)
 8009c56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c5a:	4aa1      	ldr	r2, [pc, #644]	@ (8009ee0 <HAL_RCC_OscConfig+0x77c>)
 8009c5c:	f043 0304 	orr.w	r3, r3, #4
 8009c60:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009c64:	4b9e      	ldr	r3, [pc, #632]	@ (8009ee0 <HAL_RCC_OscConfig+0x77c>)
 8009c66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c6a:	4a9d      	ldr	r2, [pc, #628]	@ (8009ee0 <HAL_RCC_OscConfig+0x77c>)
 8009c6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c70:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009c74:	4b9a      	ldr	r3, [pc, #616]	@ (8009ee0 <HAL_RCC_OscConfig+0x77c>)
 8009c76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c7a:	4a99      	ldr	r2, [pc, #612]	@ (8009ee0 <HAL_RCC_OscConfig+0x77c>)
 8009c7c:	f043 0301 	orr.w	r3, r3, #1
 8009c80:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009c84:	e017      	b.n	8009cb6 <HAL_RCC_OscConfig+0x552>
 8009c86:	4b96      	ldr	r3, [pc, #600]	@ (8009ee0 <HAL_RCC_OscConfig+0x77c>)
 8009c88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c8c:	4a94      	ldr	r2, [pc, #592]	@ (8009ee0 <HAL_RCC_OscConfig+0x77c>)
 8009c8e:	f023 0301 	bic.w	r3, r3, #1
 8009c92:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009c96:	4b92      	ldr	r3, [pc, #584]	@ (8009ee0 <HAL_RCC_OscConfig+0x77c>)
 8009c98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c9c:	4a90      	ldr	r2, [pc, #576]	@ (8009ee0 <HAL_RCC_OscConfig+0x77c>)
 8009c9e:	f023 0304 	bic.w	r3, r3, #4
 8009ca2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009ca6:	4b8e      	ldr	r3, [pc, #568]	@ (8009ee0 <HAL_RCC_OscConfig+0x77c>)
 8009ca8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009cac:	4a8c      	ldr	r2, [pc, #560]	@ (8009ee0 <HAL_RCC_OscConfig+0x77c>)
 8009cae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009cb2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	689b      	ldr	r3, [r3, #8]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d016      	beq.n	8009cec <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009cbe:	f7fb fe81 	bl	80059c4 <HAL_GetTick>
 8009cc2:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009cc4:	e00a      	b.n	8009cdc <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009cc6:	f7fb fe7d 	bl	80059c4 <HAL_GetTick>
 8009cca:	4602      	mov	r2, r0
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	1ad3      	subs	r3, r2, r3
 8009cd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d901      	bls.n	8009cdc <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8009cd8:	2303      	movs	r3, #3
 8009cda:	e175      	b.n	8009fc8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009cdc:	4b80      	ldr	r3, [pc, #512]	@ (8009ee0 <HAL_RCC_OscConfig+0x77c>)
 8009cde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ce2:	f003 0302 	and.w	r3, r3, #2
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d0ed      	beq.n	8009cc6 <HAL_RCC_OscConfig+0x562>
 8009cea:	e015      	b.n	8009d18 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009cec:	f7fb fe6a 	bl	80059c4 <HAL_GetTick>
 8009cf0:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009cf2:	e00a      	b.n	8009d0a <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009cf4:	f7fb fe66 	bl	80059c4 <HAL_GetTick>
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	1ad3      	subs	r3, r2, r3
 8009cfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d901      	bls.n	8009d0a <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8009d06:	2303      	movs	r3, #3
 8009d08:	e15e      	b.n	8009fc8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009d0a:	4b75      	ldr	r3, [pc, #468]	@ (8009ee0 <HAL_RCC_OscConfig+0x77c>)
 8009d0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009d10:	f003 0302 	and.w	r3, r3, #2
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d1ed      	bne.n	8009cf4 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f003 0320 	and.w	r3, r3, #32
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d036      	beq.n	8009d92 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d019      	beq.n	8009d60 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009d2c:	4b6c      	ldr	r3, [pc, #432]	@ (8009ee0 <HAL_RCC_OscConfig+0x77c>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a6b      	ldr	r2, [pc, #428]	@ (8009ee0 <HAL_RCC_OscConfig+0x77c>)
 8009d32:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009d36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d38:	f7fb fe44 	bl	80059c4 <HAL_GetTick>
 8009d3c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8009d3e:	e008      	b.n	8009d52 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8009d40:	f7fb fe40 	bl	80059c4 <HAL_GetTick>
 8009d44:	4602      	mov	r2, r0
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	1ad3      	subs	r3, r2, r3
 8009d4a:	2b02      	cmp	r3, #2
 8009d4c:	d901      	bls.n	8009d52 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8009d4e:	2303      	movs	r3, #3
 8009d50:	e13a      	b.n	8009fc8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8009d52:	4b63      	ldr	r3, [pc, #396]	@ (8009ee0 <HAL_RCC_OscConfig+0x77c>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d0f0      	beq.n	8009d40 <HAL_RCC_OscConfig+0x5dc>
 8009d5e:	e018      	b.n	8009d92 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009d60:	4b5f      	ldr	r3, [pc, #380]	@ (8009ee0 <HAL_RCC_OscConfig+0x77c>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4a5e      	ldr	r2, [pc, #376]	@ (8009ee0 <HAL_RCC_OscConfig+0x77c>)
 8009d66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009d6a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d6c:	f7fb fe2a 	bl	80059c4 <HAL_GetTick>
 8009d70:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8009d72:	e008      	b.n	8009d86 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8009d74:	f7fb fe26 	bl	80059c4 <HAL_GetTick>
 8009d78:	4602      	mov	r2, r0
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	1ad3      	subs	r3, r2, r3
 8009d7e:	2b02      	cmp	r3, #2
 8009d80:	d901      	bls.n	8009d86 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8009d82:	2303      	movs	r3, #3
 8009d84:	e120      	b.n	8009fc8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8009d86:	4b56      	ldr	r3, [pc, #344]	@ (8009ee0 <HAL_RCC_OscConfig+0x77c>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d1f0      	bne.n	8009d74 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	f000 8115 	beq.w	8009fc6 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009d9c:	69fb      	ldr	r3, [r7, #28]
 8009d9e:	2b18      	cmp	r3, #24
 8009da0:	f000 80af 	beq.w	8009f02 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009da8:	2b02      	cmp	r3, #2
 8009daa:	f040 8086 	bne.w	8009eba <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8009dae:	4b4c      	ldr	r3, [pc, #304]	@ (8009ee0 <HAL_RCC_OscConfig+0x77c>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	4a4b      	ldr	r2, [pc, #300]	@ (8009ee0 <HAL_RCC_OscConfig+0x77c>)
 8009db4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009db8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dba:	f7fb fe03 	bl	80059c4 <HAL_GetTick>
 8009dbe:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009dc0:	e008      	b.n	8009dd4 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8009dc2:	f7fb fdff 	bl	80059c4 <HAL_GetTick>
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	1ad3      	subs	r3, r2, r3
 8009dcc:	2b02      	cmp	r3, #2
 8009dce:	d901      	bls.n	8009dd4 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8009dd0:	2303      	movs	r3, #3
 8009dd2:	e0f9      	b.n	8009fc8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009dd4:	4b42      	ldr	r3, [pc, #264]	@ (8009ee0 <HAL_RCC_OscConfig+0x77c>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d1f0      	bne.n	8009dc2 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8009de0:	4b3f      	ldr	r3, [pc, #252]	@ (8009ee0 <HAL_RCC_OscConfig+0x77c>)
 8009de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009de4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009de8:	f023 0303 	bic.w	r3, r3, #3
 8009dec:	687a      	ldr	r2, [r7, #4]
 8009dee:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8009df0:	687a      	ldr	r2, [r7, #4]
 8009df2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009df4:	0212      	lsls	r2, r2, #8
 8009df6:	430a      	orrs	r2, r1
 8009df8:	4939      	ldr	r1, [pc, #228]	@ (8009ee0 <HAL_RCC_OscConfig+0x77c>)
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	628b      	str	r3, [r1, #40]	@ 0x28
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e02:	3b01      	subs	r3, #1
 8009e04:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e0c:	3b01      	subs	r3, #1
 8009e0e:	025b      	lsls	r3, r3, #9
 8009e10:	b29b      	uxth	r3, r3
 8009e12:	431a      	orrs	r2, r3
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e18:	3b01      	subs	r3, #1
 8009e1a:	041b      	lsls	r3, r3, #16
 8009e1c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009e20:	431a      	orrs	r2, r3
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e26:	3b01      	subs	r3, #1
 8009e28:	061b      	lsls	r3, r3, #24
 8009e2a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009e2e:	492c      	ldr	r1, [pc, #176]	@ (8009ee0 <HAL_RCC_OscConfig+0x77c>)
 8009e30:	4313      	orrs	r3, r2
 8009e32:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8009e34:	4b2a      	ldr	r3, [pc, #168]	@ (8009ee0 <HAL_RCC_OscConfig+0x77c>)
 8009e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e38:	4a29      	ldr	r2, [pc, #164]	@ (8009ee0 <HAL_RCC_OscConfig+0x77c>)
 8009e3a:	f023 0310 	bic.w	r3, r3, #16
 8009e3e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e44:	4a26      	ldr	r2, [pc, #152]	@ (8009ee0 <HAL_RCC_OscConfig+0x77c>)
 8009e46:	00db      	lsls	r3, r3, #3
 8009e48:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8009e4a:	4b25      	ldr	r3, [pc, #148]	@ (8009ee0 <HAL_RCC_OscConfig+0x77c>)
 8009e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e4e:	4a24      	ldr	r2, [pc, #144]	@ (8009ee0 <HAL_RCC_OscConfig+0x77c>)
 8009e50:	f043 0310 	orr.w	r3, r3, #16
 8009e54:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8009e56:	4b22      	ldr	r3, [pc, #136]	@ (8009ee0 <HAL_RCC_OscConfig+0x77c>)
 8009e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e5a:	f023 020c 	bic.w	r2, r3, #12
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e62:	491f      	ldr	r1, [pc, #124]	@ (8009ee0 <HAL_RCC_OscConfig+0x77c>)
 8009e64:	4313      	orrs	r3, r2
 8009e66:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8009e68:	4b1d      	ldr	r3, [pc, #116]	@ (8009ee0 <HAL_RCC_OscConfig+0x77c>)
 8009e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e6c:	f023 0220 	bic.w	r2, r3, #32
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e74:	491a      	ldr	r1, [pc, #104]	@ (8009ee0 <HAL_RCC_OscConfig+0x77c>)
 8009e76:	4313      	orrs	r3, r2
 8009e78:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009e7a:	4b19      	ldr	r3, [pc, #100]	@ (8009ee0 <HAL_RCC_OscConfig+0x77c>)
 8009e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e7e:	4a18      	ldr	r2, [pc, #96]	@ (8009ee0 <HAL_RCC_OscConfig+0x77c>)
 8009e80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009e84:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8009e86:	4b16      	ldr	r3, [pc, #88]	@ (8009ee0 <HAL_RCC_OscConfig+0x77c>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4a15      	ldr	r2, [pc, #84]	@ (8009ee0 <HAL_RCC_OscConfig+0x77c>)
 8009e8c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009e90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e92:	f7fb fd97 	bl	80059c4 <HAL_GetTick>
 8009e96:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8009e98:	e008      	b.n	8009eac <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8009e9a:	f7fb fd93 	bl	80059c4 <HAL_GetTick>
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	1ad3      	subs	r3, r2, r3
 8009ea4:	2b02      	cmp	r3, #2
 8009ea6:	d901      	bls.n	8009eac <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8009ea8:	2303      	movs	r3, #3
 8009eaa:	e08d      	b.n	8009fc8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8009eac:	4b0c      	ldr	r3, [pc, #48]	@ (8009ee0 <HAL_RCC_OscConfig+0x77c>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d0f0      	beq.n	8009e9a <HAL_RCC_OscConfig+0x736>
 8009eb8:	e085      	b.n	8009fc6 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8009eba:	4b09      	ldr	r3, [pc, #36]	@ (8009ee0 <HAL_RCC_OscConfig+0x77c>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4a08      	ldr	r2, [pc, #32]	@ (8009ee0 <HAL_RCC_OscConfig+0x77c>)
 8009ec0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009ec4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ec6:	f7fb fd7d 	bl	80059c4 <HAL_GetTick>
 8009eca:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009ecc:	e00a      	b.n	8009ee4 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8009ece:	f7fb fd79 	bl	80059c4 <HAL_GetTick>
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	1ad3      	subs	r3, r2, r3
 8009ed8:	2b02      	cmp	r3, #2
 8009eda:	d903      	bls.n	8009ee4 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8009edc:	2303      	movs	r3, #3
 8009ede:	e073      	b.n	8009fc8 <HAL_RCC_OscConfig+0x864>
 8009ee0:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009ee4:	4b3a      	ldr	r3, [pc, #232]	@ (8009fd0 <HAL_RCC_OscConfig+0x86c>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d1ee      	bne.n	8009ece <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8009ef0:	4b37      	ldr	r3, [pc, #220]	@ (8009fd0 <HAL_RCC_OscConfig+0x86c>)
 8009ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ef4:	4a36      	ldr	r2, [pc, #216]	@ (8009fd0 <HAL_RCC_OscConfig+0x86c>)
 8009ef6:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8009efa:	f023 0303 	bic.w	r3, r3, #3
 8009efe:	6293      	str	r3, [r2, #40]	@ 0x28
 8009f00:	e061      	b.n	8009fc6 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8009f02:	4b33      	ldr	r3, [pc, #204]	@ (8009fd0 <HAL_RCC_OscConfig+0x86c>)
 8009f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f06:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009f08:	4b31      	ldr	r3, [pc, #196]	@ (8009fd0 <HAL_RCC_OscConfig+0x86c>)
 8009f0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f0c:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	d031      	beq.n	8009f7a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	f003 0203 	and.w	r2, r3, #3
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f20:	429a      	cmp	r2, r3
 8009f22:	d12a      	bne.n	8009f7a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	0a1b      	lsrs	r3, r3, #8
 8009f28:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d122      	bne.n	8009f7a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f3e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d11a      	bne.n	8009f7a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	0a5b      	lsrs	r3, r3, #9
 8009f48:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f50:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d111      	bne.n	8009f7a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	0c1b      	lsrs	r3, r3, #16
 8009f5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f62:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d108      	bne.n	8009f7a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	0e1b      	lsrs	r3, r3, #24
 8009f6c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f74:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d001      	beq.n	8009f7e <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	e024      	b.n	8009fc8 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8009f7e:	4b14      	ldr	r3, [pc, #80]	@ (8009fd0 <HAL_RCC_OscConfig+0x86c>)
 8009f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f82:	08db      	lsrs	r3, r3, #3
 8009f84:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	d01a      	beq.n	8009fc6 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8009f90:	4b0f      	ldr	r3, [pc, #60]	@ (8009fd0 <HAL_RCC_OscConfig+0x86c>)
 8009f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f94:	4a0e      	ldr	r2, [pc, #56]	@ (8009fd0 <HAL_RCC_OscConfig+0x86c>)
 8009f96:	f023 0310 	bic.w	r3, r3, #16
 8009f9a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f9c:	f7fb fd12 	bl	80059c4 <HAL_GetTick>
 8009fa0:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8009fa2:	bf00      	nop
 8009fa4:	f7fb fd0e 	bl	80059c4 <HAL_GetTick>
 8009fa8:	4602      	mov	r2, r0
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d0f9      	beq.n	8009fa4 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009fb4:	4a06      	ldr	r2, [pc, #24]	@ (8009fd0 <HAL_RCC_OscConfig+0x86c>)
 8009fb6:	00db      	lsls	r3, r3, #3
 8009fb8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8009fba:	4b05      	ldr	r3, [pc, #20]	@ (8009fd0 <HAL_RCC_OscConfig+0x86c>)
 8009fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fbe:	4a04      	ldr	r2, [pc, #16]	@ (8009fd0 <HAL_RCC_OscConfig+0x86c>)
 8009fc0:	f043 0310 	orr.w	r3, r3, #16
 8009fc4:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8009fc6:	2300      	movs	r3, #0
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3720      	adds	r7, #32
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}
 8009fd0:	44020c00 	.word	0x44020c00

08009fd4 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b084      	sub	sp, #16
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d101      	bne.n	8009fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	e19e      	b.n	800a326 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009fe8:	4b83      	ldr	r3, [pc, #524]	@ (800a1f8 <HAL_RCC_ClockConfig+0x224>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f003 030f 	and.w	r3, r3, #15
 8009ff0:	683a      	ldr	r2, [r7, #0]
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d910      	bls.n	800a018 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ff6:	4b80      	ldr	r3, [pc, #512]	@ (800a1f8 <HAL_RCC_ClockConfig+0x224>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f023 020f 	bic.w	r2, r3, #15
 8009ffe:	497e      	ldr	r1, [pc, #504]	@ (800a1f8 <HAL_RCC_ClockConfig+0x224>)
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	4313      	orrs	r3, r2
 800a004:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a006:	4b7c      	ldr	r3, [pc, #496]	@ (800a1f8 <HAL_RCC_ClockConfig+0x224>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f003 030f 	and.w	r3, r3, #15
 800a00e:	683a      	ldr	r2, [r7, #0]
 800a010:	429a      	cmp	r2, r3
 800a012:	d001      	beq.n	800a018 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a014:	2301      	movs	r3, #1
 800a016:	e186      	b.n	800a326 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f003 0310 	and.w	r3, r3, #16
 800a020:	2b00      	cmp	r3, #0
 800a022:	d012      	beq.n	800a04a <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	695a      	ldr	r2, [r3, #20]
 800a028:	4b74      	ldr	r3, [pc, #464]	@ (800a1fc <HAL_RCC_ClockConfig+0x228>)
 800a02a:	6a1b      	ldr	r3, [r3, #32]
 800a02c:	0a1b      	lsrs	r3, r3, #8
 800a02e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a032:	429a      	cmp	r2, r3
 800a034:	d909      	bls.n	800a04a <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800a036:	4b71      	ldr	r3, [pc, #452]	@ (800a1fc <HAL_RCC_ClockConfig+0x228>)
 800a038:	6a1b      	ldr	r3, [r3, #32]
 800a03a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	695b      	ldr	r3, [r3, #20]
 800a042:	021b      	lsls	r3, r3, #8
 800a044:	496d      	ldr	r1, [pc, #436]	@ (800a1fc <HAL_RCC_ClockConfig+0x228>)
 800a046:	4313      	orrs	r3, r2
 800a048:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f003 0308 	and.w	r3, r3, #8
 800a052:	2b00      	cmp	r3, #0
 800a054:	d012      	beq.n	800a07c <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	691a      	ldr	r2, [r3, #16]
 800a05a:	4b68      	ldr	r3, [pc, #416]	@ (800a1fc <HAL_RCC_ClockConfig+0x228>)
 800a05c:	6a1b      	ldr	r3, [r3, #32]
 800a05e:	091b      	lsrs	r3, r3, #4
 800a060:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a064:	429a      	cmp	r2, r3
 800a066:	d909      	bls.n	800a07c <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800a068:	4b64      	ldr	r3, [pc, #400]	@ (800a1fc <HAL_RCC_ClockConfig+0x228>)
 800a06a:	6a1b      	ldr	r3, [r3, #32]
 800a06c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	691b      	ldr	r3, [r3, #16]
 800a074:	011b      	lsls	r3, r3, #4
 800a076:	4961      	ldr	r1, [pc, #388]	@ (800a1fc <HAL_RCC_ClockConfig+0x228>)
 800a078:	4313      	orrs	r3, r2
 800a07a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f003 0304 	and.w	r3, r3, #4
 800a084:	2b00      	cmp	r3, #0
 800a086:	d010      	beq.n	800a0aa <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	68da      	ldr	r2, [r3, #12]
 800a08c:	4b5b      	ldr	r3, [pc, #364]	@ (800a1fc <HAL_RCC_ClockConfig+0x228>)
 800a08e:	6a1b      	ldr	r3, [r3, #32]
 800a090:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a094:	429a      	cmp	r2, r3
 800a096:	d908      	bls.n	800a0aa <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800a098:	4b58      	ldr	r3, [pc, #352]	@ (800a1fc <HAL_RCC_ClockConfig+0x228>)
 800a09a:	6a1b      	ldr	r3, [r3, #32]
 800a09c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	68db      	ldr	r3, [r3, #12]
 800a0a4:	4955      	ldr	r1, [pc, #340]	@ (800a1fc <HAL_RCC_ClockConfig+0x228>)
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f003 0302 	and.w	r3, r3, #2
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d010      	beq.n	800a0d8 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	689a      	ldr	r2, [r3, #8]
 800a0ba:	4b50      	ldr	r3, [pc, #320]	@ (800a1fc <HAL_RCC_ClockConfig+0x228>)
 800a0bc:	6a1b      	ldr	r3, [r3, #32]
 800a0be:	f003 030f 	and.w	r3, r3, #15
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d908      	bls.n	800a0d8 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800a0c6:	4b4d      	ldr	r3, [pc, #308]	@ (800a1fc <HAL_RCC_ClockConfig+0x228>)
 800a0c8:	6a1b      	ldr	r3, [r3, #32]
 800a0ca:	f023 020f 	bic.w	r2, r3, #15
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	689b      	ldr	r3, [r3, #8]
 800a0d2:	494a      	ldr	r1, [pc, #296]	@ (800a1fc <HAL_RCC_ClockConfig+0x228>)
 800a0d4:	4313      	orrs	r3, r2
 800a0d6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f003 0301 	and.w	r3, r3, #1
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	f000 8093 	beq.w	800a20c <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	2b03      	cmp	r3, #3
 800a0ec:	d107      	bne.n	800a0fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800a0ee:	4b43      	ldr	r3, [pc, #268]	@ (800a1fc <HAL_RCC_ClockConfig+0x228>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d121      	bne.n	800a13e <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	e113      	b.n	800a326 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	2b02      	cmp	r3, #2
 800a104:	d107      	bne.n	800a116 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a106:	4b3d      	ldr	r3, [pc, #244]	@ (800a1fc <HAL_RCC_ClockConfig+0x228>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d115      	bne.n	800a13e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800a112:	2301      	movs	r3, #1
 800a114:	e107      	b.n	800a326 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	d107      	bne.n	800a12e <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800a11e:	4b37      	ldr	r3, [pc, #220]	@ (800a1fc <HAL_RCC_ClockConfig+0x228>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a126:	2b00      	cmp	r3, #0
 800a128:	d109      	bne.n	800a13e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800a12a:	2301      	movs	r3, #1
 800a12c:	e0fb      	b.n	800a326 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a12e:	4b33      	ldr	r3, [pc, #204]	@ (800a1fc <HAL_RCC_ClockConfig+0x228>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f003 0302 	and.w	r3, r3, #2
 800a136:	2b00      	cmp	r3, #0
 800a138:	d101      	bne.n	800a13e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800a13a:	2301      	movs	r3, #1
 800a13c:	e0f3      	b.n	800a326 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800a13e:	4b2f      	ldr	r3, [pc, #188]	@ (800a1fc <HAL_RCC_ClockConfig+0x228>)
 800a140:	69db      	ldr	r3, [r3, #28]
 800a142:	f023 0203 	bic.w	r2, r3, #3
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	685b      	ldr	r3, [r3, #4]
 800a14a:	492c      	ldr	r1, [pc, #176]	@ (800a1fc <HAL_RCC_ClockConfig+0x228>)
 800a14c:	4313      	orrs	r3, r2
 800a14e:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a150:	f7fb fc38 	bl	80059c4 <HAL_GetTick>
 800a154:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	685b      	ldr	r3, [r3, #4]
 800a15a:	2b03      	cmp	r3, #3
 800a15c:	d112      	bne.n	800a184 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a15e:	e00a      	b.n	800a176 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800a160:	f7fb fc30 	bl	80059c4 <HAL_GetTick>
 800a164:	4602      	mov	r2, r0
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	1ad3      	subs	r3, r2, r3
 800a16a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a16e:	4293      	cmp	r3, r2
 800a170:	d901      	bls.n	800a176 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800a172:	2303      	movs	r3, #3
 800a174:	e0d7      	b.n	800a326 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a176:	4b21      	ldr	r3, [pc, #132]	@ (800a1fc <HAL_RCC_ClockConfig+0x228>)
 800a178:	69db      	ldr	r3, [r3, #28]
 800a17a:	f003 0318 	and.w	r3, r3, #24
 800a17e:	2b18      	cmp	r3, #24
 800a180:	d1ee      	bne.n	800a160 <HAL_RCC_ClockConfig+0x18c>
 800a182:	e043      	b.n	800a20c <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	2b02      	cmp	r3, #2
 800a18a:	d112      	bne.n	800a1b2 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a18c:	e00a      	b.n	800a1a4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800a18e:	f7fb fc19 	bl	80059c4 <HAL_GetTick>
 800a192:	4602      	mov	r2, r0
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	1ad3      	subs	r3, r2, r3
 800a198:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d901      	bls.n	800a1a4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800a1a0:	2303      	movs	r3, #3
 800a1a2:	e0c0      	b.n	800a326 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a1a4:	4b15      	ldr	r3, [pc, #84]	@ (800a1fc <HAL_RCC_ClockConfig+0x228>)
 800a1a6:	69db      	ldr	r3, [r3, #28]
 800a1a8:	f003 0318 	and.w	r3, r3, #24
 800a1ac:	2b10      	cmp	r3, #16
 800a1ae:	d1ee      	bne.n	800a18e <HAL_RCC_ClockConfig+0x1ba>
 800a1b0:	e02c      	b.n	800a20c <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	685b      	ldr	r3, [r3, #4]
 800a1b6:	2b01      	cmp	r3, #1
 800a1b8:	d122      	bne.n	800a200 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800a1ba:	e00a      	b.n	800a1d2 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800a1bc:	f7fb fc02 	bl	80059c4 <HAL_GetTick>
 800a1c0:	4602      	mov	r2, r0
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	1ad3      	subs	r3, r2, r3
 800a1c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d901      	bls.n	800a1d2 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800a1ce:	2303      	movs	r3, #3
 800a1d0:	e0a9      	b.n	800a326 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800a1d2:	4b0a      	ldr	r3, [pc, #40]	@ (800a1fc <HAL_RCC_ClockConfig+0x228>)
 800a1d4:	69db      	ldr	r3, [r3, #28]
 800a1d6:	f003 0318 	and.w	r3, r3, #24
 800a1da:	2b08      	cmp	r3, #8
 800a1dc:	d1ee      	bne.n	800a1bc <HAL_RCC_ClockConfig+0x1e8>
 800a1de:	e015      	b.n	800a20c <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800a1e0:	f7fb fbf0 	bl	80059c4 <HAL_GetTick>
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	1ad3      	subs	r3, r2, r3
 800a1ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d906      	bls.n	800a200 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800a1f2:	2303      	movs	r3, #3
 800a1f4:	e097      	b.n	800a326 <HAL_RCC_ClockConfig+0x352>
 800a1f6:	bf00      	nop
 800a1f8:	40022000 	.word	0x40022000
 800a1fc:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800a200:	4b4b      	ldr	r3, [pc, #300]	@ (800a330 <HAL_RCC_ClockConfig+0x35c>)
 800a202:	69db      	ldr	r3, [r3, #28]
 800a204:	f003 0318 	and.w	r3, r3, #24
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d1e9      	bne.n	800a1e0 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f003 0302 	and.w	r3, r3, #2
 800a214:	2b00      	cmp	r3, #0
 800a216:	d010      	beq.n	800a23a <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	689a      	ldr	r2, [r3, #8]
 800a21c:	4b44      	ldr	r3, [pc, #272]	@ (800a330 <HAL_RCC_ClockConfig+0x35c>)
 800a21e:	6a1b      	ldr	r3, [r3, #32]
 800a220:	f003 030f 	and.w	r3, r3, #15
 800a224:	429a      	cmp	r2, r3
 800a226:	d208      	bcs.n	800a23a <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800a228:	4b41      	ldr	r3, [pc, #260]	@ (800a330 <HAL_RCC_ClockConfig+0x35c>)
 800a22a:	6a1b      	ldr	r3, [r3, #32]
 800a22c:	f023 020f 	bic.w	r2, r3, #15
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	689b      	ldr	r3, [r3, #8]
 800a234:	493e      	ldr	r1, [pc, #248]	@ (800a330 <HAL_RCC_ClockConfig+0x35c>)
 800a236:	4313      	orrs	r3, r2
 800a238:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a23a:	4b3e      	ldr	r3, [pc, #248]	@ (800a334 <HAL_RCC_ClockConfig+0x360>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f003 030f 	and.w	r3, r3, #15
 800a242:	683a      	ldr	r2, [r7, #0]
 800a244:	429a      	cmp	r2, r3
 800a246:	d210      	bcs.n	800a26a <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a248:	4b3a      	ldr	r3, [pc, #232]	@ (800a334 <HAL_RCC_ClockConfig+0x360>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f023 020f 	bic.w	r2, r3, #15
 800a250:	4938      	ldr	r1, [pc, #224]	@ (800a334 <HAL_RCC_ClockConfig+0x360>)
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	4313      	orrs	r3, r2
 800a256:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a258:	4b36      	ldr	r3, [pc, #216]	@ (800a334 <HAL_RCC_ClockConfig+0x360>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f003 030f 	and.w	r3, r3, #15
 800a260:	683a      	ldr	r2, [r7, #0]
 800a262:	429a      	cmp	r2, r3
 800a264:	d001      	beq.n	800a26a <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800a266:	2301      	movs	r3, #1
 800a268:	e05d      	b.n	800a326 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f003 0304 	and.w	r3, r3, #4
 800a272:	2b00      	cmp	r3, #0
 800a274:	d010      	beq.n	800a298 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	68da      	ldr	r2, [r3, #12]
 800a27a:	4b2d      	ldr	r3, [pc, #180]	@ (800a330 <HAL_RCC_ClockConfig+0x35c>)
 800a27c:	6a1b      	ldr	r3, [r3, #32]
 800a27e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a282:	429a      	cmp	r2, r3
 800a284:	d208      	bcs.n	800a298 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800a286:	4b2a      	ldr	r3, [pc, #168]	@ (800a330 <HAL_RCC_ClockConfig+0x35c>)
 800a288:	6a1b      	ldr	r3, [r3, #32]
 800a28a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	68db      	ldr	r3, [r3, #12]
 800a292:	4927      	ldr	r1, [pc, #156]	@ (800a330 <HAL_RCC_ClockConfig+0x35c>)
 800a294:	4313      	orrs	r3, r2
 800a296:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f003 0308 	and.w	r3, r3, #8
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d012      	beq.n	800a2ca <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	691a      	ldr	r2, [r3, #16]
 800a2a8:	4b21      	ldr	r3, [pc, #132]	@ (800a330 <HAL_RCC_ClockConfig+0x35c>)
 800a2aa:	6a1b      	ldr	r3, [r3, #32]
 800a2ac:	091b      	lsrs	r3, r3, #4
 800a2ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d209      	bcs.n	800a2ca <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800a2b6:	4b1e      	ldr	r3, [pc, #120]	@ (800a330 <HAL_RCC_ClockConfig+0x35c>)
 800a2b8:	6a1b      	ldr	r3, [r3, #32]
 800a2ba:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	691b      	ldr	r3, [r3, #16]
 800a2c2:	011b      	lsls	r3, r3, #4
 800a2c4:	491a      	ldr	r1, [pc, #104]	@ (800a330 <HAL_RCC_ClockConfig+0x35c>)
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f003 0310 	and.w	r3, r3, #16
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d012      	beq.n	800a2fc <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	695a      	ldr	r2, [r3, #20]
 800a2da:	4b15      	ldr	r3, [pc, #84]	@ (800a330 <HAL_RCC_ClockConfig+0x35c>)
 800a2dc:	6a1b      	ldr	r3, [r3, #32]
 800a2de:	0a1b      	lsrs	r3, r3, #8
 800a2e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a2e4:	429a      	cmp	r2, r3
 800a2e6:	d209      	bcs.n	800a2fc <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800a2e8:	4b11      	ldr	r3, [pc, #68]	@ (800a330 <HAL_RCC_ClockConfig+0x35c>)
 800a2ea:	6a1b      	ldr	r3, [r3, #32]
 800a2ec:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	695b      	ldr	r3, [r3, #20]
 800a2f4:	021b      	lsls	r3, r3, #8
 800a2f6:	490e      	ldr	r1, [pc, #56]	@ (800a330 <HAL_RCC_ClockConfig+0x35c>)
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800a2fc:	f000 f822 	bl	800a344 <HAL_RCC_GetSysClockFreq>
 800a300:	4602      	mov	r2, r0
 800a302:	4b0b      	ldr	r3, [pc, #44]	@ (800a330 <HAL_RCC_ClockConfig+0x35c>)
 800a304:	6a1b      	ldr	r3, [r3, #32]
 800a306:	f003 030f 	and.w	r3, r3, #15
 800a30a:	490b      	ldr	r1, [pc, #44]	@ (800a338 <HAL_RCC_ClockConfig+0x364>)
 800a30c:	5ccb      	ldrb	r3, [r1, r3]
 800a30e:	fa22 f303 	lsr.w	r3, r2, r3
 800a312:	4a0a      	ldr	r2, [pc, #40]	@ (800a33c <HAL_RCC_ClockConfig+0x368>)
 800a314:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a316:	4b0a      	ldr	r3, [pc, #40]	@ (800a340 <HAL_RCC_ClockConfig+0x36c>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4618      	mov	r0, r3
 800a31c:	f7fb fac8 	bl	80058b0 <HAL_InitTick>
 800a320:	4603      	mov	r3, r0
 800a322:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 800a324:	7afb      	ldrb	r3, [r7, #11]
}
 800a326:	4618      	mov	r0, r3
 800a328:	3710      	adds	r7, #16
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}
 800a32e:	bf00      	nop
 800a330:	44020c00 	.word	0x44020c00
 800a334:	40022000 	.word	0x40022000
 800a338:	080195a8 	.word	0x080195a8
 800a33c:	20000004 	.word	0x20000004
 800a340:	20000024 	.word	0x20000024

0800a344 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a344:	b480      	push	{r7}
 800a346:	b089      	sub	sp, #36	@ 0x24
 800a348:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800a34a:	4b8c      	ldr	r3, [pc, #560]	@ (800a57c <HAL_RCC_GetSysClockFreq+0x238>)
 800a34c:	69db      	ldr	r3, [r3, #28]
 800a34e:	f003 0318 	and.w	r3, r3, #24
 800a352:	2b08      	cmp	r3, #8
 800a354:	d102      	bne.n	800a35c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800a356:	4b8a      	ldr	r3, [pc, #552]	@ (800a580 <HAL_RCC_GetSysClockFreq+0x23c>)
 800a358:	61fb      	str	r3, [r7, #28]
 800a35a:	e107      	b.n	800a56c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a35c:	4b87      	ldr	r3, [pc, #540]	@ (800a57c <HAL_RCC_GetSysClockFreq+0x238>)
 800a35e:	69db      	ldr	r3, [r3, #28]
 800a360:	f003 0318 	and.w	r3, r3, #24
 800a364:	2b00      	cmp	r3, #0
 800a366:	d112      	bne.n	800a38e <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800a368:	4b84      	ldr	r3, [pc, #528]	@ (800a57c <HAL_RCC_GetSysClockFreq+0x238>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f003 0320 	and.w	r3, r3, #32
 800a370:	2b00      	cmp	r3, #0
 800a372:	d009      	beq.n	800a388 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a374:	4b81      	ldr	r3, [pc, #516]	@ (800a57c <HAL_RCC_GetSysClockFreq+0x238>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	08db      	lsrs	r3, r3, #3
 800a37a:	f003 0303 	and.w	r3, r3, #3
 800a37e:	4a81      	ldr	r2, [pc, #516]	@ (800a584 <HAL_RCC_GetSysClockFreq+0x240>)
 800a380:	fa22 f303 	lsr.w	r3, r2, r3
 800a384:	61fb      	str	r3, [r7, #28]
 800a386:	e0f1      	b.n	800a56c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 800a388:	4b7e      	ldr	r3, [pc, #504]	@ (800a584 <HAL_RCC_GetSysClockFreq+0x240>)
 800a38a:	61fb      	str	r3, [r7, #28]
 800a38c:	e0ee      	b.n	800a56c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a38e:	4b7b      	ldr	r3, [pc, #492]	@ (800a57c <HAL_RCC_GetSysClockFreq+0x238>)
 800a390:	69db      	ldr	r3, [r3, #28]
 800a392:	f003 0318 	and.w	r3, r3, #24
 800a396:	2b10      	cmp	r3, #16
 800a398:	d102      	bne.n	800a3a0 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a39a:	4b7b      	ldr	r3, [pc, #492]	@ (800a588 <HAL_RCC_GetSysClockFreq+0x244>)
 800a39c:	61fb      	str	r3, [r7, #28]
 800a39e:	e0e5      	b.n	800a56c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a3a0:	4b76      	ldr	r3, [pc, #472]	@ (800a57c <HAL_RCC_GetSysClockFreq+0x238>)
 800a3a2:	69db      	ldr	r3, [r3, #28]
 800a3a4:	f003 0318 	and.w	r3, r3, #24
 800a3a8:	2b18      	cmp	r3, #24
 800a3aa:	f040 80dd 	bne.w	800a568 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800a3ae:	4b73      	ldr	r3, [pc, #460]	@ (800a57c <HAL_RCC_GetSysClockFreq+0x238>)
 800a3b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3b2:	f003 0303 	and.w	r3, r3, #3
 800a3b6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800a3b8:	4b70      	ldr	r3, [pc, #448]	@ (800a57c <HAL_RCC_GetSysClockFreq+0x238>)
 800a3ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3bc:	0a1b      	lsrs	r3, r3, #8
 800a3be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a3c2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800a3c4:	4b6d      	ldr	r3, [pc, #436]	@ (800a57c <HAL_RCC_GetSysClockFreq+0x238>)
 800a3c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3c8:	091b      	lsrs	r3, r3, #4
 800a3ca:	f003 0301 	and.w	r3, r3, #1
 800a3ce:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800a3d0:	4b6a      	ldr	r3, [pc, #424]	@ (800a57c <HAL_RCC_GetSysClockFreq+0x238>)
 800a3d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 800a3d4:	08db      	lsrs	r3, r3, #3
 800a3d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800a3da:	68fa      	ldr	r2, [r7, #12]
 800a3dc:	fb02 f303 	mul.w	r3, r2, r3
 800a3e0:	ee07 3a90 	vmov	s15, r3
 800a3e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3e8:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	f000 80b7 	beq.w	800a562 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	2b01      	cmp	r3, #1
 800a3f8:	d003      	beq.n	800a402 <HAL_RCC_GetSysClockFreq+0xbe>
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	2b03      	cmp	r3, #3
 800a3fe:	d056      	beq.n	800a4ae <HAL_RCC_GetSysClockFreq+0x16a>
 800a400:	e077      	b.n	800a4f2 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800a402:	4b5e      	ldr	r3, [pc, #376]	@ (800a57c <HAL_RCC_GetSysClockFreq+0x238>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f003 0320 	and.w	r3, r3, #32
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d02d      	beq.n	800a46a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a40e:	4b5b      	ldr	r3, [pc, #364]	@ (800a57c <HAL_RCC_GetSysClockFreq+0x238>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	08db      	lsrs	r3, r3, #3
 800a414:	f003 0303 	and.w	r3, r3, #3
 800a418:	4a5a      	ldr	r2, [pc, #360]	@ (800a584 <HAL_RCC_GetSysClockFreq+0x240>)
 800a41a:	fa22 f303 	lsr.w	r3, r2, r3
 800a41e:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	ee07 3a90 	vmov	s15, r3
 800a426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	ee07 3a90 	vmov	s15, r3
 800a430:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a434:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a438:	4b50      	ldr	r3, [pc, #320]	@ (800a57c <HAL_RCC_GetSysClockFreq+0x238>)
 800a43a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a43c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a440:	ee07 3a90 	vmov	s15, r3
 800a444:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800a448:	ed97 6a02 	vldr	s12, [r7, #8]
 800a44c:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 800a58c <HAL_RCC_GetSysClockFreq+0x248>
 800a450:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a454:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800a458:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a45c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a460:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a464:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 800a468:	e065      	b.n	800a536 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	ee07 3a90 	vmov	s15, r3
 800a470:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a474:	eddf 6a46 	vldr	s13, [pc, #280]	@ 800a590 <HAL_RCC_GetSysClockFreq+0x24c>
 800a478:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a47c:	4b3f      	ldr	r3, [pc, #252]	@ (800a57c <HAL_RCC_GetSysClockFreq+0x238>)
 800a47e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a480:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a484:	ee07 3a90 	vmov	s15, r3
 800a488:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800a48c:	ed97 6a02 	vldr	s12, [r7, #8]
 800a490:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800a58c <HAL_RCC_GetSysClockFreq+0x248>
 800a494:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a498:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800a49c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a4a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a4a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4a8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800a4ac:	e043      	b.n	800a536 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	ee07 3a90 	vmov	s15, r3
 800a4b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4b8:	eddf 6a36 	vldr	s13, [pc, #216]	@ 800a594 <HAL_RCC_GetSysClockFreq+0x250>
 800a4bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4c0:	4b2e      	ldr	r3, [pc, #184]	@ (800a57c <HAL_RCC_GetSysClockFreq+0x238>)
 800a4c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4c8:	ee07 3a90 	vmov	s15, r3
 800a4cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800a4d0:	ed97 6a02 	vldr	s12, [r7, #8]
 800a4d4:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 800a58c <HAL_RCC_GetSysClockFreq+0x248>
 800a4d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a4dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800a4e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a4e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a4e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4ec:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 800a4f0:	e021      	b.n	800a536 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	ee07 3a90 	vmov	s15, r3
 800a4f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4fc:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800a598 <HAL_RCC_GetSysClockFreq+0x254>
 800a500:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a504:	4b1d      	ldr	r3, [pc, #116]	@ (800a57c <HAL_RCC_GetSysClockFreq+0x238>)
 800a506:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a50c:	ee07 3a90 	vmov	s15, r3
 800a510:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800a514:	ed97 6a02 	vldr	s12, [r7, #8]
 800a518:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 800a58c <HAL_RCC_GetSysClockFreq+0x248>
 800a51c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a520:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800a524:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a528:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a52c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a530:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800a534:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800a536:	4b11      	ldr	r3, [pc, #68]	@ (800a57c <HAL_RCC_GetSysClockFreq+0x238>)
 800a538:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a53a:	0a5b      	lsrs	r3, r3, #9
 800a53c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a540:	3301      	adds	r3, #1
 800a542:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	ee07 3a90 	vmov	s15, r3
 800a54a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a54e:	edd7 6a06 	vldr	s13, [r7, #24]
 800a552:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a556:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a55a:	ee17 3a90 	vmov	r3, s15
 800a55e:	61fb      	str	r3, [r7, #28]
 800a560:	e004      	b.n	800a56c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 800a562:	2300      	movs	r3, #0
 800a564:	61fb      	str	r3, [r7, #28]
 800a566:	e001      	b.n	800a56c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 800a568:	4b06      	ldr	r3, [pc, #24]	@ (800a584 <HAL_RCC_GetSysClockFreq+0x240>)
 800a56a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 800a56c:	69fb      	ldr	r3, [r7, #28]
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3724      	adds	r7, #36	@ 0x24
 800a572:	46bd      	mov	sp, r7
 800a574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a578:	4770      	bx	lr
 800a57a:	bf00      	nop
 800a57c:	44020c00 	.word	0x44020c00
 800a580:	003d0900 	.word	0x003d0900
 800a584:	03d09000 	.word	0x03d09000
 800a588:	007a1200 	.word	0x007a1200
 800a58c:	46000000 	.word	0x46000000
 800a590:	4c742400 	.word	0x4c742400
 800a594:	4af42400 	.word	0x4af42400
 800a598:	4a742400 	.word	0x4a742400

0800a59c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800a5a0:	f7ff fed0 	bl	800a344 <HAL_RCC_GetSysClockFreq>
 800a5a4:	4602      	mov	r2, r0
 800a5a6:	4b08      	ldr	r3, [pc, #32]	@ (800a5c8 <HAL_RCC_GetHCLKFreq+0x2c>)
 800a5a8:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800a5aa:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800a5ae:	4907      	ldr	r1, [pc, #28]	@ (800a5cc <HAL_RCC_GetHCLKFreq+0x30>)
 800a5b0:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800a5b2:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800a5b6:	fa22 f303 	lsr.w	r3, r2, r3
 800a5ba:	4a05      	ldr	r2, [pc, #20]	@ (800a5d0 <HAL_RCC_GetHCLKFreq+0x34>)
 800a5bc:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 800a5be:	4b04      	ldr	r3, [pc, #16]	@ (800a5d0 <HAL_RCC_GetHCLKFreq+0x34>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	bd80      	pop	{r7, pc}
 800a5c6:	bf00      	nop
 800a5c8:	44020c00 	.word	0x44020c00
 800a5cc:	080195a8 	.word	0x080195a8
 800a5d0:	20000004 	.word	0x20000004

0800a5d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 800a5d8:	f7ff ffe0 	bl	800a59c <HAL_RCC_GetHCLKFreq>
 800a5dc:	4602      	mov	r2, r0
 800a5de:	4b06      	ldr	r3, [pc, #24]	@ (800a5f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a5e0:	6a1b      	ldr	r3, [r3, #32]
 800a5e2:	091b      	lsrs	r3, r3, #4
 800a5e4:	f003 0307 	and.w	r3, r3, #7
 800a5e8:	4904      	ldr	r1, [pc, #16]	@ (800a5fc <HAL_RCC_GetPCLK1Freq+0x28>)
 800a5ea:	5ccb      	ldrb	r3, [r1, r3]
 800a5ec:	f003 031f 	and.w	r3, r3, #31
 800a5f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	bd80      	pop	{r7, pc}
 800a5f8:	44020c00 	.word	0x44020c00
 800a5fc:	080195b8 	.word	0x080195b8

0800a600 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 800a604:	f7ff ffca 	bl	800a59c <HAL_RCC_GetHCLKFreq>
 800a608:	4602      	mov	r2, r0
 800a60a:	4b06      	ldr	r3, [pc, #24]	@ (800a624 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a60c:	6a1b      	ldr	r3, [r3, #32]
 800a60e:	0a1b      	lsrs	r3, r3, #8
 800a610:	f003 0307 	and.w	r3, r3, #7
 800a614:	4904      	ldr	r1, [pc, #16]	@ (800a628 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a616:	5ccb      	ldrb	r3, [r1, r3]
 800a618:	f003 031f 	and.w	r3, r3, #31
 800a61c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a620:	4618      	mov	r0, r3
 800a622:	bd80      	pop	{r7, pc}
 800a624:	44020c00 	.word	0x44020c00
 800a628:	080195b8 	.word	0x080195b8

0800a62c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 800a630:	f7ff ffb4 	bl	800a59c <HAL_RCC_GetHCLKFreq>
 800a634:	4602      	mov	r2, r0
 800a636:	4b06      	ldr	r3, [pc, #24]	@ (800a650 <HAL_RCC_GetPCLK3Freq+0x24>)
 800a638:	6a1b      	ldr	r3, [r3, #32]
 800a63a:	0b1b      	lsrs	r3, r3, #12
 800a63c:	f003 0307 	and.w	r3, r3, #7
 800a640:	4904      	ldr	r1, [pc, #16]	@ (800a654 <HAL_RCC_GetPCLK3Freq+0x28>)
 800a642:	5ccb      	ldrb	r3, [r1, r3]
 800a644:	f003 031f 	and.w	r3, r3, #31
 800a648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	bd80      	pop	{r7, pc}
 800a650:	44020c00 	.word	0x44020c00
 800a654:	080195b8 	.word	0x080195b8

0800a658 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800a658:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a65c:	b0d8      	sub	sp, #352	@ 0x160
 800a65e:	af00      	add	r7, sp, #0
 800a660:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a664:	2300      	movs	r3, #0
 800a666:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a66a:	2300      	movs	r3, #0
 800a66c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a670:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a678:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 800a67c:	2500      	movs	r5, #0
 800a67e:	ea54 0305 	orrs.w	r3, r4, r5
 800a682:	d00b      	beq.n	800a69c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 800a684:	4bcd      	ldr	r3, [pc, #820]	@ (800a9bc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800a686:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a68a:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 800a68e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a694:	4ac9      	ldr	r2, [pc, #804]	@ (800a9bc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800a696:	430b      	orrs	r3, r1
 800a698:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a69c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a4:	f002 0801 	and.w	r8, r2, #1
 800a6a8:	f04f 0900 	mov.w	r9, #0
 800a6ac:	ea58 0309 	orrs.w	r3, r8, r9
 800a6b0:	d042      	beq.n	800a738 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 800a6b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a6b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a6b8:	2b05      	cmp	r3, #5
 800a6ba:	d823      	bhi.n	800a704 <HAL_RCCEx_PeriphCLKConfig+0xac>
 800a6bc:	a201      	add	r2, pc, #4	@ (adr r2, 800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800a6be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6c2:	bf00      	nop
 800a6c4:	0800a70d 	.word	0x0800a70d
 800a6c8:	0800a6dd 	.word	0x0800a6dd
 800a6cc:	0800a6f1 	.word	0x0800a6f1
 800a6d0:	0800a70d 	.word	0x0800a70d
 800a6d4:	0800a70d 	.word	0x0800a70d
 800a6d8:	0800a70d 	.word	0x0800a70d
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a6dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a6e0:	3308      	adds	r3, #8
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f004 fee0 	bl	800f4a8 <RCCEx_PLL2_Config>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800a6ee:	e00e      	b.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a6f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a6f4:	3330      	adds	r3, #48	@ 0x30
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f004 ff6e 	bl	800f5d8 <RCCEx_PLL3_Config>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800a702:	e004      	b.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a704:	2301      	movs	r3, #1
 800a706:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a70a:	e000      	b.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 800a70c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a70e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a712:	2b00      	cmp	r3, #0
 800a714:	d10c      	bne.n	800a730 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800a716:	4ba9      	ldr	r3, [pc, #676]	@ (800a9bc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800a718:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a71c:	f023 0107 	bic.w	r1, r3, #7
 800a720:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a724:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a726:	4aa5      	ldr	r2, [pc, #660]	@ (800a9bc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800a728:	430b      	orrs	r3, r1
 800a72a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a72e:	e003      	b.n	800a738 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a730:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a734:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a738:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a740:	f002 0a02 	and.w	sl, r2, #2
 800a744:	f04f 0b00 	mov.w	fp, #0
 800a748:	ea5a 030b 	orrs.w	r3, sl, fp
 800a74c:	f000 8088 	beq.w	800a860 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 800a750:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a754:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a756:	2b28      	cmp	r3, #40	@ 0x28
 800a758:	d868      	bhi.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800a75a:	a201      	add	r2, pc, #4	@ (adr r2, 800a760 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800a75c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a760:	0800a835 	.word	0x0800a835
 800a764:	0800a82d 	.word	0x0800a82d
 800a768:	0800a82d 	.word	0x0800a82d
 800a76c:	0800a82d 	.word	0x0800a82d
 800a770:	0800a82d 	.word	0x0800a82d
 800a774:	0800a82d 	.word	0x0800a82d
 800a778:	0800a82d 	.word	0x0800a82d
 800a77c:	0800a82d 	.word	0x0800a82d
 800a780:	0800a805 	.word	0x0800a805
 800a784:	0800a82d 	.word	0x0800a82d
 800a788:	0800a82d 	.word	0x0800a82d
 800a78c:	0800a82d 	.word	0x0800a82d
 800a790:	0800a82d 	.word	0x0800a82d
 800a794:	0800a82d 	.word	0x0800a82d
 800a798:	0800a82d 	.word	0x0800a82d
 800a79c:	0800a82d 	.word	0x0800a82d
 800a7a0:	0800a819 	.word	0x0800a819
 800a7a4:	0800a82d 	.word	0x0800a82d
 800a7a8:	0800a82d 	.word	0x0800a82d
 800a7ac:	0800a82d 	.word	0x0800a82d
 800a7b0:	0800a82d 	.word	0x0800a82d
 800a7b4:	0800a82d 	.word	0x0800a82d
 800a7b8:	0800a82d 	.word	0x0800a82d
 800a7bc:	0800a82d 	.word	0x0800a82d
 800a7c0:	0800a835 	.word	0x0800a835
 800a7c4:	0800a82d 	.word	0x0800a82d
 800a7c8:	0800a82d 	.word	0x0800a82d
 800a7cc:	0800a82d 	.word	0x0800a82d
 800a7d0:	0800a82d 	.word	0x0800a82d
 800a7d4:	0800a82d 	.word	0x0800a82d
 800a7d8:	0800a82d 	.word	0x0800a82d
 800a7dc:	0800a82d 	.word	0x0800a82d
 800a7e0:	0800a835 	.word	0x0800a835
 800a7e4:	0800a82d 	.word	0x0800a82d
 800a7e8:	0800a82d 	.word	0x0800a82d
 800a7ec:	0800a82d 	.word	0x0800a82d
 800a7f0:	0800a82d 	.word	0x0800a82d
 800a7f4:	0800a82d 	.word	0x0800a82d
 800a7f8:	0800a82d 	.word	0x0800a82d
 800a7fc:	0800a82d 	.word	0x0800a82d
 800a800:	0800a835 	.word	0x0800a835
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a804:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a808:	3308      	adds	r3, #8
 800a80a:	4618      	mov	r0, r3
 800a80c:	f004 fe4c 	bl	800f4a8 <RCCEx_PLL2_Config>
 800a810:	4603      	mov	r3, r0
 800a812:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800a816:	e00e      	b.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a818:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a81c:	3330      	adds	r3, #48	@ 0x30
 800a81e:	4618      	mov	r0, r3
 800a820:	f004 feda 	bl	800f5d8 <RCCEx_PLL3_Config>
 800a824:	4603      	mov	r3, r0
 800a826:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800a82a:	e004      	b.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a82c:	2301      	movs	r3, #1
 800a82e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a832:	e000      	b.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 800a834:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a836:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d10c      	bne.n	800a858 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800a83e:	4b5f      	ldr	r3, [pc, #380]	@ (800a9bc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800a840:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a844:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800a848:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a84c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a84e:	4a5b      	ldr	r2, [pc, #364]	@ (800a9bc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800a850:	430b      	orrs	r3, r1
 800a852:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a856:	e003      	b.n	800a860 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a858:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a85c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a860:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a868:	f002 0304 	and.w	r3, r2, #4
 800a86c:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 800a870:	2300      	movs	r3, #0
 800a872:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800a876:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 800a87a:	460b      	mov	r3, r1
 800a87c:	4313      	orrs	r3, r2
 800a87e:	d04e      	beq.n	800a91e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 800a880:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a884:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a886:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800a88a:	d02c      	beq.n	800a8e6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 800a88c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800a890:	d825      	bhi.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0x286>
 800a892:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a896:	d028      	beq.n	800a8ea <HAL_RCCEx_PeriphCLKConfig+0x292>
 800a898:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a89c:	d81f      	bhi.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0x286>
 800a89e:	2bc0      	cmp	r3, #192	@ 0xc0
 800a8a0:	d025      	beq.n	800a8ee <HAL_RCCEx_PeriphCLKConfig+0x296>
 800a8a2:	2bc0      	cmp	r3, #192	@ 0xc0
 800a8a4:	d81b      	bhi.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0x286>
 800a8a6:	2b80      	cmp	r3, #128	@ 0x80
 800a8a8:	d00f      	beq.n	800a8ca <HAL_RCCEx_PeriphCLKConfig+0x272>
 800a8aa:	2b80      	cmp	r3, #128	@ 0x80
 800a8ac:	d817      	bhi.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0x286>
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d01f      	beq.n	800a8f2 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 800a8b2:	2b40      	cmp	r3, #64	@ 0x40
 800a8b4:	d113      	bne.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a8b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a8ba:	3308      	adds	r3, #8
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f004 fdf3 	bl	800f4a8 <RCCEx_PLL2_Config>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 800a8c8:	e014      	b.n	800a8f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a8ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a8ce:	3330      	adds	r3, #48	@ 0x30
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f004 fe81 	bl	800f5d8 <RCCEx_PLL3_Config>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 800a8dc:	e00a      	b.n	800a8f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8de:	2301      	movs	r3, #1
 800a8e0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a8e4:	e006      	b.n	800a8f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800a8e6:	bf00      	nop
 800a8e8:	e004      	b.n	800a8f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800a8ea:	bf00      	nop
 800a8ec:	e002      	b.n	800a8f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800a8ee:	bf00      	nop
 800a8f0:	e000      	b.n	800a8f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800a8f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8f4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d10c      	bne.n	800a916 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800a8fc:	4b2f      	ldr	r3, [pc, #188]	@ (800a9bc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800a8fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a902:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800a906:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a90a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a90c:	4a2b      	ldr	r2, [pc, #172]	@ (800a9bc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800a90e:	430b      	orrs	r3, r1
 800a910:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a914:	e003      	b.n	800a91e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a916:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a91a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a91e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a926:	f002 0308 	and.w	r3, r2, #8
 800a92a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800a92e:	2300      	movs	r3, #0
 800a930:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800a934:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 800a938:	460b      	mov	r3, r1
 800a93a:	4313      	orrs	r3, r2
 800a93c:	d056      	beq.n	800a9ec <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 800a93e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a942:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a944:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800a948:	d031      	beq.n	800a9ae <HAL_RCCEx_PeriphCLKConfig+0x356>
 800a94a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800a94e:	d82a      	bhi.n	800a9a6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800a950:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a954:	d02d      	beq.n	800a9b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800a956:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a95a:	d824      	bhi.n	800a9a6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800a95c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a960:	d029      	beq.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800a962:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a966:	d81e      	bhi.n	800a9a6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800a968:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a96c:	d011      	beq.n	800a992 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800a96e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a972:	d818      	bhi.n	800a9a6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800a974:	2b00      	cmp	r3, #0
 800a976:	d023      	beq.n	800a9c0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800a978:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a97c:	d113      	bne.n	800a9a6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a97e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a982:	3308      	adds	r3, #8
 800a984:	4618      	mov	r0, r3
 800a986:	f004 fd8f 	bl	800f4a8 <RCCEx_PLL2_Config>
 800a98a:	4603      	mov	r3, r0
 800a98c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 800a990:	e017      	b.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a992:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a996:	3330      	adds	r3, #48	@ 0x30
 800a998:	4618      	mov	r0, r3
 800a99a:	f004 fe1d 	bl	800f5d8 <RCCEx_PLL3_Config>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 800a9a4:	e00d      	b.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a9ac:	e009      	b.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800a9ae:	bf00      	nop
 800a9b0:	e007      	b.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800a9b2:	bf00      	nop
 800a9b4:	e005      	b.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800a9b6:	bf00      	nop
 800a9b8:	e003      	b.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800a9ba:	bf00      	nop
 800a9bc:	44020c00 	.word	0x44020c00
        break;
 800a9c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9c2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d10c      	bne.n	800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800a9ca:	4bbb      	ldr	r3, [pc, #748]	@ (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800a9cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a9d0:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800a9d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a9d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a9da:	4ab7      	ldr	r2, [pc, #732]	@ (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800a9dc:	430b      	orrs	r3, r1
 800a9de:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a9e2:	e003      	b.n	800a9ec <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9e4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a9e8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a9ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f4:	f002 0310 	and.w	r3, r2, #16
 800a9f8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800aa02:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 800aa06:	460b      	mov	r3, r1
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	d053      	beq.n	800aab4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 800aa0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aa10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa12:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800aa16:	d031      	beq.n	800aa7c <HAL_RCCEx_PeriphCLKConfig+0x424>
 800aa18:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800aa1c:	d82a      	bhi.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800aa1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800aa22:	d02d      	beq.n	800aa80 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800aa24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800aa28:	d824      	bhi.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800aa2a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800aa2e:	d029      	beq.n	800aa84 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800aa30:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800aa34:	d81e      	bhi.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800aa36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa3a:	d011      	beq.n	800aa60 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800aa3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa40:	d818      	bhi.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d020      	beq.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0x430>
 800aa46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa4a:	d113      	bne.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800aa4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aa50:	3308      	adds	r3, #8
 800aa52:	4618      	mov	r0, r3
 800aa54:	f004 fd28 	bl	800f4a8 <RCCEx_PLL2_Config>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800aa5e:	e014      	b.n	800aa8a <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800aa60:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aa64:	3330      	adds	r3, #48	@ 0x30
 800aa66:	4618      	mov	r0, r3
 800aa68:	f004 fdb6 	bl	800f5d8 <RCCEx_PLL3_Config>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800aa72:	e00a      	b.n	800aa8a <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa74:	2301      	movs	r3, #1
 800aa76:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800aa7a:	e006      	b.n	800aa8a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800aa7c:	bf00      	nop
 800aa7e:	e004      	b.n	800aa8a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800aa80:	bf00      	nop
 800aa82:	e002      	b.n	800aa8a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800aa84:	bf00      	nop
 800aa86:	e000      	b.n	800aa8a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800aa88:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa8a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d10c      	bne.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800aa92:	4b89      	ldr	r3, [pc, #548]	@ (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800aa94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800aa98:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800aa9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aaa0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aaa2:	4a85      	ldr	r2, [pc, #532]	@ (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800aaa4:	430b      	orrs	r3, r1
 800aaa6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800aaaa:	e003      	b.n	800aab4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aaac:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800aab0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800aab4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aabc:	f002 0320 	and.w	r3, r2, #32
 800aac0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800aac4:	2300      	movs	r3, #0
 800aac6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800aaca:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 800aace:	460b      	mov	r3, r1
 800aad0:	4313      	orrs	r3, r2
 800aad2:	d053      	beq.n	800ab7c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 800aad4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aada:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800aade:	d031      	beq.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 800aae0:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800aae4:	d82a      	bhi.n	800ab3c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800aae6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aaea:	d02d      	beq.n	800ab48 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800aaec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aaf0:	d824      	bhi.n	800ab3c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800aaf2:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800aaf6:	d029      	beq.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800aaf8:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800aafc:	d81e      	bhi.n	800ab3c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800aafe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab02:	d011      	beq.n	800ab28 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800ab04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab08:	d818      	bhi.n	800ab3c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d020      	beq.n	800ab50 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800ab0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ab12:	d113      	bne.n	800ab3c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ab14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ab18:	3308      	adds	r3, #8
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f004 fcc4 	bl	800f4a8 <RCCEx_PLL2_Config>
 800ab20:	4603      	mov	r3, r0
 800ab22:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800ab26:	e014      	b.n	800ab52 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ab28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ab2c:	3330      	adds	r3, #48	@ 0x30
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f004 fd52 	bl	800f5d8 <RCCEx_PLL3_Config>
 800ab34:	4603      	mov	r3, r0
 800ab36:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800ab3a:	e00a      	b.n	800ab52 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800ab42:	e006      	b.n	800ab52 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800ab44:	bf00      	nop
 800ab46:	e004      	b.n	800ab52 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800ab48:	bf00      	nop
 800ab4a:	e002      	b.n	800ab52 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800ab4c:	bf00      	nop
 800ab4e:	e000      	b.n	800ab52 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800ab50:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab52:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d10c      	bne.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800ab5a:	4b57      	ldr	r3, [pc, #348]	@ (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800ab5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ab60:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 800ab64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ab68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab6a:	4a53      	ldr	r2, [pc, #332]	@ (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800ab6c:	430b      	orrs	r3, r1
 800ab6e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800ab72:	e003      	b.n	800ab7c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab74:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ab78:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800ab7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ab80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab84:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800ab88:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800ab92:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 800ab96:	460b      	mov	r3, r1
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	d053      	beq.n	800ac44 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 800ab9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aba0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aba2:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800aba6:	d031      	beq.n	800ac0c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 800aba8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800abac:	d82a      	bhi.n	800ac04 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800abae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800abb2:	d02d      	beq.n	800ac10 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 800abb4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800abb8:	d824      	bhi.n	800ac04 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800abba:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800abbe:	d029      	beq.n	800ac14 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800abc0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800abc4:	d81e      	bhi.n	800ac04 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800abc6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800abca:	d011      	beq.n	800abf0 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800abcc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800abd0:	d818      	bhi.n	800ac04 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d020      	beq.n	800ac18 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800abd6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800abda:	d113      	bne.n	800ac04 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800abdc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800abe0:	3308      	adds	r3, #8
 800abe2:	4618      	mov	r0, r3
 800abe4:	f004 fc60 	bl	800f4a8 <RCCEx_PLL2_Config>
 800abe8:	4603      	mov	r3, r0
 800abea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800abee:	e014      	b.n	800ac1a <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800abf0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800abf4:	3330      	adds	r3, #48	@ 0x30
 800abf6:	4618      	mov	r0, r3
 800abf8:	f004 fcee 	bl	800f5d8 <RCCEx_PLL3_Config>
 800abfc:	4603      	mov	r3, r0
 800abfe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800ac02:	e00a      	b.n	800ac1a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac04:	2301      	movs	r3, #1
 800ac06:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800ac0a:	e006      	b.n	800ac1a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800ac0c:	bf00      	nop
 800ac0e:	e004      	b.n	800ac1a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800ac10:	bf00      	nop
 800ac12:	e002      	b.n	800ac1a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800ac14:	bf00      	nop
 800ac16:	e000      	b.n	800ac1a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800ac18:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac1a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d10c      	bne.n	800ac3c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 800ac22:	4b25      	ldr	r3, [pc, #148]	@ (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800ac24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ac28:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 800ac2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ac30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac32:	4a21      	ldr	r2, [pc, #132]	@ (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800ac34:	430b      	orrs	r3, r1
 800ac36:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800ac3a:	e003      	b.n	800ac44 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac3c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ac40:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800ac44:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ac48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800ac50:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800ac54:	2300      	movs	r3, #0
 800ac56:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800ac5a:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 800ac5e:	460b      	mov	r3, r1
 800ac60:	4313      	orrs	r3, r2
 800ac62:	d055      	beq.n	800ad10 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 800ac64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ac68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ac6a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800ac6e:	d033      	beq.n	800acd8 <HAL_RCCEx_PeriphCLKConfig+0x680>
 800ac70:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800ac74:	d82c      	bhi.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800ac76:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ac7a:	d02f      	beq.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0x684>
 800ac7c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ac80:	d826      	bhi.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800ac82:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ac86:	d02b      	beq.n	800ace0 <HAL_RCCEx_PeriphCLKConfig+0x688>
 800ac88:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ac8c:	d820      	bhi.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800ac8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ac92:	d013      	beq.n	800acbc <HAL_RCCEx_PeriphCLKConfig+0x664>
 800ac94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ac98:	d81a      	bhi.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d022      	beq.n	800ace4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 800ac9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800aca2:	d115      	bne.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800aca4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aca8:	3308      	adds	r3, #8
 800acaa:	4618      	mov	r0, r3
 800acac:	f004 fbfc 	bl	800f4a8 <RCCEx_PLL2_Config>
 800acb0:	4603      	mov	r3, r0
 800acb2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800acb6:	e016      	b.n	800ace6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 800acb8:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800acbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800acc0:	3330      	adds	r3, #48	@ 0x30
 800acc2:	4618      	mov	r0, r3
 800acc4:	f004 fc88 	bl	800f5d8 <RCCEx_PLL3_Config>
 800acc8:	4603      	mov	r3, r0
 800acca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800acce:	e00a      	b.n	800ace6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800acd0:	2301      	movs	r3, #1
 800acd2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800acd6:	e006      	b.n	800ace6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800acd8:	bf00      	nop
 800acda:	e004      	b.n	800ace6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800acdc:	bf00      	nop
 800acde:	e002      	b.n	800ace6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800ace0:	bf00      	nop
 800ace2:	e000      	b.n	800ace6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800ace4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ace6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800acea:	2b00      	cmp	r3, #0
 800acec:	d10c      	bne.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 800acee:	4bbb      	ldr	r3, [pc, #748]	@ (800afdc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800acf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800acf4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800acf8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800acfc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800acfe:	4ab7      	ldr	r2, [pc, #732]	@ (800afdc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800ad00:	430b      	orrs	r3, r1
 800ad02:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800ad06:	e003      	b.n	800ad10 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad08:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ad0c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 800ad10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ad14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad18:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800ad1c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800ad20:	2300      	movs	r3, #0
 800ad22:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800ad26:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 800ad2a:	460b      	mov	r3, r1
 800ad2c:	4313      	orrs	r3, r2
 800ad2e:	d053      	beq.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 800ad30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ad34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ad36:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800ad3a:	d031      	beq.n	800ada0 <HAL_RCCEx_PeriphCLKConfig+0x748>
 800ad3c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800ad40:	d82a      	bhi.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800ad42:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ad46:	d02d      	beq.n	800ada4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 800ad48:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ad4c:	d824      	bhi.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800ad4e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ad52:	d029      	beq.n	800ada8 <HAL_RCCEx_PeriphCLKConfig+0x750>
 800ad54:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ad58:	d81e      	bhi.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800ad5a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ad5e:	d011      	beq.n	800ad84 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 800ad60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ad64:	d818      	bhi.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d020      	beq.n	800adac <HAL_RCCEx_PeriphCLKConfig+0x754>
 800ad6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ad6e:	d113      	bne.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ad70:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ad74:	3308      	adds	r3, #8
 800ad76:	4618      	mov	r0, r3
 800ad78:	f004 fb96 	bl	800f4a8 <RCCEx_PLL2_Config>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800ad82:	e014      	b.n	800adae <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ad84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ad88:	3330      	adds	r3, #48	@ 0x30
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f004 fc24 	bl	800f5d8 <RCCEx_PLL3_Config>
 800ad90:	4603      	mov	r3, r0
 800ad92:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800ad96:	e00a      	b.n	800adae <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad98:	2301      	movs	r3, #1
 800ad9a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800ad9e:	e006      	b.n	800adae <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800ada0:	bf00      	nop
 800ada2:	e004      	b.n	800adae <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800ada4:	bf00      	nop
 800ada6:	e002      	b.n	800adae <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800ada8:	bf00      	nop
 800adaa:	e000      	b.n	800adae <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800adac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800adae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d10c      	bne.n	800add0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 800adb6:	4b89      	ldr	r3, [pc, #548]	@ (800afdc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800adb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800adbc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800adc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800adc4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800adc6:	4a85      	ldr	r2, [pc, #532]	@ (800afdc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800adc8:	430b      	orrs	r3, r1
 800adca:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800adce:	e003      	b.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800add0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800add4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 800add8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800addc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade0:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800ade4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800ade8:	2300      	movs	r3, #0
 800adea:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800adee:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800adf2:	460b      	mov	r3, r1
 800adf4:	4313      	orrs	r3, r2
 800adf6:	d055      	beq.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 800adf8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800adfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae00:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800ae04:	d031      	beq.n	800ae6a <HAL_RCCEx_PeriphCLKConfig+0x812>
 800ae06:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800ae0a:	d82a      	bhi.n	800ae62 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800ae0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae10:	d02d      	beq.n	800ae6e <HAL_RCCEx_PeriphCLKConfig+0x816>
 800ae12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae16:	d824      	bhi.n	800ae62 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800ae18:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800ae1c:	d029      	beq.n	800ae72 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800ae1e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800ae22:	d81e      	bhi.n	800ae62 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800ae24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae28:	d011      	beq.n	800ae4e <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 800ae2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae2e:	d818      	bhi.n	800ae62 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d020      	beq.n	800ae76 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800ae34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ae38:	d113      	bne.n	800ae62 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ae3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ae3e:	3308      	adds	r3, #8
 800ae40:	4618      	mov	r0, r3
 800ae42:	f004 fb31 	bl	800f4a8 <RCCEx_PLL2_Config>
 800ae46:	4603      	mov	r3, r0
 800ae48:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 800ae4c:	e014      	b.n	800ae78 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ae4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ae52:	3330      	adds	r3, #48	@ 0x30
 800ae54:	4618      	mov	r0, r3
 800ae56:	f004 fbbf 	bl	800f5d8 <RCCEx_PLL3_Config>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 800ae60:	e00a      	b.n	800ae78 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae62:	2301      	movs	r3, #1
 800ae64:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800ae68:	e006      	b.n	800ae78 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800ae6a:	bf00      	nop
 800ae6c:	e004      	b.n	800ae78 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800ae6e:	bf00      	nop
 800ae70:	e002      	b.n	800ae78 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800ae72:	bf00      	nop
 800ae74:	e000      	b.n	800ae78 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800ae76:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae78:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d10d      	bne.n	800ae9c <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 800ae80:	4b56      	ldr	r3, [pc, #344]	@ (800afdc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800ae82:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ae86:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 800ae8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ae8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae92:	4a52      	ldr	r2, [pc, #328]	@ (800afdc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800ae94:	430b      	orrs	r3, r1
 800ae96:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800ae9a:	e003      	b.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae9c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800aea0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 800aea4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeac:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800aeb0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800aeba:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800aebe:	460b      	mov	r3, r1
 800aec0:	4313      	orrs	r3, r2
 800aec2:	d044      	beq.n	800af4e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 800aec4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aecc:	2b05      	cmp	r3, #5
 800aece:	d823      	bhi.n	800af18 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800aed0:	a201      	add	r2, pc, #4	@ (adr r2, 800aed8 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800aed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aed6:	bf00      	nop
 800aed8:	0800af21 	.word	0x0800af21
 800aedc:	0800aef1 	.word	0x0800aef1
 800aee0:	0800af05 	.word	0x0800af05
 800aee4:	0800af21 	.word	0x0800af21
 800aee8:	0800af21 	.word	0x0800af21
 800aeec:	0800af21 	.word	0x0800af21
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800aef0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aef4:	3308      	adds	r3, #8
 800aef6:	4618      	mov	r0, r3
 800aef8:	f004 fad6 	bl	800f4a8 <RCCEx_PLL2_Config>
 800aefc:	4603      	mov	r3, r0
 800aefe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800af02:	e00e      	b.n	800af22 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800af04:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800af08:	3330      	adds	r3, #48	@ 0x30
 800af0a:	4618      	mov	r0, r3
 800af0c:	f004 fb64 	bl	800f5d8 <RCCEx_PLL3_Config>
 800af10:	4603      	mov	r3, r0
 800af12:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800af16:	e004      	b.n	800af22 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af18:	2301      	movs	r3, #1
 800af1a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800af1e:	e000      	b.n	800af22 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 800af20:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af22:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800af26:	2b00      	cmp	r3, #0
 800af28:	d10d      	bne.n	800af46 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 800af2a:	4b2c      	ldr	r3, [pc, #176]	@ (800afdc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800af2c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800af30:	f023 0107 	bic.w	r1, r3, #7
 800af34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800af38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af3c:	4a27      	ldr	r2, [pc, #156]	@ (800afdc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800af3e:	430b      	orrs	r3, r1
 800af40:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800af44:	e003      	b.n	800af4e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af46:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800af4a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 800af4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800af52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af56:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800af5a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800af5e:	2300      	movs	r3, #0
 800af60:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800af64:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800af68:	460b      	mov	r3, r1
 800af6a:	4313      	orrs	r3, r2
 800af6c:	d04f      	beq.n	800b00e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 800af6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800af72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af76:	2b50      	cmp	r3, #80	@ 0x50
 800af78:	d029      	beq.n	800afce <HAL_RCCEx_PeriphCLKConfig+0x976>
 800af7a:	2b50      	cmp	r3, #80	@ 0x50
 800af7c:	d823      	bhi.n	800afc6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800af7e:	2b40      	cmp	r3, #64	@ 0x40
 800af80:	d027      	beq.n	800afd2 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800af82:	2b40      	cmp	r3, #64	@ 0x40
 800af84:	d81f      	bhi.n	800afc6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800af86:	2b30      	cmp	r3, #48	@ 0x30
 800af88:	d025      	beq.n	800afd6 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800af8a:	2b30      	cmp	r3, #48	@ 0x30
 800af8c:	d81b      	bhi.n	800afc6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800af8e:	2b20      	cmp	r3, #32
 800af90:	d00f      	beq.n	800afb2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800af92:	2b20      	cmp	r3, #32
 800af94:	d817      	bhi.n	800afc6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800af96:	2b00      	cmp	r3, #0
 800af98:	d022      	beq.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800af9a:	2b10      	cmp	r3, #16
 800af9c:	d113      	bne.n	800afc6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800af9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800afa2:	3308      	adds	r3, #8
 800afa4:	4618      	mov	r0, r3
 800afa6:	f004 fa7f 	bl	800f4a8 <RCCEx_PLL2_Config>
 800afaa:	4603      	mov	r3, r0
 800afac:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 800afb0:	e017      	b.n	800afe2 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800afb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800afb6:	3330      	adds	r3, #48	@ 0x30
 800afb8:	4618      	mov	r0, r3
 800afba:	f004 fb0d 	bl	800f5d8 <RCCEx_PLL3_Config>
 800afbe:	4603      	mov	r3, r0
 800afc0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 800afc4:	e00d      	b.n	800afe2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800afc6:	2301      	movs	r3, #1
 800afc8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800afcc:	e009      	b.n	800afe2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800afce:	bf00      	nop
 800afd0:	e007      	b.n	800afe2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800afd2:	bf00      	nop
 800afd4:	e005      	b.n	800afe2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800afd6:	bf00      	nop
 800afd8:	e003      	b.n	800afe2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 800afda:	bf00      	nop
 800afdc:	44020c00 	.word	0x44020c00
        break;
 800afe0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800afe2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d10d      	bne.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 800afea:	4baf      	ldr	r3, [pc, #700]	@ (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800afec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800aff0:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800aff4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800affc:	4aaa      	ldr	r2, [pc, #680]	@ (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800affe:	430b      	orrs	r3, r1
 800b000:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800b004:	e003      	b.n	800b00e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b006:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b00a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b00e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b016:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800b01a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b01e:	2300      	movs	r3, #0
 800b020:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b024:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800b028:	460b      	mov	r3, r1
 800b02a:	4313      	orrs	r3, r2
 800b02c:	d055      	beq.n	800b0da <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800b02e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b032:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b036:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800b03a:	d031      	beq.n	800b0a0 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 800b03c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800b040:	d82a      	bhi.n	800b098 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800b042:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b046:	d02d      	beq.n	800b0a4 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 800b048:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b04c:	d824      	bhi.n	800b098 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800b04e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b052:	d029      	beq.n	800b0a8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 800b054:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b058:	d81e      	bhi.n	800b098 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800b05a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b05e:	d011      	beq.n	800b084 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 800b060:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b064:	d818      	bhi.n	800b098 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800b066:	2b00      	cmp	r3, #0
 800b068:	d020      	beq.n	800b0ac <HAL_RCCEx_PeriphCLKConfig+0xa54>
 800b06a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b06e:	d113      	bne.n	800b098 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b070:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b074:	3308      	adds	r3, #8
 800b076:	4618      	mov	r0, r3
 800b078:	f004 fa16 	bl	800f4a8 <RCCEx_PLL2_Config>
 800b07c:	4603      	mov	r3, r0
 800b07e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800b082:	e014      	b.n	800b0ae <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b084:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b088:	3330      	adds	r3, #48	@ 0x30
 800b08a:	4618      	mov	r0, r3
 800b08c:	f004 faa4 	bl	800f5d8 <RCCEx_PLL3_Config>
 800b090:	4603      	mov	r3, r0
 800b092:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800b096:	e00a      	b.n	800b0ae <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b098:	2301      	movs	r3, #1
 800b09a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b09e:	e006      	b.n	800b0ae <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800b0a0:	bf00      	nop
 800b0a2:	e004      	b.n	800b0ae <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800b0a4:	bf00      	nop
 800b0a6:	e002      	b.n	800b0ae <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800b0a8:	bf00      	nop
 800b0aa:	e000      	b.n	800b0ae <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800b0ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0ae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d10d      	bne.n	800b0d2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800b0b6:	4b7c      	ldr	r3, [pc, #496]	@ (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800b0b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b0bc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800b0c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b0c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b0c8:	4a77      	ldr	r2, [pc, #476]	@ (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800b0ca:	430b      	orrs	r3, r1
 800b0cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b0d0:	e003      	b.n	800b0da <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0d2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b0d6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b0da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800b0e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b0f0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800b0f4:	460b      	mov	r3, r1
 800b0f6:	4313      	orrs	r3, r2
 800b0f8:	d03d      	beq.n	800b176 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800b0fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b0fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b102:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b106:	d01b      	beq.n	800b140 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 800b108:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b10c:	d814      	bhi.n	800b138 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800b10e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b112:	d017      	beq.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 800b114:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b118:	d80e      	bhi.n	800b138 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d014      	beq.n	800b148 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 800b11e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b122:	d109      	bne.n	800b138 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b124:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b128:	3330      	adds	r3, #48	@ 0x30
 800b12a:	4618      	mov	r0, r3
 800b12c:	f004 fa54 	bl	800f5d8 <RCCEx_PLL3_Config>
 800b130:	4603      	mov	r3, r0
 800b132:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 800b136:	e008      	b.n	800b14a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b138:	2301      	movs	r3, #1
 800b13a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b13e:	e004      	b.n	800b14a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800b140:	bf00      	nop
 800b142:	e002      	b.n	800b14a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800b144:	bf00      	nop
 800b146:	e000      	b.n	800b14a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800b148:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b14a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d10d      	bne.n	800b16e <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800b152:	4b55      	ldr	r3, [pc, #340]	@ (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800b154:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b158:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800b15c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b160:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b164:	4a50      	ldr	r2, [pc, #320]	@ (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800b166:	430b      	orrs	r3, r1
 800b168:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b16c:	e003      	b.n	800b176 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b16e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b172:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b176:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b17e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800b182:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b186:	2300      	movs	r3, #0
 800b188:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b18c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800b190:	460b      	mov	r3, r1
 800b192:	4313      	orrs	r3, r2
 800b194:	d03d      	beq.n	800b212 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 800b196:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b19a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b19e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b1a2:	d01b      	beq.n	800b1dc <HAL_RCCEx_PeriphCLKConfig+0xb84>
 800b1a4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b1a8:	d814      	bhi.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800b1aa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b1ae:	d017      	beq.n	800b1e0 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 800b1b0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b1b4:	d80e      	bhi.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d014      	beq.n	800b1e4 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 800b1ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b1be:	d109      	bne.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b1c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b1c4:	3330      	adds	r3, #48	@ 0x30
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f004 fa06 	bl	800f5d8 <RCCEx_PLL3_Config>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800b1d2:	e008      	b.n	800b1e6 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b1da:	e004      	b.n	800b1e6 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800b1dc:	bf00      	nop
 800b1de:	e002      	b.n	800b1e6 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800b1e0:	bf00      	nop
 800b1e2:	e000      	b.n	800b1e6 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800b1e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1e6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d10d      	bne.n	800b20a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800b1ee:	4b2e      	ldr	r3, [pc, #184]	@ (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800b1f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b1f4:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800b1f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b1fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b200:	4a29      	ldr	r2, [pc, #164]	@ (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800b202:	430b      	orrs	r3, r1
 800b204:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b208:	e003      	b.n	800b212 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b20a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b20e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b212:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b21a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800b21e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b222:	2300      	movs	r3, #0
 800b224:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b228:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b22c:	460b      	mov	r3, r1
 800b22e:	4313      	orrs	r3, r2
 800b230:	d040      	beq.n	800b2b4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 800b232:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b236:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b23a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b23e:	d01b      	beq.n	800b278 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 800b240:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b244:	d814      	bhi.n	800b270 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800b246:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b24a:	d017      	beq.n	800b27c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800b24c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b250:	d80e      	bhi.n	800b270 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800b252:	2b00      	cmp	r3, #0
 800b254:	d014      	beq.n	800b280 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800b256:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b25a:	d109      	bne.n	800b270 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b25c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b260:	3330      	adds	r3, #48	@ 0x30
 800b262:	4618      	mov	r0, r3
 800b264:	f004 f9b8 	bl	800f5d8 <RCCEx_PLL3_Config>
 800b268:	4603      	mov	r3, r0
 800b26a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 800b26e:	e008      	b.n	800b282 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b270:	2301      	movs	r3, #1
 800b272:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b276:	e004      	b.n	800b282 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800b278:	bf00      	nop
 800b27a:	e002      	b.n	800b282 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800b27c:	bf00      	nop
 800b27e:	e000      	b.n	800b282 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800b280:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b282:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b286:	2b00      	cmp	r3, #0
 800b288:	d110      	bne.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800b28a:	4b07      	ldr	r3, [pc, #28]	@ (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800b28c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b290:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b294:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b298:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b29c:	4a02      	ldr	r2, [pc, #8]	@ (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800b29e:	430b      	orrs	r3, r1
 800b2a0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b2a4:	e006      	b.n	800b2b4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800b2a6:	bf00      	nop
 800b2a8:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2ac:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b2b0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b2b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2bc:	2100      	movs	r1, #0
 800b2be:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 800b2c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b2c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b2ca:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800b2ce:	460b      	mov	r3, r1
 800b2d0:	4313      	orrs	r3, r2
 800b2d2:	d03d      	beq.n	800b350 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 800b2d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b2d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b2dc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b2e0:	d01b      	beq.n	800b31a <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 800b2e2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b2e6:	d814      	bhi.n	800b312 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 800b2e8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b2ec:	d017      	beq.n	800b31e <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 800b2ee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b2f2:	d80e      	bhi.n	800b312 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d014      	beq.n	800b322 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 800b2f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b2fc:	d109      	bne.n	800b312 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b2fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b302:	3330      	adds	r3, #48	@ 0x30
 800b304:	4618      	mov	r0, r3
 800b306:	f004 f967 	bl	800f5d8 <RCCEx_PLL3_Config>
 800b30a:	4603      	mov	r3, r0
 800b30c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 800b310:	e008      	b.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b312:	2301      	movs	r3, #1
 800b314:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b318:	e004      	b.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800b31a:	bf00      	nop
 800b31c:	e002      	b.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800b31e:	bf00      	nop
 800b320:	e000      	b.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800b322:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b324:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d10d      	bne.n	800b348 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800b32c:	4bbe      	ldr	r3, [pc, #760]	@ (800b628 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800b32e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b332:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800b336:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b33a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b33e:	4aba      	ldr	r2, [pc, #744]	@ (800b628 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800b340:	430b      	orrs	r3, r1
 800b342:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b346:	e003      	b.n	800b350 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b348:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b34c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 800b350:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b358:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800b35c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b360:	2300      	movs	r3, #0
 800b362:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b366:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800b36a:	460b      	mov	r3, r1
 800b36c:	4313      	orrs	r3, r2
 800b36e:	d035      	beq.n	800b3dc <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 800b370:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b374:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b378:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b37c:	d015      	beq.n	800b3aa <HAL_RCCEx_PeriphCLKConfig+0xd52>
 800b37e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b382:	d80e      	bhi.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b384:	2b00      	cmp	r3, #0
 800b386:	d012      	beq.n	800b3ae <HAL_RCCEx_PeriphCLKConfig+0xd56>
 800b388:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b38c:	d109      	bne.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b38e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b392:	3330      	adds	r3, #48	@ 0x30
 800b394:	4618      	mov	r0, r3
 800b396:	f004 f91f 	bl	800f5d8 <RCCEx_PLL3_Config>
 800b39a:	4603      	mov	r3, r0
 800b39c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 800b3a0:	e006      	b.n	800b3b0 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b3a8:	e002      	b.n	800b3b0 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800b3aa:	bf00      	nop
 800b3ac:	e000      	b.n	800b3b0 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800b3ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3b0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d10d      	bne.n	800b3d4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 800b3b8:	4b9b      	ldr	r3, [pc, #620]	@ (800b628 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800b3ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b3be:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800b3c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b3c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b3ca:	4a97      	ldr	r2, [pc, #604]	@ (800b628 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800b3cc:	430b      	orrs	r3, r1
 800b3ce:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b3d2:	e003      	b.n	800b3dc <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3d4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b3d8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b3dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e4:	2100      	movs	r1, #0
 800b3e6:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 800b3ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b3ee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b3f2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b3f6:	460b      	mov	r3, r1
 800b3f8:	4313      	orrs	r3, r2
 800b3fa:	d00e      	beq.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 800b3fc:	4b8a      	ldr	r3, [pc, #552]	@ (800b628 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800b3fe:	69db      	ldr	r3, [r3, #28]
 800b400:	4a89      	ldr	r2, [pc, #548]	@ (800b628 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800b402:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b406:	61d3      	str	r3, [r2, #28]
 800b408:	4b87      	ldr	r3, [pc, #540]	@ (800b628 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800b40a:	69d9      	ldr	r1, [r3, #28]
 800b40c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b410:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800b414:	4a84      	ldr	r2, [pc, #528]	@ (800b628 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800b416:	430b      	orrs	r3, r1
 800b418:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b41a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b422:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800b426:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b42a:	2300      	movs	r3, #0
 800b42c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b430:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800b434:	460b      	mov	r3, r1
 800b436:	4313      	orrs	r3, r2
 800b438:	d055      	beq.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 800b43a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b43e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b442:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800b446:	d031      	beq.n	800b4ac <HAL_RCCEx_PeriphCLKConfig+0xe54>
 800b448:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800b44c:	d82a      	bhi.n	800b4a4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800b44e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b452:	d02d      	beq.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 800b454:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b458:	d824      	bhi.n	800b4a4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800b45a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b45e:	d029      	beq.n	800b4b4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 800b460:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b464:	d81e      	bhi.n	800b4a4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800b466:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b46a:	d011      	beq.n	800b490 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 800b46c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b470:	d818      	bhi.n	800b4a4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800b472:	2b00      	cmp	r3, #0
 800b474:	d020      	beq.n	800b4b8 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800b476:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b47a:	d113      	bne.n	800b4a4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b47c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b480:	3308      	adds	r3, #8
 800b482:	4618      	mov	r0, r3
 800b484:	f004 f810 	bl	800f4a8 <RCCEx_PLL2_Config>
 800b488:	4603      	mov	r3, r0
 800b48a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800b48e:	e014      	b.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b490:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b494:	3330      	adds	r3, #48	@ 0x30
 800b496:	4618      	mov	r0, r3
 800b498:	f004 f89e 	bl	800f5d8 <RCCEx_PLL3_Config>
 800b49c:	4603      	mov	r3, r0
 800b49e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800b4a2:	e00a      	b.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4a4:	2301      	movs	r3, #1
 800b4a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b4aa:	e006      	b.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800b4ac:	bf00      	nop
 800b4ae:	e004      	b.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800b4b0:	bf00      	nop
 800b4b2:	e002      	b.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800b4b4:	bf00      	nop
 800b4b6:	e000      	b.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800b4b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4ba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d10d      	bne.n	800b4de <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800b4c2:	4b59      	ldr	r3, [pc, #356]	@ (800b628 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800b4c4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b4c8:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800b4cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b4d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b4d4:	4a54      	ldr	r2, [pc, #336]	@ (800b628 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800b4d6:	430b      	orrs	r3, r1
 800b4d8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800b4dc:	e003      	b.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4de:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b4e2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b4e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ee:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800b4f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b4fc:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800b500:	460b      	mov	r3, r1
 800b502:	4313      	orrs	r3, r2
 800b504:	d055      	beq.n	800b5b2 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 800b506:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b50a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b50e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b512:	d031      	beq.n	800b578 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 800b514:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b518:	d82a      	bhi.n	800b570 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800b51a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b51e:	d02d      	beq.n	800b57c <HAL_RCCEx_PeriphCLKConfig+0xf24>
 800b520:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b524:	d824      	bhi.n	800b570 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800b526:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b52a:	d029      	beq.n	800b580 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 800b52c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b530:	d81e      	bhi.n	800b570 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800b532:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b536:	d011      	beq.n	800b55c <HAL_RCCEx_PeriphCLKConfig+0xf04>
 800b538:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b53c:	d818      	bhi.n	800b570 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d020      	beq.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800b542:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b546:	d113      	bne.n	800b570 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b548:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b54c:	3308      	adds	r3, #8
 800b54e:	4618      	mov	r0, r3
 800b550:	f003 ffaa 	bl	800f4a8 <RCCEx_PLL2_Config>
 800b554:	4603      	mov	r3, r0
 800b556:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800b55a:	e014      	b.n	800b586 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b55c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b560:	3330      	adds	r3, #48	@ 0x30
 800b562:	4618      	mov	r0, r3
 800b564:	f004 f838 	bl	800f5d8 <RCCEx_PLL3_Config>
 800b568:	4603      	mov	r3, r0
 800b56a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800b56e:	e00a      	b.n	800b586 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b570:	2301      	movs	r3, #1
 800b572:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b576:	e006      	b.n	800b586 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800b578:	bf00      	nop
 800b57a:	e004      	b.n	800b586 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800b57c:	bf00      	nop
 800b57e:	e002      	b.n	800b586 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800b580:	bf00      	nop
 800b582:	e000      	b.n	800b586 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800b584:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b586:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d10d      	bne.n	800b5aa <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800b58e:	4b26      	ldr	r3, [pc, #152]	@ (800b628 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800b590:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b594:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800b598:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b59c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b5a0:	4a21      	ldr	r2, [pc, #132]	@ (800b628 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800b5a2:	430b      	orrs	r3, r1
 800b5a4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800b5a8:	e003      	b.n	800b5b2 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5aa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b5ae:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 800b5b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ba:	2100      	movs	r1, #0
 800b5bc:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 800b5c0:	f003 0320 	and.w	r3, r3, #32
 800b5c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b5c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b5cc:	460b      	mov	r3, r1
 800b5ce:	4313      	orrs	r3, r2
 800b5d0:	d057      	beq.n	800b682 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 800b5d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b5d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b5da:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b5de:	d033      	beq.n	800b648 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 800b5e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b5e4:	d82c      	bhi.n	800b640 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800b5e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b5ea:	d02f      	beq.n	800b64c <HAL_RCCEx_PeriphCLKConfig+0xff4>
 800b5ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b5f0:	d826      	bhi.n	800b640 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800b5f2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b5f6:	d02b      	beq.n	800b650 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 800b5f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b5fc:	d820      	bhi.n	800b640 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800b5fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b602:	d013      	beq.n	800b62c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800b604:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b608:	d81a      	bhi.n	800b640 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d022      	beq.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 800b60e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b612:	d115      	bne.n	800b640 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b614:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b618:	3308      	adds	r3, #8
 800b61a:	4618      	mov	r0, r3
 800b61c:	f003 ff44 	bl	800f4a8 <RCCEx_PLL2_Config>
 800b620:	4603      	mov	r3, r0
 800b622:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800b626:	e016      	b.n	800b656 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 800b628:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b62c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b630:	3330      	adds	r3, #48	@ 0x30
 800b632:	4618      	mov	r0, r3
 800b634:	f003 ffd0 	bl	800f5d8 <RCCEx_PLL3_Config>
 800b638:	4603      	mov	r3, r0
 800b63a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800b63e:	e00a      	b.n	800b656 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b640:	2301      	movs	r3, #1
 800b642:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b646:	e006      	b.n	800b656 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800b648:	bf00      	nop
 800b64a:	e004      	b.n	800b656 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800b64c:	bf00      	nop
 800b64e:	e002      	b.n	800b656 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800b650:	bf00      	nop
 800b652:	e000      	b.n	800b656 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800b654:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b656:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d10d      	bne.n	800b67a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 800b65e:	4bbb      	ldr	r3, [pc, #748]	@ (800b94c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800b660:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b664:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800b668:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b66c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b670:	4ab6      	ldr	r2, [pc, #728]	@ (800b94c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800b672:	430b      	orrs	r3, r1
 800b674:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800b678:	e003      	b.n	800b682 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b67a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b67e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 800b682:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b68a:	2100      	movs	r1, #0
 800b68c:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 800b690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b694:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b698:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800b69c:	460b      	mov	r3, r1
 800b69e:	4313      	orrs	r3, r2
 800b6a0:	d055      	beq.n	800b74e <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 800b6a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b6a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b6aa:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800b6ae:	d031      	beq.n	800b714 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 800b6b0:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800b6b4:	d82a      	bhi.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800b6b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b6ba:	d02d      	beq.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 800b6bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b6c0:	d824      	bhi.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800b6c2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b6c6:	d029      	beq.n	800b71c <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 800b6c8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b6cc:	d81e      	bhi.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800b6ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b6d2:	d011      	beq.n	800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 800b6d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b6d8:	d818      	bhi.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d020      	beq.n	800b720 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 800b6de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b6e2:	d113      	bne.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b6e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b6e8:	3308      	adds	r3, #8
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f003 fedc 	bl	800f4a8 <RCCEx_PLL2_Config>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800b6f6:	e014      	b.n	800b722 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b6f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b6fc:	3330      	adds	r3, #48	@ 0x30
 800b6fe:	4618      	mov	r0, r3
 800b700:	f003 ff6a 	bl	800f5d8 <RCCEx_PLL3_Config>
 800b704:	4603      	mov	r3, r0
 800b706:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800b70a:	e00a      	b.n	800b722 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b70c:	2301      	movs	r3, #1
 800b70e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b712:	e006      	b.n	800b722 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800b714:	bf00      	nop
 800b716:	e004      	b.n	800b722 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800b718:	bf00      	nop
 800b71a:	e002      	b.n	800b722 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800b71c:	bf00      	nop
 800b71e:	e000      	b.n	800b722 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800b720:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b722:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b726:	2b00      	cmp	r3, #0
 800b728:	d10d      	bne.n	800b746 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 800b72a:	4b88      	ldr	r3, [pc, #544]	@ (800b94c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800b72c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b730:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 800b734:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b738:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b73c:	4a83      	ldr	r2, [pc, #524]	@ (800b94c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800b73e:	430b      	orrs	r3, r1
 800b740:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800b744:	e003      	b.n	800b74e <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b746:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b74a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800b74e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b756:	2100      	movs	r1, #0
 800b758:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 800b75c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b760:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b764:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800b768:	460b      	mov	r3, r1
 800b76a:	4313      	orrs	r3, r2
 800b76c:	d055      	beq.n	800b81a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 800b76e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b772:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b776:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800b77a:	d031      	beq.n	800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 800b77c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800b780:	d82a      	bhi.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800b782:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b786:	d02d      	beq.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 800b788:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b78c:	d824      	bhi.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800b78e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b792:	d029      	beq.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 800b794:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b798:	d81e      	bhi.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800b79a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b79e:	d011      	beq.n	800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 800b7a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b7a4:	d818      	bhi.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d020      	beq.n	800b7ec <HAL_RCCEx_PeriphCLKConfig+0x1194>
 800b7aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b7ae:	d113      	bne.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b7b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b7b4:	3308      	adds	r3, #8
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f003 fe76 	bl	800f4a8 <RCCEx_PLL2_Config>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800b7c2:	e014      	b.n	800b7ee <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b7c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b7c8:	3330      	adds	r3, #48	@ 0x30
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f003 ff04 	bl	800f5d8 <RCCEx_PLL3_Config>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800b7d6:	e00a      	b.n	800b7ee <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7d8:	2301      	movs	r3, #1
 800b7da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b7de:	e006      	b.n	800b7ee <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800b7e0:	bf00      	nop
 800b7e2:	e004      	b.n	800b7ee <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800b7e4:	bf00      	nop
 800b7e6:	e002      	b.n	800b7ee <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800b7e8:	bf00      	nop
 800b7ea:	e000      	b.n	800b7ee <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800b7ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7ee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d10d      	bne.n	800b812 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 800b7f6:	4b55      	ldr	r3, [pc, #340]	@ (800b94c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800b7f8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b7fc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800b800:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b804:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b808:	4a50      	ldr	r2, [pc, #320]	@ (800b94c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800b80a:	430b      	orrs	r3, r1
 800b80c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800b810:	e003      	b.n	800b81a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b812:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b816:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 800b81a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b822:	2100      	movs	r1, #0
 800b824:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800b828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b82c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b830:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800b834:	460b      	mov	r3, r1
 800b836:	4313      	orrs	r3, r2
 800b838:	d055      	beq.n	800b8e6 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 800b83a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b83e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b842:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b846:	d031      	beq.n	800b8ac <HAL_RCCEx_PeriphCLKConfig+0x1254>
 800b848:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b84c:	d82a      	bhi.n	800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800b84e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b852:	d02d      	beq.n	800b8b0 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 800b854:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b858:	d824      	bhi.n	800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800b85a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b85e:	d029      	beq.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 800b860:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b864:	d81e      	bhi.n	800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800b866:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b86a:	d011      	beq.n	800b890 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 800b86c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b870:	d818      	bhi.n	800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800b872:	2b00      	cmp	r3, #0
 800b874:	d020      	beq.n	800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 800b876:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b87a:	d113      	bne.n	800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b87c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b880:	3308      	adds	r3, #8
 800b882:	4618      	mov	r0, r3
 800b884:	f003 fe10 	bl	800f4a8 <RCCEx_PLL2_Config>
 800b888:	4603      	mov	r3, r0
 800b88a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800b88e:	e014      	b.n	800b8ba <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b890:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b894:	3330      	adds	r3, #48	@ 0x30
 800b896:	4618      	mov	r0, r3
 800b898:	f003 fe9e 	bl	800f5d8 <RCCEx_PLL3_Config>
 800b89c:	4603      	mov	r3, r0
 800b89e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800b8a2:	e00a      	b.n	800b8ba <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b8aa:	e006      	b.n	800b8ba <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800b8ac:	bf00      	nop
 800b8ae:	e004      	b.n	800b8ba <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800b8b0:	bf00      	nop
 800b8b2:	e002      	b.n	800b8ba <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800b8b4:	bf00      	nop
 800b8b6:	e000      	b.n	800b8ba <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800b8b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8ba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d10d      	bne.n	800b8de <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 800b8c2:	4b22      	ldr	r3, [pc, #136]	@ (800b94c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800b8c4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b8c8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800b8cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b8d0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b8d4:	4a1d      	ldr	r2, [pc, #116]	@ (800b94c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800b8d6:	430b      	orrs	r3, r1
 800b8d8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800b8dc:	e003      	b.n	800b8e6 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8de:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b8e2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b8e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ee:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800b8f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b8fc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800b900:	460b      	mov	r3, r1
 800b902:	4313      	orrs	r3, r2
 800b904:	d055      	beq.n	800b9b2 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800b906:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b90a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b90e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b912:	d035      	beq.n	800b980 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 800b914:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b918:	d82e      	bhi.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800b91a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b91e:	d031      	beq.n	800b984 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 800b920:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b924:	d828      	bhi.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800b926:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b92a:	d01b      	beq.n	800b964 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 800b92c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b930:	d822      	bhi.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800b932:	2b00      	cmp	r3, #0
 800b934:	d003      	beq.n	800b93e <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 800b936:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b93a:	d009      	beq.n	800b950 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 800b93c:	e01c      	b.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b93e:	4b03      	ldr	r3, [pc, #12]	@ (800b94c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800b940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b942:	4a02      	ldr	r2, [pc, #8]	@ (800b94c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800b944:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b948:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b94a:	e01c      	b.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 800b94c:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b950:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b954:	3308      	adds	r3, #8
 800b956:	4618      	mov	r0, r3
 800b958:	f003 fda6 	bl	800f4a8 <RCCEx_PLL2_Config>
 800b95c:	4603      	mov	r3, r0
 800b95e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b962:	e010      	b.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b964:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b968:	3330      	adds	r3, #48	@ 0x30
 800b96a:	4618      	mov	r0, r3
 800b96c:	f003 fe34 	bl	800f5d8 <RCCEx_PLL3_Config>
 800b970:	4603      	mov	r3, r0
 800b972:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b976:	e006      	b.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b978:	2301      	movs	r3, #1
 800b97a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b97e:	e002      	b.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 800b980:	bf00      	nop
 800b982:	e000      	b.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 800b984:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b986:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d10d      	bne.n	800b9aa <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800b98e:	4bc3      	ldr	r3, [pc, #780]	@ (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b990:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b994:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800b998:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b99c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b9a0:	4abe      	ldr	r2, [pc, #760]	@ (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b9a2:	430b      	orrs	r3, r1
 800b9a4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b9a8:	e003      	b.n	800b9b2 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9aa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b9ae:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 800b9b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ba:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800b9be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b9c8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800b9cc:	460b      	mov	r3, r1
 800b9ce:	4313      	orrs	r3, r2
 800b9d0:	d051      	beq.n	800ba76 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800b9d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b9d6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800b9da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b9de:	d033      	beq.n	800ba48 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 800b9e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b9e4:	d82c      	bhi.n	800ba40 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800b9e6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800b9ea:	d02d      	beq.n	800ba48 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 800b9ec:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800b9f0:	d826      	bhi.n	800ba40 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800b9f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b9f6:	d019      	beq.n	800ba2c <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 800b9f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b9fc:	d820      	bhi.n	800ba40 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d003      	beq.n	800ba0a <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 800ba02:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800ba06:	d007      	beq.n	800ba18 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 800ba08:	e01a      	b.n	800ba40 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba0a:	4ba4      	ldr	r3, [pc, #656]	@ (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800ba0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba0e:	4aa3      	ldr	r2, [pc, #652]	@ (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800ba10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ba14:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800ba16:	e018      	b.n	800ba4a <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ba18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ba1c:	3308      	adds	r3, #8
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f003 fd42 	bl	800f4a8 <RCCEx_PLL2_Config>
 800ba24:	4603      	mov	r3, r0
 800ba26:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800ba2a:	e00e      	b.n	800ba4a <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ba2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ba30:	3330      	adds	r3, #48	@ 0x30
 800ba32:	4618      	mov	r0, r3
 800ba34:	f003 fdd0 	bl	800f5d8 <RCCEx_PLL3_Config>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800ba3e:	e004      	b.n	800ba4a <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba40:	2301      	movs	r3, #1
 800ba42:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800ba46:	e000      	b.n	800ba4a <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 800ba48:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba4a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d10d      	bne.n	800ba6e <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800ba52:	4b92      	ldr	r3, [pc, #584]	@ (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800ba54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ba58:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 800ba5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ba60:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800ba64:	4a8d      	ldr	r2, [pc, #564]	@ (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800ba66:	430b      	orrs	r3, r1
 800ba68:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800ba6c:	e003      	b.n	800ba76 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba6e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ba72:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800ba76:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ba7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba7e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800ba82:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ba84:	2300      	movs	r3, #0
 800ba86:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ba88:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800ba8c:	460b      	mov	r3, r1
 800ba8e:	4313      	orrs	r3, r2
 800ba90:	d032      	beq.n	800baf8 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800ba92:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ba96:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800ba9a:	2b05      	cmp	r3, #5
 800ba9c:	d80f      	bhi.n	800babe <HAL_RCCEx_PeriphCLKConfig+0x1466>
 800ba9e:	2b03      	cmp	r3, #3
 800baa0:	d211      	bcs.n	800bac6 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 800baa2:	2b01      	cmp	r3, #1
 800baa4:	d911      	bls.n	800baca <HAL_RCCEx_PeriphCLKConfig+0x1472>
 800baa6:	2b02      	cmp	r3, #2
 800baa8:	d109      	bne.n	800babe <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800baaa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800baae:	3308      	adds	r3, #8
 800bab0:	4618      	mov	r0, r3
 800bab2:	f003 fcf9 	bl	800f4a8 <RCCEx_PLL2_Config>
 800bab6:	4603      	mov	r3, r0
 800bab8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800babc:	e006      	b.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800babe:	2301      	movs	r3, #1
 800bac0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800bac4:	e002      	b.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800bac6:	bf00      	nop
 800bac8:	e000      	b.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800baca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bacc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d10d      	bne.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800bad4:	4b71      	ldr	r3, [pc, #452]	@ (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800bad6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bada:	f023 0107 	bic.w	r1, r3, #7
 800bade:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bae2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800bae6:	4a6d      	ldr	r2, [pc, #436]	@ (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800bae8:	430b      	orrs	r3, r1
 800baea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800baee:	e003      	b.n	800baf8 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800baf0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800baf4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 800baf8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb00:	2100      	movs	r1, #0
 800bb02:	6739      	str	r1, [r7, #112]	@ 0x70
 800bb04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bb08:	677b      	str	r3, [r7, #116]	@ 0x74
 800bb0a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800bb0e:	460b      	mov	r3, r1
 800bb10:	4313      	orrs	r3, r2
 800bb12:	d024      	beq.n	800bb5e <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 800bb14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bb18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d005      	beq.n	800bb2c <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 800bb20:	2b08      	cmp	r3, #8
 800bb22:	d005      	beq.n	800bb30 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb24:	2301      	movs	r3, #1
 800bb26:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800bb2a:	e002      	b.n	800bb32 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 800bb2c:	bf00      	nop
 800bb2e:	e000      	b.n	800bb32 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 800bb30:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb32:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d10d      	bne.n	800bb56 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800bb3a:	4b58      	ldr	r3, [pc, #352]	@ (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800bb3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bb40:	f023 0108 	bic.w	r1, r3, #8
 800bb44:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bb48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bb4c:	4a53      	ldr	r2, [pc, #332]	@ (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800bb4e:	430b      	orrs	r3, r1
 800bb50:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800bb54:	e003      	b.n	800bb5e <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb56:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800bb5a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bb5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bb62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb66:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800bb6a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bb70:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800bb74:	460b      	mov	r3, r1
 800bb76:	4313      	orrs	r3, r2
 800bb78:	f000 80b9 	beq.w	800bcee <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800bb7c:	4b48      	ldr	r3, [pc, #288]	@ (800bca0 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800bb7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb80:	4a47      	ldr	r2, [pc, #284]	@ (800bca0 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800bb82:	f043 0301 	orr.w	r3, r3, #1
 800bb86:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bb88:	f7f9 ff1c 	bl	80059c4 <HAL_GetTick>
 800bb8c:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800bb90:	e00b      	b.n	800bbaa <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bb92:	f7f9 ff17 	bl	80059c4 <HAL_GetTick>
 800bb96:	4602      	mov	r2, r0
 800bb98:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800bb9c:	1ad3      	subs	r3, r2, r3
 800bb9e:	2b02      	cmp	r3, #2
 800bba0:	d903      	bls.n	800bbaa <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 800bba2:	2303      	movs	r3, #3
 800bba4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800bba8:	e005      	b.n	800bbb6 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800bbaa:	4b3d      	ldr	r3, [pc, #244]	@ (800bca0 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800bbac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbae:	f003 0301 	and.w	r3, r3, #1
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d0ed      	beq.n	800bb92 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 800bbb6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	f040 8093 	bne.w	800bce6 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800bbc0:	4b36      	ldr	r3, [pc, #216]	@ (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800bbc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bbc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bbca:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800bbce:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d023      	beq.n	800bc1e <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 800bbd6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bbda:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 800bbde:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	d01b      	beq.n	800bc1e <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800bbe6:	4b2d      	ldr	r3, [pc, #180]	@ (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800bbe8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bbec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bbf0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bbf4:	4b29      	ldr	r3, [pc, #164]	@ (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800bbf6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bbfa:	4a28      	ldr	r2, [pc, #160]	@ (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800bbfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bc00:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bc04:	4b25      	ldr	r3, [pc, #148]	@ (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800bc06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bc0a:	4a24      	ldr	r2, [pc, #144]	@ (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800bc0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bc10:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800bc14:	4a21      	ldr	r2, [pc, #132]	@ (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800bc16:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800bc1a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800bc1e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800bc22:	f003 0301 	and.w	r3, r3, #1
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d019      	beq.n	800bc5e <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc2a:	f7f9 fecb 	bl	80059c4 <HAL_GetTick>
 800bc2e:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bc32:	e00d      	b.n	800bc50 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bc34:	f7f9 fec6 	bl	80059c4 <HAL_GetTick>
 800bc38:	4602      	mov	r2, r0
 800bc3a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800bc3e:	1ad2      	subs	r2, r2, r3
 800bc40:	f241 3388 	movw	r3, #5000	@ 0x1388
 800bc44:	429a      	cmp	r2, r3
 800bc46:	d903      	bls.n	800bc50 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 800bc48:	2303      	movs	r3, #3
 800bc4a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 800bc4e:	e006      	b.n	800bc5e <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bc50:	4b12      	ldr	r3, [pc, #72]	@ (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800bc52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bc56:	f003 0302 	and.w	r3, r3, #2
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d0ea      	beq.n	800bc34 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 800bc5e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d13a      	bne.n	800bcdc <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800bc66:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bc6a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800bc6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bc72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bc76:	d115      	bne.n	800bca4 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 800bc78:	4b08      	ldr	r3, [pc, #32]	@ (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800bc7a:	69db      	ldr	r3, [r3, #28]
 800bc7c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800bc80:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bc84:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800bc88:	091b      	lsrs	r3, r3, #4
 800bc8a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800bc8e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800bc92:	4a02      	ldr	r2, [pc, #8]	@ (800bc9c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800bc94:	430b      	orrs	r3, r1
 800bc96:	61d3      	str	r3, [r2, #28]
 800bc98:	e00a      	b.n	800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 800bc9a:	bf00      	nop
 800bc9c:	44020c00 	.word	0x44020c00
 800bca0:	44020800 	.word	0x44020800
 800bca4:	4b9f      	ldr	r3, [pc, #636]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800bca6:	69db      	ldr	r3, [r3, #28]
 800bca8:	4a9e      	ldr	r2, [pc, #632]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800bcaa:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800bcae:	61d3      	str	r3, [r2, #28]
 800bcb0:	4b9c      	ldr	r3, [pc, #624]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800bcb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bcb6:	4a9b      	ldr	r2, [pc, #620]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800bcb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bcbc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800bcc0:	4b98      	ldr	r3, [pc, #608]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800bcc2:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 800bcc6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bcca:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800bcce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bcd2:	4a94      	ldr	r2, [pc, #592]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800bcd4:	430b      	orrs	r3, r1
 800bcd6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800bcda:	e008      	b.n	800bcee <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bcdc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800bce0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 800bce4:	e003      	b.n	800bcee <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bce6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800bcea:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bcee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bcf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf6:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800bcfa:	663b      	str	r3, [r7, #96]	@ 0x60
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	667b      	str	r3, [r7, #100]	@ 0x64
 800bd00:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800bd04:	460b      	mov	r3, r1
 800bd06:	4313      	orrs	r3, r2
 800bd08:	d035      	beq.n	800bd76 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800bd0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bd0e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800bd12:	2b30      	cmp	r3, #48	@ 0x30
 800bd14:	d014      	beq.n	800bd40 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 800bd16:	2b30      	cmp	r3, #48	@ 0x30
 800bd18:	d80e      	bhi.n	800bd38 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800bd1a:	2b20      	cmp	r3, #32
 800bd1c:	d012      	beq.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 800bd1e:	2b20      	cmp	r3, #32
 800bd20:	d80a      	bhi.n	800bd38 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d010      	beq.n	800bd48 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 800bd26:	2b10      	cmp	r3, #16
 800bd28:	d106      	bne.n	800bd38 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd2a:	4b7e      	ldr	r3, [pc, #504]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800bd2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd2e:	4a7d      	ldr	r2, [pc, #500]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800bd30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bd34:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800bd36:	e008      	b.n	800bd4a <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd38:	2301      	movs	r3, #1
 800bd3a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800bd3e:	e004      	b.n	800bd4a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800bd40:	bf00      	nop
 800bd42:	e002      	b.n	800bd4a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800bd44:	bf00      	nop
 800bd46:	e000      	b.n	800bd4a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800bd48:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd4a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d10d      	bne.n	800bd6e <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800bd52:	4b74      	ldr	r3, [pc, #464]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800bd54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bd58:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800bd5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bd60:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800bd64:	4a6f      	ldr	r2, [pc, #444]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800bd66:	430b      	orrs	r3, r1
 800bd68:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800bd6c:	e003      	b.n	800bd76 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd6e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800bd72:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800bd76:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bd7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd7e:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800bd82:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bd84:	2300      	movs	r3, #0
 800bd86:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bd88:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800bd8c:	460b      	mov	r3, r1
 800bd8e:	4313      	orrs	r3, r2
 800bd90:	d033      	beq.n	800bdfa <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800bd92:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bd96:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d002      	beq.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 800bd9e:	2b40      	cmp	r3, #64	@ 0x40
 800bda0:	d007      	beq.n	800bdb2 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 800bda2:	e010      	b.n	800bdc6 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bda4:	4b5f      	ldr	r3, [pc, #380]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800bda6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bda8:	4a5e      	ldr	r2, [pc, #376]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800bdaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bdae:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800bdb0:	e00d      	b.n	800bdce <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bdb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bdb6:	3308      	adds	r3, #8
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f003 fb75 	bl	800f4a8 <RCCEx_PLL2_Config>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800bdc4:	e003      	b.n	800bdce <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800bdcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bdce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d10d      	bne.n	800bdf2 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 800bdd6:	4b53      	ldr	r3, [pc, #332]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800bdd8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bddc:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 800bde0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bde4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800bde8:	4a4e      	ldr	r2, [pc, #312]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800bdea:	430b      	orrs	r3, r1
 800bdec:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800bdf0:	e003      	b.n	800bdfa <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdf2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800bdf6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800bdfa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bdfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be02:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800be06:	653b      	str	r3, [r7, #80]	@ 0x50
 800be08:	2300      	movs	r3, #0
 800be0a:	657b      	str	r3, [r7, #84]	@ 0x54
 800be0c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800be10:	460b      	mov	r3, r1
 800be12:	4313      	orrs	r3, r2
 800be14:	d033      	beq.n	800be7e <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 800be16:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800be1a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d002      	beq.n	800be28 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 800be22:	2b80      	cmp	r3, #128	@ 0x80
 800be24:	d007      	beq.n	800be36 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 800be26:	e010      	b.n	800be4a <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be28:	4b3e      	ldr	r3, [pc, #248]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800be2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be2c:	4a3d      	ldr	r2, [pc, #244]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800be2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800be32:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 800be34:	e00d      	b.n	800be52 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800be36:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800be3a:	3308      	adds	r3, #8
 800be3c:	4618      	mov	r0, r3
 800be3e:	f003 fb33 	bl	800f4a8 <RCCEx_PLL2_Config>
 800be42:	4603      	mov	r3, r0
 800be44:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 800be48:	e003      	b.n	800be52 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 800be4a:	2301      	movs	r3, #1
 800be4c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800be50:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be52:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800be56:	2b00      	cmp	r3, #0
 800be58:	d10d      	bne.n	800be76 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 800be5a:	4b32      	ldr	r3, [pc, #200]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800be5c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800be60:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800be64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800be68:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800be6c:	4a2d      	ldr	r2, [pc, #180]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800be6e:	430b      	orrs	r3, r1
 800be70:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800be74:	e003      	b.n	800be7e <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be76:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800be7a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800be7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800be82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be86:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800be8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be8c:	2300      	movs	r3, #0
 800be8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be90:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800be94:	460b      	mov	r3, r1
 800be96:	4313      	orrs	r3, r2
 800be98:	d04a      	beq.n	800bf30 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 800be9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800be9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bea2:	2b04      	cmp	r3, #4
 800bea4:	d827      	bhi.n	800bef6 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 800bea6:	a201      	add	r2, pc, #4	@ (adr r2, 800beac <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 800bea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beac:	0800bec1 	.word	0x0800bec1
 800beb0:	0800becf 	.word	0x0800becf
 800beb4:	0800bee3 	.word	0x0800bee3
 800beb8:	0800beff 	.word	0x0800beff
 800bebc:	0800beff 	.word	0x0800beff
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bec0:	4b18      	ldr	r3, [pc, #96]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800bec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bec4:	4a17      	ldr	r2, [pc, #92]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800bec6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800beca:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800becc:	e018      	b.n	800bf00 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bece:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bed2:	3308      	adds	r3, #8
 800bed4:	4618      	mov	r0, r3
 800bed6:	f003 fae7 	bl	800f4a8 <RCCEx_PLL2_Config>
 800beda:	4603      	mov	r3, r0
 800bedc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800bee0:	e00e      	b.n	800bf00 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bee2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bee6:	3330      	adds	r3, #48	@ 0x30
 800bee8:	4618      	mov	r0, r3
 800beea:	f003 fb75 	bl	800f5d8 <RCCEx_PLL3_Config>
 800beee:	4603      	mov	r3, r0
 800bef0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800bef4:	e004      	b.n	800bf00 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bef6:	2301      	movs	r3, #1
 800bef8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800befc:	e000      	b.n	800bf00 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 800befe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf00:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d10f      	bne.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800bf08:	4b06      	ldr	r3, [pc, #24]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800bf0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bf0e:	f023 0107 	bic.w	r1, r3, #7
 800bf12:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bf16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bf1a:	4a02      	ldr	r2, [pc, #8]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800bf1c:	430b      	orrs	r3, r1
 800bf1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800bf22:	e005      	b.n	800bf30 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 800bf24:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf28:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800bf2c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800bf30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bf34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf38:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800bf3c:	643b      	str	r3, [r7, #64]	@ 0x40
 800bf3e:	2300      	movs	r3, #0
 800bf40:	647b      	str	r3, [r7, #68]	@ 0x44
 800bf42:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800bf46:	460b      	mov	r3, r1
 800bf48:	4313      	orrs	r3, r2
 800bf4a:	f000 8081 	beq.w	800c050 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800bf4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bf52:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bf56:	2b20      	cmp	r3, #32
 800bf58:	d85f      	bhi.n	800c01a <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 800bf5a:	a201      	add	r2, pc, #4	@ (adr r2, 800bf60 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 800bf5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf60:	0800bfe5 	.word	0x0800bfe5
 800bf64:	0800c01b 	.word	0x0800c01b
 800bf68:	0800c01b 	.word	0x0800c01b
 800bf6c:	0800c01b 	.word	0x0800c01b
 800bf70:	0800c01b 	.word	0x0800c01b
 800bf74:	0800c01b 	.word	0x0800c01b
 800bf78:	0800c01b 	.word	0x0800c01b
 800bf7c:	0800c01b 	.word	0x0800c01b
 800bf80:	0800bff3 	.word	0x0800bff3
 800bf84:	0800c01b 	.word	0x0800c01b
 800bf88:	0800c01b 	.word	0x0800c01b
 800bf8c:	0800c01b 	.word	0x0800c01b
 800bf90:	0800c01b 	.word	0x0800c01b
 800bf94:	0800c01b 	.word	0x0800c01b
 800bf98:	0800c01b 	.word	0x0800c01b
 800bf9c:	0800c01b 	.word	0x0800c01b
 800bfa0:	0800c007 	.word	0x0800c007
 800bfa4:	0800c01b 	.word	0x0800c01b
 800bfa8:	0800c01b 	.word	0x0800c01b
 800bfac:	0800c01b 	.word	0x0800c01b
 800bfb0:	0800c01b 	.word	0x0800c01b
 800bfb4:	0800c01b 	.word	0x0800c01b
 800bfb8:	0800c01b 	.word	0x0800c01b
 800bfbc:	0800c01b 	.word	0x0800c01b
 800bfc0:	0800c023 	.word	0x0800c023
 800bfc4:	0800c01b 	.word	0x0800c01b
 800bfc8:	0800c01b 	.word	0x0800c01b
 800bfcc:	0800c01b 	.word	0x0800c01b
 800bfd0:	0800c01b 	.word	0x0800c01b
 800bfd4:	0800c01b 	.word	0x0800c01b
 800bfd8:	0800c01b 	.word	0x0800c01b
 800bfdc:	0800c01b 	.word	0x0800c01b
 800bfe0:	0800c023 	.word	0x0800c023
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bfe4:	4bab      	ldr	r3, [pc, #684]	@ (800c294 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800bfe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfe8:	4aaa      	ldr	r2, [pc, #680]	@ (800c294 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800bfea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bfee:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800bff0:	e018      	b.n	800c024 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bff2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bff6:	3308      	adds	r3, #8
 800bff8:	4618      	mov	r0, r3
 800bffa:	f003 fa55 	bl	800f4a8 <RCCEx_PLL2_Config>
 800bffe:	4603      	mov	r3, r0
 800c000:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800c004:	e00e      	b.n	800c024 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800c006:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c00a:	3330      	adds	r3, #48	@ 0x30
 800c00c:	4618      	mov	r0, r3
 800c00e:	f003 fae3 	bl	800f5d8 <RCCEx_PLL3_Config>
 800c012:	4603      	mov	r3, r0
 800c014:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800c018:	e004      	b.n	800c024 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c01a:	2301      	movs	r3, #1
 800c01c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800c020:	e000      	b.n	800c024 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 800c022:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c024:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d10d      	bne.n	800c048 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800c02c:	4b99      	ldr	r3, [pc, #612]	@ (800c294 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800c02e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c032:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800c036:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c03a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c03e:	4a95      	ldr	r2, [pc, #596]	@ (800c294 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800c040:	430b      	orrs	r3, r1
 800c042:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c046:	e003      	b.n	800c050 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c048:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800c04c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800c050:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c054:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c058:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800c05c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c05e:	2300      	movs	r3, #0
 800c060:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c062:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800c066:	460b      	mov	r3, r1
 800c068:	4313      	orrs	r3, r2
 800c06a:	d04e      	beq.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 800c06c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c070:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c074:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c078:	d02e      	beq.n	800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 800c07a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c07e:	d827      	bhi.n	800c0d0 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800c080:	2bc0      	cmp	r3, #192	@ 0xc0
 800c082:	d02b      	beq.n	800c0dc <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 800c084:	2bc0      	cmp	r3, #192	@ 0xc0
 800c086:	d823      	bhi.n	800c0d0 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800c088:	2b80      	cmp	r3, #128	@ 0x80
 800c08a:	d017      	beq.n	800c0bc <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 800c08c:	2b80      	cmp	r3, #128	@ 0x80
 800c08e:	d81f      	bhi.n	800c0d0 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800c090:	2b00      	cmp	r3, #0
 800c092:	d002      	beq.n	800c09a <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 800c094:	2b40      	cmp	r3, #64	@ 0x40
 800c096:	d007      	beq.n	800c0a8 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 800c098:	e01a      	b.n	800c0d0 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c09a:	4b7e      	ldr	r3, [pc, #504]	@ (800c294 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800c09c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c09e:	4a7d      	ldr	r2, [pc, #500]	@ (800c294 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800c0a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c0a4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800c0a6:	e01a      	b.n	800c0de <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c0a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c0ac:	3308      	adds	r3, #8
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f003 f9fa 	bl	800f4a8 <RCCEx_PLL2_Config>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800c0ba:	e010      	b.n	800c0de <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800c0bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c0c0:	3330      	adds	r3, #48	@ 0x30
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	f003 fa88 	bl	800f5d8 <RCCEx_PLL3_Config>
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800c0ce:	e006      	b.n	800c0de <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800c0d6:	e002      	b.n	800c0de <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 800c0d8:	bf00      	nop
 800c0da:	e000      	b.n	800c0de <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 800c0dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c0de:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d10d      	bne.n	800c102 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800c0e6:	4b6b      	ldr	r3, [pc, #428]	@ (800c294 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800c0e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c0ec:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800c0f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c0f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c0f8:	4a66      	ldr	r2, [pc, #408]	@ (800c294 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800c0fa:	430b      	orrs	r3, r1
 800c0fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c100:	e003      	b.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c102:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800c106:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 800c10a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c112:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800c116:	633b      	str	r3, [r7, #48]	@ 0x30
 800c118:	2300      	movs	r3, #0
 800c11a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c11c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800c120:	460b      	mov	r3, r1
 800c122:	4313      	orrs	r3, r2
 800c124:	d055      	beq.n	800c1d2 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 800c126:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c12a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800c12e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800c132:	d031      	beq.n	800c198 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 800c134:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800c138:	d82a      	bhi.n	800c190 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800c13a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c13e:	d02d      	beq.n	800c19c <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 800c140:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c144:	d824      	bhi.n	800c190 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800c146:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800c14a:	d029      	beq.n	800c1a0 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 800c14c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800c150:	d81e      	bhi.n	800c190 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800c152:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c156:	d011      	beq.n	800c17c <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 800c158:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c15c:	d818      	bhi.n	800c190 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d020      	beq.n	800c1a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 800c162:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c166:	d113      	bne.n	800c190 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c168:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c16c:	3308      	adds	r3, #8
 800c16e:	4618      	mov	r0, r3
 800c170:	f003 f99a 	bl	800f4a8 <RCCEx_PLL2_Config>
 800c174:	4603      	mov	r3, r0
 800c176:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800c17a:	e014      	b.n	800c1a6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800c17c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c180:	3330      	adds	r3, #48	@ 0x30
 800c182:	4618      	mov	r0, r3
 800c184:	f003 fa28 	bl	800f5d8 <RCCEx_PLL3_Config>
 800c188:	4603      	mov	r3, r0
 800c18a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800c18e:	e00a      	b.n	800c1a6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c190:	2301      	movs	r3, #1
 800c192:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800c196:	e006      	b.n	800c1a6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800c198:	bf00      	nop
 800c19a:	e004      	b.n	800c1a6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800c19c:	bf00      	nop
 800c19e:	e002      	b.n	800c1a6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800c1a0:	bf00      	nop
 800c1a2:	e000      	b.n	800c1a6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800c1a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d10d      	bne.n	800c1ca <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 800c1ae:	4b39      	ldr	r3, [pc, #228]	@ (800c294 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800c1b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c1b4:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800c1b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c1bc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800c1c0:	4a34      	ldr	r2, [pc, #208]	@ (800c294 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800c1c2:	430b      	orrs	r3, r1
 800c1c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c1c8:	e003      	b.n	800c1d2 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800c1ce:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 800c1d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1da:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800c1de:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c1e4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800c1e8:	460b      	mov	r3, r1
 800c1ea:	4313      	orrs	r3, r2
 800c1ec:	d058      	beq.n	800c2a0 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 800c1ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c1f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c1f6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800c1fa:	d031      	beq.n	800c260 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 800c1fc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800c200:	d82a      	bhi.n	800c258 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800c202:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c206:	d02d      	beq.n	800c264 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 800c208:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c20c:	d824      	bhi.n	800c258 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800c20e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c212:	d029      	beq.n	800c268 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 800c214:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c218:	d81e      	bhi.n	800c258 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800c21a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c21e:	d011      	beq.n	800c244 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 800c220:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c224:	d818      	bhi.n	800c258 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800c226:	2b00      	cmp	r3, #0
 800c228:	d020      	beq.n	800c26c <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 800c22a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c22e:	d113      	bne.n	800c258 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c230:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c234:	3308      	adds	r3, #8
 800c236:	4618      	mov	r0, r3
 800c238:	f003 f936 	bl	800f4a8 <RCCEx_PLL2_Config>
 800c23c:	4603      	mov	r3, r0
 800c23e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800c242:	e014      	b.n	800c26e <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800c244:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c248:	3330      	adds	r3, #48	@ 0x30
 800c24a:	4618      	mov	r0, r3
 800c24c:	f003 f9c4 	bl	800f5d8 <RCCEx_PLL3_Config>
 800c250:	4603      	mov	r3, r0
 800c252:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800c256:	e00a      	b.n	800c26e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c258:	2301      	movs	r3, #1
 800c25a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800c25e:	e006      	b.n	800c26e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800c260:	bf00      	nop
 800c262:	e004      	b.n	800c26e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800c264:	bf00      	nop
 800c266:	e002      	b.n	800c26e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800c268:	bf00      	nop
 800c26a:	e000      	b.n	800c26e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800c26c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c26e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800c272:	2b00      	cmp	r3, #0
 800c274:	d110      	bne.n	800c298 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 800c276:	4b07      	ldr	r3, [pc, #28]	@ (800c294 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800c278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c27c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800c280:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c284:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c288:	4902      	ldr	r1, [pc, #8]	@ (800c294 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800c28a:	4313      	orrs	r3, r2
 800c28c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800c290:	e006      	b.n	800c2a0 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 800c292:	bf00      	nop
 800c294:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c298:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800c29c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c2a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a8:	2100      	movs	r1, #0
 800c2aa:	6239      	str	r1, [r7, #32]
 800c2ac:	f003 0301 	and.w	r3, r3, #1
 800c2b0:	627b      	str	r3, [r7, #36]	@ 0x24
 800c2b2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c2b6:	460b      	mov	r3, r1
 800c2b8:	4313      	orrs	r3, r2
 800c2ba:	d055      	beq.n	800c368 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 800c2bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c2c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c2c4:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800c2c8:	d031      	beq.n	800c32e <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 800c2ca:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800c2ce:	d82a      	bhi.n	800c326 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800c2d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c2d4:	d02d      	beq.n	800c332 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 800c2d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c2da:	d824      	bhi.n	800c326 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800c2dc:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800c2e0:	d029      	beq.n	800c336 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 800c2e2:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800c2e6:	d81e      	bhi.n	800c326 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800c2e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c2ec:	d011      	beq.n	800c312 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 800c2ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c2f2:	d818      	bhi.n	800c326 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d020      	beq.n	800c33a <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 800c2f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c2fc:	d113      	bne.n	800c326 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c2fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c302:	3308      	adds	r3, #8
 800c304:	4618      	mov	r0, r3
 800c306:	f003 f8cf 	bl	800f4a8 <RCCEx_PLL2_Config>
 800c30a:	4603      	mov	r3, r0
 800c30c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c310:	e014      	b.n	800c33c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800c312:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c316:	3330      	adds	r3, #48	@ 0x30
 800c318:	4618      	mov	r0, r3
 800c31a:	f003 f95d 	bl	800f5d8 <RCCEx_PLL3_Config>
 800c31e:	4603      	mov	r3, r0
 800c320:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c324:	e00a      	b.n	800c33c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c326:	2301      	movs	r3, #1
 800c328:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800c32c:	e006      	b.n	800c33c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800c32e:	bf00      	nop
 800c330:	e004      	b.n	800c33c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800c332:	bf00      	nop
 800c334:	e002      	b.n	800c33c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800c336:	bf00      	nop
 800c338:	e000      	b.n	800c33c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800c33a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c33c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800c340:	2b00      	cmp	r3, #0
 800c342:	d10d      	bne.n	800c360 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 800c344:	4b88      	ldr	r3, [pc, #544]	@ (800c568 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800c346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c34a:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 800c34e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c352:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c356:	4984      	ldr	r1, [pc, #528]	@ (800c568 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800c358:	4313      	orrs	r3, r2
 800c35a:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800c35e:	e003      	b.n	800c368 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c360:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800c364:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800c368:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c370:	2100      	movs	r1, #0
 800c372:	61b9      	str	r1, [r7, #24]
 800c374:	f003 0302 	and.w	r3, r3, #2
 800c378:	61fb      	str	r3, [r7, #28]
 800c37a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c37e:	460b      	mov	r3, r1
 800c380:	4313      	orrs	r3, r2
 800c382:	d03d      	beq.n	800c400 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 800c384:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c388:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800c38c:	2b03      	cmp	r3, #3
 800c38e:	d81c      	bhi.n	800c3ca <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 800c390:	a201      	add	r2, pc, #4	@ (adr r2, 800c398 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 800c392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c396:	bf00      	nop
 800c398:	0800c3d3 	.word	0x0800c3d3
 800c39c:	0800c3a9 	.word	0x0800c3a9
 800c3a0:	0800c3b7 	.word	0x0800c3b7
 800c3a4:	0800c3d3 	.word	0x0800c3d3
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3a8:	4b6f      	ldr	r3, [pc, #444]	@ (800c568 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800c3aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3ac:	4a6e      	ldr	r2, [pc, #440]	@ (800c568 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800c3ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c3b2:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800c3b4:	e00e      	b.n	800c3d4 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c3b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c3ba:	3308      	adds	r3, #8
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f003 f873 	bl	800f4a8 <RCCEx_PLL2_Config>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 800c3c8:	e004      	b.n	800c3d4 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800c3d0:	e000      	b.n	800c3d4 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 800c3d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c3d4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d10d      	bne.n	800c3f8 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800c3dc:	4b62      	ldr	r3, [pc, #392]	@ (800c568 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800c3de:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c3e2:	f023 0203 	bic.w	r2, r3, #3
 800c3e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c3ea:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800c3ee:	495e      	ldr	r1, [pc, #376]	@ (800c568 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800c3f0:	4313      	orrs	r3, r2
 800c3f2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800c3f6:	e003      	b.n	800c400 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3f8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800c3fc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c400:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c408:	2100      	movs	r1, #0
 800c40a:	6139      	str	r1, [r7, #16]
 800c40c:	f003 0304 	and.w	r3, r3, #4
 800c410:	617b      	str	r3, [r7, #20]
 800c412:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c416:	460b      	mov	r3, r1
 800c418:	4313      	orrs	r3, r2
 800c41a:	d03a      	beq.n	800c492 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 800c41c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c420:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800c424:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c428:	d00e      	beq.n	800c448 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 800c42a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c42e:	d815      	bhi.n	800c45c <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 800c430:	2b00      	cmp	r3, #0
 800c432:	d017      	beq.n	800c464 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 800c434:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c438:	d110      	bne.n	800c45c <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c43a:	4b4b      	ldr	r3, [pc, #300]	@ (800c568 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800c43c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c43e:	4a4a      	ldr	r2, [pc, #296]	@ (800c568 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800c440:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c444:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800c446:	e00e      	b.n	800c466 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800c448:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c44c:	3308      	adds	r3, #8
 800c44e:	4618      	mov	r0, r3
 800c450:	f003 f82a 	bl	800f4a8 <RCCEx_PLL2_Config>
 800c454:	4603      	mov	r3, r0
 800c456:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800c45a:	e004      	b.n	800c466 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 800c45c:	2301      	movs	r3, #1
 800c45e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800c462:	e000      	b.n	800c466 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 800c464:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c466:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d10d      	bne.n	800c48a <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 800c46e:	4b3e      	ldr	r3, [pc, #248]	@ (800c568 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800c470:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c474:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c478:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c47c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800c480:	4939      	ldr	r1, [pc, #228]	@ (800c568 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800c482:	4313      	orrs	r3, r2
 800c484:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 800c488:	e003      	b.n	800c492 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c48a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800c48e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c492:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c49a:	2100      	movs	r1, #0
 800c49c:	60b9      	str	r1, [r7, #8]
 800c49e:	f003 0310 	and.w	r3, r3, #16
 800c4a2:	60fb      	str	r3, [r7, #12]
 800c4a4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c4a8:	460b      	mov	r3, r1
 800c4aa:	4313      	orrs	r3, r2
 800c4ac:	d038      	beq.n	800c520 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 800c4ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c4b2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800c4b6:	2b30      	cmp	r3, #48	@ 0x30
 800c4b8:	d01b      	beq.n	800c4f2 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 800c4ba:	2b30      	cmp	r3, #48	@ 0x30
 800c4bc:	d815      	bhi.n	800c4ea <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 800c4be:	2b10      	cmp	r3, #16
 800c4c0:	d002      	beq.n	800c4c8 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 800c4c2:	2b20      	cmp	r3, #32
 800c4c4:	d007      	beq.n	800c4d6 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 800c4c6:	e010      	b.n	800c4ea <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c4c8:	4b27      	ldr	r3, [pc, #156]	@ (800c568 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800c4ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4cc:	4a26      	ldr	r2, [pc, #152]	@ (800c568 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800c4ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c4d2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 800c4d4:	e00e      	b.n	800c4f4 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800c4d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c4da:	3330      	adds	r3, #48	@ 0x30
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f003 f87b 	bl	800f5d8 <RCCEx_PLL3_Config>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 800c4e8:	e004      	b.n	800c4f4 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800c4f0:	e000      	b.n	800c4f4 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 800c4f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c4f4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d10d      	bne.n	800c518 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 800c4fc:	4b1a      	ldr	r3, [pc, #104]	@ (800c568 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800c4fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c502:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800c506:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c50a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800c50e:	4916      	ldr	r1, [pc, #88]	@ (800c568 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800c510:	4313      	orrs	r3, r2
 800c512:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800c516:	e003      	b.n	800c520 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c518:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800c51c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c520:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c528:	2100      	movs	r1, #0
 800c52a:	6039      	str	r1, [r7, #0]
 800c52c:	f003 0308 	and.w	r3, r3, #8
 800c530:	607b      	str	r3, [r7, #4]
 800c532:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c536:	460b      	mov	r3, r1
 800c538:	4313      	orrs	r3, r2
 800c53a:	d00c      	beq.n	800c556 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 800c53c:	4b0a      	ldr	r3, [pc, #40]	@ (800c568 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800c53e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c542:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800c546:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800c54a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800c54e:	4906      	ldr	r1, [pc, #24]	@ (800c568 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800c550:	4313      	orrs	r3, r2
 800c552:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 800c556:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 800c55a:	4618      	mov	r0, r3
 800c55c:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 800c560:	46bd      	mov	sp, r7
 800c562:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c566:	bf00      	nop
 800c568:	44020c00 	.word	0x44020c00

0800c56c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 800c56c:	b480      	push	{r7}
 800c56e:	b08b      	sub	sp, #44	@ 0x2c
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800c574:	4bae      	ldr	r3, [pc, #696]	@ (800c830 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800c576:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c57c:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800c57e:	4bac      	ldr	r3, [pc, #688]	@ (800c830 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800c580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c582:	f003 0303 	and.w	r3, r3, #3
 800c586:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800c588:	4ba9      	ldr	r3, [pc, #676]	@ (800c830 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800c58a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c58c:	0a1b      	lsrs	r3, r3, #8
 800c58e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c592:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800c594:	4ba6      	ldr	r3, [pc, #664]	@ (800c830 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800c596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c598:	091b      	lsrs	r3, r3, #4
 800c59a:	f003 0301 	and.w	r3, r3, #1
 800c59e:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800c5a0:	4ba3      	ldr	r3, [pc, #652]	@ (800c830 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800c5a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5a4:	08db      	lsrs	r3, r3, #3
 800c5a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c5aa:	697a      	ldr	r2, [r7, #20]
 800c5ac:	fb02 f303 	mul.w	r3, r2, r3
 800c5b0:	ee07 3a90 	vmov	s15, r3
 800c5b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5b8:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800c5bc:	69bb      	ldr	r3, [r7, #24]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	f000 8126 	beq.w	800c810 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 800c5c4:	69fb      	ldr	r3, [r7, #28]
 800c5c6:	2b03      	cmp	r3, #3
 800c5c8:	d053      	beq.n	800c672 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 800c5ca:	69fb      	ldr	r3, [r7, #28]
 800c5cc:	2b03      	cmp	r3, #3
 800c5ce:	d86f      	bhi.n	800c6b0 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 800c5d0:	69fb      	ldr	r3, [r7, #28]
 800c5d2:	2b01      	cmp	r3, #1
 800c5d4:	d003      	beq.n	800c5de <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 800c5d6:	69fb      	ldr	r3, [r7, #28]
 800c5d8:	2b02      	cmp	r3, #2
 800c5da:	d02b      	beq.n	800c634 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800c5dc:	e068      	b.n	800c6b0 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c5de:	4b94      	ldr	r3, [pc, #592]	@ (800c830 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	08db      	lsrs	r3, r3, #3
 800c5e4:	f003 0303 	and.w	r3, r3, #3
 800c5e8:	4a92      	ldr	r2, [pc, #584]	@ (800c834 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800c5ea:	fa22 f303 	lsr.w	r3, r2, r3
 800c5ee:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	ee07 3a90 	vmov	s15, r3
 800c5f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5fa:	69bb      	ldr	r3, [r7, #24]
 800c5fc:	ee07 3a90 	vmov	s15, r3
 800c600:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c604:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c608:	6a3b      	ldr	r3, [r7, #32]
 800c60a:	ee07 3a90 	vmov	s15, r3
 800c60e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c612:	ed97 6a04 	vldr	s12, [r7, #16]
 800c616:	eddf 5a88 	vldr	s11, [pc, #544]	@ 800c838 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800c61a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c61e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c622:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c62a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c62e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800c632:	e068      	b.n	800c706 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800c634:	69bb      	ldr	r3, [r7, #24]
 800c636:	ee07 3a90 	vmov	s15, r3
 800c63a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c63e:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 800c83c <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800c642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c646:	6a3b      	ldr	r3, [r7, #32]
 800c648:	ee07 3a90 	vmov	s15, r3
 800c64c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c650:	ed97 6a04 	vldr	s12, [r7, #16]
 800c654:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800c838 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800c658:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c65c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c660:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c664:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c668:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c66c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800c670:	e049      	b.n	800c706 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800c672:	69bb      	ldr	r3, [r7, #24]
 800c674:	ee07 3a90 	vmov	s15, r3
 800c678:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c67c:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800c840 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 800c680:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c684:	6a3b      	ldr	r3, [r7, #32]
 800c686:	ee07 3a90 	vmov	s15, r3
 800c68a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c68e:	ed97 6a04 	vldr	s12, [r7, #16]
 800c692:	eddf 5a69 	vldr	s11, [pc, #420]	@ 800c838 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800c696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c69a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c69e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c6a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6aa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800c6ae:	e02a      	b.n	800c706 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c6b0:	4b5f      	ldr	r3, [pc, #380]	@ (800c830 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	08db      	lsrs	r3, r3, #3
 800c6b6:	f003 0303 	and.w	r3, r3, #3
 800c6ba:	4a5e      	ldr	r2, [pc, #376]	@ (800c834 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800c6bc:	fa22 f303 	lsr.w	r3, r2, r3
 800c6c0:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	ee07 3a90 	vmov	s15, r3
 800c6c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6cc:	69bb      	ldr	r3, [r7, #24]
 800c6ce:	ee07 3a90 	vmov	s15, r3
 800c6d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6da:	6a3b      	ldr	r3, [r7, #32]
 800c6dc:	ee07 3a90 	vmov	s15, r3
 800c6e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6e4:	ed97 6a04 	vldr	s12, [r7, #16]
 800c6e8:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800c838 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800c6ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c6f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c700:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800c704:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c706:	4b4a      	ldr	r3, [pc, #296]	@ (800c830 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c70e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c712:	d121      	bne.n	800c758 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800c714:	4b46      	ldr	r3, [pc, #280]	@ (800c830 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800c716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c718:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d017      	beq.n	800c750 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c720:	4b43      	ldr	r3, [pc, #268]	@ (800c830 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800c722:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c724:	0a5b      	lsrs	r3, r3, #9
 800c726:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c72a:	ee07 3a90 	vmov	s15, r3
 800c72e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 800c732:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c736:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800c73a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800c73e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c742:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c746:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	601a      	str	r2, [r3, #0]
 800c74e:	e006      	b.n	800c75e <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2200      	movs	r2, #0
 800c754:	601a      	str	r2, [r3, #0]
 800c756:	e002      	b.n	800c75e <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2200      	movs	r2, #0
 800c75c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c75e:	4b34      	ldr	r3, [pc, #208]	@ (800c830 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c766:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c76a:	d121      	bne.n	800c7b0 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800c76c:	4b30      	ldr	r3, [pc, #192]	@ (800c830 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800c76e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c770:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c774:	2b00      	cmp	r3, #0
 800c776:	d017      	beq.n	800c7a8 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c778:	4b2d      	ldr	r3, [pc, #180]	@ (800c830 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800c77a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c77c:	0c1b      	lsrs	r3, r3, #16
 800c77e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c782:	ee07 3a90 	vmov	s15, r3
 800c786:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 800c78a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c78e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800c792:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800c796:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c79a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c79e:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	605a      	str	r2, [r3, #4]
 800c7a6:	e006      	b.n	800c7b6 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	605a      	str	r2, [r3, #4]
 800c7ae:	e002      	b.n	800c7b6 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c7b6:	4b1e      	ldr	r3, [pc, #120]	@ (800c830 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c7be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c7c2:	d121      	bne.n	800c808 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800c7c4:	4b1a      	ldr	r3, [pc, #104]	@ (800c830 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800c7c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d017      	beq.n	800c800 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800c7d0:	4b17      	ldr	r3, [pc, #92]	@ (800c830 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800c7d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7d4:	0e1b      	lsrs	r3, r3, #24
 800c7d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c7da:	ee07 3a90 	vmov	s15, r3
 800c7de:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 800c7e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c7e6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800c7ea:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800c7ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c7f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c7f6:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c7fe:	e010      	b.n	800c822 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2200      	movs	r2, #0
 800c804:	609a      	str	r2, [r3, #8]
}
 800c806:	e00c      	b.n	800c822 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2200      	movs	r2, #0
 800c80c:	609a      	str	r2, [r3, #8]
}
 800c80e:	e008      	b.n	800c822 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2200      	movs	r2, #0
 800c814:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2200      	movs	r2, #0
 800c81a:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2200      	movs	r2, #0
 800c820:	609a      	str	r2, [r3, #8]
}
 800c822:	bf00      	nop
 800c824:	372c      	adds	r7, #44	@ 0x2c
 800c826:	46bd      	mov	sp, r7
 800c828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82c:	4770      	bx	lr
 800c82e:	bf00      	nop
 800c830:	44020c00 	.word	0x44020c00
 800c834:	03d09000 	.word	0x03d09000
 800c838:	46000000 	.word	0x46000000
 800c83c:	4a742400 	.word	0x4a742400
 800c840:	4af42400 	.word	0x4af42400

0800c844 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 800c844:	b480      	push	{r7}
 800c846:	b08b      	sub	sp, #44	@ 0x2c
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800c84c:	4bae      	ldr	r3, [pc, #696]	@ (800cb08 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800c84e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c854:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800c856:	4bac      	ldr	r3, [pc, #688]	@ (800cb08 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800c858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c85a:	f003 0303 	and.w	r3, r3, #3
 800c85e:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 800c860:	4ba9      	ldr	r3, [pc, #676]	@ (800cb08 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800c862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c864:	0a1b      	lsrs	r3, r3, #8
 800c866:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c86a:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800c86c:	4ba6      	ldr	r3, [pc, #664]	@ (800cb08 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800c86e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c870:	091b      	lsrs	r3, r3, #4
 800c872:	f003 0301 	and.w	r3, r3, #1
 800c876:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800c878:	4ba3      	ldr	r3, [pc, #652]	@ (800cb08 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800c87a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c87c:	08db      	lsrs	r3, r3, #3
 800c87e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c882:	697a      	ldr	r2, [r7, #20]
 800c884:	fb02 f303 	mul.w	r3, r2, r3
 800c888:	ee07 3a90 	vmov	s15, r3
 800c88c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c890:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800c894:	69bb      	ldr	r3, [r7, #24]
 800c896:	2b00      	cmp	r3, #0
 800c898:	f000 8126 	beq.w	800cae8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 800c89c:	69fb      	ldr	r3, [r7, #28]
 800c89e:	2b03      	cmp	r3, #3
 800c8a0:	d053      	beq.n	800c94a <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 800c8a2:	69fb      	ldr	r3, [r7, #28]
 800c8a4:	2b03      	cmp	r3, #3
 800c8a6:	d86f      	bhi.n	800c988 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 800c8a8:	69fb      	ldr	r3, [r7, #28]
 800c8aa:	2b01      	cmp	r3, #1
 800c8ac:	d003      	beq.n	800c8b6 <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 800c8ae:	69fb      	ldr	r3, [r7, #28]
 800c8b0:	2b02      	cmp	r3, #2
 800c8b2:	d02b      	beq.n	800c90c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800c8b4:	e068      	b.n	800c988 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c8b6:	4b94      	ldr	r3, [pc, #592]	@ (800cb08 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	08db      	lsrs	r3, r3, #3
 800c8bc:	f003 0303 	and.w	r3, r3, #3
 800c8c0:	4a92      	ldr	r2, [pc, #584]	@ (800cb0c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800c8c2:	fa22 f303 	lsr.w	r3, r2, r3
 800c8c6:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	ee07 3a90 	vmov	s15, r3
 800c8ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8d2:	69bb      	ldr	r3, [r7, #24]
 800c8d4:	ee07 3a90 	vmov	s15, r3
 800c8d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8e0:	6a3b      	ldr	r3, [r7, #32]
 800c8e2:	ee07 3a90 	vmov	s15, r3
 800c8e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8ea:	ed97 6a04 	vldr	s12, [r7, #16]
 800c8ee:	eddf 5a88 	vldr	s11, [pc, #544]	@ 800cb10 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800c8f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c8fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c902:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c906:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800c90a:	e068      	b.n	800c9de <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800c90c:	69bb      	ldr	r3, [r7, #24]
 800c90e:	ee07 3a90 	vmov	s15, r3
 800c912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c916:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 800cb14 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800c91a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c91e:	6a3b      	ldr	r3, [r7, #32]
 800c920:	ee07 3a90 	vmov	s15, r3
 800c924:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c928:	ed97 6a04 	vldr	s12, [r7, #16]
 800c92c:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800cb10 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800c930:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c934:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c938:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c93c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c940:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c944:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800c948:	e049      	b.n	800c9de <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800c94a:	69bb      	ldr	r3, [r7, #24]
 800c94c:	ee07 3a90 	vmov	s15, r3
 800c950:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c954:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800cb18 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 800c958:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c95c:	6a3b      	ldr	r3, [r7, #32]
 800c95e:	ee07 3a90 	vmov	s15, r3
 800c962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c966:	ed97 6a04 	vldr	s12, [r7, #16]
 800c96a:	eddf 5a69 	vldr	s11, [pc, #420]	@ 800cb10 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800c96e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c976:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c97a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c97e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c982:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800c986:	e02a      	b.n	800c9de <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c988:	4b5f      	ldr	r3, [pc, #380]	@ (800cb08 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	08db      	lsrs	r3, r3, #3
 800c98e:	f003 0303 	and.w	r3, r3, #3
 800c992:	4a5e      	ldr	r2, [pc, #376]	@ (800cb0c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800c994:	fa22 f303 	lsr.w	r3, r2, r3
 800c998:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	ee07 3a90 	vmov	s15, r3
 800c9a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9a4:	69bb      	ldr	r3, [r7, #24]
 800c9a6:	ee07 3a90 	vmov	s15, r3
 800c9aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9b2:	6a3b      	ldr	r3, [r7, #32]
 800c9b4:	ee07 3a90 	vmov	s15, r3
 800c9b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9bc:	ed97 6a04 	vldr	s12, [r7, #16]
 800c9c0:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800cb10 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800c9c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c9d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9d8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800c9dc:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c9de:	4b4a      	ldr	r3, [pc, #296]	@ (800cb08 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c9e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c9ea:	d121      	bne.n	800ca30 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800c9ec:	4b46      	ldr	r3, [pc, #280]	@ (800cb08 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800c9ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d017      	beq.n	800ca28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c9f8:	4b43      	ldr	r3, [pc, #268]	@ (800cb08 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800c9fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c9fc:	0a5b      	lsrs	r3, r3, #9
 800c9fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca02:	ee07 3a90 	vmov	s15, r3
 800ca06:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 800ca0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ca0e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800ca12:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800ca16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca1e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	601a      	str	r2, [r3, #0]
 800ca26:	e006      	b.n	800ca36 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	601a      	str	r2, [r3, #0]
 800ca2e:	e002      	b.n	800ca36 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2200      	movs	r2, #0
 800ca34:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ca36:	4b34      	ldr	r3, [pc, #208]	@ (800cb08 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ca3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ca42:	d121      	bne.n	800ca88 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800ca44:	4b30      	ldr	r3, [pc, #192]	@ (800cb08 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800ca46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d017      	beq.n	800ca80 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ca50:	4b2d      	ldr	r3, [pc, #180]	@ (800cb08 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800ca52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca54:	0c1b      	lsrs	r3, r3, #16
 800ca56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca5a:	ee07 3a90 	vmov	s15, r3
 800ca5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 800ca62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ca66:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800ca6a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800ca6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca76:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	605a      	str	r2, [r3, #4]
 800ca7e:	e006      	b.n	800ca8e <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2200      	movs	r2, #0
 800ca84:	605a      	str	r2, [r3, #4]
 800ca86:	e002      	b.n	800ca8e <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ca8e:	4b1e      	ldr	r3, [pc, #120]	@ (800cb08 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ca96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ca9a:	d121      	bne.n	800cae0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800ca9c:	4b1a      	ldr	r3, [pc, #104]	@ (800cb08 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800ca9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800caa0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d017      	beq.n	800cad8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800caa8:	4b17      	ldr	r3, [pc, #92]	@ (800cb08 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800caaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800caac:	0e1b      	lsrs	r3, r3, #24
 800caae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cab2:	ee07 3a90 	vmov	s15, r3
 800cab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 800caba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cabe:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800cac2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800cac6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800caca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cace:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cad6:	e010      	b.n	800cafa <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2200      	movs	r2, #0
 800cadc:	609a      	str	r2, [r3, #8]
}
 800cade:	e00c      	b.n	800cafa <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2200      	movs	r2, #0
 800cae4:	609a      	str	r2, [r3, #8]
}
 800cae6:	e008      	b.n	800cafa <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2200      	movs	r2, #0
 800caec:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	2200      	movs	r2, #0
 800caf2:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2200      	movs	r2, #0
 800caf8:	609a      	str	r2, [r3, #8]
}
 800cafa:	bf00      	nop
 800cafc:	372c      	adds	r7, #44	@ 0x2c
 800cafe:	46bd      	mov	sp, r7
 800cb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb04:	4770      	bx	lr
 800cb06:	bf00      	nop
 800cb08:	44020c00 	.word	0x44020c00
 800cb0c:	03d09000 	.word	0x03d09000
 800cb10:	46000000 	.word	0x46000000
 800cb14:	4a742400 	.word	0x4a742400
 800cb18:	4af42400 	.word	0x4af42400

0800cb1c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 800cb1c:	b480      	push	{r7}
 800cb1e:	b08b      	sub	sp, #44	@ 0x2c
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800cb24:	4bae      	ldr	r3, [pc, #696]	@ (800cde0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800cb26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb2c:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800cb2e:	4bac      	ldr	r3, [pc, #688]	@ (800cde0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800cb30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb32:	f003 0303 	and.w	r3, r3, #3
 800cb36:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 800cb38:	4ba9      	ldr	r3, [pc, #676]	@ (800cde0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800cb3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb3c:	0a1b      	lsrs	r3, r3, #8
 800cb3e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cb42:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800cb44:	4ba6      	ldr	r3, [pc, #664]	@ (800cde0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800cb46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb48:	091b      	lsrs	r3, r3, #4
 800cb4a:	f003 0301 	and.w	r3, r3, #1
 800cb4e:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800cb50:	4ba3      	ldr	r3, [pc, #652]	@ (800cde0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800cb52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cb54:	08db      	lsrs	r3, r3, #3
 800cb56:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cb5a:	697a      	ldr	r2, [r7, #20]
 800cb5c:	fb02 f303 	mul.w	r3, r2, r3
 800cb60:	ee07 3a90 	vmov	s15, r3
 800cb64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb68:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800cb6c:	69bb      	ldr	r3, [r7, #24]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	f000 8126 	beq.w	800cdc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 800cb74:	69fb      	ldr	r3, [r7, #28]
 800cb76:	2b03      	cmp	r3, #3
 800cb78:	d053      	beq.n	800cc22 <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 800cb7a:	69fb      	ldr	r3, [r7, #28]
 800cb7c:	2b03      	cmp	r3, #3
 800cb7e:	d86f      	bhi.n	800cc60 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 800cb80:	69fb      	ldr	r3, [r7, #28]
 800cb82:	2b01      	cmp	r3, #1
 800cb84:	d003      	beq.n	800cb8e <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 800cb86:	69fb      	ldr	r3, [r7, #28]
 800cb88:	2b02      	cmp	r3, #2
 800cb8a:	d02b      	beq.n	800cbe4 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800cb8c:	e068      	b.n	800cc60 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800cb8e:	4b94      	ldr	r3, [pc, #592]	@ (800cde0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	08db      	lsrs	r3, r3, #3
 800cb94:	f003 0303 	and.w	r3, r3, #3
 800cb98:	4a92      	ldr	r2, [pc, #584]	@ (800cde4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800cb9a:	fa22 f303 	lsr.w	r3, r2, r3
 800cb9e:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	ee07 3a90 	vmov	s15, r3
 800cba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbaa:	69bb      	ldr	r3, [r7, #24]
 800cbac:	ee07 3a90 	vmov	s15, r3
 800cbb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbb8:	6a3b      	ldr	r3, [r7, #32]
 800cbba:	ee07 3a90 	vmov	s15, r3
 800cbbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbc2:	ed97 6a04 	vldr	s12, [r7, #16]
 800cbc6:	eddf 5a88 	vldr	s11, [pc, #544]	@ 800cde8 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800cbca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cbd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbde:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800cbe2:	e068      	b.n	800ccb6 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800cbe4:	69bb      	ldr	r3, [r7, #24]
 800cbe6:	ee07 3a90 	vmov	s15, r3
 800cbea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbee:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 800cdec <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 800cbf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbf6:	6a3b      	ldr	r3, [r7, #32]
 800cbf8:	ee07 3a90 	vmov	s15, r3
 800cbfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc00:	ed97 6a04 	vldr	s12, [r7, #16]
 800cc04:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800cde8 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800cc08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc10:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cc14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc18:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc1c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800cc20:	e049      	b.n	800ccb6 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800cc22:	69bb      	ldr	r3, [r7, #24]
 800cc24:	ee07 3a90 	vmov	s15, r3
 800cc28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc2c:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800cdf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 800cc30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc34:	6a3b      	ldr	r3, [r7, #32]
 800cc36:	ee07 3a90 	vmov	s15, r3
 800cc3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc3e:	ed97 6a04 	vldr	s12, [r7, #16]
 800cc42:	eddf 5a69 	vldr	s11, [pc, #420]	@ 800cde8 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800cc46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cc52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc5a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800cc5e:	e02a      	b.n	800ccb6 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800cc60:	4b5f      	ldr	r3, [pc, #380]	@ (800cde0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	08db      	lsrs	r3, r3, #3
 800cc66:	f003 0303 	and.w	r3, r3, #3
 800cc6a:	4a5e      	ldr	r2, [pc, #376]	@ (800cde4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800cc6c:	fa22 f303 	lsr.w	r3, r2, r3
 800cc70:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	ee07 3a90 	vmov	s15, r3
 800cc78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc7c:	69bb      	ldr	r3, [r7, #24]
 800cc7e:	ee07 3a90 	vmov	s15, r3
 800cc82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc8a:	6a3b      	ldr	r3, [r7, #32]
 800cc8c:	ee07 3a90 	vmov	s15, r3
 800cc90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc94:	ed97 6a04 	vldr	s12, [r7, #16]
 800cc98:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800cde8 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800cc9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cca0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cca4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cca8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ccac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccb0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800ccb4:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ccb6:	4b4a      	ldr	r3, [pc, #296]	@ (800cde0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ccbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ccc2:	d121      	bne.n	800cd08 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800ccc4:	4b46      	ldr	r3, [pc, #280]	@ (800cde0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800ccc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d017      	beq.n	800cd00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ccd0:	4b43      	ldr	r3, [pc, #268]	@ (800cde0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800ccd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ccd4:	0a5b      	lsrs	r3, r3, #9
 800ccd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ccda:	ee07 3a90 	vmov	s15, r3
 800ccde:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 800cce2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cce6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800ccea:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800ccee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ccf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccf6:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	601a      	str	r2, [r3, #0]
 800ccfe:	e006      	b.n	800cd0e <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2200      	movs	r2, #0
 800cd04:	601a      	str	r2, [r3, #0]
 800cd06:	e002      	b.n	800cd0e <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cd0e:	4b34      	ldr	r3, [pc, #208]	@ (800cde0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cd16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cd1a:	d121      	bne.n	800cd60 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800cd1c:	4b30      	ldr	r3, [pc, #192]	@ (800cde0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800cd1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d017      	beq.n	800cd58 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800cd28:	4b2d      	ldr	r3, [pc, #180]	@ (800cde0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800cd2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd2c:	0c1b      	lsrs	r3, r3, #16
 800cd2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cd32:	ee07 3a90 	vmov	s15, r3
 800cd36:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 800cd3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cd3e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800cd42:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800cd46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd4e:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	605a      	str	r2, [r3, #4]
 800cd56:	e006      	b.n	800cd66 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	605a      	str	r2, [r3, #4]
 800cd5e:	e002      	b.n	800cd66 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2200      	movs	r2, #0
 800cd64:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cd66:	4b1e      	ldr	r3, [pc, #120]	@ (800cde0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cd6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cd72:	d121      	bne.n	800cdb8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800cd74:	4b1a      	ldr	r3, [pc, #104]	@ (800cde0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800cd76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d017      	beq.n	800cdb0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800cd80:	4b17      	ldr	r3, [pc, #92]	@ (800cde0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800cd82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd84:	0e1b      	lsrs	r3, r3, #24
 800cd86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cd8a:	ee07 3a90 	vmov	s15, r3
 800cd8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 800cd92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cd96:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800cd9a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800cd9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cda2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cda6:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800cdae:	e010      	b.n	800cdd2 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	609a      	str	r2, [r3, #8]
}
 800cdb6:	e00c      	b.n	800cdd2 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2200      	movs	r2, #0
 800cdbc:	609a      	str	r2, [r3, #8]
}
 800cdbe:	e008      	b.n	800cdd2 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	2200      	movs	r2, #0
 800cdca:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2200      	movs	r2, #0
 800cdd0:	609a      	str	r2, [r3, #8]
}
 800cdd2:	bf00      	nop
 800cdd4:	372c      	adds	r7, #44	@ 0x2c
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cddc:	4770      	bx	lr
 800cdde:	bf00      	nop
 800cde0:	44020c00 	.word	0x44020c00
 800cde4:	03d09000 	.word	0x03d09000
 800cde8:	46000000 	.word	0x46000000
 800cdec:	4a742400 	.word	0x4a742400
 800cdf0:	4af42400 	.word	0x4af42400

0800cdf4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800cdf4:	b590      	push	{r4, r7, lr}
 800cdf6:	b08f      	sub	sp, #60	@ 0x3c
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800cdfe:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ce02:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 800ce06:	4321      	orrs	r1, r4
 800ce08:	d150      	bne.n	800ceac <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800ce0a:	4b26      	ldr	r3, [pc, #152]	@ (800cea4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800ce0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ce10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ce14:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800ce16:	4b23      	ldr	r3, [pc, #140]	@ (800cea4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800ce18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ce1c:	f003 0302 	and.w	r3, r3, #2
 800ce20:	2b02      	cmp	r3, #2
 800ce22:	d108      	bne.n	800ce36 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800ce24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ce2a:	d104      	bne.n	800ce36 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800ce2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ce30:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce32:	f002 bb2a 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800ce36:	4b1b      	ldr	r3, [pc, #108]	@ (800cea4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800ce38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ce3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ce40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ce44:	d108      	bne.n	800ce58 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800ce46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce4c:	d104      	bne.n	800ce58 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800ce4e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800ce52:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce54:	f002 bb19 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 800ce58:	4b12      	ldr	r3, [pc, #72]	@ (800cea4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ce60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ce64:	d119      	bne.n	800ce9a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800ce66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce68:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ce6c:	d115      	bne.n	800ce9a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800ce6e:	4b0d      	ldr	r3, [pc, #52]	@ (800cea4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800ce70:	69db      	ldr	r3, [r3, #28]
 800ce72:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800ce76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce7a:	d30a      	bcc.n	800ce92 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 800ce7c:	4b09      	ldr	r3, [pc, #36]	@ (800cea4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800ce7e:	69db      	ldr	r3, [r3, #28]
 800ce80:	0a1b      	lsrs	r3, r3, #8
 800ce82:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ce86:	4a08      	ldr	r2, [pc, #32]	@ (800cea8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800ce88:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce8c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800ce8e:	f002 bafc 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 800ce92:	2300      	movs	r3, #0
 800ce94:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800ce96:	f002 baf8 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce9e:	f002 baf4 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800cea2:	bf00      	nop
 800cea4:	44020c00 	.word	0x44020c00
 800cea8:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800ceac:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ceb0:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 800ceb4:	ea50 0104 	orrs.w	r1, r0, r4
 800ceb8:	f001 8275 	beq.w	800e3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 800cebc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cec0:	2801      	cmp	r0, #1
 800cec2:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 800cec6:	f082 82dd 	bcs.w	800f484 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ceca:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cece:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 800ced2:	ea50 0104 	orrs.w	r1, r0, r4
 800ced6:	f001 816c 	beq.w	800e1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 800ceda:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cede:	2801      	cmp	r0, #1
 800cee0:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 800cee4:	f082 82ce 	bcs.w	800f484 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800cee8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ceec:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 800cef0:	ea50 0104 	orrs.w	r1, r0, r4
 800cef4:	f001 8602 	beq.w	800eafc <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 800cef8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cefc:	2801      	cmp	r0, #1
 800cefe:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 800cf02:	f082 82bf 	bcs.w	800f484 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800cf06:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cf0a:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 800cf0e:	ea50 0104 	orrs.w	r1, r0, r4
 800cf12:	f001 854c 	beq.w	800e9ae <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 800cf16:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cf1a:	2801      	cmp	r0, #1
 800cf1c:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 800cf20:	f082 82b0 	bcs.w	800f484 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800cf24:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cf28:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 800cf2c:	ea50 0104 	orrs.w	r1, r0, r4
 800cf30:	f001 849e 	beq.w	800e870 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 800cf34:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cf38:	2801      	cmp	r0, #1
 800cf3a:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 800cf3e:	f082 82a1 	bcs.w	800f484 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800cf42:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cf46:	f1a1 0420 	sub.w	r4, r1, #32
 800cf4a:	ea50 0104 	orrs.w	r1, r0, r4
 800cf4e:	f001 83e8 	beq.w	800e722 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 800cf52:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cf56:	2801      	cmp	r0, #1
 800cf58:	f171 0120 	sbcs.w	r1, r1, #32
 800cf5c:	f082 8292 	bcs.w	800f484 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800cf60:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cf64:	f1a1 0410 	sub.w	r4, r1, #16
 800cf68:	ea50 0104 	orrs.w	r1, r0, r4
 800cf6c:	f002 8256 	beq.w	800f41c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800cf70:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cf74:	2801      	cmp	r0, #1
 800cf76:	f171 0110 	sbcs.w	r1, r1, #16
 800cf7a:	f082 8283 	bcs.w	800f484 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800cf7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cf82:	f1a1 0408 	sub.w	r4, r1, #8
 800cf86:	ea50 0104 	orrs.w	r1, r0, r4
 800cf8a:	f002 81cc 	beq.w	800f326 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 800cf8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cf92:	2801      	cmp	r0, #1
 800cf94:	f171 0108 	sbcs.w	r1, r1, #8
 800cf98:	f082 8274 	bcs.w	800f484 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800cf9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cfa0:	1f0c      	subs	r4, r1, #4
 800cfa2:	ea50 0104 	orrs.w	r1, r0, r4
 800cfa6:	f001 8648 	beq.w	800ec3a <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 800cfaa:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cfae:	2801      	cmp	r0, #1
 800cfb0:	f171 0104 	sbcs.w	r1, r1, #4
 800cfb4:	f082 8266 	bcs.w	800f484 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800cfb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cfbc:	1e8c      	subs	r4, r1, #2
 800cfbe:	ea50 0104 	orrs.w	r1, r0, r4
 800cfc2:	f002 8143 	beq.w	800f24c <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 800cfc6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cfca:	2801      	cmp	r0, #1
 800cfcc:	f171 0102 	sbcs.w	r1, r1, #2
 800cfd0:	f082 8258 	bcs.w	800f484 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800cfd4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cfd8:	1e4c      	subs	r4, r1, #1
 800cfda:	ea50 0104 	orrs.w	r1, r0, r4
 800cfde:	f002 80ce 	beq.w	800f17e <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 800cfe2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cfe6:	2801      	cmp	r0, #1
 800cfe8:	f171 0101 	sbcs.w	r1, r1, #1
 800cfec:	f082 824a 	bcs.w	800f484 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800cff0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cff4:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 800cff8:	4321      	orrs	r1, r4
 800cffa:	f002 8059 	beq.w	800f0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 800cffe:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d002:	4cd9      	ldr	r4, [pc, #868]	@ (800d368 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800d004:	42a0      	cmp	r0, r4
 800d006:	f171 0100 	sbcs.w	r1, r1, #0
 800d00a:	f082 823b 	bcs.w	800f484 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800d00e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d012:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 800d016:	4321      	orrs	r1, r4
 800d018:	f001 87d9 	beq.w	800efce <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 800d01c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d020:	4cd2      	ldr	r4, [pc, #840]	@ (800d36c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800d022:	42a0      	cmp	r0, r4
 800d024:	f171 0100 	sbcs.w	r1, r1, #0
 800d028:	f082 822c 	bcs.w	800f484 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800d02c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d030:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 800d034:	4321      	orrs	r1, r4
 800d036:	f001 8751 	beq.w	800eedc <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 800d03a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d03e:	4ccc      	ldr	r4, [pc, #816]	@ (800d370 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800d040:	42a0      	cmp	r0, r4
 800d042:	f171 0100 	sbcs.w	r1, r1, #0
 800d046:	f082 821d 	bcs.w	800f484 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800d04a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d04e:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 800d052:	4321      	orrs	r1, r4
 800d054:	f001 869a 	beq.w	800ed8c <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 800d058:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d05c:	4cc5      	ldr	r4, [pc, #788]	@ (800d374 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800d05e:	42a0      	cmp	r0, r4
 800d060:	f171 0100 	sbcs.w	r1, r1, #0
 800d064:	f082 820e 	bcs.w	800f484 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800d068:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d06c:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 800d070:	4321      	orrs	r1, r4
 800d072:	f001 8612 	beq.w	800ec9a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 800d076:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d07a:	4cbf      	ldr	r4, [pc, #764]	@ (800d378 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 800d07c:	42a0      	cmp	r0, r4
 800d07e:	f171 0100 	sbcs.w	r1, r1, #0
 800d082:	f082 81ff 	bcs.w	800f484 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800d086:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d08a:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 800d08e:	4321      	orrs	r1, r4
 800d090:	f002 817e 	beq.w	800f390 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 800d094:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d098:	4cb8      	ldr	r4, [pc, #736]	@ (800d37c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800d09a:	42a0      	cmp	r0, r4
 800d09c:	f171 0100 	sbcs.w	r1, r1, #0
 800d0a0:	f082 81f0 	bcs.w	800f484 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800d0a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d0a8:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 800d0ac:	4321      	orrs	r1, r4
 800d0ae:	f000 829e 	beq.w	800d5ee <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 800d0b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d0b6:	4cb2      	ldr	r4, [pc, #712]	@ (800d380 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800d0b8:	42a0      	cmp	r0, r4
 800d0ba:	f171 0100 	sbcs.w	r1, r1, #0
 800d0be:	f082 81e1 	bcs.w	800f484 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800d0c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d0c6:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 800d0ca:	4321      	orrs	r1, r4
 800d0cc:	f000 826d 	beq.w	800d5aa <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 800d0d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d0d4:	4cab      	ldr	r4, [pc, #684]	@ (800d384 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800d0d6:	42a0      	cmp	r0, r4
 800d0d8:	f171 0100 	sbcs.w	r1, r1, #0
 800d0dc:	f082 81d2 	bcs.w	800f484 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800d0e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d0e4:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 800d0e8:	4321      	orrs	r1, r4
 800d0ea:	f001 800d 	beq.w	800e108 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 800d0ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d0f2:	4ca5      	ldr	r4, [pc, #660]	@ (800d388 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800d0f4:	42a0      	cmp	r0, r4
 800d0f6:	f171 0100 	sbcs.w	r1, r1, #0
 800d0fa:	f082 81c3 	bcs.w	800f484 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800d0fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d102:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 800d106:	4321      	orrs	r1, r4
 800d108:	f000 81d0 	beq.w	800d4ac <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 800d10c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d110:	4c9e      	ldr	r4, [pc, #632]	@ (800d38c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800d112:	42a0      	cmp	r0, r4
 800d114:	f171 0100 	sbcs.w	r1, r1, #0
 800d118:	f082 81b4 	bcs.w	800f484 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800d11c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d120:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 800d124:	4321      	orrs	r1, r4
 800d126:	f000 8142 	beq.w	800d3ae <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 800d12a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d12e:	4c98      	ldr	r4, [pc, #608]	@ (800d390 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800d130:	42a0      	cmp	r0, r4
 800d132:	f171 0100 	sbcs.w	r1, r1, #0
 800d136:	f082 81a5 	bcs.w	800f484 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800d13a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d13e:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 800d142:	4321      	orrs	r1, r4
 800d144:	f001 824e 	beq.w	800e5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 800d148:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d14c:	4c91      	ldr	r4, [pc, #580]	@ (800d394 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800d14e:	42a0      	cmp	r0, r4
 800d150:	f171 0100 	sbcs.w	r1, r1, #0
 800d154:	f082 8196 	bcs.w	800f484 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800d158:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d15c:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 800d160:	4321      	orrs	r1, r4
 800d162:	f001 8197 	beq.w	800e494 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 800d166:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d16a:	4c8b      	ldr	r4, [pc, #556]	@ (800d398 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800d16c:	42a0      	cmp	r0, r4
 800d16e:	f171 0100 	sbcs.w	r1, r1, #0
 800d172:	f082 8187 	bcs.w	800f484 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800d176:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d17a:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 800d17e:	4321      	orrs	r1, r4
 800d180:	f001 8154 	beq.w	800e42c <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 800d184:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d188:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 800d18c:	f171 0100 	sbcs.w	r1, r1, #0
 800d190:	f082 8178 	bcs.w	800f484 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800d194:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d198:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 800d19c:	4321      	orrs	r1, r4
 800d19e:	f001 80b7 	beq.w	800e310 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 800d1a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d1a6:	f248 0401 	movw	r4, #32769	@ 0x8001
 800d1aa:	42a0      	cmp	r0, r4
 800d1ac:	f171 0100 	sbcs.w	r1, r1, #0
 800d1b0:	f082 8168 	bcs.w	800f484 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800d1b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d1b8:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 800d1bc:	4321      	orrs	r1, r4
 800d1be:	f001 8064 	beq.w	800e28a <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 800d1c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d1c6:	f244 0401 	movw	r4, #16385	@ 0x4001
 800d1ca:	42a0      	cmp	r0, r4
 800d1cc:	f171 0100 	sbcs.w	r1, r1, #0
 800d1d0:	f082 8158 	bcs.w	800f484 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800d1d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d1d8:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 800d1dc:	4321      	orrs	r1, r4
 800d1de:	f001 8011 	beq.w	800e204 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 800d1e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d1e6:	f242 0401 	movw	r4, #8193	@ 0x2001
 800d1ea:	42a0      	cmp	r0, r4
 800d1ec:	f171 0100 	sbcs.w	r1, r1, #0
 800d1f0:	f082 8148 	bcs.w	800f484 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800d1f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d1f8:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 800d1fc:	4321      	orrs	r1, r4
 800d1fe:	f000 871e 	beq.w	800e03e <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 800d202:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d206:	f241 0401 	movw	r4, #4097	@ 0x1001
 800d20a:	42a0      	cmp	r0, r4
 800d20c:	f171 0100 	sbcs.w	r1, r1, #0
 800d210:	f082 8138 	bcs.w	800f484 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800d214:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d218:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 800d21c:	4321      	orrs	r1, r4
 800d21e:	f000 86a8 	beq.w	800df72 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 800d222:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d226:	f640 0401 	movw	r4, #2049	@ 0x801
 800d22a:	42a0      	cmp	r0, r4
 800d22c:	f171 0100 	sbcs.w	r1, r1, #0
 800d230:	f082 8128 	bcs.w	800f484 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800d234:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d238:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 800d23c:	4321      	orrs	r1, r4
 800d23e:	f000 8632 	beq.w	800dea6 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 800d242:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d246:	f240 4401 	movw	r4, #1025	@ 0x401
 800d24a:	42a0      	cmp	r0, r4
 800d24c:	f171 0100 	sbcs.w	r1, r1, #0
 800d250:	f082 8118 	bcs.w	800f484 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800d254:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d258:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 800d25c:	4321      	orrs	r1, r4
 800d25e:	f000 85b0 	beq.w	800ddc2 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 800d262:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d266:	f240 2401 	movw	r4, #513	@ 0x201
 800d26a:	42a0      	cmp	r0, r4
 800d26c:	f171 0100 	sbcs.w	r1, r1, #0
 800d270:	f082 8108 	bcs.w	800f484 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800d274:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d278:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 800d27c:	4321      	orrs	r1, r4
 800d27e:	f000 8535 	beq.w	800dcec <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 800d282:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d286:	f240 1401 	movw	r4, #257	@ 0x101
 800d28a:	42a0      	cmp	r0, r4
 800d28c:	f171 0100 	sbcs.w	r1, r1, #0
 800d290:	f082 80f8 	bcs.w	800f484 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800d294:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d298:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 800d29c:	4321      	orrs	r1, r4
 800d29e:	f000 84ba 	beq.w	800dc16 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 800d2a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d2a6:	2881      	cmp	r0, #129	@ 0x81
 800d2a8:	f171 0100 	sbcs.w	r1, r1, #0
 800d2ac:	f082 80ea 	bcs.w	800f484 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800d2b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d2b4:	2821      	cmp	r0, #33	@ 0x21
 800d2b6:	f171 0100 	sbcs.w	r1, r1, #0
 800d2ba:	d26f      	bcs.n	800d39c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800d2bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d2c0:	4301      	orrs	r1, r0
 800d2c2:	f002 80df 	beq.w	800f484 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800d2c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d2ca:	1e42      	subs	r2, r0, #1
 800d2cc:	f141 33ff 	adc.w	r3, r1, #4294967295
 800d2d0:	2a20      	cmp	r2, #32
 800d2d2:	f173 0100 	sbcs.w	r1, r3, #0
 800d2d6:	f082 80d5 	bcs.w	800f484 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800d2da:	2a1f      	cmp	r2, #31
 800d2dc:	f202 80d2 	bhi.w	800f484 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800d2e0:	a101      	add	r1, pc, #4	@ (adr r1, 800d2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 800d2e2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d2e6:	bf00      	nop
 800d2e8:	0800d649 	.word	0x0800d649
 800d2ec:	0800d715 	.word	0x0800d715
 800d2f0:	0800f485 	.word	0x0800f485
 800d2f4:	0800d7d5 	.word	0x0800d7d5
 800d2f8:	0800f485 	.word	0x0800f485
 800d2fc:	0800f485 	.word	0x0800f485
 800d300:	0800f485 	.word	0x0800f485
 800d304:	0800d8a5 	.word	0x0800d8a5
 800d308:	0800f485 	.word	0x0800f485
 800d30c:	0800f485 	.word	0x0800f485
 800d310:	0800f485 	.word	0x0800f485
 800d314:	0800f485 	.word	0x0800f485
 800d318:	0800f485 	.word	0x0800f485
 800d31c:	0800f485 	.word	0x0800f485
 800d320:	0800f485 	.word	0x0800f485
 800d324:	0800d987 	.word	0x0800d987
 800d328:	0800f485 	.word	0x0800f485
 800d32c:	0800f485 	.word	0x0800f485
 800d330:	0800f485 	.word	0x0800f485
 800d334:	0800f485 	.word	0x0800f485
 800d338:	0800f485 	.word	0x0800f485
 800d33c:	0800f485 	.word	0x0800f485
 800d340:	0800f485 	.word	0x0800f485
 800d344:	0800f485 	.word	0x0800f485
 800d348:	0800f485 	.word	0x0800f485
 800d34c:	0800f485 	.word	0x0800f485
 800d350:	0800f485 	.word	0x0800f485
 800d354:	0800f485 	.word	0x0800f485
 800d358:	0800f485 	.word	0x0800f485
 800d35c:	0800f485 	.word	0x0800f485
 800d360:	0800f485 	.word	0x0800f485
 800d364:	0800da5d 	.word	0x0800da5d
 800d368:	80000001 	.word	0x80000001
 800d36c:	40000001 	.word	0x40000001
 800d370:	20000001 	.word	0x20000001
 800d374:	10000001 	.word	0x10000001
 800d378:	08000001 	.word	0x08000001
 800d37c:	04000001 	.word	0x04000001
 800d380:	00800001 	.word	0x00800001
 800d384:	00400001 	.word	0x00400001
 800d388:	00200001 	.word	0x00200001
 800d38c:	00100001 	.word	0x00100001
 800d390:	00080001 	.word	0x00080001
 800d394:	00040001 	.word	0x00040001
 800d398:	00020001 	.word	0x00020001
 800d39c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d3a0:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800d3a4:	430b      	orrs	r3, r1
 800d3a6:	f000 83c4 	beq.w	800db32 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800d3aa:	f002 b86b 	b.w	800f484 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800d3ae:	4ba1      	ldr	r3, [pc, #644]	@ (800d634 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d3b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d3b4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800d3b8:	633b      	str	r3, [r7, #48]	@ 0x30
 800d3ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d3c0:	d036      	beq.n	800d430 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 800d3c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d3c8:	d86b      	bhi.n	800d4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800d3ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3cc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d3d0:	d02b      	beq.n	800d42a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800d3d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3d4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d3d8:	d863      	bhi.n	800d4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800d3da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d3e0:	d01b      	beq.n	800d41a <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800d3e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d3e8:	d85b      	bhi.n	800d4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800d3ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d004      	beq.n	800d3fa <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 800d3f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d3f6:	d008      	beq.n	800d40a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 800d3f8:	e053      	b.n	800d4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d3fa:	f107 0320 	add.w	r3, r7, #32
 800d3fe:	4618      	mov	r0, r3
 800d400:	f7ff f8b4 	bl	800c56c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800d404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d406:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800d408:	e04e      	b.n	800d4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d40a:	f107 0314 	add.w	r3, r7, #20
 800d40e:	4618      	mov	r0, r3
 800d410:	f7ff fa18 	bl	800c844 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800d414:	697b      	ldr	r3, [r7, #20]
 800d416:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800d418:	e046      	b.n	800d4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d41a:	f107 0308 	add.w	r3, r7, #8
 800d41e:	4618      	mov	r0, r3
 800d420:	f7ff fb7c 	bl	800cb1c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800d424:	68bb      	ldr	r3, [r7, #8]
 800d426:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800d428:	e03e      	b.n	800d4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800d42a:	4b83      	ldr	r3, [pc, #524]	@ (800d638 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800d42c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800d42e:	e03b      	b.n	800d4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d430:	4b80      	ldr	r3, [pc, #512]	@ (800d634 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d432:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d436:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800d43a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d43c:	4b7d      	ldr	r3, [pc, #500]	@ (800d634 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	f003 0302 	and.w	r3, r3, #2
 800d444:	2b02      	cmp	r3, #2
 800d446:	d10c      	bne.n	800d462 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800d448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d109      	bne.n	800d462 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d44e:	4b79      	ldr	r3, [pc, #484]	@ (800d634 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	08db      	lsrs	r3, r3, #3
 800d454:	f003 0303 	and.w	r3, r3, #3
 800d458:	4a78      	ldr	r2, [pc, #480]	@ (800d63c <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800d45a:	fa22 f303 	lsr.w	r3, r2, r3
 800d45e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d460:	e01e      	b.n	800d4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d462:	4b74      	ldr	r3, [pc, #464]	@ (800d634 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d46a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d46e:	d106      	bne.n	800d47e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800d470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d472:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d476:	d102      	bne.n	800d47e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800d478:	4b71      	ldr	r3, [pc, #452]	@ (800d640 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800d47a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d47c:	e010      	b.n	800d4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d47e:	4b6d      	ldr	r3, [pc, #436]	@ (800d634 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d486:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d48a:	d106      	bne.n	800d49a <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 800d48c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d48e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d492:	d102      	bne.n	800d49a <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800d494:	4b6b      	ldr	r3, [pc, #428]	@ (800d644 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800d496:	637b      	str	r3, [r7, #52]	@ 0x34
 800d498:	e002      	b.n	800d4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800d49a:	2300      	movs	r3, #0
 800d49c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800d49e:	e003      	b.n	800d4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 800d4a0:	e002      	b.n	800d4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800d4a6:	bf00      	nop
          }
        }
        break;
 800d4a8:	f001 bfef 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800d4ac:	4b61      	ldr	r3, [pc, #388]	@ (800d634 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d4ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d4b2:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 800d4b6:	633b      	str	r3, [r7, #48]	@ 0x30
 800d4b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d4be:	d036      	beq.n	800d52e <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 800d4c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d4c6:	d86b      	bhi.n	800d5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800d4c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4ca:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800d4ce:	d02b      	beq.n	800d528 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800d4d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4d2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800d4d6:	d863      	bhi.n	800d5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800d4d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d4de:	d01b      	beq.n	800d518 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800d4e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d4e6:	d85b      	bhi.n	800d5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800d4e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d004      	beq.n	800d4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800d4ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4f0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800d4f4:	d008      	beq.n	800d508 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 800d4f6:	e053      	b.n	800d5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d4f8:	f107 0320 	add.w	r3, r7, #32
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f7ff f835 	bl	800c56c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800d502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d504:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800d506:	e04e      	b.n	800d5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d508:	f107 0314 	add.w	r3, r7, #20
 800d50c:	4618      	mov	r0, r3
 800d50e:	f7ff f999 	bl	800c844 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800d516:	e046      	b.n	800d5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d518:	f107 0308 	add.w	r3, r7, #8
 800d51c:	4618      	mov	r0, r3
 800d51e:	f7ff fafd 	bl	800cb1c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800d522:	68bb      	ldr	r3, [r7, #8]
 800d524:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800d526:	e03e      	b.n	800d5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800d528:	4b43      	ldr	r3, [pc, #268]	@ (800d638 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800d52a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800d52c:	e03b      	b.n	800d5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d52e:	4b41      	ldr	r3, [pc, #260]	@ (800d634 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d530:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d534:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800d538:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d53a:	4b3e      	ldr	r3, [pc, #248]	@ (800d634 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	f003 0302 	and.w	r3, r3, #2
 800d542:	2b02      	cmp	r3, #2
 800d544:	d10c      	bne.n	800d560 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 800d546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d109      	bne.n	800d560 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d54c:	4b39      	ldr	r3, [pc, #228]	@ (800d634 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	08db      	lsrs	r3, r3, #3
 800d552:	f003 0303 	and.w	r3, r3, #3
 800d556:	4a39      	ldr	r2, [pc, #228]	@ (800d63c <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800d558:	fa22 f303 	lsr.w	r3, r2, r3
 800d55c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d55e:	e01e      	b.n	800d59e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d560:	4b34      	ldr	r3, [pc, #208]	@ (800d634 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d568:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d56c:	d106      	bne.n	800d57c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800d56e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d570:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d574:	d102      	bne.n	800d57c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800d576:	4b32      	ldr	r3, [pc, #200]	@ (800d640 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800d578:	637b      	str	r3, [r7, #52]	@ 0x34
 800d57a:	e010      	b.n	800d59e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d57c:	4b2d      	ldr	r3, [pc, #180]	@ (800d634 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d584:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d588:	d106      	bne.n	800d598 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 800d58a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d58c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d590:	d102      	bne.n	800d598 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800d592:	4b2c      	ldr	r3, [pc, #176]	@ (800d644 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800d594:	637b      	str	r3, [r7, #52]	@ 0x34
 800d596:	e002      	b.n	800d59e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800d598:	2300      	movs	r3, #0
 800d59a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800d59c:	e003      	b.n	800d5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 800d59e:	e002      	b.n	800d5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800d5a4:	bf00      	nop
          }
        }
        break;
 800d5a6:	f001 bf70 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 800d5aa:	4b22      	ldr	r3, [pc, #136]	@ (800d634 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d5ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d5b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d5b4:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 800d5b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d108      	bne.n	800d5ce <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d5bc:	f107 0320 	add.w	r3, r7, #32
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	f7fe ffd3 	bl	800c56c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d5c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5c8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d5ca:	f001 bf5e 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 800d5ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5d0:	2b40      	cmp	r3, #64	@ 0x40
 800d5d2:	d108      	bne.n	800d5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d5d4:	f107 0314 	add.w	r3, r7, #20
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f7ff f933 	bl	800c844 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d5de:	69fb      	ldr	r3, [r7, #28]
 800d5e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d5e2:	f001 bf52 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d5ea:	f001 bf4e 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 800d5ee:	4b11      	ldr	r3, [pc, #68]	@ (800d634 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800d5f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d5f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d5f8:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 800d5fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d108      	bne.n	800d612 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d600:	f107 0320 	add.w	r3, r7, #32
 800d604:	4618      	mov	r0, r3
 800d606:	f7fe ffb1 	bl	800c56c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d60a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d60c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800d60e:	f001 bf3c 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 800d612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d614:	2b80      	cmp	r3, #128	@ 0x80
 800d616:	d108      	bne.n	800d62a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d618:	f107 0314 	add.w	r3, r7, #20
 800d61c:	4618      	mov	r0, r3
 800d61e:	f7ff f911 	bl	800c844 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d622:	69fb      	ldr	r3, [r7, #28]
 800d624:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d626:	f001 bf30 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800d62a:	2300      	movs	r3, #0
 800d62c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d62e:	f001 bf2c 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d632:	bf00      	nop
 800d634:	44020c00 	.word	0x44020c00
 800d638:	00bb8000 	.word	0x00bb8000
 800d63c:	03d09000 	.word	0x03d09000
 800d640:	003d0900 	.word	0x003d0900
 800d644:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800d648:	4b9d      	ldr	r3, [pc, #628]	@ (800d8c0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800d64a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d64e:	f003 0307 	and.w	r3, r3, #7
 800d652:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800d654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d656:	2b00      	cmp	r3, #0
 800d658:	d104      	bne.n	800d664 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800d65a:	f7fc ffd1 	bl	800a600 <HAL_RCC_GetPCLK2Freq>
 800d65e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800d660:	f001 bf13 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800d664:	4b96      	ldr	r3, [pc, #600]	@ (800d8c0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d66c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d670:	d10a      	bne.n	800d688 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 800d672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d674:	2b01      	cmp	r3, #1
 800d676:	d107      	bne.n	800d688 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d678:	f107 0314 	add.w	r3, r7, #20
 800d67c:	4618      	mov	r0, r3
 800d67e:	f7ff f8e1 	bl	800c844 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d682:	69bb      	ldr	r3, [r7, #24]
 800d684:	637b      	str	r3, [r7, #52]	@ 0x34
 800d686:	e043      	b.n	800d710 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 800d688:	4b8d      	ldr	r3, [pc, #564]	@ (800d8c0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d690:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d694:	d10a      	bne.n	800d6ac <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 800d696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d698:	2b02      	cmp	r3, #2
 800d69a:	d107      	bne.n	800d6ac <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d69c:	f107 0308 	add.w	r3, r7, #8
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	f7ff fa3b 	bl	800cb1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6aa:	e031      	b.n	800d710 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800d6ac:	4b84      	ldr	r3, [pc, #528]	@ (800d8c0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	f003 0302 	and.w	r3, r3, #2
 800d6b4:	2b02      	cmp	r3, #2
 800d6b6:	d10c      	bne.n	800d6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800d6b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6ba:	2b03      	cmp	r3, #3
 800d6bc:	d109      	bne.n	800d6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d6be:	4b80      	ldr	r3, [pc, #512]	@ (800d8c0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	08db      	lsrs	r3, r3, #3
 800d6c4:	f003 0303 	and.w	r3, r3, #3
 800d6c8:	4a7e      	ldr	r2, [pc, #504]	@ (800d8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800d6ca:	fa22 f303 	lsr.w	r3, r2, r3
 800d6ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6d0:	e01e      	b.n	800d710 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 800d6d2:	4b7b      	ldr	r3, [pc, #492]	@ (800d8c0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d6da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d6de:	d105      	bne.n	800d6ec <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 800d6e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6e2:	2b04      	cmp	r3, #4
 800d6e4:	d102      	bne.n	800d6ec <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 800d6e6:	4b78      	ldr	r3, [pc, #480]	@ (800d8c8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800d6e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6ea:	e011      	b.n	800d710 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800d6ec:	4b74      	ldr	r3, [pc, #464]	@ (800d8c0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800d6ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d6f2:	f003 0302 	and.w	r3, r3, #2
 800d6f6:	2b02      	cmp	r3, #2
 800d6f8:	d106      	bne.n	800d708 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800d6fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6fc:	2b05      	cmp	r3, #5
 800d6fe:	d103      	bne.n	800d708 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 800d700:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d704:	637b      	str	r3, [r7, #52]	@ 0x34
 800d706:	e003      	b.n	800d710 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 800d708:	2300      	movs	r3, #0
 800d70a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d70c:	f001 bebd 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d710:	f001 bebb 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800d714:	4b6a      	ldr	r3, [pc, #424]	@ (800d8c0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800d716:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d71a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d71e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800d720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d722:	2b00      	cmp	r3, #0
 800d724:	d104      	bne.n	800d730 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800d726:	f7fc ff55 	bl	800a5d4 <HAL_RCC_GetPCLK1Freq>
 800d72a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 800d72c:	f001 bead 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 800d730:	4b63      	ldr	r3, [pc, #396]	@ (800d8c0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d738:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d73c:	d10a      	bne.n	800d754 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800d73e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d740:	2b08      	cmp	r3, #8
 800d742:	d107      	bne.n	800d754 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d744:	f107 0314 	add.w	r3, r7, #20
 800d748:	4618      	mov	r0, r3
 800d74a:	f7ff f87b 	bl	800c844 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d74e:	69bb      	ldr	r3, [r7, #24]
 800d750:	637b      	str	r3, [r7, #52]	@ 0x34
 800d752:	e03d      	b.n	800d7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 800d754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d756:	2b10      	cmp	r3, #16
 800d758:	d108      	bne.n	800d76c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d75a:	f107 0308 	add.w	r3, r7, #8
 800d75e:	4618      	mov	r0, r3
 800d760:	f7ff f9dc 	bl	800cb1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d768:	f001 be8f 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800d76c:	4b54      	ldr	r3, [pc, #336]	@ (800d8c0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	f003 0302 	and.w	r3, r3, #2
 800d774:	2b02      	cmp	r3, #2
 800d776:	d10c      	bne.n	800d792 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800d778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d77a:	2b18      	cmp	r3, #24
 800d77c:	d109      	bne.n	800d792 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d77e:	4b50      	ldr	r3, [pc, #320]	@ (800d8c0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	08db      	lsrs	r3, r3, #3
 800d784:	f003 0303 	and.w	r3, r3, #3
 800d788:	4a4e      	ldr	r2, [pc, #312]	@ (800d8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800d78a:	fa22 f303 	lsr.w	r3, r2, r3
 800d78e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d790:	e01e      	b.n	800d7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800d792:	4b4b      	ldr	r3, [pc, #300]	@ (800d8c0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d79a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d79e:	d105      	bne.n	800d7ac <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800d7a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7a2:	2b20      	cmp	r3, #32
 800d7a4:	d102      	bne.n	800d7ac <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 800d7a6:	4b48      	ldr	r3, [pc, #288]	@ (800d8c8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800d7a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d7aa:	e011      	b.n	800d7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800d7ac:	4b44      	ldr	r3, [pc, #272]	@ (800d8c0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800d7ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d7b2:	f003 0302 	and.w	r3, r3, #2
 800d7b6:	2b02      	cmp	r3, #2
 800d7b8:	d106      	bne.n	800d7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 800d7ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7bc:	2b28      	cmp	r3, #40	@ 0x28
 800d7be:	d103      	bne.n	800d7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 800d7c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d7c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d7c6:	e003      	b.n	800d7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d7cc:	f001 be5d 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d7d0:	f001 be5b 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800d7d4:	4b3a      	ldr	r3, [pc, #232]	@ (800d8c0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800d7d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d7da:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800d7de:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800d7e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d104      	bne.n	800d7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800d7e6:	f7fc fef5 	bl	800a5d4 <HAL_RCC_GetPCLK1Freq>
 800d7ea:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 800d7ec:	f001 be4d 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 800d7f0:	4b33      	ldr	r3, [pc, #204]	@ (800d8c0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d7f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d7fc:	d10a      	bne.n	800d814 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800d7fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d800:	2b40      	cmp	r3, #64	@ 0x40
 800d802:	d107      	bne.n	800d814 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d804:	f107 0314 	add.w	r3, r7, #20
 800d808:	4618      	mov	r0, r3
 800d80a:	f7ff f81b 	bl	800c844 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d80e:	69bb      	ldr	r3, [r7, #24]
 800d810:	637b      	str	r3, [r7, #52]	@ 0x34
 800d812:	e045      	b.n	800d8a0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 800d814:	4b2a      	ldr	r3, [pc, #168]	@ (800d8c0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d81c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d820:	d10a      	bne.n	800d838 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 800d822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d824:	2b80      	cmp	r3, #128	@ 0x80
 800d826:	d107      	bne.n	800d838 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d828:	f107 0308 	add.w	r3, r7, #8
 800d82c:	4618      	mov	r0, r3
 800d82e:	f7ff f975 	bl	800cb1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	637b      	str	r3, [r7, #52]	@ 0x34
 800d836:	e033      	b.n	800d8a0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800d838:	4b21      	ldr	r3, [pc, #132]	@ (800d8c0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	f003 0302 	and.w	r3, r3, #2
 800d840:	2b02      	cmp	r3, #2
 800d842:	d10c      	bne.n	800d85e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 800d844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d846:	2bc0      	cmp	r3, #192	@ 0xc0
 800d848:	d109      	bne.n	800d85e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d84a:	4b1d      	ldr	r3, [pc, #116]	@ (800d8c0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	08db      	lsrs	r3, r3, #3
 800d850:	f003 0303 	and.w	r3, r3, #3
 800d854:	4a1b      	ldr	r2, [pc, #108]	@ (800d8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800d856:	fa22 f303 	lsr.w	r3, r2, r3
 800d85a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d85c:	e020      	b.n	800d8a0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800d85e:	4b18      	ldr	r3, [pc, #96]	@ (800d8c0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d866:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d86a:	d106      	bne.n	800d87a <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 800d86c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d86e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d872:	d102      	bne.n	800d87a <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 800d874:	4b14      	ldr	r3, [pc, #80]	@ (800d8c8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800d876:	637b      	str	r3, [r7, #52]	@ 0x34
 800d878:	e012      	b.n	800d8a0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800d87a:	4b11      	ldr	r3, [pc, #68]	@ (800d8c0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800d87c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d880:	f003 0302 	and.w	r3, r3, #2
 800d884:	2b02      	cmp	r3, #2
 800d886:	d107      	bne.n	800d898 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 800d888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d88a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800d88e:	d103      	bne.n	800d898 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 800d890:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d894:	637b      	str	r3, [r7, #52]	@ 0x34
 800d896:	e003      	b.n	800d8a0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 800d898:	2300      	movs	r3, #0
 800d89a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d89c:	f001 bdf5 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d8a0:	f001 bdf3 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800d8a4:	4b06      	ldr	r3, [pc, #24]	@ (800d8c0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800d8a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d8aa:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800d8ae:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800d8b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d10a      	bne.n	800d8cc <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800d8b6:	f7fc fe8d 	bl	800a5d4 <HAL_RCC_GetPCLK1Freq>
 800d8ba:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 800d8bc:	f001 bde5 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d8c0:	44020c00 	.word	0x44020c00
 800d8c4:	03d09000 	.word	0x03d09000
 800d8c8:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 800d8cc:	4ba0      	ldr	r3, [pc, #640]	@ (800db50 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d8d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d8d8:	d10b      	bne.n	800d8f2 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 800d8da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d8e0:	d107      	bne.n	800d8f2 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d8e2:	f107 0314 	add.w	r3, r7, #20
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	f7fe ffac 	bl	800c844 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d8ec:	69bb      	ldr	r3, [r7, #24]
 800d8ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800d8f0:	e047      	b.n	800d982 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 800d8f2:	4b97      	ldr	r3, [pc, #604]	@ (800db50 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d8fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d8fe:	d10b      	bne.n	800d918 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 800d900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d902:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d906:	d107      	bne.n	800d918 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d908:	f107 0308 	add.w	r3, r7, #8
 800d90c:	4618      	mov	r0, r3
 800d90e:	f7ff f905 	bl	800cb1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	637b      	str	r3, [r7, #52]	@ 0x34
 800d916:	e034      	b.n	800d982 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800d918:	4b8d      	ldr	r3, [pc, #564]	@ (800db50 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	f003 0302 	and.w	r3, r3, #2
 800d920:	2b02      	cmp	r3, #2
 800d922:	d10d      	bne.n	800d940 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 800d924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d926:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800d92a:	d109      	bne.n	800d940 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d92c:	4b88      	ldr	r3, [pc, #544]	@ (800db50 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	08db      	lsrs	r3, r3, #3
 800d932:	f003 0303 	and.w	r3, r3, #3
 800d936:	4a87      	ldr	r2, [pc, #540]	@ (800db54 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800d938:	fa22 f303 	lsr.w	r3, r2, r3
 800d93c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d93e:	e020      	b.n	800d982 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 800d940:	4b83      	ldr	r3, [pc, #524]	@ (800db50 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d948:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d94c:	d106      	bne.n	800d95c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800d94e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d950:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d954:	d102      	bne.n	800d95c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 800d956:	4b80      	ldr	r3, [pc, #512]	@ (800db58 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800d958:	637b      	str	r3, [r7, #52]	@ 0x34
 800d95a:	e012      	b.n	800d982 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800d95c:	4b7c      	ldr	r3, [pc, #496]	@ (800db50 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d95e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d962:	f003 0302 	and.w	r3, r3, #2
 800d966:	2b02      	cmp	r3, #2
 800d968:	d107      	bne.n	800d97a <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800d96a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d96c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800d970:	d103      	bne.n	800d97a <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 800d972:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d976:	637b      	str	r3, [r7, #52]	@ 0x34
 800d978:	e003      	b.n	800d982 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 800d97a:	2300      	movs	r3, #0
 800d97c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d97e:	f001 bd84 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d982:	f001 bd82 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800d986:	4b72      	ldr	r3, [pc, #456]	@ (800db50 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d988:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d98c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800d990:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800d992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d994:	2b00      	cmp	r3, #0
 800d996:	d104      	bne.n	800d9a2 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800d998:	f7fc fe1c 	bl	800a5d4 <HAL_RCC_GetPCLK1Freq>
 800d99c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 800d99e:	f001 bd74 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 800d9a2:	4b6b      	ldr	r3, [pc, #428]	@ (800db50 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d9aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d9ae:	d10b      	bne.n	800d9c8 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800d9b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d9b6:	d107      	bne.n	800d9c8 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d9b8:	f107 0314 	add.w	r3, r7, #20
 800d9bc:	4618      	mov	r0, r3
 800d9be:	f7fe ff41 	bl	800c844 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d9c2:	69bb      	ldr	r3, [r7, #24]
 800d9c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d9c6:	e047      	b.n	800da58 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 800d9c8:	4b61      	ldr	r3, [pc, #388]	@ (800db50 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d9d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d9d4:	d10b      	bne.n	800d9ee <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800d9d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d9dc:	d107      	bne.n	800d9ee <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d9de:	f107 0308 	add.w	r3, r7, #8
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f7ff f89a 	bl	800cb1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800d9ec:	e034      	b.n	800da58 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800d9ee:	4b58      	ldr	r3, [pc, #352]	@ (800db50 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	f003 0302 	and.w	r3, r3, #2
 800d9f6:	2b02      	cmp	r3, #2
 800d9f8:	d10d      	bne.n	800da16 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800d9fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9fc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800da00:	d109      	bne.n	800da16 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800da02:	4b53      	ldr	r3, [pc, #332]	@ (800db50 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	08db      	lsrs	r3, r3, #3
 800da08:	f003 0303 	and.w	r3, r3, #3
 800da0c:	4a51      	ldr	r2, [pc, #324]	@ (800db54 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800da0e:	fa22 f303 	lsr.w	r3, r2, r3
 800da12:	637b      	str	r3, [r7, #52]	@ 0x34
 800da14:	e020      	b.n	800da58 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800da16:	4b4e      	ldr	r3, [pc, #312]	@ (800db50 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800da1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800da22:	d106      	bne.n	800da32 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800da24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da26:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800da2a:	d102      	bne.n	800da32 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 800da2c:	4b4a      	ldr	r3, [pc, #296]	@ (800db58 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800da2e:	637b      	str	r3, [r7, #52]	@ 0x34
 800da30:	e012      	b.n	800da58 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800da32:	4b47      	ldr	r3, [pc, #284]	@ (800db50 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800da34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800da38:	f003 0302 	and.w	r3, r3, #2
 800da3c:	2b02      	cmp	r3, #2
 800da3e:	d107      	bne.n	800da50 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800da40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da42:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800da46:	d103      	bne.n	800da50 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 800da48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800da4c:	637b      	str	r3, [r7, #52]	@ 0x34
 800da4e:	e003      	b.n	800da58 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 800da50:	2300      	movs	r3, #0
 800da52:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800da54:	f001 bd19 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800da58:	f001 bd17 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800da5c:	4b3c      	ldr	r3, [pc, #240]	@ (800db50 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800da5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800da62:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800da66:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800da68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d104      	bne.n	800da78 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800da6e:	f7fc fdb1 	bl	800a5d4 <HAL_RCC_GetPCLK1Freq>
 800da72:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 800da74:	f001 bd09 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 800da78:	4b35      	ldr	r3, [pc, #212]	@ (800db50 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800da80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800da84:	d10b      	bne.n	800da9e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800da86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800da8c:	d107      	bne.n	800da9e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800da8e:	f107 0314 	add.w	r3, r7, #20
 800da92:	4618      	mov	r0, r3
 800da94:	f7fe fed6 	bl	800c844 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800da98:	69bb      	ldr	r3, [r7, #24]
 800da9a:	637b      	str	r3, [r7, #52]	@ 0x34
 800da9c:	e047      	b.n	800db2e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 800da9e:	4b2c      	ldr	r3, [pc, #176]	@ (800db50 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800daa6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800daaa:	d10b      	bne.n	800dac4 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 800daac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dab2:	d107      	bne.n	800dac4 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dab4:	f107 0308 	add.w	r3, r7, #8
 800dab8:	4618      	mov	r0, r3
 800daba:	f7ff f82f 	bl	800cb1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	637b      	str	r3, [r7, #52]	@ 0x34
 800dac2:	e034      	b.n	800db2e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800dac4:	4b22      	ldr	r3, [pc, #136]	@ (800db50 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	f003 0302 	and.w	r3, r3, #2
 800dacc:	2b02      	cmp	r3, #2
 800dace:	d10d      	bne.n	800daec <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 800dad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dad2:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800dad6:	d109      	bne.n	800daec <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800dad8:	4b1d      	ldr	r3, [pc, #116]	@ (800db50 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	08db      	lsrs	r3, r3, #3
 800dade:	f003 0303 	and.w	r3, r3, #3
 800dae2:	4a1c      	ldr	r2, [pc, #112]	@ (800db54 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800dae4:	fa22 f303 	lsr.w	r3, r2, r3
 800dae8:	637b      	str	r3, [r7, #52]	@ 0x34
 800daea:	e020      	b.n	800db2e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 800daec:	4b18      	ldr	r3, [pc, #96]	@ (800db50 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800daf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800daf8:	d106      	bne.n	800db08 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800dafa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dafc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800db00:	d102      	bne.n	800db08 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 800db02:	4b15      	ldr	r3, [pc, #84]	@ (800db58 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800db04:	637b      	str	r3, [r7, #52]	@ 0x34
 800db06:	e012      	b.n	800db2e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800db08:	4b11      	ldr	r3, [pc, #68]	@ (800db50 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800db0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800db0e:	f003 0302 	and.w	r3, r3, #2
 800db12:	2b02      	cmp	r3, #2
 800db14:	d107      	bne.n	800db26 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800db16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db18:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800db1c:	d103      	bne.n	800db26 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 800db1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800db22:	637b      	str	r3, [r7, #52]	@ 0x34
 800db24:	e003      	b.n	800db2e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 800db26:	2300      	movs	r3, #0
 800db28:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800db2a:	f001 bcae 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800db2e:	f001 bcac 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 800db32:	4b07      	ldr	r3, [pc, #28]	@ (800db50 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800db34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800db38:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 800db3c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 800db3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db40:	2b00      	cmp	r3, #0
 800db42:	d10b      	bne.n	800db5c <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800db44:	f7fc fd46 	bl	800a5d4 <HAL_RCC_GetPCLK1Freq>
 800db48:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 800db4a:	f001 bc9e 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800db4e:	bf00      	nop
 800db50:	44020c00 	.word	0x44020c00
 800db54:	03d09000 	.word	0x03d09000
 800db58:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 800db5c:	4ba0      	ldr	r3, [pc, #640]	@ (800dde0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800db64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800db68:	d10b      	bne.n	800db82 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 800db6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db6c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800db70:	d107      	bne.n	800db82 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800db72:	f107 0314 	add.w	r3, r7, #20
 800db76:	4618      	mov	r0, r3
 800db78:	f7fe fe64 	bl	800c844 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800db7c:	69bb      	ldr	r3, [r7, #24]
 800db7e:	637b      	str	r3, [r7, #52]	@ 0x34
 800db80:	e047      	b.n	800dc12 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 800db82:	4b97      	ldr	r3, [pc, #604]	@ (800dde0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800db8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800db8e:	d10b      	bne.n	800dba8 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800db90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db92:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800db96:	d107      	bne.n	800dba8 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800db98:	f107 0308 	add.w	r3, r7, #8
 800db9c:	4618      	mov	r0, r3
 800db9e:	f7fe ffbd 	bl	800cb1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	637b      	str	r3, [r7, #52]	@ 0x34
 800dba6:	e034      	b.n	800dc12 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 800dba8:	4b8d      	ldr	r3, [pc, #564]	@ (800dde0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	f003 0302 	and.w	r3, r3, #2
 800dbb0:	2b02      	cmp	r3, #2
 800dbb2:	d10d      	bne.n	800dbd0 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 800dbb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbb6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800dbba:	d109      	bne.n	800dbd0 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800dbbc:	4b88      	ldr	r3, [pc, #544]	@ (800dde0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	08db      	lsrs	r3, r3, #3
 800dbc2:	f003 0303 	and.w	r3, r3, #3
 800dbc6:	4a87      	ldr	r2, [pc, #540]	@ (800dde4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800dbc8:	fa22 f303 	lsr.w	r3, r2, r3
 800dbcc:	637b      	str	r3, [r7, #52]	@ 0x34
 800dbce:	e020      	b.n	800dc12 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 800dbd0:	4b83      	ldr	r3, [pc, #524]	@ (800dde0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800dbd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dbdc:	d106      	bne.n	800dbec <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800dbde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbe0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dbe4:	d102      	bne.n	800dbec <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 800dbe6:	4b80      	ldr	r3, [pc, #512]	@ (800dde8 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800dbe8:	637b      	str	r3, [r7, #52]	@ 0x34
 800dbea:	e012      	b.n	800dc12 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 800dbec:	4b7c      	ldr	r3, [pc, #496]	@ (800dde0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800dbee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800dbf2:	f003 0302 	and.w	r3, r3, #2
 800dbf6:	2b02      	cmp	r3, #2
 800dbf8:	d107      	bne.n	800dc0a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 800dbfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbfc:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800dc00:	d103      	bne.n	800dc0a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 800dc02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dc06:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc08:	e003      	b.n	800dc12 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dc0e:	f001 bc3c 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800dc12:	f001 bc3a 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 800dc16:	4b72      	ldr	r3, [pc, #456]	@ (800dde0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800dc18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800dc1c:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800dc20:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 800dc22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d104      	bne.n	800dc32 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800dc28:	f7fc fcd4 	bl	800a5d4 <HAL_RCC_GetPCLK1Freq>
 800dc2c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 800dc2e:	f001 bc2c 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 800dc32:	4b6b      	ldr	r3, [pc, #428]	@ (800dde0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dc3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800dc3e:	d10b      	bne.n	800dc58 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800dc40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dc46:	d107      	bne.n	800dc58 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dc48:	f107 0314 	add.w	r3, r7, #20
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	f7fe fdf9 	bl	800c844 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800dc52:	69bb      	ldr	r3, [r7, #24]
 800dc54:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc56:	e047      	b.n	800dce8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 800dc58:	4b61      	ldr	r3, [pc, #388]	@ (800dde0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800dc60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dc64:	d10b      	bne.n	800dc7e <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 800dc66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800dc6c:	d107      	bne.n	800dc7e <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dc6e:	f107 0308 	add.w	r3, r7, #8
 800dc72:	4618      	mov	r0, r3
 800dc74:	f7fe ff52 	bl	800cb1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc7c:	e034      	b.n	800dce8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 800dc7e:	4b58      	ldr	r3, [pc, #352]	@ (800dde0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	f003 0302 	and.w	r3, r3, #2
 800dc86:	2b02      	cmp	r3, #2
 800dc88:	d10d      	bne.n	800dca6 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 800dc8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc8c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800dc90:	d109      	bne.n	800dca6 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800dc92:	4b53      	ldr	r3, [pc, #332]	@ (800dde0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	08db      	lsrs	r3, r3, #3
 800dc98:	f003 0303 	and.w	r3, r3, #3
 800dc9c:	4a51      	ldr	r2, [pc, #324]	@ (800dde4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800dc9e:	fa22 f303 	lsr.w	r3, r2, r3
 800dca2:	637b      	str	r3, [r7, #52]	@ 0x34
 800dca4:	e020      	b.n	800dce8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 800dca6:	4b4e      	ldr	r3, [pc, #312]	@ (800dde0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800dcae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dcb2:	d106      	bne.n	800dcc2 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 800dcb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcb6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800dcba:	d102      	bne.n	800dcc2 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 800dcbc:	4b4a      	ldr	r3, [pc, #296]	@ (800dde8 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800dcbe:	637b      	str	r3, [r7, #52]	@ 0x34
 800dcc0:	e012      	b.n	800dce8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 800dcc2:	4b47      	ldr	r3, [pc, #284]	@ (800dde0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800dcc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800dcc8:	f003 0302 	and.w	r3, r3, #2
 800dccc:	2b02      	cmp	r3, #2
 800dcce:	d107      	bne.n	800dce0 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 800dcd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcd2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800dcd6:	d103      	bne.n	800dce0 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 800dcd8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dcdc:	637b      	str	r3, [r7, #52]	@ 0x34
 800dcde:	e003      	b.n	800dce8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 800dce0:	2300      	movs	r3, #0
 800dce2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dce4:	f001 bbd1 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800dce8:	f001 bbcf 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 800dcec:	4b3c      	ldr	r3, [pc, #240]	@ (800dde0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800dcee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800dcf2:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800dcf6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 800dcf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d104      	bne.n	800dd08 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800dcfe:	f7fc fc69 	bl	800a5d4 <HAL_RCC_GetPCLK1Freq>
 800dd02:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 800dd04:	f001 bbc1 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 800dd08:	4b35      	ldr	r3, [pc, #212]	@ (800dde0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dd10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800dd14:	d10b      	bne.n	800dd2e <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 800dd16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dd1c:	d107      	bne.n	800dd2e <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dd1e:	f107 0314 	add.w	r3, r7, #20
 800dd22:	4618      	mov	r0, r3
 800dd24:	f7fe fd8e 	bl	800c844 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800dd28:	69bb      	ldr	r3, [r7, #24]
 800dd2a:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd2c:	e047      	b.n	800ddbe <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 800dd2e:	4b2c      	ldr	r3, [pc, #176]	@ (800dde0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800dd36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dd3a:	d10b      	bne.n	800dd54 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 800dd3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dd42:	d107      	bne.n	800dd54 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dd44:	f107 0308 	add.w	r3, r7, #8
 800dd48:	4618      	mov	r0, r3
 800dd4a:	f7fe fee7 	bl	800cb1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd52:	e034      	b.n	800ddbe <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 800dd54:	4b22      	ldr	r3, [pc, #136]	@ (800dde0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	f003 0302 	and.w	r3, r3, #2
 800dd5c:	2b02      	cmp	r3, #2
 800dd5e:	d10d      	bne.n	800dd7c <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 800dd60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd62:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800dd66:	d109      	bne.n	800dd7c <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800dd68:	4b1d      	ldr	r3, [pc, #116]	@ (800dde0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	08db      	lsrs	r3, r3, #3
 800dd6e:	f003 0303 	and.w	r3, r3, #3
 800dd72:	4a1c      	ldr	r2, [pc, #112]	@ (800dde4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800dd74:	fa22 f303 	lsr.w	r3, r2, r3
 800dd78:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd7a:	e020      	b.n	800ddbe <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 800dd7c:	4b18      	ldr	r3, [pc, #96]	@ (800dde0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800dd84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dd88:	d106      	bne.n	800dd98 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 800dd8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd8c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800dd90:	d102      	bne.n	800dd98 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 800dd92:	4b15      	ldr	r3, [pc, #84]	@ (800dde8 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800dd94:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd96:	e012      	b.n	800ddbe <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 800dd98:	4b11      	ldr	r3, [pc, #68]	@ (800dde0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800dd9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800dd9e:	f003 0302 	and.w	r3, r3, #2
 800dda2:	2b02      	cmp	r3, #2
 800dda4:	d107      	bne.n	800ddb6 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 800dda6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dda8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800ddac:	d103      	bne.n	800ddb6 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 800ddae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ddb2:	637b      	str	r3, [r7, #52]	@ 0x34
 800ddb4:	e003      	b.n	800ddbe <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ddba:	f001 bb66 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ddbe:	f001 bb64 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 800ddc2:	4b07      	ldr	r3, [pc, #28]	@ (800dde0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800ddc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ddc8:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 800ddcc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 800ddce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d10b      	bne.n	800ddec <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800ddd4:	f7fc fbfe 	bl	800a5d4 <HAL_RCC_GetPCLK1Freq>
 800ddd8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 800ddda:	f001 bb56 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ddde:	bf00      	nop
 800dde0:	44020c00 	.word	0x44020c00
 800dde4:	03d09000 	.word	0x03d09000
 800dde8:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 800ddec:	4ba1      	ldr	r3, [pc, #644]	@ (800e074 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ddf4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ddf8:	d10b      	bne.n	800de12 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800ddfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddfc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800de00:	d107      	bne.n	800de12 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800de02:	f107 0314 	add.w	r3, r7, #20
 800de06:	4618      	mov	r0, r3
 800de08:	f7fe fd1c 	bl	800c844 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800de0c:	69bb      	ldr	r3, [r7, #24]
 800de0e:	637b      	str	r3, [r7, #52]	@ 0x34
 800de10:	e047      	b.n	800dea2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 800de12:	4b98      	ldr	r3, [pc, #608]	@ (800e074 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800de1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800de1e:	d10b      	bne.n	800de38 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 800de20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800de26:	d107      	bne.n	800de38 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800de28:	f107 0308 	add.w	r3, r7, #8
 800de2c:	4618      	mov	r0, r3
 800de2e:	f7fe fe75 	bl	800cb1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	637b      	str	r3, [r7, #52]	@ 0x34
 800de36:	e034      	b.n	800dea2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 800de38:	4b8e      	ldr	r3, [pc, #568]	@ (800e074 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	f003 0302 	and.w	r3, r3, #2
 800de40:	2b02      	cmp	r3, #2
 800de42:	d10d      	bne.n	800de60 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 800de44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de46:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800de4a:	d109      	bne.n	800de60 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800de4c:	4b89      	ldr	r3, [pc, #548]	@ (800e074 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	08db      	lsrs	r3, r3, #3
 800de52:	f003 0303 	and.w	r3, r3, #3
 800de56:	4a88      	ldr	r2, [pc, #544]	@ (800e078 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800de58:	fa22 f303 	lsr.w	r3, r2, r3
 800de5c:	637b      	str	r3, [r7, #52]	@ 0x34
 800de5e:	e020      	b.n	800dea2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 800de60:	4b84      	ldr	r3, [pc, #528]	@ (800e074 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800de68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800de6c:	d106      	bne.n	800de7c <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 800de6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800de74:	d102      	bne.n	800de7c <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 800de76:	4b81      	ldr	r3, [pc, #516]	@ (800e07c <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800de78:	637b      	str	r3, [r7, #52]	@ 0x34
 800de7a:	e012      	b.n	800dea2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 800de7c:	4b7d      	ldr	r3, [pc, #500]	@ (800e074 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800de7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800de82:	f003 0302 	and.w	r3, r3, #2
 800de86:	2b02      	cmp	r3, #2
 800de88:	d107      	bne.n	800de9a <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 800de8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de8c:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800de90:	d103      	bne.n	800de9a <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 800de92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800de96:	637b      	str	r3, [r7, #52]	@ 0x34
 800de98:	e003      	b.n	800dea2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 800de9a:	2300      	movs	r3, #0
 800de9c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800de9e:	f001 baf4 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800dea2:	f001 baf2 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 800dea6:	4b73      	ldr	r3, [pc, #460]	@ (800e074 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800dea8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800deac:	f003 0307 	and.w	r3, r3, #7
 800deb0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 800deb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d104      	bne.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800deb8:	f7fc fb8c 	bl	800a5d4 <HAL_RCC_GetPCLK1Freq>
 800debc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 800debe:	f001 bae4 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 800dec2:	4b6c      	ldr	r3, [pc, #432]	@ (800e074 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800deca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800dece:	d10a      	bne.n	800dee6 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 800ded0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ded2:	2b01      	cmp	r3, #1
 800ded4:	d107      	bne.n	800dee6 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ded6:	f107 0314 	add.w	r3, r7, #20
 800deda:	4618      	mov	r0, r3
 800dedc:	f7fe fcb2 	bl	800c844 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800dee0:	69bb      	ldr	r3, [r7, #24]
 800dee2:	637b      	str	r3, [r7, #52]	@ 0x34
 800dee4:	e043      	b.n	800df6e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 800dee6:	4b63      	ldr	r3, [pc, #396]	@ (800e074 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800deee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800def2:	d10a      	bne.n	800df0a <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 800def4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800def6:	2b02      	cmp	r3, #2
 800def8:	d107      	bne.n	800df0a <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800defa:	f107 0308 	add.w	r3, r7, #8
 800defe:	4618      	mov	r0, r3
 800df00:	f7fe fe0c 	bl	800cb1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	637b      	str	r3, [r7, #52]	@ 0x34
 800df08:	e031      	b.n	800df6e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800df0a:	4b5a      	ldr	r3, [pc, #360]	@ (800e074 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	f003 0302 	and.w	r3, r3, #2
 800df12:	2b02      	cmp	r3, #2
 800df14:	d10c      	bne.n	800df30 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 800df16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df18:	2b03      	cmp	r3, #3
 800df1a:	d109      	bne.n	800df30 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800df1c:	4b55      	ldr	r3, [pc, #340]	@ (800e074 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	08db      	lsrs	r3, r3, #3
 800df22:	f003 0303 	and.w	r3, r3, #3
 800df26:	4a54      	ldr	r2, [pc, #336]	@ (800e078 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800df28:	fa22 f303 	lsr.w	r3, r2, r3
 800df2c:	637b      	str	r3, [r7, #52]	@ 0x34
 800df2e:	e01e      	b.n	800df6e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 800df30:	4b50      	ldr	r3, [pc, #320]	@ (800e074 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800df38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800df3c:	d105      	bne.n	800df4a <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 800df3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df40:	2b04      	cmp	r3, #4
 800df42:	d102      	bne.n	800df4a <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 800df44:	4b4d      	ldr	r3, [pc, #308]	@ (800e07c <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800df46:	637b      	str	r3, [r7, #52]	@ 0x34
 800df48:	e011      	b.n	800df6e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 800df4a:	4b4a      	ldr	r3, [pc, #296]	@ (800e074 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800df4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800df50:	f003 0302 	and.w	r3, r3, #2
 800df54:	2b02      	cmp	r3, #2
 800df56:	d106      	bne.n	800df66 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 800df58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df5a:	2b05      	cmp	r3, #5
 800df5c:	d103      	bne.n	800df66 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 800df5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800df62:	637b      	str	r3, [r7, #52]	@ 0x34
 800df64:	e003      	b.n	800df6e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 800df66:	2300      	movs	r3, #0
 800df68:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800df6a:	f001 ba8e 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800df6e:	f001 ba8c 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 800df72:	4b40      	ldr	r3, [pc, #256]	@ (800e074 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800df74:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800df78:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800df7c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 800df7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df80:	2b00      	cmp	r3, #0
 800df82:	d104      	bne.n	800df8e <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800df84:	f7fc fb26 	bl	800a5d4 <HAL_RCC_GetPCLK1Freq>
 800df88:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 800df8a:	f001 ba7e 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 800df8e:	4b39      	ldr	r3, [pc, #228]	@ (800e074 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800df96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800df9a:	d10a      	bne.n	800dfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 800df9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df9e:	2b10      	cmp	r3, #16
 800dfa0:	d107      	bne.n	800dfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dfa2:	f107 0314 	add.w	r3, r7, #20
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	f7fe fc4c 	bl	800c844 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800dfac:	69bb      	ldr	r3, [r7, #24]
 800dfae:	637b      	str	r3, [r7, #52]	@ 0x34
 800dfb0:	e043      	b.n	800e03a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 800dfb2:	4b30      	ldr	r3, [pc, #192]	@ (800e074 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800dfba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dfbe:	d10a      	bne.n	800dfd6 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800dfc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfc2:	2b20      	cmp	r3, #32
 800dfc4:	d107      	bne.n	800dfd6 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dfc6:	f107 0308 	add.w	r3, r7, #8
 800dfca:	4618      	mov	r0, r3
 800dfcc:	f7fe fda6 	bl	800cb1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	637b      	str	r3, [r7, #52]	@ 0x34
 800dfd4:	e031      	b.n	800e03a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 800dfd6:	4b27      	ldr	r3, [pc, #156]	@ (800e074 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	f003 0302 	and.w	r3, r3, #2
 800dfde:	2b02      	cmp	r3, #2
 800dfe0:	d10c      	bne.n	800dffc <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800dfe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfe4:	2b30      	cmp	r3, #48	@ 0x30
 800dfe6:	d109      	bne.n	800dffc <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800dfe8:	4b22      	ldr	r3, [pc, #136]	@ (800e074 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	08db      	lsrs	r3, r3, #3
 800dfee:	f003 0303 	and.w	r3, r3, #3
 800dff2:	4a21      	ldr	r2, [pc, #132]	@ (800e078 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800dff4:	fa22 f303 	lsr.w	r3, r2, r3
 800dff8:	637b      	str	r3, [r7, #52]	@ 0x34
 800dffa:	e01e      	b.n	800e03a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 800dffc:	4b1d      	ldr	r3, [pc, #116]	@ (800e074 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e004:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e008:	d105      	bne.n	800e016 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 800e00a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e00c:	2b40      	cmp	r3, #64	@ 0x40
 800e00e:	d102      	bne.n	800e016 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 800e010:	4b1a      	ldr	r3, [pc, #104]	@ (800e07c <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800e012:	637b      	str	r3, [r7, #52]	@ 0x34
 800e014:	e011      	b.n	800e03a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 800e016:	4b17      	ldr	r3, [pc, #92]	@ (800e074 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800e018:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e01c:	f003 0302 	and.w	r3, r3, #2
 800e020:	2b02      	cmp	r3, #2
 800e022:	d106      	bne.n	800e032 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 800e024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e026:	2b50      	cmp	r3, #80	@ 0x50
 800e028:	d103      	bne.n	800e032 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 800e02a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e02e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e030:	e003      	b.n	800e03a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 800e032:	2300      	movs	r3, #0
 800e034:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e036:	f001 ba28 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800e03a:	f001 ba26 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800e03e:	4b0d      	ldr	r3, [pc, #52]	@ (800e074 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800e040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e044:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800e048:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800e04a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d104      	bne.n	800e05a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800e050:	f7fc faec 	bl	800a62c <HAL_RCC_GetPCLK3Freq>
 800e054:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800e056:	f001 ba18 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 800e05a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e05c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e060:	d10e      	bne.n	800e080 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e062:	f107 0314 	add.w	r3, r7, #20
 800e066:	4618      	mov	r0, r3
 800e068:	f7fe fbec 	bl	800c844 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e06c:	69bb      	ldr	r3, [r7, #24]
 800e06e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e070:	f001 ba0b 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800e074:	44020c00 	.word	0x44020c00
 800e078:	03d09000 	.word	0x03d09000
 800e07c:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 800e080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e082:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e086:	d108      	bne.n	800e09a <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e088:	f107 0308 	add.w	r3, r7, #8
 800e08c:	4618      	mov	r0, r3
 800e08e:	f7fe fd45 	bl	800cb1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e096:	f001 b9f8 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800e09a:	4ba4      	ldr	r3, [pc, #656]	@ (800e32c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	f003 0302 	and.w	r3, r3, #2
 800e0a2:	2b02      	cmp	r3, #2
 800e0a4:	d10d      	bne.n	800e0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800e0a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0a8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800e0ac:	d109      	bne.n	800e0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800e0ae:	4b9f      	ldr	r3, [pc, #636]	@ (800e32c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	08db      	lsrs	r3, r3, #3
 800e0b4:	f003 0303 	and.w	r3, r3, #3
 800e0b8:	4a9d      	ldr	r2, [pc, #628]	@ (800e330 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800e0ba:	fa22 f303 	lsr.w	r3, r2, r3
 800e0be:	637b      	str	r3, [r7, #52]	@ 0x34
 800e0c0:	e020      	b.n	800e104 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800e0c2:	4b9a      	ldr	r3, [pc, #616]	@ (800e32c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e0ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e0ce:	d106      	bne.n	800e0de <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 800e0d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e0d6:	d102      	bne.n	800e0de <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 800e0d8:	4b96      	ldr	r3, [pc, #600]	@ (800e334 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800e0da:	637b      	str	r3, [r7, #52]	@ 0x34
 800e0dc:	e012      	b.n	800e104 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800e0de:	4b93      	ldr	r3, [pc, #588]	@ (800e32c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800e0e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e0e4:	f003 0302 	and.w	r3, r3, #2
 800e0e8:	2b02      	cmp	r3, #2
 800e0ea:	d107      	bne.n	800e0fc <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 800e0ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0ee:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800e0f2:	d103      	bne.n	800e0fc <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 800e0f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e0f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800e0fa:	e003      	b.n	800e104 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e100:	f001 b9c3 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800e104:	f001 b9c1 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800e108:	4b88      	ldr	r3, [pc, #544]	@ (800e32c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800e10a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e10e:	f003 0307 	and.w	r3, r3, #7
 800e112:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800e114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e116:	2b00      	cmp	r3, #0
 800e118:	d104      	bne.n	800e124 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800e11a:	f7fc fa3f 	bl	800a59c <HAL_RCC_GetHCLKFreq>
 800e11e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 800e120:	f001 b9b3 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800e124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e126:	2b01      	cmp	r3, #1
 800e128:	d104      	bne.n	800e134 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 800e12a:	f7fc f90b 	bl	800a344 <HAL_RCC_GetSysClockFreq>
 800e12e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800e130:	f001 b9ab 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 800e134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e136:	2b02      	cmp	r3, #2
 800e138:	d108      	bne.n	800e14c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e13a:	f107 0314 	add.w	r3, r7, #20
 800e13e:	4618      	mov	r0, r3
 800e140:	f7fe fb80 	bl	800c844 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800e144:	69fb      	ldr	r3, [r7, #28]
 800e146:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e148:	f001 b99f 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800e14c:	4b77      	ldr	r3, [pc, #476]	@ (800e32c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e154:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e158:	d105      	bne.n	800e166 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 800e15a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e15c:	2b03      	cmp	r3, #3
 800e15e:	d102      	bne.n	800e166 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 800e160:	4b75      	ldr	r3, [pc, #468]	@ (800e338 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 800e162:	637b      	str	r3, [r7, #52]	@ 0x34
 800e164:	e023      	b.n	800e1ae <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800e166:	4b71      	ldr	r3, [pc, #452]	@ (800e32c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	f003 0302 	and.w	r3, r3, #2
 800e16e:	2b02      	cmp	r3, #2
 800e170:	d10c      	bne.n	800e18c <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 800e172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e174:	2b04      	cmp	r3, #4
 800e176:	d109      	bne.n	800e18c <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800e178:	4b6c      	ldr	r3, [pc, #432]	@ (800e32c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	08db      	lsrs	r3, r3, #3
 800e17e:	f003 0303 	and.w	r3, r3, #3
 800e182:	4a6b      	ldr	r2, [pc, #428]	@ (800e330 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800e184:	fa22 f303 	lsr.w	r3, r2, r3
 800e188:	637b      	str	r3, [r7, #52]	@ 0x34
 800e18a:	e010      	b.n	800e1ae <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 800e18c:	4b67      	ldr	r3, [pc, #412]	@ (800e32c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e194:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e198:	d105      	bne.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 800e19a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e19c:	2b05      	cmp	r3, #5
 800e19e:	d102      	bne.n	800e1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 800e1a0:	4b64      	ldr	r3, [pc, #400]	@ (800e334 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800e1a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800e1a4:	e003      	b.n	800e1ae <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e1aa:	f001 b96e 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800e1ae:	f001 b96c 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800e1b2:	4b5e      	ldr	r3, [pc, #376]	@ (800e32c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800e1b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e1b8:	f003 0308 	and.w	r3, r3, #8
 800e1bc:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800e1be:	4b5b      	ldr	r3, [pc, #364]	@ (800e32c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800e1c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e1c4:	f003 0302 	and.w	r3, r3, #2
 800e1c8:	2b02      	cmp	r3, #2
 800e1ca:	d106      	bne.n	800e1da <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 800e1cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d103      	bne.n	800e1da <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 800e1d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e1d6:	637b      	str	r3, [r7, #52]	@ 0x34
 800e1d8:	e012      	b.n	800e200 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800e1da:	4b54      	ldr	r3, [pc, #336]	@ (800e32c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800e1dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e1e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e1e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e1e8:	d106      	bne.n	800e1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 800e1ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1ec:	2b08      	cmp	r3, #8
 800e1ee:	d103      	bne.n	800e1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 800e1f0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800e1f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800e1f6:	e003      	b.n	800e200 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800e1fc:	f001 b945 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800e200:	f001 b943 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800e204:	4b49      	ldr	r3, [pc, #292]	@ (800e32c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800e206:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e20a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800e20e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800e210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e212:	2b00      	cmp	r3, #0
 800e214:	d104      	bne.n	800e220 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800e216:	f7fc f9dd 	bl	800a5d4 <HAL_RCC_GetPCLK1Freq>
 800e21a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800e21c:	f001 b935 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 800e220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e222:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e226:	d108      	bne.n	800e23a <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e228:	f107 0308 	add.w	r3, r7, #8
 800e22c:	4618      	mov	r0, r3
 800e22e:	f7fe fc75 	bl	800cb1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800e232:	693b      	ldr	r3, [r7, #16]
 800e234:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e236:	f001 b928 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800e23a:	4b3c      	ldr	r3, [pc, #240]	@ (800e32c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	f003 0302 	and.w	r3, r3, #2
 800e242:	2b02      	cmp	r3, #2
 800e244:	d10d      	bne.n	800e262 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 800e246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e248:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e24c:	d109      	bne.n	800e262 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800e24e:	4b37      	ldr	r3, [pc, #220]	@ (800e32c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	08db      	lsrs	r3, r3, #3
 800e254:	f003 0303 	and.w	r3, r3, #3
 800e258:	4a35      	ldr	r2, [pc, #212]	@ (800e330 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800e25a:	fa22 f303 	lsr.w	r3, r2, r3
 800e25e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e260:	e011      	b.n	800e286 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800e262:	4b32      	ldr	r3, [pc, #200]	@ (800e32c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e26a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e26e:	d106      	bne.n	800e27e <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 800e270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e272:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e276:	d102      	bne.n	800e27e <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 800e278:	4b2e      	ldr	r3, [pc, #184]	@ (800e334 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800e27a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e27c:	e003      	b.n	800e286 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 800e27e:	2300      	movs	r3, #0
 800e280:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e282:	f001 b902 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800e286:	f001 b900 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800e28a:	4b28      	ldr	r3, [pc, #160]	@ (800e32c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800e28c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e290:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800e294:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800e296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d104      	bne.n	800e2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800e29c:	f7fc f99a 	bl	800a5d4 <HAL_RCC_GetPCLK1Freq>
 800e2a0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800e2a2:	f001 b8f2 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 800e2a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e2ac:	d108      	bne.n	800e2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e2ae:	f107 0308 	add.w	r3, r7, #8
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f7fe fc32 	bl	800cb1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800e2b8:	693b      	ldr	r3, [r7, #16]
 800e2ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e2bc:	f001 b8e5 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800e2c0:	4b1a      	ldr	r3, [pc, #104]	@ (800e32c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	f003 0302 	and.w	r3, r3, #2
 800e2c8:	2b02      	cmp	r3, #2
 800e2ca:	d10d      	bne.n	800e2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 800e2cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2ce:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800e2d2:	d109      	bne.n	800e2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800e2d4:	4b15      	ldr	r3, [pc, #84]	@ (800e32c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	08db      	lsrs	r3, r3, #3
 800e2da:	f003 0303 	and.w	r3, r3, #3
 800e2de:	4a14      	ldr	r2, [pc, #80]	@ (800e330 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800e2e0:	fa22 f303 	lsr.w	r3, r2, r3
 800e2e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800e2e6:	e011      	b.n	800e30c <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 800e2e8:	4b10      	ldr	r3, [pc, #64]	@ (800e32c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e2f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e2f4:	d106      	bne.n	800e304 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 800e2f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2f8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800e2fc:	d102      	bne.n	800e304 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 800e2fe:	4b0d      	ldr	r3, [pc, #52]	@ (800e334 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800e300:	637b      	str	r3, [r7, #52]	@ 0x34
 800e302:	e003      	b.n	800e30c <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 800e304:	2300      	movs	r3, #0
 800e306:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e308:	f001 b8bf 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800e30c:	f001 b8bd 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800e310:	4b06      	ldr	r3, [pc, #24]	@ (800e32c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800e312:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e316:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800e31a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 800e31c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d10c      	bne.n	800e33c <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800e322:	f7fc f983 	bl	800a62c <HAL_RCC_GetPCLK3Freq>
 800e326:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 800e328:	f001 b8af 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800e32c:	44020c00 	.word	0x44020c00
 800e330:	03d09000 	.word	0x03d09000
 800e334:	003d0900 	.word	0x003d0900
 800e338:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 800e33c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e33e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e342:	d108      	bne.n	800e356 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e344:	f107 0308 	add.w	r3, r7, #8
 800e348:	4618      	mov	r0, r3
 800e34a:	f7fe fbe7 	bl	800cb1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800e34e:	693b      	ldr	r3, [r7, #16]
 800e350:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e352:	f001 b89a 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800e356:	4b9f      	ldr	r3, [pc, #636]	@ (800e5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	f003 0302 	and.w	r3, r3, #2
 800e35e:	2b02      	cmp	r3, #2
 800e360:	d10d      	bne.n	800e37e <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 800e362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e364:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e368:	d109      	bne.n	800e37e <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800e36a:	4b9a      	ldr	r3, [pc, #616]	@ (800e5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	08db      	lsrs	r3, r3, #3
 800e370:	f003 0303 	and.w	r3, r3, #3
 800e374:	4a98      	ldr	r2, [pc, #608]	@ (800e5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800e376:	fa22 f303 	lsr.w	r3, r2, r3
 800e37a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e37c:	e011      	b.n	800e3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800e37e:	4b95      	ldr	r3, [pc, #596]	@ (800e5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e386:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e38a:	d106      	bne.n	800e39a <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 800e38c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e38e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e392:	d102      	bne.n	800e39a <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 800e394:	4b91      	ldr	r3, [pc, #580]	@ (800e5dc <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800e396:	637b      	str	r3, [r7, #52]	@ 0x34
 800e398:	e003      	b.n	800e3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 800e39a:	2300      	movs	r3, #0
 800e39c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e39e:	f001 b874 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800e3a2:	f001 b872 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800e3a6:	4b8b      	ldr	r3, [pc, #556]	@ (800e5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800e3a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e3ac:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800e3b0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 800e3b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d104      	bne.n	800e3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800e3b8:	f7fc f938 	bl	800a62c <HAL_RCC_GetPCLK3Freq>
 800e3bc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 800e3be:	f001 b864 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 800e3c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e3c8:	d108      	bne.n	800e3dc <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e3ca:	f107 0308 	add.w	r3, r7, #8
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	f7fe fba4 	bl	800cb1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800e3d4:	693b      	ldr	r3, [r7, #16]
 800e3d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e3d8:	f001 b857 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800e3dc:	4b7d      	ldr	r3, [pc, #500]	@ (800e5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	f003 0302 	and.w	r3, r3, #2
 800e3e4:	2b02      	cmp	r3, #2
 800e3e6:	d10d      	bne.n	800e404 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 800e3e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e3ee:	d109      	bne.n	800e404 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800e3f0:	4b78      	ldr	r3, [pc, #480]	@ (800e5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	08db      	lsrs	r3, r3, #3
 800e3f6:	f003 0303 	and.w	r3, r3, #3
 800e3fa:	4a77      	ldr	r2, [pc, #476]	@ (800e5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800e3fc:	fa22 f303 	lsr.w	r3, r2, r3
 800e400:	637b      	str	r3, [r7, #52]	@ 0x34
 800e402:	e011      	b.n	800e428 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 800e404:	4b73      	ldr	r3, [pc, #460]	@ (800e5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e40c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e410:	d106      	bne.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 800e412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e414:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800e418:	d102      	bne.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 800e41a:	4b70      	ldr	r3, [pc, #448]	@ (800e5dc <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800e41c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e41e:	e003      	b.n	800e428 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 800e420:	2300      	movs	r3, #0
 800e422:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e424:	f001 b831 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800e428:	f001 b82f 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 800e42c:	4b69      	ldr	r3, [pc, #420]	@ (800e5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800e42e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e432:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800e436:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800e438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d104      	bne.n	800e448 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800e43e:	f7fc f8c9 	bl	800a5d4 <HAL_RCC_GetPCLK1Freq>
 800e442:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800e444:	f001 b821 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 800e448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e44a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e44e:	d108      	bne.n	800e462 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e450:	f107 0308 	add.w	r3, r7, #8
 800e454:	4618      	mov	r0, r3
 800e456:	f7fe fb61 	bl	800cb1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800e45a:	693b      	ldr	r3, [r7, #16]
 800e45c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e45e:	f001 b814 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800e462:	4b5c      	ldr	r3, [pc, #368]	@ (800e5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	f003 0302 	and.w	r3, r3, #2
 800e46a:	2b02      	cmp	r3, #2
 800e46c:	d10e      	bne.n	800e48c <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 800e46e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e470:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e474:	d10a      	bne.n	800e48c <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800e476:	4b57      	ldr	r3, [pc, #348]	@ (800e5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	08db      	lsrs	r3, r3, #3
 800e47c:	f003 0303 	and.w	r3, r3, #3
 800e480:	4a55      	ldr	r2, [pc, #340]	@ (800e5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800e482:	fa22 f303 	lsr.w	r3, r2, r3
 800e486:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e488:	f000 bfff 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800e48c:	2300      	movs	r3, #0
 800e48e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e490:	f000 bffb 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800e494:	4b4f      	ldr	r3, [pc, #316]	@ (800e5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800e496:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800e49a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e49e:	633b      	str	r3, [r7, #48]	@ 0x30
 800e4a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4a2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800e4a6:	d056      	beq.n	800e556 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 800e4a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4aa:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800e4ae:	f200 808b 	bhi.w	800e5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800e4b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e4b8:	d03e      	beq.n	800e538 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 800e4ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e4c0:	f200 8082 	bhi.w	800e5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800e4c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e4ca:	d027      	beq.n	800e51c <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 800e4cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e4d2:	d879      	bhi.n	800e5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800e4d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e4da:	d017      	beq.n	800e50c <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 800e4dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e4e2:	d871      	bhi.n	800e5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800e4e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d004      	beq.n	800e4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 800e4ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e4f0:	d004      	beq.n	800e4fc <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 800e4f2:	e069      	b.n	800e5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800e4f4:	f7fc f89a 	bl	800a62c <HAL_RCC_GetPCLK3Freq>
 800e4f8:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800e4fa:	e068      	b.n	800e5ce <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e4fc:	f107 0314 	add.w	r3, r7, #20
 800e500:	4618      	mov	r0, r3
 800e502:	f7fe f99f 	bl	800c844 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800e506:	697b      	ldr	r3, [r7, #20]
 800e508:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e50a:	e060      	b.n	800e5ce <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e50c:	f107 0308 	add.w	r3, r7, #8
 800e510:	4618      	mov	r0, r3
 800e512:	f7fe fb03 	bl	800cb1c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800e516:	693b      	ldr	r3, [r7, #16]
 800e518:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e51a:	e058      	b.n	800e5ce <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800e51c:	4b2d      	ldr	r3, [pc, #180]	@ (800e5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800e51e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e522:	f003 0302 	and.w	r3, r3, #2
 800e526:	2b02      	cmp	r3, #2
 800e528:	d103      	bne.n	800e532 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 800e52a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e52e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800e530:	e04d      	b.n	800e5ce <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800e532:	2300      	movs	r3, #0
 800e534:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e536:	e04a      	b.n	800e5ce <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800e538:	4b26      	ldr	r3, [pc, #152]	@ (800e5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800e53a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e53e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e542:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e546:	d103      	bne.n	800e550 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 800e548:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800e54c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800e54e:	e03e      	b.n	800e5ce <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800e550:	2300      	movs	r3, #0
 800e552:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e554:	e03b      	b.n	800e5ce <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e556:	4b1f      	ldr	r3, [pc, #124]	@ (800e5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800e558:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e55c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800e560:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e562:	4b1c      	ldr	r3, [pc, #112]	@ (800e5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	f003 0302 	and.w	r3, r3, #2
 800e56a:	2b02      	cmp	r3, #2
 800e56c:	d10c      	bne.n	800e588 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 800e56e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e570:	2b00      	cmp	r3, #0
 800e572:	d109      	bne.n	800e588 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800e574:	4b17      	ldr	r3, [pc, #92]	@ (800e5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	08db      	lsrs	r3, r3, #3
 800e57a:	f003 0303 	and.w	r3, r3, #3
 800e57e:	4a16      	ldr	r2, [pc, #88]	@ (800e5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800e580:	fa22 f303 	lsr.w	r3, r2, r3
 800e584:	637b      	str	r3, [r7, #52]	@ 0x34
 800e586:	e01e      	b.n	800e5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e588:	4b12      	ldr	r3, [pc, #72]	@ (800e5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e590:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e594:	d106      	bne.n	800e5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 800e596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e598:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e59c:	d102      	bne.n	800e5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800e59e:	4b0f      	ldr	r3, [pc, #60]	@ (800e5dc <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800e5a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800e5a2:	e010      	b.n	800e5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e5a4:	4b0b      	ldr	r3, [pc, #44]	@ (800e5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e5ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e5b0:	d106      	bne.n	800e5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 800e5b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e5b8:	d102      	bne.n	800e5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800e5ba:	4b09      	ldr	r3, [pc, #36]	@ (800e5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 800e5bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800e5be:	e002      	b.n	800e5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800e5c4:	e003      	b.n	800e5ce <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 800e5c6:	e002      	b.n	800e5ce <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e5cc:	bf00      	nop
          }
        }
        break;
 800e5ce:	f000 bf5c 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800e5d2:	bf00      	nop
 800e5d4:	44020c00 	.word	0x44020c00
 800e5d8:	03d09000 	.word	0x03d09000
 800e5dc:	003d0900 	.word	0x003d0900
 800e5e0:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800e5e4:	4b9e      	ldr	r3, [pc, #632]	@ (800e860 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800e5e6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800e5ea:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800e5ee:	633b      	str	r3, [r7, #48]	@ 0x30
 800e5f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5f2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800e5f6:	d056      	beq.n	800e6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 800e5f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5fa:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800e5fe:	f200 808b 	bhi.w	800e718 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800e602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e604:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e608:	d03e      	beq.n	800e688 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 800e60a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e60c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e610:	f200 8082 	bhi.w	800e718 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800e614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e616:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e61a:	d027      	beq.n	800e66c <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 800e61c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e61e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e622:	d879      	bhi.n	800e718 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800e624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e626:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e62a:	d017      	beq.n	800e65c <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 800e62c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e62e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e632:	d871      	bhi.n	800e718 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800e634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e636:	2b00      	cmp	r3, #0
 800e638:	d004      	beq.n	800e644 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 800e63a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e63c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e640:	d004      	beq.n	800e64c <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 800e642:	e069      	b.n	800e718 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 800e644:	f7fb ffc6 	bl	800a5d4 <HAL_RCC_GetPCLK1Freq>
 800e648:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800e64a:	e068      	b.n	800e71e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e64c:	f107 0314 	add.w	r3, r7, #20
 800e650:	4618      	mov	r0, r3
 800e652:	f7fe f8f7 	bl	800c844 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800e656:	697b      	ldr	r3, [r7, #20]
 800e658:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e65a:	e060      	b.n	800e71e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e65c:	f107 0308 	add.w	r3, r7, #8
 800e660:	4618      	mov	r0, r3
 800e662:	f7fe fa5b 	bl	800cb1c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800e666:	693b      	ldr	r3, [r7, #16]
 800e668:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e66a:	e058      	b.n	800e71e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800e66c:	4b7c      	ldr	r3, [pc, #496]	@ (800e860 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800e66e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e672:	f003 0302 	and.w	r3, r3, #2
 800e676:	2b02      	cmp	r3, #2
 800e678:	d103      	bne.n	800e682 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 800e67a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e67e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800e680:	e04d      	b.n	800e71e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800e682:	2300      	movs	r3, #0
 800e684:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e686:	e04a      	b.n	800e71e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800e688:	4b75      	ldr	r3, [pc, #468]	@ (800e860 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800e68a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e68e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e692:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e696:	d103      	bne.n	800e6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 800e698:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800e69c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800e69e:	e03e      	b.n	800e71e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e6a4:	e03b      	b.n	800e71e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e6a6:	4b6e      	ldr	r3, [pc, #440]	@ (800e860 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800e6a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e6ac:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800e6b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e6b2:	4b6b      	ldr	r3, [pc, #428]	@ (800e860 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	f003 0302 	and.w	r3, r3, #2
 800e6ba:	2b02      	cmp	r3, #2
 800e6bc:	d10c      	bne.n	800e6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 800e6be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d109      	bne.n	800e6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800e6c4:	4b66      	ldr	r3, [pc, #408]	@ (800e860 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	08db      	lsrs	r3, r3, #3
 800e6ca:	f003 0303 	and.w	r3, r3, #3
 800e6ce:	4a65      	ldr	r2, [pc, #404]	@ (800e864 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800e6d0:	fa22 f303 	lsr.w	r3, r2, r3
 800e6d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800e6d6:	e01e      	b.n	800e716 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e6d8:	4b61      	ldr	r3, [pc, #388]	@ (800e860 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e6e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e6e4:	d106      	bne.n	800e6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 800e6e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e6ec:	d102      	bne.n	800e6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800e6ee:	4b5e      	ldr	r3, [pc, #376]	@ (800e868 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800e6f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800e6f2:	e010      	b.n	800e716 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e6f4:	4b5a      	ldr	r3, [pc, #360]	@ (800e860 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e6fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e700:	d106      	bne.n	800e710 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 800e702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e704:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e708:	d102      	bne.n	800e710 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800e70a:	4b58      	ldr	r3, [pc, #352]	@ (800e86c <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800e70c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e70e:	e002      	b.n	800e716 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800e710:	2300      	movs	r3, #0
 800e712:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800e714:	e003      	b.n	800e71e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 800e716:	e002      	b.n	800e71e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 800e718:	2300      	movs	r3, #0
 800e71a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e71c:	bf00      	nop
          }
        }
        break;
 800e71e:	f000 beb4 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800e722:	4b4f      	ldr	r3, [pc, #316]	@ (800e860 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800e724:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800e728:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800e72c:	633b      	str	r3, [r7, #48]	@ 0x30
 800e72e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e730:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e734:	d056      	beq.n	800e7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 800e736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e738:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e73c:	f200 808b 	bhi.w	800e856 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800e740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e742:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e746:	d03e      	beq.n	800e7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 800e748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e74a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800e74e:	f200 8082 	bhi.w	800e856 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800e752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e754:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e758:	d027      	beq.n	800e7aa <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 800e75a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e75c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800e760:	d879      	bhi.n	800e856 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800e762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e764:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e768:	d017      	beq.n	800e79a <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 800e76a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e76c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e770:	d871      	bhi.n	800e856 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800e772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e774:	2b00      	cmp	r3, #0
 800e776:	d004      	beq.n	800e782 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 800e778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e77a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e77e:	d004      	beq.n	800e78a <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 800e780:	e069      	b.n	800e856 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800e782:	f7fb ff53 	bl	800a62c <HAL_RCC_GetPCLK3Freq>
 800e786:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800e788:	e068      	b.n	800e85c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e78a:	f107 0314 	add.w	r3, r7, #20
 800e78e:	4618      	mov	r0, r3
 800e790:	f7fe f858 	bl	800c844 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800e794:	697b      	ldr	r3, [r7, #20]
 800e796:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e798:	e060      	b.n	800e85c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e79a:	f107 0308 	add.w	r3, r7, #8
 800e79e:	4618      	mov	r0, r3
 800e7a0:	f7fe f9bc 	bl	800cb1c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800e7a4:	693b      	ldr	r3, [r7, #16]
 800e7a6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e7a8:	e058      	b.n	800e85c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800e7aa:	4b2d      	ldr	r3, [pc, #180]	@ (800e860 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800e7ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e7b0:	f003 0302 	and.w	r3, r3, #2
 800e7b4:	2b02      	cmp	r3, #2
 800e7b6:	d103      	bne.n	800e7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 800e7b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e7bc:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800e7be:	e04d      	b.n	800e85c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e7c4:	e04a      	b.n	800e85c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800e7c6:	4b26      	ldr	r3, [pc, #152]	@ (800e860 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800e7c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e7cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e7d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e7d4:	d103      	bne.n	800e7de <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 800e7d6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800e7da:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800e7dc:	e03e      	b.n	800e85c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800e7de:	2300      	movs	r3, #0
 800e7e0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e7e2:	e03b      	b.n	800e85c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e7e4:	4b1e      	ldr	r3, [pc, #120]	@ (800e860 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800e7e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e7ea:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800e7ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e7f0:	4b1b      	ldr	r3, [pc, #108]	@ (800e860 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	f003 0302 	and.w	r3, r3, #2
 800e7f8:	2b02      	cmp	r3, #2
 800e7fa:	d10c      	bne.n	800e816 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 800e7fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d109      	bne.n	800e816 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800e802:	4b17      	ldr	r3, [pc, #92]	@ (800e860 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	08db      	lsrs	r3, r3, #3
 800e808:	f003 0303 	and.w	r3, r3, #3
 800e80c:	4a15      	ldr	r2, [pc, #84]	@ (800e864 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800e80e:	fa22 f303 	lsr.w	r3, r2, r3
 800e812:	637b      	str	r3, [r7, #52]	@ 0x34
 800e814:	e01e      	b.n	800e854 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e816:	4b12      	ldr	r3, [pc, #72]	@ (800e860 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e81e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e822:	d106      	bne.n	800e832 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 800e824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e826:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e82a:	d102      	bne.n	800e832 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800e82c:	4b0e      	ldr	r3, [pc, #56]	@ (800e868 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800e82e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e830:	e010      	b.n	800e854 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e832:	4b0b      	ldr	r3, [pc, #44]	@ (800e860 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e83a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e83e:	d106      	bne.n	800e84e <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 800e840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e842:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e846:	d102      	bne.n	800e84e <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800e848:	4b08      	ldr	r3, [pc, #32]	@ (800e86c <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800e84a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e84c:	e002      	b.n	800e854 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800e84e:	2300      	movs	r3, #0
 800e850:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800e852:	e003      	b.n	800e85c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 800e854:	e002      	b.n	800e85c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 800e856:	2300      	movs	r3, #0
 800e858:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e85a:	bf00      	nop
          }
        }
        break;
 800e85c:	f000 be15 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800e860:	44020c00 	.word	0x44020c00
 800e864:	03d09000 	.word	0x03d09000
 800e868:	003d0900 	.word	0x003d0900
 800e86c:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 800e870:	4b9e      	ldr	r3, [pc, #632]	@ (800eaec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800e872:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800e876:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 800e87a:	633b      	str	r3, [r7, #48]	@ 0x30
 800e87c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e87e:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800e882:	d056      	beq.n	800e932 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 800e884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e886:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800e88a:	f200 808b 	bhi.w	800e9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800e88e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e890:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e894:	d03e      	beq.n	800e914 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 800e896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e898:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e89c:	f200 8082 	bhi.w	800e9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800e8a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e8a6:	d027      	beq.n	800e8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 800e8a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8aa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e8ae:	d879      	bhi.n	800e9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800e8b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e8b6:	d017      	beq.n	800e8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 800e8b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e8be:	d871      	bhi.n	800e9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800e8c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d004      	beq.n	800e8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 800e8c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e8cc:	d004      	beq.n	800e8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 800e8ce:	e069      	b.n	800e9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800e8d0:	f7fb feac 	bl	800a62c <HAL_RCC_GetPCLK3Freq>
 800e8d4:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800e8d6:	e068      	b.n	800e9aa <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e8d8:	f107 0314 	add.w	r3, r7, #20
 800e8dc:	4618      	mov	r0, r3
 800e8de:	f7fd ffb1 	bl	800c844 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800e8e2:	697b      	ldr	r3, [r7, #20]
 800e8e4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e8e6:	e060      	b.n	800e9aa <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e8e8:	f107 0308 	add.w	r3, r7, #8
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	f7fe f915 	bl	800cb1c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800e8f2:	693b      	ldr	r3, [r7, #16]
 800e8f4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e8f6:	e058      	b.n	800e9aa <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800e8f8:	4b7c      	ldr	r3, [pc, #496]	@ (800eaec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800e8fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e8fe:	f003 0302 	and.w	r3, r3, #2
 800e902:	2b02      	cmp	r3, #2
 800e904:	d103      	bne.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 800e906:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e90a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800e90c:	e04d      	b.n	800e9aa <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800e90e:	2300      	movs	r3, #0
 800e910:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e912:	e04a      	b.n	800e9aa <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800e914:	4b75      	ldr	r3, [pc, #468]	@ (800eaec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800e916:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e91a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e91e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e922:	d103      	bne.n	800e92c <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 800e924:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800e928:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800e92a:	e03e      	b.n	800e9aa <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800e92c:	2300      	movs	r3, #0
 800e92e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e930:	e03b      	b.n	800e9aa <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e932:	4b6e      	ldr	r3, [pc, #440]	@ (800eaec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800e934:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e938:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800e93c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e93e:	4b6b      	ldr	r3, [pc, #428]	@ (800eaec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	f003 0302 	and.w	r3, r3, #2
 800e946:	2b02      	cmp	r3, #2
 800e948:	d10c      	bne.n	800e964 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 800e94a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d109      	bne.n	800e964 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800e950:	4b66      	ldr	r3, [pc, #408]	@ (800eaec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	08db      	lsrs	r3, r3, #3
 800e956:	f003 0303 	and.w	r3, r3, #3
 800e95a:	4a65      	ldr	r2, [pc, #404]	@ (800eaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800e95c:	fa22 f303 	lsr.w	r3, r2, r3
 800e960:	637b      	str	r3, [r7, #52]	@ 0x34
 800e962:	e01e      	b.n	800e9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e964:	4b61      	ldr	r3, [pc, #388]	@ (800eaec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e96c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e970:	d106      	bne.n	800e980 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 800e972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e974:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e978:	d102      	bne.n	800e980 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800e97a:	4b5e      	ldr	r3, [pc, #376]	@ (800eaf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800e97c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e97e:	e010      	b.n	800e9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e980:	4b5a      	ldr	r3, [pc, #360]	@ (800eaec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e988:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e98c:	d106      	bne.n	800e99c <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 800e98e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e990:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e994:	d102      	bne.n	800e99c <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800e996:	4b58      	ldr	r3, [pc, #352]	@ (800eaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800e998:	637b      	str	r3, [r7, #52]	@ 0x34
 800e99a:	e002      	b.n	800e9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800e99c:	2300      	movs	r3, #0
 800e99e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800e9a0:	e003      	b.n	800e9aa <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 800e9a2:	e002      	b.n	800e9aa <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e9a8:	bf00      	nop
          }
        }
        break;
 800e9aa:	f000 bd6e 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 800e9ae:	4b4f      	ldr	r3, [pc, #316]	@ (800eaec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800e9b0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800e9b4:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800e9b8:	633b      	str	r3, [r7, #48]	@ 0x30
 800e9ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9bc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800e9c0:	d056      	beq.n	800ea70 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 800e9c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9c4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800e9c8:	f200 808b 	bhi.w	800eae2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800e9cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e9d2:	d03e      	beq.n	800ea52 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 800e9d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e9da:	f200 8082 	bhi.w	800eae2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800e9de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800e9e4:	d027      	beq.n	800ea36 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 800e9e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9e8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800e9ec:	d879      	bhi.n	800eae2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800e9ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e9f4:	d017      	beq.n	800ea26 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 800e9f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e9fc:	d871      	bhi.n	800eae2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800e9fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d004      	beq.n	800ea0e <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 800ea04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ea0a:	d004      	beq.n	800ea16 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 800ea0c:	e069      	b.n	800eae2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800ea0e:	f7fb fe0d 	bl	800a62c <HAL_RCC_GetPCLK3Freq>
 800ea12:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800ea14:	e068      	b.n	800eae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ea16:	f107 0314 	add.w	r3, r7, #20
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	f7fd ff12 	bl	800c844 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800ea20:	697b      	ldr	r3, [r7, #20]
 800ea22:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ea24:	e060      	b.n	800eae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ea26:	f107 0308 	add.w	r3, r7, #8
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	f7fe f876 	bl	800cb1c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800ea30:	693b      	ldr	r3, [r7, #16]
 800ea32:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ea34:	e058      	b.n	800eae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ea36:	4b2d      	ldr	r3, [pc, #180]	@ (800eaec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800ea38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ea3c:	f003 0302 	and.w	r3, r3, #2
 800ea40:	2b02      	cmp	r3, #2
 800ea42:	d103      	bne.n	800ea4c <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 800ea44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ea48:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800ea4a:	e04d      	b.n	800eae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ea50:	e04a      	b.n	800eae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800ea52:	4b26      	ldr	r3, [pc, #152]	@ (800eaec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800ea54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ea58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ea5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ea60:	d103      	bne.n	800ea6a <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 800ea62:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800ea66:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800ea68:	e03e      	b.n	800eae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ea6e:	e03b      	b.n	800eae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ea70:	4b1e      	ldr	r3, [pc, #120]	@ (800eaec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800ea72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ea76:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800ea7a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ea7c:	4b1b      	ldr	r3, [pc, #108]	@ (800eaec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	f003 0302 	and.w	r3, r3, #2
 800ea84:	2b02      	cmp	r3, #2
 800ea86:	d10c      	bne.n	800eaa2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 800ea88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d109      	bne.n	800eaa2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ea8e:	4b17      	ldr	r3, [pc, #92]	@ (800eaec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	08db      	lsrs	r3, r3, #3
 800ea94:	f003 0303 	and.w	r3, r3, #3
 800ea98:	4a15      	ldr	r2, [pc, #84]	@ (800eaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800ea9a:	fa22 f303 	lsr.w	r3, r2, r3
 800ea9e:	637b      	str	r3, [r7, #52]	@ 0x34
 800eaa0:	e01e      	b.n	800eae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800eaa2:	4b12      	ldr	r3, [pc, #72]	@ (800eaec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800eaaa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eaae:	d106      	bne.n	800eabe <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 800eab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eab2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eab6:	d102      	bne.n	800eabe <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800eab8:	4b0e      	ldr	r3, [pc, #56]	@ (800eaf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800eaba:	637b      	str	r3, [r7, #52]	@ 0x34
 800eabc:	e010      	b.n	800eae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800eabe:	4b0b      	ldr	r3, [pc, #44]	@ (800eaec <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800eac6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800eaca:	d106      	bne.n	800eada <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 800eacc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eace:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ead2:	d102      	bne.n	800eada <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800ead4:	4b08      	ldr	r3, [pc, #32]	@ (800eaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800ead6:	637b      	str	r3, [r7, #52]	@ 0x34
 800ead8:	e002      	b.n	800eae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800eada:	2300      	movs	r3, #0
 800eadc:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800eade:	e003      	b.n	800eae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 800eae0:	e002      	b.n	800eae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 800eae2:	2300      	movs	r3, #0
 800eae4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800eae6:	bf00      	nop
          }
        }
        break;
 800eae8:	f000 bccf 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800eaec:	44020c00 	.word	0x44020c00
 800eaf0:	03d09000 	.word	0x03d09000
 800eaf4:	003d0900 	.word	0x003d0900
 800eaf8:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 800eafc:	4b9e      	ldr	r3, [pc, #632]	@ (800ed78 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800eafe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800eb02:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800eb06:	633b      	str	r3, [r7, #48]	@ 0x30
 800eb08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800eb0e:	d056      	beq.n	800ebbe <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 800eb10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800eb16:	f200 808b 	bhi.w	800ec30 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800eb1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eb20:	d03e      	beq.n	800eba0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 800eb22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eb28:	f200 8082 	bhi.w	800ec30 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800eb2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb2e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800eb32:	d027      	beq.n	800eb84 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 800eb34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb36:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800eb3a:	d879      	bhi.n	800ec30 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800eb3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800eb42:	d017      	beq.n	800eb74 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 800eb44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800eb4a:	d871      	bhi.n	800ec30 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800eb4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d004      	beq.n	800eb5c <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 800eb52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800eb58:	d004      	beq.n	800eb64 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 800eb5a:	e069      	b.n	800ec30 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800eb5c:	f7fb fd66 	bl	800a62c <HAL_RCC_GetPCLK3Freq>
 800eb60:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800eb62:	e068      	b.n	800ec36 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eb64:	f107 0314 	add.w	r3, r7, #20
 800eb68:	4618      	mov	r0, r3
 800eb6a:	f7fd fe6b 	bl	800c844 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800eb6e:	697b      	ldr	r3, [r7, #20]
 800eb70:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800eb72:	e060      	b.n	800ec36 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eb74:	f107 0308 	add.w	r3, r7, #8
 800eb78:	4618      	mov	r0, r3
 800eb7a:	f7fd ffcf 	bl	800cb1c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800eb7e:	693b      	ldr	r3, [r7, #16]
 800eb80:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800eb82:	e058      	b.n	800ec36 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800eb84:	4b7c      	ldr	r3, [pc, #496]	@ (800ed78 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800eb86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800eb8a:	f003 0302 	and.w	r3, r3, #2
 800eb8e:	2b02      	cmp	r3, #2
 800eb90:	d103      	bne.n	800eb9a <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800eb92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800eb96:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800eb98:	e04d      	b.n	800ec36 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800eb9e:	e04a      	b.n	800ec36 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800eba0:	4b75      	ldr	r3, [pc, #468]	@ (800ed78 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800eba2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800eba6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ebaa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ebae:	d103      	bne.n	800ebb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 800ebb0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800ebb4:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800ebb6:	e03e      	b.n	800ec36 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800ebb8:	2300      	movs	r3, #0
 800ebba:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ebbc:	e03b      	b.n	800ec36 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ebbe:	4b6e      	ldr	r3, [pc, #440]	@ (800ed78 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800ebc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ebc4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800ebc8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ebca:	4b6b      	ldr	r3, [pc, #428]	@ (800ed78 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	f003 0302 	and.w	r3, r3, #2
 800ebd2:	2b02      	cmp	r3, #2
 800ebd4:	d10c      	bne.n	800ebf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 800ebd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d109      	bne.n	800ebf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ebdc:	4b66      	ldr	r3, [pc, #408]	@ (800ed78 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	08db      	lsrs	r3, r3, #3
 800ebe2:	f003 0303 	and.w	r3, r3, #3
 800ebe6:	4a65      	ldr	r2, [pc, #404]	@ (800ed7c <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800ebe8:	fa22 f303 	lsr.w	r3, r2, r3
 800ebec:	637b      	str	r3, [r7, #52]	@ 0x34
 800ebee:	e01e      	b.n	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ebf0:	4b61      	ldr	r3, [pc, #388]	@ (800ed78 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ebf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ebfc:	d106      	bne.n	800ec0c <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 800ebfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ec04:	d102      	bne.n	800ec0c <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800ec06:	4b5e      	ldr	r3, [pc, #376]	@ (800ed80 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800ec08:	637b      	str	r3, [r7, #52]	@ 0x34
 800ec0a:	e010      	b.n	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ec0c:	4b5a      	ldr	r3, [pc, #360]	@ (800ed78 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ec14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ec18:	d106      	bne.n	800ec28 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 800ec1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ec20:	d102      	bne.n	800ec28 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800ec22:	4b58      	ldr	r3, [pc, #352]	@ (800ed84 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800ec24:	637b      	str	r3, [r7, #52]	@ 0x34
 800ec26:	e002      	b.n	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800ec28:	2300      	movs	r3, #0
 800ec2a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800ec2c:	e003      	b.n	800ec36 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 800ec2e:	e002      	b.n	800ec36 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 800ec30:	2300      	movs	r3, #0
 800ec32:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ec34:	bf00      	nop
          }
        }
        break;
 800ec36:	f000 bc28 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ec3a:	4b4f      	ldr	r3, [pc, #316]	@ (800ed78 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800ec3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ec40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ec44:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800ec46:	4b4c      	ldr	r3, [pc, #304]	@ (800ed78 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ec4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ec52:	d106      	bne.n	800ec62 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 800ec54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d103      	bne.n	800ec62 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 800ec5a:	4b4a      	ldr	r3, [pc, #296]	@ (800ed84 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800ec5c:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800ec5e:	f000 bc14 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800ec62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ec68:	d108      	bne.n	800ec7c <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ec6a:	f107 0320 	add.w	r3, r7, #32
 800ec6e:	4618      	mov	r0, r3
 800ec70:	f7fd fc7c 	bl	800c56c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ec74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec76:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ec78:	f000 bc07 	b.w	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800ec7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ec82:	d107      	bne.n	800ec94 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ec84:	f107 0314 	add.w	r3, r7, #20
 800ec88:	4618      	mov	r0, r3
 800ec8a:	f7fd fddb 	bl	800c844 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ec8e:	69bb      	ldr	r3, [r7, #24]
 800ec90:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ec92:	e3fa      	b.n	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800ec94:	2300      	movs	r3, #0
 800ec96:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ec98:	e3f7      	b.n	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800ec9a:	4b37      	ldr	r3, [pc, #220]	@ (800ed78 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800ec9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800eca0:	f003 0307 	and.w	r3, r3, #7
 800eca4:	633b      	str	r3, [r7, #48]	@ 0x30
 800eca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eca8:	2b04      	cmp	r3, #4
 800ecaa:	d861      	bhi.n	800ed70 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 800ecac:	a201      	add	r2, pc, #4	@ (adr r2, 800ecb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 800ecae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecb2:	bf00      	nop
 800ecb4:	0800ecc9 	.word	0x0800ecc9
 800ecb8:	0800ecd9 	.word	0x0800ecd9
 800ecbc:	0800ece9 	.word	0x0800ece9
 800ecc0:	0800ecf9 	.word	0x0800ecf9
 800ecc4:	0800ecff 	.word	0x0800ecff
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ecc8:	f107 0320 	add.w	r3, r7, #32
 800eccc:	4618      	mov	r0, r3
 800ecce:	f7fd fc4d 	bl	800c56c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800ecd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecd4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ecd6:	e04e      	b.n	800ed76 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ecd8:	f107 0314 	add.w	r3, r7, #20
 800ecdc:	4618      	mov	r0, r3
 800ecde:	f7fd fdb1 	bl	800c844 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800ece2:	697b      	ldr	r3, [r7, #20]
 800ece4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ece6:	e046      	b.n	800ed76 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ece8:	f107 0308 	add.w	r3, r7, #8
 800ecec:	4618      	mov	r0, r3
 800ecee:	f7fd ff15 	bl	800cb1c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800ecf2:	68bb      	ldr	r3, [r7, #8]
 800ecf4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ecf6:	e03e      	b.n	800ed76 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800ecf8:	4b23      	ldr	r3, [pc, #140]	@ (800ed88 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 800ecfa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ecfc:	e03b      	b.n	800ed76 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ecfe:	4b1e      	ldr	r3, [pc, #120]	@ (800ed78 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800ed00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ed04:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800ed08:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ed0a:	4b1b      	ldr	r3, [pc, #108]	@ (800ed78 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	f003 0302 	and.w	r3, r3, #2
 800ed12:	2b02      	cmp	r3, #2
 800ed14:	d10c      	bne.n	800ed30 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 800ed16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d109      	bne.n	800ed30 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ed1c:	4b16      	ldr	r3, [pc, #88]	@ (800ed78 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	08db      	lsrs	r3, r3, #3
 800ed22:	f003 0303 	and.w	r3, r3, #3
 800ed26:	4a15      	ldr	r2, [pc, #84]	@ (800ed7c <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800ed28:	fa22 f303 	lsr.w	r3, r2, r3
 800ed2c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed2e:	e01e      	b.n	800ed6e <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ed30:	4b11      	ldr	r3, [pc, #68]	@ (800ed78 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ed38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ed3c:	d106      	bne.n	800ed4c <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 800ed3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ed44:	d102      	bne.n	800ed4c <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800ed46:	4b0e      	ldr	r3, [pc, #56]	@ (800ed80 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800ed48:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed4a:	e010      	b.n	800ed6e <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ed4c:	4b0a      	ldr	r3, [pc, #40]	@ (800ed78 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ed54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ed58:	d106      	bne.n	800ed68 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 800ed5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ed60:	d102      	bne.n	800ed68 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800ed62:	4b08      	ldr	r3, [pc, #32]	@ (800ed84 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800ed64:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed66:	e002      	b.n	800ed6e <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800ed68:	2300      	movs	r3, #0
 800ed6a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800ed6c:	e003      	b.n	800ed76 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 800ed6e:	e002      	b.n	800ed76 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 800ed70:	2300      	movs	r3, #0
 800ed72:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ed74:	bf00      	nop
          }
        }
        break;
 800ed76:	e388      	b.n	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ed78:	44020c00 	.word	0x44020c00
 800ed7c:	03d09000 	.word	0x03d09000
 800ed80:	003d0900 	.word	0x003d0900
 800ed84:	007a1200 	.word	0x007a1200
 800ed88:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800ed8c:	4ba9      	ldr	r3, [pc, #676]	@ (800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ed8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ed92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ed96:	633b      	str	r3, [r7, #48]	@ 0x30
 800ed98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed9a:	2b20      	cmp	r3, #32
 800ed9c:	f200 809a 	bhi.w	800eed4 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 800eda0:	a201      	add	r2, pc, #4	@ (adr r2, 800eda8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800eda2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eda6:	bf00      	nop
 800eda8:	0800ee2d 	.word	0x0800ee2d
 800edac:	0800eed5 	.word	0x0800eed5
 800edb0:	0800eed5 	.word	0x0800eed5
 800edb4:	0800eed5 	.word	0x0800eed5
 800edb8:	0800eed5 	.word	0x0800eed5
 800edbc:	0800eed5 	.word	0x0800eed5
 800edc0:	0800eed5 	.word	0x0800eed5
 800edc4:	0800eed5 	.word	0x0800eed5
 800edc8:	0800ee3d 	.word	0x0800ee3d
 800edcc:	0800eed5 	.word	0x0800eed5
 800edd0:	0800eed5 	.word	0x0800eed5
 800edd4:	0800eed5 	.word	0x0800eed5
 800edd8:	0800eed5 	.word	0x0800eed5
 800eddc:	0800eed5 	.word	0x0800eed5
 800ede0:	0800eed5 	.word	0x0800eed5
 800ede4:	0800eed5 	.word	0x0800eed5
 800ede8:	0800ee4d 	.word	0x0800ee4d
 800edec:	0800eed5 	.word	0x0800eed5
 800edf0:	0800eed5 	.word	0x0800eed5
 800edf4:	0800eed5 	.word	0x0800eed5
 800edf8:	0800eed5 	.word	0x0800eed5
 800edfc:	0800eed5 	.word	0x0800eed5
 800ee00:	0800eed5 	.word	0x0800eed5
 800ee04:	0800eed5 	.word	0x0800eed5
 800ee08:	0800ee5d 	.word	0x0800ee5d
 800ee0c:	0800eed5 	.word	0x0800eed5
 800ee10:	0800eed5 	.word	0x0800eed5
 800ee14:	0800eed5 	.word	0x0800eed5
 800ee18:	0800eed5 	.word	0x0800eed5
 800ee1c:	0800eed5 	.word	0x0800eed5
 800ee20:	0800eed5 	.word	0x0800eed5
 800ee24:	0800eed5 	.word	0x0800eed5
 800ee28:	0800ee63 	.word	0x0800ee63
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ee2c:	f107 0320 	add.w	r3, r7, #32
 800ee30:	4618      	mov	r0, r3
 800ee32:	f7fd fb9b 	bl	800c56c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800ee36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee38:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ee3a:	e04e      	b.n	800eeda <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ee3c:	f107 0314 	add.w	r3, r7, #20
 800ee40:	4618      	mov	r0, r3
 800ee42:	f7fd fcff 	bl	800c844 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800ee46:	697b      	ldr	r3, [r7, #20]
 800ee48:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ee4a:	e046      	b.n	800eeda <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ee4c:	f107 0308 	add.w	r3, r7, #8
 800ee50:	4618      	mov	r0, r3
 800ee52:	f7fd fe63 	bl	800cb1c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800ee56:	68bb      	ldr	r3, [r7, #8]
 800ee58:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ee5a:	e03e      	b.n	800eeda <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800ee5c:	4b76      	ldr	r3, [pc, #472]	@ (800f038 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800ee5e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ee60:	e03b      	b.n	800eeda <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ee62:	4b74      	ldr	r3, [pc, #464]	@ (800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ee64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ee68:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800ee6c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ee6e:	4b71      	ldr	r3, [pc, #452]	@ (800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	f003 0302 	and.w	r3, r3, #2
 800ee76:	2b02      	cmp	r3, #2
 800ee78:	d10c      	bne.n	800ee94 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800ee7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d109      	bne.n	800ee94 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ee80:	4b6c      	ldr	r3, [pc, #432]	@ (800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	08db      	lsrs	r3, r3, #3
 800ee86:	f003 0303 	and.w	r3, r3, #3
 800ee8a:	4a6c      	ldr	r2, [pc, #432]	@ (800f03c <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800ee8c:	fa22 f303 	lsr.w	r3, r2, r3
 800ee90:	637b      	str	r3, [r7, #52]	@ 0x34
 800ee92:	e01e      	b.n	800eed2 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ee94:	4b67      	ldr	r3, [pc, #412]	@ (800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ee9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eea0:	d106      	bne.n	800eeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800eea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eea4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eea8:	d102      	bne.n	800eeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800eeaa:	4b65      	ldr	r3, [pc, #404]	@ (800f040 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800eeac:	637b      	str	r3, [r7, #52]	@ 0x34
 800eeae:	e010      	b.n	800eed2 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800eeb0:	4b60      	ldr	r3, [pc, #384]	@ (800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800eeb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800eebc:	d106      	bne.n	800eecc <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800eebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eec0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800eec4:	d102      	bne.n	800eecc <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800eec6:	4b5f      	ldr	r3, [pc, #380]	@ (800f044 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800eec8:	637b      	str	r3, [r7, #52]	@ 0x34
 800eeca:	e002      	b.n	800eed2 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800eecc:	2300      	movs	r3, #0
 800eece:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800eed0:	e003      	b.n	800eeda <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800eed2:	e002      	b.n	800eeda <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 800eed4:	2300      	movs	r3, #0
 800eed6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800eed8:	bf00      	nop
          }
        }
        break;
 800eeda:	e2d6      	b.n	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800eedc:	4b55      	ldr	r3, [pc, #340]	@ (800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800eede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800eee2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800eee6:	633b      	str	r3, [r7, #48]	@ 0x30
 800eee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eeea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eeee:	d031      	beq.n	800ef54 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 800eef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eef2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eef6:	d866      	bhi.n	800efc6 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800eef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eefa:	2bc0      	cmp	r3, #192	@ 0xc0
 800eefc:	d027      	beq.n	800ef4e <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800eefe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef00:	2bc0      	cmp	r3, #192	@ 0xc0
 800ef02:	d860      	bhi.n	800efc6 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800ef04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef06:	2b80      	cmp	r3, #128	@ 0x80
 800ef08:	d019      	beq.n	800ef3e <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800ef0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef0c:	2b80      	cmp	r3, #128	@ 0x80
 800ef0e:	d85a      	bhi.n	800efc6 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800ef10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d003      	beq.n	800ef1e <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 800ef16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef18:	2b40      	cmp	r3, #64	@ 0x40
 800ef1a:	d008      	beq.n	800ef2e <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 800ef1c:	e053      	b.n	800efc6 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ef1e:	f107 0320 	add.w	r3, r7, #32
 800ef22:	4618      	mov	r0, r3
 800ef24:	f7fd fb22 	bl	800c56c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800ef28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef2a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ef2c:	e04e      	b.n	800efcc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ef2e:	f107 0314 	add.w	r3, r7, #20
 800ef32:	4618      	mov	r0, r3
 800ef34:	f7fd fc86 	bl	800c844 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800ef38:	697b      	ldr	r3, [r7, #20]
 800ef3a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ef3c:	e046      	b.n	800efcc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ef3e:	f107 0308 	add.w	r3, r7, #8
 800ef42:	4618      	mov	r0, r3
 800ef44:	f7fd fdea 	bl	800cb1c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800ef48:	68bb      	ldr	r3, [r7, #8]
 800ef4a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ef4c:	e03e      	b.n	800efcc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800ef4e:	4b3a      	ldr	r3, [pc, #232]	@ (800f038 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800ef50:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ef52:	e03b      	b.n	800efcc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ef54:	4b37      	ldr	r3, [pc, #220]	@ (800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ef56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ef5a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800ef5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ef60:	4b34      	ldr	r3, [pc, #208]	@ (800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	f003 0302 	and.w	r3, r3, #2
 800ef68:	2b02      	cmp	r3, #2
 800ef6a:	d10c      	bne.n	800ef86 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 800ef6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d109      	bne.n	800ef86 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ef72:	4b30      	ldr	r3, [pc, #192]	@ (800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	08db      	lsrs	r3, r3, #3
 800ef78:	f003 0303 	and.w	r3, r3, #3
 800ef7c:	4a2f      	ldr	r2, [pc, #188]	@ (800f03c <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800ef7e:	fa22 f303 	lsr.w	r3, r2, r3
 800ef82:	637b      	str	r3, [r7, #52]	@ 0x34
 800ef84:	e01e      	b.n	800efc4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ef86:	4b2b      	ldr	r3, [pc, #172]	@ (800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ef8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ef92:	d106      	bne.n	800efa2 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 800ef94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ef9a:	d102      	bne.n	800efa2 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800ef9c:	4b28      	ldr	r3, [pc, #160]	@ (800f040 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800ef9e:	637b      	str	r3, [r7, #52]	@ 0x34
 800efa0:	e010      	b.n	800efc4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800efa2:	4b24      	ldr	r3, [pc, #144]	@ (800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800efaa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800efae:	d106      	bne.n	800efbe <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 800efb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efb2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800efb6:	d102      	bne.n	800efbe <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800efb8:	4b22      	ldr	r3, [pc, #136]	@ (800f044 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800efba:	637b      	str	r3, [r7, #52]	@ 0x34
 800efbc:	e002      	b.n	800efc4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800efbe:	2300      	movs	r3, #0
 800efc0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800efc2:	e003      	b.n	800efcc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 800efc4:	e002      	b.n	800efcc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 800efc6:	2300      	movs	r3, #0
 800efc8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800efca:	bf00      	nop
          }
        }
        break;
 800efcc:	e25d      	b.n	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800efce:	4b19      	ldr	r3, [pc, #100]	@ (800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800efd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800efd4:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800efd8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800efda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d103      	bne.n	800efe8 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800efe0:	f7fb fb0e 	bl	800a600 <HAL_RCC_GetPCLK2Freq>
 800efe4:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800efe6:	e250      	b.n	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800efe8:	4b12      	ldr	r3, [pc, #72]	@ (800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800eff0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800eff4:	d10b      	bne.n	800f00e <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 800eff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eff8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800effc:	d107      	bne.n	800f00e <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800effe:	f107 0314 	add.w	r3, r7, #20
 800f002:	4618      	mov	r0, r3
 800f004:	f7fd fc1e 	bl	800c844 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f008:	69bb      	ldr	r3, [r7, #24]
 800f00a:	637b      	str	r3, [r7, #52]	@ 0x34
 800f00c:	e04f      	b.n	800f0ae <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800f00e:	4b09      	ldr	r3, [pc, #36]	@ (800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f016:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f01a:	d115      	bne.n	800f048 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800f01c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f01e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f022:	d111      	bne.n	800f048 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f024:	f107 0308 	add.w	r3, r7, #8
 800f028:	4618      	mov	r0, r3
 800f02a:	f7fd fd77 	bl	800cb1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	637b      	str	r3, [r7, #52]	@ 0x34
 800f032:	e03c      	b.n	800f0ae <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 800f034:	44020c00 	.word	0x44020c00
 800f038:	00bb8000 	.word	0x00bb8000
 800f03c:	03d09000 	.word	0x03d09000
 800f040:	003d0900 	.word	0x003d0900
 800f044:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800f048:	4b94      	ldr	r3, [pc, #592]	@ (800f29c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	f003 0302 	and.w	r3, r3, #2
 800f050:	2b02      	cmp	r3, #2
 800f052:	d10d      	bne.n	800f070 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 800f054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f056:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800f05a:	d109      	bne.n	800f070 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800f05c:	4b8f      	ldr	r3, [pc, #572]	@ (800f29c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	08db      	lsrs	r3, r3, #3
 800f062:	f003 0303 	and.w	r3, r3, #3
 800f066:	4a8e      	ldr	r2, [pc, #568]	@ (800f2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800f068:	fa22 f303 	lsr.w	r3, r2, r3
 800f06c:	637b      	str	r3, [r7, #52]	@ 0x34
 800f06e:	e01e      	b.n	800f0ae <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800f070:	4b8a      	ldr	r3, [pc, #552]	@ (800f29c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f078:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f07c:	d106      	bne.n	800f08c <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800f07e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f080:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f084:	d102      	bne.n	800f08c <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 800f086:	4b87      	ldr	r3, [pc, #540]	@ (800f2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800f088:	637b      	str	r3, [r7, #52]	@ 0x34
 800f08a:	e010      	b.n	800f0ae <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800f08c:	4b83      	ldr	r3, [pc, #524]	@ (800f29c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f094:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f098:	d106      	bne.n	800f0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 800f09a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f09c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800f0a0:	d102      	bne.n	800f0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800f0a2:	4b81      	ldr	r3, [pc, #516]	@ (800f2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800f0a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800f0a6:	e002      	b.n	800f0ae <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f0ac:	e1ed      	b.n	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800f0ae:	e1ec      	b.n	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 800f0b0:	4b7a      	ldr	r3, [pc, #488]	@ (800f29c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800f0b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f0b6:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800f0ba:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 800f0bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d103      	bne.n	800f0ca <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800f0c2:	f7fb fab3 	bl	800a62c <HAL_RCC_GetPCLK3Freq>
 800f0c6:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800f0c8:	e1df      	b.n	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800f0ca:	4b74      	ldr	r3, [pc, #464]	@ (800f29c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f0d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f0d6:	d10b      	bne.n	800f0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 800f0d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f0de:	d107      	bne.n	800f0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f0e0:	f107 0314 	add.w	r3, r7, #20
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	f7fd fbad 	bl	800c844 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f0ea:	69bb      	ldr	r3, [r7, #24]
 800f0ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800f0ee:	e045      	b.n	800f17c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 800f0f0:	4b6a      	ldr	r3, [pc, #424]	@ (800f29c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f0f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f0fc:	d10b      	bne.n	800f116 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800f0fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f100:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f104:	d107      	bne.n	800f116 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f106:	f107 0308 	add.w	r3, r7, #8
 800f10a:	4618      	mov	r0, r3
 800f10c:	f7fd fd06 	bl	800cb1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	637b      	str	r3, [r7, #52]	@ 0x34
 800f114:	e032      	b.n	800f17c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 800f116:	4b61      	ldr	r3, [pc, #388]	@ (800f29c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	f003 0302 	and.w	r3, r3, #2
 800f11e:	2b02      	cmp	r3, #2
 800f120:	d10d      	bne.n	800f13e <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 800f122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f124:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f128:	d109      	bne.n	800f13e <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800f12a:	4b5c      	ldr	r3, [pc, #368]	@ (800f29c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	08db      	lsrs	r3, r3, #3
 800f130:	f003 0303 	and.w	r3, r3, #3
 800f134:	4a5a      	ldr	r2, [pc, #360]	@ (800f2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800f136:	fa22 f303 	lsr.w	r3, r2, r3
 800f13a:	637b      	str	r3, [r7, #52]	@ 0x34
 800f13c:	e01e      	b.n	800f17c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800f13e:	4b57      	ldr	r3, [pc, #348]	@ (800f29c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f146:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f14a:	d106      	bne.n	800f15a <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 800f14c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f14e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f152:	d102      	bne.n	800f15a <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 800f154:	4b53      	ldr	r3, [pc, #332]	@ (800f2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800f156:	637b      	str	r3, [r7, #52]	@ 0x34
 800f158:	e010      	b.n	800f17c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 800f15a:	4b50      	ldr	r3, [pc, #320]	@ (800f29c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f162:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f166:	d106      	bne.n	800f176 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 800f168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f16a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800f16e:	d102      	bne.n	800f176 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 800f170:	4b4d      	ldr	r3, [pc, #308]	@ (800f2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800f172:	637b      	str	r3, [r7, #52]	@ 0x34
 800f174:	e002      	b.n	800f17c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 800f176:	2300      	movs	r3, #0
 800f178:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f17a:	e186      	b.n	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800f17c:	e185      	b.n	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800f17e:	4b47      	ldr	r3, [pc, #284]	@ (800f29c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800f180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f184:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800f188:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800f18a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d103      	bne.n	800f198 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800f190:	f7fb fa36 	bl	800a600 <HAL_RCC_GetPCLK2Freq>
 800f194:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800f196:	e178      	b.n	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 800f198:	4b40      	ldr	r3, [pc, #256]	@ (800f29c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f1a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f1a4:	d10b      	bne.n	800f1be <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 800f1a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f1ac:	d107      	bne.n	800f1be <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f1ae:	f107 0314 	add.w	r3, r7, #20
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	f7fd fb46 	bl	800c844 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f1b8:	69bb      	ldr	r3, [r7, #24]
 800f1ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800f1bc:	e045      	b.n	800f24a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800f1be:	4b37      	ldr	r3, [pc, #220]	@ (800f29c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f1c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f1ca:	d10b      	bne.n	800f1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 800f1cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f1d2:	d107      	bne.n	800f1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f1d4:	f107 0308 	add.w	r3, r7, #8
 800f1d8:	4618      	mov	r0, r3
 800f1da:	f7fd fc9f 	bl	800cb1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800f1e2:	e032      	b.n	800f24a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 800f1e4:	4b2d      	ldr	r3, [pc, #180]	@ (800f29c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	f003 0302 	and.w	r3, r3, #2
 800f1ec:	2b02      	cmp	r3, #2
 800f1ee:	d10d      	bne.n	800f20c <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 800f1f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1f2:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800f1f6:	d109      	bne.n	800f20c <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800f1f8:	4b28      	ldr	r3, [pc, #160]	@ (800f29c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	08db      	lsrs	r3, r3, #3
 800f1fe:	f003 0303 	and.w	r3, r3, #3
 800f202:	4a27      	ldr	r2, [pc, #156]	@ (800f2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800f204:	fa22 f303 	lsr.w	r3, r2, r3
 800f208:	637b      	str	r3, [r7, #52]	@ 0x34
 800f20a:	e01e      	b.n	800f24a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800f20c:	4b23      	ldr	r3, [pc, #140]	@ (800f29c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f214:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f218:	d106      	bne.n	800f228 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 800f21a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f21c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f220:	d102      	bne.n	800f228 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 800f222:	4b20      	ldr	r3, [pc, #128]	@ (800f2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800f224:	637b      	str	r3, [r7, #52]	@ 0x34
 800f226:	e010      	b.n	800f24a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 800f228:	4b1c      	ldr	r3, [pc, #112]	@ (800f29c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f230:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f234:	d106      	bne.n	800f244 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 800f236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f238:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800f23c:	d102      	bne.n	800f244 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 800f23e:	4b1a      	ldr	r3, [pc, #104]	@ (800f2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800f240:	637b      	str	r3, [r7, #52]	@ 0x34
 800f242:	e002      	b.n	800f24a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 800f244:	2300      	movs	r3, #0
 800f246:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f248:	e11f      	b.n	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800f24a:	e11e      	b.n	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800f24c:	4b13      	ldr	r3, [pc, #76]	@ (800f29c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800f24e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800f252:	f003 0303 	and.w	r3, r3, #3
 800f256:	633b      	str	r3, [r7, #48]	@ 0x30
 800f258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f25a:	2b03      	cmp	r3, #3
 800f25c:	d85f      	bhi.n	800f31e <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 800f25e:	a201      	add	r2, pc, #4	@ (adr r2, 800f264 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 800f260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f264:	0800f275 	.word	0x0800f275
 800f268:	0800f27d 	.word	0x0800f27d
 800f26c:	0800f28d 	.word	0x0800f28d
 800f270:	0800f2ad 	.word	0x0800f2ad

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 800f274:	f7fb f992 	bl	800a59c <HAL_RCC_GetHCLKFreq>
 800f278:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800f27a:	e053      	b.n	800f324 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f27c:	f107 0320 	add.w	r3, r7, #32
 800f280:	4618      	mov	r0, r3
 800f282:	f7fd f973 	bl	800c56c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800f286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f288:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800f28a:	e04b      	b.n	800f324 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f28c:	f107 0314 	add.w	r3, r7, #20
 800f290:	4618      	mov	r0, r3
 800f292:	f7fd fad7 	bl	800c844 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800f296:	69fb      	ldr	r3, [r7, #28]
 800f298:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800f29a:	e043      	b.n	800f324 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800f29c:	44020c00 	.word	0x44020c00
 800f2a0:	03d09000 	.word	0x03d09000
 800f2a4:	003d0900 	.word	0x003d0900
 800f2a8:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f2ac:	4b79      	ldr	r3, [pc, #484]	@ (800f494 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800f2ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800f2b2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800f2b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f2b8:	4b76      	ldr	r3, [pc, #472]	@ (800f494 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	f003 0302 	and.w	r3, r3, #2
 800f2c0:	2b02      	cmp	r3, #2
 800f2c2:	d10c      	bne.n	800f2de <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 800f2c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d109      	bne.n	800f2de <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800f2ca:	4b72      	ldr	r3, [pc, #456]	@ (800f494 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	08db      	lsrs	r3, r3, #3
 800f2d0:	f003 0303 	and.w	r3, r3, #3
 800f2d4:	4a70      	ldr	r2, [pc, #448]	@ (800f498 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 800f2d6:	fa22 f303 	lsr.w	r3, r2, r3
 800f2da:	637b      	str	r3, [r7, #52]	@ 0x34
 800f2dc:	e01e      	b.n	800f31c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f2de:	4b6d      	ldr	r3, [pc, #436]	@ (800f494 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f2e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f2ea:	d106      	bne.n	800f2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 800f2ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f2f2:	d102      	bne.n	800f2fa <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800f2f4:	4b69      	ldr	r3, [pc, #420]	@ (800f49c <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 800f2f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800f2f8:	e010      	b.n	800f31c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f2fa:	4b66      	ldr	r3, [pc, #408]	@ (800f494 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f302:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f306:	d106      	bne.n	800f316 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 800f308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f30a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f30e:	d102      	bne.n	800f316 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800f310:	4b63      	ldr	r3, [pc, #396]	@ (800f4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800f312:	637b      	str	r3, [r7, #52]	@ 0x34
 800f314:	e002      	b.n	800f31c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800f316:	2300      	movs	r3, #0
 800f318:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800f31a:	e003      	b.n	800f324 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800f31c:	e002      	b.n	800f324 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800f31e:	2300      	movs	r3, #0
 800f320:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800f322:	bf00      	nop
          }
        }
        break;
 800f324:	e0b1      	b.n	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800f326:	4b5b      	ldr	r3, [pc, #364]	@ (800f494 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800f328:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800f32c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800f330:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800f332:	4b58      	ldr	r3, [pc, #352]	@ (800f494 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800f334:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f338:	f003 0302 	and.w	r3, r3, #2
 800f33c:	2b02      	cmp	r3, #2
 800f33e:	d106      	bne.n	800f34e <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800f340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f342:	2b00      	cmp	r3, #0
 800f344:	d103      	bne.n	800f34e <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 800f346:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f34a:	637b      	str	r3, [r7, #52]	@ 0x34
 800f34c:	e01f      	b.n	800f38e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800f34e:	4b51      	ldr	r3, [pc, #324]	@ (800f494 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800f350:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f354:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f358:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f35c:	d106      	bne.n	800f36c <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 800f35e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f360:	2b40      	cmp	r3, #64	@ 0x40
 800f362:	d103      	bne.n	800f36c <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 800f364:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800f368:	637b      	str	r3, [r7, #52]	@ 0x34
 800f36a:	e010      	b.n	800f38e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 800f36c:	4b49      	ldr	r3, [pc, #292]	@ (800f494 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f374:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f378:	d106      	bne.n	800f388 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 800f37a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f37c:	2b80      	cmp	r3, #128	@ 0x80
 800f37e:	d103      	bne.n	800f388 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 800f380:	f248 0312 	movw	r3, #32786	@ 0x8012
 800f384:	637b      	str	r3, [r7, #52]	@ 0x34
 800f386:	e002      	b.n	800f38e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800f388:	2300      	movs	r3, #0
 800f38a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800f38c:	e07d      	b.n	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800f38e:	e07c      	b.n	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800f390:	4b40      	ldr	r3, [pc, #256]	@ (800f494 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800f392:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800f396:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800f39a:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800f39c:	4b3d      	ldr	r3, [pc, #244]	@ (800f494 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800f3a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f3a8:	d105      	bne.n	800f3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 800f3aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d102      	bne.n	800f3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 800f3b0:	4b3c      	ldr	r3, [pc, #240]	@ (800f4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800f3b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800f3b4:	e031      	b.n	800f41a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800f3b6:	4b37      	ldr	r3, [pc, #220]	@ (800f494 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f3be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f3c2:	d10a      	bne.n	800f3da <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 800f3c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3c6:	2b10      	cmp	r3, #16
 800f3c8:	d107      	bne.n	800f3da <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f3ca:	f107 0320 	add.w	r3, r7, #32
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	f7fd f8cc 	bl	800c56c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f3d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3d6:	637b      	str	r3, [r7, #52]	@ 0x34
 800f3d8:	e01f      	b.n	800f41a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800f3da:	4b2e      	ldr	r3, [pc, #184]	@ (800f494 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800f3dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f3e0:	f003 0302 	and.w	r3, r3, #2
 800f3e4:	2b02      	cmp	r3, #2
 800f3e6:	d106      	bne.n	800f3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 800f3e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3ea:	2b20      	cmp	r3, #32
 800f3ec:	d103      	bne.n	800f3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800f3ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f3f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800f3f4:	e011      	b.n	800f41a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800f3f6:	4b27      	ldr	r3, [pc, #156]	@ (800f494 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800f3f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800f3fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f400:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f404:	d106      	bne.n	800f414 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 800f406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f408:	2b30      	cmp	r3, #48	@ 0x30
 800f40a:	d103      	bne.n	800f414 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 800f40c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800f410:	637b      	str	r3, [r7, #52]	@ 0x34
 800f412:	e002      	b.n	800f41a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800f414:	2300      	movs	r3, #0
 800f416:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800f418:	e037      	b.n	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800f41a:	e036      	b.n	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800f41c:	4b1d      	ldr	r3, [pc, #116]	@ (800f494 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800f41e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800f422:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800f426:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800f428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f42a:	2b10      	cmp	r3, #16
 800f42c:	d107      	bne.n	800f43e <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f42e:	f107 0320 	add.w	r3, r7, #32
 800f432:	4618      	mov	r0, r3
 800f434:	f7fd f89a 	bl	800c56c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f43a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800f43c:	e025      	b.n	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800f43e:	4b15      	ldr	r3, [pc, #84]	@ (800f494 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f446:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f44a:	d10a      	bne.n	800f462 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 800f44c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f44e:	2b20      	cmp	r3, #32
 800f450:	d107      	bne.n	800f462 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f452:	f107 0308 	add.w	r3, r7, #8
 800f456:	4618      	mov	r0, r3
 800f458:	f7fd fb60 	bl	800cb1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	637b      	str	r3, [r7, #52]	@ 0x34
 800f460:	e00f      	b.n	800f482 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800f462:	4b0c      	ldr	r3, [pc, #48]	@ (800f494 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800f46a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f46e:	d105      	bne.n	800f47c <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 800f470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f472:	2b30      	cmp	r3, #48	@ 0x30
 800f474:	d102      	bne.n	800f47c <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 800f476:	4b0b      	ldr	r3, [pc, #44]	@ (800f4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800f478:	637b      	str	r3, [r7, #52]	@ 0x34
 800f47a:	e002      	b.n	800f482 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800f47c:	2300      	movs	r3, #0
 800f47e:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 800f480:	e003      	b.n	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800f482:	e002      	b.n	800f48a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 800f484:	2300      	movs	r3, #0
 800f486:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800f488:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 800f48a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800f48c:	4618      	mov	r0, r3
 800f48e:	373c      	adds	r7, #60	@ 0x3c
 800f490:	46bd      	mov	sp, r7
 800f492:	bd90      	pop	{r4, r7, pc}
 800f494:	44020c00 	.word	0x44020c00
 800f498:	03d09000 	.word	0x03d09000
 800f49c:	003d0900 	.word	0x003d0900
 800f4a0:	007a1200 	.word	0x007a1200
 800f4a4:	02dc6c00 	.word	0x02dc6c00

0800f4a8 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b084      	sub	sp, #16
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800f4b0:	4b48      	ldr	r3, [pc, #288]	@ (800f5d4 <RCCEx_PLL2_Config+0x12c>)
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	4a47      	ldr	r2, [pc, #284]	@ (800f5d4 <RCCEx_PLL2_Config+0x12c>)
 800f4b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f4ba:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800f4bc:	f7f6 fa82 	bl	80059c4 <HAL_GetTick>
 800f4c0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f4c2:	e008      	b.n	800f4d6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800f4c4:	f7f6 fa7e 	bl	80059c4 <HAL_GetTick>
 800f4c8:	4602      	mov	r2, r0
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	1ad3      	subs	r3, r2, r3
 800f4ce:	2b02      	cmp	r3, #2
 800f4d0:	d901      	bls.n	800f4d6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800f4d2:	2303      	movs	r3, #3
 800f4d4:	e07a      	b.n	800f5cc <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f4d6:	4b3f      	ldr	r3, [pc, #252]	@ (800f5d4 <RCCEx_PLL2_Config+0x12c>)
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d1f0      	bne.n	800f4c4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800f4e2:	4b3c      	ldr	r3, [pc, #240]	@ (800f5d4 <RCCEx_PLL2_Config+0x12c>)
 800f4e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4e6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800f4ea:	f023 0303 	bic.w	r3, r3, #3
 800f4ee:	687a      	ldr	r2, [r7, #4]
 800f4f0:	6811      	ldr	r1, [r2, #0]
 800f4f2:	687a      	ldr	r2, [r7, #4]
 800f4f4:	6852      	ldr	r2, [r2, #4]
 800f4f6:	0212      	lsls	r2, r2, #8
 800f4f8:	430a      	orrs	r2, r1
 800f4fa:	4936      	ldr	r1, [pc, #216]	@ (800f5d4 <RCCEx_PLL2_Config+0x12c>)
 800f4fc:	4313      	orrs	r3, r2
 800f4fe:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	689b      	ldr	r3, [r3, #8]
 800f504:	3b01      	subs	r3, #1
 800f506:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	68db      	ldr	r3, [r3, #12]
 800f50e:	3b01      	subs	r3, #1
 800f510:	025b      	lsls	r3, r3, #9
 800f512:	b29b      	uxth	r3, r3
 800f514:	431a      	orrs	r2, r3
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	691b      	ldr	r3, [r3, #16]
 800f51a:	3b01      	subs	r3, #1
 800f51c:	041b      	lsls	r3, r3, #16
 800f51e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800f522:	431a      	orrs	r2, r3
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	695b      	ldr	r3, [r3, #20]
 800f528:	3b01      	subs	r3, #1
 800f52a:	061b      	lsls	r3, r3, #24
 800f52c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800f530:	4928      	ldr	r1, [pc, #160]	@ (800f5d4 <RCCEx_PLL2_Config+0x12c>)
 800f532:	4313      	orrs	r3, r2
 800f534:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800f536:	4b27      	ldr	r3, [pc, #156]	@ (800f5d4 <RCCEx_PLL2_Config+0x12c>)
 800f538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f53a:	f023 020c 	bic.w	r2, r3, #12
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	699b      	ldr	r3, [r3, #24]
 800f542:	4924      	ldr	r1, [pc, #144]	@ (800f5d4 <RCCEx_PLL2_Config+0x12c>)
 800f544:	4313      	orrs	r3, r2
 800f546:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800f548:	4b22      	ldr	r3, [pc, #136]	@ (800f5d4 <RCCEx_PLL2_Config+0x12c>)
 800f54a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f54c:	f023 0220 	bic.w	r2, r3, #32
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	69db      	ldr	r3, [r3, #28]
 800f554:	491f      	ldr	r1, [pc, #124]	@ (800f5d4 <RCCEx_PLL2_Config+0x12c>)
 800f556:	4313      	orrs	r3, r2
 800f558:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800f55a:	4b1e      	ldr	r3, [pc, #120]	@ (800f5d4 <RCCEx_PLL2_Config+0x12c>)
 800f55c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f562:	491c      	ldr	r1, [pc, #112]	@ (800f5d4 <RCCEx_PLL2_Config+0x12c>)
 800f564:	4313      	orrs	r3, r2
 800f566:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800f568:	4b1a      	ldr	r3, [pc, #104]	@ (800f5d4 <RCCEx_PLL2_Config+0x12c>)
 800f56a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f56c:	4a19      	ldr	r2, [pc, #100]	@ (800f5d4 <RCCEx_PLL2_Config+0x12c>)
 800f56e:	f023 0310 	bic.w	r3, r3, #16
 800f572:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800f574:	4b17      	ldr	r3, [pc, #92]	@ (800f5d4 <RCCEx_PLL2_Config+0x12c>)
 800f576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f578:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f57c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800f580:	687a      	ldr	r2, [r7, #4]
 800f582:	6a12      	ldr	r2, [r2, #32]
 800f584:	00d2      	lsls	r2, r2, #3
 800f586:	4913      	ldr	r1, [pc, #76]	@ (800f5d4 <RCCEx_PLL2_Config+0x12c>)
 800f588:	4313      	orrs	r3, r2
 800f58a:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800f58c:	4b11      	ldr	r3, [pc, #68]	@ (800f5d4 <RCCEx_PLL2_Config+0x12c>)
 800f58e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f590:	4a10      	ldr	r2, [pc, #64]	@ (800f5d4 <RCCEx_PLL2_Config+0x12c>)
 800f592:	f043 0310 	orr.w	r3, r3, #16
 800f596:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800f598:	4b0e      	ldr	r3, [pc, #56]	@ (800f5d4 <RCCEx_PLL2_Config+0x12c>)
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	4a0d      	ldr	r2, [pc, #52]	@ (800f5d4 <RCCEx_PLL2_Config+0x12c>)
 800f59e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f5a2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800f5a4:	f7f6 fa0e 	bl	80059c4 <HAL_GetTick>
 800f5a8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f5aa:	e008      	b.n	800f5be <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800f5ac:	f7f6 fa0a 	bl	80059c4 <HAL_GetTick>
 800f5b0:	4602      	mov	r2, r0
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	1ad3      	subs	r3, r2, r3
 800f5b6:	2b02      	cmp	r3, #2
 800f5b8:	d901      	bls.n	800f5be <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800f5ba:	2303      	movs	r3, #3
 800f5bc:	e006      	b.n	800f5cc <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f5be:	4b05      	ldr	r3, [pc, #20]	@ (800f5d4 <RCCEx_PLL2_Config+0x12c>)
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d0f0      	beq.n	800f5ac <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800f5ca:	2300      	movs	r3, #0

}
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	3710      	adds	r7, #16
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	bd80      	pop	{r7, pc}
 800f5d4:	44020c00 	.word	0x44020c00

0800f5d8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b084      	sub	sp, #16
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800f5e0:	4b48      	ldr	r3, [pc, #288]	@ (800f704 <RCCEx_PLL3_Config+0x12c>)
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	4a47      	ldr	r2, [pc, #284]	@ (800f704 <RCCEx_PLL3_Config+0x12c>)
 800f5e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f5ea:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800f5ec:	f7f6 f9ea 	bl	80059c4 <HAL_GetTick>
 800f5f0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f5f2:	e008      	b.n	800f606 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f5f4:	f7f6 f9e6 	bl	80059c4 <HAL_GetTick>
 800f5f8:	4602      	mov	r2, r0
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	1ad3      	subs	r3, r2, r3
 800f5fe:	2b02      	cmp	r3, #2
 800f600:	d901      	bls.n	800f606 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800f602:	2303      	movs	r3, #3
 800f604:	e07a      	b.n	800f6fc <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f606:	4b3f      	ldr	r3, [pc, #252]	@ (800f704 <RCCEx_PLL3_Config+0x12c>)
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d1f0      	bne.n	800f5f4 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800f612:	4b3c      	ldr	r3, [pc, #240]	@ (800f704 <RCCEx_PLL3_Config+0x12c>)
 800f614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f616:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800f61a:	f023 0303 	bic.w	r3, r3, #3
 800f61e:	687a      	ldr	r2, [r7, #4]
 800f620:	6811      	ldr	r1, [r2, #0]
 800f622:	687a      	ldr	r2, [r7, #4]
 800f624:	6852      	ldr	r2, [r2, #4]
 800f626:	0212      	lsls	r2, r2, #8
 800f628:	430a      	orrs	r2, r1
 800f62a:	4936      	ldr	r1, [pc, #216]	@ (800f704 <RCCEx_PLL3_Config+0x12c>)
 800f62c:	4313      	orrs	r3, r2
 800f62e:	630b      	str	r3, [r1, #48]	@ 0x30
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	689b      	ldr	r3, [r3, #8]
 800f634:	3b01      	subs	r3, #1
 800f636:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	68db      	ldr	r3, [r3, #12]
 800f63e:	3b01      	subs	r3, #1
 800f640:	025b      	lsls	r3, r3, #9
 800f642:	b29b      	uxth	r3, r3
 800f644:	431a      	orrs	r2, r3
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	691b      	ldr	r3, [r3, #16]
 800f64a:	3b01      	subs	r3, #1
 800f64c:	041b      	lsls	r3, r3, #16
 800f64e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800f652:	431a      	orrs	r2, r3
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	695b      	ldr	r3, [r3, #20]
 800f658:	3b01      	subs	r3, #1
 800f65a:	061b      	lsls	r3, r3, #24
 800f65c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800f660:	4928      	ldr	r1, [pc, #160]	@ (800f704 <RCCEx_PLL3_Config+0x12c>)
 800f662:	4313      	orrs	r3, r2
 800f664:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800f666:	4b27      	ldr	r3, [pc, #156]	@ (800f704 <RCCEx_PLL3_Config+0x12c>)
 800f668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f66a:	f023 020c 	bic.w	r2, r3, #12
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	699b      	ldr	r3, [r3, #24]
 800f672:	4924      	ldr	r1, [pc, #144]	@ (800f704 <RCCEx_PLL3_Config+0x12c>)
 800f674:	4313      	orrs	r3, r2
 800f676:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800f678:	4b22      	ldr	r3, [pc, #136]	@ (800f704 <RCCEx_PLL3_Config+0x12c>)
 800f67a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f67c:	f023 0220 	bic.w	r2, r3, #32
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	69db      	ldr	r3, [r3, #28]
 800f684:	491f      	ldr	r1, [pc, #124]	@ (800f704 <RCCEx_PLL3_Config+0x12c>)
 800f686:	4313      	orrs	r3, r2
 800f688:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800f68a:	4b1e      	ldr	r3, [pc, #120]	@ (800f704 <RCCEx_PLL3_Config+0x12c>)
 800f68c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f692:	491c      	ldr	r1, [pc, #112]	@ (800f704 <RCCEx_PLL3_Config+0x12c>)
 800f694:	4313      	orrs	r3, r2
 800f696:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800f698:	4b1a      	ldr	r3, [pc, #104]	@ (800f704 <RCCEx_PLL3_Config+0x12c>)
 800f69a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f69c:	4a19      	ldr	r2, [pc, #100]	@ (800f704 <RCCEx_PLL3_Config+0x12c>)
 800f69e:	f023 0310 	bic.w	r3, r3, #16
 800f6a2:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800f6a4:	4b17      	ldr	r3, [pc, #92]	@ (800f704 <RCCEx_PLL3_Config+0x12c>)
 800f6a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f6a8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f6ac:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800f6b0:	687a      	ldr	r2, [r7, #4]
 800f6b2:	6a12      	ldr	r2, [r2, #32]
 800f6b4:	00d2      	lsls	r2, r2, #3
 800f6b6:	4913      	ldr	r1, [pc, #76]	@ (800f704 <RCCEx_PLL3_Config+0x12c>)
 800f6b8:	4313      	orrs	r3, r2
 800f6ba:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800f6bc:	4b11      	ldr	r3, [pc, #68]	@ (800f704 <RCCEx_PLL3_Config+0x12c>)
 800f6be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f6c0:	4a10      	ldr	r2, [pc, #64]	@ (800f704 <RCCEx_PLL3_Config+0x12c>)
 800f6c2:	f043 0310 	orr.w	r3, r3, #16
 800f6c6:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800f6c8:	4b0e      	ldr	r3, [pc, #56]	@ (800f704 <RCCEx_PLL3_Config+0x12c>)
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	4a0d      	ldr	r2, [pc, #52]	@ (800f704 <RCCEx_PLL3_Config+0x12c>)
 800f6ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f6d2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800f6d4:	f7f6 f976 	bl	80059c4 <HAL_GetTick>
 800f6d8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f6da:	e008      	b.n	800f6ee <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f6dc:	f7f6 f972 	bl	80059c4 <HAL_GetTick>
 800f6e0:	4602      	mov	r2, r0
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	1ad3      	subs	r3, r2, r3
 800f6e6:	2b02      	cmp	r3, #2
 800f6e8:	d901      	bls.n	800f6ee <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800f6ea:	2303      	movs	r3, #3
 800f6ec:	e006      	b.n	800f6fc <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f6ee:	4b05      	ldr	r3, [pc, #20]	@ (800f704 <RCCEx_PLL3_Config+0x12c>)
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d0f0      	beq.n	800f6dc <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800f6fa:	2300      	movs	r3, #0
}
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	3710      	adds	r7, #16
 800f700:	46bd      	mov	sp, r7
 800f702:	bd80      	pop	{r7, pc}
 800f704:	44020c00 	.word	0x44020c00

0800f708 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800f708:	b580      	push	{r7, lr}
 800f70a:	b084      	sub	sp, #16
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d101      	bne.n	800f71a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800f716:	2301      	movs	r3, #1
 800f718:	e08c      	b.n	800f834 <HAL_RNG_Init+0x12c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	7a5b      	ldrb	r3, [r3, #9]
 800f71e:	b2db      	uxtb	r3, r3
 800f720:	2b00      	cmp	r3, #0
 800f722:	d105      	bne.n	800f730 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	2200      	movs	r2, #0
 800f728:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800f72a:	6878      	ldr	r0, [r7, #4]
 800f72c:	f7f5 f9a2 	bl	8004a74 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	2202      	movs	r2, #2
 800f734:	725a      	strb	r2, [r3, #9]

  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	681a      	ldr	r2, [r3, #0]
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	f022 0204 	bic.w	r2, r2, #4
 800f744:	601a      	str	r2, [r3, #0]

#if defined(RNG_CR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->CR, RNG_CR_NIST_VALUE | RNG_CR_CONDRST | hrng->Init.ClockErrorDetection);
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	6859      	ldr	r1, [r3, #4]
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	681a      	ldr	r2, [r3, #0]
 800f74e:	4b3b      	ldr	r3, [pc, #236]	@ (800f83c <HAL_RNG_Init+0x134>)
 800f750:	430b      	orrs	r3, r1
 800f752:	6013      	str	r3, [r2, #0]
  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
#endif /* RNG_CR_NIST_VALUE */
#if defined(RNG_HTCR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCR_NIST_VALUE);
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	f646 2291 	movw	r2, #27281	@ 0x6a91
 800f75c:	611a      	str	r2, [r3, #16]
#endif /* RNG_HTCR_NIST_VALUE */
#if defined(RNG_NSCR_NIST_VALUE)
  WRITE_REG(hrng->Instance->NSCR, RNG_NSCR_NIST_VALUE);
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	4a37      	ldr	r2, [pc, #220]	@ (800f840 <HAL_RNG_Init+0x138>)
 800f764:	60da      	str	r2, [r3, #12]
#endif /* RNG_NSCR_NIST_VALUE */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	681a      	ldr	r2, [r3, #0]
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800f774:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800f776:	f7f6 f925 	bl	80059c4 <HAL_GetTick>
 800f77a:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800f77c:	e016      	b.n	800f7ac <HAL_RNG_Init+0xa4>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800f77e:	f7f6 f921 	bl	80059c4 <HAL_GetTick>
 800f782:	4602      	mov	r2, r0
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	1ad3      	subs	r3, r2, r3
 800f788:	2b04      	cmp	r3, #4
 800f78a:	d90f      	bls.n	800f7ac <HAL_RNG_Init+0xa4>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800f796:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f79a:	d107      	bne.n	800f7ac <HAL_RNG_Init+0xa4>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	2201      	movs	r2, #1
 800f7a0:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	2202      	movs	r2, #2
 800f7a6:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800f7a8:	2301      	movs	r3, #1
 800f7aa:	e043      	b.n	800f834 <HAL_RNG_Init+0x12c>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800f7b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f7ba:	d0e0      	beq.n	800f77e <HAL_RNG_Init+0x76>
      }
    }
  }

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	681a      	ldr	r2, [r3, #0]
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	f042 0204 	orr.w	r2, r2, #4
 800f7ca:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	685b      	ldr	r3, [r3, #4]
 800f7d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f7d6:	2b40      	cmp	r3, #64	@ 0x40
 800f7d8:	d104      	bne.n	800f7e4 <HAL_RNG_Init+0xdc>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	2204      	movs	r2, #4
 800f7de:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800f7e0:	2301      	movs	r3, #1
 800f7e2:	e027      	b.n	800f834 <HAL_RNG_Init+0x12c>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800f7e4:	f7f6 f8ee 	bl	80059c4 <HAL_GetTick>
 800f7e8:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800f7ea:	e015      	b.n	800f818 <HAL_RNG_Init+0x110>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800f7ec:	f7f6 f8ea 	bl	80059c4 <HAL_GetTick>
 800f7f0:	4602      	mov	r2, r0
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	1ad3      	subs	r3, r2, r3
 800f7f6:	2b04      	cmp	r3, #4
 800f7f8:	d90e      	bls.n	800f818 <HAL_RNG_Init+0x110>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	685b      	ldr	r3, [r3, #4]
 800f800:	f003 0301 	and.w	r3, r3, #1
 800f804:	2b01      	cmp	r3, #1
 800f806:	d007      	beq.n	800f818 <HAL_RNG_Init+0x110>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	2204      	movs	r2, #4
 800f80c:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	2202      	movs	r2, #2
 800f812:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800f814:	2301      	movs	r3, #1
 800f816:	e00d      	b.n	800f834 <HAL_RNG_Init+0x12c>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	685b      	ldr	r3, [r3, #4]
 800f81e:	f003 0301 	and.w	r3, r3, #1
 800f822:	2b01      	cmp	r3, #1
 800f824:	d1e2      	bne.n	800f7ec <HAL_RNG_Init+0xe4>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	2201      	movs	r2, #1
 800f82a:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	2200      	movs	r2, #0
 800f830:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800f832:	2300      	movs	r3, #0
}
 800f834:	4618      	mov	r0, r3
 800f836:	3710      	adds	r7, #16
 800f838:	46bd      	mov	sp, r7
 800f83a:	bd80      	pop	{r7, pc}
 800f83c:	40f00e00 	.word	0x40f00e00
 800f840:	0003af66 	.word	0x0003af66

0800f844 <HAL_RNG_DeInit>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_DeInit(RNG_HandleTypeDef *hrng)
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b084      	sub	sp, #16
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d101      	bne.n	800f856 <HAL_RNG_DeInit+0x12>
  {
    return HAL_ERROR;
 800f852:	2301      	movs	r3, #1
 800f854:	e056      	b.n	800f904 <HAL_RNG_DeInit+0xc0>
  }

  /* Clear Clock Error Detection bit when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, RNG_CED_ENABLE | RNG_CR_CONDRST);
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800f860:	f023 0320 	bic.w	r3, r3, #32
 800f864:	687a      	ldr	r2, [r7, #4]
 800f866:	6812      	ldr	r2, [r2, #0]
 800f868:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f86c:	6013      	str	r3, [r2, #0]

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	681a      	ldr	r2, [r3, #0]
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800f87c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800f87e:	f7f6 f8a1 	bl	80059c4 <HAL_GetTick>
 800f882:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800f884:	e019      	b.n	800f8ba <HAL_RNG_DeInit+0x76>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800f886:	f7f6 f89d 	bl	80059c4 <HAL_GetTick>
 800f88a:	4602      	mov	r2, r0
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	1ad3      	subs	r3, r2, r3
 800f890:	2b04      	cmp	r3, #4
 800f892:	d912      	bls.n	800f8ba <HAL_RNG_DeInit+0x76>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800f89e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f8a2:	d10a      	bne.n	800f8ba <HAL_RNG_DeInit+0x76>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	2201      	movs	r2, #1
 800f8a8:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	2202      	movs	r2, #2
 800f8ae:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	721a      	strb	r2, [r3, #8]
        return HAL_ERROR;
 800f8b6:	2301      	movs	r3, #1
 800f8b8:	e024      	b.n	800f904 <HAL_RNG_DeInit+0xc0>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800f8c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f8c8:	d0dd      	beq.n	800f886 <HAL_RNG_DeInit+0x42>
      }
    }
  }

  /* Disable the RNG Peripheral */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_IE | RNG_CR_RNGEN);
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	681a      	ldr	r2, [r3, #0]
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	f022 020c 	bic.w	r2, r2, #12
 800f8d8:	601a      	str	r2, [r3, #0]

  /* Clear RNG interrupt status flags */
  CLEAR_BIT(hrng->Instance->SR, RNG_SR_CEIS | RNG_SR_SEIS);
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	685a      	ldr	r2, [r3, #4]
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800f8e8:	605a      	str	r2, [r3, #4]

  /* DeInit the low level hardware */
  hrng->MspDeInitCallback(hrng);
#else
  /* DeInit the low level hardware */
  HAL_RNG_MspDeInit(hrng);
 800f8ea:	6878      	ldr	r0, [r7, #4]
 800f8ec:	f7f5 f91a 	bl	8004b24 <HAL_RNG_MspDeInit>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Update the RNG state */
  hrng->State = HAL_RNG_STATE_RESET;
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	2200      	movs	r2, #0
 800f8f4:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	60da      	str	r2, [r3, #12]

  /* Release Lock */
  __HAL_UNLOCK(hrng);
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	2200      	movs	r2, #0
 800f900:	721a      	strb	r2, [r3, #8]

  /* Return the function status */
  return HAL_OK;
 800f902:	2300      	movs	r3, #0
}
 800f904:	4618      	mov	r0, r3
 800f906:	3710      	adds	r7, #16
 800f908:	46bd      	mov	sp, r7
 800f90a:	bd80      	pop	{r7, pc}

0800f90c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	b084      	sub	sp, #16
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
 800f914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f916:	2300      	movs	r3, #0
 800f918:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	7a1b      	ldrb	r3, [r3, #8]
 800f91e:	2b01      	cmp	r3, #1
 800f920:	d101      	bne.n	800f926 <HAL_RNG_GenerateRandomNumber+0x1a>
 800f922:	2302      	movs	r3, #2
 800f924:	e068      	b.n	800f9f8 <HAL_RNG_GenerateRandomNumber+0xec>
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	2201      	movs	r2, #1
 800f92a:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	7a5b      	ldrb	r3, [r3, #9]
 800f930:	b2db      	uxtb	r3, r3
 800f932:	2b01      	cmp	r3, #1
 800f934:	d157      	bne.n	800f9e6 <HAL_RNG_GenerateRandomNumber+0xda>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	2202      	movs	r2, #2
 800f93a:	725a      	strb	r2, [r3, #9]
    /* Check if there is a seed error */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	685b      	ldr	r3, [r3, #4]
 800f942:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f946:	2b40      	cmp	r3, #64	@ 0x40
 800f948:	d10f      	bne.n	800f96a <HAL_RNG_GenerateRandomNumber+0x5e>
    {
      /* Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	2208      	movs	r2, #8
 800f94e:	60da      	str	r2, [r3, #12]
      /* Reset from seed error */
      status = RNG_RecoverSeedError(hrng);
 800f950:	6878      	ldr	r0, [r7, #4]
 800f952:	f000 f85f 	bl	800fa14 <RNG_RecoverSeedError>
 800f956:	4603      	mov	r3, r0
 800f958:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_ERROR)
 800f95a:	7bfb      	ldrb	r3, [r7, #15]
 800f95c:	2b01      	cmp	r3, #1
 800f95e:	d104      	bne.n	800f96a <HAL_RNG_GenerateRandomNumber+0x5e>
      {
        /* Update the error code */
        hrng->ErrorCode = HAL_RNG_ERROR_RECOVERSEED;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	2220      	movs	r2, #32
 800f964:	60da      	str	r2, [r3, #12]
        return status;
 800f966:	7bfb      	ldrb	r3, [r7, #15]
 800f968:	e046      	b.n	800f9f8 <HAL_RNG_GenerateRandomNumber+0xec>
      }
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 800f96a:	f7f6 f82b 	bl	80059c4 <HAL_GetTick>
 800f96e:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800f970:	e018      	b.n	800f9a4 <HAL_RNG_GenerateRandomNumber+0x98>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800f972:	f7f6 f827 	bl	80059c4 <HAL_GetTick>
 800f976:	4602      	mov	r2, r0
 800f978:	68bb      	ldr	r3, [r7, #8]
 800f97a:	1ad3      	subs	r3, r2, r3
 800f97c:	2b04      	cmp	r3, #4
 800f97e:	d911      	bls.n	800f9a4 <HAL_RNG_GenerateRandomNumber+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	685b      	ldr	r3, [r3, #4]
 800f986:	f003 0301 	and.w	r3, r3, #1
 800f98a:	2b01      	cmp	r3, #1
 800f98c:	d00a      	beq.n	800f9a4 <HAL_RNG_GenerateRandomNumber+0x98>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	2201      	movs	r2, #1
 800f992:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	2202      	movs	r2, #2
 800f998:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	2200      	movs	r2, #0
 800f99e:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 800f9a0:	2301      	movs	r3, #1
 800f9a2:	e029      	b.n	800f9f8 <HAL_RNG_GenerateRandomNumber+0xec>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	685b      	ldr	r3, [r3, #4]
 800f9aa:	f003 0301 	and.w	r3, r3, #1
 800f9ae:	2b01      	cmp	r3, #1
 800f9b0:	d1df      	bne.n	800f972 <HAL_RNG_GenerateRandomNumber+0x66>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	689a      	ldr	r2, [r3, #8]
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	611a      	str	r2, [r3, #16]
    /* In case of seed error, the value available in the RNG_DR register must not
       be used as it may not have enough entropy */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	685b      	ldr	r3, [r3, #4]
 800f9c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f9c6:	2b40      	cmp	r3, #64	@ 0x40
 800f9c8:	d105      	bne.n	800f9d6 <HAL_RNG_GenerateRandomNumber+0xca>
    {
      /* Update the error code and status */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	2208      	movs	r2, #8
 800f9ce:	60da      	str	r2, [r3, #12]
      status = HAL_ERROR;
 800f9d0:	2301      	movs	r3, #1
 800f9d2:	73fb      	strb	r3, [r7, #15]
 800f9d4:	e003      	b.n	800f9de <HAL_RNG_GenerateRandomNumber+0xd2>
    }
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	691a      	ldr	r2, [r3, #16]
 800f9da:	683b      	ldr	r3, [r7, #0]
 800f9dc:	601a      	str	r2, [r3, #0]
    }
    hrng->State = HAL_RNG_STATE_READY;
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	2201      	movs	r2, #1
 800f9e2:	725a      	strb	r2, [r3, #9]
 800f9e4:	e004      	b.n	800f9f0 <HAL_RNG_GenerateRandomNumber+0xe4>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	2204      	movs	r2, #4
 800f9ea:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 800f9ec:	2301      	movs	r3, #1
 800f9ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	2200      	movs	r2, #0
 800f9f4:	721a      	strb	r2, [r3, #8]

  return status;
 800f9f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	3710      	adds	r7, #16
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	bd80      	pop	{r7, pc}

0800fa00 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 800fa00:	b480      	push	{r7}
 800fa02:	b083      	sub	sp, #12
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 800fa08:	bf00      	nop
 800fa0a:	370c      	adds	r7, #12
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa12:	4770      	bx	lr

0800fa14 <RNG_RecoverSeedError>:
  * @brief  RNG sequence to recover from a seed error
  * @param  hrng pointer to a RNG_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef RNG_RecoverSeedError(RNG_HandleTypeDef *hrng)
{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b084      	sub	sp, #16
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	60fb      	str	r3, [r7, #12]

  /*Check if seed error current status (SECS)is set */
  if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	685b      	ldr	r3, [r3, #4]
 800fa26:	f003 0304 	and.w	r3, r3, #4
 800fa2a:	2b04      	cmp	r3, #4
 800fa2c:	d008      	beq.n	800fa40 <RNG_RecoverSeedError+0x2c>
  {
    /* RNG performed the reset automatically (auto-reset) */
    /* Clear bit SEIS */
    CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	685a      	ldr	r2, [r3, #4]
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800fa3c:	605a      	str	r2, [r3, #4]
 800fa3e:	e05f      	b.n	800fb00 <RNG_RecoverSeedError+0xec>
  }
  else  /* Sequence to fully recover from a seed error*/
  {
    /* Writing bit CONDRST=1*/
    SET_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	681a      	ldr	r2, [r3, #0]
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800fa4e:	601a      	str	r2, [r3, #0]
    /* Writing bit CONDRST=0*/
    CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	681a      	ldr	r2, [r3, #0]
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800fa5e:	601a      	str	r2, [r3, #0]

    /* Wait for conditioning reset process to be completed */
    count = RNG_TIMEOUT_VALUE;
 800fa60:	2304      	movs	r3, #4
 800fa62:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	3b01      	subs	r3, #1
 800fa68:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d110      	bne.n	800fa92 <RNG_RecoverSeedError+0x7e>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	2201      	movs	r2, #1
 800fa74:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	68db      	ldr	r3, [r3, #12]
 800fa7a:	f043 0202 	orr.w	r2, r3, #2
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	2200      	movs	r2, #0
 800fa86:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 800fa88:	6878      	ldr	r0, [r7, #4]
 800fa8a:	f7ff ffb9 	bl	800fa00 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 800fa8e:	2301      	movs	r3, #1
 800fa90:	e03d      	b.n	800fb0e <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST));
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800fa9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800faa0:	d0e0      	beq.n	800fa64 <RNG_RecoverSeedError+0x50>

    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	685b      	ldr	r3, [r3, #4]
 800faa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800faac:	2b40      	cmp	r3, #64	@ 0x40
 800faae:	d107      	bne.n	800fac0 <RNG_RecoverSeedError+0xac>
    {
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	685a      	ldr	r2, [r3, #4]
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800fabe:	605a      	str	r2, [r3, #4]
    }

    /* Wait for SECS to be cleared */
    count = RNG_TIMEOUT_VALUE;
 800fac0:	2304      	movs	r3, #4
 800fac2:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	3b01      	subs	r3, #1
 800fac8:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	2b00      	cmp	r3, #0
 800face:	d110      	bne.n	800faf2 <RNG_RecoverSeedError+0xde>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	2201      	movs	r2, #1
 800fad4:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	68db      	ldr	r3, [r3, #12]
 800fada:	f043 0202 	orr.w	r2, r3, #2
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	2200      	movs	r2, #0
 800fae6:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 800fae8:	6878      	ldr	r0, [r7, #4]
 800faea:	f7ff ff89 	bl	800fa00 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 800faee:	2301      	movs	r3, #1
 800faf0:	e00d      	b.n	800fb0e <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->SR, RNG_FLAG_SECS));
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	685b      	ldr	r3, [r3, #4]
 800faf8:	f003 0304 	and.w	r3, r3, #4
 800fafc:	2b04      	cmp	r3, #4
 800fafe:	d0e1      	beq.n	800fac4 <RNG_RecoverSeedError+0xb0>
  }
  /* Update the error code */
  hrng->ErrorCode &= ~ HAL_RNG_ERROR_SEED;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	68db      	ldr	r3, [r3, #12]
 800fb04:	f023 0208 	bic.w	r2, r3, #8
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 800fb0c:	2300      	movs	r3, #0
}
 800fb0e:	4618      	mov	r0, r3
 800fb10:	3710      	adds	r7, #16
 800fb12:	46bd      	mov	sp, r7
 800fb14:	bd80      	pop	{r7, pc}
	...

0800fb18 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b084      	sub	sp, #16
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800fb20:	2301      	movs	r3, #1
 800fb22:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d071      	beq.n	800fc0e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fb30:	b2db      	uxtb	r3, r3
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d106      	bne.n	800fb44 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	2200      	movs	r2, #0
 800fb3a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800fb3e:	6878      	ldr	r0, [r7, #4]
 800fb40:	f7f5 f80c 	bl	8004b5c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	2202      	movs	r2, #2
 800fb48:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800fb4c:	4b32      	ldr	r3, [pc, #200]	@ (800fc18 <HAL_RTC_Init+0x100>)
 800fb4e:	68db      	ldr	r3, [r3, #12]
 800fb50:	f003 0310 	and.w	r3, r3, #16
 800fb54:	2b10      	cmp	r3, #16
 800fb56:	d051      	beq.n	800fbfc <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800fb58:	4b2f      	ldr	r3, [pc, #188]	@ (800fc18 <HAL_RTC_Init+0x100>)
 800fb5a:	22ca      	movs	r2, #202	@ 0xca
 800fb5c:	625a      	str	r2, [r3, #36]	@ 0x24
 800fb5e:	4b2e      	ldr	r3, [pc, #184]	@ (800fc18 <HAL_RTC_Init+0x100>)
 800fb60:	2253      	movs	r2, #83	@ 0x53
 800fb62:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800fb64:	6878      	ldr	r0, [r7, #4]
 800fb66:	f000 f9a3 	bl	800feb0 <RTC_EnterInitMode>
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800fb6e:	7bfb      	ldrb	r3, [r7, #15]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d13f      	bne.n	800fbf4 <HAL_RTC_Init+0xdc>
      {
#if defined(RTC_CR_OSEL)
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800fb74:	4b28      	ldr	r3, [pc, #160]	@ (800fc18 <HAL_RTC_Init+0x100>)
 800fb76:	699b      	ldr	r3, [r3, #24]
 800fb78:	4a27      	ldr	r2, [pc, #156]	@ (800fc18 <HAL_RTC_Init+0x100>)
 800fb7a:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800fb7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fb82:	6193      	str	r3, [r2, #24]

        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800fb84:	4b24      	ldr	r3, [pc, #144]	@ (800fc18 <HAL_RTC_Init+0x100>)
 800fb86:	699a      	ldr	r2, [r3, #24]
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	6859      	ldr	r1, [r3, #4]
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	691b      	ldr	r3, [r3, #16]
 800fb90:	4319      	orrs	r1, r3
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	699b      	ldr	r3, [r3, #24]
 800fb96:	430b      	orrs	r3, r1
 800fb98:	491f      	ldr	r1, [pc, #124]	@ (800fc18 <HAL_RTC_Init+0x100>)
 800fb9a:	4313      	orrs	r3, r2
 800fb9c:	618b      	str	r3, [r1, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, hrtc->Init.HourFormat);
#endif /* RTC_CR_OSEL */

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	68da      	ldr	r2, [r3, #12]
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	689b      	ldr	r3, [r3, #8]
 800fba6:	041b      	lsls	r3, r3, #16
 800fba8:	491b      	ldr	r1, [pc, #108]	@ (800fc18 <HAL_RTC_Init+0x100>)
 800fbaa:	4313      	orrs	r3, r2
 800fbac:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800fbae:	4b1a      	ldr	r3, [pc, #104]	@ (800fc18 <HAL_RTC_Init+0x100>)
 800fbb0:	68db      	ldr	r3, [r3, #12]
 800fbb2:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fbbe:	430b      	orrs	r3, r1
 800fbc0:	4915      	ldr	r1, [pc, #84]	@ (800fc18 <HAL_RTC_Init+0x100>)
 800fbc2:	4313      	orrs	r3, r2
 800fbc4:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800fbc6:	6878      	ldr	r0, [r7, #4]
 800fbc8:	f000 f9ae 	bl	800ff28 <RTC_ExitInitMode>
 800fbcc:	4603      	mov	r3, r0
 800fbce:	73fb      	strb	r3, [r7, #15]

#if defined(RTC_CR_OSEL)
        if (status == HAL_OK)
 800fbd0:	7bfb      	ldrb	r3, [r7, #15]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d10e      	bne.n	800fbf4 <HAL_RTC_Init+0xdc>
        {
#if defined(RTC_CR_OUT2EN)
          MODIFY_REG(RTC->CR, \
 800fbd6:	4b10      	ldr	r3, [pc, #64]	@ (800fc18 <HAL_RTC_Init+0x100>)
 800fbd8:	699b      	ldr	r3, [r3, #24]
 800fbda:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	6a19      	ldr	r1, [r3, #32]
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	69db      	ldr	r3, [r3, #28]
 800fbe6:	4319      	orrs	r1, r3
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	695b      	ldr	r3, [r3, #20]
 800fbec:	430b      	orrs	r3, r1
 800fbee:	490a      	ldr	r1, [pc, #40]	@ (800fc18 <HAL_RTC_Init+0x100>)
 800fbf0:	4313      	orrs	r3, r2
 800fbf2:	618b      	str	r3, [r1, #24]
        }
#endif /* RTC_CR_OSEL */
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fbf4:	4b08      	ldr	r3, [pc, #32]	@ (800fc18 <HAL_RTC_Init+0x100>)
 800fbf6:	22ff      	movs	r2, #255	@ 0xff
 800fbf8:	625a      	str	r2, [r3, #36]	@ 0x24
 800fbfa:	e001      	b.n	800fc00 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800fc00:	7bfb      	ldrb	r3, [r7, #15]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d103      	bne.n	800fc0e <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	2201      	movs	r2, #1
 800fc0a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800fc0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc10:	4618      	mov	r0, r3
 800fc12:	3710      	adds	r7, #16
 800fc14:	46bd      	mov	sp, r7
 800fc16:	bd80      	pop	{r7, pc}
 800fc18:	44007800 	.word	0x44007800

0800fc1c <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800fc1c:	b590      	push	{r4, r7, lr}
 800fc1e:	b087      	sub	sp, #28
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	60f8      	str	r0, [r7, #12]
 800fc24:	60b9      	str	r1, [r7, #8]
 800fc26:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800fc2e:	2b01      	cmp	r3, #1
 800fc30:	d101      	bne.n	800fc36 <HAL_RTC_SetTime+0x1a>
 800fc32:	2302      	movs	r3, #2
 800fc34:	e07e      	b.n	800fd34 <HAL_RTC_SetTime+0x118>
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	2201      	movs	r2, #1
 800fc3a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	2202      	movs	r2, #2
 800fc42:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800fc46:	4b3d      	ldr	r3, [pc, #244]	@ (800fd3c <HAL_RTC_SetTime+0x120>)
 800fc48:	22ca      	movs	r2, #202	@ 0xca
 800fc4a:	625a      	str	r2, [r3, #36]	@ 0x24
 800fc4c:	4b3b      	ldr	r3, [pc, #236]	@ (800fd3c <HAL_RTC_SetTime+0x120>)
 800fc4e:	2253      	movs	r2, #83	@ 0x53
 800fc50:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800fc52:	68f8      	ldr	r0, [r7, #12]
 800fc54:	f000 f92c 	bl	800feb0 <RTC_EnterInitMode>
 800fc58:	4603      	mov	r3, r0
 800fc5a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800fc5c:	7cfb      	ldrb	r3, [r7, #19]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d159      	bne.n	800fd16 <HAL_RTC_SetTime+0xfa>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800fc62:	4b36      	ldr	r3, [pc, #216]	@ (800fd3c <HAL_RTC_SetTime+0x120>)
 800fc64:	68db      	ldr	r3, [r3, #12]
 800fc66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800fc6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fc6e:	d04d      	beq.n	800fd0c <HAL_RTC_SetTime+0xf0>
    {
      if (Format == RTC_FORMAT_BIN)
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d125      	bne.n	800fcc2 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800fc76:	4b31      	ldr	r3, [pc, #196]	@ (800fd3c <HAL_RTC_SetTime+0x120>)
 800fc78:	699b      	ldr	r3, [r3, #24]
 800fc7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d102      	bne.n	800fc88 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800fc82:	68bb      	ldr	r3, [r7, #8]
 800fc84:	2200      	movs	r2, #0
 800fc86:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800fc88:	68bb      	ldr	r3, [r7, #8]
 800fc8a:	781b      	ldrb	r3, [r3, #0]
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	f000 f989 	bl	800ffa4 <RTC_ByteToBcd2>
 800fc92:	4603      	mov	r3, r0
 800fc94:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800fc96:	68bb      	ldr	r3, [r7, #8]
 800fc98:	785b      	ldrb	r3, [r3, #1]
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	f000 f982 	bl	800ffa4 <RTC_ByteToBcd2>
 800fca0:	4603      	mov	r3, r0
 800fca2:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800fca4:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800fca6:	68bb      	ldr	r3, [r7, #8]
 800fca8:	789b      	ldrb	r3, [r3, #2]
 800fcaa:	4618      	mov	r0, r3
 800fcac:	f000 f97a 	bl	800ffa4 <RTC_ByteToBcd2>
 800fcb0:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800fcb2:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800fcb6:	68bb      	ldr	r3, [r7, #8]
 800fcb8:	78db      	ldrb	r3, [r3, #3]
 800fcba:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800fcbc:	4313      	orrs	r3, r2
 800fcbe:	617b      	str	r3, [r7, #20]
 800fcc0:	e017      	b.n	800fcf2 <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800fcc2:	4b1e      	ldr	r3, [pc, #120]	@ (800fd3c <HAL_RTC_SetTime+0x120>)
 800fcc4:	699b      	ldr	r3, [r3, #24]
 800fcc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d102      	bne.n	800fcd4 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800fcce:	68bb      	ldr	r3, [r7, #8]
 800fcd0:	2200      	movs	r2, #0
 800fcd2:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800fcd4:	68bb      	ldr	r3, [r7, #8]
 800fcd6:	781b      	ldrb	r3, [r3, #0]
 800fcd8:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800fcda:	68bb      	ldr	r3, [r7, #8]
 800fcdc:	785b      	ldrb	r3, [r3, #1]
 800fcde:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800fce0:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800fce2:	68ba      	ldr	r2, [r7, #8]
 800fce4:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800fce6:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800fce8:	68bb      	ldr	r3, [r7, #8]
 800fcea:	78db      	ldrb	r3, [r3, #3]
 800fcec:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800fcee:	4313      	orrs	r3, r2
 800fcf0:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800fcf2:	4a12      	ldr	r2, [pc, #72]	@ (800fd3c <HAL_RTC_SetTime+0x120>)
 800fcf4:	697b      	ldr	r3, [r7, #20]
 800fcf6:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800fcfa:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800fcfe:	6013      	str	r3, [r2, #0]

      /* Clear the bits to be configured */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800fd00:	4b0e      	ldr	r3, [pc, #56]	@ (800fd3c <HAL_RTC_SetTime+0x120>)
 800fd02:	699b      	ldr	r3, [r3, #24]
 800fd04:	4a0d      	ldr	r2, [pc, #52]	@ (800fd3c <HAL_RTC_SetTime+0x120>)
 800fd06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800fd0a:	6193      	str	r3, [r2, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800fd0c:	68f8      	ldr	r0, [r7, #12]
 800fd0e:	f000 f90b 	bl	800ff28 <RTC_ExitInitMode>
 800fd12:	4603      	mov	r3, r0
 800fd14:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fd16:	4b09      	ldr	r3, [pc, #36]	@ (800fd3c <HAL_RTC_SetTime+0x120>)
 800fd18:	22ff      	movs	r2, #255	@ 0xff
 800fd1a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800fd1c:	7cfb      	ldrb	r3, [r7, #19]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d103      	bne.n	800fd2a <HAL_RTC_SetTime+0x10e>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	2201      	movs	r2, #1
 800fd26:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800fd32:	7cfb      	ldrb	r3, [r7, #19]
}
 800fd34:	4618      	mov	r0, r3
 800fd36:	371c      	adds	r7, #28
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	bd90      	pop	{r4, r7, pc}
 800fd3c:	44007800 	.word	0x44007800

0800fd40 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800fd40:	b590      	push	{r4, r7, lr}
 800fd42:	b087      	sub	sp, #28
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	60f8      	str	r0, [r7, #12]
 800fd48:	60b9      	str	r1, [r7, #8]
 800fd4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800fd52:	2b01      	cmp	r3, #1
 800fd54:	d101      	bne.n	800fd5a <HAL_RTC_SetDate+0x1a>
 800fd56:	2302      	movs	r3, #2
 800fd58:	e071      	b.n	800fe3e <HAL_RTC_SetDate+0xfe>
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	2201      	movs	r2, #1
 800fd5e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	2202      	movs	r2, #2
 800fd66:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d10e      	bne.n	800fd8e <HAL_RTC_SetDate+0x4e>
 800fd70:	68bb      	ldr	r3, [r7, #8]
 800fd72:	785b      	ldrb	r3, [r3, #1]
 800fd74:	f003 0310 	and.w	r3, r3, #16
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d008      	beq.n	800fd8e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800fd7c:	68bb      	ldr	r3, [r7, #8]
 800fd7e:	785b      	ldrb	r3, [r3, #1]
 800fd80:	f023 0310 	bic.w	r3, r3, #16
 800fd84:	b2db      	uxtb	r3, r3
 800fd86:	330a      	adds	r3, #10
 800fd88:	b2da      	uxtb	r2, r3
 800fd8a:	68bb      	ldr	r3, [r7, #8]
 800fd8c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d11c      	bne.n	800fdce <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800fd94:	68bb      	ldr	r3, [r7, #8]
 800fd96:	78db      	ldrb	r3, [r3, #3]
 800fd98:	4618      	mov	r0, r3
 800fd9a:	f000 f903 	bl	800ffa4 <RTC_ByteToBcd2>
 800fd9e:	4603      	mov	r3, r0
 800fda0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800fda2:	68bb      	ldr	r3, [r7, #8]
 800fda4:	785b      	ldrb	r3, [r3, #1]
 800fda6:	4618      	mov	r0, r3
 800fda8:	f000 f8fc 	bl	800ffa4 <RTC_ByteToBcd2>
 800fdac:	4603      	mov	r3, r0
 800fdae:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800fdb0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800fdb2:	68bb      	ldr	r3, [r7, #8]
 800fdb4:	789b      	ldrb	r3, [r3, #2]
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	f000 f8f4 	bl	800ffa4 <RTC_ByteToBcd2>
 800fdbc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800fdbe:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800fdc2:	68bb      	ldr	r3, [r7, #8]
 800fdc4:	781b      	ldrb	r3, [r3, #0]
 800fdc6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800fdc8:	4313      	orrs	r3, r2
 800fdca:	617b      	str	r3, [r7, #20]
 800fdcc:	e00e      	b.n	800fdec <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800fdce:	68bb      	ldr	r3, [r7, #8]
 800fdd0:	78db      	ldrb	r3, [r3, #3]
 800fdd2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800fdd4:	68bb      	ldr	r3, [r7, #8]
 800fdd6:	785b      	ldrb	r3, [r3, #1]
 800fdd8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800fdda:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800fddc:	68ba      	ldr	r2, [r7, #8]
 800fdde:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800fde0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800fde2:	68bb      	ldr	r3, [r7, #8]
 800fde4:	781b      	ldrb	r3, [r3, #0]
 800fde6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800fde8:	4313      	orrs	r3, r2
 800fdea:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800fdec:	4b16      	ldr	r3, [pc, #88]	@ (800fe48 <HAL_RTC_SetDate+0x108>)
 800fdee:	22ca      	movs	r2, #202	@ 0xca
 800fdf0:	625a      	str	r2, [r3, #36]	@ 0x24
 800fdf2:	4b15      	ldr	r3, [pc, #84]	@ (800fe48 <HAL_RTC_SetDate+0x108>)
 800fdf4:	2253      	movs	r2, #83	@ 0x53
 800fdf6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800fdf8:	68f8      	ldr	r0, [r7, #12]
 800fdfa:	f000 f859 	bl	800feb0 <RTC_EnterInitMode>
 800fdfe:	4603      	mov	r3, r0
 800fe00:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800fe02:	7cfb      	ldrb	r3, [r7, #19]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d10b      	bne.n	800fe20 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800fe08:	4a0f      	ldr	r2, [pc, #60]	@ (800fe48 <HAL_RTC_SetDate+0x108>)
 800fe0a:	697b      	ldr	r3, [r7, #20]
 800fe0c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800fe10:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800fe14:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800fe16:	68f8      	ldr	r0, [r7, #12]
 800fe18:	f000 f886 	bl	800ff28 <RTC_ExitInitMode>
 800fe1c:	4603      	mov	r3, r0
 800fe1e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fe20:	4b09      	ldr	r3, [pc, #36]	@ (800fe48 <HAL_RTC_SetDate+0x108>)
 800fe22:	22ff      	movs	r2, #255	@ 0xff
 800fe24:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800fe26:	7cfb      	ldrb	r3, [r7, #19]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d103      	bne.n	800fe34 <HAL_RTC_SetDate+0xf4>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	2201      	movs	r2, #1
 800fe30:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	2200      	movs	r2, #0
 800fe38:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800fe3c:	7cfb      	ldrb	r3, [r7, #19]
}
 800fe3e:	4618      	mov	r0, r3
 800fe40:	371c      	adds	r7, #28
 800fe42:	46bd      	mov	sp, r7
 800fe44:	bd90      	pop	{r4, r7, pc}
 800fe46:	bf00      	nop
 800fe48:	44007800 	.word	0x44007800

0800fe4c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800fe4c:	b580      	push	{r7, lr}
 800fe4e:	b084      	sub	sp, #16
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800fe54:	4b15      	ldr	r3, [pc, #84]	@ (800feac <HAL_RTC_WaitForSynchro+0x60>)
 800fe56:	68db      	ldr	r3, [r3, #12]
 800fe58:	4a14      	ldr	r2, [pc, #80]	@ (800feac <HAL_RTC_WaitForSynchro+0x60>)
 800fe5a:	f023 0320 	bic.w	r3, r3, #32
 800fe5e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800fe60:	f7f5 fdb0 	bl	80059c4 <HAL_GetTick>
 800fe64:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800fe66:	e013      	b.n	800fe90 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800fe68:	f7f5 fdac 	bl	80059c4 <HAL_GetTick>
 800fe6c:	4602      	mov	r2, r0
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	1ad3      	subs	r3, r2, r3
 800fe72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800fe76:	d90b      	bls.n	800fe90 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800fe78:	4b0c      	ldr	r3, [pc, #48]	@ (800feac <HAL_RTC_WaitForSynchro+0x60>)
 800fe7a:	68db      	ldr	r3, [r3, #12]
 800fe7c:	f003 0320 	and.w	r3, r3, #32
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d10c      	bne.n	800fe9e <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	2203      	movs	r2, #3
 800fe88:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800fe8c:	2303      	movs	r3, #3
 800fe8e:	e008      	b.n	800fea2 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800fe90:	4b06      	ldr	r3, [pc, #24]	@ (800feac <HAL_RTC_WaitForSynchro+0x60>)
 800fe92:	68db      	ldr	r3, [r3, #12]
 800fe94:	f003 0320 	and.w	r3, r3, #32
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d0e5      	beq.n	800fe68 <HAL_RTC_WaitForSynchro+0x1c>
 800fe9c:	e000      	b.n	800fea0 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800fe9e:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800fea0:	2300      	movs	r3, #0
}
 800fea2:	4618      	mov	r0, r3
 800fea4:	3710      	adds	r7, #16
 800fea6:	46bd      	mov	sp, r7
 800fea8:	bd80      	pop	{r7, pc}
 800feaa:	bf00      	nop
 800feac:	44007800 	.word	0x44007800

0800feb0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b084      	sub	sp, #16
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800feb8:	2300      	movs	r3, #0
 800feba:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800febc:	4b19      	ldr	r3, [pc, #100]	@ (800ff24 <RTC_EnterInitMode+0x74>)
 800febe:	68db      	ldr	r3, [r3, #12]
 800fec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d128      	bne.n	800ff1a <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800fec8:	4b16      	ldr	r3, [pc, #88]	@ (800ff24 <RTC_EnterInitMode+0x74>)
 800feca:	68db      	ldr	r3, [r3, #12]
 800fecc:	4a15      	ldr	r2, [pc, #84]	@ (800ff24 <RTC_EnterInitMode+0x74>)
 800fece:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fed2:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800fed4:	f7f5 fd76 	bl	80059c4 <HAL_GetTick>
 800fed8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800feda:	e013      	b.n	800ff04 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800fedc:	f7f5 fd72 	bl	80059c4 <HAL_GetTick>
 800fee0:	4602      	mov	r2, r0
 800fee2:	68bb      	ldr	r3, [r7, #8]
 800fee4:	1ad3      	subs	r3, r2, r3
 800fee6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800feea:	d90b      	bls.n	800ff04 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800feec:	4b0d      	ldr	r3, [pc, #52]	@ (800ff24 <RTC_EnterInitMode+0x74>)
 800feee:	68db      	ldr	r3, [r3, #12]
 800fef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d10f      	bne.n	800ff18 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800fef8:	2303      	movs	r3, #3
 800fefa:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	2203      	movs	r2, #3
 800ff00:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ff04:	4b07      	ldr	r3, [pc, #28]	@ (800ff24 <RTC_EnterInitMode+0x74>)
 800ff06:	68db      	ldr	r3, [r3, #12]
 800ff08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d104      	bne.n	800ff1a <RTC_EnterInitMode+0x6a>
 800ff10:	7bfb      	ldrb	r3, [r7, #15]
 800ff12:	2b03      	cmp	r3, #3
 800ff14:	d1e2      	bne.n	800fedc <RTC_EnterInitMode+0x2c>
 800ff16:	e000      	b.n	800ff1a <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800ff18:	bf00      	nop
        }
      }
    }
  }

  return status;
 800ff1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	3710      	adds	r7, #16
 800ff20:	46bd      	mov	sp, r7
 800ff22:	bd80      	pop	{r7, pc}
 800ff24:	44007800 	.word	0x44007800

0800ff28 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b084      	sub	sp, #16
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ff30:	2300      	movs	r3, #0
 800ff32:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800ff34:	4b1a      	ldr	r3, [pc, #104]	@ (800ffa0 <RTC_ExitInitMode+0x78>)
 800ff36:	68db      	ldr	r3, [r3, #12]
 800ff38:	4a19      	ldr	r2, [pc, #100]	@ (800ffa0 <RTC_ExitInitMode+0x78>)
 800ff3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ff3e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800ff40:	4b17      	ldr	r3, [pc, #92]	@ (800ffa0 <RTC_ExitInitMode+0x78>)
 800ff42:	699b      	ldr	r3, [r3, #24]
 800ff44:	f003 0320 	and.w	r3, r3, #32
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d10c      	bne.n	800ff66 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ff4c:	6878      	ldr	r0, [r7, #4]
 800ff4e:	f7ff ff7d 	bl	800fe4c <HAL_RTC_WaitForSynchro>
 800ff52:	4603      	mov	r3, r0
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d01e      	beq.n	800ff96 <RTC_ExitInitMode+0x6e>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	2203      	movs	r2, #3
 800ff5c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800ff60:	2303      	movs	r3, #3
 800ff62:	73fb      	strb	r3, [r7, #15]
 800ff64:	e017      	b.n	800ff96 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ff66:	4b0e      	ldr	r3, [pc, #56]	@ (800ffa0 <RTC_ExitInitMode+0x78>)
 800ff68:	699b      	ldr	r3, [r3, #24]
 800ff6a:	4a0d      	ldr	r2, [pc, #52]	@ (800ffa0 <RTC_ExitInitMode+0x78>)
 800ff6c:	f023 0320 	bic.w	r3, r3, #32
 800ff70:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ff72:	6878      	ldr	r0, [r7, #4]
 800ff74:	f7ff ff6a 	bl	800fe4c <HAL_RTC_WaitForSynchro>
 800ff78:	4603      	mov	r3, r0
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d005      	beq.n	800ff8a <RTC_ExitInitMode+0x62>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	2203      	movs	r2, #3
 800ff82:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800ff86:	2303      	movs	r3, #3
 800ff88:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ff8a:	4b05      	ldr	r3, [pc, #20]	@ (800ffa0 <RTC_ExitInitMode+0x78>)
 800ff8c:	699b      	ldr	r3, [r3, #24]
 800ff8e:	4a04      	ldr	r2, [pc, #16]	@ (800ffa0 <RTC_ExitInitMode+0x78>)
 800ff90:	f043 0320 	orr.w	r3, r3, #32
 800ff94:	6193      	str	r3, [r2, #24]
  }
  return status;
 800ff96:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff98:	4618      	mov	r0, r3
 800ff9a:	3710      	adds	r7, #16
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	bd80      	pop	{r7, pc}
 800ffa0:	44007800 	.word	0x44007800

0800ffa4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800ffa4:	b480      	push	{r7}
 800ffa6:	b085      	sub	sp, #20
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	4603      	mov	r3, r0
 800ffac:	71fb      	strb	r3, [r7, #7]
  uint32_t bcd_high = 0U;
 800ffae:	2300      	movs	r3, #0
 800ffb0:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_value = Value;
 800ffb2:	79fb      	ldrb	r3, [r7, #7]
 800ffb4:	72fb      	strb	r3, [r7, #11]

  while (tmp_value >= 10U)
 800ffb6:	e005      	b.n	800ffc4 <RTC_ByteToBcd2+0x20>
  {
    bcd_high++;
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	3301      	adds	r3, #1
 800ffbc:	60fb      	str	r3, [r7, #12]
    tmp_value -= 10U;
 800ffbe:	7afb      	ldrb	r3, [r7, #11]
 800ffc0:	3b0a      	subs	r3, #10
 800ffc2:	72fb      	strb	r3, [r7, #11]
  while (tmp_value >= 10U)
 800ffc4:	7afb      	ldrb	r3, [r7, #11]
 800ffc6:	2b09      	cmp	r3, #9
 800ffc8:	d8f6      	bhi.n	800ffb8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcd_high << 4U) | tmp_value);
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	b2db      	uxtb	r3, r3
 800ffce:	011b      	lsls	r3, r3, #4
 800ffd0:	b2da      	uxtb	r2, r3
 800ffd2:	7afb      	ldrb	r3, [r7, #11]
 800ffd4:	4313      	orrs	r3, r2
 800ffd6:	b2db      	uxtb	r3, r3
}
 800ffd8:	4618      	mov	r0, r3
 800ffda:	3714      	adds	r7, #20
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe2:	4770      	bx	lr

0800ffe4 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(const RTC_HandleTypeDef *hrtc,
                                             const RTC_PrivilegeStateTypeDef *privilegeState)
{
 800ffe4:	b480      	push	{r7}
 800ffe6:	b083      	sub	sp, #12
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
 800ffec:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800ffee:	683b      	ldr	r3, [r7, #0]
 800fff0:	681a      	ldr	r2, [r3, #0]
 800fff2:	683b      	ldr	r3, [r7, #0]
 800fff4:	685b      	ldr	r3, [r3, #4]
 800fff6:	4910      	ldr	r1, [pc, #64]	@ (8010038 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800fff8:	4313      	orrs	r3, r2
 800fffa:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800fffc:	683b      	ldr	r3, [r7, #0]
 800fffe:	689a      	ldr	r2, [r3, #8]
 8010000:	683b      	ldr	r3, [r7, #0]
 8010002:	68db      	ldr	r3, [r3, #12]
 8010004:	431a      	orrs	r2, r3
 8010006:	683b      	ldr	r3, [r7, #0]
 8010008:	699b      	ldr	r3, [r3, #24]
 801000a:	490c      	ldr	r1, [pc, #48]	@ (801003c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 801000c:	4313      	orrs	r3, r2
 801000e:	624b      	str	r3, [r1, #36]	@ 0x24
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
#if defined(TAMP_SECCFGR_BKPWSEC)
  MODIFY_REG(TAMP->SECCFGR,
 8010010:	4b0a      	ldr	r3, [pc, #40]	@ (801003c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8010012:	6a1b      	ldr	r3, [r3, #32]
 8010014:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 8010018:	683b      	ldr	r3, [r7, #0]
 801001a:	6919      	ldr	r1, [r3, #16]
 801001c:	683b      	ldr	r3, [r7, #0]
 801001e:	695b      	ldr	r3, [r3, #20]
 8010020:	041b      	lsls	r3, r3, #16
 8010022:	430b      	orrs	r3, r1
 8010024:	4905      	ldr	r1, [pc, #20]	@ (801003c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8010026:	4313      	orrs	r3, r2
 8010028:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));
#endif /* TAMP_SECCFGR_BKPWSEC */

  return HAL_OK;
 801002a:	2300      	movs	r3, #0
}
 801002c:	4618      	mov	r0, r3
 801002e:	370c      	adds	r7, #12
 8010030:	46bd      	mov	sp, r7
 8010032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010036:	4770      	bx	lr
 8010038:	44007800 	.word	0x44007800
 801003c:	44007c00 	.word	0x44007c00

08010040 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010040:	b580      	push	{r7, lr}
 8010042:	b084      	sub	sp, #16
 8010044:	af00      	add	r7, sp, #0
 8010046:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	2b00      	cmp	r3, #0
 801004c:	d101      	bne.n	8010052 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801004e:	2301      	movs	r3, #1
 8010050:	e162      	b.n	8010318 <HAL_SPI_Init+0x2d8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	4a70      	ldr	r2, [pc, #448]	@ (8010218 <HAL_SPI_Init+0x1d8>)
 8010058:	4293      	cmp	r3, r2
 801005a:	d018      	beq.n	801008e <HAL_SPI_Init+0x4e>
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	4a6e      	ldr	r2, [pc, #440]	@ (801021c <HAL_SPI_Init+0x1dc>)
 8010062:	4293      	cmp	r3, r2
 8010064:	d013      	beq.n	801008e <HAL_SPI_Init+0x4e>
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	4a6d      	ldr	r2, [pc, #436]	@ (8010220 <HAL_SPI_Init+0x1e0>)
 801006c:	4293      	cmp	r3, r2
 801006e:	d00e      	beq.n	801008e <HAL_SPI_Init+0x4e>
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	4a6b      	ldr	r2, [pc, #428]	@ (8010224 <HAL_SPI_Init+0x1e4>)
 8010076:	4293      	cmp	r3, r2
 8010078:	d009      	beq.n	801008e <HAL_SPI_Init+0x4e>
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	4a6a      	ldr	r2, [pc, #424]	@ (8010228 <HAL_SPI_Init+0x1e8>)
 8010080:	4293      	cmp	r3, r2
 8010082:	d004      	beq.n	801008e <HAL_SPI_Init+0x4e>
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	4a68      	ldr	r2, [pc, #416]	@ (801022c <HAL_SPI_Init+0x1ec>)
 801008a:	4293      	cmp	r3, r2
 801008c:	e000      	b.n	8010090 <HAL_SPI_Init+0x50>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 801008e:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	2200      	movs	r2, #0
 8010094:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	4a5f      	ldr	r2, [pc, #380]	@ (8010218 <HAL_SPI_Init+0x1d8>)
 801009c:	4293      	cmp	r3, r2
 801009e:	d018      	beq.n	80100d2 <HAL_SPI_Init+0x92>
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	4a5d      	ldr	r2, [pc, #372]	@ (801021c <HAL_SPI_Init+0x1dc>)
 80100a6:	4293      	cmp	r3, r2
 80100a8:	d013      	beq.n	80100d2 <HAL_SPI_Init+0x92>
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	4a5c      	ldr	r2, [pc, #368]	@ (8010220 <HAL_SPI_Init+0x1e0>)
 80100b0:	4293      	cmp	r3, r2
 80100b2:	d00e      	beq.n	80100d2 <HAL_SPI_Init+0x92>
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	4a5a      	ldr	r2, [pc, #360]	@ (8010224 <HAL_SPI_Init+0x1e4>)
 80100ba:	4293      	cmp	r3, r2
 80100bc:	d009      	beq.n	80100d2 <HAL_SPI_Init+0x92>
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	4a59      	ldr	r2, [pc, #356]	@ (8010228 <HAL_SPI_Init+0x1e8>)
 80100c4:	4293      	cmp	r3, r2
 80100c6:	d004      	beq.n	80100d2 <HAL_SPI_Init+0x92>
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	4a57      	ldr	r2, [pc, #348]	@ (801022c <HAL_SPI_Init+0x1ec>)
 80100ce:	4293      	cmp	r3, r2
 80100d0:	d105      	bne.n	80100de <HAL_SPI_Init+0x9e>
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	68db      	ldr	r3, [r3, #12]
 80100d6:	2b0f      	cmp	r3, #15
 80100d8:	d901      	bls.n	80100de <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 80100da:	2301      	movs	r3, #1
 80100dc:	e11c      	b.n	8010318 <HAL_SPI_Init+0x2d8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80100de:	6878      	ldr	r0, [r7, #4]
 80100e0:	f000 fee2 	bl	8010ea8 <SPI_GetPacketSize>
 80100e4:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	4a4b      	ldr	r2, [pc, #300]	@ (8010218 <HAL_SPI_Init+0x1d8>)
 80100ec:	4293      	cmp	r3, r2
 80100ee:	d018      	beq.n	8010122 <HAL_SPI_Init+0xe2>
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	4a49      	ldr	r2, [pc, #292]	@ (801021c <HAL_SPI_Init+0x1dc>)
 80100f6:	4293      	cmp	r3, r2
 80100f8:	d013      	beq.n	8010122 <HAL_SPI_Init+0xe2>
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	4a48      	ldr	r2, [pc, #288]	@ (8010220 <HAL_SPI_Init+0x1e0>)
 8010100:	4293      	cmp	r3, r2
 8010102:	d00e      	beq.n	8010122 <HAL_SPI_Init+0xe2>
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	4a46      	ldr	r2, [pc, #280]	@ (8010224 <HAL_SPI_Init+0x1e4>)
 801010a:	4293      	cmp	r3, r2
 801010c:	d009      	beq.n	8010122 <HAL_SPI_Init+0xe2>
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	4a45      	ldr	r2, [pc, #276]	@ (8010228 <HAL_SPI_Init+0x1e8>)
 8010114:	4293      	cmp	r3, r2
 8010116:	d004      	beq.n	8010122 <HAL_SPI_Init+0xe2>
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	4a43      	ldr	r2, [pc, #268]	@ (801022c <HAL_SPI_Init+0x1ec>)
 801011e:	4293      	cmp	r3, r2
 8010120:	d102      	bne.n	8010128 <HAL_SPI_Init+0xe8>
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	2b08      	cmp	r3, #8
 8010126:	d820      	bhi.n	801016a <HAL_SPI_Init+0x12a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801012c:	4a40      	ldr	r2, [pc, #256]	@ (8010230 <HAL_SPI_Init+0x1f0>)
 801012e:	4293      	cmp	r3, r2
 8010130:	d018      	beq.n	8010164 <HAL_SPI_Init+0x124>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	4a3f      	ldr	r2, [pc, #252]	@ (8010234 <HAL_SPI_Init+0x1f4>)
 8010138:	4293      	cmp	r3, r2
 801013a:	d013      	beq.n	8010164 <HAL_SPI_Init+0x124>
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	4a3d      	ldr	r2, [pc, #244]	@ (8010238 <HAL_SPI_Init+0x1f8>)
 8010142:	4293      	cmp	r3, r2
 8010144:	d00e      	beq.n	8010164 <HAL_SPI_Init+0x124>
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	4a3c      	ldr	r2, [pc, #240]	@ (801023c <HAL_SPI_Init+0x1fc>)
 801014c:	4293      	cmp	r3, r2
 801014e:	d009      	beq.n	8010164 <HAL_SPI_Init+0x124>
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	4a3a      	ldr	r2, [pc, #232]	@ (8010240 <HAL_SPI_Init+0x200>)
 8010156:	4293      	cmp	r3, r2
 8010158:	d004      	beq.n	8010164 <HAL_SPI_Init+0x124>
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	4a39      	ldr	r2, [pc, #228]	@ (8010244 <HAL_SPI_Init+0x204>)
 8010160:	4293      	cmp	r3, r2
 8010162:	d104      	bne.n	801016e <HAL_SPI_Init+0x12e>
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	2b10      	cmp	r3, #16
 8010168:	d901      	bls.n	801016e <HAL_SPI_Init+0x12e>
  {
    return HAL_ERROR;
 801016a:	2301      	movs	r3, #1
 801016c:	e0d4      	b.n	8010318 <HAL_SPI_Init+0x2d8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8010174:	b2db      	uxtb	r3, r3
 8010176:	2b00      	cmp	r3, #0
 8010178:	d106      	bne.n	8010188 <HAL_SPI_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	2200      	movs	r2, #0
 801017e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8010182:	6878      	ldr	r0, [r7, #4]
 8010184:	f7f4 fd4a 	bl	8004c1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	2202      	movs	r2, #2
 801018c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	681a      	ldr	r2, [r3, #0]
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	f022 0201 	bic.w	r2, r2, #1
 801019e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	689b      	ldr	r3, [r3, #8]
 80101a6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80101aa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	699b      	ldr	r3, [r3, #24]
 80101b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80101b4:	d119      	bne.n	80101ea <HAL_SPI_Init+0x1aa>
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	685b      	ldr	r3, [r3, #4]
 80101ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80101be:	d103      	bne.n	80101c8 <HAL_SPI_Init+0x188>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d008      	beq.n	80101da <HAL_SPI_Init+0x19a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d10c      	bne.n	80101ea <HAL_SPI_Init+0x1aa>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80101d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80101d8:	d107      	bne.n	80101ea <HAL_SPI_Init+0x1aa>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	681a      	ldr	r2, [r3, #0]
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80101e8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	685b      	ldr	r3, [r3, #4]
 80101ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d028      	beq.n	8010248 <HAL_SPI_Init+0x208>
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	68db      	ldr	r3, [r3, #12]
 80101fa:	2b06      	cmp	r3, #6
 80101fc:	d924      	bls.n	8010248 <HAL_SPI_Init+0x208>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	430a      	orrs	r2, r1
 8010212:	601a      	str	r2, [r3, #0]
 8010214:	e020      	b.n	8010258 <HAL_SPI_Init+0x218>
 8010216:	bf00      	nop
 8010218:	40014c00 	.word	0x40014c00
 801021c:	50014c00 	.word	0x50014c00
 8010220:	44002000 	.word	0x44002000
 8010224:	54002000 	.word	0x54002000
 8010228:	40015000 	.word	0x40015000
 801022c:	50015000 	.word	0x50015000
 8010230:	40013000 	.word	0x40013000
 8010234:	50013000 	.word	0x50013000
 8010238:	40003800 	.word	0x40003800
 801023c:	50003800 	.word	0x50003800
 8010240:	40003c00 	.word	0x40003c00
 8010244:	50003c00 	.word	0x50003c00
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	681a      	ldr	r2, [r3, #0]
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8010256:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	69da      	ldr	r2, [r3, #28]
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010260:	431a      	orrs	r2, r3
 8010262:	68bb      	ldr	r3, [r7, #8]
 8010264:	431a      	orrs	r2, r3
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801026a:	ea42 0103 	orr.w	r1, r2, r3
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	68da      	ldr	r2, [r3, #12]
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	430a      	orrs	r2, r1
 8010278:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010282:	431a      	orrs	r2, r3
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010288:	431a      	orrs	r2, r3
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	699b      	ldr	r3, [r3, #24]
 801028e:	431a      	orrs	r2, r3
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	691b      	ldr	r3, [r3, #16]
 8010294:	431a      	orrs	r2, r3
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	695b      	ldr	r3, [r3, #20]
 801029a:	431a      	orrs	r2, r3
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	6a1b      	ldr	r3, [r3, #32]
 80102a0:	431a      	orrs	r2, r3
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	685b      	ldr	r3, [r3, #4]
 80102a6:	431a      	orrs	r2, r3
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80102ac:	431a      	orrs	r2, r3
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	689b      	ldr	r3, [r3, #8]
 80102b2:	431a      	orrs	r2, r3
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80102b8:	431a      	orrs	r2, r3
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80102be:	431a      	orrs	r2, r3
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80102c4:	ea42 0103 	orr.w	r1, r2, r3
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	430a      	orrs	r2, r1
 80102d2:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	f022 0201 	bic.w	r2, r2, #1
 80102e2:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	685b      	ldr	r3, [r3, #4]
 80102e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d00a      	beq.n	8010306 <HAL_SPI_Init+0x2c6>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	68db      	ldr	r3, [r3, #12]
 80102f6:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	430a      	orrs	r2, r1
 8010304:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	2200      	movs	r2, #0
 801030a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	2201      	movs	r2, #1
 8010312:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8010316:	2300      	movs	r3, #0
}
 8010318:	4618      	mov	r0, r3
 801031a:	3710      	adds	r7, #16
 801031c:	46bd      	mov	sp, r7
 801031e:	bd80      	pop	{r7, pc}

08010320 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010320:	b580      	push	{r7, lr}
 8010322:	b088      	sub	sp, #32
 8010324:	af02      	add	r7, sp, #8
 8010326:	60f8      	str	r0, [r7, #12]
 8010328:	60b9      	str	r1, [r7, #8]
 801032a:	603b      	str	r3, [r7, #0]
 801032c:	4613      	mov	r3, r2
 801032e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	3320      	adds	r3, #32
 8010336:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	4a92      	ldr	r2, [pc, #584]	@ (8010588 <HAL_SPI_Transmit+0x268>)
 801033e:	4293      	cmp	r3, r2
 8010340:	d012      	beq.n	8010368 <HAL_SPI_Transmit+0x48>
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	4a91      	ldr	r2, [pc, #580]	@ (801058c <HAL_SPI_Transmit+0x26c>)
 8010348:	4293      	cmp	r3, r2
 801034a:	d00d      	beq.n	8010368 <HAL_SPI_Transmit+0x48>
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	4a8f      	ldr	r2, [pc, #572]	@ (8010590 <HAL_SPI_Transmit+0x270>)
 8010352:	4293      	cmp	r3, r2
 8010354:	d008      	beq.n	8010368 <HAL_SPI_Transmit+0x48>
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	4a8e      	ldr	r2, [pc, #568]	@ (8010594 <HAL_SPI_Transmit+0x274>)
 801035c:	4293      	cmp	r3, r2
 801035e:	d003      	beq.n	8010368 <HAL_SPI_Transmit+0x48>
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	4a8c      	ldr	r2, [pc, #560]	@ (8010598 <HAL_SPI_Transmit+0x278>)
 8010366:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010368:	f7f5 fb2c 	bl	80059c4 <HAL_GetTick>
 801036c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8010374:	b2db      	uxtb	r3, r3
 8010376:	2b01      	cmp	r3, #1
 8010378:	d001      	beq.n	801037e <HAL_SPI_Transmit+0x5e>
  {
    return HAL_BUSY;
 801037a:	2302      	movs	r3, #2
 801037c:	e204      	b.n	8010788 <HAL_SPI_Transmit+0x468>
  }

  if ((pData == NULL) || (Size == 0UL))
 801037e:	68bb      	ldr	r3, [r7, #8]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d002      	beq.n	801038a <HAL_SPI_Transmit+0x6a>
 8010384:	88fb      	ldrh	r3, [r7, #6]
 8010386:	2b00      	cmp	r3, #0
 8010388:	d101      	bne.n	801038e <HAL_SPI_Transmit+0x6e>
  {
    return HAL_ERROR;
 801038a:	2301      	movs	r3, #1
 801038c:	e1fc      	b.n	8010788 <HAL_SPI_Transmit+0x468>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8010394:	2b01      	cmp	r3, #1
 8010396:	d101      	bne.n	801039c <HAL_SPI_Transmit+0x7c>
 8010398:	2302      	movs	r3, #2
 801039a:	e1f5      	b.n	8010788 <HAL_SPI_Transmit+0x468>
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	2201      	movs	r2, #1
 80103a0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	2203      	movs	r2, #3
 80103a8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	2200      	movs	r2, #0
 80103b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	68ba      	ldr	r2, [r7, #8]
 80103b8:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	88fa      	ldrh	r2, [r7, #6]
 80103be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	88fa      	ldrh	r2, [r7, #6]
 80103c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	2200      	movs	r2, #0
 80103ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	2200      	movs	r2, #0
 80103d4:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	2200      	movs	r2, #0
 80103dc:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	2200      	movs	r2, #0
 80103e4:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	2200      	movs	r2, #0
 80103ea:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	689b      	ldr	r3, [r3, #8]
 80103f0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80103f4:	d108      	bne.n	8010408 <HAL_SPI_Transmit+0xe8>
  {
    SPI_1LINE_TX(hspi);
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	681a      	ldr	r2, [r3, #0]
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010404:	601a      	str	r2, [r3, #0]
 8010406:	e009      	b.n	801041c <HAL_SPI_Transmit+0xfc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	68db      	ldr	r3, [r3, #12]
 801040e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 801041a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	685b      	ldr	r3, [r3, #4]
 8010422:	0c1b      	lsrs	r3, r3, #16
 8010424:	041b      	lsls	r3, r3, #16
 8010426:	88f9      	ldrh	r1, [r7, #6]
 8010428:	68fa      	ldr	r2, [r7, #12]
 801042a:	6812      	ldr	r2, [r2, #0]
 801042c:	430b      	orrs	r3, r1
 801042e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	681a      	ldr	r2, [r3, #0]
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	f042 0201 	orr.w	r2, r2, #1
 801043e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	685b      	ldr	r3, [r3, #4]
 8010444:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010448:	d107      	bne.n	801045a <HAL_SPI_Transmit+0x13a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	681a      	ldr	r2, [r3, #0]
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010458:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	68db      	ldr	r3, [r3, #12]
 801045e:	2b0f      	cmp	r3, #15
 8010460:	d965      	bls.n	801052e <HAL_SPI_Transmit+0x20e>
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	4a4d      	ldr	r2, [pc, #308]	@ (801059c <HAL_SPI_Transmit+0x27c>)
 8010468:	4293      	cmp	r3, r2
 801046a:	d059      	beq.n	8010520 <HAL_SPI_Transmit+0x200>
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	4a4b      	ldr	r2, [pc, #300]	@ (80105a0 <HAL_SPI_Transmit+0x280>)
 8010472:	4293      	cmp	r3, r2
 8010474:	d054      	beq.n	8010520 <HAL_SPI_Transmit+0x200>
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	4a4a      	ldr	r2, [pc, #296]	@ (80105a4 <HAL_SPI_Transmit+0x284>)
 801047c:	4293      	cmp	r3, r2
 801047e:	d04f      	beq.n	8010520 <HAL_SPI_Transmit+0x200>
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	4a48      	ldr	r2, [pc, #288]	@ (80105a8 <HAL_SPI_Transmit+0x288>)
 8010486:	4293      	cmp	r3, r2
 8010488:	d04a      	beq.n	8010520 <HAL_SPI_Transmit+0x200>
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	4a47      	ldr	r2, [pc, #284]	@ (80105ac <HAL_SPI_Transmit+0x28c>)
 8010490:	4293      	cmp	r3, r2
 8010492:	d045      	beq.n	8010520 <HAL_SPI_Transmit+0x200>
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	4a45      	ldr	r2, [pc, #276]	@ (80105b0 <HAL_SPI_Transmit+0x290>)
 801049a:	4293      	cmp	r3, r2
 801049c:	d147      	bne.n	801052e <HAL_SPI_Transmit+0x20e>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 801049e:	e03f      	b.n	8010520 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	695b      	ldr	r3, [r3, #20]
 80104a6:	f003 0302 	and.w	r3, r3, #2
 80104aa:	2b02      	cmp	r3, #2
 80104ac:	d114      	bne.n	80104d8 <HAL_SPI_Transmit+0x1b8>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	6812      	ldr	r2, [r2, #0]
 80104b8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80104be:	1d1a      	adds	r2, r3, #4
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80104ca:	b29b      	uxth	r3, r3
 80104cc:	3b01      	subs	r3, #1
 80104ce:	b29a      	uxth	r2, r3
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80104d6:	e023      	b.n	8010520 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80104d8:	f7f5 fa74 	bl	80059c4 <HAL_GetTick>
 80104dc:	4602      	mov	r2, r0
 80104de:	693b      	ldr	r3, [r7, #16]
 80104e0:	1ad3      	subs	r3, r2, r3
 80104e2:	683a      	ldr	r2, [r7, #0]
 80104e4:	429a      	cmp	r2, r3
 80104e6:	d803      	bhi.n	80104f0 <HAL_SPI_Transmit+0x1d0>
 80104e8:	683b      	ldr	r3, [r7, #0]
 80104ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104ee:	d102      	bne.n	80104f6 <HAL_SPI_Transmit+0x1d6>
 80104f0:	683b      	ldr	r3, [r7, #0]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d114      	bne.n	8010520 <HAL_SPI_Transmit+0x200>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80104f6:	68f8      	ldr	r0, [r7, #12]
 80104f8:	f000 fc08 	bl	8010d0c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010502:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	2201      	movs	r2, #1
 8010510:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	2200      	movs	r2, #0
 8010518:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 801051c:	2303      	movs	r3, #3
 801051e:	e133      	b.n	8010788 <HAL_SPI_Transmit+0x468>
    while (hspi->TxXferCount > 0UL)
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010526:	b29b      	uxth	r3, r3
 8010528:	2b00      	cmp	r3, #0
 801052a:	d1b9      	bne.n	80104a0 <HAL_SPI_Transmit+0x180>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 801052c:	e106      	b.n	801073c <HAL_SPI_Transmit+0x41c>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	68db      	ldr	r3, [r3, #12]
 8010532:	2b07      	cmp	r3, #7
 8010534:	f240 80fb 	bls.w	801072e <HAL_SPI_Transmit+0x40e>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8010538:	e074      	b.n	8010624 <HAL_SPI_Transmit+0x304>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	695b      	ldr	r3, [r3, #20]
 8010540:	f003 0302 	and.w	r3, r3, #2
 8010544:	2b02      	cmp	r3, #2
 8010546:	d149      	bne.n	80105dc <HAL_SPI_Transmit+0x2bc>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801054e:	b29b      	uxth	r3, r3
 8010550:	2b01      	cmp	r3, #1
 8010552:	d92f      	bls.n	80105b4 <HAL_SPI_Transmit+0x294>
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010558:	2b00      	cmp	r3, #0
 801055a:	d02b      	beq.n	80105b4 <HAL_SPI_Transmit+0x294>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	6812      	ldr	r2, [r2, #0]
 8010566:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801056c:	1d1a      	adds	r2, r3, #4
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010578:	b29b      	uxth	r3, r3
 801057a:	3b02      	subs	r3, #2
 801057c:	b29a      	uxth	r2, r3
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010584:	e04e      	b.n	8010624 <HAL_SPI_Transmit+0x304>
 8010586:	bf00      	nop
 8010588:	40014c00 	.word	0x40014c00
 801058c:	50014c00 	.word	0x50014c00
 8010590:	44002000 	.word	0x44002000
 8010594:	54002000 	.word	0x54002000
 8010598:	40015000 	.word	0x40015000
 801059c:	40013000 	.word	0x40013000
 80105a0:	50013000 	.word	0x50013000
 80105a4:	40003800 	.word	0x40003800
 80105a8:	50003800 	.word	0x50003800
 80105ac:	40003c00 	.word	0x40003c00
 80105b0:	50003c00 	.word	0x50003c00
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80105b8:	881a      	ldrh	r2, [r3, #0]
 80105ba:	697b      	ldr	r3, [r7, #20]
 80105bc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80105c2:	1c9a      	adds	r2, r3, #2
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80105ce:	b29b      	uxth	r3, r3
 80105d0:	3b01      	subs	r3, #1
 80105d2:	b29a      	uxth	r2, r3
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80105da:	e023      	b.n	8010624 <HAL_SPI_Transmit+0x304>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80105dc:	f7f5 f9f2 	bl	80059c4 <HAL_GetTick>
 80105e0:	4602      	mov	r2, r0
 80105e2:	693b      	ldr	r3, [r7, #16]
 80105e4:	1ad3      	subs	r3, r2, r3
 80105e6:	683a      	ldr	r2, [r7, #0]
 80105e8:	429a      	cmp	r2, r3
 80105ea:	d803      	bhi.n	80105f4 <HAL_SPI_Transmit+0x2d4>
 80105ec:	683b      	ldr	r3, [r7, #0]
 80105ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105f2:	d102      	bne.n	80105fa <HAL_SPI_Transmit+0x2da>
 80105f4:	683b      	ldr	r3, [r7, #0]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d114      	bne.n	8010624 <HAL_SPI_Transmit+0x304>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80105fa:	68f8      	ldr	r0, [r7, #12]
 80105fc:	f000 fb86 	bl	8010d0c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010606:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	2201      	movs	r2, #1
 8010614:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	2200      	movs	r2, #0
 801061c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8010620:	2303      	movs	r3, #3
 8010622:	e0b1      	b.n	8010788 <HAL_SPI_Transmit+0x468>
    while (hspi->TxXferCount > 0UL)
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801062a:	b29b      	uxth	r3, r3
 801062c:	2b00      	cmp	r3, #0
 801062e:	d184      	bne.n	801053a <HAL_SPI_Transmit+0x21a>
 8010630:	e084      	b.n	801073c <HAL_SPI_Transmit+0x41c>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	695b      	ldr	r3, [r3, #20]
 8010638:	f003 0302 	and.w	r3, r3, #2
 801063c:	2b02      	cmp	r3, #2
 801063e:	d152      	bne.n	80106e6 <HAL_SPI_Transmit+0x3c6>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010646:	b29b      	uxth	r3, r3
 8010648:	2b03      	cmp	r3, #3
 801064a:	d918      	bls.n	801067e <HAL_SPI_Transmit+0x35e>
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010650:	2b40      	cmp	r3, #64	@ 0x40
 8010652:	d914      	bls.n	801067e <HAL_SPI_Transmit+0x35e>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	6812      	ldr	r2, [r2, #0]
 801065e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010664:	1d1a      	adds	r2, r3, #4
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010670:	b29b      	uxth	r3, r3
 8010672:	3b04      	subs	r3, #4
 8010674:	b29a      	uxth	r2, r3
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801067c:	e057      	b.n	801072e <HAL_SPI_Transmit+0x40e>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010684:	b29b      	uxth	r3, r3
 8010686:	2b01      	cmp	r3, #1
 8010688:	d917      	bls.n	80106ba <HAL_SPI_Transmit+0x39a>
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801068e:	2b00      	cmp	r3, #0
 8010690:	d013      	beq.n	80106ba <HAL_SPI_Transmit+0x39a>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010696:	881a      	ldrh	r2, [r3, #0]
 8010698:	697b      	ldr	r3, [r7, #20]
 801069a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80106a0:	1c9a      	adds	r2, r3, #2
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80106ac:	b29b      	uxth	r3, r3
 80106ae:	3b02      	subs	r3, #2
 80106b0:	b29a      	uxth	r2, r3
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80106b8:	e039      	b.n	801072e <HAL_SPI_Transmit+0x40e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	3320      	adds	r3, #32
 80106c4:	7812      	ldrb	r2, [r2, #0]
 80106c6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80106cc:	1c5a      	adds	r2, r3, #1
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80106d8:	b29b      	uxth	r3, r3
 80106da:	3b01      	subs	r3, #1
 80106dc:	b29a      	uxth	r2, r3
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80106e4:	e023      	b.n	801072e <HAL_SPI_Transmit+0x40e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80106e6:	f7f5 f96d 	bl	80059c4 <HAL_GetTick>
 80106ea:	4602      	mov	r2, r0
 80106ec:	693b      	ldr	r3, [r7, #16]
 80106ee:	1ad3      	subs	r3, r2, r3
 80106f0:	683a      	ldr	r2, [r7, #0]
 80106f2:	429a      	cmp	r2, r3
 80106f4:	d803      	bhi.n	80106fe <HAL_SPI_Transmit+0x3de>
 80106f6:	683b      	ldr	r3, [r7, #0]
 80106f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106fc:	d102      	bne.n	8010704 <HAL_SPI_Transmit+0x3e4>
 80106fe:	683b      	ldr	r3, [r7, #0]
 8010700:	2b00      	cmp	r3, #0
 8010702:	d114      	bne.n	801072e <HAL_SPI_Transmit+0x40e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010704:	68f8      	ldr	r0, [r7, #12]
 8010706:	f000 fb01 	bl	8010d0c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010710:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	2201      	movs	r2, #1
 801071e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	2200      	movs	r2, #0
 8010726:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 801072a:	2303      	movs	r3, #3
 801072c:	e02c      	b.n	8010788 <HAL_SPI_Transmit+0x468>
    while (hspi->TxXferCount > 0UL)
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010734:	b29b      	uxth	r3, r3
 8010736:	2b00      	cmp	r3, #0
 8010738:	f47f af7b 	bne.w	8010632 <HAL_SPI_Transmit+0x312>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 801073c:	693b      	ldr	r3, [r7, #16]
 801073e:	9300      	str	r3, [sp, #0]
 8010740:	683b      	ldr	r3, [r7, #0]
 8010742:	2200      	movs	r2, #0
 8010744:	2108      	movs	r1, #8
 8010746:	68f8      	ldr	r0, [r7, #12]
 8010748:	f000 fb80 	bl	8010e4c <SPI_WaitOnFlagUntilTimeout>
 801074c:	4603      	mov	r3, r0
 801074e:	2b00      	cmp	r3, #0
 8010750:	d007      	beq.n	8010762 <HAL_SPI_Transmit+0x442>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010758:	f043 0220 	orr.w	r2, r3, #32
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8010762:	68f8      	ldr	r0, [r7, #12]
 8010764:	f000 fad2 	bl	8010d0c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	2201      	movs	r2, #1
 801076c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	2200      	movs	r2, #0
 8010774:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801077e:	2b00      	cmp	r3, #0
 8010780:	d001      	beq.n	8010786 <HAL_SPI_Transmit+0x466>
  {
    return HAL_ERROR;
 8010782:	2301      	movs	r3, #1
 8010784:	e000      	b.n	8010788 <HAL_SPI_Transmit+0x468>
  }
  else
  {
    return HAL_OK;
 8010786:	2300      	movs	r3, #0
  }
}
 8010788:	4618      	mov	r0, r3
 801078a:	3718      	adds	r7, #24
 801078c:	46bd      	mov	sp, r7
 801078e:	bd80      	pop	{r7, pc}

08010790 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010790:	b580      	push	{r7, lr}
 8010792:	b088      	sub	sp, #32
 8010794:	af00      	add	r7, sp, #0
 8010796:	60f8      	str	r0, [r7, #12]
 8010798:	60b9      	str	r1, [r7, #8]
 801079a:	603b      	str	r3, [r7, #0]
 801079c:	4613      	mov	r3, r2
 801079e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80107a4:	095b      	lsrs	r3, r3, #5
 80107a6:	b29b      	uxth	r3, r3
 80107a8:	3301      	adds	r3, #1
 80107aa:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	3330      	adds	r3, #48	@ 0x30
 80107b2:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	4a92      	ldr	r2, [pc, #584]	@ (8010a04 <HAL_SPI_Receive+0x274>)
 80107ba:	4293      	cmp	r3, r2
 80107bc:	d012      	beq.n	80107e4 <HAL_SPI_Receive+0x54>
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	4a91      	ldr	r2, [pc, #580]	@ (8010a08 <HAL_SPI_Receive+0x278>)
 80107c4:	4293      	cmp	r3, r2
 80107c6:	d00d      	beq.n	80107e4 <HAL_SPI_Receive+0x54>
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	4a8f      	ldr	r2, [pc, #572]	@ (8010a0c <HAL_SPI_Receive+0x27c>)
 80107ce:	4293      	cmp	r3, r2
 80107d0:	d008      	beq.n	80107e4 <HAL_SPI_Receive+0x54>
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	4a8e      	ldr	r2, [pc, #568]	@ (8010a10 <HAL_SPI_Receive+0x280>)
 80107d8:	4293      	cmp	r3, r2
 80107da:	d003      	beq.n	80107e4 <HAL_SPI_Receive+0x54>
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	4a8c      	ldr	r2, [pc, #560]	@ (8010a14 <HAL_SPI_Receive+0x284>)
 80107e2:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80107e4:	f7f5 f8ee 	bl	80059c4 <HAL_GetTick>
 80107e8:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80107f0:	b2db      	uxtb	r3, r3
 80107f2:	2b01      	cmp	r3, #1
 80107f4:	d001      	beq.n	80107fa <HAL_SPI_Receive+0x6a>
  {
    return HAL_BUSY;
 80107f6:	2302      	movs	r3, #2
 80107f8:	e284      	b.n	8010d04 <HAL_SPI_Receive+0x574>
  }

  if ((pData == NULL) || (Size == 0UL))
 80107fa:	68bb      	ldr	r3, [r7, #8]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d002      	beq.n	8010806 <HAL_SPI_Receive+0x76>
 8010800:	88fb      	ldrh	r3, [r7, #6]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d101      	bne.n	801080a <HAL_SPI_Receive+0x7a>
  {
    return HAL_ERROR;
 8010806:	2301      	movs	r3, #1
 8010808:	e27c      	b.n	8010d04 <HAL_SPI_Receive+0x574>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8010810:	2b01      	cmp	r3, #1
 8010812:	d101      	bne.n	8010818 <HAL_SPI_Receive+0x88>
 8010814:	2302      	movs	r3, #2
 8010816:	e275      	b.n	8010d04 <HAL_SPI_Receive+0x574>
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	2201      	movs	r2, #1
 801081c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	2204      	movs	r2, #4
 8010824:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	2200      	movs	r2, #0
 801082c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	68ba      	ldr	r2, [r7, #8]
 8010834:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	88fa      	ldrh	r2, [r7, #6]
 801083a:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	88fa      	ldrh	r2, [r7, #6]
 8010842:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	2200      	movs	r2, #0
 801084a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	2200      	movs	r2, #0
 8010850:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	2200      	movs	r2, #0
 8010858:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	2200      	movs	r2, #0
 8010860:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	2200      	movs	r2, #0
 8010866:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	689b      	ldr	r3, [r3, #8]
 801086c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8010870:	d108      	bne.n	8010884 <HAL_SPI_Receive+0xf4>
  {
    SPI_1LINE_RX(hspi);
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	681a      	ldr	r2, [r3, #0]
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8010880:	601a      	str	r2, [r3, #0]
 8010882:	e009      	b.n	8010898 <HAL_SPI_Receive+0x108>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	68db      	ldr	r3, [r3, #12]
 801088a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8010896:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	685b      	ldr	r3, [r3, #4]
 801089e:	0c1b      	lsrs	r3, r3, #16
 80108a0:	041b      	lsls	r3, r3, #16
 80108a2:	88f9      	ldrh	r1, [r7, #6]
 80108a4:	68fa      	ldr	r2, [r7, #12]
 80108a6:	6812      	ldr	r2, [r2, #0]
 80108a8:	430b      	orrs	r3, r1
 80108aa:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	681a      	ldr	r2, [r3, #0]
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	f042 0201 	orr.w	r2, r2, #1
 80108ba:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	685b      	ldr	r3, [r3, #4]
 80108c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80108c4:	d107      	bne.n	80108d6 <HAL_SPI_Receive+0x146>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	681a      	ldr	r2, [r3, #0]
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80108d4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	68db      	ldr	r3, [r3, #12]
 80108da:	2b0f      	cmp	r3, #15
 80108dc:	f240 808b 	bls.w	80109f6 <HAL_SPI_Receive+0x266>
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	4a4c      	ldr	r2, [pc, #304]	@ (8010a18 <HAL_SPI_Receive+0x288>)
 80108e6:	4293      	cmp	r3, r2
 80108e8:	d07e      	beq.n	80109e8 <HAL_SPI_Receive+0x258>
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	4a4b      	ldr	r2, [pc, #300]	@ (8010a1c <HAL_SPI_Receive+0x28c>)
 80108f0:	4293      	cmp	r3, r2
 80108f2:	d079      	beq.n	80109e8 <HAL_SPI_Receive+0x258>
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	4a49      	ldr	r2, [pc, #292]	@ (8010a20 <HAL_SPI_Receive+0x290>)
 80108fa:	4293      	cmp	r3, r2
 80108fc:	d074      	beq.n	80109e8 <HAL_SPI_Receive+0x258>
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	4a48      	ldr	r2, [pc, #288]	@ (8010a24 <HAL_SPI_Receive+0x294>)
 8010904:	4293      	cmp	r3, r2
 8010906:	d06f      	beq.n	80109e8 <HAL_SPI_Receive+0x258>
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	4a46      	ldr	r2, [pc, #280]	@ (8010a28 <HAL_SPI_Receive+0x298>)
 801090e:	4293      	cmp	r3, r2
 8010910:	d06a      	beq.n	80109e8 <HAL_SPI_Receive+0x258>
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	4a45      	ldr	r2, [pc, #276]	@ (8010a2c <HAL_SPI_Receive+0x29c>)
 8010918:	4293      	cmp	r3, r2
 801091a:	d16c      	bne.n	80109f6 <HAL_SPI_Receive+0x266>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 801091c:	e064      	b.n	80109e8 <HAL_SPI_Receive+0x258>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	695b      	ldr	r3, [r3, #20]
 8010924:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	695b      	ldr	r3, [r3, #20]
 801092c:	f003 0301 	and.w	r3, r3, #1
 8010930:	2b01      	cmp	r3, #1
 8010932:	d114      	bne.n	801095e <HAL_SPI_Receive+0x1ce>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	681a      	ldr	r2, [r3, #0]
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801093c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801093e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010944:	1d1a      	adds	r2, r3, #4
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8010950:	b29b      	uxth	r3, r3
 8010952:	3b01      	subs	r3, #1
 8010954:	b29a      	uxth	r2, r3
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 801095c:	e044      	b.n	80109e8 <HAL_SPI_Receive+0x258>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8010964:	b29b      	uxth	r3, r3
 8010966:	8bfa      	ldrh	r2, [r7, #30]
 8010968:	429a      	cmp	r2, r3
 801096a:	d919      	bls.n	80109a0 <HAL_SPI_Receive+0x210>
 801096c:	693b      	ldr	r3, [r7, #16]
 801096e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010972:	2b00      	cmp	r3, #0
 8010974:	d014      	beq.n	80109a0 <HAL_SPI_Receive+0x210>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	681a      	ldr	r2, [r3, #0]
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801097e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8010980:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010986:	1d1a      	adds	r2, r3, #4
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8010992:	b29b      	uxth	r3, r3
 8010994:	3b01      	subs	r3, #1
 8010996:	b29a      	uxth	r2, r3
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 801099e:	e023      	b.n	80109e8 <HAL_SPI_Receive+0x258>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80109a0:	f7f5 f810 	bl	80059c4 <HAL_GetTick>
 80109a4:	4602      	mov	r2, r0
 80109a6:	697b      	ldr	r3, [r7, #20]
 80109a8:	1ad3      	subs	r3, r2, r3
 80109aa:	683a      	ldr	r2, [r7, #0]
 80109ac:	429a      	cmp	r2, r3
 80109ae:	d803      	bhi.n	80109b8 <HAL_SPI_Receive+0x228>
 80109b0:	683b      	ldr	r3, [r7, #0]
 80109b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109b6:	d102      	bne.n	80109be <HAL_SPI_Receive+0x22e>
 80109b8:	683b      	ldr	r3, [r7, #0]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d114      	bne.n	80109e8 <HAL_SPI_Receive+0x258>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80109be:	68f8      	ldr	r0, [r7, #12]
 80109c0:	f000 f9a4 	bl	8010d0c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80109ca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	2201      	movs	r2, #1
 80109d8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	2200      	movs	r2, #0
 80109e0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80109e4:	2303      	movs	r3, #3
 80109e6:	e18d      	b.n	8010d04 <HAL_SPI_Receive+0x574>
    while (hspi->RxXferCount > 0UL)
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80109ee:	b29b      	uxth	r3, r3
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d194      	bne.n	801091e <HAL_SPI_Receive+0x18e>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80109f4:	e173      	b.n	8010cde <HAL_SPI_Receive+0x54e>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	68db      	ldr	r3, [r3, #12]
 80109fa:	2b07      	cmp	r3, #7
 80109fc:	f240 8168 	bls.w	8010cd0 <HAL_SPI_Receive+0x540>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8010a00:	e0a6      	b.n	8010b50 <HAL_SPI_Receive+0x3c0>
 8010a02:	bf00      	nop
 8010a04:	40014c00 	.word	0x40014c00
 8010a08:	50014c00 	.word	0x50014c00
 8010a0c:	44002000 	.word	0x44002000
 8010a10:	54002000 	.word	0x54002000
 8010a14:	40015000 	.word	0x40015000
 8010a18:	40013000 	.word	0x40013000
 8010a1c:	50013000 	.word	0x50013000
 8010a20:	40003800 	.word	0x40003800
 8010a24:	50003800 	.word	0x50003800
 8010a28:	40003c00 	.word	0x40003c00
 8010a2c:	50003c00 	.word	0x50003c00
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	695b      	ldr	r3, [r3, #20]
 8010a36:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	695b      	ldr	r3, [r3, #20]
 8010a3e:	f003 0301 	and.w	r3, r3, #1
 8010a42:	2b01      	cmp	r3, #1
 8010a44:	d114      	bne.n	8010a70 <HAL_SPI_Receive+0x2e0>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010a4a:	69ba      	ldr	r2, [r7, #24]
 8010a4c:	8812      	ldrh	r2, [r2, #0]
 8010a4e:	b292      	uxth	r2, r2
 8010a50:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010a56:	1c9a      	adds	r2, r3, #2
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8010a62:	b29b      	uxth	r3, r3
 8010a64:	3b01      	subs	r3, #1
 8010a66:	b29a      	uxth	r2, r3
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8010a6e:	e06f      	b.n	8010b50 <HAL_SPI_Receive+0x3c0>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8010a76:	b29b      	uxth	r3, r3
 8010a78:	8bfa      	ldrh	r2, [r7, #30]
 8010a7a:	429a      	cmp	r2, r3
 8010a7c:	d924      	bls.n	8010ac8 <HAL_SPI_Receive+0x338>
 8010a7e:	693b      	ldr	r3, [r7, #16]
 8010a80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d01f      	beq.n	8010ac8 <HAL_SPI_Receive+0x338>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010a8c:	69ba      	ldr	r2, [r7, #24]
 8010a8e:	8812      	ldrh	r2, [r2, #0]
 8010a90:	b292      	uxth	r2, r2
 8010a92:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010a98:	1c9a      	adds	r2, r3, #2
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010aa2:	69ba      	ldr	r2, [r7, #24]
 8010aa4:	8812      	ldrh	r2, [r2, #0]
 8010aa6:	b292      	uxth	r2, r2
 8010aa8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010aae:	1c9a      	adds	r2, r3, #2
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount -= (uint16_t)2UL;
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8010aba:	b29b      	uxth	r3, r3
 8010abc:	3b02      	subs	r3, #2
 8010abe:	b29a      	uxth	r2, r3
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8010ac6:	e043      	b.n	8010b50 <HAL_SPI_Receive+0x3c0>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8010ace:	b29b      	uxth	r3, r3
 8010ad0:	2b01      	cmp	r3, #1
 8010ad2:	d119      	bne.n	8010b08 <HAL_SPI_Receive+0x378>
 8010ad4:	693b      	ldr	r3, [r7, #16]
 8010ad6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d014      	beq.n	8010b08 <HAL_SPI_Receive+0x378>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010ae2:	69ba      	ldr	r2, [r7, #24]
 8010ae4:	8812      	ldrh	r2, [r2, #0]
 8010ae6:	b292      	uxth	r2, r2
 8010ae8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010aee:	1c9a      	adds	r2, r3, #2
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8010afa:	b29b      	uxth	r3, r3
 8010afc:	3b01      	subs	r3, #1
 8010afe:	b29a      	uxth	r2, r3
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8010b06:	e023      	b.n	8010b50 <HAL_SPI_Receive+0x3c0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010b08:	f7f4 ff5c 	bl	80059c4 <HAL_GetTick>
 8010b0c:	4602      	mov	r2, r0
 8010b0e:	697b      	ldr	r3, [r7, #20]
 8010b10:	1ad3      	subs	r3, r2, r3
 8010b12:	683a      	ldr	r2, [r7, #0]
 8010b14:	429a      	cmp	r2, r3
 8010b16:	d803      	bhi.n	8010b20 <HAL_SPI_Receive+0x390>
 8010b18:	683b      	ldr	r3, [r7, #0]
 8010b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b1e:	d102      	bne.n	8010b26 <HAL_SPI_Receive+0x396>
 8010b20:	683b      	ldr	r3, [r7, #0]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d114      	bne.n	8010b50 <HAL_SPI_Receive+0x3c0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010b26:	68f8      	ldr	r0, [r7, #12]
 8010b28:	f000 f8f0 	bl	8010d0c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010b32:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	2201      	movs	r2, #1
 8010b40:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	2200      	movs	r2, #0
 8010b48:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8010b4c:	2303      	movs	r3, #3
 8010b4e:	e0d9      	b.n	8010d04 <HAL_SPI_Receive+0x574>
    while (hspi->RxXferCount > 0UL)
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8010b56:	b29b      	uxth	r3, r3
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	f47f af69 	bne.w	8010a30 <HAL_SPI_Receive+0x2a0>
 8010b5e:	e0be      	b.n	8010cde <HAL_SPI_Receive+0x54e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	695b      	ldr	r3, [r3, #20]
 8010b66:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	695b      	ldr	r3, [r3, #20]
 8010b6e:	f003 0301 	and.w	r3, r3, #1
 8010b72:	2b01      	cmp	r3, #1
 8010b74:	d117      	bne.n	8010ba6 <HAL_SPI_Receive+0x416>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010b82:	7812      	ldrb	r2, [r2, #0]
 8010b84:	b2d2      	uxtb	r2, r2
 8010b86:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010b8c:	1c5a      	adds	r2, r3, #1
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8010b98:	b29b      	uxth	r3, r3
 8010b9a:	3b01      	subs	r3, #1
 8010b9c:	b29a      	uxth	r2, r3
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8010ba4:	e094      	b.n	8010cd0 <HAL_SPI_Receive+0x540>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8010bac:	b29b      	uxth	r3, r3
 8010bae:	8bfa      	ldrh	r2, [r7, #30]
 8010bb0:	429a      	cmp	r2, r3
 8010bb2:	d946      	bls.n	8010c42 <HAL_SPI_Receive+0x4b2>
 8010bb4:	693b      	ldr	r3, [r7, #16]
 8010bb6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d041      	beq.n	8010c42 <HAL_SPI_Receive+0x4b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010bca:	7812      	ldrb	r2, [r2, #0]
 8010bcc:	b2d2      	uxtb	r2, r2
 8010bce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010bd4:	1c5a      	adds	r2, r3, #1
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010be6:	7812      	ldrb	r2, [r2, #0]
 8010be8:	b2d2      	uxtb	r2, r2
 8010bea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010bf0:	1c5a      	adds	r2, r3, #1
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010c02:	7812      	ldrb	r2, [r2, #0]
 8010c04:	b2d2      	uxtb	r2, r2
 8010c06:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010c0c:	1c5a      	adds	r2, r3, #1
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010c1e:	7812      	ldrb	r2, [r2, #0]
 8010c20:	b2d2      	uxtb	r2, r2
 8010c22:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010c28:	1c5a      	adds	r2, r3, #1
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount -= (uint16_t)4UL;
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8010c34:	b29b      	uxth	r3, r3
 8010c36:	3b04      	subs	r3, #4
 8010c38:	b29a      	uxth	r2, r3
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8010c40:	e046      	b.n	8010cd0 <HAL_SPI_Receive+0x540>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8010c48:	b29b      	uxth	r3, r3
 8010c4a:	2b03      	cmp	r3, #3
 8010c4c:	d81c      	bhi.n	8010c88 <HAL_SPI_Receive+0x4f8>
 8010c4e:	693b      	ldr	r3, [r7, #16]
 8010c50:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d017      	beq.n	8010c88 <HAL_SPI_Receive+0x4f8>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010c64:	7812      	ldrb	r2, [r2, #0]
 8010c66:	b2d2      	uxtb	r2, r2
 8010c68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010c6e:	1c5a      	adds	r2, r3, #1
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8010c7a:	b29b      	uxth	r3, r3
 8010c7c:	3b01      	subs	r3, #1
 8010c7e:	b29a      	uxth	r2, r3
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8010c86:	e023      	b.n	8010cd0 <HAL_SPI_Receive+0x540>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010c88:	f7f4 fe9c 	bl	80059c4 <HAL_GetTick>
 8010c8c:	4602      	mov	r2, r0
 8010c8e:	697b      	ldr	r3, [r7, #20]
 8010c90:	1ad3      	subs	r3, r2, r3
 8010c92:	683a      	ldr	r2, [r7, #0]
 8010c94:	429a      	cmp	r2, r3
 8010c96:	d803      	bhi.n	8010ca0 <HAL_SPI_Receive+0x510>
 8010c98:	683b      	ldr	r3, [r7, #0]
 8010c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c9e:	d102      	bne.n	8010ca6 <HAL_SPI_Receive+0x516>
 8010ca0:	683b      	ldr	r3, [r7, #0]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d114      	bne.n	8010cd0 <HAL_SPI_Receive+0x540>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010ca6:	68f8      	ldr	r0, [r7, #12]
 8010ca8:	f000 f830 	bl	8010d0c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010cb2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	2201      	movs	r2, #1
 8010cc0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8010ccc:	2303      	movs	r3, #3
 8010cce:	e019      	b.n	8010d04 <HAL_SPI_Receive+0x574>
    while (hspi->RxXferCount > 0UL)
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8010cd6:	b29b      	uxth	r3, r3
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	f47f af41 	bne.w	8010b60 <HAL_SPI_Receive+0x3d0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8010cde:	68f8      	ldr	r0, [r7, #12]
 8010ce0:	f000 f814 	bl	8010d0c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	2201      	movs	r2, #1
 8010ce8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	2200      	movs	r2, #0
 8010cf0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d001      	beq.n	8010d02 <HAL_SPI_Receive+0x572>
  {
    return HAL_ERROR;
 8010cfe:	2301      	movs	r3, #1
 8010d00:	e000      	b.n	8010d04 <HAL_SPI_Receive+0x574>
  }
  else
  {
    return HAL_OK;
 8010d02:	2300      	movs	r3, #0
  }
}
 8010d04:	4618      	mov	r0, r3
 8010d06:	3720      	adds	r7, #32
 8010d08:	46bd      	mov	sp, r7
 8010d0a:	bd80      	pop	{r7, pc}

08010d0c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8010d0c:	b480      	push	{r7}
 8010d0e:	b085      	sub	sp, #20
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	695b      	ldr	r3, [r3, #20]
 8010d1a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	699a      	ldr	r2, [r3, #24]
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	f042 0208 	orr.w	r2, r2, #8
 8010d2a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	699a      	ldr	r2, [r3, #24]
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	f042 0210 	orr.w	r2, r2, #16
 8010d3a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	681a      	ldr	r2, [r3, #0]
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	f022 0201 	bic.w	r2, r2, #1
 8010d4a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	691b      	ldr	r3, [r3, #16]
 8010d52:	687a      	ldr	r2, [r7, #4]
 8010d54:	6812      	ldr	r2, [r2, #0]
 8010d56:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8010d5a:	f023 0303 	bic.w	r3, r3, #3
 8010d5e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	689a      	ldr	r2, [r3, #8]
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8010d6e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8010d76:	b2db      	uxtb	r3, r3
 8010d78:	2b04      	cmp	r3, #4
 8010d7a:	d014      	beq.n	8010da6 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	f003 0320 	and.w	r3, r3, #32
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d00f      	beq.n	8010da6 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010d8c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	699a      	ldr	r2, [r3, #24]
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	f042 0220 	orr.w	r2, r2, #32
 8010da4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8010dac:	b2db      	uxtb	r3, r3
 8010dae:	2b03      	cmp	r3, #3
 8010db0:	d014      	beq.n	8010ddc <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d00f      	beq.n	8010ddc <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010dc2:	f043 0204 	orr.w	r2, r3, #4
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	699a      	ldr	r2, [r3, #24]
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010dda:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d00f      	beq.n	8010e06 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010dec:	f043 0201 	orr.w	r2, r3, #1
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	699a      	ldr	r2, [r3, #24]
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010e04:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d00f      	beq.n	8010e30 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010e16:	f043 0208 	orr.w	r2, r3, #8
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	699a      	ldr	r2, [r3, #24]
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8010e2e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	2200      	movs	r2, #0
 8010e34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	2200      	movs	r2, #0
 8010e3c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8010e40:	bf00      	nop
 8010e42:	3714      	adds	r7, #20
 8010e44:	46bd      	mov	sp, r7
 8010e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e4a:	4770      	bx	lr

08010e4c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b084      	sub	sp, #16
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	60f8      	str	r0, [r7, #12]
 8010e54:	60b9      	str	r1, [r7, #8]
 8010e56:	603b      	str	r3, [r7, #0]
 8010e58:	4613      	mov	r3, r2
 8010e5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8010e5c:	e010      	b.n	8010e80 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010e5e:	f7f4 fdb1 	bl	80059c4 <HAL_GetTick>
 8010e62:	4602      	mov	r2, r0
 8010e64:	69bb      	ldr	r3, [r7, #24]
 8010e66:	1ad3      	subs	r3, r2, r3
 8010e68:	683a      	ldr	r2, [r7, #0]
 8010e6a:	429a      	cmp	r2, r3
 8010e6c:	d803      	bhi.n	8010e76 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8010e6e:	683b      	ldr	r3, [r7, #0]
 8010e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e74:	d102      	bne.n	8010e7c <SPI_WaitOnFlagUntilTimeout+0x30>
 8010e76:	683b      	ldr	r3, [r7, #0]
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d101      	bne.n	8010e80 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8010e7c:	2303      	movs	r3, #3
 8010e7e:	e00f      	b.n	8010ea0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	695a      	ldr	r2, [r3, #20]
 8010e86:	68bb      	ldr	r3, [r7, #8]
 8010e88:	4013      	ands	r3, r2
 8010e8a:	68ba      	ldr	r2, [r7, #8]
 8010e8c:	429a      	cmp	r2, r3
 8010e8e:	bf0c      	ite	eq
 8010e90:	2301      	moveq	r3, #1
 8010e92:	2300      	movne	r3, #0
 8010e94:	b2db      	uxtb	r3, r3
 8010e96:	461a      	mov	r2, r3
 8010e98:	79fb      	ldrb	r3, [r7, #7]
 8010e9a:	429a      	cmp	r2, r3
 8010e9c:	d0df      	beq.n	8010e5e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8010e9e:	2300      	movs	r3, #0
}
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	3710      	adds	r7, #16
 8010ea4:	46bd      	mov	sp, r7
 8010ea6:	bd80      	pop	{r7, pc}

08010ea8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8010ea8:	b480      	push	{r7}
 8010eaa:	b085      	sub	sp, #20
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010eb4:	095b      	lsrs	r3, r3, #5
 8010eb6:	3301      	adds	r3, #1
 8010eb8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	68db      	ldr	r3, [r3, #12]
 8010ebe:	3301      	adds	r3, #1
 8010ec0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8010ec2:	68bb      	ldr	r3, [r7, #8]
 8010ec4:	3307      	adds	r3, #7
 8010ec6:	08db      	lsrs	r3, r3, #3
 8010ec8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8010eca:	68bb      	ldr	r3, [r7, #8]
 8010ecc:	68fa      	ldr	r2, [r7, #12]
 8010ece:	fb02 f303 	mul.w	r3, r2, r3
}
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	3714      	adds	r7, #20
 8010ed6:	46bd      	mov	sp, r7
 8010ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010edc:	4770      	bx	lr

08010ede <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010ede:	b580      	push	{r7, lr}
 8010ee0:	b082      	sub	sp, #8
 8010ee2:	af00      	add	r7, sp, #0
 8010ee4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d101      	bne.n	8010ef0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010eec:	2301      	movs	r3, #1
 8010eee:	e042      	b.n	8010f76 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d106      	bne.n	8010f08 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	2200      	movs	r2, #0
 8010efe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010f02:	6878      	ldr	r0, [r7, #4]
 8010f04:	f7f3 ff76 	bl	8004df4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	2224      	movs	r2, #36	@ 0x24
 8010f0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	681a      	ldr	r2, [r3, #0]
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	f022 0201 	bic.w	r2, r2, #1
 8010f1e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d002      	beq.n	8010f2e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8010f28:	6878      	ldr	r0, [r7, #4]
 8010f2a:	f000 fab5 	bl	8011498 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010f2e:	6878      	ldr	r0, [r7, #4]
 8010f30:	f000 f8c4 	bl	80110bc <UART_SetConfig>
 8010f34:	4603      	mov	r3, r0
 8010f36:	2b01      	cmp	r3, #1
 8010f38:	d101      	bne.n	8010f3e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8010f3a:	2301      	movs	r3, #1
 8010f3c:	e01b      	b.n	8010f76 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	685a      	ldr	r2, [r3, #4]
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8010f4c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	689a      	ldr	r2, [r3, #8]
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8010f5c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	681a      	ldr	r2, [r3, #0]
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	f042 0201 	orr.w	r2, r2, #1
 8010f6c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010f6e:	6878      	ldr	r0, [r7, #4]
 8010f70:	f000 fb34 	bl	80115dc <UART_CheckIdleState>
 8010f74:	4603      	mov	r3, r0
}
 8010f76:	4618      	mov	r0, r3
 8010f78:	3708      	adds	r7, #8
 8010f7a:	46bd      	mov	sp, r7
 8010f7c:	bd80      	pop	{r7, pc}

08010f7e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010f7e:	b580      	push	{r7, lr}
 8010f80:	b08a      	sub	sp, #40	@ 0x28
 8010f82:	af02      	add	r7, sp, #8
 8010f84:	60f8      	str	r0, [r7, #12]
 8010f86:	60b9      	str	r1, [r7, #8]
 8010f88:	603b      	str	r3, [r7, #0]
 8010f8a:	4613      	mov	r3, r2
 8010f8c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010f94:	2b20      	cmp	r3, #32
 8010f96:	f040 808b 	bne.w	80110b0 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8010f9a:	68bb      	ldr	r3, [r7, #8]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d002      	beq.n	8010fa6 <HAL_UART_Transmit+0x28>
 8010fa0:	88fb      	ldrh	r3, [r7, #6]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d101      	bne.n	8010faa <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8010fa6:	2301      	movs	r3, #1
 8010fa8:	e083      	b.n	80110b2 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	689b      	ldr	r3, [r3, #8]
 8010fb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010fb4:	2b80      	cmp	r3, #128	@ 0x80
 8010fb6:	d107      	bne.n	8010fc8 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	689a      	ldr	r2, [r3, #8]
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8010fc6:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	2200      	movs	r2, #0
 8010fcc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	2221      	movs	r2, #33	@ 0x21
 8010fd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010fd8:	f7f4 fcf4 	bl	80059c4 <HAL_GetTick>
 8010fdc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	88fa      	ldrh	r2, [r7, #6]
 8010fe2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	88fa      	ldrh	r2, [r7, #6]
 8010fea:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	689b      	ldr	r3, [r3, #8]
 8010ff2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010ff6:	d108      	bne.n	801100a <HAL_UART_Transmit+0x8c>
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	691b      	ldr	r3, [r3, #16]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d104      	bne.n	801100a <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8011000:	2300      	movs	r3, #0
 8011002:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8011004:	68bb      	ldr	r3, [r7, #8]
 8011006:	61bb      	str	r3, [r7, #24]
 8011008:	e003      	b.n	8011012 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 801100a:	68bb      	ldr	r3, [r7, #8]
 801100c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801100e:	2300      	movs	r3, #0
 8011010:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8011012:	e030      	b.n	8011076 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011014:	683b      	ldr	r3, [r7, #0]
 8011016:	9300      	str	r3, [sp, #0]
 8011018:	697b      	ldr	r3, [r7, #20]
 801101a:	2200      	movs	r2, #0
 801101c:	2180      	movs	r1, #128	@ 0x80
 801101e:	68f8      	ldr	r0, [r7, #12]
 8011020:	f000 fb86 	bl	8011730 <UART_WaitOnFlagUntilTimeout>
 8011024:	4603      	mov	r3, r0
 8011026:	2b00      	cmp	r3, #0
 8011028:	d005      	beq.n	8011036 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	2220      	movs	r2, #32
 801102e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8011032:	2303      	movs	r3, #3
 8011034:	e03d      	b.n	80110b2 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8011036:	69fb      	ldr	r3, [r7, #28]
 8011038:	2b00      	cmp	r3, #0
 801103a:	d10b      	bne.n	8011054 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801103c:	69bb      	ldr	r3, [r7, #24]
 801103e:	881b      	ldrh	r3, [r3, #0]
 8011040:	461a      	mov	r2, r3
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801104a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801104c:	69bb      	ldr	r3, [r7, #24]
 801104e:	3302      	adds	r3, #2
 8011050:	61bb      	str	r3, [r7, #24]
 8011052:	e007      	b.n	8011064 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8011054:	69fb      	ldr	r3, [r7, #28]
 8011056:	781a      	ldrb	r2, [r3, #0]
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801105e:	69fb      	ldr	r3, [r7, #28]
 8011060:	3301      	adds	r3, #1
 8011062:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801106a:	b29b      	uxth	r3, r3
 801106c:	3b01      	subs	r3, #1
 801106e:	b29a      	uxth	r2, r3
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801107c:	b29b      	uxth	r3, r3
 801107e:	2b00      	cmp	r3, #0
 8011080:	d1c8      	bne.n	8011014 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8011082:	683b      	ldr	r3, [r7, #0]
 8011084:	9300      	str	r3, [sp, #0]
 8011086:	697b      	ldr	r3, [r7, #20]
 8011088:	2200      	movs	r2, #0
 801108a:	2140      	movs	r1, #64	@ 0x40
 801108c:	68f8      	ldr	r0, [r7, #12]
 801108e:	f000 fb4f 	bl	8011730 <UART_WaitOnFlagUntilTimeout>
 8011092:	4603      	mov	r3, r0
 8011094:	2b00      	cmp	r3, #0
 8011096:	d005      	beq.n	80110a4 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	2220      	movs	r2, #32
 801109c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80110a0:	2303      	movs	r3, #3
 80110a2:	e006      	b.n	80110b2 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	2220      	movs	r2, #32
 80110a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80110ac:	2300      	movs	r3, #0
 80110ae:	e000      	b.n	80110b2 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 80110b0:	2302      	movs	r3, #2
  }
}
 80110b2:	4618      	mov	r0, r3
 80110b4:	3720      	adds	r7, #32
 80110b6:	46bd      	mov	sp, r7
 80110b8:	bd80      	pop	{r7, pc}
	...

080110bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80110bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80110c0:	b094      	sub	sp, #80	@ 0x50
 80110c2:	af00      	add	r7, sp, #0
 80110c4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80110c6:	2300      	movs	r3, #0
 80110c8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80110cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110ce:	681a      	ldr	r2, [r3, #0]
 80110d0:	4b78      	ldr	r3, [pc, #480]	@ (80112b4 <UART_SetConfig+0x1f8>)
 80110d2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80110d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110d6:	689a      	ldr	r2, [r3, #8]
 80110d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110da:	691b      	ldr	r3, [r3, #16]
 80110dc:	431a      	orrs	r2, r3
 80110de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110e0:	695b      	ldr	r3, [r3, #20]
 80110e2:	431a      	orrs	r2, r3
 80110e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110e6:	69db      	ldr	r3, [r3, #28]
 80110e8:	4313      	orrs	r3, r2
 80110ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80110ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	4971      	ldr	r1, [pc, #452]	@ (80112b8 <UART_SetConfig+0x1fc>)
 80110f4:	4019      	ands	r1, r3
 80110f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110f8:	681a      	ldr	r2, [r3, #0]
 80110fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80110fc:	430b      	orrs	r3, r1
 80110fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	685b      	ldr	r3, [r3, #4]
 8011106:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 801110a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801110c:	68d9      	ldr	r1, [r3, #12]
 801110e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011110:	681a      	ldr	r2, [r3, #0]
 8011112:	ea40 0301 	orr.w	r3, r0, r1
 8011116:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801111a:	699b      	ldr	r3, [r3, #24]
 801111c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801111e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011120:	681a      	ldr	r2, [r3, #0]
 8011122:	4b64      	ldr	r3, [pc, #400]	@ (80112b4 <UART_SetConfig+0x1f8>)
 8011124:	429a      	cmp	r2, r3
 8011126:	d009      	beq.n	801113c <UART_SetConfig+0x80>
 8011128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801112a:	681a      	ldr	r2, [r3, #0]
 801112c:	4b63      	ldr	r3, [pc, #396]	@ (80112bc <UART_SetConfig+0x200>)
 801112e:	429a      	cmp	r2, r3
 8011130:	d004      	beq.n	801113c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011134:	6a1a      	ldr	r2, [r3, #32]
 8011136:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011138:	4313      	orrs	r3, r2
 801113a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801113c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	689b      	ldr	r3, [r3, #8]
 8011142:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8011146:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 801114a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801114c:	681a      	ldr	r2, [r3, #0]
 801114e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011150:	430b      	orrs	r3, r1
 8011152:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801115a:	f023 000f 	bic.w	r0, r3, #15
 801115e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011160:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8011162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011164:	681a      	ldr	r2, [r3, #0]
 8011166:	ea40 0301 	orr.w	r3, r0, r1
 801116a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801116c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801116e:	681a      	ldr	r2, [r3, #0]
 8011170:	4b53      	ldr	r3, [pc, #332]	@ (80112c0 <UART_SetConfig+0x204>)
 8011172:	429a      	cmp	r2, r3
 8011174:	d102      	bne.n	801117c <UART_SetConfig+0xc0>
 8011176:	2301      	movs	r3, #1
 8011178:	64bb      	str	r3, [r7, #72]	@ 0x48
 801117a:	e066      	b.n	801124a <UART_SetConfig+0x18e>
 801117c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801117e:	681a      	ldr	r2, [r3, #0]
 8011180:	4b50      	ldr	r3, [pc, #320]	@ (80112c4 <UART_SetConfig+0x208>)
 8011182:	429a      	cmp	r2, r3
 8011184:	d102      	bne.n	801118c <UART_SetConfig+0xd0>
 8011186:	2302      	movs	r3, #2
 8011188:	64bb      	str	r3, [r7, #72]	@ 0x48
 801118a:	e05e      	b.n	801124a <UART_SetConfig+0x18e>
 801118c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801118e:	681a      	ldr	r2, [r3, #0]
 8011190:	4b4d      	ldr	r3, [pc, #308]	@ (80112c8 <UART_SetConfig+0x20c>)
 8011192:	429a      	cmp	r2, r3
 8011194:	d102      	bne.n	801119c <UART_SetConfig+0xe0>
 8011196:	2304      	movs	r3, #4
 8011198:	64bb      	str	r3, [r7, #72]	@ 0x48
 801119a:	e056      	b.n	801124a <UART_SetConfig+0x18e>
 801119c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801119e:	681a      	ldr	r2, [r3, #0]
 80111a0:	4b4a      	ldr	r3, [pc, #296]	@ (80112cc <UART_SetConfig+0x210>)
 80111a2:	429a      	cmp	r2, r3
 80111a4:	d102      	bne.n	80111ac <UART_SetConfig+0xf0>
 80111a6:	2308      	movs	r3, #8
 80111a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80111aa:	e04e      	b.n	801124a <UART_SetConfig+0x18e>
 80111ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111ae:	681a      	ldr	r2, [r3, #0]
 80111b0:	4b47      	ldr	r3, [pc, #284]	@ (80112d0 <UART_SetConfig+0x214>)
 80111b2:	429a      	cmp	r2, r3
 80111b4:	d102      	bne.n	80111bc <UART_SetConfig+0x100>
 80111b6:	2310      	movs	r3, #16
 80111b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80111ba:	e046      	b.n	801124a <UART_SetConfig+0x18e>
 80111bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111be:	681a      	ldr	r2, [r3, #0]
 80111c0:	4b44      	ldr	r3, [pc, #272]	@ (80112d4 <UART_SetConfig+0x218>)
 80111c2:	429a      	cmp	r2, r3
 80111c4:	d102      	bne.n	80111cc <UART_SetConfig+0x110>
 80111c6:	2320      	movs	r3, #32
 80111c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80111ca:	e03e      	b.n	801124a <UART_SetConfig+0x18e>
 80111cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111ce:	681a      	ldr	r2, [r3, #0]
 80111d0:	4b41      	ldr	r3, [pc, #260]	@ (80112d8 <UART_SetConfig+0x21c>)
 80111d2:	429a      	cmp	r2, r3
 80111d4:	d102      	bne.n	80111dc <UART_SetConfig+0x120>
 80111d6:	2340      	movs	r3, #64	@ 0x40
 80111d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80111da:	e036      	b.n	801124a <UART_SetConfig+0x18e>
 80111dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111de:	681a      	ldr	r2, [r3, #0]
 80111e0:	4b3e      	ldr	r3, [pc, #248]	@ (80112dc <UART_SetConfig+0x220>)
 80111e2:	429a      	cmp	r2, r3
 80111e4:	d102      	bne.n	80111ec <UART_SetConfig+0x130>
 80111e6:	2380      	movs	r3, #128	@ 0x80
 80111e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80111ea:	e02e      	b.n	801124a <UART_SetConfig+0x18e>
 80111ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111ee:	681a      	ldr	r2, [r3, #0]
 80111f0:	4b3b      	ldr	r3, [pc, #236]	@ (80112e0 <UART_SetConfig+0x224>)
 80111f2:	429a      	cmp	r2, r3
 80111f4:	d103      	bne.n	80111fe <UART_SetConfig+0x142>
 80111f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80111fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80111fc:	e025      	b.n	801124a <UART_SetConfig+0x18e>
 80111fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011200:	681a      	ldr	r2, [r3, #0]
 8011202:	4b38      	ldr	r3, [pc, #224]	@ (80112e4 <UART_SetConfig+0x228>)
 8011204:	429a      	cmp	r2, r3
 8011206:	d103      	bne.n	8011210 <UART_SetConfig+0x154>
 8011208:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801120c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801120e:	e01c      	b.n	801124a <UART_SetConfig+0x18e>
 8011210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011212:	681a      	ldr	r2, [r3, #0]
 8011214:	4b34      	ldr	r3, [pc, #208]	@ (80112e8 <UART_SetConfig+0x22c>)
 8011216:	429a      	cmp	r2, r3
 8011218:	d103      	bne.n	8011222 <UART_SetConfig+0x166>
 801121a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801121e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011220:	e013      	b.n	801124a <UART_SetConfig+0x18e>
 8011222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011224:	681a      	ldr	r2, [r3, #0]
 8011226:	4b31      	ldr	r3, [pc, #196]	@ (80112ec <UART_SetConfig+0x230>)
 8011228:	429a      	cmp	r2, r3
 801122a:	d103      	bne.n	8011234 <UART_SetConfig+0x178>
 801122c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011230:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011232:	e00a      	b.n	801124a <UART_SetConfig+0x18e>
 8011234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011236:	681a      	ldr	r2, [r3, #0]
 8011238:	4b1e      	ldr	r3, [pc, #120]	@ (80112b4 <UART_SetConfig+0x1f8>)
 801123a:	429a      	cmp	r2, r3
 801123c:	d103      	bne.n	8011246 <UART_SetConfig+0x18a>
 801123e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011242:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011244:	e001      	b.n	801124a <UART_SetConfig+0x18e>
 8011246:	2300      	movs	r3, #0
 8011248:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801124a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801124c:	681a      	ldr	r2, [r3, #0]
 801124e:	4b19      	ldr	r3, [pc, #100]	@ (80112b4 <UART_SetConfig+0x1f8>)
 8011250:	429a      	cmp	r2, r3
 8011252:	d005      	beq.n	8011260 <UART_SetConfig+0x1a4>
 8011254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011256:	681a      	ldr	r2, [r3, #0]
 8011258:	4b18      	ldr	r3, [pc, #96]	@ (80112bc <UART_SetConfig+0x200>)
 801125a:	429a      	cmp	r2, r3
 801125c:	f040 8094 	bne.w	8011388 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8011260:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011262:	2200      	movs	r2, #0
 8011264:	623b      	str	r3, [r7, #32]
 8011266:	627a      	str	r2, [r7, #36]	@ 0x24
 8011268:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801126c:	f7fb fdc2 	bl	800cdf4 <HAL_RCCEx_GetPeriphCLKFreq>
 8011270:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8011272:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011274:	2b00      	cmp	r3, #0
 8011276:	f000 80f7 	beq.w	8011468 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801127a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801127c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801127e:	4a1c      	ldr	r2, [pc, #112]	@ (80112f0 <UART_SetConfig+0x234>)
 8011280:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011284:	461a      	mov	r2, r3
 8011286:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011288:	fbb3 f3f2 	udiv	r3, r3, r2
 801128c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801128e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011290:	685a      	ldr	r2, [r3, #4]
 8011292:	4613      	mov	r3, r2
 8011294:	005b      	lsls	r3, r3, #1
 8011296:	4413      	add	r3, r2
 8011298:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801129a:	429a      	cmp	r2, r3
 801129c:	d305      	bcc.n	80112aa <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801129e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112a0:	685b      	ldr	r3, [r3, #4]
 80112a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80112a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80112a6:	429a      	cmp	r2, r3
 80112a8:	d924      	bls.n	80112f4 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 80112aa:	2301      	movs	r3, #1
 80112ac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80112b0:	e069      	b.n	8011386 <UART_SetConfig+0x2ca>
 80112b2:	bf00      	nop
 80112b4:	44002400 	.word	0x44002400
 80112b8:	cfff69f3 	.word	0xcfff69f3
 80112bc:	54002400 	.word	0x54002400
 80112c0:	40013800 	.word	0x40013800
 80112c4:	40004400 	.word	0x40004400
 80112c8:	40004800 	.word	0x40004800
 80112cc:	40004c00 	.word	0x40004c00
 80112d0:	40005000 	.word	0x40005000
 80112d4:	40006400 	.word	0x40006400
 80112d8:	40007800 	.word	0x40007800
 80112dc:	40007c00 	.word	0x40007c00
 80112e0:	40008000 	.word	0x40008000
 80112e4:	40006800 	.word	0x40006800
 80112e8:	40006c00 	.word	0x40006c00
 80112ec:	40008400 	.word	0x40008400
 80112f0:	080195cc 	.word	0x080195cc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80112f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80112f6:	2200      	movs	r2, #0
 80112f8:	61bb      	str	r3, [r7, #24]
 80112fa:	61fa      	str	r2, [r7, #28]
 80112fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011300:	4a64      	ldr	r2, [pc, #400]	@ (8011494 <UART_SetConfig+0x3d8>)
 8011302:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011306:	b29b      	uxth	r3, r3
 8011308:	2200      	movs	r2, #0
 801130a:	613b      	str	r3, [r7, #16]
 801130c:	617a      	str	r2, [r7, #20]
 801130e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011312:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8011316:	f7ee ffb9 	bl	800028c <__aeabi_uldivmod>
 801131a:	4602      	mov	r2, r0
 801131c:	460b      	mov	r3, r1
 801131e:	4610      	mov	r0, r2
 8011320:	4619      	mov	r1, r3
 8011322:	f04f 0200 	mov.w	r2, #0
 8011326:	f04f 0300 	mov.w	r3, #0
 801132a:	020b      	lsls	r3, r1, #8
 801132c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011330:	0202      	lsls	r2, r0, #8
 8011332:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011334:	6849      	ldr	r1, [r1, #4]
 8011336:	0849      	lsrs	r1, r1, #1
 8011338:	2000      	movs	r0, #0
 801133a:	460c      	mov	r4, r1
 801133c:	4605      	mov	r5, r0
 801133e:	eb12 0804 	adds.w	r8, r2, r4
 8011342:	eb43 0905 	adc.w	r9, r3, r5
 8011346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011348:	685b      	ldr	r3, [r3, #4]
 801134a:	2200      	movs	r2, #0
 801134c:	60bb      	str	r3, [r7, #8]
 801134e:	60fa      	str	r2, [r7, #12]
 8011350:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011354:	4640      	mov	r0, r8
 8011356:	4649      	mov	r1, r9
 8011358:	f7ee ff98 	bl	800028c <__aeabi_uldivmod>
 801135c:	4602      	mov	r2, r0
 801135e:	460b      	mov	r3, r1
 8011360:	4613      	mov	r3, r2
 8011362:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011364:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011366:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801136a:	d308      	bcc.n	801137e <UART_SetConfig+0x2c2>
 801136c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801136e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011372:	d204      	bcs.n	801137e <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 8011374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801137a:	60da      	str	r2, [r3, #12]
 801137c:	e003      	b.n	8011386 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 801137e:	2301      	movs	r3, #1
 8011380:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8011384:	e070      	b.n	8011468 <UART_SetConfig+0x3ac>
 8011386:	e06f      	b.n	8011468 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801138a:	69db      	ldr	r3, [r3, #28]
 801138c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011390:	d13c      	bne.n	801140c <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8011392:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011394:	2200      	movs	r2, #0
 8011396:	603b      	str	r3, [r7, #0]
 8011398:	607a      	str	r2, [r7, #4]
 801139a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801139e:	f7fb fd29 	bl	800cdf4 <HAL_RCCEx_GetPeriphCLKFreq>
 80113a2:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80113a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d05e      	beq.n	8011468 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80113aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113ae:	4a39      	ldr	r2, [pc, #228]	@ (8011494 <UART_SetConfig+0x3d8>)
 80113b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80113b4:	461a      	mov	r2, r3
 80113b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80113b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80113bc:	005a      	lsls	r2, r3, #1
 80113be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113c0:	685b      	ldr	r3, [r3, #4]
 80113c2:	085b      	lsrs	r3, r3, #1
 80113c4:	441a      	add	r2, r3
 80113c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113c8:	685b      	ldr	r3, [r3, #4]
 80113ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80113ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80113d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80113d2:	2b0f      	cmp	r3, #15
 80113d4:	d916      	bls.n	8011404 <UART_SetConfig+0x348>
 80113d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80113d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80113dc:	d212      	bcs.n	8011404 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80113de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80113e0:	b29b      	uxth	r3, r3
 80113e2:	f023 030f 	bic.w	r3, r3, #15
 80113e6:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80113e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80113ea:	085b      	lsrs	r3, r3, #1
 80113ec:	b29b      	uxth	r3, r3
 80113ee:	f003 0307 	and.w	r3, r3, #7
 80113f2:	b29a      	uxth	r2, r3
 80113f4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80113f6:	4313      	orrs	r3, r2
 80113f8:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 80113fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011400:	60da      	str	r2, [r3, #12]
 8011402:	e031      	b.n	8011468 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8011404:	2301      	movs	r3, #1
 8011406:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801140a:	e02d      	b.n	8011468 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 801140c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801140e:	2200      	movs	r2, #0
 8011410:	469a      	mov	sl, r3
 8011412:	4693      	mov	fp, r2
 8011414:	4650      	mov	r0, sl
 8011416:	4659      	mov	r1, fp
 8011418:	f7fb fcec 	bl	800cdf4 <HAL_RCCEx_GetPeriphCLKFreq>
 801141c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 801141e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011420:	2b00      	cmp	r3, #0
 8011422:	d021      	beq.n	8011468 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011428:	4a1a      	ldr	r2, [pc, #104]	@ (8011494 <UART_SetConfig+0x3d8>)
 801142a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801142e:	461a      	mov	r2, r3
 8011430:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011432:	fbb3 f2f2 	udiv	r2, r3, r2
 8011436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011438:	685b      	ldr	r3, [r3, #4]
 801143a:	085b      	lsrs	r3, r3, #1
 801143c:	441a      	add	r2, r3
 801143e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011440:	685b      	ldr	r3, [r3, #4]
 8011442:	fbb2 f3f3 	udiv	r3, r2, r3
 8011446:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801144a:	2b0f      	cmp	r3, #15
 801144c:	d909      	bls.n	8011462 <UART_SetConfig+0x3a6>
 801144e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011450:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011454:	d205      	bcs.n	8011462 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011456:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011458:	b29a      	uxth	r2, r3
 801145a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	60da      	str	r2, [r3, #12]
 8011460:	e002      	b.n	8011468 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8011462:	2301      	movs	r3, #1
 8011464:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801146a:	2201      	movs	r2, #1
 801146c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8011470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011472:	2201      	movs	r2, #1
 8011474:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801147a:	2200      	movs	r2, #0
 801147c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801147e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011480:	2200      	movs	r2, #0
 8011482:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8011484:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8011488:	4618      	mov	r0, r3
 801148a:	3750      	adds	r7, #80	@ 0x50
 801148c:	46bd      	mov	sp, r7
 801148e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011492:	bf00      	nop
 8011494:	080195cc 	.word	0x080195cc

08011498 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011498:	b480      	push	{r7}
 801149a:	b083      	sub	sp, #12
 801149c:	af00      	add	r7, sp, #0
 801149e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80114a4:	f003 0308 	and.w	r3, r3, #8
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d00a      	beq.n	80114c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	685b      	ldr	r3, [r3, #4]
 80114b2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	430a      	orrs	r2, r1
 80114c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80114c6:	f003 0301 	and.w	r3, r3, #1
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d00a      	beq.n	80114e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	685b      	ldr	r3, [r3, #4]
 80114d4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	430a      	orrs	r2, r1
 80114e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80114e8:	f003 0302 	and.w	r3, r3, #2
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d00a      	beq.n	8011506 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	685b      	ldr	r3, [r3, #4]
 80114f6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	430a      	orrs	r2, r1
 8011504:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801150a:	f003 0304 	and.w	r3, r3, #4
 801150e:	2b00      	cmp	r3, #0
 8011510:	d00a      	beq.n	8011528 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	685b      	ldr	r3, [r3, #4]
 8011518:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	430a      	orrs	r2, r1
 8011526:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801152c:	f003 0310 	and.w	r3, r3, #16
 8011530:	2b00      	cmp	r3, #0
 8011532:	d00a      	beq.n	801154a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	689b      	ldr	r3, [r3, #8]
 801153a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	430a      	orrs	r2, r1
 8011548:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801154e:	f003 0320 	and.w	r3, r3, #32
 8011552:	2b00      	cmp	r3, #0
 8011554:	d00a      	beq.n	801156c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	689b      	ldr	r3, [r3, #8]
 801155c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	430a      	orrs	r2, r1
 801156a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011574:	2b00      	cmp	r3, #0
 8011576:	d01a      	beq.n	80115ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	685b      	ldr	r3, [r3, #4]
 801157e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	430a      	orrs	r2, r1
 801158c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011592:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011596:	d10a      	bne.n	80115ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	685b      	ldr	r3, [r3, #4]
 801159e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	430a      	orrs	r2, r1
 80115ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80115b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d00a      	beq.n	80115d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	685b      	ldr	r3, [r3, #4]
 80115c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	430a      	orrs	r2, r1
 80115ce:	605a      	str	r2, [r3, #4]
  }
}
 80115d0:	bf00      	nop
 80115d2:	370c      	adds	r7, #12
 80115d4:	46bd      	mov	sp, r7
 80115d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115da:	4770      	bx	lr

080115dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80115dc:	b580      	push	{r7, lr}
 80115de:	b098      	sub	sp, #96	@ 0x60
 80115e0:	af02      	add	r7, sp, #8
 80115e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	2200      	movs	r2, #0
 80115e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80115ec:	f7f4 f9ea 	bl	80059c4 <HAL_GetTick>
 80115f0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	f003 0308 	and.w	r3, r3, #8
 80115fc:	2b08      	cmp	r3, #8
 80115fe:	d12f      	bne.n	8011660 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011600:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011604:	9300      	str	r3, [sp, #0]
 8011606:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011608:	2200      	movs	r2, #0
 801160a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801160e:	6878      	ldr	r0, [r7, #4]
 8011610:	f000 f88e 	bl	8011730 <UART_WaitOnFlagUntilTimeout>
 8011614:	4603      	mov	r3, r0
 8011616:	2b00      	cmp	r3, #0
 8011618:	d022      	beq.n	8011660 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011622:	e853 3f00 	ldrex	r3, [r3]
 8011626:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801162a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801162e:	653b      	str	r3, [r7, #80]	@ 0x50
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	461a      	mov	r2, r3
 8011636:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011638:	647b      	str	r3, [r7, #68]	@ 0x44
 801163a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801163c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801163e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011640:	e841 2300 	strex	r3, r2, [r1]
 8011644:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011648:	2b00      	cmp	r3, #0
 801164a:	d1e6      	bne.n	801161a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	2220      	movs	r2, #32
 8011650:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	2200      	movs	r2, #0
 8011658:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801165c:	2303      	movs	r3, #3
 801165e:	e063      	b.n	8011728 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	f003 0304 	and.w	r3, r3, #4
 801166a:	2b04      	cmp	r3, #4
 801166c:	d149      	bne.n	8011702 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801166e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011672:	9300      	str	r3, [sp, #0]
 8011674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011676:	2200      	movs	r2, #0
 8011678:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801167c:	6878      	ldr	r0, [r7, #4]
 801167e:	f000 f857 	bl	8011730 <UART_WaitOnFlagUntilTimeout>
 8011682:	4603      	mov	r3, r0
 8011684:	2b00      	cmp	r3, #0
 8011686:	d03c      	beq.n	8011702 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801168e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011690:	e853 3f00 	ldrex	r3, [r3]
 8011694:	623b      	str	r3, [r7, #32]
   return(result);
 8011696:	6a3b      	ldr	r3, [r7, #32]
 8011698:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801169c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	461a      	mov	r2, r3
 80116a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80116a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80116a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80116ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80116ae:	e841 2300 	strex	r3, r2, [r1]
 80116b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80116b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d1e6      	bne.n	8011688 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	3308      	adds	r3, #8
 80116c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116c2:	693b      	ldr	r3, [r7, #16]
 80116c4:	e853 3f00 	ldrex	r3, [r3]
 80116c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	f023 0301 	bic.w	r3, r3, #1
 80116d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	3308      	adds	r3, #8
 80116d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80116da:	61fa      	str	r2, [r7, #28]
 80116dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116de:	69b9      	ldr	r1, [r7, #24]
 80116e0:	69fa      	ldr	r2, [r7, #28]
 80116e2:	e841 2300 	strex	r3, r2, [r1]
 80116e6:	617b      	str	r3, [r7, #20]
   return(result);
 80116e8:	697b      	ldr	r3, [r7, #20]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d1e5      	bne.n	80116ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	2220      	movs	r2, #32
 80116f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	2200      	movs	r2, #0
 80116fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80116fe:	2303      	movs	r3, #3
 8011700:	e012      	b.n	8011728 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	2220      	movs	r2, #32
 8011706:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	2220      	movs	r2, #32
 801170e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	2200      	movs	r2, #0
 8011716:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	2200      	movs	r2, #0
 801171c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	2200      	movs	r2, #0
 8011722:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011726:	2300      	movs	r3, #0
}
 8011728:	4618      	mov	r0, r3
 801172a:	3758      	adds	r7, #88	@ 0x58
 801172c:	46bd      	mov	sp, r7
 801172e:	bd80      	pop	{r7, pc}

08011730 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011730:	b580      	push	{r7, lr}
 8011732:	b084      	sub	sp, #16
 8011734:	af00      	add	r7, sp, #0
 8011736:	60f8      	str	r0, [r7, #12]
 8011738:	60b9      	str	r1, [r7, #8]
 801173a:	603b      	str	r3, [r7, #0]
 801173c:	4613      	mov	r3, r2
 801173e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011740:	e04f      	b.n	80117e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011742:	69bb      	ldr	r3, [r7, #24]
 8011744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011748:	d04b      	beq.n	80117e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801174a:	f7f4 f93b 	bl	80059c4 <HAL_GetTick>
 801174e:	4602      	mov	r2, r0
 8011750:	683b      	ldr	r3, [r7, #0]
 8011752:	1ad3      	subs	r3, r2, r3
 8011754:	69ba      	ldr	r2, [r7, #24]
 8011756:	429a      	cmp	r2, r3
 8011758:	d302      	bcc.n	8011760 <UART_WaitOnFlagUntilTimeout+0x30>
 801175a:	69bb      	ldr	r3, [r7, #24]
 801175c:	2b00      	cmp	r3, #0
 801175e:	d101      	bne.n	8011764 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011760:	2303      	movs	r3, #3
 8011762:	e04e      	b.n	8011802 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	f003 0304 	and.w	r3, r3, #4
 801176e:	2b00      	cmp	r3, #0
 8011770:	d037      	beq.n	80117e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011772:	68bb      	ldr	r3, [r7, #8]
 8011774:	2b80      	cmp	r3, #128	@ 0x80
 8011776:	d034      	beq.n	80117e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011778:	68bb      	ldr	r3, [r7, #8]
 801177a:	2b40      	cmp	r3, #64	@ 0x40
 801177c:	d031      	beq.n	80117e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	69db      	ldr	r3, [r3, #28]
 8011784:	f003 0308 	and.w	r3, r3, #8
 8011788:	2b08      	cmp	r3, #8
 801178a:	d110      	bne.n	80117ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	2208      	movs	r2, #8
 8011792:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011794:	68f8      	ldr	r0, [r7, #12]
 8011796:	f000 f838 	bl	801180a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	2208      	movs	r2, #8
 801179e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	2200      	movs	r2, #0
 80117a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80117aa:	2301      	movs	r3, #1
 80117ac:	e029      	b.n	8011802 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	69db      	ldr	r3, [r3, #28]
 80117b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80117b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80117bc:	d111      	bne.n	80117e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80117c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80117c8:	68f8      	ldr	r0, [r7, #12]
 80117ca:	f000 f81e 	bl	801180a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	2220      	movs	r2, #32
 80117d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	2200      	movs	r2, #0
 80117da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80117de:	2303      	movs	r3, #3
 80117e0:	e00f      	b.n	8011802 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	69da      	ldr	r2, [r3, #28]
 80117e8:	68bb      	ldr	r3, [r7, #8]
 80117ea:	4013      	ands	r3, r2
 80117ec:	68ba      	ldr	r2, [r7, #8]
 80117ee:	429a      	cmp	r2, r3
 80117f0:	bf0c      	ite	eq
 80117f2:	2301      	moveq	r3, #1
 80117f4:	2300      	movne	r3, #0
 80117f6:	b2db      	uxtb	r3, r3
 80117f8:	461a      	mov	r2, r3
 80117fa:	79fb      	ldrb	r3, [r7, #7]
 80117fc:	429a      	cmp	r2, r3
 80117fe:	d0a0      	beq.n	8011742 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011800:	2300      	movs	r3, #0
}
 8011802:	4618      	mov	r0, r3
 8011804:	3710      	adds	r7, #16
 8011806:	46bd      	mov	sp, r7
 8011808:	bd80      	pop	{r7, pc}

0801180a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801180a:	b480      	push	{r7}
 801180c:	b095      	sub	sp, #84	@ 0x54
 801180e:	af00      	add	r7, sp, #0
 8011810:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801181a:	e853 3f00 	ldrex	r3, [r3]
 801181e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011822:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011826:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	461a      	mov	r2, r3
 801182e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011830:	643b      	str	r3, [r7, #64]	@ 0x40
 8011832:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011834:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011836:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011838:	e841 2300 	strex	r3, r2, [r1]
 801183c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801183e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011840:	2b00      	cmp	r3, #0
 8011842:	d1e6      	bne.n	8011812 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	3308      	adds	r3, #8
 801184a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801184c:	6a3b      	ldr	r3, [r7, #32]
 801184e:	e853 3f00 	ldrex	r3, [r3]
 8011852:	61fb      	str	r3, [r7, #28]
   return(result);
 8011854:	69fb      	ldr	r3, [r7, #28]
 8011856:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801185a:	f023 0301 	bic.w	r3, r3, #1
 801185e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	3308      	adds	r3, #8
 8011866:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011868:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801186a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801186c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801186e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011870:	e841 2300 	strex	r3, r2, [r1]
 8011874:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011878:	2b00      	cmp	r3, #0
 801187a:	d1e3      	bne.n	8011844 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011880:	2b01      	cmp	r3, #1
 8011882:	d118      	bne.n	80118b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	e853 3f00 	ldrex	r3, [r3]
 8011890:	60bb      	str	r3, [r7, #8]
   return(result);
 8011892:	68bb      	ldr	r3, [r7, #8]
 8011894:	f023 0310 	bic.w	r3, r3, #16
 8011898:	647b      	str	r3, [r7, #68]	@ 0x44
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	461a      	mov	r2, r3
 80118a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80118a2:	61bb      	str	r3, [r7, #24]
 80118a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118a6:	6979      	ldr	r1, [r7, #20]
 80118a8:	69ba      	ldr	r2, [r7, #24]
 80118aa:	e841 2300 	strex	r3, r2, [r1]
 80118ae:	613b      	str	r3, [r7, #16]
   return(result);
 80118b0:	693b      	ldr	r3, [r7, #16]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d1e6      	bne.n	8011884 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	2220      	movs	r2, #32
 80118ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	2200      	movs	r2, #0
 80118c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	2200      	movs	r2, #0
 80118c8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80118ca:	bf00      	nop
 80118cc:	3754      	adds	r7, #84	@ 0x54
 80118ce:	46bd      	mov	sp, r7
 80118d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d4:	4770      	bx	lr

080118d6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80118d6:	b480      	push	{r7}
 80118d8:	b085      	sub	sp, #20
 80118da:	af00      	add	r7, sp, #0
 80118dc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80118e4:	2b01      	cmp	r3, #1
 80118e6:	d101      	bne.n	80118ec <HAL_UARTEx_DisableFifoMode+0x16>
 80118e8:	2302      	movs	r3, #2
 80118ea:	e027      	b.n	801193c <HAL_UARTEx_DisableFifoMode+0x66>
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	2201      	movs	r2, #1
 80118f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	2224      	movs	r2, #36	@ 0x24
 80118f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	681a      	ldr	r2, [r3, #0]
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	f022 0201 	bic.w	r2, r2, #1
 8011912:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801191a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	2200      	movs	r2, #0
 8011920:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	68fa      	ldr	r2, [r7, #12]
 8011928:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	2220      	movs	r2, #32
 801192e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	2200      	movs	r2, #0
 8011936:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801193a:	2300      	movs	r3, #0
}
 801193c:	4618      	mov	r0, r3
 801193e:	3714      	adds	r7, #20
 8011940:	46bd      	mov	sp, r7
 8011942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011946:	4770      	bx	lr

08011948 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011948:	b580      	push	{r7, lr}
 801194a:	b084      	sub	sp, #16
 801194c:	af00      	add	r7, sp, #0
 801194e:	6078      	str	r0, [r7, #4]
 8011950:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011958:	2b01      	cmp	r3, #1
 801195a:	d101      	bne.n	8011960 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801195c:	2302      	movs	r3, #2
 801195e:	e02d      	b.n	80119bc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	2201      	movs	r2, #1
 8011964:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	2224      	movs	r2, #36	@ 0x24
 801196c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	681a      	ldr	r2, [r3, #0]
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	f022 0201 	bic.w	r2, r2, #1
 8011986:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	689b      	ldr	r3, [r3, #8]
 801198e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	683a      	ldr	r2, [r7, #0]
 8011998:	430a      	orrs	r2, r1
 801199a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801199c:	6878      	ldr	r0, [r7, #4]
 801199e:	f000 f84f 	bl	8011a40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	68fa      	ldr	r2, [r7, #12]
 80119a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	2220      	movs	r2, #32
 80119ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	2200      	movs	r2, #0
 80119b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80119ba:	2300      	movs	r3, #0
}
 80119bc:	4618      	mov	r0, r3
 80119be:	3710      	adds	r7, #16
 80119c0:	46bd      	mov	sp, r7
 80119c2:	bd80      	pop	{r7, pc}

080119c4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80119c4:	b580      	push	{r7, lr}
 80119c6:	b084      	sub	sp, #16
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	6078      	str	r0, [r7, #4]
 80119cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80119d4:	2b01      	cmp	r3, #1
 80119d6:	d101      	bne.n	80119dc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80119d8:	2302      	movs	r3, #2
 80119da:	e02d      	b.n	8011a38 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	2201      	movs	r2, #1
 80119e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	2224      	movs	r2, #36	@ 0x24
 80119e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	681a      	ldr	r2, [r3, #0]
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	f022 0201 	bic.w	r2, r2, #1
 8011a02:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	689b      	ldr	r3, [r3, #8]
 8011a0a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	683a      	ldr	r2, [r7, #0]
 8011a14:	430a      	orrs	r2, r1
 8011a16:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011a18:	6878      	ldr	r0, [r7, #4]
 8011a1a:	f000 f811 	bl	8011a40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	68fa      	ldr	r2, [r7, #12]
 8011a24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	2220      	movs	r2, #32
 8011a2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	2200      	movs	r2, #0
 8011a32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011a36:	2300      	movs	r3, #0
}
 8011a38:	4618      	mov	r0, r3
 8011a3a:	3710      	adds	r7, #16
 8011a3c:	46bd      	mov	sp, r7
 8011a3e:	bd80      	pop	{r7, pc}

08011a40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011a40:	b480      	push	{r7}
 8011a42:	b085      	sub	sp, #20
 8011a44:	af00      	add	r7, sp, #0
 8011a46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d108      	bne.n	8011a62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	2201      	movs	r2, #1
 8011a54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	2201      	movs	r2, #1
 8011a5c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011a60:	e031      	b.n	8011ac6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011a62:	2308      	movs	r3, #8
 8011a64:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011a66:	2308      	movs	r3, #8
 8011a68:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	689b      	ldr	r3, [r3, #8]
 8011a70:	0e5b      	lsrs	r3, r3, #25
 8011a72:	b2db      	uxtb	r3, r3
 8011a74:	f003 0307 	and.w	r3, r3, #7
 8011a78:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	689b      	ldr	r3, [r3, #8]
 8011a80:	0f5b      	lsrs	r3, r3, #29
 8011a82:	b2db      	uxtb	r3, r3
 8011a84:	f003 0307 	and.w	r3, r3, #7
 8011a88:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011a8a:	7bbb      	ldrb	r3, [r7, #14]
 8011a8c:	7b3a      	ldrb	r2, [r7, #12]
 8011a8e:	4911      	ldr	r1, [pc, #68]	@ (8011ad4 <UARTEx_SetNbDataToProcess+0x94>)
 8011a90:	5c8a      	ldrb	r2, [r1, r2]
 8011a92:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011a96:	7b3a      	ldrb	r2, [r7, #12]
 8011a98:	490f      	ldr	r1, [pc, #60]	@ (8011ad8 <UARTEx_SetNbDataToProcess+0x98>)
 8011a9a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011a9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8011aa0:	b29a      	uxth	r2, r3
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011aa8:	7bfb      	ldrb	r3, [r7, #15]
 8011aaa:	7b7a      	ldrb	r2, [r7, #13]
 8011aac:	4909      	ldr	r1, [pc, #36]	@ (8011ad4 <UARTEx_SetNbDataToProcess+0x94>)
 8011aae:	5c8a      	ldrb	r2, [r1, r2]
 8011ab0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011ab4:	7b7a      	ldrb	r2, [r7, #13]
 8011ab6:	4908      	ldr	r1, [pc, #32]	@ (8011ad8 <UARTEx_SetNbDataToProcess+0x98>)
 8011ab8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011aba:	fb93 f3f2 	sdiv	r3, r3, r2
 8011abe:	b29a      	uxth	r2, r3
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8011ac6:	bf00      	nop
 8011ac8:	3714      	adds	r7, #20
 8011aca:	46bd      	mov	sp, r7
 8011acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad0:	4770      	bx	lr
 8011ad2:	bf00      	nop
 8011ad4:	080195e4 	.word	0x080195e4
 8011ad8:	080195ec 	.word	0x080195ec

08011adc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_DRD_TypeDef *USBx)
{
 8011adc:	b480      	push	{r7}
 8011ade:	b083      	sub	sp, #12
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	6078      	str	r0, [r7, #4]
  /* Disable Host Mode */
  USBx->CNTR &= ~USB_CNTR_HOST;
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011ae8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Force Reset IP */
  USBx->CNTR |= USB_CNTR_USBRST;
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011af4:	f043 0201 	orr.w	r2, r3, #1
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8011afc:	2300      	movs	r3, #0
}
 8011afe:	4618      	mov	r0, r3
 8011b00:	370c      	adds	r7, #12
 8011b02:	46bd      	mov	sp, r7
 8011b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b08:	4770      	bx	lr

08011b0a <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8011b0a:	b084      	sub	sp, #16
 8011b0c:	b580      	push	{r7, lr}
 8011b0e:	b084      	sub	sp, #16
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	6078      	str	r0, [r7, #4]
 8011b14:	f107 001c 	add.w	r0, r7, #28
 8011b18:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  UNUSED(cfg);

  if (USBx == NULL)
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d101      	bne.n	8011b26 <USB_CoreInit+0x1c>
  {
    return HAL_ERROR;
 8011b22:	2301      	movs	r3, #1
 8011b24:	e008      	b.n	8011b38 <USB_CoreInit+0x2e>
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8011b26:	6878      	ldr	r0, [r7, #4]
 8011b28:	f7ff ffd8 	bl	8011adc <USB_CoreReset>
 8011b2c:	4603      	mov	r3, r0
 8011b2e:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	2200      	movs	r2, #0
 8011b34:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 8011b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b38:	4618      	mov	r0, r3
 8011b3a:	3710      	adds	r7, #16
 8011b3c:	46bd      	mov	sp, r7
 8011b3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011b42:	b004      	add	sp, #16
 8011b44:	4770      	bx	lr

08011b46 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8011b46:	b480      	push	{r7}
 8011b48:	b085      	sub	sp, #20
 8011b4a:	af00      	add	r7, sp, #0
 8011b4c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	2200      	movs	r2, #0
 8011b52:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8011b54:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8011b58:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	68fa      	ldr	r2, [r7, #12]
 8011b5e:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8011b60:	2300      	movs	r3, #0
}
 8011b62:	4618      	mov	r0, r3
 8011b64:	3714      	adds	r7, #20
 8011b66:	46bd      	mov	sp, r7
 8011b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b6c:	4770      	bx	lr

08011b6e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8011b6e:	b480      	push	{r7}
 8011b70:	b085      	sub	sp, #20
 8011b72:	af00      	add	r7, sp, #0
 8011b74:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8011b76:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8011b7a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	43db      	mvns	r3, r3
 8011b84:	401a      	ands	r2, r3
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8011b8a:	2300      	movs	r3, #0
}
 8011b8c:	4618      	mov	r0, r3
 8011b8e:	3714      	adds	r7, #20
 8011b90:	46bd      	mov	sp, r7
 8011b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b96:	4770      	bx	lr

08011b98 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 8011b98:	b480      	push	{r7}
 8011b9a:	b083      	sub	sp, #12
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	6078      	str	r0, [r7, #4]
 8011ba0:	460b      	mov	r3, r1
 8011ba2:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 8011ba4:	78fb      	ldrb	r3, [r7, #3]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d106      	bne.n	8011bb8 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011bae:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	641a      	str	r2, [r3, #64]	@ 0x40
 8011bb6:	e00b      	b.n	8011bd0 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 8011bb8:	78fb      	ldrb	r3, [r7, #3]
 8011bba:	2b01      	cmp	r3, #1
 8011bbc:	d106      	bne.n	8011bcc <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011bc2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	641a      	str	r2, [r3, #64]	@ 0x40
 8011bca:	e001      	b.n	8011bd0 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 8011bcc:	2301      	movs	r3, #1
 8011bce:	e000      	b.n	8011bd2 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 8011bd0:	2300      	movs	r3, #0
}
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	370c      	adds	r7, #12
 8011bd6:	46bd      	mov	sp, r7
 8011bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bdc:	4770      	bx	lr

08011bde <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8011bde:	b084      	sub	sp, #16
 8011be0:	b580      	push	{r7, lr}
 8011be2:	b084      	sub	sp, #16
 8011be4:	af00      	add	r7, sp, #0
 8011be6:	6078      	str	r0, [r7, #4]
 8011be8:	f107 001c 	add.w	r0, r7, #28
 8011bec:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	2201      	movs	r2, #1
 8011bf4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011bfa:	f023 0201 	bic.w	r2, r3, #1
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 8011c02:	2100      	movs	r1, #0
 8011c04:	6878      	ldr	r0, [r7, #4]
 8011c06:	f7ff ffc7 	bl	8011b98 <USB_SetCurrentMode>
 8011c0a:	4603      	mov	r3, r0
 8011c0c:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	2200      	movs	r2, #0
 8011c12:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 8011c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c16:	4618      	mov	r0, r3
 8011c18:	3710      	adds	r7, #16
 8011c1a:	46bd      	mov	sp, r7
 8011c1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011c20:	b004      	add	sp, #16
 8011c22:	4770      	bx	lr

08011c24 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8011c24:	b480      	push	{r7}
 8011c26:	b09f      	sub	sp, #124	@ 0x7c
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
 8011c2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8011c2e:	2300      	movs	r3, #0
 8011c30:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8011c34:	687a      	ldr	r2, [r7, #4]
 8011c36:	683b      	ldr	r3, [r7, #0]
 8011c38:	781b      	ldrb	r3, [r3, #0]
 8011c3a:	009b      	lsls	r3, r3, #2
 8011c3c:	4413      	add	r3, r2
 8011c3e:	681a      	ldr	r2, [r3, #0]
 8011c40:	4ba0      	ldr	r3, [pc, #640]	@ (8011ec4 <USB_ActivateEndpoint+0x2a0>)
 8011c42:	4013      	ands	r3, r2
 8011c44:	673b      	str	r3, [r7, #112]	@ 0x70

  /* initialize Endpoint */
  switch (ep->type)
 8011c46:	683b      	ldr	r3, [r7, #0]
 8011c48:	78db      	ldrb	r3, [r3, #3]
 8011c4a:	2b03      	cmp	r3, #3
 8011c4c:	d819      	bhi.n	8011c82 <USB_ActivateEndpoint+0x5e>
 8011c4e:	a201      	add	r2, pc, #4	@ (adr r2, 8011c54 <USB_ActivateEndpoint+0x30>)
 8011c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c54:	08011c65 	.word	0x08011c65
 8011c58:	08011c79 	.word	0x08011c79
 8011c5c:	08011c8b 	.word	0x08011c8b
 8011c60:	08011c6f 	.word	0x08011c6f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8011c64:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011c66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8011c6a:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 8011c6c:	e00e      	b.n	8011c8c <USB_ActivateEndpoint+0x68>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8011c6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011c70:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8011c74:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 8011c76:	e009      	b.n	8011c8c <USB_ActivateEndpoint+0x68>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8011c78:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011c7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8011c7e:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 8011c80:	e004      	b.n	8011c8c <USB_ActivateEndpoint+0x68>

    default:
      ret = HAL_ERROR;
 8011c82:	2301      	movs	r3, #1
 8011c84:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      break;
 8011c88:	e000      	b.n	8011c8c <USB_ActivateEndpoint+0x68>
      break;
 8011c8a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 8011c8c:	687a      	ldr	r2, [r7, #4]
 8011c8e:	683b      	ldr	r3, [r7, #0]
 8011c90:	781b      	ldrb	r3, [r3, #0]
 8011c92:	009b      	lsls	r3, r3, #2
 8011c94:	441a      	add	r2, r3
 8011c96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011c98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011c9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011ca0:	6013      	str	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8011ca2:	687a      	ldr	r2, [r7, #4]
 8011ca4:	683b      	ldr	r3, [r7, #0]
 8011ca6:	781b      	ldrb	r3, [r3, #0]
 8011ca8:	009b      	lsls	r3, r3, #2
 8011caa:	4413      	add	r3, r2
 8011cac:	681a      	ldr	r2, [r3, #0]
 8011cae:	4b86      	ldr	r3, [pc, #536]	@ (8011ec8 <USB_ActivateEndpoint+0x2a4>)
 8011cb0:	4013      	ands	r3, r2
 8011cb2:	683a      	ldr	r2, [r7, #0]
 8011cb4:	7812      	ldrb	r2, [r2, #0]
 8011cb6:	4313      	orrs	r3, r2
 8011cb8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011cba:	687a      	ldr	r2, [r7, #4]
 8011cbc:	683b      	ldr	r3, [r7, #0]
 8011cbe:	781b      	ldrb	r3, [r3, #0]
 8011cc0:	009b      	lsls	r3, r3, #2
 8011cc2:	441a      	add	r2, r3
 8011cc4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011cc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011cca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011cce:	6013      	str	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8011cd0:	683b      	ldr	r3, [r7, #0]
 8011cd2:	7b1b      	ldrb	r3, [r3, #12]
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	f040 8177 	bne.w	8011fc8 <USB_ActivateEndpoint+0x3a4>
  {
    if (ep->is_in != 0U)
 8011cda:	683b      	ldr	r3, [r7, #0]
 8011cdc:	785b      	ldrb	r3, [r3, #1]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d079      	beq.n	8011dd6 <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8011ce2:	683b      	ldr	r3, [r7, #0]
 8011ce4:	781b      	ldrb	r3, [r3, #0]
 8011ce6:	00db      	lsls	r3, r3, #3
 8011ce8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011cec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8011cf0:	681a      	ldr	r2, [r3, #0]
 8011cf2:	683b      	ldr	r3, [r7, #0]
 8011cf4:	781b      	ldrb	r3, [r3, #0]
 8011cf6:	00db      	lsls	r3, r3, #3
 8011cf8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011cfc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8011d00:	0c12      	lsrs	r2, r2, #16
 8011d02:	0412      	lsls	r2, r2, #16
 8011d04:	601a      	str	r2, [r3, #0]
 8011d06:	683b      	ldr	r3, [r7, #0]
 8011d08:	781b      	ldrb	r3, [r3, #0]
 8011d0a:	00db      	lsls	r3, r3, #3
 8011d0c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011d10:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8011d14:	6819      	ldr	r1, [r3, #0]
 8011d16:	683b      	ldr	r3, [r7, #0]
 8011d18:	88db      	ldrh	r3, [r3, #6]
 8011d1a:	089b      	lsrs	r3, r3, #2
 8011d1c:	b29b      	uxth	r3, r3
 8011d1e:	009a      	lsls	r2, r3, #2
 8011d20:	683b      	ldr	r3, [r7, #0]
 8011d22:	781b      	ldrb	r3, [r3, #0]
 8011d24:	00db      	lsls	r3, r3, #3
 8011d26:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011d2a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8011d2e:	430a      	orrs	r2, r1
 8011d30:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011d32:	687a      	ldr	r2, [r7, #4]
 8011d34:	683b      	ldr	r3, [r7, #0]
 8011d36:	781b      	ldrb	r3, [r3, #0]
 8011d38:	009b      	lsls	r3, r3, #2
 8011d3a:	4413      	add	r3, r2
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	61bb      	str	r3, [r7, #24]
 8011d40:	69bb      	ldr	r3, [r7, #24]
 8011d42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d013      	beq.n	8011d72 <USB_ActivateEndpoint+0x14e>
 8011d4a:	687a      	ldr	r2, [r7, #4]
 8011d4c:	683b      	ldr	r3, [r7, #0]
 8011d4e:	781b      	ldrb	r3, [r3, #0]
 8011d50:	009b      	lsls	r3, r3, #2
 8011d52:	4413      	add	r3, r2
 8011d54:	681a      	ldr	r2, [r3, #0]
 8011d56:	4b5c      	ldr	r3, [pc, #368]	@ (8011ec8 <USB_ActivateEndpoint+0x2a4>)
 8011d58:	4013      	ands	r3, r2
 8011d5a:	617b      	str	r3, [r7, #20]
 8011d5c:	687a      	ldr	r2, [r7, #4]
 8011d5e:	683b      	ldr	r3, [r7, #0]
 8011d60:	781b      	ldrb	r3, [r3, #0]
 8011d62:	009b      	lsls	r3, r3, #2
 8011d64:	441a      	add	r2, r3
 8011d66:	697b      	ldr	r3, [r7, #20]
 8011d68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011d6c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011d70:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011d72:	683b      	ldr	r3, [r7, #0]
 8011d74:	78db      	ldrb	r3, [r3, #3]
 8011d76:	2b01      	cmp	r3, #1
 8011d78:	d018      	beq.n	8011dac <USB_ActivateEndpoint+0x188>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011d7a:	687a      	ldr	r2, [r7, #4]
 8011d7c:	683b      	ldr	r3, [r7, #0]
 8011d7e:	781b      	ldrb	r3, [r3, #0]
 8011d80:	009b      	lsls	r3, r3, #2
 8011d82:	4413      	add	r3, r2
 8011d84:	681a      	ldr	r2, [r3, #0]
 8011d86:	4b51      	ldr	r3, [pc, #324]	@ (8011ecc <USB_ActivateEndpoint+0x2a8>)
 8011d88:	4013      	ands	r3, r2
 8011d8a:	60fb      	str	r3, [r7, #12]
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	f083 0320 	eor.w	r3, r3, #32
 8011d92:	60fb      	str	r3, [r7, #12]
 8011d94:	687a      	ldr	r2, [r7, #4]
 8011d96:	683b      	ldr	r3, [r7, #0]
 8011d98:	781b      	ldrb	r3, [r3, #0]
 8011d9a:	009b      	lsls	r3, r3, #2
 8011d9c:	441a      	add	r2, r3
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011da4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011da8:	6013      	str	r3, [r2, #0]
 8011daa:	e28c      	b.n	80122c6 <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011dac:	687a      	ldr	r2, [r7, #4]
 8011dae:	683b      	ldr	r3, [r7, #0]
 8011db0:	781b      	ldrb	r3, [r3, #0]
 8011db2:	009b      	lsls	r3, r3, #2
 8011db4:	4413      	add	r3, r2
 8011db6:	681a      	ldr	r2, [r3, #0]
 8011db8:	4b44      	ldr	r3, [pc, #272]	@ (8011ecc <USB_ActivateEndpoint+0x2a8>)
 8011dba:	4013      	ands	r3, r2
 8011dbc:	613b      	str	r3, [r7, #16]
 8011dbe:	687a      	ldr	r2, [r7, #4]
 8011dc0:	683b      	ldr	r3, [r7, #0]
 8011dc2:	781b      	ldrb	r3, [r3, #0]
 8011dc4:	009b      	lsls	r3, r3, #2
 8011dc6:	441a      	add	r2, r3
 8011dc8:	693b      	ldr	r3, [r7, #16]
 8011dca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011dce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011dd2:	6013      	str	r3, [r2, #0]
 8011dd4:	e277      	b.n	80122c6 <USB_ActivateEndpoint+0x6a2>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8011dd6:	683b      	ldr	r3, [r7, #0]
 8011dd8:	781b      	ldrb	r3, [r3, #0]
 8011dda:	00db      	lsls	r3, r3, #3
 8011ddc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011de0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8011de4:	685a      	ldr	r2, [r3, #4]
 8011de6:	683b      	ldr	r3, [r7, #0]
 8011de8:	781b      	ldrb	r3, [r3, #0]
 8011dea:	00db      	lsls	r3, r3, #3
 8011dec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011df0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8011df4:	0c12      	lsrs	r2, r2, #16
 8011df6:	0412      	lsls	r2, r2, #16
 8011df8:	605a      	str	r2, [r3, #4]
 8011dfa:	683b      	ldr	r3, [r7, #0]
 8011dfc:	781b      	ldrb	r3, [r3, #0]
 8011dfe:	00db      	lsls	r3, r3, #3
 8011e00:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011e04:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8011e08:	6859      	ldr	r1, [r3, #4]
 8011e0a:	683b      	ldr	r3, [r7, #0]
 8011e0c:	88db      	ldrh	r3, [r3, #6]
 8011e0e:	089b      	lsrs	r3, r3, #2
 8011e10:	b29b      	uxth	r3, r3
 8011e12:	009a      	lsls	r2, r3, #2
 8011e14:	683b      	ldr	r3, [r7, #0]
 8011e16:	781b      	ldrb	r3, [r3, #0]
 8011e18:	00db      	lsls	r3, r3, #3
 8011e1a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011e1e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8011e22:	430a      	orrs	r2, r1
 8011e24:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8011e26:	683b      	ldr	r3, [r7, #0]
 8011e28:	781b      	ldrb	r3, [r3, #0]
 8011e2a:	00db      	lsls	r3, r3, #3
 8011e2c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011e30:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8011e34:	685a      	ldr	r2, [r3, #4]
 8011e36:	683b      	ldr	r3, [r7, #0]
 8011e38:	781b      	ldrb	r3, [r3, #0]
 8011e3a:	00db      	lsls	r3, r3, #3
 8011e3c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011e40:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8011e44:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8011e48:	605a      	str	r2, [r3, #4]
 8011e4a:	683b      	ldr	r3, [r7, #0]
 8011e4c:	691b      	ldr	r3, [r3, #16]
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d112      	bne.n	8011e78 <USB_ActivateEndpoint+0x254>
 8011e52:	683b      	ldr	r3, [r7, #0]
 8011e54:	781b      	ldrb	r3, [r3, #0]
 8011e56:	00db      	lsls	r3, r3, #3
 8011e58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011e5c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8011e60:	685a      	ldr	r2, [r3, #4]
 8011e62:	683b      	ldr	r3, [r7, #0]
 8011e64:	781b      	ldrb	r3, [r3, #0]
 8011e66:	00db      	lsls	r3, r3, #3
 8011e68:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011e6c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8011e70:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8011e74:	605a      	str	r2, [r3, #4]
 8011e76:	e04d      	b.n	8011f14 <USB_ActivateEndpoint+0x2f0>
 8011e78:	683b      	ldr	r3, [r7, #0]
 8011e7a:	691b      	ldr	r3, [r3, #16]
 8011e7c:	2b3e      	cmp	r3, #62	@ 0x3e
 8011e7e:	d827      	bhi.n	8011ed0 <USB_ActivateEndpoint+0x2ac>
 8011e80:	683b      	ldr	r3, [r7, #0]
 8011e82:	691b      	ldr	r3, [r3, #16]
 8011e84:	085b      	lsrs	r3, r3, #1
 8011e86:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8011e88:	683b      	ldr	r3, [r7, #0]
 8011e8a:	691b      	ldr	r3, [r3, #16]
 8011e8c:	f003 0301 	and.w	r3, r3, #1
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d002      	beq.n	8011e9a <USB_ActivateEndpoint+0x276>
 8011e94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011e96:	3301      	adds	r3, #1
 8011e98:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8011e9a:	683b      	ldr	r3, [r7, #0]
 8011e9c:	781b      	ldrb	r3, [r3, #0]
 8011e9e:	00db      	lsls	r3, r3, #3
 8011ea0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011ea4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8011ea8:	6859      	ldr	r1, [r3, #4]
 8011eaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011eac:	069a      	lsls	r2, r3, #26
 8011eae:	683b      	ldr	r3, [r7, #0]
 8011eb0:	781b      	ldrb	r3, [r3, #0]
 8011eb2:	00db      	lsls	r3, r3, #3
 8011eb4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011eb8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8011ebc:	430a      	orrs	r2, r1
 8011ebe:	605a      	str	r2, [r3, #4]
 8011ec0:	e028      	b.n	8011f14 <USB_ActivateEndpoint+0x2f0>
 8011ec2:	bf00      	nop
 8011ec4:	07ff898f 	.word	0x07ff898f
 8011ec8:	07ff8f8f 	.word	0x07ff8f8f
 8011ecc:	07ff8fbf 	.word	0x07ff8fbf
 8011ed0:	683b      	ldr	r3, [r7, #0]
 8011ed2:	691b      	ldr	r3, [r3, #16]
 8011ed4:	095b      	lsrs	r3, r3, #5
 8011ed6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8011ed8:	683b      	ldr	r3, [r7, #0]
 8011eda:	691b      	ldr	r3, [r3, #16]
 8011edc:	f003 031f 	and.w	r3, r3, #31
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d102      	bne.n	8011eea <USB_ActivateEndpoint+0x2c6>
 8011ee4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011ee6:	3b01      	subs	r3, #1
 8011ee8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8011eea:	683b      	ldr	r3, [r7, #0]
 8011eec:	781b      	ldrb	r3, [r3, #0]
 8011eee:	00db      	lsls	r3, r3, #3
 8011ef0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011ef4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8011ef8:	685a      	ldr	r2, [r3, #4]
 8011efa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011efc:	069b      	lsls	r3, r3, #26
 8011efe:	431a      	orrs	r2, r3
 8011f00:	683b      	ldr	r3, [r7, #0]
 8011f02:	781b      	ldrb	r3, [r3, #0]
 8011f04:	00db      	lsls	r3, r3, #3
 8011f06:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011f0a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8011f0e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8011f12:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011f14:	687a      	ldr	r2, [r7, #4]
 8011f16:	683b      	ldr	r3, [r7, #0]
 8011f18:	781b      	ldrb	r3, [r3, #0]
 8011f1a:	009b      	lsls	r3, r3, #2
 8011f1c:	4413      	add	r3, r2
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d013      	beq.n	8011f54 <USB_ActivateEndpoint+0x330>
 8011f2c:	687a      	ldr	r2, [r7, #4]
 8011f2e:	683b      	ldr	r3, [r7, #0]
 8011f30:	781b      	ldrb	r3, [r3, #0]
 8011f32:	009b      	lsls	r3, r3, #2
 8011f34:	4413      	add	r3, r2
 8011f36:	681a      	ldr	r2, [r3, #0]
 8011f38:	4b9c      	ldr	r3, [pc, #624]	@ (80121ac <USB_ActivateEndpoint+0x588>)
 8011f3a:	4013      	ands	r3, r2
 8011f3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8011f3e:	687a      	ldr	r2, [r7, #4]
 8011f40:	683b      	ldr	r3, [r7, #0]
 8011f42:	781b      	ldrb	r3, [r3, #0]
 8011f44:	009b      	lsls	r3, r3, #2
 8011f46:	441a      	add	r2, r3
 8011f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f4a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011f4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011f52:	6013      	str	r3, [r2, #0]

      if (ep->num == 0U)
 8011f54:	683b      	ldr	r3, [r7, #0]
 8011f56:	781b      	ldrb	r3, [r3, #0]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d11c      	bne.n	8011f96 <USB_ActivateEndpoint+0x372>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011f5c:	687a      	ldr	r2, [r7, #4]
 8011f5e:	683b      	ldr	r3, [r7, #0]
 8011f60:	781b      	ldrb	r3, [r3, #0]
 8011f62:	009b      	lsls	r3, r3, #2
 8011f64:	4413      	add	r3, r2
 8011f66:	681a      	ldr	r2, [r3, #0]
 8011f68:	4b91      	ldr	r3, [pc, #580]	@ (80121b0 <USB_ActivateEndpoint+0x58c>)
 8011f6a:	4013      	ands	r3, r2
 8011f6c:	61fb      	str	r3, [r7, #28]
 8011f6e:	69fb      	ldr	r3, [r7, #28]
 8011f70:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8011f74:	61fb      	str	r3, [r7, #28]
 8011f76:	69fb      	ldr	r3, [r7, #28]
 8011f78:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8011f7c:	61fb      	str	r3, [r7, #28]
 8011f7e:	687a      	ldr	r2, [r7, #4]
 8011f80:	683b      	ldr	r3, [r7, #0]
 8011f82:	781b      	ldrb	r3, [r3, #0]
 8011f84:	009b      	lsls	r3, r3, #2
 8011f86:	441a      	add	r2, r3
 8011f88:	69fb      	ldr	r3, [r7, #28]
 8011f8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011f8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011f92:	6013      	str	r3, [r2, #0]
 8011f94:	e197      	b.n	80122c6 <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8011f96:	687a      	ldr	r2, [r7, #4]
 8011f98:	683b      	ldr	r3, [r7, #0]
 8011f9a:	781b      	ldrb	r3, [r3, #0]
 8011f9c:	009b      	lsls	r3, r3, #2
 8011f9e:	4413      	add	r3, r2
 8011fa0:	681a      	ldr	r2, [r3, #0]
 8011fa2:	4b83      	ldr	r3, [pc, #524]	@ (80121b0 <USB_ActivateEndpoint+0x58c>)
 8011fa4:	4013      	ands	r3, r2
 8011fa6:	623b      	str	r3, [r7, #32]
 8011fa8:	6a3b      	ldr	r3, [r7, #32]
 8011faa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8011fae:	623b      	str	r3, [r7, #32]
 8011fb0:	687a      	ldr	r2, [r7, #4]
 8011fb2:	683b      	ldr	r3, [r7, #0]
 8011fb4:	781b      	ldrb	r3, [r3, #0]
 8011fb6:	009b      	lsls	r3, r3, #2
 8011fb8:	441a      	add	r2, r3
 8011fba:	6a3b      	ldr	r3, [r7, #32]
 8011fbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011fc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011fc4:	6013      	str	r3, [r2, #0]
 8011fc6:	e17e      	b.n	80122c6 <USB_ActivateEndpoint+0x6a2>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8011fc8:	683b      	ldr	r3, [r7, #0]
 8011fca:	78db      	ldrb	r3, [r3, #3]
 8011fcc:	2b02      	cmp	r3, #2
 8011fce:	d114      	bne.n	8011ffa <USB_ActivateEndpoint+0x3d6>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8011fd0:	687a      	ldr	r2, [r7, #4]
 8011fd2:	683b      	ldr	r3, [r7, #0]
 8011fd4:	781b      	ldrb	r3, [r3, #0]
 8011fd6:	009b      	lsls	r3, r3, #2
 8011fd8:	4413      	add	r3, r2
 8011fda:	681a      	ldr	r2, [r3, #0]
 8011fdc:	4b73      	ldr	r3, [pc, #460]	@ (80121ac <USB_ActivateEndpoint+0x588>)
 8011fde:	4013      	ands	r3, r2
 8011fe0:	663b      	str	r3, [r7, #96]	@ 0x60
 8011fe2:	687a      	ldr	r2, [r7, #4]
 8011fe4:	683b      	ldr	r3, [r7, #0]
 8011fe6:	781b      	ldrb	r3, [r3, #0]
 8011fe8:	009b      	lsls	r3, r3, #2
 8011fea:	441a      	add	r2, r3
 8011fec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011fee:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8011ff2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011ff6:	6013      	str	r3, [r2, #0]
 8011ff8:	e013      	b.n	8012022 <USB_ActivateEndpoint+0x3fe>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8011ffa:	687a      	ldr	r2, [r7, #4]
 8011ffc:	683b      	ldr	r3, [r7, #0]
 8011ffe:	781b      	ldrb	r3, [r3, #0]
 8012000:	009b      	lsls	r3, r3, #2
 8012002:	4413      	add	r3, r2
 8012004:	681a      	ldr	r2, [r3, #0]
 8012006:	4b6b      	ldr	r3, [pc, #428]	@ (80121b4 <USB_ActivateEndpoint+0x590>)
 8012008:	4013      	ands	r3, r2
 801200a:	667b      	str	r3, [r7, #100]	@ 0x64
 801200c:	687a      	ldr	r2, [r7, #4]
 801200e:	683b      	ldr	r3, [r7, #0]
 8012010:	781b      	ldrb	r3, [r3, #0]
 8012012:	009b      	lsls	r3, r3, #2
 8012014:	441a      	add	r2, r3
 8012016:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012018:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801201c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012020:	6013      	str	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8012022:	683b      	ldr	r3, [r7, #0]
 8012024:	781b      	ldrb	r3, [r3, #0]
 8012026:	00db      	lsls	r3, r3, #3
 8012028:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801202c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012030:	681a      	ldr	r2, [r3, #0]
 8012032:	683b      	ldr	r3, [r7, #0]
 8012034:	781b      	ldrb	r3, [r3, #0]
 8012036:	00db      	lsls	r3, r3, #3
 8012038:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801203c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012040:	0c12      	lsrs	r2, r2, #16
 8012042:	0412      	lsls	r2, r2, #16
 8012044:	601a      	str	r2, [r3, #0]
 8012046:	683b      	ldr	r3, [r7, #0]
 8012048:	781b      	ldrb	r3, [r3, #0]
 801204a:	00db      	lsls	r3, r3, #3
 801204c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012050:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012054:	6819      	ldr	r1, [r3, #0]
 8012056:	683b      	ldr	r3, [r7, #0]
 8012058:	891b      	ldrh	r3, [r3, #8]
 801205a:	089b      	lsrs	r3, r3, #2
 801205c:	b29b      	uxth	r3, r3
 801205e:	009a      	lsls	r2, r3, #2
 8012060:	683b      	ldr	r3, [r7, #0]
 8012062:	781b      	ldrb	r3, [r3, #0]
 8012064:	00db      	lsls	r3, r3, #3
 8012066:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801206a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801206e:	430a      	orrs	r2, r1
 8012070:	601a      	str	r2, [r3, #0]
 8012072:	683b      	ldr	r3, [r7, #0]
 8012074:	781b      	ldrb	r3, [r3, #0]
 8012076:	00db      	lsls	r3, r3, #3
 8012078:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801207c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012080:	685a      	ldr	r2, [r3, #4]
 8012082:	683b      	ldr	r3, [r7, #0]
 8012084:	781b      	ldrb	r3, [r3, #0]
 8012086:	00db      	lsls	r3, r3, #3
 8012088:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801208c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012090:	0c12      	lsrs	r2, r2, #16
 8012092:	0412      	lsls	r2, r2, #16
 8012094:	605a      	str	r2, [r3, #4]
 8012096:	683b      	ldr	r3, [r7, #0]
 8012098:	781b      	ldrb	r3, [r3, #0]
 801209a:	00db      	lsls	r3, r3, #3
 801209c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80120a0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80120a4:	6859      	ldr	r1, [r3, #4]
 80120a6:	683b      	ldr	r3, [r7, #0]
 80120a8:	895b      	ldrh	r3, [r3, #10]
 80120aa:	089b      	lsrs	r3, r3, #2
 80120ac:	b29b      	uxth	r3, r3
 80120ae:	009a      	lsls	r2, r3, #2
 80120b0:	683b      	ldr	r3, [r7, #0]
 80120b2:	781b      	ldrb	r3, [r3, #0]
 80120b4:	00db      	lsls	r3, r3, #3
 80120b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80120ba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80120be:	430a      	orrs	r2, r1
 80120c0:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 80120c2:	683b      	ldr	r3, [r7, #0]
 80120c4:	785b      	ldrb	r3, [r3, #1]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d178      	bne.n	80121bc <USB_ActivateEndpoint+0x598>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80120ca:	687a      	ldr	r2, [r7, #4]
 80120cc:	683b      	ldr	r3, [r7, #0]
 80120ce:	781b      	ldrb	r3, [r3, #0]
 80120d0:	009b      	lsls	r3, r3, #2
 80120d2:	4413      	add	r3, r2
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80120d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80120da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d013      	beq.n	801210a <USB_ActivateEndpoint+0x4e6>
 80120e2:	687a      	ldr	r2, [r7, #4]
 80120e4:	683b      	ldr	r3, [r7, #0]
 80120e6:	781b      	ldrb	r3, [r3, #0]
 80120e8:	009b      	lsls	r3, r3, #2
 80120ea:	4413      	add	r3, r2
 80120ec:	681a      	ldr	r2, [r3, #0]
 80120ee:	4b2f      	ldr	r3, [pc, #188]	@ (80121ac <USB_ActivateEndpoint+0x588>)
 80120f0:	4013      	ands	r3, r2
 80120f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80120f4:	687a      	ldr	r2, [r7, #4]
 80120f6:	683b      	ldr	r3, [r7, #0]
 80120f8:	781b      	ldrb	r3, [r3, #0]
 80120fa:	009b      	lsls	r3, r3, #2
 80120fc:	441a      	add	r2, r3
 80120fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012100:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8012104:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012108:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801210a:	687a      	ldr	r2, [r7, #4]
 801210c:	683b      	ldr	r3, [r7, #0]
 801210e:	781b      	ldrb	r3, [r3, #0]
 8012110:	009b      	lsls	r3, r3, #2
 8012112:	4413      	add	r3, r2
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801211a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801211e:	2b00      	cmp	r3, #0
 8012120:	d013      	beq.n	801214a <USB_ActivateEndpoint+0x526>
 8012122:	687a      	ldr	r2, [r7, #4]
 8012124:	683b      	ldr	r3, [r7, #0]
 8012126:	781b      	ldrb	r3, [r3, #0]
 8012128:	009b      	lsls	r3, r3, #2
 801212a:	4413      	add	r3, r2
 801212c:	681a      	ldr	r2, [r3, #0]
 801212e:	4b1f      	ldr	r3, [pc, #124]	@ (80121ac <USB_ActivateEndpoint+0x588>)
 8012130:	4013      	ands	r3, r2
 8012132:	637b      	str	r3, [r7, #52]	@ 0x34
 8012134:	687a      	ldr	r2, [r7, #4]
 8012136:	683b      	ldr	r3, [r7, #0]
 8012138:	781b      	ldrb	r3, [r3, #0]
 801213a:	009b      	lsls	r3, r3, #2
 801213c:	441a      	add	r2, r3
 801213e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012140:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012144:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8012148:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801214a:	687a      	ldr	r2, [r7, #4]
 801214c:	683b      	ldr	r3, [r7, #0]
 801214e:	781b      	ldrb	r3, [r3, #0]
 8012150:	009b      	lsls	r3, r3, #2
 8012152:	4413      	add	r3, r2
 8012154:	681a      	ldr	r2, [r3, #0]
 8012156:	4b16      	ldr	r3, [pc, #88]	@ (80121b0 <USB_ActivateEndpoint+0x58c>)
 8012158:	4013      	ands	r3, r2
 801215a:	633b      	str	r3, [r7, #48]	@ 0x30
 801215c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801215e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8012162:	633b      	str	r3, [r7, #48]	@ 0x30
 8012164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012166:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 801216a:	633b      	str	r3, [r7, #48]	@ 0x30
 801216c:	687a      	ldr	r2, [r7, #4]
 801216e:	683b      	ldr	r3, [r7, #0]
 8012170:	781b      	ldrb	r3, [r3, #0]
 8012172:	009b      	lsls	r3, r3, #2
 8012174:	441a      	add	r2, r3
 8012176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012178:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801217c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012180:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8012182:	687a      	ldr	r2, [r7, #4]
 8012184:	683b      	ldr	r3, [r7, #0]
 8012186:	781b      	ldrb	r3, [r3, #0]
 8012188:	009b      	lsls	r3, r3, #2
 801218a:	4413      	add	r3, r2
 801218c:	681a      	ldr	r2, [r3, #0]
 801218e:	4b0a      	ldr	r3, [pc, #40]	@ (80121b8 <USB_ActivateEndpoint+0x594>)
 8012190:	4013      	ands	r3, r2
 8012192:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012194:	687a      	ldr	r2, [r7, #4]
 8012196:	683b      	ldr	r3, [r7, #0]
 8012198:	781b      	ldrb	r3, [r3, #0]
 801219a:	009b      	lsls	r3, r3, #2
 801219c:	441a      	add	r2, r3
 801219e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80121a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80121a8:	6013      	str	r3, [r2, #0]
 80121aa:	e08c      	b.n	80122c6 <USB_ActivateEndpoint+0x6a2>
 80121ac:	07ff8f8f 	.word	0x07ff8f8f
 80121b0:	07ffbf8f 	.word	0x07ffbf8f
 80121b4:	07ff8e8f 	.word	0x07ff8e8f
 80121b8:	07ff8fbf 	.word	0x07ff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80121bc:	687a      	ldr	r2, [r7, #4]
 80121be:	683b      	ldr	r3, [r7, #0]
 80121c0:	781b      	ldrb	r3, [r3, #0]
 80121c2:	009b      	lsls	r3, r3, #2
 80121c4:	4413      	add	r3, r2
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80121ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80121cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d013      	beq.n	80121fc <USB_ActivateEndpoint+0x5d8>
 80121d4:	687a      	ldr	r2, [r7, #4]
 80121d6:	683b      	ldr	r3, [r7, #0]
 80121d8:	781b      	ldrb	r3, [r3, #0]
 80121da:	009b      	lsls	r3, r3, #2
 80121dc:	4413      	add	r3, r2
 80121de:	681a      	ldr	r2, [r3, #0]
 80121e0:	4b3d      	ldr	r3, [pc, #244]	@ (80122d8 <USB_ActivateEndpoint+0x6b4>)
 80121e2:	4013      	ands	r3, r2
 80121e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80121e6:	687a      	ldr	r2, [r7, #4]
 80121e8:	683b      	ldr	r3, [r7, #0]
 80121ea:	781b      	ldrb	r3, [r3, #0]
 80121ec:	009b      	lsls	r3, r3, #2
 80121ee:	441a      	add	r2, r3
 80121f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80121f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80121f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80121fa:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80121fc:	687a      	ldr	r2, [r7, #4]
 80121fe:	683b      	ldr	r3, [r7, #0]
 8012200:	781b      	ldrb	r3, [r3, #0]
 8012202:	009b      	lsls	r3, r3, #2
 8012204:	4413      	add	r3, r2
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	657b      	str	r3, [r7, #84]	@ 0x54
 801220a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801220c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012210:	2b00      	cmp	r3, #0
 8012212:	d013      	beq.n	801223c <USB_ActivateEndpoint+0x618>
 8012214:	687a      	ldr	r2, [r7, #4]
 8012216:	683b      	ldr	r3, [r7, #0]
 8012218:	781b      	ldrb	r3, [r3, #0]
 801221a:	009b      	lsls	r3, r3, #2
 801221c:	4413      	add	r3, r2
 801221e:	681a      	ldr	r2, [r3, #0]
 8012220:	4b2d      	ldr	r3, [pc, #180]	@ (80122d8 <USB_ActivateEndpoint+0x6b4>)
 8012222:	4013      	ands	r3, r2
 8012224:	653b      	str	r3, [r7, #80]	@ 0x50
 8012226:	687a      	ldr	r2, [r7, #4]
 8012228:	683b      	ldr	r3, [r7, #0]
 801222a:	781b      	ldrb	r3, [r3, #0]
 801222c:	009b      	lsls	r3, r3, #2
 801222e:	441a      	add	r2, r3
 8012230:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012232:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012236:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 801223a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801223c:	683b      	ldr	r3, [r7, #0]
 801223e:	78db      	ldrb	r3, [r3, #3]
 8012240:	2b01      	cmp	r3, #1
 8012242:	d018      	beq.n	8012276 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8012244:	687a      	ldr	r2, [r7, #4]
 8012246:	683b      	ldr	r3, [r7, #0]
 8012248:	781b      	ldrb	r3, [r3, #0]
 801224a:	009b      	lsls	r3, r3, #2
 801224c:	4413      	add	r3, r2
 801224e:	681a      	ldr	r2, [r3, #0]
 8012250:	4b22      	ldr	r3, [pc, #136]	@ (80122dc <USB_ActivateEndpoint+0x6b8>)
 8012252:	4013      	ands	r3, r2
 8012254:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012256:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012258:	f083 0320 	eor.w	r3, r3, #32
 801225c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801225e:	687a      	ldr	r2, [r7, #4]
 8012260:	683b      	ldr	r3, [r7, #0]
 8012262:	781b      	ldrb	r3, [r3, #0]
 8012264:	009b      	lsls	r3, r3, #2
 8012266:	441a      	add	r2, r3
 8012268:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801226a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801226e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012272:	6013      	str	r3, [r2, #0]
 8012274:	e013      	b.n	801229e <USB_ActivateEndpoint+0x67a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8012276:	687a      	ldr	r2, [r7, #4]
 8012278:	683b      	ldr	r3, [r7, #0]
 801227a:	781b      	ldrb	r3, [r3, #0]
 801227c:	009b      	lsls	r3, r3, #2
 801227e:	4413      	add	r3, r2
 8012280:	681a      	ldr	r2, [r3, #0]
 8012282:	4b16      	ldr	r3, [pc, #88]	@ (80122dc <USB_ActivateEndpoint+0x6b8>)
 8012284:	4013      	ands	r3, r2
 8012286:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012288:	687a      	ldr	r2, [r7, #4]
 801228a:	683b      	ldr	r3, [r7, #0]
 801228c:	781b      	ldrb	r3, [r3, #0]
 801228e:	009b      	lsls	r3, r3, #2
 8012290:	441a      	add	r2, r3
 8012292:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012294:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012298:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801229c:	6013      	str	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801229e:	687a      	ldr	r2, [r7, #4]
 80122a0:	683b      	ldr	r3, [r7, #0]
 80122a2:	781b      	ldrb	r3, [r3, #0]
 80122a4:	009b      	lsls	r3, r3, #2
 80122a6:	4413      	add	r3, r2
 80122a8:	681a      	ldr	r2, [r3, #0]
 80122aa:	4b0d      	ldr	r3, [pc, #52]	@ (80122e0 <USB_ActivateEndpoint+0x6bc>)
 80122ac:	4013      	ands	r3, r2
 80122ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80122b0:	687a      	ldr	r2, [r7, #4]
 80122b2:	683b      	ldr	r3, [r7, #0]
 80122b4:	781b      	ldrb	r3, [r3, #0]
 80122b6:	009b      	lsls	r3, r3, #2
 80122b8:	441a      	add	r2, r3
 80122ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80122bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80122c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80122c4:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80122c6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80122ca:	4618      	mov	r0, r3
 80122cc:	377c      	adds	r7, #124	@ 0x7c
 80122ce:	46bd      	mov	sp, r7
 80122d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122d4:	4770      	bx	lr
 80122d6:	bf00      	nop
 80122d8:	07ff8f8f 	.word	0x07ff8f8f
 80122dc:	07ff8fbf 	.word	0x07ff8fbf
 80122e0:	07ffbf8f 	.word	0x07ffbf8f

080122e4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 80122e4:	b480      	push	{r7}
 80122e6:	b097      	sub	sp, #92	@ 0x5c
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	6078      	str	r0, [r7, #4]
 80122ec:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80122ee:	683b      	ldr	r3, [r7, #0]
 80122f0:	7b1b      	ldrb	r3, [r3, #12]
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d16d      	bne.n	80123d2 <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in != 0U)
 80122f6:	683b      	ldr	r3, [r7, #0]
 80122f8:	785b      	ldrb	r3, [r3, #1]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d034      	beq.n	8012368 <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80122fe:	687a      	ldr	r2, [r7, #4]
 8012300:	683b      	ldr	r3, [r7, #0]
 8012302:	781b      	ldrb	r3, [r3, #0]
 8012304:	009b      	lsls	r3, r3, #2
 8012306:	4413      	add	r3, r2
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	613b      	str	r3, [r7, #16]
 801230c:	693b      	ldr	r3, [r7, #16]
 801230e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012312:	2b00      	cmp	r3, #0
 8012314:	d013      	beq.n	801233e <USB_DeactivateEndpoint+0x5a>
 8012316:	687a      	ldr	r2, [r7, #4]
 8012318:	683b      	ldr	r3, [r7, #0]
 801231a:	781b      	ldrb	r3, [r3, #0]
 801231c:	009b      	lsls	r3, r3, #2
 801231e:	4413      	add	r3, r2
 8012320:	681a      	ldr	r2, [r3, #0]
 8012322:	4b6d      	ldr	r3, [pc, #436]	@ (80124d8 <USB_DeactivateEndpoint+0x1f4>)
 8012324:	4013      	ands	r3, r2
 8012326:	60fb      	str	r3, [r7, #12]
 8012328:	687a      	ldr	r2, [r7, #4]
 801232a:	683b      	ldr	r3, [r7, #0]
 801232c:	781b      	ldrb	r3, [r3, #0]
 801232e:	009b      	lsls	r3, r3, #2
 8012330:	441a      	add	r2, r3
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012338:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 801233c:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801233e:	687a      	ldr	r2, [r7, #4]
 8012340:	683b      	ldr	r3, [r7, #0]
 8012342:	781b      	ldrb	r3, [r3, #0]
 8012344:	009b      	lsls	r3, r3, #2
 8012346:	4413      	add	r3, r2
 8012348:	681a      	ldr	r2, [r3, #0]
 801234a:	4b64      	ldr	r3, [pc, #400]	@ (80124dc <USB_DeactivateEndpoint+0x1f8>)
 801234c:	4013      	ands	r3, r2
 801234e:	60bb      	str	r3, [r7, #8]
 8012350:	687a      	ldr	r2, [r7, #4]
 8012352:	683b      	ldr	r3, [r7, #0]
 8012354:	781b      	ldrb	r3, [r3, #0]
 8012356:	009b      	lsls	r3, r3, #2
 8012358:	441a      	add	r2, r3
 801235a:	68bb      	ldr	r3, [r7, #8]
 801235c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012360:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012364:	6013      	str	r3, [r2, #0]
 8012366:	e139      	b.n	80125dc <USB_DeactivateEndpoint+0x2f8>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012368:	687a      	ldr	r2, [r7, #4]
 801236a:	683b      	ldr	r3, [r7, #0]
 801236c:	781b      	ldrb	r3, [r3, #0]
 801236e:	009b      	lsls	r3, r3, #2
 8012370:	4413      	add	r3, r2
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	61fb      	str	r3, [r7, #28]
 8012376:	69fb      	ldr	r3, [r7, #28]
 8012378:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801237c:	2b00      	cmp	r3, #0
 801237e:	d013      	beq.n	80123a8 <USB_DeactivateEndpoint+0xc4>
 8012380:	687a      	ldr	r2, [r7, #4]
 8012382:	683b      	ldr	r3, [r7, #0]
 8012384:	781b      	ldrb	r3, [r3, #0]
 8012386:	009b      	lsls	r3, r3, #2
 8012388:	4413      	add	r3, r2
 801238a:	681a      	ldr	r2, [r3, #0]
 801238c:	4b52      	ldr	r3, [pc, #328]	@ (80124d8 <USB_DeactivateEndpoint+0x1f4>)
 801238e:	4013      	ands	r3, r2
 8012390:	61bb      	str	r3, [r7, #24]
 8012392:	687a      	ldr	r2, [r7, #4]
 8012394:	683b      	ldr	r3, [r7, #0]
 8012396:	781b      	ldrb	r3, [r3, #0]
 8012398:	009b      	lsls	r3, r3, #2
 801239a:	441a      	add	r2, r3
 801239c:	69bb      	ldr	r3, [r7, #24]
 801239e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80123a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80123a6:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80123a8:	687a      	ldr	r2, [r7, #4]
 80123aa:	683b      	ldr	r3, [r7, #0]
 80123ac:	781b      	ldrb	r3, [r3, #0]
 80123ae:	009b      	lsls	r3, r3, #2
 80123b0:	4413      	add	r3, r2
 80123b2:	681a      	ldr	r2, [r3, #0]
 80123b4:	4b4a      	ldr	r3, [pc, #296]	@ (80124e0 <USB_DeactivateEndpoint+0x1fc>)
 80123b6:	4013      	ands	r3, r2
 80123b8:	617b      	str	r3, [r7, #20]
 80123ba:	687a      	ldr	r2, [r7, #4]
 80123bc:	683b      	ldr	r3, [r7, #0]
 80123be:	781b      	ldrb	r3, [r3, #0]
 80123c0:	009b      	lsls	r3, r3, #2
 80123c2:	441a      	add	r2, r3
 80123c4:	697b      	ldr	r3, [r7, #20]
 80123c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80123ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80123ce:	6013      	str	r3, [r2, #0]
 80123d0:	e104      	b.n	80125dc <USB_DeactivateEndpoint+0x2f8>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80123d2:	683b      	ldr	r3, [r7, #0]
 80123d4:	785b      	ldrb	r3, [r3, #1]
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	f040 8084 	bne.w	80124e4 <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80123dc:	687a      	ldr	r2, [r7, #4]
 80123de:	683b      	ldr	r3, [r7, #0]
 80123e0:	781b      	ldrb	r3, [r3, #0]
 80123e2:	009b      	lsls	r3, r3, #2
 80123e4:	4413      	add	r3, r2
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80123ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d013      	beq.n	801241c <USB_DeactivateEndpoint+0x138>
 80123f4:	687a      	ldr	r2, [r7, #4]
 80123f6:	683b      	ldr	r3, [r7, #0]
 80123f8:	781b      	ldrb	r3, [r3, #0]
 80123fa:	009b      	lsls	r3, r3, #2
 80123fc:	4413      	add	r3, r2
 80123fe:	681a      	ldr	r2, [r3, #0]
 8012400:	4b35      	ldr	r3, [pc, #212]	@ (80124d8 <USB_DeactivateEndpoint+0x1f4>)
 8012402:	4013      	ands	r3, r2
 8012404:	637b      	str	r3, [r7, #52]	@ 0x34
 8012406:	687a      	ldr	r2, [r7, #4]
 8012408:	683b      	ldr	r3, [r7, #0]
 801240a:	781b      	ldrb	r3, [r3, #0]
 801240c:	009b      	lsls	r3, r3, #2
 801240e:	441a      	add	r2, r3
 8012410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012412:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8012416:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801241a:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801241c:	687a      	ldr	r2, [r7, #4]
 801241e:	683b      	ldr	r3, [r7, #0]
 8012420:	781b      	ldrb	r3, [r3, #0]
 8012422:	009b      	lsls	r3, r3, #2
 8012424:	4413      	add	r3, r2
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	633b      	str	r3, [r7, #48]	@ 0x30
 801242a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801242c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012430:	2b00      	cmp	r3, #0
 8012432:	d013      	beq.n	801245c <USB_DeactivateEndpoint+0x178>
 8012434:	687a      	ldr	r2, [r7, #4]
 8012436:	683b      	ldr	r3, [r7, #0]
 8012438:	781b      	ldrb	r3, [r3, #0]
 801243a:	009b      	lsls	r3, r3, #2
 801243c:	4413      	add	r3, r2
 801243e:	681a      	ldr	r2, [r3, #0]
 8012440:	4b25      	ldr	r3, [pc, #148]	@ (80124d8 <USB_DeactivateEndpoint+0x1f4>)
 8012442:	4013      	ands	r3, r2
 8012444:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012446:	687a      	ldr	r2, [r7, #4]
 8012448:	683b      	ldr	r3, [r7, #0]
 801244a:	781b      	ldrb	r3, [r3, #0]
 801244c:	009b      	lsls	r3, r3, #2
 801244e:	441a      	add	r2, r3
 8012450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012452:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012456:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 801245a:	6013      	str	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 801245c:	687a      	ldr	r2, [r7, #4]
 801245e:	683b      	ldr	r3, [r7, #0]
 8012460:	781b      	ldrb	r3, [r3, #0]
 8012462:	009b      	lsls	r3, r3, #2
 8012464:	4413      	add	r3, r2
 8012466:	681a      	ldr	r2, [r3, #0]
 8012468:	4b1b      	ldr	r3, [pc, #108]	@ (80124d8 <USB_DeactivateEndpoint+0x1f4>)
 801246a:	4013      	ands	r3, r2
 801246c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801246e:	687a      	ldr	r2, [r7, #4]
 8012470:	683b      	ldr	r3, [r7, #0]
 8012472:	781b      	ldrb	r3, [r3, #0]
 8012474:	009b      	lsls	r3, r3, #2
 8012476:	441a      	add	r2, r3
 8012478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801247a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801247e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8012482:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8012484:	687a      	ldr	r2, [r7, #4]
 8012486:	683b      	ldr	r3, [r7, #0]
 8012488:	781b      	ldrb	r3, [r3, #0]
 801248a:	009b      	lsls	r3, r3, #2
 801248c:	4413      	add	r3, r2
 801248e:	681a      	ldr	r2, [r3, #0]
 8012490:	4b13      	ldr	r3, [pc, #76]	@ (80124e0 <USB_DeactivateEndpoint+0x1fc>)
 8012492:	4013      	ands	r3, r2
 8012494:	627b      	str	r3, [r7, #36]	@ 0x24
 8012496:	687a      	ldr	r2, [r7, #4]
 8012498:	683b      	ldr	r3, [r7, #0]
 801249a:	781b      	ldrb	r3, [r3, #0]
 801249c:	009b      	lsls	r3, r3, #2
 801249e:	441a      	add	r2, r3
 80124a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80124a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80124aa:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80124ac:	687a      	ldr	r2, [r7, #4]
 80124ae:	683b      	ldr	r3, [r7, #0]
 80124b0:	781b      	ldrb	r3, [r3, #0]
 80124b2:	009b      	lsls	r3, r3, #2
 80124b4:	4413      	add	r3, r2
 80124b6:	681a      	ldr	r2, [r3, #0]
 80124b8:	4b08      	ldr	r3, [pc, #32]	@ (80124dc <USB_DeactivateEndpoint+0x1f8>)
 80124ba:	4013      	ands	r3, r2
 80124bc:	623b      	str	r3, [r7, #32]
 80124be:	687a      	ldr	r2, [r7, #4]
 80124c0:	683b      	ldr	r3, [r7, #0]
 80124c2:	781b      	ldrb	r3, [r3, #0]
 80124c4:	009b      	lsls	r3, r3, #2
 80124c6:	441a      	add	r2, r3
 80124c8:	6a3b      	ldr	r3, [r7, #32]
 80124ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80124ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80124d2:	6013      	str	r3, [r2, #0]
 80124d4:	e082      	b.n	80125dc <USB_DeactivateEndpoint+0x2f8>
 80124d6:	bf00      	nop
 80124d8:	07ff8f8f 	.word	0x07ff8f8f
 80124dc:	07ff8fbf 	.word	0x07ff8fbf
 80124e0:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80124e4:	687a      	ldr	r2, [r7, #4]
 80124e6:	683b      	ldr	r3, [r7, #0]
 80124e8:	781b      	ldrb	r3, [r3, #0]
 80124ea:	009b      	lsls	r3, r3, #2
 80124ec:	4413      	add	r3, r2
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	657b      	str	r3, [r7, #84]	@ 0x54
 80124f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80124f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d013      	beq.n	8012524 <USB_DeactivateEndpoint+0x240>
 80124fc:	687a      	ldr	r2, [r7, #4]
 80124fe:	683b      	ldr	r3, [r7, #0]
 8012500:	781b      	ldrb	r3, [r3, #0]
 8012502:	009b      	lsls	r3, r3, #2
 8012504:	4413      	add	r3, r2
 8012506:	681a      	ldr	r2, [r3, #0]
 8012508:	4b38      	ldr	r3, [pc, #224]	@ (80125ec <USB_DeactivateEndpoint+0x308>)
 801250a:	4013      	ands	r3, r2
 801250c:	653b      	str	r3, [r7, #80]	@ 0x50
 801250e:	687a      	ldr	r2, [r7, #4]
 8012510:	683b      	ldr	r3, [r7, #0]
 8012512:	781b      	ldrb	r3, [r3, #0]
 8012514:	009b      	lsls	r3, r3, #2
 8012516:	441a      	add	r2, r3
 8012518:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801251a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 801251e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012522:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012524:	687a      	ldr	r2, [r7, #4]
 8012526:	683b      	ldr	r3, [r7, #0]
 8012528:	781b      	ldrb	r3, [r3, #0]
 801252a:	009b      	lsls	r3, r3, #2
 801252c:	4413      	add	r3, r2
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012532:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012538:	2b00      	cmp	r3, #0
 801253a:	d013      	beq.n	8012564 <USB_DeactivateEndpoint+0x280>
 801253c:	687a      	ldr	r2, [r7, #4]
 801253e:	683b      	ldr	r3, [r7, #0]
 8012540:	781b      	ldrb	r3, [r3, #0]
 8012542:	009b      	lsls	r3, r3, #2
 8012544:	4413      	add	r3, r2
 8012546:	681a      	ldr	r2, [r3, #0]
 8012548:	4b28      	ldr	r3, [pc, #160]	@ (80125ec <USB_DeactivateEndpoint+0x308>)
 801254a:	4013      	ands	r3, r2
 801254c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801254e:	687a      	ldr	r2, [r7, #4]
 8012550:	683b      	ldr	r3, [r7, #0]
 8012552:	781b      	ldrb	r3, [r3, #0]
 8012554:	009b      	lsls	r3, r3, #2
 8012556:	441a      	add	r2, r3
 8012558:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801255a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801255e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8012562:	6013      	str	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8012564:	687a      	ldr	r2, [r7, #4]
 8012566:	683b      	ldr	r3, [r7, #0]
 8012568:	781b      	ldrb	r3, [r3, #0]
 801256a:	009b      	lsls	r3, r3, #2
 801256c:	4413      	add	r3, r2
 801256e:	681a      	ldr	r2, [r3, #0]
 8012570:	4b1e      	ldr	r3, [pc, #120]	@ (80125ec <USB_DeactivateEndpoint+0x308>)
 8012572:	4013      	ands	r3, r2
 8012574:	647b      	str	r3, [r7, #68]	@ 0x44
 8012576:	687a      	ldr	r2, [r7, #4]
 8012578:	683b      	ldr	r3, [r7, #0]
 801257a:	781b      	ldrb	r3, [r3, #0]
 801257c:	009b      	lsls	r3, r3, #2
 801257e:	441a      	add	r2, r3
 8012580:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012582:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8012586:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801258a:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801258c:	687a      	ldr	r2, [r7, #4]
 801258e:	683b      	ldr	r3, [r7, #0]
 8012590:	781b      	ldrb	r3, [r3, #0]
 8012592:	009b      	lsls	r3, r3, #2
 8012594:	4413      	add	r3, r2
 8012596:	681a      	ldr	r2, [r3, #0]
 8012598:	4b15      	ldr	r3, [pc, #84]	@ (80125f0 <USB_DeactivateEndpoint+0x30c>)
 801259a:	4013      	ands	r3, r2
 801259c:	643b      	str	r3, [r7, #64]	@ 0x40
 801259e:	687a      	ldr	r2, [r7, #4]
 80125a0:	683b      	ldr	r3, [r7, #0]
 80125a2:	781b      	ldrb	r3, [r3, #0]
 80125a4:	009b      	lsls	r3, r3, #2
 80125a6:	441a      	add	r2, r3
 80125a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80125aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80125ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80125b2:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80125b4:	687a      	ldr	r2, [r7, #4]
 80125b6:	683b      	ldr	r3, [r7, #0]
 80125b8:	781b      	ldrb	r3, [r3, #0]
 80125ba:	009b      	lsls	r3, r3, #2
 80125bc:	4413      	add	r3, r2
 80125be:	681a      	ldr	r2, [r3, #0]
 80125c0:	4b0c      	ldr	r3, [pc, #48]	@ (80125f4 <USB_DeactivateEndpoint+0x310>)
 80125c2:	4013      	ands	r3, r2
 80125c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80125c6:	687a      	ldr	r2, [r7, #4]
 80125c8:	683b      	ldr	r3, [r7, #0]
 80125ca:	781b      	ldrb	r3, [r3, #0]
 80125cc:	009b      	lsls	r3, r3, #2
 80125ce:	441a      	add	r2, r3
 80125d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80125d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80125d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80125da:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80125dc:	2300      	movs	r3, #0
}
 80125de:	4618      	mov	r0, r3
 80125e0:	375c      	adds	r7, #92	@ 0x5c
 80125e2:	46bd      	mov	sp, r7
 80125e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e8:	4770      	bx	lr
 80125ea:	bf00      	nop
 80125ec:	07ff8f8f 	.word	0x07ff8f8f
 80125f0:	07ff8fbf 	.word	0x07ff8fbf
 80125f4:	07ffbf8f 	.word	0x07ffbf8f

080125f8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 80125f8:	b580      	push	{r7, lr}
 80125fa:	b096      	sub	sp, #88	@ 0x58
 80125fc:	af00      	add	r7, sp, #0
 80125fe:	6078      	str	r0, [r7, #4]
 8012600:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012602:	683b      	ldr	r3, [r7, #0]
 8012604:	785b      	ldrb	r3, [r3, #1]
 8012606:	2b01      	cmp	r3, #1
 8012608:	f040 84ed 	bne.w	8012fe6 <USB_EPStartXfer+0x9ee>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 801260c:	683b      	ldr	r3, [r7, #0]
 801260e:	699a      	ldr	r2, [r3, #24]
 8012610:	683b      	ldr	r3, [r7, #0]
 8012612:	691b      	ldr	r3, [r3, #16]
 8012614:	429a      	cmp	r2, r3
 8012616:	d903      	bls.n	8012620 <USB_EPStartXfer+0x28>
    {
      len = ep->maxpacket;
 8012618:	683b      	ldr	r3, [r7, #0]
 801261a:	691b      	ldr	r3, [r3, #16]
 801261c:	657b      	str	r3, [r7, #84]	@ 0x54
 801261e:	e002      	b.n	8012626 <USB_EPStartXfer+0x2e>
    }
    else
    {
      len = ep->xfer_len;
 8012620:	683b      	ldr	r3, [r7, #0]
 8012622:	699b      	ldr	r3, [r3, #24]
 8012624:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8012626:	683b      	ldr	r3, [r7, #0]
 8012628:	7b1b      	ldrb	r3, [r3, #12]
 801262a:	2b00      	cmp	r3, #0
 801262c:	d12e      	bne.n	801268c <USB_EPStartXfer+0x94>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 801262e:	683b      	ldr	r3, [r7, #0]
 8012630:	6959      	ldr	r1, [r3, #20]
 8012632:	683b      	ldr	r3, [r7, #0]
 8012634:	88da      	ldrh	r2, [r3, #6]
 8012636:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012638:	b29b      	uxth	r3, r3
 801263a:	6878      	ldr	r0, [r7, #4]
 801263c:	f001 f963 	bl	8013906 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8012640:	683b      	ldr	r3, [r7, #0]
 8012642:	781b      	ldrb	r3, [r3, #0]
 8012644:	00db      	lsls	r3, r3, #3
 8012646:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801264a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801264e:	681a      	ldr	r2, [r3, #0]
 8012650:	683b      	ldr	r3, [r7, #0]
 8012652:	781b      	ldrb	r3, [r3, #0]
 8012654:	00db      	lsls	r3, r3, #3
 8012656:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801265a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801265e:	b292      	uxth	r2, r2
 8012660:	601a      	str	r2, [r3, #0]
 8012662:	683b      	ldr	r3, [r7, #0]
 8012664:	781b      	ldrb	r3, [r3, #0]
 8012666:	00db      	lsls	r3, r3, #3
 8012668:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801266c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012670:	6819      	ldr	r1, [r3, #0]
 8012672:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012674:	041a      	lsls	r2, r3, #16
 8012676:	683b      	ldr	r3, [r7, #0]
 8012678:	781b      	ldrb	r3, [r3, #0]
 801267a:	00db      	lsls	r3, r3, #3
 801267c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012680:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012684:	430a      	orrs	r2, r1
 8012686:	601a      	str	r2, [r3, #0]
 8012688:	f000 bc90 	b.w	8012fac <USB_EPStartXfer+0x9b4>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 801268c:	683b      	ldr	r3, [r7, #0]
 801268e:	78db      	ldrb	r3, [r3, #3]
 8012690:	2b02      	cmp	r3, #2
 8012692:	f040 8332 	bne.w	8012cfa <USB_EPStartXfer+0x702>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8012696:	683b      	ldr	r3, [r7, #0]
 8012698:	6a1a      	ldr	r2, [r3, #32]
 801269a:	683b      	ldr	r3, [r7, #0]
 801269c:	691b      	ldr	r3, [r3, #16]
 801269e:	429a      	cmp	r2, r3
 80126a0:	f240 82e4 	bls.w	8012c6c <USB_EPStartXfer+0x674>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80126a4:	687a      	ldr	r2, [r7, #4]
 80126a6:	683b      	ldr	r3, [r7, #0]
 80126a8:	781b      	ldrb	r3, [r3, #0]
 80126aa:	009b      	lsls	r3, r3, #2
 80126ac:	4413      	add	r3, r2
 80126ae:	681a      	ldr	r2, [r3, #0]
 80126b0:	4ba4      	ldr	r3, [pc, #656]	@ (8012944 <USB_EPStartXfer+0x34c>)
 80126b2:	4013      	ands	r3, r2
 80126b4:	613b      	str	r3, [r7, #16]
 80126b6:	687a      	ldr	r2, [r7, #4]
 80126b8:	683b      	ldr	r3, [r7, #0]
 80126ba:	781b      	ldrb	r3, [r3, #0]
 80126bc:	009b      	lsls	r3, r3, #2
 80126be:	441a      	add	r2, r3
 80126c0:	693b      	ldr	r3, [r7, #16]
 80126c2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80126c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80126ca:	6013      	str	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80126cc:	683b      	ldr	r3, [r7, #0]
 80126ce:	6a1a      	ldr	r2, [r3, #32]
 80126d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80126d2:	1ad2      	subs	r2, r2, r3
 80126d4:	683b      	ldr	r3, [r7, #0]
 80126d6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80126d8:	687a      	ldr	r2, [r7, #4]
 80126da:	683b      	ldr	r3, [r7, #0]
 80126dc:	781b      	ldrb	r3, [r3, #0]
 80126de:	009b      	lsls	r3, r3, #2
 80126e0:	4413      	add	r3, r2
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	f000 8161 	beq.w	80129b0 <USB_EPStartXfer+0x3b8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80126ee:	683b      	ldr	r3, [r7, #0]
 80126f0:	785b      	ldrb	r3, [r3, #1]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d16a      	bne.n	80127cc <USB_EPStartXfer+0x1d4>
 80126f6:	683b      	ldr	r3, [r7, #0]
 80126f8:	781b      	ldrb	r3, [r3, #0]
 80126fa:	00db      	lsls	r3, r3, #3
 80126fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012700:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012704:	685a      	ldr	r2, [r3, #4]
 8012706:	683b      	ldr	r3, [r7, #0]
 8012708:	781b      	ldrb	r3, [r3, #0]
 801270a:	00db      	lsls	r3, r3, #3
 801270c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012710:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012714:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8012718:	605a      	str	r2, [r3, #4]
 801271a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801271c:	2b00      	cmp	r3, #0
 801271e:	d112      	bne.n	8012746 <USB_EPStartXfer+0x14e>
 8012720:	683b      	ldr	r3, [r7, #0]
 8012722:	781b      	ldrb	r3, [r3, #0]
 8012724:	00db      	lsls	r3, r3, #3
 8012726:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801272a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801272e:	685a      	ldr	r2, [r3, #4]
 8012730:	683b      	ldr	r3, [r7, #0]
 8012732:	781b      	ldrb	r3, [r3, #0]
 8012734:	00db      	lsls	r3, r3, #3
 8012736:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801273a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801273e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8012742:	605a      	str	r2, [r3, #4]
 8012744:	e06a      	b.n	801281c <USB_EPStartXfer+0x224>
 8012746:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012748:	2b3e      	cmp	r3, #62	@ 0x3e
 801274a:	d81e      	bhi.n	801278a <USB_EPStartXfer+0x192>
 801274c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801274e:	085b      	lsrs	r3, r3, #1
 8012750:	653b      	str	r3, [r7, #80]	@ 0x50
 8012752:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012754:	f003 0301 	and.w	r3, r3, #1
 8012758:	2b00      	cmp	r3, #0
 801275a:	d002      	beq.n	8012762 <USB_EPStartXfer+0x16a>
 801275c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801275e:	3301      	adds	r3, #1
 8012760:	653b      	str	r3, [r7, #80]	@ 0x50
 8012762:	683b      	ldr	r3, [r7, #0]
 8012764:	781b      	ldrb	r3, [r3, #0]
 8012766:	00db      	lsls	r3, r3, #3
 8012768:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801276c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012770:	6859      	ldr	r1, [r3, #4]
 8012772:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012774:	069a      	lsls	r2, r3, #26
 8012776:	683b      	ldr	r3, [r7, #0]
 8012778:	781b      	ldrb	r3, [r3, #0]
 801277a:	00db      	lsls	r3, r3, #3
 801277c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012780:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012784:	430a      	orrs	r2, r1
 8012786:	605a      	str	r2, [r3, #4]
 8012788:	e048      	b.n	801281c <USB_EPStartXfer+0x224>
 801278a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801278c:	095b      	lsrs	r3, r3, #5
 801278e:	653b      	str	r3, [r7, #80]	@ 0x50
 8012790:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012792:	f003 031f 	and.w	r3, r3, #31
 8012796:	2b00      	cmp	r3, #0
 8012798:	d102      	bne.n	80127a0 <USB_EPStartXfer+0x1a8>
 801279a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801279c:	3b01      	subs	r3, #1
 801279e:	653b      	str	r3, [r7, #80]	@ 0x50
 80127a0:	683b      	ldr	r3, [r7, #0]
 80127a2:	781b      	ldrb	r3, [r3, #0]
 80127a4:	00db      	lsls	r3, r3, #3
 80127a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80127aa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80127ae:	685a      	ldr	r2, [r3, #4]
 80127b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80127b2:	069b      	lsls	r3, r3, #26
 80127b4:	431a      	orrs	r2, r3
 80127b6:	683b      	ldr	r3, [r7, #0]
 80127b8:	781b      	ldrb	r3, [r3, #0]
 80127ba:	00db      	lsls	r3, r3, #3
 80127bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80127c0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80127c4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80127c8:	605a      	str	r2, [r3, #4]
 80127ca:	e027      	b.n	801281c <USB_EPStartXfer+0x224>
 80127cc:	683b      	ldr	r3, [r7, #0]
 80127ce:	785b      	ldrb	r3, [r3, #1]
 80127d0:	2b01      	cmp	r3, #1
 80127d2:	d123      	bne.n	801281c <USB_EPStartXfer+0x224>
 80127d4:	683b      	ldr	r3, [r7, #0]
 80127d6:	781b      	ldrb	r3, [r3, #0]
 80127d8:	00db      	lsls	r3, r3, #3
 80127da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80127de:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80127e2:	685a      	ldr	r2, [r3, #4]
 80127e4:	683b      	ldr	r3, [r7, #0]
 80127e6:	781b      	ldrb	r3, [r3, #0]
 80127e8:	00db      	lsls	r3, r3, #3
 80127ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80127ee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80127f2:	b292      	uxth	r2, r2
 80127f4:	605a      	str	r2, [r3, #4]
 80127f6:	683b      	ldr	r3, [r7, #0]
 80127f8:	781b      	ldrb	r3, [r3, #0]
 80127fa:	00db      	lsls	r3, r3, #3
 80127fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012800:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012804:	6859      	ldr	r1, [r3, #4]
 8012806:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012808:	041a      	lsls	r2, r3, #16
 801280a:	683b      	ldr	r3, [r7, #0]
 801280c:	781b      	ldrb	r3, [r3, #0]
 801280e:	00db      	lsls	r3, r3, #3
 8012810:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012814:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012818:	430a      	orrs	r2, r1
 801281a:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 801281c:	683b      	ldr	r3, [r7, #0]
 801281e:	895b      	ldrh	r3, [r3, #10]
 8012820:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012822:	683b      	ldr	r3, [r7, #0]
 8012824:	6959      	ldr	r1, [r3, #20]
 8012826:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012828:	b29b      	uxth	r3, r3
 801282a:	8b7a      	ldrh	r2, [r7, #26]
 801282c:	6878      	ldr	r0, [r7, #4]
 801282e:	f001 f86a 	bl	8013906 <USB_WritePMA>
            ep->xfer_buff += len;
 8012832:	683b      	ldr	r3, [r7, #0]
 8012834:	695a      	ldr	r2, [r3, #20]
 8012836:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012838:	441a      	add	r2, r3
 801283a:	683b      	ldr	r3, [r7, #0]
 801283c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801283e:	683b      	ldr	r3, [r7, #0]
 8012840:	6a1a      	ldr	r2, [r3, #32]
 8012842:	683b      	ldr	r3, [r7, #0]
 8012844:	691b      	ldr	r3, [r3, #16]
 8012846:	429a      	cmp	r2, r3
 8012848:	d906      	bls.n	8012858 <USB_EPStartXfer+0x260>
            {
              ep->xfer_len_db -= len;
 801284a:	683b      	ldr	r3, [r7, #0]
 801284c:	6a1a      	ldr	r2, [r3, #32]
 801284e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012850:	1ad2      	subs	r2, r2, r3
 8012852:	683b      	ldr	r3, [r7, #0]
 8012854:	621a      	str	r2, [r3, #32]
 8012856:	e005      	b.n	8012864 <USB_EPStartXfer+0x26c>
            }
            else
            {
              len = ep->xfer_len_db;
 8012858:	683b      	ldr	r3, [r7, #0]
 801285a:	6a1b      	ldr	r3, [r3, #32]
 801285c:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 801285e:	683b      	ldr	r3, [r7, #0]
 8012860:	2200      	movs	r2, #0
 8012862:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8012864:	683b      	ldr	r3, [r7, #0]
 8012866:	785b      	ldrb	r3, [r3, #1]
 8012868:	2b00      	cmp	r3, #0
 801286a:	d16d      	bne.n	8012948 <USB_EPStartXfer+0x350>
 801286c:	683b      	ldr	r3, [r7, #0]
 801286e:	781b      	ldrb	r3, [r3, #0]
 8012870:	00db      	lsls	r3, r3, #3
 8012872:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012876:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801287a:	681a      	ldr	r2, [r3, #0]
 801287c:	683b      	ldr	r3, [r7, #0]
 801287e:	781b      	ldrb	r3, [r3, #0]
 8012880:	00db      	lsls	r3, r3, #3
 8012882:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012886:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801288a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 801288e:	601a      	str	r2, [r3, #0]
 8012890:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012892:	2b00      	cmp	r3, #0
 8012894:	d112      	bne.n	80128bc <USB_EPStartXfer+0x2c4>
 8012896:	683b      	ldr	r3, [r7, #0]
 8012898:	781b      	ldrb	r3, [r3, #0]
 801289a:	00db      	lsls	r3, r3, #3
 801289c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80128a0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80128a4:	681a      	ldr	r2, [r3, #0]
 80128a6:	683b      	ldr	r3, [r7, #0]
 80128a8:	781b      	ldrb	r3, [r3, #0]
 80128aa:	00db      	lsls	r3, r3, #3
 80128ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80128b0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80128b4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80128b8:	601a      	str	r2, [r3, #0]
 80128ba:	e06d      	b.n	8012998 <USB_EPStartXfer+0x3a0>
 80128bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80128be:	2b3e      	cmp	r3, #62	@ 0x3e
 80128c0:	d81e      	bhi.n	8012900 <USB_EPStartXfer+0x308>
 80128c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80128c4:	085b      	lsrs	r3, r3, #1
 80128c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80128c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80128ca:	f003 0301 	and.w	r3, r3, #1
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d002      	beq.n	80128d8 <USB_EPStartXfer+0x2e0>
 80128d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80128d4:	3301      	adds	r3, #1
 80128d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80128d8:	683b      	ldr	r3, [r7, #0]
 80128da:	781b      	ldrb	r3, [r3, #0]
 80128dc:	00db      	lsls	r3, r3, #3
 80128de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80128e2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80128e6:	6819      	ldr	r1, [r3, #0]
 80128e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80128ea:	069a      	lsls	r2, r3, #26
 80128ec:	683b      	ldr	r3, [r7, #0]
 80128ee:	781b      	ldrb	r3, [r3, #0]
 80128f0:	00db      	lsls	r3, r3, #3
 80128f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80128f6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80128fa:	430a      	orrs	r2, r1
 80128fc:	601a      	str	r2, [r3, #0]
 80128fe:	e04b      	b.n	8012998 <USB_EPStartXfer+0x3a0>
 8012900:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012902:	095b      	lsrs	r3, r3, #5
 8012904:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012906:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012908:	f003 031f 	and.w	r3, r3, #31
 801290c:	2b00      	cmp	r3, #0
 801290e:	d102      	bne.n	8012916 <USB_EPStartXfer+0x31e>
 8012910:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012912:	3b01      	subs	r3, #1
 8012914:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012916:	683b      	ldr	r3, [r7, #0]
 8012918:	781b      	ldrb	r3, [r3, #0]
 801291a:	00db      	lsls	r3, r3, #3
 801291c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012920:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012924:	681a      	ldr	r2, [r3, #0]
 8012926:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012928:	069b      	lsls	r3, r3, #26
 801292a:	431a      	orrs	r2, r3
 801292c:	683b      	ldr	r3, [r7, #0]
 801292e:	781b      	ldrb	r3, [r3, #0]
 8012930:	00db      	lsls	r3, r3, #3
 8012932:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012936:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801293a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 801293e:	601a      	str	r2, [r3, #0]
 8012940:	e02a      	b.n	8012998 <USB_EPStartXfer+0x3a0>
 8012942:	bf00      	nop
 8012944:	07ff8f8f 	.word	0x07ff8f8f
 8012948:	683b      	ldr	r3, [r7, #0]
 801294a:	785b      	ldrb	r3, [r3, #1]
 801294c:	2b01      	cmp	r3, #1
 801294e:	d123      	bne.n	8012998 <USB_EPStartXfer+0x3a0>
 8012950:	683b      	ldr	r3, [r7, #0]
 8012952:	781b      	ldrb	r3, [r3, #0]
 8012954:	00db      	lsls	r3, r3, #3
 8012956:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801295a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801295e:	681a      	ldr	r2, [r3, #0]
 8012960:	683b      	ldr	r3, [r7, #0]
 8012962:	781b      	ldrb	r3, [r3, #0]
 8012964:	00db      	lsls	r3, r3, #3
 8012966:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801296a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801296e:	b292      	uxth	r2, r2
 8012970:	601a      	str	r2, [r3, #0]
 8012972:	683b      	ldr	r3, [r7, #0]
 8012974:	781b      	ldrb	r3, [r3, #0]
 8012976:	00db      	lsls	r3, r3, #3
 8012978:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801297c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012980:	6819      	ldr	r1, [r3, #0]
 8012982:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012984:	041a      	lsls	r2, r3, #16
 8012986:	683b      	ldr	r3, [r7, #0]
 8012988:	781b      	ldrb	r3, [r3, #0]
 801298a:	00db      	lsls	r3, r3, #3
 801298c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012990:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012994:	430a      	orrs	r2, r1
 8012996:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8012998:	683b      	ldr	r3, [r7, #0]
 801299a:	891b      	ldrh	r3, [r3, #8]
 801299c:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801299e:	683b      	ldr	r3, [r7, #0]
 80129a0:	6959      	ldr	r1, [r3, #20]
 80129a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80129a4:	b29b      	uxth	r3, r3
 80129a6:	8b7a      	ldrh	r2, [r7, #26]
 80129a8:	6878      	ldr	r0, [r7, #4]
 80129aa:	f000 ffac 	bl	8013906 <USB_WritePMA>
 80129ae:	e2fd      	b.n	8012fac <USB_EPStartXfer+0x9b4>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80129b0:	683b      	ldr	r3, [r7, #0]
 80129b2:	785b      	ldrb	r3, [r3, #1]
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d16a      	bne.n	8012a8e <USB_EPStartXfer+0x496>
 80129b8:	683b      	ldr	r3, [r7, #0]
 80129ba:	781b      	ldrb	r3, [r3, #0]
 80129bc:	00db      	lsls	r3, r3, #3
 80129be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80129c2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80129c6:	681a      	ldr	r2, [r3, #0]
 80129c8:	683b      	ldr	r3, [r7, #0]
 80129ca:	781b      	ldrb	r3, [r3, #0]
 80129cc:	00db      	lsls	r3, r3, #3
 80129ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80129d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80129d6:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80129da:	601a      	str	r2, [r3, #0]
 80129dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d112      	bne.n	8012a08 <USB_EPStartXfer+0x410>
 80129e2:	683b      	ldr	r3, [r7, #0]
 80129e4:	781b      	ldrb	r3, [r3, #0]
 80129e6:	00db      	lsls	r3, r3, #3
 80129e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80129ec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80129f0:	681a      	ldr	r2, [r3, #0]
 80129f2:	683b      	ldr	r3, [r7, #0]
 80129f4:	781b      	ldrb	r3, [r3, #0]
 80129f6:	00db      	lsls	r3, r3, #3
 80129f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80129fc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012a00:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8012a04:	601a      	str	r2, [r3, #0]
 8012a06:	e06a      	b.n	8012ade <USB_EPStartXfer+0x4e6>
 8012a08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012a0a:	2b3e      	cmp	r3, #62	@ 0x3e
 8012a0c:	d81e      	bhi.n	8012a4c <USB_EPStartXfer+0x454>
 8012a0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012a10:	085b      	lsrs	r3, r3, #1
 8012a12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012a14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012a16:	f003 0301 	and.w	r3, r3, #1
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d002      	beq.n	8012a24 <USB_EPStartXfer+0x42c>
 8012a1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012a20:	3301      	adds	r3, #1
 8012a22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012a24:	683b      	ldr	r3, [r7, #0]
 8012a26:	781b      	ldrb	r3, [r3, #0]
 8012a28:	00db      	lsls	r3, r3, #3
 8012a2a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012a2e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012a32:	6819      	ldr	r1, [r3, #0]
 8012a34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012a36:	069a      	lsls	r2, r3, #26
 8012a38:	683b      	ldr	r3, [r7, #0]
 8012a3a:	781b      	ldrb	r3, [r3, #0]
 8012a3c:	00db      	lsls	r3, r3, #3
 8012a3e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012a42:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012a46:	430a      	orrs	r2, r1
 8012a48:	601a      	str	r2, [r3, #0]
 8012a4a:	e048      	b.n	8012ade <USB_EPStartXfer+0x4e6>
 8012a4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012a4e:	095b      	lsrs	r3, r3, #5
 8012a50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012a52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012a54:	f003 031f 	and.w	r3, r3, #31
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d102      	bne.n	8012a62 <USB_EPStartXfer+0x46a>
 8012a5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012a5e:	3b01      	subs	r3, #1
 8012a60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012a62:	683b      	ldr	r3, [r7, #0]
 8012a64:	781b      	ldrb	r3, [r3, #0]
 8012a66:	00db      	lsls	r3, r3, #3
 8012a68:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012a6c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012a70:	681a      	ldr	r2, [r3, #0]
 8012a72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012a74:	069b      	lsls	r3, r3, #26
 8012a76:	431a      	orrs	r2, r3
 8012a78:	683b      	ldr	r3, [r7, #0]
 8012a7a:	781b      	ldrb	r3, [r3, #0]
 8012a7c:	00db      	lsls	r3, r3, #3
 8012a7e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012a82:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012a86:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8012a8a:	601a      	str	r2, [r3, #0]
 8012a8c:	e027      	b.n	8012ade <USB_EPStartXfer+0x4e6>
 8012a8e:	683b      	ldr	r3, [r7, #0]
 8012a90:	785b      	ldrb	r3, [r3, #1]
 8012a92:	2b01      	cmp	r3, #1
 8012a94:	d123      	bne.n	8012ade <USB_EPStartXfer+0x4e6>
 8012a96:	683b      	ldr	r3, [r7, #0]
 8012a98:	781b      	ldrb	r3, [r3, #0]
 8012a9a:	00db      	lsls	r3, r3, #3
 8012a9c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012aa0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012aa4:	681a      	ldr	r2, [r3, #0]
 8012aa6:	683b      	ldr	r3, [r7, #0]
 8012aa8:	781b      	ldrb	r3, [r3, #0]
 8012aaa:	00db      	lsls	r3, r3, #3
 8012aac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012ab0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012ab4:	b292      	uxth	r2, r2
 8012ab6:	601a      	str	r2, [r3, #0]
 8012ab8:	683b      	ldr	r3, [r7, #0]
 8012aba:	781b      	ldrb	r3, [r3, #0]
 8012abc:	00db      	lsls	r3, r3, #3
 8012abe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012ac2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012ac6:	6819      	ldr	r1, [r3, #0]
 8012ac8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012aca:	041a      	lsls	r2, r3, #16
 8012acc:	683b      	ldr	r3, [r7, #0]
 8012ace:	781b      	ldrb	r3, [r3, #0]
 8012ad0:	00db      	lsls	r3, r3, #3
 8012ad2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012ad6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012ada:	430a      	orrs	r2, r1
 8012adc:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8012ade:	683b      	ldr	r3, [r7, #0]
 8012ae0:	891b      	ldrh	r3, [r3, #8]
 8012ae2:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012ae4:	683b      	ldr	r3, [r7, #0]
 8012ae6:	6959      	ldr	r1, [r3, #20]
 8012ae8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012aea:	b29b      	uxth	r3, r3
 8012aec:	8b7a      	ldrh	r2, [r7, #26]
 8012aee:	6878      	ldr	r0, [r7, #4]
 8012af0:	f000 ff09 	bl	8013906 <USB_WritePMA>
            ep->xfer_buff += len;
 8012af4:	683b      	ldr	r3, [r7, #0]
 8012af6:	695a      	ldr	r2, [r3, #20]
 8012af8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012afa:	441a      	add	r2, r3
 8012afc:	683b      	ldr	r3, [r7, #0]
 8012afe:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8012b00:	683b      	ldr	r3, [r7, #0]
 8012b02:	6a1a      	ldr	r2, [r3, #32]
 8012b04:	683b      	ldr	r3, [r7, #0]
 8012b06:	691b      	ldr	r3, [r3, #16]
 8012b08:	429a      	cmp	r2, r3
 8012b0a:	d906      	bls.n	8012b1a <USB_EPStartXfer+0x522>
            {
              ep->xfer_len_db -= len;
 8012b0c:	683b      	ldr	r3, [r7, #0]
 8012b0e:	6a1a      	ldr	r2, [r3, #32]
 8012b10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012b12:	1ad2      	subs	r2, r2, r3
 8012b14:	683b      	ldr	r3, [r7, #0]
 8012b16:	621a      	str	r2, [r3, #32]
 8012b18:	e005      	b.n	8012b26 <USB_EPStartXfer+0x52e>
            }
            else
            {
              len = ep->xfer_len_db;
 8012b1a:	683b      	ldr	r3, [r7, #0]
 8012b1c:	6a1b      	ldr	r3, [r3, #32]
 8012b1e:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 8012b20:	683b      	ldr	r3, [r7, #0]
 8012b22:	2200      	movs	r2, #0
 8012b24:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8012b26:	683b      	ldr	r3, [r7, #0]
 8012b28:	785b      	ldrb	r3, [r3, #1]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d16a      	bne.n	8012c04 <USB_EPStartXfer+0x60c>
 8012b2e:	683b      	ldr	r3, [r7, #0]
 8012b30:	781b      	ldrb	r3, [r3, #0]
 8012b32:	00db      	lsls	r3, r3, #3
 8012b34:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012b38:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012b3c:	685a      	ldr	r2, [r3, #4]
 8012b3e:	683b      	ldr	r3, [r7, #0]
 8012b40:	781b      	ldrb	r3, [r3, #0]
 8012b42:	00db      	lsls	r3, r3, #3
 8012b44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012b48:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012b4c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8012b50:	605a      	str	r2, [r3, #4]
 8012b52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d112      	bne.n	8012b7e <USB_EPStartXfer+0x586>
 8012b58:	683b      	ldr	r3, [r7, #0]
 8012b5a:	781b      	ldrb	r3, [r3, #0]
 8012b5c:	00db      	lsls	r3, r3, #3
 8012b5e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012b62:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012b66:	685a      	ldr	r2, [r3, #4]
 8012b68:	683b      	ldr	r3, [r7, #0]
 8012b6a:	781b      	ldrb	r3, [r3, #0]
 8012b6c:	00db      	lsls	r3, r3, #3
 8012b6e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012b72:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012b76:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8012b7a:	605a      	str	r2, [r3, #4]
 8012b7c:	e06a      	b.n	8012c54 <USB_EPStartXfer+0x65c>
 8012b7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012b80:	2b3e      	cmp	r3, #62	@ 0x3e
 8012b82:	d81e      	bhi.n	8012bc2 <USB_EPStartXfer+0x5ca>
 8012b84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012b86:	085b      	lsrs	r3, r3, #1
 8012b88:	647b      	str	r3, [r7, #68]	@ 0x44
 8012b8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012b8c:	f003 0301 	and.w	r3, r3, #1
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d002      	beq.n	8012b9a <USB_EPStartXfer+0x5a2>
 8012b94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012b96:	3301      	adds	r3, #1
 8012b98:	647b      	str	r3, [r7, #68]	@ 0x44
 8012b9a:	683b      	ldr	r3, [r7, #0]
 8012b9c:	781b      	ldrb	r3, [r3, #0]
 8012b9e:	00db      	lsls	r3, r3, #3
 8012ba0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012ba4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012ba8:	6859      	ldr	r1, [r3, #4]
 8012baa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012bac:	069a      	lsls	r2, r3, #26
 8012bae:	683b      	ldr	r3, [r7, #0]
 8012bb0:	781b      	ldrb	r3, [r3, #0]
 8012bb2:	00db      	lsls	r3, r3, #3
 8012bb4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012bb8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012bbc:	430a      	orrs	r2, r1
 8012bbe:	605a      	str	r2, [r3, #4]
 8012bc0:	e048      	b.n	8012c54 <USB_EPStartXfer+0x65c>
 8012bc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012bc4:	095b      	lsrs	r3, r3, #5
 8012bc6:	647b      	str	r3, [r7, #68]	@ 0x44
 8012bc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012bca:	f003 031f 	and.w	r3, r3, #31
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d102      	bne.n	8012bd8 <USB_EPStartXfer+0x5e0>
 8012bd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012bd4:	3b01      	subs	r3, #1
 8012bd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8012bd8:	683b      	ldr	r3, [r7, #0]
 8012bda:	781b      	ldrb	r3, [r3, #0]
 8012bdc:	00db      	lsls	r3, r3, #3
 8012bde:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012be2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012be6:	685a      	ldr	r2, [r3, #4]
 8012be8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012bea:	069b      	lsls	r3, r3, #26
 8012bec:	431a      	orrs	r2, r3
 8012bee:	683b      	ldr	r3, [r7, #0]
 8012bf0:	781b      	ldrb	r3, [r3, #0]
 8012bf2:	00db      	lsls	r3, r3, #3
 8012bf4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012bf8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012bfc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8012c00:	605a      	str	r2, [r3, #4]
 8012c02:	e027      	b.n	8012c54 <USB_EPStartXfer+0x65c>
 8012c04:	683b      	ldr	r3, [r7, #0]
 8012c06:	785b      	ldrb	r3, [r3, #1]
 8012c08:	2b01      	cmp	r3, #1
 8012c0a:	d123      	bne.n	8012c54 <USB_EPStartXfer+0x65c>
 8012c0c:	683b      	ldr	r3, [r7, #0]
 8012c0e:	781b      	ldrb	r3, [r3, #0]
 8012c10:	00db      	lsls	r3, r3, #3
 8012c12:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012c16:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012c1a:	685a      	ldr	r2, [r3, #4]
 8012c1c:	683b      	ldr	r3, [r7, #0]
 8012c1e:	781b      	ldrb	r3, [r3, #0]
 8012c20:	00db      	lsls	r3, r3, #3
 8012c22:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012c26:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012c2a:	b292      	uxth	r2, r2
 8012c2c:	605a      	str	r2, [r3, #4]
 8012c2e:	683b      	ldr	r3, [r7, #0]
 8012c30:	781b      	ldrb	r3, [r3, #0]
 8012c32:	00db      	lsls	r3, r3, #3
 8012c34:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012c38:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012c3c:	6859      	ldr	r1, [r3, #4]
 8012c3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012c40:	041a      	lsls	r2, r3, #16
 8012c42:	683b      	ldr	r3, [r7, #0]
 8012c44:	781b      	ldrb	r3, [r3, #0]
 8012c46:	00db      	lsls	r3, r3, #3
 8012c48:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012c4c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012c50:	430a      	orrs	r2, r1
 8012c52:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 8012c54:	683b      	ldr	r3, [r7, #0]
 8012c56:	895b      	ldrh	r3, [r3, #10]
 8012c58:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012c5a:	683b      	ldr	r3, [r7, #0]
 8012c5c:	6959      	ldr	r1, [r3, #20]
 8012c5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012c60:	b29b      	uxth	r3, r3
 8012c62:	8b7a      	ldrh	r2, [r7, #26]
 8012c64:	6878      	ldr	r0, [r7, #4]
 8012c66:	f000 fe4e 	bl	8013906 <USB_WritePMA>
 8012c6a:	e19f      	b.n	8012fac <USB_EPStartXfer+0x9b4>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8012c6c:	683b      	ldr	r3, [r7, #0]
 8012c6e:	6a1b      	ldr	r3, [r3, #32]
 8012c70:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8012c72:	687a      	ldr	r2, [r7, #4]
 8012c74:	683b      	ldr	r3, [r7, #0]
 8012c76:	781b      	ldrb	r3, [r3, #0]
 8012c78:	009b      	lsls	r3, r3, #2
 8012c7a:	4413      	add	r3, r2
 8012c7c:	681a      	ldr	r2, [r3, #0]
 8012c7e:	4ba0      	ldr	r3, [pc, #640]	@ (8012f00 <USB_EPStartXfer+0x908>)
 8012c80:	4013      	ands	r3, r2
 8012c82:	617b      	str	r3, [r7, #20]
 8012c84:	687a      	ldr	r2, [r7, #4]
 8012c86:	683b      	ldr	r3, [r7, #0]
 8012c88:	781b      	ldrb	r3, [r3, #0]
 8012c8a:	009b      	lsls	r3, r3, #2
 8012c8c:	441a      	add	r2, r3
 8012c8e:	697b      	ldr	r3, [r7, #20]
 8012c90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012c94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012c98:	6013      	str	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8012c9a:	683b      	ldr	r3, [r7, #0]
 8012c9c:	781b      	ldrb	r3, [r3, #0]
 8012c9e:	00db      	lsls	r3, r3, #3
 8012ca0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012ca4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012ca8:	681a      	ldr	r2, [r3, #0]
 8012caa:	683b      	ldr	r3, [r7, #0]
 8012cac:	781b      	ldrb	r3, [r3, #0]
 8012cae:	00db      	lsls	r3, r3, #3
 8012cb0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012cb4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012cb8:	b292      	uxth	r2, r2
 8012cba:	601a      	str	r2, [r3, #0]
 8012cbc:	683b      	ldr	r3, [r7, #0]
 8012cbe:	781b      	ldrb	r3, [r3, #0]
 8012cc0:	00db      	lsls	r3, r3, #3
 8012cc2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012cc6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012cca:	6819      	ldr	r1, [r3, #0]
 8012ccc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012cce:	041a      	lsls	r2, r3, #16
 8012cd0:	683b      	ldr	r3, [r7, #0]
 8012cd2:	781b      	ldrb	r3, [r3, #0]
 8012cd4:	00db      	lsls	r3, r3, #3
 8012cd6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012cda:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012cde:	430a      	orrs	r2, r1
 8012ce0:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8012ce2:	683b      	ldr	r3, [r7, #0]
 8012ce4:	891b      	ldrh	r3, [r3, #8]
 8012ce6:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012ce8:	683b      	ldr	r3, [r7, #0]
 8012cea:	6959      	ldr	r1, [r3, #20]
 8012cec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012cee:	b29b      	uxth	r3, r3
 8012cf0:	8b7a      	ldrh	r2, [r7, #26]
 8012cf2:	6878      	ldr	r0, [r7, #4]
 8012cf4:	f000 fe07 	bl	8013906 <USB_WritePMA>
 8012cf8:	e158      	b.n	8012fac <USB_EPStartXfer+0x9b4>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8012cfa:	683b      	ldr	r3, [r7, #0]
 8012cfc:	6a1a      	ldr	r2, [r3, #32]
 8012cfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d00:	1ad2      	subs	r2, r2, r3
 8012d02:	683b      	ldr	r3, [r7, #0]
 8012d04:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8012d06:	687a      	ldr	r2, [r7, #4]
 8012d08:	683b      	ldr	r3, [r7, #0]
 8012d0a:	781b      	ldrb	r3, [r3, #0]
 8012d0c:	009b      	lsls	r3, r3, #2
 8012d0e:	4413      	add	r3, r2
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	f000 80a3 	beq.w	8012e62 <USB_EPStartXfer+0x86a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8012d1c:	683b      	ldr	r3, [r7, #0]
 8012d1e:	785b      	ldrb	r3, [r3, #1]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d16a      	bne.n	8012dfa <USB_EPStartXfer+0x802>
 8012d24:	683b      	ldr	r3, [r7, #0]
 8012d26:	781b      	ldrb	r3, [r3, #0]
 8012d28:	00db      	lsls	r3, r3, #3
 8012d2a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012d2e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012d32:	685a      	ldr	r2, [r3, #4]
 8012d34:	683b      	ldr	r3, [r7, #0]
 8012d36:	781b      	ldrb	r3, [r3, #0]
 8012d38:	00db      	lsls	r3, r3, #3
 8012d3a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012d3e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012d42:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8012d46:	605a      	str	r2, [r3, #4]
 8012d48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d112      	bne.n	8012d74 <USB_EPStartXfer+0x77c>
 8012d4e:	683b      	ldr	r3, [r7, #0]
 8012d50:	781b      	ldrb	r3, [r3, #0]
 8012d52:	00db      	lsls	r3, r3, #3
 8012d54:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012d58:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012d5c:	685a      	ldr	r2, [r3, #4]
 8012d5e:	683b      	ldr	r3, [r7, #0]
 8012d60:	781b      	ldrb	r3, [r3, #0]
 8012d62:	00db      	lsls	r3, r3, #3
 8012d64:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012d68:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012d6c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8012d70:	605a      	str	r2, [r3, #4]
 8012d72:	e06a      	b.n	8012e4a <USB_EPStartXfer+0x852>
 8012d74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d76:	2b3e      	cmp	r3, #62	@ 0x3e
 8012d78:	d81e      	bhi.n	8012db8 <USB_EPStartXfer+0x7c0>
 8012d7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d7c:	085b      	lsrs	r3, r3, #1
 8012d7e:	643b      	str	r3, [r7, #64]	@ 0x40
 8012d80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d82:	f003 0301 	and.w	r3, r3, #1
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d002      	beq.n	8012d90 <USB_EPStartXfer+0x798>
 8012d8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012d8c:	3301      	adds	r3, #1
 8012d8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8012d90:	683b      	ldr	r3, [r7, #0]
 8012d92:	781b      	ldrb	r3, [r3, #0]
 8012d94:	00db      	lsls	r3, r3, #3
 8012d96:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012d9a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012d9e:	6859      	ldr	r1, [r3, #4]
 8012da0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012da2:	069a      	lsls	r2, r3, #26
 8012da4:	683b      	ldr	r3, [r7, #0]
 8012da6:	781b      	ldrb	r3, [r3, #0]
 8012da8:	00db      	lsls	r3, r3, #3
 8012daa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012dae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012db2:	430a      	orrs	r2, r1
 8012db4:	605a      	str	r2, [r3, #4]
 8012db6:	e048      	b.n	8012e4a <USB_EPStartXfer+0x852>
 8012db8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012dba:	095b      	lsrs	r3, r3, #5
 8012dbc:	643b      	str	r3, [r7, #64]	@ 0x40
 8012dbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012dc0:	f003 031f 	and.w	r3, r3, #31
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d102      	bne.n	8012dce <USB_EPStartXfer+0x7d6>
 8012dc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012dca:	3b01      	subs	r3, #1
 8012dcc:	643b      	str	r3, [r7, #64]	@ 0x40
 8012dce:	683b      	ldr	r3, [r7, #0]
 8012dd0:	781b      	ldrb	r3, [r3, #0]
 8012dd2:	00db      	lsls	r3, r3, #3
 8012dd4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012dd8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012ddc:	685a      	ldr	r2, [r3, #4]
 8012dde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012de0:	069b      	lsls	r3, r3, #26
 8012de2:	431a      	orrs	r2, r3
 8012de4:	683b      	ldr	r3, [r7, #0]
 8012de6:	781b      	ldrb	r3, [r3, #0]
 8012de8:	00db      	lsls	r3, r3, #3
 8012dea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012dee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012df2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8012df6:	605a      	str	r2, [r3, #4]
 8012df8:	e027      	b.n	8012e4a <USB_EPStartXfer+0x852>
 8012dfa:	683b      	ldr	r3, [r7, #0]
 8012dfc:	785b      	ldrb	r3, [r3, #1]
 8012dfe:	2b01      	cmp	r3, #1
 8012e00:	d123      	bne.n	8012e4a <USB_EPStartXfer+0x852>
 8012e02:	683b      	ldr	r3, [r7, #0]
 8012e04:	781b      	ldrb	r3, [r3, #0]
 8012e06:	00db      	lsls	r3, r3, #3
 8012e08:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012e0c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012e10:	685a      	ldr	r2, [r3, #4]
 8012e12:	683b      	ldr	r3, [r7, #0]
 8012e14:	781b      	ldrb	r3, [r3, #0]
 8012e16:	00db      	lsls	r3, r3, #3
 8012e18:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012e1c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012e20:	b292      	uxth	r2, r2
 8012e22:	605a      	str	r2, [r3, #4]
 8012e24:	683b      	ldr	r3, [r7, #0]
 8012e26:	781b      	ldrb	r3, [r3, #0]
 8012e28:	00db      	lsls	r3, r3, #3
 8012e2a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012e2e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012e32:	6859      	ldr	r1, [r3, #4]
 8012e34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012e36:	041a      	lsls	r2, r3, #16
 8012e38:	683b      	ldr	r3, [r7, #0]
 8012e3a:	781b      	ldrb	r3, [r3, #0]
 8012e3c:	00db      	lsls	r3, r3, #3
 8012e3e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012e42:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012e46:	430a      	orrs	r2, r1
 8012e48:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 8012e4a:	683b      	ldr	r3, [r7, #0]
 8012e4c:	895b      	ldrh	r3, [r3, #10]
 8012e4e:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012e50:	683b      	ldr	r3, [r7, #0]
 8012e52:	6959      	ldr	r1, [r3, #20]
 8012e54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012e56:	b29b      	uxth	r3, r3
 8012e58:	8b7a      	ldrh	r2, [r7, #26]
 8012e5a:	6878      	ldr	r0, [r7, #4]
 8012e5c:	f000 fd53 	bl	8013906 <USB_WritePMA>
 8012e60:	e0a4      	b.n	8012fac <USB_EPStartXfer+0x9b4>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8012e62:	683b      	ldr	r3, [r7, #0]
 8012e64:	785b      	ldrb	r3, [r3, #1]
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d16d      	bne.n	8012f46 <USB_EPStartXfer+0x94e>
 8012e6a:	683b      	ldr	r3, [r7, #0]
 8012e6c:	781b      	ldrb	r3, [r3, #0]
 8012e6e:	00db      	lsls	r3, r3, #3
 8012e70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012e74:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012e78:	681a      	ldr	r2, [r3, #0]
 8012e7a:	683b      	ldr	r3, [r7, #0]
 8012e7c:	781b      	ldrb	r3, [r3, #0]
 8012e7e:	00db      	lsls	r3, r3, #3
 8012e80:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012e84:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012e88:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8012e8c:	601a      	str	r2, [r3, #0]
 8012e8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d112      	bne.n	8012eba <USB_EPStartXfer+0x8c2>
 8012e94:	683b      	ldr	r3, [r7, #0]
 8012e96:	781b      	ldrb	r3, [r3, #0]
 8012e98:	00db      	lsls	r3, r3, #3
 8012e9a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012e9e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012ea2:	681a      	ldr	r2, [r3, #0]
 8012ea4:	683b      	ldr	r3, [r7, #0]
 8012ea6:	781b      	ldrb	r3, [r3, #0]
 8012ea8:	00db      	lsls	r3, r3, #3
 8012eaa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012eae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012eb2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8012eb6:	601a      	str	r2, [r3, #0]
 8012eb8:	e06d      	b.n	8012f96 <USB_EPStartXfer+0x99e>
 8012eba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012ebc:	2b3e      	cmp	r3, #62	@ 0x3e
 8012ebe:	d821      	bhi.n	8012f04 <USB_EPStartXfer+0x90c>
 8012ec0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012ec2:	085b      	lsrs	r3, r3, #1
 8012ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012ec6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012ec8:	f003 0301 	and.w	r3, r3, #1
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d002      	beq.n	8012ed6 <USB_EPStartXfer+0x8de>
 8012ed0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012ed2:	3301      	adds	r3, #1
 8012ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012ed6:	683b      	ldr	r3, [r7, #0]
 8012ed8:	781b      	ldrb	r3, [r3, #0]
 8012eda:	00db      	lsls	r3, r3, #3
 8012edc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012ee0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012ee4:	6819      	ldr	r1, [r3, #0]
 8012ee6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012ee8:	069a      	lsls	r2, r3, #26
 8012eea:	683b      	ldr	r3, [r7, #0]
 8012eec:	781b      	ldrb	r3, [r3, #0]
 8012eee:	00db      	lsls	r3, r3, #3
 8012ef0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012ef4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012ef8:	430a      	orrs	r2, r1
 8012efa:	601a      	str	r2, [r3, #0]
 8012efc:	e04b      	b.n	8012f96 <USB_EPStartXfer+0x99e>
 8012efe:	bf00      	nop
 8012f00:	07ff8e8f 	.word	0x07ff8e8f
 8012f04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012f06:	095b      	lsrs	r3, r3, #5
 8012f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012f0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012f0c:	f003 031f 	and.w	r3, r3, #31
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d102      	bne.n	8012f1a <USB_EPStartXfer+0x922>
 8012f14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012f16:	3b01      	subs	r3, #1
 8012f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012f1a:	683b      	ldr	r3, [r7, #0]
 8012f1c:	781b      	ldrb	r3, [r3, #0]
 8012f1e:	00db      	lsls	r3, r3, #3
 8012f20:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012f24:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012f28:	681a      	ldr	r2, [r3, #0]
 8012f2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012f2c:	069b      	lsls	r3, r3, #26
 8012f2e:	431a      	orrs	r2, r3
 8012f30:	683b      	ldr	r3, [r7, #0]
 8012f32:	781b      	ldrb	r3, [r3, #0]
 8012f34:	00db      	lsls	r3, r3, #3
 8012f36:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012f3a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012f3e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8012f42:	601a      	str	r2, [r3, #0]
 8012f44:	e027      	b.n	8012f96 <USB_EPStartXfer+0x99e>
 8012f46:	683b      	ldr	r3, [r7, #0]
 8012f48:	785b      	ldrb	r3, [r3, #1]
 8012f4a:	2b01      	cmp	r3, #1
 8012f4c:	d123      	bne.n	8012f96 <USB_EPStartXfer+0x99e>
 8012f4e:	683b      	ldr	r3, [r7, #0]
 8012f50:	781b      	ldrb	r3, [r3, #0]
 8012f52:	00db      	lsls	r3, r3, #3
 8012f54:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012f58:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012f5c:	681a      	ldr	r2, [r3, #0]
 8012f5e:	683b      	ldr	r3, [r7, #0]
 8012f60:	781b      	ldrb	r3, [r3, #0]
 8012f62:	00db      	lsls	r3, r3, #3
 8012f64:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012f68:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012f6c:	b292      	uxth	r2, r2
 8012f6e:	601a      	str	r2, [r3, #0]
 8012f70:	683b      	ldr	r3, [r7, #0]
 8012f72:	781b      	ldrb	r3, [r3, #0]
 8012f74:	00db      	lsls	r3, r3, #3
 8012f76:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012f7a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012f7e:	6819      	ldr	r1, [r3, #0]
 8012f80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012f82:	041a      	lsls	r2, r3, #16
 8012f84:	683b      	ldr	r3, [r7, #0]
 8012f86:	781b      	ldrb	r3, [r3, #0]
 8012f88:	00db      	lsls	r3, r3, #3
 8012f8a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012f8e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012f92:	430a      	orrs	r2, r1
 8012f94:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8012f96:	683b      	ldr	r3, [r7, #0]
 8012f98:	891b      	ldrh	r3, [r3, #8]
 8012f9a:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012f9c:	683b      	ldr	r3, [r7, #0]
 8012f9e:	6959      	ldr	r1, [r3, #20]
 8012fa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012fa2:	b29b      	uxth	r3, r3
 8012fa4:	8b7a      	ldrh	r2, [r7, #26]
 8012fa6:	6878      	ldr	r0, [r7, #4]
 8012fa8:	f000 fcad 	bl	8013906 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8012fac:	687a      	ldr	r2, [r7, #4]
 8012fae:	683b      	ldr	r3, [r7, #0]
 8012fb0:	781b      	ldrb	r3, [r3, #0]
 8012fb2:	009b      	lsls	r3, r3, #2
 8012fb4:	4413      	add	r3, r2
 8012fb6:	681a      	ldr	r2, [r3, #0]
 8012fb8:	4b8b      	ldr	r3, [pc, #556]	@ (80131e8 <USB_EPStartXfer+0xbf0>)
 8012fba:	4013      	ands	r3, r2
 8012fbc:	60fb      	str	r3, [r7, #12]
 8012fbe:	68fb      	ldr	r3, [r7, #12]
 8012fc0:	f083 0310 	eor.w	r3, r3, #16
 8012fc4:	60fb      	str	r3, [r7, #12]
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	f083 0320 	eor.w	r3, r3, #32
 8012fcc:	60fb      	str	r3, [r7, #12]
 8012fce:	687a      	ldr	r2, [r7, #4]
 8012fd0:	683b      	ldr	r3, [r7, #0]
 8012fd2:	781b      	ldrb	r3, [r3, #0]
 8012fd4:	009b      	lsls	r3, r3, #2
 8012fd6:	441a      	add	r2, r3
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012fde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012fe2:	6013      	str	r3, [r2, #0]
 8012fe4:	e36b      	b.n	80136be <USB_EPStartXfer+0x10c6>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8012fe6:	683b      	ldr	r3, [r7, #0]
 8012fe8:	7b1b      	ldrb	r3, [r3, #12]
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	f040 8081 	bne.w	80130f2 <USB_EPStartXfer+0xafa>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8012ff0:	683b      	ldr	r3, [r7, #0]
 8012ff2:	699a      	ldr	r2, [r3, #24]
 8012ff4:	683b      	ldr	r3, [r7, #0]
 8012ff6:	691b      	ldr	r3, [r3, #16]
 8012ff8:	429a      	cmp	r2, r3
 8012ffa:	d909      	bls.n	8013010 <USB_EPStartXfer+0xa18>
      {
        len = ep->maxpacket;
 8012ffc:	683b      	ldr	r3, [r7, #0]
 8012ffe:	691b      	ldr	r3, [r3, #16]
 8013000:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 8013002:	683b      	ldr	r3, [r7, #0]
 8013004:	699a      	ldr	r2, [r3, #24]
 8013006:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013008:	1ad2      	subs	r2, r2, r3
 801300a:	683b      	ldr	r3, [r7, #0]
 801300c:	619a      	str	r2, [r3, #24]
 801300e:	e005      	b.n	801301c <USB_EPStartXfer+0xa24>
      }
      else
      {
        len = ep->xfer_len;
 8013010:	683b      	ldr	r3, [r7, #0]
 8013012:	699b      	ldr	r3, [r3, #24]
 8013014:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 8013016:	683b      	ldr	r3, [r7, #0]
 8013018:	2200      	movs	r2, #0
 801301a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 801301c:	683b      	ldr	r3, [r7, #0]
 801301e:	781b      	ldrb	r3, [r3, #0]
 8013020:	00db      	lsls	r3, r3, #3
 8013022:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8013026:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801302a:	685a      	ldr	r2, [r3, #4]
 801302c:	683b      	ldr	r3, [r7, #0]
 801302e:	781b      	ldrb	r3, [r3, #0]
 8013030:	00db      	lsls	r3, r3, #3
 8013032:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8013036:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801303a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 801303e:	605a      	str	r2, [r3, #4]
 8013040:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013042:	2b00      	cmp	r3, #0
 8013044:	d112      	bne.n	801306c <USB_EPStartXfer+0xa74>
 8013046:	683b      	ldr	r3, [r7, #0]
 8013048:	781b      	ldrb	r3, [r3, #0]
 801304a:	00db      	lsls	r3, r3, #3
 801304c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8013050:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8013054:	685a      	ldr	r2, [r3, #4]
 8013056:	683b      	ldr	r3, [r7, #0]
 8013058:	781b      	ldrb	r3, [r3, #0]
 801305a:	00db      	lsls	r3, r3, #3
 801305c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8013060:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8013064:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8013068:	605a      	str	r2, [r3, #4]
 801306a:	e30c      	b.n	8013686 <USB_EPStartXfer+0x108e>
 801306c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801306e:	2b3e      	cmp	r3, #62	@ 0x3e
 8013070:	d81e      	bhi.n	80130b0 <USB_EPStartXfer+0xab8>
 8013072:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013074:	085b      	lsrs	r3, r3, #1
 8013076:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013078:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801307a:	f003 0301 	and.w	r3, r3, #1
 801307e:	2b00      	cmp	r3, #0
 8013080:	d002      	beq.n	8013088 <USB_EPStartXfer+0xa90>
 8013082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013084:	3301      	adds	r3, #1
 8013086:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013088:	683b      	ldr	r3, [r7, #0]
 801308a:	781b      	ldrb	r3, [r3, #0]
 801308c:	00db      	lsls	r3, r3, #3
 801308e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8013092:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8013096:	6859      	ldr	r1, [r3, #4]
 8013098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801309a:	069a      	lsls	r2, r3, #26
 801309c:	683b      	ldr	r3, [r7, #0]
 801309e:	781b      	ldrb	r3, [r3, #0]
 80130a0:	00db      	lsls	r3, r3, #3
 80130a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80130a6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80130aa:	430a      	orrs	r2, r1
 80130ac:	605a      	str	r2, [r3, #4]
 80130ae:	e2ea      	b.n	8013686 <USB_EPStartXfer+0x108e>
 80130b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80130b2:	095b      	lsrs	r3, r3, #5
 80130b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80130b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80130b8:	f003 031f 	and.w	r3, r3, #31
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d102      	bne.n	80130c6 <USB_EPStartXfer+0xace>
 80130c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130c2:	3b01      	subs	r3, #1
 80130c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80130c6:	683b      	ldr	r3, [r7, #0]
 80130c8:	781b      	ldrb	r3, [r3, #0]
 80130ca:	00db      	lsls	r3, r3, #3
 80130cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80130d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80130d4:	685a      	ldr	r2, [r3, #4]
 80130d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130d8:	069b      	lsls	r3, r3, #26
 80130da:	431a      	orrs	r2, r3
 80130dc:	683b      	ldr	r3, [r7, #0]
 80130de:	781b      	ldrb	r3, [r3, #0]
 80130e0:	00db      	lsls	r3, r3, #3
 80130e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80130e6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80130ea:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80130ee:	605a      	str	r2, [r3, #4]
 80130f0:	e2c9      	b.n	8013686 <USB_EPStartXfer+0x108e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80130f2:	683b      	ldr	r3, [r7, #0]
 80130f4:	78db      	ldrb	r3, [r3, #3]
 80130f6:	2b02      	cmp	r3, #2
 80130f8:	f040 8176 	bne.w	80133e8 <USB_EPStartXfer+0xdf0>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80130fc:	683b      	ldr	r3, [r7, #0]
 80130fe:	785b      	ldrb	r3, [r3, #1]
 8013100:	2b00      	cmp	r3, #0
 8013102:	d173      	bne.n	80131ec <USB_EPStartXfer+0xbf4>
 8013104:	683b      	ldr	r3, [r7, #0]
 8013106:	781b      	ldrb	r3, [r3, #0]
 8013108:	00db      	lsls	r3, r3, #3
 801310a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801310e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8013112:	681a      	ldr	r2, [r3, #0]
 8013114:	683b      	ldr	r3, [r7, #0]
 8013116:	781b      	ldrb	r3, [r3, #0]
 8013118:	00db      	lsls	r3, r3, #3
 801311a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801311e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8013122:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8013126:	601a      	str	r2, [r3, #0]
 8013128:	683b      	ldr	r3, [r7, #0]
 801312a:	691b      	ldr	r3, [r3, #16]
 801312c:	2b00      	cmp	r3, #0
 801312e:	d112      	bne.n	8013156 <USB_EPStartXfer+0xb5e>
 8013130:	683b      	ldr	r3, [r7, #0]
 8013132:	781b      	ldrb	r3, [r3, #0]
 8013134:	00db      	lsls	r3, r3, #3
 8013136:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801313a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801313e:	681a      	ldr	r2, [r3, #0]
 8013140:	683b      	ldr	r3, [r7, #0]
 8013142:	781b      	ldrb	r3, [r3, #0]
 8013144:	00db      	lsls	r3, r3, #3
 8013146:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801314a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801314e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8013152:	601a      	str	r2, [r3, #0]
 8013154:	e073      	b.n	801323e <USB_EPStartXfer+0xc46>
 8013156:	683b      	ldr	r3, [r7, #0]
 8013158:	691b      	ldr	r3, [r3, #16]
 801315a:	2b3e      	cmp	r3, #62	@ 0x3e
 801315c:	d820      	bhi.n	80131a0 <USB_EPStartXfer+0xba8>
 801315e:	683b      	ldr	r3, [r7, #0]
 8013160:	691b      	ldr	r3, [r3, #16]
 8013162:	085b      	lsrs	r3, r3, #1
 8013164:	637b      	str	r3, [r7, #52]	@ 0x34
 8013166:	683b      	ldr	r3, [r7, #0]
 8013168:	691b      	ldr	r3, [r3, #16]
 801316a:	f003 0301 	and.w	r3, r3, #1
 801316e:	2b00      	cmp	r3, #0
 8013170:	d002      	beq.n	8013178 <USB_EPStartXfer+0xb80>
 8013172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013174:	3301      	adds	r3, #1
 8013176:	637b      	str	r3, [r7, #52]	@ 0x34
 8013178:	683b      	ldr	r3, [r7, #0]
 801317a:	781b      	ldrb	r3, [r3, #0]
 801317c:	00db      	lsls	r3, r3, #3
 801317e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8013182:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8013186:	6819      	ldr	r1, [r3, #0]
 8013188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801318a:	069a      	lsls	r2, r3, #26
 801318c:	683b      	ldr	r3, [r7, #0]
 801318e:	781b      	ldrb	r3, [r3, #0]
 8013190:	00db      	lsls	r3, r3, #3
 8013192:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8013196:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801319a:	430a      	orrs	r2, r1
 801319c:	601a      	str	r2, [r3, #0]
 801319e:	e04e      	b.n	801323e <USB_EPStartXfer+0xc46>
 80131a0:	683b      	ldr	r3, [r7, #0]
 80131a2:	691b      	ldr	r3, [r3, #16]
 80131a4:	095b      	lsrs	r3, r3, #5
 80131a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80131a8:	683b      	ldr	r3, [r7, #0]
 80131aa:	691b      	ldr	r3, [r3, #16]
 80131ac:	f003 031f 	and.w	r3, r3, #31
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d102      	bne.n	80131ba <USB_EPStartXfer+0xbc2>
 80131b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80131b6:	3b01      	subs	r3, #1
 80131b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80131ba:	683b      	ldr	r3, [r7, #0]
 80131bc:	781b      	ldrb	r3, [r3, #0]
 80131be:	00db      	lsls	r3, r3, #3
 80131c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80131c4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80131c8:	681a      	ldr	r2, [r3, #0]
 80131ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80131cc:	069b      	lsls	r3, r3, #26
 80131ce:	431a      	orrs	r2, r3
 80131d0:	683b      	ldr	r3, [r7, #0]
 80131d2:	781b      	ldrb	r3, [r3, #0]
 80131d4:	00db      	lsls	r3, r3, #3
 80131d6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80131da:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80131de:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80131e2:	601a      	str	r2, [r3, #0]
 80131e4:	e02b      	b.n	801323e <USB_EPStartXfer+0xc46>
 80131e6:	bf00      	nop
 80131e8:	07ff8fbf 	.word	0x07ff8fbf
 80131ec:	683b      	ldr	r3, [r7, #0]
 80131ee:	785b      	ldrb	r3, [r3, #1]
 80131f0:	2b01      	cmp	r3, #1
 80131f2:	d124      	bne.n	801323e <USB_EPStartXfer+0xc46>
 80131f4:	683b      	ldr	r3, [r7, #0]
 80131f6:	781b      	ldrb	r3, [r3, #0]
 80131f8:	00db      	lsls	r3, r3, #3
 80131fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80131fe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8013202:	681a      	ldr	r2, [r3, #0]
 8013204:	683b      	ldr	r3, [r7, #0]
 8013206:	781b      	ldrb	r3, [r3, #0]
 8013208:	00db      	lsls	r3, r3, #3
 801320a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801320e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8013212:	b292      	uxth	r2, r2
 8013214:	601a      	str	r2, [r3, #0]
 8013216:	683b      	ldr	r3, [r7, #0]
 8013218:	781b      	ldrb	r3, [r3, #0]
 801321a:	00db      	lsls	r3, r3, #3
 801321c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8013220:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8013224:	6819      	ldr	r1, [r3, #0]
 8013226:	683b      	ldr	r3, [r7, #0]
 8013228:	691b      	ldr	r3, [r3, #16]
 801322a:	041a      	lsls	r2, r3, #16
 801322c:	683b      	ldr	r3, [r7, #0]
 801322e:	781b      	ldrb	r3, [r3, #0]
 8013230:	00db      	lsls	r3, r3, #3
 8013232:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8013236:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801323a:	430a      	orrs	r2, r1
 801323c:	601a      	str	r2, [r3, #0]
 801323e:	683b      	ldr	r3, [r7, #0]
 8013240:	785b      	ldrb	r3, [r3, #1]
 8013242:	2b00      	cmp	r3, #0
 8013244:	d170      	bne.n	8013328 <USB_EPStartXfer+0xd30>
 8013246:	683b      	ldr	r3, [r7, #0]
 8013248:	781b      	ldrb	r3, [r3, #0]
 801324a:	00db      	lsls	r3, r3, #3
 801324c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8013250:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8013254:	685a      	ldr	r2, [r3, #4]
 8013256:	683b      	ldr	r3, [r7, #0]
 8013258:	781b      	ldrb	r3, [r3, #0]
 801325a:	00db      	lsls	r3, r3, #3
 801325c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8013260:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8013264:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8013268:	605a      	str	r2, [r3, #4]
 801326a:	683b      	ldr	r3, [r7, #0]
 801326c:	691b      	ldr	r3, [r3, #16]
 801326e:	2b00      	cmp	r3, #0
 8013270:	d112      	bne.n	8013298 <USB_EPStartXfer+0xca0>
 8013272:	683b      	ldr	r3, [r7, #0]
 8013274:	781b      	ldrb	r3, [r3, #0]
 8013276:	00db      	lsls	r3, r3, #3
 8013278:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801327c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8013280:	685a      	ldr	r2, [r3, #4]
 8013282:	683b      	ldr	r3, [r7, #0]
 8013284:	781b      	ldrb	r3, [r3, #0]
 8013286:	00db      	lsls	r3, r3, #3
 8013288:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801328c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8013290:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8013294:	605a      	str	r2, [r3, #4]
 8013296:	e070      	b.n	801337a <USB_EPStartXfer+0xd82>
 8013298:	683b      	ldr	r3, [r7, #0]
 801329a:	691b      	ldr	r3, [r3, #16]
 801329c:	2b3e      	cmp	r3, #62	@ 0x3e
 801329e:	d820      	bhi.n	80132e2 <USB_EPStartXfer+0xcea>
 80132a0:	683b      	ldr	r3, [r7, #0]
 80132a2:	691b      	ldr	r3, [r3, #16]
 80132a4:	085b      	lsrs	r3, r3, #1
 80132a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80132a8:	683b      	ldr	r3, [r7, #0]
 80132aa:	691b      	ldr	r3, [r3, #16]
 80132ac:	f003 0301 	and.w	r3, r3, #1
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d002      	beq.n	80132ba <USB_EPStartXfer+0xcc2>
 80132b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132b6:	3301      	adds	r3, #1
 80132b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80132ba:	683b      	ldr	r3, [r7, #0]
 80132bc:	781b      	ldrb	r3, [r3, #0]
 80132be:	00db      	lsls	r3, r3, #3
 80132c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80132c4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80132c8:	6859      	ldr	r1, [r3, #4]
 80132ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132cc:	069a      	lsls	r2, r3, #26
 80132ce:	683b      	ldr	r3, [r7, #0]
 80132d0:	781b      	ldrb	r3, [r3, #0]
 80132d2:	00db      	lsls	r3, r3, #3
 80132d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80132d8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80132dc:	430a      	orrs	r2, r1
 80132de:	605a      	str	r2, [r3, #4]
 80132e0:	e04b      	b.n	801337a <USB_EPStartXfer+0xd82>
 80132e2:	683b      	ldr	r3, [r7, #0]
 80132e4:	691b      	ldr	r3, [r3, #16]
 80132e6:	095b      	lsrs	r3, r3, #5
 80132e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80132ea:	683b      	ldr	r3, [r7, #0]
 80132ec:	691b      	ldr	r3, [r3, #16]
 80132ee:	f003 031f 	and.w	r3, r3, #31
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d102      	bne.n	80132fc <USB_EPStartXfer+0xd04>
 80132f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132f8:	3b01      	subs	r3, #1
 80132fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80132fc:	683b      	ldr	r3, [r7, #0]
 80132fe:	781b      	ldrb	r3, [r3, #0]
 8013300:	00db      	lsls	r3, r3, #3
 8013302:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8013306:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801330a:	685a      	ldr	r2, [r3, #4]
 801330c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801330e:	069b      	lsls	r3, r3, #26
 8013310:	431a      	orrs	r2, r3
 8013312:	683b      	ldr	r3, [r7, #0]
 8013314:	781b      	ldrb	r3, [r3, #0]
 8013316:	00db      	lsls	r3, r3, #3
 8013318:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801331c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8013320:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8013324:	605a      	str	r2, [r3, #4]
 8013326:	e028      	b.n	801337a <USB_EPStartXfer+0xd82>
 8013328:	683b      	ldr	r3, [r7, #0]
 801332a:	785b      	ldrb	r3, [r3, #1]
 801332c:	2b01      	cmp	r3, #1
 801332e:	d124      	bne.n	801337a <USB_EPStartXfer+0xd82>
 8013330:	683b      	ldr	r3, [r7, #0]
 8013332:	781b      	ldrb	r3, [r3, #0]
 8013334:	00db      	lsls	r3, r3, #3
 8013336:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801333a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801333e:	685a      	ldr	r2, [r3, #4]
 8013340:	683b      	ldr	r3, [r7, #0]
 8013342:	781b      	ldrb	r3, [r3, #0]
 8013344:	00db      	lsls	r3, r3, #3
 8013346:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801334a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801334e:	b292      	uxth	r2, r2
 8013350:	605a      	str	r2, [r3, #4]
 8013352:	683b      	ldr	r3, [r7, #0]
 8013354:	781b      	ldrb	r3, [r3, #0]
 8013356:	00db      	lsls	r3, r3, #3
 8013358:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801335c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8013360:	6859      	ldr	r1, [r3, #4]
 8013362:	683b      	ldr	r3, [r7, #0]
 8013364:	691b      	ldr	r3, [r3, #16]
 8013366:	041a      	lsls	r2, r3, #16
 8013368:	683b      	ldr	r3, [r7, #0]
 801336a:	781b      	ldrb	r3, [r3, #0]
 801336c:	00db      	lsls	r3, r3, #3
 801336e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8013372:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8013376:	430a      	orrs	r2, r1
 8013378:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 801337a:	683b      	ldr	r3, [r7, #0]
 801337c:	69db      	ldr	r3, [r3, #28]
 801337e:	2b00      	cmp	r3, #0
 8013380:	f000 8181 	beq.w	8013686 <USB_EPStartXfer+0x108e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 8013384:	687a      	ldr	r2, [r7, #4]
 8013386:	683b      	ldr	r3, [r7, #0]
 8013388:	781b      	ldrb	r3, [r3, #0]
 801338a:	009b      	lsls	r3, r3, #2
 801338c:	4413      	add	r3, r2
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	84fb      	strh	r3, [r7, #38]	@ 0x26

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8013392:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013394:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8013398:	2b00      	cmp	r3, #0
 801339a:	d004      	beq.n	80133a6 <USB_EPStartXfer+0xdae>
 801339c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801339e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d10b      	bne.n	80133be <USB_EPStartXfer+0xdc6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80133a6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80133a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	f040 816a 	bne.w	8013686 <USB_EPStartXfer+0x108e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80133b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80133b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	f040 8164 	bne.w	8013686 <USB_EPStartXfer+0x108e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80133be:	687a      	ldr	r2, [r7, #4]
 80133c0:	683b      	ldr	r3, [r7, #0]
 80133c2:	781b      	ldrb	r3, [r3, #0]
 80133c4:	009b      	lsls	r3, r3, #2
 80133c6:	4413      	add	r3, r2
 80133c8:	681a      	ldr	r2, [r3, #0]
 80133ca:	4b98      	ldr	r3, [pc, #608]	@ (801362c <USB_EPStartXfer+0x1034>)
 80133cc:	4013      	ands	r3, r2
 80133ce:	623b      	str	r3, [r7, #32]
 80133d0:	687a      	ldr	r2, [r7, #4]
 80133d2:	683b      	ldr	r3, [r7, #0]
 80133d4:	781b      	ldrb	r3, [r3, #0]
 80133d6:	009b      	lsls	r3, r3, #2
 80133d8:	441a      	add	r2, r3
 80133da:	6a3b      	ldr	r3, [r7, #32]
 80133dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80133e0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80133e4:	6013      	str	r3, [r2, #0]
 80133e6:	e14e      	b.n	8013686 <USB_EPStartXfer+0x108e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80133e8:	683b      	ldr	r3, [r7, #0]
 80133ea:	78db      	ldrb	r3, [r3, #3]
 80133ec:	2b01      	cmp	r3, #1
 80133ee:	f040 8148 	bne.w	8013682 <USB_EPStartXfer+0x108a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80133f2:	683b      	ldr	r3, [r7, #0]
 80133f4:	699a      	ldr	r2, [r3, #24]
 80133f6:	683b      	ldr	r3, [r7, #0]
 80133f8:	691b      	ldr	r3, [r3, #16]
 80133fa:	429a      	cmp	r2, r3
 80133fc:	d909      	bls.n	8013412 <USB_EPStartXfer+0xe1a>
        {
          len = ep->maxpacket;
 80133fe:	683b      	ldr	r3, [r7, #0]
 8013400:	691b      	ldr	r3, [r3, #16]
 8013402:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 8013404:	683b      	ldr	r3, [r7, #0]
 8013406:	699a      	ldr	r2, [r3, #24]
 8013408:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801340a:	1ad2      	subs	r2, r2, r3
 801340c:	683b      	ldr	r3, [r7, #0]
 801340e:	619a      	str	r2, [r3, #24]
 8013410:	e005      	b.n	801341e <USB_EPStartXfer+0xe26>
        }
        else
        {
          len = ep->xfer_len;
 8013412:	683b      	ldr	r3, [r7, #0]
 8013414:	699b      	ldr	r3, [r3, #24]
 8013416:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 8013418:	683b      	ldr	r3, [r7, #0]
 801341a:	2200      	movs	r2, #0
 801341c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801341e:	683b      	ldr	r3, [r7, #0]
 8013420:	785b      	ldrb	r3, [r3, #1]
 8013422:	2b00      	cmp	r3, #0
 8013424:	d16a      	bne.n	80134fc <USB_EPStartXfer+0xf04>
 8013426:	683b      	ldr	r3, [r7, #0]
 8013428:	781b      	ldrb	r3, [r3, #0]
 801342a:	00db      	lsls	r3, r3, #3
 801342c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8013430:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8013434:	681a      	ldr	r2, [r3, #0]
 8013436:	683b      	ldr	r3, [r7, #0]
 8013438:	781b      	ldrb	r3, [r3, #0]
 801343a:	00db      	lsls	r3, r3, #3
 801343c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8013440:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8013444:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8013448:	601a      	str	r2, [r3, #0]
 801344a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801344c:	2b00      	cmp	r3, #0
 801344e:	d112      	bne.n	8013476 <USB_EPStartXfer+0xe7e>
 8013450:	683b      	ldr	r3, [r7, #0]
 8013452:	781b      	ldrb	r3, [r3, #0]
 8013454:	00db      	lsls	r3, r3, #3
 8013456:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801345a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801345e:	681a      	ldr	r2, [r3, #0]
 8013460:	683b      	ldr	r3, [r7, #0]
 8013462:	781b      	ldrb	r3, [r3, #0]
 8013464:	00db      	lsls	r3, r3, #3
 8013466:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801346a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801346e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8013472:	601a      	str	r2, [r3, #0]
 8013474:	e06a      	b.n	801354c <USB_EPStartXfer+0xf54>
 8013476:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013478:	2b3e      	cmp	r3, #62	@ 0x3e
 801347a:	d81e      	bhi.n	80134ba <USB_EPStartXfer+0xec2>
 801347c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801347e:	085b      	lsrs	r3, r3, #1
 8013480:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013482:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013484:	f003 0301 	and.w	r3, r3, #1
 8013488:	2b00      	cmp	r3, #0
 801348a:	d002      	beq.n	8013492 <USB_EPStartXfer+0xe9a>
 801348c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801348e:	3301      	adds	r3, #1
 8013490:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013492:	683b      	ldr	r3, [r7, #0]
 8013494:	781b      	ldrb	r3, [r3, #0]
 8013496:	00db      	lsls	r3, r3, #3
 8013498:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801349c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80134a0:	6819      	ldr	r1, [r3, #0]
 80134a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134a4:	069a      	lsls	r2, r3, #26
 80134a6:	683b      	ldr	r3, [r7, #0]
 80134a8:	781b      	ldrb	r3, [r3, #0]
 80134aa:	00db      	lsls	r3, r3, #3
 80134ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80134b0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80134b4:	430a      	orrs	r2, r1
 80134b6:	601a      	str	r2, [r3, #0]
 80134b8:	e048      	b.n	801354c <USB_EPStartXfer+0xf54>
 80134ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80134bc:	095b      	lsrs	r3, r3, #5
 80134be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80134c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80134c2:	f003 031f 	and.w	r3, r3, #31
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d102      	bne.n	80134d0 <USB_EPStartXfer+0xed8>
 80134ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134cc:	3b01      	subs	r3, #1
 80134ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80134d0:	683b      	ldr	r3, [r7, #0]
 80134d2:	781b      	ldrb	r3, [r3, #0]
 80134d4:	00db      	lsls	r3, r3, #3
 80134d6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80134da:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80134de:	681a      	ldr	r2, [r3, #0]
 80134e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134e2:	069b      	lsls	r3, r3, #26
 80134e4:	431a      	orrs	r2, r3
 80134e6:	683b      	ldr	r3, [r7, #0]
 80134e8:	781b      	ldrb	r3, [r3, #0]
 80134ea:	00db      	lsls	r3, r3, #3
 80134ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80134f0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80134f4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80134f8:	601a      	str	r2, [r3, #0]
 80134fa:	e027      	b.n	801354c <USB_EPStartXfer+0xf54>
 80134fc:	683b      	ldr	r3, [r7, #0]
 80134fe:	785b      	ldrb	r3, [r3, #1]
 8013500:	2b01      	cmp	r3, #1
 8013502:	d123      	bne.n	801354c <USB_EPStartXfer+0xf54>
 8013504:	683b      	ldr	r3, [r7, #0]
 8013506:	781b      	ldrb	r3, [r3, #0]
 8013508:	00db      	lsls	r3, r3, #3
 801350a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801350e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8013512:	681a      	ldr	r2, [r3, #0]
 8013514:	683b      	ldr	r3, [r7, #0]
 8013516:	781b      	ldrb	r3, [r3, #0]
 8013518:	00db      	lsls	r3, r3, #3
 801351a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801351e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8013522:	b292      	uxth	r2, r2
 8013524:	601a      	str	r2, [r3, #0]
 8013526:	683b      	ldr	r3, [r7, #0]
 8013528:	781b      	ldrb	r3, [r3, #0]
 801352a:	00db      	lsls	r3, r3, #3
 801352c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8013530:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8013534:	6819      	ldr	r1, [r3, #0]
 8013536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013538:	041a      	lsls	r2, r3, #16
 801353a:	683b      	ldr	r3, [r7, #0]
 801353c:	781b      	ldrb	r3, [r3, #0]
 801353e:	00db      	lsls	r3, r3, #3
 8013540:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8013544:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8013548:	430a      	orrs	r2, r1
 801354a:	601a      	str	r2, [r3, #0]
 801354c:	683b      	ldr	r3, [r7, #0]
 801354e:	785b      	ldrb	r3, [r3, #1]
 8013550:	2b00      	cmp	r3, #0
 8013552:	d16d      	bne.n	8013630 <USB_EPStartXfer+0x1038>
 8013554:	683b      	ldr	r3, [r7, #0]
 8013556:	781b      	ldrb	r3, [r3, #0]
 8013558:	00db      	lsls	r3, r3, #3
 801355a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801355e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8013562:	685a      	ldr	r2, [r3, #4]
 8013564:	683b      	ldr	r3, [r7, #0]
 8013566:	781b      	ldrb	r3, [r3, #0]
 8013568:	00db      	lsls	r3, r3, #3
 801356a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801356e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8013572:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8013576:	605a      	str	r2, [r3, #4]
 8013578:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801357a:	2b00      	cmp	r3, #0
 801357c:	d112      	bne.n	80135a4 <USB_EPStartXfer+0xfac>
 801357e:	683b      	ldr	r3, [r7, #0]
 8013580:	781b      	ldrb	r3, [r3, #0]
 8013582:	00db      	lsls	r3, r3, #3
 8013584:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8013588:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801358c:	685a      	ldr	r2, [r3, #4]
 801358e:	683b      	ldr	r3, [r7, #0]
 8013590:	781b      	ldrb	r3, [r3, #0]
 8013592:	00db      	lsls	r3, r3, #3
 8013594:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8013598:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801359c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80135a0:	605a      	str	r2, [r3, #4]
 80135a2:	e070      	b.n	8013686 <USB_EPStartXfer+0x108e>
 80135a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80135a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80135a8:	d81e      	bhi.n	80135e8 <USB_EPStartXfer+0xff0>
 80135aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80135ac:	085b      	lsrs	r3, r3, #1
 80135ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80135b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80135b2:	f003 0301 	and.w	r3, r3, #1
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d002      	beq.n	80135c0 <USB_EPStartXfer+0xfc8>
 80135ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135bc:	3301      	adds	r3, #1
 80135be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80135c0:	683b      	ldr	r3, [r7, #0]
 80135c2:	781b      	ldrb	r3, [r3, #0]
 80135c4:	00db      	lsls	r3, r3, #3
 80135c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80135ca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80135ce:	6859      	ldr	r1, [r3, #4]
 80135d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135d2:	069a      	lsls	r2, r3, #26
 80135d4:	683b      	ldr	r3, [r7, #0]
 80135d6:	781b      	ldrb	r3, [r3, #0]
 80135d8:	00db      	lsls	r3, r3, #3
 80135da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80135de:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80135e2:	430a      	orrs	r2, r1
 80135e4:	605a      	str	r2, [r3, #4]
 80135e6:	e04e      	b.n	8013686 <USB_EPStartXfer+0x108e>
 80135e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80135ea:	095b      	lsrs	r3, r3, #5
 80135ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80135ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80135f0:	f003 031f 	and.w	r3, r3, #31
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d102      	bne.n	80135fe <USB_EPStartXfer+0x1006>
 80135f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135fa:	3b01      	subs	r3, #1
 80135fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80135fe:	683b      	ldr	r3, [r7, #0]
 8013600:	781b      	ldrb	r3, [r3, #0]
 8013602:	00db      	lsls	r3, r3, #3
 8013604:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8013608:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801360c:	685a      	ldr	r2, [r3, #4]
 801360e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013610:	069b      	lsls	r3, r3, #26
 8013612:	431a      	orrs	r2, r3
 8013614:	683b      	ldr	r3, [r7, #0]
 8013616:	781b      	ldrb	r3, [r3, #0]
 8013618:	00db      	lsls	r3, r3, #3
 801361a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801361e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8013622:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8013626:	605a      	str	r2, [r3, #4]
 8013628:	e02d      	b.n	8013686 <USB_EPStartXfer+0x108e>
 801362a:	bf00      	nop
 801362c:	07ff8f8f 	.word	0x07ff8f8f
 8013630:	683b      	ldr	r3, [r7, #0]
 8013632:	785b      	ldrb	r3, [r3, #1]
 8013634:	2b01      	cmp	r3, #1
 8013636:	d126      	bne.n	8013686 <USB_EPStartXfer+0x108e>
 8013638:	683b      	ldr	r3, [r7, #0]
 801363a:	781b      	ldrb	r3, [r3, #0]
 801363c:	00db      	lsls	r3, r3, #3
 801363e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8013642:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8013646:	685a      	ldr	r2, [r3, #4]
 8013648:	683b      	ldr	r3, [r7, #0]
 801364a:	781b      	ldrb	r3, [r3, #0]
 801364c:	00db      	lsls	r3, r3, #3
 801364e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8013652:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8013656:	b292      	uxth	r2, r2
 8013658:	605a      	str	r2, [r3, #4]
 801365a:	683b      	ldr	r3, [r7, #0]
 801365c:	781b      	ldrb	r3, [r3, #0]
 801365e:	00db      	lsls	r3, r3, #3
 8013660:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8013664:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8013668:	6859      	ldr	r1, [r3, #4]
 801366a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801366c:	041a      	lsls	r2, r3, #16
 801366e:	683b      	ldr	r3, [r7, #0]
 8013670:	781b      	ldrb	r3, [r3, #0]
 8013672:	00db      	lsls	r3, r3, #3
 8013674:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8013678:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801367c:	430a      	orrs	r2, r1
 801367e:	605a      	str	r2, [r3, #4]
 8013680:	e001      	b.n	8013686 <USB_EPStartXfer+0x108e>
      }
      else
      {
        return HAL_ERROR;
 8013682:	2301      	movs	r3, #1
 8013684:	e01c      	b.n	80136c0 <USB_EPStartXfer+0x10c8>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8013686:	687a      	ldr	r2, [r7, #4]
 8013688:	683b      	ldr	r3, [r7, #0]
 801368a:	781b      	ldrb	r3, [r3, #0]
 801368c:	009b      	lsls	r3, r3, #2
 801368e:	4413      	add	r3, r2
 8013690:	681a      	ldr	r2, [r3, #0]
 8013692:	4b0d      	ldr	r3, [pc, #52]	@ (80136c8 <USB_EPStartXfer+0x10d0>)
 8013694:	4013      	ands	r3, r2
 8013696:	61fb      	str	r3, [r7, #28]
 8013698:	69fb      	ldr	r3, [r7, #28]
 801369a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 801369e:	61fb      	str	r3, [r7, #28]
 80136a0:	69fb      	ldr	r3, [r7, #28]
 80136a2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80136a6:	61fb      	str	r3, [r7, #28]
 80136a8:	687a      	ldr	r2, [r7, #4]
 80136aa:	683b      	ldr	r3, [r7, #0]
 80136ac:	781b      	ldrb	r3, [r3, #0]
 80136ae:	009b      	lsls	r3, r3, #2
 80136b0:	441a      	add	r2, r3
 80136b2:	69fb      	ldr	r3, [r7, #28]
 80136b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80136b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80136bc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80136be:	2300      	movs	r3, #0
}
 80136c0:	4618      	mov	r0, r3
 80136c2:	3758      	adds	r7, #88	@ 0x58
 80136c4:	46bd      	mov	sp, r7
 80136c6:	bd80      	pop	{r7, pc}
 80136c8:	07ffbf8f 	.word	0x07ffbf8f

080136cc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 80136cc:	b480      	push	{r7}
 80136ce:	b085      	sub	sp, #20
 80136d0:	af00      	add	r7, sp, #0
 80136d2:	6078      	str	r0, [r7, #4]
 80136d4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80136d6:	683b      	ldr	r3, [r7, #0]
 80136d8:	785b      	ldrb	r3, [r3, #1]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d018      	beq.n	8013710 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80136de:	687a      	ldr	r2, [r7, #4]
 80136e0:	683b      	ldr	r3, [r7, #0]
 80136e2:	781b      	ldrb	r3, [r3, #0]
 80136e4:	009b      	lsls	r3, r3, #2
 80136e6:	4413      	add	r3, r2
 80136e8:	681a      	ldr	r2, [r3, #0]
 80136ea:	4b19      	ldr	r3, [pc, #100]	@ (8013750 <USB_EPSetStall+0x84>)
 80136ec:	4013      	ands	r3, r2
 80136ee:	60bb      	str	r3, [r7, #8]
 80136f0:	68bb      	ldr	r3, [r7, #8]
 80136f2:	f083 0310 	eor.w	r3, r3, #16
 80136f6:	60bb      	str	r3, [r7, #8]
 80136f8:	687a      	ldr	r2, [r7, #4]
 80136fa:	683b      	ldr	r3, [r7, #0]
 80136fc:	781b      	ldrb	r3, [r3, #0]
 80136fe:	009b      	lsls	r3, r3, #2
 8013700:	441a      	add	r2, r3
 8013702:	68bb      	ldr	r3, [r7, #8]
 8013704:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8013708:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801370c:	6013      	str	r3, [r2, #0]
 801370e:	e017      	b.n	8013740 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8013710:	687a      	ldr	r2, [r7, #4]
 8013712:	683b      	ldr	r3, [r7, #0]
 8013714:	781b      	ldrb	r3, [r3, #0]
 8013716:	009b      	lsls	r3, r3, #2
 8013718:	4413      	add	r3, r2
 801371a:	681a      	ldr	r2, [r3, #0]
 801371c:	4b0d      	ldr	r3, [pc, #52]	@ (8013754 <USB_EPSetStall+0x88>)
 801371e:	4013      	ands	r3, r2
 8013720:	60fb      	str	r3, [r7, #12]
 8013722:	68fb      	ldr	r3, [r7, #12]
 8013724:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8013728:	60fb      	str	r3, [r7, #12]
 801372a:	687a      	ldr	r2, [r7, #4]
 801372c:	683b      	ldr	r3, [r7, #0]
 801372e:	781b      	ldrb	r3, [r3, #0]
 8013730:	009b      	lsls	r3, r3, #2
 8013732:	441a      	add	r2, r3
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801373a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801373e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013740:	2300      	movs	r3, #0
}
 8013742:	4618      	mov	r0, r3
 8013744:	3714      	adds	r7, #20
 8013746:	46bd      	mov	sp, r7
 8013748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801374c:	4770      	bx	lr
 801374e:	bf00      	nop
 8013750:	07ff8fbf 	.word	0x07ff8fbf
 8013754:	07ffbf8f 	.word	0x07ffbf8f

08013758 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8013758:	b480      	push	{r7}
 801375a:	b089      	sub	sp, #36	@ 0x24
 801375c:	af00      	add	r7, sp, #0
 801375e:	6078      	str	r0, [r7, #4]
 8013760:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8013762:	683b      	ldr	r3, [r7, #0]
 8013764:	7b1b      	ldrb	r3, [r3, #12]
 8013766:	2b00      	cmp	r3, #0
 8013768:	d17c      	bne.n	8013864 <USB_EPClearStall+0x10c>
  {
    if (ep->is_in != 0U)
 801376a:	683b      	ldr	r3, [r7, #0]
 801376c:	785b      	ldrb	r3, [r3, #1]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d03c      	beq.n	80137ec <USB_EPClearStall+0x94>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013772:	687a      	ldr	r2, [r7, #4]
 8013774:	683b      	ldr	r3, [r7, #0]
 8013776:	781b      	ldrb	r3, [r3, #0]
 8013778:	009b      	lsls	r3, r3, #2
 801377a:	4413      	add	r3, r2
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	613b      	str	r3, [r7, #16]
 8013780:	693b      	ldr	r3, [r7, #16]
 8013782:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013786:	2b00      	cmp	r3, #0
 8013788:	d013      	beq.n	80137b2 <USB_EPClearStall+0x5a>
 801378a:	687a      	ldr	r2, [r7, #4]
 801378c:	683b      	ldr	r3, [r7, #0]
 801378e:	781b      	ldrb	r3, [r3, #0]
 8013790:	009b      	lsls	r3, r3, #2
 8013792:	4413      	add	r3, r2
 8013794:	681a      	ldr	r2, [r3, #0]
 8013796:	4b37      	ldr	r3, [pc, #220]	@ (8013874 <USB_EPClearStall+0x11c>)
 8013798:	4013      	ands	r3, r2
 801379a:	60fb      	str	r3, [r7, #12]
 801379c:	687a      	ldr	r2, [r7, #4]
 801379e:	683b      	ldr	r3, [r7, #0]
 80137a0:	781b      	ldrb	r3, [r3, #0]
 80137a2:	009b      	lsls	r3, r3, #2
 80137a4:	441a      	add	r2, r3
 80137a6:	68fb      	ldr	r3, [r7, #12]
 80137a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80137ac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80137b0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80137b2:	683b      	ldr	r3, [r7, #0]
 80137b4:	78db      	ldrb	r3, [r3, #3]
 80137b6:	2b01      	cmp	r3, #1
 80137b8:	d054      	beq.n	8013864 <USB_EPClearStall+0x10c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80137ba:	687a      	ldr	r2, [r7, #4]
 80137bc:	683b      	ldr	r3, [r7, #0]
 80137be:	781b      	ldrb	r3, [r3, #0]
 80137c0:	009b      	lsls	r3, r3, #2
 80137c2:	4413      	add	r3, r2
 80137c4:	681a      	ldr	r2, [r3, #0]
 80137c6:	4b2c      	ldr	r3, [pc, #176]	@ (8013878 <USB_EPClearStall+0x120>)
 80137c8:	4013      	ands	r3, r2
 80137ca:	60bb      	str	r3, [r7, #8]
 80137cc:	68bb      	ldr	r3, [r7, #8]
 80137ce:	f083 0320 	eor.w	r3, r3, #32
 80137d2:	60bb      	str	r3, [r7, #8]
 80137d4:	687a      	ldr	r2, [r7, #4]
 80137d6:	683b      	ldr	r3, [r7, #0]
 80137d8:	781b      	ldrb	r3, [r3, #0]
 80137da:	009b      	lsls	r3, r3, #2
 80137dc:	441a      	add	r2, r3
 80137de:	68bb      	ldr	r3, [r7, #8]
 80137e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80137e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80137e8:	6013      	str	r3, [r2, #0]
 80137ea:	e03b      	b.n	8013864 <USB_EPClearStall+0x10c>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80137ec:	687a      	ldr	r2, [r7, #4]
 80137ee:	683b      	ldr	r3, [r7, #0]
 80137f0:	781b      	ldrb	r3, [r3, #0]
 80137f2:	009b      	lsls	r3, r3, #2
 80137f4:	4413      	add	r3, r2
 80137f6:	681b      	ldr	r3, [r3, #0]
 80137f8:	61fb      	str	r3, [r7, #28]
 80137fa:	69fb      	ldr	r3, [r7, #28]
 80137fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8013800:	2b00      	cmp	r3, #0
 8013802:	d013      	beq.n	801382c <USB_EPClearStall+0xd4>
 8013804:	687a      	ldr	r2, [r7, #4]
 8013806:	683b      	ldr	r3, [r7, #0]
 8013808:	781b      	ldrb	r3, [r3, #0]
 801380a:	009b      	lsls	r3, r3, #2
 801380c:	4413      	add	r3, r2
 801380e:	681a      	ldr	r2, [r3, #0]
 8013810:	4b18      	ldr	r3, [pc, #96]	@ (8013874 <USB_EPClearStall+0x11c>)
 8013812:	4013      	ands	r3, r2
 8013814:	61bb      	str	r3, [r7, #24]
 8013816:	687a      	ldr	r2, [r7, #4]
 8013818:	683b      	ldr	r3, [r7, #0]
 801381a:	781b      	ldrb	r3, [r3, #0]
 801381c:	009b      	lsls	r3, r3, #2
 801381e:	441a      	add	r2, r3
 8013820:	69bb      	ldr	r3, [r7, #24]
 8013822:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8013826:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801382a:	6013      	str	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801382c:	687a      	ldr	r2, [r7, #4]
 801382e:	683b      	ldr	r3, [r7, #0]
 8013830:	781b      	ldrb	r3, [r3, #0]
 8013832:	009b      	lsls	r3, r3, #2
 8013834:	4413      	add	r3, r2
 8013836:	681a      	ldr	r2, [r3, #0]
 8013838:	4b10      	ldr	r3, [pc, #64]	@ (801387c <USB_EPClearStall+0x124>)
 801383a:	4013      	ands	r3, r2
 801383c:	617b      	str	r3, [r7, #20]
 801383e:	697b      	ldr	r3, [r7, #20]
 8013840:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8013844:	617b      	str	r3, [r7, #20]
 8013846:	697b      	ldr	r3, [r7, #20]
 8013848:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 801384c:	617b      	str	r3, [r7, #20]
 801384e:	687a      	ldr	r2, [r7, #4]
 8013850:	683b      	ldr	r3, [r7, #0]
 8013852:	781b      	ldrb	r3, [r3, #0]
 8013854:	009b      	lsls	r3, r3, #2
 8013856:	441a      	add	r2, r3
 8013858:	697b      	ldr	r3, [r7, #20]
 801385a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801385e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013862:	6013      	str	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8013864:	2300      	movs	r3, #0
}
 8013866:	4618      	mov	r0, r3
 8013868:	3724      	adds	r7, #36	@ 0x24
 801386a:	46bd      	mov	sp, r7
 801386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013870:	4770      	bx	lr
 8013872:	bf00      	nop
 8013874:	07ff8f8f 	.word	0x07ff8f8f
 8013878:	07ff8fbf 	.word	0x07ff8fbf
 801387c:	07ffbf8f 	.word	0x07ffbf8f

08013880 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 8013880:	b480      	push	{r7}
 8013882:	b083      	sub	sp, #12
 8013884:	af00      	add	r7, sp, #0
 8013886:	6078      	str	r0, [r7, #4]
 8013888:	460b      	mov	r3, r1
 801388a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 801388c:	78fb      	ldrb	r3, [r7, #3]
 801388e:	2b00      	cmp	r3, #0
 8013890:	d102      	bne.n	8013898 <USB_SetDevAddress+0x18>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	2280      	movs	r2, #128	@ 0x80
 8013896:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8013898:	2300      	movs	r3, #0
}
 801389a:	4618      	mov	r0, r3
 801389c:	370c      	adds	r7, #12
 801389e:	46bd      	mov	sp, r7
 80138a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a4:	4770      	bx	lr

080138a6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 80138a6:	b480      	push	{r7}
 80138a8:	b083      	sub	sp, #12
 80138aa:	af00      	add	r7, sp, #0
 80138ac:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80138b2:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80138ba:	2300      	movs	r3, #0
}
 80138bc:	4618      	mov	r0, r3
 80138be:	370c      	adds	r7, #12
 80138c0:	46bd      	mov	sp, r7
 80138c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c6:	4770      	bx	lr

080138c8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 80138c8:	b480      	push	{r7}
 80138ca:	b083      	sub	sp, #12
 80138cc:	af00      	add	r7, sp, #0
 80138ce:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80138d4:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80138dc:	2300      	movs	r3, #0
}
 80138de:	4618      	mov	r0, r3
 80138e0:	370c      	adds	r7, #12
 80138e2:	46bd      	mov	sp, r7
 80138e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138e8:	4770      	bx	lr

080138ea <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 80138ea:	b480      	push	{r7}
 80138ec:	b085      	sub	sp, #20
 80138ee:	af00      	add	r7, sp, #0
 80138f0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80138f6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80138f8:	68fb      	ldr	r3, [r7, #12]
}
 80138fa:	4618      	mov	r0, r3
 80138fc:	3714      	adds	r7, #20
 80138fe:	46bd      	mov	sp, r7
 8013900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013904:	4770      	bx	lr

08013906 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8013906:	b480      	push	{r7}
 8013908:	b08b      	sub	sp, #44	@ 0x2c
 801390a:	af00      	add	r7, sp, #0
 801390c:	60f8      	str	r0, [r7, #12]
 801390e:	60b9      	str	r1, [r7, #8]
 8013910:	4611      	mov	r1, r2
 8013912:	461a      	mov	r2, r3
 8013914:	460b      	mov	r3, r1
 8013916:	80fb      	strh	r3, [r7, #6]
 8013918:	4613      	mov	r3, r2
 801391a:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 801391c:	88bb      	ldrh	r3, [r7, #4]
 801391e:	3303      	adds	r3, #3
 8013920:	089b      	lsrs	r3, r3, #2
 8013922:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 8013924:	88bb      	ldrh	r3, [r7, #4]
 8013926:	f003 0303 	and.w	r3, r3, #3
 801392a:	82fb      	strh	r3, [r7, #22]
  uint8_t *pBuf = pbUsrBuf;
 801392c:	68bb      	ldr	r3, [r7, #8]
 801392e:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 8013930:	8afb      	ldrh	r3, [r7, #22]
 8013932:	2b00      	cmp	r3, #0
 8013934:	d002      	beq.n	801393c <USB_WritePMA+0x36>
  {
    NbWords--;
 8013936:	69bb      	ldr	r3, [r7, #24]
 8013938:	3b01      	subs	r3, #1
 801393a:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 801393c:	88fb      	ldrh	r3, [r7, #6]
 801393e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8013942:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8013946:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 8013948:	69bb      	ldr	r3, [r7, #24]
 801394a:	623b      	str	r3, [r7, #32]
 801394c:	e015      	b.n	801397a <USB_WritePMA+0x74>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 801394e:	693b      	ldr	r3, [r7, #16]
 8013950:	681a      	ldr	r2, [r3, #0]
 8013952:	69fb      	ldr	r3, [r7, #28]
 8013954:	601a      	str	r2, [r3, #0]
    pdwVal++;
 8013956:	69fb      	ldr	r3, [r7, #28]
 8013958:	3304      	adds	r3, #4
 801395a:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 801395c:	693b      	ldr	r3, [r7, #16]
 801395e:	3301      	adds	r3, #1
 8013960:	613b      	str	r3, [r7, #16]
    pBuf++;
 8013962:	693b      	ldr	r3, [r7, #16]
 8013964:	3301      	adds	r3, #1
 8013966:	613b      	str	r3, [r7, #16]
    pBuf++;
 8013968:	693b      	ldr	r3, [r7, #16]
 801396a:	3301      	adds	r3, #1
 801396c:	613b      	str	r3, [r7, #16]
    pBuf++;
 801396e:	693b      	ldr	r3, [r7, #16]
 8013970:	3301      	adds	r3, #1
 8013972:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 8013974:	6a3b      	ldr	r3, [r7, #32]
 8013976:	3b01      	subs	r3, #1
 8013978:	623b      	str	r3, [r7, #32]
 801397a:	6a3b      	ldr	r3, [r7, #32]
 801397c:	2b00      	cmp	r3, #0
 801397e:	d1e6      	bne.n	801394e <USB_WritePMA+0x48>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 8013980:	8afb      	ldrh	r3, [r7, #22]
 8013982:	2b00      	cmp	r3, #0
 8013984:	d01a      	beq.n	80139bc <USB_WritePMA+0xb6>
  {
    WrVal = 0U;
 8013986:	2300      	movs	r3, #0
 8013988:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 801398a:	693b      	ldr	r3, [r7, #16]
 801398c:	781b      	ldrb	r3, [r3, #0]
 801398e:	461a      	mov	r2, r3
 8013990:	6a3b      	ldr	r3, [r7, #32]
 8013992:	00db      	lsls	r3, r3, #3
 8013994:	fa02 f303 	lsl.w	r3, r2, r3
 8013998:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801399a:	4313      	orrs	r3, r2
 801399c:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 801399e:	6a3b      	ldr	r3, [r7, #32]
 80139a0:	3301      	adds	r3, #1
 80139a2:	623b      	str	r3, [r7, #32]
      pBuf++;
 80139a4:	693b      	ldr	r3, [r7, #16]
 80139a6:	3301      	adds	r3, #1
 80139a8:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 80139aa:	8afb      	ldrh	r3, [r7, #22]
 80139ac:	3b01      	subs	r3, #1
 80139ae:	82fb      	strh	r3, [r7, #22]
    } while (remaining_bytes != 0U);
 80139b0:	8afb      	ldrh	r3, [r7, #22]
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d1e9      	bne.n	801398a <USB_WritePMA+0x84>

    *pdwVal = WrVal;
 80139b6:	69fb      	ldr	r3, [r7, #28]
 80139b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80139ba:	601a      	str	r2, [r3, #0]
  }
}
 80139bc:	bf00      	nop
 80139be:	372c      	adds	r7, #44	@ 0x2c
 80139c0:	46bd      	mov	sp, r7
 80139c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139c6:	4770      	bx	lr

080139c8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80139c8:	b480      	push	{r7}
 80139ca:	b08b      	sub	sp, #44	@ 0x2c
 80139cc:	af00      	add	r7, sp, #0
 80139ce:	60f8      	str	r0, [r7, #12]
 80139d0:	60b9      	str	r1, [r7, #8]
 80139d2:	4611      	mov	r1, r2
 80139d4:	461a      	mov	r2, r3
 80139d6:	460b      	mov	r3, r1
 80139d8:	80fb      	strh	r3, [r7, #6]
 80139da:	4613      	mov	r3, r2
 80139dc:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 80139de:	88bb      	ldrh	r3, [r7, #4]
 80139e0:	3303      	adds	r3, #3
 80139e2:	089b      	lsrs	r3, r3, #2
 80139e4:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 80139e6:	88bb      	ldrh	r3, [r7, #4]
 80139e8:	f003 0303 	and.w	r3, r3, #3
 80139ec:	837b      	strh	r3, [r7, #26]
  uint8_t *pBuf = pbUsrBuf;
 80139ee:	68bb      	ldr	r3, [r7, #8]
 80139f0:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 80139f2:	88fb      	ldrh	r3, [r7, #6]
 80139f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80139f8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80139fc:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 80139fe:	8b7b      	ldrh	r3, [r7, #26]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d002      	beq.n	8013a0a <USB_ReadPMA+0x42>
  {
    NbWords--;
 8013a04:	69fb      	ldr	r3, [r7, #28]
 8013a06:	3b01      	subs	r3, #1
 8013a08:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 8013a0a:	69fb      	ldr	r3, [r7, #28]
 8013a0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8013a0e:	e015      	b.n	8013a3c <USB_ReadPMA+0x74>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 8013a10:	6a3b      	ldr	r3, [r7, #32]
 8013a12:	681a      	ldr	r2, [r3, #0]
 8013a14:	697b      	ldr	r3, [r7, #20]
 8013a16:	601a      	str	r2, [r3, #0]

    pdwVal++;
 8013a18:	6a3b      	ldr	r3, [r7, #32]
 8013a1a:	3304      	adds	r3, #4
 8013a1c:	623b      	str	r3, [r7, #32]
    pBuf++;
 8013a1e:	697b      	ldr	r3, [r7, #20]
 8013a20:	3301      	adds	r3, #1
 8013a22:	617b      	str	r3, [r7, #20]
    pBuf++;
 8013a24:	697b      	ldr	r3, [r7, #20]
 8013a26:	3301      	adds	r3, #1
 8013a28:	617b      	str	r3, [r7, #20]
    pBuf++;
 8013a2a:	697b      	ldr	r3, [r7, #20]
 8013a2c:	3301      	adds	r3, #1
 8013a2e:	617b      	str	r3, [r7, #20]
    pBuf++;
 8013a30:	697b      	ldr	r3, [r7, #20]
 8013a32:	3301      	adds	r3, #1
 8013a34:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 8013a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a38:	3b01      	subs	r3, #1
 8013a3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8013a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d1e6      	bne.n	8013a10 <USB_ReadPMA+0x48>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 8013a42:	8b7b      	ldrh	r3, [r7, #26]
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d017      	beq.n	8013a78 <USB_ReadPMA+0xb0>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 8013a48:	6a3b      	ldr	r3, [r7, #32]
 8013a4a:	681b      	ldr	r3, [r3, #0]
 8013a4c:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 8013a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a50:	b2db      	uxtb	r3, r3
 8013a52:	00db      	lsls	r3, r3, #3
 8013a54:	693a      	ldr	r2, [r7, #16]
 8013a56:	fa22 f303 	lsr.w	r3, r2, r3
 8013a5a:	b2da      	uxtb	r2, r3
 8013a5c:	697b      	ldr	r3, [r7, #20]
 8013a5e:	701a      	strb	r2, [r3, #0]
      count++;
 8013a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a62:	3301      	adds	r3, #1
 8013a64:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 8013a66:	697b      	ldr	r3, [r7, #20]
 8013a68:	3301      	adds	r3, #1
 8013a6a:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 8013a6c:	8b7b      	ldrh	r3, [r7, #26]
 8013a6e:	3b01      	subs	r3, #1
 8013a70:	837b      	strh	r3, [r7, #26]
    } while (remaining_bytes != 0U);
 8013a72:	8b7b      	ldrh	r3, [r7, #26]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d1ea      	bne.n	8013a4e <USB_ReadPMA+0x86>
  }
}
 8013a78:	bf00      	nop
 8013a7a:	372c      	adds	r7, #44	@ 0x2c
 8013a7c:	46bd      	mov	sp, r7
 8013a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a82:	4770      	bx	lr

08013a84 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013a84:	b580      	push	{r7, lr}
 8013a86:	b084      	sub	sp, #16
 8013a88:	af00      	add	r7, sp, #0
 8013a8a:	6078      	str	r0, [r7, #4]
 8013a8c:	460b      	mov	r3, r1
 8013a8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8013a90:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8013a94:	f001 f8fa 	bl	8014c8c <USBD_static_malloc>
 8013a98:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d109      	bne.n	8013ab4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	32b0      	adds	r2, #176	@ 0xb0
 8013aaa:	2100      	movs	r1, #0
 8013aac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8013ab0:	2302      	movs	r3, #2
 8013ab2:	e0d4      	b.n	8013c5e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8013ab4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8013ab8:	2100      	movs	r1, #0
 8013aba:	68f8      	ldr	r0, [r7, #12]
 8013abc:	f002 feda 	bl	8016874 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	32b0      	adds	r2, #176	@ 0xb0
 8013aca:	68f9      	ldr	r1, [r7, #12]
 8013acc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	32b0      	adds	r2, #176	@ 0xb0
 8013ada:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	7c1b      	ldrb	r3, [r3, #16]
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d138      	bne.n	8013b5e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8013aec:	4b5e      	ldr	r3, [pc, #376]	@ (8013c68 <USBD_CDC_Init+0x1e4>)
 8013aee:	7819      	ldrb	r1, [r3, #0]
 8013af0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013af4:	2202      	movs	r2, #2
 8013af6:	6878      	ldr	r0, [r7, #4]
 8013af8:	f000 ffcf 	bl	8014a9a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8013afc:	4b5a      	ldr	r3, [pc, #360]	@ (8013c68 <USBD_CDC_Init+0x1e4>)
 8013afe:	781b      	ldrb	r3, [r3, #0]
 8013b00:	f003 020f 	and.w	r2, r3, #15
 8013b04:	6879      	ldr	r1, [r7, #4]
 8013b06:	4613      	mov	r3, r2
 8013b08:	009b      	lsls	r3, r3, #2
 8013b0a:	4413      	add	r3, r2
 8013b0c:	009b      	lsls	r3, r3, #2
 8013b0e:	440b      	add	r3, r1
 8013b10:	3324      	adds	r3, #36	@ 0x24
 8013b12:	2201      	movs	r2, #1
 8013b14:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8013b16:	4b55      	ldr	r3, [pc, #340]	@ (8013c6c <USBD_CDC_Init+0x1e8>)
 8013b18:	7819      	ldrb	r1, [r3, #0]
 8013b1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013b1e:	2202      	movs	r2, #2
 8013b20:	6878      	ldr	r0, [r7, #4]
 8013b22:	f000 ffba 	bl	8014a9a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8013b26:	4b51      	ldr	r3, [pc, #324]	@ (8013c6c <USBD_CDC_Init+0x1e8>)
 8013b28:	781b      	ldrb	r3, [r3, #0]
 8013b2a:	f003 020f 	and.w	r2, r3, #15
 8013b2e:	6879      	ldr	r1, [r7, #4]
 8013b30:	4613      	mov	r3, r2
 8013b32:	009b      	lsls	r3, r3, #2
 8013b34:	4413      	add	r3, r2
 8013b36:	009b      	lsls	r3, r3, #2
 8013b38:	440b      	add	r3, r1
 8013b3a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8013b3e:	2201      	movs	r2, #1
 8013b40:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8013b42:	4b4b      	ldr	r3, [pc, #300]	@ (8013c70 <USBD_CDC_Init+0x1ec>)
 8013b44:	781b      	ldrb	r3, [r3, #0]
 8013b46:	f003 020f 	and.w	r2, r3, #15
 8013b4a:	6879      	ldr	r1, [r7, #4]
 8013b4c:	4613      	mov	r3, r2
 8013b4e:	009b      	lsls	r3, r3, #2
 8013b50:	4413      	add	r3, r2
 8013b52:	009b      	lsls	r3, r3, #2
 8013b54:	440b      	add	r3, r1
 8013b56:	3326      	adds	r3, #38	@ 0x26
 8013b58:	2210      	movs	r2, #16
 8013b5a:	801a      	strh	r2, [r3, #0]
 8013b5c:	e035      	b.n	8013bca <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8013b5e:	4b42      	ldr	r3, [pc, #264]	@ (8013c68 <USBD_CDC_Init+0x1e4>)
 8013b60:	7819      	ldrb	r1, [r3, #0]
 8013b62:	2340      	movs	r3, #64	@ 0x40
 8013b64:	2202      	movs	r2, #2
 8013b66:	6878      	ldr	r0, [r7, #4]
 8013b68:	f000 ff97 	bl	8014a9a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8013b6c:	4b3e      	ldr	r3, [pc, #248]	@ (8013c68 <USBD_CDC_Init+0x1e4>)
 8013b6e:	781b      	ldrb	r3, [r3, #0]
 8013b70:	f003 020f 	and.w	r2, r3, #15
 8013b74:	6879      	ldr	r1, [r7, #4]
 8013b76:	4613      	mov	r3, r2
 8013b78:	009b      	lsls	r3, r3, #2
 8013b7a:	4413      	add	r3, r2
 8013b7c:	009b      	lsls	r3, r3, #2
 8013b7e:	440b      	add	r3, r1
 8013b80:	3324      	adds	r3, #36	@ 0x24
 8013b82:	2201      	movs	r2, #1
 8013b84:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8013b86:	4b39      	ldr	r3, [pc, #228]	@ (8013c6c <USBD_CDC_Init+0x1e8>)
 8013b88:	7819      	ldrb	r1, [r3, #0]
 8013b8a:	2340      	movs	r3, #64	@ 0x40
 8013b8c:	2202      	movs	r2, #2
 8013b8e:	6878      	ldr	r0, [r7, #4]
 8013b90:	f000 ff83 	bl	8014a9a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8013b94:	4b35      	ldr	r3, [pc, #212]	@ (8013c6c <USBD_CDC_Init+0x1e8>)
 8013b96:	781b      	ldrb	r3, [r3, #0]
 8013b98:	f003 020f 	and.w	r2, r3, #15
 8013b9c:	6879      	ldr	r1, [r7, #4]
 8013b9e:	4613      	mov	r3, r2
 8013ba0:	009b      	lsls	r3, r3, #2
 8013ba2:	4413      	add	r3, r2
 8013ba4:	009b      	lsls	r3, r3, #2
 8013ba6:	440b      	add	r3, r1
 8013ba8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8013bac:	2201      	movs	r2, #1
 8013bae:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8013bb0:	4b2f      	ldr	r3, [pc, #188]	@ (8013c70 <USBD_CDC_Init+0x1ec>)
 8013bb2:	781b      	ldrb	r3, [r3, #0]
 8013bb4:	f003 020f 	and.w	r2, r3, #15
 8013bb8:	6879      	ldr	r1, [r7, #4]
 8013bba:	4613      	mov	r3, r2
 8013bbc:	009b      	lsls	r3, r3, #2
 8013bbe:	4413      	add	r3, r2
 8013bc0:	009b      	lsls	r3, r3, #2
 8013bc2:	440b      	add	r3, r1
 8013bc4:	3326      	adds	r3, #38	@ 0x26
 8013bc6:	2210      	movs	r2, #16
 8013bc8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8013bca:	4b29      	ldr	r3, [pc, #164]	@ (8013c70 <USBD_CDC_Init+0x1ec>)
 8013bcc:	7819      	ldrb	r1, [r3, #0]
 8013bce:	2308      	movs	r3, #8
 8013bd0:	2203      	movs	r2, #3
 8013bd2:	6878      	ldr	r0, [r7, #4]
 8013bd4:	f000 ff61 	bl	8014a9a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8013bd8:	4b25      	ldr	r3, [pc, #148]	@ (8013c70 <USBD_CDC_Init+0x1ec>)
 8013bda:	781b      	ldrb	r3, [r3, #0]
 8013bdc:	f003 020f 	and.w	r2, r3, #15
 8013be0:	6879      	ldr	r1, [r7, #4]
 8013be2:	4613      	mov	r3, r2
 8013be4:	009b      	lsls	r3, r3, #2
 8013be6:	4413      	add	r3, r2
 8013be8:	009b      	lsls	r3, r3, #2
 8013bea:	440b      	add	r3, r1
 8013bec:	3324      	adds	r3, #36	@ 0x24
 8013bee:	2201      	movs	r2, #1
 8013bf0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	2200      	movs	r2, #0
 8013bf6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013c00:	687a      	ldr	r2, [r7, #4]
 8013c02:	33b0      	adds	r3, #176	@ 0xb0
 8013c04:	009b      	lsls	r3, r3, #2
 8013c06:	4413      	add	r3, r2
 8013c08:	685b      	ldr	r3, [r3, #4]
 8013c0a:	681b      	ldr	r3, [r3, #0]
 8013c0c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	2200      	movs	r2, #0
 8013c12:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	2200      	movs	r2, #0
 8013c1a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d101      	bne.n	8013c2c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8013c28:	2302      	movs	r3, #2
 8013c2a:	e018      	b.n	8013c5e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	7c1b      	ldrb	r3, [r3, #16]
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d10a      	bne.n	8013c4a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013c34:	4b0d      	ldr	r3, [pc, #52]	@ (8013c6c <USBD_CDC_Init+0x1e8>)
 8013c36:	7819      	ldrb	r1, [r3, #0]
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013c3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013c42:	6878      	ldr	r0, [r7, #4]
 8013c44:	f000 fff4 	bl	8014c30 <USBD_LL_PrepareReceive>
 8013c48:	e008      	b.n	8013c5c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013c4a:	4b08      	ldr	r3, [pc, #32]	@ (8013c6c <USBD_CDC_Init+0x1e8>)
 8013c4c:	7819      	ldrb	r1, [r3, #0]
 8013c4e:	68fb      	ldr	r3, [r7, #12]
 8013c50:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013c54:	2340      	movs	r3, #64	@ 0x40
 8013c56:	6878      	ldr	r0, [r7, #4]
 8013c58:	f000 ffea 	bl	8014c30 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013c5c:	2300      	movs	r3, #0
}
 8013c5e:	4618      	mov	r0, r3
 8013c60:	3710      	adds	r7, #16
 8013c62:	46bd      	mov	sp, r7
 8013c64:	bd80      	pop	{r7, pc}
 8013c66:	bf00      	nop
 8013c68:	200000cf 	.word	0x200000cf
 8013c6c:	200000d0 	.word	0x200000d0
 8013c70:	200000d1 	.word	0x200000d1

08013c74 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013c74:	b580      	push	{r7, lr}
 8013c76:	b082      	sub	sp, #8
 8013c78:	af00      	add	r7, sp, #0
 8013c7a:	6078      	str	r0, [r7, #4]
 8013c7c:	460b      	mov	r3, r1
 8013c7e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8013c80:	4b3a      	ldr	r3, [pc, #232]	@ (8013d6c <USBD_CDC_DeInit+0xf8>)
 8013c82:	781b      	ldrb	r3, [r3, #0]
 8013c84:	4619      	mov	r1, r3
 8013c86:	6878      	ldr	r0, [r7, #4]
 8013c88:	f000 ff27 	bl	8014ada <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8013c8c:	4b37      	ldr	r3, [pc, #220]	@ (8013d6c <USBD_CDC_DeInit+0xf8>)
 8013c8e:	781b      	ldrb	r3, [r3, #0]
 8013c90:	f003 020f 	and.w	r2, r3, #15
 8013c94:	6879      	ldr	r1, [r7, #4]
 8013c96:	4613      	mov	r3, r2
 8013c98:	009b      	lsls	r3, r3, #2
 8013c9a:	4413      	add	r3, r2
 8013c9c:	009b      	lsls	r3, r3, #2
 8013c9e:	440b      	add	r3, r1
 8013ca0:	3324      	adds	r3, #36	@ 0x24
 8013ca2:	2200      	movs	r2, #0
 8013ca4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8013ca6:	4b32      	ldr	r3, [pc, #200]	@ (8013d70 <USBD_CDC_DeInit+0xfc>)
 8013ca8:	781b      	ldrb	r3, [r3, #0]
 8013caa:	4619      	mov	r1, r3
 8013cac:	6878      	ldr	r0, [r7, #4]
 8013cae:	f000 ff14 	bl	8014ada <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8013cb2:	4b2f      	ldr	r3, [pc, #188]	@ (8013d70 <USBD_CDC_DeInit+0xfc>)
 8013cb4:	781b      	ldrb	r3, [r3, #0]
 8013cb6:	f003 020f 	and.w	r2, r3, #15
 8013cba:	6879      	ldr	r1, [r7, #4]
 8013cbc:	4613      	mov	r3, r2
 8013cbe:	009b      	lsls	r3, r3, #2
 8013cc0:	4413      	add	r3, r2
 8013cc2:	009b      	lsls	r3, r3, #2
 8013cc4:	440b      	add	r3, r1
 8013cc6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8013cca:	2200      	movs	r2, #0
 8013ccc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8013cce:	4b29      	ldr	r3, [pc, #164]	@ (8013d74 <USBD_CDC_DeInit+0x100>)
 8013cd0:	781b      	ldrb	r3, [r3, #0]
 8013cd2:	4619      	mov	r1, r3
 8013cd4:	6878      	ldr	r0, [r7, #4]
 8013cd6:	f000 ff00 	bl	8014ada <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8013cda:	4b26      	ldr	r3, [pc, #152]	@ (8013d74 <USBD_CDC_DeInit+0x100>)
 8013cdc:	781b      	ldrb	r3, [r3, #0]
 8013cde:	f003 020f 	and.w	r2, r3, #15
 8013ce2:	6879      	ldr	r1, [r7, #4]
 8013ce4:	4613      	mov	r3, r2
 8013ce6:	009b      	lsls	r3, r3, #2
 8013ce8:	4413      	add	r3, r2
 8013cea:	009b      	lsls	r3, r3, #2
 8013cec:	440b      	add	r3, r1
 8013cee:	3324      	adds	r3, #36	@ 0x24
 8013cf0:	2200      	movs	r2, #0
 8013cf2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8013cf4:	4b1f      	ldr	r3, [pc, #124]	@ (8013d74 <USBD_CDC_DeInit+0x100>)
 8013cf6:	781b      	ldrb	r3, [r3, #0]
 8013cf8:	f003 020f 	and.w	r2, r3, #15
 8013cfc:	6879      	ldr	r1, [r7, #4]
 8013cfe:	4613      	mov	r3, r2
 8013d00:	009b      	lsls	r3, r3, #2
 8013d02:	4413      	add	r3, r2
 8013d04:	009b      	lsls	r3, r3, #2
 8013d06:	440b      	add	r3, r1
 8013d08:	3326      	adds	r3, #38	@ 0x26
 8013d0a:	2200      	movs	r2, #0
 8013d0c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	32b0      	adds	r2, #176	@ 0xb0
 8013d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d01f      	beq.n	8013d60 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013d26:	687a      	ldr	r2, [r7, #4]
 8013d28:	33b0      	adds	r3, #176	@ 0xb0
 8013d2a:	009b      	lsls	r3, r3, #2
 8013d2c:	4413      	add	r3, r2
 8013d2e:	685b      	ldr	r3, [r3, #4]
 8013d30:	685b      	ldr	r3, [r3, #4]
 8013d32:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	32b0      	adds	r2, #176	@ 0xb0
 8013d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d42:	4618      	mov	r0, r3
 8013d44:	f000 ffb0 	bl	8014ca8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	32b0      	adds	r2, #176	@ 0xb0
 8013d52:	2100      	movs	r1, #0
 8013d54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	2200      	movs	r2, #0
 8013d5c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8013d60:	2300      	movs	r3, #0
}
 8013d62:	4618      	mov	r0, r3
 8013d64:	3708      	adds	r7, #8
 8013d66:	46bd      	mov	sp, r7
 8013d68:	bd80      	pop	{r7, pc}
 8013d6a:	bf00      	nop
 8013d6c:	200000cf 	.word	0x200000cf
 8013d70:	200000d0 	.word	0x200000d0
 8013d74:	200000d1 	.word	0x200000d1

08013d78 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8013d78:	b580      	push	{r7, lr}
 8013d7a:	b086      	sub	sp, #24
 8013d7c:	af00      	add	r7, sp, #0
 8013d7e:	6078      	str	r0, [r7, #4]
 8013d80:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	32b0      	adds	r2, #176	@ 0xb0
 8013d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d90:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8013d92:	2300      	movs	r3, #0
 8013d94:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8013d96:	2300      	movs	r3, #0
 8013d98:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8013d9a:	2300      	movs	r3, #0
 8013d9c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8013d9e:	693b      	ldr	r3, [r7, #16]
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d101      	bne.n	8013da8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8013da4:	2303      	movs	r3, #3
 8013da6:	e0bf      	b.n	8013f28 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013da8:	683b      	ldr	r3, [r7, #0]
 8013daa:	781b      	ldrb	r3, [r3, #0]
 8013dac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d050      	beq.n	8013e56 <USBD_CDC_Setup+0xde>
 8013db4:	2b20      	cmp	r3, #32
 8013db6:	f040 80af 	bne.w	8013f18 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8013dba:	683b      	ldr	r3, [r7, #0]
 8013dbc:	88db      	ldrh	r3, [r3, #6]
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d03a      	beq.n	8013e38 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8013dc2:	683b      	ldr	r3, [r7, #0]
 8013dc4:	781b      	ldrb	r3, [r3, #0]
 8013dc6:	b25b      	sxtb	r3, r3
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	da1b      	bge.n	8013e04 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013dd2:	687a      	ldr	r2, [r7, #4]
 8013dd4:	33b0      	adds	r3, #176	@ 0xb0
 8013dd6:	009b      	lsls	r3, r3, #2
 8013dd8:	4413      	add	r3, r2
 8013dda:	685b      	ldr	r3, [r3, #4]
 8013ddc:	689b      	ldr	r3, [r3, #8]
 8013dde:	683a      	ldr	r2, [r7, #0]
 8013de0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8013de2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8013de4:	683a      	ldr	r2, [r7, #0]
 8013de6:	88d2      	ldrh	r2, [r2, #6]
 8013de8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8013dea:	683b      	ldr	r3, [r7, #0]
 8013dec:	88db      	ldrh	r3, [r3, #6]
 8013dee:	2b07      	cmp	r3, #7
 8013df0:	bf28      	it	cs
 8013df2:	2307      	movcs	r3, #7
 8013df4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8013df6:	693b      	ldr	r3, [r7, #16]
 8013df8:	89fa      	ldrh	r2, [r7, #14]
 8013dfa:	4619      	mov	r1, r3
 8013dfc:	6878      	ldr	r0, [r7, #4]
 8013dfe:	f002 fa46 	bl	801628e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8013e02:	e090      	b.n	8013f26 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8013e04:	683b      	ldr	r3, [r7, #0]
 8013e06:	785a      	ldrb	r2, [r3, #1]
 8013e08:	693b      	ldr	r3, [r7, #16]
 8013e0a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8013e0e:	683b      	ldr	r3, [r7, #0]
 8013e10:	88db      	ldrh	r3, [r3, #6]
 8013e12:	2b3f      	cmp	r3, #63	@ 0x3f
 8013e14:	d803      	bhi.n	8013e1e <USBD_CDC_Setup+0xa6>
 8013e16:	683b      	ldr	r3, [r7, #0]
 8013e18:	88db      	ldrh	r3, [r3, #6]
 8013e1a:	b2da      	uxtb	r2, r3
 8013e1c:	e000      	b.n	8013e20 <USBD_CDC_Setup+0xa8>
 8013e1e:	2240      	movs	r2, #64	@ 0x40
 8013e20:	693b      	ldr	r3, [r7, #16]
 8013e22:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8013e26:	6939      	ldr	r1, [r7, #16]
 8013e28:	693b      	ldr	r3, [r7, #16]
 8013e2a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8013e2e:	461a      	mov	r2, r3
 8013e30:	6878      	ldr	r0, [r7, #4]
 8013e32:	f002 fa58 	bl	80162e6 <USBD_CtlPrepareRx>
      break;
 8013e36:	e076      	b.n	8013f26 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013e3e:	687a      	ldr	r2, [r7, #4]
 8013e40:	33b0      	adds	r3, #176	@ 0xb0
 8013e42:	009b      	lsls	r3, r3, #2
 8013e44:	4413      	add	r3, r2
 8013e46:	685b      	ldr	r3, [r3, #4]
 8013e48:	689b      	ldr	r3, [r3, #8]
 8013e4a:	683a      	ldr	r2, [r7, #0]
 8013e4c:	7850      	ldrb	r0, [r2, #1]
 8013e4e:	2200      	movs	r2, #0
 8013e50:	6839      	ldr	r1, [r7, #0]
 8013e52:	4798      	blx	r3
      break;
 8013e54:	e067      	b.n	8013f26 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013e56:	683b      	ldr	r3, [r7, #0]
 8013e58:	785b      	ldrb	r3, [r3, #1]
 8013e5a:	2b0b      	cmp	r3, #11
 8013e5c:	d851      	bhi.n	8013f02 <USBD_CDC_Setup+0x18a>
 8013e5e:	a201      	add	r2, pc, #4	@ (adr r2, 8013e64 <USBD_CDC_Setup+0xec>)
 8013e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e64:	08013e95 	.word	0x08013e95
 8013e68:	08013f11 	.word	0x08013f11
 8013e6c:	08013f03 	.word	0x08013f03
 8013e70:	08013f03 	.word	0x08013f03
 8013e74:	08013f03 	.word	0x08013f03
 8013e78:	08013f03 	.word	0x08013f03
 8013e7c:	08013f03 	.word	0x08013f03
 8013e80:	08013f03 	.word	0x08013f03
 8013e84:	08013f03 	.word	0x08013f03
 8013e88:	08013f03 	.word	0x08013f03
 8013e8c:	08013ebf 	.word	0x08013ebf
 8013e90:	08013ee9 	.word	0x08013ee9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013e9a:	b2db      	uxtb	r3, r3
 8013e9c:	2b03      	cmp	r3, #3
 8013e9e:	d107      	bne.n	8013eb0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8013ea0:	f107 030a 	add.w	r3, r7, #10
 8013ea4:	2202      	movs	r2, #2
 8013ea6:	4619      	mov	r1, r3
 8013ea8:	6878      	ldr	r0, [r7, #4]
 8013eaa:	f002 f9f0 	bl	801628e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013eae:	e032      	b.n	8013f16 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8013eb0:	6839      	ldr	r1, [r7, #0]
 8013eb2:	6878      	ldr	r0, [r7, #4]
 8013eb4:	f002 f86d 	bl	8015f92 <USBD_CtlError>
            ret = USBD_FAIL;
 8013eb8:	2303      	movs	r3, #3
 8013eba:	75fb      	strb	r3, [r7, #23]
          break;
 8013ebc:	e02b      	b.n	8013f16 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013ec4:	b2db      	uxtb	r3, r3
 8013ec6:	2b03      	cmp	r3, #3
 8013ec8:	d107      	bne.n	8013eda <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8013eca:	f107 030d 	add.w	r3, r7, #13
 8013ece:	2201      	movs	r2, #1
 8013ed0:	4619      	mov	r1, r3
 8013ed2:	6878      	ldr	r0, [r7, #4]
 8013ed4:	f002 f9db 	bl	801628e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013ed8:	e01d      	b.n	8013f16 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8013eda:	6839      	ldr	r1, [r7, #0]
 8013edc:	6878      	ldr	r0, [r7, #4]
 8013ede:	f002 f858 	bl	8015f92 <USBD_CtlError>
            ret = USBD_FAIL;
 8013ee2:	2303      	movs	r3, #3
 8013ee4:	75fb      	strb	r3, [r7, #23]
          break;
 8013ee6:	e016      	b.n	8013f16 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013eee:	b2db      	uxtb	r3, r3
 8013ef0:	2b03      	cmp	r3, #3
 8013ef2:	d00f      	beq.n	8013f14 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8013ef4:	6839      	ldr	r1, [r7, #0]
 8013ef6:	6878      	ldr	r0, [r7, #4]
 8013ef8:	f002 f84b 	bl	8015f92 <USBD_CtlError>
            ret = USBD_FAIL;
 8013efc:	2303      	movs	r3, #3
 8013efe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8013f00:	e008      	b.n	8013f14 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8013f02:	6839      	ldr	r1, [r7, #0]
 8013f04:	6878      	ldr	r0, [r7, #4]
 8013f06:	f002 f844 	bl	8015f92 <USBD_CtlError>
          ret = USBD_FAIL;
 8013f0a:	2303      	movs	r3, #3
 8013f0c:	75fb      	strb	r3, [r7, #23]
          break;
 8013f0e:	e002      	b.n	8013f16 <USBD_CDC_Setup+0x19e>
          break;
 8013f10:	bf00      	nop
 8013f12:	e008      	b.n	8013f26 <USBD_CDC_Setup+0x1ae>
          break;
 8013f14:	bf00      	nop
      }
      break;
 8013f16:	e006      	b.n	8013f26 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8013f18:	6839      	ldr	r1, [r7, #0]
 8013f1a:	6878      	ldr	r0, [r7, #4]
 8013f1c:	f002 f839 	bl	8015f92 <USBD_CtlError>
      ret = USBD_FAIL;
 8013f20:	2303      	movs	r3, #3
 8013f22:	75fb      	strb	r3, [r7, #23]
      break;
 8013f24:	bf00      	nop
  }

  return (uint8_t)ret;
 8013f26:	7dfb      	ldrb	r3, [r7, #23]
}
 8013f28:	4618      	mov	r0, r3
 8013f2a:	3718      	adds	r7, #24
 8013f2c:	46bd      	mov	sp, r7
 8013f2e:	bd80      	pop	{r7, pc}

08013f30 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013f30:	b580      	push	{r7, lr}
 8013f32:	b084      	sub	sp, #16
 8013f34:	af00      	add	r7, sp, #0
 8013f36:	6078      	str	r0, [r7, #4]
 8013f38:	460b      	mov	r3, r1
 8013f3a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013f42:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	32b0      	adds	r2, #176	@ 0xb0
 8013f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d101      	bne.n	8013f5a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8013f56:	2303      	movs	r3, #3
 8013f58:	e065      	b.n	8014026 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	32b0      	adds	r2, #176	@ 0xb0
 8013f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f68:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8013f6a:	78fb      	ldrb	r3, [r7, #3]
 8013f6c:	f003 020f 	and.w	r2, r3, #15
 8013f70:	6879      	ldr	r1, [r7, #4]
 8013f72:	4613      	mov	r3, r2
 8013f74:	009b      	lsls	r3, r3, #2
 8013f76:	4413      	add	r3, r2
 8013f78:	009b      	lsls	r3, r3, #2
 8013f7a:	440b      	add	r3, r1
 8013f7c:	3318      	adds	r3, #24
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d02f      	beq.n	8013fe4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8013f84:	78fb      	ldrb	r3, [r7, #3]
 8013f86:	f003 020f 	and.w	r2, r3, #15
 8013f8a:	6879      	ldr	r1, [r7, #4]
 8013f8c:	4613      	mov	r3, r2
 8013f8e:	009b      	lsls	r3, r3, #2
 8013f90:	4413      	add	r3, r2
 8013f92:	009b      	lsls	r3, r3, #2
 8013f94:	440b      	add	r3, r1
 8013f96:	3318      	adds	r3, #24
 8013f98:	681a      	ldr	r2, [r3, #0]
 8013f9a:	78fb      	ldrb	r3, [r7, #3]
 8013f9c:	f003 010f 	and.w	r1, r3, #15
 8013fa0:	68f8      	ldr	r0, [r7, #12]
 8013fa2:	460b      	mov	r3, r1
 8013fa4:	009b      	lsls	r3, r3, #2
 8013fa6:	440b      	add	r3, r1
 8013fa8:	00db      	lsls	r3, r3, #3
 8013faa:	4403      	add	r3, r0
 8013fac:	3324      	adds	r3, #36	@ 0x24
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	fbb2 f1f3 	udiv	r1, r2, r3
 8013fb4:	fb01 f303 	mul.w	r3, r1, r3
 8013fb8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d112      	bne.n	8013fe4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8013fbe:	78fb      	ldrb	r3, [r7, #3]
 8013fc0:	f003 020f 	and.w	r2, r3, #15
 8013fc4:	6879      	ldr	r1, [r7, #4]
 8013fc6:	4613      	mov	r3, r2
 8013fc8:	009b      	lsls	r3, r3, #2
 8013fca:	4413      	add	r3, r2
 8013fcc:	009b      	lsls	r3, r3, #2
 8013fce:	440b      	add	r3, r1
 8013fd0:	3318      	adds	r3, #24
 8013fd2:	2200      	movs	r2, #0
 8013fd4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8013fd6:	78f9      	ldrb	r1, [r7, #3]
 8013fd8:	2300      	movs	r3, #0
 8013fda:	2200      	movs	r2, #0
 8013fdc:	6878      	ldr	r0, [r7, #4]
 8013fde:	f000 fe0c 	bl	8014bfa <USBD_LL_Transmit>
 8013fe2:	e01f      	b.n	8014024 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8013fe4:	68bb      	ldr	r3, [r7, #8]
 8013fe6:	2200      	movs	r2, #0
 8013fe8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013ff2:	687a      	ldr	r2, [r7, #4]
 8013ff4:	33b0      	adds	r3, #176	@ 0xb0
 8013ff6:	009b      	lsls	r3, r3, #2
 8013ff8:	4413      	add	r3, r2
 8013ffa:	685b      	ldr	r3, [r3, #4]
 8013ffc:	691b      	ldr	r3, [r3, #16]
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d010      	beq.n	8014024 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014008:	687a      	ldr	r2, [r7, #4]
 801400a:	33b0      	adds	r3, #176	@ 0xb0
 801400c:	009b      	lsls	r3, r3, #2
 801400e:	4413      	add	r3, r2
 8014010:	685b      	ldr	r3, [r3, #4]
 8014012:	691b      	ldr	r3, [r3, #16]
 8014014:	68ba      	ldr	r2, [r7, #8]
 8014016:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 801401a:	68ba      	ldr	r2, [r7, #8]
 801401c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8014020:	78fa      	ldrb	r2, [r7, #3]
 8014022:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8014024:	2300      	movs	r3, #0
}
 8014026:	4618      	mov	r0, r3
 8014028:	3710      	adds	r7, #16
 801402a:	46bd      	mov	sp, r7
 801402c:	bd80      	pop	{r7, pc}

0801402e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801402e:	b580      	push	{r7, lr}
 8014030:	b084      	sub	sp, #16
 8014032:	af00      	add	r7, sp, #0
 8014034:	6078      	str	r0, [r7, #4]
 8014036:	460b      	mov	r3, r1
 8014038:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	32b0      	adds	r2, #176	@ 0xb0
 8014044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014048:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	32b0      	adds	r2, #176	@ 0xb0
 8014054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014058:	2b00      	cmp	r3, #0
 801405a:	d101      	bne.n	8014060 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 801405c:	2303      	movs	r3, #3
 801405e:	e01a      	b.n	8014096 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8014060:	78fb      	ldrb	r3, [r7, #3]
 8014062:	4619      	mov	r1, r3
 8014064:	6878      	ldr	r0, [r7, #4]
 8014066:	f000 fdfe 	bl	8014c66 <USBD_LL_GetRxDataSize>
 801406a:	4602      	mov	r2, r0
 801406c:	68fb      	ldr	r3, [r7, #12]
 801406e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8014078:	687a      	ldr	r2, [r7, #4]
 801407a:	33b0      	adds	r3, #176	@ 0xb0
 801407c:	009b      	lsls	r3, r3, #2
 801407e:	4413      	add	r3, r2
 8014080:	685b      	ldr	r3, [r3, #4]
 8014082:	68db      	ldr	r3, [r3, #12]
 8014084:	68fa      	ldr	r2, [r7, #12]
 8014086:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 801408a:	68fa      	ldr	r2, [r7, #12]
 801408c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8014090:	4611      	mov	r1, r2
 8014092:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8014094:	2300      	movs	r3, #0
}
 8014096:	4618      	mov	r0, r3
 8014098:	3710      	adds	r7, #16
 801409a:	46bd      	mov	sp, r7
 801409c:	bd80      	pop	{r7, pc}

0801409e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801409e:	b580      	push	{r7, lr}
 80140a0:	b084      	sub	sp, #16
 80140a2:	af00      	add	r7, sp, #0
 80140a4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	32b0      	adds	r2, #176	@ 0xb0
 80140b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80140b4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80140b6:	68fb      	ldr	r3, [r7, #12]
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d101      	bne.n	80140c0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80140bc:	2303      	movs	r3, #3
 80140be:	e024      	b.n	801410a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80140c6:	687a      	ldr	r2, [r7, #4]
 80140c8:	33b0      	adds	r3, #176	@ 0xb0
 80140ca:	009b      	lsls	r3, r3, #2
 80140cc:	4413      	add	r3, r2
 80140ce:	685b      	ldr	r3, [r3, #4]
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d019      	beq.n	8014108 <USBD_CDC_EP0_RxReady+0x6a>
 80140d4:	68fb      	ldr	r3, [r7, #12]
 80140d6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80140da:	2bff      	cmp	r3, #255	@ 0xff
 80140dc:	d014      	beq.n	8014108 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80140e4:	687a      	ldr	r2, [r7, #4]
 80140e6:	33b0      	adds	r3, #176	@ 0xb0
 80140e8:	009b      	lsls	r3, r3, #2
 80140ea:	4413      	add	r3, r2
 80140ec:	685b      	ldr	r3, [r3, #4]
 80140ee:	689b      	ldr	r3, [r3, #8]
 80140f0:	68fa      	ldr	r2, [r7, #12]
 80140f2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80140f6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80140f8:	68fa      	ldr	r2, [r7, #12]
 80140fa:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80140fe:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	22ff      	movs	r2, #255	@ 0xff
 8014104:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8014108:	2300      	movs	r3, #0
}
 801410a:	4618      	mov	r0, r3
 801410c:	3710      	adds	r7, #16
 801410e:	46bd      	mov	sp, r7
 8014110:	bd80      	pop	{r7, pc}
	...

08014114 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014114:	b580      	push	{r7, lr}
 8014116:	b086      	sub	sp, #24
 8014118:	af00      	add	r7, sp, #0
 801411a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801411c:	2182      	movs	r1, #130	@ 0x82
 801411e:	4818      	ldr	r0, [pc, #96]	@ (8014180 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014120:	f001 f901 	bl	8015326 <USBD_GetEpDesc>
 8014124:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014126:	2101      	movs	r1, #1
 8014128:	4815      	ldr	r0, [pc, #84]	@ (8014180 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801412a:	f001 f8fc 	bl	8015326 <USBD_GetEpDesc>
 801412e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014130:	2181      	movs	r1, #129	@ 0x81
 8014132:	4813      	ldr	r0, [pc, #76]	@ (8014180 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014134:	f001 f8f7 	bl	8015326 <USBD_GetEpDesc>
 8014138:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801413a:	697b      	ldr	r3, [r7, #20]
 801413c:	2b00      	cmp	r3, #0
 801413e:	d002      	beq.n	8014146 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014140:	697b      	ldr	r3, [r7, #20]
 8014142:	2210      	movs	r2, #16
 8014144:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014146:	693b      	ldr	r3, [r7, #16]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d006      	beq.n	801415a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801414c:	693b      	ldr	r3, [r7, #16]
 801414e:	2200      	movs	r2, #0
 8014150:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8014154:	711a      	strb	r2, [r3, #4]
 8014156:	2200      	movs	r2, #0
 8014158:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801415a:	68fb      	ldr	r3, [r7, #12]
 801415c:	2b00      	cmp	r3, #0
 801415e:	d006      	beq.n	801416e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014160:	68fb      	ldr	r3, [r7, #12]
 8014162:	2200      	movs	r2, #0
 8014164:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8014168:	711a      	strb	r2, [r3, #4]
 801416a:	2200      	movs	r2, #0
 801416c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	2243      	movs	r2, #67	@ 0x43
 8014172:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014174:	4b02      	ldr	r3, [pc, #8]	@ (8014180 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8014176:	4618      	mov	r0, r3
 8014178:	3718      	adds	r7, #24
 801417a:	46bd      	mov	sp, r7
 801417c:	bd80      	pop	{r7, pc}
 801417e:	bf00      	nop
 8014180:	2000008c 	.word	0x2000008c

08014184 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8014184:	b580      	push	{r7, lr}
 8014186:	b086      	sub	sp, #24
 8014188:	af00      	add	r7, sp, #0
 801418a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801418c:	2182      	movs	r1, #130	@ 0x82
 801418e:	4818      	ldr	r0, [pc, #96]	@ (80141f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014190:	f001 f8c9 	bl	8015326 <USBD_GetEpDesc>
 8014194:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014196:	2101      	movs	r1, #1
 8014198:	4815      	ldr	r0, [pc, #84]	@ (80141f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801419a:	f001 f8c4 	bl	8015326 <USBD_GetEpDesc>
 801419e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80141a0:	2181      	movs	r1, #129	@ 0x81
 80141a2:	4813      	ldr	r0, [pc, #76]	@ (80141f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80141a4:	f001 f8bf 	bl	8015326 <USBD_GetEpDesc>
 80141a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80141aa:	697b      	ldr	r3, [r7, #20]
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d002      	beq.n	80141b6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80141b0:	697b      	ldr	r3, [r7, #20]
 80141b2:	2210      	movs	r2, #16
 80141b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80141b6:	693b      	ldr	r3, [r7, #16]
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d006      	beq.n	80141ca <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80141bc:	693b      	ldr	r3, [r7, #16]
 80141be:	2200      	movs	r2, #0
 80141c0:	711a      	strb	r2, [r3, #4]
 80141c2:	2200      	movs	r2, #0
 80141c4:	f042 0202 	orr.w	r2, r2, #2
 80141c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d006      	beq.n	80141de <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	2200      	movs	r2, #0
 80141d4:	711a      	strb	r2, [r3, #4]
 80141d6:	2200      	movs	r2, #0
 80141d8:	f042 0202 	orr.w	r2, r2, #2
 80141dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	2243      	movs	r2, #67	@ 0x43
 80141e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80141e4:	4b02      	ldr	r3, [pc, #8]	@ (80141f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80141e6:	4618      	mov	r0, r3
 80141e8:	3718      	adds	r7, #24
 80141ea:	46bd      	mov	sp, r7
 80141ec:	bd80      	pop	{r7, pc}
 80141ee:	bf00      	nop
 80141f0:	2000008c 	.word	0x2000008c

080141f4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80141f4:	b580      	push	{r7, lr}
 80141f6:	b086      	sub	sp, #24
 80141f8:	af00      	add	r7, sp, #0
 80141fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80141fc:	2182      	movs	r1, #130	@ 0x82
 80141fe:	4818      	ldr	r0, [pc, #96]	@ (8014260 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014200:	f001 f891 	bl	8015326 <USBD_GetEpDesc>
 8014204:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014206:	2101      	movs	r1, #1
 8014208:	4815      	ldr	r0, [pc, #84]	@ (8014260 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801420a:	f001 f88c 	bl	8015326 <USBD_GetEpDesc>
 801420e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014210:	2181      	movs	r1, #129	@ 0x81
 8014212:	4813      	ldr	r0, [pc, #76]	@ (8014260 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014214:	f001 f887 	bl	8015326 <USBD_GetEpDesc>
 8014218:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801421a:	697b      	ldr	r3, [r7, #20]
 801421c:	2b00      	cmp	r3, #0
 801421e:	d002      	beq.n	8014226 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014220:	697b      	ldr	r3, [r7, #20]
 8014222:	2210      	movs	r2, #16
 8014224:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014226:	693b      	ldr	r3, [r7, #16]
 8014228:	2b00      	cmp	r3, #0
 801422a:	d006      	beq.n	801423a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801422c:	693b      	ldr	r3, [r7, #16]
 801422e:	2200      	movs	r2, #0
 8014230:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8014234:	711a      	strb	r2, [r3, #4]
 8014236:	2200      	movs	r2, #0
 8014238:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801423a:	68fb      	ldr	r3, [r7, #12]
 801423c:	2b00      	cmp	r3, #0
 801423e:	d006      	beq.n	801424e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014240:	68fb      	ldr	r3, [r7, #12]
 8014242:	2200      	movs	r2, #0
 8014244:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8014248:	711a      	strb	r2, [r3, #4]
 801424a:	2200      	movs	r2, #0
 801424c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	2243      	movs	r2, #67	@ 0x43
 8014252:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014254:	4b02      	ldr	r3, [pc, #8]	@ (8014260 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8014256:	4618      	mov	r0, r3
 8014258:	3718      	adds	r7, #24
 801425a:	46bd      	mov	sp, r7
 801425c:	bd80      	pop	{r7, pc}
 801425e:	bf00      	nop
 8014260:	2000008c 	.word	0x2000008c

08014264 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8014264:	b480      	push	{r7}
 8014266:	b083      	sub	sp, #12
 8014268:	af00      	add	r7, sp, #0
 801426a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	220a      	movs	r2, #10
 8014270:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8014272:	4b03      	ldr	r3, [pc, #12]	@ (8014280 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8014274:	4618      	mov	r0, r3
 8014276:	370c      	adds	r7, #12
 8014278:	46bd      	mov	sp, r7
 801427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801427e:	4770      	bx	lr
 8014280:	20000048 	.word	0x20000048

08014284 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8014284:	b480      	push	{r7}
 8014286:	b083      	sub	sp, #12
 8014288:	af00      	add	r7, sp, #0
 801428a:	6078      	str	r0, [r7, #4]
 801428c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801428e:	683b      	ldr	r3, [r7, #0]
 8014290:	2b00      	cmp	r3, #0
 8014292:	d101      	bne.n	8014298 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8014294:	2303      	movs	r3, #3
 8014296:	e009      	b.n	80142ac <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801429e:	687a      	ldr	r2, [r7, #4]
 80142a0:	33b0      	adds	r3, #176	@ 0xb0
 80142a2:	009b      	lsls	r3, r3, #2
 80142a4:	4413      	add	r3, r2
 80142a6:	683a      	ldr	r2, [r7, #0]
 80142a8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80142aa:	2300      	movs	r3, #0
}
 80142ac:	4618      	mov	r0, r3
 80142ae:	370c      	adds	r7, #12
 80142b0:	46bd      	mov	sp, r7
 80142b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142b6:	4770      	bx	lr

080142b8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80142b8:	b480      	push	{r7}
 80142ba:	b087      	sub	sp, #28
 80142bc:	af00      	add	r7, sp, #0
 80142be:	60f8      	str	r0, [r7, #12]
 80142c0:	60b9      	str	r1, [r7, #8]
 80142c2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80142c4:	68fb      	ldr	r3, [r7, #12]
 80142c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80142ca:	68fb      	ldr	r3, [r7, #12]
 80142cc:	32b0      	adds	r2, #176	@ 0xb0
 80142ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80142d2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80142d4:	697b      	ldr	r3, [r7, #20]
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d101      	bne.n	80142de <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80142da:	2303      	movs	r3, #3
 80142dc:	e008      	b.n	80142f0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80142de:	697b      	ldr	r3, [r7, #20]
 80142e0:	68ba      	ldr	r2, [r7, #8]
 80142e2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80142e6:	697b      	ldr	r3, [r7, #20]
 80142e8:	687a      	ldr	r2, [r7, #4]
 80142ea:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80142ee:	2300      	movs	r3, #0
}
 80142f0:	4618      	mov	r0, r3
 80142f2:	371c      	adds	r7, #28
 80142f4:	46bd      	mov	sp, r7
 80142f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142fa:	4770      	bx	lr

080142fc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80142fc:	b480      	push	{r7}
 80142fe:	b085      	sub	sp, #20
 8014300:	af00      	add	r7, sp, #0
 8014302:	6078      	str	r0, [r7, #4]
 8014304:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	32b0      	adds	r2, #176	@ 0xb0
 8014310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014314:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014316:	68fb      	ldr	r3, [r7, #12]
 8014318:	2b00      	cmp	r3, #0
 801431a:	d101      	bne.n	8014320 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801431c:	2303      	movs	r3, #3
 801431e:	e004      	b.n	801432a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8014320:	68fb      	ldr	r3, [r7, #12]
 8014322:	683a      	ldr	r2, [r7, #0]
 8014324:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8014328:	2300      	movs	r3, #0
}
 801432a:	4618      	mov	r0, r3
 801432c:	3714      	adds	r7, #20
 801432e:	46bd      	mov	sp, r7
 8014330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014334:	4770      	bx	lr
	...

08014338 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8014338:	b580      	push	{r7, lr}
 801433a:	b084      	sub	sp, #16
 801433c:	af00      	add	r7, sp, #0
 801433e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	32b0      	adds	r2, #176	@ 0xb0
 801434a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801434e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8014350:	2301      	movs	r3, #1
 8014352:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014354:	68bb      	ldr	r3, [r7, #8]
 8014356:	2b00      	cmp	r3, #0
 8014358:	d101      	bne.n	801435e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801435a:	2303      	movs	r3, #3
 801435c:	e025      	b.n	80143aa <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 801435e:	68bb      	ldr	r3, [r7, #8]
 8014360:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8014364:	2b00      	cmp	r3, #0
 8014366:	d11f      	bne.n	80143a8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8014368:	68bb      	ldr	r3, [r7, #8]
 801436a:	2201      	movs	r2, #1
 801436c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8014370:	4b10      	ldr	r3, [pc, #64]	@ (80143b4 <USBD_CDC_TransmitPacket+0x7c>)
 8014372:	781b      	ldrb	r3, [r3, #0]
 8014374:	f003 020f 	and.w	r2, r3, #15
 8014378:	68bb      	ldr	r3, [r7, #8]
 801437a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 801437e:	6878      	ldr	r0, [r7, #4]
 8014380:	4613      	mov	r3, r2
 8014382:	009b      	lsls	r3, r3, #2
 8014384:	4413      	add	r3, r2
 8014386:	009b      	lsls	r3, r3, #2
 8014388:	4403      	add	r3, r0
 801438a:	3318      	adds	r3, #24
 801438c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 801438e:	4b09      	ldr	r3, [pc, #36]	@ (80143b4 <USBD_CDC_TransmitPacket+0x7c>)
 8014390:	7819      	ldrb	r1, [r3, #0]
 8014392:	68bb      	ldr	r3, [r7, #8]
 8014394:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8014398:	68bb      	ldr	r3, [r7, #8]
 801439a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 801439e:	6878      	ldr	r0, [r7, #4]
 80143a0:	f000 fc2b 	bl	8014bfa <USBD_LL_Transmit>

    ret = USBD_OK;
 80143a4:	2300      	movs	r3, #0
 80143a6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80143a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80143aa:	4618      	mov	r0, r3
 80143ac:	3710      	adds	r7, #16
 80143ae:	46bd      	mov	sp, r7
 80143b0:	bd80      	pop	{r7, pc}
 80143b2:	bf00      	nop
 80143b4:	200000cf 	.word	0x200000cf

080143b8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80143b8:	b580      	push	{r7, lr}
 80143ba:	b084      	sub	sp, #16
 80143bc:	af00      	add	r7, sp, #0
 80143be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	32b0      	adds	r2, #176	@ 0xb0
 80143ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80143ce:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	32b0      	adds	r2, #176	@ 0xb0
 80143da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d101      	bne.n	80143e6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80143e2:	2303      	movs	r3, #3
 80143e4:	e018      	b.n	8014418 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	7c1b      	ldrb	r3, [r3, #16]
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d10a      	bne.n	8014404 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80143ee:	4b0c      	ldr	r3, [pc, #48]	@ (8014420 <USBD_CDC_ReceivePacket+0x68>)
 80143f0:	7819      	ldrb	r1, [r3, #0]
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80143f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80143fc:	6878      	ldr	r0, [r7, #4]
 80143fe:	f000 fc17 	bl	8014c30 <USBD_LL_PrepareReceive>
 8014402:	e008      	b.n	8014416 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014404:	4b06      	ldr	r3, [pc, #24]	@ (8014420 <USBD_CDC_ReceivePacket+0x68>)
 8014406:	7819      	ldrb	r1, [r3, #0]
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801440e:	2340      	movs	r3, #64	@ 0x40
 8014410:	6878      	ldr	r0, [r7, #4]
 8014412:	f000 fc0d 	bl	8014c30 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014416:	2300      	movs	r3, #0
}
 8014418:	4618      	mov	r0, r3
 801441a:	3710      	adds	r7, #16
 801441c:	46bd      	mov	sp, r7
 801441e:	bd80      	pop	{r7, pc}
 8014420:	200000d0 	.word	0x200000d0

08014424 <TEMPLATE_Init>:
  *         Initializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Init(void)
{
 8014424:	b580      	push	{r7, lr}
 8014426:	af00      	add	r7, sp, #0
      USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8014428:	2200      	movs	r2, #0
 801442a:	4905      	ldr	r1, [pc, #20]	@ (8014440 <TEMPLATE_Init+0x1c>)
 801442c:	4805      	ldr	r0, [pc, #20]	@ (8014444 <TEMPLATE_Init+0x20>)
 801442e:	f7ff ff43 	bl	80142b8 <USBD_CDC_SetTxBuffer>
      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8014432:	4905      	ldr	r1, [pc, #20]	@ (8014448 <TEMPLATE_Init+0x24>)
 8014434:	4803      	ldr	r0, [pc, #12]	@ (8014444 <TEMPLATE_Init+0x20>)
 8014436:	f7ff ff61 	bl	80142fc <USBD_CDC_SetRxBuffer>
      return (0);
 801443a:	2300      	movs	r3, #0
}
 801443c:	4618      	mov	r0, r3
 801443e:	bd80      	pop	{r7, pc}
 8014440:	20002ee8 	.word	0x20002ee8
 8014444:	20002960 	.word	0x20002960
 8014448:	20002ce8 	.word	0x20002ce8

0801444c <TEMPLATE_DeInit>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_DeInit(void)
{
 801444c:	b480      	push	{r7}
 801444e:	af00      	add	r7, sp, #0
  /*
     Add your deinitialization code here
  */
  return (0);
 8014450:	2300      	movs	r3, #0
}
 8014452:	4618      	mov	r0, r3
 8014454:	46bd      	mov	sp, r7
 8014456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801445a:	4770      	bx	lr

0801445c <USB_Transmit>:

uint8_t USB_Transmit(uint8_t *data, uint32_t len)
{
 801445c:	b580      	push	{r7, lr}
 801445e:	b0a4      	sub	sp, #144	@ 0x90
 8014460:	af00      	add	r7, sp, #0
 8014462:	6078      	str	r0, [r7, #4]
 8014464:	6039      	str	r1, [r7, #0]
    uint32_t offset = 0;
 8014466:	2300      	movs	r3, #0
 8014468:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    const uint32_t bytesPerLine = 16;
 801446c:	2310      	movs	r3, #16
 801446e:	67bb      	str	r3, [r7, #120]	@ 0x78

    while (offset < len)
 8014470:	e0a4      	b.n	80145bc <USB_Transmit+0x160>
    {
        uint16_t chunk_len = ((len - offset) >= CDC_BLOCK_SIZE) ? CDC_BLOCK_SIZE : (len - offset);
 8014472:	683a      	ldr	r2, [r7, #0]
 8014474:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014478:	1ad3      	subs	r3, r2, r3
 801447a:	2b40      	cmp	r3, #64	@ 0x40
 801447c:	bf28      	it	cs
 801447e:	2340      	movcs	r3, #64	@ 0x40
 8014480:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
        tx_complete = 0;
 8014484:	4b53      	ldr	r3, [pc, #332]	@ (80145d4 <USB_Transmit+0x178>)
 8014486:	2200      	movs	r2, #0
 8014488:	701a      	strb	r2, [r3, #0]
        USBD_CDC_SetTxBuffer(&hUsbDeviceFS, &data[offset], chunk_len);
 801448a:	687a      	ldr	r2, [r7, #4]
 801448c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014490:	4413      	add	r3, r2
 8014492:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8014496:	4619      	mov	r1, r3
 8014498:	484f      	ldr	r0, [pc, #316]	@ (80145d8 <USB_Transmit+0x17c>)
 801449a:	f7ff ff0d 	bl	80142b8 <USBD_CDC_SetTxBuffer>

        // Log in 32-byte lines
        uint32_t printed = 0;
 801449e:	2300      	movs	r3, #0
 80144a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        while (printed < chunk_len)
 80144a4:	e056      	b.n	8014554 <USB_Transmit+0xf8>
        {
            uint32_t lineLen = ((chunk_len - printed) > bytesPerLine) ? bytesPerLine : (chunk_len - printed);
 80144a6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80144aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80144ae:	1ad3      	subs	r3, r2, r3
 80144b0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80144b2:	4293      	cmp	r3, r2
 80144b4:	bf28      	it	cs
 80144b6:	4613      	movcs	r3, r2
 80144b8:	673b      	str	r3, [r7, #112]	@ 0x70
            char log_line[BYTES_PER_LINE * 3 + 1] = {0};
 80144ba:	2300      	movs	r3, #0
 80144bc:	60bb      	str	r3, [r7, #8]
 80144be:	f107 030c 	add.w	r3, r7, #12
 80144c2:	225d      	movs	r2, #93	@ 0x5d
 80144c4:	2100      	movs	r1, #0
 80144c6:	4618      	mov	r0, r3
 80144c8:	f002 f9d4 	bl	8016874 <memset>
            char *ptr = log_line;
 80144cc:	f107 0308 	add.w	r3, r7, #8
 80144d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

            for (uint32_t i = 0; i < lineLen; i++)
 80144d4:	2300      	movs	r3, #0
 80144d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80144da:	e01c      	b.n	8014516 <USB_Transmit+0xba>
            {
                ptr += snprintf(ptr, 4, "%02X ", data[offset + printed + i]);
 80144dc:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80144e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80144e4:	441a      	add	r2, r3
 80144e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80144ea:	4413      	add	r3, r2
 80144ec:	687a      	ldr	r2, [r7, #4]
 80144ee:	4413      	add	r3, r2
 80144f0:	781b      	ldrb	r3, [r3, #0]
 80144f2:	4a3a      	ldr	r2, [pc, #232]	@ (80145dc <USB_Transmit+0x180>)
 80144f4:	2104      	movs	r1, #4
 80144f6:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80144fa:	f002 f8db 	bl	80166b4 <sniprintf>
 80144fe:	4603      	mov	r3, r0
 8014500:	461a      	mov	r2, r3
 8014502:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014506:	4413      	add	r3, r2
 8014508:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            for (uint32_t i = 0; i < lineLen; i++)
 801450c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014510:	3301      	adds	r3, #1
 8014512:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8014516:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801451a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801451c:	429a      	cmp	r2, r3
 801451e:	d3dd      	bcc.n	80144dc <USB_Transmit+0x80>
            }

            if (printed == 0)
 8014520:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014524:	2b00      	cmp	r3, #0
 8014526:	d108      	bne.n	801453a <USB_Transmit+0xde>
            {
                log_info("USB Tx [%d bytes]: %s", chunk_len, log_line);
 8014528:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 801452c:	f107 0208 	add.w	r2, r7, #8
 8014530:	4619      	mov	r1, r3
 8014532:	482b      	ldr	r0, [pc, #172]	@ (80145e0 <USB_Transmit+0x184>)
 8014534:	f7ef fd36 	bl	8003fa4 <log_info>
 8014538:	e006      	b.n	8014548 <USB_Transmit+0xec>
            }
            else
            {
                log_info("%19s%s", "", log_line);
 801453a:	f107 0308 	add.w	r3, r7, #8
 801453e:	461a      	mov	r2, r3
 8014540:	4928      	ldr	r1, [pc, #160]	@ (80145e4 <USB_Transmit+0x188>)
 8014542:	4829      	ldr	r0, [pc, #164]	@ (80145e8 <USB_Transmit+0x18c>)
 8014544:	f7ef fd2e 	bl	8003fa4 <log_info>
            }

            printed += lineLen;
 8014548:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801454c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801454e:	4413      	add	r3, r2
 8014550:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        while (printed < chunk_len)
 8014554:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8014558:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801455c:	429a      	cmp	r2, r3
 801455e:	d3a2      	bcc.n	80144a6 <USB_Transmit+0x4a>
        }

        if (USBD_CDC_TransmitPacket(&hUsbDeviceFS) != USBD_OK)
 8014560:	481d      	ldr	r0, [pc, #116]	@ (80145d8 <USB_Transmit+0x17c>)
 8014562:	f7ff fee9 	bl	8014338 <USBD_CDC_TransmitPacket>
 8014566:	4603      	mov	r3, r0
 8014568:	2b00      	cmp	r3, #0
 801456a:	d001      	beq.n	8014570 <USB_Transmit+0x114>
        {
            return USBD_FAIL;
 801456c:	2303      	movs	r3, #3
 801456e:	e02c      	b.n	80145ca <USB_Transmit+0x16e>
        }

        uint32_t timeout = 10000;
 8014570:	f242 7310 	movw	r3, #10000	@ 0x2710
 8014574:	67fb      	str	r3, [r7, #124]	@ 0x7c
        while (tx_complete == 0 && timeout--);
 8014576:	bf00      	nop
 8014578:	4b16      	ldr	r3, [pc, #88]	@ (80145d4 <USB_Transmit+0x178>)
 801457a:	781b      	ldrb	r3, [r3, #0]
 801457c:	b2db      	uxtb	r3, r3
 801457e:	2b00      	cmp	r3, #0
 8014580:	d104      	bne.n	801458c <USB_Transmit+0x130>
 8014582:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014584:	1e5a      	subs	r2, r3, #1
 8014586:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8014588:	2b00      	cmp	r3, #0
 801458a:	d1f5      	bne.n	8014578 <USB_Transmit+0x11c>
        if (timeout == 0)
 801458c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801458e:	2b00      	cmp	r3, #0
 8014590:	d104      	bne.n	801459c <USB_Transmit+0x140>
        {
            log_error("USB TX Timeout");
 8014592:	4816      	ldr	r0, [pc, #88]	@ (80145ec <USB_Transmit+0x190>)
 8014594:	f7ef fd3a 	bl	800400c <log_error>
            return USBD_FAIL;
 8014598:	2303      	movs	r3, #3
 801459a:	e016      	b.n	80145ca <USB_Transmit+0x16e>
        }

        offset += chunk_len;
 801459c:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 80145a0:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80145a4:	4413      	add	r3, r2
 80145a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        for (volatile int i = 0; i < 200; i++);
 80145aa:	2300      	movs	r3, #0
 80145ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80145ae:	e002      	b.n	80145b6 <USB_Transmit+0x15a>
 80145b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80145b2:	3301      	adds	r3, #1
 80145b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80145b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80145b8:	2bc7      	cmp	r3, #199	@ 0xc7
 80145ba:	ddf9      	ble.n	80145b0 <USB_Transmit+0x154>
    while (offset < len)
 80145bc:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80145c0:	683b      	ldr	r3, [r7, #0]
 80145c2:	429a      	cmp	r2, r3
 80145c4:	f4ff af55 	bcc.w	8014472 <USB_Transmit+0x16>
    }

    return USBD_OK;
 80145c8:	2300      	movs	r3, #0
}
 80145ca:	4618      	mov	r0, r3
 80145cc:	3790      	adds	r7, #144	@ 0x90
 80145ce:	46bd      	mov	sp, r7
 80145d0:	bd80      	pop	{r7, pc}
 80145d2:	bf00      	nop
 80145d4:	200000d2 	.word	0x200000d2
 80145d8:	20002960 	.word	0x20002960
 80145dc:	080193f4 	.word	0x080193f4
 80145e0:	080193fc 	.word	0x080193fc
 80145e4:	08019414 	.word	0x08019414
 80145e8:	08019418 	.word	0x08019418
 80145ec:	08019420 	.word	0x08019420

080145f0 <TEMPLATE_Control>:
  * @param  Buf: Buffer containing command data (request parameters)
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Control(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 80145f0:	b480      	push	{r7}
 80145f2:	b083      	sub	sp, #12
 80145f4:	af00      	add	r7, sp, #0
 80145f6:	4603      	mov	r3, r0
 80145f8:	6039      	str	r1, [r7, #0]
 80145fa:	71fb      	strb	r3, [r7, #7]
 80145fc:	4613      	mov	r3, r2
 80145fe:	80bb      	strh	r3, [r7, #4]
  UNUSED(length);

  switch (cmd)
 8014600:	79fb      	ldrb	r3, [r7, #7]
 8014602:	2b23      	cmp	r3, #35	@ 0x23
 8014604:	f200 8098 	bhi.w	8014738 <TEMPLATE_Control+0x148>
 8014608:	a201      	add	r2, pc, #4	@ (adr r2, 8014610 <TEMPLATE_Control+0x20>)
 801460a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801460e:	bf00      	nop
 8014610:	08014739 	.word	0x08014739
 8014614:	08014739 	.word	0x08014739
 8014618:	08014739 	.word	0x08014739
 801461c:	08014739 	.word	0x08014739
 8014620:	08014739 	.word	0x08014739
 8014624:	08014739 	.word	0x08014739
 8014628:	08014739 	.word	0x08014739
 801462c:	08014739 	.word	0x08014739
 8014630:	08014739 	.word	0x08014739
 8014634:	08014739 	.word	0x08014739
 8014638:	08014739 	.word	0x08014739
 801463c:	08014739 	.word	0x08014739
 8014640:	08014739 	.word	0x08014739
 8014644:	08014739 	.word	0x08014739
 8014648:	08014739 	.word	0x08014739
 801464c:	08014739 	.word	0x08014739
 8014650:	08014739 	.word	0x08014739
 8014654:	08014739 	.word	0x08014739
 8014658:	08014739 	.word	0x08014739
 801465c:	08014739 	.word	0x08014739
 8014660:	08014739 	.word	0x08014739
 8014664:	08014739 	.word	0x08014739
 8014668:	08014739 	.word	0x08014739
 801466c:	08014739 	.word	0x08014739
 8014670:	08014739 	.word	0x08014739
 8014674:	08014739 	.word	0x08014739
 8014678:	08014739 	.word	0x08014739
 801467c:	08014739 	.word	0x08014739
 8014680:	08014739 	.word	0x08014739
 8014684:	08014739 	.word	0x08014739
 8014688:	08014739 	.word	0x08014739
 801468c:	08014739 	.word	0x08014739
 8014690:	080146a1 	.word	0x080146a1
 8014694:	080146e5 	.word	0x080146e5
 8014698:	08014739 	.word	0x08014739
 801469c:	08014739 	.word	0x08014739
    case CDC_CLEAR_COMM_FEATURE:
      /* Add your code here */
      break;

    case CDC_SET_LINE_CODING:
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 80146a0:	683b      	ldr	r3, [r7, #0]
 80146a2:	781b      	ldrb	r3, [r3, #0]
 80146a4:	461a      	mov	r2, r3
 80146a6:	683b      	ldr	r3, [r7, #0]
 80146a8:	3301      	adds	r3, #1
 80146aa:	781b      	ldrb	r3, [r3, #0]
 80146ac:	021b      	lsls	r3, r3, #8
 80146ae:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 80146b0:	683b      	ldr	r3, [r7, #0]
 80146b2:	3302      	adds	r3, #2
 80146b4:	781b      	ldrb	r3, [r3, #0]
 80146b6:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 80146b8:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 80146ba:	683b      	ldr	r3, [r7, #0]
 80146bc:	3303      	adds	r3, #3
 80146be:	781b      	ldrb	r3, [r3, #0]
 80146c0:	061b      	lsls	r3, r3, #24
 80146c2:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 80146c4:	461a      	mov	r2, r3
 80146c6:	4b20      	ldr	r3, [pc, #128]	@ (8014748 <TEMPLATE_Control+0x158>)
 80146c8:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 80146ca:	683b      	ldr	r3, [r7, #0]
 80146cc:	791a      	ldrb	r2, [r3, #4]
 80146ce:	4b1e      	ldr	r3, [pc, #120]	@ (8014748 <TEMPLATE_Control+0x158>)
 80146d0:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 80146d2:	683b      	ldr	r3, [r7, #0]
 80146d4:	795a      	ldrb	r2, [r3, #5]
 80146d6:	4b1c      	ldr	r3, [pc, #112]	@ (8014748 <TEMPLATE_Control+0x158>)
 80146d8:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 80146da:	683b      	ldr	r3, [r7, #0]
 80146dc:	799a      	ldrb	r2, [r3, #6]
 80146de:	4b1a      	ldr	r3, [pc, #104]	@ (8014748 <TEMPLATE_Control+0x158>)
 80146e0:	719a      	strb	r2, [r3, #6]

      /* Add your code here */
      break;
 80146e2:	e02a      	b.n	801473a <TEMPLATE_Control+0x14a>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 80146e4:	4b18      	ldr	r3, [pc, #96]	@ (8014748 <TEMPLATE_Control+0x158>)
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	b2da      	uxtb	r2, r3
 80146ea:	683b      	ldr	r3, [r7, #0]
 80146ec:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 80146ee:	4b16      	ldr	r3, [pc, #88]	@ (8014748 <TEMPLATE_Control+0x158>)
 80146f0:	681b      	ldr	r3, [r3, #0]
 80146f2:	0a1a      	lsrs	r2, r3, #8
 80146f4:	683b      	ldr	r3, [r7, #0]
 80146f6:	3301      	adds	r3, #1
 80146f8:	b2d2      	uxtb	r2, r2
 80146fa:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 80146fc:	4b12      	ldr	r3, [pc, #72]	@ (8014748 <TEMPLATE_Control+0x158>)
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	0c1a      	lsrs	r2, r3, #16
 8014702:	683b      	ldr	r3, [r7, #0]
 8014704:	3302      	adds	r3, #2
 8014706:	b2d2      	uxtb	r2, r2
 8014708:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 801470a:	4b0f      	ldr	r3, [pc, #60]	@ (8014748 <TEMPLATE_Control+0x158>)
 801470c:	681b      	ldr	r3, [r3, #0]
 801470e:	0e1a      	lsrs	r2, r3, #24
 8014710:	683b      	ldr	r3, [r7, #0]
 8014712:	3303      	adds	r3, #3
 8014714:	b2d2      	uxtb	r2, r2
 8014716:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 8014718:	683b      	ldr	r3, [r7, #0]
 801471a:	3304      	adds	r3, #4
 801471c:	4a0a      	ldr	r2, [pc, #40]	@ (8014748 <TEMPLATE_Control+0x158>)
 801471e:	7912      	ldrb	r2, [r2, #4]
 8014720:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 8014722:	683b      	ldr	r3, [r7, #0]
 8014724:	3305      	adds	r3, #5
 8014726:	4a08      	ldr	r2, [pc, #32]	@ (8014748 <TEMPLATE_Control+0x158>)
 8014728:	7952      	ldrb	r2, [r2, #5]
 801472a:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 801472c:	683b      	ldr	r3, [r7, #0]
 801472e:	3306      	adds	r3, #6
 8014730:	4a05      	ldr	r2, [pc, #20]	@ (8014748 <TEMPLATE_Control+0x158>)
 8014732:	7992      	ldrb	r2, [r2, #6]
 8014734:	701a      	strb	r2, [r3, #0]

      /* Add your code here */
      break;
 8014736:	e000      	b.n	801473a <TEMPLATE_Control+0x14a>
    case CDC_SEND_BREAK:
      /* Add your code here */
      break;

    default:
      break;
 8014738:	bf00      	nop
  }

  return (0);
 801473a:	2300      	movs	r3, #0
}
 801473c:	4618      	mov	r0, r3
 801473e:	370c      	adds	r7, #12
 8014740:	46bd      	mov	sp, r7
 8014742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014746:	4770      	bx	lr
 8014748:	200000e8 	.word	0x200000e8

0801474c <TEMPLATE_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Receive(uint8_t *Buf, uint32_t *Len)
{
 801474c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014750:	b08b      	sub	sp, #44	@ 0x2c
 8014752:	af00      	add	r7, sp, #0
 8014754:	6078      	str	r0, [r7, #4]
 8014756:	6039      	str	r1, [r7, #0]
 8014758:	466b      	mov	r3, sp
 801475a:	461e      	mov	r6, r3
    const uint32_t bytesPerLine = 16;
 801475c:	2310      	movs	r3, #16
 801475e:	61bb      	str	r3, [r7, #24]
    char hexLine[bytesPerLine * 3 + 1]; // 2 hex chars + 1 space per byte
 8014760:	69ba      	ldr	r2, [r7, #24]
 8014762:	4613      	mov	r3, r2
 8014764:	005b      	lsls	r3, r3, #1
 8014766:	4413      	add	r3, r2
 8014768:	617b      	str	r3, [r7, #20]
 801476a:	69ba      	ldr	r2, [r7, #24]
 801476c:	4613      	mov	r3, r2
 801476e:	005b      	lsls	r3, r3, #1
 8014770:	4413      	add	r3, r2
 8014772:	3301      	adds	r3, #1
 8014774:	2200      	movs	r2, #0
 8014776:	4698      	mov	r8, r3
 8014778:	4691      	mov	r9, r2
 801477a:	f04f 0200 	mov.w	r2, #0
 801477e:	f04f 0300 	mov.w	r3, #0
 8014782:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8014786:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801478a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801478e:	69ba      	ldr	r2, [r7, #24]
 8014790:	4613      	mov	r3, r2
 8014792:	005b      	lsls	r3, r3, #1
 8014794:	4413      	add	r3, r2
 8014796:	3301      	adds	r3, #1
 8014798:	2200      	movs	r2, #0
 801479a:	461c      	mov	r4, r3
 801479c:	4615      	mov	r5, r2
 801479e:	f04f 0200 	mov.w	r2, #0
 80147a2:	f04f 0300 	mov.w	r3, #0
 80147a6:	00eb      	lsls	r3, r5, #3
 80147a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80147ac:	00e2      	lsls	r2, r4, #3
 80147ae:	69ba      	ldr	r2, [r7, #24]
 80147b0:	4613      	mov	r3, r2
 80147b2:	005b      	lsls	r3, r3, #1
 80147b4:	4413      	add	r3, r2
 80147b6:	3301      	adds	r3, #1
 80147b8:	3307      	adds	r3, #7
 80147ba:	08db      	lsrs	r3, r3, #3
 80147bc:	00db      	lsls	r3, r3, #3
 80147be:	ebad 0d03 	sub.w	sp, sp, r3
 80147c2:	466b      	mov	r3, sp
 80147c4:	3300      	adds	r3, #0
 80147c6:	613b      	str	r3, [r7, #16]
    uint32_t totalLen = *Len;
 80147c8:	683b      	ldr	r3, [r7, #0]
 80147ca:	681b      	ldr	r3, [r3, #0]
 80147cc:	60fb      	str	r3, [r7, #12]
    uint32_t printed = 0;
 80147ce:	2300      	movs	r3, #0
 80147d0:	627b      	str	r3, [r7, #36]	@ 0x24

    if (*Len > CDC_DATA_FS_MAX_PACKET_SIZE) {
 80147d2:	683b      	ldr	r3, [r7, #0]
 80147d4:	681b      	ldr	r3, [r3, #0]
 80147d6:	2b40      	cmp	r3, #64	@ 0x40
 80147d8:	d944      	bls.n	8014864 <TEMPLATE_Receive+0x118>
        *Len = CDC_DATA_FS_MAX_PACKET_SIZE;
 80147da:	683b      	ldr	r3, [r7, #0]
 80147dc:	2240      	movs	r2, #64	@ 0x40
 80147de:	601a      	str	r2, [r3, #0]
    }

    while (printed < *Len)
 80147e0:	e040      	b.n	8014864 <TEMPLATE_Receive+0x118>
    {
        uint32_t lineLen = ((*Len - printed) > bytesPerLine) ? bytesPerLine : (*Len - printed);
 80147e2:	683b      	ldr	r3, [r7, #0]
 80147e4:	681a      	ldr	r2, [r3, #0]
 80147e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147e8:	1ad3      	subs	r3, r2, r3
 80147ea:	69ba      	ldr	r2, [r7, #24]
 80147ec:	4293      	cmp	r3, r2
 80147ee:	bf28      	it	cs
 80147f0:	4613      	movcs	r3, r2
 80147f2:	60bb      	str	r3, [r7, #8]
    char hexLine[bytesPerLine * 3 + 1]; // 2 hex chars + 1 space per byte
 80147f4:	69ba      	ldr	r2, [r7, #24]
 80147f6:	4613      	mov	r3, r2
 80147f8:	005b      	lsls	r3, r3, #1
 80147fa:	4413      	add	r3, r2
        memset(hexLine, 0, sizeof(hexLine));
 80147fc:	3301      	adds	r3, #1
 80147fe:	461a      	mov	r2, r3
 8014800:	2100      	movs	r1, #0
 8014802:	6938      	ldr	r0, [r7, #16]
 8014804:	f002 f836 	bl	8016874 <memset>
        char *ptr = hexLine;
 8014808:	693b      	ldr	r3, [r7, #16]
 801480a:	623b      	str	r3, [r7, #32]

        for (uint32_t i = 0; i < lineLen; ++i)
 801480c:	2300      	movs	r3, #0
 801480e:	61fb      	str	r3, [r7, #28]
 8014810:	e012      	b.n	8014838 <TEMPLATE_Receive+0xec>
        {
            ptr += snprintf(ptr, 4, "%02X ", Buf[printed + i]);
 8014812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014814:	69fb      	ldr	r3, [r7, #28]
 8014816:	4413      	add	r3, r2
 8014818:	687a      	ldr	r2, [r7, #4]
 801481a:	4413      	add	r3, r2
 801481c:	781b      	ldrb	r3, [r3, #0]
 801481e:	4a2d      	ldr	r2, [pc, #180]	@ (80148d4 <TEMPLATE_Receive+0x188>)
 8014820:	2104      	movs	r1, #4
 8014822:	6a38      	ldr	r0, [r7, #32]
 8014824:	f001 ff46 	bl	80166b4 <sniprintf>
 8014828:	4603      	mov	r3, r0
 801482a:	461a      	mov	r2, r3
 801482c:	6a3b      	ldr	r3, [r7, #32]
 801482e:	4413      	add	r3, r2
 8014830:	623b      	str	r3, [r7, #32]
        for (uint32_t i = 0; i < lineLen; ++i)
 8014832:	69fb      	ldr	r3, [r7, #28]
 8014834:	3301      	adds	r3, #1
 8014836:	61fb      	str	r3, [r7, #28]
 8014838:	69fa      	ldr	r2, [r7, #28]
 801483a:	68bb      	ldr	r3, [r7, #8]
 801483c:	429a      	cmp	r2, r3
 801483e:	d3e8      	bcc.n	8014812 <TEMPLATE_Receive+0xc6>
        }

        if (printed == 0)
 8014840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014842:	2b00      	cmp	r3, #0
 8014844:	d105      	bne.n	8014852 <TEMPLATE_Receive+0x106>
        {
            // First line includes logger message
            log_info("USB Rx [%lu bytes]: %s", totalLen, hexLine);
 8014846:	693a      	ldr	r2, [r7, #16]
 8014848:	68f9      	ldr	r1, [r7, #12]
 801484a:	4823      	ldr	r0, [pc, #140]	@ (80148d8 <TEMPLATE_Receive+0x18c>)
 801484c:	f7ef fbaa 	bl	8003fa4 <log_info>
 8014850:	e004      	b.n	801485c <TEMPLATE_Receive+0x110>
        }
        else
        {
            // Subsequent lines have 26-space indent
            log_info("%19s%s", "", hexLine);
 8014852:	693a      	ldr	r2, [r7, #16]
 8014854:	4921      	ldr	r1, [pc, #132]	@ (80148dc <TEMPLATE_Receive+0x190>)
 8014856:	4822      	ldr	r0, [pc, #136]	@ (80148e0 <TEMPLATE_Receive+0x194>)
 8014858:	f7ef fba4 	bl	8003fa4 <log_info>
        }

        printed += lineLen;
 801485c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801485e:	68bb      	ldr	r3, [r7, #8]
 8014860:	4413      	add	r3, r2
 8014862:	627b      	str	r3, [r7, #36]	@ 0x24
    while (printed < *Len)
 8014864:	683b      	ldr	r3, [r7, #0]
 8014866:	681b      	ldr	r3, [r3, #0]
 8014868:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801486a:	429a      	cmp	r2, r3
 801486c:	d3b9      	bcc.n	80147e2 <TEMPLATE_Receive+0x96>
    }

    // Copy to usb_rx_buffer if space permits
    if ((usb_rx_index + *Len) < MAX_USB_DATA_SIZE)
 801486e:	683b      	ldr	r3, [r7, #0]
 8014870:	681a      	ldr	r2, [r3, #0]
 8014872:	4b1c      	ldr	r3, [pc, #112]	@ (80148e4 <TEMPLATE_Receive+0x198>)
 8014874:	681b      	ldr	r3, [r3, #0]
 8014876:	4413      	add	r3, r2
 8014878:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801487c:	d215      	bcs.n	80148aa <TEMPLATE_Receive+0x15e>
    {
        memcpy(&usb_rx_buffer[usb_rx_index], Buf, *Len);
 801487e:	4b19      	ldr	r3, [pc, #100]	@ (80148e4 <TEMPLATE_Receive+0x198>)
 8014880:	681b      	ldr	r3, [r3, #0]
 8014882:	4a19      	ldr	r2, [pc, #100]	@ (80148e8 <TEMPLATE_Receive+0x19c>)
 8014884:	1898      	adds	r0, r3, r2
 8014886:	683b      	ldr	r3, [r7, #0]
 8014888:	681b      	ldr	r3, [r3, #0]
 801488a:	461a      	mov	r2, r3
 801488c:	6879      	ldr	r1, [r7, #4]
 801488e:	f002 f87c 	bl	801698a <memcpy>
        usb_rx_index += *Len;
 8014892:	683b      	ldr	r3, [r7, #0]
 8014894:	681a      	ldr	r2, [r3, #0]
 8014896:	4b13      	ldr	r3, [pc, #76]	@ (80148e4 <TEMPLATE_Receive+0x198>)
 8014898:	681b      	ldr	r3, [r3, #0]
 801489a:	4413      	add	r3, r2
 801489c:	4a11      	ldr	r2, [pc, #68]	@ (80148e4 <TEMPLATE_Receive+0x198>)
 801489e:	6013      	str	r3, [r2, #0]
        log_error("USB buffer overflow");
        return USBD_FAIL;
    }

    // If this was the last packet
    if (*Len < CDC_DATA_FS_MAX_PACKET_SIZE)
 80148a0:	683b      	ldr	r3, [r7, #0]
 80148a2:	681b      	ldr	r3, [r3, #0]
 80148a4:	2b3f      	cmp	r3, #63	@ 0x3f
 80148a6:	d80b      	bhi.n	80148c0 <TEMPLATE_Receive+0x174>
 80148a8:	e007      	b.n	80148ba <TEMPLATE_Receive+0x16e>
        usb_rx_index = 0;
 80148aa:	4b0e      	ldr	r3, [pc, #56]	@ (80148e4 <TEMPLATE_Receive+0x198>)
 80148ac:	2200      	movs	r2, #0
 80148ae:	601a      	str	r2, [r3, #0]
        log_error("USB buffer overflow");
 80148b0:	480e      	ldr	r0, [pc, #56]	@ (80148ec <TEMPLATE_Receive+0x1a0>)
 80148b2:	f7ef fbab 	bl	800400c <log_error>
        return USBD_FAIL;
 80148b6:	2303      	movs	r3, #3
 80148b8:	e006      	b.n	80148c8 <TEMPLATE_Receive+0x17c>
    {
        usb_rx_complete = true;
 80148ba:	4b0d      	ldr	r3, [pc, #52]	@ (80148f0 <TEMPLATE_Receive+0x1a4>)
 80148bc:	2201      	movs	r2, #1
 80148be:	701a      	strb	r2, [r3, #0]
    }

    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80148c0:	480c      	ldr	r0, [pc, #48]	@ (80148f4 <TEMPLATE_Receive+0x1a8>)
 80148c2:	f7ff fd79 	bl	80143b8 <USBD_CDC_ReceivePacket>
    return USBD_OK;
 80148c6:	2300      	movs	r3, #0
 80148c8:	46b5      	mov	sp, r6
}
 80148ca:	4618      	mov	r0, r3
 80148cc:	372c      	adds	r7, #44	@ 0x2c
 80148ce:	46bd      	mov	sp, r7
 80148d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80148d4:	080193f4 	.word	0x080193f4
 80148d8:	08019430 	.word	0x08019430
 80148dc:	08019414 	.word	0x08019414
 80148e0:	08019418 	.word	0x08019418
 80148e4:	200130e8 	.word	0x200130e8
 80148e8:	200030e8 	.word	0x200030e8
 80148ec:	08019448 	.word	0x08019448
 80148f0:	200130ec 	.word	0x200130ec
 80148f4:	20002960 	.word	0x20002960

080148f8 <TEMPLATE_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_TransmitCplt(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80148f8:	b480      	push	{r7}
 80148fa:	b085      	sub	sp, #20
 80148fc:	af00      	add	r7, sp, #0
 80148fe:	60f8      	str	r0, [r7, #12]
 8014900:	60b9      	str	r1, [r7, #8]
 8014902:	4613      	mov	r3, r2
 8014904:	71fb      	strb	r3, [r7, #7]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);

  return 0;
 8014906:	2300      	movs	r3, #0

}
 8014908:	4618      	mov	r0, r3
 801490a:	3714      	adds	r7, #20
 801490c:	46bd      	mov	sp, r7
 801490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014912:	4770      	bx	lr

08014914 <HAL_PCD_SetupStageCallback>:
extern PCD_HandleTypeDef hpcd_USB_DRD_FS;
/* Private function prototypes -----------------------------------------------*/
static USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status);
/* Private functions ---------------------------------------------------------*/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8014914:	b580      	push	{r7, lr}
 8014916:	b082      	sub	sp, #8
 8014918:	af00      	add	r7, sp, #0
 801491a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8014928:	4619      	mov	r1, r3
 801492a:	4610      	mov	r0, r2
 801492c:	f000 faa5 	bl	8014e7a <USBD_LL_SetupStage>
}
 8014930:	bf00      	nop
 8014932:	3708      	adds	r7, #8
 8014934:	46bd      	mov	sp, r7
 8014936:	bd80      	pop	{r7, pc}

08014938 <HAL_PCD_DataOutStageCallback>:

void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8014938:	b580      	push	{r7, lr}
 801493a:	b082      	sub	sp, #8
 801493c:	af00      	add	r7, sp, #0
 801493e:	6078      	str	r0, [r7, #4]
 8014940:	460b      	mov	r3, r1
 8014942:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 801494a:	78fa      	ldrb	r2, [r7, #3]
 801494c:	6879      	ldr	r1, [r7, #4]
 801494e:	4613      	mov	r3, r2
 8014950:	009b      	lsls	r3, r3, #2
 8014952:	4413      	add	r3, r2
 8014954:	00db      	lsls	r3, r3, #3
 8014956:	440b      	add	r3, r1
 8014958:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 801495c:	681a      	ldr	r2, [r3, #0]
 801495e:	78fb      	ldrb	r3, [r7, #3]
 8014960:	4619      	mov	r1, r3
 8014962:	f000 fadf 	bl	8014f24 <USBD_LL_DataOutStage>
}
 8014966:	bf00      	nop
 8014968:	3708      	adds	r7, #8
 801496a:	46bd      	mov	sp, r7
 801496c:	bd80      	pop	{r7, pc}

0801496e <HAL_PCD_DataInStageCallback>:

void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 801496e:	b580      	push	{r7, lr}
 8014970:	b082      	sub	sp, #8
 8014972:	af00      	add	r7, sp, #0
 8014974:	6078      	str	r0, [r7, #4]
 8014976:	460b      	mov	r3, r1
 8014978:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 8014980:	78fa      	ldrb	r2, [r7, #3]
 8014982:	6879      	ldr	r1, [r7, #4]
 8014984:	4613      	mov	r3, r2
 8014986:	009b      	lsls	r3, r3, #2
 8014988:	4413      	add	r3, r2
 801498a:	00db      	lsls	r3, r3, #3
 801498c:	440b      	add	r3, r1
 801498e:	3328      	adds	r3, #40	@ 0x28
 8014990:	681a      	ldr	r2, [r3, #0]
 8014992:	78fb      	ldrb	r3, [r7, #3]
 8014994:	4619      	mov	r1, r3
 8014996:	f000 fb78 	bl	801508a <USBD_LL_DataInStage>
}
 801499a:	bf00      	nop
 801499c:	3708      	adds	r7, #8
 801499e:	46bd      	mov	sp, r7
 80149a0:	bd80      	pop	{r7, pc}

080149a2 <HAL_PCD_SOFCallback>:

void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 80149a2:	b580      	push	{r7, lr}
 80149a4:	b082      	sub	sp, #8
 80149a6:	af00      	add	r7, sp, #0
 80149a8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80149b0:	4618      	mov	r0, r3
 80149b2:	f000 fc7e 	bl	80152b2 <USBD_LL_SOF>
}
 80149b6:	bf00      	nop
 80149b8:	3708      	adds	r7, #8
 80149ba:	46bd      	mov	sp, r7
 80149bc:	bd80      	pop	{r7, pc}

080149be <HAL_PCD_ResetCallback>:

void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 80149be:	b580      	push	{r7, lr}
 80149c0:	b084      	sub	sp, #16
 80149c2:	af00      	add	r7, sp, #0
 80149c4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80149c6:	2301      	movs	r3, #1
 80149c8:	73fb      	strb	r3, [r7, #15]
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	79db      	ldrb	r3, [r3, #7]
 80149ce:	2b02      	cmp	r3, #2
 80149d0:	d001      	beq.n	80149d6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80149d2:	f7ef ff7b 	bl	80048cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80149dc:	7bfa      	ldrb	r2, [r7, #15]
 80149de:	4611      	mov	r1, r2
 80149e0:	4618      	mov	r0, r3
 80149e2:	f000 fc56 	bl	8015292 <USBD_LL_SetSpeed>
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80149ec:	4618      	mov	r0, r3
 80149ee:	f000 fbfe 	bl	80151ee <USBD_LL_Reset>
}
 80149f2:	bf00      	nop
 80149f4:	3710      	adds	r7, #16
 80149f6:	46bd      	mov	sp, r7
 80149f8:	bd80      	pop	{r7, pc}
	...

080149fc <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80149fc:	b580      	push	{r7, lr}
 80149fe:	b082      	sub	sp, #8
 8014a00:	af00      	add	r7, sp, #0
 8014a02:	6078      	str	r0, [r7, #4]
      pdev->pData  = &hpcd_USB_DRD_FS;
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	4a19      	ldr	r2, [pc, #100]	@ (8014a6c <USBD_LL_Init+0x70>)
 8014a08:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x40);
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8014a12:	2340      	movs	r3, #64	@ 0x40
 8014a14:	2200      	movs	r2, #0
 8014a16:	2100      	movs	r1, #0
 8014a18:	f7f4 fe20 	bl	800965c <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x80);
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8014a22:	2380      	movs	r3, #128	@ 0x80
 8014a24:	2200      	movs	r2, #0
 8014a26:	2180      	movs	r1, #128	@ 0x80
 8014a28:	f7f4 fe18 	bl	800965c <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0xC0);
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8014a32:	23c0      	movs	r3, #192	@ 0xc0
 8014a34:	2200      	movs	r2, #0
 8014a36:	2181      	movs	r1, #129	@ 0x81
 8014a38:	f7f4 fe10 	bl	800965c <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0x100);
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8014a42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8014a46:	2200      	movs	r2, #0
 8014a48:	2101      	movs	r1, #1
 8014a4a:	f7f4 fe07 	bl	800965c <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x140);
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8014a54:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8014a58:	2200      	movs	r2, #0
 8014a5a:	2182      	movs	r1, #130	@ 0x82
 8014a5c:	f7f4 fdfe 	bl	800965c <HAL_PCDEx_PMAConfig>
      return USBD_OK;
 8014a60:	2300      	movs	r3, #0
}
 8014a62:	4618      	mov	r0, r3
 8014a64:	3708      	adds	r7, #8
 8014a66:	46bd      	mov	sp, r7
 8014a68:	bd80      	pop	{r7, pc}
 8014a6a:	bf00      	nop
 8014a6c:	2000267c 	.word	0x2000267c

08014a70 <USBD_LL_Start>:
      hal_status = HAL_PCD_DeInit(pdev->pData);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014a70:	b580      	push	{r7, lr}
 8014a72:	b084      	sub	sp, #16
 8014a74:	af00      	add	r7, sp, #0
 8014a76:	6078      	str	r0, [r7, #4]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_Start(pdev->pData);
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014a7e:	4618      	mov	r0, r3
 8014a80:	f7f3 facf 	bl	8008022 <HAL_PCD_Start>
 8014a84:	4603      	mov	r3, r0
 8014a86:	73fb      	strb	r3, [r7, #15]
      return  USBD_Get_USB_Status(hal_status);
 8014a88:	7bfb      	ldrb	r3, [r7, #15]
 8014a8a:	4618      	mov	r0, r3
 8014a8c:	f000 f916 	bl	8014cbc <USBD_Get_USB_Status>
 8014a90:	4603      	mov	r3, r0
}
 8014a92:	4618      	mov	r0, r3
 8014a94:	3710      	adds	r7, #16
 8014a96:	46bd      	mov	sp, r7
 8014a98:	bd80      	pop	{r7, pc}

08014a9a <USBD_LL_OpenEP>:
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t ep_type, uint16_t ep_mps)
{
 8014a9a:	b580      	push	{r7, lr}
 8014a9c:	b084      	sub	sp, #16
 8014a9e:	af00      	add	r7, sp, #0
 8014aa0:	6078      	str	r0, [r7, #4]
 8014aa2:	4608      	mov	r0, r1
 8014aa4:	4611      	mov	r1, r2
 8014aa6:	461a      	mov	r2, r3
 8014aa8:	4603      	mov	r3, r0
 8014aaa:	70fb      	strb	r3, [r7, #3]
 8014aac:	460b      	mov	r3, r1
 8014aae:	70bb      	strb	r3, [r7, #2]
 8014ab0:	4613      	mov	r3, r2
 8014ab2:	803b      	strh	r3, [r7, #0]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8014aba:	78bb      	ldrb	r3, [r7, #2]
 8014abc:	883a      	ldrh	r2, [r7, #0]
 8014abe:	78f9      	ldrb	r1, [r7, #3]
 8014ac0:	f7f3 fbfe 	bl	80082c0 <HAL_PCD_EP_Open>
 8014ac4:	4603      	mov	r3, r0
 8014ac6:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 8014ac8:	7bfb      	ldrb	r3, [r7, #15]
 8014aca:	4618      	mov	r0, r3
 8014acc:	f000 f8f6 	bl	8014cbc <USBD_Get_USB_Status>
 8014ad0:	4603      	mov	r3, r0
}
 8014ad2:	4618      	mov	r0, r3
 8014ad4:	3710      	adds	r7, #16
 8014ad6:	46bd      	mov	sp, r7
 8014ad8:	bd80      	pop	{r7, pc}

08014ada <USBD_LL_CloseEP>:

USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014ada:	b580      	push	{r7, lr}
 8014adc:	b084      	sub	sp, #16
 8014ade:	af00      	add	r7, sp, #0
 8014ae0:	6078      	str	r0, [r7, #4]
 8014ae2:	460b      	mov	r3, r1
 8014ae4:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014aec:	78fa      	ldrb	r2, [r7, #3]
 8014aee:	4611      	mov	r1, r2
 8014af0:	4618      	mov	r0, r3
 8014af2:	f7f3 fc46 	bl	8008382 <HAL_PCD_EP_Close>
 8014af6:	4603      	mov	r3, r0
 8014af8:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 8014afa:	7bfb      	ldrb	r3, [r7, #15]
 8014afc:	4618      	mov	r0, r3
 8014afe:	f000 f8dd 	bl	8014cbc <USBD_Get_USB_Status>
 8014b02:	4603      	mov	r3, r0
}
 8014b04:	4618      	mov	r0, r3
 8014b06:	3710      	adds	r7, #16
 8014b08:	46bd      	mov	sp, r7
 8014b0a:	bd80      	pop	{r7, pc}

08014b0c <USBD_LL_StallEP>:
      hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014b0c:	b580      	push	{r7, lr}
 8014b0e:	b084      	sub	sp, #16
 8014b10:	af00      	add	r7, sp, #0
 8014b12:	6078      	str	r0, [r7, #4]
 8014b14:	460b      	mov	r3, r1
 8014b16:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014b1e:	78fa      	ldrb	r2, [r7, #3]
 8014b20:	4611      	mov	r1, r2
 8014b22:	4618      	mov	r0, r3
 8014b24:	f7f3 fcf9 	bl	800851a <HAL_PCD_EP_SetStall>
 8014b28:	4603      	mov	r3, r0
 8014b2a:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 8014b2c:	7bfb      	ldrb	r3, [r7, #15]
 8014b2e:	4618      	mov	r0, r3
 8014b30:	f000 f8c4 	bl	8014cbc <USBD_Get_USB_Status>
 8014b34:	4603      	mov	r3, r0
}
 8014b36:	4618      	mov	r0, r3
 8014b38:	3710      	adds	r7, #16
 8014b3a:	46bd      	mov	sp, r7
 8014b3c:	bd80      	pop	{r7, pc}

08014b3e <USBD_LL_ClearStallEP>:

USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr)
{
 8014b3e:	b580      	push	{r7, lr}
 8014b40:	b084      	sub	sp, #16
 8014b42:	af00      	add	r7, sp, #0
 8014b44:	6078      	str	r0, [r7, #4]
 8014b46:	460b      	mov	r3, r1
 8014b48:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014b50:	78fa      	ldrb	r2, [r7, #3]
 8014b52:	4611      	mov	r1, r2
 8014b54:	4618      	mov	r0, r3
 8014b56:	f7f3 fd34 	bl	80085c2 <HAL_PCD_EP_ClrStall>
 8014b5a:	4603      	mov	r3, r0
 8014b5c:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 8014b5e:	7bfb      	ldrb	r3, [r7, #15]
 8014b60:	4618      	mov	r0, r3
 8014b62:	f000 f8ab 	bl	8014cbc <USBD_Get_USB_Status>
 8014b66:	4603      	mov	r3, r0
}
 8014b68:	4618      	mov	r0, r3
 8014b6a:	3710      	adds	r7, #16
 8014b6c:	46bd      	mov	sp, r7
 8014b6e:	bd80      	pop	{r7, pc}

08014b70 <USBD_LL_IsStallEP>:

uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014b70:	b480      	push	{r7}
 8014b72:	b085      	sub	sp, #20
 8014b74:	af00      	add	r7, sp, #0
 8014b76:	6078      	str	r0, [r7, #4]
 8014b78:	460b      	mov	r3, r1
 8014b7a:	70fb      	strb	r3, [r7, #3]
      PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014b82:	60fb      	str	r3, [r7, #12]
      if((ep_addr & 0x80) == 0x80)
 8014b84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	da0b      	bge.n	8014ba4 <USBD_LL_IsStallEP+0x34>
      {
             return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8014b8c:	78fb      	ldrb	r3, [r7, #3]
 8014b8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014b92:	68f9      	ldr	r1, [r7, #12]
 8014b94:	4613      	mov	r3, r2
 8014b96:	009b      	lsls	r3, r3, #2
 8014b98:	4413      	add	r3, r2
 8014b9a:	00db      	lsls	r3, r3, #3
 8014b9c:	440b      	add	r3, r1
 8014b9e:	3316      	adds	r3, #22
 8014ba0:	781b      	ldrb	r3, [r3, #0]
 8014ba2:	e00b      	b.n	8014bbc <USBD_LL_IsStallEP+0x4c>
      }
      else
      {
             return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8014ba4:	78fb      	ldrb	r3, [r7, #3]
 8014ba6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014baa:	68f9      	ldr	r1, [r7, #12]
 8014bac:	4613      	mov	r3, r2
 8014bae:	009b      	lsls	r3, r3, #2
 8014bb0:	4413      	add	r3, r2
 8014bb2:	00db      	lsls	r3, r3, #3
 8014bb4:	440b      	add	r3, r1
 8014bb6:	f503 73ab 	add.w	r3, r3, #342	@ 0x156
 8014bba:	781b      	ldrb	r3, [r3, #0]
      }
}
 8014bbc:	4618      	mov	r0, r3
 8014bbe:	3714      	adds	r7, #20
 8014bc0:	46bd      	mov	sp, r7
 8014bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bc6:	4770      	bx	lr

08014bc8 <USBD_LL_SetUSBAddress>:

USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev,
             uint8_t dev_addr)
{
 8014bc8:	b580      	push	{r7, lr}
 8014bca:	b084      	sub	sp, #16
 8014bcc:	af00      	add	r7, sp, #0
 8014bce:	6078      	str	r0, [r7, #4]
 8014bd0:	460b      	mov	r3, r1
 8014bd2:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014bda:	78fa      	ldrb	r2, [r7, #3]
 8014bdc:	4611      	mov	r1, r2
 8014bde:	4618      	mov	r0, r3
 8014be0:	f7f3 fb4a 	bl	8008278 <HAL_PCD_SetAddress>
 8014be4:	4603      	mov	r3, r0
 8014be6:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 8014be8:	7bfb      	ldrb	r3, [r7, #15]
 8014bea:	4618      	mov	r0, r3
 8014bec:	f000 f866 	bl	8014cbc <USBD_Get_USB_Status>
 8014bf0:	4603      	mov	r3, r0
}
 8014bf2:	4618      	mov	r0, r3
 8014bf4:	3710      	adds	r7, #16
 8014bf6:	46bd      	mov	sp, r7
 8014bf8:	bd80      	pop	{r7, pc}

08014bfa <USBD_LL_Transmit>:

USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t *pbuf, uint32_t size)
{
 8014bfa:	b580      	push	{r7, lr}
 8014bfc:	b086      	sub	sp, #24
 8014bfe:	af00      	add	r7, sp, #0
 8014c00:	60f8      	str	r0, [r7, #12]
 8014c02:	607a      	str	r2, [r7, #4]
 8014c04:	603b      	str	r3, [r7, #0]
 8014c06:	460b      	mov	r3, r1
 8014c08:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8014c10:	7af9      	ldrb	r1, [r7, #11]
 8014c12:	683b      	ldr	r3, [r7, #0]
 8014c14:	687a      	ldr	r2, [r7, #4]
 8014c16:	f7f3 fc48 	bl	80084aa <HAL_PCD_EP_Transmit>
 8014c1a:	4603      	mov	r3, r0
 8014c1c:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 8014c1e:	7dfb      	ldrb	r3, [r7, #23]
 8014c20:	4618      	mov	r0, r3
 8014c22:	f000 f84b 	bl	8014cbc <USBD_Get_USB_Status>
 8014c26:	4603      	mov	r3, r0
}
 8014c28:	4618      	mov	r0, r3
 8014c2a:	3718      	adds	r7, #24
 8014c2c:	46bd      	mov	sp, r7
 8014c2e:	bd80      	pop	{r7, pc}

08014c30 <USBD_LL_PrepareReceive>:

USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr, uint8_t *pbuf,
             uint32_t size)
{
 8014c30:	b580      	push	{r7, lr}
 8014c32:	b086      	sub	sp, #24
 8014c34:	af00      	add	r7, sp, #0
 8014c36:	60f8      	str	r0, [r7, #12]
 8014c38:	607a      	str	r2, [r7, #4]
 8014c3a:	603b      	str	r3, [r7, #0]
 8014c3c:	460b      	mov	r3, r1
 8014c3e:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8014c46:	7af9      	ldrb	r1, [r7, #11]
 8014c48:	683b      	ldr	r3, [r7, #0]
 8014c4a:	687a      	ldr	r2, [r7, #4]
 8014c4c:	f7f3 fbe3 	bl	8008416 <HAL_PCD_EP_Receive>
 8014c50:	4603      	mov	r3, r0
 8014c52:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 8014c54:	7dfb      	ldrb	r3, [r7, #23]
 8014c56:	4618      	mov	r0, r3
 8014c58:	f000 f830 	bl	8014cbc <USBD_Get_USB_Status>
 8014c5c:	4603      	mov	r3, r0
}
 8014c5e:	4618      	mov	r0, r3
 8014c60:	3718      	adds	r7, #24
 8014c62:	46bd      	mov	sp, r7
 8014c64:	bd80      	pop	{r7, pc}

08014c66 <USBD_LL_GetRxDataSize>:

uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014c66:	b580      	push	{r7, lr}
 8014c68:	b082      	sub	sp, #8
 8014c6a:	af00      	add	r7, sp, #0
 8014c6c:	6078      	str	r0, [r7, #4]
 8014c6e:	460b      	mov	r3, r1
 8014c70:	70fb      	strb	r3, [r7, #3]
      return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014c78:	78fa      	ldrb	r2, [r7, #3]
 8014c7a:	4611      	mov	r1, r2
 8014c7c:	4618      	mov	r0, r3
 8014c7e:	f7f3 fbfc 	bl	800847a <HAL_PCD_EP_GetRxCount>
 8014c82:	4603      	mov	r3, r0
}
 8014c84:	4618      	mov	r0, r3
 8014c86:	3708      	adds	r7, #8
 8014c88:	46bd      	mov	sp, r7
 8014c8a:	bd80      	pop	{r7, pc}

08014c8c <USBD_static_malloc>:

void *USBD_static_malloc(uint32_t size)
{
 8014c8c:	b480      	push	{r7}
 8014c8e:	b083      	sub	sp, #12
 8014c90:	af00      	add	r7, sp, #0
 8014c92:	6078      	str	r0, [r7, #4]
      UNUSED(size);
      static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef) / 4) + 1]; /* On 32-bit boundary */
      return mem;
 8014c94:	4b03      	ldr	r3, [pc, #12]	@ (8014ca4 <USBD_static_malloc+0x18>)
}
 8014c96:	4618      	mov	r0, r3
 8014c98:	370c      	adds	r7, #12
 8014c9a:	46bd      	mov	sp, r7
 8014c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ca0:	4770      	bx	lr
 8014ca2:	bf00      	nop
 8014ca4:	200130f0 	.word	0x200130f0

08014ca8 <USBD_static_free>:

void USBD_static_free(void *p)
{
 8014ca8:	b480      	push	{r7}
 8014caa:	b083      	sub	sp, #12
 8014cac:	af00      	add	r7, sp, #0
 8014cae:	6078      	str	r0, [r7, #4]
      UNUSED(p);
}
 8014cb0:	bf00      	nop
 8014cb2:	370c      	adds	r7, #12
 8014cb4:	46bd      	mov	sp, r7
 8014cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cba:	4770      	bx	lr

08014cbc <USBD_Get_USB_Status>:
{
      HAL_Delay(Delay);
}

USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8014cbc:	b480      	push	{r7}
 8014cbe:	b085      	sub	sp, #20
 8014cc0:	af00      	add	r7, sp, #0
 8014cc2:	4603      	mov	r3, r0
 8014cc4:	71fb      	strb	r3, [r7, #7]
      USBD_StatusTypeDef usb_status = USBD_OK;
 8014cc6:	2300      	movs	r3, #0
 8014cc8:	73fb      	strb	r3, [r7, #15]
      switch (hal_status)
 8014cca:	79fb      	ldrb	r3, [r7, #7]
 8014ccc:	2b03      	cmp	r3, #3
 8014cce:	d817      	bhi.n	8014d00 <USBD_Get_USB_Status+0x44>
 8014cd0:	a201      	add	r2, pc, #4	@ (adr r2, 8014cd8 <USBD_Get_USB_Status+0x1c>)
 8014cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014cd6:	bf00      	nop
 8014cd8:	08014ce9 	.word	0x08014ce9
 8014cdc:	08014cef 	.word	0x08014cef
 8014ce0:	08014cf5 	.word	0x08014cf5
 8014ce4:	08014cfb 	.word	0x08014cfb
      {
      case HAL_OK :
             usb_status = USBD_OK;
 8014ce8:	2300      	movs	r3, #0
 8014cea:	73fb      	strb	r3, [r7, #15]
             break;
 8014cec:	e00b      	b.n	8014d06 <USBD_Get_USB_Status+0x4a>
      case HAL_ERROR :
             usb_status = USBD_FAIL;
 8014cee:	2303      	movs	r3, #3
 8014cf0:	73fb      	strb	r3, [r7, #15]
             break;
 8014cf2:	e008      	b.n	8014d06 <USBD_Get_USB_Status+0x4a>
      case HAL_BUSY :
             usb_status = USBD_BUSY;
 8014cf4:	2301      	movs	r3, #1
 8014cf6:	73fb      	strb	r3, [r7, #15]
             break;
 8014cf8:	e005      	b.n	8014d06 <USBD_Get_USB_Status+0x4a>
      case HAL_TIMEOUT :
             usb_status = USBD_FAIL;
 8014cfa:	2303      	movs	r3, #3
 8014cfc:	73fb      	strb	r3, [r7, #15]
             break;
 8014cfe:	e002      	b.n	8014d06 <USBD_Get_USB_Status+0x4a>
      default :
             usb_status = USBD_FAIL;
 8014d00:	2303      	movs	r3, #3
 8014d02:	73fb      	strb	r3, [r7, #15]
             break;
 8014d04:	bf00      	nop
      }
      return usb_status;
 8014d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d08:	4618      	mov	r0, r3
 8014d0a:	3714      	adds	r7, #20
 8014d0c:	46bd      	mov	sp, r7
 8014d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d12:	4770      	bx	lr

08014d14 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8014d14:	b580      	push	{r7, lr}
 8014d16:	b086      	sub	sp, #24
 8014d18:	af00      	add	r7, sp, #0
 8014d1a:	60f8      	str	r0, [r7, #12]
 8014d1c:	60b9      	str	r1, [r7, #8]
 8014d1e:	4613      	mov	r3, r2
 8014d20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014d22:	68fb      	ldr	r3, [r7, #12]
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d101      	bne.n	8014d2c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014d28:	2303      	movs	r3, #3
 8014d2a:	e01f      	b.n	8014d6c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8014d2c:	68fb      	ldr	r3, [r7, #12]
 8014d2e:	2200      	movs	r2, #0
 8014d30:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8014d34:	68fb      	ldr	r3, [r7, #12]
 8014d36:	2200      	movs	r2, #0
 8014d38:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8014d3c:	68fb      	ldr	r3, [r7, #12]
 8014d3e:	2200      	movs	r2, #0
 8014d40:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014d44:	68bb      	ldr	r3, [r7, #8]
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d003      	beq.n	8014d52 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	68ba      	ldr	r2, [r7, #8]
 8014d4e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	2201      	movs	r2, #1
 8014d56:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8014d5a:	68fb      	ldr	r3, [r7, #12]
 8014d5c:	79fa      	ldrb	r2, [r7, #7]
 8014d5e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014d60:	68f8      	ldr	r0, [r7, #12]
 8014d62:	f7ff fe4b 	bl	80149fc <USBD_LL_Init>
 8014d66:	4603      	mov	r3, r0
 8014d68:	75fb      	strb	r3, [r7, #23]

  return ret;
 8014d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8014d6c:	4618      	mov	r0, r3
 8014d6e:	3718      	adds	r7, #24
 8014d70:	46bd      	mov	sp, r7
 8014d72:	bd80      	pop	{r7, pc}

08014d74 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014d74:	b580      	push	{r7, lr}
 8014d76:	b084      	sub	sp, #16
 8014d78:	af00      	add	r7, sp, #0
 8014d7a:	6078      	str	r0, [r7, #4]
 8014d7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014d7e:	2300      	movs	r3, #0
 8014d80:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8014d82:	683b      	ldr	r3, [r7, #0]
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d101      	bne.n	8014d8c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014d88:	2303      	movs	r3, #3
 8014d8a:	e025      	b.n	8014dd8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	683a      	ldr	r2, [r7, #0]
 8014d90:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	32ae      	adds	r2, #174	@ 0xae
 8014d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	d00f      	beq.n	8014dc8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	32ae      	adds	r2, #174	@ 0xae
 8014db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014db8:	f107 020e 	add.w	r2, r7, #14
 8014dbc:	4610      	mov	r0, r2
 8014dbe:	4798      	blx	r3
 8014dc0:	4602      	mov	r2, r0
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8014dce:	1c5a      	adds	r2, r3, #1
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8014dd6:	2300      	movs	r3, #0
}
 8014dd8:	4618      	mov	r0, r3
 8014dda:	3710      	adds	r7, #16
 8014ddc:	46bd      	mov	sp, r7
 8014dde:	bd80      	pop	{r7, pc}

08014de0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8014de0:	b580      	push	{r7, lr}
 8014de2:	b082      	sub	sp, #8
 8014de4:	af00      	add	r7, sp, #0
 8014de6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8014de8:	6878      	ldr	r0, [r7, #4]
 8014dea:	f7ff fe41 	bl	8014a70 <USBD_LL_Start>
 8014dee:	4603      	mov	r3, r0
}
 8014df0:	4618      	mov	r0, r3
 8014df2:	3708      	adds	r7, #8
 8014df4:	46bd      	mov	sp, r7
 8014df6:	bd80      	pop	{r7, pc}

08014df8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8014df8:	b480      	push	{r7}
 8014dfa:	b083      	sub	sp, #12
 8014dfc:	af00      	add	r7, sp, #0
 8014dfe:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014e00:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8014e02:	4618      	mov	r0, r3
 8014e04:	370c      	adds	r7, #12
 8014e06:	46bd      	mov	sp, r7
 8014e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e0c:	4770      	bx	lr

08014e0e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014e0e:	b580      	push	{r7, lr}
 8014e10:	b084      	sub	sp, #16
 8014e12:	af00      	add	r7, sp, #0
 8014e14:	6078      	str	r0, [r7, #4]
 8014e16:	460b      	mov	r3, r1
 8014e18:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014e1a:	2300      	movs	r3, #0
 8014e1c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d009      	beq.n	8014e3c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014e2e:	681b      	ldr	r3, [r3, #0]
 8014e30:	78fa      	ldrb	r2, [r7, #3]
 8014e32:	4611      	mov	r1, r2
 8014e34:	6878      	ldr	r0, [r7, #4]
 8014e36:	4798      	blx	r3
 8014e38:	4603      	mov	r3, r0
 8014e3a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e3e:	4618      	mov	r0, r3
 8014e40:	3710      	adds	r7, #16
 8014e42:	46bd      	mov	sp, r7
 8014e44:	bd80      	pop	{r7, pc}

08014e46 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014e46:	b580      	push	{r7, lr}
 8014e48:	b084      	sub	sp, #16
 8014e4a:	af00      	add	r7, sp, #0
 8014e4c:	6078      	str	r0, [r7, #4]
 8014e4e:	460b      	mov	r3, r1
 8014e50:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014e52:	2300      	movs	r3, #0
 8014e54:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014e5c:	685b      	ldr	r3, [r3, #4]
 8014e5e:	78fa      	ldrb	r2, [r7, #3]
 8014e60:	4611      	mov	r1, r2
 8014e62:	6878      	ldr	r0, [r7, #4]
 8014e64:	4798      	blx	r3
 8014e66:	4603      	mov	r3, r0
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d001      	beq.n	8014e70 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8014e6c:	2303      	movs	r3, #3
 8014e6e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e72:	4618      	mov	r0, r3
 8014e74:	3710      	adds	r7, #16
 8014e76:	46bd      	mov	sp, r7
 8014e78:	bd80      	pop	{r7, pc}

08014e7a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8014e7a:	b580      	push	{r7, lr}
 8014e7c:	b084      	sub	sp, #16
 8014e7e:	af00      	add	r7, sp, #0
 8014e80:	6078      	str	r0, [r7, #4]
 8014e82:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8014e8a:	6839      	ldr	r1, [r7, #0]
 8014e8c:	4618      	mov	r0, r3
 8014e8e:	f001 f846 	bl	8015f1e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	2201      	movs	r2, #1
 8014e96:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8014ea0:	461a      	mov	r2, r3
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8014eae:	f003 031f 	and.w	r3, r3, #31
 8014eb2:	2b02      	cmp	r3, #2
 8014eb4:	d01a      	beq.n	8014eec <USBD_LL_SetupStage+0x72>
 8014eb6:	2b02      	cmp	r3, #2
 8014eb8:	d822      	bhi.n	8014f00 <USBD_LL_SetupStage+0x86>
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d002      	beq.n	8014ec4 <USBD_LL_SetupStage+0x4a>
 8014ebe:	2b01      	cmp	r3, #1
 8014ec0:	d00a      	beq.n	8014ed8 <USBD_LL_SetupStage+0x5e>
 8014ec2:	e01d      	b.n	8014f00 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8014eca:	4619      	mov	r1, r3
 8014ecc:	6878      	ldr	r0, [r7, #4]
 8014ece:	f000 fa9d 	bl	801540c <USBD_StdDevReq>
 8014ed2:	4603      	mov	r3, r0
 8014ed4:	73fb      	strb	r3, [r7, #15]
      break;
 8014ed6:	e020      	b.n	8014f1a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8014ede:	4619      	mov	r1, r3
 8014ee0:	6878      	ldr	r0, [r7, #4]
 8014ee2:	f000 fb05 	bl	80154f0 <USBD_StdItfReq>
 8014ee6:	4603      	mov	r3, r0
 8014ee8:	73fb      	strb	r3, [r7, #15]
      break;
 8014eea:	e016      	b.n	8014f1a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8014ef2:	4619      	mov	r1, r3
 8014ef4:	6878      	ldr	r0, [r7, #4]
 8014ef6:	f000 fb67 	bl	80155c8 <USBD_StdEPReq>
 8014efa:	4603      	mov	r3, r0
 8014efc:	73fb      	strb	r3, [r7, #15]
      break;
 8014efe:	e00c      	b.n	8014f1a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8014f06:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8014f0a:	b2db      	uxtb	r3, r3
 8014f0c:	4619      	mov	r1, r3
 8014f0e:	6878      	ldr	r0, [r7, #4]
 8014f10:	f7ff fdfc 	bl	8014b0c <USBD_LL_StallEP>
 8014f14:	4603      	mov	r3, r0
 8014f16:	73fb      	strb	r3, [r7, #15]
      break;
 8014f18:	bf00      	nop
  }

  return ret;
 8014f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f1c:	4618      	mov	r0, r3
 8014f1e:	3710      	adds	r7, #16
 8014f20:	46bd      	mov	sp, r7
 8014f22:	bd80      	pop	{r7, pc}

08014f24 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8014f24:	b580      	push	{r7, lr}
 8014f26:	b086      	sub	sp, #24
 8014f28:	af00      	add	r7, sp, #0
 8014f2a:	60f8      	str	r0, [r7, #12]
 8014f2c:	460b      	mov	r3, r1
 8014f2e:	607a      	str	r2, [r7, #4]
 8014f30:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8014f32:	2300      	movs	r3, #0
 8014f34:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8014f36:	7afb      	ldrb	r3, [r7, #11]
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d16e      	bne.n	801501a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8014f3c:	68fb      	ldr	r3, [r7, #12]
 8014f3e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8014f42:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8014f4a:	2b03      	cmp	r3, #3
 8014f4c:	f040 8098 	bne.w	8015080 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8014f50:	693b      	ldr	r3, [r7, #16]
 8014f52:	689a      	ldr	r2, [r3, #8]
 8014f54:	693b      	ldr	r3, [r7, #16]
 8014f56:	68db      	ldr	r3, [r3, #12]
 8014f58:	429a      	cmp	r2, r3
 8014f5a:	d913      	bls.n	8014f84 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8014f5c:	693b      	ldr	r3, [r7, #16]
 8014f5e:	689a      	ldr	r2, [r3, #8]
 8014f60:	693b      	ldr	r3, [r7, #16]
 8014f62:	68db      	ldr	r3, [r3, #12]
 8014f64:	1ad2      	subs	r2, r2, r3
 8014f66:	693b      	ldr	r3, [r7, #16]
 8014f68:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8014f6a:	693b      	ldr	r3, [r7, #16]
 8014f6c:	68da      	ldr	r2, [r3, #12]
 8014f6e:	693b      	ldr	r3, [r7, #16]
 8014f70:	689b      	ldr	r3, [r3, #8]
 8014f72:	4293      	cmp	r3, r2
 8014f74:	bf28      	it	cs
 8014f76:	4613      	movcs	r3, r2
 8014f78:	461a      	mov	r2, r3
 8014f7a:	6879      	ldr	r1, [r7, #4]
 8014f7c:	68f8      	ldr	r0, [r7, #12]
 8014f7e:	f001 f9cf 	bl	8016320 <USBD_CtlContinueRx>
 8014f82:	e07d      	b.n	8015080 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8014f8a:	f003 031f 	and.w	r3, r3, #31
 8014f8e:	2b02      	cmp	r3, #2
 8014f90:	d014      	beq.n	8014fbc <USBD_LL_DataOutStage+0x98>
 8014f92:	2b02      	cmp	r3, #2
 8014f94:	d81d      	bhi.n	8014fd2 <USBD_LL_DataOutStage+0xae>
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d002      	beq.n	8014fa0 <USBD_LL_DataOutStage+0x7c>
 8014f9a:	2b01      	cmp	r3, #1
 8014f9c:	d003      	beq.n	8014fa6 <USBD_LL_DataOutStage+0x82>
 8014f9e:	e018      	b.n	8014fd2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8014fa0:	2300      	movs	r3, #0
 8014fa2:	75bb      	strb	r3, [r7, #22]
            break;
 8014fa4:	e018      	b.n	8014fd8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8014fa6:	68fb      	ldr	r3, [r7, #12]
 8014fa8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8014fac:	b2db      	uxtb	r3, r3
 8014fae:	4619      	mov	r1, r3
 8014fb0:	68f8      	ldr	r0, [r7, #12]
 8014fb2:	f000 f99e 	bl	80152f2 <USBD_CoreFindIF>
 8014fb6:	4603      	mov	r3, r0
 8014fb8:	75bb      	strb	r3, [r7, #22]
            break;
 8014fba:	e00d      	b.n	8014fd8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8014fc2:	b2db      	uxtb	r3, r3
 8014fc4:	4619      	mov	r1, r3
 8014fc6:	68f8      	ldr	r0, [r7, #12]
 8014fc8:	f000 f9a0 	bl	801530c <USBD_CoreFindEP>
 8014fcc:	4603      	mov	r3, r0
 8014fce:	75bb      	strb	r3, [r7, #22]
            break;
 8014fd0:	e002      	b.n	8014fd8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8014fd2:	2300      	movs	r3, #0
 8014fd4:	75bb      	strb	r3, [r7, #22]
            break;
 8014fd6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8014fd8:	7dbb      	ldrb	r3, [r7, #22]
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d119      	bne.n	8015012 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014fe4:	b2db      	uxtb	r3, r3
 8014fe6:	2b03      	cmp	r3, #3
 8014fe8:	d113      	bne.n	8015012 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8014fea:	7dba      	ldrb	r2, [r7, #22]
 8014fec:	68fb      	ldr	r3, [r7, #12]
 8014fee:	32ae      	adds	r2, #174	@ 0xae
 8014ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ff4:	691b      	ldr	r3, [r3, #16]
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d00b      	beq.n	8015012 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8014ffa:	7dba      	ldrb	r2, [r7, #22]
 8014ffc:	68fb      	ldr	r3, [r7, #12]
 8014ffe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8015002:	7dba      	ldrb	r2, [r7, #22]
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	32ae      	adds	r2, #174	@ 0xae
 8015008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801500c:	691b      	ldr	r3, [r3, #16]
 801500e:	68f8      	ldr	r0, [r7, #12]
 8015010:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8015012:	68f8      	ldr	r0, [r7, #12]
 8015014:	f001 f995 	bl	8016342 <USBD_CtlSendStatus>
 8015018:	e032      	b.n	8015080 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801501a:	7afb      	ldrb	r3, [r7, #11]
 801501c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015020:	b2db      	uxtb	r3, r3
 8015022:	4619      	mov	r1, r3
 8015024:	68f8      	ldr	r0, [r7, #12]
 8015026:	f000 f971 	bl	801530c <USBD_CoreFindEP>
 801502a:	4603      	mov	r3, r0
 801502c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801502e:	7dbb      	ldrb	r3, [r7, #22]
 8015030:	2bff      	cmp	r3, #255	@ 0xff
 8015032:	d025      	beq.n	8015080 <USBD_LL_DataOutStage+0x15c>
 8015034:	7dbb      	ldrb	r3, [r7, #22]
 8015036:	2b00      	cmp	r3, #0
 8015038:	d122      	bne.n	8015080 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801503a:	68fb      	ldr	r3, [r7, #12]
 801503c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015040:	b2db      	uxtb	r3, r3
 8015042:	2b03      	cmp	r3, #3
 8015044:	d117      	bne.n	8015076 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8015046:	7dba      	ldrb	r2, [r7, #22]
 8015048:	68fb      	ldr	r3, [r7, #12]
 801504a:	32ae      	adds	r2, #174	@ 0xae
 801504c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015050:	699b      	ldr	r3, [r3, #24]
 8015052:	2b00      	cmp	r3, #0
 8015054:	d00f      	beq.n	8015076 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8015056:	7dba      	ldrb	r2, [r7, #22]
 8015058:	68fb      	ldr	r3, [r7, #12]
 801505a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801505e:	7dba      	ldrb	r2, [r7, #22]
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	32ae      	adds	r2, #174	@ 0xae
 8015064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015068:	699b      	ldr	r3, [r3, #24]
 801506a:	7afa      	ldrb	r2, [r7, #11]
 801506c:	4611      	mov	r1, r2
 801506e:	68f8      	ldr	r0, [r7, #12]
 8015070:	4798      	blx	r3
 8015072:	4603      	mov	r3, r0
 8015074:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8015076:	7dfb      	ldrb	r3, [r7, #23]
 8015078:	2b00      	cmp	r3, #0
 801507a:	d001      	beq.n	8015080 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801507c:	7dfb      	ldrb	r3, [r7, #23]
 801507e:	e000      	b.n	8015082 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8015080:	2300      	movs	r3, #0
}
 8015082:	4618      	mov	r0, r3
 8015084:	3718      	adds	r7, #24
 8015086:	46bd      	mov	sp, r7
 8015088:	bd80      	pop	{r7, pc}

0801508a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801508a:	b580      	push	{r7, lr}
 801508c:	b086      	sub	sp, #24
 801508e:	af00      	add	r7, sp, #0
 8015090:	60f8      	str	r0, [r7, #12]
 8015092:	460b      	mov	r3, r1
 8015094:	607a      	str	r2, [r7, #4]
 8015096:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8015098:	7afb      	ldrb	r3, [r7, #11]
 801509a:	2b00      	cmp	r3, #0
 801509c:	d16f      	bne.n	801517e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801509e:	68fb      	ldr	r3, [r7, #12]
 80150a0:	3314      	adds	r3, #20
 80150a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80150a4:	68fb      	ldr	r3, [r7, #12]
 80150a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80150aa:	2b02      	cmp	r3, #2
 80150ac:	d15a      	bne.n	8015164 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80150ae:	693b      	ldr	r3, [r7, #16]
 80150b0:	689a      	ldr	r2, [r3, #8]
 80150b2:	693b      	ldr	r3, [r7, #16]
 80150b4:	68db      	ldr	r3, [r3, #12]
 80150b6:	429a      	cmp	r2, r3
 80150b8:	d914      	bls.n	80150e4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80150ba:	693b      	ldr	r3, [r7, #16]
 80150bc:	689a      	ldr	r2, [r3, #8]
 80150be:	693b      	ldr	r3, [r7, #16]
 80150c0:	68db      	ldr	r3, [r3, #12]
 80150c2:	1ad2      	subs	r2, r2, r3
 80150c4:	693b      	ldr	r3, [r7, #16]
 80150c6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80150c8:	693b      	ldr	r3, [r7, #16]
 80150ca:	689b      	ldr	r3, [r3, #8]
 80150cc:	461a      	mov	r2, r3
 80150ce:	6879      	ldr	r1, [r7, #4]
 80150d0:	68f8      	ldr	r0, [r7, #12]
 80150d2:	f001 f8f7 	bl	80162c4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80150d6:	2300      	movs	r3, #0
 80150d8:	2200      	movs	r2, #0
 80150da:	2100      	movs	r1, #0
 80150dc:	68f8      	ldr	r0, [r7, #12]
 80150de:	f7ff fda7 	bl	8014c30 <USBD_LL_PrepareReceive>
 80150e2:	e03f      	b.n	8015164 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80150e4:	693b      	ldr	r3, [r7, #16]
 80150e6:	68da      	ldr	r2, [r3, #12]
 80150e8:	693b      	ldr	r3, [r7, #16]
 80150ea:	689b      	ldr	r3, [r3, #8]
 80150ec:	429a      	cmp	r2, r3
 80150ee:	d11c      	bne.n	801512a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80150f0:	693b      	ldr	r3, [r7, #16]
 80150f2:	685a      	ldr	r2, [r3, #4]
 80150f4:	693b      	ldr	r3, [r7, #16]
 80150f6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80150f8:	429a      	cmp	r2, r3
 80150fa:	d316      	bcc.n	801512a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80150fc:	693b      	ldr	r3, [r7, #16]
 80150fe:	685a      	ldr	r2, [r3, #4]
 8015100:	68fb      	ldr	r3, [r7, #12]
 8015102:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8015106:	429a      	cmp	r2, r3
 8015108:	d20f      	bcs.n	801512a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801510a:	2200      	movs	r2, #0
 801510c:	2100      	movs	r1, #0
 801510e:	68f8      	ldr	r0, [r7, #12]
 8015110:	f001 f8d8 	bl	80162c4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	2200      	movs	r2, #0
 8015118:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801511c:	2300      	movs	r3, #0
 801511e:	2200      	movs	r2, #0
 8015120:	2100      	movs	r1, #0
 8015122:	68f8      	ldr	r0, [r7, #12]
 8015124:	f7ff fd84 	bl	8014c30 <USBD_LL_PrepareReceive>
 8015128:	e01c      	b.n	8015164 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801512a:	68fb      	ldr	r3, [r7, #12]
 801512c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015130:	b2db      	uxtb	r3, r3
 8015132:	2b03      	cmp	r3, #3
 8015134:	d10f      	bne.n	8015156 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8015136:	68fb      	ldr	r3, [r7, #12]
 8015138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801513c:	68db      	ldr	r3, [r3, #12]
 801513e:	2b00      	cmp	r3, #0
 8015140:	d009      	beq.n	8015156 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8015142:	68fb      	ldr	r3, [r7, #12]
 8015144:	2200      	movs	r2, #0
 8015146:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801514a:	68fb      	ldr	r3, [r7, #12]
 801514c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015150:	68db      	ldr	r3, [r3, #12]
 8015152:	68f8      	ldr	r0, [r7, #12]
 8015154:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015156:	2180      	movs	r1, #128	@ 0x80
 8015158:	68f8      	ldr	r0, [r7, #12]
 801515a:	f7ff fcd7 	bl	8014b0c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801515e:	68f8      	ldr	r0, [r7, #12]
 8015160:	f001 f902 	bl	8016368 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8015164:	68fb      	ldr	r3, [r7, #12]
 8015166:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 801516a:	2b00      	cmp	r3, #0
 801516c:	d03a      	beq.n	80151e4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801516e:	68f8      	ldr	r0, [r7, #12]
 8015170:	f7ff fe42 	bl	8014df8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	2200      	movs	r2, #0
 8015178:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 801517c:	e032      	b.n	80151e4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801517e:	7afb      	ldrb	r3, [r7, #11]
 8015180:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8015184:	b2db      	uxtb	r3, r3
 8015186:	4619      	mov	r1, r3
 8015188:	68f8      	ldr	r0, [r7, #12]
 801518a:	f000 f8bf 	bl	801530c <USBD_CoreFindEP>
 801518e:	4603      	mov	r3, r0
 8015190:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015192:	7dfb      	ldrb	r3, [r7, #23]
 8015194:	2bff      	cmp	r3, #255	@ 0xff
 8015196:	d025      	beq.n	80151e4 <USBD_LL_DataInStage+0x15a>
 8015198:	7dfb      	ldrb	r3, [r7, #23]
 801519a:	2b00      	cmp	r3, #0
 801519c:	d122      	bne.n	80151e4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801519e:	68fb      	ldr	r3, [r7, #12]
 80151a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80151a4:	b2db      	uxtb	r3, r3
 80151a6:	2b03      	cmp	r3, #3
 80151a8:	d11c      	bne.n	80151e4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80151aa:	7dfa      	ldrb	r2, [r7, #23]
 80151ac:	68fb      	ldr	r3, [r7, #12]
 80151ae:	32ae      	adds	r2, #174	@ 0xae
 80151b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151b4:	695b      	ldr	r3, [r3, #20]
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	d014      	beq.n	80151e4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80151ba:	7dfa      	ldrb	r2, [r7, #23]
 80151bc:	68fb      	ldr	r3, [r7, #12]
 80151be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80151c2:	7dfa      	ldrb	r2, [r7, #23]
 80151c4:	68fb      	ldr	r3, [r7, #12]
 80151c6:	32ae      	adds	r2, #174	@ 0xae
 80151c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151cc:	695b      	ldr	r3, [r3, #20]
 80151ce:	7afa      	ldrb	r2, [r7, #11]
 80151d0:	4611      	mov	r1, r2
 80151d2:	68f8      	ldr	r0, [r7, #12]
 80151d4:	4798      	blx	r3
 80151d6:	4603      	mov	r3, r0
 80151d8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80151da:	7dbb      	ldrb	r3, [r7, #22]
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d001      	beq.n	80151e4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80151e0:	7dbb      	ldrb	r3, [r7, #22]
 80151e2:	e000      	b.n	80151e6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80151e4:	2300      	movs	r3, #0
}
 80151e6:	4618      	mov	r0, r3
 80151e8:	3718      	adds	r7, #24
 80151ea:	46bd      	mov	sp, r7
 80151ec:	bd80      	pop	{r7, pc}

080151ee <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80151ee:	b580      	push	{r7, lr}
 80151f0:	b084      	sub	sp, #16
 80151f2:	af00      	add	r7, sp, #0
 80151f4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80151f6:	2300      	movs	r3, #0
 80151f8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	2201      	movs	r2, #1
 80151fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	2200      	movs	r2, #0
 8015206:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	2200      	movs	r2, #0
 801520e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	2200      	movs	r2, #0
 8015214:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	2200      	movs	r2, #0
 801521c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015226:	2b00      	cmp	r3, #0
 8015228:	d014      	beq.n	8015254 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015230:	685b      	ldr	r3, [r3, #4]
 8015232:	2b00      	cmp	r3, #0
 8015234:	d00e      	beq.n	8015254 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801523c:	685b      	ldr	r3, [r3, #4]
 801523e:	687a      	ldr	r2, [r7, #4]
 8015240:	6852      	ldr	r2, [r2, #4]
 8015242:	b2d2      	uxtb	r2, r2
 8015244:	4611      	mov	r1, r2
 8015246:	6878      	ldr	r0, [r7, #4]
 8015248:	4798      	blx	r3
 801524a:	4603      	mov	r3, r0
 801524c:	2b00      	cmp	r3, #0
 801524e:	d001      	beq.n	8015254 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8015250:	2303      	movs	r3, #3
 8015252:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015254:	2340      	movs	r3, #64	@ 0x40
 8015256:	2200      	movs	r2, #0
 8015258:	2100      	movs	r1, #0
 801525a:	6878      	ldr	r0, [r7, #4]
 801525c:	f7ff fc1d 	bl	8014a9a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	2201      	movs	r2, #1
 8015264:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	2240      	movs	r2, #64	@ 0x40
 801526c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015270:	2340      	movs	r3, #64	@ 0x40
 8015272:	2200      	movs	r2, #0
 8015274:	2180      	movs	r1, #128	@ 0x80
 8015276:	6878      	ldr	r0, [r7, #4]
 8015278:	f7ff fc0f 	bl	8014a9a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	2201      	movs	r2, #1
 8015280:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	2240      	movs	r2, #64	@ 0x40
 8015286:	621a      	str	r2, [r3, #32]

  return ret;
 8015288:	7bfb      	ldrb	r3, [r7, #15]
}
 801528a:	4618      	mov	r0, r3
 801528c:	3710      	adds	r7, #16
 801528e:	46bd      	mov	sp, r7
 8015290:	bd80      	pop	{r7, pc}

08015292 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015292:	b480      	push	{r7}
 8015294:	b083      	sub	sp, #12
 8015296:	af00      	add	r7, sp, #0
 8015298:	6078      	str	r0, [r7, #4]
 801529a:	460b      	mov	r3, r1
 801529c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	78fa      	ldrb	r2, [r7, #3]
 80152a2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80152a4:	2300      	movs	r3, #0
}
 80152a6:	4618      	mov	r0, r3
 80152a8:	370c      	adds	r7, #12
 80152aa:	46bd      	mov	sp, r7
 80152ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152b0:	4770      	bx	lr

080152b2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80152b2:	b580      	push	{r7, lr}
 80152b4:	b082      	sub	sp, #8
 80152b6:	af00      	add	r7, sp, #0
 80152b8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80152c0:	b2db      	uxtb	r3, r3
 80152c2:	2b03      	cmp	r3, #3
 80152c4:	d110      	bne.n	80152e8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d00b      	beq.n	80152e8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80152d6:	69db      	ldr	r3, [r3, #28]
 80152d8:	2b00      	cmp	r3, #0
 80152da:	d005      	beq.n	80152e8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80152e2:	69db      	ldr	r3, [r3, #28]
 80152e4:	6878      	ldr	r0, [r7, #4]
 80152e6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80152e8:	2300      	movs	r3, #0
}
 80152ea:	4618      	mov	r0, r3
 80152ec:	3708      	adds	r7, #8
 80152ee:	46bd      	mov	sp, r7
 80152f0:	bd80      	pop	{r7, pc}

080152f2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80152f2:	b480      	push	{r7}
 80152f4:	b083      	sub	sp, #12
 80152f6:	af00      	add	r7, sp, #0
 80152f8:	6078      	str	r0, [r7, #4]
 80152fa:	460b      	mov	r3, r1
 80152fc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80152fe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015300:	4618      	mov	r0, r3
 8015302:	370c      	adds	r7, #12
 8015304:	46bd      	mov	sp, r7
 8015306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801530a:	4770      	bx	lr

0801530c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801530c:	b480      	push	{r7}
 801530e:	b083      	sub	sp, #12
 8015310:	af00      	add	r7, sp, #0
 8015312:	6078      	str	r0, [r7, #4]
 8015314:	460b      	mov	r3, r1
 8015316:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015318:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801531a:	4618      	mov	r0, r3
 801531c:	370c      	adds	r7, #12
 801531e:	46bd      	mov	sp, r7
 8015320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015324:	4770      	bx	lr

08015326 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8015326:	b580      	push	{r7, lr}
 8015328:	b086      	sub	sp, #24
 801532a:	af00      	add	r7, sp, #0
 801532c:	6078      	str	r0, [r7, #4]
 801532e:	460b      	mov	r3, r1
 8015330:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801533a:	2300      	movs	r3, #0
 801533c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801533e:	68fb      	ldr	r3, [r7, #12]
 8015340:	885b      	ldrh	r3, [r3, #2]
 8015342:	b29b      	uxth	r3, r3
 8015344:	68fa      	ldr	r2, [r7, #12]
 8015346:	7812      	ldrb	r2, [r2, #0]
 8015348:	4293      	cmp	r3, r2
 801534a:	d91f      	bls.n	801538c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 801534c:	68fb      	ldr	r3, [r7, #12]
 801534e:	781b      	ldrb	r3, [r3, #0]
 8015350:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8015352:	e013      	b.n	801537c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8015354:	f107 030a 	add.w	r3, r7, #10
 8015358:	4619      	mov	r1, r3
 801535a:	6978      	ldr	r0, [r7, #20]
 801535c:	f000 f81b 	bl	8015396 <USBD_GetNextDesc>
 8015360:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8015362:	697b      	ldr	r3, [r7, #20]
 8015364:	785b      	ldrb	r3, [r3, #1]
 8015366:	2b05      	cmp	r3, #5
 8015368:	d108      	bne.n	801537c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801536a:	697b      	ldr	r3, [r7, #20]
 801536c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801536e:	693b      	ldr	r3, [r7, #16]
 8015370:	789b      	ldrb	r3, [r3, #2]
 8015372:	78fa      	ldrb	r2, [r7, #3]
 8015374:	429a      	cmp	r2, r3
 8015376:	d008      	beq.n	801538a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8015378:	2300      	movs	r3, #0
 801537a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 801537c:	68fb      	ldr	r3, [r7, #12]
 801537e:	885b      	ldrh	r3, [r3, #2]
 8015380:	b29a      	uxth	r2, r3
 8015382:	897b      	ldrh	r3, [r7, #10]
 8015384:	429a      	cmp	r2, r3
 8015386:	d8e5      	bhi.n	8015354 <USBD_GetEpDesc+0x2e>
 8015388:	e000      	b.n	801538c <USBD_GetEpDesc+0x66>
          break;
 801538a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 801538c:	693b      	ldr	r3, [r7, #16]
}
 801538e:	4618      	mov	r0, r3
 8015390:	3718      	adds	r7, #24
 8015392:	46bd      	mov	sp, r7
 8015394:	bd80      	pop	{r7, pc}

08015396 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8015396:	b480      	push	{r7}
 8015398:	b085      	sub	sp, #20
 801539a:	af00      	add	r7, sp, #0
 801539c:	6078      	str	r0, [r7, #4]
 801539e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80153a4:	683b      	ldr	r3, [r7, #0]
 80153a6:	881b      	ldrh	r3, [r3, #0]
 80153a8:	68fa      	ldr	r2, [r7, #12]
 80153aa:	7812      	ldrb	r2, [r2, #0]
 80153ac:	4413      	add	r3, r2
 80153ae:	b29a      	uxth	r2, r3
 80153b0:	683b      	ldr	r3, [r7, #0]
 80153b2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	781b      	ldrb	r3, [r3, #0]
 80153b8:	461a      	mov	r2, r3
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	4413      	add	r3, r2
 80153be:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80153c0:	68fb      	ldr	r3, [r7, #12]
}
 80153c2:	4618      	mov	r0, r3
 80153c4:	3714      	adds	r7, #20
 80153c6:	46bd      	mov	sp, r7
 80153c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153cc:	4770      	bx	lr

080153ce <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80153ce:	b480      	push	{r7}
 80153d0:	b087      	sub	sp, #28
 80153d2:	af00      	add	r7, sp, #0
 80153d4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80153da:	697b      	ldr	r3, [r7, #20]
 80153dc:	781b      	ldrb	r3, [r3, #0]
 80153de:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80153e0:	697b      	ldr	r3, [r7, #20]
 80153e2:	3301      	adds	r3, #1
 80153e4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80153e6:	697b      	ldr	r3, [r7, #20]
 80153e8:	781b      	ldrb	r3, [r3, #0]
 80153ea:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80153ec:	8a3b      	ldrh	r3, [r7, #16]
 80153ee:	021b      	lsls	r3, r3, #8
 80153f0:	b21a      	sxth	r2, r3
 80153f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80153f6:	4313      	orrs	r3, r2
 80153f8:	b21b      	sxth	r3, r3
 80153fa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80153fc:	89fb      	ldrh	r3, [r7, #14]
}
 80153fe:	4618      	mov	r0, r3
 8015400:	371c      	adds	r7, #28
 8015402:	46bd      	mov	sp, r7
 8015404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015408:	4770      	bx	lr
	...

0801540c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801540c:	b580      	push	{r7, lr}
 801540e:	b084      	sub	sp, #16
 8015410:	af00      	add	r7, sp, #0
 8015412:	6078      	str	r0, [r7, #4]
 8015414:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015416:	2300      	movs	r3, #0
 8015418:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801541a:	683b      	ldr	r3, [r7, #0]
 801541c:	781b      	ldrb	r3, [r3, #0]
 801541e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015422:	2b40      	cmp	r3, #64	@ 0x40
 8015424:	d005      	beq.n	8015432 <USBD_StdDevReq+0x26>
 8015426:	2b40      	cmp	r3, #64	@ 0x40
 8015428:	d857      	bhi.n	80154da <USBD_StdDevReq+0xce>
 801542a:	2b00      	cmp	r3, #0
 801542c:	d00f      	beq.n	801544e <USBD_StdDevReq+0x42>
 801542e:	2b20      	cmp	r3, #32
 8015430:	d153      	bne.n	80154da <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	32ae      	adds	r2, #174	@ 0xae
 801543c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015440:	689b      	ldr	r3, [r3, #8]
 8015442:	6839      	ldr	r1, [r7, #0]
 8015444:	6878      	ldr	r0, [r7, #4]
 8015446:	4798      	blx	r3
 8015448:	4603      	mov	r3, r0
 801544a:	73fb      	strb	r3, [r7, #15]
      break;
 801544c:	e04a      	b.n	80154e4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801544e:	683b      	ldr	r3, [r7, #0]
 8015450:	785b      	ldrb	r3, [r3, #1]
 8015452:	2b09      	cmp	r3, #9
 8015454:	d83b      	bhi.n	80154ce <USBD_StdDevReq+0xc2>
 8015456:	a201      	add	r2, pc, #4	@ (adr r2, 801545c <USBD_StdDevReq+0x50>)
 8015458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801545c:	080154b1 	.word	0x080154b1
 8015460:	080154c5 	.word	0x080154c5
 8015464:	080154cf 	.word	0x080154cf
 8015468:	080154bb 	.word	0x080154bb
 801546c:	080154cf 	.word	0x080154cf
 8015470:	0801548f 	.word	0x0801548f
 8015474:	08015485 	.word	0x08015485
 8015478:	080154cf 	.word	0x080154cf
 801547c:	080154a7 	.word	0x080154a7
 8015480:	08015499 	.word	0x08015499
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015484:	6839      	ldr	r1, [r7, #0]
 8015486:	6878      	ldr	r0, [r7, #4]
 8015488:	f000 fa3c 	bl	8015904 <USBD_GetDescriptor>
          break;
 801548c:	e024      	b.n	80154d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801548e:	6839      	ldr	r1, [r7, #0]
 8015490:	6878      	ldr	r0, [r7, #4]
 8015492:	f000 fba1 	bl	8015bd8 <USBD_SetAddress>
          break;
 8015496:	e01f      	b.n	80154d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8015498:	6839      	ldr	r1, [r7, #0]
 801549a:	6878      	ldr	r0, [r7, #4]
 801549c:	f000 fbe0 	bl	8015c60 <USBD_SetConfig>
 80154a0:	4603      	mov	r3, r0
 80154a2:	73fb      	strb	r3, [r7, #15]
          break;
 80154a4:	e018      	b.n	80154d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80154a6:	6839      	ldr	r1, [r7, #0]
 80154a8:	6878      	ldr	r0, [r7, #4]
 80154aa:	f000 fc83 	bl	8015db4 <USBD_GetConfig>
          break;
 80154ae:	e013      	b.n	80154d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80154b0:	6839      	ldr	r1, [r7, #0]
 80154b2:	6878      	ldr	r0, [r7, #4]
 80154b4:	f000 fcb4 	bl	8015e20 <USBD_GetStatus>
          break;
 80154b8:	e00e      	b.n	80154d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80154ba:	6839      	ldr	r1, [r7, #0]
 80154bc:	6878      	ldr	r0, [r7, #4]
 80154be:	f000 fce3 	bl	8015e88 <USBD_SetFeature>
          break;
 80154c2:	e009      	b.n	80154d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80154c4:	6839      	ldr	r1, [r7, #0]
 80154c6:	6878      	ldr	r0, [r7, #4]
 80154c8:	f000 fd07 	bl	8015eda <USBD_ClrFeature>
          break;
 80154cc:	e004      	b.n	80154d8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80154ce:	6839      	ldr	r1, [r7, #0]
 80154d0:	6878      	ldr	r0, [r7, #4]
 80154d2:	f000 fd5e 	bl	8015f92 <USBD_CtlError>
          break;
 80154d6:	bf00      	nop
      }
      break;
 80154d8:	e004      	b.n	80154e4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80154da:	6839      	ldr	r1, [r7, #0]
 80154dc:	6878      	ldr	r0, [r7, #4]
 80154de:	f000 fd58 	bl	8015f92 <USBD_CtlError>
      break;
 80154e2:	bf00      	nop
  }

  return ret;
 80154e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80154e6:	4618      	mov	r0, r3
 80154e8:	3710      	adds	r7, #16
 80154ea:	46bd      	mov	sp, r7
 80154ec:	bd80      	pop	{r7, pc}
 80154ee:	bf00      	nop

080154f0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80154f0:	b580      	push	{r7, lr}
 80154f2:	b084      	sub	sp, #16
 80154f4:	af00      	add	r7, sp, #0
 80154f6:	6078      	str	r0, [r7, #4]
 80154f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80154fa:	2300      	movs	r3, #0
 80154fc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80154fe:	683b      	ldr	r3, [r7, #0]
 8015500:	781b      	ldrb	r3, [r3, #0]
 8015502:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015506:	2b40      	cmp	r3, #64	@ 0x40
 8015508:	d005      	beq.n	8015516 <USBD_StdItfReq+0x26>
 801550a:	2b40      	cmp	r3, #64	@ 0x40
 801550c:	d852      	bhi.n	80155b4 <USBD_StdItfReq+0xc4>
 801550e:	2b00      	cmp	r3, #0
 8015510:	d001      	beq.n	8015516 <USBD_StdItfReq+0x26>
 8015512:	2b20      	cmp	r3, #32
 8015514:	d14e      	bne.n	80155b4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801551c:	b2db      	uxtb	r3, r3
 801551e:	3b01      	subs	r3, #1
 8015520:	2b02      	cmp	r3, #2
 8015522:	d840      	bhi.n	80155a6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015524:	683b      	ldr	r3, [r7, #0]
 8015526:	889b      	ldrh	r3, [r3, #4]
 8015528:	b2db      	uxtb	r3, r3
 801552a:	2b01      	cmp	r3, #1
 801552c:	d836      	bhi.n	801559c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801552e:	683b      	ldr	r3, [r7, #0]
 8015530:	889b      	ldrh	r3, [r3, #4]
 8015532:	b2db      	uxtb	r3, r3
 8015534:	4619      	mov	r1, r3
 8015536:	6878      	ldr	r0, [r7, #4]
 8015538:	f7ff fedb 	bl	80152f2 <USBD_CoreFindIF>
 801553c:	4603      	mov	r3, r0
 801553e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015540:	7bbb      	ldrb	r3, [r7, #14]
 8015542:	2bff      	cmp	r3, #255	@ 0xff
 8015544:	d01d      	beq.n	8015582 <USBD_StdItfReq+0x92>
 8015546:	7bbb      	ldrb	r3, [r7, #14]
 8015548:	2b00      	cmp	r3, #0
 801554a:	d11a      	bne.n	8015582 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 801554c:	7bba      	ldrb	r2, [r7, #14]
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	32ae      	adds	r2, #174	@ 0xae
 8015552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015556:	689b      	ldr	r3, [r3, #8]
 8015558:	2b00      	cmp	r3, #0
 801555a:	d00f      	beq.n	801557c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 801555c:	7bba      	ldrb	r2, [r7, #14]
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015564:	7bba      	ldrb	r2, [r7, #14]
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	32ae      	adds	r2, #174	@ 0xae
 801556a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801556e:	689b      	ldr	r3, [r3, #8]
 8015570:	6839      	ldr	r1, [r7, #0]
 8015572:	6878      	ldr	r0, [r7, #4]
 8015574:	4798      	blx	r3
 8015576:	4603      	mov	r3, r0
 8015578:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801557a:	e004      	b.n	8015586 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 801557c:	2303      	movs	r3, #3
 801557e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015580:	e001      	b.n	8015586 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8015582:	2303      	movs	r3, #3
 8015584:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8015586:	683b      	ldr	r3, [r7, #0]
 8015588:	88db      	ldrh	r3, [r3, #6]
 801558a:	2b00      	cmp	r3, #0
 801558c:	d110      	bne.n	80155b0 <USBD_StdItfReq+0xc0>
 801558e:	7bfb      	ldrb	r3, [r7, #15]
 8015590:	2b00      	cmp	r3, #0
 8015592:	d10d      	bne.n	80155b0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8015594:	6878      	ldr	r0, [r7, #4]
 8015596:	f000 fed4 	bl	8016342 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801559a:	e009      	b.n	80155b0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 801559c:	6839      	ldr	r1, [r7, #0]
 801559e:	6878      	ldr	r0, [r7, #4]
 80155a0:	f000 fcf7 	bl	8015f92 <USBD_CtlError>
          break;
 80155a4:	e004      	b.n	80155b0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80155a6:	6839      	ldr	r1, [r7, #0]
 80155a8:	6878      	ldr	r0, [r7, #4]
 80155aa:	f000 fcf2 	bl	8015f92 <USBD_CtlError>
          break;
 80155ae:	e000      	b.n	80155b2 <USBD_StdItfReq+0xc2>
          break;
 80155b0:	bf00      	nop
      }
      break;
 80155b2:	e004      	b.n	80155be <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80155b4:	6839      	ldr	r1, [r7, #0]
 80155b6:	6878      	ldr	r0, [r7, #4]
 80155b8:	f000 fceb 	bl	8015f92 <USBD_CtlError>
      break;
 80155bc:	bf00      	nop
  }

  return ret;
 80155be:	7bfb      	ldrb	r3, [r7, #15]
}
 80155c0:	4618      	mov	r0, r3
 80155c2:	3710      	adds	r7, #16
 80155c4:	46bd      	mov	sp, r7
 80155c6:	bd80      	pop	{r7, pc}

080155c8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80155c8:	b580      	push	{r7, lr}
 80155ca:	b084      	sub	sp, #16
 80155cc:	af00      	add	r7, sp, #0
 80155ce:	6078      	str	r0, [r7, #4]
 80155d0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80155d2:	2300      	movs	r3, #0
 80155d4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80155d6:	683b      	ldr	r3, [r7, #0]
 80155d8:	889b      	ldrh	r3, [r3, #4]
 80155da:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80155dc:	683b      	ldr	r3, [r7, #0]
 80155de:	781b      	ldrb	r3, [r3, #0]
 80155e0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80155e4:	2b40      	cmp	r3, #64	@ 0x40
 80155e6:	d007      	beq.n	80155f8 <USBD_StdEPReq+0x30>
 80155e8:	2b40      	cmp	r3, #64	@ 0x40
 80155ea:	f200 817f 	bhi.w	80158ec <USBD_StdEPReq+0x324>
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d02a      	beq.n	8015648 <USBD_StdEPReq+0x80>
 80155f2:	2b20      	cmp	r3, #32
 80155f4:	f040 817a 	bne.w	80158ec <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80155f8:	7bbb      	ldrb	r3, [r7, #14]
 80155fa:	4619      	mov	r1, r3
 80155fc:	6878      	ldr	r0, [r7, #4]
 80155fe:	f7ff fe85 	bl	801530c <USBD_CoreFindEP>
 8015602:	4603      	mov	r3, r0
 8015604:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015606:	7b7b      	ldrb	r3, [r7, #13]
 8015608:	2bff      	cmp	r3, #255	@ 0xff
 801560a:	f000 8174 	beq.w	80158f6 <USBD_StdEPReq+0x32e>
 801560e:	7b7b      	ldrb	r3, [r7, #13]
 8015610:	2b00      	cmp	r3, #0
 8015612:	f040 8170 	bne.w	80158f6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8015616:	7b7a      	ldrb	r2, [r7, #13]
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801561e:	7b7a      	ldrb	r2, [r7, #13]
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	32ae      	adds	r2, #174	@ 0xae
 8015624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015628:	689b      	ldr	r3, [r3, #8]
 801562a:	2b00      	cmp	r3, #0
 801562c:	f000 8163 	beq.w	80158f6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8015630:	7b7a      	ldrb	r2, [r7, #13]
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	32ae      	adds	r2, #174	@ 0xae
 8015636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801563a:	689b      	ldr	r3, [r3, #8]
 801563c:	6839      	ldr	r1, [r7, #0]
 801563e:	6878      	ldr	r0, [r7, #4]
 8015640:	4798      	blx	r3
 8015642:	4603      	mov	r3, r0
 8015644:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8015646:	e156      	b.n	80158f6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015648:	683b      	ldr	r3, [r7, #0]
 801564a:	785b      	ldrb	r3, [r3, #1]
 801564c:	2b03      	cmp	r3, #3
 801564e:	d008      	beq.n	8015662 <USBD_StdEPReq+0x9a>
 8015650:	2b03      	cmp	r3, #3
 8015652:	f300 8145 	bgt.w	80158e0 <USBD_StdEPReq+0x318>
 8015656:	2b00      	cmp	r3, #0
 8015658:	f000 809b 	beq.w	8015792 <USBD_StdEPReq+0x1ca>
 801565c:	2b01      	cmp	r3, #1
 801565e:	d03c      	beq.n	80156da <USBD_StdEPReq+0x112>
 8015660:	e13e      	b.n	80158e0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015668:	b2db      	uxtb	r3, r3
 801566a:	2b02      	cmp	r3, #2
 801566c:	d002      	beq.n	8015674 <USBD_StdEPReq+0xac>
 801566e:	2b03      	cmp	r3, #3
 8015670:	d016      	beq.n	80156a0 <USBD_StdEPReq+0xd8>
 8015672:	e02c      	b.n	80156ce <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015674:	7bbb      	ldrb	r3, [r7, #14]
 8015676:	2b00      	cmp	r3, #0
 8015678:	d00d      	beq.n	8015696 <USBD_StdEPReq+0xce>
 801567a:	7bbb      	ldrb	r3, [r7, #14]
 801567c:	2b80      	cmp	r3, #128	@ 0x80
 801567e:	d00a      	beq.n	8015696 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015680:	7bbb      	ldrb	r3, [r7, #14]
 8015682:	4619      	mov	r1, r3
 8015684:	6878      	ldr	r0, [r7, #4]
 8015686:	f7ff fa41 	bl	8014b0c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801568a:	2180      	movs	r1, #128	@ 0x80
 801568c:	6878      	ldr	r0, [r7, #4]
 801568e:	f7ff fa3d 	bl	8014b0c <USBD_LL_StallEP>
 8015692:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015694:	e020      	b.n	80156d8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8015696:	6839      	ldr	r1, [r7, #0]
 8015698:	6878      	ldr	r0, [r7, #4]
 801569a:	f000 fc7a 	bl	8015f92 <USBD_CtlError>
              break;
 801569e:	e01b      	b.n	80156d8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80156a0:	683b      	ldr	r3, [r7, #0]
 80156a2:	885b      	ldrh	r3, [r3, #2]
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d10e      	bne.n	80156c6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80156a8:	7bbb      	ldrb	r3, [r7, #14]
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	d00b      	beq.n	80156c6 <USBD_StdEPReq+0xfe>
 80156ae:	7bbb      	ldrb	r3, [r7, #14]
 80156b0:	2b80      	cmp	r3, #128	@ 0x80
 80156b2:	d008      	beq.n	80156c6 <USBD_StdEPReq+0xfe>
 80156b4:	683b      	ldr	r3, [r7, #0]
 80156b6:	88db      	ldrh	r3, [r3, #6]
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d104      	bne.n	80156c6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80156bc:	7bbb      	ldrb	r3, [r7, #14]
 80156be:	4619      	mov	r1, r3
 80156c0:	6878      	ldr	r0, [r7, #4]
 80156c2:	f7ff fa23 	bl	8014b0c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80156c6:	6878      	ldr	r0, [r7, #4]
 80156c8:	f000 fe3b 	bl	8016342 <USBD_CtlSendStatus>

              break;
 80156cc:	e004      	b.n	80156d8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80156ce:	6839      	ldr	r1, [r7, #0]
 80156d0:	6878      	ldr	r0, [r7, #4]
 80156d2:	f000 fc5e 	bl	8015f92 <USBD_CtlError>
              break;
 80156d6:	bf00      	nop
          }
          break;
 80156d8:	e107      	b.n	80158ea <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80156e0:	b2db      	uxtb	r3, r3
 80156e2:	2b02      	cmp	r3, #2
 80156e4:	d002      	beq.n	80156ec <USBD_StdEPReq+0x124>
 80156e6:	2b03      	cmp	r3, #3
 80156e8:	d016      	beq.n	8015718 <USBD_StdEPReq+0x150>
 80156ea:	e04b      	b.n	8015784 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80156ec:	7bbb      	ldrb	r3, [r7, #14]
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d00d      	beq.n	801570e <USBD_StdEPReq+0x146>
 80156f2:	7bbb      	ldrb	r3, [r7, #14]
 80156f4:	2b80      	cmp	r3, #128	@ 0x80
 80156f6:	d00a      	beq.n	801570e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80156f8:	7bbb      	ldrb	r3, [r7, #14]
 80156fa:	4619      	mov	r1, r3
 80156fc:	6878      	ldr	r0, [r7, #4]
 80156fe:	f7ff fa05 	bl	8014b0c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015702:	2180      	movs	r1, #128	@ 0x80
 8015704:	6878      	ldr	r0, [r7, #4]
 8015706:	f7ff fa01 	bl	8014b0c <USBD_LL_StallEP>
 801570a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801570c:	e040      	b.n	8015790 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801570e:	6839      	ldr	r1, [r7, #0]
 8015710:	6878      	ldr	r0, [r7, #4]
 8015712:	f000 fc3e 	bl	8015f92 <USBD_CtlError>
              break;
 8015716:	e03b      	b.n	8015790 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015718:	683b      	ldr	r3, [r7, #0]
 801571a:	885b      	ldrh	r3, [r3, #2]
 801571c:	2b00      	cmp	r3, #0
 801571e:	d136      	bne.n	801578e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015720:	7bbb      	ldrb	r3, [r7, #14]
 8015722:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015726:	2b00      	cmp	r3, #0
 8015728:	d004      	beq.n	8015734 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801572a:	7bbb      	ldrb	r3, [r7, #14]
 801572c:	4619      	mov	r1, r3
 801572e:	6878      	ldr	r0, [r7, #4]
 8015730:	f7ff fa05 	bl	8014b3e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8015734:	6878      	ldr	r0, [r7, #4]
 8015736:	f000 fe04 	bl	8016342 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801573a:	7bbb      	ldrb	r3, [r7, #14]
 801573c:	4619      	mov	r1, r3
 801573e:	6878      	ldr	r0, [r7, #4]
 8015740:	f7ff fde4 	bl	801530c <USBD_CoreFindEP>
 8015744:	4603      	mov	r3, r0
 8015746:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015748:	7b7b      	ldrb	r3, [r7, #13]
 801574a:	2bff      	cmp	r3, #255	@ 0xff
 801574c:	d01f      	beq.n	801578e <USBD_StdEPReq+0x1c6>
 801574e:	7b7b      	ldrb	r3, [r7, #13]
 8015750:	2b00      	cmp	r3, #0
 8015752:	d11c      	bne.n	801578e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8015754:	7b7a      	ldrb	r2, [r7, #13]
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 801575c:	7b7a      	ldrb	r2, [r7, #13]
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	32ae      	adds	r2, #174	@ 0xae
 8015762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015766:	689b      	ldr	r3, [r3, #8]
 8015768:	2b00      	cmp	r3, #0
 801576a:	d010      	beq.n	801578e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801576c:	7b7a      	ldrb	r2, [r7, #13]
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	32ae      	adds	r2, #174	@ 0xae
 8015772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015776:	689b      	ldr	r3, [r3, #8]
 8015778:	6839      	ldr	r1, [r7, #0]
 801577a:	6878      	ldr	r0, [r7, #4]
 801577c:	4798      	blx	r3
 801577e:	4603      	mov	r3, r0
 8015780:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8015782:	e004      	b.n	801578e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8015784:	6839      	ldr	r1, [r7, #0]
 8015786:	6878      	ldr	r0, [r7, #4]
 8015788:	f000 fc03 	bl	8015f92 <USBD_CtlError>
              break;
 801578c:	e000      	b.n	8015790 <USBD_StdEPReq+0x1c8>
              break;
 801578e:	bf00      	nop
          }
          break;
 8015790:	e0ab      	b.n	80158ea <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015798:	b2db      	uxtb	r3, r3
 801579a:	2b02      	cmp	r3, #2
 801579c:	d002      	beq.n	80157a4 <USBD_StdEPReq+0x1dc>
 801579e:	2b03      	cmp	r3, #3
 80157a0:	d032      	beq.n	8015808 <USBD_StdEPReq+0x240>
 80157a2:	e097      	b.n	80158d4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80157a4:	7bbb      	ldrb	r3, [r7, #14]
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d007      	beq.n	80157ba <USBD_StdEPReq+0x1f2>
 80157aa:	7bbb      	ldrb	r3, [r7, #14]
 80157ac:	2b80      	cmp	r3, #128	@ 0x80
 80157ae:	d004      	beq.n	80157ba <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80157b0:	6839      	ldr	r1, [r7, #0]
 80157b2:	6878      	ldr	r0, [r7, #4]
 80157b4:	f000 fbed 	bl	8015f92 <USBD_CtlError>
                break;
 80157b8:	e091      	b.n	80158de <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80157ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80157be:	2b00      	cmp	r3, #0
 80157c0:	da0b      	bge.n	80157da <USBD_StdEPReq+0x212>
 80157c2:	7bbb      	ldrb	r3, [r7, #14]
 80157c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80157c8:	4613      	mov	r3, r2
 80157ca:	009b      	lsls	r3, r3, #2
 80157cc:	4413      	add	r3, r2
 80157ce:	009b      	lsls	r3, r3, #2
 80157d0:	3310      	adds	r3, #16
 80157d2:	687a      	ldr	r2, [r7, #4]
 80157d4:	4413      	add	r3, r2
 80157d6:	3304      	adds	r3, #4
 80157d8:	e00b      	b.n	80157f2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80157da:	7bbb      	ldrb	r3, [r7, #14]
 80157dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80157e0:	4613      	mov	r3, r2
 80157e2:	009b      	lsls	r3, r3, #2
 80157e4:	4413      	add	r3, r2
 80157e6:	009b      	lsls	r3, r3, #2
 80157e8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80157ec:	687a      	ldr	r2, [r7, #4]
 80157ee:	4413      	add	r3, r2
 80157f0:	3304      	adds	r3, #4
 80157f2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80157f4:	68bb      	ldr	r3, [r7, #8]
 80157f6:	2200      	movs	r2, #0
 80157f8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80157fa:	68bb      	ldr	r3, [r7, #8]
 80157fc:	2202      	movs	r2, #2
 80157fe:	4619      	mov	r1, r3
 8015800:	6878      	ldr	r0, [r7, #4]
 8015802:	f000 fd44 	bl	801628e <USBD_CtlSendData>
              break;
 8015806:	e06a      	b.n	80158de <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015808:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801580c:	2b00      	cmp	r3, #0
 801580e:	da11      	bge.n	8015834 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015810:	7bbb      	ldrb	r3, [r7, #14]
 8015812:	f003 020f 	and.w	r2, r3, #15
 8015816:	6879      	ldr	r1, [r7, #4]
 8015818:	4613      	mov	r3, r2
 801581a:	009b      	lsls	r3, r3, #2
 801581c:	4413      	add	r3, r2
 801581e:	009b      	lsls	r3, r3, #2
 8015820:	440b      	add	r3, r1
 8015822:	3324      	adds	r3, #36	@ 0x24
 8015824:	881b      	ldrh	r3, [r3, #0]
 8015826:	2b00      	cmp	r3, #0
 8015828:	d117      	bne.n	801585a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801582a:	6839      	ldr	r1, [r7, #0]
 801582c:	6878      	ldr	r0, [r7, #4]
 801582e:	f000 fbb0 	bl	8015f92 <USBD_CtlError>
                  break;
 8015832:	e054      	b.n	80158de <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015834:	7bbb      	ldrb	r3, [r7, #14]
 8015836:	f003 020f 	and.w	r2, r3, #15
 801583a:	6879      	ldr	r1, [r7, #4]
 801583c:	4613      	mov	r3, r2
 801583e:	009b      	lsls	r3, r3, #2
 8015840:	4413      	add	r3, r2
 8015842:	009b      	lsls	r3, r3, #2
 8015844:	440b      	add	r3, r1
 8015846:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801584a:	881b      	ldrh	r3, [r3, #0]
 801584c:	2b00      	cmp	r3, #0
 801584e:	d104      	bne.n	801585a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015850:	6839      	ldr	r1, [r7, #0]
 8015852:	6878      	ldr	r0, [r7, #4]
 8015854:	f000 fb9d 	bl	8015f92 <USBD_CtlError>
                  break;
 8015858:	e041      	b.n	80158de <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801585a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801585e:	2b00      	cmp	r3, #0
 8015860:	da0b      	bge.n	801587a <USBD_StdEPReq+0x2b2>
 8015862:	7bbb      	ldrb	r3, [r7, #14]
 8015864:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8015868:	4613      	mov	r3, r2
 801586a:	009b      	lsls	r3, r3, #2
 801586c:	4413      	add	r3, r2
 801586e:	009b      	lsls	r3, r3, #2
 8015870:	3310      	adds	r3, #16
 8015872:	687a      	ldr	r2, [r7, #4]
 8015874:	4413      	add	r3, r2
 8015876:	3304      	adds	r3, #4
 8015878:	e00b      	b.n	8015892 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801587a:	7bbb      	ldrb	r3, [r7, #14]
 801587c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015880:	4613      	mov	r3, r2
 8015882:	009b      	lsls	r3, r3, #2
 8015884:	4413      	add	r3, r2
 8015886:	009b      	lsls	r3, r3, #2
 8015888:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801588c:	687a      	ldr	r2, [r7, #4]
 801588e:	4413      	add	r3, r2
 8015890:	3304      	adds	r3, #4
 8015892:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015894:	7bbb      	ldrb	r3, [r7, #14]
 8015896:	2b00      	cmp	r3, #0
 8015898:	d002      	beq.n	80158a0 <USBD_StdEPReq+0x2d8>
 801589a:	7bbb      	ldrb	r3, [r7, #14]
 801589c:	2b80      	cmp	r3, #128	@ 0x80
 801589e:	d103      	bne.n	80158a8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80158a0:	68bb      	ldr	r3, [r7, #8]
 80158a2:	2200      	movs	r2, #0
 80158a4:	601a      	str	r2, [r3, #0]
 80158a6:	e00e      	b.n	80158c6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80158a8:	7bbb      	ldrb	r3, [r7, #14]
 80158aa:	4619      	mov	r1, r3
 80158ac:	6878      	ldr	r0, [r7, #4]
 80158ae:	f7ff f95f 	bl	8014b70 <USBD_LL_IsStallEP>
 80158b2:	4603      	mov	r3, r0
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d003      	beq.n	80158c0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80158b8:	68bb      	ldr	r3, [r7, #8]
 80158ba:	2201      	movs	r2, #1
 80158bc:	601a      	str	r2, [r3, #0]
 80158be:	e002      	b.n	80158c6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80158c0:	68bb      	ldr	r3, [r7, #8]
 80158c2:	2200      	movs	r2, #0
 80158c4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80158c6:	68bb      	ldr	r3, [r7, #8]
 80158c8:	2202      	movs	r2, #2
 80158ca:	4619      	mov	r1, r3
 80158cc:	6878      	ldr	r0, [r7, #4]
 80158ce:	f000 fcde 	bl	801628e <USBD_CtlSendData>
              break;
 80158d2:	e004      	b.n	80158de <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80158d4:	6839      	ldr	r1, [r7, #0]
 80158d6:	6878      	ldr	r0, [r7, #4]
 80158d8:	f000 fb5b 	bl	8015f92 <USBD_CtlError>
              break;
 80158dc:	bf00      	nop
          }
          break;
 80158de:	e004      	b.n	80158ea <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80158e0:	6839      	ldr	r1, [r7, #0]
 80158e2:	6878      	ldr	r0, [r7, #4]
 80158e4:	f000 fb55 	bl	8015f92 <USBD_CtlError>
          break;
 80158e8:	bf00      	nop
      }
      break;
 80158ea:	e005      	b.n	80158f8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80158ec:	6839      	ldr	r1, [r7, #0]
 80158ee:	6878      	ldr	r0, [r7, #4]
 80158f0:	f000 fb4f 	bl	8015f92 <USBD_CtlError>
      break;
 80158f4:	e000      	b.n	80158f8 <USBD_StdEPReq+0x330>
      break;
 80158f6:	bf00      	nop
  }

  return ret;
 80158f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80158fa:	4618      	mov	r0, r3
 80158fc:	3710      	adds	r7, #16
 80158fe:	46bd      	mov	sp, r7
 8015900:	bd80      	pop	{r7, pc}
	...

08015904 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015904:	b580      	push	{r7, lr}
 8015906:	b084      	sub	sp, #16
 8015908:	af00      	add	r7, sp, #0
 801590a:	6078      	str	r0, [r7, #4]
 801590c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801590e:	2300      	movs	r3, #0
 8015910:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015912:	2300      	movs	r3, #0
 8015914:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015916:	2300      	movs	r3, #0
 8015918:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801591a:	683b      	ldr	r3, [r7, #0]
 801591c:	885b      	ldrh	r3, [r3, #2]
 801591e:	0a1b      	lsrs	r3, r3, #8
 8015920:	b29b      	uxth	r3, r3
 8015922:	3b01      	subs	r3, #1
 8015924:	2b06      	cmp	r3, #6
 8015926:	f200 8128 	bhi.w	8015b7a <USBD_GetDescriptor+0x276>
 801592a:	a201      	add	r2, pc, #4	@ (adr r2, 8015930 <USBD_GetDescriptor+0x2c>)
 801592c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015930:	0801594d 	.word	0x0801594d
 8015934:	08015965 	.word	0x08015965
 8015938:	080159a5 	.word	0x080159a5
 801593c:	08015b7b 	.word	0x08015b7b
 8015940:	08015b7b 	.word	0x08015b7b
 8015944:	08015b1b 	.word	0x08015b1b
 8015948:	08015b47 	.word	0x08015b47
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015952:	681b      	ldr	r3, [r3, #0]
 8015954:	687a      	ldr	r2, [r7, #4]
 8015956:	7c12      	ldrb	r2, [r2, #16]
 8015958:	f107 0108 	add.w	r1, r7, #8
 801595c:	4610      	mov	r0, r2
 801595e:	4798      	blx	r3
 8015960:	60f8      	str	r0, [r7, #12]
      break;
 8015962:	e112      	b.n	8015b8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	7c1b      	ldrb	r3, [r3, #16]
 8015968:	2b00      	cmp	r3, #0
 801596a:	d10d      	bne.n	8015988 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015974:	f107 0208 	add.w	r2, r7, #8
 8015978:	4610      	mov	r0, r2
 801597a:	4798      	blx	r3
 801597c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801597e:	68fb      	ldr	r3, [r7, #12]
 8015980:	3301      	adds	r3, #1
 8015982:	2202      	movs	r2, #2
 8015984:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8015986:	e100      	b.n	8015b8a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801598e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015990:	f107 0208 	add.w	r2, r7, #8
 8015994:	4610      	mov	r0, r2
 8015996:	4798      	blx	r3
 8015998:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	3301      	adds	r3, #1
 801599e:	2202      	movs	r2, #2
 80159a0:	701a      	strb	r2, [r3, #0]
      break;
 80159a2:	e0f2      	b.n	8015b8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80159a4:	683b      	ldr	r3, [r7, #0]
 80159a6:	885b      	ldrh	r3, [r3, #2]
 80159a8:	b2db      	uxtb	r3, r3
 80159aa:	2b05      	cmp	r3, #5
 80159ac:	f200 80ac 	bhi.w	8015b08 <USBD_GetDescriptor+0x204>
 80159b0:	a201      	add	r2, pc, #4	@ (adr r2, 80159b8 <USBD_GetDescriptor+0xb4>)
 80159b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80159b6:	bf00      	nop
 80159b8:	080159d1 	.word	0x080159d1
 80159bc:	08015a05 	.word	0x08015a05
 80159c0:	08015a39 	.word	0x08015a39
 80159c4:	08015a6d 	.word	0x08015a6d
 80159c8:	08015aa1 	.word	0x08015aa1
 80159cc:	08015ad5 	.word	0x08015ad5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80159d6:	685b      	ldr	r3, [r3, #4]
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d00b      	beq.n	80159f4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80159e2:	685b      	ldr	r3, [r3, #4]
 80159e4:	687a      	ldr	r2, [r7, #4]
 80159e6:	7c12      	ldrb	r2, [r2, #16]
 80159e8:	f107 0108 	add.w	r1, r7, #8
 80159ec:	4610      	mov	r0, r2
 80159ee:	4798      	blx	r3
 80159f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80159f2:	e091      	b.n	8015b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80159f4:	6839      	ldr	r1, [r7, #0]
 80159f6:	6878      	ldr	r0, [r7, #4]
 80159f8:	f000 facb 	bl	8015f92 <USBD_CtlError>
            err++;
 80159fc:	7afb      	ldrb	r3, [r7, #11]
 80159fe:	3301      	adds	r3, #1
 8015a00:	72fb      	strb	r3, [r7, #11]
          break;
 8015a02:	e089      	b.n	8015b18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015a0a:	689b      	ldr	r3, [r3, #8]
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d00b      	beq.n	8015a28 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015a16:	689b      	ldr	r3, [r3, #8]
 8015a18:	687a      	ldr	r2, [r7, #4]
 8015a1a:	7c12      	ldrb	r2, [r2, #16]
 8015a1c:	f107 0108 	add.w	r1, r7, #8
 8015a20:	4610      	mov	r0, r2
 8015a22:	4798      	blx	r3
 8015a24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015a26:	e077      	b.n	8015b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015a28:	6839      	ldr	r1, [r7, #0]
 8015a2a:	6878      	ldr	r0, [r7, #4]
 8015a2c:	f000 fab1 	bl	8015f92 <USBD_CtlError>
            err++;
 8015a30:	7afb      	ldrb	r3, [r7, #11]
 8015a32:	3301      	adds	r3, #1
 8015a34:	72fb      	strb	r3, [r7, #11]
          break;
 8015a36:	e06f      	b.n	8015b18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015a3e:	68db      	ldr	r3, [r3, #12]
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	d00b      	beq.n	8015a5c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015a4a:	68db      	ldr	r3, [r3, #12]
 8015a4c:	687a      	ldr	r2, [r7, #4]
 8015a4e:	7c12      	ldrb	r2, [r2, #16]
 8015a50:	f107 0108 	add.w	r1, r7, #8
 8015a54:	4610      	mov	r0, r2
 8015a56:	4798      	blx	r3
 8015a58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015a5a:	e05d      	b.n	8015b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015a5c:	6839      	ldr	r1, [r7, #0]
 8015a5e:	6878      	ldr	r0, [r7, #4]
 8015a60:	f000 fa97 	bl	8015f92 <USBD_CtlError>
            err++;
 8015a64:	7afb      	ldrb	r3, [r7, #11]
 8015a66:	3301      	adds	r3, #1
 8015a68:	72fb      	strb	r3, [r7, #11]
          break;
 8015a6a:	e055      	b.n	8015b18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015a72:	691b      	ldr	r3, [r3, #16]
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d00b      	beq.n	8015a90 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015a7e:	691b      	ldr	r3, [r3, #16]
 8015a80:	687a      	ldr	r2, [r7, #4]
 8015a82:	7c12      	ldrb	r2, [r2, #16]
 8015a84:	f107 0108 	add.w	r1, r7, #8
 8015a88:	4610      	mov	r0, r2
 8015a8a:	4798      	blx	r3
 8015a8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015a8e:	e043      	b.n	8015b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015a90:	6839      	ldr	r1, [r7, #0]
 8015a92:	6878      	ldr	r0, [r7, #4]
 8015a94:	f000 fa7d 	bl	8015f92 <USBD_CtlError>
            err++;
 8015a98:	7afb      	ldrb	r3, [r7, #11]
 8015a9a:	3301      	adds	r3, #1
 8015a9c:	72fb      	strb	r3, [r7, #11]
          break;
 8015a9e:	e03b      	b.n	8015b18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015aa6:	695b      	ldr	r3, [r3, #20]
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d00b      	beq.n	8015ac4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015ab2:	695b      	ldr	r3, [r3, #20]
 8015ab4:	687a      	ldr	r2, [r7, #4]
 8015ab6:	7c12      	ldrb	r2, [r2, #16]
 8015ab8:	f107 0108 	add.w	r1, r7, #8
 8015abc:	4610      	mov	r0, r2
 8015abe:	4798      	blx	r3
 8015ac0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015ac2:	e029      	b.n	8015b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015ac4:	6839      	ldr	r1, [r7, #0]
 8015ac6:	6878      	ldr	r0, [r7, #4]
 8015ac8:	f000 fa63 	bl	8015f92 <USBD_CtlError>
            err++;
 8015acc:	7afb      	ldrb	r3, [r7, #11]
 8015ace:	3301      	adds	r3, #1
 8015ad0:	72fb      	strb	r3, [r7, #11]
          break;
 8015ad2:	e021      	b.n	8015b18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015ada:	699b      	ldr	r3, [r3, #24]
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d00b      	beq.n	8015af8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015ae6:	699b      	ldr	r3, [r3, #24]
 8015ae8:	687a      	ldr	r2, [r7, #4]
 8015aea:	7c12      	ldrb	r2, [r2, #16]
 8015aec:	f107 0108 	add.w	r1, r7, #8
 8015af0:	4610      	mov	r0, r2
 8015af2:	4798      	blx	r3
 8015af4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015af6:	e00f      	b.n	8015b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015af8:	6839      	ldr	r1, [r7, #0]
 8015afa:	6878      	ldr	r0, [r7, #4]
 8015afc:	f000 fa49 	bl	8015f92 <USBD_CtlError>
            err++;
 8015b00:	7afb      	ldrb	r3, [r7, #11]
 8015b02:	3301      	adds	r3, #1
 8015b04:	72fb      	strb	r3, [r7, #11]
          break;
 8015b06:	e007      	b.n	8015b18 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8015b08:	6839      	ldr	r1, [r7, #0]
 8015b0a:	6878      	ldr	r0, [r7, #4]
 8015b0c:	f000 fa41 	bl	8015f92 <USBD_CtlError>
          err++;
 8015b10:	7afb      	ldrb	r3, [r7, #11]
 8015b12:	3301      	adds	r3, #1
 8015b14:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8015b16:	bf00      	nop
      }
      break;
 8015b18:	e037      	b.n	8015b8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	7c1b      	ldrb	r3, [r3, #16]
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d109      	bne.n	8015b36 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015b2a:	f107 0208 	add.w	r2, r7, #8
 8015b2e:	4610      	mov	r0, r2
 8015b30:	4798      	blx	r3
 8015b32:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015b34:	e029      	b.n	8015b8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015b36:	6839      	ldr	r1, [r7, #0]
 8015b38:	6878      	ldr	r0, [r7, #4]
 8015b3a:	f000 fa2a 	bl	8015f92 <USBD_CtlError>
        err++;
 8015b3e:	7afb      	ldrb	r3, [r7, #11]
 8015b40:	3301      	adds	r3, #1
 8015b42:	72fb      	strb	r3, [r7, #11]
      break;
 8015b44:	e021      	b.n	8015b8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	7c1b      	ldrb	r3, [r3, #16]
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d10d      	bne.n	8015b6a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015b56:	f107 0208 	add.w	r2, r7, #8
 8015b5a:	4610      	mov	r0, r2
 8015b5c:	4798      	blx	r3
 8015b5e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015b60:	68fb      	ldr	r3, [r7, #12]
 8015b62:	3301      	adds	r3, #1
 8015b64:	2207      	movs	r2, #7
 8015b66:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015b68:	e00f      	b.n	8015b8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015b6a:	6839      	ldr	r1, [r7, #0]
 8015b6c:	6878      	ldr	r0, [r7, #4]
 8015b6e:	f000 fa10 	bl	8015f92 <USBD_CtlError>
        err++;
 8015b72:	7afb      	ldrb	r3, [r7, #11]
 8015b74:	3301      	adds	r3, #1
 8015b76:	72fb      	strb	r3, [r7, #11]
      break;
 8015b78:	e007      	b.n	8015b8a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8015b7a:	6839      	ldr	r1, [r7, #0]
 8015b7c:	6878      	ldr	r0, [r7, #4]
 8015b7e:	f000 fa08 	bl	8015f92 <USBD_CtlError>
      err++;
 8015b82:	7afb      	ldrb	r3, [r7, #11]
 8015b84:	3301      	adds	r3, #1
 8015b86:	72fb      	strb	r3, [r7, #11]
      break;
 8015b88:	bf00      	nop
  }

  if (err != 0U)
 8015b8a:	7afb      	ldrb	r3, [r7, #11]
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d11e      	bne.n	8015bce <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8015b90:	683b      	ldr	r3, [r7, #0]
 8015b92:	88db      	ldrh	r3, [r3, #6]
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	d016      	beq.n	8015bc6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8015b98:	893b      	ldrh	r3, [r7, #8]
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d00e      	beq.n	8015bbc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8015b9e:	683b      	ldr	r3, [r7, #0]
 8015ba0:	88da      	ldrh	r2, [r3, #6]
 8015ba2:	893b      	ldrh	r3, [r7, #8]
 8015ba4:	4293      	cmp	r3, r2
 8015ba6:	bf28      	it	cs
 8015ba8:	4613      	movcs	r3, r2
 8015baa:	b29b      	uxth	r3, r3
 8015bac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8015bae:	893b      	ldrh	r3, [r7, #8]
 8015bb0:	461a      	mov	r2, r3
 8015bb2:	68f9      	ldr	r1, [r7, #12]
 8015bb4:	6878      	ldr	r0, [r7, #4]
 8015bb6:	f000 fb6a 	bl	801628e <USBD_CtlSendData>
 8015bba:	e009      	b.n	8015bd0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015bbc:	6839      	ldr	r1, [r7, #0]
 8015bbe:	6878      	ldr	r0, [r7, #4]
 8015bc0:	f000 f9e7 	bl	8015f92 <USBD_CtlError>
 8015bc4:	e004      	b.n	8015bd0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8015bc6:	6878      	ldr	r0, [r7, #4]
 8015bc8:	f000 fbbb 	bl	8016342 <USBD_CtlSendStatus>
 8015bcc:	e000      	b.n	8015bd0 <USBD_GetDescriptor+0x2cc>
    return;
 8015bce:	bf00      	nop
  }
}
 8015bd0:	3710      	adds	r7, #16
 8015bd2:	46bd      	mov	sp, r7
 8015bd4:	bd80      	pop	{r7, pc}
 8015bd6:	bf00      	nop

08015bd8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015bd8:	b580      	push	{r7, lr}
 8015bda:	b084      	sub	sp, #16
 8015bdc:	af00      	add	r7, sp, #0
 8015bde:	6078      	str	r0, [r7, #4]
 8015be0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015be2:	683b      	ldr	r3, [r7, #0]
 8015be4:	889b      	ldrh	r3, [r3, #4]
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d131      	bne.n	8015c4e <USBD_SetAddress+0x76>
 8015bea:	683b      	ldr	r3, [r7, #0]
 8015bec:	88db      	ldrh	r3, [r3, #6]
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	d12d      	bne.n	8015c4e <USBD_SetAddress+0x76>
 8015bf2:	683b      	ldr	r3, [r7, #0]
 8015bf4:	885b      	ldrh	r3, [r3, #2]
 8015bf6:	2b7f      	cmp	r3, #127	@ 0x7f
 8015bf8:	d829      	bhi.n	8015c4e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015bfa:	683b      	ldr	r3, [r7, #0]
 8015bfc:	885b      	ldrh	r3, [r3, #2]
 8015bfe:	b2db      	uxtb	r3, r3
 8015c00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015c04:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015c0c:	b2db      	uxtb	r3, r3
 8015c0e:	2b03      	cmp	r3, #3
 8015c10:	d104      	bne.n	8015c1c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8015c12:	6839      	ldr	r1, [r7, #0]
 8015c14:	6878      	ldr	r0, [r7, #4]
 8015c16:	f000 f9bc 	bl	8015f92 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015c1a:	e01d      	b.n	8015c58 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	7bfa      	ldrb	r2, [r7, #15]
 8015c20:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015c24:	7bfb      	ldrb	r3, [r7, #15]
 8015c26:	4619      	mov	r1, r3
 8015c28:	6878      	ldr	r0, [r7, #4]
 8015c2a:	f7fe ffcd 	bl	8014bc8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8015c2e:	6878      	ldr	r0, [r7, #4]
 8015c30:	f000 fb87 	bl	8016342 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015c34:	7bfb      	ldrb	r3, [r7, #15]
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	d004      	beq.n	8015c44 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	2202      	movs	r2, #2
 8015c3e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015c42:	e009      	b.n	8015c58 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	2201      	movs	r2, #1
 8015c48:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015c4c:	e004      	b.n	8015c58 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8015c4e:	6839      	ldr	r1, [r7, #0]
 8015c50:	6878      	ldr	r0, [r7, #4]
 8015c52:	f000 f99e 	bl	8015f92 <USBD_CtlError>
  }
}
 8015c56:	bf00      	nop
 8015c58:	bf00      	nop
 8015c5a:	3710      	adds	r7, #16
 8015c5c:	46bd      	mov	sp, r7
 8015c5e:	bd80      	pop	{r7, pc}

08015c60 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015c60:	b580      	push	{r7, lr}
 8015c62:	b084      	sub	sp, #16
 8015c64:	af00      	add	r7, sp, #0
 8015c66:	6078      	str	r0, [r7, #4]
 8015c68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015c6a:	2300      	movs	r3, #0
 8015c6c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8015c6e:	683b      	ldr	r3, [r7, #0]
 8015c70:	885b      	ldrh	r3, [r3, #2]
 8015c72:	b2da      	uxtb	r2, r3
 8015c74:	4b4e      	ldr	r3, [pc, #312]	@ (8015db0 <USBD_SetConfig+0x150>)
 8015c76:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015c78:	4b4d      	ldr	r3, [pc, #308]	@ (8015db0 <USBD_SetConfig+0x150>)
 8015c7a:	781b      	ldrb	r3, [r3, #0]
 8015c7c:	2b01      	cmp	r3, #1
 8015c7e:	d905      	bls.n	8015c8c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8015c80:	6839      	ldr	r1, [r7, #0]
 8015c82:	6878      	ldr	r0, [r7, #4]
 8015c84:	f000 f985 	bl	8015f92 <USBD_CtlError>
    return USBD_FAIL;
 8015c88:	2303      	movs	r3, #3
 8015c8a:	e08c      	b.n	8015da6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015c92:	b2db      	uxtb	r3, r3
 8015c94:	2b02      	cmp	r3, #2
 8015c96:	d002      	beq.n	8015c9e <USBD_SetConfig+0x3e>
 8015c98:	2b03      	cmp	r3, #3
 8015c9a:	d029      	beq.n	8015cf0 <USBD_SetConfig+0x90>
 8015c9c:	e075      	b.n	8015d8a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8015c9e:	4b44      	ldr	r3, [pc, #272]	@ (8015db0 <USBD_SetConfig+0x150>)
 8015ca0:	781b      	ldrb	r3, [r3, #0]
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	d020      	beq.n	8015ce8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8015ca6:	4b42      	ldr	r3, [pc, #264]	@ (8015db0 <USBD_SetConfig+0x150>)
 8015ca8:	781b      	ldrb	r3, [r3, #0]
 8015caa:	461a      	mov	r2, r3
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015cb0:	4b3f      	ldr	r3, [pc, #252]	@ (8015db0 <USBD_SetConfig+0x150>)
 8015cb2:	781b      	ldrb	r3, [r3, #0]
 8015cb4:	4619      	mov	r1, r3
 8015cb6:	6878      	ldr	r0, [r7, #4]
 8015cb8:	f7ff f8a9 	bl	8014e0e <USBD_SetClassConfig>
 8015cbc:	4603      	mov	r3, r0
 8015cbe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8015cc0:	7bfb      	ldrb	r3, [r7, #15]
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d008      	beq.n	8015cd8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8015cc6:	6839      	ldr	r1, [r7, #0]
 8015cc8:	6878      	ldr	r0, [r7, #4]
 8015cca:	f000 f962 	bl	8015f92 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	2202      	movs	r2, #2
 8015cd2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015cd6:	e065      	b.n	8015da4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015cd8:	6878      	ldr	r0, [r7, #4]
 8015cda:	f000 fb32 	bl	8016342 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	2203      	movs	r2, #3
 8015ce2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8015ce6:	e05d      	b.n	8015da4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015ce8:	6878      	ldr	r0, [r7, #4]
 8015cea:	f000 fb2a 	bl	8016342 <USBD_CtlSendStatus>
      break;
 8015cee:	e059      	b.n	8015da4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8015cf0:	4b2f      	ldr	r3, [pc, #188]	@ (8015db0 <USBD_SetConfig+0x150>)
 8015cf2:	781b      	ldrb	r3, [r3, #0]
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d112      	bne.n	8015d1e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	2202      	movs	r2, #2
 8015cfc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8015d00:	4b2b      	ldr	r3, [pc, #172]	@ (8015db0 <USBD_SetConfig+0x150>)
 8015d02:	781b      	ldrb	r3, [r3, #0]
 8015d04:	461a      	mov	r2, r3
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015d0a:	4b29      	ldr	r3, [pc, #164]	@ (8015db0 <USBD_SetConfig+0x150>)
 8015d0c:	781b      	ldrb	r3, [r3, #0]
 8015d0e:	4619      	mov	r1, r3
 8015d10:	6878      	ldr	r0, [r7, #4]
 8015d12:	f7ff f898 	bl	8014e46 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8015d16:	6878      	ldr	r0, [r7, #4]
 8015d18:	f000 fb13 	bl	8016342 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015d1c:	e042      	b.n	8015da4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8015d1e:	4b24      	ldr	r3, [pc, #144]	@ (8015db0 <USBD_SetConfig+0x150>)
 8015d20:	781b      	ldrb	r3, [r3, #0]
 8015d22:	461a      	mov	r2, r3
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	685b      	ldr	r3, [r3, #4]
 8015d28:	429a      	cmp	r2, r3
 8015d2a:	d02a      	beq.n	8015d82 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	685b      	ldr	r3, [r3, #4]
 8015d30:	b2db      	uxtb	r3, r3
 8015d32:	4619      	mov	r1, r3
 8015d34:	6878      	ldr	r0, [r7, #4]
 8015d36:	f7ff f886 	bl	8014e46 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8015d3a:	4b1d      	ldr	r3, [pc, #116]	@ (8015db0 <USBD_SetConfig+0x150>)
 8015d3c:	781b      	ldrb	r3, [r3, #0]
 8015d3e:	461a      	mov	r2, r3
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015d44:	4b1a      	ldr	r3, [pc, #104]	@ (8015db0 <USBD_SetConfig+0x150>)
 8015d46:	781b      	ldrb	r3, [r3, #0]
 8015d48:	4619      	mov	r1, r3
 8015d4a:	6878      	ldr	r0, [r7, #4]
 8015d4c:	f7ff f85f 	bl	8014e0e <USBD_SetClassConfig>
 8015d50:	4603      	mov	r3, r0
 8015d52:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8015d54:	7bfb      	ldrb	r3, [r7, #15]
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	d00f      	beq.n	8015d7a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8015d5a:	6839      	ldr	r1, [r7, #0]
 8015d5c:	6878      	ldr	r0, [r7, #4]
 8015d5e:	f000 f918 	bl	8015f92 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	685b      	ldr	r3, [r3, #4]
 8015d66:	b2db      	uxtb	r3, r3
 8015d68:	4619      	mov	r1, r3
 8015d6a:	6878      	ldr	r0, [r7, #4]
 8015d6c:	f7ff f86b 	bl	8014e46 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	2202      	movs	r2, #2
 8015d74:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8015d78:	e014      	b.n	8015da4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015d7a:	6878      	ldr	r0, [r7, #4]
 8015d7c:	f000 fae1 	bl	8016342 <USBD_CtlSendStatus>
      break;
 8015d80:	e010      	b.n	8015da4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015d82:	6878      	ldr	r0, [r7, #4]
 8015d84:	f000 fadd 	bl	8016342 <USBD_CtlSendStatus>
      break;
 8015d88:	e00c      	b.n	8015da4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8015d8a:	6839      	ldr	r1, [r7, #0]
 8015d8c:	6878      	ldr	r0, [r7, #4]
 8015d8e:	f000 f900 	bl	8015f92 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015d92:	4b07      	ldr	r3, [pc, #28]	@ (8015db0 <USBD_SetConfig+0x150>)
 8015d94:	781b      	ldrb	r3, [r3, #0]
 8015d96:	4619      	mov	r1, r3
 8015d98:	6878      	ldr	r0, [r7, #4]
 8015d9a:	f7ff f854 	bl	8014e46 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8015d9e:	2303      	movs	r3, #3
 8015da0:	73fb      	strb	r3, [r7, #15]
      break;
 8015da2:	bf00      	nop
  }

  return ret;
 8015da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8015da6:	4618      	mov	r0, r3
 8015da8:	3710      	adds	r7, #16
 8015daa:	46bd      	mov	sp, r7
 8015dac:	bd80      	pop	{r7, pc}
 8015dae:	bf00      	nop
 8015db0:	20013310 	.word	0x20013310

08015db4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015db4:	b580      	push	{r7, lr}
 8015db6:	b082      	sub	sp, #8
 8015db8:	af00      	add	r7, sp, #0
 8015dba:	6078      	str	r0, [r7, #4]
 8015dbc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8015dbe:	683b      	ldr	r3, [r7, #0]
 8015dc0:	88db      	ldrh	r3, [r3, #6]
 8015dc2:	2b01      	cmp	r3, #1
 8015dc4:	d004      	beq.n	8015dd0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8015dc6:	6839      	ldr	r1, [r7, #0]
 8015dc8:	6878      	ldr	r0, [r7, #4]
 8015dca:	f000 f8e2 	bl	8015f92 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8015dce:	e023      	b.n	8015e18 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015dd6:	b2db      	uxtb	r3, r3
 8015dd8:	2b02      	cmp	r3, #2
 8015dda:	dc02      	bgt.n	8015de2 <USBD_GetConfig+0x2e>
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	dc03      	bgt.n	8015de8 <USBD_GetConfig+0x34>
 8015de0:	e015      	b.n	8015e0e <USBD_GetConfig+0x5a>
 8015de2:	2b03      	cmp	r3, #3
 8015de4:	d00b      	beq.n	8015dfe <USBD_GetConfig+0x4a>
 8015de6:	e012      	b.n	8015e0e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	2200      	movs	r2, #0
 8015dec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	3308      	adds	r3, #8
 8015df2:	2201      	movs	r2, #1
 8015df4:	4619      	mov	r1, r3
 8015df6:	6878      	ldr	r0, [r7, #4]
 8015df8:	f000 fa49 	bl	801628e <USBD_CtlSendData>
        break;
 8015dfc:	e00c      	b.n	8015e18 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	3304      	adds	r3, #4
 8015e02:	2201      	movs	r2, #1
 8015e04:	4619      	mov	r1, r3
 8015e06:	6878      	ldr	r0, [r7, #4]
 8015e08:	f000 fa41 	bl	801628e <USBD_CtlSendData>
        break;
 8015e0c:	e004      	b.n	8015e18 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8015e0e:	6839      	ldr	r1, [r7, #0]
 8015e10:	6878      	ldr	r0, [r7, #4]
 8015e12:	f000 f8be 	bl	8015f92 <USBD_CtlError>
        break;
 8015e16:	bf00      	nop
}
 8015e18:	bf00      	nop
 8015e1a:	3708      	adds	r7, #8
 8015e1c:	46bd      	mov	sp, r7
 8015e1e:	bd80      	pop	{r7, pc}

08015e20 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015e20:	b580      	push	{r7, lr}
 8015e22:	b082      	sub	sp, #8
 8015e24:	af00      	add	r7, sp, #0
 8015e26:	6078      	str	r0, [r7, #4]
 8015e28:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015e30:	b2db      	uxtb	r3, r3
 8015e32:	3b01      	subs	r3, #1
 8015e34:	2b02      	cmp	r3, #2
 8015e36:	d81e      	bhi.n	8015e76 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8015e38:	683b      	ldr	r3, [r7, #0]
 8015e3a:	88db      	ldrh	r3, [r3, #6]
 8015e3c:	2b02      	cmp	r3, #2
 8015e3e:	d004      	beq.n	8015e4a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8015e40:	6839      	ldr	r1, [r7, #0]
 8015e42:	6878      	ldr	r0, [r7, #4]
 8015e44:	f000 f8a5 	bl	8015f92 <USBD_CtlError>
        break;
 8015e48:	e01a      	b.n	8015e80 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	2201      	movs	r2, #1
 8015e4e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d005      	beq.n	8015e66 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	68db      	ldr	r3, [r3, #12]
 8015e5e:	f043 0202 	orr.w	r2, r3, #2
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	330c      	adds	r3, #12
 8015e6a:	2202      	movs	r2, #2
 8015e6c:	4619      	mov	r1, r3
 8015e6e:	6878      	ldr	r0, [r7, #4]
 8015e70:	f000 fa0d 	bl	801628e <USBD_CtlSendData>
      break;
 8015e74:	e004      	b.n	8015e80 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8015e76:	6839      	ldr	r1, [r7, #0]
 8015e78:	6878      	ldr	r0, [r7, #4]
 8015e7a:	f000 f88a 	bl	8015f92 <USBD_CtlError>
      break;
 8015e7e:	bf00      	nop
  }
}
 8015e80:	bf00      	nop
 8015e82:	3708      	adds	r7, #8
 8015e84:	46bd      	mov	sp, r7
 8015e86:	bd80      	pop	{r7, pc}

08015e88 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015e88:	b580      	push	{r7, lr}
 8015e8a:	b082      	sub	sp, #8
 8015e8c:	af00      	add	r7, sp, #0
 8015e8e:	6078      	str	r0, [r7, #4]
 8015e90:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015e92:	683b      	ldr	r3, [r7, #0]
 8015e94:	885b      	ldrh	r3, [r3, #2]
 8015e96:	2b01      	cmp	r3, #1
 8015e98:	d107      	bne.n	8015eaa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	2201      	movs	r2, #1
 8015e9e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8015ea2:	6878      	ldr	r0, [r7, #4]
 8015ea4:	f000 fa4d 	bl	8016342 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8015ea8:	e013      	b.n	8015ed2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8015eaa:	683b      	ldr	r3, [r7, #0]
 8015eac:	885b      	ldrh	r3, [r3, #2]
 8015eae:	2b02      	cmp	r3, #2
 8015eb0:	d10b      	bne.n	8015eca <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8015eb2:	683b      	ldr	r3, [r7, #0]
 8015eb4:	889b      	ldrh	r3, [r3, #4]
 8015eb6:	0a1b      	lsrs	r3, r3, #8
 8015eb8:	b29b      	uxth	r3, r3
 8015eba:	b2da      	uxtb	r2, r3
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8015ec2:	6878      	ldr	r0, [r7, #4]
 8015ec4:	f000 fa3d 	bl	8016342 <USBD_CtlSendStatus>
}
 8015ec8:	e003      	b.n	8015ed2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8015eca:	6839      	ldr	r1, [r7, #0]
 8015ecc:	6878      	ldr	r0, [r7, #4]
 8015ece:	f000 f860 	bl	8015f92 <USBD_CtlError>
}
 8015ed2:	bf00      	nop
 8015ed4:	3708      	adds	r7, #8
 8015ed6:	46bd      	mov	sp, r7
 8015ed8:	bd80      	pop	{r7, pc}

08015eda <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015eda:	b580      	push	{r7, lr}
 8015edc:	b082      	sub	sp, #8
 8015ede:	af00      	add	r7, sp, #0
 8015ee0:	6078      	str	r0, [r7, #4]
 8015ee2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015eea:	b2db      	uxtb	r3, r3
 8015eec:	3b01      	subs	r3, #1
 8015eee:	2b02      	cmp	r3, #2
 8015ef0:	d80b      	bhi.n	8015f0a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015ef2:	683b      	ldr	r3, [r7, #0]
 8015ef4:	885b      	ldrh	r3, [r3, #2]
 8015ef6:	2b01      	cmp	r3, #1
 8015ef8:	d10c      	bne.n	8015f14 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	2200      	movs	r2, #0
 8015efe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8015f02:	6878      	ldr	r0, [r7, #4]
 8015f04:	f000 fa1d 	bl	8016342 <USBD_CtlSendStatus>
      }
      break;
 8015f08:	e004      	b.n	8015f14 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8015f0a:	6839      	ldr	r1, [r7, #0]
 8015f0c:	6878      	ldr	r0, [r7, #4]
 8015f0e:	f000 f840 	bl	8015f92 <USBD_CtlError>
      break;
 8015f12:	e000      	b.n	8015f16 <USBD_ClrFeature+0x3c>
      break;
 8015f14:	bf00      	nop
  }
}
 8015f16:	bf00      	nop
 8015f18:	3708      	adds	r7, #8
 8015f1a:	46bd      	mov	sp, r7
 8015f1c:	bd80      	pop	{r7, pc}

08015f1e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8015f1e:	b580      	push	{r7, lr}
 8015f20:	b084      	sub	sp, #16
 8015f22:	af00      	add	r7, sp, #0
 8015f24:	6078      	str	r0, [r7, #4]
 8015f26:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8015f28:	683b      	ldr	r3, [r7, #0]
 8015f2a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8015f2c:	68fb      	ldr	r3, [r7, #12]
 8015f2e:	781a      	ldrb	r2, [r3, #0]
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8015f34:	68fb      	ldr	r3, [r7, #12]
 8015f36:	3301      	adds	r3, #1
 8015f38:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8015f3a:	68fb      	ldr	r3, [r7, #12]
 8015f3c:	781a      	ldrb	r2, [r3, #0]
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8015f42:	68fb      	ldr	r3, [r7, #12]
 8015f44:	3301      	adds	r3, #1
 8015f46:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8015f48:	68f8      	ldr	r0, [r7, #12]
 8015f4a:	f7ff fa40 	bl	80153ce <SWAPBYTE>
 8015f4e:	4603      	mov	r3, r0
 8015f50:	461a      	mov	r2, r3
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8015f56:	68fb      	ldr	r3, [r7, #12]
 8015f58:	3301      	adds	r3, #1
 8015f5a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015f5c:	68fb      	ldr	r3, [r7, #12]
 8015f5e:	3301      	adds	r3, #1
 8015f60:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8015f62:	68f8      	ldr	r0, [r7, #12]
 8015f64:	f7ff fa33 	bl	80153ce <SWAPBYTE>
 8015f68:	4603      	mov	r3, r0
 8015f6a:	461a      	mov	r2, r3
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8015f70:	68fb      	ldr	r3, [r7, #12]
 8015f72:	3301      	adds	r3, #1
 8015f74:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015f76:	68fb      	ldr	r3, [r7, #12]
 8015f78:	3301      	adds	r3, #1
 8015f7a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8015f7c:	68f8      	ldr	r0, [r7, #12]
 8015f7e:	f7ff fa26 	bl	80153ce <SWAPBYTE>
 8015f82:	4603      	mov	r3, r0
 8015f84:	461a      	mov	r2, r3
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	80da      	strh	r2, [r3, #6]
}
 8015f8a:	bf00      	nop
 8015f8c:	3710      	adds	r7, #16
 8015f8e:	46bd      	mov	sp, r7
 8015f90:	bd80      	pop	{r7, pc}

08015f92 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015f92:	b580      	push	{r7, lr}
 8015f94:	b082      	sub	sp, #8
 8015f96:	af00      	add	r7, sp, #0
 8015f98:	6078      	str	r0, [r7, #4]
 8015f9a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8015f9c:	2180      	movs	r1, #128	@ 0x80
 8015f9e:	6878      	ldr	r0, [r7, #4]
 8015fa0:	f7fe fdb4 	bl	8014b0c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8015fa4:	2100      	movs	r1, #0
 8015fa6:	6878      	ldr	r0, [r7, #4]
 8015fa8:	f7fe fdb0 	bl	8014b0c <USBD_LL_StallEP>
}
 8015fac:	bf00      	nop
 8015fae:	3708      	adds	r7, #8
 8015fb0:	46bd      	mov	sp, r7
 8015fb2:	bd80      	pop	{r7, pc}

08015fb4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8015fb4:	b580      	push	{r7, lr}
 8015fb6:	b086      	sub	sp, #24
 8015fb8:	af00      	add	r7, sp, #0
 8015fba:	60f8      	str	r0, [r7, #12]
 8015fbc:	60b9      	str	r1, [r7, #8]
 8015fbe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8015fc0:	2300      	movs	r3, #0
 8015fc2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8015fc4:	68fb      	ldr	r3, [r7, #12]
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d036      	beq.n	8016038 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8015fca:	68fb      	ldr	r3, [r7, #12]
 8015fcc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8015fce:	6938      	ldr	r0, [r7, #16]
 8015fd0:	f000 f836 	bl	8016040 <USBD_GetLen>
 8015fd4:	4603      	mov	r3, r0
 8015fd6:	3301      	adds	r3, #1
 8015fd8:	b29b      	uxth	r3, r3
 8015fda:	005b      	lsls	r3, r3, #1
 8015fdc:	b29a      	uxth	r2, r3
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8015fe2:	7dfb      	ldrb	r3, [r7, #23]
 8015fe4:	68ba      	ldr	r2, [r7, #8]
 8015fe6:	4413      	add	r3, r2
 8015fe8:	687a      	ldr	r2, [r7, #4]
 8015fea:	7812      	ldrb	r2, [r2, #0]
 8015fec:	701a      	strb	r2, [r3, #0]
  idx++;
 8015fee:	7dfb      	ldrb	r3, [r7, #23]
 8015ff0:	3301      	adds	r3, #1
 8015ff2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8015ff4:	7dfb      	ldrb	r3, [r7, #23]
 8015ff6:	68ba      	ldr	r2, [r7, #8]
 8015ff8:	4413      	add	r3, r2
 8015ffa:	2203      	movs	r2, #3
 8015ffc:	701a      	strb	r2, [r3, #0]
  idx++;
 8015ffe:	7dfb      	ldrb	r3, [r7, #23]
 8016000:	3301      	adds	r3, #1
 8016002:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8016004:	e013      	b.n	801602e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8016006:	7dfb      	ldrb	r3, [r7, #23]
 8016008:	68ba      	ldr	r2, [r7, #8]
 801600a:	4413      	add	r3, r2
 801600c:	693a      	ldr	r2, [r7, #16]
 801600e:	7812      	ldrb	r2, [r2, #0]
 8016010:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8016012:	693b      	ldr	r3, [r7, #16]
 8016014:	3301      	adds	r3, #1
 8016016:	613b      	str	r3, [r7, #16]
    idx++;
 8016018:	7dfb      	ldrb	r3, [r7, #23]
 801601a:	3301      	adds	r3, #1
 801601c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801601e:	7dfb      	ldrb	r3, [r7, #23]
 8016020:	68ba      	ldr	r2, [r7, #8]
 8016022:	4413      	add	r3, r2
 8016024:	2200      	movs	r2, #0
 8016026:	701a      	strb	r2, [r3, #0]
    idx++;
 8016028:	7dfb      	ldrb	r3, [r7, #23]
 801602a:	3301      	adds	r3, #1
 801602c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801602e:	693b      	ldr	r3, [r7, #16]
 8016030:	781b      	ldrb	r3, [r3, #0]
 8016032:	2b00      	cmp	r3, #0
 8016034:	d1e7      	bne.n	8016006 <USBD_GetString+0x52>
 8016036:	e000      	b.n	801603a <USBD_GetString+0x86>
    return;
 8016038:	bf00      	nop
  }
}
 801603a:	3718      	adds	r7, #24
 801603c:	46bd      	mov	sp, r7
 801603e:	bd80      	pop	{r7, pc}

08016040 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016040:	b480      	push	{r7}
 8016042:	b085      	sub	sp, #20
 8016044:	af00      	add	r7, sp, #0
 8016046:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016048:	2300      	movs	r3, #0
 801604a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016050:	e005      	b.n	801605e <USBD_GetLen+0x1e>
  {
    len++;
 8016052:	7bfb      	ldrb	r3, [r7, #15]
 8016054:	3301      	adds	r3, #1
 8016056:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8016058:	68bb      	ldr	r3, [r7, #8]
 801605a:	3301      	adds	r3, #1
 801605c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801605e:	68bb      	ldr	r3, [r7, #8]
 8016060:	781b      	ldrb	r3, [r3, #0]
 8016062:	2b00      	cmp	r3, #0
 8016064:	d1f5      	bne.n	8016052 <USBD_GetLen+0x12>
  }

  return len;
 8016066:	7bfb      	ldrb	r3, [r7, #15]
}
 8016068:	4618      	mov	r0, r3
 801606a:	3714      	adds	r7, #20
 801606c:	46bd      	mov	sp, r7
 801606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016072:	4770      	bx	lr

08016074 <USBD_Class_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016074:	b480      	push	{r7}
 8016076:	b083      	sub	sp, #12
 8016078:	af00      	add	r7, sp, #0
 801607a:	4603      	mov	r3, r0
 801607c:	6039      	str	r1, [r7, #0]
 801607e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_DeviceDesc);
 8016080:	683b      	ldr	r3, [r7, #0]
 8016082:	2212      	movs	r2, #18
 8016084:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_DeviceDesc;
 8016086:	4b03      	ldr	r3, [pc, #12]	@ (8016094 <USBD_Class_DeviceDescriptor+0x20>)
}
 8016088:	4618      	mov	r0, r3
 801608a:	370c      	adds	r7, #12
 801608c:	46bd      	mov	sp, r7
 801608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016092:	4770      	bx	lr
 8016094:	2000010c 	.word	0x2000010c

08016098 <USBD_Class_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016098:	b480      	push	{r7}
 801609a:	b083      	sub	sp, #12
 801609c:	af00      	add	r7, sp, #0
 801609e:	4603      	mov	r3, r0
 80160a0:	6039      	str	r1, [r7, #0]
 80160a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_LangIDDesc);
 80160a4:	683b      	ldr	r3, [r7, #0]
 80160a6:	2204      	movs	r2, #4
 80160a8:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_LangIDDesc;
 80160aa:	4b03      	ldr	r3, [pc, #12]	@ (80160b8 <USBD_Class_LangIDStrDescriptor+0x20>)
}
 80160ac:	4618      	mov	r0, r3
 80160ae:	370c      	adds	r7, #12
 80160b0:	46bd      	mov	sp, r7
 80160b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160b6:	4770      	bx	lr
 80160b8:	20000120 	.word	0x20000120

080160bc <USBD_Class_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80160bc:	b580      	push	{r7, lr}
 80160be:	b082      	sub	sp, #8
 80160c0:	af00      	add	r7, sp, #0
 80160c2:	4603      	mov	r3, r0
 80160c4:	6039      	str	r1, [r7, #0]
 80160c6:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 80160c8:	79fb      	ldrb	r3, [r7, #7]
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	d105      	bne.n	80160da <USBD_Class_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 80160ce:	683a      	ldr	r2, [r7, #0]
 80160d0:	4907      	ldr	r1, [pc, #28]	@ (80160f0 <USBD_Class_ProductStrDescriptor+0x34>)
 80160d2:	4808      	ldr	r0, [pc, #32]	@ (80160f4 <USBD_Class_ProductStrDescriptor+0x38>)
 80160d4:	f7ff ff6e 	bl	8015fb4 <USBD_GetString>
 80160d8:	e004      	b.n	80160e4 <USBD_Class_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 80160da:	683a      	ldr	r2, [r7, #0]
 80160dc:	4904      	ldr	r1, [pc, #16]	@ (80160f0 <USBD_Class_ProductStrDescriptor+0x34>)
 80160de:	4805      	ldr	r0, [pc, #20]	@ (80160f4 <USBD_Class_ProductStrDescriptor+0x38>)
 80160e0:	f7ff ff68 	bl	8015fb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80160e4:	4b02      	ldr	r3, [pc, #8]	@ (80160f0 <USBD_Class_ProductStrDescriptor+0x34>)
}
 80160e6:	4618      	mov	r0, r3
 80160e8:	3708      	adds	r7, #8
 80160ea:	46bd      	mov	sp, r7
 80160ec:	bd80      	pop	{r7, pc}
 80160ee:	bf00      	nop
 80160f0:	20013314 	.word	0x20013314
 80160f4:	0801945c 	.word	0x0801945c

080160f8 <USBD_Class_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80160f8:	b580      	push	{r7, lr}
 80160fa:	b082      	sub	sp, #8
 80160fc:	af00      	add	r7, sp, #0
 80160fe:	4603      	mov	r3, r0
 8016100:	6039      	str	r1, [r7, #0]
 8016102:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016104:	683a      	ldr	r2, [r7, #0]
 8016106:	4904      	ldr	r1, [pc, #16]	@ (8016118 <USBD_Class_ManufacturerStrDescriptor+0x20>)
 8016108:	4804      	ldr	r0, [pc, #16]	@ (801611c <USBD_Class_ManufacturerStrDescriptor+0x24>)
 801610a:	f7ff ff53 	bl	8015fb4 <USBD_GetString>
  return USBD_StrDesc;
 801610e:	4b02      	ldr	r3, [pc, #8]	@ (8016118 <USBD_Class_ManufacturerStrDescriptor+0x20>)
}
 8016110:	4618      	mov	r0, r3
 8016112:	3708      	adds	r7, #8
 8016114:	46bd      	mov	sp, r7
 8016116:	bd80      	pop	{r7, pc}
 8016118:	20013314 	.word	0x20013314
 801611c:	08019474 	.word	0x08019474

08016120 <USBD_Class_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016120:	b580      	push	{r7, lr}
 8016122:	b082      	sub	sp, #8
 8016124:	af00      	add	r7, sp, #0
 8016126:	4603      	mov	r3, r0
 8016128:	6039      	str	r1, [r7, #0]
 801612a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = USB_SIZ_STRING_SERIAL;
 801612c:	683b      	ldr	r3, [r7, #0]
 801612e:	221a      	movs	r2, #26
 8016130:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 8016132:	f000 f843 	bl	80161bc <Get_SerialNum>

  return (uint8_t *)USBD_StringSerial;
 8016136:	4b02      	ldr	r3, [pc, #8]	@ (8016140 <USBD_Class_SerialStrDescriptor+0x20>)
}
 8016138:	4618      	mov	r0, r3
 801613a:	3708      	adds	r7, #8
 801613c:	46bd      	mov	sp, r7
 801613e:	bd80      	pop	{r7, pc}
 8016140:	20000124 	.word	0x20000124

08016144 <USBD_Class_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016144:	b580      	push	{r7, lr}
 8016146:	b082      	sub	sp, #8
 8016148:	af00      	add	r7, sp, #0
 801614a:	4603      	mov	r3, r0
 801614c:	6039      	str	r1, [r7, #0]
 801614e:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 8016150:	79fb      	ldrb	r3, [r7, #7]
 8016152:	2b00      	cmp	r3, #0
 8016154:	d105      	bne.n	8016162 <USBD_Class_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 8016156:	683a      	ldr	r2, [r7, #0]
 8016158:	4907      	ldr	r1, [pc, #28]	@ (8016178 <USBD_Class_ConfigStrDescriptor+0x34>)
 801615a:	4808      	ldr	r0, [pc, #32]	@ (801617c <USBD_Class_ConfigStrDescriptor+0x38>)
 801615c:	f7ff ff2a 	bl	8015fb4 <USBD_GetString>
 8016160:	e004      	b.n	801616c <USBD_Class_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 8016162:	683a      	ldr	r2, [r7, #0]
 8016164:	4904      	ldr	r1, [pc, #16]	@ (8016178 <USBD_Class_ConfigStrDescriptor+0x34>)
 8016166:	4805      	ldr	r0, [pc, #20]	@ (801617c <USBD_Class_ConfigStrDescriptor+0x38>)
 8016168:	f7ff ff24 	bl	8015fb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 801616c:	4b02      	ldr	r3, [pc, #8]	@ (8016178 <USBD_Class_ConfigStrDescriptor+0x34>)
}
 801616e:	4618      	mov	r0, r3
 8016170:	3708      	adds	r7, #8
 8016172:	46bd      	mov	sp, r7
 8016174:	bd80      	pop	{r7, pc}
 8016176:	bf00      	nop
 8016178:	20013314 	.word	0x20013314
 801617c:	08019488 	.word	0x08019488

08016180 <USBD_Class_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016180:	b580      	push	{r7, lr}
 8016182:	b082      	sub	sp, #8
 8016184:	af00      	add	r7, sp, #0
 8016186:	4603      	mov	r3, r0
 8016188:	6039      	str	r1, [r7, #0]
 801618a:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 801618c:	79fb      	ldrb	r3, [r7, #7]
 801618e:	2b00      	cmp	r3, #0
 8016190:	d105      	bne.n	801619e <USBD_Class_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 8016192:	683a      	ldr	r2, [r7, #0]
 8016194:	4907      	ldr	r1, [pc, #28]	@ (80161b4 <USBD_Class_InterfaceStrDescriptor+0x34>)
 8016196:	4808      	ldr	r0, [pc, #32]	@ (80161b8 <USBD_Class_InterfaceStrDescriptor+0x38>)
 8016198:	f7ff ff0c 	bl	8015fb4 <USBD_GetString>
 801619c:	e004      	b.n	80161a8 <USBD_Class_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 801619e:	683a      	ldr	r2, [r7, #0]
 80161a0:	4904      	ldr	r1, [pc, #16]	@ (80161b4 <USBD_Class_InterfaceStrDescriptor+0x34>)
 80161a2:	4805      	ldr	r0, [pc, #20]	@ (80161b8 <USBD_Class_InterfaceStrDescriptor+0x38>)
 80161a4:	f7ff ff06 	bl	8015fb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80161a8:	4b02      	ldr	r3, [pc, #8]	@ (80161b4 <USBD_Class_InterfaceStrDescriptor+0x34>)
}
 80161aa:	4618      	mov	r0, r3
 80161ac:	3708      	adds	r7, #8
 80161ae:	46bd      	mov	sp, r7
 80161b0:	bd80      	pop	{r7, pc}
 80161b2:	bf00      	nop
 80161b4:	20013314 	.word	0x20013314
 80161b8:	08019494 	.word	0x08019494

080161bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80161bc:	b580      	push	{r7, lr}
 80161be:	b084      	sub	sp, #16
 80161c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *)DEVICE_ID1;
 80161c2:	4b0f      	ldr	r3, [pc, #60]	@ (8016200 <Get_SerialNum+0x44>)
 80161c4:	681b      	ldr	r3, [r3, #0]
 80161c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *)DEVICE_ID2;
 80161c8:	4b0e      	ldr	r3, [pc, #56]	@ (8016204 <Get_SerialNum+0x48>)
 80161ca:	681b      	ldr	r3, [r3, #0]
 80161cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *)DEVICE_ID3;
 80161ce:	4b0e      	ldr	r3, [pc, #56]	@ (8016208 <Get_SerialNum+0x4c>)
 80161d0:	681b      	ldr	r3, [r3, #0]
 80161d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80161d4:	68fa      	ldr	r2, [r7, #12]
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	4413      	add	r3, r2
 80161da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0U)
 80161dc:	68fb      	ldr	r3, [r7, #12]
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d009      	beq.n	80161f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8U);
 80161e2:	2208      	movs	r2, #8
 80161e4:	4909      	ldr	r1, [pc, #36]	@ (801620c <Get_SerialNum+0x50>)
 80161e6:	68f8      	ldr	r0, [r7, #12]
 80161e8:	f000 f814 	bl	8016214 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4U);
 80161ec:	2204      	movs	r2, #4
 80161ee:	4908      	ldr	r1, [pc, #32]	@ (8016210 <Get_SerialNum+0x54>)
 80161f0:	68b8      	ldr	r0, [r7, #8]
 80161f2:	f000 f80f 	bl	8016214 <IntToUnicode>
  }
}
 80161f6:	bf00      	nop
 80161f8:	3710      	adds	r7, #16
 80161fa:	46bd      	mov	sp, r7
 80161fc:	bd80      	pop	{r7, pc}
 80161fe:	bf00      	nop
 8016200:	08fff800 	.word	0x08fff800
 8016204:	08fff804 	.word	0x08fff804
 8016208:	08fff808 	.word	0x08fff808
 801620c:	20000126 	.word	0x20000126
 8016210:	20000136 	.word	0x20000136

08016214 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len)
{
 8016214:	b480      	push	{r7}
 8016216:	b087      	sub	sp, #28
 8016218:	af00      	add	r7, sp, #0
 801621a:	60f8      	str	r0, [r7, #12]
 801621c:	60b9      	str	r1, [r7, #8]
 801621e:	4613      	mov	r3, r2
 8016220:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0U;
 8016222:	2300      	movs	r3, #0
 8016224:	75fb      	strb	r3, [r7, #23]

  for (idx = 0U ; idx < len ; idx ++)
 8016226:	2300      	movs	r3, #0
 8016228:	75fb      	strb	r3, [r7, #23]
 801622a:	e025      	b.n	8016278 <IntToUnicode+0x64>
  {
    if (((value >> 28)) < 0xAU)
 801622c:	68fb      	ldr	r3, [r7, #12]
 801622e:	0f1b      	lsrs	r3, r3, #28
 8016230:	2b09      	cmp	r3, #9
 8016232:	d80a      	bhi.n	801624a <IntToUnicode+0x36>
    {
      pbuf[ 2U * idx] = (value >> 28) + '0';
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	0f1b      	lsrs	r3, r3, #28
 8016238:	b2da      	uxtb	r2, r3
 801623a:	7dfb      	ldrb	r3, [r7, #23]
 801623c:	005b      	lsls	r3, r3, #1
 801623e:	68b9      	ldr	r1, [r7, #8]
 8016240:	440b      	add	r3, r1
 8016242:	3230      	adds	r2, #48	@ 0x30
 8016244:	b2d2      	uxtb	r2, r2
 8016246:	701a      	strb	r2, [r3, #0]
 8016248:	e009      	b.n	801625e <IntToUnicode+0x4a>
    }
    else
    {
      pbuf[2U * idx] = (value >> 28) + 'A' - 10U;
 801624a:	68fb      	ldr	r3, [r7, #12]
 801624c:	0f1b      	lsrs	r3, r3, #28
 801624e:	b2da      	uxtb	r2, r3
 8016250:	7dfb      	ldrb	r3, [r7, #23]
 8016252:	005b      	lsls	r3, r3, #1
 8016254:	68b9      	ldr	r1, [r7, #8]
 8016256:	440b      	add	r3, r1
 8016258:	3237      	adds	r2, #55	@ 0x37
 801625a:	b2d2      	uxtb	r2, r2
 801625c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801625e:	68fb      	ldr	r3, [r7, #12]
 8016260:	011b      	lsls	r3, r3, #4
 8016262:	60fb      	str	r3, [r7, #12]

    pbuf[2U * idx + 1] = 0U;
 8016264:	7dfb      	ldrb	r3, [r7, #23]
 8016266:	005b      	lsls	r3, r3, #1
 8016268:	3301      	adds	r3, #1
 801626a:	68ba      	ldr	r2, [r7, #8]
 801626c:	4413      	add	r3, r2
 801626e:	2200      	movs	r2, #0
 8016270:	701a      	strb	r2, [r3, #0]
  for (idx = 0U ; idx < len ; idx ++)
 8016272:	7dfb      	ldrb	r3, [r7, #23]
 8016274:	3301      	adds	r3, #1
 8016276:	75fb      	strb	r3, [r7, #23]
 8016278:	7dfa      	ldrb	r2, [r7, #23]
 801627a:	79fb      	ldrb	r3, [r7, #7]
 801627c:	429a      	cmp	r2, r3
 801627e:	d3d5      	bcc.n	801622c <IntToUnicode+0x18>
  }
}
 8016280:	bf00      	nop
 8016282:	bf00      	nop
 8016284:	371c      	adds	r7, #28
 8016286:	46bd      	mov	sp, r7
 8016288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801628c:	4770      	bx	lr

0801628e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801628e:	b580      	push	{r7, lr}
 8016290:	b084      	sub	sp, #16
 8016292:	af00      	add	r7, sp, #0
 8016294:	60f8      	str	r0, [r7, #12]
 8016296:	60b9      	str	r1, [r7, #8]
 8016298:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801629a:	68fb      	ldr	r3, [r7, #12]
 801629c:	2202      	movs	r2, #2
 801629e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80162a2:	68fb      	ldr	r3, [r7, #12]
 80162a4:	687a      	ldr	r2, [r7, #4]
 80162a6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80162a8:	68fb      	ldr	r3, [r7, #12]
 80162aa:	687a      	ldr	r2, [r7, #4]
 80162ac:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	68ba      	ldr	r2, [r7, #8]
 80162b2:	2100      	movs	r1, #0
 80162b4:	68f8      	ldr	r0, [r7, #12]
 80162b6:	f7fe fca0 	bl	8014bfa <USBD_LL_Transmit>

  return USBD_OK;
 80162ba:	2300      	movs	r3, #0
}
 80162bc:	4618      	mov	r0, r3
 80162be:	3710      	adds	r7, #16
 80162c0:	46bd      	mov	sp, r7
 80162c2:	bd80      	pop	{r7, pc}

080162c4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80162c4:	b580      	push	{r7, lr}
 80162c6:	b084      	sub	sp, #16
 80162c8:	af00      	add	r7, sp, #0
 80162ca:	60f8      	str	r0, [r7, #12]
 80162cc:	60b9      	str	r1, [r7, #8]
 80162ce:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	68ba      	ldr	r2, [r7, #8]
 80162d4:	2100      	movs	r1, #0
 80162d6:	68f8      	ldr	r0, [r7, #12]
 80162d8:	f7fe fc8f 	bl	8014bfa <USBD_LL_Transmit>

  return USBD_OK;
 80162dc:	2300      	movs	r3, #0
}
 80162de:	4618      	mov	r0, r3
 80162e0:	3710      	adds	r7, #16
 80162e2:	46bd      	mov	sp, r7
 80162e4:	bd80      	pop	{r7, pc}

080162e6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80162e6:	b580      	push	{r7, lr}
 80162e8:	b084      	sub	sp, #16
 80162ea:	af00      	add	r7, sp, #0
 80162ec:	60f8      	str	r0, [r7, #12]
 80162ee:	60b9      	str	r1, [r7, #8]
 80162f0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80162f2:	68fb      	ldr	r3, [r7, #12]
 80162f4:	2203      	movs	r2, #3
 80162f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80162fa:	68fb      	ldr	r3, [r7, #12]
 80162fc:	687a      	ldr	r2, [r7, #4]
 80162fe:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8016302:	68fb      	ldr	r3, [r7, #12]
 8016304:	687a      	ldr	r2, [r7, #4]
 8016306:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	68ba      	ldr	r2, [r7, #8]
 801630e:	2100      	movs	r1, #0
 8016310:	68f8      	ldr	r0, [r7, #12]
 8016312:	f7fe fc8d 	bl	8014c30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016316:	2300      	movs	r3, #0
}
 8016318:	4618      	mov	r0, r3
 801631a:	3710      	adds	r7, #16
 801631c:	46bd      	mov	sp, r7
 801631e:	bd80      	pop	{r7, pc}

08016320 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8016320:	b580      	push	{r7, lr}
 8016322:	b084      	sub	sp, #16
 8016324:	af00      	add	r7, sp, #0
 8016326:	60f8      	str	r0, [r7, #12]
 8016328:	60b9      	str	r1, [r7, #8]
 801632a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	68ba      	ldr	r2, [r7, #8]
 8016330:	2100      	movs	r1, #0
 8016332:	68f8      	ldr	r0, [r7, #12]
 8016334:	f7fe fc7c 	bl	8014c30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016338:	2300      	movs	r3, #0
}
 801633a:	4618      	mov	r0, r3
 801633c:	3710      	adds	r7, #16
 801633e:	46bd      	mov	sp, r7
 8016340:	bd80      	pop	{r7, pc}

08016342 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016342:	b580      	push	{r7, lr}
 8016344:	b082      	sub	sp, #8
 8016346:	af00      	add	r7, sp, #0
 8016348:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	2204      	movs	r2, #4
 801634e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016352:	2300      	movs	r3, #0
 8016354:	2200      	movs	r2, #0
 8016356:	2100      	movs	r1, #0
 8016358:	6878      	ldr	r0, [r7, #4]
 801635a:	f7fe fc4e 	bl	8014bfa <USBD_LL_Transmit>

  return USBD_OK;
 801635e:	2300      	movs	r3, #0
}
 8016360:	4618      	mov	r0, r3
 8016362:	3708      	adds	r7, #8
 8016364:	46bd      	mov	sp, r7
 8016366:	bd80      	pop	{r7, pc}

08016368 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016368:	b580      	push	{r7, lr}
 801636a:	b082      	sub	sp, #8
 801636c:	af00      	add	r7, sp, #0
 801636e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	2205      	movs	r2, #5
 8016374:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016378:	2300      	movs	r3, #0
 801637a:	2200      	movs	r2, #0
 801637c:	2100      	movs	r1, #0
 801637e:	6878      	ldr	r0, [r7, #4]
 8016380:	f7fe fc56 	bl	8014c30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016384:	2300      	movs	r3, #0
}
 8016386:	4618      	mov	r0, r3
 8016388:	3708      	adds	r7, #8
 801638a:	46bd      	mov	sp, r7
 801638c:	bd80      	pop	{r7, pc}
	...

08016390 <malloc>:
 8016390:	4b02      	ldr	r3, [pc, #8]	@ (801639c <malloc+0xc>)
 8016392:	4601      	mov	r1, r0
 8016394:	6818      	ldr	r0, [r3, #0]
 8016396:	f000 b82d 	b.w	80163f4 <_malloc_r>
 801639a:	bf00      	nop
 801639c:	2000014c 	.word	0x2000014c

080163a0 <free>:
 80163a0:	4b02      	ldr	r3, [pc, #8]	@ (80163ac <free+0xc>)
 80163a2:	4601      	mov	r1, r0
 80163a4:	6818      	ldr	r0, [r3, #0]
 80163a6:	f000 bafd 	b.w	80169a4 <_free_r>
 80163aa:	bf00      	nop
 80163ac:	2000014c 	.word	0x2000014c

080163b0 <sbrk_aligned>:
 80163b0:	b570      	push	{r4, r5, r6, lr}
 80163b2:	4e0f      	ldr	r6, [pc, #60]	@ (80163f0 <sbrk_aligned+0x40>)
 80163b4:	460c      	mov	r4, r1
 80163b6:	4605      	mov	r5, r0
 80163b8:	6831      	ldr	r1, [r6, #0]
 80163ba:	b911      	cbnz	r1, 80163c2 <sbrk_aligned+0x12>
 80163bc:	f000 fa96 	bl	80168ec <_sbrk_r>
 80163c0:	6030      	str	r0, [r6, #0]
 80163c2:	4621      	mov	r1, r4
 80163c4:	4628      	mov	r0, r5
 80163c6:	f000 fa91 	bl	80168ec <_sbrk_r>
 80163ca:	1c43      	adds	r3, r0, #1
 80163cc:	d103      	bne.n	80163d6 <sbrk_aligned+0x26>
 80163ce:	f04f 34ff 	mov.w	r4, #4294967295
 80163d2:	4620      	mov	r0, r4
 80163d4:	bd70      	pop	{r4, r5, r6, pc}
 80163d6:	1cc4      	adds	r4, r0, #3
 80163d8:	f024 0403 	bic.w	r4, r4, #3
 80163dc:	42a0      	cmp	r0, r4
 80163de:	d0f8      	beq.n	80163d2 <sbrk_aligned+0x22>
 80163e0:	1a21      	subs	r1, r4, r0
 80163e2:	4628      	mov	r0, r5
 80163e4:	f000 fa82 	bl	80168ec <_sbrk_r>
 80163e8:	3001      	adds	r0, #1
 80163ea:	d1f2      	bne.n	80163d2 <sbrk_aligned+0x22>
 80163ec:	e7ef      	b.n	80163ce <sbrk_aligned+0x1e>
 80163ee:	bf00      	nop
 80163f0:	20013414 	.word	0x20013414

080163f4 <_malloc_r>:
 80163f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80163f8:	1ccd      	adds	r5, r1, #3
 80163fa:	4606      	mov	r6, r0
 80163fc:	f025 0503 	bic.w	r5, r5, #3
 8016400:	3508      	adds	r5, #8
 8016402:	2d0c      	cmp	r5, #12
 8016404:	bf38      	it	cc
 8016406:	250c      	movcc	r5, #12
 8016408:	2d00      	cmp	r5, #0
 801640a:	db01      	blt.n	8016410 <_malloc_r+0x1c>
 801640c:	42a9      	cmp	r1, r5
 801640e:	d904      	bls.n	801641a <_malloc_r+0x26>
 8016410:	230c      	movs	r3, #12
 8016412:	6033      	str	r3, [r6, #0]
 8016414:	2000      	movs	r0, #0
 8016416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801641a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80164f0 <_malloc_r+0xfc>
 801641e:	f000 f869 	bl	80164f4 <__malloc_lock>
 8016422:	f8d8 3000 	ldr.w	r3, [r8]
 8016426:	461c      	mov	r4, r3
 8016428:	bb44      	cbnz	r4, 801647c <_malloc_r+0x88>
 801642a:	4629      	mov	r1, r5
 801642c:	4630      	mov	r0, r6
 801642e:	f7ff ffbf 	bl	80163b0 <sbrk_aligned>
 8016432:	1c43      	adds	r3, r0, #1
 8016434:	4604      	mov	r4, r0
 8016436:	d158      	bne.n	80164ea <_malloc_r+0xf6>
 8016438:	f8d8 4000 	ldr.w	r4, [r8]
 801643c:	4627      	mov	r7, r4
 801643e:	2f00      	cmp	r7, #0
 8016440:	d143      	bne.n	80164ca <_malloc_r+0xd6>
 8016442:	2c00      	cmp	r4, #0
 8016444:	d04b      	beq.n	80164de <_malloc_r+0xea>
 8016446:	6823      	ldr	r3, [r4, #0]
 8016448:	4639      	mov	r1, r7
 801644a:	4630      	mov	r0, r6
 801644c:	eb04 0903 	add.w	r9, r4, r3
 8016450:	f000 fa4c 	bl	80168ec <_sbrk_r>
 8016454:	4581      	cmp	r9, r0
 8016456:	d142      	bne.n	80164de <_malloc_r+0xea>
 8016458:	6821      	ldr	r1, [r4, #0]
 801645a:	4630      	mov	r0, r6
 801645c:	1a6d      	subs	r5, r5, r1
 801645e:	4629      	mov	r1, r5
 8016460:	f7ff ffa6 	bl	80163b0 <sbrk_aligned>
 8016464:	3001      	adds	r0, #1
 8016466:	d03a      	beq.n	80164de <_malloc_r+0xea>
 8016468:	6823      	ldr	r3, [r4, #0]
 801646a:	442b      	add	r3, r5
 801646c:	6023      	str	r3, [r4, #0]
 801646e:	f8d8 3000 	ldr.w	r3, [r8]
 8016472:	685a      	ldr	r2, [r3, #4]
 8016474:	bb62      	cbnz	r2, 80164d0 <_malloc_r+0xdc>
 8016476:	f8c8 7000 	str.w	r7, [r8]
 801647a:	e00f      	b.n	801649c <_malloc_r+0xa8>
 801647c:	6822      	ldr	r2, [r4, #0]
 801647e:	1b52      	subs	r2, r2, r5
 8016480:	d420      	bmi.n	80164c4 <_malloc_r+0xd0>
 8016482:	2a0b      	cmp	r2, #11
 8016484:	d917      	bls.n	80164b6 <_malloc_r+0xc2>
 8016486:	1961      	adds	r1, r4, r5
 8016488:	42a3      	cmp	r3, r4
 801648a:	6025      	str	r5, [r4, #0]
 801648c:	bf18      	it	ne
 801648e:	6059      	strne	r1, [r3, #4]
 8016490:	6863      	ldr	r3, [r4, #4]
 8016492:	bf08      	it	eq
 8016494:	f8c8 1000 	streq.w	r1, [r8]
 8016498:	5162      	str	r2, [r4, r5]
 801649a:	604b      	str	r3, [r1, #4]
 801649c:	4630      	mov	r0, r6
 801649e:	f000 f82f 	bl	8016500 <__malloc_unlock>
 80164a2:	f104 000b 	add.w	r0, r4, #11
 80164a6:	1d23      	adds	r3, r4, #4
 80164a8:	f020 0007 	bic.w	r0, r0, #7
 80164ac:	1ac2      	subs	r2, r0, r3
 80164ae:	bf1c      	itt	ne
 80164b0:	1a1b      	subne	r3, r3, r0
 80164b2:	50a3      	strne	r3, [r4, r2]
 80164b4:	e7af      	b.n	8016416 <_malloc_r+0x22>
 80164b6:	6862      	ldr	r2, [r4, #4]
 80164b8:	42a3      	cmp	r3, r4
 80164ba:	bf0c      	ite	eq
 80164bc:	f8c8 2000 	streq.w	r2, [r8]
 80164c0:	605a      	strne	r2, [r3, #4]
 80164c2:	e7eb      	b.n	801649c <_malloc_r+0xa8>
 80164c4:	4623      	mov	r3, r4
 80164c6:	6864      	ldr	r4, [r4, #4]
 80164c8:	e7ae      	b.n	8016428 <_malloc_r+0x34>
 80164ca:	463c      	mov	r4, r7
 80164cc:	687f      	ldr	r7, [r7, #4]
 80164ce:	e7b6      	b.n	801643e <_malloc_r+0x4a>
 80164d0:	461a      	mov	r2, r3
 80164d2:	685b      	ldr	r3, [r3, #4]
 80164d4:	42a3      	cmp	r3, r4
 80164d6:	d1fb      	bne.n	80164d0 <_malloc_r+0xdc>
 80164d8:	2300      	movs	r3, #0
 80164da:	6053      	str	r3, [r2, #4]
 80164dc:	e7de      	b.n	801649c <_malloc_r+0xa8>
 80164de:	230c      	movs	r3, #12
 80164e0:	4630      	mov	r0, r6
 80164e2:	6033      	str	r3, [r6, #0]
 80164e4:	f000 f80c 	bl	8016500 <__malloc_unlock>
 80164e8:	e794      	b.n	8016414 <_malloc_r+0x20>
 80164ea:	6005      	str	r5, [r0, #0]
 80164ec:	e7d6      	b.n	801649c <_malloc_r+0xa8>
 80164ee:	bf00      	nop
 80164f0:	20013418 	.word	0x20013418

080164f4 <__malloc_lock>:
 80164f4:	4801      	ldr	r0, [pc, #4]	@ (80164fc <__malloc_lock+0x8>)
 80164f6:	f000 ba46 	b.w	8016986 <__retarget_lock_acquire_recursive>
 80164fa:	bf00      	nop
 80164fc:	2001355c 	.word	0x2001355c

08016500 <__malloc_unlock>:
 8016500:	4801      	ldr	r0, [pc, #4]	@ (8016508 <__malloc_unlock+0x8>)
 8016502:	f000 ba41 	b.w	8016988 <__retarget_lock_release_recursive>
 8016506:	bf00      	nop
 8016508:	2001355c 	.word	0x2001355c

0801650c <std>:
 801650c:	2300      	movs	r3, #0
 801650e:	b510      	push	{r4, lr}
 8016510:	4604      	mov	r4, r0
 8016512:	6083      	str	r3, [r0, #8]
 8016514:	8181      	strh	r1, [r0, #12]
 8016516:	4619      	mov	r1, r3
 8016518:	6643      	str	r3, [r0, #100]	@ 0x64
 801651a:	81c2      	strh	r2, [r0, #14]
 801651c:	2208      	movs	r2, #8
 801651e:	6183      	str	r3, [r0, #24]
 8016520:	e9c0 3300 	strd	r3, r3, [r0]
 8016524:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016528:	305c      	adds	r0, #92	@ 0x5c
 801652a:	f000 f9a3 	bl	8016874 <memset>
 801652e:	4b0d      	ldr	r3, [pc, #52]	@ (8016564 <std+0x58>)
 8016530:	6224      	str	r4, [r4, #32]
 8016532:	6263      	str	r3, [r4, #36]	@ 0x24
 8016534:	4b0c      	ldr	r3, [pc, #48]	@ (8016568 <std+0x5c>)
 8016536:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016538:	4b0c      	ldr	r3, [pc, #48]	@ (801656c <std+0x60>)
 801653a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801653c:	4b0c      	ldr	r3, [pc, #48]	@ (8016570 <std+0x64>)
 801653e:	6323      	str	r3, [r4, #48]	@ 0x30
 8016540:	4b0c      	ldr	r3, [pc, #48]	@ (8016574 <std+0x68>)
 8016542:	429c      	cmp	r4, r3
 8016544:	d006      	beq.n	8016554 <std+0x48>
 8016546:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801654a:	4294      	cmp	r4, r2
 801654c:	d002      	beq.n	8016554 <std+0x48>
 801654e:	33d0      	adds	r3, #208	@ 0xd0
 8016550:	429c      	cmp	r4, r3
 8016552:	d105      	bne.n	8016560 <std+0x54>
 8016554:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801655c:	f000 ba12 	b.w	8016984 <__retarget_lock_init_recursive>
 8016560:	bd10      	pop	{r4, pc}
 8016562:	bf00      	nop
 8016564:	0801675d 	.word	0x0801675d
 8016568:	0801677f 	.word	0x0801677f
 801656c:	080167b7 	.word	0x080167b7
 8016570:	080167db 	.word	0x080167db
 8016574:	2001341c 	.word	0x2001341c

08016578 <stdio_exit_handler>:
 8016578:	4a02      	ldr	r2, [pc, #8]	@ (8016584 <stdio_exit_handler+0xc>)
 801657a:	4903      	ldr	r1, [pc, #12]	@ (8016588 <stdio_exit_handler+0x10>)
 801657c:	4803      	ldr	r0, [pc, #12]	@ (801658c <stdio_exit_handler+0x14>)
 801657e:	f000 b869 	b.w	8016654 <_fwalk_sglue>
 8016582:	bf00      	nop
 8016584:	20000140 	.word	0x20000140
 8016588:	08017399 	.word	0x08017399
 801658c:	20000150 	.word	0x20000150

08016590 <cleanup_stdio>:
 8016590:	6841      	ldr	r1, [r0, #4]
 8016592:	4b0c      	ldr	r3, [pc, #48]	@ (80165c4 <cleanup_stdio+0x34>)
 8016594:	4299      	cmp	r1, r3
 8016596:	b510      	push	{r4, lr}
 8016598:	4604      	mov	r4, r0
 801659a:	d001      	beq.n	80165a0 <cleanup_stdio+0x10>
 801659c:	f000 fefc 	bl	8017398 <_fflush_r>
 80165a0:	68a1      	ldr	r1, [r4, #8]
 80165a2:	4b09      	ldr	r3, [pc, #36]	@ (80165c8 <cleanup_stdio+0x38>)
 80165a4:	4299      	cmp	r1, r3
 80165a6:	d002      	beq.n	80165ae <cleanup_stdio+0x1e>
 80165a8:	4620      	mov	r0, r4
 80165aa:	f000 fef5 	bl	8017398 <_fflush_r>
 80165ae:	68e1      	ldr	r1, [r4, #12]
 80165b0:	4b06      	ldr	r3, [pc, #24]	@ (80165cc <cleanup_stdio+0x3c>)
 80165b2:	4299      	cmp	r1, r3
 80165b4:	d004      	beq.n	80165c0 <cleanup_stdio+0x30>
 80165b6:	4620      	mov	r0, r4
 80165b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80165bc:	f000 beec 	b.w	8017398 <_fflush_r>
 80165c0:	bd10      	pop	{r4, pc}
 80165c2:	bf00      	nop
 80165c4:	2001341c 	.word	0x2001341c
 80165c8:	20013484 	.word	0x20013484
 80165cc:	200134ec 	.word	0x200134ec

080165d0 <global_stdio_init.part.0>:
 80165d0:	b510      	push	{r4, lr}
 80165d2:	4b0b      	ldr	r3, [pc, #44]	@ (8016600 <global_stdio_init.part.0+0x30>)
 80165d4:	2104      	movs	r1, #4
 80165d6:	4c0b      	ldr	r4, [pc, #44]	@ (8016604 <global_stdio_init.part.0+0x34>)
 80165d8:	4a0b      	ldr	r2, [pc, #44]	@ (8016608 <global_stdio_init.part.0+0x38>)
 80165da:	4620      	mov	r0, r4
 80165dc:	601a      	str	r2, [r3, #0]
 80165de:	2200      	movs	r2, #0
 80165e0:	f7ff ff94 	bl	801650c <std>
 80165e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80165e8:	2201      	movs	r2, #1
 80165ea:	2109      	movs	r1, #9
 80165ec:	f7ff ff8e 	bl	801650c <std>
 80165f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80165f4:	2202      	movs	r2, #2
 80165f6:	2112      	movs	r1, #18
 80165f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80165fc:	f7ff bf86 	b.w	801650c <std>
 8016600:	20013554 	.word	0x20013554
 8016604:	2001341c 	.word	0x2001341c
 8016608:	08016579 	.word	0x08016579

0801660c <__sfp_lock_acquire>:
 801660c:	4801      	ldr	r0, [pc, #4]	@ (8016614 <__sfp_lock_acquire+0x8>)
 801660e:	f000 b9ba 	b.w	8016986 <__retarget_lock_acquire_recursive>
 8016612:	bf00      	nop
 8016614:	2001355d 	.word	0x2001355d

08016618 <__sfp_lock_release>:
 8016618:	4801      	ldr	r0, [pc, #4]	@ (8016620 <__sfp_lock_release+0x8>)
 801661a:	f000 b9b5 	b.w	8016988 <__retarget_lock_release_recursive>
 801661e:	bf00      	nop
 8016620:	2001355d 	.word	0x2001355d

08016624 <__sinit>:
 8016624:	b510      	push	{r4, lr}
 8016626:	4604      	mov	r4, r0
 8016628:	f7ff fff0 	bl	801660c <__sfp_lock_acquire>
 801662c:	6a23      	ldr	r3, [r4, #32]
 801662e:	b11b      	cbz	r3, 8016638 <__sinit+0x14>
 8016630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016634:	f7ff bff0 	b.w	8016618 <__sfp_lock_release>
 8016638:	4b04      	ldr	r3, [pc, #16]	@ (801664c <__sinit+0x28>)
 801663a:	6223      	str	r3, [r4, #32]
 801663c:	4b04      	ldr	r3, [pc, #16]	@ (8016650 <__sinit+0x2c>)
 801663e:	681b      	ldr	r3, [r3, #0]
 8016640:	2b00      	cmp	r3, #0
 8016642:	d1f5      	bne.n	8016630 <__sinit+0xc>
 8016644:	f7ff ffc4 	bl	80165d0 <global_stdio_init.part.0>
 8016648:	e7f2      	b.n	8016630 <__sinit+0xc>
 801664a:	bf00      	nop
 801664c:	08016591 	.word	0x08016591
 8016650:	20013554 	.word	0x20013554

08016654 <_fwalk_sglue>:
 8016654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016658:	4607      	mov	r7, r0
 801665a:	4688      	mov	r8, r1
 801665c:	4614      	mov	r4, r2
 801665e:	2600      	movs	r6, #0
 8016660:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016664:	f1b9 0901 	subs.w	r9, r9, #1
 8016668:	d505      	bpl.n	8016676 <_fwalk_sglue+0x22>
 801666a:	6824      	ldr	r4, [r4, #0]
 801666c:	2c00      	cmp	r4, #0
 801666e:	d1f7      	bne.n	8016660 <_fwalk_sglue+0xc>
 8016670:	4630      	mov	r0, r6
 8016672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016676:	89ab      	ldrh	r3, [r5, #12]
 8016678:	2b01      	cmp	r3, #1
 801667a:	d907      	bls.n	801668c <_fwalk_sglue+0x38>
 801667c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016680:	3301      	adds	r3, #1
 8016682:	d003      	beq.n	801668c <_fwalk_sglue+0x38>
 8016684:	4629      	mov	r1, r5
 8016686:	4638      	mov	r0, r7
 8016688:	47c0      	blx	r8
 801668a:	4306      	orrs	r6, r0
 801668c:	3568      	adds	r5, #104	@ 0x68
 801668e:	e7e9      	b.n	8016664 <_fwalk_sglue+0x10>

08016690 <iprintf>:
 8016690:	b40f      	push	{r0, r1, r2, r3}
 8016692:	b507      	push	{r0, r1, r2, lr}
 8016694:	4906      	ldr	r1, [pc, #24]	@ (80166b0 <iprintf+0x20>)
 8016696:	ab04      	add	r3, sp, #16
 8016698:	6808      	ldr	r0, [r1, #0]
 801669a:	f853 2b04 	ldr.w	r2, [r3], #4
 801669e:	6881      	ldr	r1, [r0, #8]
 80166a0:	9301      	str	r3, [sp, #4]
 80166a2:	f000 fb4b 	bl	8016d3c <_vfiprintf_r>
 80166a6:	b003      	add	sp, #12
 80166a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80166ac:	b004      	add	sp, #16
 80166ae:	4770      	bx	lr
 80166b0:	2000014c 	.word	0x2000014c

080166b4 <sniprintf>:
 80166b4:	b40c      	push	{r2, r3}
 80166b6:	4b18      	ldr	r3, [pc, #96]	@ (8016718 <sniprintf+0x64>)
 80166b8:	b530      	push	{r4, r5, lr}
 80166ba:	1e0c      	subs	r4, r1, #0
 80166bc:	b09d      	sub	sp, #116	@ 0x74
 80166be:	681d      	ldr	r5, [r3, #0]
 80166c0:	da08      	bge.n	80166d4 <sniprintf+0x20>
 80166c2:	238b      	movs	r3, #139	@ 0x8b
 80166c4:	f04f 30ff 	mov.w	r0, #4294967295
 80166c8:	602b      	str	r3, [r5, #0]
 80166ca:	b01d      	add	sp, #116	@ 0x74
 80166cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80166d0:	b002      	add	sp, #8
 80166d2:	4770      	bx	lr
 80166d4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80166d8:	9002      	str	r0, [sp, #8]
 80166da:	9006      	str	r0, [sp, #24]
 80166dc:	a902      	add	r1, sp, #8
 80166de:	f8ad 3014 	strh.w	r3, [sp, #20]
 80166e2:	bf14      	ite	ne
 80166e4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80166e8:	4623      	moveq	r3, r4
 80166ea:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80166ec:	4628      	mov	r0, r5
 80166ee:	9304      	str	r3, [sp, #16]
 80166f0:	9307      	str	r3, [sp, #28]
 80166f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80166f6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80166fa:	ab21      	add	r3, sp, #132	@ 0x84
 80166fc:	9301      	str	r3, [sp, #4]
 80166fe:	f000 f9f7 	bl	8016af0 <_svfiprintf_r>
 8016702:	1c43      	adds	r3, r0, #1
 8016704:	bfbc      	itt	lt
 8016706:	238b      	movlt	r3, #139	@ 0x8b
 8016708:	602b      	strlt	r3, [r5, #0]
 801670a:	2c00      	cmp	r4, #0
 801670c:	d0dd      	beq.n	80166ca <sniprintf+0x16>
 801670e:	9b02      	ldr	r3, [sp, #8]
 8016710:	2200      	movs	r2, #0
 8016712:	701a      	strb	r2, [r3, #0]
 8016714:	e7d9      	b.n	80166ca <sniprintf+0x16>
 8016716:	bf00      	nop
 8016718:	2000014c 	.word	0x2000014c

0801671c <siprintf>:
 801671c:	b40e      	push	{r1, r2, r3}
 801671e:	b500      	push	{lr}
 8016720:	b09c      	sub	sp, #112	@ 0x70
 8016722:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016726:	ab1d      	add	r3, sp, #116	@ 0x74
 8016728:	9002      	str	r0, [sp, #8]
 801672a:	9006      	str	r0, [sp, #24]
 801672c:	9107      	str	r1, [sp, #28]
 801672e:	9104      	str	r1, [sp, #16]
 8016730:	4808      	ldr	r0, [pc, #32]	@ (8016754 <siprintf+0x38>)
 8016732:	4909      	ldr	r1, [pc, #36]	@ (8016758 <siprintf+0x3c>)
 8016734:	f853 2b04 	ldr.w	r2, [r3], #4
 8016738:	9105      	str	r1, [sp, #20]
 801673a:	a902      	add	r1, sp, #8
 801673c:	6800      	ldr	r0, [r0, #0]
 801673e:	9301      	str	r3, [sp, #4]
 8016740:	f000 f9d6 	bl	8016af0 <_svfiprintf_r>
 8016744:	9b02      	ldr	r3, [sp, #8]
 8016746:	2200      	movs	r2, #0
 8016748:	701a      	strb	r2, [r3, #0]
 801674a:	b01c      	add	sp, #112	@ 0x70
 801674c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016750:	b003      	add	sp, #12
 8016752:	4770      	bx	lr
 8016754:	2000014c 	.word	0x2000014c
 8016758:	ffff0208 	.word	0xffff0208

0801675c <__sread>:
 801675c:	b510      	push	{r4, lr}
 801675e:	460c      	mov	r4, r1
 8016760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016764:	f000 f8b0 	bl	80168c8 <_read_r>
 8016768:	2800      	cmp	r0, #0
 801676a:	bfab      	itete	ge
 801676c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801676e:	89a3      	ldrhlt	r3, [r4, #12]
 8016770:	181b      	addge	r3, r3, r0
 8016772:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016776:	bfac      	ite	ge
 8016778:	6563      	strge	r3, [r4, #84]	@ 0x54
 801677a:	81a3      	strhlt	r3, [r4, #12]
 801677c:	bd10      	pop	{r4, pc}

0801677e <__swrite>:
 801677e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016782:	461f      	mov	r7, r3
 8016784:	898b      	ldrh	r3, [r1, #12]
 8016786:	4605      	mov	r5, r0
 8016788:	460c      	mov	r4, r1
 801678a:	05db      	lsls	r3, r3, #23
 801678c:	4616      	mov	r6, r2
 801678e:	d505      	bpl.n	801679c <__swrite+0x1e>
 8016790:	2302      	movs	r3, #2
 8016792:	2200      	movs	r2, #0
 8016794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016798:	f000 f884 	bl	80168a4 <_lseek_r>
 801679c:	89a3      	ldrh	r3, [r4, #12]
 801679e:	4632      	mov	r2, r6
 80167a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80167a4:	4628      	mov	r0, r5
 80167a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80167aa:	81a3      	strh	r3, [r4, #12]
 80167ac:	463b      	mov	r3, r7
 80167ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80167b2:	f000 b8ab 	b.w	801690c <_write_r>

080167b6 <__sseek>:
 80167b6:	b510      	push	{r4, lr}
 80167b8:	460c      	mov	r4, r1
 80167ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80167be:	f000 f871 	bl	80168a4 <_lseek_r>
 80167c2:	1c43      	adds	r3, r0, #1
 80167c4:	89a3      	ldrh	r3, [r4, #12]
 80167c6:	bf15      	itete	ne
 80167c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80167ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80167ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80167d2:	81a3      	strheq	r3, [r4, #12]
 80167d4:	bf18      	it	ne
 80167d6:	81a3      	strhne	r3, [r4, #12]
 80167d8:	bd10      	pop	{r4, pc}

080167da <__sclose>:
 80167da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80167de:	f000 b851 	b.w	8016884 <_close_r>

080167e2 <_vsniprintf_r>:
 80167e2:	b530      	push	{r4, r5, lr}
 80167e4:	4614      	mov	r4, r2
 80167e6:	b09b      	sub	sp, #108	@ 0x6c
 80167e8:	4605      	mov	r5, r0
 80167ea:	461a      	mov	r2, r3
 80167ec:	2c00      	cmp	r4, #0
 80167ee:	da05      	bge.n	80167fc <_vsniprintf_r+0x1a>
 80167f0:	238b      	movs	r3, #139	@ 0x8b
 80167f2:	6003      	str	r3, [r0, #0]
 80167f4:	f04f 30ff 	mov.w	r0, #4294967295
 80167f8:	b01b      	add	sp, #108	@ 0x6c
 80167fa:	bd30      	pop	{r4, r5, pc}
 80167fc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8016800:	9100      	str	r1, [sp, #0]
 8016802:	9104      	str	r1, [sp, #16]
 8016804:	4669      	mov	r1, sp
 8016806:	f8ad 300c 	strh.w	r3, [sp, #12]
 801680a:	bf14      	ite	ne
 801680c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016810:	4623      	moveq	r3, r4
 8016812:	9302      	str	r3, [sp, #8]
 8016814:	9305      	str	r3, [sp, #20]
 8016816:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801681a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801681e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8016820:	f000 f966 	bl	8016af0 <_svfiprintf_r>
 8016824:	1c43      	adds	r3, r0, #1
 8016826:	bfbc      	itt	lt
 8016828:	238b      	movlt	r3, #139	@ 0x8b
 801682a:	602b      	strlt	r3, [r5, #0]
 801682c:	2c00      	cmp	r4, #0
 801682e:	d0e3      	beq.n	80167f8 <_vsniprintf_r+0x16>
 8016830:	9b00      	ldr	r3, [sp, #0]
 8016832:	2200      	movs	r2, #0
 8016834:	701a      	strb	r2, [r3, #0]
 8016836:	e7df      	b.n	80167f8 <_vsniprintf_r+0x16>

08016838 <vsniprintf>:
 8016838:	b507      	push	{r0, r1, r2, lr}
 801683a:	9300      	str	r3, [sp, #0]
 801683c:	4613      	mov	r3, r2
 801683e:	460a      	mov	r2, r1
 8016840:	4601      	mov	r1, r0
 8016842:	4803      	ldr	r0, [pc, #12]	@ (8016850 <vsniprintf+0x18>)
 8016844:	6800      	ldr	r0, [r0, #0]
 8016846:	f7ff ffcc 	bl	80167e2 <_vsniprintf_r>
 801684a:	b003      	add	sp, #12
 801684c:	f85d fb04 	ldr.w	pc, [sp], #4
 8016850:	2000014c 	.word	0x2000014c

08016854 <memcmp>:
 8016854:	3901      	subs	r1, #1
 8016856:	4402      	add	r2, r0
 8016858:	b510      	push	{r4, lr}
 801685a:	4290      	cmp	r0, r2
 801685c:	d101      	bne.n	8016862 <memcmp+0xe>
 801685e:	2000      	movs	r0, #0
 8016860:	e005      	b.n	801686e <memcmp+0x1a>
 8016862:	7803      	ldrb	r3, [r0, #0]
 8016864:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016868:	42a3      	cmp	r3, r4
 801686a:	d001      	beq.n	8016870 <memcmp+0x1c>
 801686c:	1b18      	subs	r0, r3, r4
 801686e:	bd10      	pop	{r4, pc}
 8016870:	3001      	adds	r0, #1
 8016872:	e7f2      	b.n	801685a <memcmp+0x6>

08016874 <memset>:
 8016874:	4402      	add	r2, r0
 8016876:	4603      	mov	r3, r0
 8016878:	4293      	cmp	r3, r2
 801687a:	d100      	bne.n	801687e <memset+0xa>
 801687c:	4770      	bx	lr
 801687e:	f803 1b01 	strb.w	r1, [r3], #1
 8016882:	e7f9      	b.n	8016878 <memset+0x4>

08016884 <_close_r>:
 8016884:	b538      	push	{r3, r4, r5, lr}
 8016886:	2300      	movs	r3, #0
 8016888:	4d05      	ldr	r5, [pc, #20]	@ (80168a0 <_close_r+0x1c>)
 801688a:	4604      	mov	r4, r0
 801688c:	4608      	mov	r0, r1
 801688e:	602b      	str	r3, [r5, #0]
 8016890:	f7ee fcbb 	bl	800520a <_close>
 8016894:	1c43      	adds	r3, r0, #1
 8016896:	d102      	bne.n	801689e <_close_r+0x1a>
 8016898:	682b      	ldr	r3, [r5, #0]
 801689a:	b103      	cbz	r3, 801689e <_close_r+0x1a>
 801689c:	6023      	str	r3, [r4, #0]
 801689e:	bd38      	pop	{r3, r4, r5, pc}
 80168a0:	20013558 	.word	0x20013558

080168a4 <_lseek_r>:
 80168a4:	b538      	push	{r3, r4, r5, lr}
 80168a6:	4604      	mov	r4, r0
 80168a8:	4d06      	ldr	r5, [pc, #24]	@ (80168c4 <_lseek_r+0x20>)
 80168aa:	4608      	mov	r0, r1
 80168ac:	4611      	mov	r1, r2
 80168ae:	2200      	movs	r2, #0
 80168b0:	602a      	str	r2, [r5, #0]
 80168b2:	461a      	mov	r2, r3
 80168b4:	f7ee fcd0 	bl	8005258 <_lseek>
 80168b8:	1c43      	adds	r3, r0, #1
 80168ba:	d102      	bne.n	80168c2 <_lseek_r+0x1e>
 80168bc:	682b      	ldr	r3, [r5, #0]
 80168be:	b103      	cbz	r3, 80168c2 <_lseek_r+0x1e>
 80168c0:	6023      	str	r3, [r4, #0]
 80168c2:	bd38      	pop	{r3, r4, r5, pc}
 80168c4:	20013558 	.word	0x20013558

080168c8 <_read_r>:
 80168c8:	b538      	push	{r3, r4, r5, lr}
 80168ca:	4604      	mov	r4, r0
 80168cc:	4d06      	ldr	r5, [pc, #24]	@ (80168e8 <_read_r+0x20>)
 80168ce:	4608      	mov	r0, r1
 80168d0:	4611      	mov	r1, r2
 80168d2:	2200      	movs	r2, #0
 80168d4:	602a      	str	r2, [r5, #0]
 80168d6:	461a      	mov	r2, r3
 80168d8:	f7ee fc5e 	bl	8005198 <_read>
 80168dc:	1c43      	adds	r3, r0, #1
 80168de:	d102      	bne.n	80168e6 <_read_r+0x1e>
 80168e0:	682b      	ldr	r3, [r5, #0]
 80168e2:	b103      	cbz	r3, 80168e6 <_read_r+0x1e>
 80168e4:	6023      	str	r3, [r4, #0]
 80168e6:	bd38      	pop	{r3, r4, r5, pc}
 80168e8:	20013558 	.word	0x20013558

080168ec <_sbrk_r>:
 80168ec:	b538      	push	{r3, r4, r5, lr}
 80168ee:	2300      	movs	r3, #0
 80168f0:	4d05      	ldr	r5, [pc, #20]	@ (8016908 <_sbrk_r+0x1c>)
 80168f2:	4604      	mov	r4, r0
 80168f4:	4608      	mov	r0, r1
 80168f6:	602b      	str	r3, [r5, #0]
 80168f8:	f7ee fcbc 	bl	8005274 <_sbrk>
 80168fc:	1c43      	adds	r3, r0, #1
 80168fe:	d102      	bne.n	8016906 <_sbrk_r+0x1a>
 8016900:	682b      	ldr	r3, [r5, #0]
 8016902:	b103      	cbz	r3, 8016906 <_sbrk_r+0x1a>
 8016904:	6023      	str	r3, [r4, #0]
 8016906:	bd38      	pop	{r3, r4, r5, pc}
 8016908:	20013558 	.word	0x20013558

0801690c <_write_r>:
 801690c:	b538      	push	{r3, r4, r5, lr}
 801690e:	4604      	mov	r4, r0
 8016910:	4d06      	ldr	r5, [pc, #24]	@ (801692c <_write_r+0x20>)
 8016912:	4608      	mov	r0, r1
 8016914:	4611      	mov	r1, r2
 8016916:	2200      	movs	r2, #0
 8016918:	602a      	str	r2, [r5, #0]
 801691a:	461a      	mov	r2, r3
 801691c:	f7ee fc59 	bl	80051d2 <_write>
 8016920:	1c43      	adds	r3, r0, #1
 8016922:	d102      	bne.n	801692a <_write_r+0x1e>
 8016924:	682b      	ldr	r3, [r5, #0]
 8016926:	b103      	cbz	r3, 801692a <_write_r+0x1e>
 8016928:	6023      	str	r3, [r4, #0]
 801692a:	bd38      	pop	{r3, r4, r5, pc}
 801692c:	20013558 	.word	0x20013558

08016930 <__errno>:
 8016930:	4b01      	ldr	r3, [pc, #4]	@ (8016938 <__errno+0x8>)
 8016932:	6818      	ldr	r0, [r3, #0]
 8016934:	4770      	bx	lr
 8016936:	bf00      	nop
 8016938:	2000014c 	.word	0x2000014c

0801693c <__libc_init_array>:
 801693c:	b570      	push	{r4, r5, r6, lr}
 801693e:	4d0d      	ldr	r5, [pc, #52]	@ (8016974 <__libc_init_array+0x38>)
 8016940:	2600      	movs	r6, #0
 8016942:	4c0d      	ldr	r4, [pc, #52]	@ (8016978 <__libc_init_array+0x3c>)
 8016944:	1b64      	subs	r4, r4, r5
 8016946:	10a4      	asrs	r4, r4, #2
 8016948:	42a6      	cmp	r6, r4
 801694a:	d109      	bne.n	8016960 <__libc_init_array+0x24>
 801694c:	4d0b      	ldr	r5, [pc, #44]	@ (801697c <__libc_init_array+0x40>)
 801694e:	2600      	movs	r6, #0
 8016950:	4c0b      	ldr	r4, [pc, #44]	@ (8016980 <__libc_init_array+0x44>)
 8016952:	f000 febf 	bl	80176d4 <_init>
 8016956:	1b64      	subs	r4, r4, r5
 8016958:	10a4      	asrs	r4, r4, #2
 801695a:	42a6      	cmp	r6, r4
 801695c:	d105      	bne.n	801696a <__libc_init_array+0x2e>
 801695e:	bd70      	pop	{r4, r5, r6, pc}
 8016960:	f855 3b04 	ldr.w	r3, [r5], #4
 8016964:	3601      	adds	r6, #1
 8016966:	4798      	blx	r3
 8016968:	e7ee      	b.n	8016948 <__libc_init_array+0xc>
 801696a:	f855 3b04 	ldr.w	r3, [r5], #4
 801696e:	3601      	adds	r6, #1
 8016970:	4798      	blx	r3
 8016972:	e7f2      	b.n	801695a <__libc_init_array+0x1e>
 8016974:	08019630 	.word	0x08019630
 8016978:	08019630 	.word	0x08019630
 801697c:	08019630 	.word	0x08019630
 8016980:	08019634 	.word	0x08019634

08016984 <__retarget_lock_init_recursive>:
 8016984:	4770      	bx	lr

08016986 <__retarget_lock_acquire_recursive>:
 8016986:	4770      	bx	lr

08016988 <__retarget_lock_release_recursive>:
 8016988:	4770      	bx	lr

0801698a <memcpy>:
 801698a:	440a      	add	r2, r1
 801698c:	1e43      	subs	r3, r0, #1
 801698e:	4291      	cmp	r1, r2
 8016990:	d100      	bne.n	8016994 <memcpy+0xa>
 8016992:	4770      	bx	lr
 8016994:	b510      	push	{r4, lr}
 8016996:	f811 4b01 	ldrb.w	r4, [r1], #1
 801699a:	4291      	cmp	r1, r2
 801699c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80169a0:	d1f9      	bne.n	8016996 <memcpy+0xc>
 80169a2:	bd10      	pop	{r4, pc}

080169a4 <_free_r>:
 80169a4:	b538      	push	{r3, r4, r5, lr}
 80169a6:	4605      	mov	r5, r0
 80169a8:	2900      	cmp	r1, #0
 80169aa:	d041      	beq.n	8016a30 <_free_r+0x8c>
 80169ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80169b0:	1f0c      	subs	r4, r1, #4
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	bfb8      	it	lt
 80169b6:	18e4      	addlt	r4, r4, r3
 80169b8:	f7ff fd9c 	bl	80164f4 <__malloc_lock>
 80169bc:	4a1d      	ldr	r2, [pc, #116]	@ (8016a34 <_free_r+0x90>)
 80169be:	6813      	ldr	r3, [r2, #0]
 80169c0:	b933      	cbnz	r3, 80169d0 <_free_r+0x2c>
 80169c2:	6063      	str	r3, [r4, #4]
 80169c4:	6014      	str	r4, [r2, #0]
 80169c6:	4628      	mov	r0, r5
 80169c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80169cc:	f7ff bd98 	b.w	8016500 <__malloc_unlock>
 80169d0:	42a3      	cmp	r3, r4
 80169d2:	d908      	bls.n	80169e6 <_free_r+0x42>
 80169d4:	6820      	ldr	r0, [r4, #0]
 80169d6:	1821      	adds	r1, r4, r0
 80169d8:	428b      	cmp	r3, r1
 80169da:	bf01      	itttt	eq
 80169dc:	6819      	ldreq	r1, [r3, #0]
 80169de:	685b      	ldreq	r3, [r3, #4]
 80169e0:	1809      	addeq	r1, r1, r0
 80169e2:	6021      	streq	r1, [r4, #0]
 80169e4:	e7ed      	b.n	80169c2 <_free_r+0x1e>
 80169e6:	461a      	mov	r2, r3
 80169e8:	685b      	ldr	r3, [r3, #4]
 80169ea:	b10b      	cbz	r3, 80169f0 <_free_r+0x4c>
 80169ec:	42a3      	cmp	r3, r4
 80169ee:	d9fa      	bls.n	80169e6 <_free_r+0x42>
 80169f0:	6811      	ldr	r1, [r2, #0]
 80169f2:	1850      	adds	r0, r2, r1
 80169f4:	42a0      	cmp	r0, r4
 80169f6:	d10b      	bne.n	8016a10 <_free_r+0x6c>
 80169f8:	6820      	ldr	r0, [r4, #0]
 80169fa:	4401      	add	r1, r0
 80169fc:	1850      	adds	r0, r2, r1
 80169fe:	6011      	str	r1, [r2, #0]
 8016a00:	4283      	cmp	r3, r0
 8016a02:	d1e0      	bne.n	80169c6 <_free_r+0x22>
 8016a04:	6818      	ldr	r0, [r3, #0]
 8016a06:	685b      	ldr	r3, [r3, #4]
 8016a08:	4408      	add	r0, r1
 8016a0a:	6053      	str	r3, [r2, #4]
 8016a0c:	6010      	str	r0, [r2, #0]
 8016a0e:	e7da      	b.n	80169c6 <_free_r+0x22>
 8016a10:	d902      	bls.n	8016a18 <_free_r+0x74>
 8016a12:	230c      	movs	r3, #12
 8016a14:	602b      	str	r3, [r5, #0]
 8016a16:	e7d6      	b.n	80169c6 <_free_r+0x22>
 8016a18:	6820      	ldr	r0, [r4, #0]
 8016a1a:	1821      	adds	r1, r4, r0
 8016a1c:	428b      	cmp	r3, r1
 8016a1e:	bf02      	ittt	eq
 8016a20:	6819      	ldreq	r1, [r3, #0]
 8016a22:	685b      	ldreq	r3, [r3, #4]
 8016a24:	1809      	addeq	r1, r1, r0
 8016a26:	6063      	str	r3, [r4, #4]
 8016a28:	bf08      	it	eq
 8016a2a:	6021      	streq	r1, [r4, #0]
 8016a2c:	6054      	str	r4, [r2, #4]
 8016a2e:	e7ca      	b.n	80169c6 <_free_r+0x22>
 8016a30:	bd38      	pop	{r3, r4, r5, pc}
 8016a32:	bf00      	nop
 8016a34:	20013418 	.word	0x20013418

08016a38 <__ssputs_r>:
 8016a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a3c:	461f      	mov	r7, r3
 8016a3e:	688e      	ldr	r6, [r1, #8]
 8016a40:	4682      	mov	sl, r0
 8016a42:	460c      	mov	r4, r1
 8016a44:	42be      	cmp	r6, r7
 8016a46:	4690      	mov	r8, r2
 8016a48:	680b      	ldr	r3, [r1, #0]
 8016a4a:	d82d      	bhi.n	8016aa8 <__ssputs_r+0x70>
 8016a4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016a50:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8016a54:	d026      	beq.n	8016aa4 <__ssputs_r+0x6c>
 8016a56:	6965      	ldr	r5, [r4, #20]
 8016a58:	6909      	ldr	r1, [r1, #16]
 8016a5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016a5e:	eba3 0901 	sub.w	r9, r3, r1
 8016a62:	1c7b      	adds	r3, r7, #1
 8016a64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016a68:	444b      	add	r3, r9
 8016a6a:	106d      	asrs	r5, r5, #1
 8016a6c:	429d      	cmp	r5, r3
 8016a6e:	bf38      	it	cc
 8016a70:	461d      	movcc	r5, r3
 8016a72:	0553      	lsls	r3, r2, #21
 8016a74:	d527      	bpl.n	8016ac6 <__ssputs_r+0x8e>
 8016a76:	4629      	mov	r1, r5
 8016a78:	f7ff fcbc 	bl	80163f4 <_malloc_r>
 8016a7c:	4606      	mov	r6, r0
 8016a7e:	b360      	cbz	r0, 8016ada <__ssputs_r+0xa2>
 8016a80:	464a      	mov	r2, r9
 8016a82:	6921      	ldr	r1, [r4, #16]
 8016a84:	f7ff ff81 	bl	801698a <memcpy>
 8016a88:	89a3      	ldrh	r3, [r4, #12]
 8016a8a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8016a8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016a92:	81a3      	strh	r3, [r4, #12]
 8016a94:	6126      	str	r6, [r4, #16]
 8016a96:	444e      	add	r6, r9
 8016a98:	6165      	str	r5, [r4, #20]
 8016a9a:	eba5 0509 	sub.w	r5, r5, r9
 8016a9e:	6026      	str	r6, [r4, #0]
 8016aa0:	463e      	mov	r6, r7
 8016aa2:	60a5      	str	r5, [r4, #8]
 8016aa4:	42be      	cmp	r6, r7
 8016aa6:	d900      	bls.n	8016aaa <__ssputs_r+0x72>
 8016aa8:	463e      	mov	r6, r7
 8016aaa:	4632      	mov	r2, r6
 8016aac:	4641      	mov	r1, r8
 8016aae:	6820      	ldr	r0, [r4, #0]
 8016ab0:	f000 fd2e 	bl	8017510 <memmove>
 8016ab4:	68a3      	ldr	r3, [r4, #8]
 8016ab6:	2000      	movs	r0, #0
 8016ab8:	1b9b      	subs	r3, r3, r6
 8016aba:	60a3      	str	r3, [r4, #8]
 8016abc:	6823      	ldr	r3, [r4, #0]
 8016abe:	4433      	add	r3, r6
 8016ac0:	6023      	str	r3, [r4, #0]
 8016ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ac6:	462a      	mov	r2, r5
 8016ac8:	f000 fd4a 	bl	8017560 <_realloc_r>
 8016acc:	4606      	mov	r6, r0
 8016ace:	2800      	cmp	r0, #0
 8016ad0:	d1e0      	bne.n	8016a94 <__ssputs_r+0x5c>
 8016ad2:	6921      	ldr	r1, [r4, #16]
 8016ad4:	4650      	mov	r0, sl
 8016ad6:	f7ff ff65 	bl	80169a4 <_free_r>
 8016ada:	230c      	movs	r3, #12
 8016adc:	f04f 30ff 	mov.w	r0, #4294967295
 8016ae0:	f8ca 3000 	str.w	r3, [sl]
 8016ae4:	89a3      	ldrh	r3, [r4, #12]
 8016ae6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016aea:	81a3      	strh	r3, [r4, #12]
 8016aec:	e7e9      	b.n	8016ac2 <__ssputs_r+0x8a>
	...

08016af0 <_svfiprintf_r>:
 8016af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016af4:	4698      	mov	r8, r3
 8016af6:	898b      	ldrh	r3, [r1, #12]
 8016af8:	b09d      	sub	sp, #116	@ 0x74
 8016afa:	4607      	mov	r7, r0
 8016afc:	061b      	lsls	r3, r3, #24
 8016afe:	460d      	mov	r5, r1
 8016b00:	4614      	mov	r4, r2
 8016b02:	d510      	bpl.n	8016b26 <_svfiprintf_r+0x36>
 8016b04:	690b      	ldr	r3, [r1, #16]
 8016b06:	b973      	cbnz	r3, 8016b26 <_svfiprintf_r+0x36>
 8016b08:	2140      	movs	r1, #64	@ 0x40
 8016b0a:	f7ff fc73 	bl	80163f4 <_malloc_r>
 8016b0e:	6028      	str	r0, [r5, #0]
 8016b10:	6128      	str	r0, [r5, #16]
 8016b12:	b930      	cbnz	r0, 8016b22 <_svfiprintf_r+0x32>
 8016b14:	230c      	movs	r3, #12
 8016b16:	603b      	str	r3, [r7, #0]
 8016b18:	f04f 30ff 	mov.w	r0, #4294967295
 8016b1c:	b01d      	add	sp, #116	@ 0x74
 8016b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b22:	2340      	movs	r3, #64	@ 0x40
 8016b24:	616b      	str	r3, [r5, #20]
 8016b26:	2300      	movs	r3, #0
 8016b28:	f8cd 800c 	str.w	r8, [sp, #12]
 8016b2c:	f04f 0901 	mov.w	r9, #1
 8016b30:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8016cd4 <_svfiprintf_r+0x1e4>
 8016b34:	9309      	str	r3, [sp, #36]	@ 0x24
 8016b36:	2320      	movs	r3, #32
 8016b38:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016b3c:	2330      	movs	r3, #48	@ 0x30
 8016b3e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016b42:	4623      	mov	r3, r4
 8016b44:	469a      	mov	sl, r3
 8016b46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016b4a:	b10a      	cbz	r2, 8016b50 <_svfiprintf_r+0x60>
 8016b4c:	2a25      	cmp	r2, #37	@ 0x25
 8016b4e:	d1f9      	bne.n	8016b44 <_svfiprintf_r+0x54>
 8016b50:	ebba 0b04 	subs.w	fp, sl, r4
 8016b54:	d00b      	beq.n	8016b6e <_svfiprintf_r+0x7e>
 8016b56:	465b      	mov	r3, fp
 8016b58:	4622      	mov	r2, r4
 8016b5a:	4629      	mov	r1, r5
 8016b5c:	4638      	mov	r0, r7
 8016b5e:	f7ff ff6b 	bl	8016a38 <__ssputs_r>
 8016b62:	3001      	adds	r0, #1
 8016b64:	f000 80a7 	beq.w	8016cb6 <_svfiprintf_r+0x1c6>
 8016b68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016b6a:	445a      	add	r2, fp
 8016b6c:	9209      	str	r2, [sp, #36]	@ 0x24
 8016b6e:	f89a 3000 	ldrb.w	r3, [sl]
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	f000 809f 	beq.w	8016cb6 <_svfiprintf_r+0x1c6>
 8016b78:	2300      	movs	r3, #0
 8016b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8016b7e:	f10a 0a01 	add.w	sl, sl, #1
 8016b82:	9304      	str	r3, [sp, #16]
 8016b84:	9307      	str	r3, [sp, #28]
 8016b86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016b8a:	931a      	str	r3, [sp, #104]	@ 0x68
 8016b8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016b90:	4654      	mov	r4, sl
 8016b92:	2205      	movs	r2, #5
 8016b94:	484f      	ldr	r0, [pc, #316]	@ (8016cd4 <_svfiprintf_r+0x1e4>)
 8016b96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016b9a:	f000 fcd3 	bl	8017544 <memchr>
 8016b9e:	9a04      	ldr	r2, [sp, #16]
 8016ba0:	b9d8      	cbnz	r0, 8016bda <_svfiprintf_r+0xea>
 8016ba2:	06d0      	lsls	r0, r2, #27
 8016ba4:	bf44      	itt	mi
 8016ba6:	2320      	movmi	r3, #32
 8016ba8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016bac:	0711      	lsls	r1, r2, #28
 8016bae:	bf44      	itt	mi
 8016bb0:	232b      	movmi	r3, #43	@ 0x2b
 8016bb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016bb6:	f89a 3000 	ldrb.w	r3, [sl]
 8016bba:	2b2a      	cmp	r3, #42	@ 0x2a
 8016bbc:	d015      	beq.n	8016bea <_svfiprintf_r+0xfa>
 8016bbe:	9a07      	ldr	r2, [sp, #28]
 8016bc0:	4654      	mov	r4, sl
 8016bc2:	2000      	movs	r0, #0
 8016bc4:	f04f 0c0a 	mov.w	ip, #10
 8016bc8:	4621      	mov	r1, r4
 8016bca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016bce:	3b30      	subs	r3, #48	@ 0x30
 8016bd0:	2b09      	cmp	r3, #9
 8016bd2:	d94b      	bls.n	8016c6c <_svfiprintf_r+0x17c>
 8016bd4:	b1b0      	cbz	r0, 8016c04 <_svfiprintf_r+0x114>
 8016bd6:	9207      	str	r2, [sp, #28]
 8016bd8:	e014      	b.n	8016c04 <_svfiprintf_r+0x114>
 8016bda:	eba0 0308 	sub.w	r3, r0, r8
 8016bde:	46a2      	mov	sl, r4
 8016be0:	fa09 f303 	lsl.w	r3, r9, r3
 8016be4:	4313      	orrs	r3, r2
 8016be6:	9304      	str	r3, [sp, #16]
 8016be8:	e7d2      	b.n	8016b90 <_svfiprintf_r+0xa0>
 8016bea:	9b03      	ldr	r3, [sp, #12]
 8016bec:	1d19      	adds	r1, r3, #4
 8016bee:	681b      	ldr	r3, [r3, #0]
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	9103      	str	r1, [sp, #12]
 8016bf4:	bfbb      	ittet	lt
 8016bf6:	425b      	neglt	r3, r3
 8016bf8:	f042 0202 	orrlt.w	r2, r2, #2
 8016bfc:	9307      	strge	r3, [sp, #28]
 8016bfe:	9307      	strlt	r3, [sp, #28]
 8016c00:	bfb8      	it	lt
 8016c02:	9204      	strlt	r2, [sp, #16]
 8016c04:	7823      	ldrb	r3, [r4, #0]
 8016c06:	2b2e      	cmp	r3, #46	@ 0x2e
 8016c08:	d10a      	bne.n	8016c20 <_svfiprintf_r+0x130>
 8016c0a:	7863      	ldrb	r3, [r4, #1]
 8016c0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8016c0e:	d132      	bne.n	8016c76 <_svfiprintf_r+0x186>
 8016c10:	9b03      	ldr	r3, [sp, #12]
 8016c12:	3402      	adds	r4, #2
 8016c14:	1d1a      	adds	r2, r3, #4
 8016c16:	681b      	ldr	r3, [r3, #0]
 8016c18:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016c1c:	9203      	str	r2, [sp, #12]
 8016c1e:	9305      	str	r3, [sp, #20]
 8016c20:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016ce4 <_svfiprintf_r+0x1f4>
 8016c24:	2203      	movs	r2, #3
 8016c26:	7821      	ldrb	r1, [r4, #0]
 8016c28:	4650      	mov	r0, sl
 8016c2a:	f000 fc8b 	bl	8017544 <memchr>
 8016c2e:	b138      	cbz	r0, 8016c40 <_svfiprintf_r+0x150>
 8016c30:	eba0 000a 	sub.w	r0, r0, sl
 8016c34:	2240      	movs	r2, #64	@ 0x40
 8016c36:	9b04      	ldr	r3, [sp, #16]
 8016c38:	3401      	adds	r4, #1
 8016c3a:	4082      	lsls	r2, r0
 8016c3c:	4313      	orrs	r3, r2
 8016c3e:	9304      	str	r3, [sp, #16]
 8016c40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016c44:	2206      	movs	r2, #6
 8016c46:	4824      	ldr	r0, [pc, #144]	@ (8016cd8 <_svfiprintf_r+0x1e8>)
 8016c48:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016c4c:	f000 fc7a 	bl	8017544 <memchr>
 8016c50:	2800      	cmp	r0, #0
 8016c52:	d036      	beq.n	8016cc2 <_svfiprintf_r+0x1d2>
 8016c54:	4b21      	ldr	r3, [pc, #132]	@ (8016cdc <_svfiprintf_r+0x1ec>)
 8016c56:	bb1b      	cbnz	r3, 8016ca0 <_svfiprintf_r+0x1b0>
 8016c58:	9b03      	ldr	r3, [sp, #12]
 8016c5a:	3307      	adds	r3, #7
 8016c5c:	f023 0307 	bic.w	r3, r3, #7
 8016c60:	3308      	adds	r3, #8
 8016c62:	9303      	str	r3, [sp, #12]
 8016c64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016c66:	4433      	add	r3, r6
 8016c68:	9309      	str	r3, [sp, #36]	@ 0x24
 8016c6a:	e76a      	b.n	8016b42 <_svfiprintf_r+0x52>
 8016c6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8016c70:	460c      	mov	r4, r1
 8016c72:	2001      	movs	r0, #1
 8016c74:	e7a8      	b.n	8016bc8 <_svfiprintf_r+0xd8>
 8016c76:	2300      	movs	r3, #0
 8016c78:	3401      	adds	r4, #1
 8016c7a:	f04f 0c0a 	mov.w	ip, #10
 8016c7e:	4619      	mov	r1, r3
 8016c80:	9305      	str	r3, [sp, #20]
 8016c82:	4620      	mov	r0, r4
 8016c84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016c88:	3a30      	subs	r2, #48	@ 0x30
 8016c8a:	2a09      	cmp	r2, #9
 8016c8c:	d903      	bls.n	8016c96 <_svfiprintf_r+0x1a6>
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	d0c6      	beq.n	8016c20 <_svfiprintf_r+0x130>
 8016c92:	9105      	str	r1, [sp, #20]
 8016c94:	e7c4      	b.n	8016c20 <_svfiprintf_r+0x130>
 8016c96:	fb0c 2101 	mla	r1, ip, r1, r2
 8016c9a:	4604      	mov	r4, r0
 8016c9c:	2301      	movs	r3, #1
 8016c9e:	e7f0      	b.n	8016c82 <_svfiprintf_r+0x192>
 8016ca0:	ab03      	add	r3, sp, #12
 8016ca2:	462a      	mov	r2, r5
 8016ca4:	a904      	add	r1, sp, #16
 8016ca6:	4638      	mov	r0, r7
 8016ca8:	9300      	str	r3, [sp, #0]
 8016caa:	4b0d      	ldr	r3, [pc, #52]	@ (8016ce0 <_svfiprintf_r+0x1f0>)
 8016cac:	f3af 8000 	nop.w
 8016cb0:	1c42      	adds	r2, r0, #1
 8016cb2:	4606      	mov	r6, r0
 8016cb4:	d1d6      	bne.n	8016c64 <_svfiprintf_r+0x174>
 8016cb6:	89ab      	ldrh	r3, [r5, #12]
 8016cb8:	065b      	lsls	r3, r3, #25
 8016cba:	f53f af2d 	bmi.w	8016b18 <_svfiprintf_r+0x28>
 8016cbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016cc0:	e72c      	b.n	8016b1c <_svfiprintf_r+0x2c>
 8016cc2:	ab03      	add	r3, sp, #12
 8016cc4:	462a      	mov	r2, r5
 8016cc6:	a904      	add	r1, sp, #16
 8016cc8:	4638      	mov	r0, r7
 8016cca:	9300      	str	r3, [sp, #0]
 8016ccc:	4b04      	ldr	r3, [pc, #16]	@ (8016ce0 <_svfiprintf_r+0x1f0>)
 8016cce:	f000 f9bf 	bl	8017050 <_printf_i>
 8016cd2:	e7ed      	b.n	8016cb0 <_svfiprintf_r+0x1c0>
 8016cd4:	080195f4 	.word	0x080195f4
 8016cd8:	080195fe 	.word	0x080195fe
 8016cdc:	00000000 	.word	0x00000000
 8016ce0:	08016a39 	.word	0x08016a39
 8016ce4:	080195fa 	.word	0x080195fa

08016ce8 <__sfputc_r>:
 8016ce8:	6893      	ldr	r3, [r2, #8]
 8016cea:	3b01      	subs	r3, #1
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	6093      	str	r3, [r2, #8]
 8016cf0:	b410      	push	{r4}
 8016cf2:	da08      	bge.n	8016d06 <__sfputc_r+0x1e>
 8016cf4:	6994      	ldr	r4, [r2, #24]
 8016cf6:	42a3      	cmp	r3, r4
 8016cf8:	db01      	blt.n	8016cfe <__sfputc_r+0x16>
 8016cfa:	290a      	cmp	r1, #10
 8016cfc:	d103      	bne.n	8016d06 <__sfputc_r+0x1e>
 8016cfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016d02:	f000 bb71 	b.w	80173e8 <__swbuf_r>
 8016d06:	6813      	ldr	r3, [r2, #0]
 8016d08:	1c58      	adds	r0, r3, #1
 8016d0a:	6010      	str	r0, [r2, #0]
 8016d0c:	4608      	mov	r0, r1
 8016d0e:	7019      	strb	r1, [r3, #0]
 8016d10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016d14:	4770      	bx	lr

08016d16 <__sfputs_r>:
 8016d16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d18:	4606      	mov	r6, r0
 8016d1a:	460f      	mov	r7, r1
 8016d1c:	4614      	mov	r4, r2
 8016d1e:	18d5      	adds	r5, r2, r3
 8016d20:	42ac      	cmp	r4, r5
 8016d22:	d101      	bne.n	8016d28 <__sfputs_r+0x12>
 8016d24:	2000      	movs	r0, #0
 8016d26:	e007      	b.n	8016d38 <__sfputs_r+0x22>
 8016d28:	463a      	mov	r2, r7
 8016d2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016d2e:	4630      	mov	r0, r6
 8016d30:	f7ff ffda 	bl	8016ce8 <__sfputc_r>
 8016d34:	1c43      	adds	r3, r0, #1
 8016d36:	d1f3      	bne.n	8016d20 <__sfputs_r+0xa>
 8016d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016d3c <_vfiprintf_r>:
 8016d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d40:	460d      	mov	r5, r1
 8016d42:	b09d      	sub	sp, #116	@ 0x74
 8016d44:	4614      	mov	r4, r2
 8016d46:	4698      	mov	r8, r3
 8016d48:	4606      	mov	r6, r0
 8016d4a:	b118      	cbz	r0, 8016d54 <_vfiprintf_r+0x18>
 8016d4c:	6a03      	ldr	r3, [r0, #32]
 8016d4e:	b90b      	cbnz	r3, 8016d54 <_vfiprintf_r+0x18>
 8016d50:	f7ff fc68 	bl	8016624 <__sinit>
 8016d54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016d56:	07d9      	lsls	r1, r3, #31
 8016d58:	d405      	bmi.n	8016d66 <_vfiprintf_r+0x2a>
 8016d5a:	89ab      	ldrh	r3, [r5, #12]
 8016d5c:	059a      	lsls	r2, r3, #22
 8016d5e:	d402      	bmi.n	8016d66 <_vfiprintf_r+0x2a>
 8016d60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016d62:	f7ff fe10 	bl	8016986 <__retarget_lock_acquire_recursive>
 8016d66:	89ab      	ldrh	r3, [r5, #12]
 8016d68:	071b      	lsls	r3, r3, #28
 8016d6a:	d501      	bpl.n	8016d70 <_vfiprintf_r+0x34>
 8016d6c:	692b      	ldr	r3, [r5, #16]
 8016d6e:	b99b      	cbnz	r3, 8016d98 <_vfiprintf_r+0x5c>
 8016d70:	4629      	mov	r1, r5
 8016d72:	4630      	mov	r0, r6
 8016d74:	f000 fb76 	bl	8017464 <__swsetup_r>
 8016d78:	b170      	cbz	r0, 8016d98 <_vfiprintf_r+0x5c>
 8016d7a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016d7c:	07dc      	lsls	r4, r3, #31
 8016d7e:	d504      	bpl.n	8016d8a <_vfiprintf_r+0x4e>
 8016d80:	f04f 30ff 	mov.w	r0, #4294967295
 8016d84:	b01d      	add	sp, #116	@ 0x74
 8016d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d8a:	89ab      	ldrh	r3, [r5, #12]
 8016d8c:	0598      	lsls	r0, r3, #22
 8016d8e:	d4f7      	bmi.n	8016d80 <_vfiprintf_r+0x44>
 8016d90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016d92:	f7ff fdf9 	bl	8016988 <__retarget_lock_release_recursive>
 8016d96:	e7f3      	b.n	8016d80 <_vfiprintf_r+0x44>
 8016d98:	2300      	movs	r3, #0
 8016d9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8016d9e:	f04f 0901 	mov.w	r9, #1
 8016da2:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8016f58 <_vfiprintf_r+0x21c>
 8016da6:	9309      	str	r3, [sp, #36]	@ 0x24
 8016da8:	2320      	movs	r3, #32
 8016daa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016dae:	2330      	movs	r3, #48	@ 0x30
 8016db0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016db4:	4623      	mov	r3, r4
 8016db6:	469a      	mov	sl, r3
 8016db8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016dbc:	b10a      	cbz	r2, 8016dc2 <_vfiprintf_r+0x86>
 8016dbe:	2a25      	cmp	r2, #37	@ 0x25
 8016dc0:	d1f9      	bne.n	8016db6 <_vfiprintf_r+0x7a>
 8016dc2:	ebba 0b04 	subs.w	fp, sl, r4
 8016dc6:	d00b      	beq.n	8016de0 <_vfiprintf_r+0xa4>
 8016dc8:	465b      	mov	r3, fp
 8016dca:	4622      	mov	r2, r4
 8016dcc:	4629      	mov	r1, r5
 8016dce:	4630      	mov	r0, r6
 8016dd0:	f7ff ffa1 	bl	8016d16 <__sfputs_r>
 8016dd4:	3001      	adds	r0, #1
 8016dd6:	f000 80a7 	beq.w	8016f28 <_vfiprintf_r+0x1ec>
 8016dda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016ddc:	445a      	add	r2, fp
 8016dde:	9209      	str	r2, [sp, #36]	@ 0x24
 8016de0:	f89a 3000 	ldrb.w	r3, [sl]
 8016de4:	2b00      	cmp	r3, #0
 8016de6:	f000 809f 	beq.w	8016f28 <_vfiprintf_r+0x1ec>
 8016dea:	2300      	movs	r3, #0
 8016dec:	f04f 32ff 	mov.w	r2, #4294967295
 8016df0:	f10a 0a01 	add.w	sl, sl, #1
 8016df4:	9304      	str	r3, [sp, #16]
 8016df6:	9307      	str	r3, [sp, #28]
 8016df8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016dfc:	931a      	str	r3, [sp, #104]	@ 0x68
 8016dfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016e02:	4654      	mov	r4, sl
 8016e04:	2205      	movs	r2, #5
 8016e06:	4854      	ldr	r0, [pc, #336]	@ (8016f58 <_vfiprintf_r+0x21c>)
 8016e08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016e0c:	f000 fb9a 	bl	8017544 <memchr>
 8016e10:	9a04      	ldr	r2, [sp, #16]
 8016e12:	b9d8      	cbnz	r0, 8016e4c <_vfiprintf_r+0x110>
 8016e14:	06d1      	lsls	r1, r2, #27
 8016e16:	bf44      	itt	mi
 8016e18:	2320      	movmi	r3, #32
 8016e1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016e1e:	0713      	lsls	r3, r2, #28
 8016e20:	bf44      	itt	mi
 8016e22:	232b      	movmi	r3, #43	@ 0x2b
 8016e24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016e28:	f89a 3000 	ldrb.w	r3, [sl]
 8016e2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8016e2e:	d015      	beq.n	8016e5c <_vfiprintf_r+0x120>
 8016e30:	9a07      	ldr	r2, [sp, #28]
 8016e32:	4654      	mov	r4, sl
 8016e34:	2000      	movs	r0, #0
 8016e36:	f04f 0c0a 	mov.w	ip, #10
 8016e3a:	4621      	mov	r1, r4
 8016e3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016e40:	3b30      	subs	r3, #48	@ 0x30
 8016e42:	2b09      	cmp	r3, #9
 8016e44:	d94b      	bls.n	8016ede <_vfiprintf_r+0x1a2>
 8016e46:	b1b0      	cbz	r0, 8016e76 <_vfiprintf_r+0x13a>
 8016e48:	9207      	str	r2, [sp, #28]
 8016e4a:	e014      	b.n	8016e76 <_vfiprintf_r+0x13a>
 8016e4c:	eba0 0308 	sub.w	r3, r0, r8
 8016e50:	46a2      	mov	sl, r4
 8016e52:	fa09 f303 	lsl.w	r3, r9, r3
 8016e56:	4313      	orrs	r3, r2
 8016e58:	9304      	str	r3, [sp, #16]
 8016e5a:	e7d2      	b.n	8016e02 <_vfiprintf_r+0xc6>
 8016e5c:	9b03      	ldr	r3, [sp, #12]
 8016e5e:	1d19      	adds	r1, r3, #4
 8016e60:	681b      	ldr	r3, [r3, #0]
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	9103      	str	r1, [sp, #12]
 8016e66:	bfbb      	ittet	lt
 8016e68:	425b      	neglt	r3, r3
 8016e6a:	f042 0202 	orrlt.w	r2, r2, #2
 8016e6e:	9307      	strge	r3, [sp, #28]
 8016e70:	9307      	strlt	r3, [sp, #28]
 8016e72:	bfb8      	it	lt
 8016e74:	9204      	strlt	r2, [sp, #16]
 8016e76:	7823      	ldrb	r3, [r4, #0]
 8016e78:	2b2e      	cmp	r3, #46	@ 0x2e
 8016e7a:	d10a      	bne.n	8016e92 <_vfiprintf_r+0x156>
 8016e7c:	7863      	ldrb	r3, [r4, #1]
 8016e7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8016e80:	d132      	bne.n	8016ee8 <_vfiprintf_r+0x1ac>
 8016e82:	9b03      	ldr	r3, [sp, #12]
 8016e84:	3402      	adds	r4, #2
 8016e86:	1d1a      	adds	r2, r3, #4
 8016e88:	681b      	ldr	r3, [r3, #0]
 8016e8a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016e8e:	9203      	str	r2, [sp, #12]
 8016e90:	9305      	str	r3, [sp, #20]
 8016e92:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016f68 <_vfiprintf_r+0x22c>
 8016e96:	2203      	movs	r2, #3
 8016e98:	7821      	ldrb	r1, [r4, #0]
 8016e9a:	4650      	mov	r0, sl
 8016e9c:	f000 fb52 	bl	8017544 <memchr>
 8016ea0:	b138      	cbz	r0, 8016eb2 <_vfiprintf_r+0x176>
 8016ea2:	eba0 000a 	sub.w	r0, r0, sl
 8016ea6:	2240      	movs	r2, #64	@ 0x40
 8016ea8:	9b04      	ldr	r3, [sp, #16]
 8016eaa:	3401      	adds	r4, #1
 8016eac:	4082      	lsls	r2, r0
 8016eae:	4313      	orrs	r3, r2
 8016eb0:	9304      	str	r3, [sp, #16]
 8016eb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016eb6:	2206      	movs	r2, #6
 8016eb8:	4828      	ldr	r0, [pc, #160]	@ (8016f5c <_vfiprintf_r+0x220>)
 8016eba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016ebe:	f000 fb41 	bl	8017544 <memchr>
 8016ec2:	2800      	cmp	r0, #0
 8016ec4:	d03f      	beq.n	8016f46 <_vfiprintf_r+0x20a>
 8016ec6:	4b26      	ldr	r3, [pc, #152]	@ (8016f60 <_vfiprintf_r+0x224>)
 8016ec8:	bb1b      	cbnz	r3, 8016f12 <_vfiprintf_r+0x1d6>
 8016eca:	9b03      	ldr	r3, [sp, #12]
 8016ecc:	3307      	adds	r3, #7
 8016ece:	f023 0307 	bic.w	r3, r3, #7
 8016ed2:	3308      	adds	r3, #8
 8016ed4:	9303      	str	r3, [sp, #12]
 8016ed6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016ed8:	443b      	add	r3, r7
 8016eda:	9309      	str	r3, [sp, #36]	@ 0x24
 8016edc:	e76a      	b.n	8016db4 <_vfiprintf_r+0x78>
 8016ede:	fb0c 3202 	mla	r2, ip, r2, r3
 8016ee2:	460c      	mov	r4, r1
 8016ee4:	2001      	movs	r0, #1
 8016ee6:	e7a8      	b.n	8016e3a <_vfiprintf_r+0xfe>
 8016ee8:	2300      	movs	r3, #0
 8016eea:	3401      	adds	r4, #1
 8016eec:	f04f 0c0a 	mov.w	ip, #10
 8016ef0:	4619      	mov	r1, r3
 8016ef2:	9305      	str	r3, [sp, #20]
 8016ef4:	4620      	mov	r0, r4
 8016ef6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016efa:	3a30      	subs	r2, #48	@ 0x30
 8016efc:	2a09      	cmp	r2, #9
 8016efe:	d903      	bls.n	8016f08 <_vfiprintf_r+0x1cc>
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	d0c6      	beq.n	8016e92 <_vfiprintf_r+0x156>
 8016f04:	9105      	str	r1, [sp, #20]
 8016f06:	e7c4      	b.n	8016e92 <_vfiprintf_r+0x156>
 8016f08:	fb0c 2101 	mla	r1, ip, r1, r2
 8016f0c:	4604      	mov	r4, r0
 8016f0e:	2301      	movs	r3, #1
 8016f10:	e7f0      	b.n	8016ef4 <_vfiprintf_r+0x1b8>
 8016f12:	ab03      	add	r3, sp, #12
 8016f14:	462a      	mov	r2, r5
 8016f16:	a904      	add	r1, sp, #16
 8016f18:	4630      	mov	r0, r6
 8016f1a:	9300      	str	r3, [sp, #0]
 8016f1c:	4b11      	ldr	r3, [pc, #68]	@ (8016f64 <_vfiprintf_r+0x228>)
 8016f1e:	f3af 8000 	nop.w
 8016f22:	4607      	mov	r7, r0
 8016f24:	1c78      	adds	r0, r7, #1
 8016f26:	d1d6      	bne.n	8016ed6 <_vfiprintf_r+0x19a>
 8016f28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016f2a:	07d9      	lsls	r1, r3, #31
 8016f2c:	d405      	bmi.n	8016f3a <_vfiprintf_r+0x1fe>
 8016f2e:	89ab      	ldrh	r3, [r5, #12]
 8016f30:	059a      	lsls	r2, r3, #22
 8016f32:	d402      	bmi.n	8016f3a <_vfiprintf_r+0x1fe>
 8016f34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016f36:	f7ff fd27 	bl	8016988 <__retarget_lock_release_recursive>
 8016f3a:	89ab      	ldrh	r3, [r5, #12]
 8016f3c:	065b      	lsls	r3, r3, #25
 8016f3e:	f53f af1f 	bmi.w	8016d80 <_vfiprintf_r+0x44>
 8016f42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016f44:	e71e      	b.n	8016d84 <_vfiprintf_r+0x48>
 8016f46:	ab03      	add	r3, sp, #12
 8016f48:	462a      	mov	r2, r5
 8016f4a:	a904      	add	r1, sp, #16
 8016f4c:	4630      	mov	r0, r6
 8016f4e:	9300      	str	r3, [sp, #0]
 8016f50:	4b04      	ldr	r3, [pc, #16]	@ (8016f64 <_vfiprintf_r+0x228>)
 8016f52:	f000 f87d 	bl	8017050 <_printf_i>
 8016f56:	e7e4      	b.n	8016f22 <_vfiprintf_r+0x1e6>
 8016f58:	080195f4 	.word	0x080195f4
 8016f5c:	080195fe 	.word	0x080195fe
 8016f60:	00000000 	.word	0x00000000
 8016f64:	08016d17 	.word	0x08016d17
 8016f68:	080195fa 	.word	0x080195fa

08016f6c <_printf_common>:
 8016f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f70:	4616      	mov	r6, r2
 8016f72:	4698      	mov	r8, r3
 8016f74:	688a      	ldr	r2, [r1, #8]
 8016f76:	4607      	mov	r7, r0
 8016f78:	690b      	ldr	r3, [r1, #16]
 8016f7a:	460c      	mov	r4, r1
 8016f7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8016f80:	4293      	cmp	r3, r2
 8016f82:	bfb8      	it	lt
 8016f84:	4613      	movlt	r3, r2
 8016f86:	6033      	str	r3, [r6, #0]
 8016f88:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8016f8c:	b10a      	cbz	r2, 8016f92 <_printf_common+0x26>
 8016f8e:	3301      	adds	r3, #1
 8016f90:	6033      	str	r3, [r6, #0]
 8016f92:	6823      	ldr	r3, [r4, #0]
 8016f94:	0699      	lsls	r1, r3, #26
 8016f96:	bf42      	ittt	mi
 8016f98:	6833      	ldrmi	r3, [r6, #0]
 8016f9a:	3302      	addmi	r3, #2
 8016f9c:	6033      	strmi	r3, [r6, #0]
 8016f9e:	6825      	ldr	r5, [r4, #0]
 8016fa0:	f015 0506 	ands.w	r5, r5, #6
 8016fa4:	d106      	bne.n	8016fb4 <_printf_common+0x48>
 8016fa6:	f104 0a19 	add.w	sl, r4, #25
 8016faa:	68e3      	ldr	r3, [r4, #12]
 8016fac:	6832      	ldr	r2, [r6, #0]
 8016fae:	1a9b      	subs	r3, r3, r2
 8016fb0:	42ab      	cmp	r3, r5
 8016fb2:	dc2b      	bgt.n	801700c <_printf_common+0xa0>
 8016fb4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016fb8:	6822      	ldr	r2, [r4, #0]
 8016fba:	3b00      	subs	r3, #0
 8016fbc:	bf18      	it	ne
 8016fbe:	2301      	movne	r3, #1
 8016fc0:	0692      	lsls	r2, r2, #26
 8016fc2:	d430      	bmi.n	8017026 <_printf_common+0xba>
 8016fc4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8016fc8:	4641      	mov	r1, r8
 8016fca:	4638      	mov	r0, r7
 8016fcc:	47c8      	blx	r9
 8016fce:	3001      	adds	r0, #1
 8016fd0:	d023      	beq.n	801701a <_printf_common+0xae>
 8016fd2:	6823      	ldr	r3, [r4, #0]
 8016fd4:	341a      	adds	r4, #26
 8016fd6:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8016fda:	f003 0306 	and.w	r3, r3, #6
 8016fde:	2b04      	cmp	r3, #4
 8016fe0:	bf0a      	itet	eq
 8016fe2:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8016fe6:	2500      	movne	r5, #0
 8016fe8:	6833      	ldreq	r3, [r6, #0]
 8016fea:	f04f 0600 	mov.w	r6, #0
 8016fee:	bf08      	it	eq
 8016ff0:	1aed      	subeq	r5, r5, r3
 8016ff2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8016ff6:	bf08      	it	eq
 8016ff8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016ffc:	4293      	cmp	r3, r2
 8016ffe:	bfc4      	itt	gt
 8017000:	1a9b      	subgt	r3, r3, r2
 8017002:	18ed      	addgt	r5, r5, r3
 8017004:	42b5      	cmp	r5, r6
 8017006:	d11a      	bne.n	801703e <_printf_common+0xd2>
 8017008:	2000      	movs	r0, #0
 801700a:	e008      	b.n	801701e <_printf_common+0xb2>
 801700c:	2301      	movs	r3, #1
 801700e:	4652      	mov	r2, sl
 8017010:	4641      	mov	r1, r8
 8017012:	4638      	mov	r0, r7
 8017014:	47c8      	blx	r9
 8017016:	3001      	adds	r0, #1
 8017018:	d103      	bne.n	8017022 <_printf_common+0xb6>
 801701a:	f04f 30ff 	mov.w	r0, #4294967295
 801701e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017022:	3501      	adds	r5, #1
 8017024:	e7c1      	b.n	8016faa <_printf_common+0x3e>
 8017026:	18e1      	adds	r1, r4, r3
 8017028:	1c5a      	adds	r2, r3, #1
 801702a:	2030      	movs	r0, #48	@ 0x30
 801702c:	3302      	adds	r3, #2
 801702e:	4422      	add	r2, r4
 8017030:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017034:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017038:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801703c:	e7c2      	b.n	8016fc4 <_printf_common+0x58>
 801703e:	2301      	movs	r3, #1
 8017040:	4622      	mov	r2, r4
 8017042:	4641      	mov	r1, r8
 8017044:	4638      	mov	r0, r7
 8017046:	47c8      	blx	r9
 8017048:	3001      	adds	r0, #1
 801704a:	d0e6      	beq.n	801701a <_printf_common+0xae>
 801704c:	3601      	adds	r6, #1
 801704e:	e7d9      	b.n	8017004 <_printf_common+0x98>

08017050 <_printf_i>:
 8017050:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017054:	7e0f      	ldrb	r7, [r1, #24]
 8017056:	4691      	mov	r9, r2
 8017058:	4680      	mov	r8, r0
 801705a:	460c      	mov	r4, r1
 801705c:	2f78      	cmp	r7, #120	@ 0x78
 801705e:	469a      	mov	sl, r3
 8017060:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017062:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017066:	d807      	bhi.n	8017078 <_printf_i+0x28>
 8017068:	2f62      	cmp	r7, #98	@ 0x62
 801706a:	d80a      	bhi.n	8017082 <_printf_i+0x32>
 801706c:	2f00      	cmp	r7, #0
 801706e:	f000 80d2 	beq.w	8017216 <_printf_i+0x1c6>
 8017072:	2f58      	cmp	r7, #88	@ 0x58
 8017074:	f000 80b9 	beq.w	80171ea <_printf_i+0x19a>
 8017078:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801707c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017080:	e03a      	b.n	80170f8 <_printf_i+0xa8>
 8017082:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017086:	2b15      	cmp	r3, #21
 8017088:	d8f6      	bhi.n	8017078 <_printf_i+0x28>
 801708a:	a101      	add	r1, pc, #4	@ (adr r1, 8017090 <_printf_i+0x40>)
 801708c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017090:	080170e9 	.word	0x080170e9
 8017094:	080170fd 	.word	0x080170fd
 8017098:	08017079 	.word	0x08017079
 801709c:	08017079 	.word	0x08017079
 80170a0:	08017079 	.word	0x08017079
 80170a4:	08017079 	.word	0x08017079
 80170a8:	080170fd 	.word	0x080170fd
 80170ac:	08017079 	.word	0x08017079
 80170b0:	08017079 	.word	0x08017079
 80170b4:	08017079 	.word	0x08017079
 80170b8:	08017079 	.word	0x08017079
 80170bc:	080171fd 	.word	0x080171fd
 80170c0:	08017127 	.word	0x08017127
 80170c4:	080171b7 	.word	0x080171b7
 80170c8:	08017079 	.word	0x08017079
 80170cc:	08017079 	.word	0x08017079
 80170d0:	0801721f 	.word	0x0801721f
 80170d4:	08017079 	.word	0x08017079
 80170d8:	08017127 	.word	0x08017127
 80170dc:	08017079 	.word	0x08017079
 80170e0:	08017079 	.word	0x08017079
 80170e4:	080171bf 	.word	0x080171bf
 80170e8:	6833      	ldr	r3, [r6, #0]
 80170ea:	1d1a      	adds	r2, r3, #4
 80170ec:	681b      	ldr	r3, [r3, #0]
 80170ee:	6032      	str	r2, [r6, #0]
 80170f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80170f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80170f8:	2301      	movs	r3, #1
 80170fa:	e09d      	b.n	8017238 <_printf_i+0x1e8>
 80170fc:	6833      	ldr	r3, [r6, #0]
 80170fe:	6820      	ldr	r0, [r4, #0]
 8017100:	1d19      	adds	r1, r3, #4
 8017102:	6031      	str	r1, [r6, #0]
 8017104:	0606      	lsls	r6, r0, #24
 8017106:	d501      	bpl.n	801710c <_printf_i+0xbc>
 8017108:	681d      	ldr	r5, [r3, #0]
 801710a:	e003      	b.n	8017114 <_printf_i+0xc4>
 801710c:	0645      	lsls	r5, r0, #25
 801710e:	d5fb      	bpl.n	8017108 <_printf_i+0xb8>
 8017110:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017114:	2d00      	cmp	r5, #0
 8017116:	da03      	bge.n	8017120 <_printf_i+0xd0>
 8017118:	232d      	movs	r3, #45	@ 0x2d
 801711a:	426d      	negs	r5, r5
 801711c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017120:	4859      	ldr	r0, [pc, #356]	@ (8017288 <_printf_i+0x238>)
 8017122:	230a      	movs	r3, #10
 8017124:	e011      	b.n	801714a <_printf_i+0xfa>
 8017126:	6821      	ldr	r1, [r4, #0]
 8017128:	6833      	ldr	r3, [r6, #0]
 801712a:	0608      	lsls	r0, r1, #24
 801712c:	f853 5b04 	ldr.w	r5, [r3], #4
 8017130:	d402      	bmi.n	8017138 <_printf_i+0xe8>
 8017132:	0649      	lsls	r1, r1, #25
 8017134:	bf48      	it	mi
 8017136:	b2ad      	uxthmi	r5, r5
 8017138:	2f6f      	cmp	r7, #111	@ 0x6f
 801713a:	6033      	str	r3, [r6, #0]
 801713c:	4852      	ldr	r0, [pc, #328]	@ (8017288 <_printf_i+0x238>)
 801713e:	bf14      	ite	ne
 8017140:	230a      	movne	r3, #10
 8017142:	2308      	moveq	r3, #8
 8017144:	2100      	movs	r1, #0
 8017146:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801714a:	6866      	ldr	r6, [r4, #4]
 801714c:	2e00      	cmp	r6, #0
 801714e:	60a6      	str	r6, [r4, #8]
 8017150:	bfa2      	ittt	ge
 8017152:	6821      	ldrge	r1, [r4, #0]
 8017154:	f021 0104 	bicge.w	r1, r1, #4
 8017158:	6021      	strge	r1, [r4, #0]
 801715a:	b90d      	cbnz	r5, 8017160 <_printf_i+0x110>
 801715c:	2e00      	cmp	r6, #0
 801715e:	d04b      	beq.n	80171f8 <_printf_i+0x1a8>
 8017160:	4616      	mov	r6, r2
 8017162:	fbb5 f1f3 	udiv	r1, r5, r3
 8017166:	fb03 5711 	mls	r7, r3, r1, r5
 801716a:	5dc7      	ldrb	r7, [r0, r7]
 801716c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017170:	462f      	mov	r7, r5
 8017172:	460d      	mov	r5, r1
 8017174:	42bb      	cmp	r3, r7
 8017176:	d9f4      	bls.n	8017162 <_printf_i+0x112>
 8017178:	2b08      	cmp	r3, #8
 801717a:	d10b      	bne.n	8017194 <_printf_i+0x144>
 801717c:	6823      	ldr	r3, [r4, #0]
 801717e:	07df      	lsls	r7, r3, #31
 8017180:	d508      	bpl.n	8017194 <_printf_i+0x144>
 8017182:	6923      	ldr	r3, [r4, #16]
 8017184:	6861      	ldr	r1, [r4, #4]
 8017186:	4299      	cmp	r1, r3
 8017188:	bfde      	ittt	le
 801718a:	2330      	movle	r3, #48	@ 0x30
 801718c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017190:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017194:	1b92      	subs	r2, r2, r6
 8017196:	6122      	str	r2, [r4, #16]
 8017198:	464b      	mov	r3, r9
 801719a:	aa03      	add	r2, sp, #12
 801719c:	4621      	mov	r1, r4
 801719e:	4640      	mov	r0, r8
 80171a0:	f8cd a000 	str.w	sl, [sp]
 80171a4:	f7ff fee2 	bl	8016f6c <_printf_common>
 80171a8:	3001      	adds	r0, #1
 80171aa:	d14a      	bne.n	8017242 <_printf_i+0x1f2>
 80171ac:	f04f 30ff 	mov.w	r0, #4294967295
 80171b0:	b004      	add	sp, #16
 80171b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80171b6:	6823      	ldr	r3, [r4, #0]
 80171b8:	f043 0320 	orr.w	r3, r3, #32
 80171bc:	6023      	str	r3, [r4, #0]
 80171be:	2778      	movs	r7, #120	@ 0x78
 80171c0:	4832      	ldr	r0, [pc, #200]	@ (801728c <_printf_i+0x23c>)
 80171c2:	6823      	ldr	r3, [r4, #0]
 80171c4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80171c8:	061f      	lsls	r7, r3, #24
 80171ca:	6831      	ldr	r1, [r6, #0]
 80171cc:	f851 5b04 	ldr.w	r5, [r1], #4
 80171d0:	d402      	bmi.n	80171d8 <_printf_i+0x188>
 80171d2:	065f      	lsls	r7, r3, #25
 80171d4:	bf48      	it	mi
 80171d6:	b2ad      	uxthmi	r5, r5
 80171d8:	6031      	str	r1, [r6, #0]
 80171da:	07d9      	lsls	r1, r3, #31
 80171dc:	bf44      	itt	mi
 80171de:	f043 0320 	orrmi.w	r3, r3, #32
 80171e2:	6023      	strmi	r3, [r4, #0]
 80171e4:	b11d      	cbz	r5, 80171ee <_printf_i+0x19e>
 80171e6:	2310      	movs	r3, #16
 80171e8:	e7ac      	b.n	8017144 <_printf_i+0xf4>
 80171ea:	4827      	ldr	r0, [pc, #156]	@ (8017288 <_printf_i+0x238>)
 80171ec:	e7e9      	b.n	80171c2 <_printf_i+0x172>
 80171ee:	6823      	ldr	r3, [r4, #0]
 80171f0:	f023 0320 	bic.w	r3, r3, #32
 80171f4:	6023      	str	r3, [r4, #0]
 80171f6:	e7f6      	b.n	80171e6 <_printf_i+0x196>
 80171f8:	4616      	mov	r6, r2
 80171fa:	e7bd      	b.n	8017178 <_printf_i+0x128>
 80171fc:	6833      	ldr	r3, [r6, #0]
 80171fe:	6825      	ldr	r5, [r4, #0]
 8017200:	1d18      	adds	r0, r3, #4
 8017202:	6961      	ldr	r1, [r4, #20]
 8017204:	6030      	str	r0, [r6, #0]
 8017206:	062e      	lsls	r6, r5, #24
 8017208:	681b      	ldr	r3, [r3, #0]
 801720a:	d501      	bpl.n	8017210 <_printf_i+0x1c0>
 801720c:	6019      	str	r1, [r3, #0]
 801720e:	e002      	b.n	8017216 <_printf_i+0x1c6>
 8017210:	0668      	lsls	r0, r5, #25
 8017212:	d5fb      	bpl.n	801720c <_printf_i+0x1bc>
 8017214:	8019      	strh	r1, [r3, #0]
 8017216:	2300      	movs	r3, #0
 8017218:	4616      	mov	r6, r2
 801721a:	6123      	str	r3, [r4, #16]
 801721c:	e7bc      	b.n	8017198 <_printf_i+0x148>
 801721e:	6833      	ldr	r3, [r6, #0]
 8017220:	2100      	movs	r1, #0
 8017222:	1d1a      	adds	r2, r3, #4
 8017224:	6032      	str	r2, [r6, #0]
 8017226:	681e      	ldr	r6, [r3, #0]
 8017228:	6862      	ldr	r2, [r4, #4]
 801722a:	4630      	mov	r0, r6
 801722c:	f000 f98a 	bl	8017544 <memchr>
 8017230:	b108      	cbz	r0, 8017236 <_printf_i+0x1e6>
 8017232:	1b80      	subs	r0, r0, r6
 8017234:	6060      	str	r0, [r4, #4]
 8017236:	6863      	ldr	r3, [r4, #4]
 8017238:	6123      	str	r3, [r4, #16]
 801723a:	2300      	movs	r3, #0
 801723c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017240:	e7aa      	b.n	8017198 <_printf_i+0x148>
 8017242:	6923      	ldr	r3, [r4, #16]
 8017244:	4632      	mov	r2, r6
 8017246:	4649      	mov	r1, r9
 8017248:	4640      	mov	r0, r8
 801724a:	47d0      	blx	sl
 801724c:	3001      	adds	r0, #1
 801724e:	d0ad      	beq.n	80171ac <_printf_i+0x15c>
 8017250:	6823      	ldr	r3, [r4, #0]
 8017252:	079b      	lsls	r3, r3, #30
 8017254:	d413      	bmi.n	801727e <_printf_i+0x22e>
 8017256:	68e0      	ldr	r0, [r4, #12]
 8017258:	9b03      	ldr	r3, [sp, #12]
 801725a:	4298      	cmp	r0, r3
 801725c:	bfb8      	it	lt
 801725e:	4618      	movlt	r0, r3
 8017260:	e7a6      	b.n	80171b0 <_printf_i+0x160>
 8017262:	2301      	movs	r3, #1
 8017264:	4632      	mov	r2, r6
 8017266:	4649      	mov	r1, r9
 8017268:	4640      	mov	r0, r8
 801726a:	47d0      	blx	sl
 801726c:	3001      	adds	r0, #1
 801726e:	d09d      	beq.n	80171ac <_printf_i+0x15c>
 8017270:	3501      	adds	r5, #1
 8017272:	68e3      	ldr	r3, [r4, #12]
 8017274:	9903      	ldr	r1, [sp, #12]
 8017276:	1a5b      	subs	r3, r3, r1
 8017278:	42ab      	cmp	r3, r5
 801727a:	dcf2      	bgt.n	8017262 <_printf_i+0x212>
 801727c:	e7eb      	b.n	8017256 <_printf_i+0x206>
 801727e:	2500      	movs	r5, #0
 8017280:	f104 0619 	add.w	r6, r4, #25
 8017284:	e7f5      	b.n	8017272 <_printf_i+0x222>
 8017286:	bf00      	nop
 8017288:	08019605 	.word	0x08019605
 801728c:	08019616 	.word	0x08019616

08017290 <__sflush_r>:
 8017290:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017298:	0716      	lsls	r6, r2, #28
 801729a:	4605      	mov	r5, r0
 801729c:	460c      	mov	r4, r1
 801729e:	d454      	bmi.n	801734a <__sflush_r+0xba>
 80172a0:	684b      	ldr	r3, [r1, #4]
 80172a2:	2b00      	cmp	r3, #0
 80172a4:	dc02      	bgt.n	80172ac <__sflush_r+0x1c>
 80172a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	dd48      	ble.n	801733e <__sflush_r+0xae>
 80172ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80172ae:	2e00      	cmp	r6, #0
 80172b0:	d045      	beq.n	801733e <__sflush_r+0xae>
 80172b2:	2300      	movs	r3, #0
 80172b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80172b8:	682f      	ldr	r7, [r5, #0]
 80172ba:	6a21      	ldr	r1, [r4, #32]
 80172bc:	602b      	str	r3, [r5, #0]
 80172be:	d030      	beq.n	8017322 <__sflush_r+0x92>
 80172c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80172c2:	89a3      	ldrh	r3, [r4, #12]
 80172c4:	0759      	lsls	r1, r3, #29
 80172c6:	d505      	bpl.n	80172d4 <__sflush_r+0x44>
 80172c8:	6863      	ldr	r3, [r4, #4]
 80172ca:	1ad2      	subs	r2, r2, r3
 80172cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80172ce:	b10b      	cbz	r3, 80172d4 <__sflush_r+0x44>
 80172d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80172d2:	1ad2      	subs	r2, r2, r3
 80172d4:	2300      	movs	r3, #0
 80172d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80172d8:	6a21      	ldr	r1, [r4, #32]
 80172da:	4628      	mov	r0, r5
 80172dc:	47b0      	blx	r6
 80172de:	1c43      	adds	r3, r0, #1
 80172e0:	89a3      	ldrh	r3, [r4, #12]
 80172e2:	d106      	bne.n	80172f2 <__sflush_r+0x62>
 80172e4:	6829      	ldr	r1, [r5, #0]
 80172e6:	291d      	cmp	r1, #29
 80172e8:	d82b      	bhi.n	8017342 <__sflush_r+0xb2>
 80172ea:	4a2a      	ldr	r2, [pc, #168]	@ (8017394 <__sflush_r+0x104>)
 80172ec:	410a      	asrs	r2, r1
 80172ee:	07d6      	lsls	r6, r2, #31
 80172f0:	d427      	bmi.n	8017342 <__sflush_r+0xb2>
 80172f2:	2200      	movs	r2, #0
 80172f4:	04d9      	lsls	r1, r3, #19
 80172f6:	6062      	str	r2, [r4, #4]
 80172f8:	6922      	ldr	r2, [r4, #16]
 80172fa:	6022      	str	r2, [r4, #0]
 80172fc:	d504      	bpl.n	8017308 <__sflush_r+0x78>
 80172fe:	1c42      	adds	r2, r0, #1
 8017300:	d101      	bne.n	8017306 <__sflush_r+0x76>
 8017302:	682b      	ldr	r3, [r5, #0]
 8017304:	b903      	cbnz	r3, 8017308 <__sflush_r+0x78>
 8017306:	6560      	str	r0, [r4, #84]	@ 0x54
 8017308:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801730a:	602f      	str	r7, [r5, #0]
 801730c:	b1b9      	cbz	r1, 801733e <__sflush_r+0xae>
 801730e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017312:	4299      	cmp	r1, r3
 8017314:	d002      	beq.n	801731c <__sflush_r+0x8c>
 8017316:	4628      	mov	r0, r5
 8017318:	f7ff fb44 	bl	80169a4 <_free_r>
 801731c:	2300      	movs	r3, #0
 801731e:	6363      	str	r3, [r4, #52]	@ 0x34
 8017320:	e00d      	b.n	801733e <__sflush_r+0xae>
 8017322:	2301      	movs	r3, #1
 8017324:	4628      	mov	r0, r5
 8017326:	47b0      	blx	r6
 8017328:	4602      	mov	r2, r0
 801732a:	1c50      	adds	r0, r2, #1
 801732c:	d1c9      	bne.n	80172c2 <__sflush_r+0x32>
 801732e:	682b      	ldr	r3, [r5, #0]
 8017330:	2b00      	cmp	r3, #0
 8017332:	d0c6      	beq.n	80172c2 <__sflush_r+0x32>
 8017334:	2b1d      	cmp	r3, #29
 8017336:	d001      	beq.n	801733c <__sflush_r+0xac>
 8017338:	2b16      	cmp	r3, #22
 801733a:	d11d      	bne.n	8017378 <__sflush_r+0xe8>
 801733c:	602f      	str	r7, [r5, #0]
 801733e:	2000      	movs	r0, #0
 8017340:	e021      	b.n	8017386 <__sflush_r+0xf6>
 8017342:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017346:	b21b      	sxth	r3, r3
 8017348:	e01a      	b.n	8017380 <__sflush_r+0xf0>
 801734a:	690f      	ldr	r7, [r1, #16]
 801734c:	2f00      	cmp	r7, #0
 801734e:	d0f6      	beq.n	801733e <__sflush_r+0xae>
 8017350:	0793      	lsls	r3, r2, #30
 8017352:	680e      	ldr	r6, [r1, #0]
 8017354:	600f      	str	r7, [r1, #0]
 8017356:	bf0c      	ite	eq
 8017358:	694b      	ldreq	r3, [r1, #20]
 801735a:	2300      	movne	r3, #0
 801735c:	eba6 0807 	sub.w	r8, r6, r7
 8017360:	608b      	str	r3, [r1, #8]
 8017362:	f1b8 0f00 	cmp.w	r8, #0
 8017366:	ddea      	ble.n	801733e <__sflush_r+0xae>
 8017368:	4643      	mov	r3, r8
 801736a:	463a      	mov	r2, r7
 801736c:	6a21      	ldr	r1, [r4, #32]
 801736e:	4628      	mov	r0, r5
 8017370:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017372:	47b0      	blx	r6
 8017374:	2800      	cmp	r0, #0
 8017376:	dc08      	bgt.n	801738a <__sflush_r+0xfa>
 8017378:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801737c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017380:	f04f 30ff 	mov.w	r0, #4294967295
 8017384:	81a3      	strh	r3, [r4, #12]
 8017386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801738a:	4407      	add	r7, r0
 801738c:	eba8 0800 	sub.w	r8, r8, r0
 8017390:	e7e7      	b.n	8017362 <__sflush_r+0xd2>
 8017392:	bf00      	nop
 8017394:	dfbffffe 	.word	0xdfbffffe

08017398 <_fflush_r>:
 8017398:	b538      	push	{r3, r4, r5, lr}
 801739a:	690b      	ldr	r3, [r1, #16]
 801739c:	4605      	mov	r5, r0
 801739e:	460c      	mov	r4, r1
 80173a0:	b913      	cbnz	r3, 80173a8 <_fflush_r+0x10>
 80173a2:	2500      	movs	r5, #0
 80173a4:	4628      	mov	r0, r5
 80173a6:	bd38      	pop	{r3, r4, r5, pc}
 80173a8:	b118      	cbz	r0, 80173b2 <_fflush_r+0x1a>
 80173aa:	6a03      	ldr	r3, [r0, #32]
 80173ac:	b90b      	cbnz	r3, 80173b2 <_fflush_r+0x1a>
 80173ae:	f7ff f939 	bl	8016624 <__sinit>
 80173b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	d0f3      	beq.n	80173a2 <_fflush_r+0xa>
 80173ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80173bc:	07d0      	lsls	r0, r2, #31
 80173be:	d404      	bmi.n	80173ca <_fflush_r+0x32>
 80173c0:	0599      	lsls	r1, r3, #22
 80173c2:	d402      	bmi.n	80173ca <_fflush_r+0x32>
 80173c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80173c6:	f7ff fade 	bl	8016986 <__retarget_lock_acquire_recursive>
 80173ca:	4628      	mov	r0, r5
 80173cc:	4621      	mov	r1, r4
 80173ce:	f7ff ff5f 	bl	8017290 <__sflush_r>
 80173d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80173d4:	4605      	mov	r5, r0
 80173d6:	07da      	lsls	r2, r3, #31
 80173d8:	d4e4      	bmi.n	80173a4 <_fflush_r+0xc>
 80173da:	89a3      	ldrh	r3, [r4, #12]
 80173dc:	059b      	lsls	r3, r3, #22
 80173de:	d4e1      	bmi.n	80173a4 <_fflush_r+0xc>
 80173e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80173e2:	f7ff fad1 	bl	8016988 <__retarget_lock_release_recursive>
 80173e6:	e7dd      	b.n	80173a4 <_fflush_r+0xc>

080173e8 <__swbuf_r>:
 80173e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80173ea:	460e      	mov	r6, r1
 80173ec:	4614      	mov	r4, r2
 80173ee:	4605      	mov	r5, r0
 80173f0:	b118      	cbz	r0, 80173fa <__swbuf_r+0x12>
 80173f2:	6a03      	ldr	r3, [r0, #32]
 80173f4:	b90b      	cbnz	r3, 80173fa <__swbuf_r+0x12>
 80173f6:	f7ff f915 	bl	8016624 <__sinit>
 80173fa:	69a3      	ldr	r3, [r4, #24]
 80173fc:	60a3      	str	r3, [r4, #8]
 80173fe:	89a3      	ldrh	r3, [r4, #12]
 8017400:	071a      	lsls	r2, r3, #28
 8017402:	d501      	bpl.n	8017408 <__swbuf_r+0x20>
 8017404:	6923      	ldr	r3, [r4, #16]
 8017406:	b943      	cbnz	r3, 801741a <__swbuf_r+0x32>
 8017408:	4621      	mov	r1, r4
 801740a:	4628      	mov	r0, r5
 801740c:	f000 f82a 	bl	8017464 <__swsetup_r>
 8017410:	b118      	cbz	r0, 801741a <__swbuf_r+0x32>
 8017412:	f04f 37ff 	mov.w	r7, #4294967295
 8017416:	4638      	mov	r0, r7
 8017418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801741a:	6823      	ldr	r3, [r4, #0]
 801741c:	b2f6      	uxtb	r6, r6
 801741e:	6922      	ldr	r2, [r4, #16]
 8017420:	4637      	mov	r7, r6
 8017422:	1a98      	subs	r0, r3, r2
 8017424:	6963      	ldr	r3, [r4, #20]
 8017426:	4283      	cmp	r3, r0
 8017428:	dc05      	bgt.n	8017436 <__swbuf_r+0x4e>
 801742a:	4621      	mov	r1, r4
 801742c:	4628      	mov	r0, r5
 801742e:	f7ff ffb3 	bl	8017398 <_fflush_r>
 8017432:	2800      	cmp	r0, #0
 8017434:	d1ed      	bne.n	8017412 <__swbuf_r+0x2a>
 8017436:	68a3      	ldr	r3, [r4, #8]
 8017438:	3b01      	subs	r3, #1
 801743a:	60a3      	str	r3, [r4, #8]
 801743c:	6823      	ldr	r3, [r4, #0]
 801743e:	1c5a      	adds	r2, r3, #1
 8017440:	6022      	str	r2, [r4, #0]
 8017442:	701e      	strb	r6, [r3, #0]
 8017444:	1c43      	adds	r3, r0, #1
 8017446:	6962      	ldr	r2, [r4, #20]
 8017448:	429a      	cmp	r2, r3
 801744a:	d004      	beq.n	8017456 <__swbuf_r+0x6e>
 801744c:	89a3      	ldrh	r3, [r4, #12]
 801744e:	07db      	lsls	r3, r3, #31
 8017450:	d5e1      	bpl.n	8017416 <__swbuf_r+0x2e>
 8017452:	2e0a      	cmp	r6, #10
 8017454:	d1df      	bne.n	8017416 <__swbuf_r+0x2e>
 8017456:	4621      	mov	r1, r4
 8017458:	4628      	mov	r0, r5
 801745a:	f7ff ff9d 	bl	8017398 <_fflush_r>
 801745e:	2800      	cmp	r0, #0
 8017460:	d0d9      	beq.n	8017416 <__swbuf_r+0x2e>
 8017462:	e7d6      	b.n	8017412 <__swbuf_r+0x2a>

08017464 <__swsetup_r>:
 8017464:	b538      	push	{r3, r4, r5, lr}
 8017466:	4b29      	ldr	r3, [pc, #164]	@ (801750c <__swsetup_r+0xa8>)
 8017468:	4605      	mov	r5, r0
 801746a:	460c      	mov	r4, r1
 801746c:	6818      	ldr	r0, [r3, #0]
 801746e:	b118      	cbz	r0, 8017478 <__swsetup_r+0x14>
 8017470:	6a03      	ldr	r3, [r0, #32]
 8017472:	b90b      	cbnz	r3, 8017478 <__swsetup_r+0x14>
 8017474:	f7ff f8d6 	bl	8016624 <__sinit>
 8017478:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801747c:	0719      	lsls	r1, r3, #28
 801747e:	d422      	bmi.n	80174c6 <__swsetup_r+0x62>
 8017480:	06da      	lsls	r2, r3, #27
 8017482:	d407      	bmi.n	8017494 <__swsetup_r+0x30>
 8017484:	2209      	movs	r2, #9
 8017486:	602a      	str	r2, [r5, #0]
 8017488:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801748c:	f04f 30ff 	mov.w	r0, #4294967295
 8017490:	81a3      	strh	r3, [r4, #12]
 8017492:	e033      	b.n	80174fc <__swsetup_r+0x98>
 8017494:	0758      	lsls	r0, r3, #29
 8017496:	d512      	bpl.n	80174be <__swsetup_r+0x5a>
 8017498:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801749a:	b141      	cbz	r1, 80174ae <__swsetup_r+0x4a>
 801749c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80174a0:	4299      	cmp	r1, r3
 80174a2:	d002      	beq.n	80174aa <__swsetup_r+0x46>
 80174a4:	4628      	mov	r0, r5
 80174a6:	f7ff fa7d 	bl	80169a4 <_free_r>
 80174aa:	2300      	movs	r3, #0
 80174ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80174ae:	89a3      	ldrh	r3, [r4, #12]
 80174b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80174b4:	81a3      	strh	r3, [r4, #12]
 80174b6:	2300      	movs	r3, #0
 80174b8:	6063      	str	r3, [r4, #4]
 80174ba:	6923      	ldr	r3, [r4, #16]
 80174bc:	6023      	str	r3, [r4, #0]
 80174be:	89a3      	ldrh	r3, [r4, #12]
 80174c0:	f043 0308 	orr.w	r3, r3, #8
 80174c4:	81a3      	strh	r3, [r4, #12]
 80174c6:	6923      	ldr	r3, [r4, #16]
 80174c8:	b94b      	cbnz	r3, 80174de <__swsetup_r+0x7a>
 80174ca:	89a3      	ldrh	r3, [r4, #12]
 80174cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80174d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80174d4:	d003      	beq.n	80174de <__swsetup_r+0x7a>
 80174d6:	4621      	mov	r1, r4
 80174d8:	4628      	mov	r0, r5
 80174da:	f000 f894 	bl	8017606 <__smakebuf_r>
 80174de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80174e2:	f013 0201 	ands.w	r2, r3, #1
 80174e6:	d00a      	beq.n	80174fe <__swsetup_r+0x9a>
 80174e8:	2200      	movs	r2, #0
 80174ea:	60a2      	str	r2, [r4, #8]
 80174ec:	6962      	ldr	r2, [r4, #20]
 80174ee:	4252      	negs	r2, r2
 80174f0:	61a2      	str	r2, [r4, #24]
 80174f2:	6922      	ldr	r2, [r4, #16]
 80174f4:	b942      	cbnz	r2, 8017508 <__swsetup_r+0xa4>
 80174f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80174fa:	d1c5      	bne.n	8017488 <__swsetup_r+0x24>
 80174fc:	bd38      	pop	{r3, r4, r5, pc}
 80174fe:	0799      	lsls	r1, r3, #30
 8017500:	bf58      	it	pl
 8017502:	6962      	ldrpl	r2, [r4, #20]
 8017504:	60a2      	str	r2, [r4, #8]
 8017506:	e7f4      	b.n	80174f2 <__swsetup_r+0x8e>
 8017508:	2000      	movs	r0, #0
 801750a:	e7f7      	b.n	80174fc <__swsetup_r+0x98>
 801750c:	2000014c 	.word	0x2000014c

08017510 <memmove>:
 8017510:	4288      	cmp	r0, r1
 8017512:	b510      	push	{r4, lr}
 8017514:	eb01 0402 	add.w	r4, r1, r2
 8017518:	d902      	bls.n	8017520 <memmove+0x10>
 801751a:	4284      	cmp	r4, r0
 801751c:	4623      	mov	r3, r4
 801751e:	d807      	bhi.n	8017530 <memmove+0x20>
 8017520:	1e43      	subs	r3, r0, #1
 8017522:	42a1      	cmp	r1, r4
 8017524:	d008      	beq.n	8017538 <memmove+0x28>
 8017526:	f811 2b01 	ldrb.w	r2, [r1], #1
 801752a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801752e:	e7f8      	b.n	8017522 <memmove+0x12>
 8017530:	4402      	add	r2, r0
 8017532:	4601      	mov	r1, r0
 8017534:	428a      	cmp	r2, r1
 8017536:	d100      	bne.n	801753a <memmove+0x2a>
 8017538:	bd10      	pop	{r4, pc}
 801753a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801753e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017542:	e7f7      	b.n	8017534 <memmove+0x24>

08017544 <memchr>:
 8017544:	b2c9      	uxtb	r1, r1
 8017546:	4603      	mov	r3, r0
 8017548:	4402      	add	r2, r0
 801754a:	b510      	push	{r4, lr}
 801754c:	4293      	cmp	r3, r2
 801754e:	4618      	mov	r0, r3
 8017550:	d101      	bne.n	8017556 <memchr+0x12>
 8017552:	2000      	movs	r0, #0
 8017554:	e003      	b.n	801755e <memchr+0x1a>
 8017556:	7804      	ldrb	r4, [r0, #0]
 8017558:	3301      	adds	r3, #1
 801755a:	428c      	cmp	r4, r1
 801755c:	d1f6      	bne.n	801754c <memchr+0x8>
 801755e:	bd10      	pop	{r4, pc}

08017560 <_realloc_r>:
 8017560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017564:	4680      	mov	r8, r0
 8017566:	4615      	mov	r5, r2
 8017568:	460c      	mov	r4, r1
 801756a:	b921      	cbnz	r1, 8017576 <_realloc_r+0x16>
 801756c:	4611      	mov	r1, r2
 801756e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017572:	f7fe bf3f 	b.w	80163f4 <_malloc_r>
 8017576:	b92a      	cbnz	r2, 8017584 <_realloc_r+0x24>
 8017578:	f7ff fa14 	bl	80169a4 <_free_r>
 801757c:	2400      	movs	r4, #0
 801757e:	4620      	mov	r0, r4
 8017580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017584:	f000 f89e 	bl	80176c4 <_malloc_usable_size_r>
 8017588:	4285      	cmp	r5, r0
 801758a:	4606      	mov	r6, r0
 801758c:	d802      	bhi.n	8017594 <_realloc_r+0x34>
 801758e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8017592:	d8f4      	bhi.n	801757e <_realloc_r+0x1e>
 8017594:	4629      	mov	r1, r5
 8017596:	4640      	mov	r0, r8
 8017598:	f7fe ff2c 	bl	80163f4 <_malloc_r>
 801759c:	4607      	mov	r7, r0
 801759e:	2800      	cmp	r0, #0
 80175a0:	d0ec      	beq.n	801757c <_realloc_r+0x1c>
 80175a2:	42b5      	cmp	r5, r6
 80175a4:	462a      	mov	r2, r5
 80175a6:	4621      	mov	r1, r4
 80175a8:	bf28      	it	cs
 80175aa:	4632      	movcs	r2, r6
 80175ac:	f7ff f9ed 	bl	801698a <memcpy>
 80175b0:	4621      	mov	r1, r4
 80175b2:	4640      	mov	r0, r8
 80175b4:	463c      	mov	r4, r7
 80175b6:	f7ff f9f5 	bl	80169a4 <_free_r>
 80175ba:	e7e0      	b.n	801757e <_realloc_r+0x1e>

080175bc <__swhatbuf_r>:
 80175bc:	b570      	push	{r4, r5, r6, lr}
 80175be:	460c      	mov	r4, r1
 80175c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80175c4:	b096      	sub	sp, #88	@ 0x58
 80175c6:	4615      	mov	r5, r2
 80175c8:	2900      	cmp	r1, #0
 80175ca:	461e      	mov	r6, r3
 80175cc:	da0c      	bge.n	80175e8 <__swhatbuf_r+0x2c>
 80175ce:	89a3      	ldrh	r3, [r4, #12]
 80175d0:	2100      	movs	r1, #0
 80175d2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80175d6:	bf14      	ite	ne
 80175d8:	2340      	movne	r3, #64	@ 0x40
 80175da:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80175de:	2000      	movs	r0, #0
 80175e0:	6031      	str	r1, [r6, #0]
 80175e2:	602b      	str	r3, [r5, #0]
 80175e4:	b016      	add	sp, #88	@ 0x58
 80175e6:	bd70      	pop	{r4, r5, r6, pc}
 80175e8:	466a      	mov	r2, sp
 80175ea:	f000 f849 	bl	8017680 <_fstat_r>
 80175ee:	2800      	cmp	r0, #0
 80175f0:	dbed      	blt.n	80175ce <__swhatbuf_r+0x12>
 80175f2:	9901      	ldr	r1, [sp, #4]
 80175f4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80175f8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80175fc:	4259      	negs	r1, r3
 80175fe:	4159      	adcs	r1, r3
 8017600:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017604:	e7eb      	b.n	80175de <__swhatbuf_r+0x22>

08017606 <__smakebuf_r>:
 8017606:	898b      	ldrh	r3, [r1, #12]
 8017608:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801760a:	079d      	lsls	r5, r3, #30
 801760c:	4606      	mov	r6, r0
 801760e:	460c      	mov	r4, r1
 8017610:	d507      	bpl.n	8017622 <__smakebuf_r+0x1c>
 8017612:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017616:	6023      	str	r3, [r4, #0]
 8017618:	6123      	str	r3, [r4, #16]
 801761a:	2301      	movs	r3, #1
 801761c:	6163      	str	r3, [r4, #20]
 801761e:	b003      	add	sp, #12
 8017620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017622:	ab01      	add	r3, sp, #4
 8017624:	466a      	mov	r2, sp
 8017626:	f7ff ffc9 	bl	80175bc <__swhatbuf_r>
 801762a:	9f00      	ldr	r7, [sp, #0]
 801762c:	4605      	mov	r5, r0
 801762e:	4630      	mov	r0, r6
 8017630:	4639      	mov	r1, r7
 8017632:	f7fe fedf 	bl	80163f4 <_malloc_r>
 8017636:	b948      	cbnz	r0, 801764c <__smakebuf_r+0x46>
 8017638:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801763c:	059a      	lsls	r2, r3, #22
 801763e:	d4ee      	bmi.n	801761e <__smakebuf_r+0x18>
 8017640:	f023 0303 	bic.w	r3, r3, #3
 8017644:	f043 0302 	orr.w	r3, r3, #2
 8017648:	81a3      	strh	r3, [r4, #12]
 801764a:	e7e2      	b.n	8017612 <__smakebuf_r+0xc>
 801764c:	89a3      	ldrh	r3, [r4, #12]
 801764e:	6020      	str	r0, [r4, #0]
 8017650:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017654:	81a3      	strh	r3, [r4, #12]
 8017656:	9b01      	ldr	r3, [sp, #4]
 8017658:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801765c:	b15b      	cbz	r3, 8017676 <__smakebuf_r+0x70>
 801765e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017662:	4630      	mov	r0, r6
 8017664:	f000 f81e 	bl	80176a4 <_isatty_r>
 8017668:	b128      	cbz	r0, 8017676 <__smakebuf_r+0x70>
 801766a:	89a3      	ldrh	r3, [r4, #12]
 801766c:	f023 0303 	bic.w	r3, r3, #3
 8017670:	f043 0301 	orr.w	r3, r3, #1
 8017674:	81a3      	strh	r3, [r4, #12]
 8017676:	89a3      	ldrh	r3, [r4, #12]
 8017678:	431d      	orrs	r5, r3
 801767a:	81a5      	strh	r5, [r4, #12]
 801767c:	e7cf      	b.n	801761e <__smakebuf_r+0x18>
	...

08017680 <_fstat_r>:
 8017680:	b538      	push	{r3, r4, r5, lr}
 8017682:	2300      	movs	r3, #0
 8017684:	4d06      	ldr	r5, [pc, #24]	@ (80176a0 <_fstat_r+0x20>)
 8017686:	4604      	mov	r4, r0
 8017688:	4608      	mov	r0, r1
 801768a:	4611      	mov	r1, r2
 801768c:	602b      	str	r3, [r5, #0]
 801768e:	f7ed fdc8 	bl	8005222 <_fstat>
 8017692:	1c43      	adds	r3, r0, #1
 8017694:	d102      	bne.n	801769c <_fstat_r+0x1c>
 8017696:	682b      	ldr	r3, [r5, #0]
 8017698:	b103      	cbz	r3, 801769c <_fstat_r+0x1c>
 801769a:	6023      	str	r3, [r4, #0]
 801769c:	bd38      	pop	{r3, r4, r5, pc}
 801769e:	bf00      	nop
 80176a0:	20013558 	.word	0x20013558

080176a4 <_isatty_r>:
 80176a4:	b538      	push	{r3, r4, r5, lr}
 80176a6:	2300      	movs	r3, #0
 80176a8:	4d05      	ldr	r5, [pc, #20]	@ (80176c0 <_isatty_r+0x1c>)
 80176aa:	4604      	mov	r4, r0
 80176ac:	4608      	mov	r0, r1
 80176ae:	602b      	str	r3, [r5, #0]
 80176b0:	f7ed fdc7 	bl	8005242 <_isatty>
 80176b4:	1c43      	adds	r3, r0, #1
 80176b6:	d102      	bne.n	80176be <_isatty_r+0x1a>
 80176b8:	682b      	ldr	r3, [r5, #0]
 80176ba:	b103      	cbz	r3, 80176be <_isatty_r+0x1a>
 80176bc:	6023      	str	r3, [r4, #0]
 80176be:	bd38      	pop	{r3, r4, r5, pc}
 80176c0:	20013558 	.word	0x20013558

080176c4 <_malloc_usable_size_r>:
 80176c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80176c8:	1f18      	subs	r0, r3, #4
 80176ca:	2b00      	cmp	r3, #0
 80176cc:	bfbc      	itt	lt
 80176ce:	580b      	ldrlt	r3, [r1, r0]
 80176d0:	18c0      	addlt	r0, r0, r3
 80176d2:	4770      	bx	lr

080176d4 <_init>:
 80176d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176d6:	bf00      	nop
 80176d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80176da:	bc08      	pop	{r3}
 80176dc:	469e      	mov	lr, r3
 80176de:	4770      	bx	lr

080176e0 <_fini>:
 80176e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176e2:	bf00      	nop
 80176e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80176e6:	bc08      	pop	{r3}
 80176e8:	469e      	mov	lr, r3
 80176ea:	4770      	bx	lr
